##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:02 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\LoadReport.cpp                  #
#    Command line    =  D:\S2Prog\Shared\Src\LoadReport.cpp --fpu None -D    #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\LoadReport.lst              #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\LoadReport.r79               #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\LoadReport.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy()
   \                     ??_Tidy:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      ??_Tidy_2
   \   00000014   040084E5           STR      R0,[R4, #+4]
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy_2:
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000024   1040BDE8           POP      {R4,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   2E00000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   0200001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000030   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   00000034   002094E5           LDR      R2,[R4, #+0]
   \   00000038   046094E5           LDR      R6,[R4, #+4]
   \   0000003C   026046E0           SUB      R6,R6,R2
   \   00000040   260153E1           CMP      R3,R6, LSR #+2
   \   00000044   0700008A           BHI      ??_Assign_3
   \   00000048   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000004C   040095E5           LDR      R0,[R5, #+4]
   \   00000050   001095E5           LDR      R1,[R5, #+0]
   \   00000054   010040E0           SUB      R0,R0,R1
   \   00000058   001094E5           LDR      R1,[R4, #+0]
   \   0000005C   2001A0E1           LSR      R0,R0,#+2
   \   00000060   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000064   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000068   086094E5           LDR      R6,[R4, #+8]
   \   0000006C   026046E0           SUB      R6,R6,R2
   \   00000070   260153E1           CMP      R3,R6, LSR #+2
   \   00000074   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000078   000052E3           CMP      R2,#+0
   \   0000007C   0100000A           BEQ      ??_Assign_7
   \   00000080   0200A0E1           MOV      R0,R2
   \   00000084   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000088   040095E5           LDR      R0,[R5, #+4]
   \   0000008C   001095E5           LDR      R1,[R5, #+0]
   \   00000090   016040E0           SUB      R6,R0,R1
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000009C   000056E3           CMP      R6,#+0
   \   000000A0   0A00000A           BEQ      ??_Assign_1
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000AC   000084E5           STR      R0,[R4, #+0]
   \   000000B0   0020A0E1           MOV      R2,R0
   \   000000B4   042084E5           STR      R2,[R4, #+4]
   \   000000B8   020086E0           ADD      R0,R6,R2
   \   000000BC   080084E5           STR      R0,[R4, #+8]
   \   000000C0   041095E5           LDR      R1,[R5, #+4]
   \   000000C4   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000C8   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000CC   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D0   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000D4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   00000018   1C009FE5           LDR      R0,??AnsiString_3  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_3:
   \   0000003C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          LoadReport *LoadReport::LoadReportPtr = NULL;
   \                     ??LoadReportPtr:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          LoadReport::LoadReport(void):PRogramObject( false ) {
   \                     ??LoadReport:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   ........           _BLF     ??PRogramObject,??PRogramObject??rA
   \   00000010   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   520F84E2           ADD      R0,R4,#+328
   \   0000001C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000020   570F84E2           ADD      R0,R4,#+348
   \   00000024   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000028   5E0F84E2           ADD      R0,R4,#+376
   \   0000002C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000030   650F84E2           ADD      R0,R4,#+404
   \   00000034   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000038   6C0F84E2           ADD      R0,R4,#+432
   \   0000003C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000040   730F84E2           ADD      R0,R4,#+460
   \   00000044   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000048   7A0F84E2           ADD      R0,R4,#+488
   \   0000004C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000050   810F84E2           ADD      R0,R4,#+516
   \   00000054   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000058   880F84E2           ADD      R0,R4,#+544
   \   0000005C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000060   8F0F84E2           ADD      R0,R4,#+572
   \   00000064   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000068   960F84E2           ADD      R0,R4,#+600
   \   0000006C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000070   9D0F84E2           ADD      R0,R4,#+628
   \   00000074   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     12              IDNumber = (C_PRO_LOADREPORT << 16) + 1;
   \   00000078   4103A0E3           MOV      R0,#+67108865
   \   0000007C   740880E3           ORR      R0,R0,#0x740000
   \   00000080   9C0084E5           STR      R0,[R4, #+156]
     13          
     14              BillLoading         = 0.0;
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   540184E5           STR      R0,[R4, #+340]
     15              BillOfLadingVolume  = 0.0;
   \   0000008C   580184E5           STR      R0,[R4, #+344]
     16              DraftFore           = 0.0;
   \   00000090   900284E5           STR      R0,[R4, #+656]
     17              DraftMid            = 0.0;
   \   00000094   940284E5           STR      R0,[R4, #+660]
     18              DraftAft            = 0.0;
   \   00000098   980284E5           STR      R0,[R4, #+664]
     19              /*
     20              LoadPort 		= "";
     21              DestPort 		= "";
     22              Voyage 			= "";
     23              Start 			= "";
     24              Stop 				= "";
     25              Inspection	= "";
     26              ShipName 		= "";
     27              ShipTitle 	= "";
     28              SurvName 		= "";
     29              SurvTitle   = "";
     30              Remark1 		= "";
     31              DraftFore 	= "";
     32              DraftMid 		= "";
     33              DraftAft 		= "";
     34              */
     35          }
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   1040BDE8           POP      {R4,LR}
   \   000000A4   1EFF2FE1           BX       LR               ;; return
     36          //---------------------------------------------------------------------------
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          LoadReport::~LoadReport(void) {
   \                     `?~LoadReport`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   3600000A           BEQ      `?~LoadReport_1`
   \   00000014   ........           LDR      R0,??DataTable1  ;; ??__vtbl
     39              //Only increase: NumberOfPRO--;
     40          /*  if(HighPressurePtr){
     41                  delete HighPressurePtr;
     42                  HighPressurePtr = NULL;
     43              }   */
     44          }
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   9D0F84E2           ADD      R0,R4,#+628
   \   00000028   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   0110A0E3           MOV      R1,#+1
   \   00000034   960F84E2           ADD      R0,R4,#+600
   \   00000038   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000003C   0020A0E3           MOV      R2,#+0
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   8F0F84E2           ADD      R0,R4,#+572
   \   00000048   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   880F84E2           ADD      R0,R4,#+544
   \   00000058   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   810F84E2           ADD      R0,R4,#+516
   \   00000068   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   7A0F84E2           ADD      R0,R4,#+488
   \   00000078   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   730F84E2           ADD      R0,R4,#+460
   \   00000088   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   6C0F84E2           ADD      R0,R4,#+432
   \   00000098   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   650F84E2           ADD      R0,R4,#+404
   \   000000A8   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   0110A0E3           MOV      R1,#+1
   \   000000B4   5E0F84E2           ADD      R0,R4,#+376
   \   000000B8   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   570F84E2           ADD      R0,R4,#+348
   \   000000C8   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   000000CC   520F84E2           ADD      R0,R4,#+328
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           _BLF     `?~PRogramObject`,`?~PRogramObject??rA`
   \   000000E0   010015E3           TST      R5,#0x1
   \   000000E4   0100000A           BEQ      `?~LoadReport_1`
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~LoadReport_1`:
   \   000000F0   ........           B        ?Subroutine18

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine18:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     45          //---------------------------------------------------------------------------
     46          
     47          ///////////////////////////////////////////////////////////////
     48          //
     49          // Routines for Saving of Settings
     50          //
     51          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     52          void LoadReport::SaveSettings(TSNConfigString *SettingsString) {
     53          }
   \                     ??SaveSettings:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          bool LoadReport::RestoreSettings(TSNConfigString *SettingsString) {
     56              bool NoError = true;
     57              return NoError;
   \                     ??RestoreSettings:
   \   00000000   ........           B        ?Subroutine19
     58          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
     59          
     60          
     61          ///////////////////////////////////////////////////////////////
     62          //
     63          // Routines for the librarian
     64          //
     65          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     66          int LoadReport::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     67              int Status = GETVAL_NO_ERR;
     68              switch ( ValueId ) {
   \   00000004   1C729FE5           LDR      R7,??GetValue_3  ;; ??TXUSystemData
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   24009DE5           LDR      R0,[SP, #+36]
   \   00000010   00C097E5           LDR      R12,[R7, #+0]
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   28309DE5           LDR      R3,[SP, #+40]
   \   0000001C   0040A0E3           MOV      R4,#+0
   \   00000020   03E0A0E3           MOV      LR,#+3
   \   00000024   0170A0E3           MOV      R7,#+1
   \   00000028   1080A0E3           MOV      R8,#+16
   \   0000002C   0290A0E3           MOV      R9,#+2
   \   00000030   41A041E2           SUB      R10,R1,#+65
   \   00000034   60AE4AE2           SUB      R10,R10,#+1536
   \   00000038   17005AE3           CMP      R10,#+23
   \   0000003C   6F00008A           BHI      ??GetValue_4
   \   00000040   01BF8FE2           ADR      R11,??GetValue_1
   \   00000044   0AB0DBE7           LDRB     R11,[R11, R10]
   \   00000048   0BF18FE0           ADD      PC,PC,R11, LSL #+2
   \                     ??GetValue_1:
   \   0000004C   056C6C6C           DC8      +5,+108,+108,+108
   \   00000050   6C6C6C6C           DC8      +108,+108,+108,+108
   \   00000054   6C6C6C6C           DC8      +108,+108,+108,+108
   \   00000058   0E12161A           DC8      +14,+18,+22,+26
   \   0000005C   1F252C3A           DC8      +31,+37,+44,+58
   \   00000060   4F0A5A65           DC8      +79,+10,+90,+101
     69              case SVT_LR_BILL_LOADING:
     70                  DecPnt     = 1;
   \                     ??GetValue_5:
   \   00000064   007080E5           STR      R7,[R0, #+0]
     71                  Unit       = WEIGHT_UNIT;
   \   00000068   00E083E5           STR      LR,[R3, #+0]
     72                  MyRetValue = BillLoading;
   \   0000006C   540196E5           LDR      R0,[R6, #+340]
   \                     ??GetValue_6:
   \   00000070   000085E5           STR      R0,[R5, #+0]
   \   00000074   680000EA           B        ??GetValue_7
     73                  break;
     74              case SVT_LR_BILL_LOADING_VOL:
     75                  DecPnt     = 1;
   \                     ??GetValue_8:
   \   00000078   007080E5           STR      R7,[R0, #+0]
     76                  Unit       = VOLUME_UNIT;
   \   0000007C   009083E5           STR      R9,[R3, #+0]
     77                  MyRetValue = BillOfLadingVolume;
   \   00000080   580196E5           LDR      R0,[R6, #+344]
   \   00000084   F9FFFFEA           B        ??GetValue_6
     78                  break;
     79              case SVT_LR_DF   :
     80                  DecPnt     = 2;
   \                     ??GetValue_9:
   \   00000088   009080E5           STR      R9,[R0, #+0]
     81                  Unit       = LENGTH_UNIT;
   \   0000008C   007083E5           STR      R7,[R3, #+0]
     82                  MyRetValue = DraftFore;
   \   00000090   900296E5           LDR      R0,[R6, #+656]
   \                     ??GetValue_10:
   \   00000094   F5FFFFEA           B        ??GetValue_6
     83                  break;
     84              case SVT_LR_DMID            :
     85                  DecPnt     = 2;
   \                     ??GetValue_11:
   \   00000098   009080E5           STR      R9,[R0, #+0]
     86                  Unit       = LENGTH_UNIT;
   \   0000009C   007083E5           STR      R7,[R3, #+0]
     87                  MyRetValue = DraftMid;
   \   000000A0   940296E5           LDR      R0,[R6, #+660]
   \   000000A4   F1FFFFEA           B        ??GetValue_6
     88                  break;
     89              case SVT_LR_DA              :
     90                  DecPnt     = 2;
   \                     ??GetValue_12:
   \   000000A8   009080E5           STR      R9,[R0, #+0]
     91                  Unit       = LENGTH_UNIT;
   \   000000AC   007083E5           STR      R7,[R3, #+0]
     92                  MyRetValue = DraftAft;
   \   000000B0   980296E5           LDR      R0,[R6, #+664]
   \   000000B4   EDFFFFEA           B        ??GetValue_6
     93                  break;
     94              case SVT_LR_SHIP_FIGURES:
     95                  DecPnt     = 1;
   \                     ??GetValue_13:
   \   000000B8   007080E5           STR      R7,[R0, #+0]
     96                  Unit       = WEIGHT_UNIT;
   \   000000BC   00E083E5           STR      LR,[R3, #+0]
     97                  MyRetValue = GetTotalWeight();
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   ........           BL       ??GetTotalWeight
   \   000000C8   E8FFFFEA           B        ??GetValue_6
     98                  break;
     99              case SVT_LR_SHIP_VOL_FIGURES:
    100                  DecPnt     = 1;
   \                     ??GetValue_14:
   \   000000CC   007080E5           STR      R7,[R0, #+0]
    101                  Unit       = VOLUME_UNIT;
   \   000000D0   009083E5           STR      R9,[R3, #+0]
    102                  MyRetValue = GetTotalVolume();
   \   000000D4   0600A0E1           MOV      R0,R6
   \   000000D8   ........           BL       ??GetTotalVolume
   \   000000DC   000085E5           STR      R0,[R5, #+0]
   \   000000E0   4D0000EA           B        ??GetValue_7
    103                  break;
    104              case SVT_LR_DIFFERENCE_WGT  :
    105                  DecPnt     = 1;
   \                     ??GetValue_15:
   \   000000E4   007080E5           STR      R7,[R0, #+0]
    106                  Unit       = WEIGHT_UNIT;
   \   000000E8   00E083E5           STR      LR,[R3, #+0]
    107                  MyRetValue = GetTotalWeight() - BillLoading;
   \   000000EC   0600A0E1           MOV      R0,R6
   \   000000F0   ........           BL       ??GetTotalWeight
   \   000000F4   541196E5           LDR      R1,[R6, #+340]
   \   000000F8   ........           _BLF     __fSub,??__fSub??rA
   \   000000FC   DBFFFFEA           B        ??GetValue_6
    108                  break;
    109              case SVT_LR_DIFFERENCE_VOL  :
    110                  DecPnt     = 1;
   \                     ??GetValue_16:
   \   00000100   007080E5           STR      R7,[R0, #+0]
    111                  Unit       = VOLUME_UNIT;
   \   00000104   009083E5           STR      R9,[R3, #+0]
    112                  if ( BillOfLadingVolume ) {
   \   00000108   581196E5           LDR      R1,[R6, #+344]
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   0400000A           BEQ      ??GetValue_17
    113                      MyRetValue = GetTotalVolume() - BillOfLadingVolume;
   \   0000011C   0600A0E1           MOV      R0,R6
   \   00000120   ........           BL       ??GetTotalVolume
   \   00000124   581196E5           LDR      R1,[R6, #+344]
   \   00000128   ........           _BLF     __fSub,??__fSub??rA
   \   0000012C   CFFFFFEA           B        ??GetValue_6
    114                  } else {
    115                      Status = GETVAL_FLOAT_NOT_LEGAL;
   \                     ??GetValue_17:
   \   00000130   0540A0E3           MOV      R4,#+5
   \   00000134   380000EA           B        ??GetValue_7
    116                  }
    117                  break;
    118              case SVT_LR_DIFFERENCE_WGT_PCT  :
    119                  DecPnt     = 2;
   \                     ??GetValue_18:
   \   00000138   009080E5           STR      R9,[R0, #+0]
    120                  Unit       = PERCENT_UNIT;
   \   0000013C   008083E5           STR      R8,[R3, #+0]
    121                  if ( BillLoading ) {
   \   00000140   541196E5           LDR      R1,[R6, #+340]
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   F6FFFF0A           BEQ      ??GetValue_17
    122                      MyRetValue = (GetTotalWeight() - BillLoading) / BillLoading * 100.0;
   \   00000154   0600A0E1           MOV      R0,R6
   \   00000158   ........           BL       ??GetTotalWeight
   \   0000015C   546196E5           LDR      R6,[R6, #+340]
   \                     ??GetValue_19:
   \   00000160   0610A0E1           MOV      R1,R6
   \   00000164   ........           _BLF     __fSub,??__fSub??rA
   \   00000168   0610A0E1           MOV      R1,R6
   \   0000016C   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000170   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   4034A0E3           MOV      R3,#+1073741824
   \   0000017C   593883E3           ORR      R3,R3,#0x590000
   \   00000180   ........           _BLF     __dMul,??__dMul??rA
   \   00000184   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000188   B8FFFFEA           B        ??GetValue_6
    123                  } else {
    124                      Status = GETVAL_FLOAT_NOT_LEGAL;
    125                  }
    126                  break;
    127              case SVT_LR_DIFFERENCE_VOL_PCT  :
    128                  DecPnt     = 2;
   \                     ??GetValue_20:
   \   0000018C   009080E5           STR      R9,[R0, #+0]
    129                  Unit       = PERCENT_UNIT;
   \   00000190   008083E5           STR      R8,[R3, #+0]
    130                  if ( BillOfLadingVolume ) {
   \   00000194   581196E5           LDR      R1,[R6, #+344]
   \   00000198   0000A0E3           MOV      R0,#+0
   \   0000019C   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001A0   000050E3           CMP      R0,#+0
   \   000001A4   E1FFFF0A           BEQ      ??GetValue_17
    131                      MyRetValue = (GetTotalVolume() - BillOfLadingVolume) / BillOfLadingVolume * 100.0;
   \   000001A8   0600A0E1           MOV      R0,R6
   \   000001AC   ........           BL       ??GetTotalVolume
   \   000001B0   586196E5           LDR      R6,[R6, #+344]
   \   000001B4   E9FFFFEA           B        ??GetValue_19
    132                  } else {
    133                      Status = GETVAL_FLOAT_NOT_LEGAL;
    134                  }
    135                  break;
    136              case SVT_LR_TRIM:
    137                  Status = PROSystemData::TXUSystemData->GetValue(SVT_TRIM_M, Index, MyRetValue,  DecPnt, Unit);
   \                     ??GetValue_21:
   \   000001B8   08002DE9           PUSH     {R3}
   \   000001BC   01002DE9           PUSH     {R0}
   \   000001C0   A4409CE5           LDR      R4,[R12, #+164]
   \   000001C4   0530A0E1           MOV      R3,R5
   \   000001C8   244094E5           LDR      R4,[R4, #+36]
   \   000001CC   4B10A0E3           MOV      R1,#+75
   \                     ??GetValue_22:
   \   000001D0   501E81E3           ORR      R1,R1,#0x500
   \   000001D4   0C00A0E1           MOV      R0,R12
   \   000001D8   0FE0A0E1           MOV      LR,PC
   \   000001DC   14FF2FE1           BX       R4
   \   000001E0   0B0000EA           B        ??GetValue_23
    138                  break;
    139              case SVT_LR_LIST:
    140                  Status = PROSystemData::TXUSystemData->GetValue(SVT_LIST_ANGLE_NOSIGN, Index, MyRetValue,  DecPnt, Unit);
   \                     ??GetValue_24:
   \   000001E4   08002DE9           PUSH     {R3}
   \   000001E8   01002DE9           PUSH     {R0}
   \   000001EC   A4409CE5           LDR      R4,[R12, #+164]
   \   000001F0   0530A0E1           MOV      R3,R5
   \   000001F4   244094E5           LDR      R4,[R4, #+36]
   \   000001F8   5410A0E3           MOV      R1,#+84
   \   000001FC   F3FFFFEA           B        ??GetValue_22
    141                  break;
    142              default:
    143                  Status = PRogramObject::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit);
   \                     ??GetValue_4:
   \   00000200   08002DE9           PUSH     {R3}
   \   00000204   01002DE9           PUSH     {R0}
   \   00000208   0530A0E1           MOV      R3,R5
   \   0000020C   0600A0E1           MOV      R0,R6
   \   00000210   ........           _BLF     ??GetValue_2,??GetValue??rA
   \                     ??GetValue_23:
   \   00000214   0040A0E1           MOV      R4,R0
   \   00000218   08D08DE2           ADD      SP,SP,#+8
    144                  break;
    145              }
    146              return (Status);
   \                     ??GetValue_7:
   \   0000021C   0400A0E1           MOV      R0,R4
   \   00000220   F04FBDE8           POP      {R4-R11,LR}
   \   00000224   1EFF2FE1           BX       LR               ;; return
   \                     ??GetValue_3:
   \   00000228   ........           DC32     ??TXUSystemData
    147          }
    148          

   \                                 In segment CODE, align 4, keep-with-next
    149          int LoadReport::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   00C0A0E1           MOV      R12,R0
   \   00000004   0300A0E1           MOV      R0,R3
    150              int Status = GETVAL_NO_ERR;
    151              switch ( ValueId ) {
   \   00000008   ........           LDR      R3,??DataTable13  ;; ??npos
   \   0000000C   30402DE9           PUSH     {R4,R5,LR}
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \   00000014   0040A0E3           MOV      R4,#+0
   \   00000018   42E041E2           SUB      LR,R1,#+66
   \   0000001C   60EE4EE2           SUB      LR,LR,#+1536
   \   00000020   0A005EE3           CMP      LR,#+10
   \   00000024   2800008A           BHI      ??GetStringValue_3
   \   00000028   015F8FE2           ADR      R5,??GetStringValue_1
   \   0000002C   0E50D5E7           LDRB     R5,[R5, LR]
   \   00000030   05F18FE0           ADD      PC,PC,R5, LSL #+2
   \                     ??GetStringValue_1:
   \   00000034   0206090C           DC8      +2,+6,+9,+12
   \   00000038   0F121519           DC8      +15,+18,+21,+25
   \   0000003C   1C1F2200           DC8      +28,+31,+34,+0
    152              case SVT_LR_LOADPORT        :
    153                  MyString = LoadPort;
   \                     ??GetStringValue_4:
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   571F8CE2           ADD      R1,R12,#+348
   \                     ??GetStringValue_5:
   \   00000048   ........           _BLF     ??assign,??assign??rA
   \   0000004C   220000EA           B        ??GetStringValue_6
    154                  break;
    155              case SVT_LR_DESTPORT        :
    156                  MyString = DestPort;
   \                     ??GetStringValue_7:
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   5E1F8CE2           ADD      R1,R12,#+376
   \   00000058   FAFFFFEA           B        ??GetStringValue_5
    157                  break;
    158              case SVT_LR_VOYAGE        :
    159                  MyString = Voyage;
   \                     ??GetStringValue_8:
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   651F8CE2           ADD      R1,R12,#+404
   \   00000064   F7FFFFEA           B        ??GetStringValue_5
    160                  break;
    161              case SVT_LR_START         :
    162                  MyString = Start;
   \                     ??GetStringValue_9:
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   6C1F8CE2           ADD      R1,R12,#+432
   \   00000070   F4FFFFEA           B        ??GetStringValue_5
    163                  break;
    164              case SVT_LR_STOP            :
    165                  MyString = Stop;
   \                     ??GetStringValue_10:
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   731F8CE2           ADD      R1,R12,#+460
   \   0000007C   F1FFFFEA           B        ??GetStringValue_5
    166                  break;
    167              case SVT_LR_INSPECTION  :
    168                  MyString = Inspection;
   \                     ??GetStringValue_11:
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   7A1F8CE2           ADD      R1,R12,#+488
   \   00000088   EEFFFFEA           B        ??GetStringValue_5
    169                  break;
    170              case SVT_LR_SHIP_NAME   :
    171                  MyString = ShipName;
   \                     ??GetStringValue_12:
   \   0000008C   0020A0E3           MOV      R2,#+0
   \   00000090   811F8CE2           ADD      R1,R12,#+516
   \                     ??GetStringValue_13:
   \   00000094   ........           _BLF     ??assign,??assign??rA
   \   00000098   0F0000EA           B        ??GetStringValue_6
    172                  break;
    173              case SVT_LR_SHIP_TITLE  :
    174                  MyString = ShipTitle;
   \                     ??GetStringValue_14:
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   881F8CE2           ADD      R1,R12,#+544
   \   000000A4   E7FFFFEA           B        ??GetStringValue_5
    175                  break;
    176              case SVT_LR_SURV_NAME   :
    177                  MyString = SurvName;
   \                     ??GetStringValue_15:
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   8F1F8CE2           ADD      R1,R12,#+572
   \   000000B0   E4FFFFEA           B        ??GetStringValue_5
    178                  break;
    179              case SVT_LR_SURV_TITLE  :
    180                  MyString = SurvTitle;
   \                     ??GetStringValue_16:
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   961F8CE2           ADD      R1,R12,#+600
   \   000000BC   E1FFFFEA           B        ??GetStringValue_5
    181                  break;
    182              case SVT_LR_REMARK1     :
    183                  MyString = Remark1;
   \                     ??GetStringValue_17:
   \   000000C0   0020A0E3           MOV      R2,#+0
   \   000000C4   9D1F8CE2           ADD      R1,R12,#+628
   \   000000C8   F1FFFFEA           B        ??GetStringValue_13
    184                  break;
    185              default:
    186                  Status = PRogramObject::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_3:
   \   000000CC   0030A0E1           MOV      R3,R0
   \   000000D0   0C00A0E1           MOV      R0,R12
   \   000000D4   ........           _BLF     ??GetStringValue_2,??GetStringValue??rA
   \   000000D8   0040A0E1           MOV      R4,R0
    187                  break;
    188              }
    189              return (Status);
   \                     ??GetStringValue_6:
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0                      REQUIRE ?Subroutine18
   \   000000E0                      ;; // Fall through to label ?Subroutine18
    190          }
    191          

   \                                 In segment CODE, align 4, keep-with-next
    192          int LoadReport::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   B0D04DE2           SUB      SP,SP,#+176
   \   00000008   C880DDE5           LDRB     R8,[SP, #+200]
   \   0000000C   CC509DE5           LDR      R5,[SP, #+204]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0160A0E1           MOV      R6,R1
   \   00000018   0270A0E1           MOV      R7,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    193              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
   \   00000028   04208DE5           STR      R2,[SP, #+4]
    194          
    195              switch ( ValueId ) {
   \   0000002C   410046E2           SUB      R0,R6,#+65
   \   00000030   600E40E2           SUB      R0,R0,#+1536
   \   00000034   150050E3           CMP      R0,#+21
   \   00000038   AF00008A           BHI      ??PutValue_3
   \   0000003C   012F8FE2           ADR      R2,??PutValue_1
   \   00000040   0020D2E7           LDRB     R2,[R2, R0]
   \   00000044   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PutValue_1:
   \   00000048   82050B10           DC8      +130,+5,+11,+16
   \   0000004C   151A1F24           DC8      +21,+26,+31,+36
   \   00000050   2A2F3439           DC8      +42,+47,+52,+57
   \   00000054   3E566CAC           DC8      +62,+86,+108,+172
   \   00000058   ACACACAC           DC8      +172,+172,+172,+172
   \   0000005C   AC970000           DC8      +172,+151,+0,+0
    196              case SVT_LR_LOADPORT        :
    197                  LoadPort = NewValue;
   \                     ??PutValue_4:
   \   00000060   ........           LDR      R0,??DataTable13  ;; ??npos
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   003090E5           LDR      R3,[R0, #+0]
   \   0000006C   570F84E2           ADD      R0,R4,#+348
   \                     ??PutValue_5:
   \   00000070   ........           _BLF     ??assign,??assign??rA
   \   00000074   B00000EA           B        ??PutValue_6
    198                  break;
    199              case SVT_LR_DESTPORT        :
    200                  DestPort = NewValue;
   \                     ??PutValue_7:
   \   00000078   ........           LDR      R0,??DataTable13  ;; ??npos
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   003090E5           LDR      R3,[R0, #+0]
   \   00000084   5E0F84E2           ADD      R0,R4,#+376
   \   00000088   F8FFFFEA           B        ??PutValue_5
    201                  break;
    202              case SVT_LR_VOYAGE        :
    203                  Voyage = NewValue;
   \                     ??PutValue_8:
   \   0000008C   ........           LDR      R0,??DataTable13  ;; ??npos
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   003090E5           LDR      R3,[R0, #+0]
   \   00000098   650F84E2           ADD      R0,R4,#+404
   \                     ??PutValue_9:
   \   0000009C   F3FFFFEA           B        ??PutValue_5
    204                  break;
    205              case SVT_LR_START         :
    206                  Start = NewValue;
   \                     ??PutValue_10:
   \   000000A0   ........           LDR      R0,??DataTable13  ;; ??npos
   \   000000A4   0020A0E3           MOV      R2,#+0
   \   000000A8   003090E5           LDR      R3,[R0, #+0]
   \   000000AC   6C0F84E2           ADD      R0,R4,#+432
   \   000000B0   EEFFFFEA           B        ??PutValue_5
    207                  break;
    208              case SVT_LR_STOP            :
    209                  Stop = NewValue;
   \                     ??PutValue_11:
   \   000000B4   ........           LDR      R0,??DataTable13  ;; ??npos
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   003090E5           LDR      R3,[R0, #+0]
   \   000000C0   730F84E2           ADD      R0,R4,#+460
   \   000000C4   E9FFFFEA           B        ??PutValue_5
    210                  break;
    211              case SVT_LR_INSPECTION  :
    212                  Inspection = NewValue;
   \                     ??PutValue_12:
   \   000000C8   ........           LDR      R0,??DataTable13  ;; ??npos
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   003090E5           LDR      R3,[R0, #+0]
   \   000000D4   7A0F84E2           ADD      R0,R4,#+488
   \   000000D8   E4FFFFEA           B        ??PutValue_5
    213                  break;
    214              case SVT_LR_SHIP_NAME   :
    215                  ShipName = NewValue;
   \                     ??PutValue_13:
   \   000000DC   ........           LDR      R0,??DataTable13  ;; ??npos
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   003090E5           LDR      R3,[R0, #+0]
   \   000000E8   810F84E2           ADD      R0,R4,#+516
   \                     ??PutValue_14:
   \   000000EC   ........           _BLF     ??assign,??assign??rA
   \   000000F0   910000EA           B        ??PutValue_6
    216                  break;
    217              case SVT_LR_SHIP_TITLE  :
    218                  ShipTitle = NewValue;
   \                     ??PutValue_15:
   \   000000F4   ........           LDR      R0,??DataTable13  ;; ??npos
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   003090E5           LDR      R3,[R0, #+0]
   \   00000100   880F84E2           ADD      R0,R4,#+544
   \   00000104   D9FFFFEA           B        ??PutValue_5
    219                  break;
    220              case SVT_LR_SURV_NAME   :
    221                  SurvName = NewValue;
   \                     ??PutValue_16:
   \   00000108   ........           LDR      R0,??DataTable13  ;; ??npos
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   003090E5           LDR      R3,[R0, #+0]
   \   00000114   8F0F84E2           ADD      R0,R4,#+572
   \   00000118   D4FFFFEA           B        ??PutValue_5
    222                  break;
    223              case SVT_LR_SURV_TITLE  :
    224                  SurvTitle = NewValue;
   \                     ??PutValue_17:
   \   0000011C   ........           LDR      R0,??DataTable13  ;; ??npos
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   003090E5           LDR      R3,[R0, #+0]
   \   00000128   960F84E2           ADD      R0,R4,#+600
   \   0000012C   CFFFFFEA           B        ??PutValue_5
    225                  break;
    226              case SVT_LR_REMARK1     :
    227                  Remark1 = NewValue;
   \                     ??PutValue_18:
   \   00000130   ........           LDR      R0,??DataTable13  ;; ??npos
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   003090E5           LDR      R3,[R0, #+0]
   \   0000013C   9D0F84E2           ADD      R0,R4,#+628
   \   00000140   E9FFFFEA           B        ??PutValue_14
    228                  break;
    229              case SVT_LR_DF          :
    230                  DraftFore   = ConvertToSi(NewValue, LENGTH_UNIT, Status, 0.0, 30.0, DraftFore);
   \                     ??PutValue_19:
   \   00000144   08008DE2           ADD      R0,SP,#+8
   \   00000148   ........           _BLF     ??AnsiString,??AnsiString??rA_1
   \   0000014C   0060A0E1           MOV      R6,R0
   \   00000150   900294E5           LDR      R0,[R4, #+656]
   \   00000154   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000158   03002DE9           PUSH     {R0,R1}
   \   0000015C   0000A0E3           MOV      R0,#+0
   \   00000160   4014A0E3           MOV      R1,#+1073741824
   \   00000164   F81981E3           ORR      R1,R1,#0x3E0000
   \   00000168   03002DE9           PUSH     {R0,R1}
   \   0000016C   0010A0E3           MOV      R1,#+0
   \   00000170   03002DE9           PUSH     {R0,R1}
   \   00000174   18208DE2           ADD      R2,SP,#+24
   \   00000178   0800BDE8           POP      {R3}
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   0600A0E1           MOV      R0,R6
   \   00000184   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000188   900284E5           STR      R0,[R4, #+656]
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   0110A0E3           MOV      R1,#+1
   \   00000194   1C008DE2           ADD      R0,SP,#+28
   \                     ??PutValue_20:
   \   00000198   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   0000019C   14D08DE2           ADD      SP,SP,#+20
   \   000001A0   650000EA           B        ??PutValue_6
    231                  break;
    232              case SVT_LR_DMID            :
    233                  DraftMid    = ConvertToSi(NewValue, LENGTH_UNIT, Status, 0.0, 30.0, DraftMid);
   \                     ??PutValue_21:
   \   000001A4   24008DE2           ADD      R0,SP,#+36
   \   000001A8   ........           _BLF     ??AnsiString,??AnsiString??rA_1
   \   000001AC   0060A0E1           MOV      R6,R0
   \   000001B0   940294E5           LDR      R0,[R4, #+660]
   \   000001B4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000001B8   03002DE9           PUSH     {R0,R1}
   \   000001BC   0000A0E3           MOV      R0,#+0
   \   000001C0   4014A0E3           MOV      R1,#+1073741824
   \   000001C4   F81981E3           ORR      R1,R1,#0x3E0000
   \   000001C8   03002DE9           PUSH     {R0,R1}
   \   000001CC   0010A0E3           MOV      R1,#+0
   \   000001D0   03002DE9           PUSH     {R0,R1}
   \   000001D4   18208DE2           ADD      R2,SP,#+24
   \   000001D8   0800BDE8           POP      {R3}
   \   000001DC   0110A0E3           MOV      R1,#+1
   \   000001E0   0600A0E1           MOV      R0,R6
   \   000001E4   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000001E8   940284E5           STR      R0,[R4, #+660]
   \   000001EC   0020A0E3           MOV      R2,#+0
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   38008DE2           ADD      R0,SP,#+56
   \   000001F8   E6FFFFEA           B        ??PutValue_20
    234                  break;
    235              case SVT_LR_DA              :
    236                  DraftAft    = ConvertToSi(NewValue, LENGTH_UNIT, Status, 0.0, 30.0, DraftAft);
   \                     ??PutValue_22:
   \   000001FC   40008DE2           ADD      R0,SP,#+64
   \   00000200   ........           _BLF     ??AnsiString,??AnsiString??rA_1
   \   00000204   0060A0E1           MOV      R6,R0
   \   00000208   980294E5           LDR      R0,[R4, #+664]
   \   0000020C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000210   03002DE9           PUSH     {R0,R1}
   \   00000214   0000A0E3           MOV      R0,#+0
   \   00000218   4014A0E3           MOV      R1,#+1073741824
   \   0000021C   F81981E3           ORR      R1,R1,#0x3E0000
   \   00000220   03002DE9           PUSH     {R0,R1}
   \   00000224   0010A0E3           MOV      R1,#+0
   \   00000228   03002DE9           PUSH     {R0,R1}
   \   0000022C   18208DE2           ADD      R2,SP,#+24
   \   00000230   0800BDE8           POP      {R3}
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   0600A0E1           MOV      R0,R6
   \   0000023C   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000240   980284E5           STR      R0,[R4, #+664]
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   0110A0E3           MOV      R1,#+1
   \   0000024C   54008DE2           ADD      R0,SP,#+84
   \                     ??PutValue_23:
   \   00000250   D0FFFFEA           B        ??PutValue_20
    237                  break;
    238              case SVT_LR_BILL_LOADING:
    239                  BillLoading = ConvertToSi(NewValue, WEIGHT_UNIT, Status, 0.0, 100000, BillLoading);
   \                     ??PutValue_24:
   \   00000254   5C008DE2           ADD      R0,SP,#+92
   \   00000258   ........           _BLF     ??AnsiString,??AnsiString??rA_1
   \   0000025C   0060A0E1           MOV      R6,R0
   \   00000260   540194E5           LDR      R0,[R4, #+340]
   \   00000264   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000268   03002DE9           PUSH     {R0,R1}
   \   0000026C   04119FE5           LDR      R1,??PutValue_25  ;; 0x40f86a00
   \   00000270   0000A0E3           MOV      R0,#+0
   \   00000274   03002DE9           PUSH     {R0,R1}
   \   00000278   0010A0E3           MOV      R1,#+0
   \   0000027C   03002DE9           PUSH     {R0,R1}
   \   00000280   18208DE2           ADD      R2,SP,#+24
   \   00000284   0800BDE8           POP      {R3}
   \   00000288   0310A0E3           MOV      R1,#+3
   \   0000028C   0600A0E1           MOV      R0,R6
   \   00000290   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000294   540184E5           STR      R0,[R4, #+340]
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   70008DE2           ADD      R0,SP,#+112
   \   000002A4   BBFFFFEA           B        ??PutValue_20
    240                  break;
    241              case SVT_LR_BILL_LOADING_VOL:
    242                  BillOfLadingVolume = ConvertToSi(NewValue, VOLUME_UNIT, Status, 0.0, 100000, BillOfLadingVolume);
   \                     ??PutValue_26:
   \   000002A8   78008DE2           ADD      R0,SP,#+120
   \   000002AC   ........           _BLF     ??AnsiString,??AnsiString??rA_1
   \   000002B0   0060A0E1           MOV      R6,R0
   \   000002B4   580194E5           LDR      R0,[R4, #+344]
   \   000002B8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000002BC   03002DE9           PUSH     {R0,R1}
   \   000002C0   B0109FE5           LDR      R1,??PutValue_25  ;; 0x40f86a00
   \   000002C4   0000A0E3           MOV      R0,#+0
   \   000002C8   03002DE9           PUSH     {R0,R1}
   \   000002CC   0010A0E3           MOV      R1,#+0
   \   000002D0   03002DE9           PUSH     {R0,R1}
   \   000002D4   18208DE2           ADD      R2,SP,#+24
   \   000002D8   0800BDE8           POP      {R3}
   \   000002DC   0210A0E3           MOV      R1,#+2
   \   000002E0   0600A0E1           MOV      R0,R6
   \   000002E4   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000002E8   580184E5           STR      R0,[R4, #+344]
   \   000002EC   0020A0E3           MOV      R2,#+0
   \   000002F0   0110A0E3           MOV      R1,#+1
   \   000002F4   8C008DE2           ADD      R0,SP,#+140
   \   000002F8   A6FFFFEA           B        ??PutValue_20
    243                  break;
    244              default:
    245                  Status = PRogramObject::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_3:
   \   000002FC   94008DE2           ADD      R0,SP,#+148
   \   00000300   ........           _BLF     ??AnsiString,??AnsiString??rA_1
   \   00000304   04108DE2           ADD      R1,SP,#+4
   \   00000308   02002DE9           PUSH     {R1}
   \   0000030C   00012DE9           PUSH     {R8}
   \   00000310   0030A0E1           MOV      R3,R0
   \   00000314   0720A0E1           MOV      R2,R7
   \   00000318   0610A0E1           MOV      R1,R6
   \   0000031C   0400A0E1           MOV      R0,R4
   \   00000320   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000324   08008DE5           STR      R0,[SP, #+8]
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   9C008DE2           ADD      R0,SP,#+156
   \   00000334   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   00000338   08D08DE2           ADD      SP,SP,#+8
    246                  break;
    247              }
    248              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_6:
   \   0000033C   00009DE5           LDR      R0,[SP, #+0]
   \   00000340   000050E3           CMP      R0,#+0
   \   00000344   0400001A           BNE      ??PutValue_27
    249                  SetModifiedFlag();
   \   00000348   A41094E5           LDR      R1,[R4, #+164]
   \   0000034C   0400A0E1           MOV      R0,R4
   \   00000350   541091E5           LDR      R1,[R1, #+84]
   \   00000354   0FE0A0E1           MOV      LR,PC
   \   00000358   11FF2FE1           BX       R1
    250              }
    251              if ( UnitId ) {
   \                     ??PutValue_27:
   \   0000035C   000055E3           CMP      R5,#+0
    252                  *UnitId = ValUnitId;
   \   00000360   04009D15           LDRNE    R0,[SP, #+4]
   \   00000364   00008515           STRNE    R0,[R5, #+0]
    253              }
    254              return (Status);
   \   00000368   00009DE5           LDR      R0,[SP, #+0]
   \   0000036C   B0D08DE2           ADD      SP,SP,#+176
   \   00000370   F041BDE8           POP      {R4-R8,LR}
   \   00000374   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_25:
   \   00000378   006AF840           DC32     0x40f86a00
    255          }
    256          

   \                                 In segment CODE, align 4, keep-with-next
    257          int LoadReport::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    258              int Status = E_NO_ERR;
    259              //switch ( ValueId ) {
    260              //   default:
    261              Status = PRogramObject::PutFloatValue(ValueId, NewValue);
    262              //     break;
    263              //}
    264              return (Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine17
   \   00000008                      ;; // Fall through to label ?Subroutine17
    265          
    266          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_I, align 4, align-sorted
    267          ValueList LoadReport::ServiceReportTankValueList[] =  {
   \                     ??ServiceReportTankValueList:
   \   00000000                      DS8 540
   \   0000021C                      REQUIRE `?<Initializer for ServiceReportTankValueList>`
    268              { L_WORD304, L_WORD237, SVT_BLANK },                                               // {"Unused"    ,"",SVT_BLANK},
    269              { L_WORD677, L_WORD445, SVT_LEVEL_REF },                                     // {"Level"     ,"Lev" ,SVT_LEVEL_REF},
    270              { L_WORD308, L_WORD332, SVT_SOUNDING },                                      // {"Sounding"  ,"Snd" ,SVT_SOUNDING},
    271              { L_WORD309, L_WORD333, SVT_ULLAGE },                                        // {"Ullage"    ,"Ull" ,SVT_ULLAGE},
    272              { L_WORD916, L_WORD917, SVT_ULLAGE_UTI },                                    // {"Ullage UTI" ,"UTI" ,SVT_ULLAGE},
    273              { L_WORD1064,L_WORD1065, SVT_ULLAGE_RADAR },                             // {"Ullage Radar" ,"URad",SVT_ULLAGE_RADAR},
    274              { L_WORD44, L_WORD334, SVT_VOLUME },                                        // {"Volume"    ,"Vol" ,SVT_VOLUME},
    275              { L_WORD310, L_WORD335, SVT_VOLPERCENT },                                    // {"Volume%"   ,"Vol%",SVT_VOLPERCENT},
    276              { L_WORD776, L_WORD777, SVT_CAPACITY },                                      // {"Capacity"  ,"Cap" ,SVT_CAPACITY},
    277              { L_WORD45, L_WORD336, SVT_WEIGHT },                                        // {"Weight"    ,"Wgt" ,SVT_WEIGHT},
    278              { L_WORD83, L_WORD337, SVT_DENSITY },                                       // {"Density"   ,"Dens",SVT_DENSITY},
    279              { L_WORD338, L_WORD338, SVT_TEMP },                                          // {"Temp"      ,"Temp",SVT_TEMP},
    280              { L_WORD311, L_WORD339, SVT_PRESSURE },                                      // {"Pressure"  ,"Pres",SVT_PRESSURE},
    281              { L_WORD247, L_WORD344, SVT_LOADRATE },                                       // {"Loadrate"  ,"LRate",SVT_LOADRATE},
    282              { L_WORD314, L_WORD345, SVT_FINISH_TIME },                                   // {"FinishTime","FTim",SVT_FINISH_TIME},
    283              { L_WORD315, L_WORD346, SVT_REMAINING_TIME },                                // {"RemTime"   ,"RTim",SVT_REMAINING_TIME},
    284              { L_WORD316, L_WORD347, SVT_CARGO_TYPE_NAME },                               // {"CargoType" ,"Ctyp",SVT_CARGO_TYPE_NAME},
    285              { L_WORD848, L_WORD849, SVT_INTERFACE },                                      // {"Interface","Intrf",SVT_INTERFACE},
    286              { L_WORD102, L_WORD237, SVT_API },                                             // {"API"          ,"",SVT_API},
    287              { L_WORD394, L_WORD237, SVT_VCF },                                             // {"VolCorrFactor","",SVT_VCF},
    288              { L_WORD395, L_WORD237, SVT_VCF_AT_TEMP },                                     // {"VCF@Temp"     ,"",SVT_VCF_AT_TEMP},
    289              { L_WORD396, L_WORD237, SVT_MEASURED_API },                                    // {"Measured API" ,"",SVT_MEASURED_API},
    290              { L_WORD397, L_WORD237, SVT_COMP_DNS },                                        // {"Comp. Density","",SVT_COMP_DNS},
    291              { L_WORD446, L_WORD237, SVT_MEAS_DNS },                                        // {"Meas. Density","",SVT_MEAS_DNS},
    292                                                                                             //
    293              { L_WORD398, L_WORD237, SVT_REF_DNS1 },                                        // {"Ref.Density1" ,"",SVT_REF_DNS1},
    294              { L_WORD399, L_WORD237, SVT_REF_DNS2 },                                        // {"Ref.Density2" ,"",SVT_REF_DNS2},
    295              { L_WORD400, L_WORD237, SVT_REF_TMP1 },                                        // {"Ref. Temp1"   ,"",SVT_REF_TMP1},
    296              { L_WORD401, L_WORD237, SVT_REF_TMP2 },                                        // {"Ref. Temp2"   ,"",SVT_REF_TMP2},
    297              { L_WORD108, L_WORD237, SVT_COEFF },                                           // {"Coefficient"  ,"",SVT_COEFF},
    298                                                                                             //
    299              { L_WORD404, L_WORD237, SVT_ATM_PRESSURE },                                // {"AtmPress"         ,"",SVT_ATM_PRESSURE},
    300              { L_WORD425, L_WORD237, SVT_TRIM_ANGLE_NOSIGN },                                  // {"Trim in deg"      ,"",SVT_TRIM_ANGLE},
    301              { L_WORD426, L_WORD237, SVT_TRIM_M_NOSIGN },                                      // {"Trim in meter"    ,"",SVT_TRIM_M},
    302              { L_WORD427, L_WORD237, SVT_LIST_ANGLE_NOSIGN },                                  // {"List in deg"      ,"",SVT_LIST_ANGLE},
    303              { L_WORD447, L_WORD237, SVT_LIST_M_NOSIGN },                                      // {"List in meter"    ,"",SVT_LIST_M},
    304              { L_WORD448, L_WORD237, SVT_LATITUDE },                                    // {"Latitude"        ,"",SVT_LATITUDE},
    305          
    306          
    307              { L_WORD430, L_WORD237, SVT_DF_MARK },        // {"DF@Mark"          ,"",SVT_DF_MARK},
    308              { L_WORD431, L_WORD237, SVT_DA_MARK },        // {"DA@Mark"          ,"",SVT_DA_MARK},
    309              { L_WORD432, L_WORD237, SVT_DF_PP },          // {"DF@PP"            ,"",SVT_DF_PP},
    310              { L_WORD433, L_WORD237, SVT_DA_PP },          // {"DA@PP"            ,"",SVT_DA_PP},
    311              { L_WORD421, L_WORD237, SVT_DP },             // {"DP"               ,"",SVT_DP},
    312              { L_WORD422, L_WORD237, SVT_DS },             // {"DS"               ,"",SVT_DS},
    313              { L_WORD1066, L_WORD237, SVT_DFP },           // {"DFP"              ,"",SVT_DFP},
    314              { L_WORD1067, L_WORD237, SVT_DFS },           // {"DFS"              ,"",SVT_DFS},
    315              { L_WORD1066, L_WORD237, SVT_DAP },           // {"DAP"              ,"",SVT_DAP
    316              { L_WORD1067, L_WORD237, SVT_DAS },           // {"DAS"              ,"",SVT_DAS},
    317          };
    318          
    319          

   \                                 In segment CODE, align 4, keep-with-next
    320          ValueList* LoadReport::GetValueInfoTableStatic(int &Entries, int Index) {
    321              Entries = NELEMENTS(ServiceReportTankValueList);
   \                     ??GetValueInfoTableStatic:
   \   00000000   2D10A0E3           MOV      R1,#+45
   \   00000004   001080E5           STR      R1,[R0, #+0]
    322              return (ServiceReportTankValueList);
   \   00000008   00009FE5           LDR      R0,??GetValueInfoTableStatic_1  ;; ??ServiceReportTankValueList
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   \                     ??GetValueInfoTableStatic_1:
   \   00000010   ........           DC32     ??ServiceReportTankValueList
    323          }
    324          

   \                                 In segment CODE, align 4, keep-with-next
    325          int LoadReport::ReceiveData(U8 *data) {
    326              ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading *)data;
    327              switch ( pCH->CommandNo ) {
    328              default:
    329                  return (E_UNKNOWN_COMMAND);
   \                     ??ReceiveData:
   \   00000000                      REQUIRE ?Subroutine19
   \   00000000                      ;; // Fall through to label ?Subroutine19
    330              };
    331          
    332          }
    333          

   \                                 In segment CODE, align 4, keep-with-next
    334          int LoadReport::SendData(U16 cmd) {
    335              switch ( cmd ) {
   \                     ??SendData:
   \   00000000   650051E3           CMP      R1,#+101
    336              case CMD_GENERIC_REALTIME_DATA:
    337                  {
    338                      return (E_OK);
   \   00000004   0000A003           MOVEQ    R0,#+0
   \   00000008   1EFF2F01           BXEQ     LR
    339                  }
    340              default:
    341                  return (E_UNKNOWN_COMMAND);
   \   0000000C   ........           B        ?Subroutine19
    342              };
    343          }
    344          

   \                                 In segment CODE, align 4, keep-with-next
    345          void LoadReport::SetTankVector(vector<PRogramObjectBase *>TVector) {
   \                     ??SetTankVector:
   \   00000000   00402DE9           PUSH     {LR}
    346              TankVector = TVector;
   \   00000004   520F80E2           ADD      R0,R0,#+328
   \   00000008   ........           _BLF     ??_Assign,??_Assign??rA
    347          }
   \   0000000C   ........           B        ?Subroutine17
    348          

   \                                 In segment CODE, align 4, keep-with-next
    349          float LoadReport::GetTotalWeight(void) {
   \                     ??GetTotalWeight:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
    350              float Weight = 0.0;
    351              AnsiString WgtStr = "0.0";
   \   0000000C   ........           ADR      R1,??DataTable15  ;; "0.0"
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
    352              if ( !TankVector.empty() ) {
   \   00000018   526FA0E3           MOV      R6,#+328
   \   0000001C   040086E0           ADD      R0,R6,R4
   \   00000020   041090E5           LDR      R1,[R0, #+4]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   0050A0E3           MOV      R5,#+0
   \   0000002C   000041E0           SUB      R0,R1,R0
   \   00000030   2001B0E1           LSRS     R0,R0,#+2
   \   00000034   1400000A           BEQ      ??GetTotalWeight_1
    353                  for ( unsigned Row = 0; Row < TankVector.size(); Row++ ) {
   \   00000038   0070A0E3           MOV      R7,#+0
   \   0000003C   0C0000EA           B        ??GetTotalWeight_2
    354                      PROTank *tmpPtr = (PROTank *)TankVector[Row];
   \                     ??GetTotalWeight_3:
   \   00000040   040096E7           LDR      R0,[R6, +R4]
   \   00000044   070190E7           LDR      R0,[R0, +R7, LSL #+2]
    355                      if ( tmpPtr ) {
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0700000A           BEQ      ??GetTotalWeight_4
    356                          switch ( tmpPtr->TankType ) {
   \   00000050   541190E5           LDR      R1,[R0, #+340]
   \   00000054   011041E2           SUB      R1,R1,#+1
   \   00000058   070051E3           CMP      R1,#+7
   \   0000005C   0300008A           BHI      ??GetTotalWeight_4
    357                          default:
    358                          case TANKTYPE_SUM		:
    359                              break;
    360                          case TANKTYPE_CARGO		:
    361                          case TANKTYPE_BALLAST	:
    362                          case TANKTYPE_HFO    	:
    363                          case TANKTYPE_DO     	:
    364                          case TANKTYPE_LUB    	:
    365                          case TANKTYPE_FW     	:
    366                          case TANKTYPE_MISC   	:
    367                          case TANKTYPE_VOIDSPACE	:
    368                              Weight += tmpPtr->GetCorrectWeight();
   \   00000060   ........           _BLF     ??GetCorrectWeight,??GetCorrectWeight??rA
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000006C   0050A0E1           MOV      R5,R0
    369                              break;
    370                          }
    371                      }
    372                  }
   \                     ??GetTotalWeight_4:
   \   00000070   017087E2           ADD      R7,R7,#+1
   \                     ??GetTotalWeight_2:
   \   00000074   040086E0           ADD      R0,R6,R4
   \   00000078   041090E5           LDR      R1,[R0, #+4]
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   000041E0           SUB      R0,R1,R0
   \   00000084   200157E1           CMP      R7,R0, LSR #+2
   \   00000088   ECFFFF3A           BCC      ??GetTotalWeight_3
    373              }
    374              return Weight;
   \                     ??GetTotalWeight_1:
   \   0000008C   ........           B        ?Subroutine16
    375          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           _BLF     ??_Tidy_1,??_Tidy??rA_1
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   1CD08DE2           ADD      SP,SP,#+28
   \   00000018   F040BDE8           POP      {R4-R7,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    376          

   \                                 In segment CODE, align 4, keep-with-next
    377          float LoadReport::GetTotalVolume(void) {
   \                     ??GetTotalVolume:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
    378              float Volume = 0.0;
    379              AnsiString VolStr = "0.0";
   \   0000000C   ........           ADR      R1,??DataTable15  ;; "0.0"
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
    380              if ( !TankVector.empty() ) {
   \   00000018   526FA0E3           MOV      R6,#+328
   \   0000001C   040086E0           ADD      R0,R6,R4
   \   00000020   041090E5           LDR      R1,[R0, #+4]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   0050A0E3           MOV      R5,#+0
   \   0000002C   000041E0           SUB      R0,R1,R0
   \   00000030   2001B0E1           LSRS     R0,R0,#+2
   \   00000034   1400000A           BEQ      ??GetTotalVolume_1
    381                  for ( unsigned Row = 0; Row < TankVector.size(); Row++ ) {
   \   00000038   0070A0E3           MOV      R7,#+0
   \   0000003C   0C0000EA           B        ??GetTotalVolume_2
    382                      PROTank *tmpPtr = (PROTank *)TankVector[Row];
   \                     ??GetTotalVolume_3:
   \   00000040   040096E7           LDR      R0,[R6, +R4]
   \   00000044   070190E7           LDR      R0,[R0, +R7, LSL #+2]
    383                      if ( tmpPtr ) {
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0700000A           BEQ      ??GetTotalVolume_4
    384                          switch ( tmpPtr->TankType ) {
   \   00000050   541190E5           LDR      R1,[R0, #+340]
   \   00000054   011041E2           SUB      R1,R1,#+1
   \   00000058   070051E3           CMP      R1,#+7
   \   0000005C   0300008A           BHI      ??GetTotalVolume_4
    385                          default:
    386                          case TANKTYPE_SUM		:
    387                              break;
    388                          case TANKTYPE_CARGO		:
    389                          case TANKTYPE_BALLAST	:
    390                          case TANKTYPE_HFO    	:
    391                          case TANKTYPE_DO     	:
    392                          case TANKTYPE_LUB    	:
    393                          case TANKTYPE_FW     	:
    394                          case TANKTYPE_MISC   	:
    395                          case TANKTYPE_VOIDSPACE	:
    396                              Volume += tmpPtr->VolumeAtRefTmp();
   \   00000060   ........           _BLF     ??VolumeAtRefTmp,??VolumeAtRefTmp??rA
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000006C   0050A0E1           MOV      R5,R0
    397                              break;
    398                          }
    399                      }
    400                  }
   \                     ??GetTotalVolume_4:
   \   00000070   017087E2           ADD      R7,R7,#+1
   \                     ??GetTotalVolume_2:
   \   00000074   040086E0           ADD      R0,R6,R4
   \   00000078   041090E5           LDR      R1,[R0, #+4]
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   000041E0           SUB      R0,R1,R0
   \   00000084   200157E1           CMP      R7,R0, LSR #+2
   \   00000088   ECFFFF3A           BCC      ??GetTotalVolume_3
    401              }
    402              return Volume;
   \                     ??GetTotalVolume_1:
   \   0000008C                      REQUIRE ?Subroutine16
   \   0000008C                      ;; // Fall through to label ?Subroutine16
    403          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ServiceReportTankValueList>`:
   \   00000000   30010000ED00       DC32 304, 237, 1000, 677, 445, 1043, 308, 332, 1027, 309, 333, 1003
   \              0000E8030000
   \              A5020000BD01
   \              000013040000
   \              340100004C01
   \              000003040000
   \              350100004D01
   \              0000EB030000
   \   00000030   940300009503       DC32 916, 917, 1008, 1064, 1065, 1009, 44, 334, 1020, 310, 335, 1022
   \              0000F0030000
   \              280400002904
   \              0000F1030000
   \              2C0000004E01
   \              0000FC030000
   \              360100004F01
   \              0000FE030000
   \   00000060   080300000903       DC32 776, 777, 1031, 45, 336, 1021, 83, 337, 1006, 338, 338, 1004, 311
   \              000007040000
   \              2D0000005001
   \              0000FD030000
   \              530000005101
   \              0000EE030000
   \              520100005201
   \              0000EC030000
   \              37010000    
   \   00000094   530100000004       DC32 339, 1024, 247, 344, 1023, 314, 345, 1053, 315, 346, 1054, 316
   \              0000F7000000
   \              58010000FF03
   \              00003A010000
   \              590100001D04
   \              00003B010000
   \              5A0100001E04
   \              00003C010000
   \   000000C4   5B010000D307       DC32 347, 2003, 848, 849, 1032, 102, 237, 2004, 394, 237, 2005, 395
   \              000050030000
   \              510300000804
   \              000066000000
   \              ED000000D407
   \              00008A010000
   \              ED000000D507
   \              00008B010000
   \   000000F4   ED000000D607       DC32 237, 2006, 396, 237, 2007, 397, 237, 2008, 446, 237, 2009, 398
   \              00008C010000
   \              ED000000D707
   \              00008D010000
   \              ED000000D807
   \              0000BE010000
   \              ED000000D907
   \              00008E010000
   \   00000124   ED000000DB07       DC32 237, 2011, 399, 237, 2012, 400, 237, 2013, 401, 237, 2014, 108
   \              00008F010000
   \              ED000000DC07
   \              000090010000
   \              ED000000DD07
   \              000091010000
   \              ED000000DE07
   \              00006C000000
   \   00000154   ED000000DF07       DC32 237, 2015, 404, 237, 1351, 425, 237, 1359, 426, 237, 1358, 427
   \              000094010000
   \              ED0000004705
   \              0000A9010000
   \              ED0000004F05
   \              0000AA010000
   \              ED0000004E05
   \              0000AB010000
   \   00000184   ED0000005405       DC32 237, 1364, 447, 237, 1363, 448, 237, 1530, 430, 237, 1505, 431
   \              0000BF010000
   \              ED0000005305
   \              0000C0010000
   \              ED000000FA05
   \              0000AE010000
   \              ED000000E105
   \              0000AF010000
   \   000001B4   ED000000E405       DC32 237, 1508, 432, 237, 1506, 433, 237, 1509, 421, 237, 1511, 422
   \              0000B0010000
   \              ED000000E205
   \              0000B1010000
   \              ED000000E505
   \              0000A5010000
   \              ED000000E705
   \              0000A6010000
   \   000001E4   ED000000E605       DC32 237, 1510, 1066, 237, 1512, 1067, 237, 1513, 1066, 237, 1516, 1067
   \              00002A040000
   \              ED000000E805
   \              00002B040000
   \              ED000000E905
   \              00002A040000
   \              ED000000EC05
   \              00002B040000
   \   00000214   ED000000ED05       DC32 237, 1517
   \              0000        

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   302E3000           DC8 "0.0"

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs LoadReport &LoadReport::new LoadReport()
   \                     `??new LoadReport`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   A70FA0E3           MOV      R0,#+668
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new LoadReport_1`
   \   00000014   ........           BL       ??LoadReport
   \                     `??new LoadReport_1`:
   \   00000018   ........           B        ?Subroutine17

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   302E3000           DC8      "0.0"

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiString(AnsiString const &)
                                       12
     LoadReport::GetStringValue(int, int, AnsiString &)
                                       12
     LoadReport::GetTotalVolume()      48
     LoadReport::GetTotalWeight()      48
     LoadReport::GetValue(int, int, float &, int &, int &)
                                       44
     LoadReport::GetValueInfoTableStatic(int &, int)
                                        0
     LoadReport::LoadReport()           8
     LoadReport::PutFloatValue(int, float)
                                        4
     LoadReport::PutValue(int, int, AnsiString, bool, int *)
                                      224
     LoadReport::ReceiveData(unsigned char *)
                                        0
     LoadReport::RestoreSettings(TSNConfigString *)
                                        0
     LoadReport::SaveSettings(TSNConfigString *)
                                        0
     LoadReport::SendData(unsigned short)
                                        0
     LoadReport::SetTankVector(vector<PRogramObjectBase *>)
                                        4
     LoadReport::new LoadReport()       4
     LoadReport::~LoadReport()         12
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
                                       20
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy()
                                        8
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy()
                                      44
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
                                     216
     AnsiString::AnsiString(AnsiString const &)
                                      64
     LoadReport::LoadReportPtr         4
     LoadReport::LoadReport()        168
     LoadReport::~LoadReport()       244
     ?Subroutine18                     8
     LoadReport::SaveSettings(TSNConfigString *)
                                       4
     LoadReport::RestoreSettings(TSNConfigString *)
                                       4
     ?Subroutine19                     8
     LoadReport::GetValue(int, int, float &, int &, int &)
                                     556
     LoadReport::GetStringValue(int, int, AnsiString &)
                                     224
     LoadReport::PutValue(int, int, AnsiString, bool, int *)
                                     892
     LoadReport::PutFloatValue(int, float)
                                       8
     ?Subroutine17                     8
     LoadReport::ServiceReportTankValueList
                                     540
     LoadReport::GetValueInfoTableStatic(int &, int)
                                      20
     LoadReport::ReceiveData(unsigned char *)
                                       0
     LoadReport::SendData(unsigned short)
                                      16
     LoadReport::SetTankVector(vector<PRogramObjectBase *>)
                                      16
     LoadReport::GetTotalWeight()    144
     ?Subroutine16                    32
     LoadReport::GetTotalVolume()    140
     ?<Initializer for ServiceReportTankValueList>
                                     540
     ?<Constant "0.0">                 4
     __sti__routine()                  4
     LoadReport::new LoadReport()     28
     ??DataTable1                      4
     ??DataTable13                     4
     ??DataTable15                     4
      Others                         540

 
 3 268 bytes in segment CODE
   128 bytes in segment DATA_C
   540 bytes in segment DATA_I
   540 bytes in segment DATA_ID
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    24 bytes in segment INITTAB
 
 2 540 bytes of CODE  memory (+ 756 bytes shared)
   668 bytes of CONST memory
   544 bytes of DATA  memory

Errors: none
Warnings: none
