##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:16:40 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROTankPressure.cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\PROTankPressure.cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROTankPressure.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROTankPressure.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROTankPressure.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   000000EA           B        ??_Max_1
   \                     ??_Max_2:
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \                     ??_Max_1:
   \   00000008   081090E5           LDR      R1,[R0, #+8]
   \   0000000C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FAFFFF0A           BEQ      ??_Max_2
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   08009015           LDRNE    R0,[R0, #+8]
   \   00000010   0E00001A           BNE      ??_DecP_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D20D1E5           LDRB     R2,[R1, #+13]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0200001A           BNE      ??_DecP_2
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   ........           _BLF     ??_Max,??_Max??rA
   \   0000002C   070000EA           B        ??_DecP_1
   \                     ??_DecP_2:
   \   00000030   041090E5           LDR      R1,[R0, #+4]
   \   00000034   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0300001A           BNE      ??_DecP_1
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   020050E1           CMP      R0,R2
   \   00000048   0100A0E1           MOV      R0,R1
   \   0000004C   F7FFFF0A           BEQ      ??_DecP_2
   \                     ??_DecP_1:
   \   00000050   0040BDE8           POP      {LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_2
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_3
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_2:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_3:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2500001A           BNE      ??_Erase_4
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_5
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_5:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_6
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_7
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_8
   \                     ??_Erase_9:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_8:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_9
   \                     ??_Erase_7:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_6:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2900001A           BNE      ??_Erase_10
   \   000000C0   0D00D7E5           LDRB     R0,[R7, #+13]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0500A011           MOVNE    R0,R5
   \   000000CC   0100001A           BNE      ??_Erase_11
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   ........           _BLF     ??_Max,??_Max??rA
   \                     ??_Erase_11:
   \   000000D8   080084E5           STR      R0,[R4, #+8]
   \   000000DC   210000EA           B        ??_Erase_10
   \                     ??_Erase_4:
   \   000000E0   000096E5           LDR      R0,[R6, #+0]
   \   000000E4   048080E5           STR      R8,[R0, #+4]
   \   000000E8   000096E5           LDR      R0,[R6, #+0]
   \   000000EC   000088E5           STR      R0,[R8, #+0]
   \   000000F0   080096E5           LDR      R0,[R6, #+8]
   \   000000F4   000058E1           CMP      R8,R0
   \   000000F8   0850A001           MOVEQ    R5,R8
   \   000000FC   0800000A           BEQ      ??_Erase_12
   \   00000100   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000104   045098E5           LDR      R5,[R8, #+4]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   04508705           STREQ    R5,[R7, #+4]
   \   00000110   007085E5           STR      R7,[R5, #+0]
   \   00000114   080096E5           LDR      R0,[R6, #+8]
   \   00000118   080088E5           STR      R0,[R8, #+8]
   \   0000011C   080096E5           LDR      R0,[R6, #+8]
   \   00000120   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_12:
   \   00000124   040094E5           LDR      R0,[R4, #+4]
   \   00000128   060050E1           CMP      R0,R6
   \   0000012C   04808405           STREQ    R8,[R4, #+4]
   \   00000130   0400000A           BEQ      ??_Erase_13
   \   00000134   040096E5           LDR      R0,[R6, #+4]
   \   00000138   001090E5           LDR      R1,[R0, #+0]
   \   0000013C   060051E1           CMP      R1,R6
   \   00000140   00808005           STREQ    R8,[R0, #+0]
   \   00000144   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_13:
   \   00000148   040096E5           LDR      R0,[R6, #+4]
   \   0000014C   0C1088E2           ADD      R1,R8,#+12
   \   00000150   040088E5           STR      R0,[R8, #+4]
   \   00000154   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000158   0C0086E2           ADD      R0,R6,#+12
   \   0000015C   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000160   0030C1E5           STRB     R3,[R1, #+0]
   \   00000164   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_10:
   \   00000168   0C00D6E5           LDRB     R0,[R6, #+12]
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   5E00001A           BNE      ??_Erase_14
   \   00000174   0090A0E3           MOV      R9,#+0
   \   00000178   01A0A0E3           MOV      R10,#+1
   \   0000017C   060000EA           B        ??_Erase_15
   \                     ??_Erase_16:
   \   00000180   080098E5           LDR      R0,[R8, #+8]
   \   00000184   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   1C00001A           BNE      ??_Erase_17
   \                     ??_Erase_18:
   \   00000190   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_19:
   \   00000194   0570A0E1           MOV      R7,R5
   \   00000198   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_15:
   \   0000019C   040094E5           LDR      R0,[R4, #+4]
   \   000001A0   000057E1           CMP      R7,R0
   \   000001A4   5000000A           BEQ      ??_Erase_20
   \   000001A8   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   4D00001A           BNE      ??_Erase_20
   \   000001B4   008095E5           LDR      R8,[R5, #+0]
   \   000001B8   080057E1           CMP      R7,R8
   \   000001BC   2400001A           BNE      ??_Erase_21
   \   000001C0   088095E5           LDR      R8,[R5, #+8]
   \   000001C4   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   0500001A           BNE      ??_Erase_22
   \   000001D0   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001D4   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001D8   0510A0E1           MOV      R1,R5
   \   000001DC   0400A0E1           MOV      R0,R4
   \   000001E0   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001E4   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_22:
   \   000001E8   0D00D8E5           LDRB     R0,[R8, #+13]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   E7FFFF1A           BNE      ??_Erase_19
   \   000001F4   000098E5           LDR      R0,[R8, #+0]
   \   000001F8   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001FC   010050E3           CMP      R0,#+1
   \   00000200   DEFFFF0A           BEQ      ??_Erase_16
   \                     ??_Erase_17:
   \   00000204   080098E5           LDR      R0,[R8, #+8]
   \   00000208   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000020C   010050E3           CMP      R0,#+1
   \   00000210   0600001A           BNE      ??_Erase_23
   \   00000214   000098E5           LDR      R0,[R8, #+0]
   \   00000218   0810A0E1           MOV      R1,R8
   \   0000021C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000220   0C90C8E5           STRB     R9,[R8, #+12]
   \   00000224   0400A0E1           MOV      R0,R4
   \   00000228   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000022C   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_23:
   \   00000230   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000234   0510A0E1           MOV      R1,R5
   \   00000238   0C00C8E5           STRB     R0,[R8, #+12]
   \   0000023C   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000240   080098E5           LDR      R0,[R8, #+8]
   \   00000244   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000248   0400A0E1           MOV      R0,R4
   \   0000024C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000250   250000EA           B        ??_Erase_20
   \                     ??_Erase_21:
   \   00000254   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   0500001A           BNE      ??_Erase_24
   \   00000260   0CA0C8E5           STRB     R10,[R8, #+12]
   \   00000264   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000268   0510A0E1           MOV      R1,R5
   \   0000026C   0400A0E1           MOV      R0,R4
   \   00000270   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000274   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_24:
   \   00000278   0D00D8E5           LDRB     R0,[R8, #+13]
   \   0000027C   000050E3           CMP      R0,#+0
   \   00000280   C3FFFF1A           BNE      ??_Erase_19
   \   00000284   080098E5           LDR      R0,[R8, #+8]
   \   00000288   0C00D0E5           LDRB     R0,[R0, #+12]
   \   0000028C   010050E3           CMP      R0,#+1
   \   00000290   00009805           LDREQ    R0,[R8, #+0]
   \   00000294   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   00000298   01005003           CMPEQ    R0,#+1
   \   0000029C   BBFFFF0A           BEQ      ??_Erase_18
   \   000002A0   000098E5           LDR      R0,[R8, #+0]
   \   000002A4   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A8   010050E3           CMP      R0,#+1
   \   000002AC   0600001A           BNE      ??_Erase_25
   \   000002B0   080098E5           LDR      R0,[R8, #+8]
   \   000002B4   0810A0E1           MOV      R1,R8
   \   000002B8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002BC   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002C0   0400A0E1           MOV      R0,R4
   \   000002C4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002C8   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_25:
   \   000002CC   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002D0   0510A0E1           MOV      R1,R5
   \   000002D4   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002D8   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002DC   000098E5           LDR      R0,[R8, #+0]
   \   000002E0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002E4   0400A0E1           MOV      R0,R4
   \   000002E8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_20:
   \   000002EC   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_14:
   \   000002F0   100094E5           LDR      R0,[R4, #+16]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   01004012           SUBNE    R0,R0,#+1
   \   000002FC   10008415           STRNE    R0,[R4, #+16]
   \   00000300   0600A0E1           MOV      R0,R6
   \   00000304   F047BDE8           POP      {R4-R10,LR}
   \   00000308   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_7
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_8:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_9
   \                     ??_Insert_7:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_10
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_9
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_9
   \                     ??_Insert_10:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_9
   \   00000060   F0FFFFEA           B        ??_Insert_8
   \                     ??_Insert_11:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_9:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_12
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_13
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_11
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_14
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_14:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_9
   \                     ??_Insert_13:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_11
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_15
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_15:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_9
   \                     ??_Insert_12:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_3:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_4
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_3
   \                     ??insert_4:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_5
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_6
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_7:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_8
   \                     ??insert_6:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_5:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_9
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_7
   \                     ??insert_9:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_8:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Pairib _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::insert(AnalogInput *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_10:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_11
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_10
   \                     ??insert_11:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_12
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_13
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_14:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_3,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_15
   \                     ??insert_13:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_12:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_16
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_14
   \                     ??insert_16:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_15:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_2:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_17:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_18
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_17
   \                     ??insert_18:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_19
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_20
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_21:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA_2
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_22
   \                     ??insert_20:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_19:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_23
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_21
   \                     ??insert_23:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_22:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>> const &)
   \                     ??_Copy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_1,??_Copy??rA
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_2
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_3
   \                     ??_Copy_4:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_3:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_4
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_5
   \                     ??_Copy_2:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_5:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Copy_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_6
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_7
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_7:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_1
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_1
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_6:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_26
   \                     ??_Erase_27:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_26:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_27
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_16
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_16:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_17
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_17:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::iterator _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Insert(bool, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, AnalogInput *)
   \                     ??_Insert_3:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_18
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_18:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_3
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::set(set<PRogramObjectBase *> const &)
   \                     ??set:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   1460D5E5           LDRB     R6,[R5, #+20]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000014   1460C4E5           STRB     R6,[R4, #+20]
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Copy,??_Copy??rA_1
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   7040BDE8           POP      {R4-R6,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_2
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_2:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_19:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_19
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
   \                     ??_Insert_5:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_20:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_20
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIPressSensor ** _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Insert(AIPressSensor **, AIPressSensor * const &)
   \                     ??_Insert_6:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_2,??_Make_room??rA_2
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_21:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_21
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2C00000A           BEQ      ??_Make_room_3
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2800003A           BCC      ??_Make_room_3
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1F00002A           BCS      ??_Make_room_4
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_Make_room_5
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_5:
   \   000000B4   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000B8   080084E5           STR      R0,[R4, #+8]
   \   000000BC   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000C0   040084E5           STR      R0,[R4, #+4]
   \   000000C4   009084E5           STR      R9,[R4, #+0]
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   050000EA           B        ??_Make_room_3
   \                     ??_Make_room_4:
   \   000000D0   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000DC   040094E5           LDR      R0,[R4, #+4]
   \   000000E0   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000E4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_3:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   F047BDE8           POP      {R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_6
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_6
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_7
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_6
   \                     ??_Make_room_7:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_6:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIPressSensor ** _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Make_room(AIPressSensor **, unsigned int)
   \                     ??_Make_room_2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_8
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_8
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_9
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA_1
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_8
   \                     ??_Make_room_9:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_8:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_3
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_4:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_4
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_5
   \                     ??_Push_back0_3:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_5:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_6
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_7:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_7
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_8
   \                     ??_Push_back0_6:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_5,??_Insert??rA_5
   \                     ??_Push_back0_8:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Push_back0(AIPressSensor *)
   \                     ??_Push_back0_2:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_9
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_10:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_10
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_11
   \                     ??_Push_back0_9:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_6,??_Insert??rA_6
   \                     ??_Push_back0_11:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<PRogramObjectBase *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool vector<AIPressSensor *>::empty() const
   \                     ??empty:
   \   00000000   041090E5           LDR      R1,[R0, #+4]
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   000041E0           SUB      R0,R1,R0
   \   0000000C   2001B0E1           LSRS     R0,R0,#+2
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   1EFF2F01           BXEQ     LR
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_3`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_3`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char)
   \                     `??operator+_2`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0520A0E1           MOV      R2,R5
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   ........           _BLF     ??append_2,??append??rA_2
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??string,??string??rA
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0110A0E3           MOV      R1,#+1
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000040   1CD08DE2           ADD      SP,SP,#+28
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------

   \                                 In segment DATA_C, align 4, align-sorted
      8          vector<PRogramObjectBase *>PROTankPressure ::AllObjVector;
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??AllObjVector, `?~vector`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??ObjVector, `?~vector`
   \              ............
   \   00000018   ............       DC32 ?_5, ??ObjectSet, `?~set`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
      9          vector<PRogramObjectBase *>PROTankPressure ::ObjVector;
     10          
     11          set<PRogramObjectBase *>PROTankPressure    ::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24
   \                     ??AllObjVector:
   \   00000018                      DS8 12
   \                     ??ObjVector:
   \   00000024                      DS8 12
     12          

   \                                 In segment DATA_Z, align 1, align-sorted
     13          bool PROTankPressure::hasIGPAlarms      = false;
   \                     ??hasIGPAlarms:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
     14          bool PROTankPressure::hasPressVacAlarms = false;
   \                     ??hasPressVacAlarms:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
     15          bool PROTankPressure::hasVapRetAlarms   = false;
   \                     ??hasVapRetAlarms:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
     16          bool PROTankPressure::hasExtraAlarm2    = false;
   \                     ??hasExtraAlarm2:
   \   00000000                      DS8 1
     17          
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          PROTankPressure::PROTankPressure(bool AddToList, int LNumber) : PROXRefObject(AddToList) {
   \                     ??PROTankPressure:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   ........           _BLF     ??PROXRefObject,??PROXRefObject??rA
   \   00000018   ........           LDR      R0,??DataTable17  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   580F84E2           ADD      R0,R4,#+352
   \   00000024   ........           _BLF     ??_Zero,??_Zero??rA
     20              LineNumber = LNumber;
   \   00000028   046084E5           STR      R6,[R4, #+4]
     21              if ( AddToList ) {
   \   0000002C   ........           LDR      R6,??DataTable18  ;; ??ObjectSet
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   0800000A           BEQ      ??PROTankPressure_2
     22                  ObjectSet.insert(this);
   \   00000038   0420A0E1           MOV      R2,R4
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   18008DE2           ADD      R0,SP,#+24
   \   00000044   ........           _BLF     ??insert_2,??insert??rA
     23                  AllObjVector.push_back(this);
   \   00000048   0410A0E1           MOV      R1,R4
   \   0000004C   180086E2           ADD      R0,R6,#+24
   \   00000050   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     24                  AddToIOObjectList();
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           _BLF     ??AddToIOObjectList,??AddToIOObjectList??rA
     25              }
     26              Initiate();
   \                     ??PROTankPressure_2:
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       ??Initiate
     27              SetIdNumber(this, 0, C_PRO_TANKPRESS, ObjectSet);
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??set,??set??rA
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   02002DE9           PUSH     {R1}
   \   00000078   0030A0E1           MOV      R3,R0
   \   0000007C   2420A0E3           MOV      R2,#+36
   \   00000080   402E82E3           ORR      R2,R2,#0x400
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           _BLF     ??SetIdNumber,??SetIdNumber??rA
   \   0000008C   04008DE2           ADD      R0,SP,#+4
   \   00000090   ........           _BLF     ??clear,??clear??rA
     28          }
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   24D08DE2           ADD      SP,SP,#+36
   \   0000009C   ........           B        ?Subroutine46

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine46:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          PROTankPressure::PROTankPressure(int IdNum, PROXRefObject *CreatedFromTank, bool AddToList, int LNumber) : PROXRefObject(AddToList) {
   \                     ??PROTankPressure_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   40709DE5           LDR      R7,[SP, #+64]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0310A0E1           MOV      R1,R3
   \   0000001C   ........           _BLF     ??PROXRefObject,??PROXRefObject??rA
   \   00000020   ........           LDR      R0,??DataTable17  ;; ??__vtbl
   \   00000024   A40084E5           STR      R0,[R4, #+164]
   \   00000028   580F84E2           ADD      R0,R4,#+352
   \   0000002C   ........           _BLF     ??_Zero,??_Zero??rA
     31              if ( CreatedFromTank ) {
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   0200000A           BEQ      ??PROTankPressure_3
     32                  LineNumber = CreatedFromTank->GetLineNumber();
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??GetLineNumber,??GetLineNumber??rA
   \   00000040   0070A0E1           MOV      R7,R0
     33              } else {
     34                  LineNumber = LNumber;
   \                     ??PROTankPressure_3:
   \   00000044   047084E5           STR      R7,[R4, #+4]
     35              }
     36              ObjectSet.insert(this);
   \   00000048   ........           LDR      R7,??DataTable18  ;; ??ObjectSet
   \   0000004C   0420A0E1           MOV      R2,R4
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   18008DE2           ADD      R0,SP,#+24
   \   00000058   ........           _BLF     ??insert_2,??insert??rA
     37              AllObjVector.push_back(this);
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   180087E2           ADD      R0,R7,#+24
   \   00000064   ........           _BLF     ??_Push_back0,??_Push_back0??rA
     38              Initiate();
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       ??Initiate
     39              if ( CreatedFromTank ) {
   \   00000070   2480A0E3           MOV      R8,#+36
   \   00000074   408E88E3           ORR      R8,R8,#0x400
   \   00000078   000055E3           CMP      R5,#+0
   \   0000007C   0C00000A           BEQ      ??PROTankPressure_4
     40                  CreatedFromThisTank = CreatedFromTank;
   \   00000080   5C5184E5           STR      R5,[R4, #+348]
     41                  SetIdNumber(this, (C_PRO_TANKPRESS << 16) | (CreatedFromTank->IDNumber & 0x7fff), C_PRO_TANKPRESS, ObjectSet, true);
   \   00000084   0710A0E1           MOV      R1,R7
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           _BLF     ??set,??set??rA
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   02002DE9           PUSH     {R1}
   \   00000098   0030A0E1           MOV      R3,R0
   \   0000009C   9C0095E5           LDR      R0,[R5, #+156]
   \   000000A0   0820A0E1           MOV      R2,R8
   \   000000A4   8008A0E1           LSL      R0,R0,#+17
   \   000000A8   0218A0E1           MOV      R1,R2, LSL #+16
   \   000000AC   A01881E1           ORR      R1,R1,R0, LSR #+17
   \   000000B0   090000EA           B        ??PROTankPressure_5
     42              } else {
     43                  AddToIOObjectList();
   \                     ??PROTankPressure_4:
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           _BLF     ??AddToIOObjectList,??AddToIOObjectList??rA
     44                  SetIdNumber(this, IdNum, C_PRO_TANKPRESS, ObjectSet);
   \   000000BC   0710A0E1           MOV      R1,R7
   \   000000C0   0D00A0E1           MOV      R0,SP
   \   000000C4   ........           _BLF     ??set,??set??rA
   \   000000C8   0030A0E1           MOV      R3,R0
   \   000000CC   0000A0E3           MOV      R0,#+0
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   0820A0E1           MOV      R2,R8
   \   000000D8   0610A0E1           MOV      R1,R6
   \                     ??PROTankPressure_5:
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   ........           _BLF     ??SetIdNumber,??SetIdNumber??rA
   \   000000E4   04008DE2           ADD      R0,SP,#+4
   \   000000E8   ........           _BLF     ??clear,??clear??rA
   \   000000EC   04D08DE2           ADD      SP,SP,#+4
     45              }
     46              HighPressurePtr          = new AlarmHighPressure(this);
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     `??new AlarmHighPressure`,`??new AlarmHighPressure??rA`
   \   000000FC   740184E5           STR      R0,[R4, #+372]
     47              LowPressurePtr           = new AlarmLowPressure(this);
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           _BLF     `??new AlarmLowPressure`,`??new AlarmLowPressure??rA`
   \   00000108   780184E5           STR      R0,[R4, #+376]
     48              AlarmSet.insert(HighPressurePtr);
   \   0000010C   742194E5           LDR      R2,[R4, #+372]
   \   00000110   E41084E2           ADD      R1,R4,#+228
   \   00000114   18008DE2           ADD      R0,SP,#+24
   \   00000118   ........           _BLF     ??insert,??insert??rA_1
     49          	AlarmSet.insert(LowPressurePtr);
   \   0000011C   782194E5           LDR      R2,[R4, #+376]
   \   00000120   E41084E2           ADD      R1,R4,#+228
   \   00000124   20008DE2           ADD      R0,SP,#+32
   \   00000128   ........           _BLF     ??insert,??insert??rA_1
     50              AddAlarms(CompleteAlarmInfoList);
   \   0000012C   FC1084E2           ADD      R1,R4,#+252
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   ........           _BLF     ??AddAlarms,??AddAlarms??rA
     51          }
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   28D08DE2           ADD      SP,SP,#+40
   \   00000140   ........           B        ?Subroutine47

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine47:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine47_0:
   \   00000008   ........           DC32     ??hasExtraAlarm2
     52          
     53          //---------------------------------------------------------------------------
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          void PROTankPressure::Initiate(void) {
     56              HasPressure              = false;
     57              Type                     = C_PRO_TANKPRESS;
     58              CreatedFromThisTank      = NULL;
     59              Pressure                 = 0;
     60              VapourAlarmSet           = pLimitAdjustable;
     61              HighPressurePtr          = NULL;
     62              LowPressurePtr           = NULL;
     63              HighPressVacPtr          = NULL;
     64              LowPressVacPtr           = NULL;
     65              HighIGPPtr               = NULL;
     66              LowIGPPtr                = NULL;
     67              HighVapRetPtr            = NULL;
     68              LowVapRetPtr             = NULL;
     69              IntHighPressurePtr1      = NULL;
     70              IntLowPressurePtr1       = NULL;
     71              IntHighPressurePtr2      = NULL;
     72              IntLowPressurePtr2       = NULL;
     73          
     74              HighTankPressLimit       = PROProjectInfo::HighTankPressLimit;
   \                     ??Initiate:
   \   00000000   ........           LDR      R3,??DataTable5  ;; ??HighTankPressLimit
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   5821C0E5           STRB     R2,[R0, #+344]
   \   00000010   2420A0E3           MOV      R2,#+36
   \   00000014   402E82E3           ORR      R2,R2,#0x400
   \   00000018   A02080E5           STR      R2,[R0, #+160]
   \   0000001C   5C1180E5           STR      R1,[R0, #+348]
   \   00000020   0120A0E1           MOV      R2,R1
   \   00000024   6C2180E5           STR      R2,[R0, #+364]
   \   00000028   7011C0E5           STRB     R1,[R0, #+368]
   \   0000002C   741180E5           STR      R1,[R0, #+372]
   \   00000030   781180E5           STR      R1,[R0, #+376]
   \   00000034   7C1180E5           STR      R1,[R0, #+380]
   \   00000038   801180E5           STR      R1,[R0, #+384]
   \   0000003C   841180E5           STR      R1,[R0, #+388]
   \   00000040   881180E5           STR      R1,[R0, #+392]
   \   00000044   8C1180E5           STR      R1,[R0, #+396]
   \   00000048   901180E5           STR      R1,[R0, #+400]
   \   0000004C   941180E5           STR      R1,[R0, #+404]
   \   00000050   9C1180E5           STR      R1,[R0, #+412]
   \   00000054   981180E5           STR      R1,[R0, #+408]
   \   00000058   A01180E5           STR      R1,[R0, #+416]
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
   \   00000060   A83180E5           STR      R3,[R0, #+424]
     75              LowTankPressLimit        = PROProjectInfo::LowTankPressLimit;
   \   00000064   ........           LDR      R3,??DataTable6  ;; ??LowTankPressLimit
   \   00000068   003093E5           LDR      R3,[R3, #+0]
   \   0000006C   AC3180E5           STR      R3,[R0, #+428]
     76              HighPressVacLimit        = PROProjectInfo::HighPressVacLimit;
   \   00000070   ........           LDR      R3,??DataTable7  ;; ??HighPressVacLimit
   \   00000074   003093E5           LDR      R3,[R3, #+0]
   \   00000078   B43180E5           STR      R3,[R0, #+436]
     77              LowPressVacLimit         = PROProjectInfo::LowPressVacLimit;
   \   0000007C   ........           LDR      R3,??DataTable8  ;; ??LowPressVacLimit
   \   00000080   003093E5           LDR      R3,[R3, #+0]
   \   00000084   B03180E5           STR      R3,[R0, #+432]
     78              HighIGP_Limit            = PROProjectInfo::HighIGP_Limit;
   \   00000088   ........           LDR      R3,??DataTable9  ;; ??HighIGP_Limit
   \   0000008C   003093E5           LDR      R3,[R3, #+0]
   \   00000090   BC3180E5           STR      R3,[R0, #+444]
     79              LowIGP_Limit             = PROProjectInfo::LowIGP_Limit;
   \   00000094   ........           LDR      R3,??DataTable10  ;; ??LowIGP_Limit
   \   00000098   003093E5           LDR      R3,[R3, #+0]
   \   0000009C   B83180E5           STR      R3,[R0, #+440]
     80              HighVapourReturnLimit    = PROProjectInfo::HighVapourRetLimit;
   \   000000A0   ........           LDR      R3,??DataTable11  ;; ??HighVapourRetLimit
   \   000000A4   003093E5           LDR      R3,[R3, #+0]
   \   000000A8   C43180E5           STR      R3,[R0, #+452]
     81              LowVapourReturnLimit     = PROProjectInfo::LowVapourRetLimit;
   \   000000AC   ........           LDR      R3,??DataTable12  ;; ??LowVapourRetLimit
   \   000000B0   003093E5           LDR      R3,[R3, #+0]
   \   000000B4   C03180E5           STR      R3,[R0, #+448]
     82              IntHighTankPressLimit1   = PROProjectInfo::IntHighTankPressLimit1;
   \   000000B8   ........           LDR      R3,??DataTable13  ;; ??IntHighTankPressLimit1
   \   000000BC   003093E5           LDR      R3,[R3, #+0]
   \   000000C0   C83180E5           STR      R3,[R0, #+456]
     83              IntLowTankPressLimit1    = PROProjectInfo::IntLowTankPressLimit1;
   \   000000C4   ........           LDR      R3,??DataTable14  ;; ??IntLowTankPressLimit1
   \   000000C8   003093E5           LDR      R3,[R3, #+0]
   \   000000CC   CC3180E5           STR      R3,[R0, #+460]
     84              IntHighTankPressLimit2   = PROProjectInfo::IntHighTankPressLimit2;
   \   000000D0   ........           LDR      R3,??DataTable15  ;; ??IntHighTankPressLimit2
   \   000000D4   003093E5           LDR      R3,[R3, #+0]
   \   000000D8   D03180E5           STR      R3,[R0, #+464]
     85              IntLowTankPressLimit2    = PROProjectInfo::IntLowTankPressLimit2;
   \   000000DC   ........           LDR      R3,??DataTable16  ;; ??IntLowTankPressLimit2
   \   000000E0   003093E5           LDR      R3,[R3, #+0]
   \   000000E4   D43180E5           STR      R3,[R0, #+468]
     86              hasLowPressVacLimit      = PROProjectInfo::hasLowPressVacLimit;
   \   000000E8   94309FE5           LDR      R3,??Initiate_1  ;; ??hasLowPressVacLimit
   \   000000EC   0030D3E5           LDRB     R3,[R3, #+0]
   \   000000F0   D831C0E5           STRB     R3,[R0, #+472]
     87              hasHighPressVacLimit     = PROProjectInfo::hasHighPressVacLimit;
   \   000000F4   8C309FE5           LDR      R3,??Initiate_1+0x4  ;; ??hasHighPressVacLimit
   \   000000F8   0030D3E5           LDRB     R3,[R3, #+0]
   \   000000FC   D931C0E5           STRB     R3,[R0, #+473]
     88              hasLowVapourReturnLimit  = PROProjectInfo::hasLowVapourRetLimit;
   \   00000100   84309FE5           LDR      R3,??Initiate_1+0x8  ;; ??hasLowVapourRetLimit
   \   00000104   0030D3E5           LDRB     R3,[R3, #+0]
   \   00000108   DC31C0E5           STRB     R3,[R0, #+476]
     89              hasLowIGP_Limit          = PROProjectInfo::hasLowIGP_Limit;
   \   0000010C   7C309FE5           LDR      R3,??Initiate_1+0xC  ;; ??hasLowIGP_Limit
   \   00000110   0030D3E5           LDRB     R3,[R3, #+0]
   \   00000114   DA31C0E5           STRB     R3,[R0, #+474]
     90              hasHighIGP_Limit         = PROProjectInfo::hasHighIGP_Limit;
   \   00000118   74309FE5           LDR      R3,??Initiate_1+0x10  ;; ??hasHighIGP_Limit
   \   0000011C   0030D3E5           LDRB     R3,[R3, #+0]
   \   00000120   DB31C0E5           STRB     R3,[R0, #+475]
     91              hasHighVapourReturnLimit = PROProjectInfo::hasHighVapourRetLimit;
   \   00000124   6C309FE5           LDR      R3,??Initiate_1+0x14  ;; ??hasHighVapourRetLimit
   \   00000128   0030D3E5           LDRB     R3,[R3, #+0]
   \   0000012C   DD31C0E5           STRB     R3,[R0, #+477]
     92          
     93          
     94              HasIntHighTankPressLimit1 = false;
   \   00000130   0130A0E1           MOV      R3,R1
   \   00000134   DE31C0E5           STRB     R3,[R0, #+478]
     95              HasIntLowTankPressLimit1 = false;
   \   00000138   DF31C0E5           STRB     R3,[R0, #+479]
     96              HasIntHighTankPressLimit2 = false;
   \   0000013C   E031C0E5           STRB     R3,[R0, #+480]
     97              HasIntLowTankPressLimit2 = false;
   \   00000140   E111C0E5           STRB     R1,[R0, #+481]
     98          
     99          
    100          
    101          	HighTankPressLocked      = PROProjectInfo::HighTankPressLocked;
   \   00000144   50109FE5           LDR      R1,??Initiate_1+0x18  ;; ??HighTankPressLocked
   \   00000148   0010D1E5           LDRB     R1,[R1, #+0]
   \   0000014C   A411C0E5           STRB     R1,[R0, #+420]
    102              LowTankPressLocked       = PROProjectInfo::LowTankPressLocked;
   \   00000150   48109FE5           LDR      R1,??Initiate_1+0x1C  ;; ??LowTankPressLocked
   \   00000154   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000158   A511C0E5           STRB     R1,[R0, #+421]
    103              HighIGP_Locked           = PROProjectInfo::HighIGP_Locked;
   \   0000015C   40109FE5           LDR      R1,??Initiate_1+0x20  ;; ??HighIGP_Locked
   \   00000160   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000164   A611C0E5           STRB     R1,[R0, #+422]
    104              LowIGP_Locked            = PROProjectInfo::LowIGP_Locked;
   \   00000168   38109FE5           LDR      R1,??Initiate_1+0x24  ;; ??LowIGP_Locked
   \   0000016C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000170   A711C0E5           STRB     R1,[R0, #+423]
    105              MaxPressureRange         = 0.0;
   \   00000174   E42180E5           STR      R2,[R0, #+484]
    106              TankType                 = TANKTYPE_TANK_PRESS;
   \   00000178   0B10A0E3           MOV      R1,#+11
   \   0000017C   541180E5           STR      R1,[R0, #+340]
    107          }
   \   00000180   1EFF2FE1           BX       LR               ;; return
   \                     ??Initiate_1:
   \   00000184   ........           DC32     ??hasLowPressVacLimit
   \   00000188   ........           DC32     ??hasHighPressVacLimit
   \   0000018C   ........           DC32     ??hasLowVapourRetLimit
   \   00000190   ........           DC32     ??hasLowIGP_Limit
   \   00000194   ........           DC32     ??hasHighIGP_Limit
   \   00000198   ........           DC32     ??hasHighVapourRetLimit
   \   0000019C   ........           DC32     ??HighTankPressLocked
   \   000001A0   ........           DC32     ??LowTankPressLocked
   \   000001A4   ........           DC32     ??HighIGP_Locked
   \   000001A8   ........           DC32     ??LowIGP_Locked
    108          //---------------------------------------------------------------------------
    109          

   \                                 In segment CODE, align 4, keep-with-next
    110          PROTankPressure::~PROTankPressure(void) {
   \                     `?~PROTankPressure`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   3D00000A           BEQ      `?~PROTankPressure_1`
   \   00000014   ........           LDR      R0,??DataTable17  ;; ??__vtbl
    111              ObjectSet.erase(this);
   \   00000018   ........           LDR      R6,??DataTable18  ;; ??ObjectSet
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     ??erase_1,??erase??rA_1
    112              EraseFromVector(ObjVector, this);
   \   0000002C   0420A0E1           MOV      R2,R4
   \   00000030   241086E2           ADD      R1,R6,#+36
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??EraseFromVector,??EraseFromVector??rA
    113          	EraseFromVector(AllObjVector, this);
   \   0000003C   0420A0E1           MOV      R2,R4
   \   00000040   181086E2           ADD      R1,R6,#+24
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           _BLF     ??EraseFromVector,??EraseFromVector??rA
    114          	if ( IntHighPressurePtr1 ) delete IntHighPressurePtr1;
   \   0000004C   942194E5           LDR      R2,[R4, #+404]
   \   00000050   000052E3           CMP      R2,#+0
   \   00000054   0500000A           BEQ      `?~PROTankPressure_2`
   \   00000058   0200A0E1           MOV      R0,R2
   \   0000005C   A42092E5           LDR      R2,[R2, #+164]
   \   00000060   0310A0E3           MOV      R1,#+3
   \   00000064   002092E5           LDR      R2,[R2, #+0]
   \   00000068   0FE0A0E1           MOV      LR,PC
   \   0000006C   12FF2FE1           BX       R2
    115          	if ( IntLowPressurePtr1  ) delete IntLowPressurePtr1 ;
   \                     `?~PROTankPressure_2`:
   \   00000070   9C2194E5           LDR      R2,[R4, #+412]
   \   00000074   000052E3           CMP      R2,#+0
   \   00000078   0500000A           BEQ      `?~PROTankPressure_3`
   \   0000007C   0200A0E1           MOV      R0,R2
   \   00000080   A42092E5           LDR      R2,[R2, #+164]
   \   00000084   0310A0E3           MOV      R1,#+3
   \   00000088   002092E5           LDR      R2,[R2, #+0]
   \   0000008C   0FE0A0E1           MOV      LR,PC
   \   00000090   12FF2FE1           BX       R2
    116          	if ( IntHighPressurePtr2 ) delete IntHighPressurePtr2;
   \                     `?~PROTankPressure_3`:
   \   00000094   982194E5           LDR      R2,[R4, #+408]
   \   00000098   000052E3           CMP      R2,#+0
   \   0000009C   0500000A           BEQ      `?~PROTankPressure_4`
   \   000000A0   0200A0E1           MOV      R0,R2
   \   000000A4   A42092E5           LDR      R2,[R2, #+164]
   \   000000A8   0310A0E3           MOV      R1,#+3
   \   000000AC   002092E5           LDR      R2,[R2, #+0]
   \   000000B0   0FE0A0E1           MOV      LR,PC
   \   000000B4   12FF2FE1           BX       R2
    117          	if ( IntLowPressurePtr2  ) delete IntLowPressurePtr2 ;
   \                     `?~PROTankPressure_4`:
   \   000000B8   A02194E5           LDR      R2,[R4, #+416]
   \   000000BC   000052E3           CMP      R2,#+0
   \   000000C0   0500000A           BEQ      `?~PROTankPressure_5`
   \   000000C4   0200A0E1           MOV      R0,R2
   \   000000C8   A42092E5           LDR      R2,[R2, #+164]
   \   000000CC   0310A0E3           MOV      R1,#+3
   \   000000D0   002092E5           LDR      R2,[R2, #+0]
   \   000000D4   0FE0A0E1           MOV      LR,PC
   \   000000D8   12FF2FE1           BX       R2
    118          
    119          }
   \                     `?~PROTankPressure_5`:
   \   000000DC   586F84E2           ADD      R6,R4,#+352
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   ........           _BLF     ??_Tidy0,??_Tidy0??rA_1
   \   000000E8   0600A0E1           MOV      R0,R6
   \   000000EC   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000F0   0010A0E3           MOV      R1,#+0
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     `?~PROXRefObject`,`?~PROXRefObject??rA`
   \   000000FC   010015E3           TST      R5,#0x1
   \   00000100   0100000A           BEQ      `?~PROTankPressure_1`
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PROTankPressure_1`:
   \   0000010C                      REQUIRE ?Subroutine46
   \   0000010C                      ;; // Fall through to label ?Subroutine46
    120          //---------------------------------------------------------------------------
    121          
    122          ///////////////////////////////////////////////////////////////
    123          //
    124          // Routines for the Configuration
    125          //
    126          ///////////////////////////////////////////////////////////////
    127          

   \                                 In segment CODE, align 4, keep-with-next
    128          void PROTankPressure::SetAlarmLimits(float HVapLim, float LVapLim, float HPVLim, float LPVLim, float HLim, float LLim) {
   \                     ??SetAlarmLimits:
   \   00000000   70002DE9           PUSH     {R4-R6}
   \   00000004   0CC09DE5           LDR      R12,[SP, #+12]
   \   00000008   10409DE5           LDR      R4,[SP, #+16]
   \   0000000C   14509DE5           LDR      R5,[SP, #+20]
    129              HighTankPressLimit     = HLim;
   \   00000010   A84180E5           STR      R4,[R0, #+424]
    130              HighPressVacLimit      = HPVLim;
   \   00000014   B43180E5           STR      R3,[R0, #+436]
    131              HighVapourReturnLimit  = HVapLim;
   \   00000018   C41180E5           STR      R1,[R0, #+452]
    132              LowTankPressLimit      = LLim;
   \   0000001C   AC5180E5           STR      R5,[R0, #+428]
    133              LowPressVacLimit       = LPVLim;
   \   00000020   B0C180E5           STR      R12,[R0, #+432]
    134              LowVapourReturnLimit   = LVapLim;
   \   00000024   C02180E5           STR      R2,[R0, #+448]
    135          
    136              HighPressurePtr->Limit = HLim;
   \   00000028   746190E5           LDR      R6,[R0, #+372]
   \   0000002C   E44086E5           STR      R4,[R6, #+228]
    137              LowPressurePtr->Limit  = LLim;
   \   00000030   784190E5           LDR      R4,[R0, #+376]
   \   00000034   E45084E5           STR      R5,[R4, #+228]
    138              if ( HighPressVacPtr ) {
   \   00000038   7C4190E5           LDR      R4,[R0, #+380]
   \   0000003C   000054E3           CMP      R4,#+0
    139                  HighPressVacPtr->Limit = HPVLim;
   \   00000040   E4308415           STRNE    R3,[R4, #+228]
    140              }
    141              if ( HighVapRetPtr ) {
   \   00000044   8C3190E5           LDR      R3,[R0, #+396]
   \   00000048   000053E3           CMP      R3,#+0
    142                  HighVapRetPtr->Limit   = HVapLim;
   \   0000004C   E4108315           STRNE    R1,[R3, #+228]
    143              }
    144              if ( LowPressVacPtr ) {
   \   00000050   801190E5           LDR      R1,[R0, #+384]
   \   00000054   000051E3           CMP      R1,#+0
    145                  LowPressVacPtr->Limit  = LPVLim;
   \   00000058   E4C08115           STRNE    R12,[R1, #+228]
    146              }
    147              if ( LowVapRetPtr ) {
   \   0000005C   900190E5           LDR      R0,[R0, #+400]
   \   00000060   000050E3           CMP      R0,#+0
    148                  LowVapRetPtr->Limit    = LVapLim;
   \   00000064   E4208015           STRNE    R2,[R0, #+228]
    149              }
    150          }
   \   00000068   7000BDE8           POP      {R4-R6}
   \   0000006C   1EFF2FE1           BX       LR               ;; return
    151          
    152          

   \                                 In segment CODE, align 4, keep-with-next
    153          void PROTankPressure::AddHighPressInternalAlarm1(float Lim, bool IsVisible) {
   \                     ??AddHighPressInternalAlarm1:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    154              IntHighTankPressLimit1    = Lim;
   \   00000008   C81184E5           STR      R1,[R4, #+456]
    155              HasIntHighTankPressLimit1 = true;
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   DE01C4E5           STRB     R0,[R4, #+478]
    156              IntHighPressurePtr1       = new AlarmIntHighPressure1(this, Lim, IsVisible);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     `??new AlarmIntHighPressure1`,`??new AlarmIntHighPressure1??rA`
   \   0000001C   940184E5           STR      R0,[R4, #+404]
    157              AlarmSet.insert(IntHighPressurePtr1);
   \   00000020   ........           B        ?Subroutine43
    158              AddAlarms(CompleteAlarmInfoList);
    159          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine43:
   \   00000000   0020A0E1           MOV      R2,R0
   \   00000004   E41084E2           ADD      R1,R4,#+228
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           _BLF     ??insert,??insert??rA_1
   \   00000010   FC1084E2           ADD      R1,R4,#+252
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??AddAlarms,??AddAlarms??rA
   \   0000001C   1340BDE8           POP      {R0,R1,R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return
    160          

   \                                 In segment CODE, align 4, keep-with-next
    161          void PROTankPressure::AddLowPressInternalAlarm1(float Lim, bool IsVisible) {
   \                     ??AddLowPressInternalAlarm1:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    162              IntLowTankPressLimit1    = Lim;
   \   00000008   CC1184E5           STR      R1,[R4, #+460]
    163              HasIntLowTankPressLimit1 = true;
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   DF01C4E5           STRB     R0,[R4, #+479]
    164              IntLowPressurePtr1       = new AlarmIntLowPressure1(this, Lim, IsVisible);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     `??new AlarmIntLowPressure1`,`??new AlarmIntLowPressure1??rA`
   \   0000001C   9C0184E5           STR      R0,[R4, #+412]
    165              AlarmSet.insert(IntLowPressurePtr1);
   \   00000020                      REQUIRE ?Subroutine43
   \   00000020                      ;; // Fall through to label ?Subroutine43
    166              AddAlarms(CompleteAlarmInfoList);
    167          }

   \                                 In segment CODE, align 4, keep-with-next
    168          void PROTankPressure::AddHighPressInternalAlarm2(float Lim, bool IsVisible) {
   \                     ??AddHighPressInternalAlarm2:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    169              IntHighTankPressLimit2    = Lim;
   \   00000008   D01184E5           STR      R1,[R4, #+464]
    170              HasIntHighTankPressLimit2 = true;
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   E001C4E5           STRB     R0,[R4, #+480]
    171              IntHighPressurePtr2       = new AlarmIntHighPressure2(this, Lim, IsVisible);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     `??new AlarmIntHighPressure2`,`??new AlarmIntHighPressure2??rA`
   \   0000001C   980184E5           STR      R0,[R4, #+408]
    172              AlarmSet.insert(IntHighPressurePtr2);
   \   00000020   ........           B        ?Subroutine43
    173              AddAlarms(CompleteAlarmInfoList);
    174          }
    175          

   \                                 In segment CODE, align 4, keep-with-next
    176          void PROTankPressure::AddLowPressInternalAlarm2(float Lim, bool IsVisible) {
   \                     ??AddLowPressInternalAlarm2:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    177              IntLowTankPressLimit2    = Lim;
   \   00000008   D41184E5           STR      R1,[R4, #+468]
    178              HasIntLowTankPressLimit2 = true;
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   E101C4E5           STRB     R0,[R4, #+481]
    179              IntLowPressurePtr2       = new AlarmIntLowPressure2(this, Lim, IsVisible);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     `??new AlarmIntLowPressure2`,`??new AlarmIntLowPressure2??rA`
   \   0000001C   A00184E5           STR      R0,[R4, #+416]
    180              AlarmSet.insert(IntLowPressurePtr2);
   \   00000020   ........           B        ?Subroutine43
    181              AddAlarms(CompleteAlarmInfoList);
    182          }
    183          

   \                                 In segment CODE, align 4, keep-with-next
    184          void PROTankPressure::AddHighPressVacAlarm(float Lim, bool IsVisible) {
   \                     ??AddHighPressVacAlarm:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    185              HighPressVacLimit    = Lim;
   \   00000008   B41184E5           STR      R1,[R4, #+436]
    186              HighPressVacPtr      = new AlarmHighPressVac(this, Lim, IsVisible);
   \   0000000C   ........           _BLF     `??new AlarmHighPressVac`,`??new AlarmHighPressVac??rA`
   \   00000010   7C0184E5           STR      R0,[R4, #+380]
    187              AlarmSet.insert(HighPressVacPtr);
   \   00000014   ........           B        ?Subroutine43
    188              AddAlarms(CompleteAlarmInfoList);
    189          }
    190          

   \                                 In segment CODE, align 4, keep-with-next
    191          void PROTankPressure::AddLowPressVacAlarm(float Lim, bool IsVisible) {
   \                     ??AddLowPressVacAlarm:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    192              LowPressVacLimit    = Lim;
   \   00000008   B01184E5           STR      R1,[R4, #+432]
    193              LowPressVacPtr      = new AlarmLowPressVac(this, Lim, IsVisible);
   \   0000000C   ........           _BLF     `??new AlarmLowPressVac`,`??new AlarmLowPressVac??rA`
   \   00000010   800184E5           STR      R0,[R4, #+384]
    194              AlarmSet.insert(LowPressVacPtr);
   \   00000014   ........           B        ?Subroutine43
    195              AddAlarms(CompleteAlarmInfoList);
    196          }

   \                                 In segment CODE, align 4, keep-with-next
    197          void PROTankPressure::AddHighIGP_Alarm(float Lim, bool IsVisible) {
   \                     ??AddHighIGP_Alarm:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    198              HighIGP_Limit    = Lim;
   \   00000008   BC1184E5           STR      R1,[R4, #+444]
    199              HighIGPPtr      = new AlarmHighIGP(this, Lim, IsVisible);
   \   0000000C   ........           _BLF     `??new AlarmHighIGP`,`??new AlarmHighIGP??rA`
   \   00000010   840184E5           STR      R0,[R4, #+388]
    200              AlarmSet.insert(HighIGPPtr);
   \   00000014   ........           B        ?Subroutine43
    201              AddAlarms(CompleteAlarmInfoList);
    202          }
    203          

   \                                 In segment CODE, align 4, keep-with-next
    204          void PROTankPressure::AddLowIGP_Alarm(float Lim, bool IsVisible) {
   \                     ??AddLowIGP_Alarm:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    205              LowIGP_Limit    = Lim;
   \   00000008   B81184E5           STR      R1,[R4, #+440]
    206              LowIGPPtr       = new AlarmLowIGP(this, Lim, IsVisible);
   \   0000000C   ........           _BLF     `??new AlarmLowIGP`,`??new AlarmLowIGP??rA`
   \   00000010   880184E5           STR      R0,[R4, #+392]
    207              AlarmSet.insert(LowIGPPtr);
   \   00000014   ........           B        ?Subroutine43
    208              AddAlarms(CompleteAlarmInfoList);
    209          }
    210          

   \                                 In segment CODE, align 4, keep-with-next
    211          void PROTankPressure::AddHighPressVapRetAlarm(float Lim, bool IsVisible) {
   \                     ??AddHighPressVapRetAlarm:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    212              HighVapourReturnLimit    = Lim;
   \   00000008   C41184E5           STR      R1,[R4, #+452]
    213              HighVapRetPtr            = new AlarmHighVapRet(this, Lim, IsVisible);
   \   0000000C   ........           _BLF     `??new AlarmHighVapRet`,`??new AlarmHighVapRet??rA`
   \   00000010   8C0184E5           STR      R0,[R4, #+396]
    214              AlarmSet.insert(HighVapRetPtr);
   \   00000014   ........           B        ?Subroutine43
    215              AddAlarms(CompleteAlarmInfoList);
    216          }
    217          

   \                                 In segment CODE, align 4, keep-with-next
    218          void PROTankPressure::AddLowPressVapRetAlarm(float Lim, bool IsVisible) {
   \                     ??AddLowPressVapRetAlarm:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    219              LowVapourReturnLimit    = Lim;
   \   00000008   C01184E5           STR      R1,[R4, #+448]
    220              LowVapRetPtr            = new AlarmLowVapRet(this, Lim, IsVisible);
   \   0000000C   ........           _BLF     `??new AlarmLowVapRet`,`??new AlarmLowVapRet??rA`
   \   00000010   900184E5           STR      R0,[R4, #+400]
    221              AlarmSet.insert(LowVapRetPtr);
   \   00000014   ........           B        ?Subroutine43
    222              AddAlarms(CompleteAlarmInfoList);
    223          }
    224          
    225          
    226          

   \                                 In segment CODE, align 4, keep-with-next
    227          void PROTankPressure::WriteConfigToFile(TSNConfigString &ConfigString) {
   \                     ??WriteConfigToFile:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   70DF4DE2           SUB      SP,SP,#+448
   \   00000008   0040A0E1           MOV      R4,R0
    228              if ( !CreatedFromThisTank ) {
   \   0000000C   5C0194E5           LDR      R0,[R4, #+348]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   D606001A           BNE      ??WriteConfigToFile_1
    229                  AnsiString LocalString;
    230                  AnsiString IdNumStr;
    231                  IdNumStr.cat_sprintf("0x%0x", IDNumber);
    232                  LocalString += KeyWord(C_PRO_TANKPRESS) + TabStr1 + IdNumStr + CrLfStr;
   \   00000018   E05B9FE5           LDR      R5,??WriteConfigToFile_2  ;; TabStr1
   \   0000001C   E06B9FE5           LDR      R6,??WriteConfigToFile_2+0x4  ;; CrLfStr
    233                  LocalString += MakeConfigString();   //common
   \   00000020   E09B9FE5           LDR      R9,??WriteConfigToFile_2+0x8  ;; ??LowTankPressLimit
   \   00000024   8C008DE2           ADD      R0,SP,#+140
   \   00000028   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000002C   620F8DE2           ADD      R0,SP,#+392
   \   00000030   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000034   9C3094E5           LDR      R3,[R4, #+156]
   \   00000038   CC2B9FE5           LDR      R2,??WriteConfigToFile_2+0xC  ;; `?<Constant "0x%0x">`
   \   0000003C   691F8DE2           ADD      R1,SP,#+420
   \   00000040   620F8DE2           ADD      R0,SP,#+392
   \   00000044   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   690F8DE2           ADD      R0,SP,#+420
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000058   2410A0E3           MOV      R1,#+36
   \   0000005C   401E81E3           ORR      R1,R1,#0x400
   \   00000060   FC008DE2           ADD      R0,SP,#+252
   \   00000064   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000068   0520A0E1           MOV      R2,R5
   \   0000006C   FC108DE2           ADD      R1,SP,#+252
   \   00000070   E0008DE2           ADD      R0,SP,#+224
   \   00000074   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000078   622F8DE2           ADD      R2,SP,#+392
   \   0000007C   E0108DE2           ADD      R1,SP,#+224
   \   00000080   C4008DE2           ADD      R0,SP,#+196
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   0620A0E1           MOV      R2,R6
   \   0000008C   C4108DE2           ADD      R1,SP,#+196
   \   00000090   A8008DE2           ADD      R0,SP,#+168
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   700B9FE5           LDR      R0,??WriteConfigToFile_2+0x10  ;; ??npos
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   007090E5           LDR      R7,[R0, #+0]
   \   000000A4   A8108DE2           ADD      R1,SP,#+168
   \   000000A8   0730A0E1           MOV      R3,R7
   \   000000AC   8C008DE2           ADD      R0,SP,#+140
   \   000000B0   ........           _BLF     ??append,??append??rA
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   A8008DE2           ADD      R0,SP,#+168
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   C4008DE2           ADD      R0,SP,#+196
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   E0008DE2           ADD      R0,SP,#+224
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E4   0020A0E3           MOV      R2,#+0
   \   000000E8   0110A0E3           MOV      R1,#+1
   \   000000EC   FC008DE2           ADD      R0,SP,#+252
   \   000000F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F4   A43094E5           LDR      R3,[R4, #+164]
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0C3093E5           LDR      R3,[R3, #+12]
   \   00000100   461F8DE2           ADD      R1,SP,#+280
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   0FE0A0E1           MOV      LR,PC
   \   0000010C   13FF2FE1           BX       R3
   \   00000110   0730A0E1           MOV      R3,R7
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   461F8DE2           ADD      R1,SP,#+280
   \   0000011C   8C008DE2           ADD      R0,SP,#+140
   \   00000120   ........           _BLF     ??append,??append??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   460F8DE2           ADD      R0,SP,#+280
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000134   D80A9FE5           LDR      R0,??WriteConfigToFile_2+0x14  ;; ??PressLim_mBar
   \   00000138   A8B194E5           LDR      R11,[R4, #+424]
   \   0000013C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000140   27A0A0E3           MOV      R10,#+39
   \   00000144   E0AE8AE3           ORR      R10,R10,#0xE00
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   C40A9FE5           LDR      R0,??WriteConfigToFile_2+0x18  ;; ??HighTankPressLimit
   \   00000150   0680CAE3           BIC      R8,R10,#0x6
   \   00000154   000090E5           LDR      R0,[R0, #+0]
   \   00000158   0B10A0E1           MOV      R1,R11
   \   0000015C   BA02000A           BEQ      ??WriteConfigToFile_3
    234                  if ( PROProjectInfo::PressLim_mBar ) {
    235                      if ( PROProjectInfo::HighTankPressLimit != HighTankPressLimit ) {
   \   00000160   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   3800000A           BEQ      ??WriteConfigToFile_4
    236                          LocalString += TabStr1 + KeyWord(AL_LIM_HIGHTANK_PRESS) + FloatToAnsiString(HighTankPressLimit * MH2O_TO_MBAR) + CrLfStr;
   \   0000016C   0330A0E3           MOV      R3,#+3
   \   00000170   0720A0E3           MOV      R2,#+7
   \   00000174   04002DE9           PUSH     {R2}
   \   00000178   08002DE9           PUSH     {R3}
   \   0000017C   0B00A0E1           MOV      R0,R11
   \   00000180   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000184   0020A0E1           MOV      R2,R0
   \   00000188   8C0A9FE5           LDR      R0,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   0000018C   0130A0E1           MOV      R3,R1
   \   00000190   881A9FE5           LDR      R1,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000194   ........           _BLF     __dMul,??__dMul??rA
   \   00000198   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000019C   0800BDE8           POP      {R3}
   \   000001A0   0400BDE8           POP      {R2}
   \   000001A4   0010A0E1           MOV      R1,R0
   \   000001A8   54008DE2           ADD      R0,SP,#+84
   \   000001AC   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000001B0   E21EA0E3           MOV      R1,#+3616
   \   000001B4   70008DE2           ADD      R0,SP,#+112
   \   000001B8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001BC   70208DE2           ADD      R2,SP,#+112
   \   000001C0   0510A0E1           MOV      R1,R5
   \   000001C4   1C008DE2           ADD      R0,SP,#+28
   \   000001C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001CC   54208DE2           ADD      R2,SP,#+84
   \   000001D0   1C108DE2           ADD      R1,SP,#+28
   \   000001D4   38008DE2           ADD      R0,SP,#+56
   \   000001D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001DC   0620A0E1           MOV      R2,R6
   \   000001E0   38108DE2           ADD      R1,SP,#+56
   \   000001E4   0D00A0E1           MOV      R0,SP
   \   000001E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001EC   0730A0E1           MOV      R3,R7
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   0D10A0E1           MOV      R1,SP
   \   000001F8   8C008DE2           ADD      R0,SP,#+140
   \   000001FC   ........           _BLF     ??append,??append??rA
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   0110A0E3           MOV      R1,#+1
   \   00000208   0D00A0E1           MOV      R0,SP
   \   0000020C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   38008DE2           ADD      R0,SP,#+56
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   54008DE2           ADD      R0,SP,#+84
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000230   0020A0E3           MOV      R2,#+0
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   1C008DE2           ADD      R0,SP,#+28
   \   0000023C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0110A0E3           MOV      R1,#+1
   \   00000248   70008DE2           ADD      R0,SP,#+112
   \   0000024C   ........           _BLF     ??_Tidy,??_Tidy??rA
    237                      }
    238                      if ( PROProjectInfo::LowTankPressLimit != LowTankPressLimit ) {
   \                     ??WriteConfigToFile_4:
   \   00000250   ACB194E5           LDR      R11,[R4, #+428]
   \   00000254   000099E5           LDR      R0,[R9, #+0]
   \   00000258   0B10A0E1           MOV      R1,R11
   \   0000025C   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000260   000050E3           CMP      R0,#+0
   \   00000264   3600000A           BEQ      ??WriteConfigToFile_5
    239                          LocalString += TabStr1 + KeyWord(AL_LIM_LOWTANK_PRESS) + FloatToAnsiString(LowTankPressLimit * MH2O_TO_MBAR) + CrLfStr;
   \   00000268   0720A0E3           MOV      R2,#+7
   \   0000026C   04002DE9           PUSH     {R2}
   \   00000270   0B00A0E1           MOV      R0,R11
   \   00000274   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000278   0020A0E1           MOV      R2,R0
   \   0000027C   98099FE5           LDR      R0,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000280   0130A0E1           MOV      R3,R1
   \   00000284   94199FE5           LDR      R1,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000288   ........           _BLF     __dMul,??__dMul??rA
   \   0000028C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000290   0400BDE8           POP      {R2}
   \   00000294   0010A0E1           MOV      R1,R0
   \   00000298   0330A0E3           MOV      R3,#+3
   \   0000029C   0D00A0E1           MOV      R0,SP
   \   000002A0   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000002A4   0810A0E1           MOV      R1,R8
   \   000002A8   38008DE2           ADD      R0,SP,#+56
   \   000002AC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002B0   38208DE2           ADD      R2,SP,#+56
   \   000002B4   0510A0E1           MOV      R1,R5
   \   000002B8   1C008DE2           ADD      R0,SP,#+28
   \   000002BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002C0   0D20A0E1           MOV      R2,SP
   \   000002C4   1C108DE2           ADD      R1,SP,#+28
   \   000002C8   70008DE2           ADD      R0,SP,#+112
   \   000002CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002D0   0620A0E1           MOV      R2,R6
   \   000002D4   70108DE2           ADD      R1,SP,#+112
   \   000002D8   54008DE2           ADD      R0,SP,#+84
   \   000002DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002E0   0730A0E1           MOV      R3,R7
   \   000002E4   0020A0E3           MOV      R2,#+0
   \   000002E8   54108DE2           ADD      R1,SP,#+84
   \   000002EC   8C008DE2           ADD      R0,SP,#+140
   \   000002F0   ........           _BLF     ??append,??append??rA
   \   000002F4   0020A0E3           MOV      R2,#+0
   \   000002F8   0110A0E3           MOV      R1,#+1
   \   000002FC   54008DE2           ADD      R0,SP,#+84
   \   00000300   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000304   0020A0E3           MOV      R2,#+0
   \   00000308   0110A0E3           MOV      R1,#+1
   \   0000030C   70008DE2           ADD      R0,SP,#+112
   \   00000310   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000314   0020A0E3           MOV      R2,#+0
   \   00000318   0110A0E3           MOV      R1,#+1
   \   0000031C   0D00A0E1           MOV      R0,SP
   \   00000320   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000324   0020A0E3           MOV      R2,#+0
   \   00000328   0110A0E3           MOV      R1,#+1
   \   0000032C   1C008DE2           ADD      R0,SP,#+28
   \   00000330   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000334   0020A0E3           MOV      R2,#+0
   \   00000338   0110A0E3           MOV      R1,#+1
   \   0000033C   38008DE2           ADD      R0,SP,#+56
   \   00000340   ........           _BLF     ??_Tidy,??_Tidy??rA
    240                      }
    241                      if ( PROProjectInfo::HighPressVacLimit != HighPressVacLimit ) {
   \                     ??WriteConfigToFile_5:
   \   00000344   D8089FE5           LDR      R0,??WriteConfigToFile_2+0x24  ;; ??HighPressVacLimit
   \   00000348   B4B194E5           LDR      R11,[R4, #+436]
   \   0000034C   000090E5           LDR      R0,[R0, #+0]
   \   00000350   0B10A0E1           MOV      R1,R11
   \   00000354   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000358   000050E3           CMP      R0,#+0
   \   0000035C   3500000A           BEQ      ??WriteConfigToFile_6
    242                          LocalString += TabStr1 + KeyWord(AL_LIM_HIGH_PV_PRESS) + FloatToAnsiString(HighPressVacLimit * MH2O_TO_MBAR) + CrLfStr;
   \   00000360   0B00A0E1           MOV      R0,R11
   \   00000364   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000368   0020A0E1           MOV      R2,R0
   \   0000036C   A8089FE5           LDR      R0,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000370   0130A0E1           MOV      R3,R1
   \   00000374   A4189FE5           LDR      R1,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000378   0790A0E3           MOV      R9,#+7
   \   0000037C   ........           _BLF     __dMul,??__dMul??rA
   \   00000380   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000384   0010A0E1           MOV      R1,R0
   \   00000388   0330A0E3           MOV      R3,#+3
   \   0000038C   0920A0E1           MOV      R2,R9
   \   00000390   54008DE2           ADD      R0,SP,#+84
   \   00000394   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000398   0A10A0E1           MOV      R1,R10
   \   0000039C   70008DE2           ADD      R0,SP,#+112
   \   000003A0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003A4   70208DE2           ADD      R2,SP,#+112
   \   000003A8   0510A0E1           MOV      R1,R5
   \   000003AC   1C008DE2           ADD      R0,SP,#+28
   \   000003B0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003B4   54208DE2           ADD      R2,SP,#+84
   \   000003B8   1C108DE2           ADD      R1,SP,#+28
   \   000003BC   38008DE2           ADD      R0,SP,#+56
   \   000003C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C4   0620A0E1           MOV      R2,R6
   \   000003C8   38108DE2           ADD      R1,SP,#+56
   \   000003CC   0D00A0E1           MOV      R0,SP
   \   000003D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003D4   0730A0E1           MOV      R3,R7
   \   000003D8   0020A0E3           MOV      R2,#+0
   \   000003DC   0D10A0E1           MOV      R1,SP
   \   000003E0   8C008DE2           ADD      R0,SP,#+140
   \   000003E4   ........           _BLF     ??append,??append??rA
   \   000003E8   0020A0E3           MOV      R2,#+0
   \   000003EC   0110A0E3           MOV      R1,#+1
   \   000003F0   0D00A0E1           MOV      R0,SP
   \   000003F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003F8   0020A0E3           MOV      R2,#+0
   \   000003FC   0110A0E3           MOV      R1,#+1
   \   00000400   38008DE2           ADD      R0,SP,#+56
   \   00000404   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0110A0E3           MOV      R1,#+1
   \   00000410   54008DE2           ADD      R0,SP,#+84
   \   00000414   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000418   0020A0E3           MOV      R2,#+0
   \   0000041C   0110A0E3           MOV      R1,#+1
   \   00000420   1C008DE2           ADD      R0,SP,#+28
   \   00000424   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000428   0020A0E3           MOV      R2,#+0
   \   0000042C   0110A0E3           MOV      R1,#+1
   \   00000430   70008DE2           ADD      R0,SP,#+112
   \   00000434   ........           _BLF     ??_Tidy,??_Tidy??rA
    243                      }
    244                      if ( PROProjectInfo::LowPressVacLimit != LowPressVacLimit ) {
   \                     ??WriteConfigToFile_6:
   \   00000438   E8079FE5           LDR      R0,??WriteConfigToFile_2+0x28  ;; ??LowPressVacLimit
   \   0000043C   B0A194E5           LDR      R10,[R4, #+432]
   \   00000440   000090E5           LDR      R0,[R0, #+0]
   \   00000444   0A10A0E1           MOV      R1,R10
   \   00000448   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000044C   000050E3           CMP      R0,#+0
   \   00000450   3400000A           BEQ      ??WriteConfigToFile_7
    245                          LocalString += TabStr1 + KeyWord(AL_LIM_LOW_PV_PRESS) + FloatToAnsiString(LowPressVacLimit * MH2O_TO_MBAR) + CrLfStr;
   \   00000454   0A00A0E1           MOV      R0,R10
   \   00000458   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000045C   B8279FE5           LDR      R2,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000460   B8379FE5           LDR      R3,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000464   0790A0E3           MOV      R9,#+7
   \   00000468   ........           _BLF     __dMul,??__dMul??rA
   \   0000046C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000470   0010A0E1           MOV      R1,R0
   \   00000474   0330A0E3           MOV      R3,#+3
   \   00000478   0920A0E1           MOV      R2,R9
   \   0000047C   0D00A0E1           MOV      R0,SP
   \   00000480   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000484   2910A0E3           MOV      R1,#+41
   \   00000488   E01E81E3           ORR      R1,R1,#0xE00
   \   0000048C   38008DE2           ADD      R0,SP,#+56
   \   00000490   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000494   38208DE2           ADD      R2,SP,#+56
   \   00000498   0510A0E1           MOV      R1,R5
   \   0000049C   1C008DE2           ADD      R0,SP,#+28
   \   000004A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004A4   0D20A0E1           MOV      R2,SP
   \   000004A8   1C108DE2           ADD      R1,SP,#+28
   \   000004AC   70008DE2           ADD      R0,SP,#+112
   \   000004B0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004B4   0620A0E1           MOV      R2,R6
   \   000004B8   70108DE2           ADD      R1,SP,#+112
   \   000004BC   54008DE2           ADD      R0,SP,#+84
   \   000004C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004C4   0730A0E1           MOV      R3,R7
   \   000004C8   0020A0E3           MOV      R2,#+0
   \   000004CC   54108DE2           ADD      R1,SP,#+84
   \   000004D0   8C008DE2           ADD      R0,SP,#+140
   \   000004D4   ........           _BLF     ??append,??append??rA
   \   000004D8   0020A0E3           MOV      R2,#+0
   \   000004DC   0110A0E3           MOV      R1,#+1
   \   000004E0   54008DE2           ADD      R0,SP,#+84
   \   000004E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004E8   0020A0E3           MOV      R2,#+0
   \   000004EC   0110A0E3           MOV      R1,#+1
   \   000004F0   70008DE2           ADD      R0,SP,#+112
   \   000004F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004F8   0020A0E3           MOV      R2,#+0
   \   000004FC   0110A0E3           MOV      R1,#+1
   \   00000500   0D00A0E1           MOV      R0,SP
   \   00000504   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000508   0020A0E3           MOV      R2,#+0
   \   0000050C   0110A0E3           MOV      R1,#+1
   \   00000510   1C008DE2           ADD      R0,SP,#+28
   \   00000514   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000518   0020A0E3           MOV      R2,#+0
   \   0000051C   0110A0E3           MOV      R1,#+1
   \   00000520   38008DE2           ADD      R0,SP,#+56
   \   00000524   ........           _BLF     ??_Tidy,??_Tidy??rA
    246                      }
    247                      if ( PROProjectInfo::HighIGP_Limit != HighIGP_Limit ) {
   \                     ??WriteConfigToFile_7:
   \   00000528   FC069FE5           LDR      R0,??WriteConfigToFile_2+0x2C  ;; ??HighIGP_Limit
   \   0000052C   BCA194E5           LDR      R10,[R4, #+444]
   \   00000530   000090E5           LDR      R0,[R0, #+0]
   \   00000534   0A10A0E1           MOV      R1,R10
   \   00000538   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000053C   000050E3           CMP      R0,#+0
   \   00000540   3400000A           BEQ      ??WriteConfigToFile_8
    248                          LocalString += TabStr1 + KeyWord(AL_LIM_HIGH_IG_PRESS) + FloatToAnsiString(HighIGP_Limit * MH2O_TO_MBAR) + CrLfStr;
   \   00000544   0A00A0E1           MOV      R0,R10
   \   00000548   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000054C   C8269FE5           LDR      R2,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000550   C8369FE5           LDR      R3,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000554   0790A0E3           MOV      R9,#+7
   \   00000558   ........           _BLF     __dMul,??__dMul??rA
   \   0000055C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000560   0010A0E1           MOV      R1,R0
   \   00000564   0330A0E3           MOV      R3,#+3
   \   00000568   0920A0E1           MOV      R2,R9
   \   0000056C   54008DE2           ADD      R0,SP,#+84
   \   00000570   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000574   2C10A0E3           MOV      R1,#+44
   \   00000578   E01E81E3           ORR      R1,R1,#0xE00
   \   0000057C   70008DE2           ADD      R0,SP,#+112
   \   00000580   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000584   70208DE2           ADD      R2,SP,#+112
   \   00000588   0510A0E1           MOV      R1,R5
   \   0000058C   1C008DE2           ADD      R0,SP,#+28
   \   00000590   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000594   54208DE2           ADD      R2,SP,#+84
   \   00000598   1C108DE2           ADD      R1,SP,#+28
   \   0000059C   38008DE2           ADD      R0,SP,#+56
   \   000005A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005A4   0620A0E1           MOV      R2,R6
   \   000005A8   38108DE2           ADD      R1,SP,#+56
   \   000005AC   0D00A0E1           MOV      R0,SP
   \   000005B0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005B4   0730A0E1           MOV      R3,R7
   \   000005B8   0020A0E3           MOV      R2,#+0
   \   000005BC   0D10A0E1           MOV      R1,SP
   \   000005C0   8C008DE2           ADD      R0,SP,#+140
   \   000005C4   ........           _BLF     ??append,??append??rA
   \   000005C8   0020A0E3           MOV      R2,#+0
   \   000005CC   0110A0E3           MOV      R1,#+1
   \   000005D0   0D00A0E1           MOV      R0,SP
   \   000005D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005D8   0020A0E3           MOV      R2,#+0
   \   000005DC   0110A0E3           MOV      R1,#+1
   \   000005E0   38008DE2           ADD      R0,SP,#+56
   \   000005E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005E8   0020A0E3           MOV      R2,#+0
   \   000005EC   0110A0E3           MOV      R1,#+1
   \   000005F0   54008DE2           ADD      R0,SP,#+84
   \   000005F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005F8   0020A0E3           MOV      R2,#+0
   \   000005FC   0110A0E3           MOV      R1,#+1
   \   00000600   1C008DE2           ADD      R0,SP,#+28
   \   00000604   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000608   0020A0E3           MOV      R2,#+0
   \   0000060C   0110A0E3           MOV      R1,#+1
   \   00000610   70008DE2           ADD      R0,SP,#+112
   \   00000614   ........           _BLF     ??_Tidy,??_Tidy??rA
    249                      }
    250                      if ( PROProjectInfo::LowIGP_Limit != LowIGP_Limit ) {
   \                     ??WriteConfigToFile_8:
   \   00000618   10069FE5           LDR      R0,??WriteConfigToFile_2+0x30  ;; ??LowIGP_Limit
   \   0000061C   B8A194E5           LDR      R10,[R4, #+440]
   \   00000620   000090E5           LDR      R0,[R0, #+0]
   \   00000624   0A10A0E1           MOV      R1,R10
   \   00000628   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000062C   000050E3           CMP      R0,#+0
   \   00000630   3400000A           BEQ      ??WriteConfigToFile_9
    251                          LocalString += TabStr1 + KeyWord(AL_LIM_LOW_IG_PRESS) + FloatToAnsiString(LowIGP_Limit * MH2O_TO_MBAR) + CrLfStr;
   \   00000634   0A00A0E1           MOV      R0,R10
   \   00000638   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000063C   D8259FE5           LDR      R2,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000640   D8359FE5           LDR      R3,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000644   0790A0E3           MOV      R9,#+7
   \   00000648   ........           _BLF     __dMul,??__dMul??rA
   \   0000064C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000650   0010A0E1           MOV      R1,R0
   \   00000654   0330A0E3           MOV      R3,#+3
   \   00000658   0920A0E1           MOV      R2,R9
   \   0000065C   0D00A0E1           MOV      R0,SP
   \   00000660   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000664   2D10A0E3           MOV      R1,#+45
   \   00000668   E01E81E3           ORR      R1,R1,#0xE00
   \   0000066C   38008DE2           ADD      R0,SP,#+56
   \   00000670   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000674   38208DE2           ADD      R2,SP,#+56
   \   00000678   0510A0E1           MOV      R1,R5
   \   0000067C   1C008DE2           ADD      R0,SP,#+28
   \   00000680   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000684   0D20A0E1           MOV      R2,SP
   \   00000688   1C108DE2           ADD      R1,SP,#+28
   \   0000068C   70008DE2           ADD      R0,SP,#+112
   \   00000690   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000694   0620A0E1           MOV      R2,R6
   \   00000698   70108DE2           ADD      R1,SP,#+112
   \   0000069C   54008DE2           ADD      R0,SP,#+84
   \   000006A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000006A4   0730A0E1           MOV      R3,R7
   \   000006A8   0020A0E3           MOV      R2,#+0
   \   000006AC   54108DE2           ADD      R1,SP,#+84
   \   000006B0   8C008DE2           ADD      R0,SP,#+140
   \   000006B4   ........           _BLF     ??append,??append??rA
   \   000006B8   0020A0E3           MOV      R2,#+0
   \   000006BC   0110A0E3           MOV      R1,#+1
   \   000006C0   54008DE2           ADD      R0,SP,#+84
   \   000006C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006C8   0020A0E3           MOV      R2,#+0
   \   000006CC   0110A0E3           MOV      R1,#+1
   \   000006D0   70008DE2           ADD      R0,SP,#+112
   \   000006D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006D8   0020A0E3           MOV      R2,#+0
   \   000006DC   0110A0E3           MOV      R1,#+1
   \   000006E0   0D00A0E1           MOV      R0,SP
   \   000006E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006E8   0020A0E3           MOV      R2,#+0
   \   000006EC   0110A0E3           MOV      R1,#+1
   \   000006F0   1C008DE2           ADD      R0,SP,#+28
   \   000006F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006F8   0020A0E3           MOV      R2,#+0
   \   000006FC   0110A0E3           MOV      R1,#+1
   \   00000700   38008DE2           ADD      R0,SP,#+56
   \   00000704   ........           _BLF     ??_Tidy,??_Tidy??rA
    252                      }
    253                      if ( PROProjectInfo::HighVapourRetLimit != HighVapourReturnLimit ) {
   \                     ??WriteConfigToFile_9:
   \   00000708   24059FE5           LDR      R0,??WriteConfigToFile_2+0x34  ;; ??HighVapourRetLimit
   \   0000070C   C4A194E5           LDR      R10,[R4, #+452]
   \   00000710   000090E5           LDR      R0,[R0, #+0]
   \   00000714   0A10A0E1           MOV      R1,R10
   \   00000718   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000071C   000050E3           CMP      R0,#+0
   \   00000720   3400000A           BEQ      ??WriteConfigToFile_10
    254                          LocalString += TabStr1 + KeyWord(AL_LIM_HIGHVAPOUR_RET) + FloatToAnsiString(HighVapourReturnLimit * MH2O_TO_MBAR) + CrLfStr;
   \   00000724   0A00A0E1           MOV      R0,R10
   \   00000728   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000072C   E8249FE5           LDR      R2,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000730   E8349FE5           LDR      R3,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000734   0790A0E3           MOV      R9,#+7
   \   00000738   ........           _BLF     __dMul,??__dMul??rA
   \   0000073C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000740   0010A0E1           MOV      R1,R0
   \   00000744   0330A0E3           MOV      R3,#+3
   \   00000748   0920A0E1           MOV      R2,R9
   \   0000074C   54008DE2           ADD      R0,SP,#+84
   \   00000750   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000754   2210A0E3           MOV      R1,#+34
   \   00000758   E01E81E3           ORR      R1,R1,#0xE00
   \   0000075C   70008DE2           ADD      R0,SP,#+112
   \   00000760   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000764   70208DE2           ADD      R2,SP,#+112
   \   00000768   0510A0E1           MOV      R1,R5
   \   0000076C   1C008DE2           ADD      R0,SP,#+28
   \   00000770   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000774   54208DE2           ADD      R2,SP,#+84
   \   00000778   1C108DE2           ADD      R1,SP,#+28
   \   0000077C   38008DE2           ADD      R0,SP,#+56
   \   00000780   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000784   0620A0E1           MOV      R2,R6
   \   00000788   38108DE2           ADD      R1,SP,#+56
   \   0000078C   0D00A0E1           MOV      R0,SP
   \   00000790   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000794   0730A0E1           MOV      R3,R7
   \   00000798   0020A0E3           MOV      R2,#+0
   \   0000079C   0D10A0E1           MOV      R1,SP
   \   000007A0   8C008DE2           ADD      R0,SP,#+140
   \   000007A4   ........           _BLF     ??append,??append??rA
   \   000007A8   0020A0E3           MOV      R2,#+0
   \   000007AC   0110A0E3           MOV      R1,#+1
   \   000007B0   0D00A0E1           MOV      R0,SP
   \   000007B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007B8   0020A0E3           MOV      R2,#+0
   \   000007BC   0110A0E3           MOV      R1,#+1
   \   000007C0   38008DE2           ADD      R0,SP,#+56
   \   000007C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007C8   0020A0E3           MOV      R2,#+0
   \   000007CC   0110A0E3           MOV      R1,#+1
   \   000007D0   54008DE2           ADD      R0,SP,#+84
   \   000007D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007D8   0020A0E3           MOV      R2,#+0
   \   000007DC   0110A0E3           MOV      R1,#+1
   \   000007E0   1C008DE2           ADD      R0,SP,#+28
   \   000007E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007E8   0020A0E3           MOV      R2,#+0
   \   000007EC   0110A0E3           MOV      R1,#+1
   \   000007F0   70008DE2           ADD      R0,SP,#+112
   \   000007F4   ........           _BLF     ??_Tidy,??_Tidy??rA
    255                      }
    256                      if ( PROProjectInfo::LowVapourRetLimit != LowVapourReturnLimit ) {
   \                     ??WriteConfigToFile_10:
   \   000007F8   38049FE5           LDR      R0,??WriteConfigToFile_2+0x38  ;; ??LowVapourRetLimit
   \   000007FC   C0A194E5           LDR      R10,[R4, #+448]
   \   00000800   000090E5           LDR      R0,[R0, #+0]
   \   00000804   0A10A0E1           MOV      R1,R10
   \   00000808   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000080C   000050E3           CMP      R0,#+0
   \   00000810   3400000A           BEQ      ??WriteConfigToFile_11
    257                          LocalString += TabStr1 + KeyWord(AL_LIM_LOWVAPOUR_RET) + FloatToAnsiString(LowVapourReturnLimit * MH2O_TO_MBAR) + CrLfStr;
   \   00000814   0A00A0E1           MOV      R0,R10
   \   00000818   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000081C   F8239FE5           LDR      R2,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000820   F8339FE5           LDR      R3,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000824   0790A0E3           MOV      R9,#+7
   \   00000828   0380A0E3           MOV      R8,#+3
   \   0000082C   ........           _BLF     __dMul,??__dMul??rA
   \   00000830   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000834   0010A0E1           MOV      R1,R0
   \   00000838   0330A0E3           MOV      R3,#+3
   \   0000083C   0920A0E1           MOV      R2,R9
   \   00000840   0D00A0E1           MOV      R0,SP
   \   00000844   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000848   E21E88E3           ORR      R1,R8,#0xE20
   \   0000084C   38008DE2           ADD      R0,SP,#+56
   \   00000850   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000854   38208DE2           ADD      R2,SP,#+56
   \   00000858   0510A0E1           MOV      R1,R5
   \   0000085C   1C008DE2           ADD      R0,SP,#+28
   \   00000860   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000864   0D20A0E1           MOV      R2,SP
   \   00000868   1C108DE2           ADD      R1,SP,#+28
   \   0000086C   70008DE2           ADD      R0,SP,#+112
   \   00000870   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000874   0620A0E1           MOV      R2,R6
   \   00000878   70108DE2           ADD      R1,SP,#+112
   \   0000087C   54008DE2           ADD      R0,SP,#+84
   \   00000880   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000884   0730A0E1           MOV      R3,R7
   \   00000888   0020A0E3           MOV      R2,#+0
   \   0000088C   54108DE2           ADD      R1,SP,#+84
   \   00000890   8C008DE2           ADD      R0,SP,#+140
   \   00000894   ........           _BLF     ??append,??append??rA
   \   00000898   0020A0E3           MOV      R2,#+0
   \   0000089C   0110A0E3           MOV      R1,#+1
   \   000008A0   54008DE2           ADD      R0,SP,#+84
   \   000008A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008A8   0020A0E3           MOV      R2,#+0
   \   000008AC   0110A0E3           MOV      R1,#+1
   \   000008B0   70008DE2           ADD      R0,SP,#+112
   \   000008B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008B8   0020A0E3           MOV      R2,#+0
   \   000008BC   0110A0E3           MOV      R1,#+1
   \   000008C0   0D00A0E1           MOV      R0,SP
   \   000008C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008C8   0020A0E3           MOV      R2,#+0
   \   000008CC   0110A0E3           MOV      R1,#+1
   \   000008D0   1C008DE2           ADD      R0,SP,#+28
   \   000008D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008D8   0020A0E3           MOV      R2,#+0
   \   000008DC   0110A0E3           MOV      R1,#+1
   \   000008E0   38008DE2           ADD      R0,SP,#+56
   \   000008E4   ........           _BLF     ??_Tidy,??_Tidy??rA
    258                      }
    259                      if ( PROProjectInfo::IntHighTankPressLimit1 != IntHighTankPressLimit1 ) {
   \                     ??WriteConfigToFile_11:
   \   000008E8   4C039FE5           LDR      R0,??WriteConfigToFile_2+0x3C  ;; ??IntHighTankPressLimit1
   \   000008EC   C8A194E5           LDR      R10,[R4, #+456]
   \   000008F0   000090E5           LDR      R0,[R0, #+0]
   \   000008F4   0A10A0E1           MOV      R1,R10
   \   000008F8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000008FC   000050E3           CMP      R0,#+0
   \   00000900   3400000A           BEQ      ??WriteConfigToFile_12
    260                          LocalString += TabStr1 + KeyWord(AL_LIM_X_HI_TNK_PRESS1) + FloatToAnsiString(IntHighTankPressLimit1 * MH2O_TO_MBAR) + CrLfStr;
   \   00000904   0A00A0E1           MOV      R0,R10
   \   00000908   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000090C   08239FE5           LDR      R2,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000910   08339FE5           LDR      R3,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000914   0790A0E3           MOV      R9,#+7
   \   00000918   ........           _BLF     __dMul,??__dMul??rA
   \   0000091C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000920   0010A0E1           MOV      R1,R0
   \   00000924   0330A0E3           MOV      R3,#+3
   \   00000928   0920A0E1           MOV      R2,R9
   \   0000092C   54008DE2           ADD      R0,SP,#+84
   \   00000930   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000934   2E10A0E3           MOV      R1,#+46
   \   00000938   E01E81E3           ORR      R1,R1,#0xE00
   \   0000093C   70008DE2           ADD      R0,SP,#+112
   \   00000940   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000944   70208DE2           ADD      R2,SP,#+112
   \   00000948   0510A0E1           MOV      R1,R5
   \   0000094C   1C008DE2           ADD      R0,SP,#+28
   \   00000950   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000954   54208DE2           ADD      R2,SP,#+84
   \   00000958   1C108DE2           ADD      R1,SP,#+28
   \   0000095C   38008DE2           ADD      R0,SP,#+56
   \   00000960   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000964   0620A0E1           MOV      R2,R6
   \   00000968   38108DE2           ADD      R1,SP,#+56
   \   0000096C   0D00A0E1           MOV      R0,SP
   \   00000970   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000974   0730A0E1           MOV      R3,R7
   \   00000978   0020A0E3           MOV      R2,#+0
   \   0000097C   0D10A0E1           MOV      R1,SP
   \   00000980   8C008DE2           ADD      R0,SP,#+140
   \   00000984   ........           _BLF     ??append,??append??rA
   \   00000988   0020A0E3           MOV      R2,#+0
   \   0000098C   0110A0E3           MOV      R1,#+1
   \   00000990   0D00A0E1           MOV      R0,SP
   \   00000994   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000998   0020A0E3           MOV      R2,#+0
   \   0000099C   0110A0E3           MOV      R1,#+1
   \   000009A0   38008DE2           ADD      R0,SP,#+56
   \   000009A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009A8   0020A0E3           MOV      R2,#+0
   \   000009AC   0110A0E3           MOV      R1,#+1
   \   000009B0   54008DE2           ADD      R0,SP,#+84
   \   000009B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009B8   0020A0E3           MOV      R2,#+0
   \   000009BC   0110A0E3           MOV      R1,#+1
   \   000009C0   1C008DE2           ADD      R0,SP,#+28
   \   000009C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000009C8   0020A0E3           MOV      R2,#+0
   \   000009CC   0110A0E3           MOV      R1,#+1
   \   000009D0   70008DE2           ADD      R0,SP,#+112
   \   000009D4   ........           _BLF     ??_Tidy,??_Tidy??rA
    261                      }
    262                      if ( PROProjectInfo::IntLowTankPressLimit1 != IntLowTankPressLimit1 ) {
   \                     ??WriteConfigToFile_12:
   \   000009D8   60029FE5           LDR      R0,??WriteConfigToFile_2+0x40  ;; ??IntLowTankPressLimit1
   \   000009DC   CCA194E5           LDR      R10,[R4, #+460]
   \   000009E0   000090E5           LDR      R0,[R0, #+0]
   \   000009E4   0A10A0E1           MOV      R1,R10
   \   000009E8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000009EC   000050E3           CMP      R0,#+0
   \   000009F0   3400000A           BEQ      ??WriteConfigToFile_13
    263                          LocalString += TabStr1 + KeyWord(AL_LIM_X_LO_TNK_PRESS2) + FloatToAnsiString(IntLowTankPressLimit1 * MH2O_TO_MBAR) + CrLfStr;
   \   000009F4   0A00A0E1           MOV      R0,R10
   \   000009F8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000009FC   18229FE5           LDR      R2,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000A00   18329FE5           LDR      R3,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000A04   0790A0E3           MOV      R9,#+7
   \   00000A08   ........           _BLF     __dMul,??__dMul??rA
   \   00000A0C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000A10   0010A0E1           MOV      R1,R0
   \   00000A14   0330A0E3           MOV      R3,#+3
   \   00000A18   0920A0E1           MOV      R2,R9
   \   00000A1C   0D00A0E1           MOV      R0,SP
   \   00000A20   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000A24   3110A0E3           MOV      R1,#+49
   \   00000A28   E01E81E3           ORR      R1,R1,#0xE00
   \   00000A2C   38008DE2           ADD      R0,SP,#+56
   \   00000A30   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000A34   38208DE2           ADD      R2,SP,#+56
   \   00000A38   0510A0E1           MOV      R1,R5
   \   00000A3C   1C008DE2           ADD      R0,SP,#+28
   \   00000A40   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A44   0D20A0E1           MOV      R2,SP
   \   00000A48   1C108DE2           ADD      R1,SP,#+28
   \   00000A4C   70008DE2           ADD      R0,SP,#+112
   \   00000A50   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A54   0620A0E1           MOV      R2,R6
   \   00000A58   70108DE2           ADD      R1,SP,#+112
   \   00000A5C   54008DE2           ADD      R0,SP,#+84
   \   00000A60   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000A64   0730A0E1           MOV      R3,R7
   \   00000A68   0020A0E3           MOV      R2,#+0
   \   00000A6C   54108DE2           ADD      R1,SP,#+84
   \   00000A70   8C008DE2           ADD      R0,SP,#+140
   \   00000A74   ........           _BLF     ??append,??append??rA
   \   00000A78   0020A0E3           MOV      R2,#+0
   \   00000A7C   0110A0E3           MOV      R1,#+1
   \   00000A80   54008DE2           ADD      R0,SP,#+84
   \   00000A84   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A88   0020A0E3           MOV      R2,#+0
   \   00000A8C   0110A0E3           MOV      R1,#+1
   \   00000A90   70008DE2           ADD      R0,SP,#+112
   \   00000A94   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000A98   0020A0E3           MOV      R2,#+0
   \   00000A9C   0110A0E3           MOV      R1,#+1
   \   00000AA0   0D00A0E1           MOV      R0,SP
   \   00000AA4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AA8   0020A0E3           MOV      R2,#+0
   \   00000AAC   0110A0E3           MOV      R1,#+1
   \   00000AB0   1C008DE2           ADD      R0,SP,#+28
   \   00000AB4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000AB8   0020A0E3           MOV      R2,#+0
   \   00000ABC   0110A0E3           MOV      R1,#+1
   \   00000AC0   38008DE2           ADD      R0,SP,#+56
   \   00000AC4   ........           _BLF     ??_Tidy,??_Tidy??rA
    264                      }
    265                      if ( PROProjectInfo::IntLowTankPressLimit2 != IntLowTankPressLimit2 ) {
   \                     ??WriteConfigToFile_13:
   \   00000AC8   74019FE5           LDR      R0,??WriteConfigToFile_2+0x44  ;; ??IntLowTankPressLimit2
   \   00000ACC   D4A194E5           LDR      R10,[R4, #+468]
   \   00000AD0   000090E5           LDR      R0,[R0, #+0]
   \   00000AD4   0A10A0E1           MOV      R1,R10
   \   00000AD8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000ADC   000050E3           CMP      R0,#+0
   \   00000AE0   3400000A           BEQ      ??WriteConfigToFile_14
    266                          LocalString += TabStr1 + KeyWord(AL_LIM_X_LO_TNK_PRESS1) + FloatToAnsiString(IntLowTankPressLimit2 * MH2O_TO_MBAR) + CrLfStr;
   \   00000AE4   0A00A0E1           MOV      R0,R10
   \   00000AE8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000AEC   28219FE5           LDR      R2,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000AF0   28319FE5           LDR      R3,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000AF4   0790A0E3           MOV      R9,#+7
   \   00000AF8   ........           _BLF     __dMul,??__dMul??rA
   \   00000AFC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000B00   0010A0E1           MOV      R1,R0
   \   00000B04   0330A0E3           MOV      R3,#+3
   \   00000B08   0920A0E1           MOV      R2,R9
   \   00000B0C   54008DE2           ADD      R0,SP,#+84
   \   00000B10   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000B14   2F10A0E3           MOV      R1,#+47
   \   00000B18   E01E81E3           ORR      R1,R1,#0xE00
   \   00000B1C   70008DE2           ADD      R0,SP,#+112
   \   00000B20   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000B24   70208DE2           ADD      R2,SP,#+112
   \   00000B28   0510A0E1           MOV      R1,R5
   \   00000B2C   1C008DE2           ADD      R0,SP,#+28
   \   00000B30   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B34   54208DE2           ADD      R2,SP,#+84
   \   00000B38   1C108DE2           ADD      R1,SP,#+28
   \   00000B3C   38008DE2           ADD      R0,SP,#+56
   \   00000B40   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B44   0620A0E1           MOV      R2,R6
   \   00000B48   38108DE2           ADD      R1,SP,#+56
   \   00000B4C   0D00A0E1           MOV      R0,SP
   \   00000B50   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000B54   0730A0E1           MOV      R3,R7
   \   00000B58   0020A0E3           MOV      R2,#+0
   \   00000B5C   0D10A0E1           MOV      R1,SP
   \   00000B60   8C008DE2           ADD      R0,SP,#+140
   \   00000B64   ........           _BLF     ??append,??append??rA
   \   00000B68   0020A0E3           MOV      R2,#+0
   \   00000B6C   0110A0E3           MOV      R1,#+1
   \   00000B70   0D00A0E1           MOV      R0,SP
   \   00000B74   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B78   0020A0E3           MOV      R2,#+0
   \   00000B7C   0110A0E3           MOV      R1,#+1
   \   00000B80   38008DE2           ADD      R0,SP,#+56
   \   00000B84   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B88   0020A0E3           MOV      R2,#+0
   \   00000B8C   0110A0E3           MOV      R1,#+1
   \   00000B90   54008DE2           ADD      R0,SP,#+84
   \   00000B94   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000B98   0020A0E3           MOV      R2,#+0
   \   00000B9C   0110A0E3           MOV      R1,#+1
   \   00000BA0   1C008DE2           ADD      R0,SP,#+28
   \   00000BA4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000BA8   0020A0E3           MOV      R2,#+0
   \   00000BAC   0110A0E3           MOV      R1,#+1
   \   00000BB0   70008DE2           ADD      R0,SP,#+112
   \   00000BB4   ........           _BLF     ??_Tidy,??_Tidy??rA
    267                      }
    268                      if ( PROProjectInfo::IntHighTankPressLimit2 != IntHighTankPressLimit2 ) {
   \                     ??WriteConfigToFile_14:
   \   00000BB8   88009FE5           LDR      R0,??WriteConfigToFile_2+0x48  ;; ??IntHighTankPressLimit2
   \   00000BBC   D0A194E5           LDR      R10,[R4, #+464]
   \   00000BC0   000090E5           LDR      R0,[R0, #+0]
   \   00000BC4   0A10A0E1           MOV      R1,R10
   \   00000BC8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000BCC   000050E3           CMP      R0,#+0
   \   00000BD0   9D02000A           BEQ      ??WriteConfigToFile_15
    269                          LocalString += TabStr1 + KeyWord(AL_LIM_X_HI_TNK_PRESS2) + FloatToAnsiString(IntHighTankPressLimit2 * MH2O_TO_MBAR) + CrLfStr;
   \   00000BD4   0A00A0E1           MOV      R0,R10
   \   00000BD8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000BDC   38209FE5           LDR      R2,??WriteConfigToFile_2+0x1C  ;; 0xffffffff89374bc7
   \   00000BE0   38309FE5           LDR      R3,??WriteConfigToFile_2+0x20  ;; 0x40588441
   \   00000BE4   0790A0E3           MOV      R9,#+7
   \   00000BE8   ........           _BLF     __dMul,??__dMul??rA
   \   00000BEC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000BF0   0010A0E1           MOV      R1,R0
   \   00000BF4   0330A0E3           MOV      R3,#+3
   \   00000BF8   0920A0E1           MOV      R2,R9
   \   00000BFC   680200EA           B        ??WriteConfigToFile_16
   \                     ??WriteConfigToFile_2:
   \   00000C00   ........           DC32     TabStr1
   \   00000C04   ........           DC32     CrLfStr
   \   00000C08   ........           DC32     ??LowTankPressLimit
   \   00000C0C   ........           DC32     `?<Constant "0x%0x">`
   \   00000C10   ........           DC32     ??npos
   \   00000C14   ........           DC32     ??PressLim_mBar
   \   00000C18   ........           DC32     ??HighTankPressLimit
   \   00000C1C   C74B3789           DC32     0xffffffff89374bc7
   \   00000C20   41845840           DC32     0x40588441
   \   00000C24   ........           DC32     ??HighPressVacLimit
   \   00000C28   ........           DC32     ??LowPressVacLimit
   \   00000C2C   ........           DC32     ??HighIGP_Limit
   \   00000C30   ........           DC32     ??LowIGP_Limit
   \   00000C34   ........           DC32     ??HighVapourRetLimit
   \   00000C38   ........           DC32     ??LowVapourRetLimit
   \   00000C3C   ........           DC32     ??IntHighTankPressLimit1
   \   00000C40   ........           DC32     ??IntLowTankPressLimit1
   \   00000C44   ........           DC32     ??IntLowTankPressLimit2
   \   00000C48   ........           DC32     ??IntHighTankPressLimit2
    270                      }
    271                  } else {
    272                      if ( PROProjectInfo::HighTankPressLimit != HighTankPressLimit ) {
   \                     ??WriteConfigToFile_3:
   \   00000C4C   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000C50   000050E3           CMP      R0,#+0
   \   00000C54   2C00000A           BEQ      ??WriteConfigToFile_17
    273                          LocalString += TabStr1 + KeyWord(AL_LIM_HIGHTANK_PRESS) + FloatToAnsiString(HighTankPressLimit) + CrLfStr;
   \   00000C58   0330A0E3           MOV      R3,#+3
   \   00000C5C   0720A0E3           MOV      R2,#+7
   \   00000C60   0B10A0E1           MOV      R1,R11
   \   00000C64   54008DE2           ADD      R0,SP,#+84
   \   00000C68   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000C6C   E21EA0E3           MOV      R1,#+3616
   \   00000C70   70008DE2           ADD      R0,SP,#+112
   \   00000C74   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000C78   70208DE2           ADD      R2,SP,#+112
   \   00000C7C   0510A0E1           MOV      R1,R5
   \   00000C80   1C008DE2           ADD      R0,SP,#+28
   \   00000C84   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C88   54208DE2           ADD      R2,SP,#+84
   \   00000C8C   1C108DE2           ADD      R1,SP,#+28
   \   00000C90   38008DE2           ADD      R0,SP,#+56
   \   00000C94   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000C98   0620A0E1           MOV      R2,R6
   \   00000C9C   38108DE2           ADD      R1,SP,#+56
   \   00000CA0   0D00A0E1           MOV      R0,SP
   \   00000CA4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000CA8   0730A0E1           MOV      R3,R7
   \   00000CAC   0020A0E3           MOV      R2,#+0
   \   00000CB0   0D10A0E1           MOV      R1,SP
   \   00000CB4   8C008DE2           ADD      R0,SP,#+140
   \   00000CB8   ........           _BLF     ??append,??append??rA
   \   00000CBC   0020A0E3           MOV      R2,#+0
   \   00000CC0   0110A0E3           MOV      R1,#+1
   \   00000CC4   0D00A0E1           MOV      R0,SP
   \   00000CC8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CCC   0020A0E3           MOV      R2,#+0
   \   00000CD0   0110A0E3           MOV      R1,#+1
   \   00000CD4   38008DE2           ADD      R0,SP,#+56
   \   00000CD8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CDC   0020A0E3           MOV      R2,#+0
   \   00000CE0   0110A0E3           MOV      R1,#+1
   \   00000CE4   54008DE2           ADD      R0,SP,#+84
   \   00000CE8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CEC   0020A0E3           MOV      R2,#+0
   \   00000CF0   0110A0E3           MOV      R1,#+1
   \   00000CF4   1C008DE2           ADD      R0,SP,#+28
   \   00000CF8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000CFC   0020A0E3           MOV      R2,#+0
   \   00000D00   0110A0E3           MOV      R1,#+1
   \   00000D04   70008DE2           ADD      R0,SP,#+112
   \   00000D08   ........           _BLF     ??_Tidy,??_Tidy??rA
    274                      }
    275                      if ( PROProjectInfo::LowTankPressLimit != LowTankPressLimit ) {
   \                     ??WriteConfigToFile_17:
   \   00000D0C   ACB194E5           LDR      R11,[R4, #+428]
   \   00000D10   000099E5           LDR      R0,[R9, #+0]
   \   00000D14   0B10A0E1           MOV      R1,R11
   \   00000D18   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000D1C   000050E3           CMP      R0,#+0
   \   00000D20   2C00000A           BEQ      ??WriteConfigToFile_18
    276                          LocalString += TabStr1 + KeyWord(AL_LIM_LOWTANK_PRESS) + FloatToAnsiString(LowTankPressLimit) + CrLfStr;
   \   00000D24   0330A0E3           MOV      R3,#+3
   \   00000D28   0720A0E3           MOV      R2,#+7
   \   00000D2C   0B10A0E1           MOV      R1,R11
   \   00000D30   0D00A0E1           MOV      R0,SP
   \   00000D34   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000D38   0810A0E1           MOV      R1,R8
   \   00000D3C   38008DE2           ADD      R0,SP,#+56
   \   00000D40   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000D44   38208DE2           ADD      R2,SP,#+56
   \   00000D48   0510A0E1           MOV      R1,R5
   \   00000D4C   1C008DE2           ADD      R0,SP,#+28
   \   00000D50   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D54   0D20A0E1           MOV      R2,SP
   \   00000D58   1C108DE2           ADD      R1,SP,#+28
   \   00000D5C   70008DE2           ADD      R0,SP,#+112
   \   00000D60   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D64   0620A0E1           MOV      R2,R6
   \   00000D68   70108DE2           ADD      R1,SP,#+112
   \   00000D6C   54008DE2           ADD      R0,SP,#+84
   \   00000D70   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000D74   0730A0E1           MOV      R3,R7
   \   00000D78   0020A0E3           MOV      R2,#+0
   \   00000D7C   54108DE2           ADD      R1,SP,#+84
   \   00000D80   8C008DE2           ADD      R0,SP,#+140
   \   00000D84   ........           _BLF     ??append,??append??rA
   \   00000D88   0020A0E3           MOV      R2,#+0
   \   00000D8C   0110A0E3           MOV      R1,#+1
   \   00000D90   54008DE2           ADD      R0,SP,#+84
   \   00000D94   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000D98   0020A0E3           MOV      R2,#+0
   \   00000D9C   0110A0E3           MOV      R1,#+1
   \   00000DA0   70008DE2           ADD      R0,SP,#+112
   \   00000DA4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DA8   0020A0E3           MOV      R2,#+0
   \   00000DAC   0110A0E3           MOV      R1,#+1
   \   00000DB0   0D00A0E1           MOV      R0,SP
   \   00000DB4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DB8   0020A0E3           MOV      R2,#+0
   \   00000DBC   0110A0E3           MOV      R1,#+1
   \   00000DC0   1C008DE2           ADD      R0,SP,#+28
   \   00000DC4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000DC8   0020A0E3           MOV      R2,#+0
   \   00000DCC   0110A0E3           MOV      R1,#+1
   \   00000DD0   38008DE2           ADD      R0,SP,#+56
   \   00000DD4   ........           _BLF     ??_Tidy,??_Tidy??rA
    277                      }
    278                      if ( PROProjectInfo::HighPressVacLimit != HighPressVacLimit ) {
   \                     ??WriteConfigToFile_18:
   \   00000DD8   ........           LDR      R0,??DataTable19  ;; ??HighPressVacLimit
   \   00000DDC   B48194E5           LDR      R8,[R4, #+436]
   \   00000DE0   000090E5           LDR      R0,[R0, #+0]
   \   00000DE4   0810A0E1           MOV      R1,R8
   \   00000DE8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000DEC   000050E3           CMP      R0,#+0
   \   00000DF0   2C00000A           BEQ      ??WriteConfigToFile_19
    279                          LocalString += TabStr1 + KeyWord(AL_LIM_HIGH_PV_PRESS) + FloatToAnsiString(HighPressVacLimit) + CrLfStr;
   \   00000DF4   0330A0E3           MOV      R3,#+3
   \   00000DF8   0720A0E3           MOV      R2,#+7
   \   00000DFC   0810A0E1           MOV      R1,R8
   \   00000E00   54008DE2           ADD      R0,SP,#+84
   \   00000E04   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000E08   0A10A0E1           MOV      R1,R10
   \   00000E0C   70008DE2           ADD      R0,SP,#+112
   \   00000E10   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000E14   70208DE2           ADD      R2,SP,#+112
   \   00000E18   0510A0E1           MOV      R1,R5
   \   00000E1C   1C008DE2           ADD      R0,SP,#+28
   \   00000E20   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E24   54208DE2           ADD      R2,SP,#+84
   \   00000E28   1C108DE2           ADD      R1,SP,#+28
   \   00000E2C   38008DE2           ADD      R0,SP,#+56
   \   00000E30   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E34   0620A0E1           MOV      R2,R6
   \   00000E38   38108DE2           ADD      R1,SP,#+56
   \   00000E3C   0D00A0E1           MOV      R0,SP
   \   00000E40   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000E44   0730A0E1           MOV      R3,R7
   \   00000E48   0020A0E3           MOV      R2,#+0
   \   00000E4C   0D10A0E1           MOV      R1,SP
   \   00000E50   8C008DE2           ADD      R0,SP,#+140
   \   00000E54   ........           _BLF     ??append,??append??rA
   \   00000E58   0020A0E3           MOV      R2,#+0
   \   00000E5C   0110A0E3           MOV      R1,#+1
   \   00000E60   0D00A0E1           MOV      R0,SP
   \   00000E64   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E68   0020A0E3           MOV      R2,#+0
   \   00000E6C   0110A0E3           MOV      R1,#+1
   \   00000E70   38008DE2           ADD      R0,SP,#+56
   \   00000E74   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E78   0020A0E3           MOV      R2,#+0
   \   00000E7C   0110A0E3           MOV      R1,#+1
   \   00000E80   54008DE2           ADD      R0,SP,#+84
   \   00000E84   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E88   0020A0E3           MOV      R2,#+0
   \   00000E8C   0110A0E3           MOV      R1,#+1
   \   00000E90   1C008DE2           ADD      R0,SP,#+28
   \   00000E94   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000E98   0020A0E3           MOV      R2,#+0
   \   00000E9C   0110A0E3           MOV      R1,#+1
   \   00000EA0   70008DE2           ADD      R0,SP,#+112
   \   00000EA4   ........           _BLF     ??_Tidy,??_Tidy??rA
    280                      }
    281                      if ( PROProjectInfo::LowPressVacLimit != LowPressVacLimit ) {
   \                     ??WriteConfigToFile_19:
   \   00000EA8   ........           LDR      R0,??DataTable20  ;; ??LowPressVacLimit
   \   00000EAC   B08194E5           LDR      R8,[R4, #+432]
   \   00000EB0   000090E5           LDR      R0,[R0, #+0]
   \   00000EB4   0810A0E1           MOV      R1,R8
   \   00000EB8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000EBC   000050E3           CMP      R0,#+0
   \   00000EC0   2C00000A           BEQ      ??WriteConfigToFile_20
    282                          LocalString += TabStr1 + KeyWord(AL_LIM_LOW_PV_PRESS) + FloatToAnsiString(LowPressVacLimit) + CrLfStr;
   \   00000EC4   0330A0E3           MOV      R3,#+3
   \   00000EC8   0720A0E3           MOV      R2,#+7
   \   00000ECC   0810A0E1           MOV      R1,R8
   \   00000ED0   0D00A0E1           MOV      R0,SP
   \   00000ED4   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000ED8   02108AE2           ADD      R1,R10,#+2
   \   00000EDC   38008DE2           ADD      R0,SP,#+56
   \   00000EE0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000EE4   38208DE2           ADD      R2,SP,#+56
   \   00000EE8   0510A0E1           MOV      R1,R5
   \   00000EEC   1C008DE2           ADD      R0,SP,#+28
   \   00000EF0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000EF4   0D20A0E1           MOV      R2,SP
   \   00000EF8   1C108DE2           ADD      R1,SP,#+28
   \   00000EFC   70008DE2           ADD      R0,SP,#+112
   \   00000F00   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000F04   0620A0E1           MOV      R2,R6
   \   00000F08   70108DE2           ADD      R1,SP,#+112
   \   00000F0C   54008DE2           ADD      R0,SP,#+84
   \   00000F10   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000F14   0730A0E1           MOV      R3,R7
   \   00000F18   0020A0E3           MOV      R2,#+0
   \   00000F1C   54108DE2           ADD      R1,SP,#+84
   \   00000F20   8C008DE2           ADD      R0,SP,#+140
   \   00000F24   ........           _BLF     ??append,??append??rA
   \   00000F28   0020A0E3           MOV      R2,#+0
   \   00000F2C   0110A0E3           MOV      R1,#+1
   \   00000F30   54008DE2           ADD      R0,SP,#+84
   \   00000F34   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F38   0020A0E3           MOV      R2,#+0
   \   00000F3C   0110A0E3           MOV      R1,#+1
   \   00000F40   70008DE2           ADD      R0,SP,#+112
   \   00000F44   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F48   0020A0E3           MOV      R2,#+0
   \   00000F4C   0110A0E3           MOV      R1,#+1
   \   00000F50   0D00A0E1           MOV      R0,SP
   \   00000F54   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F58   0020A0E3           MOV      R2,#+0
   \   00000F5C   0110A0E3           MOV      R1,#+1
   \   00000F60   1C008DE2           ADD      R0,SP,#+28
   \   00000F64   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000F68   0020A0E3           MOV      R2,#+0
   \   00000F6C   0110A0E3           MOV      R1,#+1
   \   00000F70   38008DE2           ADD      R0,SP,#+56
   \   00000F74   ........           _BLF     ??_Tidy,??_Tidy??rA
    283                      }
    284                      if ( PROProjectInfo::HighIGP_Limit != HighIGP_Limit ) {
   \                     ??WriteConfigToFile_20:
   \   00000F78   ........           LDR      R0,??DataTable21  ;; ??HighIGP_Limit
   \   00000F7C   BCA194E5           LDR      R10,[R4, #+444]
   \   00000F80   000090E5           LDR      R0,[R0, #+0]
   \   00000F84   0A10A0E1           MOV      R1,R10
   \   00000F88   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000F8C   000050E3           CMP      R0,#+0
   \   00000F90   3400000A           BEQ      ??WriteConfigToFile_21
    285                          LocalString += TabStr1 + KeyWord(AL_LIM_HIGH_IG_PRESS) + FloatToAnsiString(HighIGP_Limit * MH2O_TO_MBAR) + CrLfStr;
   \   00000F94   0A00A0E1           MOV      R0,R10
   \   00000F98   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000F9C   ........           LDR      R2,??DataTable25  ;; 0xffffffff89374bc7
   \   00000FA0   ........           LDR      R3,??DataTable26  ;; 0x40588441
   \   00000FA4   0790A0E3           MOV      R9,#+7
   \   00000FA8   ........           _BLF     __dMul,??__dMul??rA
   \   00000FAC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000FB0   0010A0E1           MOV      R1,R0
   \   00000FB4   0330A0E3           MOV      R3,#+3
   \   00000FB8   0920A0E1           MOV      R2,R9
   \   00000FBC   54008DE2           ADD      R0,SP,#+84
   \   00000FC0   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000FC4   2C10A0E3           MOV      R1,#+44
   \   00000FC8   E01E81E3           ORR      R1,R1,#0xE00
   \   00000FCC   70008DE2           ADD      R0,SP,#+112
   \   00000FD0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000FD4   70208DE2           ADD      R2,SP,#+112
   \   00000FD8   0510A0E1           MOV      R1,R5
   \   00000FDC   1C008DE2           ADD      R0,SP,#+28
   \   00000FE0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000FE4   54208DE2           ADD      R2,SP,#+84
   \   00000FE8   1C108DE2           ADD      R1,SP,#+28
   \   00000FEC   38008DE2           ADD      R0,SP,#+56
   \   00000FF0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000FF4   0620A0E1           MOV      R2,R6
   \   00000FF8   38108DE2           ADD      R1,SP,#+56
   \   00000FFC   0D00A0E1           MOV      R0,SP
   \   00001000   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001004   0730A0E1           MOV      R3,R7
   \   00001008   0020A0E3           MOV      R2,#+0
   \   0000100C   0D10A0E1           MOV      R1,SP
   \   00001010   8C008DE2           ADD      R0,SP,#+140
   \   00001014   ........           _BLF     ??append,??append??rA
   \   00001018   0020A0E3           MOV      R2,#+0
   \   0000101C   0110A0E3           MOV      R1,#+1
   \   00001020   0D00A0E1           MOV      R0,SP
   \   00001024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001028   0020A0E3           MOV      R2,#+0
   \   0000102C   0110A0E3           MOV      R1,#+1
   \   00001030   38008DE2           ADD      R0,SP,#+56
   \   00001034   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001038   0020A0E3           MOV      R2,#+0
   \   0000103C   0110A0E3           MOV      R1,#+1
   \   00001040   54008DE2           ADD      R0,SP,#+84
   \   00001044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001048   0020A0E3           MOV      R2,#+0
   \   0000104C   0110A0E3           MOV      R1,#+1
   \   00001050   1C008DE2           ADD      R0,SP,#+28
   \   00001054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001058   0020A0E3           MOV      R2,#+0
   \   0000105C   0110A0E3           MOV      R1,#+1
   \   00001060   70008DE2           ADD      R0,SP,#+112
   \   00001064   ........           _BLF     ??_Tidy,??_Tidy??rA
    286                      }
    287                      if ( PROProjectInfo::LowIGP_Limit != LowIGP_Limit ) {
   \                     ??WriteConfigToFile_21:
   \   00001068   ........           LDR      R0,??DataTable24  ;; ??LowIGP_Limit
   \   0000106C   B8A194E5           LDR      R10,[R4, #+440]
   \   00001070   000090E5           LDR      R0,[R0, #+0]
   \   00001074   0A10A0E1           MOV      R1,R10
   \   00001078   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000107C   000050E3           CMP      R0,#+0
   \   00001080   3400000A           BEQ      ??WriteConfigToFile_22
    288                          LocalString += TabStr1 + KeyWord(AL_LIM_LOW_IG_PRESS) + FloatToAnsiString(LowIGP_Limit * MH2O_TO_MBAR) + CrLfStr;
   \   00001084   0A00A0E1           MOV      R0,R10
   \   00001088   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000108C   ........           LDR      R2,??DataTable25  ;; 0xffffffff89374bc7
   \   00001090   ........           LDR      R3,??DataTable26  ;; 0x40588441
   \   00001094   0790A0E3           MOV      R9,#+7
   \   00001098   ........           _BLF     __dMul,??__dMul??rA
   \   0000109C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000010A0   0010A0E1           MOV      R1,R0
   \   000010A4   0330A0E3           MOV      R3,#+3
   \   000010A8   0920A0E1           MOV      R2,R9
   \   000010AC   0D00A0E1           MOV      R0,SP
   \   000010B0   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000010B4   2D10A0E3           MOV      R1,#+45
   \   000010B8   E01E81E3           ORR      R1,R1,#0xE00
   \   000010BC   38008DE2           ADD      R0,SP,#+56
   \   000010C0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000010C4   38208DE2           ADD      R2,SP,#+56
   \   000010C8   0510A0E1           MOV      R1,R5
   \   000010CC   1C008DE2           ADD      R0,SP,#+28
   \   000010D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000010D4   0D20A0E1           MOV      R2,SP
   \   000010D8   1C108DE2           ADD      R1,SP,#+28
   \   000010DC   70008DE2           ADD      R0,SP,#+112
   \   000010E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000010E4   0620A0E1           MOV      R2,R6
   \   000010E8   70108DE2           ADD      R1,SP,#+112
   \   000010EC   54008DE2           ADD      R0,SP,#+84
   \   000010F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000010F4   0730A0E1           MOV      R3,R7
   \   000010F8   0020A0E3           MOV      R2,#+0
   \   000010FC   54108DE2           ADD      R1,SP,#+84
   \   00001100   8C008DE2           ADD      R0,SP,#+140
   \   00001104   ........           _BLF     ??append,??append??rA
   \   00001108   0020A0E3           MOV      R2,#+0
   \   0000110C   0110A0E3           MOV      R1,#+1
   \   00001110   54008DE2           ADD      R0,SP,#+84
   \   00001114   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001118   0020A0E3           MOV      R2,#+0
   \   0000111C   0110A0E3           MOV      R1,#+1
   \   00001120   70008DE2           ADD      R0,SP,#+112
   \   00001124   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001128   0020A0E3           MOV      R2,#+0
   \   0000112C   0110A0E3           MOV      R1,#+1
   \   00001130   0D00A0E1           MOV      R0,SP
   \   00001134   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001138   0020A0E3           MOV      R2,#+0
   \   0000113C   0110A0E3           MOV      R1,#+1
   \   00001140   1C008DE2           ADD      R0,SP,#+28
   \   00001144   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001148   0020A0E3           MOV      R2,#+0
   \   0000114C   0110A0E3           MOV      R1,#+1
   \   00001150   38008DE2           ADD      R0,SP,#+56
   \   00001154   ........           _BLF     ??_Tidy,??_Tidy??rA
    289                      }
    290                      if ( PROProjectInfo::HighVapourRetLimit != HighVapourReturnLimit ) {
   \                     ??WriteConfigToFile_22:
   \   00001158   ........           LDR      R0,??DataTable27  ;; ??HighVapourRetLimit
   \   0000115C   C48194E5           LDR      R8,[R4, #+452]
   \   00001160   000090E5           LDR      R0,[R0, #+0]
   \   00001164   0810A0E1           MOV      R1,R8
   \   00001168   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   0000116C   000050E3           CMP      R0,#+0
   \   00001170   2D00000A           BEQ      ??WriteConfigToFile_23
    291                          LocalString += TabStr1 + KeyWord(AL_LIM_HIGHVAPOUR_RET) + FloatToAnsiString(HighVapourReturnLimit) + CrLfStr;
   \   00001174   0330A0E3           MOV      R3,#+3
   \   00001178   0720A0E3           MOV      R2,#+7
   \   0000117C   0810A0E1           MOV      R1,R8
   \   00001180   54008DE2           ADD      R0,SP,#+84
   \   00001184   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00001188   2210A0E3           MOV      R1,#+34
   \   0000118C   E01E81E3           ORR      R1,R1,#0xE00
   \   00001190   70008DE2           ADD      R0,SP,#+112
   \   00001194   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001198   70208DE2           ADD      R2,SP,#+112
   \   0000119C   0510A0E1           MOV      R1,R5
   \   000011A0   1C008DE2           ADD      R0,SP,#+28
   \   000011A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000011A8   54208DE2           ADD      R2,SP,#+84
   \   000011AC   1C108DE2           ADD      R1,SP,#+28
   \   000011B0   38008DE2           ADD      R0,SP,#+56
   \   000011B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000011B8   0620A0E1           MOV      R2,R6
   \   000011BC   38108DE2           ADD      R1,SP,#+56
   \   000011C0   0D00A0E1           MOV      R0,SP
   \   000011C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000011C8   0730A0E1           MOV      R3,R7
   \   000011CC   0020A0E3           MOV      R2,#+0
   \   000011D0   0D10A0E1           MOV      R1,SP
   \   000011D4   8C008DE2           ADD      R0,SP,#+140
   \   000011D8   ........           _BLF     ??append,??append??rA
   \   000011DC   0020A0E3           MOV      R2,#+0
   \   000011E0   0110A0E3           MOV      R1,#+1
   \   000011E4   0D00A0E1           MOV      R0,SP
   \   000011E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000011EC   0020A0E3           MOV      R2,#+0
   \   000011F0   0110A0E3           MOV      R1,#+1
   \   000011F4   38008DE2           ADD      R0,SP,#+56
   \   000011F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000011FC   0020A0E3           MOV      R2,#+0
   \   00001200   0110A0E3           MOV      R1,#+1
   \   00001204   54008DE2           ADD      R0,SP,#+84
   \   00001208   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000120C   0020A0E3           MOV      R2,#+0
   \   00001210   0110A0E3           MOV      R1,#+1
   \   00001214   1C008DE2           ADD      R0,SP,#+28
   \   00001218   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000121C   0020A0E3           MOV      R2,#+0
   \   00001220   0110A0E3           MOV      R1,#+1
   \   00001224   70008DE2           ADD      R0,SP,#+112
   \   00001228   ........           _BLF     ??_Tidy,??_Tidy??rA
    292                      }
    293                      if ( PROProjectInfo::LowVapourRetLimit != LowVapourReturnLimit ) {
   \                     ??WriteConfigToFile_23:
   \   0000122C   ........           LDR      R0,??DataTable28  ;; ??LowVapourRetLimit
   \   00001230   C08194E5           LDR      R8,[R4, #+448]
   \   00001234   000090E5           LDR      R0,[R0, #+0]
   \   00001238   0810A0E1           MOV      R1,R8
   \   0000123C   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00001240   000050E3           CMP      R0,#+0
   \   00001244   2D00000A           BEQ      ??WriteConfigToFile_24
    294                          LocalString += TabStr1 + KeyWord(AL_LIM_LOWVAPOUR_RET) + FloatToAnsiString(LowVapourReturnLimit) + CrLfStr;
   \   00001248   0330A0E3           MOV      R3,#+3
   \   0000124C   0720A0E3           MOV      R2,#+7
   \   00001250   0810A0E1           MOV      R1,R8
   \   00001254   0D00A0E1           MOV      R0,SP
   \   00001258   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   0000125C   2310A0E3           MOV      R1,#+35
   \   00001260   E01E81E3           ORR      R1,R1,#0xE00
   \   00001264   38008DE2           ADD      R0,SP,#+56
   \   00001268   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000126C   38208DE2           ADD      R2,SP,#+56
   \   00001270   0510A0E1           MOV      R1,R5
   \   00001274   1C008DE2           ADD      R0,SP,#+28
   \   00001278   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000127C   0D20A0E1           MOV      R2,SP
   \   00001280   1C108DE2           ADD      R1,SP,#+28
   \   00001284   70008DE2           ADD      R0,SP,#+112
   \   00001288   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000128C   0620A0E1           MOV      R2,R6
   \   00001290   70108DE2           ADD      R1,SP,#+112
   \   00001294   54008DE2           ADD      R0,SP,#+84
   \   00001298   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000129C   0730A0E1           MOV      R3,R7
   \   000012A0   0020A0E3           MOV      R2,#+0
   \   000012A4   54108DE2           ADD      R1,SP,#+84
   \   000012A8   8C008DE2           ADD      R0,SP,#+140
   \   000012AC   ........           _BLF     ??append,??append??rA
   \   000012B0   0020A0E3           MOV      R2,#+0
   \   000012B4   0110A0E3           MOV      R1,#+1
   \   000012B8   54008DE2           ADD      R0,SP,#+84
   \   000012BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012C0   0020A0E3           MOV      R2,#+0
   \   000012C4   0110A0E3           MOV      R1,#+1
   \   000012C8   70008DE2           ADD      R0,SP,#+112
   \   000012CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012D0   0020A0E3           MOV      R2,#+0
   \   000012D4   0110A0E3           MOV      R1,#+1
   \   000012D8   0D00A0E1           MOV      R0,SP
   \   000012DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012E0   0020A0E3           MOV      R2,#+0
   \   000012E4   0110A0E3           MOV      R1,#+1
   \   000012E8   1C008DE2           ADD      R0,SP,#+28
   \   000012EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000012F0   0020A0E3           MOV      R2,#+0
   \   000012F4   0110A0E3           MOV      R1,#+1
   \   000012F8   38008DE2           ADD      R0,SP,#+56
   \   000012FC   ........           _BLF     ??_Tidy,??_Tidy??rA
    295                      }
    296                      if ( PROProjectInfo::IntHighTankPressLimit1 != IntHighTankPressLimit1 ) {
   \                     ??WriteConfigToFile_24:
   \   00001300   ........           LDR      R0,??DataTable29  ;; ??IntHighTankPressLimit1
   \   00001304   C88194E5           LDR      R8,[R4, #+456]
   \   00001308   000090E5           LDR      R0,[R0, #+0]
   \   0000130C   0810A0E1           MOV      R1,R8
   \   00001310   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00001314   000050E3           CMP      R0,#+0
   \   00001318   2D00000A           BEQ      ??WriteConfigToFile_25
    297                          LocalString += TabStr1 + KeyWord(AL_LIM_X_HI_TNK_PRESS1) + FloatToAnsiString(IntHighTankPressLimit1) + CrLfStr;
   \   0000131C   0330A0E3           MOV      R3,#+3
   \   00001320   0720A0E3           MOV      R2,#+7
   \   00001324   0810A0E1           MOV      R1,R8
   \   00001328   54008DE2           ADD      R0,SP,#+84
   \   0000132C   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00001330   2E10A0E3           MOV      R1,#+46
   \   00001334   E01E81E3           ORR      R1,R1,#0xE00
   \   00001338   70008DE2           ADD      R0,SP,#+112
   \   0000133C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001340   70208DE2           ADD      R2,SP,#+112
   \   00001344   0510A0E1           MOV      R1,R5
   \   00001348   1C008DE2           ADD      R0,SP,#+28
   \   0000134C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001350   54208DE2           ADD      R2,SP,#+84
   \   00001354   1C108DE2           ADD      R1,SP,#+28
   \   00001358   38008DE2           ADD      R0,SP,#+56
   \   0000135C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001360   0620A0E1           MOV      R2,R6
   \   00001364   38108DE2           ADD      R1,SP,#+56
   \   00001368   0D00A0E1           MOV      R0,SP
   \   0000136C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001370   0730A0E1           MOV      R3,R7
   \   00001374   0020A0E3           MOV      R2,#+0
   \   00001378   0D10A0E1           MOV      R1,SP
   \   0000137C   8C008DE2           ADD      R0,SP,#+140
   \   00001380   ........           _BLF     ??append,??append??rA
   \   00001384   0020A0E3           MOV      R2,#+0
   \   00001388   0110A0E3           MOV      R1,#+1
   \   0000138C   0D00A0E1           MOV      R0,SP
   \   00001390   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001394   0020A0E3           MOV      R2,#+0
   \   00001398   0110A0E3           MOV      R1,#+1
   \   0000139C   38008DE2           ADD      R0,SP,#+56
   \   000013A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000013A4   0020A0E3           MOV      R2,#+0
   \   000013A8   0110A0E3           MOV      R1,#+1
   \   000013AC   54008DE2           ADD      R0,SP,#+84
   \   000013B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000013B4   0020A0E3           MOV      R2,#+0
   \   000013B8   0110A0E3           MOV      R1,#+1
   \   000013BC   1C008DE2           ADD      R0,SP,#+28
   \   000013C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000013C4   0020A0E3           MOV      R2,#+0
   \   000013C8   0110A0E3           MOV      R1,#+1
   \   000013CC   70008DE2           ADD      R0,SP,#+112
   \   000013D0   ........           _BLF     ??_Tidy,??_Tidy??rA
    298                      }
    299                      if ( PROProjectInfo::IntLowTankPressLimit1 != IntLowTankPressLimit1 ) {
   \                     ??WriteConfigToFile_25:
   \   000013D4   ........           LDR      R0,??DataTable30  ;; ??IntLowTankPressLimit1
   \   000013D8   CC8194E5           LDR      R8,[R4, #+460]
   \   000013DC   000090E5           LDR      R0,[R0, #+0]
   \   000013E0   0810A0E1           MOV      R1,R8
   \   000013E4   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000013E8   000050E3           CMP      R0,#+0
   \   000013EC   2D00000A           BEQ      ??WriteConfigToFile_26
    300                          LocalString += TabStr1 + KeyWord(AL_LIM_X_LO_TNK_PRESS2) + FloatToAnsiString(IntLowTankPressLimit1) + CrLfStr;
   \   000013F0   0330A0E3           MOV      R3,#+3
   \   000013F4   0720A0E3           MOV      R2,#+7
   \   000013F8   0810A0E1           MOV      R1,R8
   \   000013FC   0D00A0E1           MOV      R0,SP
   \   00001400   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00001404   3110A0E3           MOV      R1,#+49
   \   00001408   E01E81E3           ORR      R1,R1,#0xE00
   \   0000140C   38008DE2           ADD      R0,SP,#+56
   \   00001410   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001414   38208DE2           ADD      R2,SP,#+56
   \   00001418   0510A0E1           MOV      R1,R5
   \   0000141C   1C008DE2           ADD      R0,SP,#+28
   \   00001420   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001424   0D20A0E1           MOV      R2,SP
   \   00001428   1C108DE2           ADD      R1,SP,#+28
   \   0000142C   70008DE2           ADD      R0,SP,#+112
   \   00001430   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001434   0620A0E1           MOV      R2,R6
   \   00001438   70108DE2           ADD      R1,SP,#+112
   \   0000143C   54008DE2           ADD      R0,SP,#+84
   \   00001440   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001444   0730A0E1           MOV      R3,R7
   \   00001448   0020A0E3           MOV      R2,#+0
   \   0000144C   54108DE2           ADD      R1,SP,#+84
   \   00001450   8C008DE2           ADD      R0,SP,#+140
   \   00001454   ........           _BLF     ??append,??append??rA
   \   00001458   0020A0E3           MOV      R2,#+0
   \   0000145C   0110A0E3           MOV      R1,#+1
   \   00001460   54008DE2           ADD      R0,SP,#+84
   \   00001464   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001468   0020A0E3           MOV      R2,#+0
   \   0000146C   0110A0E3           MOV      R1,#+1
   \   00001470   70008DE2           ADD      R0,SP,#+112
   \   00001474   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001478   0020A0E3           MOV      R2,#+0
   \   0000147C   0110A0E3           MOV      R1,#+1
   \   00001480   0D00A0E1           MOV      R0,SP
   \   00001484   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001488   0020A0E3           MOV      R2,#+0
   \   0000148C   0110A0E3           MOV      R1,#+1
   \   00001490   1C008DE2           ADD      R0,SP,#+28
   \   00001494   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001498   0020A0E3           MOV      R2,#+0
   \   0000149C   0110A0E3           MOV      R1,#+1
   \   000014A0   38008DE2           ADD      R0,SP,#+56
   \   000014A4   ........           _BLF     ??_Tidy,??_Tidy??rA
    301                      }
    302                      if ( PROProjectInfo::IntLowTankPressLimit2 != IntLowTankPressLimit2 ) {
   \                     ??WriteConfigToFile_26:
   \   000014A8   ........           LDR      R0,??DataTable31  ;; ??IntLowTankPressLimit2
   \   000014AC   D48194E5           LDR      R8,[R4, #+468]
   \   000014B0   000090E5           LDR      R0,[R0, #+0]
   \   000014B4   0810A0E1           MOV      R1,R8
   \   000014B8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000014BC   000050E3           CMP      R0,#+0
   \   000014C0   2D00000A           BEQ      ??WriteConfigToFile_27
    303                          LocalString += TabStr1 + KeyWord(AL_LIM_X_LO_TNK_PRESS1) + FloatToAnsiString(IntLowTankPressLimit2) + CrLfStr;
   \   000014C4   0330A0E3           MOV      R3,#+3
   \   000014C8   0720A0E3           MOV      R2,#+7
   \   000014CC   0810A0E1           MOV      R1,R8
   \   000014D0   54008DE2           ADD      R0,SP,#+84
   \   000014D4   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000014D8   2F10A0E3           MOV      R1,#+47
   \   000014DC   E01E81E3           ORR      R1,R1,#0xE00
   \   000014E0   70008DE2           ADD      R0,SP,#+112
   \   000014E4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000014E8   70208DE2           ADD      R2,SP,#+112
   \   000014EC   0510A0E1           MOV      R1,R5
   \   000014F0   1C008DE2           ADD      R0,SP,#+28
   \   000014F4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000014F8   54208DE2           ADD      R2,SP,#+84
   \   000014FC   1C108DE2           ADD      R1,SP,#+28
   \   00001500   38008DE2           ADD      R0,SP,#+56
   \   00001504   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001508   0620A0E1           MOV      R2,R6
   \   0000150C   38108DE2           ADD      R1,SP,#+56
   \   00001510   0D00A0E1           MOV      R0,SP
   \   00001514   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001518   0730A0E1           MOV      R3,R7
   \   0000151C   0020A0E3           MOV      R2,#+0
   \   00001520   0D10A0E1           MOV      R1,SP
   \   00001524   8C008DE2           ADD      R0,SP,#+140
   \   00001528   ........           _BLF     ??append,??append??rA
   \   0000152C   0020A0E3           MOV      R2,#+0
   \   00001530   0110A0E3           MOV      R1,#+1
   \   00001534   0D00A0E1           MOV      R0,SP
   \   00001538   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000153C   0020A0E3           MOV      R2,#+0
   \   00001540   0110A0E3           MOV      R1,#+1
   \   00001544   38008DE2           ADD      R0,SP,#+56
   \   00001548   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000154C   0020A0E3           MOV      R2,#+0
   \   00001550   0110A0E3           MOV      R1,#+1
   \   00001554   54008DE2           ADD      R0,SP,#+84
   \   00001558   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000155C   0020A0E3           MOV      R2,#+0
   \   00001560   0110A0E3           MOV      R1,#+1
   \   00001564   1C008DE2           ADD      R0,SP,#+28
   \   00001568   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000156C   0020A0E3           MOV      R2,#+0
   \   00001570   0110A0E3           MOV      R1,#+1
   \   00001574   70008DE2           ADD      R0,SP,#+112
   \   00001578   ........           _BLF     ??_Tidy,??_Tidy??rA
    304                      }
    305                      if ( PROProjectInfo::IntHighTankPressLimit2 != IntHighTankPressLimit2 ) {
   \                     ??WriteConfigToFile_27:
   \   0000157C   ........           LDR      R0,??DataTable32  ;; ??IntHighTankPressLimit2
   \   00001580   D08194E5           LDR      R8,[R4, #+464]
   \   00001584   000090E5           LDR      R0,[R0, #+0]
   \   00001588   0810A0E1           MOV      R1,R8
   \   0000158C   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00001590   000050E3           CMP      R0,#+0
   \   00001594   2C00000A           BEQ      ??WriteConfigToFile_15
    306                          LocalString += TabStr1 + KeyWord(AL_LIM_X_HI_TNK_PRESS2) + FloatToAnsiString(IntHighTankPressLimit2) + CrLfStr;
   \   00001598   0330A0E3           MOV      R3,#+3
   \   0000159C   0720A0E3           MOV      R2,#+7
   \   000015A0   0810A0E1           MOV      R1,R8
   \                     ??WriteConfigToFile_16:
   \   000015A4   0D00A0E1           MOV      R0,SP
   \   000015A8   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000015AC   E31EA0E3           MOV      R1,#+3632
   \   000015B0   38008DE2           ADD      R0,SP,#+56
   \   000015B4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000015B8   38208DE2           ADD      R2,SP,#+56
   \   000015BC   0510A0E1           MOV      R1,R5
   \   000015C0   1C008DE2           ADD      R0,SP,#+28
   \   000015C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000015C8   0D20A0E1           MOV      R2,SP
   \   000015CC   1C108DE2           ADD      R1,SP,#+28
   \   000015D0   70008DE2           ADD      R0,SP,#+112
   \   000015D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000015D8   0620A0E1           MOV      R2,R6
   \   000015DC   70108DE2           ADD      R1,SP,#+112
   \   000015E0   54008DE2           ADD      R0,SP,#+84
   \   000015E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000015E8   0730A0E1           MOV      R3,R7
   \   000015EC   0020A0E3           MOV      R2,#+0
   \   000015F0   54108DE2           ADD      R1,SP,#+84
   \   000015F4   8C008DE2           ADD      R0,SP,#+140
   \   000015F8   ........           _BLF     ??append,??append??rA
   \   000015FC   0020A0E3           MOV      R2,#+0
   \   00001600   0110A0E3           MOV      R1,#+1
   \   00001604   54008DE2           ADD      R0,SP,#+84
   \   00001608   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000160C   0020A0E3           MOV      R2,#+0
   \   00001610   0110A0E3           MOV      R1,#+1
   \   00001614   70008DE2           ADD      R0,SP,#+112
   \   00001618   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000161C   0020A0E3           MOV      R2,#+0
   \   00001620   0110A0E3           MOV      R1,#+1
   \   00001624   0D00A0E1           MOV      R0,SP
   \   00001628   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000162C   0020A0E3           MOV      R2,#+0
   \   00001630   0110A0E3           MOV      R1,#+1
   \   00001634   1C008DE2           ADD      R0,SP,#+28
   \   00001638   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000163C   0020A0E3           MOV      R2,#+0
   \   00001640   0110A0E3           MOV      R1,#+1
   \   00001644   38008DE2           ADD      R0,SP,#+56
   \   00001648   ........           _BLF     ??_Tidy,??_Tidy??rA
    307                      }
    308                  }
    309                  if ( HighTankPressLocked ) LocalString += TabStr1 + KeyWord(AL_LOCK_HIGHTANK_PRESS) + CrLfStr;
   \                     ??WriteConfigToFile_15:
   \   0000164C   A401D4E5           LDRB     R0,[R4, #+420]
   \   00001650   000050E3           CMP      R0,#+0
   \   00001654   1C00000A           BEQ      ??WriteConfigToFile_28
   \   00001658   3F10A0E3           MOV      R1,#+63
   \   0000165C   E01E81E3           ORR      R1,R1,#0xE00
   \   00001660   1C008DE2           ADD      R0,SP,#+28
   \   00001664   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001668   1C208DE2           ADD      R2,SP,#+28
   \   0000166C   0510A0E1           MOV      R1,R5
   \   00001670   38008DE2           ADD      R0,SP,#+56
   \   00001674   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001678   0620A0E1           MOV      R2,R6
   \   0000167C   38108DE2           ADD      R1,SP,#+56
   \   00001680   0D00A0E1           MOV      R0,SP
   \   00001684   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001688   0730A0E1           MOV      R3,R7
   \   0000168C   0020A0E3           MOV      R2,#+0
   \   00001690   0D10A0E1           MOV      R1,SP
   \   00001694   8C008DE2           ADD      R0,SP,#+140
   \   00001698   ........           _BLF     ??append,??append??rA
   \   0000169C   0020A0E3           MOV      R2,#+0
   \   000016A0   0110A0E3           MOV      R1,#+1
   \   000016A4   0D00A0E1           MOV      R0,SP
   \   000016A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000016AC   0020A0E3           MOV      R2,#+0
   \   000016B0   0110A0E3           MOV      R1,#+1
   \   000016B4   38008DE2           ADD      R0,SP,#+56
   \   000016B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000016BC   0020A0E3           MOV      R2,#+0
   \   000016C0   0110A0E3           MOV      R1,#+1
   \   000016C4   1C008DE2           ADD      R0,SP,#+28
   \   000016C8   ........           _BLF     ??_Tidy,??_Tidy??rA
    310                  if ( LowTankPressLocked ) LocalString += TabStr1 + KeyWord(AL_LOCK_LOWTANK_PRESS) + CrLfStr;
   \                     ??WriteConfigToFile_28:
   \   000016CC   A501D4E5           LDRB     R0,[R4, #+421]
   \   000016D0   000050E3           CMP      R0,#+0
   \   000016D4   1B00000A           BEQ      ??WriteConfigToFile_29
   \   000016D8   E41EA0E3           MOV      R1,#+3648
   \   000016DC   0D00A0E1           MOV      R0,SP
   \   000016E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000016E4   0D20A0E1           MOV      R2,SP
   \   000016E8   0510A0E1           MOV      R1,R5
   \   000016EC   38008DE2           ADD      R0,SP,#+56
   \   000016F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000016F4   0620A0E1           MOV      R2,R6
   \   000016F8   38108DE2           ADD      R1,SP,#+56
   \   000016FC   1C008DE2           ADD      R0,SP,#+28
   \   00001700   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001704   0730A0E1           MOV      R3,R7
   \   00001708   0020A0E3           MOV      R2,#+0
   \   0000170C   1C108DE2           ADD      R1,SP,#+28
   \   00001710   8C008DE2           ADD      R0,SP,#+140
   \   00001714   ........           _BLF     ??append,??append??rA
   \   00001718   0020A0E3           MOV      R2,#+0
   \   0000171C   0110A0E3           MOV      R1,#+1
   \   00001720   1C008DE2           ADD      R0,SP,#+28
   \   00001724   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001728   0020A0E3           MOV      R2,#+0
   \   0000172C   0110A0E3           MOV      R1,#+1
   \   00001730   38008DE2           ADD      R0,SP,#+56
   \   00001734   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001738   0020A0E3           MOV      R2,#+0
   \   0000173C   0110A0E3           MOV      R1,#+1
   \   00001740   0D00A0E1           MOV      R0,SP
   \   00001744   ........           _BLF     ??_Tidy,??_Tidy??rA
    311                  if ( HighIGP_Locked ) LocalString += TabStr1 + KeyWord(AL_LOCK_HIGH_IGP) + CrLfStr;
   \                     ??WriteConfigToFile_29:
   \   00001748   A601D4E5           LDRB     R0,[R4, #+422]
   \   0000174C   000050E3           CMP      R0,#+0
   \   00001750   1C00000A           BEQ      ??WriteConfigToFile_30
   \   00001754   4110A0E3           MOV      R1,#+65
   \   00001758   E01E81E3           ORR      R1,R1,#0xE00
   \   0000175C   1C008DE2           ADD      R0,SP,#+28
   \   00001760   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001764   1C208DE2           ADD      R2,SP,#+28
   \   00001768   0510A0E1           MOV      R1,R5
   \   0000176C   38008DE2           ADD      R0,SP,#+56
   \   00001770   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001774   0620A0E1           MOV      R2,R6
   \   00001778   38108DE2           ADD      R1,SP,#+56
   \   0000177C   0D00A0E1           MOV      R0,SP
   \   00001780   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001784   0730A0E1           MOV      R3,R7
   \   00001788   0020A0E3           MOV      R2,#+0
   \   0000178C   0D10A0E1           MOV      R1,SP
   \   00001790   8C008DE2           ADD      R0,SP,#+140
   \   00001794   ........           _BLF     ??append,??append??rA
   \   00001798   0020A0E3           MOV      R2,#+0
   \   0000179C   0110A0E3           MOV      R1,#+1
   \   000017A0   0D00A0E1           MOV      R0,SP
   \   000017A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000017A8   0020A0E3           MOV      R2,#+0
   \   000017AC   0110A0E3           MOV      R1,#+1
   \   000017B0   38008DE2           ADD      R0,SP,#+56
   \   000017B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000017B8   0020A0E3           MOV      R2,#+0
   \   000017BC   0110A0E3           MOV      R1,#+1
   \   000017C0   1C008DE2           ADD      R0,SP,#+28
   \   000017C4   ........           _BLF     ??_Tidy,??_Tidy??rA
    312                  if ( LowIGP_Locked ) LocalString += TabStr1 + KeyWord(AL_LOCK_LOW_IGP) + CrLfStr;
   \                     ??WriteConfigToFile_30:
   \   000017C8   A701D4E5           LDRB     R0,[R4, #+423]
   \   000017CC   000050E3           CMP      R0,#+0
   \   000017D0   1C00000A           BEQ      ??WriteConfigToFile_31
   \   000017D4   4210A0E3           MOV      R1,#+66
   \   000017D8   E01E81E3           ORR      R1,R1,#0xE00
   \   000017DC   0D00A0E1           MOV      R0,SP
   \   000017E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000017E4   0D20A0E1           MOV      R2,SP
   \   000017E8   0510A0E1           MOV      R1,R5
   \   000017EC   38008DE2           ADD      R0,SP,#+56
   \   000017F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000017F4   0620A0E1           MOV      R2,R6
   \   000017F8   38108DE2           ADD      R1,SP,#+56
   \   000017FC   1C008DE2           ADD      R0,SP,#+28
   \   00001800   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001804   0730A0E1           MOV      R3,R7
   \   00001808   0020A0E3           MOV      R2,#+0
   \   0000180C   1C108DE2           ADD      R1,SP,#+28
   \   00001810   8C008DE2           ADD      R0,SP,#+140
   \   00001814   ........           _BLF     ??append,??append??rA
   \   00001818   0020A0E3           MOV      R2,#+0
   \   0000181C   0110A0E3           MOV      R1,#+1
   \   00001820   1C008DE2           ADD      R0,SP,#+28
   \   00001824   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001828   0020A0E3           MOV      R2,#+0
   \   0000182C   0110A0E3           MOV      R1,#+1
   \   00001830   38008DE2           ADD      R0,SP,#+56
   \   00001834   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001838   0020A0E3           MOV      R2,#+0
   \   0000183C   0110A0E3           MOV      R1,#+1
   \   00001840   0D00A0E1           MOV      R0,SP
   \   00001844   ........           _BLF     ??_Tidy,??_Tidy??rA
    313          
    314                  if ( HasIntHighTankPressLimit1 ) {
   \                     ??WriteConfigToFile_31:
   \   00001848   DE01D4E5           LDRB     R0,[R4, #+478]
   \   0000184C   000050E3           CMP      R0,#+0
   \   00001850   1C00000A           BEQ      ??WriteConfigToFile_32
    315                      LocalString += TabStr1 + KeyWord(AL_LIM_HAS_HI_TNK_PR1) + CrLfStr;
   \   00001854   3210A0E3           MOV      R1,#+50
   \   00001858   E01E81E3           ORR      R1,R1,#0xE00
   \   0000185C   1C008DE2           ADD      R0,SP,#+28
   \   00001860   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001864   1C208DE2           ADD      R2,SP,#+28
   \   00001868   0510A0E1           MOV      R1,R5
   \   0000186C   38008DE2           ADD      R0,SP,#+56
   \   00001870   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001874   0620A0E1           MOV      R2,R6
   \   00001878   38108DE2           ADD      R1,SP,#+56
   \   0000187C   0D00A0E1           MOV      R0,SP
   \   00001880   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001884   0730A0E1           MOV      R3,R7
   \   00001888   0020A0E3           MOV      R2,#+0
   \   0000188C   0D10A0E1           MOV      R1,SP
   \   00001890   8C008DE2           ADD      R0,SP,#+140
   \   00001894   ........           _BLF     ??append,??append??rA
   \   00001898   0020A0E3           MOV      R2,#+0
   \   0000189C   0110A0E3           MOV      R1,#+1
   \   000018A0   0D00A0E1           MOV      R0,SP
   \   000018A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000018A8   0020A0E3           MOV      R2,#+0
   \   000018AC   0110A0E3           MOV      R1,#+1
   \   000018B0   38008DE2           ADD      R0,SP,#+56
   \   000018B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000018B8   0020A0E3           MOV      R2,#+0
   \   000018BC   0110A0E3           MOV      R1,#+1
   \   000018C0   1C008DE2           ADD      R0,SP,#+28
   \   000018C4   ........           _BLF     ??_Tidy,??_Tidy??rA
    316                  }
    317                  if ( HasIntLowTankPressLimit1 ) {
   \                     ??WriteConfigToFile_32:
   \   000018C8   DF01D4E5           LDRB     R0,[R4, #+479]
   \   000018CC   000050E3           CMP      R0,#+0
   \   000018D0   1C00000A           BEQ      ??WriteConfigToFile_33
    318                      LocalString += TabStr1 + KeyWord(AL_LIM_HAS_LO_TNK_PR1) + CrLfStr;
   \   000018D4   3310A0E3           MOV      R1,#+51
   \   000018D8   E01E81E3           ORR      R1,R1,#0xE00
   \   000018DC   0D00A0E1           MOV      R0,SP
   \   000018E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000018E4   0D20A0E1           MOV      R2,SP
   \   000018E8   0510A0E1           MOV      R1,R5
   \   000018EC   38008DE2           ADD      R0,SP,#+56
   \   000018F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000018F4   0620A0E1           MOV      R2,R6
   \   000018F8   38108DE2           ADD      R1,SP,#+56
   \   000018FC   1C008DE2           ADD      R0,SP,#+28
   \   00001900   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001904   0730A0E1           MOV      R3,R7
   \   00001908   0020A0E3           MOV      R2,#+0
   \   0000190C   1C108DE2           ADD      R1,SP,#+28
   \   00001910   8C008DE2           ADD      R0,SP,#+140
   \   00001914   ........           _BLF     ??append,??append??rA
   \   00001918   0020A0E3           MOV      R2,#+0
   \   0000191C   0110A0E3           MOV      R1,#+1
   \   00001920   1C008DE2           ADD      R0,SP,#+28
   \   00001924   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001928   0020A0E3           MOV      R2,#+0
   \   0000192C   0110A0E3           MOV      R1,#+1
   \   00001930   38008DE2           ADD      R0,SP,#+56
   \   00001934   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001938   0020A0E3           MOV      R2,#+0
   \   0000193C   0110A0E3           MOV      R1,#+1
   \   00001940   0D00A0E1           MOV      R0,SP
   \   00001944   ........           _BLF     ??_Tidy,??_Tidy??rA
    319                  }
    320                  if ( HasIntHighTankPressLimit2 ) {
   \                     ??WriteConfigToFile_33:
   \   00001948   E001D4E5           LDRB     R0,[R4, #+480]
   \   0000194C   000050E3           CMP      R0,#+0
   \   00001950   1C00000A           BEQ      ??WriteConfigToFile_34
    321                      LocalString += TabStr1 + KeyWord(AL_LIM_HAS_HI_TNK_PR2) + CrLfStr;
   \   00001954   3410A0E3           MOV      R1,#+52
   \   00001958   E01E81E3           ORR      R1,R1,#0xE00
   \   0000195C   1C008DE2           ADD      R0,SP,#+28
   \   00001960   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001964   1C208DE2           ADD      R2,SP,#+28
   \   00001968   0510A0E1           MOV      R1,R5
   \   0000196C   38008DE2           ADD      R0,SP,#+56
   \   00001970   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001974   0620A0E1           MOV      R2,R6
   \   00001978   38108DE2           ADD      R1,SP,#+56
   \   0000197C   0D00A0E1           MOV      R0,SP
   \   00001980   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001984   0730A0E1           MOV      R3,R7
   \   00001988   0020A0E3           MOV      R2,#+0
   \   0000198C   0D10A0E1           MOV      R1,SP
   \   00001990   8C008DE2           ADD      R0,SP,#+140
   \   00001994   ........           _BLF     ??append,??append??rA
   \   00001998   0020A0E3           MOV      R2,#+0
   \   0000199C   0110A0E3           MOV      R1,#+1
   \   000019A0   0D00A0E1           MOV      R0,SP
   \   000019A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000019A8   0020A0E3           MOV      R2,#+0
   \   000019AC   0110A0E3           MOV      R1,#+1
   \   000019B0   38008DE2           ADD      R0,SP,#+56
   \   000019B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000019B8   0020A0E3           MOV      R2,#+0
   \   000019BC   0110A0E3           MOV      R1,#+1
   \   000019C0   1C008DE2           ADD      R0,SP,#+28
   \   000019C4   ........           _BLF     ??_Tidy,??_Tidy??rA
    322                  }
    323                  if ( HasIntLowTankPressLimit2 ) {
   \                     ??WriteConfigToFile_34:
   \   000019C8   E101D4E5           LDRB     R0,[R4, #+481]
   \   000019CC   000050E3           CMP      R0,#+0
   \   000019D0   1C00000A           BEQ      ??WriteConfigToFile_35
    324                      LocalString += TabStr1 + KeyWord(AL_LIM_HAS_LO_TNK_PR2) + CrLfStr;
   \   000019D4   3510A0E3           MOV      R1,#+53
   \   000019D8   E01E81E3           ORR      R1,R1,#0xE00
   \   000019DC   0D00A0E1           MOV      R0,SP
   \   000019E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000019E4   0D20A0E1           MOV      R2,SP
   \   000019E8   0510A0E1           MOV      R1,R5
   \   000019EC   38008DE2           ADD      R0,SP,#+56
   \   000019F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000019F4   0620A0E1           MOV      R2,R6
   \   000019F8   38108DE2           ADD      R1,SP,#+56
   \   000019FC   1C008DE2           ADD      R0,SP,#+28
   \   00001A00   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001A04   0730A0E1           MOV      R3,R7
   \   00001A08   0020A0E3           MOV      R2,#+0
   \   00001A0C   1C108DE2           ADD      R1,SP,#+28
   \   00001A10   8C008DE2           ADD      R0,SP,#+140
   \   00001A14   ........           _BLF     ??append,??append??rA
   \   00001A18   0020A0E3           MOV      R2,#+0
   \   00001A1C   0110A0E3           MOV      R1,#+1
   \   00001A20   1C008DE2           ADD      R0,SP,#+28
   \   00001A24   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001A28   0020A0E3           MOV      R2,#+0
   \   00001A2C   0110A0E3           MOV      R1,#+1
   \   00001A30   38008DE2           ADD      R0,SP,#+56
   \   00001A34   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001A38   0020A0E3           MOV      R2,#+0
   \   00001A3C   0110A0E3           MOV      R1,#+1
   \   00001A40   0D00A0E1           MOV      R0,SP
   \   00001A44   ........           _BLF     ??_Tidy,??_Tidy??rA
    325                  }
    326          
    327                  if ( !tankPressures.empty() ) {
   \                     ??WriteConfigToFile_35:
   \   00001A48   585FA0E3           MOV      R5,#+352
   \   00001A4C   040085E0           ADD      R0,R5,R4
   \   00001A50   ........           _BLF     ??empty,??empty??rA
   \   00001A54   000050E3           CMP      R0,#+0
   \   00001A58   1A00001A           BNE      ??WriteConfigToFile_36
    328                      for ( unsigned i = 0; i < tankPressures.size(); i++ ) {
   \   00001A5C   0080A0E3           MOV      R8,#+0
   \   00001A60   120000EA           B        ??WriteConfigToFile_37
    329                          LocalString += tankPressures[i]->MakeConfigString();
   \                     ??WriteConfigToFile_38:
   \   00001A64   040095E7           LDR      R0,[R5, +R4]
   \   00001A68   0020A0E3           MOV      R2,#+0
   \   00001A6C   083190E7           LDR      R3,[R0, +R8, LSL #+2]
   \   00001A70   0D10A0E1           MOV      R1,SP
   \   00001A74   0300A0E1           MOV      R0,R3
   \   00001A78   A43093E5           LDR      R3,[R3, #+164]
    330                      }
   \   00001A7C   018088E2           ADD      R8,R8,#+1
   \   00001A80   0C3093E5           LDR      R3,[R3, #+12]
   \   00001A84   0FE0A0E1           MOV      LR,PC
   \   00001A88   13FF2FE1           BX       R3
   \   00001A8C   0730A0E1           MOV      R3,R7
   \   00001A90   0020A0E3           MOV      R2,#+0
   \   00001A94   0D10A0E1           MOV      R1,SP
   \   00001A98   8C008DE2           ADD      R0,SP,#+140
   \   00001A9C   ........           _BLF     ??append,??append??rA
   \   00001AA0   0020A0E3           MOV      R2,#+0
   \   00001AA4   0110A0E3           MOV      R1,#+1
   \   00001AA8   0D00A0E1           MOV      R0,SP
   \   00001AAC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??WriteConfigToFile_37:
   \   00001AB0   040085E0           ADD      R0,R5,R4
   \   00001AB4   041090E5           LDR      R1,[R0, #+4]
   \   00001AB8   000090E5           LDR      R0,[R0, #+0]
   \   00001ABC   000041E0           SUB      R0,R1,R0
   \   00001AC0   200158E1           CMP      R8,R0, LSR #+2
   \   00001AC4   E6FFFF3A           BCC      ??WriteConfigToFile_38
    331                  }
    332                  LocalString += KeyWord(C_PRO_END) + CrLfStr;
   \                     ??WriteConfigToFile_36:
   \   00001AC8   FA1FA0E3           MOV      R1,#+1000
   \   00001ACC   540F8DE2           ADD      R0,SP,#+336
   \   00001AD0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00001AD4   0620A0E1           MOV      R2,R6
   \   00001AD8   541F8DE2           ADD      R1,SP,#+336
   \   00001ADC   4D0F8DE2           ADD      R0,SP,#+308
   \   00001AE0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00001AE4   0730A0E1           MOV      R3,R7
   \   00001AE8   0020A0E3           MOV      R2,#+0
   \   00001AEC   4D1F8DE2           ADD      R1,SP,#+308
   \   00001AF0   8C008DE2           ADD      R0,SP,#+140
   \   00001AF4   ........           _BLF     ??append,??append??rA
   \   00001AF8   0020A0E3           MOV      R2,#+0
   \   00001AFC   0110A0E3           MOV      R1,#+1
   \   00001B00   4D0F8DE2           ADD      R0,SP,#+308
   \   00001B04   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001B08   0020A0E3           MOV      R2,#+0
   \   00001B0C   0110A0E3           MOV      R1,#+1
   \   00001B10   540F8DE2           ADD      R0,SP,#+336
   \   00001B14   ........           _BLF     ??_Tidy,??_Tidy??rA
    333                  LocalString += CrLfStr;
   \   00001B18   0730A0E1           MOV      R3,R7
   \   00001B1C   0020A0E3           MOV      R2,#+0
   \   00001B20   0610A0E1           MOV      R1,R6
   \   00001B24   8C008DE2           ADD      R0,SP,#+140
   \   00001B28   ........           _BLF     ??append,??append??rA
    334                  ConfigString.AddString(LocalString);
   \   00001B2C   8C108DE2           ADD      R1,SP,#+140
   \   00001B30   5B0F8DE2           ADD      R0,SP,#+364
   \   00001B34   ........           _BLF     ??string,??string??rA
   \   00001B38   C0019DE5           LDR      R0,[SP, #+448]
   \   00001B3C   5B1F8DE2           ADD      R1,SP,#+364
   \   00001B40   ........           _BLF     ??AddString,??AddString??rA
   \   00001B44   0020A0E3           MOV      R2,#+0
   \   00001B48   0110A0E3           MOV      R1,#+1
   \   00001B4C   5B0F8DE2           ADD      R0,SP,#+364
   \   00001B50   ........           _BLF     ??_Tidy,??_Tidy??rA
    335          
    336              }
   \   00001B54   0020A0E3           MOV      R2,#+0
   \   00001B58   0110A0E3           MOV      R1,#+1
   \   00001B5C   620F8DE2           ADD      R0,SP,#+392
   \   00001B60   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00001B64   0020A0E3           MOV      R2,#+0
   \   00001B68   0110A0E3           MOV      R1,#+1
   \   00001B6C   8C008DE2           ADD      R0,SP,#+140
   \   00001B70   ........           _BLF     ??_Tidy,??_Tidy??rA
    337          }
   \                     ??WriteConfigToFile_1:
   \   00001B74   71DF8DE2           ADD      SP,SP,#+452
   \   00001B78   ........           B        ?Subroutine48

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine48:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine48_0:
   \   00000008   ........           DC32     `?<Constant "Tank pressure">`
   \   0000000C   ........           DC32     `?<Constant "Tank pressure">`
   \   00000010   1AF51843           DC32     0x4318f51a
   \   00000014   9327A3C0           DC32     0xffffffffc0a32793
    338          //---------------------------------------------------------------------------
    339          

   \                                 In segment CODE, align 4, keep-with-next
    340          int PROTankPressure::LoadConfigFromFile(TSNConfigString &ConfigString) {
   \                     ??LoadConfigFromFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   F0D04DE2           SUB      SP,SP,#+240
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    341              bool NoError   = true;
   \   00000010   0160A0E3           MOV      R6,#+1
   \   00000014   0170A0E3           MOV      R7,#+1
    342              int  ErrorLine = 0;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
   \   00000020   0180A0E1           MOV      R8,R1
   \   00000024   589FA0E3           MOV      R9,#+352
   \   00000028   4BBFA0E3           MOV      R11,#+300
    343              int  Key;
    344              do {
    345                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_1:
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   0D20A0E1           MOV      R2,SP
   \   00000034   2C108DE2           ADD      R1,SP,#+44
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??NextWord,??NextWord??rA
    346                  if ( ErrorLine ) {
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1A00000A           BEQ      ??LoadConfigFromFile_2
    347                      if ( ErrorLine != EOF ) {
   \   0000004C   010070E3           CMN      R0,#+1
   \   00000050   1902000A           BEQ      ??LoadConfigFromFile_3
    348                          GiveConfigWarning((AnsiString)"Tank pressure" + Name, ErrorLine);
   \   00000054   ........           LDR      R1,??Subroutine48_0  ;; `?<Constant "Tank pressure">`
   \   00000058   64008DE2           ADD      R0,SP,#+100
   \   0000005C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000060   442084E2           ADD      R2,R4,#+68
   \   00000064   0010A0E1           MOV      R1,R0
   \   00000068   10008DE2           ADD      R0,SP,#+16
   \   0000006C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000070   10108DE2           ADD      R1,SP,#+16
   \   00000074   48008DE2           ADD      R0,SP,#+72
   \   00000078   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   0000007C   00109DE5           LDR      R1,[SP, #+0]
   \   00000080   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0610A0E1           MOV      R1,R6
   \   0000008C   48008DE2           ADD      R0,SP,#+72
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000094   0820A0E1           MOV      R2,R8
   \   00000098   0610A0E1           MOV      R1,R6
   \   0000009C   10008DE2           ADD      R0,SP,#+16
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A4   0820A0E1           MOV      R2,R8
   \   000000A8   0610A0E1           MOV      R1,R6
   \   000000AC   64008DE2           ADD      R0,SP,#+100
   \                     ??LoadConfigFromFile_4:
   \   000000B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B4   000200EA           B        ??LoadConfigFromFile_3
    349                      }
    350                  } else {
    351                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigFromFile_2:
   \   000000B8   2C108DE2           ADD      R1,SP,#+44
    352                      switch ( Key ) {
   \   000000BC   ........           LDR      R10,??DataTable33  ;; ??PressLim_mBar
   \   000000C0   10008DE2           ADD      R0,SP,#+16
   \   000000C4   ........           _BLF     ??string,??string??rA
   \   000000C8   10008DE2           ADD      R0,SP,#+16
   \   000000CC   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000D0   04008DE5           STR      R0,[SP, #+4]
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0610A0E1           MOV      R1,R6
   \   000000DC   10008DE2           ADD      R0,SP,#+16
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E4   04009DE5           LDR      R0,[SP, #+4]
   \   000000E8   FA0F50E3           CMP      R0,#+1000
   \   000000EC   EA10A013           MOVNE    R1,#+234
   \   000000F0   C01F8113           ORRNE    R1,R1,#0x300
   \   000000F4   01005011           CMPNE    R0,R1
   \   000000F8   EF01000A           BEQ      ??LoadConfigFromFile_3
   \   000000FC   011081E3           ORR      R1,R1,#0x1
   \   00000100   010050E1           CMP      R0,R1
   \   00000104   8B00000A           BEQ      ??LoadConfigFromFile_5
   \   00000108   FB0F50E3           CMP      R0,#+1004
   \   0000010C   EA01000A           BEQ      ??LoadConfigFromFile_3
   \   00000110   3E10A0E3           MOV      R1,#+62
   \   00000114   801E81E3           ORR      R1,R1,#0x800
   \   00000118   010050E1           CMP      R0,R1
   \   0000011C   01108113           ORRNE    R1,R1,#0x1
   \   00000120   01005011           CMPNE    R0,R1
   \   00000124   8301000A           BEQ      ??LoadConfigFromFile_6
   \   00000128   091081E2           ADD      R1,R1,#+9
   \   0000012C   010050E1           CMP      R0,R1
   \   00000130   01108113           ORRNE    R1,R1,#0x1
   \   00000134   01005011           CMPNE    R0,R1
   \   00000138   01108112           ADDNE    R1,R1,#+1
   \   0000013C   01005011           CMPNE    R0,R1
   \   00000140   01108113           ORRNE    R1,R1,#0x1
   \   00000144   01005011           CMPNE    R0,R1
   \   00000148   01108112           ADDNE    R1,R1,#+1
   \   0000014C   01005011           CMPNE    R0,R1
   \   00000150   01108113           ORRNE    R1,R1,#0x1
   \   00000154   01005011           CMPNE    R0,R1
   \   00000158   05108112           ADDNE    R1,R1,#+5
   \   0000015C   01005011           CMPNE    R0,R1
   \   00000160   9301000A           BEQ      ??LoadConfigFromFile_7
   \   00000164   011081E3           ORR      R1,R1,#0x1
   \   00000168   010050E1           CMP      R0,R1
   \   0000016C   B801000A           BEQ      ??LoadConfigFromFile_8
   \   00000170   2A1081E2           ADD      R1,R1,#+42
   \   00000174   010050E1           CMP      R0,R1
   \   00000178   AD01000A           BEQ      ??LoadConfigFromFile_9
   \   0000017C   041081E2           ADD      R1,R1,#+4
   \   00000180   010050E1           CMP      R0,R1
   \   00000184   8D01000A           BEQ      ??LoadConfigFromFile_10
   \   00000188   011081E2           ADD      R1,R1,#+1
   \   0000018C   010050E1           CMP      R0,R1
   \   00000190   A001000A           BEQ      ??LoadConfigFromFile_11
   \   00000194   011081E3           ORR      R1,R1,#0x1
   \   00000198   010050E1           CMP      R0,R1
   \   0000019C   8701000A           BEQ      ??LoadConfigFromFile_10
   \   000001A0   011081E2           ADD      R1,R1,#+1
   \   000001A4   010050E1           CMP      R0,R1
   \   000001A8   9A01000A           BEQ      ??LoadConfigFromFile_11
   \   000001AC   141081E2           ADD      R1,R1,#+20
   \   000001B0   010050E1           CMP      R0,R1
   \   000001B4   B910A013           MOVNE    R1,#+185
   \   000001B8   B01E8113           ORRNE    R1,R1,#0xB00
   \   000001BC   01005011           CMPNE    R0,R1
   \   000001C0   BD01000A           BEQ      ??LoadConfigFromFile_3
   \   000001C4   E20E50E3           CMP      R0,#+3616
   \   000001C8   6500000A           BEQ      ??LoadConfigFromFile_12
   \   000001CC   9A1F81E2           ADD      R1,R1,#+616
   \   000001D0   010050E1           CMP      R0,R1
   \   000001D4   7700000A           BEQ      ??LoadConfigFromFile_13
   \   000001D8   011081E2           ADD      R1,R1,#+1
   \   000001DC   010050E1           CMP      R0,R1
   \   000001E0   8600000A           BEQ      ??LoadConfigFromFile_14
   \   000001E4   011081E3           ORR      R1,R1,#0x1
   \   000001E8   010050E1           CMP      R0,R1
   \   000001EC   9600000A           BEQ      ??LoadConfigFromFile_15
   \   000001F0   041081E3           ORR      R1,R1,#0x4
   \   000001F4   010050E1           CMP      R0,R1
   \   000001F8   A300000A           BEQ      ??LoadConfigFromFile_16
   \   000001FC   021081E2           ADD      R1,R1,#+2
   \   00000200   010050E1           CMP      R0,R1
   \   00000204   B300000A           BEQ      ??LoadConfigFromFile_17
   \   00000208   031081E2           ADD      R1,R1,#+3
   \   0000020C   010050E1           CMP      R0,R1
   \   00000210   C000000A           BEQ      ??LoadConfigFromFile_18
   \   00000214   011081E3           ORR      R1,R1,#0x1
   \   00000218   010050E1           CMP      R0,R1
   \   0000021C   D100000A           BEQ      ??LoadConfigFromFile_19
   \   00000220   011081E2           ADD      R1,R1,#+1
   \   00000224   010050E1           CMP      R0,R1
   \   00000228   DE00000A           BEQ      ??LoadConfigFromFile_20
   \   0000022C   011081E3           ORR      R1,R1,#0x1
   \   00000230   010050E1           CMP      R0,R1
   \   00000234   F000000A           BEQ      ??LoadConfigFromFile_21
   \   00000238   E30E50E3           CMP      R0,#+3632
   \   0000023C   0301000A           BEQ      ??LoadConfigFromFile_22
   \   00000240   021081E2           ADD      R1,R1,#+2
   \   00000244   010050E1           CMP      R0,R1
   \   00000248   1501000A           BEQ      ??LoadConfigFromFile_23
   \   0000024C   011081E2           ADD      R1,R1,#+1
   \   00000250   010050E1           CMP      R0,R1
   \   00000254   2F01000A           BEQ      ??LoadConfigFromFile_24
   \   00000258   011081E3           ORR      R1,R1,#0x1
   \   0000025C   010050E1           CMP      R0,R1
   \   00000260   2E01000A           BEQ      ??LoadConfigFromFile_25
   \   00000264   011081E2           ADD      R1,R1,#+1
   \   00000268   010050E1           CMP      R0,R1
   \   0000026C   2D01000A           BEQ      ??LoadConfigFromFile_26
   \   00000270   011081E3           ORR      R1,R1,#0x1
   \   00000274   010050E1           CMP      R0,R1
   \   00000278   2C01000A           BEQ      ??LoadConfigFromFile_27
   \   0000027C   0A1081E3           ORR      R1,R1,#0xA
   \   00000280   010050E1           CMP      R0,R1
   \   00000284   1B01000A           BEQ      ??LoadConfigFromFile_28
   \   00000288   E40E50E3           CMP      R0,#+3648
   \   0000028C   1B01000A           BEQ      ??LoadConfigFromFile_29
   \   00000290   021081E2           ADD      R1,R1,#+2
   \   00000294   010050E1           CMP      R0,R1
   \   00000298   1A01000A           BEQ      ??LoadConfigFromFile_30
   \   0000029C   011081E2           ADD      R1,R1,#+1
   \   000002A0   010050E1           CMP      R0,R1
   \   000002A4   1901000A           BEQ      ??LoadConfigFromFile_31
   \   000002A8   3410A0E3           MOV      R1,#+52
   \   000002AC   841D81E3           ORR      R1,R1,#0x2100
   \   000002B0   010050E1           CMP      R0,R1
   \   000002B4   2300000A           BEQ      ??LoadConfigFromFile_32
    353                      default:
    354                          GiveConfigWarning((AnsiString)"Tank pressure" + Name, InputKeyWord, ConfigString.LineCount);
   \   000002B8   2C108DE2           ADD      R1,SP,#+44
   \   000002BC   80008DE2           ADD      R0,SP,#+128
   \   000002C0   ........           _BLF     ??string,??string??rA
   \   000002C4   ........           LDR      R1,??Subroutine48_0+0x4  ;; `?<Constant "Tank pressure">`
   \   000002C8   D4008DE2           ADD      R0,SP,#+212
   \   000002CC   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000002D0   0010A0E1           MOV      R1,R0
   \   000002D4   442084E2           ADD      R2,R4,#+68
   \   000002D8   B8008DE2           ADD      R0,SP,#+184
   \   000002DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002E0   B8108DE2           ADD      R1,SP,#+184
   \   000002E4   9C008DE2           ADD      R0,SP,#+156
   \   000002E8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000002EC   1C2095E5           LDR      R2,[R5, #+28]
   \   000002F0   80108DE2           ADD      R1,SP,#+128
   \   000002F4   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   0610A0E1           MOV      R1,R6
   \   00000300   80008DE2           ADD      R0,SP,#+128
   \   00000304   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000308   0820A0E1           MOV      R2,R8
   \   0000030C   0610A0E1           MOV      R1,R6
   \   00000310   9C008DE2           ADD      R0,SP,#+156
   \   00000314   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000318   0820A0E1           MOV      R2,R8
   \   0000031C   0610A0E1           MOV      R1,R6
   \   00000320   B8008DE2           ADD      R0,SP,#+184
   \   00000324   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000328   0820A0E1           MOV      R2,R8
   \   0000032C   0610A0E1           MOV      R1,R6
   \   00000330   D4008DE2           ADD      R0,SP,#+212
   \   00000334   5DFFFFEA           B        ??LoadConfigFromFile_4
    355                          break;
    356                      case C_AI_END:      // If AI type not found can continue with this
    357                      case C_AL_END:
    358                      case C_PRO_END:
    359                      case C_PRO_END_COMMON:
    360                      case C_PRO_END_PRO:
    361                          break;
    362                      case C_PRO_START_PRO:
    363                          PRogramObject::LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_5:
   \   00000338   0510A0E1           MOV      R1,R5
   \   0000033C   0400A0E1           MOV      R0,R4
   \   00000340   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   00000344   5C0100EA           B        ??LoadConfigFromFile_3
    364                          break;
    365                      case C_XREF_START:
    366                          LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_32:
   \   00000348   A42094E5           LDR      R2,[R4, #+164]
   \   0000034C   0510A0E1           MOV      R1,R5
   \   00000350   102092E5           LDR      R2,[R2, #+16]
   \   00000354   0400A0E1           MOV      R0,R4
   \   00000358   0FE0A0E1           MOV      LR,PC
   \   0000035C   12FF2FE1           BX       R2
   \   00000360   550100EA           B        ??LoadConfigFromFile_3
    367                          break;
    368                      case AL_LIM_HIGHTANK_PRESS:
    369                          HighTankPressLimit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_12:
   \   00000364   0020A0E3           MOV      R2,#+0
   \   00000368   0D10A0E1           MOV      R1,SP
   \   0000036C   0500A0E1           MOV      R0,R5
   \   00000370   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000374   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    370                          if ( PROProjectInfo::PressLim_mBar ) {
   \   00000378   0010DAE5           LDRB     R1,[R10, #+0]
   \   0000037C   000051E3           CMP      R1,#+0
   \   00000380   0400000A           BEQ      ??LoadConfigFromFile_33
    371                              HighTankPressLimit  /= MH2O_TO_MBAR;
   \   00000384   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000388   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   0000038C   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   00000390   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000394   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??LoadConfigFromFile_33:
   \   00000398   A80184E5           STR      R0,[R4, #+424]
    372                          }
    373                          NoError = !ErrorLine;
   \   0000039C   00009DE5           LDR      R0,[SP, #+0]
   \   000003A0   000050E3           CMP      R0,#+0
   \   000003A4   0100001A           BNE      ??LoadConfigFromFile_34
   \                     ??LoadConfigFromFile_35:
   \   000003A8   0170A0E3           MOV      R7,#+1
   \   000003AC   420100EA           B        ??LoadConfigFromFile_3
   \                     ??LoadConfigFromFile_34:
   \   000003B0   0070A0E3           MOV      R7,#+0
   \   000003B4   400100EA           B        ??LoadConfigFromFile_3
    374                          break;
    375                      case AL_LIM_LOWTANK_PRESS:
    376                          LowTankPressLimit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_13:
   \   000003B8   0020A0E3           MOV      R2,#+0
   \   000003BC   0D10A0E1           MOV      R1,SP
   \   000003C0   0500A0E1           MOV      R0,R5
   \   000003C4   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000003C8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    377                          if ( PROProjectInfo::PressLim_mBar ) {
   \   000003CC   0010DAE5           LDRB     R1,[R10, #+0]
   \   000003D0   000051E3           CMP      R1,#+0
   \   000003D4   0400000A           BEQ      ??LoadConfigFromFile_36
    378                              LowTankPressLimit  /= MH2O_TO_MBAR;
   \   000003D8   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000003DC   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   000003E0   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   000003E4   ........           _BLF     __dDiv,??__dDiv??rA
   \   000003E8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??LoadConfigFromFile_36:
   \   000003EC   AC0184E5           STR      R0,[R4, #+428]
    379                          }
    380                          NoError = !ErrorLine;
   \                     ??LoadConfigFromFile_37:
   \   000003F0   00009DE5           LDR      R0,[SP, #+0]
   \   000003F4   000050E3           CMP      R0,#+0
   \   000003F8   ECFFFF1A           BNE      ??LoadConfigFromFile_34
   \   000003FC   E9FFFFEA           B        ??LoadConfigFromFile_35
    381                          break;
    382                      case AL_LIM_HIGHVAPOUR_RET:
    383                          HighVapourReturnLimit    = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_14:
   \   00000400   0020A0E3           MOV      R2,#+0
   \   00000404   0D10A0E1           MOV      R1,SP
   \   00000408   0500A0E1           MOV      R0,R5
   \   0000040C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000410   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    384                          hasHighVapourReturnLimit = true;
   \   00000414   DD61C4E5           STRB     R6,[R4, #+477]
    385                          if ( PROProjectInfo::PressLim_mBar ) {
   \   00000418   0010DAE5           LDRB     R1,[R10, #+0]
   \   0000041C   000051E3           CMP      R1,#+0
   \   00000420   0400000A           BEQ      ??LoadConfigFromFile_38
    386                              HighVapourReturnLimit  /= MH2O_TO_MBAR;
   \   00000424   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000428   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   0000042C   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   00000430   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000434   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??LoadConfigFromFile_38:
   \   00000438   C40184E5           STR      R0,[R4, #+452]
    387                          }
    388                          NoError = !ErrorLine;
   \   0000043C   00009DE5           LDR      R0,[SP, #+0]
   \   00000440   000050E3           CMP      R0,#+0
   \   00000444   D7FFFF0A           BEQ      ??LoadConfigFromFile_35
   \   00000448   D8FFFFEA           B        ??LoadConfigFromFile_34
    389                          break;
    390                      case AL_LIM_LOWVAPOUR_RET:
    391                          LowVapourReturnLimit    = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_15:
   \   0000044C   0020A0E3           MOV      R2,#+0
   \   00000450   0D10A0E1           MOV      R1,SP
   \   00000454   0500A0E1           MOV      R0,R5
   \   00000458   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000045C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    392                          hasLowVapourReturnLimit = true;
   \   00000460   DC61C4E5           STRB     R6,[R4, #+476]
    393                          if ( PROProjectInfo::PressLim_mBar ) {
   \   00000464   0010DAE5           LDRB     R1,[R10, #+0]
   \   00000468   000051E3           CMP      R1,#+0
   \   0000046C   0400000A           BEQ      ??LoadConfigFromFile_39
    394                              LowVapourReturnLimit  /= MH2O_TO_MBAR;
   \   00000470   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000474   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   00000478   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   0000047C   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000480   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??LoadConfigFromFile_39:
   \   00000484   C00184E5           STR      R0,[R4, #+448]
    395                          }
    396                          NoError = !ErrorLine;
   \   00000488   D8FFFFEA           B        ??LoadConfigFromFile_37
    397                          break;
    398                      case AL_LIM_HIGH_PV_PRESS:
    399                          HighPressVacLimit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_16:
   \   0000048C   0020A0E3           MOV      R2,#+0
   \   00000490   0D10A0E1           MOV      R1,SP
   \   00000494   0500A0E1           MOV      R0,R5
   \   00000498   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000049C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    400                          hasHighPressVacLimit = true;
   \   000004A0   D961C4E5           STRB     R6,[R4, #+473]
    401                          if ( PROProjectInfo::PressLim_mBar ) {
   \   000004A4   0010DAE5           LDRB     R1,[R10, #+0]
   \   000004A8   000051E3           CMP      R1,#+0
   \   000004AC   0400000A           BEQ      ??LoadConfigFromFile_40
    402                              HighPressVacLimit  /= MH2O_TO_MBAR;
   \   000004B0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000004B4   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   000004B8   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   000004BC   ........           _BLF     __dDiv,??__dDiv??rA
   \   000004C0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??LoadConfigFromFile_40:
   \   000004C4   B40184E5           STR      R0,[R4, #+436]
    403                          }
    404                          NoError = !ErrorLine;
   \   000004C8   00009DE5           LDR      R0,[SP, #+0]
   \   000004CC   000050E3           CMP      R0,#+0
   \   000004D0   B6FFFF1A           BNE      ??LoadConfigFromFile_34
   \   000004D4   B3FFFFEA           B        ??LoadConfigFromFile_35
    405                          break;
    406                      case AL_LIM_LOW_PV_PRESS :
    407                          LowPressVacLimit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_17:
   \   000004D8   0020A0E3           MOV      R2,#+0
   \   000004DC   0D10A0E1           MOV      R1,SP
   \   000004E0   0500A0E1           MOV      R0,R5
   \   000004E4   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000004E8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    408                          hasLowPressVacLimit = true;
   \   000004EC   D861C4E5           STRB     R6,[R4, #+472]
    409                          if ( PROProjectInfo::PressLim_mBar ) {
   \   000004F0   0010DAE5           LDRB     R1,[R10, #+0]
   \   000004F4   000051E3           CMP      R1,#+0
   \   000004F8   0400000A           BEQ      ??LoadConfigFromFile_41
    410                              LowPressVacLimit  /= MH2O_TO_MBAR;
   \   000004FC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000500   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   00000504   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   00000508   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000050C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??LoadConfigFromFile_41:
   \   00000510   B00184E5           STR      R0,[R4, #+432]
    411                          }
    412                          NoError = !ErrorLine;
   \   00000514   B5FFFFEA           B        ??LoadConfigFromFile_37
    413                          break;
    414                      case AL_LIM_HIGH_IG_PRESS:
    415                          HighIGP_Limit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_18:
   \   00000518   0020A0E3           MOV      R2,#+0
   \   0000051C   0D10A0E1           MOV      R1,SP
   \   00000520   0500A0E1           MOV      R0,R5
   \   00000524   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000528   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    416                          hasHighIGP_Limit = true;
   \   0000052C   DB61C4E5           STRB     R6,[R4, #+475]
    417                          if ( PROProjectInfo::PressLim_mBar ) {
   \   00000530   0010DAE5           LDRB     R1,[R10, #+0]
   \   00000534   000051E3           CMP      R1,#+0
   \   00000538   0400000A           BEQ      ??LoadConfigFromFile_42
    418                              HighIGP_Limit  /= MH2O_TO_MBAR;
   \   0000053C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000540   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   00000544   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   00000548   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000054C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??LoadConfigFromFile_42:
   \   00000550   BC0184E5           STR      R0,[R4, #+444]
    419                          }
    420                          NoError = !ErrorLine;
   \   00000554   00009DE5           LDR      R0,[SP, #+0]
   \   00000558   000050E3           CMP      R0,#+0
   \   0000055C   91FFFF0A           BEQ      ??LoadConfigFromFile_35
   \   00000560   0070A0E3           MOV      R7,#+0
   \   00000564   D40000EA           B        ??LoadConfigFromFile_3
    421                          break;
    422                      case AL_LIM_LOW_IG_PRESS :
    423                          LowIGP_Limit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_19:
   \   00000568   0020A0E3           MOV      R2,#+0
   \   0000056C   0D10A0E1           MOV      R1,SP
   \   00000570   0500A0E1           MOV      R0,R5
   \   00000574   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000578   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    424                          hasLowIGP_Limit = true;
   \   0000057C   DA61C4E5           STRB     R6,[R4, #+474]
    425                          if ( PROProjectInfo::PressLim_mBar ) {
   \   00000580   0010DAE5           LDRB     R1,[R10, #+0]
   \   00000584   000051E3           CMP      R1,#+0
   \   00000588   0400000A           BEQ      ??LoadConfigFromFile_43
    426                              LowIGP_Limit  /= MH2O_TO_MBAR;
   \   0000058C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000590   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   00000594   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   00000598   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000059C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \                     ??LoadConfigFromFile_43:
   \   000005A0   B80184E5           STR      R0,[R4, #+440]
    427                          }
    428                          NoError = !ErrorLine;
   \   000005A4   91FFFFEA           B        ??LoadConfigFromFile_37
    429                          break;
    430                      case AL_LIM_X_HI_TNK_PRESS1:
    431                          IntHighTankPressLimit1 = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_20:
   \   000005A8   0020A0E3           MOV      R2,#+0
   \   000005AC   0D10A0E1           MOV      R1,SP
   \   000005B0   0500A0E1           MOV      R0,R5
   \   000005B4   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000005B8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000005BC   C80184E5           STR      R0,[R4, #+456]
    432                          if ( !ErrorLine ) {
   \   000005C0   00009DE5           LDR      R0,[SP, #+0]
   \   000005C4   000050E3           CMP      R0,#+0
   \   000005C8   78FFFF1A           BNE      ??LoadConfigFromFile_34
    433                              HasIntHighTankPressLimit1 = true;
   \   000005CC   DE61C4E5           STRB     R6,[R4, #+478]
    434                              if ( PROProjectInfo::PressLim_mBar ) {
   \   000005D0   0000DAE5           LDRB     R0,[R10, #+0]
   \   000005D4   000050E3           CMP      R0,#+0
   \   000005D8   B700000A           BEQ      ??LoadConfigFromFile_3
    435                                  IntHighTankPressLimit1  /= MH2O_TO_MBAR;
   \   000005DC   C80194E5           LDR      R0,[R4, #+456]
   \   000005E0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000005E4   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   000005E8   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   000005EC   ........           _BLF     __dDiv,??__dDiv??rA
   \   000005F0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000005F4   C80184E5           STR      R0,[R4, #+456]
   \   000005F8   AF0000EA           B        ??LoadConfigFromFile_3
    436                              }
    437                          } else {
    438                              NoError = false;
    439                          }
    440                          break;
    441                      case AL_LIM_X_LO_TNK_PRESS1 :
    442                          IntLowTankPressLimit1 = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_21:
   \   000005FC   0020A0E3           MOV      R2,#+0
   \   00000600   0D10A0E1           MOV      R1,SP
   \   00000604   0500A0E1           MOV      R0,R5
   \   00000608   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   0000060C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000610   CC0184E5           STR      R0,[R4, #+460]
    443                          if ( !ErrorLine ) {
   \   00000614   00009DE5           LDR      R0,[SP, #+0]
   \   00000618   000050E3           CMP      R0,#+0
   \   0000061C   63FFFF1A           BNE      ??LoadConfigFromFile_34
    444                              HasIntLowTankPressLimit1 = true;
   \   00000620   DF61C4E5           STRB     R6,[R4, #+479]
    445                              if ( PROProjectInfo::PressLim_mBar ) {
   \   00000624   0000DAE5           LDRB     R0,[R10, #+0]
   \   00000628   000050E3           CMP      R0,#+0
   \   0000062C   A200000A           BEQ      ??LoadConfigFromFile_3
    446                                  IntLowTankPressLimit1  /= MH2O_TO_MBAR;
   \   00000630   CC0194E5           LDR      R0,[R4, #+460]
   \   00000634   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000638   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   0000063C   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   00000640   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000644   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000648   CC0184E5           STR      R0,[R4, #+460]
   \   0000064C   9A0000EA           B        ??LoadConfigFromFile_3
    447                              }
    448                          } else {
    449                              NoError = false;
    450                          }
    451                          break;
    452                      case AL_LIM_X_HI_TNK_PRESS2:
    453                          IntHighTankPressLimit2 = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_22:
   \   00000650   0020A0E3           MOV      R2,#+0
   \   00000654   0D10A0E1           MOV      R1,SP
   \   00000658   0500A0E1           MOV      R0,R5
   \   0000065C   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000660   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000664   D00184E5           STR      R0,[R4, #+464]
    454                          if ( !ErrorLine ) {
   \   00000668   00009DE5           LDR      R0,[SP, #+0]
   \   0000066C   000050E3           CMP      R0,#+0
   \   00000670   4EFFFF1A           BNE      ??LoadConfigFromFile_34
    455                              HasIntHighTankPressLimit2 = true;
   \   00000674   E061C4E5           STRB     R6,[R4, #+480]
    456                              if ( PROProjectInfo::PressLim_mBar ) {
   \   00000678   0000DAE5           LDRB     R0,[R10, #+0]
   \   0000067C   000050E3           CMP      R0,#+0
   \   00000680   8D00000A           BEQ      ??LoadConfigFromFile_3
    457                                  IntHighTankPressLimit2  /= MH2O_TO_MBAR;
   \   00000684   D00194E5           LDR      R0,[R4, #+464]
   \   00000688   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000068C   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   00000690   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   00000694   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000698   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000069C   D00184E5           STR      R0,[R4, #+464]
   \   000006A0   850000EA           B        ??LoadConfigFromFile_3
    458                              }
    459                          } else {
    460                              NoError = false;
    461                          }
    462                          break;
    463                      case AL_LIM_X_LO_TNK_PRESS2 :
    464                          IntLowTankPressLimit2 = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_23:
   \   000006A4   0020A0E3           MOV      R2,#+0
   \   000006A8   0D10A0E1           MOV      R1,SP
   \   000006AC   0500A0E1           MOV      R0,R5
   \   000006B0   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   000006B4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000006B8   D40184E5           STR      R0,[R4, #+468]
    465                          if ( !ErrorLine ) {
   \   000006BC   00009DE5           LDR      R0,[SP, #+0]
   \   000006C0   000050E3           CMP      R0,#+0
   \   000006C4   39FFFF1A           BNE      ??LoadConfigFromFile_34
    466                              HasIntLowTankPressLimit2 = true;
   \   000006C8   E161C4E5           STRB     R6,[R4, #+481]
    467                              if ( PROProjectInfo::PressLim_mBar ) {
   \   000006CC   0000DAE5           LDRB     R0,[R10, #+0]
   \   000006D0   000050E3           CMP      R0,#+0
   \   000006D4   7800000A           BEQ      ??LoadConfigFromFile_3
    468                                  IntLowTankPressLimit2  /= MH2O_TO_MBAR;
   \   000006D8   D40194E5           LDR      R0,[R4, #+468]
   \   000006DC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000006E0   ........           LDR      R2,??DataTable56  ;; 0xffffffff89374bc7
   \   000006E4   ........           LDR      R3,??DataTable57  ;; 0x40588441
   \   000006E8   ........           _BLF     __dDiv,??__dDiv??rA
   \   000006EC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000006F0   D40184E5           STR      R0,[R4, #+468]
   \   000006F4   700000EA           B        ??LoadConfigFromFile_3
    469                              }
    470                          } else {
    471                              NoError = false;
    472                          }
    473                          break;
    474                      case AL_LOCK_HIGHTANK_PRESS:
    475                          HighTankPressLocked = true;
   \                     ??LoadConfigFromFile_28:
   \   000006F8   A461C4E5           STRB     R6,[R4, #+420]
   \   000006FC   6E0000EA           B        ??LoadConfigFromFile_3
    476                          break;
    477                      case AL_LOCK_LOWTANK_PRESS :
    478                          LowTankPressLocked = true;
   \                     ??LoadConfigFromFile_29:
   \   00000700   A561C4E5           STRB     R6,[R4, #+421]
   \   00000704   6C0000EA           B        ??LoadConfigFromFile_3
    479                          break;
    480                      case AL_LOCK_HIGH_IGP      :
    481                          HighIGP_Locked = true;
   \                     ??LoadConfigFromFile_30:
   \   00000708   A661C4E5           STRB     R6,[R4, #+422]
   \   0000070C   6A0000EA           B        ??LoadConfigFromFile_3
    482                          break;
    483                      case AL_LOCK_LOW_IGP      :
    484                          LowIGP_Locked = true;
   \                     ??LoadConfigFromFile_31:
   \   00000710   A761C4E5           STRB     R6,[R4, #+423]
   \   00000714   680000EA           B        ??LoadConfigFromFile_3
    485                          break;
    486                      case AL_LIM_HAS_HI_TNK_PR1:
    487                          HasIntHighTankPressLimit1 = true;
   \                     ??LoadConfigFromFile_24:
   \   00000718   DE61C4E5           STRB     R6,[R4, #+478]
   \   0000071C   660000EA           B        ??LoadConfigFromFile_3
    488                          break;
    489                      case AL_LIM_HAS_LO_TNK_PR1:
    490                          HasIntLowTankPressLimit1 = true;
   \                     ??LoadConfigFromFile_25:
   \   00000720   DF61C4E5           STRB     R6,[R4, #+479]
   \   00000724   640000EA           B        ??LoadConfigFromFile_3
    491                          break;
    492                      case AL_LIM_HAS_HI_TNK_PR2:
    493                          HasIntHighTankPressLimit2 = true;
   \                     ??LoadConfigFromFile_26:
   \   00000728   E061C4E5           STRB     R6,[R4, #+480]
   \   0000072C   620000EA           B        ??LoadConfigFromFile_3
    494                          break;
    495                      case AL_LIM_HAS_LO_TNK_PR2:
    496                          HasIntLowTankPressLimit2 = true;
   \                     ??LoadConfigFromFile_27:
   \   00000730   E161C4E5           STRB     R6,[R4, #+481]
   \   00000734   600000EA           B        ??LoadConfigFromFile_3
    497                          break;
    498                      case C_AI_P906_0110:
    499                      case C_AI_P906_0111:
    500                          {
    501                              AIPressSensor_mV *AnalogInPtr = new AIPressSensor_mV(Key);
   \                     ??LoadConfigFromFile_6:
   \   00000738   0010A0E3           MOV      R1,#+0
   \   0000073C   ........           _BLF     `??new AIPressSensor_mV`,`??new AIPressSensor_mV??rA`
   \   00000740   00A0A0E1           MOV      R10,R0
    502          
    503                              AnalogInPtr->LoadConfigString(ConfigString);
   \   00000744   A4209AE5           LDR      R2,[R10, #+164]
   \   00000748   0510A0E1           MOV      R1,R5
   \   0000074C   102092E5           LDR      R2,[R2, #+16]
   \   00000750   0FE0A0E1           MOV      LR,PC
   \   00000754   12FF2FE1           BX       R2
   \   00000758   0A0099E7           LDR      R0,[R9, +R10]
   \   0000075C   E41194E5           LDR      R1,[R4, #+484]
   \   00000760   ........           _BLF     __fLess,??__fLess??rA
   \   00000764   000050E3           CMP      R0,#+0
   \   00000768   E4019415           LDRNE    R0,[R4, #+484]
    504                              MaxPressureRange = MAX(AnalogInPtr->MaxRange, MaxPressureRange);
    505                              tankPressures.push_back((AIPressSensor *)AnalogInPtr);
   \   0000076C   0A10A0E1           MOV      R1,R10
   \   00000770   0A009907           LDREQ    R0,[R9, +R10]
   \   00000774   E40184E5           STR      R0,[R4, #+484]
   \   00000778   040089E0           ADD      R0,R9,R4
   \   0000077C   ........           _BLF     ??_Push_back0_2,??_Push_back0??rA_1
    506                              AnalogInPtr->Location = C_AI_LOC_VAPOUR;
   \   00000780   E200A0E3           MOV      R0,#+226
   \   00000784   800E80E3           ORR      R0,R0,#0x800
   \   00000788   28018AE5           STR      R0,[R10, #+296]
    507                              AnalogInPtr->SetIsPressureSns();
   \   0000078C   0110A0E3           MOV      R1,#+1
   \   00000790   0A00A0E1           MOV      R0,R10
   \   00000794   ........           _BLF     ??SetIsPressureSns,??SetIsPressureSns??rA
    508          #ifndef ANCONF
    509                              //For picture on TDU, no need?
    510                              AnalogInList.push_back((AnalogInput *)AnalogInPtr);
   \   00000798   0A10A0E1           MOV      R1,R10
   \   0000079C   04008BE0           ADD      R0,R11,R4
   \   000007A0   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_2
    511                              // This sensor will currently not be visible
    512                              AITempSensor_Pt1000 *tmpSensor = new AITempSensor_Pt1000(AnalogInPtr);
   \   000007A4   0A00A0E1           MOV      R0,R10
   \   000007A8   ........           _BLF     `??new AITempSensor_Pt1000`,`??new AITempSensor_Pt1000??rA`
    513                              AnalogInList.push_back((AnalogInput *)tmpSensor);
   \   000007AC   0010A0E1           MOV      R1,R0
   \   000007B0   3F0000EA           B        ??LoadConfigFromFile_44
    514          #endif
    515                          }
    516                          break;
    517                      case C_AI_ATM_N_Ex:
    518                      case C_AI_ATM_Ex:
    519                      case C_AI_ATM_Ex_H:
    520                      case C_AI_ATM_N_Ex_0_1:
    521                      case C_AI_APT500	  :
    522                      case C_AI_SPT900	  :
    523                      case C_AI_Gen_4_20mA:
    524                          {
    525                              AIPressSensor_mA *AnalogInPtr = new AIPressSensor_mA(Key);
   \                     ??LoadConfigFromFile_7:
   \   000007B4   0010A0E3           MOV      R1,#+0
   \   000007B8   ........           _BLF     `??new AIPressSensor_mA`,`??new AIPressSensor_mA??rA`
   \   000007BC   250000EA           B        ??LoadConfigFromFile_45
    526                              AnalogInPtr->LoadConfigString(ConfigString);
    527                              MaxPressureRange = MAX(AnalogInPtr->MaxRange, MaxPressureRange);
    528                              tankPressures.push_back((AIPressSensor *)AnalogInPtr);
    529                              AnalogInPtr->Location = C_AI_LOC_VAPOUR;
    530                              AnalogInPtr->SetIsPressureSns();
    531                              AnalogInList.push_back((AnalogInput *)AnalogInPtr);
    532                          }
    533                          break;
    534                      case C_AI_MB_Press_0_20mA   :
    535                      case C_AI_MB_Press_4_20mA   :
    536                          {
    537                              AIModbusPressSensor_mA *AnalogInPtr = new AIModbusPressSensor_mA();
   \                     ??LoadConfigFromFile_10:
   \   000007C0   820FA0E3           MOV      R0,#+520
   \   000007C4   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000007C8   00A0B0E1           MOVS     R10,R0
   \   000007CC   0200000A           BEQ      ??LoadConfigFromFile_46
   \   000007D0   0010A0E3           MOV      R1,#+0
   \   000007D4   ........           _BLF     ??AIModbusPressSensor_mA,??AIModbusPressSensor_mA??rA
   \   000007D8   000000EA           B        ??LoadConfigFromFile_47
   \                     ??LoadConfigFromFile_46:
   \   000007DC   00A0A0E3           MOV      R10,#+0
    538                              AnalogInPtr->LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_47:
   \   000007E0   A4209AE5           LDR      R2,[R10, #+164]
   \   000007E4   0510A0E1           MOV      R1,R5
   \   000007E8   102092E5           LDR      R2,[R2, #+16]
   \   000007EC   0A00A0E1           MOV      R0,R10
   \   000007F0   0FE0A0E1           MOV      LR,PC
   \   000007F4   12FF2FE1           BX       R2
    539                              AnalogInList.push_back((AnalogInput *)AnalogInPtr);
   \   000007F8   0A10A0E1           MOV      R1,R10
   \   000007FC   04008BE0           ADD      R0,R11,R4
   \   00000800   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_2
    540                              ModbusSensorSet.insert(AnalogInPtr);
   \   00000804   0A20A0E1           MOV      R2,R10
   \   00000808   AC1084E2           ADD      R1,R4,#+172
   \   0000080C   08008DE2           ADD      R0,SP,#+8
   \   00000810   ........           _BLF     ??insert_1,??insert??rA_2
   \   00000814   280000EA           B        ??LoadConfigFromFile_3
    541                          }
    542                          break;
    543                      case C_AI_MB_DiffPre_0_20mA :
    544                      case C_AI_MB_DiffPre_4_20mA :
    545                          {
    546                              AIModbusDiffPressSensor_mA *AnalogInPtr = new AIModbusDiffPressSensor_mA();
   \                     ??LoadConfigFromFile_11:
   \   00000818   820FA0E3           MOV      R0,#+520
   \   0000081C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000820   00A0B0E1           MOVS     R10,R0
   \   00000824   ECFFFF0A           BEQ      ??LoadConfigFromFile_46
   \   00000828   0010A0E3           MOV      R1,#+0
   \   0000082C   ........           _BLF     ??AIModbusDiffPressSensor_mA,??AIModbusDiffPressSensor_mA??rA
   \   00000830   EAFFFFEA           B        ??LoadConfigFromFile_47
    547                              AnalogInPtr->LoadConfigString(ConfigString);
    548                              AnalogInList.push_back((AnalogInput *)AnalogInPtr);
    549                              ModbusSensorSet.insert(AnalogInPtr);
    550                          }
    551                          break;
    552                      case C_AI_AirPurge :
    553                          {
    554                              AIAirPurgePressSensor *AirPurgeSns = new AIAirPurgePressSensor();
   \                     ??LoadConfigFromFile_9:
   \   00000834   700FA0E3           MOV      R0,#+448
   \   00000838   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000083C   00A0B0E1           MOVS     R10,R0
   \   00000840   0100000A           BEQ      ??LoadConfigFromFile_48
   \   00000844   ........           _BLF     ??AIAirPurgePressSensor,??AIAirPurgePressSensor??rA
   \   00000848   E4FFFFEA           B        ??LoadConfigFromFile_47
   \                     ??LoadConfigFromFile_48:
   \   0000084C   00A0A0E3           MOV      R10,#+0
    555                              AirPurgeSns->LoadConfigString(ConfigString);
   \   00000850   E2FFFFEA           B        ??LoadConfigFromFile_47
    556                              AnalogInList.push_back((AnalogInput *)AirPurgeSns);
    557                              ModbusSensorSet.insert(AirPurgeSns);
    558                          }
    559                          break;
    560                      case C_AI_DIFF_PRESSURE_mA:
    561                          {
    562                              AIDiffPressSensor_mA *AnalogInPtr = new AIDiffPressSensor_mA(Key);
   \                     ??LoadConfigFromFile_8:
   \   00000854   ........           _BLF     `??new AIDiffPressSensor_mA`,`??new AIDiffPressSensor_mA??rA`
   \                     ??LoadConfigFromFile_45:
   \   00000858   00A0A0E1           MOV      R10,R0
    563                              AnalogInPtr->LoadConfigString(ConfigString);
   \   0000085C   A4209AE5           LDR      R2,[R10, #+164]
   \   00000860   0510A0E1           MOV      R1,R5
   \   00000864   102092E5           LDR      R2,[R2, #+16]
   \   00000868   0FE0A0E1           MOV      LR,PC
   \   0000086C   12FF2FE1           BX       R2
   \   00000870   0A0099E7           LDR      R0,[R9, +R10]
   \   00000874   E41194E5           LDR      R1,[R4, #+484]
   \   00000878   ........           _BLF     __fLess,??__fLess??rA
   \   0000087C   000050E3           CMP      R0,#+0
   \   00000880   E4019415           LDRNE    R0,[R4, #+484]
    564                              MaxPressureRange = MAX(AnalogInPtr->MaxRange, MaxPressureRange);
    565                              tankPressures.push_back((AIPressSensor *)AnalogInPtr);
   \   00000884   0A10A0E1           MOV      R1,R10
   \   00000888   0A009907           LDREQ    R0,[R9, +R10]
   \   0000088C   E40184E5           STR      R0,[R4, #+484]
   \   00000890   040089E0           ADD      R0,R9,R4
   \   00000894   ........           _BLF     ??_Push_back0_2,??_Push_back0??rA_1
    566                              AnalogInPtr->Location = C_AI_LOC_VAPOUR;
   \   00000898   E200A0E3           MOV      R0,#+226
   \   0000089C   800E80E3           ORR      R0,R0,#0x800
   \   000008A0   28018AE5           STR      R0,[R10, #+296]
    567                              AnalogInPtr->SetIsPressureSns();
   \   000008A4   0110A0E3           MOV      R1,#+1
   \   000008A8   0A00A0E1           MOV      R0,R10
   \   000008AC   ........           _BLF     ??SetIsPressureSns,??SetIsPressureSns??rA
    568                              AnalogInList.push_back((AnalogInput *)AnalogInPtr);
   \   000008B0   0A10A0E1           MOV      R1,R10
   \                     ??LoadConfigFromFile_44:
   \   000008B4   04008BE0           ADD      R0,R11,R4
   \   000008B8   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_2
    569                          }
    570                          break;
    571                      }
    572                  }
    573              }while ( NoError && (ErrorLine != EOF) && (Key != C_PRO_END) );
   \                     ??LoadConfigFromFile_3:
   \   000008BC   0020A0E3           MOV      R2,#+0
   \   000008C0   0610A0E1           MOV      R1,R6
   \   000008C4   2C008DE2           ADD      R0,SP,#+44
   \   000008C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000008CC   000057E3           CMP      R7,#+0
   \   000008D0   00009D15           LDRNE    R0,[SP, #+0]
   \   000008D4   01007013           CMNNE    R0,#+1
   \   000008D8   04009D15           LDRNE    R0,[SP, #+4]
   \   000008DC   FA0F5013           CMPNE    R0,#+1000
   \   000008E0   D1FDFF1A           BNE      ??LoadConfigFromFile_1
    574              for ( unsigned i = 0; i < tankPressures.size(); i++ ) {
   \   000008E4   0050A0E3           MOV      R5,#+0
   \   000008E8   0B0000EA           B        ??LoadConfigFromFile_49
    575                  AIPressSensor *tmpPtr = tankPressures[i];
    576                  for ( unsigned j = 0; j < tankPressures.size(); j++ ) {
    577                      tmpPtr->SetRefSnsPtr(tankPressures[j]);
   \                     ??LoadConfigFromFile_50:
   \   000008EC   040099E7           LDR      R0,[R9, +R4]
   \   000008F0   071190E7           LDR      R1,[R0, +R7, LSL #+2]
   \   000008F4   0600A0E1           MOV      R0,R6
   \   000008F8   ........           _BLF     ??SetRefSnsPtr,??SetRefSnsPtr??rA
    578                  }
   \   000008FC   017087E2           ADD      R7,R7,#+1
   \                     ??LoadConfigFromFile_51:
   \   00000900   040089E0           ADD      R0,R9,R4
   \   00000904   041090E5           LDR      R1,[R0, #+4]
   \   00000908   000090E5           LDR      R0,[R0, #+0]
   \   0000090C   000041E0           SUB      R0,R1,R0
   \   00000910   200157E1           CMP      R7,R0, LSR #+2
   \   00000914   F4FFFF3A           BCC      ??LoadConfigFromFile_50
   \   00000918   015085E2           ADD      R5,R5,#+1
   \                     ??LoadConfigFromFile_49:
   \   0000091C   040089E0           ADD      R0,R9,R4
   \   00000920   041090E5           LDR      R1,[R0, #+4]
   \   00000924   000090E5           LDR      R0,[R0, #+0]
   \   00000928   000041E0           SUB      R0,R1,R0
   \   0000092C   200155E1           CMP      R5,R0, LSR #+2
   \   00000930   04009937           LDRCC    R0,[R9, +R4]
   \   00000934   0070A033           MOVCC    R7,#+0
   \   00000938   05619037           LDRCC    R6,[R0, +R5, LSL #+2]
   \   0000093C   EFFFFF3A           BCC      ??LoadConfigFromFile_51
    579              }
    580          
    581          
    582              if ( hasHighPressVacLimit ) {
   \   00000940   D901D4E5           LDRB     R0,[R4, #+473]
   \   00000944   000050E3           CMP      R0,#+0
   \   00000948   0300000A           BEQ      ??LoadConfigFromFile_52
    583                  AddHighPressVacAlarm(HighPressVacLimit, true);
   \   0000094C   B41194E5           LDR      R1,[R4, #+436]
   \   00000950   0120A0E3           MOV      R2,#+1
   \   00000954   0400A0E1           MOV      R0,R4
   \   00000958   ........           BL       ??AddHighPressVacAlarm
    584              }
    585              if ( hasLowPressVacLimit ) {
   \                     ??LoadConfigFromFile_52:
   \   0000095C   D801D4E5           LDRB     R0,[R4, #+472]
   \   00000960   000050E3           CMP      R0,#+0
   \   00000964   0300000A           BEQ      ??LoadConfigFromFile_53
    586                  AddLowPressVacAlarm(LowPressVacLimit, true);
   \   00000968   B01194E5           LDR      R1,[R4, #+432]
   \   0000096C   0120A0E3           MOV      R2,#+1
   \   00000970   0400A0E1           MOV      R0,R4
   \   00000974   ........           BL       ??AddLowPressVacAlarm
    587              }
    588              if ( hasHighVapourReturnLimit ) {
   \                     ??LoadConfigFromFile_53:
   \   00000978   DD01D4E5           LDRB     R0,[R4, #+477]
   \   0000097C   000050E3           CMP      R0,#+0
   \   00000980   0300000A           BEQ      ??LoadConfigFromFile_54
    589                  AddHighPressVapRetAlarm(HighVapourReturnLimit, true);
   \   00000984   C41194E5           LDR      R1,[R4, #+452]
   \   00000988   0120A0E3           MOV      R2,#+1
   \   0000098C   0400A0E1           MOV      R0,R4
   \   00000990   ........           BL       ??AddHighPressVapRetAlarm
    590              }
    591              if ( hasLowVapourReturnLimit ) {
   \                     ??LoadConfigFromFile_54:
   \   00000994   DC01D4E5           LDRB     R0,[R4, #+476]
   \   00000998   000050E3           CMP      R0,#+0
   \   0000099C   0300000A           BEQ      ??LoadConfigFromFile_55
    592                  AddLowPressVapRetAlarm(LowVapourReturnLimit, true);
   \   000009A0   C01194E5           LDR      R1,[R4, #+448]
   \   000009A4   0120A0E3           MOV      R2,#+1
   \   000009A8   0400A0E1           MOV      R0,R4
   \   000009AC   ........           BL       ??AddLowPressVapRetAlarm
    593              }
    594              if ( hasHighIGP_Limit ) {
   \                     ??LoadConfigFromFile_55:
   \   000009B0   DB01D4E5           LDRB     R0,[R4, #+475]
   \   000009B4   000050E3           CMP      R0,#+0
   \   000009B8   0300000A           BEQ      ??LoadConfigFromFile_56
    595                  AddHighIGP_Alarm(HighIGP_Limit, true);
   \   000009BC   BC1194E5           LDR      R1,[R4, #+444]
   \   000009C0   0120A0E3           MOV      R2,#+1
   \   000009C4   0400A0E1           MOV      R0,R4
   \   000009C8   ........           BL       ??AddHighIGP_Alarm
    596              }
    597              if ( hasLowIGP_Limit ) {
   \                     ??LoadConfigFromFile_56:
   \   000009CC   DA01D4E5           LDRB     R0,[R4, #+474]
   \   000009D0   000050E3           CMP      R0,#+0
   \   000009D4   0300000A           BEQ      ??LoadConfigFromFile_57
    598                  AddLowIGP_Alarm(LowIGP_Limit, true);
   \   000009D8   B81194E5           LDR      R1,[R4, #+440]
   \   000009DC   0120A0E3           MOV      R2,#+1
   \   000009E0   0400A0E1           MOV      R0,R4
   \   000009E4   ........           BL       ??AddLowIGP_Alarm
    599              }
    600          
    601          
    602              // Use the other limits when assuming LPG/LNG tanks
    603              if ( MaxPressureRange >= 15.0 ) {
   \                     ??LoadConfigFromFile_57:
   \   000009E8   E40194E5           LDR      R0,[R4, #+484]
   \   000009EC   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000009F0   0020A0E3           MOV      R2,#+0
   \   000009F4   4034A0E3           MOV      R3,#+1073741824
   \   000009F8   B83983E3           ORR      R3,R3,#0x2E0000
   \   000009FC   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000A00   000050E3           CMP      R0,#+0
   \   00000A04   0900000A           BEQ      ??LoadConfigFromFile_58
    604                  SetAlarmLimits(LIMIT_HIGH_LPG_PRESS, LIMIT_LOW_LPG_PRESS, LIMIT_HIGH_LPG_PRESS, LIMIT_LOW_LPG_PRESS, LIMIT_HIGH_LPG_PRESS, LIMIT_LOW_LPG_PRESS);
   \   00000A08   ........           LDR      R1,??Subroutine48_0+0x8  ;; 0x4318f51a
   \   00000A0C   ........           LDR      R2,??Subroutine48_0+0xC  ;; 0xffffffffc0a32793
   \   00000A10   0130A0E1           MOV      R3,R1
   \   00000A14   0200A0E1           MOV      R0,R2
   \   00000A18   01002DE9           PUSH     {R0}
   \   00000A1C   0100A0E1           MOV      R0,R1
   \   00000A20   01002DE9           PUSH     {R0}
   \   00000A24   0200A0E1           MOV      R0,R2
   \   00000A28   01002DE9           PUSH     {R0}
   \   00000A2C   080000EA           B        ??LoadConfigFromFile_59
    605              } else {
    606                  SetAlarmLimits(HighVapourReturnLimit, LowVapourReturnLimit, HighPressVacLimit, LowPressVacLimit, HighTankPressLimit, LowTankPressLimit);
   \                     ??LoadConfigFromFile_58:
   \   00000A30   AC0194E5           LDR      R0,[R4, #+428]
   \   00000A34   01002DE9           PUSH     {R0}
   \   00000A38   A80194E5           LDR      R0,[R4, #+424]
   \   00000A3C   01002DE9           PUSH     {R0}
   \   00000A40   B00194E5           LDR      R0,[R4, #+432]
   \   00000A44   01002DE9           PUSH     {R0}
   \   00000A48   B43194E5           LDR      R3,[R4, #+436]
   \   00000A4C   C02194E5           LDR      R2,[R4, #+448]
   \   00000A50   C41194E5           LDR      R1,[R4, #+452]
   \                     ??LoadConfigFromFile_59:
   \   00000A54   0400A0E1           MOV      R0,R4
   \   00000A58   ........           BL       ??SetAlarmLimits
   \   00000A5C   0CD08DE2           ADD      SP,SP,#+12
    607              }
    608              HighPressurePtr->Locked = HighTankPressLocked;
   \   00000A60   A411D4E5           LDRB     R1,[R4, #+420]
   \   00000A64   740194E5           LDR      R0,[R4, #+372]
   \   00000A68   E810C0E5           STRB     R1,[R0, #+232]
    609              LowPressurePtr->Locked  = LowTankPressLocked;
   \   00000A6C   A511D4E5           LDRB     R1,[R4, #+421]
   \   00000A70   780194E5           LDR      R0,[R4, #+376]
   \   00000A74   E810C0E5           STRB     R1,[R0, #+232]
    610          
    611              if ( HasIntHighTankPressLimit1 ) {
   \   00000A78   DE01D4E5           LDRB     R0,[R4, #+478]
   \   00000A7C   000050E3           CMP      R0,#+0
   \   00000A80   0300000A           BEQ      ??LoadConfigFromFile_60
    612                  AddHighPressInternalAlarm1(IntHighTankPressLimit1, true);
   \   00000A84   C81194E5           LDR      R1,[R4, #+456]
   \   00000A88   0120A0E3           MOV      R2,#+1
   \   00000A8C   0400A0E1           MOV      R0,R4
   \   00000A90   ........           BL       ??AddHighPressInternalAlarm1
    613              }
    614              if ( HasIntLowTankPressLimit1 ) {
   \                     ??LoadConfigFromFile_60:
   \   00000A94   DF01D4E5           LDRB     R0,[R4, #+479]
   \   00000A98   000050E3           CMP      R0,#+0
   \   00000A9C   0300000A           BEQ      ??LoadConfigFromFile_61
    615                  AddLowPressInternalAlarm1(IntLowTankPressLimit1, true);
   \   00000AA0   CC1194E5           LDR      R1,[R4, #+460]
   \   00000AA4   0120A0E3           MOV      R2,#+1
   \   00000AA8   0400A0E1           MOV      R0,R4
   \   00000AAC   ........           BL       ??AddLowPressInternalAlarm1
    616              }
    617              if ( HasIntHighTankPressLimit2 ) {
   \                     ??LoadConfigFromFile_61:
   \   00000AB0   E001D4E5           LDRB     R0,[R4, #+480]
   \   00000AB4   000050E3           CMP      R0,#+0
   \   00000AB8   0300000A           BEQ      ??LoadConfigFromFile_62
    618                  AddHighPressInternalAlarm2(IntHighTankPressLimit2, true);
   \   00000ABC   D01194E5           LDR      R1,[R4, #+464]
   \   00000AC0   0120A0E3           MOV      R2,#+1
   \   00000AC4   0400A0E1           MOV      R0,R4
   \   00000AC8   ........           BL       ??AddHighPressInternalAlarm2
    619              }
    620              if ( HasIntLowTankPressLimit2 ) {
   \                     ??LoadConfigFromFile_62:
   \   00000ACC   E101D4E5           LDRB     R0,[R4, #+481]
   \   00000AD0   000050E3           CMP      R0,#+0
   \   00000AD4   0300000A           BEQ      ??LoadConfigFromFile_63
    621                  AddLowPressInternalAlarm2(IntLowTankPressLimit2, true);
   \   00000AD8   D41194E5           LDR      R1,[R4, #+468]
   \   00000ADC   0120A0E3           MOV      R2,#+1
   \   00000AE0   0400A0E1           MOV      R0,R4
   \   00000AE4   ........           BL       ??AddLowPressInternalAlarm2
    622              }
    623              SetPressureAlarmMode(pLimitAdjustable);
   \                     ??LoadConfigFromFile_63:
   \   00000AE8   0010A0E3           MOV      R1,#+0
   \   00000AEC   0400A0E1           MOV      R0,R4
   \   00000AF0   ........           BL       ??SetPressureAlarmMode
    624              CopyAnalogList();
   \   00000AF4   0400A0E1           MOV      R0,R4
   \   00000AF8   ........           _BLF     ??CopyAnalogList,??CopyAnalogList??rA
    625              AddSensorAlarms();
   \   00000AFC   0400A0E1           MOV      R0,R4
   \   00000B00   ........           _BLF     ??AddSensorAlarms,??AddSensorAlarms??rA
    626              SetChildUserRights();
   \   00000B04   0400A0E1           MOV      R0,R4
   \   00000B08   ........           _BLF     ??SetChildUserRights,??SetChildUserRights??rA
    627          /*
    628              if ( IntHighPressurePtr1 && IntHighPressurePtr2 ) {
    629                  if ( IntHighPressurePtr1->Limit > IntHighPressurePtr2->Limit ) {
    630                      swap(IntHighPressurePtr2->Limit, IntHighPressurePtr1->Limit);
    631                  }
    632                  //GiveConfigWarning("ExtraHighTankPressLimit1 > ExtraHighTankPressLimit2, line " + AnsiString(ConfigString.LineCount));
    633              }
    634              if ( IntLowPressurePtr1  && IntLowPressurePtr2 ) {
    635                  if ( IntHighPressurePtr1->Limit < IntHighPressurePtr2->Limit ) {
    636                      swap(IntHighPressurePtr2->Limit, IntHighPressurePtr1->Limit);
    637                  }
    638                  //GiveConfigWarning("ExtraHighTankPressLimit1 < ExtraHighTankPressLimit2, line " + AnsiString(ConfigString.LineCount));
    639              }
    640          */
    641              return ErrorLine;
   \   00000B0C   00009DE5           LDR      R0,[SP, #+0]
   \   00000B10   F0D08DE2           ADD      SP,SP,#+240
   \   00000B14                      REQUIRE ?Subroutine48
   \   00000B14                      ;; // Fall through to label ?Subroutine48
    642          }
    643          //---------------------------------------------------------------------------
    644          ///////////////////////////////////////////////////////////////
    645          //
    646          // Routines for Saving of Settings
    647          //
    648          ///////////////////////////////////////////////////////////////
    649          

   \                                 In segment CODE, align 4, keep-with-next
    650          void PROTankPressure::SaveSettings(TSNConfigString *SettingsString) {
   \                     ??SaveSettings:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   62DF4DE2           SUB      SP,SP,#+392
   \   00000008   0040A0E1           MOV      R4,R0
    651              if ( IsModified || WriteAll ) {
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   E8029F05           LDREQ    R0,??SaveSettings_2  ;; ??WriteAll
   \   0000001C   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000020   00005003           CMPEQ    R0,#+0
   \   00000024   B500000A           BEQ      ??SaveSettings_3
    652                  IsModified = false;
    653                  AnsiString LocalString;
    654                  AnsiString IdNumStr;
    655                  IdNumStr.cat_sprintf("0x%0x", IDNumber);
    656                  LocalString += KeyWord(Type) + IdNumStr + CrLfStr;
   \   00000028   ........           LDR      R6,??DataTable58  ;; CrLfStr
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0000C4E5           STRB     R0,[R4, #+0]
   \   00000034   1C008DE2           ADD      R0,SP,#+28
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000003C   540F8DE2           ADD      R0,SP,#+336
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000044   9C3094E5           LDR      R3,[R4, #+156]
   \   00000048   ........           LDR      R2,??DataTable59  ;; `?<Constant "0x%0x">`
   \   0000004C   0080A0E3           MOV      R8,#+0
   \   00000050   5B1F8DE2           ADD      R1,SP,#+364
   \   00000054   540F8DE2           ADD      R0,SP,#+336
   \   00000058   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000005C   0820A0E1           MOV      R2,R8
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   5B0F8DE2           ADD      R0,SP,#+364
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000006C   A01094E5           LDR      R1,[R4, #+160]
   \   00000070   8C008DE2           ADD      R0,SP,#+140
   \   00000074   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000078   542F8DE2           ADD      R2,SP,#+336
   \   0000007C   8C108DE2           ADD      R1,SP,#+140
   \   00000080   70008DE2           ADD      R0,SP,#+112
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   0620A0E1           MOV      R2,R6
   \   0000008C   70108DE2           ADD      R1,SP,#+112
   \   00000090   54008DE2           ADD      R0,SP,#+84
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   ........           LDR      R0,??DataTable62  ;; ??npos
   \   0000009C   0820A0E1           MOV      R2,R8
   \   000000A0   007090E5           LDR      R7,[R0, #+0]
   \   000000A4   54108DE2           ADD      R1,SP,#+84
   \   000000A8   0730A0E1           MOV      R3,R7
   \   000000AC   1C008DE2           ADD      R0,SP,#+28
   \   000000B0   ........           _BLF     ??append,??append??rA
   \   000000B4   0820A0E1           MOV      R2,R8
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   54008DE2           ADD      R0,SP,#+84
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0820A0E1           MOV      R2,R8
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   70008DE2           ADD      R0,SP,#+112
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   0820A0E1           MOV      R2,R8
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   8C008DE2           ADD      R0,SP,#+140
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    657                  set<AlarmBasic *>::iterator pBIt;
    658                  for ( pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++ ) {
   \   000000E4   E49094E5           LDR      R9,[R4, #+228]
   \   000000E8   1A0000EA           B        ??SaveSettings_4
    659                      AlarmBasic *element = *pBIt;
   \                     ??SaveSettings_5:
   \   000000EC   100099E5           LDR      R0,[R9, #+16]
    660                      if ( element && !element->Locked ) LocalString += (AnsiString)element->SaveSettings();
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1400000A           BEQ      ??SaveSettings_6
   \   000000F8   E810D0E5           LDRB     R1,[R0, #+232]
   \   000000FC   000051E3           CMP      R1,#+0
   \   00000100   1100001A           BNE      ??SaveSettings_6
   \   00000104   0D10A0E1           MOV      R1,SP
   \   00000108   ........           _BLF     ??SaveSettings_1,??SaveSettings??rA
   \   0000010C   0D10A0E1           MOV      R1,SP
   \   00000110   38008DE2           ADD      R0,SP,#+56
   \   00000114   ........           _BLF     ??string,??string??rA
   \   00000118   0730A0E1           MOV      R3,R7
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   38108DE2           ADD      R1,SP,#+56
   \   00000124   1C008DE2           ADD      R0,SP,#+28
   \   00000128   ........           _BLF     ??append,??append??rA
   \   0000012C   0820A0E1           MOV      R2,R8
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   38008DE2           ADD      R0,SP,#+56
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   0820A0E1           MOV      R2,R8
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   0D00A0E1           MOV      R0,SP
   \   00000148   ........           _BLF     ??_Tidy,??_Tidy??rA
    661                  }
   \                     ??SaveSettings_6:
   \   0000014C   0900A0E1           MOV      R0,R9
   \   00000150   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000154   0090A0E1           MOV      R9,R0
   \                     ??SaveSettings_4:
   \   00000158   E40084E2           ADD      R0,R4,#+228
   \   0000015C   000059E1           CMP      R9,R0
   \   00000160   E1FFFF1A           BNE      ??SaveSettings_5
    662                  if ( !tankPressures.empty() ) {
   \   00000164   589FA0E3           MOV      R9,#+352
   \   00000168   040089E0           ADD      R0,R9,R4
   \   0000016C   ........           _BLF     ??empty,??empty??rA
   \   00000170   000050E3           CMP      R0,#+0
   \   00000174   1900001A           BNE      ??SaveSettings_7
    663                      for ( unsigned i = 0; i < tankPressures.size(); i++ ) {
   \   00000178   120000EA           B        ??SaveSettings_8
    664                          LocalString += tankPressures[i]->SaveAISettings();
   \                     ??SaveSettings_9:
   \   0000017C   040099E7           LDR      R0,[R9, +R4]
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   083190E7           LDR      R3,[R0, +R8, LSL #+2]
   \   00000188   0D10A0E1           MOV      R1,SP
   \   0000018C   0300A0E1           MOV      R0,R3
   \   00000190   A43093E5           LDR      R3,[R3, #+164]
    665                      }
   \   00000194   018088E2           ADD      R8,R8,#+1
   \   00000198   6C3093E5           LDR      R3,[R3, #+108]
   \   0000019C   0FE0A0E1           MOV      LR,PC
   \   000001A0   13FF2FE1           BX       R3
   \   000001A4   0730A0E1           MOV      R3,R7
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0D10A0E1           MOV      R1,SP
   \   000001B0   1C008DE2           ADD      R0,SP,#+28
   \   000001B4   ........           _BLF     ??append,??append??rA
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   0D00A0E1           MOV      R0,SP
   \   000001C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??SaveSettings_8:
   \   000001C8   040089E0           ADD      R0,R9,R4
   \   000001CC   041090E5           LDR      R1,[R0, #+4]
   \   000001D0   000090E5           LDR      R0,[R0, #+0]
   \   000001D4   000041E0           SUB      R0,R1,R0
   \   000001D8   200158E1           CMP      R8,R0, LSR #+2
   \   000001DC   E6FFFF3A           BCC      ??SaveSettings_9
    666                  }
    667                  LocalString += TabStr2 + KeyWord(C_OP_MODE_ADJUSTABLE + VapourAlarmSet) + CrLfStr;
   \                     ??SaveSettings_7:
   \   000001E0   7001D4E5           LDRB     R0,[R4, #+368]
   \   000001E4   FA1080E2           ADD      R1,R0,#+250
   \   000001E8   E0008DE2           ADD      R0,SP,#+224
   \   000001EC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001F0   14119FE5           LDR      R1,??SaveSettings_2+0x4  ;; TabStr2
   \   000001F4   E0208DE2           ADD      R2,SP,#+224
   \   000001F8   C4008DE2           ADD      R0,SP,#+196
   \   000001FC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000200   0620A0E1           MOV      R2,R6
   \   00000204   C4108DE2           ADD      R1,SP,#+196
   \   00000208   A8008DE2           ADD      R0,SP,#+168
   \   0000020C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000210   0730A0E1           MOV      R3,R7
   \   00000214   0020A0E3           MOV      R2,#+0
   \   00000218   A8108DE2           ADD      R1,SP,#+168
   \   0000021C   1C008DE2           ADD      R0,SP,#+28
   \   00000220   ........           _BLF     ??append,??append??rA
   \   00000224   0020A0E3           MOV      R2,#+0
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   A8008DE2           ADD      R0,SP,#+168
   \   00000230   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0110A0E3           MOV      R1,#+1
   \   0000023C   C4008DE2           ADD      R0,SP,#+196
   \   00000240   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000244   0020A0E3           MOV      R2,#+0
   \   00000248   0110A0E3           MOV      R1,#+1
   \   0000024C   E0008DE2           ADD      R0,SP,#+224
   \   00000250   ........           _BLF     ??_Tidy,??_Tidy??rA
    668          
    669                  LocalString += KeyWord(C_PRO_END) + CrLfStr;
   \   00000254   FA1FA0E3           MOV      R1,#+1000
   \   00000258   460F8DE2           ADD      R0,SP,#+280
   \   0000025C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000260   0620A0E1           MOV      R2,R6
   \   00000264   461F8DE2           ADD      R1,SP,#+280
   \   00000268   FC008DE2           ADD      R0,SP,#+252
   \   0000026C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000270   0730A0E1           MOV      R3,R7
   \   00000274   0020A0E3           MOV      R2,#+0
   \   00000278   FC108DE2           ADD      R1,SP,#+252
   \   0000027C   1C008DE2           ADD      R0,SP,#+28
   \   00000280   ........           _BLF     ??append,??append??rA
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   0110A0E3           MOV      R1,#+1
   \   0000028C   FC008DE2           ADD      R0,SP,#+252
   \   00000290   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000294   0020A0E3           MOV      R2,#+0
   \   00000298   0110A0E3           MOV      R1,#+1
   \   0000029C   460F8DE2           ADD      R0,SP,#+280
   \   000002A0   ........           _BLF     ??_Tidy,??_Tidy??rA
    670                  LocalString += CrLfStr;
   \   000002A4   0730A0E1           MOV      R3,R7
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   0610A0E1           MOV      R1,R6
   \   000002B0   1C008DE2           ADD      R0,SP,#+28
   \   000002B4   ........           _BLF     ??append,??append??rA
    671                  SettingsString->AddString(LocalString);
   \   000002B8   1C108DE2           ADD      R1,SP,#+28
   \   000002BC   4D0F8DE2           ADD      R0,SP,#+308
   \   000002C0   ........           _BLF     ??string,??string??rA
   \   000002C4   4D1F8DE2           ADD      R1,SP,#+308
   \   000002C8   0500A0E1           MOV      R0,R5
   \   000002CC   ........           _BLF     ??AddString,??AddString??rA
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   0110A0E3           MOV      R1,#+1
   \   000002D8   4D0F8DE2           ADD      R0,SP,#+308
   \   000002DC   ........           _BLF     ??_Tidy,??_Tidy??rA
    672              }
   \   000002E0   0020A0E3           MOV      R2,#+0
   \   000002E4   0110A0E3           MOV      R1,#+1
   \   000002E8   540F8DE2           ADD      R0,SP,#+336
   \   000002EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F0   0020A0E3           MOV      R2,#+0
   \   000002F4   0110A0E3           MOV      R1,#+1
   \   000002F8   1C008DE2           ADD      R0,SP,#+28
   \   000002FC   ........           _BLF     ??_Tidy,??_Tidy??rA
    673          }
   \                     ??SaveSettings_3:
   \   00000300   62DF8DE2           ADD      SP,SP,#+392
   \   00000304   ........           B        ?Subroutine49
   \                     ??SaveSettings_2:
   \   00000308   ........           DC32     ??WriteAll
   \   0000030C   ........           DC32     TabStr2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine49:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine49_0:
   \   00000008   3A200000           DC8      ": ",+0
    674          

   \                                 In segment CODE, align 4, keep-with-next
    675          bool PROTankPressure::RestoreSettings(TSNConfigString *SettingsString) {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    676              bool NoError   = true;
    677              int  ErrorLine = 0;
   \   00000004   A8949FE5           LDR      R9,??RestoreSettings_2  ;; NewLineStr
   \   00000008   A8A49FE5           LDR      R10,??RestoreSettings_2+0x4  ;; `?<Constant "Tank pressure ">`
   \   0000000C   B3DF4DE2           SUB      SP,SP,#+716
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0170A0E3           MOV      R7,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0180E0E1           MVN      R8,R1
    678              int  Key;
    679              do {
    680                  AnsiString InputKeyWord = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_3:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   74108DE2           ADD      R1,SP,#+116
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
    681                  if ( ErrorLine ) {
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3900000A           BEQ      ??RestoreSettings_4
    682                      if ( ErrorLine != EOF ) {
   \   00000048   080050E1           CMP      R0,R8
   \   0000004C   0C01000A           BEQ      ??RestoreSettings_5
    683                          RestoreSettingsWarning((AnsiString)"Tank pressure " + Name + ":\nUnknown error started at line:" + (AnsiString)ErrorLine + NewLineStr);
   \   00000050   0010A0E1           MOV      R1,R0
   \   00000054   6D0F8DE2           ADD      R0,SP,#+436
   \   00000058   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000005C   00B0A0E1           MOV      R11,R0
   \   00000060   0A10A0E1           MOV      R1,R10
   \   00000064   660F8DE2           ADD      R0,SP,#+408
   \   00000068   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000006C   442084E2           ADD      R2,R4,#+68
   \   00000070   0010A0E1           MOV      R1,R0
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000007C   10208AE2           ADD      R2,R10,#+16
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   58008DE2           ADD      R0,SP,#+88
   \   00000088   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000008C   0B20A0E1           MOV      R2,R11
   \   00000090   58108DE2           ADD      R1,SP,#+88
   \   00000094   3C008DE2           ADD      R0,SP,#+60
   \   00000098   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000009C   0920A0E1           MOV      R2,R9
   \   000000A0   3C108DE2           ADD      R1,SP,#+60
   \   000000A4   20008DE2           ADD      R0,SP,#+32
   \   000000A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000AC   20108DE2           ADD      R1,SP,#+32
   \   000000B0   5F0F8DE2           ADD      R0,SP,#+380
   \   000000B4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000B8   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0110A0E3           MOV      R1,#+1
   \   000000C4   5F0F8DE2           ADD      R0,SP,#+380
   \   000000C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   20008DE2           ADD      R0,SP,#+32
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   3C008DE2           ADD      R0,SP,#+60
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   6D0F8DE2           ADD      R0,SP,#+436
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   58008DE2           ADD      R0,SP,#+88
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   04008DE2           ADD      R0,SP,#+4
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   660F8DE2           ADD      R0,SP,#+408
   \                     ??RestoreSettings_6:
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000012C   D40000EA           B        ??RestoreSettings_5
    684                      }
    685                  } else {
    686                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_4:
   \   00000130   74108DE2           ADD      R1,SP,#+116
   \   00000134   04008DE2           ADD      R0,SP,#+4
   \   00000138   ........           _BLF     ??string,??string??rA
   \   0000013C   04008DE2           ADD      R0,SP,#+4
   \   00000140   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000144   0060A0E1           MOV      R6,R0
   \   00000148   0020A0E3           MOV      R2,#+0
   \   0000014C   0110A0E3           MOV      R1,#+1
   \   00000150   04008DE2           ADD      R0,SP,#+4
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
    687                      switch ( Key ) {
   \   00000158   FA0056E3           CMP      R6,#+250
   \   0000015C   BD00000A           BEQ      ??RestoreSettings_7
   \   00000160   FB0056E3           CMP      R6,#+251
   \   00000164   BD00000A           BEQ      ??RestoreSettings_8
   \   00000168   FC0056E3           CMP      R6,#+252
   \   0000016C   BD00000A           BEQ      ??RestoreSettings_9
   \   00000170   FD0056E3           CMP      R6,#+253
   \   00000174   BD00000A           BEQ      ??RestoreSettings_10
   \   00000178   FE0056E3           CMP      R6,#+254
   \   0000017C   BD00000A           BEQ      ??RestoreSettings_11
   \   00000180   FA0F56E3           CMP      R6,#+1000
   \   00000184   EA10A013           MOVNE    R1,#+234
   \   00000188   C01F8113           ORRNE    R1,R1,#0x300
   \   0000018C   01005611           CMPNE    R6,R1
   \   00000190   FB0F5613           CMPNE    R6,#+1004
   \   00000194   BA00000A           BEQ      ??RestoreSettings_5
   \   00000198   3E10A0E3           MOV      R1,#+62
   \   0000019C   801E81E3           ORR      R1,R1,#0x800
   \   000001A0   010056E1           CMP      R6,R1
   \   000001A4   01108113           ORRNE    R1,R1,#0x1
   \   000001A8   01005611           CMPNE    R6,R1
   \   000001AC   09108112           ADDNE    R1,R1,#+9
   \   000001B0   01005611           CMPNE    R6,R1
   \   000001B4   01108113           ORRNE    R1,R1,#0x1
   \   000001B8   01005611           CMPNE    R6,R1
   \   000001BC   01108112           ADDNE    R1,R1,#+1
   \   000001C0   01005611           CMPNE    R6,R1
   \   000001C4   01108113           ORRNE    R1,R1,#0x1
   \   000001C8   01005611           CMPNE    R6,R1
   \   000001CC   01108112           ADDNE    R1,R1,#+1
   \   000001D0   01005611           CMPNE    R6,R1
   \   000001D4   01108113           ORRNE    R1,R1,#0x1
   \   000001D8   01005611           CMPNE    R6,R1
   \   000001DC   05108112           ADDNE    R1,R1,#+5
   \   000001E0   01005611           CMPNE    R6,R1
   \   000001E4   01108113           ORRNE    R1,R1,#0x1
   \   000001E8   01005611           CMPNE    R6,R1
   \   000001EC   2A108112           ADDNE    R1,R1,#+42
   \   000001F0   01005611           CMPNE    R6,R1
   \   000001F4   04108112           ADDNE    R1,R1,#+4
   \   000001F8   01005611           CMPNE    R6,R1
   \   000001FC   01108112           ADDNE    R1,R1,#+1
   \   00000200   01005611           CMPNE    R6,R1
   \   00000204   01108113           ORRNE    R1,R1,#0x1
   \   00000208   01005611           CMPNE    R6,R1
   \   0000020C   01108112           ADDNE    R1,R1,#+1
   \   00000210   01005611           CMPNE    R6,R1
   \   00000214   8200000A           BEQ      ??RestoreSettings_12
   \   00000218   141081E2           ADD      R1,R1,#+20
   \   0000021C   010056E1           CMP      R6,R1
   \   00000220   B910A013           MOVNE    R1,#+185
   \   00000224   B01E8113           ORRNE    R1,R1,#0xB00
   \   00000228   01005611           CMPNE    R6,R1
   \   0000022C   9400000A           BEQ      ??RestoreSettings_5
   \   00000230   161081E2           ADD      R1,R1,#+22
   \   00000234   010056E1           CMP      R6,R1
   \   00000238   5700000A           BEQ      ??RestoreSettings_13
   \   0000023C   BD0E56E3           CMP      R6,#+3024
   \   00000240   4C00000A           BEQ      ??RestoreSettings_14
   \   00000244   041081E2           ADD      R1,R1,#+4
   \   00000248   010056E1           CMP      R6,R1
   \   0000024C   6D00000A           BEQ      ??RestoreSettings_15
   \   00000250   011081E2           ADD      R1,R1,#+1
   \   00000254   010056E1           CMP      R6,R1
   \   00000258   5700000A           BEQ      ??RestoreSettings_16
    688                      default:
    689                          RestoreSettingsWarning((AnsiString)"Tank pressure " + Name + ":\nThe keyword " + InputKeyWord + " is not allowed here!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \   0000025C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000260   AC0F8DE2           ADD      R0,SP,#+688
   \   00000264   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000268   00B0A0E1           MOV      R11,R0
   \   0000026C   0A10A0E1           MOV      R1,R10
   \   00000270   A50F8DE2           ADD      R0,SP,#+660
   \   00000274   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000278   0010A0E1           MOV      R1,R0
   \   0000027C   442084E2           ADD      R2,R4,#+68
   \   00000280   9E0F8DE2           ADD      R0,SP,#+632
   \   00000284   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000288   34208AE2           ADD      R2,R10,#+52
   \   0000028C   9E1F8DE2           ADD      R1,SP,#+632
   \   00000290   970F8DE2           ADD      R0,SP,#+604
   \   00000294   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000298   74208DE2           ADD      R2,SP,#+116
   \   0000029C   971F8DE2           ADD      R1,SP,#+604
   \   000002A0   900F8DE2           ADD      R0,SP,#+576
   \   000002A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002A8   44208AE2           ADD      R2,R10,#+68
   \   000002AC   901F8DE2           ADD      R1,SP,#+576
   \   000002B0   890F8DE2           ADD      R0,SP,#+548
   \   000002B4   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   000002B8   0B20A0E1           MOV      R2,R11
   \   000002BC   891F8DE2           ADD      R1,SP,#+548
   \   000002C0   820F8DE2           ADD      R0,SP,#+520
   \   000002C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002C8   0920A0E1           MOV      R2,R9
   \   000002CC   821F8DE2           ADD      R1,SP,#+520
   \   000002D0   7B0F8DE2           ADD      R0,SP,#+492
   \   000002D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002D8   7B1F8DE2           ADD      R1,SP,#+492
   \   000002DC   740F8DE2           ADD      R0,SP,#+464
   \   000002E0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000002E4   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000002E8   0020A0E3           MOV      R2,#+0
   \   000002EC   0110A0E3           MOV      R1,#+1
   \   000002F0   740F8DE2           ADD      R0,SP,#+464
   \   000002F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   7B0F8DE2           ADD      R0,SP,#+492
   \   00000304   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000308   0020A0E3           MOV      R2,#+0
   \   0000030C   0110A0E3           MOV      R1,#+1
   \   00000310   820F8DE2           ADD      R0,SP,#+520
   \   00000314   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000318   0020A0E3           MOV      R2,#+0
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   AC0F8DE2           ADD      R0,SP,#+688
   \   00000324   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   890F8DE2           ADD      R0,SP,#+548
   \   00000334   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000338   0020A0E3           MOV      R2,#+0
   \   0000033C   0110A0E3           MOV      R1,#+1
   \   00000340   900F8DE2           ADD      R0,SP,#+576
   \   00000344   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000348   0020A0E3           MOV      R2,#+0
   \   0000034C   0110A0E3           MOV      R1,#+1
   \   00000350   970F8DE2           ADD      R0,SP,#+604
   \   00000354   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000358   0020A0E3           MOV      R2,#+0
   \   0000035C   0110A0E3           MOV      R1,#+1
   \   00000360   9E0F8DE2           ADD      R0,SP,#+632
   \   00000364   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000368   0020A0E3           MOV      R2,#+0
   \   0000036C   0110A0E3           MOV      R1,#+1
   \   00000370   A50F8DE2           ADD      R0,SP,#+660
   \   00000374   6BFFFFEA           B        ??RestoreSettings_6
    690                          break;
    691                      case C_AI_END:      // If AI type not found can continue with this
    692                      case C_AL_END:
    693                      case C_PRO_END:
    694                      case C_PRO_END_COMMON:
    695                      case C_PRO_END_PRO:
    696                          break;
    697                      case ID_AL_HIGH_T_PRESS:
    698                          NoError = HighPressurePtr->RestoreSettings(SettingsString);
   \                     ??RestoreSettings_14:
   \   00000378   742194E5           LDR      R2,[R4, #+372]
   \   0000037C   0510A0E1           MOV      R1,R5
   \   00000380   0200A0E1           MOV      R0,R2
   \   00000384   A42092E5           LDR      R2,[R2, #+164]
   \   00000388   142092E5           LDR      R2,[R2, #+20]
   \   0000038C   0FE0A0E1           MOV      LR,PC
   \   00000390   12FF2FE1           BX       R2
   \                     ??RestoreSettings_17:
   \   00000394   0070A0E1           MOV      R7,R0
   \   00000398   390000EA           B        ??RestoreSettings_5
    699                          break;
    700                      case ID_AL_LOW_T_PRESS:
    701                          NoError = LowPressurePtr->RestoreSettings(SettingsString);
   \                     ??RestoreSettings_13:
   \   0000039C   782194E5           LDR      R2,[R4, #+376]
   \   000003A0   0510A0E1           MOV      R1,R5
   \   000003A4   0200A0E1           MOV      R0,R2
   \   000003A8   A42092E5           LDR      R2,[R2, #+164]
   \                     ??RestoreSettings_18:
   \   000003AC   142092E5           LDR      R2,[R2, #+20]
   \   000003B0   0FE0A0E1           MOV      LR,PC
   \   000003B4   12FF2FE1           BX       R2
   \   000003B8   F5FFFFEA           B        ??RestoreSettings_17
    702                          break;
    703                      case ID_AL_HIGH_INERT_GAS_PRESS :
    704                          if ( HighIGPPtr ) {
   \                     ??RestoreSettings_16:
   \   000003BC   842194E5           LDR      R2,[R4, #+388]
   \   000003C0   000052E3           CMP      R2,#+0
   \   000003C4   0600000A           BEQ      ??RestoreSettings_19
    705                              NoError = HighIGPPtr->RestoreSettings(SettingsString);
   \   000003C8   0200A0E1           MOV      R0,R2
   \   000003CC   A42092E5           LDR      R2,[R2, #+164]
   \   000003D0   0510A0E1           MOV      R1,R5
   \   000003D4   142092E5           LDR      R2,[R2, #+20]
   \   000003D8   0FE0A0E1           MOV      LR,PC
   \   000003DC   12FF2FE1           BX       R2
   \   000003E0   EBFFFFEA           B        ??RestoreSettings_17
    706                          } else {
    707                              AlarmBasic tmpAlarm;
   \                     ??RestoreSettings_19:
   \   000003E4   90008DE2           ADD      R0,SP,#+144
   \   000003E8   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
    708                              tmpAlarm.RestoreSettings(SettingsString);
   \   000003EC   0510A0E1           MOV      R1,R5
   \   000003F0   90008DE2           ADD      R0,SP,#+144
   \   000003F4   ........           _BLF     ??RestoreSettings_1,??RestoreSettings??rA
    709                          }
   \   000003F8   0010A0E3           MOV      R1,#+0
   \   000003FC   90008DE2           ADD      R0,SP,#+144
   \   00000400   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \   00000404   1E0000EA           B        ??RestoreSettings_5
    710                          break;
    711                      case ID_AL_LOW_INERT_GAS_PRESS  :
    712                          if ( LowIGPPtr ) {
   \                     ??RestoreSettings_15:
   \   00000408   882194E5           LDR      R2,[R4, #+392]
   \   0000040C   000052E3           CMP      R2,#+0
   \   00000410   F3FFFF0A           BEQ      ??RestoreSettings_19
    713                              NoError = LowIGPPtr->RestoreSettings(SettingsString);
   \   00000414   0200A0E1           MOV      R0,R2
   \   00000418   A42092E5           LDR      R2,[R2, #+164]
   \   0000041C   0510A0E1           MOV      R1,R5
   \   00000420   E1FFFFEA           B        ??RestoreSettings_18
    714                          } else {
    715                              AlarmBasic tmpAlarm;
    716                              tmpAlarm.RestoreSettings(SettingsString);
    717                          }
    718                          break;
    719                      case C_AI_P906_0110:
    720                      case C_AI_P906_0111:
    721                      case C_AI_ATM_N_Ex:
    722                      case C_AI_ATM_Ex:
    723                      case C_AI_ATM_Ex_H:
    724                      case C_AI_ATM_N_Ex_0_1:
    725                      case C_AI_APT500	  :
    726                      case C_AI_SPT900	  :
    727                      case C_AI_Gen_4_20mA:
    728                      case C_AI_DIFF_PRESSURE_mA:
    729                      case C_AI_MB_Press_0_20mA   :
    730                      case C_AI_MB_Press_4_20mA   :
    731                      case C_AI_MB_DiffPre_0_20mA :
    732                      case C_AI_MB_DiffPre_4_20mA :
    733                      case C_AI_AirPurge :
    734                          {
    735                              int         AIIDNumber   = SettingsString->ReadInteger(ErrorLine);
   \                     ??RestoreSettings_12:
   \   00000424   0020A0E3           MOV      R2,#+0
   \   00000428   0D10A0E1           MOV      R1,SP
   \   0000042C   0500A0E1           MOV      R0,R5
   \   00000430   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    736                              AnalogInput *AnalogInPtr = (AnalogInput *)FindObject(AIIDNumber);
   \   00000434   ........           _BLF     ??FindObject,??FindObject??rA
   \   00000438   0020B0E1           MOVS     R2,R0
    737                              if ( AnalogInPtr ) AnalogInPtr->RestoreAISettings(SettingsString);
   \   0000043C   1100000A           BEQ      ??RestoreSettings_20
   \   00000440   A42092E5           LDR      R2,[R2, #+164]
   \   00000444   0510A0E1           MOV      R1,R5
   \   00000448   702092E5           LDR      R2,[R2, #+112]
   \   0000044C   0FE0A0E1           MOV      LR,PC
   \   00000450   12FF2FE1           BX       R2
   \   00000454   0A0000EA           B        ??RestoreSettings_5
    738                          }
    739                          break;
    740                      case C_OP_MODE_ADJUSTABLE:
    741                          SetPressureAlarmMode(pLimitAdjustable);
   \                     ??RestoreSettings_7:
   \   00000458   0010A0E3           MOV      R1,#+0
   \   0000045C   060000EA           B        ??RestoreSettings_21
    742                          break;
    743                      case C_OP_MODE_PRES_VAC:
    744                          SetPressureAlarmMode(pLimitPressVac);
   \                     ??RestoreSettings_8:
   \   00000460   0110A0E3           MOV      R1,#+1
   \   00000464   040000EA           B        ??RestoreSettings_21
    745                          break;
    746                      case C_OP_MODE_VAP_RET :
    747                          SetPressureAlarmMode(pLimitVapourReturn);
   \                     ??RestoreSettings_9:
   \   00000468   0210A0E3           MOV      R1,#+2
   \   0000046C   020000EA           B        ??RestoreSettings_21
    748                          break;
    749                      case C_OP_MODE_PO      :
    750                          SetPressureAlarmMode(pLimitPOmode);
   \                     ??RestoreSettings_10:
   \   00000470   0310A0E3           MOV      R1,#+3
   \   00000474   000000EA           B        ??RestoreSettings_21
    751                          break;
    752                      case C_OP_MODE_IGP      :
    753                          SetPressureAlarmMode(pLimitIGPmode);
   \                     ??RestoreSettings_11:
   \   00000478   0410A0E3           MOV      R1,#+4
   \                     ??RestoreSettings_21:
   \   0000047C   0400A0E1           MOV      R0,R4
   \   00000480   ........           BL       ??SetPressureAlarmMode
    754                          break;
    755                      }
    756                  }
    757              }while ( NoError && (ErrorLine != EOF) && (Key != C_PRO_END) );
   \                     ??RestoreSettings_5:
   \   00000484   0020A0E3           MOV      R2,#+0
   \                     ??RestoreSettings_20:
   \   00000488   0110A0E3           MOV      R1,#+1
   \   0000048C   74008DE2           ADD      R0,SP,#+116
   \   00000490   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000494   000057E3           CMP      R7,#+0
   \   00000498   00009D15           LDRNE    R0,[SP, #+0]
   \   0000049C   08005011           CMPNE    R0,R8
   \   000004A0   FA0F5613           CMPNE    R6,#+1000
   \   000004A4   DFFEFF1A           BNE      ??RestoreSettings_3
    758              return (NoError);
   \   000004A8   0700A0E1           MOV      R0,R7
   \   000004AC   B3DF8DE2           ADD      SP,SP,#+716
   \   000004B0   ........           B        ?Subroutine48
   \                     ??RestoreSettings_2:
   \   000004B4   ........           DC32     NewLineStr
   \   000004B8   ........           DC32     `?<Constant "Tank pressure ">`
    759          }
    760          

   \                                 In segment CODE, align 4, keep-with-next
    761          AnsiString PROTankPressure::ZeroSetTankPressureSensor(bool Local) {
   \                     ??ZeroSetTankPressureSensor:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   70D04DE2           SUB      SP,SP,#+112
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    762              AnsiString TmpString;
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??AnsiString,??AnsiString??rA
    763              if ( !tankPressures.empty() ) {
   \   0000001C   587FA0E3           MOV      R7,#+352
   \   00000020   040087E0           ADD      R0,R7,R4
   \   00000024   ........           _BLF     ??empty,??empty??rA
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   3600001A           BNE      ??ZeroSetTankPressureSensor_1
    764                  int ErrorStatus = E_NO_ERR;
   \   00000030   0080A0E3           MOV      R8,#+0
    765                  for ( unsigned i = 0; i < tankPressures.size(); i++ ) {
   \   00000034   0090A0E3           MOV      R9,#+0
   \   00000038   060000EA           B        ??ZeroSetTankPressureSensor_2
    766                      ErrorStatus |= tankPressures[i]->AdjustSensorF(0.0, Local);
   \                     ??ZeroSetTankPressureSensor_3:
   \   0000003C   040097E7           LDR      R0,[R7, +R4]
   \   00000040   0620A0E1           MOV      R2,R6
   \   00000044   090190E7           LDR      R0,[R0, +R9, LSL #+2]
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   ........           _BLF     ??AdjustSensorF,??AdjustSensorF??rA
   \   00000050   088080E1           ORR      R8,R0,R8
    767                  }
   \   00000054   019089E2           ADD      R9,R9,#+1
   \                     ??ZeroSetTankPressureSensor_2:
   \   00000058   040087E0           ADD      R0,R7,R4
   \   0000005C   041090E5           LDR      R1,[R0, #+4]
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   000041E0           SUB      R0,R1,R0
   \   00000068   200159E1           CMP      R9,R0, LSR #+2
   \   0000006C   F2FFFF3A           BCC      ??ZeroSetTankPressureSensor_3
    768                  if ( ErrorStatus != E_NO_ERR ) {
   \   00000070   000058E3           CMP      R8,#+0
   \   00000074   2400000A           BEQ      ??ZeroSetTankPressureSensor_1
    769                      TmpString += Name + ": " + GetErrorMsg(ErrorStatus) + '\n';
   \   00000078   0810A0E1           MOV      R1,R8
   \   0000007C   54008DE2           ADD      R0,SP,#+84
   \   00000080   ........           _BLF     ??GetErrorMsg,??GetErrorMsg??rA
   \   00000084   ........           ADR      R2,??Subroutine49_0  ;; ": "
   \   00000088   441084E2           ADD      R1,R4,#+68
   \   0000008C   38008DE2           ADD      R0,SP,#+56
   \   00000090   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000094   54208DE2           ADD      R2,SP,#+84
   \   00000098   38108DE2           ADD      R1,SP,#+56
   \   0000009C   1C008DE2           ADD      R0,SP,#+28
   \   000000A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A4   0A20A0E3           MOV      R2,#+10
   \   000000A8   1C108DE2           ADD      R1,SP,#+28
   \   000000AC   0D00A0E1           MOV      R0,SP
   \   000000B0   ........           _BLF     `??operator+_2`,`??operator+??rA_2`
   \   000000B4   ........           LDR      R0,??DataTable62  ;; ??npos
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   003090E5           LDR      R3,[R0, #+0]
   \   000000C0   0D10A0E1           MOV      R1,SP
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   ........           _BLF     ??append,??append??rA
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   0110A0E3           MOV      R1,#+1
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   1C008DE2           ADD      R0,SP,#+28
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   54008DE2           ADD      R0,SP,#+84
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   38008DE2           ADD      R0,SP,#+56
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
    770                  }
    771              }
    772              return (TmpString);
   \                     ??ZeroSetTankPressureSensor_1:
   \   0000010C   70D08DE2           ADD      SP,SP,#+112
   \   00000110                      REQUIRE ?Subroutine49
   \   00000110                      ;; // Fall through to label ?Subroutine49
    773          }
    774          
    775          ///////////////////////////////////////////////////////////////
    776          //
    777          // Routines for the librarian
    778          //
    779          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    780          int PROTankPressure::FindPROStatus(AnsiString &MyString) {
   \                     ??FindPROStatus:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0050A0E1           MOV      R5,R0
    781              int PROStatus1 = ST_OK;
    782              int PROStatus2 = ST_OK;
    783              if ( HWFailure ) {
   \   0000000C   3C00D5E5           LDRB     R0,[R5, #+60]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   3DA0A0E3           MOV      R10,#+61
   \   00000018   F0AE8AE3           ORR      R10,R10,#0xF00
   \   0000001C   0A40A0E1           MOV      R4,R10
   \   00000020   047084E2           ADD      R7,R4,#+4
   \   00000024   000050E3           CMP      R0,#+0
    784                  PROStatus1 = ST_ERROR;
   \   00000028   0740A011           MOVNE    R4,R7
   \   0000002C   2C00001A           BNE      ??FindPROStatus_1
    785              }
    786              if ( PROStatus1 != ST_ERROR ) {
    787                  switch ( State ) {
   \   00000030   4801D5E5           LDRB     R0,[R5, #+328]
    788                  case tSeaGoing      :
    789                  case tTankCleaning  :
    790                      PROStatus1 = ST_WARNING;
    791                      break;
    792                  default:
    793                      break;
    794                  }
    795                  if ( PROStatus2 > PROStatus1 ) PROStatus1 = PROStatus2;
    796              }
    797              if ( PROStatus1 != ST_ERROR ) {
    798                  for ( unsigned i = 0; i < AnalogInList.size() && (PROStatus1 != ST_ERROR); i++ ) {
   \   00000034   0090A0E3           MOV      R9,#+0
   \   00000038   4B8FA0E3           MOV      R8,#+300
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   03005012           SUBSNE   R0,R0,#+3
   \   00000044   02408403           ORREQ    R4,R4,#0x2
   \   00000048   0B0000EA           B        ??FindPROStatus_2
    799                      PROStatus2 = AnalogInList[i]->FindPROStatus(MyString);
   \                     ??FindPROStatus_3:
   \   0000004C   050098E7           LDR      R0,[R8, +R5]
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   092190E7           LDR      R2,[R0, +R9, LSL #+2]
    800                      if ( PROStatus2 > PROStatus1 ) PROStatus1 = PROStatus2;
    801                  }
   \   00000058   019089E2           ADD      R9,R9,#+1
   \   0000005C   0200A0E1           MOV      R0,R2
   \   00000060   A42092E5           LDR      R2,[R2, #+164]
   \   00000064   1C2092E5           LDR      R2,[R2, #+28]
   \   00000068   0FE0A0E1           MOV      LR,PC
   \   0000006C   12FF2FE1           BX       R2
   \   00000070   00A0A0E1           MOV      R10,R0
   \   00000074   0A0054E1           CMP      R4,R10
   \   00000078   0A40A0B1           MOVLT    R4,R10
   \                     ??FindPROStatus_2:
   \   0000007C   050088E0           ADD      R0,R8,R5
   \   00000080   041090E5           LDR      R1,[R0, #+4]
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   000041E0           SUB      R0,R1,R0
   \   0000008C   200159E1           CMP      R9,R0, LSR #+2
   \   00000090   0100002A           BCS      ??FindPROStatus_4
   \   00000094   070054E1           CMP      R4,R7
   \   00000098   EBFFFF1A           BNE      ??FindPROStatus_3
    802              }
    803              if ( PROStatus1 != ST_ERROR ) {
   \                     ??FindPROStatus_4:
   \   0000009C   070054E1           CMP      R4,R7
   \   000000A0   0F00000A           BEQ      ??FindPROStatus_1
    804                  bool                        AlActive = false;
    805                  set<AlarmBasic *>::iterator pBIt;
    806                  for ( pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++ ) {
   \   000000A4   E40095E5           LDR      R0,[R5, #+228]
   \   000000A8   0070A0E3           MOV      R7,#+0
   \   000000AC   050000EA           B        ??FindPROStatus_5
    807                      AlarmBasic *Element = *pBIt;
   \                     ??FindPROStatus_6:
   \   000000B0   101090E5           LDR      R1,[R0, #+16]
    808                      if ( Element && (Element->State != AlarmBasic::AlIdle) ) AlActive = true;
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E010D115           LDRBNE   R1,[R1, #+224]
   \   000000BC   00005113           CMPNE    R1,#+0
   \   000000C0   0170A013           MOVNE    R7,#+1
    809                  }
   \   000000C4   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??FindPROStatus_5:
   \   000000C8   E41085E2           ADD      R1,R5,#+228
   \   000000CC   010050E1           CMP      R0,R1
   \   000000D0   F6FFFF1A           BNE      ??FindPROStatus_6
    810                  if ( AlActive ) PROStatus2 = ST_ALARM;
   \   000000D4   000057E3           CMP      R7,#+0
   \   000000D8   F4AEA013           MOVNE    R10,#+3904
    811                  if ( PROStatus2 > PROStatus1 ) PROStatus1 = PROStatus2;
   \   000000DC   0A0054E1           CMP      R4,R10
   \   000000E0   0A40A0B1           MOVLT    R4,R10
    812              }
    813              MyString = FindStatusChar(PROStatus1);
   \                     ??FindPROStatus_1:
   \   000000E4   0420A0E1           MOV      R2,R4
   \   000000E8   0D10A0E1           MOV      R1,SP
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   ........           _BLF     ??FindStatusChar,??FindStatusChar??rA
   \   000000F4   ........           LDR      R0,??DataTable62  ;; ??npos
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   003090E5           LDR      R3,[R0, #+0]
   \   00000100   0D10A0E1           MOV      R1,SP
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   ........           _BLF     ??assign,??assign??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   0D00A0E1           MOV      R0,SP
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
    814              return (PROStatus1);
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   1CD08DE2           ADD      SP,SP,#+28
   \   00000124   ........           B        ?Subroutine50
    815          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine50:
   \   00000000   F047BDE8           POP      {R4-R10,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine50_0:
   \   00000008   ........           DC32     `?<Constant {{(AlarmBasic *)0, {EnableNoChange,`
   \   0000000C   ........           DC32     `?<Constant {{(AlarmBasic *)0, {EnableNoChange,_1`
   \   00000010   ........           DC32     `?<Constant {{(AlarmBasic *)0, {EnableNoChange,_2`
    816          

   \                                 In segment CODE, align 4, keep-with-next
    817          int PROTankPressure::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   24509DE5           LDR      R5,[SP, #+36]
   \   00000008   28609DE5           LDR      R6,[SP, #+40]
   \   0000000C   0270A0E1           MOV      R7,R2
   \   00000010   0340A0E1           MOV      R4,R3
    818              int Status = GETVAL_NO_ERR;
   \   00000014   0080A0E3           MOV      R8,#+0
    819          
    820              //HasPressure = true;
    821              //IsNewData = true;
    822              switch ( ValueId ) {
   \   00000018   582FA0E3           MOV      R2,#+352
   \   0000001C   009092E7           LDR      R9,[R2, +R0]
   \   00000020   00E0A0E3           MOV      LR,#+0
   \   00000024   400E51E3           CMP      R1,#+1024
   \   00000028   2FA0A013           MOVNE    R10,#+47
   \   0000002C   40AE8A13           ORRNE    R10,R10,#0x400
   \   00000030   0A005111           CMPNE    R1,R10
   \   00000034   6D00000A           BEQ      ??GetValue_3
   \   00000038   10A08AE3           ORR      R10,R10,#0x10
   \   0000003C   0A0051E1           CMP      R1,R10
   \   00000040   0701000A           BEQ      ??GetValue_4
   \   00000044   0AA08AE2           ADD      R10,R10,#+10
   \   00000048   0A0051E1           CMP      R1,R10
   \   0000004C   1401000A           BEQ      ??GetValue_5
   \   00000050   10A08AE3           ORR      R10,R10,#0x10
   \   00000054   0A0051E1           CMP      R1,R10
   \   00000058   1E01000A           BEQ      ??GetValue_6
   \   0000005C   89AD82E2           ADD      R10,R2,#+8768
   \   00000060   0A0051E1           CMP      R1,R10
   \   00000064   01A08A13           ORRNE    R10,R10,#0x1
   \   00000068   0A005111           CMPNE    R1,R10
   \   0000006C   02A08A13           ORRNE    R10,R10,#0x2
   \   00000070   0A005111           CMPNE    R1,R10
   \   00000074   01A08A12           ADDNE    R10,R10,#+1
   \   00000078   0A005111           CMPNE    R1,R10
   \   0000007C   02A08A13           ORRNE    R10,R10,#0x2
   \   00000080   0A005111           CMPNE    R1,R10
   \   00000084   01A08A13           ORRNE    R10,R10,#0x1
   \   00000088   0A005111           CMPNE    R1,R10
   \   0000008C   02A08A12           ADDNE    R10,R10,#+2
   \   00000090   0A005111           CMPNE    R1,R10
   \   00000094   01A08A12           ADDNE    R10,R10,#+1
   \   00000098   0A005111           CMPNE    R1,R10
   \   0000009C   01A08A13           ORRNE    R10,R10,#0x1
   \   000000A0   0A005111           CMPNE    R1,R10
   \   000000A4   01A08A12           ADDNE    R10,R10,#+1
   \   000000A8   0A005111           CMPNE    R1,R10
   \   000000AC   01A08A13           ORRNE    R10,R10,#0x1
   \   000000B0   0A005111           CMPNE    R1,R10
   \   000000B4   01A08A12           ADDNE    R10,R10,#+1
   \   000000B8   0A005111           CMPNE    R1,R10
   \   000000BC   01A08A13           ORRNE    R10,R10,#0x1
   \   000000C0   0A005111           CMPNE    R1,R10
   \   000000C4   01A08A12           ADDNE    R10,R10,#+1
   \   000000C8   0A005111           CMPNE    R1,R10
   \   000000CC   01A08A13           ORRNE    R10,R10,#0x1
   \   000000D0   0A005111           CMPNE    R1,R10
   \   000000D4   01A08A12           ADDNE    R10,R10,#+1
   \   000000D8   0A005111           CMPNE    R1,R10
   \   000000DC   01A08A13           ORRNE    R10,R10,#0x1
   \   000000E0   0A005111           CMPNE    R1,R10
   \   000000E4   01A08A12           ADDNE    R10,R10,#+1
   \   000000E8   0A005111           CMPNE    R1,R10
   \   000000EC   01A08A13           ORRNE    R10,R10,#0x1
   \   000000F0   0A005111           CMPNE    R1,R10
   \   000000F4   01A08A12           ADDNE    R10,R10,#+1
   \   000000F8   0A005111           CMPNE    R1,R10
   \   000000FC   01A08A13           ORRNE    R10,R10,#0x1
   \   00000100   0A005111           CMPNE    R1,R10
   \   00000104   01A08A12           ADDNE    R10,R10,#+1
   \   00000108   0A005111           CMPNE    R1,R10
   \   0000010C   01A08A13           ORRNE    R10,R10,#0x1
   \   00000110   0A005111           CMPNE    R1,R10
   \   00000114   01A08A12           ADDNE    R10,R10,#+1
   \   00000118   0A005111           CMPNE    R1,R10
   \   0000011C   01A08A13           ORRNE    R10,R10,#0x1
   \   00000120   0A005111           CMPNE    R1,R10
   \   00000124   01A08A12           ADDNE    R10,R10,#+1
   \   00000128   0A005111           CMPNE    R1,R10
   \   0000012C   01A08A13           ORRNE    R10,R10,#0x1
   \   00000130   0A005111           CMPNE    R1,R10
   \   00000134   01A08A12           ADDNE    R10,R10,#+1
   \   00000138   0A005111           CMPNE    R1,R10
   \   0000013C   01A08A13           ORRNE    R10,R10,#0x1
   \   00000140   0A005111           CMPNE    R1,R10
   \   00000144   8F0D5113           CMPNE    R1,#+9152
   \   00000148   02A08A12           ADDNE    R10,R10,#+2
   \   0000014C   0A005111           CMPNE    R1,R10
   \   00000150   01A08A12           ADDNE    R10,R10,#+1
   \   00000154   0A005111           CMPNE    R1,R10
   \   00000158   3200000A           BEQ      ??GetValue_7
   \   0000015C   02A08AE2           ADD      R10,R10,#+2
   \   00000160   0A0051E1           CMP      R1,R10
   \   00000164   EB00000A           BEQ      ??GetValue_8
   \   00000168   01A08AE3           ORR      R10,R10,#0x1
   \   0000016C   0A0051E1           CMP      R1,R10
   \   00000170   01A08A12           ADDNE    R10,R10,#+1
   \   00000174   0A005111           CMPNE    R1,R10
   \   00000178   01A08A13           ORRNE    R10,R10,#0x1
   \   0000017C   0A005111           CMPNE    R1,R10
   \   00000180   01A08A12           ADDNE    R10,R10,#+1
   \   00000184   0A005111           CMPNE    R1,R10
   \   00000188   01A08A13           ORRNE    R10,R10,#0x1
   \   0000018C   0A005111           CMPNE    R1,R10
   \   00000190   01A08A12           ADDNE    R10,R10,#+1
   \   00000194   0A005111           CMPNE    R1,R10
   \   00000198   01A08A13           ORRNE    R10,R10,#0x1
   \   0000019C   0A005111           CMPNE    R1,R10
   \   000001A0   01A08A12           ADDNE    R10,R10,#+1
   \   000001A4   0A005111           CMPNE    R1,R10
   \   000001A8   01A08A13           ORRNE    R10,R10,#0x1
   \   000001AC   0A005111           CMPNE    R1,R10
   \   000001B0   01A08A12           ADDNE    R10,R10,#+1
   \   000001B4   0A005111           CMPNE    R1,R10
   \   000001B8   01A08A13           ORRNE    R10,R10,#0x1
   \   000001BC   0A005111           CMPNE    R1,R10
   \   000001C0   01A08A12           ADDNE    R10,R10,#+1
   \   000001C4   0A005111           CMPNE    R1,R10
   \   000001C8   01A08A13           ORRNE    R10,R10,#0x1
   \   000001CC   0A005111           CMPNE    R1,R10
   \   000001D0   01A08A12           ADDNE    R10,R10,#+1
   \   000001D4   0A005111           CMPNE    R1,R10
   \   000001D8   01A08A13           ORRNE    R10,R10,#0x1
   \   000001DC   0A005111           CMPNE    R1,R10
   \   000001E0   01A08A12           ADDNE    R10,R10,#+1
   \   000001E4   0A005111           CMPNE    R1,R10
   \   000001E8   0E00000A           BEQ      ??GetValue_7
   \   000001EC   CE0000EA           B        ??GetValue_9
    823              case SVT_TP:
    824              case SVT_PRESSURE:
    825                  DecPnt     = 1;
   \                     ??GetValue_3:
   \   000001F0   0110A0E3           MOV      R1,#+1
   \   000001F4   001085E5           STR      R1,[R5, #+0]
    826                  Unit       = PRESSURE_UNIT1;
   \   000001F8   0610A0E3           MOV      R1,#+6
   \   000001FC   001086E5           STR      R1,[R6, #+0]
    827                  if ( HasPressure && IsNewData ) {
   \   00000200   5811D0E5           LDRB     R1,[R0, #+344]
   \   00000204   000051E3           CMP      R1,#+0
   \   00000208   E010D015           LDRBNE   R1,[R0, #+224]
   \   0000020C   00005113           CMPNE    R1,#+0
   \   00000210   0200000A           BEQ      ??GetValue_10
    828                      MyRetValue = Pressure;
   \   00000214   6C0190E5           LDR      R0,[R0, #+364]
   \                     ??GetValue_11:
   \   00000218   000084E5           STR      R0,[R4, #+0]
   \   0000021C   C80000EA           B        ??GetValue_12
    829                  } else {
    830                      Status = GETVAL_FLOAT_NOT_LEGAL;
   \                     ??GetValue_10:
   \   00000220   0580A0E3           MOV      R8,#+5
   \   00000224   C60000EA           B        ??GetValue_12
    831                  }
    832                  break;
    833              case SVT_HI_PRESS_LIMIT         :
    834              case SVT_LO_PRESS_LIMIT         :
    835              case SVT_HI_PRESS_VAC_LIMIT     :
    836              case SVT_LO_PRESS_VAC_LIMIT     :
    837              case SVT_HI_IGP_LIMIT           :
    838              case SVT_LO_IGP_LIMIT           :
    839              case SVT_HI_VAP_RET_LIMIT       :
    840              case SVT_LO_VAP_RET_LIMIT       :
    841              case SVT_XTRA_HI_PRESS_LIMIT1   :
    842              case SVT_XTRA_LO_PRESS_LIMIT1   :
    843              case SVT_XTRA_HI_PRESS_LIMIT2   :
    844              case SVT_XTRA_LO_PRESS_LIMIT2   :
    845              case SVT_HI_PRESS_VAC_VALUE     :
    846              case SVT_LO_PRESS_VAC_VALUE     :
    847              case SVT_HI_PRESS_VALUE         :
    848              case SVT_LO_PRESS_VALUE         :
    849              case SVT_HI_IGP_VALUE           :
    850              case SVT_LO_IGP_VALUE           :
    851              case SVT_HI_VAP_RET_VALUE       :
    852              case SVT_LO_VAP_RET_VALUE       :
    853              case SVT_XTRA_HI_PRESS_VALUE1   :
    854              case SVT_XTRA_LO_PRESS_VALUE1   :
    855              case SVT_XTRA_HI_PRESS_VALUE2   :
    856              case SVT_XTRA_LO_PRESS_VALUE2   :
    857          
    858              case SVT_HI_PRESS_STATE         :
    859              case SVT_LO_PRESS_STATE         :
    860              case SVT_HI_PRESS_VAC_STATE     :
    861              case SVT_LO_PRESS_VAC_STATE     :
    862              case SVT_HI_IGP_STATE           :
    863              case SVT_LO_IGP_STATE           :
    864              case SVT_HI_VAP_RET_STATE       :
    865              case SVT_LO_VAP_RET_STATE       :
    866              case SVT_XTRA_HI_PRESS_STATE1   :
    867              case SVT_XTRA_LO_PRESS_STATE1   :
    868              case SVT_XTRA_HI_PRESS_STATE2   :
    869              case SVT_XTRA_LO_PRESS_STATE2   :
    870          
    871          
    872              case SVT_HI_PRESS_ENABLE        :
    873              case SVT_LO_PRESS_ENABLE        :
    874              case SVT_HI_PRESS_VAC_ENABLE    :
    875              case SVT_LO_PRESS_VAC_ENABLE    :
    876              case SVT_HI_VAP_RET_ENABLE      :
    877              case SVT_HI_IGP_ENABLE          :
    878              case SVT_LO_IGP_ENABLE          :
    879              case SVT_LO_VAP_RET_ENABLE      :
    880              case SVT_XTRA_HI_PRESS_ENABLE1  :
    881              case SVT_XTRA_LO_PRESS_ENABLE1  :
    882              case SVT_XTRA_HI_PRESS_ENABLE2  :
    883              case SVT_XTRA_LO_PRESS_ENABLE2  :
    884                  {
    885                      AlarmBasic *AlPtr = NULL;
    886                      int        ValKey = SVT_NOT_DEFINED;
   \                     ??GetValue_7:
   \   00000228   982190E5           LDR      R2,[R0, #+408]
   \   0000022C   A03190E5           LDR      R3,[R0, #+416]
   \   00000230   00C0A0E3           MOV      R12,#+0
   \   00000234   3E70A0E3           MOV      R7,#+62
   \   00000238   8C7D87E3           ORR      R7,R7,#0x2300
   \   0000023C   0C80C7E3           BIC      R8,R7,#0xC
   \   00000240   059087E2           ADD      R9,R7,#+5
   \   00000244   0BA047E2           SUB      R10,R7,#+11
   \   00000248   A01041E2           SUB      R1,R1,#+160
   \   0000024C   8C1D41E2           SUB      R1,R1,#+8960
   \   00000250   340051E3           CMP      R1,#+52
   \   00000254   7300008A           BHI      ??GetValue_13
   \   00000258   01BF8FE2           ADR      R11,??GetValue_1
   \   0000025C   01B0DBE7           LDRB     R11,[R11, R1]
   \   00000260   0BF18FE0           ADD      PC,PC,R11, LSL #+2
   \                     ??GetValue_1:
   \   00000264   0D187010           DC8      +13,+24,+112,+16
   \   00000268   1A70161E           DC8      +26,+112,+22,+30
   \   0000026C   70131C20           DC8      +112,+19,+28,+32
   \   00000270   28222A26           DC8      +40,+34,+42,+38
   \   00000274   2E242C30           DC8      +46,+36,+44,+48
   \   00000278   38323A36           DC8      +56,+50,+58,+54
   \   0000027C   3E343C40           DC8      +62,+52,+60,+64
   \   00000280   48424A46           DC8      +72,+66,+74,+70
   \   00000284   4E444C70           DC8      +78,+68,+76,+112
   \   00000288   70505852           DC8      +112,+80,+88,+82
   \   0000028C   5A565E54           DC8      +90,+86,+94,+84
   \   00000290   5C606862           DC8      +92,+96,+104,+98
   \   00000294   6A666E64           DC8      +106,+102,+110,+100
   \   00000298   6C000000           DC8      +108,+0,+0,+0
    887                      switch ( ValueId ) {
    888                      case SVT_HI_PRESS_ENABLE       :
    889                          AlPtr = (AlarmBasic *)HighPressurePtr;
   \                     ??GetValue_14:
   \   0000029C   74E190E5           LDR      LR,[R0, #+372]
    890                          ValKey = SVT_AL_ENABLE;
   \                     ??GetValue_15:
   \   000002A0   07C0A0E1           MOV      R12,R7
   \   000002A4   5F0000EA           B        ??GetValue_13
    891                          break;
    892                      case SVT_HI_PRESS_LIMIT        :
    893                          AlPtr = (AlarmBasic *)HighPressurePtr;
   \                     ??GetValue_16:
   \   000002A8   74E190E5           LDR      LR,[R0, #+372]
    894                          ValKey = SVT_AL_LIMIT;
   \                     ??GetValue_17:
   \   000002AC   08C0A0E1           MOV      R12,R8
   \   000002B0   5C0000EA           B        ??GetValue_13
    895                          break;
    896                      case SVT_HI_PRESS_STATE        :
    897                          AlPtr = (AlarmBasic *)HighPressurePtr;
   \                     ??GetValue_18:
   \   000002B4   74E190E5           LDR      LR,[R0, #+372]
    898                          ValKey = SVT_AL_STATE;
   \                     ??GetValue_19:
   \   000002B8   09C0A0E1           MOV      R12,R9
   \   000002BC   590000EA           B        ??GetValue_13
    899                          break;
    900                      case SVT_HI_PRESS_VALUE        :
    901                          AlPtr = (AlarmBasic *)HighPressurePtr;
   \                     ??GetValue_20:
   \   000002C0   74E190E5           LDR      LR,[R0, #+372]
    902                          ValKey = SVT_AL_VALUE;
   \   000002C4   560000EA           B        ??GetValue_21
    903                          break;
    904                      case SVT_LO_PRESS_ENABLE       :
    905                          AlPtr = (AlarmBasic *)LowPressurePtr;
   \                     ??GetValue_22:
   \   000002C8   78E190E5           LDR      LR,[R0, #+376]
    906                          ValKey = SVT_AL_ENABLE;
   \   000002CC   F3FFFFEA           B        ??GetValue_15
    907                          break;
    908                      case SVT_LO_PRESS_LIMIT        :
    909                          AlPtr = (AlarmBasic *)LowPressurePtr;
   \                     ??GetValue_23:
   \   000002D0   78E190E5           LDR      LR,[R0, #+376]
    910                          ValKey = SVT_AL_LIMIT;
   \   000002D4   F4FFFFEA           B        ??GetValue_17
    911                          break;
    912                      case SVT_LO_PRESS_STATE        :
    913                          AlPtr = (AlarmBasic *)LowPressurePtr;
   \                     ??GetValue_24:
   \   000002D8   78E190E5           LDR      LR,[R0, #+376]
    914                          ValKey = SVT_AL_STATE;
   \   000002DC   F5FFFFEA           B        ??GetValue_19
    915                          break;
    916                      case SVT_LO_PRESS_VALUE        :
    917                          AlPtr = (AlarmBasic *)LowPressurePtr;
   \                     ??GetValue_25:
   \   000002E0   78E190E5           LDR      LR,[R0, #+376]
    918                          ValKey = SVT_AL_VALUE;
   \   000002E4   4E0000EA           B        ??GetValue_21
    919                          break;
    920                      case SVT_HI_PRESS_VAC_ENABLE  :
    921                          AlPtr = (AlarmBasic *)HighPressVacPtr;
   \                     ??GetValue_26:
   \   000002E8   7CE190E5           LDR      LR,[R0, #+380]
    922                          ValKey = SVT_AL_ENABLE;
   \   000002EC   EBFFFFEA           B        ??GetValue_15
    923                          break;
    924                      case SVT_HI_PRESS_VAC_LIMIT   :
    925                          AlPtr = (AlarmBasic *)HighPressVacPtr;
   \                     ??GetValue_27:
   \   000002F0   7CE190E5           LDR      LR,[R0, #+380]
    926                          ValKey = SVT_AL_LIMIT;
   \   000002F4   ECFFFFEA           B        ??GetValue_17
    927                          break;
    928                      case SVT_HI_PRESS_VAC_STATE   :
    929                          AlPtr = (AlarmBasic *)HighPressVacPtr;
   \                     ??GetValue_28:
   \   000002F8   7CE190E5           LDR      LR,[R0, #+380]
    930                          ValKey = SVT_AL_STATE;
   \   000002FC   EDFFFFEA           B        ??GetValue_19
    931                          break;
    932                      case SVT_HI_PRESS_VAC_VALUE   :
    933                          AlPtr = (AlarmBasic *)HighPressVacPtr;
   \                     ??GetValue_29:
   \   00000300   7CE190E5           LDR      LR,[R0, #+380]
    934                          ValKey = SVT_AL_VALUE;
   \   00000304   460000EA           B        ??GetValue_21
    935                          break;
    936                      case SVT_LO_PRESS_VAC_ENABLE  :
    937                          AlPtr = (AlarmBasic *)LowPressVacPtr;
   \                     ??GetValue_30:
   \   00000308   80E190E5           LDR      LR,[R0, #+384]
    938                          ValKey = SVT_AL_ENABLE;
   \   0000030C   E3FFFFEA           B        ??GetValue_15
    939                          break;
    940                      case SVT_LO_PRESS_VAC_LIMIT   :
    941                          AlPtr = (AlarmBasic *)LowPressVacPtr;
   \                     ??GetValue_31:
   \   00000310   80E190E5           LDR      LR,[R0, #+384]
    942                          ValKey = SVT_AL_LIMIT;  break;
   \   00000314   E4FFFFEA           B        ??GetValue_17
    943                      case SVT_LO_PRESS_VAC_STATE   :
    944                          AlPtr = (AlarmBasic *)LowPressVacPtr;
   \                     ??GetValue_32:
   \   00000318   80E190E5           LDR      LR,[R0, #+384]
    945                          ValKey = SVT_AL_STATE;  break;
   \   0000031C   E5FFFFEA           B        ??GetValue_19
    946                      case SVT_LO_PRESS_VAC_VALUE   :
    947                          AlPtr = (AlarmBasic *)LowPressVacPtr;
   \                     ??GetValue_33:
   \   00000320   80E190E5           LDR      LR,[R0, #+384]
    948                          ValKey = SVT_AL_VALUE;
   \   00000324   3E0000EA           B        ??GetValue_21
    949                          break;
    950                      case SVT_HI_IGP_ENABLE  :
    951                          AlPtr = (AlarmBasic *)HighIGPPtr;
   \                     ??GetValue_34:
   \   00000328   84E190E5           LDR      LR,[R0, #+388]
    952                          ValKey = SVT_AL_ENABLE;
   \   0000032C   DBFFFFEA           B        ??GetValue_15
    953                          break;
    954                      case SVT_HI_IGP_LIMIT   :
    955                          AlPtr = (AlarmBasic *)HighIGPPtr;
   \                     ??GetValue_35:
   \   00000330   84E190E5           LDR      LR,[R0, #+388]
    956          				ValKey = SVT_AL_LIMIT;
   \   00000334   DCFFFFEA           B        ??GetValue_17
    957                          break;
    958                      case SVT_HI_IGP_STATE   :
    959                          AlPtr = (AlarmBasic *)HighIGPPtr;
   \                     ??GetValue_36:
   \   00000338   84E190E5           LDR      LR,[R0, #+388]
    960                          ValKey = SVT_AL_STATE;
   \   0000033C   DDFFFFEA           B        ??GetValue_19
    961                          break;
    962                      case SVT_HI_IGP_VALUE   :
    963                          AlPtr = (AlarmBasic *)HighIGPPtr;
   \                     ??GetValue_37:
   \   00000340   84E190E5           LDR      LR,[R0, #+388]
    964                          ValKey = SVT_AL_VALUE;
   \   00000344   360000EA           B        ??GetValue_21
    965                          break;
    966                      case SVT_LO_IGP_ENABLE  :
    967                          AlPtr = (AlarmBasic *)LowIGPPtr;
   \                     ??GetValue_38:
   \   00000348   88E190E5           LDR      LR,[R0, #+392]
    968                          ValKey = SVT_AL_ENABLE;
   \   0000034C   D3FFFFEA           B        ??GetValue_15
    969                          break;
    970                      case SVT_LO_IGP_LIMIT   :
    971                          AlPtr = (AlarmBasic *)LowIGPPtr;
   \                     ??GetValue_39:
   \   00000350   88E190E5           LDR      LR,[R0, #+392]
    972                          ValKey = SVT_AL_LIMIT;
   \   00000354   D4FFFFEA           B        ??GetValue_17
    973                          break;
    974                      case SVT_LO_IGP_STATE   :
    975                          AlPtr = (AlarmBasic *)LowIGPPtr;
   \                     ??GetValue_40:
   \   00000358   88E190E5           LDR      LR,[R0, #+392]
    976                          ValKey = SVT_AL_STATE;
   \   0000035C   D5FFFFEA           B        ??GetValue_19
    977                          break;
    978                      case SVT_LO_IGP_VALUE   :
    979                          AlPtr = (AlarmBasic *)LowIGPPtr;
   \                     ??GetValue_41:
   \   00000360   88E190E5           LDR      LR,[R0, #+392]
    980                          ValKey = SVT_AL_VALUE;
   \   00000364   2E0000EA           B        ??GetValue_21
    981                          break;
    982                      case SVT_HI_VAP_RET_ENABLE  :
    983                          AlPtr = (AlarmBasic *)HighVapRetPtr;
   \                     ??GetValue_42:
   \   00000368   8CE190E5           LDR      LR,[R0, #+396]
    984                          ValKey = SVT_AL_ENABLE;
   \   0000036C   CBFFFFEA           B        ??GetValue_15
    985                          break;
    986                      case SVT_HI_VAP_RET_LIMIT   :
    987                          AlPtr = (AlarmBasic *)HighVapRetPtr;
   \                     ??GetValue_43:
   \   00000370   8CE190E5           LDR      LR,[R0, #+396]
    988                          ValKey = SVT_AL_LIMIT;
   \   00000374   CCFFFFEA           B        ??GetValue_17
    989                          break;
    990                      case SVT_HI_VAP_RET_STATE   :
    991                          AlPtr = (AlarmBasic *)HighVapRetPtr;
   \                     ??GetValue_44:
   \   00000378   8CE190E5           LDR      LR,[R0, #+396]
    992                          ValKey = SVT_AL_STATE;
   \   0000037C   CDFFFFEA           B        ??GetValue_19
    993                          break;
    994                      case SVT_HI_VAP_RET_VALUE   :
    995                          AlPtr = (AlarmBasic *)HighVapRetPtr;
   \                     ??GetValue_45:
   \   00000380   8CE190E5           LDR      LR,[R0, #+396]
    996                          ValKey = SVT_AL_VALUE;
   \   00000384   260000EA           B        ??GetValue_21
    997                          break;
    998                      case SVT_LO_VAP_RET_ENABLE  :
    999                          AlPtr = (AlarmBasic *)LowVapRetPtr;
   \                     ??GetValue_46:
   \   00000388   90E190E5           LDR      LR,[R0, #+400]
   1000                          ValKey = SVT_AL_ENABLE;
   \   0000038C   C3FFFFEA           B        ??GetValue_15
   1001                          break;
   1002                      case SVT_LO_VAP_RET_LIMIT   :
   1003                          AlPtr = (AlarmBasic *)LowVapRetPtr;
   \                     ??GetValue_47:
   \   00000390   90E190E5           LDR      LR,[R0, #+400]
   1004                          ValKey = SVT_AL_LIMIT;
   \   00000394   C4FFFFEA           B        ??GetValue_17
   1005                          break;
   1006                      case SVT_LO_VAP_RET_STATE   :
   1007                          AlPtr = (AlarmBasic *)LowVapRetPtr;
   \                     ??GetValue_48:
   \   00000398   90E190E5           LDR      LR,[R0, #+400]
   1008                          ValKey = SVT_AL_STATE;
   \   0000039C   C5FFFFEA           B        ??GetValue_19
   1009                          break;
   1010                      case SVT_LO_VAP_RET_VALUE   :
   1011                          AlPtr = (AlarmBasic *)LowVapRetPtr;
   \                     ??GetValue_49:
   \   000003A0   90E190E5           LDR      LR,[R0, #+400]
   1012                          ValKey = SVT_AL_VALUE;
   \   000003A4   1E0000EA           B        ??GetValue_21
   1013                          break;
   1014                      case SVT_XTRA_HI_PRESS_ENABLE1  :
   1015                          AlPtr = (AlarmBasic *)IntHighPressurePtr1;
   \                     ??GetValue_50:
   \   000003A8   94E190E5           LDR      LR,[R0, #+404]
   1016                          ValKey = SVT_AL_ENABLE;
   \   000003AC   BBFFFFEA           B        ??GetValue_15
   1017                          break;
   1018                      case SVT_XTRA_HI_PRESS_LIMIT1   :
   1019                          AlPtr = (AlarmBasic *)IntHighPressurePtr1;
   \                     ??GetValue_51:
   \   000003B0   94E190E5           LDR      LR,[R0, #+404]
   1020                          ValKey = SVT_AL_LIMIT;
   \   000003B4   BCFFFFEA           B        ??GetValue_17
   1021                          break;
   1022                      case SVT_XTRA_HI_PRESS_STATE1   :
   1023                          AlPtr = (AlarmBasic *)IntHighPressurePtr1;
   \                     ??GetValue_52:
   \   000003B8   94E190E5           LDR      LR,[R0, #+404]
   1024                          ValKey = SVT_AL_STATE;
   \   000003BC   BDFFFFEA           B        ??GetValue_19
   1025                          break;
   1026                      case SVT_XTRA_HI_PRESS_VALUE1   :
   1027                          AlPtr = (AlarmBasic *)IntHighPressurePtr1;
   \                     ??GetValue_53:
   \   000003C0   94E190E5           LDR      LR,[R0, #+404]
   1028                          ValKey = SVT_AL_VALUE;
   \   000003C4   160000EA           B        ??GetValue_21
   1029                          break;
   1030                      case SVT_XTRA_LO_PRESS_ENABLE1  :
   1031                          AlPtr = (AlarmBasic *)IntLowPressurePtr1;
   \                     ??GetValue_54:
   \   000003C8   9CE190E5           LDR      LR,[R0, #+412]
   1032                          ValKey = SVT_AL_ENABLE;
   \   000003CC   B3FFFFEA           B        ??GetValue_15
   1033                          break;
   1034                      case SVT_XTRA_LO_PRESS_LIMIT1   :
   1035                          AlPtr = (AlarmBasic *)IntLowPressurePtr1;
   \                     ??GetValue_55:
   \   000003D0   9CE190E5           LDR      LR,[R0, #+412]
   1036                          ValKey = SVT_AL_LIMIT;
   \   000003D4   B4FFFFEA           B        ??GetValue_17
   1037                          break;
   1038                      case SVT_XTRA_LO_PRESS_STATE1   :
   1039                          AlPtr = (AlarmBasic *)IntLowPressurePtr1;
   \                     ??GetValue_56:
   \   000003D8   9CE190E5           LDR      LR,[R0, #+412]
   1040                          ValKey = SVT_AL_STATE;
   \   000003DC   B5FFFFEA           B        ??GetValue_19
   1041                          break;
   1042                      case SVT_XTRA_LO_PRESS_VALUE1   :
   1043                          AlPtr = (AlarmBasic *)IntLowPressurePtr1;
   \                     ??GetValue_57:
   \   000003E0   9CE190E5           LDR      LR,[R0, #+412]
   1044                          ValKey = SVT_AL_VALUE;
   \   000003E4   0E0000EA           B        ??GetValue_21
   1045                          break;
   1046                      case SVT_XTRA_HI_PRESS_ENABLE2  :
   1047                          AlPtr = (AlarmBasic *)IntHighPressurePtr2;
   \                     ??GetValue_58:
   \   000003E8   02E0A0E1           MOV      LR,R2
   1048                          ValKey = SVT_AL_ENABLE;
   \   000003EC   ABFFFFEA           B        ??GetValue_15
   1049                          break;
   1050                      case SVT_XTRA_HI_PRESS_LIMIT2   :
   1051                          AlPtr = (AlarmBasic *)IntHighPressurePtr2;
   \                     ??GetValue_59:
   \   000003F0   02E0A0E1           MOV      LR,R2
   1052                          ValKey = SVT_AL_LIMIT;
   \   000003F4   ACFFFFEA           B        ??GetValue_17
   1053                          break;
   1054                      case SVT_XTRA_HI_PRESS_STATE2   :
   1055                          AlPtr = (AlarmBasic *)IntHighPressurePtr2;
   \                     ??GetValue_60:
   \   000003F8   02E0A0E1           MOV      LR,R2
   1056                          ValKey = SVT_AL_STATE;
   \   000003FC   ADFFFFEA           B        ??GetValue_19
   1057                          break;
   1058                      case SVT_XTRA_HI_PRESS_VALUE2   :
   1059                          AlPtr = (AlarmBasic *)IntHighPressurePtr2;
   \                     ??GetValue_61:
   \   00000400   02E0A0E1           MOV      LR,R2
   1060                          ValKey = SVT_AL_VALUE;
   \   00000404   060000EA           B        ??GetValue_21
   1061                          break;
   1062                      case SVT_XTRA_LO_PRESS_ENABLE2  :
   1063                          AlPtr = (AlarmBasic *)IntLowPressurePtr2;
   \                     ??GetValue_62:
   \   00000408   03E0A0E1           MOV      LR,R3
   1064                          ValKey = SVT_AL_ENABLE;
   \   0000040C   A3FFFFEA           B        ??GetValue_15
   1065                          break;
   1066                      case SVT_XTRA_LO_PRESS_LIMIT2   :
   1067                          AlPtr = (AlarmBasic *)IntLowPressurePtr2;
   \                     ??GetValue_63:
   \   00000410   03E0A0E1           MOV      LR,R3
   1068                          ValKey = SVT_AL_LIMIT;
   \   00000414   A4FFFFEA           B        ??GetValue_17
   1069                          break;
   1070                      case SVT_XTRA_LO_PRESS_STATE2   :
   1071                          AlPtr = (AlarmBasic *)IntLowPressurePtr2;
   \                     ??GetValue_64:
   \   00000418   03E0A0E1           MOV      LR,R3
   1072                          ValKey = SVT_AL_STATE;
   \   0000041C   A5FFFFEA           B        ??GetValue_19
   1073                          break;
   1074                      case SVT_XTRA_LO_PRESS_VALUE2   :
   1075                          AlPtr = (AlarmBasic *)IntLowPressurePtr2;
   \                     ??GetValue_65:
   \   00000420   03E0A0E1           MOV      LR,R3
   1076                          ValKey = SVT_AL_VALUE;
   \                     ??GetValue_21:
   \   00000424   0AC0A0E1           MOV      R12,R10
   1077                          break;
   1078                      }
   1079                      if ( AlPtr ) {
   \                     ??GetValue_13:
   \   00000428   00005EE3           CMP      LR,#+0
   \   0000042C   0A00000A           BEQ      ??GetValue_66
   1080                          Status = AlPtr->GetValue(ValKey, 0, MyRetValue,  DecPnt, Unit);
   \   00000430   40002DE9           PUSH     {R6}
   \   00000434   20002DE9           PUSH     {R5}
   \   00000438   0430A0E1           MOV      R3,R4
   \   0000043C   A4409EE5           LDR      R4,[LR, #+164]
   \   00000440   0020A0E3           MOV      R2,#+0
   \   00000444   244094E5           LDR      R4,[R4, #+36]
   \   00000448   0C10A0E1           MOV      R1,R12
   \   0000044C   0E00A0E1           MOV      R0,LR
   \   00000450   0FE0A0E1           MOV      LR,PC
   \   00000454   14FF2FE1           BX       R4
   \   00000458   370000EA           B        ??GetValue_67
   1081                      } else {
   1082                          Status = GETVAL_NOT_AVAILABLE;
   \                     ??GetValue_66:
   \   0000045C   0180A0E3           MOV      R8,#+1
   \   00000460   370000EA           B        ??GetValue_12
   1083                      }
   1084                  }
   1085                  break;
   1086              case SVT_TP_OFFSET : //EHSMark: Should add more TP_sensors in GUI???
   1087                  if ( !tankPressures.empty() ) {
   \                     ??GetValue_4:
   \   00000464   000082E0           ADD      R0,R2,R0
   \   00000468   ........           _BLF     ??empty,??empty??rA
   \   0000046C   000050E3           CMP      R0,#+0
   \   00000470   3300001A           BNE      ??GetValue_12
   1088                      Status = tankPressures[0]->GetValue(SVT_AI_OFFSET, Index, MyRetValue, DecPnt, Unit);
   \   00000474   008099E5           LDR      R8,[R9, #+0]
   \   00000478   40002DE9           PUSH     {R6}
   \   0000047C   20002DE9           PUSH     {R5}
   \   00000480   0430A0E1           MOV      R3,R4
   \   00000484   A44098E5           LDR      R4,[R8, #+164]
   \   00000488   0720A0E1           MOV      R2,R7
   \   0000048C   244094E5           LDR      R4,[R4, #+36]
   \   00000490   76108AE2           ADD      R1,R10,#+118
   \                     ??GetValue_68:
   \   00000494   0800A0E1           MOV      R0,R8
   \   00000498   0FE0A0E1           MOV      LR,PC
   \   0000049C   14FF2FE1           BX       R4
   \   000004A0   250000EA           B        ??GetValue_67
   1089                  }
   1090                  break;
   1091              case SVT_TP_GAIN :
   1092                  if ( !tankPressures.empty() ) {
   \                     ??GetValue_5:
   \   000004A4   000082E0           ADD      R0,R2,R0
   \   000004A8   ........           _BLF     ??empty,??empty??rA
   \   000004AC   000050E3           CMP      R0,#+0
   \   000004B0   2300001A           BNE      ??GetValue_12
   1093                      Status = tankPressures[0]->GetValue(SVT_AI_GAIN, Index, MyRetValue, DecPnt, Unit);
   \   000004B4   008099E5           LDR      R8,[R9, #+0]
   \   000004B8   40002DE9           PUSH     {R6}
   \   000004BC   20002DE9           PUSH     {R5}
   \   000004C0   0430A0E1           MOV      R3,R4
   \   000004C4   A44098E5           LDR      R4,[R8, #+164]
   \   000004C8   0720A0E1           MOV      R2,R7
   \   000004CC   244094E5           LDR      R4,[R4, #+36]
   \   000004D0   6B108AE2           ADD      R1,R10,#+107
   \   000004D4   EEFFFFEA           B        ??GetValue_68
   1094                  }
   1095                  break;
   1096              case SVT_TP_ENABLE:
   1097                  if ( !tankPressures.empty() ) {
   \                     ??GetValue_6:
   \   000004D8   000082E0           ADD      R0,R2,R0
   \   000004DC   ........           _BLF     ??empty,??empty??rA
   \   000004E0   000050E3           CMP      R0,#+0
   \   000004E4   1600001A           BNE      ??GetValue_12
   1098                      Status = tankPressures[0]->GetValue(SVT_AI_ENABLE, Index, MyRetValue, DecPnt, Unit);
   \   000004E8   008099E5           LDR      R8,[R9, #+0]
   \   000004EC   40002DE9           PUSH     {R6}
   \   000004F0   20002DE9           PUSH     {R5}
   \   000004F4   0430A0E1           MOV      R3,R4
   \   000004F8   A44098E5           LDR      R4,[R8, #+164]
   \   000004FC   0720A0E1           MOV      R2,R7
   \   00000500   244094E5           LDR      R4,[R4, #+36]
   \   00000504   5A108AE2           ADD      R1,R10,#+90
   \   00000508   0800A0E1           MOV      R0,R8
   \   0000050C   0FE0A0E1           MOV      LR,PC
   \   00000510   14FF2FE1           BX       R4
   \   00000514   080000EA           B        ??GetValue_67
   1099                  }
   1100                  break;
   1101              case SVT_AL_LIMIT_TYPE_PRESS    :
   1102                  DecPnt     = 0;
   \                     ??GetValue_8:
   \   00000518   00E085E5           STR      LR,[R5, #+0]
   1103                  Unit       = NO_UNIT;
   \   0000051C   00E086E5           STR      LR,[R6, #+0]
   1104                  MyRetValue = float(VapourAlarmSet);
   \   00000520   7001D0E5           LDRB     R0,[R0, #+368]
   \   00000524   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000528   3AFFFFEA           B        ??GetValue_11
   1105                  break;
   1106              default:
   1107                  Status = PROXRefObject::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit);
   \                     ??GetValue_9:
   \   0000052C   40002DE9           PUSH     {R6}
   \   00000530   20002DE9           PUSH     {R5}
   \   00000534   0720A0E1           MOV      R2,R7
   \   00000538   ........           _BLF     ??GetValue_2,??GetValue??rA
   \                     ??GetValue_67:
   \   0000053C   0080A0E1           MOV      R8,R0
   \   00000540   08D08DE2           ADD      SP,SP,#+8
   1108                  break;
   1109              }
   1110              return (Status);
   \                     ??GetValue_12:
   \   00000544   0800A0E1           MOV      R0,R8
   \   00000548   ........           B        ?Subroutine48
   1111          }
   1112          

   \                                 In segment CODE, align 4, keep-with-next
   1113          int PROTankPressure::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   A8D04DE2           SUB      SP,SP,#+168
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0350A0E1           MOV      R5,R3
   1114              int Status = GETVAL_NO_ERR;
   \   00000014   0040A0E3           MOV      R4,#+0
   1115              switch ( ValueId ) {
   \   00000018   460E51E3           CMP      R1,#+1120
   \   0000001C   7100000A           BEQ      ??GetStringValue_3
   \   00000020   1920A0E3           MOV      R2,#+25
   \   00000024   502E82E3           ORR      R2,R2,#0x500
   \   00000028   020051E1           CMP      R1,R2
   \   0000002C   0400000A           BEQ      ??GetStringValue_4
   \   00000030   C420A0E3           MOV      R2,#+196
   \   00000034   8C2D82E3           ORR      R2,R2,#0x2300
   \   00000038   020051E1           CMP      R1,R2
   \   0000003C   0600000A           BEQ      ??GetStringValue_5
   \   00000040   790000EA           B        ??GetStringValue_6
   1116              case SVT_PRO_STATUS:
   1117                  FindPROStatus(MyString);
   \                     ??GetStringValue_4:
   \   00000044   A42097E5           LDR      R2,[R7, #+164]
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   1C2092E5           LDR      R2,[R2, #+28]
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   12FF2FE1           BX       R2
   \   00000058   760000EA           B        ??GetStringValue_7
   1118                  break;
   1119              case SVT_AL_LIMIT_TYPE_PRESS    :
   1120                  switch ( VapourAlarmSet ) {
   \                     ??GetStringValue_5:
   \   0000005C   7001D7E5           LDRB     R0,[R7, #+368]
   \   00000060   050050E3           CMP      R0,#+5
   \   00000064   5D00008A           BHI      ??GetStringValue_8
   \   00000068   011F8FE2           ADR      R1,??GetStringValue_1
   \   0000006C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000070   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetStringValue_1:
   \   00000074   0114223E           DC8      +1,+20,+34,+62
   \   00000078   4B300000           DC8      +75,+48,+0,+0
   1121                  case pLimitAdjustable     :
   1122                      if ( hasExtraAlarm2 ) {
   \                     ??GetStringValue_9:
   \   0000007C   ........           LDR      R0,??Subroutine47_0  ;; ??hasExtraAlarm2
   \   00000080   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   E41FA003           MOVEQ    R1,#+912
   1123                          MyString = FindDictionaryWord(L_WORD1059); break; // Non-PO mode
   \   0000008C   2310A013           MOVNE    R1,#+35
   \   00000090   401E8113           ORRNE    R1,R1,#0x400
   \   00000094   0D00A0E1           MOV      R0,SP
   \   00000098   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000009C   ........           LDR      R0,??DataTable68  ;; ??npos
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   003090E5           LDR      R3,[R0, #+0]
   \   000000A8   0D10A0E1           MOV      R1,SP
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   ........           _BLF     ??assign,??assign??rA
   \   000000B4   0420A0E1           MOV      R2,R4
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   0D00A0E1           MOV      R0,SP
   \                     ??GetStringValue_10:
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   5B0000EA           B        ??GetStringValue_7
   1124                      } else {
   1125                          MyString = FindDictionaryWord(L_WORD912); break; // Adjustable
   1126                      }
   1127                  case pLimitPressVac       :
   1128                      MyString = FindDictionaryWord(L_WORD913); break;
   \                     ??GetStringValue_11:
   \   000000C8   9110A0E3           MOV      R1,#+145
   \   000000CC   C01F81E3           ORR      R1,R1,#0x300
   \   000000D0   1C008DE2           ADD      R0,SP,#+28
   \   000000D4   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000000D8   ........           LDR      R0,??DataTable68  ;; ??npos
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   003090E5           LDR      R3,[R0, #+0]
   \   000000E4   1C108DE2           ADD      R1,SP,#+28
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   ........           _BLF     ??assign,??assign??rA
   \   000000F0   0420A0E1           MOV      R2,R4
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   1C008DE2           ADD      R0,SP,#+28
   \   000000FC   EFFFFFEA           B        ??GetStringValue_10
   1129                  case pLimitVapourReturn   :
   1130                      MyString = FindDictionaryWord(L_WORD914); break;
   \                     ??GetStringValue_12:
   \   00000100   9210A0E3           MOV      R1,#+146
   \   00000104   C01F81E3           ORR      R1,R1,#0x300
   \   00000108   38008DE2           ADD      R0,SP,#+56
   \   0000010C   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000110   ........           LDR      R0,??DataTable68  ;; ??npos
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   003090E5           LDR      R3,[R0, #+0]
   \   0000011C   38108DE2           ADD      R1,SP,#+56
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   ........           _BLF     ??assign,??assign??rA
   \   00000128   0420A0E1           MOV      R2,R4
   \   0000012C   0110A0E3           MOV      R1,#+1
   \   00000130   38008DE2           ADD      R0,SP,#+56
   \   00000134   E1FFFFEA           B        ??GetStringValue_10
   1131                  case pLimitUndefined		:
   1132                      MyString = FindDictionaryWord(L_WORD858); break;
   \                     ??GetStringValue_13:
   \   00000138   5A10A0E3           MOV      R1,#+90
   \   0000013C   C01F81E3           ORR      R1,R1,#0x300
   \   00000140   54008DE2           ADD      R0,SP,#+84
   \   00000144   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   00000148   ........           LDR      R0,??DataTable68  ;; ??npos
   \   0000014C   0020A0E3           MOV      R2,#+0
   \   00000150   003090E5           LDR      R3,[R0, #+0]
   \   00000154   54108DE2           ADD      R1,SP,#+84
   \   00000158   0500A0E1           MOV      R0,R5
   \   0000015C   ........           _BLF     ??assign,??assign??rA
   \   00000160   0420A0E1           MOV      R2,R4
   \   00000164   0110A0E3           MOV      R1,#+1
   \   00000168   54008DE2           ADD      R0,SP,#+84
   \   0000016C   D3FFFFEA           B        ??GetStringValue_10
   1133                  case pLimitPOmode		:
   1134                      MyString = FindDictionaryWord(L_WORD1016); break;
   \                     ??GetStringValue_14:
   \   00000170   FE1FA0E3           MOV      R1,#+1016
   \   00000174   70008DE2           ADD      R0,SP,#+112
   \   00000178   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   0000017C   ........           LDR      R0,??DataTable68  ;; ??npos
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   003090E5           LDR      R3,[R0, #+0]
   \   00000188   70108DE2           ADD      R1,SP,#+112
   \   0000018C   0500A0E1           MOV      R0,R5
   \   00000190   ........           _BLF     ??assign,??assign??rA
   \   00000194   0420A0E1           MOV      R2,R4
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   70008DE2           ADD      R0,SP,#+112
   \   000001A0   C6FFFFEA           B        ??GetStringValue_10
   1135                  case pLimitIGPmode		:
   1136                      MyString = FindDictionaryWord(L_WORD1103); break;
   \                     ??GetStringValue_15:
   \   000001A4   4F10A0E3           MOV      R1,#+79
   \   000001A8   401E81E3           ORR      R1,R1,#0x400
   \   000001AC   8C008DE2           ADD      R0,SP,#+140
   \   000001B0   ........           _BLF     ??FindDictionaryWord,??FindDictionaryWord??rA
   \   000001B4   ........           LDR      R0,??DataTable68  ;; ??npos
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   003090E5           LDR      R3,[R0, #+0]
   \   000001C0   8C108DE2           ADD      R1,SP,#+140
   \   000001C4   0500A0E1           MOV      R0,R5
   \   000001C8   ........           _BLF     ??assign,??assign??rA
   \   000001CC   0420A0E1           MOV      R2,R4
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   8C008DE2           ADD      R0,SP,#+140
   \   000001D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001DC   150000EA           B        ??GetStringValue_7
   1137                  default:
   1138                      Status = GETVAL_ERROR;
   \                     ??GetStringValue_8:
   \   000001E0   0440A0E3           MOV      R4,#+4
   \   000001E4   130000EA           B        ??GetStringValue_7
   1139                  }
   1140                  break;
   1141          
   1142              case SVT_TP_ENABLE_TEXT:
   1143                  if ( !tankPressures.empty() ) {
   \                     ??GetStringValue_3:
   \   000001E8   588FA0E3           MOV      R8,#+352
   \   000001EC   070088E0           ADD      R0,R8,R7
   \   000001F0   ........           _BLF     ??empty,??empty??rA
   \   000001F4   000050E3           CMP      R0,#+0
   \   000001F8   0E00001A           BNE      ??GetStringValue_7
   1144                      Status = tankPressures[0]->GetStringValue(SVT_AI_ENABLE_TEXT, Index, MyString);
   \   000001FC   070098E7           LDR      R0,[R8, +R7]
   \   00000200   0530A0E1           MOV      R3,R5
   \   00000204   004090E5           LDR      R4,[R0, #+0]
   \   00000208   0620A0E1           MOV      R2,R6
   \   0000020C   0400A0E1           MOV      R0,R4
   \   00000210   A44094E5           LDR      R4,[R4, #+164]
   \   00000214   B210A0E3           MOV      R1,#+178
   \   00000218   284094E5           LDR      R4,[R4, #+40]
   \   0000021C   401E81E3           ORR      R1,R1,#0x400
   \   00000220   0FE0A0E1           MOV      LR,PC
   \   00000224   14FF2FE1           BX       R4
   \   00000228   010000EA           B        ??GetStringValue_16
   1145                  }
   1146                  break;
   1147              default:
   1148                  Status = PROXRefObject::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_6:
   \   0000022C   0620A0E1           MOV      R2,R6
   \   00000230   ........           _BLF     ??GetStringValue_2,??GetStringValue??rA
   \                     ??GetStringValue_16:
   \   00000234   0040A0E1           MOV      R4,R0
   1149                  break;
   1150              }
   1151              return (Status);
   \                     ??GetStringValue_7:
   \   00000238   0400A0E1           MOV      R0,R4
   \   0000023C   A8D08DE2           ADD      SP,SP,#+168
   \   00000240                      REQUIRE ?Subroutine47
   \   00000240                      ;; // Fall through to label ?Subroutine47
   1152          }
   1153          
   1154          

   \                                 In segment CODE, align 4, keep-with-next
   1155          int PROTankPressure::GetBitValue(int ValueId, int Index, bool &MyBit) {
   \                     ??GetBitValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1156              int Status = GETVAL_NO_ERR;
   1157              switch ( ValueId ) {
   \   00000004   A0C041E2           SUB      R12,R1,#+160
   \   00000008   8CCD4CE2           SUB      R12,R12,#+8960
   \   0000000C   2E005CE3           CMP      R12,#+46
   \   00000010   4800008A           BHI      ??GetBitValue_4
   \   00000014   01EF8FE2           ADR      LR,??GetBitValue_1
   \   00000018   0CE0DEE7           LDRB     LR,[LR, R12]
   \   0000001C   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??GetBitValue_1:
   \   00000020   0B0B4545           DC8      +11,+11,+69,+69
   \   00000024   45454545           DC8      +69,+69,+69,+69
   \   00000028   4545450B           DC8      +69,+69,+69,+11
   \   0000002C   0B454545           DC8      +11,+69,+69,+69
   \   00000030   4545450B           DC8      +69,+69,+69,+11
   \   00000034   0B454545           DC8      +11,+69,+69,+69
   \   00000038   4545450B           DC8      +69,+69,+69,+11
   \   0000003C   0B454545           DC8      +11,+69,+69,+69
   \   00000040   45454545           DC8      +69,+69,+69,+69
   \   00000044   450B0B45           DC8      +69,+11,+11,+69
   \   00000048   45454545           DC8      +69,+69,+69,+69
   \   0000004C   450B0B00           DC8      +69,+11,+11,+0
   1158              case SVT_HI_PRESS_ENABLE        :
   1159              case SVT_LO_PRESS_ENABLE        :
   1160              case SVT_HI_PRESS_VAC_ENABLE    :
   1161              case SVT_LO_PRESS_VAC_ENABLE    :
   1162              case SVT_HI_IGP_ENABLE          :
   1163              case SVT_LO_IGP_ENABLE          :
   1164              case SVT_HI_VAP_RET_ENABLE      :
   1165              case SVT_LO_VAP_RET_ENABLE      :
   1166              case SVT_XTRA_HI_PRESS_ENABLE1  :
   1167              case SVT_XTRA_LO_PRESS_ENABLE1  :
   1168              case SVT_XTRA_HI_PRESS_ENABLE2  :
   1169              case SVT_XTRA_LO_PRESS_ENABLE2  :
   1170                  {
   1171                      AlarmBasic *AlPtr = NULL;
   \                     ??GetBitValue_5:
   \   00000050   00E0A0E3           MOV      LR,#+0
   1172                      int        ValKey = SVT_NOT_DEFINED;
   \   00000054   00C0A0E3           MOV      R12,#+0
   1173          
   1174                      switch ( ValueId ) {
   \   00000058   3E20A0E3           MOV      R2,#+62
   \   0000005C   8C2D82E3           ORR      R2,R2,#0x2300
   \   00000060   A01041E2           SUB      R1,R1,#+160
   \   00000064   8C1D41E2           SUB      R1,R1,#+8960
   \   00000068   2600008A           BHI      ??GetBitValue_6
   \   0000006C   014F8FE2           ADR      R4,??GetBitValue_2
   \   00000070   0140D4E7           LDRB     R4,[R4, R1]
   \   00000074   04F18FE0           ADD      PC,PC,R4, LSL #+2
   \                     ??GetBitValue_2:
   \   00000078   0B0D2323           DC8      +11,+13,+35,+35
   \   0000007C   23232323           DC8      +35,+35,+35,+35
   \   00000080   2323230F           DC8      +35,+35,+35,+15
   \   00000084   11232323           DC8      +17,+35,+35,+35
   \   00000088   23232313           DC8      +35,+35,+35,+19
   \   0000008C   15232323           DC8      +21,+35,+35,+35
   \   00000090   23232317           DC8      +35,+35,+35,+23
   \   00000094   19232323           DC8      +25,+35,+35,+35
   \   00000098   23232323           DC8      +35,+35,+35,+35
   \   0000009C   231B1D23           DC8      +35,+27,+29,+35
   \   000000A0   23232323           DC8      +35,+35,+35,+35
   \   000000A4   231F2100           DC8      +35,+31,+33,+0
   1175                      case SVT_HI_PRESS_ENABLE       :
   1176                          AlPtr = (AlarmBasic *)HighPressurePtr;
   \                     ??GetBitValue_7:
   \   000000A8   74E190E5           LDR      LR,[R0, #+372]
   1177                          ValKey = SVT_AL_ENABLE;
   \   000000AC   140000EA           B        ??GetBitValue_8
   1178                          break;
   1179                      case SVT_LO_PRESS_ENABLE       :
   1180                          AlPtr = (AlarmBasic *)LowPressurePtr;
   \                     ??GetBitValue_9:
   \   000000B0   78E190E5           LDR      LR,[R0, #+376]
   1181                          ValKey = SVT_AL_ENABLE;
   \   000000B4   120000EA           B        ??GetBitValue_8
   1182                          break;
   1183                      case SVT_HI_PRESS_VAC_ENABLE  :
   1184                          AlPtr = (AlarmBasic *)HighPressVacPtr;
   \                     ??GetBitValue_10:
   \   000000B8   7CE190E5           LDR      LR,[R0, #+380]
   1185                          ValKey = SVT_AL_ENABLE;
   \   000000BC   100000EA           B        ??GetBitValue_8
   1186                          break;
   1187                      case SVT_LO_PRESS_VAC_ENABLE  :
   1188                          AlPtr = (AlarmBasic *)LowPressVacPtr;
   \                     ??GetBitValue_11:
   \   000000C0   80E190E5           LDR      LR,[R0, #+384]
   1189                          ValKey = SVT_AL_ENABLE;
   \   000000C4   0E0000EA           B        ??GetBitValue_8
   1190                          break;
   1191                      case SVT_HI_IGP_ENABLE  :
   1192                          AlPtr = (AlarmBasic *)HighIGPPtr;
   \                     ??GetBitValue_12:
   \   000000C8   84E190E5           LDR      LR,[R0, #+388]
   1193                          ValKey = SVT_AL_ENABLE;
   \   000000CC   0C0000EA           B        ??GetBitValue_8
   1194                          break;
   1195                      case SVT_LO_IGP_ENABLE  :
   1196                          AlPtr = (AlarmBasic *)LowIGPPtr;
   \                     ??GetBitValue_13:
   \   000000D0   88E190E5           LDR      LR,[R0, #+392]
   1197                          ValKey = SVT_AL_ENABLE;
   \   000000D4   0A0000EA           B        ??GetBitValue_8
   1198                          break;
   1199                      case SVT_HI_VAP_RET_ENABLE  :
   1200                          AlPtr = (AlarmBasic *)HighVapRetPtr;
   \                     ??GetBitValue_14:
   \   000000D8   8CE190E5           LDR      LR,[R0, #+396]
   1201                          ValKey = SVT_AL_ENABLE;
   \   000000DC   080000EA           B        ??GetBitValue_8
   1202                          break;
   1203                      case SVT_LO_VAP_RET_ENABLE  :
   1204                          AlPtr = (AlarmBasic *)LowVapRetPtr;
   \                     ??GetBitValue_15:
   \   000000E0   90E190E5           LDR      LR,[R0, #+400]
   1205                          ValKey = SVT_AL_ENABLE;
   \   000000E4   060000EA           B        ??GetBitValue_8
   1206                          break;
   1207                      case SVT_XTRA_HI_PRESS_ENABLE1  :
   1208                          AlPtr = (AlarmBasic *)IntHighPressurePtr1;
   \                     ??GetBitValue_16:
   \   000000E8   94E190E5           LDR      LR,[R0, #+404]
   1209                          ValKey = SVT_AL_ENABLE;
   \   000000EC   040000EA           B        ??GetBitValue_8
   1210                          break;
   1211                      case SVT_XTRA_LO_PRESS_ENABLE1  :
   1212                          AlPtr = (AlarmBasic *)IntLowPressurePtr1;
   \                     ??GetBitValue_17:
   \   000000F0   9CE190E5           LDR      LR,[R0, #+412]
   1213                          ValKey = SVT_AL_ENABLE;
   \   000000F4   020000EA           B        ??GetBitValue_8
   1214                          break;
   1215                      case SVT_XTRA_HI_PRESS_ENABLE2  :
   1216                          AlPtr = (AlarmBasic *)IntHighPressurePtr2;
   \                     ??GetBitValue_18:
   \   000000F8   98E190E5           LDR      LR,[R0, #+408]
   1217                          ValKey = SVT_AL_ENABLE;
   \   000000FC   000000EA           B        ??GetBitValue_8
   1218                          break;
   1219                      case SVT_XTRA_LO_PRESS_ENABLE2  :
   1220                          AlPtr = (AlarmBasic *)IntLowPressurePtr2;
   \                     ??GetBitValue_19:
   \   00000100   A0E190E5           LDR      LR,[R0, #+416]
   1221                          ValKey = SVT_AL_ENABLE;
   \                     ??GetBitValue_8:
   \   00000104   02C0A0E1           MOV      R12,R2
   1222                          break;
   1223                      }
   1224                      if ( AlPtr ) {
   \                     ??GetBitValue_6:
   \   00000108   00005EE3           CMP      LR,#+0
   \   0000010C   0700000A           BEQ      ??GetBitValue_20
   1225                          Status = AlPtr->GetBitValue(ValKey, 0, MyBit);
   \   00000110   A4409EE5           LDR      R4,[LR, #+164]
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   2C4094E5           LDR      R4,[R4, #+44]
   \   0000011C   0C10A0E1           MOV      R1,R12
   \   00000120   0E00A0E1           MOV      R0,LR
   \   00000124   0FE0A0E1           MOV      LR,PC
   \   00000128   14FF2FE1           BX       R4
   \   0000012C   020000EA           B        ??GetBitValue_21
   1226                      } else {
   1227                          Status = GETVAL_NOT_AVAILABLE;
   \                     ??GetBitValue_20:
   \   00000130   0100A0E3           MOV      R0,#+1
   \   00000134   000000EA           B        ??GetBitValue_21
   1228                      }
   1229                  }
   1230                  break;
   1231              default:
   1232                  Status = PROXRefObject::GetBitValue(ValueId, Index, MyBit);
   \                     ??GetBitValue_4:
   \   00000138   ........           _BLF     ??GetBitValue_3,??GetBitValue??rA
   1233                  break;
   1234              }
   1235          
   1236              return (Status);
   \                     ??GetBitValue_21:
   \   0000013C   ........           B        ?Subroutine51
   1237          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine51:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine51_0:
   \   00000008   ........           DC32     ??SimulateFixedValues
   1238          
   1239          

   \                                 In segment CODE, align 4, keep-with-next
   1240          int PROTankPressure::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   8470DDE5           LDRB     R7,[SP, #+132]
   \   0000000C   0040A0E1           MOV      R4,R0
   1241              int Status    = E_NO_ERR; 
   1242              int ValUnitId = NO_UNIT;
   1243          
   1244              LimitState OrgAlarmSet = VapourAlarmSet;
   1245              switch ( ValueId ) {
   \   00000010   5C009DE5           LDR      R0,[SP, #+92]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0350A0E1           MOV      R5,R3
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   04108DE5           STR      R1,[SP, #+4]
   \   00000028   3E80A0E3           MOV      R8,#+62
   \   0000002C   8C8D88E3           ORR      R8,R8,#0x2300
   \   00000030   0C90C8E3           BIC      R9,R8,#0xC
   \   00000034   0BA048E2           SUB      R10,R8,#+11
   \   00000038   58BFA0E3           MOV      R11,#+352
   \   0000003C   400E50E2           SUBS     R0,R0,#+1024
   \   00000040   5601000A           BEQ      ??PutValue_3
   \   00000044   210050E2           SUBS     R0,R0,#+33
   \   00000048   3E01000A           BEQ      ??PutValue_4
   \   0000004C   0E0050E2           SUBS     R0,R0,#+14
   \   00000050   5201000A           BEQ      ??PutValue_3
   \   00000054   100050E2           SUBS     R0,R0,#+16
   \   00000058   6601000A           BEQ      ??PutValue_5
   \   0000005C   0A0050E2           SUBS     R0,R0,#+10
   \   00000060   7F01000A           BEQ      ??PutValue_6
   \   00000064   100050E2           SUBS     R0,R0,#+16
   \   00000068   07005012           SUBSNE   R0,R0,#+7
   \   0000006C   9201000A           BEQ      ??PutValue_7
   \   00000070   7D0D50E2           SUBS     R0,R0,#+8000
   \   00000074   5C00000A           BEQ      ??PutValue_8
   \   00000078   010050E2           SUBS     R0,R0,#+1
   \   0000007C   6D00000A           BEQ      ??PutValue_9
   \   00000080   020050E2           SUBS     R0,R0,#+2
   \   00000084   A800000A           BEQ      ??PutValue_10
   \   00000088   010050E2           SUBS     R0,R0,#+1
   \   0000008C   B900000A           BEQ      ??PutValue_11
   \   00000090   020050E2           SUBS     R0,R0,#+2
   \   00000094   F400000A           BEQ      ??PutValue_12
   \   00000098   010050E2           SUBS     R0,R0,#+1
   \   0000009C   0501000A           BEQ      ??PutValue_13
   \   000000A0   0C0050E2           SUBS     R0,R0,#+12
   \   000000A4   3900000A           BEQ      ??PutValue_14
   \   000000A8   010050E2           SUBS     R0,R0,#+1
   \   000000AC   7800000A           BEQ      ??PutValue_15
   \   000000B0   010050E2           SUBS     R0,R0,#+1
   \   000000B4   8900000A           BEQ      ??PutValue_16
   \   000000B8   010050E2           SUBS     R0,R0,#+1
   \   000000BC   C400000A           BEQ      ??PutValue_17
   \   000000C0   010050E2           SUBS     R0,R0,#+1
   \   000000C4   D500000A           BEQ      ??PutValue_18
   \   000000C8   010050E2           SUBS     R0,R0,#+1
   \   000000CC   0A01000A           BEQ      ??PutValue_19
   \   000000D0   0C0050E2           SUBS     R0,R0,#+12
   \   000000D4   0510A0E1           MOV      R1,R5
   \   000000D8   8E01001A           BNE      ??PutValue_20
   1246              case SVT_AL_LIMIT_TYPE_PRESS:
   1247                  {
   1248                      switch ( FindConfigKey(NewValue) ) {
   \   000000DC   24008DE2           ADD      R0,SP,#+36
   \   000000E0   ........           _BLF     ??string,??string??rA
   \   000000E4   24008DE2           ADD      R0,SP,#+36
   \   000000E8   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000EC   0060A0E1           MOV      R6,R0
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   24008DE2           ADD      R0,SP,#+36
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   706046E2           SUB      R6,R6,#+112
   \   00000104   040056E3           CMP      R6,#+4
   \   00000108   1000008A           BHI      ??PutValue_21
   \   0000010C   010F8FE2           ADR      R0,??PutValue_1
   \   00000110   0600D0E7           LDRB     R0,[R0, R6]
   \   00000114   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_1:
   \   00000118   01050709           DC8      +1,+5,+7,+9
   \   0000011C   0B000000           DC8      +11,+0,+0,+0
   1249                      case C_PRESS_LIM_ADJUST    :
   1250                          SetPressureAlarmMode(pLimitAdjustable);
   \                     ??PutValue_22:
   \   00000120   0010A0E3           MOV      R1,#+0
   \                     ??PutValue_23:
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           BL       ??SetPressureAlarmMode
   \   0000012C   890100EA           B        ??PutValue_24
   1251                          break;
   1252                      case C_PRESS_LIM_PRESS_VAC :
   1253                          SetPressureAlarmMode(pLimitPressVac);
   \                     ??PutValue_25:
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   FAFFFFEA           B        ??PutValue_23
   1254                          break;
   1255                      case C_PRESS_LIM_VAP_RET   :
   1256                          SetPressureAlarmMode(pLimitVapourReturn);
   \                     ??PutValue_26:
   \   00000138   0210A0E3           MOV      R1,#+2
   \   0000013C   F8FFFFEA           B        ??PutValue_23
   1257                          break;
   1258                      case C_PRESS_LIM_PO_MODE:
   1259                          SetPressureAlarmMode(pLimitPOmode);
   \                     ??PutValue_27:
   \   00000140   0310A0E3           MOV      R1,#+3
   \   00000144   F6FFFFEA           B        ??PutValue_23
   1260                          break;
   1261                      case C_PRESS_LIM_IGP_MODE:
   1262                          SetPressureAlarmMode(pLimitIGPmode);
   \                     ??PutValue_28:
   \   00000148   0410A0E3           MOV      R1,#+4
   \   0000014C   F4FFFFEA           B        ??PutValue_23
   1263                          break;
   1264                      default:
   1265                          {
   1266                              unsigned Value = GetUnsigned(NewValue, Status);
   \                     ??PutValue_21:
   \   00000150   0510A0E1           MOV      R1,R5
   \   00000154   08008DE2           ADD      R0,SP,#+8
   \   00000158   ........           _BLF     ??string,??string??rA
   \   0000015C   0D10A0E1           MOV      R1,SP
   \   00000160   08008DE2           ADD      R0,SP,#+8
   \   00000164   ........           _BLF     ??GetUnsigned,??GetUnsigned??rA
   \   00000168   0050A0E1           MOV      R5,R0
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   0110A0E3           MOV      R1,#+1
   \   00000174   08008DE2           ADD      R0,SP,#+8
   \   00000178   ........           _BLF     ??_Tidy,??_Tidy??rA
   1267                              if ( Status == E_NO_ERR ) {
   \   0000017C   00009DE5           LDR      R0,[SP, #+0]
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   7301001A           BNE      ??PutValue_24
   1268                                  SetPressureAlarmMode((LimitState)Value);
   \   00000188   FF1005E2           AND      R1,R5,#0xFF
   \   0000018C   E4FFFFEA           B        ??PutValue_23
   1269                              }
   1270                          }
   1271                      }
   1272                  }
   1273                  break;
   1274              case SVT_HI_IGP_ENABLE:
   1275                  if ( HighIGPPtr ) {
   \                     ??PutValue_14:
   \   00000190   840194E5           LDR      R0,[R4, #+388]
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   7101000A           BEQ      ??PutValue_29
   1276                      Status = HighIGPPtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local, &ValUnitId);
   \   0000019C   A40090E5           LDR      R0,[R0, #+164]
   \   000001A0   0510A0E1           MOV      R1,R5
   \   000001A4   309080E2           ADD      R9,R0,#+48
   \   000001A8   08008DE2           ADD      R0,SP,#+8
   \   000001AC   ........           _BLF     ??string,??string??rA
   \   000001B0   04008DE2           ADD      R0,SP,#+4
   \   000001B4   01002DE9           PUSH     {R0}
   \   000001B8   80002DE9           PUSH     {R7}
   \   000001BC   840194E5           LDR      R0,[R4, #+388]
   \   000001C0   005099E5           LDR      R5,[R9, #+0]
   \   000001C4   10308DE2           ADD      R3,SP,#+16
   \   000001C8   0620A0E1           MOV      R2,R6
   \   000001CC   0810A0E1           MOV      R1,R8
   \   000001D0   0FE0A0E1           MOV      LR,PC
   \   000001D4   15FF2FE1           BX       R5
   \                     ??PutValue_30:
   \   000001D8   08008DE5           STR      R0,[SP, #+8]
   \   000001DC   0020A0E3           MOV      R2,#+0
   \   000001E0   0110A0E3           MOV      R1,#+1
   \   000001E4   10008DE2           ADD      R0,SP,#+16
   \   000001E8   580100EA           B        ??PutValue_31
   1277                  }
   1278                  break;
   1279              case SVT_HI_PRESS_ENABLE:
   1280                  if ( HighPressurePtr ) {
   \                     ??PutValue_8:
   \   000001EC   740194E5           LDR      R0,[R4, #+372]
   \   000001F0   000050E3           CMP      R0,#+0
   \   000001F4   5A01000A           BEQ      ??PutValue_29
   1281                      Status = HighPressurePtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local, &ValUnitId);
   \   000001F8   A40090E5           LDR      R0,[R0, #+164]
   \   000001FC   0510A0E1           MOV      R1,R5
   \   00000200   309080E2           ADD      R9,R0,#+48
   \   00000204   08008DE2           ADD      R0,SP,#+8
   \   00000208   ........           _BLF     ??string,??string??rA
   \   0000020C   04008DE2           ADD      R0,SP,#+4
   \   00000210   01002DE9           PUSH     {R0}
   \   00000214   80002DE9           PUSH     {R7}
   \   00000218   740194E5           LDR      R0,[R4, #+372]
   \   0000021C   005099E5           LDR      R5,[R9, #+0]
   \   00000220   10308DE2           ADD      R3,SP,#+16
   \   00000224   0620A0E1           MOV      R2,R6
   \   00000228   0810A0E1           MOV      R1,R8
   \   0000022C   0FE0A0E1           MOV      LR,PC
   \   00000230   15FF2FE1           BX       R5
   \   00000234   E7FFFFEA           B        ??PutValue_30
   1282                  }
   1283                  break;
   1284              case SVT_LO_PRESS_ENABLE:
   1285                  if ( LowPressurePtr ) {
   \                     ??PutValue_9:
   \   00000238   780194E5           LDR      R0,[R4, #+376]
   \   0000023C   000050E3           CMP      R0,#+0
   \   00000240   4701000A           BEQ      ??PutValue_29
   1286                      Status = LowPressurePtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local, &ValUnitId);
   \   00000244   A40090E5           LDR      R0,[R0, #+164]
   \   00000248   0510A0E1           MOV      R1,R5
   \   0000024C   309080E2           ADD      R9,R0,#+48
   \   00000250   08008DE2           ADD      R0,SP,#+8
   \   00000254   ........           _BLF     ??string,??string??rA
   \   00000258   04008DE2           ADD      R0,SP,#+4
   \   0000025C   01002DE9           PUSH     {R0}
   \   00000260   80002DE9           PUSH     {R7}
   \   00000264   780194E5           LDR      R0,[R4, #+376]
   \   00000268   005099E5           LDR      R5,[R9, #+0]
   \   0000026C   10308DE2           ADD      R3,SP,#+16
   \   00000270   0620A0E1           MOV      R2,R6
   \   00000274   0810A0E1           MOV      R1,R8
   \   00000278   0FE0A0E1           MOV      LR,PC
   \   0000027C   15FF2FE1           BX       R5
   \                     ??PutValue_32:
   \   00000280   08008DE5           STR      R0,[SP, #+8]
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   0110A0E3           MOV      R1,#+1
   \   0000028C   10008DE2           ADD      R0,SP,#+16
   \   00000290   2E0100EA           B        ??PutValue_31
   1287                  }
   1288                  break;
   1289              case SVT_LO_IGP_ENABLE:
   1290                  if ( LowIGPPtr ) {
   \                     ??PutValue_15:
   \   00000294   880194E5           LDR      R0,[R4, #+392]
   \   00000298   000050E3           CMP      R0,#+0
   \   0000029C   3001000A           BEQ      ??PutValue_29
   1291                      Status = LowIGPPtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local, &ValUnitId);
   \   000002A0   A40090E5           LDR      R0,[R0, #+164]
   \   000002A4   0510A0E1           MOV      R1,R5
   \   000002A8   309080E2           ADD      R9,R0,#+48
   \   000002AC   08008DE2           ADD      R0,SP,#+8
   \   000002B0   ........           _BLF     ??string,??string??rA
   \   000002B4   04008DE2           ADD      R0,SP,#+4
   \   000002B8   01002DE9           PUSH     {R0}
   \   000002BC   80002DE9           PUSH     {R7}
   \   000002C0   880194E5           LDR      R0,[R4, #+392]
   \   000002C4   005099E5           LDR      R5,[R9, #+0]
   \   000002C8   10308DE2           ADD      R3,SP,#+16
   \   000002CC   0620A0E1           MOV      R2,R6
   \   000002D0   0810A0E1           MOV      R1,R8
   \   000002D4   0FE0A0E1           MOV      LR,PC
   \   000002D8   15FF2FE1           BX       R5
   \   000002DC   BDFFFFEA           B        ??PutValue_30
   1292                  }
   1293                  break;
   1294              case SVT_HI_IGP_LIMIT:
   1295                  if ( HighIGPPtr ) {
   \                     ??PutValue_16:
   \   000002E0   840194E5           LDR      R0,[R4, #+388]
   \   000002E4   000050E3           CMP      R0,#+0
   \   000002E8   1D01000A           BEQ      ??PutValue_29
   1296                      Status = HighIGPPtr->PutValue(SVT_AL_LIMIT, Index, NewValue, Local, &ValUnitId);
   \   000002EC   A40090E5           LDR      R0,[R0, #+164]
   \   000002F0   0510A0E1           MOV      R1,R5
   \   000002F4   308080E2           ADD      R8,R0,#+48
   \   000002F8   08008DE2           ADD      R0,SP,#+8
   \   000002FC   ........           _BLF     ??string,??string??rA
   \   00000300   04008DE2           ADD      R0,SP,#+4
   \   00000304   01002DE9           PUSH     {R0}
   \   00000308   80002DE9           PUSH     {R7}
   \   0000030C   840194E5           LDR      R0,[R4, #+388]
   \   00000310   005098E5           LDR      R5,[R8, #+0]
   \   00000314   10308DE2           ADD      R3,SP,#+16
   \   00000318   0620A0E1           MOV      R2,R6
   \   0000031C   0910A0E1           MOV      R1,R9
   \   00000320   0FE0A0E1           MOV      LR,PC
   \   00000324   15FF2FE1           BX       R5
   \   00000328   D4FFFFEA           B        ??PutValue_32
   1297                  }
   1298                  break;
   1299              case SVT_HI_PRESS_LIMIT:
   1300                  if ( HighPressurePtr ) {
   \                     ??PutValue_10:
   \   0000032C   740194E5           LDR      R0,[R4, #+372]
   \   00000330   000050E3           CMP      R0,#+0
   \   00000334   0A01000A           BEQ      ??PutValue_29
   1301                      Status = HighPressurePtr->PutValue(SVT_AL_LIMIT, Index, NewValue, Local, &ValUnitId);
   \   00000338   A40090E5           LDR      R0,[R0, #+164]
   \   0000033C   0510A0E1           MOV      R1,R5
   \   00000340   308080E2           ADD      R8,R0,#+48
   \   00000344   08008DE2           ADD      R0,SP,#+8
   \   00000348   ........           _BLF     ??string,??string??rA
   \   0000034C   04008DE2           ADD      R0,SP,#+4
   \   00000350   01002DE9           PUSH     {R0}
   \   00000354   80002DE9           PUSH     {R7}
   \   00000358   740194E5           LDR      R0,[R4, #+372]
   \   0000035C   005098E5           LDR      R5,[R8, #+0]
   \   00000360   10308DE2           ADD      R3,SP,#+16
   \   00000364   0620A0E1           MOV      R2,R6
   \   00000368   0910A0E1           MOV      R1,R9
   \   0000036C   0FE0A0E1           MOV      LR,PC
   \   00000370   15FF2FE1           BX       R5
   \   00000374   97FFFFEA           B        ??PutValue_30
   1302                  }
   1303                  break;
   1304              case SVT_LO_PRESS_LIMIT:
   1305                  if ( LowPressurePtr ) {
   \                     ??PutValue_11:
   \   00000378   780194E5           LDR      R0,[R4, #+376]
   \   0000037C   000050E3           CMP      R0,#+0
   \   00000380   F700000A           BEQ      ??PutValue_29
   1306                      Status = LowPressurePtr->PutValue(SVT_AL_LIMIT, Index, NewValue, Local, &ValUnitId);
   \   00000384   A40090E5           LDR      R0,[R0, #+164]
   \   00000388   0510A0E1           MOV      R1,R5
   \   0000038C   308080E2           ADD      R8,R0,#+48
   \   00000390   08008DE2           ADD      R0,SP,#+8
   \   00000394   ........           _BLF     ??string,??string??rA
   \   00000398   04008DE2           ADD      R0,SP,#+4
   \   0000039C   01002DE9           PUSH     {R0}
   \   000003A0   80002DE9           PUSH     {R7}
   \   000003A4   780194E5           LDR      R0,[R4, #+376]
   \   000003A8   005098E5           LDR      R5,[R8, #+0]
   \   000003AC   10308DE2           ADD      R3,SP,#+16
   \   000003B0   0620A0E1           MOV      R2,R6
   \   000003B4   0910A0E1           MOV      R1,R9
   \                     ??PutValue_33:
   \   000003B8   0FE0A0E1           MOV      LR,PC
   \   000003BC   15FF2FE1           BX       R5
   \   000003C0   08008DE5           STR      R0,[SP, #+8]
   \   000003C4   0020A0E3           MOV      R2,#+0
   \   000003C8   0110A0E3           MOV      R1,#+1
   \   000003CC   10008DE2           ADD      R0,SP,#+16
   \   000003D0   DE0000EA           B        ??PutValue_31
   1307                  }
   1308                  break;
   1309              case SVT_LO_IGP_LIMIT:
   1310                  if ( LowIGPPtr ) {
   \                     ??PutValue_17:
   \   000003D4   880194E5           LDR      R0,[R4, #+392]
   \   000003D8   000050E3           CMP      R0,#+0
   \   000003DC   E000000A           BEQ      ??PutValue_29
   1311                      Status = LowIGPPtr->PutValue(SVT_AL_LIMIT, Index, NewValue, Local, &ValUnitId);
   \   000003E0   A40090E5           LDR      R0,[R0, #+164]
   \   000003E4   0510A0E1           MOV      R1,R5
   \   000003E8   308080E2           ADD      R8,R0,#+48
   \   000003EC   08008DE2           ADD      R0,SP,#+8
   \   000003F0   ........           _BLF     ??string,??string??rA
   \   000003F4   04008DE2           ADD      R0,SP,#+4
   \   000003F8   01002DE9           PUSH     {R0}
   \   000003FC   80002DE9           PUSH     {R7}
   \   00000400   880194E5           LDR      R0,[R4, #+392]
   \   00000404   005098E5           LDR      R5,[R8, #+0]
   \   00000408   10308DE2           ADD      R3,SP,#+16
   \   0000040C   0620A0E1           MOV      R2,R6
   \   00000410   0910A0E1           MOV      R1,R9
   \   00000414   0FE0A0E1           MOV      LR,PC
   \   00000418   15FF2FE1           BX       R5
   \   0000041C   6DFFFFEA           B        ??PutValue_30
   1312                  }
   1313                  break;
   1314              case SVT_HI_IGP_VALUE:
   1315                  if ( HighIGPPtr ) {
   \                     ??PutValue_18:
   \   00000420   840194E5           LDR      R0,[R4, #+388]
   \   00000424   000050E3           CMP      R0,#+0
   \   00000428   CD00000A           BEQ      ??PutValue_29
   1316                      Status = HighIGPPtr->PutValue(SVT_AL_VALUE, Index, NewValue, Local, &ValUnitId);
   \   0000042C   A40090E5           LDR      R0,[R0, #+164]
   \   00000430   0510A0E1           MOV      R1,R5
   \   00000434   308080E2           ADD      R8,R0,#+48
   \   00000438   08008DE2           ADD      R0,SP,#+8
   \   0000043C   ........           _BLF     ??string,??string??rA
   \   00000440   04008DE2           ADD      R0,SP,#+4
   \   00000444   01002DE9           PUSH     {R0}
   \   00000448   80002DE9           PUSH     {R7}
   \   0000044C   840194E5           LDR      R0,[R4, #+388]
   \   00000450   005098E5           LDR      R5,[R8, #+0]
   \   00000454   10308DE2           ADD      R3,SP,#+16
   \   00000458   0620A0E1           MOV      R2,R6
   \   0000045C   0A10A0E1           MOV      R1,R10
   \   00000460   0FE0A0E1           MOV      LR,PC
   \   00000464   15FF2FE1           BX       R5
   \   00000468   84FFFFEA           B        ??PutValue_32
   1317                  }
   1318                  break;
   1319              case SVT_HI_PRESS_VALUE:
   1320                  if ( HighPressurePtr ) {
   \                     ??PutValue_12:
   \   0000046C   740194E5           LDR      R0,[R4, #+372]
   \   00000470   000050E3           CMP      R0,#+0
   \   00000474   BA00000A           BEQ      ??PutValue_29
   1321                      Status = HighPressurePtr->PutValue(SVT_AL_VALUE, Index, NewValue, Local, &ValUnitId);
   \   00000478   A40090E5           LDR      R0,[R0, #+164]
   \   0000047C   0510A0E1           MOV      R1,R5
   \   00000480   308080E2           ADD      R8,R0,#+48
   \   00000484   08008DE2           ADD      R0,SP,#+8
   \   00000488   ........           _BLF     ??string,??string??rA
   \   0000048C   04008DE2           ADD      R0,SP,#+4
   \   00000490   01002DE9           PUSH     {R0}
   \   00000494   80002DE9           PUSH     {R7}
   \   00000498   740194E5           LDR      R0,[R4, #+372]
   \   0000049C   005098E5           LDR      R5,[R8, #+0]
   \   000004A0   10308DE2           ADD      R3,SP,#+16
   \   000004A4   0620A0E1           MOV      R2,R6
   \   000004A8   0A10A0E1           MOV      R1,R10
   \   000004AC   0FE0A0E1           MOV      LR,PC
   \   000004B0   15FF2FE1           BX       R5
   \   000004B4   47FFFFEA           B        ??PutValue_30
   1322                  }
   1323                  break;
   1324              case SVT_LO_PRESS_VALUE:
   1325                  if ( LowPressurePtr ) {
   \                     ??PutValue_13:
   \   000004B8   780194E5           LDR      R0,[R4, #+376]
   \   000004BC   000050E3           CMP      R0,#+0
   \   000004C0   A700000A           BEQ      ??PutValue_29
   1326                      Status = LowPressurePtr->PutValue(SVT_AL_VALUE, Index, NewValue, Local, &ValUnitId);
   \   000004C4   A40090E5           LDR      R0,[R0, #+164]
   \   000004C8   0510A0E1           MOV      R1,R5
   \   000004CC   308080E2           ADD      R8,R0,#+48
   \   000004D0   08008DE2           ADD      R0,SP,#+8
   \   000004D4   ........           _BLF     ??string,??string??rA
   \   000004D8   04008DE2           ADD      R0,SP,#+4
   \   000004DC   01002DE9           PUSH     {R0}
   \   000004E0   80002DE9           PUSH     {R7}
   \   000004E4   780194E5           LDR      R0,[R4, #+376]
   \   000004E8   005098E5           LDR      R5,[R8, #+0]
   \   000004EC   10308DE2           ADD      R3,SP,#+16
   \   000004F0   0620A0E1           MOV      R2,R6
   \   000004F4   0A10A0E1           MOV      R1,R10
   \   000004F8   AEFFFFEA           B        ??PutValue_33
   1327                  }
   1328                  break;
   1329              case SVT_LO_IGP_VALUE:
   1330                  if ( LowIGPPtr ) {
   \                     ??PutValue_19:
   \   000004FC   880194E5           LDR      R0,[R4, #+392]
   \   00000500   000050E3           CMP      R0,#+0
   \   00000504   9600000A           BEQ      ??PutValue_29
   1331                      Status = LowIGPPtr->PutValue(SVT_AL_VALUE, Index, NewValue, Local, &ValUnitId);
   \   00000508   A40090E5           LDR      R0,[R0, #+164]
   \   0000050C   0510A0E1           MOV      R1,R5
   \   00000510   308080E2           ADD      R8,R0,#+48
   \   00000514   08008DE2           ADD      R0,SP,#+8
   \   00000518   ........           _BLF     ??string,??string??rA
   \   0000051C   04008DE2           ADD      R0,SP,#+4
   \   00000520   01002DE9           PUSH     {R0}
   \   00000524   80002DE9           PUSH     {R7}
   \   00000528   880194E5           LDR      R0,[R4, #+392]
   \   0000052C   005098E5           LDR      R5,[R8, #+0]
   \   00000530   10308DE2           ADD      R3,SP,#+16
   \   00000534   0620A0E1           MOV      R2,R6
   \   00000538   0A10A0E1           MOV      R1,R10
   \   0000053C   0FE0A0E1           MOV      LR,PC
   \   00000540   15FF2FE1           BX       R5
   \   00000544   23FFFFEA           B        ??PutValue_30
   1332                  }
   1333                  break;
   1334              case SVT_ZEROSET_PRESS:
   1335                  if ( !tankPressures.empty() ) {
   \                     ??PutValue_4:
   \   00000548   04008BE0           ADD      R0,R11,R4
   \   0000054C   ........           _BLF     ??empty,??empty??rA
   \   00000550   000050E3           CMP      R0,#+0
   \   00000554   8200001A           BNE      ??PutValue_29
   1336                      // Can input to any because they are all linked
   1337                      Status = tankPressures[0]->PutValue(SVT_AI_CALC_VAL, Index, "0.0", Local);
   \   00000558   04009BE7           LDR      R0,[R11, +R4]
   \   0000055C   8C1F8FE2           ADR      R1,??PutValue_34  ;; "0.0"
   \   00000560   005090E5           LDR      R5,[R0, #+0]
   \   00000564   A40095E5           LDR      R0,[R5, #+164]
   \   00000568   308080E2           ADD      R8,R0,#+48
   \   0000056C   08008DE2           ADD      R0,SP,#+8
   \   00000570   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000574   0010A0E3           MOV      R1,#+0
   \   00000578   02002DE9           PUSH     {R1}
   \   0000057C   80002DE9           PUSH     {R7}
   \   00000580   0030A0E1           MOV      R3,R0
   \   00000584   0500A0E1           MOV      R0,R5
   \   00000588   005098E5           LDR      R5,[R8, #+0]
   \   0000058C   0620A0E1           MOV      R2,R6
   \   00000590   D61F8BE2           ADD      R1,R11,#+856
   \   00000594   0FE0A0E1           MOV      LR,PC
   \   00000598   15FF2FE1           BX       R5
   \   0000059C   37FFFFEA           B        ??PutValue_32
   1338                  }
   1339                  break;
   1340              case SVT_PRESSURE:  //EHSMark Was no input permission
   1341                                  //Status = E_NO_INPUT_PERMISSION;
   1342                  //break;
   1343              case SVT_TP:
   1344                  // Can input to any because they are all linked
   1345                  if ( !tankPressures.empty() ) {
   \                     ??PutValue_3:
   \   000005A0   04008BE0           ADD      R0,R11,R4
   \   000005A4   ........           _BLF     ??empty,??empty??rA
   \   000005A8   000050E3           CMP      R0,#+0
   \   000005AC   6C00001A           BNE      ??PutValue_29
   1346                      Status = tankPressures[0]->PutValue(SVT_AI_CALC_VAL, Index, NewValue, Local, &ValUnitId);
   \   000005B0   04009BE7           LDR      R0,[R11, +R4]
   \   000005B4   0510A0E1           MOV      R1,R5
   \   000005B8   008090E5           LDR      R8,[R0, #+0]
   \   000005BC   A40098E5           LDR      R0,[R8, #+164]
   \   000005C0   309080E2           ADD      R9,R0,#+48
   \   000005C4   08008DE2           ADD      R0,SP,#+8
   \   000005C8   ........           _BLF     ??string,??string??rA
   \   000005CC   04008DE2           ADD      R0,SP,#+4
   \   000005D0   01002DE9           PUSH     {R0}
   \   000005D4   80002DE9           PUSH     {R7}
   \   000005D8   005099E5           LDR      R5,[R9, #+0]
   \   000005DC   10308DE2           ADD      R3,SP,#+16
   \   000005E0   0620A0E1           MOV      R2,R6
   \   000005E4   D61F8BE2           ADD      R1,R11,#+856
   \   000005E8   0800A0E1           MOV      R0,R8
   \   000005EC   0FE0A0E1           MOV      LR,PC
   \   000005F0   15FF2FE1           BX       R5
   \   000005F4   F7FEFFEA           B        ??PutValue_30
   1347                  }
   1348                  break;
   1349              case SVT_TP_OFFSET :
   1350                  // Can input to any because they are all linked
   1351                  if ( !tankPressures.empty() ) {
   \                     ??PutValue_5:
   \   000005F8   04008BE0           ADD      R0,R11,R4
   \   000005FC   ........           _BLF     ??empty,??empty??rA
   \   00000600   000050E3           CMP      R0,#+0
   \   00000604   5600001A           BNE      ??PutValue_29
   1352                      Status = tankPressures[0]->PutValue(SVT_AI_OFFSET, Index, NewValue, Local, &ValUnitId);
   \   00000608   04009BE7           LDR      R0,[R11, +R4]
   \   0000060C   0510A0E1           MOV      R1,R5
   \   00000610   008090E5           LDR      R8,[R0, #+0]
   \   00000614   A40098E5           LDR      R0,[R8, #+164]
   \   00000618   309080E2           ADD      R9,R0,#+48
   \   0000061C   08008DE2           ADD      R0,SP,#+8
   \   00000620   ........           _BLF     ??string,??string??rA
   \   00000624   04008DE2           ADD      R0,SP,#+4
   \   00000628   01002DE9           PUSH     {R0}
   \   0000062C   80002DE9           PUSH     {R7}
   \   00000630   005099E5           LDR      R5,[R9, #+0]
   \   00000634   10308DE2           ADD      R3,SP,#+16
   \   00000638   0620A0E1           MOV      R2,R6
   \   0000063C   B510A0E3           MOV      R1,#+181
   \   00000640   401E81E3           ORR      R1,R1,#0x400
   \   00000644   0800A0E1           MOV      R0,R8
   \   00000648   0FE0A0E1           MOV      LR,PC
   \   0000064C   15FF2FE1           BX       R5
   \   00000650   08008DE5           STR      R0,[SP, #+8]
   \   00000654   0020A0E3           MOV      R2,#+0
   \   00000658   0110A0E3           MOV      R1,#+1
   \   0000065C   10008DE2           ADD      R0,SP,#+16
   \   00000660   3A0000EA           B        ??PutValue_31
   1353                  }
   1354                  break;
   1355              case SVT_TP_GAIN :
   1356                  // Can input to any because they are all linked
   1357                  if ( !tankPressures.empty() ) {
   \                     ??PutValue_6:
   \   00000664   04008BE0           ADD      R0,R11,R4
   \   00000668   ........           _BLF     ??empty,??empty??rA
   \   0000066C   000050E3           CMP      R0,#+0
   \   00000670   3B00001A           BNE      ??PutValue_29
   1358                      Status = tankPressures[0]->PutValue(SVT_AI_GAIN, Index, NewValue, Local, &ValUnitId);
   \   00000674   04009BE7           LDR      R0,[R11, +R4]
   \   00000678   0510A0E1           MOV      R1,R5
   \   0000067C   008090E5           LDR      R8,[R0, #+0]
   \   00000680   A40098E5           LDR      R0,[R8, #+164]
   \   00000684   309080E2           ADD      R9,R0,#+48
   \   00000688   08008DE2           ADD      R0,SP,#+8
   \   0000068C   ........           _BLF     ??string,??string??rA
   \   00000690   04008DE2           ADD      R0,SP,#+4
   \   00000694   01002DE9           PUSH     {R0}
   \   00000698   80002DE9           PUSH     {R7}
   \   0000069C   005099E5           LDR      R5,[R9, #+0]
   \   000006A0   10308DE2           ADD      R3,SP,#+16
   \   000006A4   0620A0E1           MOV      R2,R6
   \   000006A8   D51F8BE2           ADD      R1,R11,#+852
   \   000006AC   0800A0E1           MOV      R0,R8
   \   000006B0   0FE0A0E1           MOV      LR,PC
   \   000006B4   15FF2FE1           BX       R5
   \   000006B8   C6FEFFEA           B        ??PutValue_30
   1359                  }
   1360                  break;
   1361              case SVT_TP_ENABLE :
   1362              case SVT_TP_ENABLE_TEXT :
   1363                  // Can input to any because they are all linked
   1364                  if ( !tankPressures.empty() ) {
   \                     ??PutValue_7:
   \   000006BC   04008BE0           ADD      R0,R11,R4
   \   000006C0   ........           _BLF     ??empty,??empty??rA
   \   000006C4   000050E3           CMP      R0,#+0
   \   000006C8   2500001A           BNE      ??PutValue_29
   1365                      Status = tankPressures[0]->PutValue(SVT_AI_ENABLE_TEXT, Index, NewValue, Local, &ValUnitId);
   \   000006CC   04009BE7           LDR      R0,[R11, +R4]
   \   000006D0   0510A0E1           MOV      R1,R5
   \   000006D4   008090E5           LDR      R8,[R0, #+0]
   \   000006D8   A40098E5           LDR      R0,[R8, #+164]
   \   000006DC   309080E2           ADD      R9,R0,#+48
   \   000006E0   08008DE2           ADD      R0,SP,#+8
   \   000006E4   ........           _BLF     ??string,??string??rA
   \   000006E8   04008DE2           ADD      R0,SP,#+4
   \   000006EC   01002DE9           PUSH     {R0}
   \   000006F0   80002DE9           PUSH     {R7}
   \   000006F4   005099E5           LDR      R5,[R9, #+0]
   \   000006F8   10308DE2           ADD      R3,SP,#+16
   \   000006FC   0620A0E1           MOV      R2,R6
   \   00000700   B210A0E3           MOV      R1,#+178
   \   00000704   401E81E3           ORR      R1,R1,#0x400
   \   00000708   0800A0E1           MOV      R0,R8
   \   0000070C   0FE0A0E1           MOV      LR,PC
   \   00000710   15FF2FE1           BX       R5
   \   00000714   D9FEFFEA           B        ??PutValue_32
   1366                  }
   1367                  break;
   1368              default:
   1369                  Status = PROXRefObject::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_20:
   \   00000718   40008DE2           ADD      R0,SP,#+64
   \   0000071C   ........           _BLF     ??string,??string??rA
   \   00000720   04008DE2           ADD      R0,SP,#+4
   \   00000724   01002DE9           PUSH     {R0}
   \   00000728   80002DE9           PUSH     {R7}
   \   0000072C   64109DE5           LDR      R1,[SP, #+100]
   \   00000730   48308DE2           ADD      R3,SP,#+72
   \   00000734   0620A0E1           MOV      R2,R6
   \   00000738   0400A0E1           MOV      R0,R4
   \   0000073C   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000740   08008DE5           STR      R0,[SP, #+8]
   \   00000744   0020A0E3           MOV      R2,#+0
   \   00000748   0110A0E3           MOV      R1,#+1
   \   0000074C   48008DE2           ADD      R0,SP,#+72
   \                     ??PutValue_31:
   \   00000750   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000754   08D08DE2           ADD      SP,SP,#+8
   1370                  break;
   1371              }
   1372              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_24:
   \   00000758   00009DE5           LDR      R0,[SP, #+0]
   \   0000075C   000050E3           CMP      R0,#+0
   \   00000760   0400001A           BNE      ??PutValue_35
   1373                  SetModifiedFlag();
   \                     ??PutValue_29:
   \   00000764   A41094E5           LDR      R1,[R4, #+164]
   \   00000768   0400A0E1           MOV      R0,R4
   \   0000076C   541091E5           LDR      R1,[R1, #+84]
   \   00000770   0FE0A0E1           MOV      LR,PC
   \   00000774   11FF2FE1           BX       R1
   1374              }
   1375              if ( UnitId ) {
   \                     ??PutValue_35:
   \   00000778   88009DE5           LDR      R0,[SP, #+136]
   \   0000077C   000050E3           CMP      R0,#+0
   1376                  *UnitId = ValUnitId;
   \   00000780   04109D15           LDRNE    R1,[SP, #+4]
   \   00000784   00108015           STRNE    R1,[R0, #+0]
   1377              }
   1378              return (Status);
   \   00000788   00009DE5           LDR      R0,[SP, #+0]
   \   0000078C   60D08DE2           ADD      SP,SP,#+96
   \   00000790   ........           B        ?Subroutine48
   \                     ??PutValue_34:
   \   00000794   302E3000           DC8      "0.0"
   1379          }
   1380          

   \                                 In segment CODE, align 4, keep-with-next
   1381          int PROTankPressure::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0070A0E1           MOV      R7,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   1382              int Status = E_NO_ERR;
   \   00000010   0040A0E3           MOV      R4,#+0
   1383              switch ( ValueId ) {
   \   00000014   588FA0E3           MOV      R8,#+352
   \   00000018   3210A0E3           MOV      R1,#+50
   \   0000001C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000020   8320A0E3           MOV      R2,#+131
   \   00000024   402E82E3           ORR      R2,R2,#0x400
   \   00000028   020055E1           CMP      R5,R2
   \   0000002C   2200000A           BEQ      ??PutFloatValue_2
   \   00000030   042082E3           ORR      R2,R2,#0x4
   \   00000034   020055E1           CMP      R5,R2
   \   00000038   0F00000A           BEQ      ??PutFloatValue_3
   \   0000003C   712081E2           ADD      R2,R1,#+113
   \   00000040   020055E1           CMP      R5,R2
   \   00000044   4C00000A           BEQ      ??PutFloatValue_4
   \   00000048   722081E2           ADD      R2,R1,#+114
   \   0000004C   020055E1           CMP      R5,R2
   \   00000050   4B00000A           BEQ      ??PutFloatValue_5
   \   00000054   832081E2           ADD      R2,R1,#+131
   \   00000058   020055E1           CMP      R5,R2
   \   0000005C   3C00000A           BEQ      ??PutFloatValue_6
   \   00000060   842081E3           ORR      R2,R1,#0x84
   \   00000064   020055E1           CMP      R5,R2
   \   00000068   4F00000A           BEQ      ??PutFloatValue_7
   \   0000006C   922081E2           ADD      R2,R1,#+146
   \   00000070   020055E1           CMP      R5,R2
   \   00000074   3000000A           BEQ      ??PutFloatValue_8
   \   00000078   4D0000EA           B        ??PutFloatValue_9
   1384              case SVT_AP_TPRESS_SNS_FAIL    :
   1385                  // Assume only one airpurge tank pressure sensor for one tank
   1386                  if ( tankPressures.size() ) {
   \                     ??PutFloatValue_3:
   \   0000007C   070088E0           ADD      R0,R8,R7
   \   00000080   041090E5           LDR      R1,[R0, #+4]
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   000041E0           SUB      R0,R1,R0
   \   0000008C   2001B0E1           LSRS     R0,R0,#+2
   \   00000090   4B00000A           BEQ      ??PutFloatValue_10
   1387                      tankPressures[0]->PutFloatValue(ValueId, NewValue);
   \   00000094   070098E7           LDR      R0,[R8, +R7]
   \   00000098   0620A0E1           MOV      R2,R6
   \   0000009C   003090E5           LDR      R3,[R0, #+0]
   \   000000A0   0510A0E1           MOV      R1,R5
   \   000000A4   0300A0E1           MOV      R0,R3
   \   000000A8   A43093E5           LDR      R3,[R3, #+164]
   \   000000AC   343093E5           LDR      R3,[R3, #+52]
   \   000000B0   0FE0A0E1           MOV      LR,PC
   \   000000B4   13FF2FE1           BX       R3
   \   000000B8   410000EA           B        ??PutFloatValue_10
   1388                  }
   1389                  break;
   1390              case SVT_AP_TANK_PRESSURE_MB  :
   1391                  // Assume only one airpurge tank pressure sensor for one tank
   1392                  if ( tankPressures.size() ) {
   \                     ??PutFloatValue_2:
   \   000000BC   070088E0           ADD      R0,R8,R7
   \   000000C0   041090E5           LDR      R1,[R0, #+4]
   \   000000C4   000090E5           LDR      R0,[R0, #+0]
   \   000000C8   000041E0           SUB      R0,R1,R0
   \   000000CC   2001B0E1           LSRS     R0,R0,#+2
   \   000000D0   3B00000A           BEQ      ??PutFloatValue_10
   1393                      SetTimeStamp();
   \   000000D4   0700A0E1           MOV      R0,R7
   \   000000D8   ........           _BLF     ??SetTimeStamp,??SetTimeStamp??rA
   1394                      tankPressures[0]->PutFloatValue(ValueId, NewValue);
   \   000000DC   070098E7           LDR      R0,[R8, +R7]
   \   000000E0   0620A0E1           MOV      R2,R6
   \   000000E4   003090E5           LDR      R3,[R0, #+0]
   \   000000E8   0510A0E1           MOV      R1,R5
   \   000000EC   0300A0E1           MOV      R0,R3
   \   000000F0   A43093E5           LDR      R3,[R3, #+164]
   \   000000F4   343093E5           LDR      R3,[R3, #+52]
   \   000000F8   0FE0A0E1           MOV      LR,PC
   \   000000FC   13FF2FE1           BX       R3
   1395                      tankPressures[0]->SendData();
   \   00000100   070098E7           LDR      R0,[R8, +R7]
   \   00000104   6510A0E3           MOV      R1,#+101
   \   00000108   002090E5           LDR      R2,[R0, #+0]
   \   0000010C   0200A0E1           MOV      R0,R2
   \   00000110   A42092E5           LDR      R2,[R2, #+164]
   \   00000114   402092E5           LDR      R2,[R2, #+64]
   \   00000118   0FE0A0E1           MOV      LR,PC
   \   0000011C   12FF2FE1           BX       R2
   1396                      RefreshData(ValueId);
   \   00000120   A42097E5           LDR      R2,[R7, #+164]
   \   00000124   0510A0E1           MOV      R1,R5
   \   00000128   742092E5           LDR      R2,[R2, #+116]
   \   0000012C   0700A0E1           MOV      R0,R7
   \   00000130   0FE0A0E1           MOV      LR,PC
   \   00000134   12FF2FE1           BX       R2
   \   00000138   210000EA           B        ??PutFloatValue_10
   1397                  }
   1398                  break;
   1399              case SVT_AL_LIMIT_TYPE_PRESS:
   1400                  SetPressureAlarmMode(LimitState(NewValue ));
   \                     ??PutFloatValue_8:
   \   0000013C   0600A0E1           MOV      R0,R6
   \   00000140   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000144   FF1000E2           AND      R1,R0,#0xFF
   \   00000148   0700A0E1           MOV      R0,R7
   \   0000014C   ........           BL       ??SetPressureAlarmMode
   \   00000150   1B0000EA           B        ??PutFloatValue_10
   1401                  break;
   1402              case SVT_HI_IGP_LIMIT:
   1403                  if ( HighIGPPtr ) {
   \                     ??PutFloatValue_6:
   \   00000154   843197E5           LDR      R3,[R7, #+388]
   \                     ??PutFloatValue_11:
   \   00000158   000053E3           CMP      R3,#+0
   \   0000015C   1800000A           BEQ      ??PutFloatValue_10
   1404                      Status = HighIGPPtr->PutFloatValue(SVT_AL_LIMIT, NewValue);
   \   00000160   0300A0E1           MOV      R0,R3
   \   00000164   A43093E5           LDR      R3,[R3, #+164]
   \   00000168   0620A0E1           MOV      R2,R6
   \   0000016C   343093E5           LDR      R3,[R3, #+52]
   \   00000170   0FE0A0E1           MOV      LR,PC
   \   00000174   13FF2FE1           BX       R3
   \   00000178   100000EA           B        ??PutFloatValue_12
   1405                  }
   1406                  break;
   1407              case SVT_HI_PRESS_LIMIT:
   1408                  if ( HighPressurePtr ) {
   \                     ??PutFloatValue_4:
   \   0000017C   743197E5           LDR      R3,[R7, #+372]
   \   00000180   F4FFFFEA           B        ??PutFloatValue_11
   1409                      Status = HighPressurePtr->PutFloatValue(SVT_AL_LIMIT, NewValue);
   1410                  }
   1411                  break;
   1412              case SVT_LO_PRESS_LIMIT:
   1413                  if ( LowPressurePtr ) {
   \                     ??PutFloatValue_5:
   \   00000184   783197E5           LDR      R3,[R7, #+376]
   \                     ??PutFloatValue_13:
   \   00000188   000053E3           CMP      R3,#+0
   \   0000018C   0C00000A           BEQ      ??PutFloatValue_10
   1414                      Status = LowPressurePtr->PutFloatValue(SVT_AL_LIMIT, NewValue);
   \   00000190   0300A0E1           MOV      R0,R3
   \   00000194   A43093E5           LDR      R3,[R3, #+164]
   \   00000198   0620A0E1           MOV      R2,R6
   \   0000019C   343093E5           LDR      R3,[R3, #+52]
   \   000001A0   0FE0A0E1           MOV      LR,PC
   \   000001A4   13FF2FE1           BX       R3
   \   000001A8   040000EA           B        ??PutFloatValue_12
   1415                  }
   1416                  break;
   1417              case SVT_LO_IGP_LIMIT:
   1418                  if ( LowIGPPtr ) {
   \                     ??PutFloatValue_7:
   \   000001AC   883197E5           LDR      R3,[R7, #+392]
   \   000001B0   F4FFFFEA           B        ??PutFloatValue_13
   1419                      Status = LowIGPPtr->PutFloatValue(SVT_AL_LIMIT, NewValue);
   1420                  }
   1421                  break;
   1422              default:
   1423                  Status = PRogramObject::PutFloatValue(ValueId, NewValue);
   \                     ??PutFloatValue_9:
   \   000001B4   0620A0E1           MOV      R2,R6
   \   000001B8   0510A0E1           MOV      R1,R5
   \   000001BC   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \                     ??PutFloatValue_12:
   \   000001C0   0040A0E1           MOV      R4,R0
   1424                  break;
   1425              }
   1426              return (Status);
   \                     ??PutFloatValue_10:
   \   000001C4   0400A0E1           MOV      R0,R4
   \   000001C8   ........           B        ?Subroutine47
   1427          
   1428          }
   1429          
   1430          

   \                                 In segment CODE, align 4, keep-with-next
   1431          int PROTankPressure::PutBitValue(int ValueId, int Index, bool NewValue) {
   \                     ??PutBitValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1432              int Status = E_NO_ERR;
   1433              switch ( ValueId ) {
   \   00000004   74C190E5           LDR      R12,[R0, #+372]
   \   00000008   78E190E5           LDR      LR,[R0, #+376]
   \   0000000C   844190E5           LDR      R4,[R0, #+388]
   \   00000010   885190E5           LDR      R5,[R0, #+392]
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   A080A0E3           MOV      R8,#+160
   \   0000001C   8C8D88E3           ORR      R8,R8,#0x2300
   \   00000020   080051E1           CMP      R1,R8
   \   00000024   01808813           ORRNE    R8,R8,#0x1
   \   00000028   08005111           CMPNE    R1,R8
   \   0000002C   12808813           ORRNE    R8,R8,#0x12
   \   00000030   08005111           CMPNE    R1,R8
   \   00000034   01808812           ADDNE    R8,R8,#+1
   \   00000038   08005111           CMPNE    R1,R8
   \   0000003C   1900000A           BEQ      ??PutBitValue_4
   \   00000040   5F8088E2           ADD      R8,R8,#+95
   \   00000044   080051E1           CMP      R1,R8
   \   00000048   01808812           ADDNE    R8,R8,#+1
   \   0000004C   08005111           CMPNE    R1,R8
   \   00000050   01808813           ORRNE    R8,R8,#0x1
   \   00000054   08005111           CMPNE    R1,R8
   \   00000058   01808812           ADDNE    R8,R8,#+1
   \   0000005C   08005111           CMPNE    R1,R8
   \   00000060   01808813           ORRNE    R8,R8,#0x1
   \   00000064   08005111           CMPNE    R1,R8
   \   00000068   01808812           ADDNE    R8,R8,#+1
   \   0000006C   08005111           CMPNE    R1,R8
   \   00000070   01808813           ORRNE    R8,R8,#0x1
   \   00000074   08005111           CMPNE    R1,R8
   \   00000078   01808812           ADDNE    R8,R8,#+1
   \   0000007C   08005111           CMPNE    R1,R8
   \   00000080   01808813           ORRNE    R8,R8,#0x1
   \   00000084   08005111           CMPNE    R1,R8
   \   00000088   01808812           ADDNE    R8,R8,#+1
   \   0000008C   08005111           CMPNE    R1,R8
   \   00000090   01808813           ORRNE    R8,R8,#0x1
   \   00000094   08005111           CMPNE    R1,R8
   \   00000098   01808812           ADDNE    R8,R8,#+1
   \   0000009C   08005111           CMPNE    R1,R8
   \   000000A0   2100000A           BEQ      ??PutBitValue_5
   \   000000A4   460000EA           B        ??PutBitValue_6
   1434              case SVT_HI_PRESS_ENABLE       :
   1435              case SVT_LO_PRESS_ENABLE       :
   1436              case SVT_HI_IGP_ENABLE         :
   1437              case SVT_LO_IGP_ENABLE         :
   1438                  {
   1439                      AlarmBasic *AlPtr = NULL;
   1440                      switch ( ValueId ) {
   \                     ??PutBitValue_4:
   \   000000A8   A01041E2           SUB      R1,R1,#+160
   \   000000AC   8C1D41E2           SUB      R1,R1,#+8960
   \   000000B0   140051E3           CMP      R1,#+20
   \   000000B4   0F00008A           BHI      ??PutBitValue_7
   \   000000B8   010F8FE2           ADR      R0,??PutBitValue_1
   \   000000BC   0100D0E7           LDRB     R0,[R0, R1]
   \   000000C0   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutBitValue_1:
   \   000000C4   05070C0C           DC8      +5,+7,+12,+12
   \   000000C8   0C0C0C0C           DC8      +12,+12,+12,+12
   \   000000CC   0C0C0C0C           DC8      +12,+12,+12,+12
   \   000000D0   0C0C0C0C           DC8      +12,+12,+12,+12
   \   000000D4   0C0C0C09           DC8      +12,+12,+12,+9
   \   000000D8   0B000000           DC8      +11,+0,+0,+0
   1441                      case SVT_HI_PRESS_ENABLE       :
   1442                          AlPtr = (AlarmBasic *)HighPressurePtr;
   \                     ??PutBitValue_8:
   \   000000DC   0C60A0E1           MOV      R6,R12
   \   000000E0   040000EA           B        ??PutBitValue_7
   1443                          break;
   1444                      case SVT_LO_PRESS_ENABLE       :
   1445                          AlPtr = (AlarmBasic *)LowPressurePtr;
   \                     ??PutBitValue_9:
   \   000000E4   0E60A0E1           MOV      R6,LR
   \   000000E8   020000EA           B        ??PutBitValue_7
   1446                          break;
   1447                      case SVT_HI_IGP_ENABLE  :
   1448                          AlPtr = (AlarmBasic *)HighIGPPtr;
   \                     ??PutBitValue_10:
   \   000000EC   0460A0E1           MOV      R6,R4
   \   000000F0   000000EA           B        ??PutBitValue_7
   1449                          break;
   1450                      case SVT_LO_IGP_ENABLE  :
   1451                          AlPtr = (AlarmBasic *)LowIGPPtr;
   \                     ??PutBitValue_11:
   \   000000F4   0560A0E1           MOV      R6,R5
   1452                          break;
   1453                      }
   1454                      if ( AlPtr ) {
   \                     ??PutBitValue_7:
   \   000000F8   000056E3           CMP      R6,#+0
   \   000000FC   0800000A           BEQ      ??PutBitValue_12
   1455                          Status = AlPtr->PutBitValue(SVT_AL_ENABLE, 0, NewValue);
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   3E10A0E3           MOV      R1,#+62
   \   00000108   8C1D81E3           ORR      R1,R1,#0x2300
   \                     ??PutBitValue_13:
   \   0000010C   A44096E5           LDR      R4,[R6, #+164]
   \   00000110   0600A0E1           MOV      R0,R6
   \   00000114   384094E5           LDR      R4,[R4, #+56]
   \   00000118   0FE0A0E1           MOV      LR,PC
   \   0000011C   14FF2FE1           BX       R4
   \   00000120   280000EA           B        ??PutBitValue_14
   1456                      } else {
   1457                          Status = GETVAL_NOT_AVAILABLE;
   \                     ??PutBitValue_12:
   \   00000124   0100A0E3           MOV      R0,#+1
   \   00000128   260000EA           B        ??PutBitValue_14
   1458                      }
   1459                  }
   1460                  break;
   1461              case SVT_HI_PRESS_AL_ACK       :
   1462              case SVT_LO_PRESS_AL_ACK       :
   1463              case SVT_HI_PRESS_VAC_AL_ACK   :
   1464              case SVT_LO_PRESS_VAC_AL_ACK   :
   1465              case SVT_HI_IGP_AL_ACK         :
   1466              case SVT_LO_IGP_AL_ACK         :
   1467              case SVT_HI_VAP_RET_AL_ACK     :
   1468              case SVT_LO_VAP_RET_AL_ACK     :
   1469              case SVT_XTRA_HI_PRESS_AL_ACK1 :
   1470              case SVT_XTRA_LO_PRESS_AL_ACK1 :
   1471              case SVT_XTRA_HI_PRESS_AL_ACK2 :
   1472              case SVT_XTRA_LO_PRESS_AL_ACK2 :
   1473                  {
   1474                      AlarmBasic *AlPtr = NULL;
   1475                      int        ValKey = SVT_NOT_DEFINED;
   1476          
   1477                      switch ( ValueId ) {
   \                     ??PutBitValue_5:
   \   0000012C   131041E2           SUB      R1,R1,#+19
   \   00000130   901D41E2           SUB      R1,R1,#+9216
   \   00000134   0B0051E3           CMP      R1,#+11
   \   00000138   1C00008A           BHI      ??PutBitValue_15
   \   0000013C   012F8FE2           ADR      R2,??PutBitValue_2
   \   00000140   0120D2E7           LDRB     R2,[R2, R1]
   \   00000144   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PutBitValue_2:
   \   00000148   02040608           DC8      +2,+4,+6,+8
   \   0000014C   0A0C0E10           DC8      +10,+12,+14,+16
   \   00000150   12141618           DC8      +18,+20,+22,+24
   1478                      case SVT_HI_PRESS_AL_ACK       :
   1479                          AlPtr = (AlarmBasic *)HighPressurePtr;
   \                     ??PutBitValue_16:
   \   00000154   0C60A0E1           MOV      R6,R12
   \   00000158   140000EA           B        ??PutBitValue_15
   1480                          break;
   1481                      case SVT_LO_PRESS_AL_ACK       :
   1482                          AlPtr = (AlarmBasic *)LowPressurePtr;
   \                     ??PutBitValue_17:
   \   0000015C   0E60A0E1           MOV      R6,LR
   \   00000160   120000EA           B        ??PutBitValue_15
   1483                          break;
   1484                      case SVT_HI_PRESS_VAC_AL_ACK  :
   1485                          AlPtr = (AlarmBasic *)HighPressVacPtr;
   \                     ??PutBitValue_18:
   \   00000164   7C6190E5           LDR      R6,[R0, #+380]
   \   00000168   100000EA           B        ??PutBitValue_15
   1486                          break;
   1487                      case SVT_LO_PRESS_VAC_AL_ACK  :
   1488                          AlPtr = (AlarmBasic *)LowPressVacPtr;
   \                     ??PutBitValue_19:
   \   0000016C   806190E5           LDR      R6,[R0, #+384]
   \   00000170   0E0000EA           B        ??PutBitValue_15
   1489                          break;
   1490                      case SVT_HI_IGP_AL_ACK  :
   1491                          AlPtr = (AlarmBasic *)HighIGPPtr;
   \                     ??PutBitValue_20:
   \   00000174   0460A0E1           MOV      R6,R4
   \   00000178   0C0000EA           B        ??PutBitValue_15
   1492                          break;
   1493                      case SVT_LO_IGP_AL_ACK  :
   1494                          AlPtr = (AlarmBasic *)LowIGPPtr;
   \                     ??PutBitValue_21:
   \   0000017C   0560A0E1           MOV      R6,R5
   \   00000180   0A0000EA           B        ??PutBitValue_15
   1495                          break;
   1496                      case SVT_HI_VAP_RET_AL_ACK  :
   1497                          AlPtr = (AlarmBasic *)HighVapRetPtr;
   \                     ??PutBitValue_22:
   \   00000184   8C6190E5           LDR      R6,[R0, #+396]
   \   00000188   080000EA           B        ??PutBitValue_15
   1498                          break;
   1499                      case SVT_LO_VAP_RET_AL_ACK  :
   1500                          AlPtr = (AlarmBasic *)LowVapRetPtr;
   \                     ??PutBitValue_23:
   \   0000018C   906190E5           LDR      R6,[R0, #+400]
   \   00000190   060000EA           B        ??PutBitValue_15
   1501                          break;
   1502                      case SVT_XTRA_HI_PRESS_AL_ACK1  :
   1503                          AlPtr = (AlarmBasic *)IntHighPressurePtr1;
   \                     ??PutBitValue_24:
   \   00000194   946190E5           LDR      R6,[R0, #+404]
   \   00000198   040000EA           B        ??PutBitValue_15
   1504                          break;
   1505                      case SVT_XTRA_LO_PRESS_AL_ACK1  :
   1506                          AlPtr = (AlarmBasic *)IntLowPressurePtr1;
   \                     ??PutBitValue_25:
   \   0000019C   9C6190E5           LDR      R6,[R0, #+412]
   \   000001A0   020000EA           B        ??PutBitValue_15
   1507                          break;
   1508                      case SVT_XTRA_HI_PRESS_AL_ACK2  :
   1509                          AlPtr = (AlarmBasic *)IntHighPressurePtr2;
   \                     ??PutBitValue_26:
   \   000001A4   986190E5           LDR      R6,[R0, #+408]
   \   000001A8   000000EA           B        ??PutBitValue_15
   1510                          break;
   1511                      case SVT_XTRA_LO_PRESS_AL_ACK2  :
   1512                          AlPtr = (AlarmBasic *)IntLowPressurePtr2;
   \                     ??PutBitValue_27:
   \   000001AC   A06190E5           LDR      R6,[R0, #+416]
   1513                          break;
   1514                      }
   1515                      if ( AlPtr ) {
   \                     ??PutBitValue_15:
   \   000001B0   000056E3           CMP      R6,#+0
   \   000001B4   DAFFFF0A           BEQ      ??PutBitValue_12
   1516                          Status = AlPtr->PutBitValue(SVT_AL_ACKNOWLEDGE, 0, NewValue);
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   8D1DA0E3           MOV      R1,#+9024
   \   000001C0   D1FFFFEA           B        ??PutBitValue_13
   1517                      } else {
   1518                          Status = GETVAL_NOT_AVAILABLE;
   1519                      }
   1520                  }
   1521                  break;
   1522              default:
   1523                  Status = PRogramObject::PutBitValue(ValueId, Index, NewValue);
   \                     ??PutBitValue_6:
   \   000001C4   ........           _BLF     ??PutBitValue_3,??PutBitValue??rA
   1524                  break;
   1525              }
   1526              return (Status);
   \                     ??PutBitValue_14:
   \   000001C8   ........           B        ?Subroutine47
   1527          }
   1528          
   1529          
   1530          

   \                                 In segment DATA_I, align 4, align-sorted
   1531          ValueList PROTankPressure::TankPressValueList[] =  {
   \                     ??TankPressValueList:
   \   00000000                      DS8 240
   \   000000F0                      REQUIRE `?<Initializer for TankPressValueList>`
   1532              { L_WORD304, L_WORD237, SVT_BLANK },                       //  {"Unused"    ,"",SVT_BLANK},
   1533              { L_WORD311, L_WORD237, SVT_PRESSURE },                    //  {"Pressure"  ,"",SVT_PRESSURE},
   1534              { L_WORD312, L_WORD237, SVT_HI_PRESS_LIMIT },              //  {"High Press","",SVT_HI_PRESS_LIMIT},
   1535              { L_WORD313, L_WORD237, SVT_LO_PRESS_LIMIT },              //  {"Low Press" ,"",SVT_LO_PRESS_LIMIT},
   1536          
   1537              { L_WORD1051, L_WORD1053, SVT_HI_PRESS_VAC_LIMIT },          //  {"Unused"    ,"",SVT_BLANK},
   1538              { L_WORD1052, L_WORD1054, SVT_LO_PRESS_VAC_LIMIT },          //  {"Low Press" ,"",SVT_LO_PRESS_LIMIT},
   1539              { L_WORD1099, L_WORD1101, SVT_HI_IGP_LIMIT },               //  {"Unused"    ,"",SVT_BLANK},
   1540              { L_WORD1100, L_WORD1102, SVT_LO_IGP_LIMIT },               //  {"Low Press" ,"",SVT_LO_PRESS_LIMIT},
   1541              { L_WORD1055, L_WORD1057, SVT_HI_VAP_RET_LIMIT   },          //  {"Unused"    ,"",SVT_BLANK},
   1542              { L_WORD1056, L_WORD1058, SVT_LO_VAP_RET_LIMIT   },          //  {"Low Press" ,"",SVT_LO_PRESS_LIMIT},
   1543          
   1544              { L_WORD899, L_WORD901, SVT_XTRA_HI_PRESS_LIMIT1 },        // {"XHigh Press","XHiPr",SVT_XTRA_HI_PRESS_LIMIT1},
   1545              { L_WORD900, L_WORD902, SVT_XTRA_LO_PRESS_LIMIT1 },        // {"XLow Press" ,"XLoPr",SVT_XTRA_LO_PRESS_LIMIT1},
   1546              { L_WORD1018, L_WORD1020, SVT_XTRA_HI_PRESS_LIMIT2 },        // {"XHigh Press2","XHiPr2",SVT_XTRA_HI_PRESS_LIMIT1},
   1547              { L_WORD1019, L_WORD1021, SVT_XTRA_LO_PRESS_LIMIT2 },        // {"XLow Press2" ,"XLoPr2",SVT_XTRA_LO_PRESS_LIMIT1},
   1548          
   1549              { L_WORD911, L_WORD915, SVT_AL_LIMIT_TYPE_PRESS },           // {"Press Al State","PAlStat",SVT_HI_PRESS_LIMIT},
   1550              { L_WORD856, L_WORD857, SVT_TANK_STATE_STR },                // {"Operation mode","Op Mode",SVT_TANK_STATE_STR},
   1551          
   1552          
   1553              { L_WORD320, L_WORD351, SVT_TP },                            // {"Top Press" ,"TP"  ,SVT_TP},
   1554              { L_WORD324, L_WORD355, SVT_TP_GAIN },                       // {"TP Gain"   ,"TPGn",SVT_TP_GAIN},
   1555              { L_WORD328, L_WORD359, SVT_TP_OFFSET },                     // {"TP Offset" ,"TPOf",SVT_TP_OFFSET},
   1556              { L_WORD820, L_WORD820, SVT_TP_ENABLE_TEXT },
   1557          
   1558          };
   1559          

   \                                 In segment CODE, align 4, keep-with-next
   1560          ValueList* PROTankPressure::GetValueInfoTable(int &Entries, int Index) {
   1561              return GetValueInfoTableStatic(Entries, Index);
   \                     ??GetValueInfoTable:
   \   00000000   1400A0E3           MOV      R0,#+20
   \   00000004   000081E5           STR      R0,[R1, #+0]
   \   00000008   ........           B        ?Subroutine52
   1562          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine52:
   \   00000000   00009FE5           LDR      R0,??Subroutine52_0  ;; ??TankPressValueList
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine52_0:
   \   00000008   ........           DC32     ??TankPressValueList

   \                                 In segment CODE, align 4, keep-with-next
   1563          ValueList* PROTankPressure::GetValueInfoTableStatic(int &Entries, int Index) {
   1564              Entries = NELEMENTS(TankPressValueList);
   \                     ??GetValueInfoTableStatic:
   \   00000000   1410A0E3           MOV      R1,#+20
   \   00000004   001080E5           STR      R1,[R0, #+0]
   1565              return (TankPressValueList);
   \   00000008                      REQUIRE ?Subroutine52
   \   00000008                      ;; // Fall through to label ?Subroutine52
   1566          }
   1567          
   1568          

   \                                 In segment CODE, align 4, keep-with-next
   1569          void PROTankPressure::Calculate(void) {
   \                     ??Calculate:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1570              if ( !tankPressures.empty() ) {
   \   00000008   585FA0E3           MOV      R5,#+352
   \   0000000C   040085E0           ADD      R0,R5,R4
   \   00000010   ........           _BLF     ??empty,??empty??rA
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3700001A           BNE      ??Calculate_1
   1571                  float PSum      = 0.0;
   \   0000001C   00A0A0E3           MOV      R10,#+0
   1572                  int   Cnt       = 0;
   \   00000020   00B0A0E3           MOV      R11,#+0
   1573                  int   HWFailCnt = 0;
   \   00000024   0A60A0E1           MOV      R6,R10
   1574                  for ( unsigned i = 0; i < tankPressures.size(); i++ ) {
   \   00000028   0680A0E1           MOV      R8,R6
   \   0000002C   010000EA           B        ??Calculate_2
   1575                      float tmpPress = tankPressures[i]->Calculate();
   1576                      if ( tankPressures[i]->ResultOK ) {
   1577                          PSum += tmpPress;
   1578                          Cnt++;
   1579                      } else {
   1580                          HWFailCnt++;
   \                     ??Calculate_3:
   \   00000030   016086E2           ADD      R6,R6,#+1
   1581                      }
   \                     ??Calculate_4:
   \   00000034   018088E2           ADD      R8,R8,#+1
   \                     ??Calculate_2:
   \   00000038   040085E0           ADD      R0,R5,R4
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000041E0           SUB      R0,R1,R0
   \   00000048   200158E1           CMP      R8,R0, LSR #+2
   \   0000004C   1000002A           BCS      ??Calculate_5
   \   00000050   040095E7           LDR      R0,[R5, +R4]
   \   00000054   081190E7           LDR      R1,[R0, +R8, LSL #+2]
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   A41091E5           LDR      R1,[R1, #+164]
   \   00000060   601091E5           LDR      R1,[R1, #+96]
   \   00000064   0FE0A0E1           MOV      LR,PC
   \   00000068   11FF2FE1           BX       R1
   \   0000006C   041095E7           LDR      R1,[R5, +R4]
   \   00000070   081191E7           LDR      R1,[R1, +R8, LSL #+2]
   \   00000074   3611D1E5           LDRB     R1,[R1, #+310]
   \   00000078   000051E3           CMP      R1,#+0
   \   0000007C   EBFFFF0A           BEQ      ??Calculate_3
   \   00000080   0A10A0E1           MOV      R1,R10
   \   00000084   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000088   00A0A0E1           MOV      R10,R0
   \   0000008C   01B08BE2           ADD      R11,R11,#+1
   \   00000090   E7FFFFEA           B        ??Calculate_4
   1582                  }
   1583                  if ( Cnt ) {
   \                     ??Calculate_5:
   \   00000094   0180A0E3           MOV      R8,#+1
   \   00000098   00005BE3           CMP      R11,#+0
   \   0000009C   0600000A           BEQ      ??Calculate_6
   1584                      HasPressure = true;
   \   000000A0   0190A0E3           MOV      R9,#+1
   1585                      Pressure    = PSum / Cnt;
   \   000000A4   0B00A0E1           MOV      R0,R11
   \   000000A8   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000000AC   0010A0E1           MOV      R1,R0
   \   000000B0   0A00A0E1           MOV      R0,R10
   \   000000B4   ........           _BLF     __fDiv,??__fDiv??rA
   \   000000B8   010000EA           B        ??Calculate_7
   1586                  } else {
   1587                      Pressure    = 0.0;
   \                     ??Calculate_6:
   \   000000BC   0000A0E3           MOV      R0,#+0
   1588                      HasPressure = false;
   \   000000C0   0090A0E3           MOV      R9,#+0
   \                     ??Calculate_7:
   \   000000C4   6C0184E5           STR      R0,[R4, #+364]
   \   000000C8   5891C4E5           STRB     R9,[R4, #+344]
   1589                  }
   1590                  if ( HWFailCnt == int(tankPressures.size()) ) {
   \   000000CC   040085E0           ADD      R0,R5,R4
   \   000000D0   041090E5           LDR      R1,[R0, #+4]
   \   000000D4   000090E5           LDR      R0,[R0, #+0]
   \   000000D8   000041E0           SUB      R0,R1,R0
   \   000000DC   200156E1           CMP      R6,R0, LSR #+2
   \   000000E0   0300001A           BNE      ??Calculate_8
   1591                      HWFailure = true;
   \   000000E4   3C80C4E5           STRB     R8,[R4, #+60]
   1592                      SetAlarmsToNormal(AlarmSet);
   \   000000E8   E40084E2           ADD      R0,R4,#+228
   \   000000EC   ........           _BLF     ??SetAlarmsToNormal,??SetAlarmsToNormal??rA
   \   000000F0   010000EA           B        ??Calculate_1
   1593                  } else {
   1594                      HWFailure = false;
   \                     ??Calculate_8:
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   3C00C4E5           STRB     R0,[R4, #+60]
   1595                  }
   1596          
   1597              }
   1598              if ( CreatedFromThisTank ) {
   1599                  // Can inform to tank object here
   1600              }
   1601              SendData();
   \                     ??Calculate_1:
   \   000000FC   A42094E5           LDR      R2,[R4, #+164]
   \   00000100   6510A0E3           MOV      R1,#+101
   \   00000104   402092E5           LDR      R2,[R2, #+64]
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   0FE0A0E1           MOV      LR,PC
   \   00000110   12FF2FE1           BX       R2
   1602          }
   \   00000114   ........           B        ?Subroutine48
   1603          

   \                                 In segment CODE, align 4, keep-with-next
   1604          void PROTankPressure::SimCalculate(void) {
   \                     ??SimCalculate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1605              HWFailure = false;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   3C00C4E5           STRB     R0,[R4, #+60]
   1606              HasPressure = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   5801C4E5           STRB     R0,[R4, #+344]
   1607              IsNewData   = true;
   \   00000018   E000C4E5           STRB     R0,[R4, #+224]
   1608              if ( PROProjectInfo::SimulateFixedValues ) {
   \   0000001C   ........           LDR      R0,??Subroutine51_0  ;; ??SimulateFixedValues
   \   00000020   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500000A           BEQ      ??SimCalculate_1
   1609                  Pressure = (IDNumber & 0xFFF);
   \   0000002C   9C0094E5           LDR      R0,[R4, #+156]
   \   00000030   000AA0E1           LSL      R0,R0,#+20
   \   00000034   200AA0E1           LSR      R0,R0,#+20
   \   00000038   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   0000003C   6C0184E5           STR      R0,[R4, #+364]
   \   00000040   040000EA           B        ??SimCalculate_2
   1610              } else {
   1611                  Calculate();
   \                     ??SimCalculate_1:
   \   00000044   A41094E5           LDR      R1,[R4, #+164]
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   641091E5           LDR      R1,[R1, #+100]
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   11FF2FE1           BX       R1
   1612                  /*
   1613                  Pressure += SimulatorSign * (rand() % 10) / 100.0;
   1614                  //if ( Pressure > 1.6 || Pressure < -1.0 ) {
   1615                  if ( Pressure > 60.0 || Pressure < -0.5 ) {
   1616                      SimulatorSign = -SimulatorSign;
   1617                  }
   1618                  */
   1619              }
   1620          }
   \                     ??SimCalculate_2:
   \   00000058                      REQUIRE ?Subroutine51
   \   00000058                      ;; // Fall through to label ?Subroutine51
   1621          
   1622          

   \                                 In segment CODE, align 4, keep-with-next
   1623          int PROTankPressure::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   33402DE9           PUSH     {R0,R1,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1624              int                    ErrorStatus = E_OK;
   1625              ANPRO10_CommandHeading *pCH        = (ANPRO10_CommandHeading *)data;
   1626              switch ( pCH->CommandNo ) {
   \   0000000C   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000010   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000014   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000018   650040E2           SUB      R0,R0,#+101
   \   0000001C   020050E3           CMP      R0,#+2
   \   00000020   3600008A           BHI      ??ReceiveData_2
   \   00000024   011F8FE2           ADR      R1,??ReceiveData_1
   \   00000028   0010D1E7           LDRB     R1,[R1, R0]
   \   0000002C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ReceiveData_1:
   \   00000030   001B1E00           DC8      +0,+27,+30,+0
   1627              case CMD_GENERIC_REALTIME_DATA:
   1628                  {
   1629                      ANPRO10_COMMAND_2104  *pData = (ANPRO10_COMMAND_2104 *)data;
   1630                      HasPressure = pData->HasPressure;
   \                     ??ReceiveData_3:
   \   00000034   0800D5E5           LDRB     R0,[R5, #+8]
   1631                      HWFailure   = pData->HWFailure;
   1632                      IsNewData   = pData->IsNewData;
   1633                      Pressure    = pData->Pressure;
   \   00000038   0D10A0E1           MOV      R1,SP
   \   0000003C   5801C4E5           STRB     R0,[R4, #+344]
   \   00000040   0900D5E5           LDRB     R0,[R5, #+9]
   \   00000044   3C00C4E5           STRB     R0,[R4, #+60]
   \   00000048   0E00D5E5           LDRB     R0,[R5, #+14]
   \   0000004C   E000C4E5           STRB     R0,[R4, #+224]
   \   00000050   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_4:
   \   00000054   0A2085E2           ADD      R2,R5,#+10
   \   00000058   0220D0E7           LDRB     R2,[R0, +R2]
   \   0000005C   0120C0E7           STRB     R2,[R0, +R1]
   \   00000060   010080E2           ADD      R0,R0,#+1
   \   00000064   040050E3           CMP      R0,#+4
   \   00000068   F9FFFFBA           BLT      ??ReceiveData_4
   \   0000006C   00009DE5           LDR      R0,[SP, #+0]
   \   00000070   6C0184E5           STR      R0,[R4, #+364]
   1634                      if ( CreatedFromThisTank ) {
   \   00000074   5C2194E5           LDR      R2,[R4, #+348]
   \   00000078   000052E3           CMP      R2,#+0
   \   0000007C   0500000A           BEQ      ??ReceiveData_5
   1635                          // Can update tank value here
   1636                          CreatedFromThisTank->SetPressure(Pressure);
   \   00000080   0010A0E1           MOV      R1,R0
   \   00000084   0200A0E1           MOV      R0,R2
   \   00000088   A42092E5           LDR      R2,[R2, #+164]
   \   0000008C   902092E5           LDR      R2,[R2, #+144]
   \   00000090   0FE0A0E1           MOV      LR,PC
   \   00000094   12FF2FE1           BX       R2
   1637                      }
   1638                      ErrorStatus = E_OK;
   \                     ??ReceiveData_5:
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   180000EA           B        ??ReceiveData_6
   1639                  }
   1640                  break;
   1641              case CMD_GENERIC_STATIC_DATA:
   1642                  {
   1643                      ANPRO10_COMMAND_2105  *pData = (ANPRO10_COMMAND_2105 *)data;
   1644                      VapourAlarmSet = (LimitState)pData->VapourAlarmSet;
   \                     ??ReceiveData_7:
   \   000000A0   0800D5E5           LDRB     R0,[R5, #+8]
   \   000000A4   7001C4E5           STRB     R0,[R4, #+368]
   \   000000A8   FAFFFFEA           B        ??ReceiveData_5
   1645                      ErrorStatus = E_OK;
   1646                  }
   1647                  break;
   1648              case CMD_GENERIC_MODBUS_RT_DATA:
   1649                  {
   1650                      ANPRO10_COMMAND_2751 *pData = (ANPRO10_COMMAND_2751 *)data;
   1651                      SetTimeStamp();
   \                     ??ReceiveData_8:
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           _BLF     ??SetTimeStamp,??SetTimeStamp??rA
   1652                      PutFloatValue(pData->ValueKey, pData->Value);
   \   000000B4   A40094E5           LDR      R0,[R4, #+164]
   \   000000B8   04108DE2           ADD      R1,SP,#+4
   \   000000BC   343080E2           ADD      R3,R0,#+52
   \   000000C0   0000A0E3           MOV      R0,#+0
   \                     ??ReceiveData_9:
   \   000000C4   0A2085E2           ADD      R2,R5,#+10
   \   000000C8   0220D0E7           LDRB     R2,[R0, +R2]
   \   000000CC   0120C0E7           STRB     R2,[R0, +R1]
   \   000000D0   010080E2           ADD      R0,R0,#+1
   \   000000D4   040050E3           CMP      R0,#+4
   \   000000D8   F9FFFFBA           BLT      ??ReceiveData_9
   \   000000DC   0900D5E5           LDRB     R0,[R5, #+9]
   \   000000E0   0810D5E5           LDRB     R1,[R5, #+8]
   \   000000E4   04209DE5           LDR      R2,[SP, #+4]
   \   000000E8   003093E5           LDR      R3,[R3, #+0]
   \   000000EC   001481E1           ORR      R1,R1,R0, LSL #+8
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   0FE0A0E1           MOV      LR,PC
   \   000000F8   13FF2FE1           BX       R3
   \   000000FC   E5FFFFEA           B        ??ReceiveData_5
   1653                      ErrorStatus = E_OK;
   1654                  }
   1655                  break;
   1656              default:
   1657                  ErrorStatus = E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_2:
   \   00000100   0100A0E3           MOV      R0,#+1
   1658              }
   1659              return ErrorStatus;
   \                     ??ReceiveData_6:
   \   00000104   3640BDE8           POP      {R1,R2,R4,R5,LR}
   \   00000108   1EFF2FE1           BX       LR               ;; return
   1660          }
   1661          

   \                                 In segment CODE, align 4, keep-with-next
   1662          int PROTankPressure::SendData(U16 cmd) {
   \                     ??SendData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   1663              switch ( cmd ) {
   \   00000008   0E20A0E3           MOV      R2,#+14
   \   0000000C   FF30A0E3           MOV      R3,#+255
   \   00000010   00C0A0E3           MOV      R12,#+0
   \   00000014   651051E2           SUBS     R1,R1,#+101
   \   00000018   0200000A           BEQ      ??SendData_1
   \   0000001C   011051E2           SUBS     R1,R1,#+1
   \   00000020   1F00000A           BEQ      ??SendData_2
   \   00000024   370000EA           B        ??SendData_3
   1664              case CMD_GENERIC_REALTIME_DATA:
   1665                  {
   1666                      QueueANPRO10_COMMAND_2104 Cmd;
   1667                      Cmd.TxInfo.Port     = NULL;
   \                     ??SendData_1:
   \   00000028   14C08DE5           STR      R12,[SP, #+20]
   1668                      Cmd.TxInfo.rxAddr   = DEVICE_BROADCAST_ADDR;
   \   0000002C   1830CDE5           STRB     R3,[SP, #+24]
   1669                      Cmd.TxInfo.rxId     = DEVICE_BROADCAST_TXU;
   \   00000030   1920CDE5           STRB     R2,[SP, #+25]
   1670                      Cmd.Data.ObjectId   = IDNumber;
   \   00000034   9C1090E5           LDR      R1,[R0, #+156]
   1671                      Cmd.Data.ndb        = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   00000038   0B20A0E3           MOV      R2,#+11
   \   0000003C   1E10CDE5           STRB     R1,[SP, #+30]
   \   00000040   2114A0E1           LSR      R1,R1,#+8
   \   00000044   1F10CDE5           STRB     R1,[SP, #+31]
   \   00000048   2114A0E1           LSR      R1,R1,#+8
   \   0000004C   2010CDE5           STRB     R1,[SP, #+32]
   \   00000050   2114A0E1           LSR      R1,R1,#+8
   \   00000054   2110CDE5           STRB     R1,[SP, #+33]
   \   00000058   BC21CDE1           STRH     R2,[SP, #+28]
   1672                      Cmd.Data.CommandNo  = CMD_GENERIC_REALTIME_DATA;
   \   0000005C   6520A0E3           MOV      R2,#+101
   \   00000060   BA21CDE1           STRH     R2,[SP, #+26]
   1673                      Cmd.Data.HasPressure = HasPressure;
   \   00000064   5821D0E5           LDRB     R2,[R0, #+344]
   \   00000068   2220CDE5           STRB     R2,[SP, #+34]
   1674                      Cmd.Data.HWFailure  = HWFailure;
   \   0000006C   3C20D0E5           LDRB     R2,[R0, #+60]
   \   00000070   2320CDE5           STRB     R2,[SP, #+35]
   1675                      Cmd.Data.IsNewData  = IsNewData;
   \   00000074   E020D0E5           LDRB     R2,[R0, #+224]
   \   00000078   2820CDE5           STRB     R2,[SP, #+40]
   1676                      Cmd.Data.Pressure   = Pressure;
   \   0000007C   6C0190E5           LDR      R0,[R0, #+364]
   \   00000080   24008DE5           STR      R0,[SP, #+36]
   1677                      bool sent = ANPRO10SendNormal(&Cmd);
   1678                      if ( !sent ) return (E_QUEUE_FULL);
   \   00000084   14008DE2           ADD      R0,SP,#+20
   \   00000088   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0100001A           BNE      ??SendData_4
   \                     ??SendData_5:
   \   00000094   0300A0E3           MOV      R0,#+3
   \   00000098   1B0000EA           B        ??SendData_6
   1679                      else return (E_OK);
   \                     ??SendData_4:
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   190000EA           B        ??SendData_6
   1680          
   1681                  }
   1682              case CMD_GENERIC_STATIC_DATA:
   1683                  {
   1684                      QueueANPRO10_COMMAND_2105 Cmd;
   1685                      Cmd.TxInfo.Port         = NULL;
   \                     ??SendData_2:
   \   000000A4   00C08DE5           STR      R12,[SP, #+0]
   1686                      Cmd.TxInfo.rxAddr       = DEVICE_BROADCAST_ADDR;
   \   000000A8   0430CDE5           STRB     R3,[SP, #+4]
   1687                      Cmd.TxInfo.rxId         = DEVICE_BROADCAST_TXU;
   \   000000AC   0520CDE5           STRB     R2,[SP, #+5]
   1688                      Cmd.Data.ObjectId       = IDNumber;
   \   000000B0   9C1090E5           LDR      R1,[R0, #+156]
   1689                      Cmd.Data.ndb            = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   000000B4   0820A0E3           MOV      R2,#+8
   \   000000B8   0A10CDE5           STRB     R1,[SP, #+10]
   \   000000BC   2114A0E1           LSR      R1,R1,#+8
   \   000000C0   0B10CDE5           STRB     R1,[SP, #+11]
   \   000000C4   2114A0E1           LSR      R1,R1,#+8
   \   000000C8   0C10CDE5           STRB     R1,[SP, #+12]
   \   000000CC   2114A0E1           LSR      R1,R1,#+8
   \   000000D0   0D10CDE5           STRB     R1,[SP, #+13]
   \   000000D4   B820CDE1           STRH     R2,[SP, #+8]
   1690                      Cmd.Data.CommandNo      = CMD_GENERIC_STATIC_DATA;
   \   000000D8   6620A0E3           MOV      R2,#+102
   \   000000DC   B620CDE1           STRH     R2,[SP, #+6]
   1691                      Cmd.Data.VapourAlarmSet = unsigned(VapourAlarmSet);
   \   000000E0   7001D0E5           LDRB     R0,[R0, #+368]
   \   000000E4   0E00CDE5           STRB     R0,[SP, #+14]
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   0F00CDE5           STRB     R0,[SP, #+15]
   \   000000F0   B001CDE1           STRH     R0,[SP, #+16]
   1692                      bool sent = ANPRO10SendNormal(&Cmd);
   1693                      if ( !sent ) return (E_QUEUE_FULL);
   \   000000F4   0D00A0E1           MOV      R0,SP
   \   000000F8   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   E5FFFF1A           BNE      ??SendData_4
   \   00000104   E2FFFFEA           B        ??SendData_5
   1694                      else return (E_OK);
   1695                  }
   1696              default:
   1697                  return (E_UNKNOWN_COMMAND);
   \                     ??SendData_3:
   \   00000108   0100A0E3           MOV      R0,#+1
   \                     ??SendData_6:
   \   0000010C   2CD08DE2           ADD      SP,SP,#+44
   \   00000110   0040BDE8           POP      {LR}
   \   00000114   1EFF2FE1           BX       LR               ;; return
   1698              };
   1699          }
   1700          

   \                                 In segment CODE, align 4, keep-with-next
   1701          int PROTankPressure::WriteXML(char *StrBuf, bool IncAlarms) {
   1702              return 0;
   \                     ??WriteXML:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1703              /*
   1704              AnsiString UnitStr;
   1705              AnsiString PressureStr= LibGetValue(SVT_PRESSURE ,this,0,&UnitStr)+SpaceStr+UnitStr;
   1706              int  tmpPtr = sprintf(StrBuf,"\t<Packet>\r\n");
   1707              tmpPtr += sprintf(&StrBuf[tmpPtr],"\t\t<PacketID>Freevalue</PacketID>\r\n");
   1708              tmpPtr += sprintf(&StrBuf[tmpPtr],"\t\t<TagID>%s</TagID>\r\n",TagName.c_str());
   1709              tmpPtr += sprintf(&StrBuf[tmpPtr],"\t\t<Value>%s</Value>\r\n",PressureStr.c_str());
   1710              tmpPtr += sprintf(&StrBuf[tmpPtr],"\t</Packet>\r\n");
   1711              return tmpPtr;
   1712              */
   1713          }
   1714          
   1715          /*
   1716          Can add enable/disable based on the tank operation mode.
   1717          
   1718          */

   \                                 In segment CODE, align 4, keep-with-next
   1719          void PROTankPressure::SetState(TankState newState) {
   1720              switch ( newState ) {
   \                     ??SetState:
   \   00000000   040051E3           CMP      R1,#+4
   1721              case tSeaGoing     :
   1722              case tLoad         :
   1723              case tDischarge    :
   1724              case tTankCleaning :
   1725              case tUndefined    :
   1726                  State = newState;
   \   00000004   4811C095           STRBLS   R1,[R0, #+328]
   1727                  break;
   1728              default:
   1729                  break;
   1730              }
   1731          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
   1732          

   \                                 In segment CODE, align 4, keep-with-next
   1733          AnsiString PROTankPressure::ZeroSetAllTankPressureSensors(bool Local) {
   \                     ??ZeroSetAllTankPressureSensors:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1734              AnsiString                         TmpString;
   1735              set<PRogramObjectBase *>::iterator pBIt;
   1736              for ( pBIt = ObjectSet.begin(); pBIt != ObjectSet.end(); pBIt++ ) {
   \   00000004   ........           LDR      R6,??DataTable69  ;; ??ObjectSet
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000018   007096E5           LDR      R7,[R6, #+0]
   \   0000001C   100000EA           B        ??ZeroSetAllTankPressureSensors_1
   1737                  TmpString += ((PROTankPressure *)(*pBIt))->ZeroSetTankPressureSensor(Local);
   \                     ??ZeroSetAllTankPressureSensors_2:
   \   00000020   100097E5           LDR      R0,[R7, #+16]
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   ........           BL       ??ZeroSetTankPressureSensor
   \   00000030   ........           LDR      R0,??DataTable70  ;; ??npos
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??append,??append??rA
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   1738              }
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000060   0070A0E1           MOV      R7,R0
   \                     ??ZeroSetAllTankPressureSensors_1:
   \   00000064   060057E1           CMP      R7,R6
   \   00000068   ECFFFF1A           BNE      ??ZeroSetAllTankPressureSensors_2
   1739              return (TmpString);
   \   0000006C   1CD08DE2           ADD      SP,SP,#+28
   \   00000070                      REQUIRE ?Subroutine45
   \   00000070                      ;; // Fall through to label ?Subroutine45
   1740          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine45:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1741          

   \                                 In segment CODE, align 4, keep-with-next
   1742          void PROTankPressure::SetPressureAlarmMode(LimitState NewMode) {
   \                     ??SetPressureAlarmMode:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   4BDF4DE2           SUB      SP,SP,#+300
   1743              if ( NewMode < pLimitUndefined ) {
   \   00000008   050051E3           CMP      R1,#+5
   \   0000000C   6D00002A           BCS      ??SetPressureAlarmMode_1
   1744                  VapourAlarmSet = NewMode;
   1745                  const AlarmBasic::StateAlarmTable AlarmSet1[] = {       //pLimitAdjustable       ,   pLimitPressVac       , pLimitVapourReturn    , pLimitPOmode,  pLimitIGPmode
   1746                      { (AlarmBasic *)HighPressurePtr, { EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange } },
   1747                      { (AlarmBasic *)LowPressurePtr, { EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange } },
   1748                      { (AlarmBasic *)HighPressVacPtr, { EnableFalse,   EnableTrue,   EnableFalse,   EnableFalse,   EnableFalse    } },
   1749                      { (AlarmBasic *)LowPressVacPtr, { EnableFalse,   EnableTrue,   EnableFalse,   EnableFalse,   EnableFalse    } },
   1750                      { (AlarmBasic *)HighIGPPtr, { EnableFalse,   EnableFalse,   EnableFalse,   EnableFalse,   EnableTrue     } },
   1751                      { (AlarmBasic *)LowIGPPtr, { EnableFalse,   EnableFalse,   EnableFalse,   EnableFalse,   EnableTrue     } },
   1752                      { (AlarmBasic *)HighVapRetPtr, { EnableFalse,   EnableFalse,   EnableTrue,   EnableFalse,   EnableFalse    } },
   1753                      { (AlarmBasic *)LowVapRetPtr, { EnableFalse,   EnableFalse,   EnableTrue,   EnableFalse,   EnableFalse    } },
   1754                      { (AlarmBasic *)IntHighPressurePtr1, { EnableTrue,   EnableTrue,   EnableTrue,   EnableTrue,   EnableTrue     } },
   1755                      { (AlarmBasic *)IntLowPressurePtr1, { EnableTrue,   EnableTrue,   EnableTrue,   EnableTrue,   EnableTrue     } },
   1756                  };
   \   00000010   ........           LDR      R3,??Subroutine50_0  ;; `?<Constant {{(AlarmBasic *)0, {EnableNoChange,`
   \   00000014   7011C0E5           STRB     R1,[R0, #+368]
   \   00000018   0D20A0E1           MOV      R2,SP
   \   0000001C   7850A0E3           MOV      R5,#+120
   \                     ??SetPressureAlarmMode_2:
   \   00000020   045055E2           SUBS     R5,R5,#+4
   \   00000024   054093E7           LDR      R4,[R3, R5]
   \   00000028   054082E7           STR      R4,[R2, R5]
   \   0000002C   FBFFFF1A           BNE      ??SetPressureAlarmMode_2
   \   00000030   742190E5           LDR      R2,[R0, #+372]
   1757          
   1758                  const AlarmBasic::StateAlarmTable AlarmSet2[] = {       //pLimitAdjustable       ,   pLimitPressVac       , pLimitVapourReturn    , pLimitPOmode
   1759                      { (AlarmBasic *)HighPressurePtr, { EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange } },
   1760                      { (AlarmBasic *)LowPressurePtr, { EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange } },
   1761                      { (AlarmBasic *)HighIGPPtr, { EnableFalse,   EnableFalse,   EnableFalse,   EnableFalse,   EnableTrue     } },
   1762                      { (AlarmBasic *)LowIGPPtr, { EnableFalse,   EnableFalse,   EnableFalse,   EnableFalse,   EnableTrue     } },
   1763                      { (AlarmBasic *)IntHighPressurePtr1, { EnableTrue,   EnableTrue,   EnableTrue,   EnableFalse,   EnableTrue     } },
   1764                      { (AlarmBasic *)IntLowPressurePtr1, { EnableTrue,   EnableTrue,   EnableTrue,   EnableFalse,   EnableTrue     } },
   1765                      { (AlarmBasic *)IntHighPressurePtr2, { EnableFalse,   EnableFalse,   EnableFalse,   EnableTrue,   EnableTrue     } },
   1766                      { (AlarmBasic *)IntLowPressurePtr2, { EnableFalse,   EnableFalse,   EnableFalse,   EnableTrue,   EnableTrue     } },
   1767                  };
   \   00000034   ........           LDR      R7,??Subroutine50_0+0x4  ;; `?<Constant {{(AlarmBasic *)0, {EnableNoChange,_1`
   \   00000038   00208DE5           STR      R2,[SP, #+0]
   \   0000003C   783190E5           LDR      R3,[R0, #+376]
   \   00000040   6090A0E3           MOV      R9,#+96
   \   00000044   0C308DE5           STR      R3,[SP, #+12]
   \   00000048   7C5190E5           LDR      R5,[R0, #+380]
   \   0000004C   18508DE5           STR      R5,[SP, #+24]
   \   00000050   805190E5           LDR      R5,[R0, #+384]
   \   00000054   24508DE5           STR      R5,[SP, #+36]
   \   00000058   844190E5           LDR      R4,[R0, #+388]
   \   0000005C   30408DE5           STR      R4,[SP, #+48]
   \   00000060   88C190E5           LDR      R12,[R0, #+392]
   \   00000064   3CC08DE5           STR      R12,[SP, #+60]
   \   00000068   8C6190E5           LDR      R6,[R0, #+396]
   \   0000006C   48608DE5           STR      R6,[SP, #+72]
   \   00000070   906190E5           LDR      R6,[R0, #+400]
   \   00000074   54608DE5           STR      R6,[SP, #+84]
   \   00000078   94E190E5           LDR      LR,[R0, #+404]
   \   0000007C   78608DE2           ADD      R6,SP,#+120
   \   00000080   60E08DE5           STR      LR,[SP, #+96]
   \   00000084   9C5190E5           LDR      R5,[R0, #+412]
   \   00000088   6C508DE5           STR      R5,[SP, #+108]
   \                     ??SetPressureAlarmMode_3:
   \   0000008C   049059E2           SUBS     R9,R9,#+4
   \   00000090   098097E7           LDR      R8,[R7, R9]
   \   00000094   098086E7           STR      R8,[R6, R9]
   \   00000098   FBFFFF1A           BNE      ??SetPressureAlarmMode_3
   \   0000009C   78208DE5           STR      R2,[SP, #+120]
   \   000000A0   84308DE5           STR      R3,[SP, #+132]
   \   000000A4   90408DE5           STR      R4,[SP, #+144]
   \   000000A8   9CC08DE5           STR      R12,[SP, #+156]
   \   000000AC   A8E08DE5           STR      LR,[SP, #+168]
   1768                  const AlarmBasic::StateAlarmTable AlarmSet3[] = {       //pLimitAdjustable       ,   pLimitPressVac       , LimitV,   EnableFalse   apourReturn    , pLimitPOmode
   1769                      { (AlarmBasic *)HighPressurePtr, { EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange } },
   1770                      { (AlarmBasic *)LowPressurePtr, { EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange,   EnableNoChange } },
   1771                      { (AlarmBasic *)HighIGPPtr, { EnableFalse,   EnableFalse,   EnableFalse,   EnableFalse,   EnableTrue     } },
   1772                      { (AlarmBasic *)LowIGPPtr, { EnableFalse,   EnableFalse,   EnableFalse,   EnableFalse,   EnableTrue     } },
   1773                      { (AlarmBasic *)IntHighPressurePtr1, { EnableTrue,   EnableTrue,   EnableTrue,   EnableFalse,   EnableTrue     } },
   1774                      { (AlarmBasic *)IntLowPressurePtr1, { EnableTrue,   EnableTrue,   EnableTrue,   EnableTrue,   EnableTrue     } },
   1775                      { (AlarmBasic *)IntHighPressurePtr2, { EnableFalse,   EnableFalse,   EnableFalse,   EnableTrue,   EnableTrue     } },
   1776                  };
   \   000000B0   ........           LDR      R8,??Subroutine50_0+0x8  ;; `?<Constant {{(AlarmBasic *)0, {EnableNoChange,_2`
   \   000000B4   B4508DE5           STR      R5,[SP, #+180]
   \   000000B8   986190E5           LDR      R6,[R0, #+408]
   \   000000BC   D8708DE2           ADD      R7,SP,#+216
   \   000000C0   C0608DE5           STR      R6,[SP, #+192]
   \   000000C4   A00190E5           LDR      R0,[R0, #+416]
   \   000000C8   54A0A0E3           MOV      R10,#+84
   \   000000CC   CC008DE5           STR      R0,[SP, #+204]
   \                     ??SetPressureAlarmMode_4:
   \   000000D0   04A05AE2           SUBS     R10,R10,#+4
   \   000000D4   0A9098E7           LDR      R9,[R8, R10]
   \   000000D8   0A9087E7           STR      R9,[R7, R10]
   \   000000DC   FBFFFF1A           BNE      ??SetPressureAlarmMode_4
   \   000000E0   D8208DE5           STR      R2,[SP, #+216]
   \   000000E4   E4308DE5           STR      R3,[SP, #+228]
   \   000000E8   F0408DE5           STR      R4,[SP, #+240]
   \   000000EC   FCC08DE5           STR      R12,[SP, #+252]
   \   000000F0   08E18DE5           STR      LR,[SP, #+264]
   \   000000F4   14518DE5           STR      R5,[SP, #+276]
   \   000000F8   20618DE5           STR      R6,[SP, #+288]
   1777                  if ( IntHighPressurePtr2 && IntLowPressurePtr2 ) {
   \   000000FC   0140A0E1           MOV      R4,R1
   \   00000100   000056E3           CMP      R6,#+0
   \   00000104   2000000A           BEQ      ??SetPressureAlarmMode_5
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   0050A0E3           MOV      R5,#+0
   \   00000110   0E00000A           BEQ      ??SetPressureAlarmMode_6
   1778                      for ( unsigned i = 0; i < NELEMENTS(AlarmSet2); i++ ) {
   1779                          AlarmBasic *AlPtr = AlarmSet2[i].AlarmPtr;
   \                     ??SetPressureAlarmMode_7:
   \   00000114   0C00A0E3           MOV      R0,#+12
   \   00000118   900501E0           MUL      R1,R0,R5
   \   0000011C   78008DE2           ADD      R0,SP,#+120
   \   00000120   000091E7           LDR      R0,[R1, +R0]
   1780                          if ( AlPtr ) {
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0400000A           BEQ      ??SetPressureAlarmMode_8
   1781                              AlPtr->SetEnable(AlarmSet2[i].Enable[NewMode]);
   \   0000012C   78208DE2           ADD      R2,SP,#+120
   \   00000130   022084E0           ADD      R2,R4,R2
   \   00000134   021081E0           ADD      R1,R1,R2
   \   00000138   0410D1E5           LDRB     R1,[R1, #+4]
   \   0000013C   ........           _BLF     ??SetEnable,??SetEnable??rA
   1782                          }
   1783                      }
   \                     ??SetPressureAlarmMode_8:
   \   00000140   015085E2           ADD      R5,R5,#+1
   \   00000144   080055E3           CMP      R5,#+8
   \   00000148   1E00002A           BCS      ??SetPressureAlarmMode_1
   \   0000014C   F0FFFFEA           B        ??SetPressureAlarmMode_7
   1784                  } else if ( IntHighPressurePtr2 ) {
   1785                      for ( unsigned i = 0; i < NELEMENTS(AlarmSet3); i++ ) {
   1786                          AlarmBasic *AlPtr = AlarmSet3[i].AlarmPtr;
   \                     ??SetPressureAlarmMode_6:
   \   00000150   0C00A0E3           MOV      R0,#+12
   \   00000154   900501E0           MUL      R1,R0,R5
   \   00000158   D8008DE2           ADD      R0,SP,#+216
   \   0000015C   000091E7           LDR      R0,[R1, +R0]
   1787                          if ( AlPtr ) {
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   0400000A           BEQ      ??SetPressureAlarmMode_9
   1788                              AlPtr->SetEnable(AlarmSet3[i].Enable[NewMode]);
   \   00000168   D8208DE2           ADD      R2,SP,#+216
   \   0000016C   022084E0           ADD      R2,R4,R2
   \   00000170   021081E0           ADD      R1,R1,R2
   \   00000174   0410D1E5           LDRB     R1,[R1, #+4]
   \   00000178   ........           _BLF     ??SetEnable,??SetEnable??rA
   1789                          }
   1790                      }
   \                     ??SetPressureAlarmMode_9:
   \   0000017C   015085E2           ADD      R5,R5,#+1
   \   00000180   070055E3           CMP      R5,#+7
   \   00000184   0F00002A           BCS      ??SetPressureAlarmMode_1
   \   00000188   F0FFFFEA           B        ??SetPressureAlarmMode_6
   1791                  } else {
   1792                      for ( unsigned i = 0; i < NELEMENTS(AlarmSet1); i++ ) {
   \                     ??SetPressureAlarmMode_5:
   \   0000018C   0050A0E3           MOV      R5,#+0
   1793                          AlarmBasic *AlPtr = AlarmSet1[i].AlarmPtr;
   \                     ??SetPressureAlarmMode_10:
   \   00000190   0C00A0E3           MOV      R0,#+12
   \   00000194   900501E0           MUL      R1,R0,R5
   \   00000198   0D00A0E1           MOV      R0,SP
   \   0000019C   000091E7           LDR      R0,[R1, +R0]
   1794                          if ( AlPtr ) {
   \   000001A0   000050E3           CMP      R0,#+0
   \   000001A4   0400000A           BEQ      ??SetPressureAlarmMode_11
   1795                              AlPtr->SetEnable(AlarmSet1[i].Enable[NewMode]);
   \   000001A8   0D20A0E1           MOV      R2,SP
   \   000001AC   022084E0           ADD      R2,R4,R2
   \   000001B0   021081E0           ADD      R1,R1,R2
   \   000001B4   0410D1E5           LDRB     R1,[R1, #+4]
   \   000001B8   ........           _BLF     ??SetEnable,??SetEnable??rA
   1796                          }
   1797                      }
   \                     ??SetPressureAlarmMode_11:
   \   000001BC   015085E2           ADD      R5,R5,#+1
   \   000001C0   0A0055E3           CMP      R5,#+10
   \   000001C4   F1FFFF3A           BCC      ??SetPressureAlarmMode_10
   1798                  }
   1799              }
   1800          }
   \                     ??SetPressureAlarmMode_1:
   \   000001C8   4BDF8DE2           ADD      SP,SP,#+300
   \   000001CC                      REQUIRE ?Subroutine50
   \   000001CC                      ;; // Fall through to label ?Subroutine50
   1801          
   1802          

   \                                 In segment CODE, align 4, keep-with-next
   1803          void PROTankPressure::SetHighIGP_Locked(bool Locked) {
   1804              if ( HighIGPPtr ) {
   \                     ??SetHighIGP_Locked:
   \   00000000   840190E5           LDR      R0,[R0, #+388]
   \   00000004   ........           B        ?Subroutine44
   1805                  HighIGPPtr->Locked         = Locked;
   1806              }
   1807          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine44:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   E810C015           STRBNE   R1,[R0, #+232]
   \   00000008   1EFF2FE1           BX       LR               ;; return
   1808          

   \                                 In segment CODE, align 4, keep-with-next
   1809          void PROTankPressure::SetLowIGP_Locked(bool Locked) {
   1810              if ( LowIGPPtr ) {
   \                     ??SetLowIGP_Locked:
   \   00000000   880190E5           LDR      R0,[R0, #+392]
   \   00000004                      REQUIRE ?Subroutine44
   \   00000004                      ;; // Fall through to label ?Subroutine44
   1811                  LowIGPPtr->Locked         = Locked;
   1812              }
   1813          }
   1814          
   1815          

   \                                 In segment CODE, align 4, keep-with-next
   1816          void PROTankPressure::GetMaxPresureLimits(float &MinInput, float &MaxInput) {
   \                     ??GetMaxPresureLimits:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1817              MinInput = LowTankPressLimit;
   \   00000008   AC0194E5           LDR      R0,[R4, #+428]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000085E5           STR      R0,[R5, #+0]
   1818              MaxInput = HighTankPressLimit;
   \   00000014   A80194E5           LDR      R0,[R4, #+424]
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   000086E5           STR      R0,[R6, #+0]
   1819              if ( HasIntLowTankPressLimit2 ) {
   \   00000020   E101D4E5           LDRB     R0,[R4, #+481]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0700000A           BEQ      ??GetMaxPresureLimits_1
   1820                  MinInput = MIN(MinInput, IntLowTankPressLimit2);
   \   0000002C   D47194E5           LDR      R7,[R4, #+468]
   \   00000030   008095E5           LDR      R8,[R5, #+0]
   \   00000034   0710A0E1           MOV      R1,R7
   \   00000038   0800A0E1           MOV      R0,R8
   \   0000003C   ........           _BLF     __fLess,??__fLess??rA
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0870A011           MOVNE    R7,R8
   \   00000048   007085E5           STR      R7,[R5, #+0]
   1821              }
   1822              if ( HasIntLowTankPressLimit1 ) {
   \                     ??GetMaxPresureLimits_1:
   \   0000004C   DF01D4E5           LDRB     R0,[R4, #+479]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0700000A           BEQ      ??GetMaxPresureLimits_2
   1823                  MinInput = MIN(MinInput, IntLowTankPressLimit1);
   \   00000058   CC7194E5           LDR      R7,[R4, #+460]
   \   0000005C   008095E5           LDR      R8,[R5, #+0]
   \   00000060   0710A0E1           MOV      R1,R7
   \   00000064   0800A0E1           MOV      R0,R8
   \   00000068   ........           _BLF     __fLess,??__fLess??rA
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0870A011           MOVNE    R7,R8
   \   00000074   007085E5           STR      R7,[R5, #+0]
   1824              }
   1825              if ( HasIntHighTankPressLimit2 ) {
   \                     ??GetMaxPresureLimits_2:
   \   00000078   E001D4E5           LDRB     R0,[R4, #+480]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0700000A           BEQ      ??GetMaxPresureLimits_3
   1826                  MaxInput = MAX(MinInput, IntHighTankPressLimit2);
   \   00000084   D07194E5           LDR      R7,[R4, #+464]
   \   00000088   008095E5           LDR      R8,[R5, #+0]
   \   0000008C   0710A0E1           MOV      R1,R7
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   ........           _BLF     __fLess,??__fLess??rA
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0870A001           MOVEQ    R7,R8
   \   000000A0   007086E5           STR      R7,[R6, #+0]
   1827              }
   1828              if ( HasIntHighTankPressLimit1 ) {
   \                     ??GetMaxPresureLimits_3:
   \   000000A4   DE01D4E5           LDRB     R0,[R4, #+478]
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   0700000A           BEQ      ??GetMaxPresureLimits_4
   1829                  MaxInput = MAX(MinInput, IntHighTankPressLimit1);
   \   000000B0   C84194E5           LDR      R4,[R4, #+456]
   \   000000B4   005095E5           LDR      R5,[R5, #+0]
   \   000000B8   0410A0E1           MOV      R1,R4
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   ........           _BLF     __fLess,??__fLess??rA
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0540A001           MOVEQ    R4,R5
   \   000000CC   004086E5           STR      R4,[R6, #+0]
   1830              }
   1831          }
   \                     ??GetMaxPresureLimits_4:
   \   000000D0   ........           B        ?Subroutine47

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for TankPressValueList>`:
   \   00000000   30010000ED00       DC32 304, 237, 1000, 311, 237, 1024, 312, 237, 9123, 313, 237, 9124
   \              0000E8030000
   \              37010000ED00
   \              000000040000
   \              38010000ED00
   \              0000A3230000
   \              39010000ED00
   \              0000A4230000
   \   00000030   1B0400001D04       DC32 1051, 1053, 9133, 1052, 1054, 9134, 1099, 1101, 9141, 1100, 1102
   \              0000AD230000
   \              1C0400001E04
   \              0000AE230000
   \              4B0400004D04
   \              0000B5230000
   \              4C0400004E04
   \              0000        
   \   0000005C   B62300001F04       DC32 9142, 1055, 1057, 9149, 1056, 1058, 9150, 899, 901, 9159, 900, 902
   \              000021040000
   \              BD2300002004
   \              000022040000
   \              BE2300008303
   \              000085030000
   \              C72300008403
   \              000086030000
   \   0000008C   C8230000FA03       DC32 9160, 1018, 1020, 9167, 1019, 1021, 9168, 911, 915, 9156, 856, 857
   \              0000FC030000
   \              CF230000FB03
   \              0000FD030000
   \              D02300008F03
   \              000093030000
   \              C42300005803
   \              000059030000
   \   000000BC   C70500004001       DC32 1479, 320, 351, 1071, 324, 355, 1097, 328, 359, 1087, 820, 820
   \              00005F010000
   \              2F0400004401
   \              000063010000
   \              490400004801
   \              000067010000
   \              3F0400003403
   \              000034030000
   \   000000EC   60040000           DC32 1120

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Tank pressure">`:
   \   00000000   54616E6B2070       DC8 "Tank pressure"
   \              726573737572
   \              6500        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Tank pressure ">`:
   \   00000000   54616E6B2070       DC8 "Tank pressure "
   \              726573737572
   \              652000      
   \   0000000F   00                 DC8 0
   \   00000010   3A0A556E6B6E       DC8 ":\012Unknown error started at line:"
   \              6F776E206572
   \              726F72207374
   \              617274656420
   \              6174206C696E
   \              653A00      
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   3A0A54686520       DC8 ":\012The keyword "
   \              6B6579776F72
   \              642000      
   \   00000043   00                 DC8 0
   \   00000044   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000061   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A2000             DC8 ": "

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {{(AlarmBasic *)0, {EnableNoChange,`:
   \   00000000   00000000           DC32 0H
   \   00000004   030303030300       DC8 3, 3, 3, 3, 3, 0, 0, 0
   \              0000        
   \   0000000C   00000000           DC32 0H
   \   00000010   030303030300       DC8 3, 3, 3, 3, 3, 0, 0, 0
   \              0000        
   \   00000018   00000000           DC32 0H
   \   0000001C   000100000000       DC8 0, 1, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000024   00000000           DC32 0H
   \   00000028   000100000000       DC8 0, 1, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000030   00000000           DC32 0H
   \   00000034   000000000100       DC8 0, 0, 0, 0, 1, 0, 0, 0
   \              0000        
   \   0000003C   00000000           DC32 0H
   \   00000040   000000000100       DC8 0, 0, 0, 0, 1, 0, 0, 0
   \              0000        
   \   00000048   00000000           DC32 0H
   \   0000004C   000001000000       DC8 0, 0, 1, 0, 0, 0, 0, 0
   \              0000        
   \   00000054   00000000           DC32 0H
   \   00000058   000001000000       DC8 0, 0, 1, 0, 0, 0, 0, 0
   \              0000        
   \   00000060   00000000           DC32 0H
   \   00000064   010101010100       DC8 1, 1, 1, 1, 1, 0, 0, 0
   \              0000        
   \   0000006C   00000000           DC32 0H
   \   00000070   010101010100       DC8 1, 1, 1, 1, 1, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {{(AlarmBasic *)0, {EnableNoChange,_1`:
   \   00000000   00000000           DC32 0H
   \   00000004   030303030300       DC8 3, 3, 3, 3, 3, 0, 0, 0
   \              0000        
   \   0000000C   00000000           DC32 0H
   \   00000010   030303030300       DC8 3, 3, 3, 3, 3, 0, 0, 0
   \              0000        
   \   00000018   00000000           DC32 0H
   \   0000001C   000000000100       DC8 0, 0, 0, 0, 1, 0, 0, 0
   \              0000        
   \   00000024   00000000           DC32 0H
   \   00000028   000000000100       DC8 0, 0, 0, 0, 1, 0, 0, 0
   \              0000        
   \   00000030   00000000           DC32 0H
   \   00000034   010101000100       DC8 1, 1, 1, 0, 1, 0, 0, 0
   \              0000        
   \   0000003C   00000000           DC32 0H
   \   00000040   010101000100       DC8 1, 1, 1, 0, 1, 0, 0, 0
   \              0000        
   \   00000048   00000000           DC32 0H
   \   0000004C   000000010100       DC8 0, 0, 0, 1, 1, 0, 0, 0
   \              0000        
   \   00000054   00000000           DC32 0H
   \   00000058   000000010100       DC8 0, 0, 0, 1, 1, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {{(AlarmBasic *)0, {EnableNoChange,_2`:
   \   00000000   00000000           DC32 0H
   \   00000004   030303030300       DC8 3, 3, 3, 3, 3, 0, 0, 0
   \              0000        
   \   0000000C   00000000           DC32 0H
   \   00000010   030303030300       DC8 3, 3, 3, 3, 3, 0, 0, 0
   \              0000        
   \   00000018   00000000           DC32 0H
   \   0000001C   000000000100       DC8 0, 0, 0, 0, 1, 0, 0, 0
   \              0000        
   \   00000024   00000000           DC32 0H
   \   00000028   000000000100       DC8 0, 0, 0, 0, 1, 0, 0, 0
   \              0000        
   \   00000030   00000000           DC32 0H
   \   00000034   010101000100       DC8 1, 1, 1, 0, 1, 0, 0, 0
   \              0000        
   \   0000003C   00000000           DC32 0H
   \   00000040   010101010100       DC8 1, 1, 1, 1, 1, 0, 0, 0
   \              0000        
   \   00000048   00000000           DC32 0H
   \   0000004C   000000010100       DC8 0, 0, 0, 1, 1, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   302E3000           DC8 "0.0"

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable18  ;; ??ObjectSet
   \   00000008   48509FE5           LDR      R5,??__sti__routine_1  ;; ?_0
   \   0000000C   180084E2           ADD      R0,R4,#+24
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000001C   240084E2           ADD      R0,R4,#+36
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000024   0C0085E2           ADD      R0,R5,#+12
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000044   1400C4E5           STRB     R0,[R4, #+20]
   \   00000048   180085E2           ADD      R0,R5,#+24
   \   0000004C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000050   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000058   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROTankPressure &PROTankPressure::new PROTankPressure(int, PROXRefObject *, bool, int)
   \                     `??new PROTankPressure`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   7A0FA0E3           MOV      R0,#+488
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0500000A           BEQ      `??new PROTankPressure_2`
   \   00000024   80002DE9           PUSH     {R7}
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   ........           BL       ??PROTankPressure_1
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \                     `??new PROTankPressure_2`:
   \   0000003C   ........           B        ?Subroutine45

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROTankPressure &PROTankPressure::new PROTankPressure(bool, int)
   \                     `??new PROTankPressure_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   7A0FA0E3           MOV      R0,#+488
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new PROTankPressure_3`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??PROTankPressure
   \                     `??new PROTankPressure_3`:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??HighTankPressLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??LowTankPressLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ??HighPressVacLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     ??LowPressVacLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     ??HighIGP_Limit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     ??LowIGP_Limit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     ??HighVapourRetLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     ??LowVapourRetLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     ??IntHighTankPressLimit1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     ??IntLowTankPressLimit1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     ??IntHighTankPressLimit2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     ??IntLowTankPressLimit2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     ??HighPressVacLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     ??LowPressVacLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     ??HighIGP_Limit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     ??LowIGP_Limit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   C74B3789           DC32     0xffffffff89374bc7

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   41845840           DC32     0x40588441

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     ??HighVapourRetLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   ........           DC32     ??LowVapourRetLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     ??IntHighTankPressLimit1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     ??IntLowTankPressLimit1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     ??IntLowTankPressLimit2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     ??IntHighTankPressLimit2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     ??PressLim_mBar

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   C74B3789           DC32     0xffffffff89374bc7

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable57:
   \   00000000   41845840           DC32     0x40588441

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable58:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable59:
   \   00000000   ........           DC32     `?<Constant "0x%0x">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   ........           DC32     ??npos

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     PROTankPressure::AddHighIGP_Alarm(float, bool)
                                       16
     PROTankPressure::AddHighPressInternalAlarm1(float, bool)
                                       16
     PROTankPressure::AddHighPressInternalAlarm2(float, bool)
                                       16
     PROTankPressure::AddHighPressVacAlarm(float, bool)
                                       16
     PROTankPressure::AddHighPressVapRetAlarm(float, bool)
                                       16
     PROTankPressure::AddLowIGP_Alarm(float, bool)
                                       16
     PROTankPressure::AddLowPressInternalAlarm1(float, bool)
                                       16
     PROTankPressure::AddLowPressInternalAlarm2(float, bool)
                                       16
     PROTankPressure::AddLowPressVacAlarm(float, bool)
                                       16
     PROTankPressure::AddLowPressVapRetAlarm(float, bool)
                                       16
     PROTankPressure::Calculate()      36
     PROTankPressure::FindPROStatus(AnsiString &)
                                       60
     PROTankPressure::GetBitValue(int, int, bool &)
                                        8
     PROTankPressure::GetMaxPresureLimits(float &, float &)
                                       24
     PROTankPressure::GetStringValue(int, int, AnsiString &)
                                      192
     PROTankPressure::GetValue(int, int, float &, int &, int &)
                                       44
     PROTankPressure::GetValueInfoTable(int &, int)
                                        0
     PROTankPressure::GetValueInfoTableStatic(int &, int)
                                        0
     PROTankPressure::Initiate()        0
     PROTankPressure::LoadConfigFromFile(TSNConfigString &)
                                      288
     PROTankPressure::PROTankPressure(bool, int)
                                       52
     PROTankPressure::PROTankPressure(int, PROXRefObject *, bool, int)
                                       68
     PROTankPressure::PutBitValue(int, int, bool)
                                       24
     PROTankPressure::PutFloatValue(int, float)
                                       24
     PROTankPressure::PutValue(int, int, AnsiString, bool, int *)
                                      140
     PROTankPressure::ReceiveData(unsigned char *)
                                       20
     PROTankPressure::RestoreSettings(TSNConfigString *)
                                      752
     PROTankPressure::SaveSettings(TSNConfigString *)
                                      420
     PROTankPressure::SendData(unsigned short)
                                       48
     PROTankPressure::SetAlarmLimits(float, float, float, float, float, float)
                                       12
     PROTankPressure::SetHighIGP_Locked(bool)
                                        0
     PROTankPressure::SetLowIGP_Locked(bool)
                                        0
     PROTankPressure::SetPressureAlarmMode(LimitState)
                                      332
     PROTankPressure::SetState(TankState)
                                        0
     PROTankPressure::SimCalculate()
                                        8
     PROTankPressure::WriteConfigToFile(TSNConfigString &)
                                      496
     PROTankPressure::WriteXML(char *, bool)
                                        0
     PROTankPressure::ZeroSetAllTankPressureSensors(bool)
                                       48
     PROTankPressure::ZeroSetTankPressureSensor(bool)
                                      140
     PROTankPressure::new PROTankPressure(bool, int)
                                       12
     PROTankPressure::new PROTankPressure(int, PROXRefObject *, bool, int)
                                       24
     PROTankPressure::~PROTankPressure()
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Insert(bool, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, AnalogInput *)
                                       24
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::insert(AnalogInput *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>> const &)
                                       12
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        4
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Insert(AIPressSensor **, AIPressSensor * const &)
                                       16
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Make_room(AIPressSensor **, unsigned int)
                                       32
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Push_back0(AIPressSensor *)
                                        8
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Tidy0()
                                        4
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                       16
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                       32
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                       16
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                       32
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  16
     operator+(string const &, char const *)
                                       44
     operator+(string const &, char)
                                       40
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::set(set<PRogramObjectBase *> const &)
                                       16
     set<PRogramObjectBase *>::~set()
                                        4
     string::string(string const &)    12
     vector<AIPressSensor *>::empty() const
                                        0
     vector<PRogramObjectBase *>::~vector()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      28
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                      88
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     780
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::insert(AnalogInput *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>> const &)
                                     112
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Insert(bool, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, AnalogInput *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     set<PRogramObjectBase *>::set(set<PRogramObjectBase *> const &)
                                      48
     set<PRogramObjectBase *>::~set()
                                      16
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Tidy0()
                                      36
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                      36
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                      72
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Insert(AIPressSensor **, AIPressSensor * const &)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                     244
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                     232
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Make_room(AIPressSensor **, unsigned int)
                                     232
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                      72
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                      72
     _Vector_impl<AIPressSensor *, allocator<AIPressSensor *>>::_Push_back0(AIPressSensor *)
                                      72
     vector<PRogramObjectBase *>::~vector()
                                      28
     vector<AIPressSensor *>::empty() const
                                      32
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     operator+(string const &, char)
                                      76
     ?_0                              36
     PROTankPressure::ObjectSet       48
     PROTankPressure::hasIGPAlarms     1
     PROTankPressure::hasPressVacAlarms
                                       1
     PROTankPressure::hasVapRetAlarms
                                       1
     PROTankPressure::hasExtraAlarm2
                                       1
     PROTankPressure::PROTankPressure(bool, int)
                                     160
     ?Subroutine46                     8
     PROTankPressure::PROTankPressure(int, PROXRefObject *, bool, int)
                                     324
     ?Subroutine47                    12
     PROTankPressure::Initiate()     428
     PROTankPressure::~PROTankPressure()
                                     268
     PROTankPressure::SetAlarmLimits(float, float, float, float, float, float)
                                     112
     PROTankPressure::AddHighPressInternalAlarm1(float, bool)
                                      36
     ?Subroutine43                    36
     PROTankPressure::AddLowPressInternalAlarm1(float, bool)
                                      32
     PROTankPressure::AddHighPressInternalAlarm2(float, bool)
                                      36
     PROTankPressure::AddLowPressInternalAlarm2(float, bool)
                                      36
     PROTankPressure::AddHighPressVacAlarm(float, bool)
                                      24
     PROTankPressure::AddLowPressVacAlarm(float, bool)
                                      24
     PROTankPressure::AddHighIGP_Alarm(float, bool)
                                      24
     PROTankPressure::AddLowIGP_Alarm(float, bool)
                                      24
     PROTankPressure::AddHighPressVapRetAlarm(float, bool)
                                      24
     PROTankPressure::AddLowPressVapRetAlarm(float, bool)
                                      24
     PROTankPressure::WriteConfigToFile(TSNConfigString &)
                                    7036
     ?Subroutine48                    24
     PROTankPressure::LoadConfigFromFile(TSNConfigString &)
                                    2836
     PROTankPressure::SaveSettings(TSNConfigString *)
                                     784
     ?Subroutine49                    12
     PROTankPressure::RestoreSettings(TSNConfigString *)
                                    1212
     PROTankPressure::ZeroSetTankPressureSensor(bool)
                                     272
     PROTankPressure::FindPROStatus(AnsiString &)
                                     296
     ?Subroutine50                    20
     PROTankPressure::GetValue(int, int, float &, int &, int &)
                                    1356
     PROTankPressure::GetStringValue(int, int, AnsiString &)
                                     576
     PROTankPressure::GetBitValue(int, int, bool &)
                                     320
     ?Subroutine51                    12
     PROTankPressure::PutValue(int, int, AnsiString, bool, int *)
                                    1944
     PROTankPressure::PutFloatValue(int, float)
                                     460
     PROTankPressure::PutBitValue(int, int, bool)
                                     460
     PROTankPressure::TankPressValueList
                                     240
     PROTankPressure::GetValueInfoTable(int &, int)
                                      12
     ?Subroutine52                    12
     PROTankPressure::GetValueInfoTableStatic(int &, int)
                                       8
     PROTankPressure::Calculate()    280
     PROTankPressure::SimCalculate()
                                      88
     PROTankPressure::ReceiveData(unsigned char *)
                                     268
     PROTankPressure::SendData(unsigned short)
                                     280
     PROTankPressure::WriteXML(char *, bool)
                                       8
     PROTankPressure::SetState(TankState)
                                      12
     PROTankPressure::ZeroSetAllTankPressureSensors(bool)
                                     112
     ?Subroutine45                     8
     PROTankPressure::SetPressureAlarmMode(LimitState)
                                     460
     PROTankPressure::SetHighIGP_Locked(bool)
                                       8
     ?Subroutine44                    12
     PROTankPressure::SetLowIGP_Locked(bool)
                                       4
     PROTankPressure::GetMaxPresureLimits(float &, float &)
                                     212
     ?<Initializer for TankPressValueList>
                                     240
     ?<Constant "0x%0x">               8
     ?<Constant "Tank pressure">      16
     ?<Constant "Tank pressure ">    100
     ?<Constant ": ">                  3
     ?<Constant {{(AlarmBasic *)0, {EnableNoChange,
                                     120
     ?<Constant {{(AlarmBasic *)0, {EnableNoChange,_1
                                      96
     ?<Constant {{(AlarmBasic *)0, {EnableNoChange,_2
                                      84
     ?<Constant "0.0">                 4
     __sti__routine()                 92
     PROTankPressure::new PROTankPressure(int, PROXRefObject *, bool, int)
                                      64
     PROTankPressure::new PROTankPressure(bool, int)
                                      48
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable12                     4
     ??DataTable13                     4
     ??DataTable14                     4
     ??DataTable15                     4
     ??DataTable16                     4
     ??DataTable17                     4
     ??DataTable18                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable21                     4
     ??DataTable24                     4
     ??DataTable25                     4
     ??DataTable26                     4
     ??DataTable27                     4
     ??DataTable28                     4
     ??DataTable29                     4
     ??DataTable30                     4
     ??DataTable31                     4
     ??DataTable32                     4
     ??DataTable33                     4
     ??DataTable56                     4
     ??DataTable57                     4
     ??DataTable58                     4
     ??DataTable59                     4
     ??DataTable62                     4
     ??DataTable68                     4
     ??DataTable69                     4
     ??DataTable70                     4
      Others                        1944

 
 27 956 bytes in segment CODE
    615 bytes in segment DATA_C
    240 bytes in segment DATA_I
    240 bytes in segment DATA_ID
     64 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     24 bytes in segment INITTAB
 
 21 384 bytes of CODE  memory (+ 6 600 bytes shared)
    855 bytes of CONST memory
    304 bytes of DATA  memory

Errors: none
Warnings: 2
