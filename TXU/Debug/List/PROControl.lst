##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROControl.cpp                  #
#    Command line    =  D:\S2Prog\Shared\Src\PROControl.cpp --fpu None -D    #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROControl.lst              #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROControl.r79               #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROControl.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_5
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_6:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_7
   \                     ??_Insert_5:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_8
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_7
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_7
   \                     ??_Insert_8:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_7
   \   00000060   F0FFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_7:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_10
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_11
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_9
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_12
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_12:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_7
   \                     ??_Insert_11:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_9
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_13
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_13:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_2
   \                     ??_Erase_3:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_2:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_3
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_4
   \                     ??_Erase_5:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_4:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_5
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_2
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_2:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_16:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_16
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_2
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_2
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_3
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_2
   \                     ??_Make_room_3:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_2:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int * _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_4
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_4
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_5
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_4
   \                     ??_Make_room_5:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_4:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_2
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_3:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_3
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_4
   \                     ??_Push_back0_2:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_3
   \                     ??_Push_back0_4:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Push_back0(int)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_5
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_6:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_6
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_7
   \                     ??_Push_back0_5:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_7:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_4  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_4:
   \   0000003C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          int PROControl::NumberOfPRO = 0;
   \                     ??NumberOfPRO:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          PROControl::PROControl(int RIndex) : PRogramObjectBase(false) {
   \                     ??PROControl:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   ........           _BLF     ??PRogramObjectBase,??PRogramObjectBase??rA
   \   00000014   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   00000018   D46084E2           ADD      R6,R4,#+212
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000034   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   1400C6E5           STRB     R0,[R6, #+20]
   \   00000040   EC6084E2           ADD      R6,R4,#+236
   \   00000044   01008DE2           ADD      R0,SP,#+1
   \   00000048   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000054   0100DDE5           LDRB     R0,[SP, #+1]
   \   00000058   1400C6E5           STRB     R0,[R6, #+20]
   \   0000005C   420F84E2           ADD      R0,R4,#+264
   \   00000060   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000064   450F84E2           ADD      R0,R4,#+276
   \   00000068   ........           _BLF     ??_Zero,??_Zero??rA
     12              NumberOfPRO++;
   \   0000006C   7C009FE5           LDR      R0,??PROControl_1  ;; ??NumberOfPRO
   \   00000070   001090E5           LDR      R1,[R0, #+0]
   \   00000074   011081E2           ADD      R1,R1,#+1
   \   00000078   001080E5           STR      R1,[R0, #+0]
     13              IDNumber          = (C_PRO_CONTROL << 16) + NumberOfPRO;
   \   0000007C   4006A0E3           MOV      R0,#+67108864
   \   00000080   920880E3           ORR      R0,R0,#0x920000
   \   00000084   010080E0           ADD      R0,R0,R1
   \   00000088   9C0084E5           STR      R0,[R4, #+156]
     14              NormalState       = C_CTRL_NS_UNPOWERED;
   \   0000008C   A100A0E3           MOV      R0,#+161
   \   00000090   700E80E3           ORR      R0,R0,#0x700
   \   00000094   C80084E5           STR      R0,[R4, #+200]
     15              DeactivateBy      = C_CTRL_DE_VALUE;
   \   00000098   150080E2           ADD      R0,R0,#+21
   \   0000009C   CC0084E5           STR      R0,[R4, #+204]
     16              AlarmDelay        = 0;
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   D00084E5           STR      R0,[R4, #+208]
     17              TCUAddress        = 0;
   \   000000A8   200184E5           STR      R0,[R4, #+288]
     18              AlarmAlternative  = C_CTRL_ALT_ALL;
   \   000000AC   7710A0E3           MOV      R1,#+119
   \   000000B0   701E81E3           ORR      R1,R1,#0x700
   \   000000B4   041184E5           STR      R1,[R4, #+260]
     19              RelayIndex        = RIndex;
   \   000000B8   A85084E5           STR      R5,[R4, #+168]
     20              Priority          = R_INACTIVE;
   \   000000BC   1010A0E3           MOV      R1,#+16
   \   000000C0   281184E5           STR      R1,[R4, #+296]
     21              ActiveAl          = 0;
   \   000000C4   AC0084E5           STR      R0,[R4, #+172]
     22              AcknowledgedAl    = 0;
   \   000000C8   B00084E5           STR      R0,[R4, #+176]
     23              IdleAl            = 0;
   \   000000CC   B40084E5           STR      R0,[R4, #+180]
     24              SuspAl            = 0;
   \   000000D0   B80084E5           STR      R0,[R4, #+184]
     25              OutsideLim        = 0;
   \   000000D4   BC0084E5           STR      R0,[R4, #+188]
     26              PrevAlCnt         = 0;
   \   000000D8   C40084E5           STR      R0,[R4, #+196]
     27          
     28          
     29          
     30          #ifdef S2TXU
     31              OS_CREATERSEMA(&CtrlSema);
   \   000000DC   4B0F84E2           ADD      R0,R4,#+300
   \   000000E0   ........           _BLF     OS_CreateRSema,??OS_CreateRSema??rA
     32          #endif
     33          }
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   7240BDE8           POP      {R1,R4-R6,LR}
   \   000000EC   1EFF2FE1           BX       LR               ;; return
   \                     ??PROControl_1:
   \   000000F0   ........           DC32     ??NumberOfPRO
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          PROControl::~PROControl(void) {
   \                     `?~PROControl`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1A00000A           BEQ      `?~PROControl_1`
   \   00000014   ........           LDR      R0,??DataTable1  ;; ??__vtbl
     36          }
   \   00000018   456F84E2           ADD      R6,R4,#+276
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000028   0600A0E1           MOV      R0,R6
   \   0000002C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000030   426F84E2           ADD      R6,R4,#+264
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000044   EC6084E2           ADD      R6,R4,#+236
   \   00000048   041096E5           LDR      R1,[R6, #+4]
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA_1
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000005C   D40084E2           ADD      R0,R4,#+212
   \   00000060   ........           _BLF     ??clear,??clear??rA
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \   00000070   010015E3           TST      R5,#0x1
   \   00000074   0100000A           BEQ      `?~PROControl_1`
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PROControl_1`:
   \   00000080   ........           B        ?Subroutine14

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine14:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine14_0:
   \   00000008   ........           DC32     `?<Constant "PROControl IDNumber 0...">`
     37          //---------------------------------------------------------------------------
     38          
     39          ///////////////////////////////////////////////////////////////
     40          //
     41          // Routines for the Configuration
     42          //
     43          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     44          AnsiString PROControl::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   49DF4DE2           SUB      SP,SP,#+292
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0270A0E1           MOV      R7,R2
     45              AnsiString TabStr;
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     46              for (int i = 0; i < ExtraTabs; i++) TabStr += TabStr1;
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   050000EA           B        ??MakeConfigString_1
   \                     ??MakeConfigString_2:
   \   00000028   C4179FE5           LDR      R1,??MakeConfigString_3  ;; TabStr1
   \   0000002C   0630A0E1           MOV      R3,R6
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   ........           _BLF     ??append,??append??rA
   \   0000003C   018088E2           ADD      R8,R8,#+1
   \                     ??MakeConfigString_1:
   \   00000040   B0079FE5           LDR      R0,??MakeConfigString_3+0x4  ;; ??npos
   \   00000044   070058E1           CMP      R8,R7
   \   00000048   006090E5           LDR      R6,[R0, #+0]
   \   0000004C   F5FFFFBA           BLT      ??MakeConfigString_2
     47              AnsiString LocalString;
     48              LocalString += TabStr + TabStr2 + KeyWord(C_CTRL_START_COMMON) + CrLfStr;
   \   00000050   A4779FE5           LDR      R7,??MakeConfigString_3+0x8  ;; TabStr2
   \   00000054   A4879FE5           LDR      R8,??MakeConfigString_3+0xC  ;; CrLfStr
     49              // LocalString += PogramObjectBase::MakeConfigString(ConfigString);
     50          
     51              LocalString += TabStr + TabStr3 + KeyWord(C_CTRL_NORMAL_STATE) + KeyWord(NormalState) + CrLfStr;
   \   00000058   A4979FE5           LDR      R9,??MakeConfigString_3+0x10  ;; TabStr3
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000064   6D10A0E3           MOV      R1,#+109
   \   00000068   701E81E3           ORR      R1,R1,#0x700
   \   0000006C   770F8DE2           ADD      R0,SP,#+476
   \   00000070   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000074   0720A0E1           MOV      R2,R7
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   700F8DE2           ADD      R0,SP,#+448
   \   00000080   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000084   772F8DE2           ADD      R2,SP,#+476
   \   00000088   701F8DE2           ADD      R1,SP,#+448
   \   0000008C   690F8DE2           ADD      R0,SP,#+420
   \   00000090   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000094   0820A0E1           MOV      R2,R8
   \   00000098   691F8DE2           ADD      R1,SP,#+420
   \   0000009C   620F8DE2           ADD      R0,SP,#+392
   \   000000A0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A4   0630A0E1           MOV      R3,R6
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   621F8DE2           ADD      R1,SP,#+392
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   ........           _BLF     ??append,??append??rA
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0110A0E3           MOV      R1,#+1
   \   000000C0   620F8DE2           ADD      R0,SP,#+392
   \   000000C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   690F8DE2           ADD      R0,SP,#+420
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   770F8DE2           ADD      R0,SP,#+476
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   700F8DE2           ADD      R0,SP,#+448
   \   000000F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F8   C81094E5           LDR      R1,[R4, #+200]
   \   000000FC   A10F8DE2           ADD      R0,SP,#+644
   \   00000100   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000104   9E10A0E3           MOV      R1,#+158
   \   00000108   701E81E3           ORR      R1,R1,#0x700
   \   0000010C   9A0F8DE2           ADD      R0,SP,#+616
   \   00000110   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000114   0920A0E1           MOV      R2,R9
   \   00000118   0D10A0E1           MOV      R1,SP
   \   0000011C   930F8DE2           ADD      R0,SP,#+588
   \   00000120   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000124   9A2F8DE2           ADD      R2,SP,#+616
   \   00000128   931F8DE2           ADD      R1,SP,#+588
   \   0000012C   8C0F8DE2           ADD      R0,SP,#+560
   \   00000130   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000134   A12F8DE2           ADD      R2,SP,#+644
   \   00000138   8C1F8DE2           ADD      R1,SP,#+560
   \   0000013C   850F8DE2           ADD      R0,SP,#+532
   \   00000140   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000144   0820A0E1           MOV      R2,R8
   \   00000148   851F8DE2           ADD      R1,SP,#+532
   \   0000014C   7E0F8DE2           ADD      R0,SP,#+504
   \   00000150   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000154   0630A0E1           MOV      R3,R6
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   7E1F8DE2           ADD      R1,SP,#+504
   \   00000160   0500A0E1           MOV      R0,R5
   \   00000164   ........           _BLF     ??append,??append??rA
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0110A0E3           MOV      R1,#+1
   \   00000170   7E0F8DE2           ADD      R0,SP,#+504
   \   00000174   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   850F8DE2           ADD      R0,SP,#+532
   \   00000184   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   A10F8DE2           ADD      R0,SP,#+644
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   8C0F8DE2           ADD      R0,SP,#+560
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   9A0F8DE2           ADD      R0,SP,#+616
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   930F8DE2           ADD      R0,SP,#+588
   \   000001C4   ........           _BLF     ??_Tidy,??_Tidy??rA
     52              LocalString += TabStr + TabStr3 + KeyWord(C_CTRL_DEACTIVATE) + KeyWord(DeactivateBy) + CrLfStr;
   \   000001C8   CC1094E5           LDR      R1,[R4, #+204]
   \   000001CC   CB0F8DE2           ADD      R0,SP,#+812
   \   000001D0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001D4   B210A0E3           MOV      R1,#+178
   \   000001D8   701E81E3           ORR      R1,R1,#0x700
   \   000001DC   C40F8DE2           ADD      R0,SP,#+784
   \   000001E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001E4   0920A0E1           MOV      R2,R9
   \   000001E8   0D10A0E1           MOV      R1,SP
   \   000001EC   BD0F8DE2           ADD      R0,SP,#+756
   \   000001F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001F4   C42F8DE2           ADD      R2,SP,#+784
   \   000001F8   BD1F8DE2           ADD      R1,SP,#+756
   \   000001FC   B60F8DE2           ADD      R0,SP,#+728
   \   00000200   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000204   CB2F8DE2           ADD      R2,SP,#+812
   \   00000208   B61F8DE2           ADD      R1,SP,#+728
   \   0000020C   AF0F8DE2           ADD      R0,SP,#+700
   \   00000210   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000214   0820A0E1           MOV      R2,R8
   \   00000218   AF1F8DE2           ADD      R1,SP,#+700
   \   0000021C   A80F8DE2           ADD      R0,SP,#+672
   \   00000220   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000224   0630A0E1           MOV      R3,R6
   \   00000228   0020A0E3           MOV      R2,#+0
   \   0000022C   A81F8DE2           ADD      R1,SP,#+672
   \   00000230   0500A0E1           MOV      R0,R5
   \   00000234   ........           _BLF     ??append,??append??rA
   \   00000238   0020A0E3           MOV      R2,#+0
   \   0000023C   0110A0E3           MOV      R1,#+1
   \   00000240   A80F8DE2           ADD      R0,SP,#+672
   \   00000244   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000248   0020A0E3           MOV      R2,#+0
   \   0000024C   0110A0E3           MOV      R1,#+1
   \   00000250   AF0F8DE2           ADD      R0,SP,#+700
   \   00000254   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000258   0020A0E3           MOV      R2,#+0
   \   0000025C   0110A0E3           MOV      R1,#+1
   \   00000260   CB0F8DE2           ADD      R0,SP,#+812
   \   00000264   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000268   0020A0E3           MOV      R2,#+0
   \   0000026C   0110A0E3           MOV      R1,#+1
   \   00000270   B60F8DE2           ADD      R0,SP,#+728
   \   00000274   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000278   0020A0E3           MOV      R2,#+0
   \   0000027C   0110A0E3           MOV      R1,#+1
   \   00000280   C40F8DE2           ADD      R0,SP,#+784
   \   00000284   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   0110A0E3           MOV      R1,#+1
   \   00000290   BD0F8DE2           ADD      R0,SP,#+756
   \   00000294   ........           _BLF     ??_Tidy,??_Tidy??rA
     53          
     54              LocalString += TabStr + TabStr3 + KeyWord(C_CTRL_AL_DELAY) + (AnsiString)AlarmDelay + CrLfStr;
   \   00000298   D01094E5           LDR      R1,[R4, #+208]
   \   0000029C   420F8DE2           ADD      R0,SP,#+264
   \   000002A0   400E80E2           ADD      R0,R0,#+1024
   \   000002A4   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   000002A8   00A0A0E1           MOV      R10,R0
   \   000002AC   A810A0E3           MOV      R1,#+168
   \   000002B0   701E81E3           ORR      R1,R1,#0x700
   \   000002B4   EE0F8DE2           ADD      R0,SP,#+952
   \   000002B8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002BC   0920A0E1           MOV      R2,R9
   \   000002C0   0D10A0E1           MOV      R1,SP
   \   000002C4   E70F8DE2           ADD      R0,SP,#+924
   \   000002C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002CC   EE2F8DE2           ADD      R2,SP,#+952
   \   000002D0   E71F8DE2           ADD      R1,SP,#+924
   \   000002D4   E00F8DE2           ADD      R0,SP,#+896
   \   000002D8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002DC   0A20A0E1           MOV      R2,R10
   \   000002E0   E01F8DE2           ADD      R1,SP,#+896
   \   000002E4   D90F8DE2           ADD      R0,SP,#+868
   \   000002E8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002EC   0820A0E1           MOV      R2,R8
   \   000002F0   D91F8DE2           ADD      R1,SP,#+868
   \   000002F4   D20F8DE2           ADD      R0,SP,#+840
   \   000002F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002FC   0630A0E1           MOV      R3,R6
   \   00000300   0020A0E3           MOV      R2,#+0
   \   00000304   D21F8DE2           ADD      R1,SP,#+840
   \   00000308   0500A0E1           MOV      R0,R5
   \   0000030C   ........           _BLF     ??append,??append??rA
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   0110A0E3           MOV      R1,#+1
   \   00000318   D20F8DE2           ADD      R0,SP,#+840
   \   0000031C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000320   0020A0E3           MOV      R2,#+0
   \   00000324   0110A0E3           MOV      R1,#+1
   \   00000328   D90F8DE2           ADD      R0,SP,#+868
   \   0000032C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000330   0020A0E3           MOV      R2,#+0
   \   00000334   0110A0E3           MOV      R1,#+1
   \   00000338   420F8DE2           ADD      R0,SP,#+264
   \   0000033C   400E80E2           ADD      R0,R0,#+1024
   \   00000340   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000344   0020A0E3           MOV      R2,#+0
   \   00000348   0110A0E3           MOV      R1,#+1
   \   0000034C   E00F8DE2           ADD      R0,SP,#+896
   \   00000350   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000354   0020A0E3           MOV      R2,#+0
   \   00000358   0110A0E3           MOV      R1,#+1
   \   0000035C   EE0F8DE2           ADD      R0,SP,#+952
   \   00000360   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000364   0020A0E3           MOV      R2,#+0
   \   00000368   0110A0E3           MOV      R1,#+1
   \   0000036C   E70F8DE2           ADD      R0,SP,#+924
   \   00000370   ........           _BLF     ??_Tidy,??_Tidy??rA
     55              LocalString += TabStr + TabStr3 + KeyWord(C_CTRL_ALTERNATIVE) + KeyWord(AlarmAlternative) + CrLfStr;
   \   00000374   041194E5           LDR      R1,[R4, #+260]
   \   00000378   460E8DE2           ADD      R0,SP,#+1120
   \   0000037C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000380   7610A0E3           MOV      R1,#+118
   \   00000384   701E81E3           ORR      R1,R1,#0x700
   \   00000388   44008DE2           ADD      R0,SP,#+68
   \   0000038C   400E80E2           ADD      R0,R0,#+1024
   \   00000390   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000394   0920A0E1           MOV      R2,R9
   \   00000398   0D10A0E1           MOV      R1,SP
   \   0000039C   28008DE2           ADD      R0,SP,#+40
   \   000003A0   400E80E2           ADD      R0,R0,#+1024
   \   000003A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003A8   44208DE2           ADD      R2,SP,#+68
   \   000003AC   402E82E2           ADD      R2,R2,#+1024
   \   000003B0   28108DE2           ADD      R1,SP,#+40
   \   000003B4   401E81E2           ADD      R1,R1,#+1024
   \   000003B8   0C008DE2           ADD      R0,SP,#+12
   \   000003BC   400E80E2           ADD      R0,R0,#+1024
   \   000003C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003C4   462E8DE2           ADD      R2,SP,#+1120
   \   000003C8   0C108DE2           ADD      R1,SP,#+12
   \   000003CC   401E81E2           ADD      R1,R1,#+1024
   \   000003D0   FC0F8DE2           ADD      R0,SP,#+1008
   \   000003D4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003D8   0820A0E1           MOV      R2,R8
   \   000003DC   FC1F8DE2           ADD      R1,SP,#+1008
   \   000003E0   F50F8DE2           ADD      R0,SP,#+980
   \   000003E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003E8   0630A0E1           MOV      R3,R6
   \   000003EC   0020A0E3           MOV      R2,#+0
   \   000003F0   F51F8DE2           ADD      R1,SP,#+980
   \   000003F4   0500A0E1           MOV      R0,R5
   \   000003F8   ........           _BLF     ??append,??append??rA
   \   000003FC   0020A0E3           MOV      R2,#+0
   \   00000400   0110A0E3           MOV      R1,#+1
   \   00000404   F50F8DE2           ADD      R0,SP,#+980
   \   00000408   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000040C   0020A0E3           MOV      R2,#+0
   \   00000410   0110A0E3           MOV      R1,#+1
   \   00000414   FC0F8DE2           ADD      R0,SP,#+1008
   \   00000418   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000041C   0020A0E3           MOV      R2,#+0
   \   00000420   0110A0E3           MOV      R1,#+1
   \   00000424   460E8DE2           ADD      R0,SP,#+1120
   \   00000428   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000042C   0020A0E3           MOV      R2,#+0
   \   00000430   0110A0E3           MOV      R1,#+1
   \   00000434   0C008DE2           ADD      R0,SP,#+12
   \   00000438   400E80E2           ADD      R0,R0,#+1024
   \   0000043C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000440   0020A0E3           MOV      R2,#+0
   \   00000444   0110A0E3           MOV      R1,#+1
   \   00000448   44008DE2           ADD      R0,SP,#+68
   \   0000044C   400E80E2           ADD      R0,R0,#+1024
   \   00000450   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000454   0020A0E3           MOV      R2,#+0
   \   00000458   0110A0E3           MOV      R1,#+1
   \   0000045C   28008DE2           ADD      R0,SP,#+40
   \   00000460   400E80E2           ADD      R0,R0,#+1024
   \   00000464   ........           _BLF     ??_Tidy,??_Tidy??rA
     56              LocalString += TabStr + TabStr3;
   \   00000468   0920A0E1           MOV      R2,R9
   \   0000046C   0D10A0E1           MOV      R1,SP
   \   00000470   7C008DE2           ADD      R0,SP,#+124
   \   00000474   400E80E2           ADD      R0,R0,#+1024
   \   00000478   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000047C   0630A0E1           MOV      R3,R6
   \   00000480   0020A0E3           MOV      R2,#+0
   \   00000484   7C108DE2           ADD      R1,SP,#+124
   \   00000488   401E81E2           ADD      R1,R1,#+1024
   \   0000048C   0500A0E1           MOV      R0,R5
   \   00000490   ........           _BLF     ??append,??append??rA
   \   00000494   0020A0E3           MOV      R2,#+0
   \   00000498   0110A0E3           MOV      R1,#+1
   \   0000049C   7C008DE2           ADD      R0,SP,#+124
   \   000004A0   400E80E2           ADD      R0,R0,#+1024
   \   000004A4   ........           _BLF     ??_Tidy,??_Tidy??rA
     57              for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
   \   000004A8   00B0A0E3           MOV      R11,#+0
   \   000004AC   42AFA0E3           MOV      R10,#+264
   \   000004B0   0D0000EA           B        ??MakeConfigString_4
     58                  LocalString += KeyWord(AlarmTypeList[j]);
   \                     ??MakeConfigString_5:
   \   000004B4   04009AE7           LDR      R0,[R10, +R4]
   \   000004B8   0B1190E7           LDR      R1,[R0, +R11, LSL #+2]
   \   000004BC   1C008DE2           ADD      R0,SP,#+28
   \   000004C0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000004C4   0630A0E1           MOV      R3,R6
   \   000004C8   0020A0E3           MOV      R2,#+0
   \   000004CC   1C108DE2           ADD      R1,SP,#+28
   \   000004D0   0500A0E1           MOV      R0,R5
   \   000004D4   ........           _BLF     ??append,??append??rA
   \   000004D8   0020A0E3           MOV      R2,#+0
   \   000004DC   0110A0E3           MOV      R1,#+1
   \   000004E0   1C008DE2           ADD      R0,SP,#+28
   \   000004E4   ........           _BLF     ??_Tidy,??_Tidy??rA
     59              }
   \   000004E8   01B08BE2           ADD      R11,R11,#+1
   \                     ??MakeConfigString_4:
   \   000004EC   04008AE0           ADD      R0,R10,R4
   \   000004F0   041090E5           LDR      R1,[R0, #+4]
   \   000004F4   000090E5           LDR      R0,[R0, #+0]
   \   000004F8   000041E0           SUB      R0,R1,R0
   \   000004FC   20015BE1           CMP      R11,R0, LSR #+2
   \   00000500   EBFFFF3A           BCC      ??MakeConfigString_5
     60              LocalString += CrLfStr;
   \   00000504   0630A0E1           MOV      R3,R6
   \   00000508   0020A0E3           MOV      R2,#+0
   \   0000050C   0810A0E1           MOV      R1,R8
   \   00000510   0500A0E1           MOV      R0,R5
   \   00000514   ........           _BLF     ??append,??append??rA
     61              if (!PROList.empty()) {
   \   00000518   E40094E5           LDR      R0,[R4, #+228]
   \   0000051C   000050E3           CMP      R0,#+0
   \   00000520   7E00000A           BEQ      ??MakeConfigString_6
     62                  int ListSize = PROList.size();
     63                  LocalString += TabStr + TabStr3 + KeyWord(C_OBJECT_ID) + CrLfStr;
   \   00000524   D110A0E3           MOV      R1,#+209
   \   00000528   FC008DE2           ADD      R0,SP,#+252
   \   0000052C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000530   0920A0E1           MOV      R2,R9
   \   00000534   0D10A0E1           MOV      R1,SP
   \   00000538   E0008DE2           ADD      R0,SP,#+224
   \   0000053C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000540   FC208DE2           ADD      R2,SP,#+252
   \   00000544   E0108DE2           ADD      R1,SP,#+224
   \   00000548   C4008DE2           ADD      R0,SP,#+196
   \   0000054C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000550   0820A0E1           MOV      R2,R8
   \   00000554   C4108DE2           ADD      R1,SP,#+196
   \   00000558   A8008DE2           ADD      R0,SP,#+168
   \   0000055C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000560   0630A0E1           MOV      R3,R6
   \   00000564   0020A0E3           MOV      R2,#+0
   \   00000568   A8108DE2           ADD      R1,SP,#+168
   \   0000056C   0500A0E1           MOV      R0,R5
   \   00000570   ........           _BLF     ??append,??append??rA
   \   00000574   0020A0E3           MOV      R2,#+0
   \   00000578   0110A0E3           MOV      R1,#+1
   \   0000057C   A8008DE2           ADD      R0,SP,#+168
   \   00000580   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000584   0020A0E3           MOV      R2,#+0
   \   00000588   0110A0E3           MOV      R1,#+1
   \   0000058C   C4008DE2           ADD      R0,SP,#+196
   \   00000590   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000594   0020A0E3           MOV      R2,#+0
   \   00000598   0110A0E3           MOV      R1,#+1
   \   0000059C   FC008DE2           ADD      R0,SP,#+252
   \   000005A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005A4   0020A0E3           MOV      R2,#+0
   \   000005A8   0110A0E3           MOV      R1,#+1
   \   000005AC   E0008DE2           ADD      R0,SP,#+224
   \   000005B0   ........           _BLF     ??_Tidy,??_Tidy??rA
     64                  set<PRogramObjectBase *>::iterator pBIt;
     65                  for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   000005B4   D4A094E5           LDR      R10,[R4, #+212]
   \   000005B8   300000EA           B        ??MakeConfigString_7
     66                      PRogramObject *Element = (PRogramObject *)*pBIt;
     67                      int PROIDNumber = Element->IDNumber;
   \                     ??MakeConfigString_8:
   \   000005BC   10009AE5           LDR      R0,[R10, #+16]
   \   000005C0   9CB090E5           LDR      R11,[R0, #+156]
     68                      AnsiString IdNumStr;
   \   000005C4   8C008DE2           ADD      R0,SP,#+140
   \   000005C8   ........           _BLF     ??AnsiString_1,??AnsiString??rA
     69                      IdNumStr.cat_sprintf("0x%0X", PROIDNumber);
   \   000005CC   34229FE5           LDR      R2,??MakeConfigString_3+0x14  ;; `?<Constant "0x%0X">`
   \   000005D0   0B30A0E1           MOV      R3,R11
   \   000005D4   1C108DE2           ADD      R1,SP,#+28
   \   000005D8   8C008DE2           ADD      R0,SP,#+140
   \   000005DC   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000005E0   0020A0E3           MOV      R2,#+0
   \   000005E4   0110A0E3           MOV      R1,#+1
   \   000005E8   1C008DE2           ADD      R0,SP,#+28
   \   000005EC   ........           _BLF     ??_Tidy,??_Tidy??rA
     70                      LocalString += TabStr + TabStr4 + IdNumStr + CrLfStr;
   \   000005F0   14229FE5           LDR      R2,??MakeConfigString_3+0x18  ;; TabStr4
   \   000005F4   0D10A0E1           MOV      R1,SP
   \   000005F8   70008DE2           ADD      R0,SP,#+112
   \   000005FC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000600   8C208DE2           ADD      R2,SP,#+140
   \   00000604   70108DE2           ADD      R1,SP,#+112
   \   00000608   54008DE2           ADD      R0,SP,#+84
   \   0000060C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000610   0820A0E1           MOV      R2,R8
   \   00000614   54108DE2           ADD      R1,SP,#+84
   \   00000618   38008DE2           ADD      R0,SP,#+56
   \   0000061C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000620   0630A0E1           MOV      R3,R6
   \   00000624   0020A0E3           MOV      R2,#+0
   \   00000628   38108DE2           ADD      R1,SP,#+56
   \   0000062C   0500A0E1           MOV      R0,R5
   \   00000630   ........           _BLF     ??append,??append??rA
   \   00000634   0020A0E3           MOV      R2,#+0
   \   00000638   0110A0E3           MOV      R1,#+1
   \   0000063C   38008DE2           ADD      R0,SP,#+56
   \   00000640   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000644   0020A0E3           MOV      R2,#+0
   \   00000648   0110A0E3           MOV      R1,#+1
   \   0000064C   54008DE2           ADD      R0,SP,#+84
   \   00000650   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000654   0020A0E3           MOV      R2,#+0
   \   00000658   0110A0E3           MOV      R1,#+1
   \   0000065C   70008DE2           ADD      R0,SP,#+112
   \   00000660   ........           _BLF     ??_Tidy,??_Tidy??rA
     71                  }
   \   00000664   0020A0E3           MOV      R2,#+0
   \   00000668   0110A0E3           MOV      R1,#+1
   \   0000066C   8C008DE2           ADD      R0,SP,#+140
   \   00000670   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000674   0A00A0E1           MOV      R0,R10
   \   00000678   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000067C   00A0A0E1           MOV      R10,R0
   \                     ??MakeConfigString_7:
   \   00000680   D40084E2           ADD      R0,R4,#+212
   \   00000684   00005AE1           CMP      R10,R0
   \   00000688   CBFFFF1A           BNE      ??MakeConfigString_8
     72                  LocalString += TabStr + TabStr3 + KeyWord(C_PROLIST_END) + CrLfStr;
   \   0000068C   4910A0E3           MOV      R1,#+73
   \   00000690   501E81E3           ORR      R1,R1,#0x500
   \   00000694   5B0F8DE2           ADD      R0,SP,#+364
   \   00000698   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000069C   0920A0E1           MOV      R2,R9
   \   000006A0   0D10A0E1           MOV      R1,SP
   \   000006A4   540F8DE2           ADD      R0,SP,#+336
   \   000006A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000006AC   5B2F8DE2           ADD      R2,SP,#+364
   \   000006B0   541F8DE2           ADD      R1,SP,#+336
   \   000006B4   4D0F8DE2           ADD      R0,SP,#+308
   \   000006B8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000006BC   0820A0E1           MOV      R2,R8
   \   000006C0   4D1F8DE2           ADD      R1,SP,#+308
   \   000006C4   460F8DE2           ADD      R0,SP,#+280
   \   000006C8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000006CC   0630A0E1           MOV      R3,R6
   \   000006D0   0020A0E3           MOV      R2,#+0
   \   000006D4   461F8DE2           ADD      R1,SP,#+280
   \   000006D8   0500A0E1           MOV      R0,R5
   \   000006DC   ........           _BLF     ??append,??append??rA
   \   000006E0   0020A0E3           MOV      R2,#+0
   \   000006E4   0110A0E3           MOV      R1,#+1
   \   000006E8   460F8DE2           ADD      R0,SP,#+280
   \   000006EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006F0   0020A0E3           MOV      R2,#+0
   \   000006F4   0110A0E3           MOV      R1,#+1
   \   000006F8   4D0F8DE2           ADD      R0,SP,#+308
   \   000006FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000700   0020A0E3           MOV      R2,#+0
   \   00000704   0110A0E3           MOV      R1,#+1
   \   00000708   5B0F8DE2           ADD      R0,SP,#+364
   \   0000070C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000710   0020A0E3           MOV      R2,#+0
   \   00000714   0110A0E3           MOV      R1,#+1
   \   00000718   540F8DE2           ADD      R0,SP,#+336
   \   0000071C   ........           _BLF     ??_Tidy,??_Tidy??rA
     73              }
     74              LocalString += TabStr + TabStr2 + KeyWord(C_CTRL_END_COMMON) + CrLfStr;
   \                     ??MakeConfigString_6:
   \   00000720   6E10A0E3           MOV      R1,#+110
   \   00000724   701E81E3           ORR      R1,R1,#0x700
   \   00000728   EC008DE2           ADD      R0,SP,#+236
   \   0000072C   400E80E2           ADD      R0,R0,#+1024
   \   00000730   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000734   0720A0E1           MOV      R2,R7
   \   00000738   0D10A0E1           MOV      R1,SP
   \   0000073C   4D0E8DE2           ADD      R0,SP,#+1232
   \   00000740   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000744   EC208DE2           ADD      R2,SP,#+236
   \   00000748   402E82E2           ADD      R2,R2,#+1024
   \   0000074C   4D1E8DE2           ADD      R1,SP,#+1232
   \   00000750   B4008DE2           ADD      R0,SP,#+180
   \   00000754   400E80E2           ADD      R0,R0,#+1024
   \   00000758   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000075C   0820A0E1           MOV      R2,R8
   \   00000760   B4108DE2           ADD      R1,SP,#+180
   \   00000764   401E81E2           ADD      R1,R1,#+1024
   \   00000768   98008DE2           ADD      R0,SP,#+152
   \   0000076C   400E80E2           ADD      R0,R0,#+1024
   \   00000770   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000774   0630A0E1           MOV      R3,R6
   \   00000778   0020A0E3           MOV      R2,#+0
   \   0000077C   98108DE2           ADD      R1,SP,#+152
   \   00000780   401E81E2           ADD      R1,R1,#+1024
   \   00000784   0500A0E1           MOV      R0,R5
   \   00000788   ........           _BLF     ??append,??append??rA
   \   0000078C   0020A0E3           MOV      R2,#+0
   \   00000790   0110A0E3           MOV      R1,#+1
   \   00000794   98008DE2           ADD      R0,SP,#+152
   \   00000798   400E80E2           ADD      R0,R0,#+1024
   \   0000079C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007A0   0020A0E3           MOV      R2,#+0
   \   000007A4   0110A0E3           MOV      R1,#+1
   \   000007A8   B4008DE2           ADD      R0,SP,#+180
   \   000007AC   400E80E2           ADD      R0,R0,#+1024
   \   000007B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007B4   0020A0E3           MOV      R2,#+0
   \   000007B8   0110A0E3           MOV      R1,#+1
   \   000007BC   EC008DE2           ADD      R0,SP,#+236
   \   000007C0   400E80E2           ADD      R0,R0,#+1024
   \   000007C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007C8   0020A0E3           MOV      R2,#+0
   \   000007CC   0110A0E3           MOV      R1,#+1
   \   000007D0   4D0E8DE2           ADD      R0,SP,#+1232
   \   000007D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     75          
     76              return (LocalString);
   \   000007D8   0020A0E3           MOV      R2,#+0
   \   000007DC   0110A0E3           MOV      R1,#+1
   \   000007E0   0D00A0E1           MOV      R0,SP
   \   000007E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007E8   49DF8DE2           ADD      SP,SP,#+292
   \   000007EC   40DE8DE2           ADD      SP,SP,#+1024
   \   000007F0   ........           B        ?Subroutine15
   \                     ??MakeConfigString_3:
   \   000007F4   ........           DC32     TabStr1
   \   000007F8   ........           DC32     ??npos
   \   000007FC   ........           DC32     TabStr2
   \   00000800   ........           DC32     CrLfStr
   \   00000804   ........           DC32     TabStr3
   \   00000808   ........           DC32     `?<Constant "0x%0X">`
   \   0000080C   ........           DC32     TabStr4
     77          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine15_0:
   \   00000008   ........           DC32     `?<Constant "Control unit on TCU">`
     78          //---------------------------------------------------------------------------
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          bool PROControl::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   90D04DE2           SUB      SP,SP,#+144
   \   00000008   0150A0E1           MOV      R5,R1
     81              SetLineNumber(ConfigString.LineCount);
   \   0000000C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
     82              bool NoError = true;
   \   00000018   0190A0E3           MOV      R9,#+1
     83              int ErrorLine = 0;
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
     84              int Key;
     85              do {
     86                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_2:
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   3C108DE2           ADD      R1,SP,#+60
     87                  if (ErrorLine) {
   \   00000030   ........           LDR      R10,??Subroutine15_0  ;; `?<Constant "Control unit on TCU">`
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??NextWord,??NextWord??rA
   \   0000003C   00009DE5           LDR      R0,[SP, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0700000A           BEQ      ??LoadConfigString_3
     88                      if (ErrorLine != EOF) {
   \   00000048   010070E3           CMN      R0,#+1
   \   0000004C   0E00000A           BEQ      ??LoadConfigString_4
     89                          GiveConfigWarning("Control unit on TCU", ErrorLine);
   \   00000050   0A10A0E1           MOV      R1,R10
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   0000005C   00109DE5           LDR      R1,[SP, #+0]
   \   00000060   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000064   040000EA           B        ??LoadConfigString_5
     90                      }
     91                  } else Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_3:
   \   00000068   3C108DE2           ADD      R1,SP,#+60
   \   0000006C   04008DE2           ADD      R0,SP,#+4
   \   00000070   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   00000074   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000078   0070A0E1           MOV      R7,R0
   \                     ??LoadConfigString_5:
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   04008DE2           ADD      R0,SP,#+4
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??LoadConfigString_4:
   \   0000008C   D10057E3           CMP      R7,#+209
   \   00000090   0301000A           BEQ      ??LoadConfigString_6
   \   00000094   4710A0E3           MOV      R1,#+71
   \   00000098   501E81E3           ORR      R1,R1,#0x500
   \   0000009C   010057E1           CMP      R7,R1
   \   000000A0   E600000A           BEQ      ??LoadConfigString_7
   \   000000A4   021081E2           ADD      R1,R1,#+2
   \   000000A8   010057E1           CMP      R7,R1
   \   000000AC   6E10A013           MOVNE    R1,#+110
   \   000000B0   701E8113           ORRNE    R1,R1,#0x700
   \   000000B4   01005711           CMPNE    R7,R1
   \   000000B8   0C01000A           BEQ      ??LoadConfigString_8
   \   000000BC   081081E2           ADD      R1,R1,#+8
   \   000000C0   010057E1           CMP      R7,R1
   \   000000C4   C700000A           BEQ      ??LoadConfigString_9
   \   000000C8   281081E2           ADD      R1,R1,#+40
   \   000000CC   010057E1           CMP      R7,R1
   \   000000D0   7B00000A           BEQ      ??LoadConfigString_10
   \   000000D4   0A1081E2           ADD      R1,R1,#+10
   \   000000D8   010057E1           CMP      R7,R1
   \   000000DC   B700000A           BEQ      ??LoadConfigString_11
   \   000000E0   0A1081E2           ADD      R1,R1,#+10
   \   000000E4   010057E1           CMP      R7,R1
   \   000000E8   8E00000A           BEQ      ??LoadConfigString_12
   \   000000EC   411E81E2           ADD      R1,R1,#+1040
   \   000000F0   010057E1           CMP      R7,R1
   \   000000F4   01108113           ORRNE    R1,R1,#0x1
   \   000000F8   01005711           CMPNE    R7,R1
   \   000000FC   01108112           ADDNE    R1,R1,#+1
   \   00000100   01005711           CMPNE    R7,R1
   \   00000104   01108113           ORRNE    R1,R1,#0x1
   \   00000108   01005711           CMPNE    R7,R1
   \   0000010C   01108112           ADDNE    R1,R1,#+1
   \   00000110   01005711           CMPNE    R7,R1
   \   00000114   01108113           ORRNE    R1,R1,#0x1
   \   00000118   01005711           CMPNE    R7,R1
   \   0000011C   01108112           ADDNE    R1,R1,#+1
   \   00000120   01005711           CMPNE    R7,R1
   \   00000124   01108113           ORRNE    R1,R1,#0x1
   \   00000128   01005711           CMPNE    R7,R1
   \   0000012C   04108113           ORRNE    R1,R1,#0x4
   \   00000130   01005711           CMPNE    R7,R1
   \   00000134   01108112           ADDNE    R1,R1,#+1
   \   00000138   01005711           CMPNE    R7,R1
   \   0000013C   01108113           ORRNE    R1,R1,#0x1
   \   00000140   01005711           CMPNE    R7,R1
   \   00000144   BD0E5713           CMPNE    R7,#+3024
   \   00000148   02108112           ADDNE    R1,R1,#+2
   \   0000014C   01005711           CMPNE    R7,R1
   \   00000150   01108112           ADDNE    R1,R1,#+1
   \   00000154   01005711           CMPNE    R7,R1
   \   00000158   01108113           ORRNE    R1,R1,#0x1
   \   0000015C   01005711           CMPNE    R7,R1
   \   00000160   01108112           ADDNE    R1,R1,#+1
   \   00000164   01005711           CMPNE    R7,R1
   \   00000168   01108113           ORRNE    R1,R1,#0x1
   \   0000016C   01005711           CMPNE    R7,R1
   \   00000170   01108112           ADDNE    R1,R1,#+1
   \   00000174   01005711           CMPNE    R7,R1
   \   00000178   01108113           ORRNE    R1,R1,#0x1
   \   0000017C   01005711           CMPNE    R7,R1
   \   00000180   01108112           ADDNE    R1,R1,#+1
   \   00000184   01005711           CMPNE    R7,R1
   \   00000188   01108113           ORRNE    R1,R1,#0x1
   \   0000018C   01005711           CMPNE    R7,R1
   \   00000190   01108112           ADDNE    R1,R1,#+1
   \   00000194   01005711           CMPNE    R7,R1
   \   00000198   01108113           ORRNE    R1,R1,#0x1
   \   0000019C   01005711           CMPNE    R7,R1
   \   000001A0   01108112           ADDNE    R1,R1,#+1
   \   000001A4   01005711           CMPNE    R7,R1
   \   000001A8   01108113           ORRNE    R1,R1,#0x1
   \   000001AC   01005711           CMPNE    R7,R1
   \   000001B0   01108112           ADDNE    R1,R1,#+1
   \   000001B4   01005711           CMPNE    R7,R1
   \   000001B8   01108113           ORRNE    R1,R1,#0x1
   \   000001BC   01005711           CMPNE    R7,R1
   \   000001C0   BE0E5713           CMPNE    R7,#+3040
   \   000001C4   02108112           ADDNE    R1,R1,#+2
   \   000001C8   01005711           CMPNE    R7,R1
   \   000001CC   01108112           ADDNE    R1,R1,#+1
   \   000001D0   01005711           CMPNE    R7,R1
   \   000001D4   01108113           ORRNE    R1,R1,#0x1
   \   000001D8   01005711           CMPNE    R7,R1
   \   000001DC   02108112           ADDNE    R1,R1,#+2
   \   000001E0   01005711           CMPNE    R7,R1
   \   000001E4   01108112           ADDNE    R1,R1,#+1
   \   000001E8   01005711           CMPNE    R7,R1
   \   000001EC   01108113           ORRNE    R1,R1,#0x1
   \   000001F0   01005711           CMPNE    R7,R1
   \   000001F4   01108112           ADDNE    R1,R1,#+1
   \   000001F8   01005711           CMPNE    R7,R1
   \   000001FC   01108113           ORRNE    R1,R1,#0x1
   \   00000200   01005711           CMPNE    R7,R1
   \   00000204   A1108112           ADDNE    R1,R1,#+161
   \   00000208   01005711           CMPNE    R7,R1
   \   0000020C   01108113           ORRNE    R1,R1,#0x1
   \   00000210   01005711           CMPNE    R7,R1
   \   00000214   03108112           ADDNE    R1,R1,#+3
   \   00000218   01005711           CMPNE    R7,R1
   \   0000021C   01108113           ORRNE    R1,R1,#0x1
   \   00000220   01005711           CMPNE    R7,R1
   \   00000224   C90E5713           CMPNE    R7,#+3216
   \   00000228   02108112           ADDNE    R1,R1,#+2
   \   0000022C   01005711           CMPNE    R7,R1
   \   00000230   01108112           ADDNE    R1,R1,#+1
   \   00000234   01005711           CMPNE    R7,R1
   \   00000238   01108113           ORRNE    R1,R1,#0x1
   \   0000023C   01005711           CMPNE    R7,R1
   \   00000240   0C108113           ORRNE    R1,R1,#0xC
   \   00000244   01005711           CMPNE    R7,R1
   \   00000248   CA0E5713           CMPNE    R7,#+3232
   \   0000024C   02108112           ADDNE    R1,R1,#+2
   \   00000250   01005711           CMPNE    R7,R1
   \   00000254   01108112           ADDNE    R1,R1,#+1
   \   00000258   01005711           CMPNE    R7,R1
   \   0000025C   03108112           ADDNE    R1,R1,#+3
   \   00000260   01005711           CMPNE    R7,R1
   \   00000264   01108112           ADDNE    R1,R1,#+1
   \   00000268   01005711           CMPNE    R7,R1
   \   0000026C   01108113           ORRNE    R1,R1,#0x1
   \   00000270   01005711           CMPNE    R7,R1
   \   00000274   6D00000A           BEQ      ??LoadConfigString_13
     92                  switch (Key) {
     93                  default:
     94                      GiveConfigWarning("Control unit on TCU", InputKeyWord, ConfigString.LineCount);
   \   00000278   3C108DE2           ADD      R1,SP,#+60
   \   0000027C   58008DE2           ADD      R0,SP,#+88
   \   00000280   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   00000284   0080A0E1           MOV      R8,R0
   \   00000288   0A10A0E1           MOV      R1,R10
   \   0000028C   74008DE2           ADD      R0,SP,#+116
   \   00000290   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   00000294   1C2095E5           LDR      R2,[R5, #+28]
   \   00000298   0810A0E1           MOV      R1,R8
   \   0000029C   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000002A0   0020A0E3           MOV      R2,#+0
   \   000002A4   0110A0E3           MOV      R1,#+1
   \   000002A8   58008DE2           ADD      R0,SP,#+88
   \   000002AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002B0   0020A0E3           MOV      R2,#+0
   \   000002B4   0110A0E3           MOV      R1,#+1
   \   000002B8   74008DE2           ADD      R0,SP,#+116
   \                     ??LoadConfigString_14:
   \   000002BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C0   8A0000EA           B        ??LoadConfigString_8
     95                      break;
     96                  case C_CTRL_END_COMMON:
     97                      break;
     98                  case C_CTRL_NORMAL_STATE:
     99                      {
    100                          AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_10:
   \   000002C4   0030A0E3           MOV      R3,#+0
   \   000002C8   0D20A0E1           MOV      R2,SP
   \   000002CC   20108DE2           ADD      R1,SP,#+32
   \   000002D0   0500A0E1           MOV      R0,R5
   \   000002D4   ........           _BLF     ??NextWord,??NextWord??rA
    101                          if (!ErrorLine) {
   \   000002D8   00009DE5           LDR      R0,[SP, #+0]
   \   000002DC   000050E3           CMP      R0,#+0
   \   000002E0   0800001A           BNE      ??LoadConfigString_15
    102                              NormalState = FindConfigKey(TempStr);
   \   000002E4   20108DE2           ADD      R1,SP,#+32
   \   000002E8   04008DE2           ADD      R0,SP,#+4
   \   000002EC   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   000002F0   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000002F4   C80084E5           STR      R0,[R4, #+200]
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   0110A0E3           MOV      R1,#+1
   \   00000300   04008DE2           ADD      R0,SP,#+4
   \   00000304   ........           _BLF     ??_Tidy,??_Tidy??rA
    103                          }
    104                          NoError = !ErrorLine;
   \                     ??LoadConfigString_15:
   \   00000308   00009DE5           LDR      R0,[SP, #+0]
    105                      }
   \   0000030C   0020A0E3           MOV      R2,#+0
   \   00000310   000050E3           CMP      R0,#+0
   \   00000314   0190A003           MOVEQ    R9,#+1
   \   00000318   0090A013           MOVNE    R9,#+0
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   20008DE2           ADD      R0,SP,#+32
   \   00000324   E4FFFFEA           B        ??LoadConfigString_14
    106                      break;
    107                  case C_CTRL_DEACTIVATE:
    108                      {
    109                          AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_12:
   \   00000328   0030A0E3           MOV      R3,#+0
   \   0000032C   0D20A0E1           MOV      R2,SP
   \   00000330   20108DE2           ADD      R1,SP,#+32
   \   00000334   0500A0E1           MOV      R0,R5
   \   00000338   ........           _BLF     ??NextWord,??NextWord??rA
    110                          if (!ErrorLine) {
   \   0000033C   00009DE5           LDR      R0,[SP, #+0]
   \   00000340   000050E3           CMP      R0,#+0
   \   00000344   1500001A           BNE      ??LoadConfigString_16
    111                              int tmpKey = FindConfigKey(TempStr);
   \   00000348   20108DE2           ADD      R1,SP,#+32
   \   0000034C   04008DE2           ADD      R0,SP,#+4
   \   00000350   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   00000354   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000358   0090A0E1           MOV      R9,R0
   \   0000035C   0020A0E3           MOV      R2,#+0
   \   00000360   0110A0E3           MOV      R1,#+1
   \   00000364   04008DE2           ADD      R0,SP,#+4
   \   00000368   ........           _BLF     ??_Tidy,??_Tidy??rA
    112                              switch (tmpKey) {
   \   0000036C   B30049E2           SUB      R0,R9,#+179
   \   00000370   700E40E2           SUB      R0,R0,#+1792
   \   00000374   040050E3           CMP      R0,#+4
   \   00000378   0600008A           BHI      ??LoadConfigString_17
   \   0000037C   011F8FE2           ADR      R1,??LoadConfigString_1
   \   00000380   0010D1E7           LDRB     R1,[R1, R0]
   \   00000384   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   00000388   01010101           DC8      +1,+1,+1,+1
   \   0000038C   01000000           DC8      +1,+0,+0,+0
    113                              case C_CTRL_DE_ACKNOW       :
    114                              case C_CTRL_DE_IDLE         :
    115                              case C_CTRL_DE_VALUE        :
    116                              case C_CTRL_DE_VAL_ENABLED  :
    117                              case C_CTRL_DE_SILENCE      :
    118                                  DeactivateBy = tmpKey;
   \                     ??LoadConfigString_18:
   \   00000390   CC9084E5           STR      R9,[R4, #+204]
   \   00000394   010000EA           B        ??LoadConfigString_16
    119                                  break;
    120                              default:
    121                                  ErrorLine = ConfigString.LineCount;
   \                     ??LoadConfigString_17:
   \   00000398   1C1095E5           LDR      R1,[R5, #+28]
   \   0000039C   00108DE5           STR      R1,[SP, #+0]
    122                                  break;
    123                              }
    124                          }
    125                          NoError = !ErrorLine;
   \                     ??LoadConfigString_16:
   \   000003A0   00009DE5           LDR      R0,[SP, #+0]
    126                      }
   \   000003A4   0020A0E3           MOV      R2,#+0
   \   000003A8   000050E3           CMP      R0,#+0
   \   000003AC   0190A003           MOVEQ    R9,#+1
   \   000003B0   0090A013           MOVNE    R9,#+0
   \   000003B4   0110A0E3           MOV      R1,#+1
   \   000003B8   20008DE2           ADD      R0,SP,#+32
   \   000003BC   BEFFFFEA           B        ??LoadConfigString_14
    127                      break;
    128                  case C_CTRL_AL_DELAY:
    129                      {
    130                          AlarmDelay = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_11:
   \   000003C0   0020A0E3           MOV      R2,#+0
   \   000003C4   0D10A0E1           MOV      R1,SP
   \   000003C8   0500A0E1           MOV      R0,R5
   \   000003CC   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000003D0   D00084E5           STR      R0,[R4, #+208]
    131                          NoError = !ErrorLine;
   \   000003D4   00009DE5           LDR      R0,[SP, #+0]
   \   000003D8   000050E3           CMP      R0,#+0
   \   000003DC   4200001A           BNE      ??LoadConfigString_19
   \                     ??LoadConfigString_20:
   \   000003E0   0190A0E3           MOV      R9,#+1
   \   000003E4   410000EA           B        ??LoadConfigString_8
    132                      }
    133                      break;
    134                  case C_CTRL_ALTERNATIVE:
    135                      {
    136                          AnsiString TempStr = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_9:
   \   000003E8   0030A0E3           MOV      R3,#+0
   \   000003EC   0D20A0E1           MOV      R2,SP
   \   000003F0   20108DE2           ADD      R1,SP,#+32
   \   000003F4   0500A0E1           MOV      R0,R5
   \   000003F8   ........           _BLF     ??NextWord,??NextWord??rA
    137                          if (!ErrorLine) {
   \   000003FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000400   000050E3           CMP      R0,#+0
   \   00000404   BFFFFF1A           BNE      ??LoadConfigString_15
    138                              AlarmAlternative = FindConfigKey(TempStr);
   \   00000408   20108DE2           ADD      R1,SP,#+32
   \   0000040C   04008DE2           ADD      R0,SP,#+4
   \   00000410   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   00000414   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000418   040184E5           STR      R0,[R4, #+260]
   \   0000041C   0020A0E3           MOV      R2,#+0
   \   00000420   0110A0E3           MOV      R1,#+1
   \   00000424   04008DE2           ADD      R0,SP,#+4
   \   00000428   ........           _BLF     ??_Tidy,??_Tidy??rA
    139                          }
    140                          NoError = !ErrorLine;
   \   0000042C   B5FFFFEA           B        ??LoadConfigString_15
    141                      }
    142                      break;
    143                  case ID_AL_OVERFILL                 :
    144                  case ID_AL_HIGH_LEVEL               :
    145                  case ID_AL_LOW_LEVEL                :
    146                  case ID_AL_LOWLOW_LEVEL               :
    147                  case ID_AL_HIGH_TEMP                :
    148                  case ID_AL_LOW_TEMP                 :
    149                  case ID_AL_LOW_BOT_TEMP             :
    150                  case ID_AL_HIGH_BOT_TEMP            :
    151                  case ID_AL_MAIN_WATERINGR           :
    152                  case ID_AL_PRE_WATERINGR            :
    153                  case ID_AL_LOW_T_PRESS              :
    154                  case ID_AL_HIGH_T_PRESS             :
    155                  case ID_AL_LOW_INERT_GAS_PRESS      :
    156                  case ID_AL_HIGH_INERT_GAS_PRESS     :
    157                  case ID_AL_LOW_PRESS_VAC            :
    158                  case ID_AL_HIGH_PRESS_VAC           :
    159                  case ID_AL_LOW_VAPOUR_RETURN        :
    160                  case ID_AL_HIGH_VAPOUR_RETURN       :
    161                  case ID_AL_X_LOW_T_PRESS1           :
    162                  case ID_AL_X_HIGH_T_PRESS1          :
    163                  case ID_AL_X_LOW_T_PRESS2           :
    164                  case ID_AL_X_HIGH_T_PRESS2          :
    165                  case ID_AL_LOW_LOADRATE             :
    166                  case ID_AL_HIGH_LOADRATE            :
    167                  case ID_AL_LEVEL_CHANGE             :
    168                  case ID_AL_DENS_DIFF                :
    169                  case ID_AL_LOW_LINE_PRESS           :
    170                  case ID_AL_HIGH_LINE_PRESS          :
    171                  case ID_AL_HIGHHIGH_LINE_PRESS          :
    172                  case ID_AL_SNS_OPEN_LOOP            :
    173                  case ID_AL_LEVEL_SWITCH             :
    174                  case ID_AL_LSWITCH_TEST             :
    175                  case ID_AL_LSWITCH_FAILURE          :
    176                  case ID_AL_SNS_SHORT_CIRCUIT        :
    177                  case ID_AL_SNS_HART_COM_ERROR       :
    178                  case ID_AL_SNS_HART_OPEN_LOOP       :
    179                  case ID_AL_SNS_HART_SHORT_CIRCUIT   :
    180                  case ID_AL_SNS_AIR_PURGE_FAILURE    :
    181                  case ID_AL_SNS_CONCAL_ERROR         :
    182                  case ID_AL_SNS_CONV_ERROR           :
    183                  case ID_AL_IO_COM_ERROR             :
    184                  case ID_AL_SC_COM_ERROR             :
    185                  case ID_AL_MODBUS_COM_ERROR         :
    186                  case ID_AL_MODBUS_INPUT_STATUS      :
    187                  case ID_AL_WATER_DETECT             :
    188                  case ID_AL_FUSE                     :
    189                  case ID_AL_AC_VOLTAGE               :
    190                  case ID_AL_LOW_VOLTAGE              :
    191                  case ID_AL_HI_VOLTAGE               :
    192                  case ID_AL_TWM_ELAPSED_TIME      :
    193                  case ID_AL_TWM_LOW_SPEED      :
    194                      AlarmTypeList.push_back(Key);
   \                     ??LoadConfigString_13:
   \   00000430   0710A0E1           MOV      R1,R7
   \   00000434   420F84E2           ADD      R0,R4,#+264
   \   00000438   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
   \   0000043C   2B0000EA           B        ??LoadConfigString_8
    195                      break;
    196                  case C_PROLIST_END:
    197                      break;
    198                  case C_PROLIST_START:
    199                      {
    200                          unsigned NumberOfIdNumbers = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_7:
   \   00000440   0020A0E3           MOV      R2,#+0
   \   00000444   0D10A0E1           MOV      R1,SP
   \   00000448   0500A0E1           MOV      R0,R5
   \   0000044C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000450   00A0A0E1           MOV      R10,R0
    201                          for (unsigned Count = 0; NoError && Count < NumberOfIdNumbers; Count++) {
   \   00000454   00B0A0E3           MOV      R11,#+0
   \   00000458   010000EA           B        ??LoadConfigString_21
    202                              int PROIDNumber = ConfigString.ReadInteger(ErrorLine);
    203                              NoError = !ErrorLine;
   \                     ??LoadConfigString_22:
   \   0000045C   0090A0E3           MOV      R9,#+0
   \                     ??LoadConfigString_23:
   \   00000460   01B08BE2           ADD      R11,R11,#+1
   \                     ??LoadConfigString_21:
   \   00000464   000059E3           CMP      R9,#+0
   \   00000468   2000000A           BEQ      ??LoadConfigString_8
   \   0000046C   0A005BE1           CMP      R11,R10
   \   00000470   1E00002A           BCS      ??LoadConfigString_8
   \   00000474   0020A0E3           MOV      R2,#+0
   \   00000478   0D10A0E1           MOV      R1,SP
   \   0000047C   0500A0E1           MOV      R0,R5
   \   00000480   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000484   0010A0E1           MOV      R1,R0
   \   00000488   00009DE5           LDR      R0,[SP, #+0]
   \   0000048C   000050E3           CMP      R0,#+0
   \   00000490   F1FFFF1A           BNE      ??LoadConfigString_22
   \   00000494   0190A0E3           MOV      R9,#+1
    204                              if (NoError) {
    205                                  IdNumbers.push_back(PROIDNumber);
   \   00000498   450F84E2           ADD      R0,R4,#+276
   \   0000049C   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
   \   000004A0   EEFFFFEA           B        ??LoadConfigString_23
    206                              }
    207                          }
    208                      }
    209                      break;
    210                  case C_OBJECT_ID    :
    211                      do {
    212                          unsigned PROIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_6:
   \   000004A4   4920A0E3           MOV      R2,#+73
   \   000004A8   502E82E3           ORR      R2,R2,#0x500
   \   000004AC   0D10A0E1           MOV      R1,SP
   \   000004B0   0500A0E1           MOV      R0,R5
   \   000004B4   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    213                          if (!ErrorLine) {
   \   000004B8   00109DE5           LDR      R1,[SP, #+0]
   \   000004BC   000051E3           CMP      R1,#+0
   \   000004C0   0200001A           BNE      ??LoadConfigString_24
    214                              IdNumbers.push_back(PROIDNumber);
   \   000004C4   0010A0E1           MOV      R1,R0
   \   000004C8   450F84E2           ADD      R0,R4,#+276
   \   000004CC   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
    215                          }
    216                      }while (!ErrorLine);
   \                     ??LoadConfigString_24:
   \   000004D0   00009DE5           LDR      R0,[SP, #+0]
   \   000004D4   000050E3           CMP      R0,#+0
   \   000004D8   F1FFFF0A           BEQ      ??LoadConfigString_6
    217                      if (ErrorLine == END_FOUND) {
   \   000004DC   020070E3           CMN      R0,#+2
    218                          ErrorLine = 0;
   \   000004E0   0010A003           MOVEQ    R1,#+0
   \   000004E4   00108D05           STREQ    R1,[SP, #+0]
   \   000004E8   BCFFFF0A           BEQ      ??LoadConfigString_20
   \                     ??LoadConfigString_19:
   \   000004EC   0090A0E3           MOV      R9,#+0
    219                      }
    220                      NoError = !ErrorLine;
    221                      break;
    222                  }
    223              }while (NoError && (ErrorLine != EOF) && (Key != C_CTRL_END_COMMON));
   \                     ??LoadConfigString_8:
   \   000004F0   0020A0E3           MOV      R2,#+0
   \   000004F4   0110A0E3           MOV      R1,#+1
   \   000004F8   3C008DE2           ADD      R0,SP,#+60
   \   000004FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000500   000059E3           CMP      R9,#+0
   \   00000504   00009D15           LDRNE    R0,[SP, #+0]
   \   00000508   01007013           CMNNE    R0,#+1
   \   0000050C   6E00A013           MOVNE    R0,#+110
   \   00000510   700E8013           ORRNE    R0,R0,#0x700
   \   00000514   00005711           CMPNE    R7,R0
   \   00000518   C1FEFF1A           BNE      ??LoadConfigString_2
    224              return (NoError);
   \   0000051C   0900A0E1           MOV      R0,R9
   \   00000520   90D08DE2           ADD      SP,SP,#+144
   \   00000524                      REQUIRE ?Subroutine15
   \   00000524                      ;; // Fall through to label ?Subroutine15
    225          }
    226          //--------------------------------------------------------------------------- '
    227          

   \                                 In segment CODE, align 4, keep-with-next
    228          void PROControl::SetAlarmList(void) {
   \                     ??SetAlarmList:
   \   00000000   F3472DE9           PUSH     {R0,R1,R4-R10,LR}
    229              switch (AlarmAlternative) {
   \   00000004   C8719FE5           LDR      R7,??SetAlarmList_2  ;; ??AlarmSet
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   041195E5           LDR      R1,[R5, #+260]
   \   00000010   D44095E5           LDR      R4,[R5, #+212]
   \   00000014   E40095E5           LDR      R0,[R5, #+228]
   \   00000018   008097E5           LDR      R8,[R7, #+0]
   \   0000001C   426FA0E3           MOV      R6,#+264
   \   00000020   771041E2           SUB      R1,R1,#+119
   \   00000024   701E41E2           SUB      R1,R1,#+1792
   \   00000028   030051E3           CMP      R1,#+3
   \   0000002C   6600008A           BHI      ??SetAlarmList_3
   \   00000030   012F8FE2           ADR      R2,??SetAlarmList_1
   \   00000034   0120D2E7           LDRB     R2,[R2, R1]
   \   00000038   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??SetAlarmList_1:
   \   0000003C   001E223A           DC8      +0,+30,+34,+58
    230              case C_CTRL_ALT_ALL      :
    231                  {
    232                      set<AlarmBasic *>::iterator APtrIt;
    233                      for (APtrIt = AlarmBasic::AlarmSet.begin(); APtrIt != AlarmBasic::AlarmSet.end(); APtrIt++) {
   \                     ??SetAlarmList_4:
   \   00000040   070058E1           CMP      R8,R7
   \   00000044   6000000A           BEQ      ??SetAlarmList_3
    234                          AlarmList.insert(*APtrIt);
   \   00000048   102098E5           LDR      R2,[R8, #+16]
   \   0000004C   EC1085E2           ADD      R1,R5,#+236
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??insert_1,??insert??rA
    235                      }
   \   00000058   0800A0E1           MOV      R0,R8
   \   0000005C   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000060   0080A0E1           MOV      R8,R0
   \   00000064   F5FFFFEA           B        ??SetAlarmList_4
    236                  }
    237                  break;
    238              case C_CTRL_ALT_AL_TYPES :
    239                  {
    240                      set<AlarmBasic *>::iterator APtrIt;
    241                      for (APtrIt = AlarmBasic::AlarmSet.begin(); APtrIt != AlarmBasic::AlarmSet.end(); APtrIt++) {
    242                          for (unsigned j = 0; j < AlarmTypeList.size(); j++) {
    243                              if ((*APtrIt)->Type == AlarmTypeList[j]) {
   \                     ??SetAlarmList_5:
   \   00000068   100098E5           LDR      R0,[R8, #+16]
   \   0000006C   051096E7           LDR      R1,[R6, +R5]
   \   00000070   A00090E5           LDR      R0,[R0, #+160]
   \   00000074   041191E7           LDR      R1,[R1, +R4, LSL #+2]
   \   00000078   010050E1           CMP      R0,R1
   \   0000007C   0300001A           BNE      ??SetAlarmList_6
    244                                  AlarmList.insert(*APtrIt);
   \   00000080   102098E5           LDR      R2,[R8, #+16]
   \   00000084   EC1085E2           ADD      R1,R5,#+236
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           _BLF     ??insert_1,??insert??rA
    245                              }
    246                          }
   \                     ??SetAlarmList_6:
   \   00000090   014084E2           ADD      R4,R4,#+1
   \                     ??SetAlarmList_7:
   \   00000094   050086E0           ADD      R0,R6,R5
   \   00000098   041090E5           LDR      R1,[R0, #+4]
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000041E0           SUB      R0,R1,R0
   \   000000A4   200154E1           CMP      R4,R0, LSR #+2
   \   000000A8   EEFFFF3A           BCC      ??SetAlarmList_5
   \   000000AC   0800A0E1           MOV      R0,R8
   \   000000B0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000B4   0080A0E1           MOV      R8,R0
   \                     ??SetAlarmList_8:
   \   000000B8   070058E1           CMP      R8,R7
   \   000000BC   4200000A           BEQ      ??SetAlarmList_3
   \   000000C0   0040A0E3           MOV      R4,#+0
   \   000000C4   F2FFFFEA           B        ??SetAlarmList_7
    247                      }
    248                  }
    249                  break;
    250              case C_CTRL_ALT_PRO_LIST :
    251                  if (!PROList.empty()) {
   \                     ??SetAlarmList_9:
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   3E00000A           BEQ      ??SetAlarmList_3
    252                      set<PRogramObjectBase *>::iterator pBIt;
    253                      for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   000000D0   0E0000EA           B        ??SetAlarmList_10
    254                          PRogramObject *TElement = (PRogramObject *)*pBIt;
    255                          set<AlarmBasic *>::iterator pBIt;
    256                          for (pBIt = TElement->CompleteAlarmInfoList.begin(); pBIt != TElement->CompleteAlarmInfoList.end(); pBIt++) {
    257                              AlarmBasic *AlPtr = *pBIt;
   \                     ??SetAlarmList_11:
   \   000000D4   102096E5           LDR      R2,[R6, #+16]
    258                              if (AlPtr) AlarmList.insert(AlPtr);
   \   000000D8   000052E3           CMP      R2,#+0
   \   000000DC   0200000A           BEQ      ??SetAlarmList_12
   \   000000E0   EC1085E2           ADD      R1,R5,#+236
   \   000000E4   0D00A0E1           MOV      R0,SP
   \   000000E8   ........           _BLF     ??insert_1,??insert??rA
    259                          }
   \                     ??SetAlarmList_12:
   \   000000EC   0600A0E1           MOV      R0,R6
   \   000000F0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000000F4   0060A0E1           MOV      R6,R0
   \                     ??SetAlarmList_13:
   \   000000F8   FC0087E2           ADD      R0,R7,#+252
   \   000000FC   000056E1           CMP      R6,R0
   \   00000100   F3FFFF1A           BNE      ??SetAlarmList_11
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000010C   0040A0E1           MOV      R4,R0
   \                     ??SetAlarmList_10:
   \   00000110   D40085E2           ADD      R0,R5,#+212
   \   00000114   000054E1           CMP      R4,R0
   \   00000118   2B00000A           BEQ      ??SetAlarmList_3
   \   0000011C   107094E5           LDR      R7,[R4, #+16]
   \   00000120   FC6097E5           LDR      R6,[R7, #+252]
   \   00000124   F3FFFFEA           B        ??SetAlarmList_13
    260                      }
    261                  }
    262                  break;
    263              case C_CTRL_ALT_TYPE_PRO :
    264                  if (!PROList.empty()) {
   \                     ??SetAlarmList_14:
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   2600000A           BEQ      ??SetAlarmList_3
    265                      set<PRogramObjectBase *>::iterator pBIt;
    266                      for (pBIt = PROList.begin(); pBIt != PROList.end(); pBIt++) {
   \   00000130   200000EA           B        ??SetAlarmList_15
    267                          PRogramObject *TElement = (PRogramObject *)*pBIt;
    268                          set<AlarmBasic *>::iterator pBIt;
    269                          for (pBIt = TElement->CompleteAlarmInfoList.begin(); pBIt != TElement->CompleteAlarmInfoList.end(); pBIt++) {
    270                              AlarmBasic *AlPtr = *pBIt;
   \                     ??SetAlarmList_16:
   \   00000134   109097E5           LDR      R9,[R7, #+16]
    271                              if (AlPtr) {
   \   00000138   000059E3           CMP      R9,#+0
   \   0000013C   1400000A           BEQ      ??SetAlarmList_17
    272                                  bool Found = false;
   \   00000140   0000A0E3           MOV      R0,#+0
    273                                  for (unsigned j = 0; !Found && j < AlarmTypeList.size(); j++) {
   \   00000144   00A0A0E3           MOV      R10,#+0
   \                     ??SetAlarmList_18:
   \   00000148   051086E0           ADD      R1,R6,R5
   \   0000014C   042091E5           LDR      R2,[R1, #+4]
   \   00000150   001091E5           LDR      R1,[R1, #+0]
   \   00000154   011042E0           SUB      R1,R2,R1
   \   00000158   21015AE1           CMP      R10,R1, LSR #+2
   \   0000015C   0C00002A           BCS      ??SetAlarmList_17
    274                                      if (AlPtr->Type == AlarmTypeList[j]) {
   \   00000160   052096E7           LDR      R2,[R6, +R5]
   \   00000164   A01099E5           LDR      R1,[R9, #+160]
   \   00000168   0A2192E7           LDR      R2,[R2, +R10, LSL #+2]
   \   0000016C   020051E1           CMP      R1,R2
   \   00000170   0400001A           BNE      ??SetAlarmList_19
    275                                          AlarmList.insert(AlPtr);
   \   00000174   0920A0E1           MOV      R2,R9
   \   00000178   EC1085E2           ADD      R1,R5,#+236
   \   0000017C   0D00A0E1           MOV      R0,SP
   \   00000180   ........           _BLF     ??insert_1,??insert??rA
    276                                          Found = true;
   \   00000184   0100A0E3           MOV      R0,#+1
    277                                      }
    278                                  }
   \                     ??SetAlarmList_19:
   \   00000188   01A08AE2           ADD      R10,R10,#+1
   \   0000018C   000050E3           CMP      R0,#+0
   \   00000190   ECFFFF0A           BEQ      ??SetAlarmList_18
    279                              }
    280                          }
   \                     ??SetAlarmList_17:
   \   00000194   0700A0E1           MOV      R0,R7
   \   00000198   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000019C   0070A0E1           MOV      R7,R0
   \                     ??SetAlarmList_20:
   \   000001A0   FC0088E2           ADD      R0,R8,#+252
   \   000001A4   000057E1           CMP      R7,R0
   \   000001A8   E1FFFF1A           BNE      ??SetAlarmList_16
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   ........           _BLF     ??_IncP,??_IncP??rA
   \   000001B4   0040A0E1           MOV      R4,R0
   \                     ??SetAlarmList_15:
   \   000001B8   D40085E2           ADD      R0,R5,#+212
   \   000001BC   000054E1           CMP      R4,R0
   \   000001C0   10809415           LDRNE    R8,[R4, #+16]
   \   000001C4   FC709815           LDRNE    R7,[R8, #+252]
   \   000001C8   F4FFFF1A           BNE      ??SetAlarmList_20
    281                      }
    282                  }
    283                  break;
    284              }
    285          }
   \                     ??SetAlarmList_3:
   \   000001CC   F347BDE8           POP      {R0,R1,R4-R10,LR}
   \   000001D0   1EFF2FE1           BX       LR               ;; return
   \                     ??SetAlarmList_2:
   \   000001D4   ........           DC32     ??AlarmSet
    286          //--------------------------------------------------------------------------- '

   \                                 In segment CODE, align 4, keep-with-next
    287          void PROControl::SetProList(void) {
   \                     ??SetProList:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   0040A0E1           MOV      R4,R0
    288              if (!IdNumbers.empty()) {
   \   0000000C   455FA0E3           MOV      R5,#+276
   \   00000010   040085E0           ADD      R0,R5,R4
   \   00000014   041090E5           LDR      R1,[R0, #+4]
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000041E0           SUB      R0,R1,R0
   \   00000020   2001B0E1           LSRS     R0,R0,#+2
   \   00000024   3100000A           BEQ      ??SetProList_1
    289                  PROList.clear();
   \   00000028   D40084E2           ADD      R0,R4,#+212
   \   0000002C   ........           _BLF     ??clear,??clear??rA
    290                  for (unsigned i = 0; i < IdNumbers.size(); i++) {
   \   00000030   0060A0E3           MOV      R6,#+0
   \   00000034   1C0000EA           B        ??SetProList_2
    291                      PRogramObject *PROPtr = (PRogramObject *)FindPROFromIDNumber(IdNumbers[i]);
    292                      if (PROPtr) {
    293                          PROList.insert(PROPtr);
    294                      } else {
    295                          AnsiString InfoStr;
   \                     ??SetProList_3:
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??AnsiString_1,??AnsiString??rA
    296                          InfoStr.cat_sprintf("PROControl IDNumber 0x%0x is incorrect. Line number: %i", IdNumbers[i], GetLineNumber());
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??GetLineNumber,??GetLineNumber??rA
   \   00000048   ........           LDR      R2,??Subroutine14_0  ;; `?<Constant "PROControl IDNumber 0...">`
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   040095E7           LDR      R0,[R5, +R4]
   \   00000054   28108DE2           ADD      R1,SP,#+40
   \   00000058   063190E7           LDR      R3,[R0, +R6, LSL #+2]
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   28008DE2           ADD      R0,SP,#+40
   \   00000070   ........           _BLF     ??_Tidy,??_Tidy??rA
    297                          GiveConfigWarning(InfoStr);
   \   00000074   04108DE2           ADD      R1,SP,#+4
   \   00000078   44008DE2           ADD      R0,SP,#+68
   \   0000007C   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   00000080   ........           _BLF     ??GiveConfigWarning_2,??GiveConfigWarning??rA_2
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0110A0E3           MOV      R1,#+1
   \   0000008C   44008DE2           ADD      R0,SP,#+68
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
    298                      }
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   04008DE2           ADD      R0,SP,#+4
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A4   04D08DE2           ADD      SP,SP,#+4
   \                     ??SetProList_4:
   \   000000A8   016086E2           ADD      R6,R6,#+1
   \                     ??SetProList_2:
   \   000000AC   040085E0           ADD      R0,R5,R4
   \   000000B0   041090E5           LDR      R1,[R0, #+4]
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   000041E0           SUB      R0,R1,R0
   \   000000BC   200156E1           CMP      R6,R0, LSR #+2
   \   000000C0   0A00002A           BCS      ??SetProList_1
   \   000000C4   040095E7           LDR      R0,[R5, +R4]
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   060190E7           LDR      R0,[R0, +R6, LSL #+2]
   \   000000D0   ........           _BLF     ??FindPROFromIDNumber,??FindPROFromIDNumber??rA
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   D6FFFF0A           BEQ      ??SetProList_3
   \   000000DC   0020A0E1           MOV      R2,R0
   \   000000E0   D41084E2           ADD      R1,R4,#+212
   \   000000E4   1C008DE2           ADD      R0,SP,#+28
   \   000000E8   ........           _BLF     ??insert,??insert??rA_1
   \   000000EC   EDFFFFEA           B        ??SetProList_4
    299                  }
    300                  //delete []IdNumbers;
    301                  //IdNumbers         = NULL;
    302              }
    303          }
   \                     ??SetProList_1:
   \   000000F0   5CD08DE2           ADD      SP,SP,#+92
   \   000000F4                      REQUIRE ?Subroutine14
   \   000000F4                      ;; // Fall through to label ?Subroutine14
    304          
    305          //--------------------------------------------------------------------------- '
    306          

   \                                 In segment CODE, align 4, keep-with-next
    307          void PROControl::UpdateRelay(void) {
   \                     ??UpdateRelay:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
    308          #ifdef S2TXU
    309              OS_Use(&CtrlSema);
    310              if (!AlarmList.empty()) {
   \   0000000C   ........           LDR      R7,??Subroutine16_0  ;; ??ObjectSet
   \   00000010   4B5FA0E3           MOV      R5,#+300
   \   00000014   040085E0           ADD      R0,R5,R4
   \   00000018   ........           _BLF     OS_Use,??OS_Use??rA
   \   0000001C   FC0094E5           LDR      R0,[R4, #+252]
   \   00000020   EE60A0E3           MOV      R6,#+238
   \   00000024   806F86E3           ORR      R6,R6,#0x200
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   1500001A           BNE      ??UpdateRelay_1
    311                  int ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim;
    312                  GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
    313                  if (ActiveAl) {
    314                      if (PROWaterIngress::ObjectSet.empty()) {
    315                          if (!(Priority & R_ACTIVATE1)) Activate(R_ACTIVATE1, RELAY_MSG_FREQUENCY, 500, 500);
    316                      } else if (!(Priority & R_ACTIVATE3)) {
    317                          Activate(R_ACTIVATE3, RELAY_MSG_FREQUENCY, 750, 250);
    318                      }
    319                  } else if (AcknowledgedAl) {
    320                      if (!(Priority & R_ACTIVATE0)) {
    321                          Activate(R_ACTIVATE0, RELAY_MSG_ON, 0, 0);
    322                      }
    323                  } else if (!(Priority & R_INACTIVE)) {
    324                      DeActivate();
    325                  }
    326              } else {
    327                  if (!AlarmBasic::PROActiveAlarmList.isEmpty()) {
   \   00000030   ........           LDR      R0,??Subroutine16_0+0x4  ;; ??PROActiveAlarmList
   \   00000034   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   4700001A           BNE      ??UpdateRelay_2
    328                      if (PROWaterIngress::ObjectSet.empty()) { //EHSMark Must add Highlevel
   \   00000040   100097E5           LDR      R0,[R7, #+16]
   \   00000044   A4C094E5           LDR      R12,[R4, #+164]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   280194E5           LDR      R0,[R4, #+296]
   \   00000050   3A00001A           BNE      ??UpdateRelay_3
    329                          if (!(Priority & R_ACTIVATE1)) {
   \                     ??UpdateRelay_4:
   \   00000054   020010E3           TST      R0,#0x2
   \   00000058   5600001A           BNE      ??UpdateRelay_5
    330                              Activate(R_ACTIVATE1, RELAY_MSG_FREQUENCY, 500, 500);
   \   0000005C   7D0FA0E3           MOV      R0,#+500
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   7D3FA0E3           MOV      R3,#+500
   \   00000068   0220A0E3           MOV      R2,#+2
   \                     ??UpdateRelay_6:
   \   0000006C   0210A0E1           MOV      R1,R2
   \                     ??UpdateRelay_7:
   \   00000070   60609CE5           LDR      R6,[R12, #+96]
   \                     ??UpdateRelay_8:
   \   00000074   0400A0E1           MOV      R0,R4
   \                     ??UpdateRelay_9:
   \   00000078   0FE0A0E1           MOV      LR,PC
   \   0000007C   16FF2FE1           BX       R6
   \   00000080   04D08DE2           ADD      SP,SP,#+4
   \   00000084   4B0000EA           B        ??UpdateRelay_5
    331                          }
    332                      } else if (!(Priority & R_ACTIVATE3)) {
   \                     ??UpdateRelay_1:
   \   00000088   C00084E2           ADD      R0,R4,#+192
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   14008DE2           ADD      R0,SP,#+20
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   14008DE2           ADD      R0,SP,#+20
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   14308DE2           ADD      R3,SP,#+20
   \   000000A4   10208DE2           ADD      R2,SP,#+16
   \   000000A8   0C108DE2           ADD      R1,SP,#+12
   \   000000AC   EC0084E2           ADD      R0,R4,#+236
   \   000000B0   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
   \   000000B4   0C009DE5           LDR      R0,[SP, #+12]
   \   000000B8   0CD08DE2           ADD      SP,SP,#+12
   \   000000BC   A4C094E5           LDR      R12,[R4, #+164]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0D00000A           BEQ      ??UpdateRelay_10
   \   000000C8   100097E5           LDR      R0,[R7, #+16]
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   280194E5           LDR      R0,[R4, #+296]
   \   000000D4   DEFFFF0A           BEQ      ??UpdateRelay_4
   \   000000D8   080010E3           TST      R0,#0x8
   \   000000DC   3500001A           BNE      ??UpdateRelay_5
   \   000000E0   FA00A0E3           MOV      R0,#+250
   \   000000E4   01002DE9           PUSH     {R0}
   \   000000E8   0630A0E1           MOV      R3,R6
   \   000000EC   60609CE5           LDR      R6,[R12, #+96]
   \   000000F0   0220A0E3           MOV      R2,#+2
   \   000000F4   0810A0E3           MOV      R1,#+8
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   DDFFFFEA           B        ??UpdateRelay_9
   \                     ??UpdateRelay_10:
   \   00000100   04009DE5           LDR      R0,[SP, #+4]
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   280194E5           LDR      R0,[R4, #+296]
   \   0000010C   0600000A           BEQ      ??UpdateRelay_11
   \   00000110   010010E3           TST      R0,#0x1
   \   00000114   2700001A           BNE      ??UpdateRelay_5
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   0030A0E3           MOV      R3,#+0
   \   00000124   0120A0E3           MOV      R2,#+1
   \   00000128   CFFFFFEA           B        ??UpdateRelay_6
   \                     ??UpdateRelay_11:
   \   0000012C   100010E3           TST      R0,#0x10
   \   00000130   2000001A           BNE      ??UpdateRelay_5
   \   00000134   64109CE5           LDR      R1,[R12, #+100]
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   1B0000EA           B        ??UpdateRelay_12
   \                     ??UpdateRelay_3:
   \   00000140   080010E3           TST      R0,#0x8
   \   00000144   1B00001A           BNE      ??UpdateRelay_5
    333                          Activate(R_ACTIVATE3, RELAY_MSG_FREQUENCY, 750, 250);
   \   00000148   FA00A0E3           MOV      R0,#+250
   \   0000014C   01002DE9           PUSH     {R0}
   \   00000150   0630A0E1           MOV      R3,R6
   \   00000154   0220A0E3           MOV      R2,#+2
   \   00000158   0810A0E3           MOV      R1,#+8
   \   0000015C   C3FFFFEA           B        ??UpdateRelay_7
    334                      }
    335                  } else if (!AlarmBasic::PROAcknowAlarmList.isEmpty()) {
   \                     ??UpdateRelay_2:
   \   00000160   ........           LDR      R0,??Subroutine16_0+0x8  ;; ??PROAcknowAlarmList
   \   00000164   ........           _BLF     ??isEmpty,??isEmpty??rA
   \   00000168   000050E3           CMP      R0,#+0
   \   0000016C   280194E5           LDR      R0,[R4, #+296]
   \   00000170   0900001A           BNE      ??UpdateRelay_13
    336                      if (!(Priority & R_ACTIVATE0))    Activate(R_ACTIVATE0, RELAY_MSG_ON, 0, 0);
   \   00000174   010010E3           TST      R0,#0x1
   \   00000178   0E00001A           BNE      ??UpdateRelay_5
   \   0000017C   0000A0E3           MOV      R0,#+0
   \   00000180   01002DE9           PUSH     {R0}
   \   00000184   A46094E5           LDR      R6,[R4, #+164]
   \   00000188   0030A0E3           MOV      R3,#+0
   \   0000018C   606096E5           LDR      R6,[R6, #+96]
   \   00000190   0120A0E3           MOV      R2,#+1
   \   00000194   0210A0E1           MOV      R1,R2
   \   00000198   B5FFFFEA           B        ??UpdateRelay_8
    337                  } else if (!(Priority & R_INACTIVE)) {
   \                     ??UpdateRelay_13:
   \   0000019C   100010E3           TST      R0,#0x10
   \   000001A0   0400001A           BNE      ??UpdateRelay_5
    338                      DeActivate();
   \   000001A4   A41094E5           LDR      R1,[R4, #+164]
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   641091E5           LDR      R1,[R1, #+100]
   \                     ??UpdateRelay_12:
   \   000001B0   0FE0A0E1           MOV      LR,PC
   \   000001B4   11FF2FE1           BX       R1
    339                  }
    340              }
    341              OS_Unuse(&CtrlSema);
   \                     ??UpdateRelay_5:
   \   000001B8   040085E0           ADD      R0,R5,R4
   \   000001BC   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    342          #endif
    343          }
   \   000001C0   14D08DE2           ADD      SP,SP,#+20
   \   000001C4                      REQUIRE ?Subroutine16
   \   000001C4                      ;; // Fall through to label ?Subroutine16

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   F040BDE8           POP      {R4-R7,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine16_0:
   \   00000008   ........           DC32     ??ObjectSet
   \   0000000C   ........           DC32     ??PROActiveAlarmList
   \   00000010   ........           DC32     ??PROAcknowAlarmList
    344          
    345          
    346          

   \                                 In segment CODE, align 4, keep-with-next
    347          void PROControl::Update(char Mode) {
   \                     ??Update:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    348          #ifdef S2TXU
    349              OS_Use(&CtrlSema);
   \   0000000C   4B6FA0E3           MOV      R6,#+300
   \   00000010   040086E0           ADD      R0,R6,R4
   \   00000014   ........           _BLF     OS_Use,??OS_Use??rA
    350          /*
    351              //Follow PROList
    352              if Active alarms and not AlarmSilence:
    353              1.  Active HHL / HL alarms: light           frequenc: 1
    354              2.  if AlarmList?
    355                      Active alarms                   : light         frequenc: 1
    356              3.  Only Acknow alarms      : off
    357              else                                            : off
    358          */
    359              switch (Mode) {
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   0100001A           BNE      ??Update_1
    360              case BUZZER_TEST_ON:
    361              case BUZZER_TEST_OFF:
    362                  break;
    363              case BUZZER_NO_TEST:
    364                  UpdateRelay();
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       ??UpdateRelay
    365                  break;
    366              }
    367              OS_Unuse(&CtrlSema);
   \                     ??Update_1:
   \   00000028   040086E0           ADD      R0,R6,R4
   \   0000002C   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    368          #endif
    369          }
   \   00000030   ........           B        ?Subroutine14
    370          //---------------------------------------------------------------------------
    371          
    372          

   \                                 In segment CODE, align 4, keep-with-next
    373          void PROControl::Activate(int Prio, U8 Cmd, int OnPeriod, int OffPeriod) {
   \                     ??Activate:
   \   00000000   10402DE9           PUSH     {R4,LR}
    374              if (AlarmBasic::AlarmSound) {
   \   00000004   ........           LDR      R4,??Subroutine13_0  ;; ??AlarmSound
   \   00000008   02C0A0E1           MOV      R12,R2
   \   0000000C   0320A0E1           MOV      R2,R3
   \   00000010   08309DE5           LDR      R3,[SP, #+8]
   \   00000014   0040D4E5           LDRB     R4,[R4, #+0]
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0300000A           BEQ      ??Activate_1
    375                  Priority  = Prio;
   \   00000020   281180E5           STR      R1,[R0, #+296]
    376          #ifndef WIN32
    377                  GiveRelayDutyMessage(RelayIndex,Cmd,OnPeriod,OffPeriod);
   \   00000024   A80090E5           LDR      R0,[R0, #+168]
   \   00000028   0C10A0E1           MOV      R1,R12
   \   0000002C   ........           _BLF     ??GiveRelayDutyMessage,??GiveRelayDutyMessage??rA
    378          #endif
    379              }
    380          
    381          }
   \                     ??Activate_1:
   \   00000030                      REQUIRE ?Subroutine13
   \   00000030                      ;; // Fall through to label ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine13:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine13_0:
   \   00000008   ........           DC32     ??AlarmSound
    382          //---------------------------------------------------------------------------
    383          

   \                                 In segment CODE, align 4, keep-with-next
    384          void PROControl::DeActivate(void) {
   \                     ??DeActivate:
   \   00000000   00402DE9           PUSH     {LR}
    385              Priority = R_INACTIVE;
   \   00000004   1010A0E3           MOV      R1,#+16
   \   00000008   281180E5           STR      R1,[R0, #+296]
    386          #ifndef WIN32
    387              GiveRelayDutyMessage(RelayIndex,RELAY_MSG_OFF,0,0);
   \   0000000C   A80090E5           LDR      R0,[R0, #+168]
   \   00000010   0030A0E3           MOV      R3,#+0
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0210A0E1           MOV      R1,R2
   \   0000001C   ........           _BLF     ??GiveRelayDutyMessage,??GiveRelayDutyMessage??rA
    388          #endif
    389          
    390          }
   \   00000020   0040BDE8           POP      {LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    391          //---------------------------------------------------------------------------
    392          

   \                                 In segment CODE, align 4, keep-with-next
    393          bool PROControl::GetOutputVal(bool &IsChange) {
   \                     ??GetOutputVal:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    394              int AlStat = 0;
    395              bool IsActive = false;
    396              if (!AlarmList.empty()) {
   \   00000008   FC0094E5           LDR      R0,[R4, #+252]
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   0070A0E3           MOV      R7,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   6600000A           BEQ      ??GetOutputVal_2
    397                  switch (DeactivateBy) {
   \   0000001C   CC0094E5           LDR      R0,[R4, #+204]
   \   00000020   B30040E2           SUB      R0,R0,#+179
   \   00000024   700E40E2           SUB      R0,R0,#+1792
   \   00000028   040050E3           CMP      R0,#+4
   \   0000002C   6100008A           BHI      ??GetOutputVal_2
   \   00000030   011F8FE2           ADR      R1,??GetOutputVal_1
   \   00000034   0010D1E7           LDRB     R1,[R1, R0]
   \   00000038   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetOutputVal_1:
   \   0000003C   014E162A           DC8      +1,+78,+22,+42
   \   00000040   3D000000           DC8      +61,+0,+0,+0
    398                  case C_CTRL_DE_ACKNOW  :
    399                      GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_3:
   \   00000044   C00084E2           ADD      R0,R4,#+192
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   BC0084E2           ADD      R0,R4,#+188
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   B80084E2           ADD      R0,R4,#+184
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   B43084E2           ADD      R3,R4,#+180
   \   00000060   B02084E2           ADD      R2,R4,#+176
   \   00000064   AC1084E2           ADD      R1,R4,#+172
   \   00000068   EC0084E2           ADD      R0,R4,#+236
   \   0000006C   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    400                      AlStat    = ActiveAl;
   \   00000070   AC0094E5           LDR      R0,[R4, #+172]
    401                      IsChange  = (PrevAlCnt != AlStat);
   \   00000074   C41094E5           LDR      R1,[R4, #+196]
   \   00000078   0070A0E1           MOV      R7,R0
   \   0000007C   070051E1           CMP      R1,R7
   \   00000080   0CD08DE2           ADD      SP,SP,#+12
   \   00000084   0110A013           MOVNE    R1,#+1
   \   00000088   0010A003           MOVEQ    R1,#+0
   \                     ??GetOutputVal_4:
   \   0000008C   0010C6E5           STRB     R1,[R6, #+0]
    402                      PrevAlCnt = ActiveAl;
   \   00000090   C40084E5           STR      R0,[R4, #+196]
   \   00000094   470000EA           B        ??GetOutputVal_2
    403                      break;
    404                  case C_CTRL_DE_IDLE    :
    405                      GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_5:
   \   00000098   C00084E2           ADD      R0,R4,#+192
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   BC0084E2           ADD      R0,R4,#+188
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   B80084E2           ADD      R0,R4,#+184
   \   000000AC   01002DE9           PUSH     {R0}
   \   000000B0   B43084E2           ADD      R3,R4,#+180
   \   000000B4   B02084E2           ADD      R2,R4,#+176
   \   000000B8   AC1084E2           ADD      R1,R4,#+172
   \   000000BC   EC0084E2           ADD      R0,R4,#+236
   \   000000C0   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    406                      AlStat    = ActiveAl + AcknowledgedAl;
   \   000000C4   AC0094E5           LDR      R0,[R4, #+172]
   \   000000C8   B01094E5           LDR      R1,[R4, #+176]
   \   000000CC   007081E0           ADD      R7,R1,R0
    407                      IsChange  = (ActiveAl > PrevAlCnt);
   \   000000D0   C41094E5           LDR      R1,[R4, #+196]
   \   000000D4   0CD08DE2           ADD      SP,SP,#+12
   \   000000D8   000051E1           CMP      R1,R0
   \                     ??GetOutputVal_6:
   \   000000DC   0010A0A3           MOVGE    R1,#+0
   \   000000E0   0110A0B3           MOVLT    R1,#+1
   \   000000E4   E8FFFFEA           B        ??GetOutputVal_4
    408                      PrevAlCnt = ActiveAl;
    409                      break;
    410                  case C_CTRL_DE_VALUE   :
    411                      GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_7:
   \   000000E8   C00084E2           ADD      R0,R4,#+192
   \   000000EC   01002DE9           PUSH     {R0}
   \   000000F0   BC0084E2           ADD      R0,R4,#+188
   \   000000F4   01002DE9           PUSH     {R0}
   \   000000F8   B80084E2           ADD      R0,R4,#+184
   \   000000FC   01002DE9           PUSH     {R0}
   \   00000100   B43084E2           ADD      R3,R4,#+180
   \   00000104   B02084E2           ADD      R2,R4,#+176
   \   00000108   AC1084E2           ADD      R1,R4,#+172
   \   0000010C   EC0084E2           ADD      R0,R4,#+236
   \   00000110   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    412                      AlStat    = OutsideLim;
   \   00000114   BC0094E5           LDR      R0,[R4, #+188]
    413                      IsChange  = (OutsideLim > PrevAlCnt);
   \   00000118   C41094E5           LDR      R1,[R4, #+196]
   \   0000011C   0070A0E1           MOV      R7,R0
   \   00000120   000051E1           CMP      R1,R0
   \   00000124   0CD08DE2           ADD      SP,SP,#+12
   \   00000128   0110A0B3           MOVLT    R1,#+1
   \   0000012C   0010A0A3           MOVGE    R1,#+0
   \   00000130   D5FFFFEA           B        ??GetOutputVal_4
    414                      PrevAlCnt = OutsideLim;
    415                      break;
    416                  case C_CTRL_DE_VAL_ENABLED:
    417                      GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_8:
   \   00000134   C00084E2           ADD      R0,R4,#+192
   \   00000138   01002DE9           PUSH     {R0}
   \   0000013C   BC0084E2           ADD      R0,R4,#+188
   \   00000140   01002DE9           PUSH     {R0}
   \   00000144   B80084E2           ADD      R0,R4,#+184
   \   00000148   01002DE9           PUSH     {R0}
   \   0000014C   B43084E2           ADD      R3,R4,#+180
   \   00000150   B02084E2           ADD      R2,R4,#+176
   \   00000154   AC1084E2           ADD      R1,R4,#+172
   \   00000158   EC0084E2           ADD      R0,R4,#+236
   \   0000015C   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    418                      AlStat    = OutsideLimEnabled;
   \   00000160   C00094E5           LDR      R0,[R4, #+192]
    419                      IsChange  = (OutsideLimEnabled > PrevAlCnt);
   \   00000164   C41094E5           LDR      R1,[R4, #+196]
   \   00000168   0070A0E1           MOV      R7,R0
   \   0000016C   000051E1           CMP      R1,R0
   \   00000170   0CD08DE2           ADD      SP,SP,#+12
   \   00000174   D8FFFFEA           B        ??GetOutputVal_6
    420                      PrevAlCnt = OutsideLimEnabled;
    421                      break;
    422                  case C_CTRL_DE_SILENCE:
    423                      GetAlarmTotals(AlarmList, ActiveAl, AcknowledgedAl, IdleAl, SuspAl, OutsideLim, OutsideLimEnabled);
   \                     ??GetOutputVal_9:
   \   00000178   C00084E2           ADD      R0,R4,#+192
   \   0000017C   01002DE9           PUSH     {R0}
   \   00000180   BC0084E2           ADD      R0,R4,#+188
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   B80084E2           ADD      R0,R4,#+184
   \   0000018C   01002DE9           PUSH     {R0}
   \   00000190   B43084E2           ADD      R3,R4,#+180
   \   00000194   B02084E2           ADD      R2,R4,#+176
   \   00000198   AC1084E2           ADD      R1,R4,#+172
   \   0000019C   EC0084E2           ADD      R0,R4,#+236
   \   000001A0   ........           _BLF     ??GetAlarmTotals,??GetAlarmTotals??rA
    424                      if (AlarmBasic::AlarmSilence) {
   \   000001A4   40009FE5           LDR      R0,??GetOutputVal_10  ;; ??AlarmSilence
   \   000001A8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000001AC   0CD08DE2           ADD      SP,SP,#+12
   \   000001B0   000050E3           CMP      R0,#+0
    425                          AlStat = 0;
    426                      } else {
    427                          AlStat = ActiveAl;
   \   000001B4   AC709405           LDREQ    R7,[R4, #+172]
    428                      }
    429                      break;
    430                  }
    431              } else {
    432                  switch (DeactivateBy) {
    433                  case C_CTRL_DE_IDLE         :
    434                  case C_CTRL_DE_VALUE        :
    435                  case C_CTRL_DE_ACKNOW       :
    436                  case C_CTRL_DE_SILENCE      :
    437                  case C_CTRL_DE_VAL_ENABLED  :
    438                      break;
    439                  }
    440              }
    441              switch (NormalState) {
   \                     ??GetOutputVal_2:
   \   000001B8   C80094E5           LDR      R0,[R4, #+200]
   \   000001BC   9F10A0E3           MOV      R1,#+159
   \   000001C0   701E81E3           ORR      R1,R1,#0x700
   \   000001C4   010050E1           CMP      R0,R1
   \   000001C8   0300001A           BNE      ??GetOutputVal_11
    442              case C_CTRL_NS_UNPOWERED:
    443                  break;
    444              case C_CTRL_NS_POWERED  :
    445                  AlStat = !AlStat;
   \   000001CC   000057E3           CMP      R7,#+0
   \   000001D0   0300000A           BEQ      ??GetOutputVal_12
   \                     ??GetOutputVal_13:
   \   000001D4   0000A0E3           MOV      R0,#+0
    446                  break;
    447              }
    448              IsActive  = (bool)AlStat;
    449              return (IsActive);
   \                     ??GetOutputVal_14:
   \   000001D8   ........           B        ?Subroutine16
   \                     ??GetOutputVal_11:
   \   000001DC   000057E3           CMP      R7,#+0
   \   000001E0   FBFFFF0A           BEQ      ??GetOutputVal_13
   \                     ??GetOutputVal_12:
   \   000001E4   0100A0E3           MOV      R0,#+1
   \   000001E8   FAFFFFEA           B        ??GetOutputVal_14
   \                     ??GetOutputVal_10:
   \   000001EC   ........           DC32     ??AlarmSilence
    450          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0X">`:
   \   00000000   307825305800       DC8 "0x%0X"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Control unit on TCU">`:
   \   00000000   436F6E74726F       DC8 "Control unit on TCU"
   \              6C20756E6974
   \              206F6E205443
   \              5500        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PROControl IDNumber 0...">`:
   \   00000000   50524F436F6E       DC8 50H, 52H, 4FH, 43H, 6FH, 6EH, 74H, 72H
   \              7472        
   \   00000008   6F6C2049444E       DC8 6FH, 6CH, 20H, 49H, 44H, 4EH, 75H, 6DH
   \              756D        
   \   00000010   626572203078       DC8 62H, 65H, 72H, 20H, 30H, 78H, 25H, 30H
   \              2530        
   \   00000018   782069732069       DC8 78H, 20H, 69H, 73H, 20H, 69H, 6EH, 63H
   \              6E63        
   \   00000020   6F7272656374       DC8 6FH, 72H, 72H, 65H, 63H, 74H, 2EH, 20H
   \              2E20        
   \   00000028   4C696E65206E       DC8 4CH, 69H, 6EH, 65H, 20H, 6EH, 75H, 6DH
   \              756D        
   \   00000030   6265723A2025       DC8 62H, 65H, 72H, 3AH, 20H, 25H, 69H, 0
   \              6900        

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROControl &PROControl::new PROControl(int)
   \                     `??new PROControl`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   4F0FA0E3           MOV      R0,#+316
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new PROControl_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??PROControl
   \                     `??new PROControl_1`:
   \   00000020   ........           B        ?Subroutine13

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??__vtbl
    451          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiString(AnsiString const &)
                                       12
     PROControl::Activate(int, unsigned char, int, int)
                                        8
     PROControl::DeActivate()           4
     PROControl::GetOutputVal(bool &)
                                       32
     PROControl::LoadConfigString(TSNConfigString &)
                                      180
     PROControl::MakeConfigString(int)
                                     1352
     PROControl::PROControl(int)       20
     PROControl::SetAlarmList()        40
     PROControl::SetProList()         112
     PROControl::Update(char)          16
     PROControl::UpdateRelay()         52
     PROControl::new PROControl(int)
                                        8
     PROControl::~PROControl()         16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                       16
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                       32
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                        8
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                        4
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                       16
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                       32
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                        8
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Erase(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                      36
     _Vector_impl<int, allocator<int>>::_Tidy0()
                                      36
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                      72
     _Vector_impl<int, allocator<int>>::_Insert(int *, int const &)
                                      72
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                     232
     _Vector_impl<int, allocator<int>>::_Make_room(int *, unsigned int)
                                     232
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                      72
     _Vector_impl<int, allocator<int>>::_Push_back0(int)
                                      72
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     PROControl::NumberOfPRO           4
     PROControl::PROControl(int)     244
     PROControl::~PROControl()       132
     ?Subroutine14                    12
     PROControl::MakeConfigString(int)
                                    2064
     ?Subroutine15                    12
     PROControl::LoadConfigString(TSNConfigString &)
                                    1316
     PROControl::SetAlarmList()      472
     PROControl::SetProList()        244
     PROControl::UpdateRelay()       452
     ?Subroutine16                    20
     PROControl::Update(char)         52
     PROControl::Activate(int, unsigned char, int, int)
                                      48
     ?Subroutine13                    12
     PROControl::DeActivate()         40
     PROControl::GetOutputVal(bool &)
                                     496
     ?<Constant "0x%0X">               8
     ?<Constant "Control unit on TCU">
                                      20
     ?<Constant "PROControl IDNumber 0...">
                                      56
     PROControl::new PROControl(int)
                                      36
     __sti__routine()                  4
     ??DataTable1                      4
      Others                         832

 
 8 948 bytes in segment CODE
   188 bytes in segment DATA_C
     4 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 5 664 bytes of CODE  memory (+ 3 300 bytes shared)
   188 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
