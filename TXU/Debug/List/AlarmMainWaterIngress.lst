##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:55 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmMainWaterIngress.Cpp       #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmMainWaterIngress.Cpp       #
#                       --fpu None -D OS_LIBMODE_SP -D CPU_S3C2410 -D        #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmMainWaterIngress.lst   #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmMainWaterIngress.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmMainWaterIngress.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmMainWaterIngress::~AlarmMainWaterIngress()
   \                     `?~AlarmMainWaterIngress`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmMainWaterIngress_1`
   \   00000014   0100000A           BEQ      `?~AlarmMainWaterIngress_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmMainWaterIngress_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmMainWaterIngress_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmMainWaterIngress_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmMainWaterIngress::NumberOfAlarmSettings=0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          AlarmMainWaterIngress::AlarmMainWaterIngress(PRogramObjectBase *PROPtr):AlarmBasic(PROPtr)
   \                     ??AlarmMainWaterIngress:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     12          {
   \   0000000C   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
   \   00000010   48009FE5           LDR      R0,??AlarmMainWaterIngress_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     13          	PROPointer = PROPtr;
     14          	NumberOfAlarmSettings++;
   \   00000018   44009FE5           LDR      R0,??AlarmMainWaterIngress_1+0x4  ;; ??NumberOfAlarmSettings
   \   0000001C   C45084E5           STR      R5,[R4, #+196]
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   011081E2           ADD      R1,R1,#+1
   \   00000028   001080E5           STR      R1,[R0, #+0]
     15          	IDNumber            =  (ID_AL_MAIN_WATERINGR << 16)+NumberOfAlarmSettings;
   \   0000002C   B006A0E3           MOV      R0,#+184549376
   \   00000030   CD0880E3           ORR      R0,R0,#0xCD0000
   \   00000034   010080E0           ADD      R0,R0,R1
   \   00000038   9C0084E5           STR      R0,[R4, #+156]
     16          	Type                = ID_AL_MAIN_WATERINGR;
   \   0000003C   CD00A0E3           MOV      R0,#+205
   \   00000040   B00E80E3           ORR      R0,R0,#0xB00
   \   00000044   A00084E5           STR      R0,[R4, #+160]
     17          	MessageKey		    = L_WORD529;	// MainWater
   \   00000048   1100A0E3           MOV      R0,#+17
   \   0000004C   800F80E3           ORR      R0,R0,#0x200
   \   00000050   B80084E5           STR      R0,[R4, #+184]
     18          	TPCMessageKey	    = L_WORD529;	// MWat
   \   00000054   B40084E5           STR      R0,[R4, #+180]
     19          }
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           B        ?Subroutine8
   \                     ??AlarmMainWaterIngress_1:
   \   00000060   ........           DC32     ??__vtbl
   \   00000064   ........           DC32     ??NumberOfAlarmSettings

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine8:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine8_0:
   \   00000008   ........           DC32     ??AlarmOffDelay
     20          

   \                                 In segment CODE, align 4, keep-with-next
     21          void AlarmMainWaterIngress::Check(void)
     22          {
   \                     ??Check:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     23          	bool AlValue = (char)((PROWaterIngress*)PROPointer)->MainAlarmValue;
     24          	int Status = AL_STAT_IN_DEADBAND;
     25          	// Override is the same as Alarm disable and is done from input
     26          	if ( AlValue ) {
   \   00000008   C40094E5           LDR      R0,[R4, #+196]
   \   0000000C   0250A0E3           MOV      R5,#+2
   \   00000010   6201D0E5           LDRB     R0,[R0, #+354]
   \   00000014   000050E3           CMP      R0,#+0
     27          		Status = AL_STAT_IN_ALARM;
   \   00000018   0150A013           MOVNE    R5,#+1
   \   0000001C   0500001A           BNE      ??Check_1
     28          	} else if (TSNElapsedTicks(LastActiveTime) > PROSystemData::AlarmOffDelay ) {
   \   00000020   C00094E5           LDR      R0,[R4, #+192]
   \   00000024   ........           _BLF     ??TSNElapsedTicks,??TSNElapsedTicks??rA
   \   00000028   ........           LDR      R1,??Subroutine8_0  ;; ??AlarmOffDelay
   \   0000002C   001091E5           LDR      R1,[R1, #+0]
   \   00000030   000051E1           CMP      R1,R0
     29          		Status = AL_STAT_IN_NORMAL;
   \   00000034   0050A0B3           MOVLT    R5,#+0
     30          	}
     31          	UpdateAlarm(Status);
   \                     ??Check_1:
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           _BLF     ??UpdateAlarm,??UpdateAlarm??rA
     32          }
   \   00000044                      REQUIRE ?Subroutine8
   \   00000044                      ;; // Fall through to label ?Subroutine8
     33          
     34          ///////////////////////////////////////////////////////////////
     35          //
     36          // Routines for the librarian
     37          //
     38          ///////////////////////////////////////////////////////////////
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          int AlarmMainWaterIngress::PutValue( int ValueId, int Index, AnsiString NewValue,bool Local, int *UnitId)
     41          {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3C80DDE5           LDRB     R8,[SP, #+60]
   \   0000000C   40909DE5           LDR      R9,[SP, #+64]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0370A0E1           MOV      R7,R3
     42          	int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
     43          	//switch ( ValueId ) {
     44          	//	default:
     45          	Status = AlarmBasic::PutValue(ValueId, Index,NewValue,Local,&ValUnitId);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000034   80009FE5           LDR      R0,??PutValue_2  ;; ??npos
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   003090E5           LDR      R3,[R0, #+0]
   \   00000040   0710A0E1           MOV      R1,R7
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   ........           _BLF     ??assign,??assign??rA
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   00012DE9           PUSH     {R8}
   \   00000058   0C308DE2           ADD      R3,SP,#+12
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   0000006C   0050A0E1           MOV      R5,R0
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0C008DE2           ADD      R0,SP,#+12
   \   0000007C   ........           _BLF     ??_Tidy,??_Tidy??rA
     46          	//		break;
     47          	//}
     48          	if ( Status==E_NO_ERR ) {
   \   00000080   000055E3           CMP      R5,#+0
   \   00000084   08D08DE2           ADD      SP,SP,#+8
   \   00000088   0400001A           BNE      ??PutValue_3
     49          		SetModifiedFlag();
   \   0000008C   A41094E5           LDR      R1,[R4, #+164]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   541091E5           LDR      R1,[R1, #+84]
   \   00000098   0FE0A0E1           MOV      LR,PC
   \   0000009C   11FF2FE1           BX       R1
     50          	}
     51          	if (UnitId) {
   \                     ??PutValue_3:
   \   000000A0   000059E3           CMP      R9,#+0
     52          		*UnitId = ValUnitId;
   \   000000A4   00009D15           LDRNE    R0,[SP, #+0]
   \   000000A8   00008915           STRNE    R0,[R9, #+0]
     53          	}
     54          	return(Status);
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   20D08DE2           ADD      SP,SP,#+32
   \   000000B4   F043BDE8           POP      {R4-R9,LR}
   \   000000B8   1EFF2FE1           BX       LR               ;; return
   \                     ??PutValue_2:
   \   000000BC   ........           DC32     ??npos
     55          }
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          int  AlarmMainWaterIngress::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     58          {
   \                     ??GetValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18509DE5           LDR      R5,[SP, #+24]
   \   00000008   1C609DE5           LDR      R6,[SP, #+28]
   \   0000000C   0340A0E1           MOV      R4,R3
     59          	int Status = GETVAL_NO_ERR;
   \   00000010   0070A0E3           MOV      R7,#+0
     60          	switch ( ValueId ) {
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   323041E2           SUB      R3,R1,#+50
   \   0000001C   8C3D43E2           SUB      R3,R3,#+8960
   \   00000020   010053E3           CMP      R3,#+1
   \   00000024   0C00008A           BHI      ??GetValue_3
   \   00000028   01CF8FE2           ADR      R12,??GetValue_1
   \   0000002C   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000030   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000034   00050000           DC8      +0,+5,+0,+0
     61          		case SVT_AL_LIMIT:
     62          			MyRetValue = Limit;
   \                     ??GetValue_4:
   \   00000038   E40090E5           LDR      R0,[R0, #+228]
   \                     ??GetValue_5:
   \   0000003C   000084E5           STR      R0,[R4, #+0]
     63          			DecPnt     = 0;
   \   00000040   008085E5           STR      R8,[R5, #+0]
     64          			Unit       = NO_UNIT;
   \   00000044   008086E5           STR      R8,[R6, #+0]
   \   00000048   090000EA           B        ??GetValue_6
     65          			break;
     66          		case SVT_AL_VALUE:
     67          			MyRetValue =((PROWaterIngress*)PROPointer)->MainAlarmValue;
   \                     ??GetValue_7:
   \   0000004C   C40090E5           LDR      R0,[R0, #+196]
   \   00000050   6201D0E5           LDRB     R0,[R0, #+354]
   \   00000054   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000058   F7FFFFEA           B        ??GetValue_5
     68          			DecPnt     = 0;
     69          			Unit       = NO_UNIT;
     70          			break;
     71          		default:
     72          			Status = AlarmBasic::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   0000005C   40002DE9           PUSH     {R6}
   \   00000060   20002DE9           PUSH     {R5}
   \   00000064   0430A0E1           MOV      R3,R4
   \   00000068   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   0000006C   0070A0E1           MOV      R7,R0
   \   00000070   08D08DE2           ADD      SP,SP,#+8
     73          			break;
     74          	}
     75          	return(Status);
   \                     ??GetValue_6:
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   F041BDE8           POP      {R4-R8,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
     76          }
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          int AlarmMainWaterIngress::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     79          {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
     80          	int Status = GETVAL_NO_ERR;
     81          	//switch ( ValueId ) {
     82          	//	default:
     83          	Status = AlarmBasic::GetStringValue(ValueId,Index, MyString);
     84          	//		break;
     85          	//}
     86          	return(Status);
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine9
     87          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          int AlarmMainWaterIngress::PutFloatValue( int ValueId, float NewValue)
     90          {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
     91          	int Status= E_NO_ERR;
     92          	//switch ( ValueId ) {
     93          	//   default:
     94          	Status = AlarmBasic::PutFloatValue(ValueId, NewValue);
     95          	//     break;
     96          	//}
     97          	return(Status);
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine9
   \   00000008                      ;; // Fall through to label ?Subroutine9
     98          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmMainWaterIngress &AlarmMainWaterIngress::new AlarmMainWaterIngress(PRogramObjectBase *)
   \                     `??new AlarmMainWaterIngress`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   EC00A0E3           MOV      R0,#+236
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmMainWaterIngress_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmMainWaterIngress
   \                     `??new AlarmMainWaterIngress_1`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     99          
    100          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmMainWaterIngress::AlarmMainWaterIngress(PRogramObjectBase *)
                                       12
     AlarmMainWaterIngress::Check()    12
     AlarmMainWaterIngress::GetStringValue(int, int, AnsiString &)
                                        4
     AlarmMainWaterIngress::GetValue(int, int, float &, int &, int &)
                                       32
     AlarmMainWaterIngress::PutFloatValue(int, float)
                                        4
     AlarmMainWaterIngress::PutValue(int, int, AnsiString, bool, int *)
                                       68
     AlarmMainWaterIngress::new AlarmMainWaterIngress(PRogramObjectBase *)
                                        8
     AlarmMainWaterIngress::~AlarmMainWaterIngress()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmMainWaterIngress::~AlarmMainWaterIngress()
                                      56
     AlarmMainWaterIngress::NumberOfAlarmSettings
                                       4
     AlarmMainWaterIngress::AlarmMainWaterIngress(PRogramObjectBase *)
                                     104
     ?Subroutine8                     12
     AlarmMainWaterIngress::Check()   68
     AlarmMainWaterIngress::PutValue(int, int, AnsiString, bool, int *)
                                     192
     AlarmMainWaterIngress::GetValue(int, int, float &, int &, int &)
                                     128
     AlarmMainWaterIngress::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine9                      8
     AlarmMainWaterIngress::PutFloatValue(int, float)
                                       8
     AlarmMainWaterIngress::new AlarmMainWaterIngress(PRogramObjectBase *)
                                      40
     __sti__routine()                  4
      Others                         320

 
 820 bytes in segment CODE
 116 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 580 bytes of CODE  memory (+ 256 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
