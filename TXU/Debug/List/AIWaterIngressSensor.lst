##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIWaterIngressSensor.cpp        #
#    Command line    =  D:\S2Prog\Shared\Src\AIWaterIngressSensor.cpp --fpu  #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIWaterIngressSensor.lst    #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIWaterIngressSensor.r79     #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIWaterIngressSensor.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_4  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_4:
   \   0000003C   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AIWaterIngressSensor::AIWaterIngressSensor(int SnsType, bool DisOverride) {
   \                     ??AIWaterIngressSensor:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000014   8C009FE5           LDR      R0,??AIWaterIngressSensor_2  ;; ??__vtbl
     10              DisableOverride = DisOverride;
     11              Type            = SnsType;
     12              BasicSensorType     = AI_SENSOR_WATER_INGRESS;
     13              BasicSensorTypeWord = L_WORD601; //WIng
     14              ADCardChannel  		= 0;
     15              switch (Type) {
   \   00000018   4A1FA0E3           MOV      R1,#+296
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   6461C4E5           STRB     R6,[R4, #+356]
   \   00000024   A05084E5           STR      R5,[R4, #+160]
   \   00000028   0600A0E3           MOV      R0,#+6
   \   0000002C   100184E5           STR      R0,[R4, #+272]
   \   00000030   5900A0E3           MOV      R0,#+89
   \   00000034   800F80E3           ORR      R0,R0,#0x200
   \   00000038   140184E5           STR      R0,[R4, #+276]
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   080184E5           STR      R0,[R4, #+264]
   \   00000044   4B0FA0E3           MOV      R0,#+300
   \   00000048   852045E2           SUB      R2,R5,#+133
   \   0000004C   802E42E2           SUB      R2,R2,#+2048
   \   00000050   020052E3           CMP      R2,#+2
   \   00000054   0E00008A           BHI      ??AIWaterIngressSensor_3
   \   00000058   013F8FE2           ADR      R3,??AIWaterIngressSensor_1
   \   0000005C   0230D3E7           LDRB     R3,[R3, R2]
   \   00000060   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??AIWaterIngressSensor_1:
   \   00000064   00000600           DC8      +0,+0,+6,+0
     16              case C_AI_WATERINGRESS:
     17              case C_AI_WATERINGR_MAIN:
     18                  Location = C_AI_LOC_WI_MAIN;
   \                     ??AIWaterIngressSensor_4:
   \   00000068   E620A0E3           MOV      R2,#+230
   \   0000006C   802E82E3           ORR      R2,R2,#0x800
   \   00000070   042081E7           STR      R2,[R1, +R4]
     19                  Distance = 3.0;
   \   00000074   4014A0E3           MOV      R1,#+1073741824
   \   00000078   401881E3           ORR      R1,R1,#0x400000
   \   0000007C   030000EA           B        ??AIWaterIngressSensor_5
     20                  break;
     21              case C_AI_WATERINGR_PRE:
     22                  Location = C_AI_LOC_WI_PRE;
   \                     ??AIWaterIngressSensor_6:
   \   00000080   E720A0E3           MOV      R2,#+231
   \   00000084   802E82E3           ORR      R2,R2,#0x800
   \   00000088   042081E7           STR      R2,[R1, +R4]
     23                  Distance = 1.0;
   \   0000008C   FE15A0E3           MOV      R1,#+1065353216
   \                     ??AIWaterIngressSensor_5:
   \   00000090   041080E7           STR      R1,[R0, +R4]
     24                  break;
     25              }
     26              AdjustedDistance = Distance;
   \                     ??AIWaterIngressSensor_3:
   \   00000094   040090E7           LDR      R0,[R0, +R4]
   \   00000098   300184E5           STR      R0,[R4, #+304]
     27          }
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   7040BDE8           POP      {R4-R6,LR}
   \   000000A4   1EFF2FE1           BX       LR               ;; return
   \                     ??AIWaterIngressSensor_2:
   \   000000A8   ........           DC32     ??__vtbl
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          AIWaterIngressSensor::~AIWaterIngressSensor(void) {
   \                     `?~AIWaterIngressSensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AIWaterIngressSensor_1`
     30          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AIWaterIngressSensor_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIWaterIngressSensor_1`:
   \   0000002C                      REQUIRE ?Subroutine11
   \   0000002C                      ;; // Fall through to label ?Subroutine11

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine11:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     31          
     32          ///////////////////////////////////////////////////////////////
     33          //
     34          // Routines for the Configuration
     35          //
     36          ///////////////////////////////////////////////////////////////
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          AnsiString AIWaterIngressSensor::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   49DF4DE2           SUB      SP,SP,#+292
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
   \   0000000C   0050A0E1           MOV      R5,R0
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0260A0E1           MOV      R6,R2
     39              AnsiString TabStr1     = AnsiString::StringOfChar( '\t', 1 + ExtraTabs );
   \   00000018   012086E2           ADD      R2,R6,#+1
   \   0000001C   0910A0E3           MOV      R1,#+9
   \   00000020   0C008DE2           ADD      R0,SP,#+12
   \   00000024   400E80E2           ADD      R0,R0,#+1024
   \   00000028   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     40              AnsiString TabStr2     = AnsiString::StringOfChar( '\t', 2 + ExtraTabs );
   \   0000002C   022086E2           ADD      R2,R6,#+2
   \   00000030   0910A0E3           MOV      R1,#+9
   \   00000034   B4008DE2           ADD      R0,SP,#+180
   \   00000038   400E80E2           ADD      R0,R0,#+1024
   \   0000003C   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     41              AnsiString TabStr3     = AnsiString::StringOfChar( '\t', 3 + ExtraTabs );
   \   00000040   032086E2           ADD      R2,R6,#+3
   \   00000044   0910A0E3           MOV      R1,#+9
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     42              AnsiString TabStr4     = AnsiString::StringOfChar( '\t', 4 + ExtraTabs );
   \   00000050   042086E2           ADD      R2,R6,#+4
   \   00000054   0910A0E3           MOV      R1,#+9
   \   00000058   4D0E8DE2           ADD      R0,SP,#+1232
   \   0000005C   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     43              AnsiString TabStr5     = AnsiString::StringOfChar( '\t', 5 + ExtraTabs );
   \   00000060   052086E2           ADD      R2,R6,#+5
   \   00000064   0910A0E3           MOV      R1,#+9
   \   00000068   EC008DE2           ADD      R0,SP,#+236
   \   0000006C   400E80E2           ADD      R0,R0,#+1024
   \   00000070   ........           _BLF     ??StringOfChar,??StringOfChar??rA
     44              AnsiString TabStr6     = AnsiString::StringOfChar( '\t', 6 + ExtraTabs );
   \   00000074   062086E2           ADD      R2,R6,#+6
     45              AnsiString LocalString;
     46              LocalString += TabStr1 + KeyWord( Type ) + CrLfStr;
   \   00000078   C0669FE5           LDR      R6,??MakeConfigString_1  ;; CrLfStr
   \   0000007C   0910A0E3           MOV      R1,#+9
   \   00000080   420F8DE2           ADD      R0,SP,#+264
   \   00000084   400E80E2           ADD      R0,R0,#+1024
   \   00000088   ........           _BLF     ??StringOfChar,??StringOfChar??rA
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   00000094   A01095E5           LDR      R1,[R5, #+160]
   \   00000098   54008DE2           ADD      R0,SP,#+84
   \   0000009C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000A0   54208DE2           ADD      R2,SP,#+84
   \   000000A4   0C108DE2           ADD      R1,SP,#+12
   \   000000A8   401E81E2           ADD      R1,R1,#+1024
   \   000000AC   38008DE2           ADD      R0,SP,#+56
   \   000000B0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000B4   0620A0E1           MOV      R2,R6
   \   000000B8   38108DE2           ADD      R1,SP,#+56
   \   000000BC   1C008DE2           ADD      R0,SP,#+28
   \   000000C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000C4   ........           LDR      R0,??DataTable2  ;; ??npos
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   007090E5           LDR      R7,[R0, #+0]
   \   000000D0   1C108DE2           ADD      R1,SP,#+28
   \   000000D4   0730A0E1           MOV      R3,R7
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   ........           _BLF     ??append,??append??rA
   \   000000E0   0020A0E3           MOV      R2,#+0
   \   000000E4   0110A0E3           MOV      R1,#+1
   \   000000E8   1C008DE2           ADD      R0,SP,#+28
   \   000000EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   38008DE2           ADD      R0,SP,#+56
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0110A0E3           MOV      R1,#+1
   \   00000108   54008DE2           ADD      R0,SP,#+84
   \   0000010C   ........           _BLF     ??_Tidy,??_Tidy??rA
     47              if (SerialNumber.IsEmpty()) {
   \   00000110   D80085E2           ADD      R0,R5,#+216
   \   00000114   ........           _BLF     ??IsEmpty,??IsEmpty??rA
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   0D00000A           BEQ      ??MakeConfigString_2
     48                  SerialNumber = "None";
   \   00000120   1C169FE5           LDR      R1,??MakeConfigString_1+0x4  ;; `?<Constant "None">`
   \   00000124   28008DE2           ADD      R0,SP,#+40
   \   00000128   400E80E2           ADD      R0,R0,#+1024
   \   0000012C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000130   0730A0E1           MOV      R3,R7
   \   00000134   0020A0E3           MOV      R2,#+0
   \   00000138   0010A0E1           MOV      R1,R0
   \   0000013C   D80085E2           ADD      R0,R5,#+216
   \   00000140   ........           _BLF     ??assign,??assign??rA
   \   00000144   0020A0E3           MOV      R2,#+0
   \   00000148   0110A0E3           MOV      R1,#+1
   \   0000014C   28008DE2           ADD      R0,SP,#+40
   \   00000150   400E80E2           ADD      R0,R0,#+1024
   \   00000154   ........           _BLF     ??_Tidy,??_Tidy??rA
     49              }
     50              LocalString += TabStr3 + KeyWord( C_AI_SERIALNO ) + SerialNumber + CrLfStr;
   \                     ??MakeConfigString_2:
   \   00000158   8A1EA0E3           MOV      R1,#+2208
   \   0000015C   C4008DE2           ADD      R0,SP,#+196
   \   00000160   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000164   C4208DE2           ADD      R2,SP,#+196
   \   00000168   0D10A0E1           MOV      R1,SP
   \   0000016C   A8008DE2           ADD      R0,SP,#+168
   \   00000170   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000174   D82085E2           ADD      R2,R5,#+216
   \   00000178   A8108DE2           ADD      R1,SP,#+168
   \   0000017C   8C008DE2           ADD      R0,SP,#+140
   \   00000180   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000184   0620A0E1           MOV      R2,R6
   \   00000188   8C108DE2           ADD      R1,SP,#+140
   \   0000018C   70008DE2           ADD      R0,SP,#+112
   \   00000190   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000194   0730A0E1           MOV      R3,R7
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   70108DE2           ADD      R1,SP,#+112
   \   000001A0   0400A0E1           MOV      R0,R4
   \   000001A4   ........           _BLF     ??append,??append??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   70008DE2           ADD      R0,SP,#+112
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   8C008DE2           ADD      R0,SP,#+140
   \   000001C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   A8008DE2           ADD      R0,SP,#+168
   \   000001D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   0110A0E3           MOV      R1,#+1
   \   000001E0   C4008DE2           ADD      R0,SP,#+196
   \   000001E4   ........           _BLF     ??_Tidy,??_Tidy??rA
     51              LocalString += TabStr3 + KeyWord( C_AI_DISTANCE ) + FloatToAnsiString( Distance ) + CrLfStr;
   \   000001E8   2C1195E5           LDR      R1,[R5, #+300]
   \   000001EC   0330A0E3           MOV      R3,#+3
   \   000001F0   0720A0E3           MOV      R2,#+7
   \   000001F4   540F8DE2           ADD      R0,SP,#+336
   \   000001F8   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   000001FC   A110A0E3           MOV      R1,#+161
   \   00000200   801E81E3           ORR      R1,R1,#0x800
   \   00000204   4D0F8DE2           ADD      R0,SP,#+308
   \   00000208   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000020C   4D2F8DE2           ADD      R2,SP,#+308
   \   00000210   0D10A0E1           MOV      R1,SP
   \   00000214   460F8DE2           ADD      R0,SP,#+280
   \   00000218   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000021C   542F8DE2           ADD      R2,SP,#+336
   \   00000220   461F8DE2           ADD      R1,SP,#+280
   \   00000224   FC008DE2           ADD      R0,SP,#+252
   \   00000228   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000022C   0620A0E1           MOV      R2,R6
   \   00000230   FC108DE2           ADD      R1,SP,#+252
   \   00000234   E0008DE2           ADD      R0,SP,#+224
   \   00000238   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000023C   0730A0E1           MOV      R3,R7
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   E0108DE2           ADD      R1,SP,#+224
   \   00000248   0400A0E1           MOV      R0,R4
   \   0000024C   ........           _BLF     ??append,??append??rA
   \   00000250   0020A0E3           MOV      R2,#+0
   \   00000254   0110A0E3           MOV      R1,#+1
   \   00000258   E0008DE2           ADD      R0,SP,#+224
   \   0000025C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000260   0020A0E3           MOV      R2,#+0
   \   00000264   0110A0E3           MOV      R1,#+1
   \   00000268   FC008DE2           ADD      R0,SP,#+252
   \   0000026C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0110A0E3           MOV      R1,#+1
   \   00000278   540F8DE2           ADD      R0,SP,#+336
   \   0000027C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   0110A0E3           MOV      R1,#+1
   \   00000288   460F8DE2           ADD      R0,SP,#+280
   \   0000028C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000290   0020A0E3           MOV      R2,#+0
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   4D0F8DE2           ADD      R0,SP,#+308
   \   0000029C   ........           _BLF     ??_Tidy,??_Tidy??rA
     52              LocalString += TabStr3 + KeyWord( C_TCU_ADDRESS ) + (AnsiString)TCUAddress + CrLfStr;
   \   000002A0   F41095E5           LDR      R1,[R5, #+244]
   \   000002A4   44008DE2           ADD      R0,SP,#+68
   \   000002A8   400E80E2           ADD      R0,R0,#+1024
   \   000002AC   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   000002B0   0080A0E1           MOV      R8,R0
   \   000002B4   0510A0E3           MOV      R1,#+5
   \   000002B8   801E81E3           ORR      R1,R1,#0x800
   \   000002BC   700F8DE2           ADD      R0,SP,#+448
   \   000002C0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002C4   702F8DE2           ADD      R2,SP,#+448
   \   000002C8   0D10A0E1           MOV      R1,SP
   \   000002CC   690F8DE2           ADD      R0,SP,#+420
   \   000002D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002D4   0820A0E1           MOV      R2,R8
   \   000002D8   691F8DE2           ADD      R1,SP,#+420
   \   000002DC   620F8DE2           ADD      R0,SP,#+392
   \   000002E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002E4   0620A0E1           MOV      R2,R6
   \   000002E8   621F8DE2           ADD      R1,SP,#+392
   \   000002EC   5B0F8DE2           ADD      R0,SP,#+364
   \   000002F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000002F4   0730A0E1           MOV      R3,R7
   \   000002F8   0020A0E3           MOV      R2,#+0
   \   000002FC   5B1F8DE2           ADD      R1,SP,#+364
   \   00000300   0400A0E1           MOV      R0,R4
   \   00000304   ........           _BLF     ??append,??append??rA
   \   00000308   0020A0E3           MOV      R2,#+0
   \   0000030C   0110A0E3           MOV      R1,#+1
   \   00000310   5B0F8DE2           ADD      R0,SP,#+364
   \   00000314   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000318   0020A0E3           MOV      R2,#+0
   \   0000031C   0110A0E3           MOV      R1,#+1
   \   00000320   620F8DE2           ADD      R0,SP,#+392
   \   00000324   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000328   0020A0E3           MOV      R2,#+0
   \   0000032C   0110A0E3           MOV      R1,#+1
   \   00000330   44008DE2           ADD      R0,SP,#+68
   \   00000334   400E80E2           ADD      R0,R0,#+1024
   \   00000338   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   690F8DE2           ADD      R0,SP,#+420
   \   00000348   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   0110A0E3           MOV      R1,#+1
   \   00000354   700F8DE2           ADD      R0,SP,#+448
   \   00000358   ........           _BLF     ??_Tidy,??_Tidy??rA
     53              LocalString += TabStr3 + KeyWord( C_TCU_PORT_NO ) + (AnsiString)TCUPortNo + CrLfStr;
   \   0000035C   F81095E5           LDR      R1,[R5, #+248]
   \   00000360   460E8DE2           ADD      R0,SP,#+1120
   \   00000364   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   00000368   0080A0E1           MOV      R8,R0
   \   0000036C   0B10A0E3           MOV      R1,#+11
   \   00000370   801E81E3           ORR      R1,R1,#0x800
   \   00000374   8C0F8DE2           ADD      R0,SP,#+560
   \   00000378   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000037C   8C2F8DE2           ADD      R2,SP,#+560
   \   00000380   0D10A0E1           MOV      R1,SP
   \   00000384   850F8DE2           ADD      R0,SP,#+532
   \   00000388   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000038C   0820A0E1           MOV      R2,R8
   \   00000390   851F8DE2           ADD      R1,SP,#+532
   \   00000394   7E0F8DE2           ADD      R0,SP,#+504
   \   00000398   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000039C   0620A0E1           MOV      R2,R6
   \   000003A0   7E1F8DE2           ADD      R1,SP,#+504
   \   000003A4   770F8DE2           ADD      R0,SP,#+476
   \   000003A8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003AC   0730A0E1           MOV      R3,R7
   \   000003B0   0020A0E3           MOV      R2,#+0
   \   000003B4   771F8DE2           ADD      R1,SP,#+476
   \   000003B8   0400A0E1           MOV      R0,R4
   \   000003BC   ........           _BLF     ??append,??append??rA
   \   000003C0   0020A0E3           MOV      R2,#+0
   \   000003C4   0110A0E3           MOV      R1,#+1
   \   000003C8   770F8DE2           ADD      R0,SP,#+476
   \   000003CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003D0   0020A0E3           MOV      R2,#+0
   \   000003D4   0110A0E3           MOV      R1,#+1
   \   000003D8   7E0F8DE2           ADD      R0,SP,#+504
   \   000003DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003E0   0020A0E3           MOV      R2,#+0
   \   000003E4   0110A0E3           MOV      R1,#+1
   \   000003E8   460E8DE2           ADD      R0,SP,#+1120
   \   000003EC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003F0   0020A0E3           MOV      R2,#+0
   \   000003F4   0110A0E3           MOV      R1,#+1
   \   000003F8   850F8DE2           ADD      R0,SP,#+532
   \   000003FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000400   0020A0E3           MOV      R2,#+0
   \   00000404   0110A0E3           MOV      R1,#+1
   \   00000408   8C0F8DE2           ADD      R0,SP,#+560
   \   0000040C   ........           _BLF     ??_Tidy,??_Tidy??rA
     54              LocalString += TabStr3 + KeyWord( C_IO_TYPE ) + KeyWord( IOType ) + CrLfStr;
   \   00000410   FC1095E5           LDR      R1,[R5, #+252]
   \   00000414   AF0F8DE2           ADD      R0,SP,#+700
   \   00000418   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000041C   0710A0E3           MOV      R1,#+7
   \   00000420   801E81E3           ORR      R1,R1,#0x800
   \   00000424   A80F8DE2           ADD      R0,SP,#+672
   \   00000428   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000042C   A82F8DE2           ADD      R2,SP,#+672
   \   00000430   0D10A0E1           MOV      R1,SP
   \   00000434   A10F8DE2           ADD      R0,SP,#+644
   \   00000438   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000043C   AF2F8DE2           ADD      R2,SP,#+700
   \   00000440   A11F8DE2           ADD      R1,SP,#+644
   \   00000444   9A0F8DE2           ADD      R0,SP,#+616
   \   00000448   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000044C   0620A0E1           MOV      R2,R6
   \   00000450   9A1F8DE2           ADD      R1,SP,#+616
   \   00000454   930F8DE2           ADD      R0,SP,#+588
   \   00000458   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000045C   0730A0E1           MOV      R3,R7
   \   00000460   0020A0E3           MOV      R2,#+0
   \   00000464   931F8DE2           ADD      R1,SP,#+588
   \   00000468   0400A0E1           MOV      R0,R4
   \   0000046C   ........           _BLF     ??append,??append??rA
   \   00000470   0020A0E3           MOV      R2,#+0
   \   00000474   0110A0E3           MOV      R1,#+1
   \   00000478   930F8DE2           ADD      R0,SP,#+588
   \   0000047C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000480   0020A0E3           MOV      R2,#+0
   \   00000484   0110A0E3           MOV      R1,#+1
   \   00000488   9A0F8DE2           ADD      R0,SP,#+616
   \   0000048C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000490   0020A0E3           MOV      R2,#+0
   \   00000494   0110A0E3           MOV      R1,#+1
   \   00000498   AF0F8DE2           ADD      R0,SP,#+700
   \   0000049C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004A0   0020A0E3           MOV      R2,#+0
   \   000004A4   0110A0E3           MOV      R1,#+1
   \   000004A8   A10F8DE2           ADD      R0,SP,#+644
   \   000004AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004B0   0020A0E3           MOV      R2,#+0
   \   000004B4   0110A0E3           MOV      R1,#+1
   \   000004B8   A80F8DE2           ADD      R0,SP,#+672
   \   000004BC   ........           _BLF     ??_Tidy,??_Tidy??rA
     55              LocalString += TabStr3 + KeyWord( C_IO_ADDRESS ) + (AnsiString)IOAddress + CrLfStr;
   \   000004C0   001195E5           LDR      R1,[R5, #+256]
   \   000004C4   7C008DE2           ADD      R0,SP,#+124
   \   000004C8   400E80E2           ADD      R0,R0,#+1024
   \   000004CC   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   000004D0   0080A0E1           MOV      R8,R0
   \   000004D4   0810A0E3           MOV      R1,#+8
   \   000004D8   801E81E3           ORR      R1,R1,#0x800
   \   000004DC   CB0F8DE2           ADD      R0,SP,#+812
   \   000004E0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000004E4   CB2F8DE2           ADD      R2,SP,#+812
   \   000004E8   0D10A0E1           MOV      R1,SP
   \   000004EC   C40F8DE2           ADD      R0,SP,#+784
   \   000004F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000004F4   0820A0E1           MOV      R2,R8
   \   000004F8   C41F8DE2           ADD      R1,SP,#+784
   \   000004FC   BD0F8DE2           ADD      R0,SP,#+756
   \   00000500   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000504   0620A0E1           MOV      R2,R6
   \   00000508   BD1F8DE2           ADD      R1,SP,#+756
   \   0000050C   B60F8DE2           ADD      R0,SP,#+728
   \   00000510   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000514   0730A0E1           MOV      R3,R7
   \   00000518   0020A0E3           MOV      R2,#+0
   \   0000051C   B61F8DE2           ADD      R1,SP,#+728
   \   00000520   0400A0E1           MOV      R0,R4
   \   00000524   ........           _BLF     ??append,??append??rA
   \   00000528   0020A0E3           MOV      R2,#+0
   \   0000052C   0110A0E3           MOV      R1,#+1
   \   00000530   B60F8DE2           ADD      R0,SP,#+728
   \   00000534   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000538   0020A0E3           MOV      R2,#+0
   \   0000053C   0110A0E3           MOV      R1,#+1
   \   00000540   BD0F8DE2           ADD      R0,SP,#+756
   \   00000544   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000548   0020A0E3           MOV      R2,#+0
   \   0000054C   0110A0E3           MOV      R1,#+1
   \   00000550   7C008DE2           ADD      R0,SP,#+124
   \   00000554   400E80E2           ADD      R0,R0,#+1024
   \   00000558   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000055C   0020A0E3           MOV      R2,#+0
   \   00000560   0110A0E3           MOV      R1,#+1
   \   00000564   C40F8DE2           ADD      R0,SP,#+784
   \   00000568   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000056C   0020A0E3           MOV      R2,#+0
   \   00000570   0110A0E3           MOV      R1,#+1
   \   00000574   CB0F8DE2           ADD      R0,SP,#+812
   \   00000578   ........           _BLF     ??_Tidy,??_Tidy??rA
     56              LocalString += TabStr3 + KeyWord( C_IO_CHANNEL ) + (AnsiString)IOChannel + CrLfStr;
   \   0000057C   041195E5           LDR      R1,[R5, #+260]
   \   00000580   98008DE2           ADD      R0,SP,#+152
   \   00000584   400E80E2           ADD      R0,R0,#+1024
   \   00000588   ........           _BLF     ??AnsiString_3,??AnsiString??rA_2
   \   0000058C   0050A0E1           MOV      R5,R0
   \   00000590   0910A0E3           MOV      R1,#+9
   \   00000594   801E81E3           ORR      R1,R1,#0x800
   \   00000598   E70F8DE2           ADD      R0,SP,#+924
   \   0000059C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005A0   E72F8DE2           ADD      R2,SP,#+924
   \   000005A4   0D10A0E1           MOV      R1,SP
   \   000005A8   E00F8DE2           ADD      R0,SP,#+896
   \   000005AC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005B0   0520A0E1           MOV      R2,R5
   \   000005B4   E01F8DE2           ADD      R1,SP,#+896
   \   000005B8   D90F8DE2           ADD      R0,SP,#+868
   \   000005BC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005C0   0620A0E1           MOV      R2,R6
   \   000005C4   D91F8DE2           ADD      R1,SP,#+868
   \   000005C8   D20F8DE2           ADD      R0,SP,#+840
   \   000005CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005D0   0730A0E1           MOV      R3,R7
   \   000005D4   0020A0E3           MOV      R2,#+0
   \   000005D8   D21F8DE2           ADD      R1,SP,#+840
   \   000005DC   0400A0E1           MOV      R0,R4
   \   000005E0   ........           _BLF     ??append,??append??rA
   \   000005E4   0020A0E3           MOV      R2,#+0
   \   000005E8   0110A0E3           MOV      R1,#+1
   \   000005EC   D20F8DE2           ADD      R0,SP,#+840
   \   000005F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000005F4   0020A0E3           MOV      R2,#+0
   \   000005F8   0110A0E3           MOV      R1,#+1
   \   000005FC   D90F8DE2           ADD      R0,SP,#+868
   \   00000600   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000604   0020A0E3           MOV      R2,#+0
   \   00000608   0110A0E3           MOV      R1,#+1
   \   0000060C   98008DE2           ADD      R0,SP,#+152
   \   00000610   400E80E2           ADD      R0,R0,#+1024
   \   00000614   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000618   0020A0E3           MOV      R2,#+0
   \   0000061C   0110A0E3           MOV      R1,#+1
   \   00000620   E00F8DE2           ADD      R0,SP,#+896
   \   00000624   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000628   0020A0E3           MOV      R2,#+0
   \   0000062C   0110A0E3           MOV      R1,#+1
   \   00000630   E70F8DE2           ADD      R0,SP,#+924
   \   00000634   ........           _BLF     ??_Tidy,??_Tidy??rA
     57          
     58              LocalString += TabStr1 + KeyWord( C_AI_END ) + CrLfStr;
   \   00000638   9810A0E3           MOV      R1,#+152
   \   0000063C   801E81E3           ORR      R1,R1,#0x800
   \   00000640   FC0F8DE2           ADD      R0,SP,#+1008
   \   00000644   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000648   FC2F8DE2           ADD      R2,SP,#+1008
   \   0000064C   0C108DE2           ADD      R1,SP,#+12
   \   00000650   401E81E2           ADD      R1,R1,#+1024
   \   00000654   F50F8DE2           ADD      R0,SP,#+980
   \   00000658   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000065C   0620A0E1           MOV      R2,R6
   \   00000660   F51F8DE2           ADD      R1,SP,#+980
   \   00000664   EE0F8DE2           ADD      R0,SP,#+952
   \   00000668   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000066C   0730A0E1           MOV      R3,R7
   \   00000670   0020A0E3           MOV      R2,#+0
   \   00000674   EE1F8DE2           ADD      R1,SP,#+952
   \   00000678   0400A0E1           MOV      R0,R4
   \   0000067C   ........           _BLF     ??append,??append??rA
   \   00000680   0020A0E3           MOV      R2,#+0
   \   00000684   0110A0E3           MOV      R1,#+1
   \   00000688   EE0F8DE2           ADD      R0,SP,#+952
   \   0000068C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000690   0020A0E3           MOV      R2,#+0
   \   00000694   0110A0E3           MOV      R1,#+1
   \   00000698   F50F8DE2           ADD      R0,SP,#+980
   \   0000069C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006A0   0020A0E3           MOV      R2,#+0
   \   000006A4   0110A0E3           MOV      R1,#+1
   \   000006A8   FC0F8DE2           ADD      R0,SP,#+1008
   \   000006AC   ........           _BLF     ??_Tidy,??_Tidy??rA
     59              LocalString += CrLfStr;
   \   000006B0   0730A0E1           MOV      R3,R7
   \   000006B4   0020A0E3           MOV      R2,#+0
   \   000006B8   0610A0E1           MOV      R1,R6
   \   000006BC   0400A0E1           MOV      R0,R4
   \   000006C0   ........           _BLF     ??append,??append??rA
     60          
     61              return (LocalString);
   \   000006C4   0020A0E3           MOV      R2,#+0
   \   000006C8   0110A0E3           MOV      R1,#+1
   \   000006CC   420F8DE2           ADD      R0,SP,#+264
   \   000006D0   400E80E2           ADD      R0,R0,#+1024
   \   000006D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006D8   0020A0E3           MOV      R2,#+0
   \   000006DC   0110A0E3           MOV      R1,#+1
   \   000006E0   EC008DE2           ADD      R0,SP,#+236
   \   000006E4   400E80E2           ADD      R0,R0,#+1024
   \   000006E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006EC   0020A0E3           MOV      R2,#+0
   \   000006F0   0110A0E3           MOV      R1,#+1
   \   000006F4   4D0E8DE2           ADD      R0,SP,#+1232
   \   000006F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000006FC   0020A0E3           MOV      R2,#+0
   \   00000700   0110A0E3           MOV      R1,#+1
   \   00000704   0D00A0E1           MOV      R0,SP
   \   00000708   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000070C   0020A0E3           MOV      R2,#+0
   \   00000710   0110A0E3           MOV      R1,#+1
   \   00000714   B4008DE2           ADD      R0,SP,#+180
   \   00000718   400E80E2           ADD      R0,R0,#+1024
   \   0000071C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000720   0020A0E3           MOV      R2,#+0
   \   00000724   0110A0E3           MOV      R1,#+1
   \   00000728   0C008DE2           ADD      R0,SP,#+12
   \   0000072C   400E80E2           ADD      R0,R0,#+1024
   \   00000730   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000734   49DF8DE2           ADD      SP,SP,#+292
   \   00000738   40DE8DE2           ADD      SP,SP,#+1024
   \   0000073C   ........           B        ?Subroutine12
   \                     ??MakeConfigString_1:
   \   00000740   ........           DC32     CrLfStr
   \   00000744   ........           DC32     `?<Constant "None">`
     62          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine12:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     63          //---------------------------------------------------------------------------
     64          
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          float AIWaterIngressSensor::Calculate(void) {
   \                     ??Calculate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     67              if (CanCalculate()) {
   \   00000008   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   0000000C   000050E3           CMP      R0,#+0
     68                  CalcValue = FilteredValue;  // Ignore gain and offset
   \   00000010   44019415           LDRNE    R0,[R4, #+324]
   \   00000014   525FA0E3           MOV      R5,#+328
   \   00000018   04008517           STRNE    R0,[R5, +R4]
     69                  ResultOK = true;
   \   0000001C   0100A013           MOVNE    R0,#+1
   \   00000020   3601C415           STRBNE   R0,[R4, #+310]
     70          
     71              }
     72              return (CalcValue);
   \   00000024   040095E7           LDR      R0,[R5, +R4]
   \   00000028   ........           B        ?Subroutine11
     73          
     74          }
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          bool AIWaterIngressSensor::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     77              bool       NoError   = true;
     78              int        ErrorLine = 0;
     79              int        Key;
     80              AnsiString PROName   = "Water Ingress sensor";
   \   00000004   88739FE5           LDR      R7,??LoadConfigString_2+0x4  ;; `?<Constant "Water Ingress sensor">`
   \   00000008   E4D04DE2           SUB      SP,SP,#+228
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0710A0E1           MOV      R1,R7
   \   00000020   3C008DE2           ADD      R0,SP,#+60
   \   00000024   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
     81              if (PROPtr) PROName += (AnsiString)", for " + PROPtr->Name;
   \   00000028   ........           LDR      R10,??DataTable2  ;; ??npos
   \   0000002C   498FA0E3           MOV      R8,#+292
   \   00000030   040098E7           LDR      R0,[R8, +R4]
   \   00000034   0190A0E3           MOV      R9,#+1
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1400000A           BEQ      ??LoadConfigString_3
   \   00000040   181087E2           ADD      R1,R7,#+24
   \   00000044   20008DE2           ADD      R0,SP,#+32
   \   00000048   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   040098E7           LDR      R0,[R8, +R4]
   \   00000054   442080E2           ADD      R2,R0,#+68
   \   00000058   04008DE2           ADD      R0,SP,#+4
   \   0000005C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000060   00309AE5           LDR      R3,[R10, #+0]
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   04108DE2           ADD      R1,SP,#+4
   \   0000006C   3C008DE2           ADD      R0,SP,#+60
   \   00000070   ........           _BLF     ??append,??append??rA
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0110A0E3           MOV      R1,#+1
   \   0000007C   04008DE2           ADD      R0,SP,#+4
   \   00000080   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0910A0E1           MOV      R1,R9
   \   0000008C   20008DE2           ADD      R0,SP,#+32
   \   00000090   ........           _BLF     ??_Tidy,??_Tidy??rA
     82              PROName += ":\n";
   \                     ??LoadConfigString_3:
   \   00000094   BD7F8FE2           ADR      R7,??LoadConfigString_2  ;; ":\n"
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   ........           _BLF     strlen,??strlen??rA
   \   000000A0   0020A0E1           MOV      R2,R0
   \   000000A4   0710A0E1           MOV      R1,R7
   \   000000A8   3C008DE2           ADD      R0,SP,#+60
   \   000000AC   ........           _BLF     ??append_1,??append??rA_1
   \   000000B0   007069E2           RSB      R7,R9,#+0
     83              do {
     84                  AnsiString InputKeyWord = ConfigString.NextWord( ErrorLine );
   \                     ??LoadConfigString_4:
   \   000000B4   0030A0E3           MOV      R3,#+0
   \   000000B8   0D20A0E1           MOV      R2,SP
   \   000000BC   58108DE2           ADD      R1,SP,#+88
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   ........           _BLF     ??NextWord,??NextWord??rA
     85                  if (ErrorLine) {
   \   000000C8   00009DE5           LDR      R0,[SP, #+0]
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   0B00000A           BEQ      ??LoadConfigString_5
     86                      if (ErrorLine != EOF) {
   \   000000D4   070050E1           CMP      R0,R7
   \   000000D8   9700000A           BEQ      ??LoadConfigString_6
     87                          GiveConfigWarning( PROName, ErrorLine );
   \   000000DC   3C108DE2           ADD      R1,SP,#+60
   \   000000E0   04008DE2           ADD      R0,SP,#+4
   \   000000E4   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   000000E8   00109DE5           LDR      R1,[SP, #+0]
   \   000000EC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   0110A0E3           MOV      R1,#+1
   \   000000F8   04008DE2           ADD      R0,SP,#+4
   \                     ??LoadConfigString_7:
   \   000000FC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000100   8D0000EA           B        ??LoadConfigString_6
     88                      }
     89                  } else {
     90                      Key = FindConfigKey( InputKeyWord );
   \                     ??LoadConfigString_5:
   \   00000104   58108DE2           ADD      R1,SP,#+88
   \   00000108   74008DE2           ADD      R0,SP,#+116
   \   0000010C   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   00000110   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000114   0060A0E1           MOV      R6,R0
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   74008DE2           ADD      R0,SP,#+116
   \   00000124   ........           _BLF     ??_Tidy,??_Tidy??rA
     91                      switch (Key) {
   \   00000128   0510A0E3           MOV      R1,#+5
   \   0000012C   801E81E3           ORR      R1,R1,#0x800
   \   00000130   010056E1           CMP      R6,R1
   \   00000134   4700000A           BEQ      ??LoadConfigString_8
   \   00000138   021081E3           ORR      R1,R1,#0x2
   \   0000013C   010056E1           CMP      R6,R1
   \   00000140   5000000A           BEQ      ??LoadConfigString_9
   \   00000144   011081E2           ADD      R1,R1,#+1
   \   00000148   010056E1           CMP      R6,R1
   \   0000014C   6600000A           BEQ      ??LoadConfigString_10
   \   00000150   011081E3           ORR      R1,R1,#0x1
   \   00000154   010056E1           CMP      R6,R1
   \   00000158   6900000A           BEQ      ??LoadConfigString_11
   \   0000015C   011081E2           ADD      R1,R1,#+1
   \   00000160   010056E1           CMP      R6,R1
   \   00000164   6C00000A           BEQ      ??LoadConfigString_12
   \   00000168   011081E3           ORR      R1,R1,#0x1
   \   0000016C   010056E1           CMP      R6,R1
   \   00000170   3E00000A           BEQ      ??LoadConfigString_13
   \   00000174   8D1081E2           ADD      R1,R1,#+141
   \   00000178   010056E1           CMP      R6,R1
   \   0000017C   6E00000A           BEQ      ??LoadConfigString_6
   \   00000180   011081E3           ORR      R1,R1,#0x1
   \   00000184   010056E1           CMP      R6,R1
   \   00000188   1600000A           BEQ      ??LoadConfigString_14
   \   0000018C   8A0E56E3           CMP      R6,#+2208
   \   00000190   1800000A           BEQ      ??LoadConfigString_15
   \   00000194   081081E2           ADD      R1,R1,#+8
   \   00000198   010056E1           CMP      R6,R1
   \   0000019C   2400000A           BEQ      ??LoadConfigString_16
     92                      default:
     93                          GiveConfigWarning( PROName, InputKeyWord, ConfigString.LineCount );
   \   000001A0   58108DE2           ADD      R1,SP,#+88
   \   000001A4   90008DE2           ADD      R0,SP,#+144
   \   000001A8   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   000001AC   0080A0E1           MOV      R8,R0
   \   000001B0   3C108DE2           ADD      R1,SP,#+60
   \   000001B4   AC008DE2           ADD      R0,SP,#+172
   \   000001B8   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   000001BC   1C2095E5           LDR      R2,[R5, #+28]
   \   000001C0   0810A0E1           MOV      R1,R8
   \   000001C4   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   90008DE2           ADD      R0,SP,#+144
   \   000001D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   0110A0E3           MOV      R1,#+1
   \   000001E0   AC008DE2           ADD      R0,SP,#+172
   \   000001E4   C4FFFFEA           B        ??LoadConfigString_7
     94                          break;
     95                      case C_AI_START_COMMON:
     96                          AnalogInput::LoadConfigString( ConfigString );
   \                     ??LoadConfigString_14:
   \   000001E8   0510A0E1           MOV      R1,R5
   \   000001EC   0400A0E1           MOV      R0,R4
   \   000001F0   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   000001F4   500000EA           B        ??LoadConfigString_6
     97                          break;
     98                      case C_AI_END:
     99                          break;
    100                      case C_AI_SERIALNO:
    101                          SerialNumber = ConfigString.NextWord( ErrorLine );
   \                     ??LoadConfigString_15:
   \   000001F8   0030A0E3           MOV      R3,#+0
   \   000001FC   0D20A0E1           MOV      R2,SP
   \   00000200   C8108DE2           ADD      R1,SP,#+200
   \   00000204   0500A0E1           MOV      R0,R5
   \   00000208   ........           _BLF     ??NextWord,??NextWord??rA
   \   0000020C   00309AE5           LDR      R3,[R10, #+0]
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   C8108DE2           ADD      R1,SP,#+200
   \   00000218   D80084E2           ADD      R0,R4,#+216
   \   0000021C   ........           _BLF     ??assign,??assign??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   C8008DE2           ADD      R0,SP,#+200
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
    102                          NoError = !ErrorLine;
   \   00000230   3D0000EA           B        ??LoadConfigString_17
    103                          break;
    104                      case C_AI_DISTANCE:
    105                          Distance = ConfigString.ReadDouble( ErrorLine );
   \                     ??LoadConfigString_16:
   \   00000234   4B9FA0E3           MOV      R9,#+300
   \   00000238   0020A0E3           MOV      R2,#+0
   \   0000023C   0D10A0E1           MOV      R1,SP
   \   00000240   0500A0E1           MOV      R0,R5
   \   00000244   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000248   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000024C   040089E7           STR      R0,[R9, +R4]
    106                          AdjustedDistance = Distance;
   \   00000250   300184E5           STR      R0,[R4, #+304]
    107                          NoError = !ErrorLine;
   \   00000254   340000EA           B        ??LoadConfigString_17
    108                          break;
    109                      case C_TCU_ADDRESS:
    110                          TCUAddress = ConfigString.ReadLong( ErrorLine );
   \                     ??LoadConfigString_8:
   \   00000258   0020A0E3           MOV      R2,#+0
   \   0000025C   0D10A0E1           MOV      R1,SP
   \   00000260   0500A0E1           MOV      R0,R5
   \   00000264   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000268   F40084E5           STR      R0,[R4, #+244]
    111                          NoError = !ErrorLine;
   \   0000026C   2E0000EA           B        ??LoadConfigString_17
    112                          break;
    113                      case C_TCU_PORT_NO:
    114                          TCUPortNo = ConfigString.ReadLong( ErrorLine );
   \                     ??LoadConfigString_13:
   \   00000270   0020A0E3           MOV      R2,#+0
   \   00000274   0D10A0E1           MOV      R1,SP
   \   00000278   0500A0E1           MOV      R0,R5
   \   0000027C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000280   F80084E5           STR      R0,[R4, #+248]
    115                          NoError = !ErrorLine;
   \   00000284   280000EA           B        ??LoadConfigString_17
    116                          break;
    117                      case C_IO_TYPE:
    118                          {
    119                              AnsiString temp = ConfigString.NextWord( ErrorLine );
   \                     ??LoadConfigString_9:
   \   00000288   0030A0E3           MOV      R3,#+0
   \   0000028C   0D20A0E1           MOV      R2,SP
   \   00000290   20108DE2           ADD      R1,SP,#+32
   \   00000294   0500A0E1           MOV      R0,R5
   \   00000298   ........           _BLF     ??NextWord,??NextWord??rA
    120                              if (!ErrorLine) {
   \   0000029C   00009DE5           LDR      R0,[SP, #+0]
   \   000002A0   000050E3           CMP      R0,#+0
   \   000002A4   0800001A           BNE      ??LoadConfigString_18
    121                                  IOType = FindConfigKey( temp );
   \   000002A8   20108DE2           ADD      R1,SP,#+32
   \   000002AC   04008DE2           ADD      R0,SP,#+4
   \   000002B0   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   000002B4   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000002B8   FC0084E5           STR      R0,[R4, #+252]
   \   000002BC   0020A0E3           MOV      R2,#+0
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   04008DE2           ADD      R0,SP,#+4
   \   000002C8   ........           _BLF     ??_Tidy,??_Tidy??rA
    122                              }
    123                              NoError = !ErrorLine;
   \                     ??LoadConfigString_18:
   \   000002CC   00009DE5           LDR      R0,[SP, #+0]
    124                          }
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   000050E3           CMP      R0,#+0
   \   000002D8   0190A003           MOVEQ    R9,#+1
   \   000002DC   0090A013           MOVNE    R9,#+0
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   20008DE2           ADD      R0,SP,#+32
   \   000002E8   83FFFFEA           B        ??LoadConfigString_7
    125                          break;
    126                      case C_IO_ADDRESS:
    127                          {
    128                              IOAddress = ConfigString.ReadLong( ErrorLine );
   \                     ??LoadConfigString_10:
   \   000002EC   0020A0E3           MOV      R2,#+0
   \   000002F0   0D10A0E1           MOV      R1,SP
   \   000002F4   0500A0E1           MOV      R0,R5
   \   000002F8   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000002FC   000184E5           STR      R0,[R4, #+256]
    129                              NoError = !ErrorLine;
   \   00000300   090000EA           B        ??LoadConfigString_17
    130                          }
    131                          break;
    132                      case C_IO_CHANNEL:
    133                          {
    134                              IOChannel = ConfigString.ReadLong( ErrorLine );
   \                     ??LoadConfigString_11:
   \   00000304   0020A0E3           MOV      R2,#+0
   \   00000308   0D10A0E1           MOV      R1,SP
   \   0000030C   0500A0E1           MOV      R0,R5
   \   00000310   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000314   040184E5           STR      R0,[R4, #+260]
    135                              NoError = !ErrorLine;
   \   00000318   030000EA           B        ??LoadConfigString_17
    136                          }
    137                          break;
    138                      case C_ADCARD_CH:
    139                          {
    140                              ConfigString.ReadLong( ErrorLine );
   \                     ??LoadConfigString_12:
   \   0000031C   0020A0E3           MOV      R2,#+0
   \   00000320   0D10A0E1           MOV      R1,SP
   \   00000324   0500A0E1           MOV      R0,R5
   \   00000328   ........           _BLF     ??ReadLong,??ReadLong??rA
    141                              NoError = !ErrorLine;
   \                     ??LoadConfigString_17:
   \   0000032C   00009DE5           LDR      R0,[SP, #+0]
   \   00000330   000050E3           CMP      R0,#+0
   \   00000334   0190A003           MOVEQ    R9,#+1
   \   00000338   0090A013           MOVNE    R9,#+0
    142                          }
    143                          break;
    144                      }
    145                  }                                                              //remove this later
    146              }while (NoError && ( ErrorLine != EOF ) && ( Key != C_AI_END ) && ( Key != C_DI_END ));
   \                     ??LoadConfigString_6:
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   58008DE2           ADD      R0,SP,#+88
   \   00000348   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000034C   000059E3           CMP      R9,#+0
   \   00000350   00009D15           LDRNE    R0,[SP, #+0]
   \   00000354   07005011           CMPNE    R0,R7
   \   00000358   9800A013           MOVNE    R0,#+152
   \   0000035C   800E8013           ORRNE    R0,R0,#0x800
   \   00000360   00005611           CMPNE    R6,R0
   \   00000364   640F8012           ADDNE    R0,R0,#+400
   \   00000368   00005611           CMPNE    R6,R0
   \   0000036C   50FFFF1A           BNE      ??LoadConfigString_4
    147              return (NoError);
   \   00000370   0020A0E3           MOV      R2,#+0
   \   00000374   0110A0E3           MOV      R1,#+1
   \   00000378   3C008DE2           ADD      R0,SP,#+60
   \   0000037C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000380   0900A0E1           MOV      R0,R9
   \   00000384   E4D08DE2           ADD      SP,SP,#+228
   \   00000388   F047BDE8           POP      {R4-R10,LR}
   \   0000038C   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_2:
   \   00000390   3A0A0000           DC8      ":\n",+0
   \   00000394   ........           DC32     `?<Constant "Water Ingress sensor">`
    148          }
    149          //---------------------------------------------------------------------------
    150          
    151          ///////////////////////////////////////////////////////////////
    152          //
    153          // Routines for the librarian
    154          //
    155          ///////////////////////////////////////////////////////////////
    156          
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          int AIWaterIngressSensor::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   3870DDE5           LDRB     R7,[SP, #+56]
   \   0000000C   3C809DE5           LDR      R8,[SP, #+60]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0310A0E1           MOV      R1,R3
    159              int Status    = E_NO_ERR,
    160                  ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
    161              switch (ValueId) {
   \   00000028   B420A0E3           MOV      R2,#+180
   \   0000002C   402E82E3           ORR      R2,R2,#0x400
   \   00000030   020055E1           CMP      R5,R2
    162              case SVT_AI_GAIN:
    163                  Status = E_ILLEGAL;
   \   00000034   0C50A003           MOVEQ    R5,#+12
   \   00000038   1600000A           BEQ      ??PutValue_2
    164                  break;
    165              default:
    166                  Status = AnalogInput::PutValue( ValueId, Index, NewValue, Local, &ValUnitId );
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA_3
   \   00000044   0D10A0E1           MOV      R1,SP
   \   00000048   02002DE9           PUSH     {R1}
   \   0000004C   80002DE9           PUSH     {R7}
   \   00000050   0030A0E1           MOV      R3,R0
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     ??PutValue_1,??PutValue??rA
   \   00000064   0050A0E1           MOV      R5,R0
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   0C008DE2           ADD      R0,SP,#+12
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
    167                  break;
    168              }
    169              if ( Status == E_NO_ERR ) {
   \   00000078   000055E3           CMP      R5,#+0
   \   0000007C   08D08DE2           ADD      SP,SP,#+8
   \   00000080   0400001A           BNE      ??PutValue_2
    170                  SetModifiedFlag();
   \   00000084   A41094E5           LDR      R1,[R4, #+164]
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   541091E5           LDR      R1,[R1, #+84]
   \   00000090   0FE0A0E1           MOV      LR,PC
   \   00000094   11FF2FE1           BX       R1
    171              }
    172              if ( UnitId ) {
   \                     ??PutValue_2:
   \   00000098   000058E3           CMP      R8,#+0
    173                  *UnitId = ValUnitId;
   \   0000009C   00009D15           LDRNE    R0,[SP, #+0]
   \   000000A0   00008815           STRNE    R0,[R8, #+0]
    174              }
    175              return Status;
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   20D08DE2           ADD      SP,SP,#+32
   \   000000AC                      REQUIRE ?Subroutine12
   \   000000AC                      ;; // Fall through to label ?Subroutine12
    176          }
    177          

   \                                 In segment CODE, align 4, keep-with-next
    178          int  AIWaterIngressSensor::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   14009DE5           LDR      R0,[SP, #+20]
   \   0000000C   0340A0E1           MOV      R4,R3
   \   00000010   18309DE5           LDR      R3,[SP, #+24]
    179              int Status = GETVAL_NO_ERR;
   \   00000014   0050A0E3           MOV      R5,#+0
    180              switch (ValueId) {
   \   00000018   00E0A0E3           MOV      LR,#+0
   \   0000001C   B56041E2           SUB      R6,R1,#+181
   \   00000020   406E46E2           SUB      R6,R6,#+1024
   \   00000024   030056E3           CMP      R6,#+3
   \   00000028   1000008A           BHI      ??GetValue_3
   \   0000002C   017F8FE2           ADR      R7,??GetValue_1
   \   00000030   0670D7E7           LDRB     R7,[R7, R6]
   \   00000034   07F18FE0           ADD      PC,PC,R7, LSL #+2
   \                     ??GetValue_1:
   \   00000038   000D0D05           DC8      +0,+13,+13,+5
    181              case SVT_AI_OFFSET   :
    182                  Unit       = NO_UNIT;
   \                     ??GetValue_4:
   \   0000003C   00E083E5           STR      LR,[R3, #+0]
    183                  DecPnt     = 0;
   \   00000040   00E080E5           STR      LR,[R0, #+0]
    184                  MyRetValue = Offset;
   \   00000044   40019CE5           LDR      R0,[R12, #+320]
   \                     ??GetValue_5:
   \   00000048   000084E5           STR      R0,[R4, #+0]
   \   0000004C   0E0000EA           B        ??GetValue_6
    185                  break;
    186              case SVT_AI_CALC_VAL :
    187                  Unit       = NO_UNIT;
   \                     ??GetValue_7:
   \   00000050   00E083E5           STR      LR,[R3, #+0]
    188                  DecPnt     = 0;
   \   00000054   00E080E5           STR      LR,[R0, #+0]
    189                  MyRetValue = Calculate();
   \   00000058   A4109CE5           LDR      R1,[R12, #+164]
   \   0000005C   0C00A0E1           MOV      R0,R12
   \   00000060   601091E5           LDR      R1,[R1, #+96]
   \   00000064   0FE0A0E1           MOV      LR,PC
   \   00000068   11FF2FE1           BX       R1
   \   0000006C   F5FFFFEA           B        ??GetValue_5
    190                  break;
    191              default:
    192                  Status = AnalogInput::GetValue( ValueId, Index, MyRetValue, DecPnt, Unit );
   \                     ??GetValue_3:
   \   00000070   08002DE9           PUSH     {R3}
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   0430A0E1           MOV      R3,R4
   \   0000007C   0C00A0E1           MOV      R0,R12
   \   00000080   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   00000084   0050A0E1           MOV      R5,R0
   \   00000088   08D08DE2           ADD      SP,SP,#+8
    193                  break;
    194              }
    195              return (Status);
   \                     ??GetValue_6:
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
    196          }
    197          

   \                                 In segment CODE, align 4, keep-with-next
    198          int AIWaterIngressSensor::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0340A0E1           MOV      R4,R3
    199              int Status = GETVAL_NO_ERR;
   \   0000000C   0050A0E3           MOV      R5,#+0
    200              switch (ValueId) {
   \   00000010   4C0E51E3           CMP      R1,#+1216
   \   00000014   0D00001A           BNE      ??GetStringValue_2
    201              case SVT_AI_UNIT:
    202                  MyString = GetUnitName( NO_UNIT );
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000024   ........           LDR      R0,??DataTable2  ;; ??npos
   \   00000028   0520A0E1           MOV      R2,R5
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0D10A0E1           MOV      R1,SP
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??assign,??assign??rA
   \   0000003C   0520A0E1           MOV      R2,R5
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000004C   010000EA           B        ??GetStringValue_3
    203                  break;
    204              default:
    205                  Status = AnalogInput::GetStringValue( ValueId, Index, MyString );
   \                     ??GetStringValue_2:
   \   00000050   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000054   0050A0E1           MOV      R5,R0
    206                  break;
    207              }
    208              return (Status);
   \                     ??GetStringValue_3:
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   1CD08DE2           ADD      SP,SP,#+28
   \   00000060   ........           B        ?Subroutine11
    209          }
    210          

   \                                 In segment CODE, align 4, keep-with-next
    211          int AIWaterIngressSensor::PutFloatValue(int ValueId, float NewValue) {
    212              return (E_NO_ERR);
   \                     ??PutFloatValue:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    213          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "None">`:
   \   00000000   4E6F6E6500         DC8 "None"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Water Ingress sensor">`:
   \   00000000   576174657220       DC8 "Water Ingress sensor"
   \              496E67726573
   \              732073656E73
   \              6F7200      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   2C20666F7220       DC8 ", for "
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIWaterIngressSensor &AIWaterIngressSensor::new AIWaterIngressSensor(int, bool)
   \                     `??new AIWaterIngressSensor`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   5A0FA0E3           MOV      R0,#+360
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AIWaterIngressSensor_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AIWaterIngressSensor
   \                     `??new AIWaterIngressSensor_1`:
   \   00000028   ........           B        ?Subroutine11

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??npos
    214          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIWaterIngressSensor::AIWaterIngressSensor(int, bool)
                                       16
     AIWaterIngressSensor::Calculate()
                                       12
     AIWaterIngressSensor::GetStringValue(int, int, AnsiString &)
                                       40
     AIWaterIngressSensor::GetValue(int, int, float &, int &, int &)
                                       28
     AIWaterIngressSensor::LoadConfigString(TSNConfigString &)
                                      260
     AIWaterIngressSensor::MakeConfigString(int)
                                     1340
     AIWaterIngressSensor::PutFloatValue(int, float)
                                        0
     AIWaterIngressSensor::PutValue(int, int, AnsiString, bool, int *)
                                       64
     AIWaterIngressSensor::new AIWaterIngressSensor(int, bool)
                                       12
     AIWaterIngressSensor::~AIWaterIngressSensor()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                       12
     __sti__routine()                   0
     operator+(string const &, string const &)
                                       48


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     AIWaterIngressSensor::AIWaterIngressSensor(int, bool)
                                     172
     AIWaterIngressSensor::~AIWaterIngressSensor()
                                      44
     ?Subroutine11                     8
     AIWaterIngressSensor::MakeConfigString(int)
                                    1864
     ?Subroutine12                     8
     AIWaterIngressSensor::Calculate()
                                      44
     AIWaterIngressSensor::LoadConfigString(TSNConfigString &)
                                     920
     AIWaterIngressSensor::PutValue(int, int, AnsiString, bool, int *)
                                     172
     AIWaterIngressSensor::GetValue(int, int, float &, int &, int &)
                                     152
     AIWaterIngressSensor::GetStringValue(int, int, AnsiString &)
                                     100
     AIWaterIngressSensor::PutFloatValue(int, float)
                                       8
     ?<Constant "None">                8
     ?<Constant "Water Ingress sensor">
                                      32
     ?<Constant ":\n">                 3
     AIWaterIngressSensor::new AIWaterIngressSensor(int, bool)
                                      44
     __sti__routine()                  4
     ??DataTable2                      4
      Others                         552

 
 4 180 bytes in segment CODE
   175 bytes in segment DATA_C
     4 bytes in segment DIFUNCT
 
 3 548 bytes of CODE  memory (+ 636 bytes shared)
   175 bytes of CONST memory

Errors: none
Warnings: none
