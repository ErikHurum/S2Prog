##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:19:02 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\TDUTempGraphWin.cpp                #
#    Command line    =  D:\S2Prog\TXU\src\TDUTempGraphWin.cpp --fpu None -D  #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -s9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\TDUTempGraphWin.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\TDUTempGraphWin.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\TDUTempGraphWin.cpp
      1          #include "TDUIncludes.h"
      2          

   \                                 In segment CODE, align 4, keep-with-next
      3          TDUTempGraphWin::~TDUTempGraphWin(void)
      4          {
      5          }
   \                     `?~TDUTempGraphWin`:
   \   00000000   1EFF2FE1           BX       LR               ;; return
      6          

   \                                 In segment DATA_C, align 4, align-sorted
      7          const GUI_POINT XLine[] = {
   \                     XLine:
   \   00000000   000000000000       DC16 0, 0, 0, 160, 0, 165, 0, 160, 10, 160, 10, 165, 10, 160, 20, 160
   \              A0000000A500
   \              0000A0000A00
   \              A0000A00A500
   \              0A00A0001400
   \              A000        
   \   00000020   1400A5001400       DC16 20, 165, 20, 160, 30, 160, 30, 165, 30, 160, 40, 160, 40, 165, 40
   \              A0001E00A000
   \              1E00A5001E00
   \              A0002800A000
   \              2800A5002800
   \   0000003E   A0003200A000       DC16 160, 50, 160, 50, 165, 50, 160, 60, 160, 60, 165, 60, 160, 70, 160
   \              3200A5003200
   \              A0003C00A000
   \              3C00A5003C00
   \              A0004600A000
   \   0000005C   4600A5004600       DC16 70, 165, 70, 160, 80, 160, 80, 165, 80, 160, 90, 160, 90, 165, 90
   \              A0005000A000
   \              5000A5005000
   \              A0005A00A000
   \              5A00A5005A00
   \   0000007A   A0006400A000       DC16 160, 100, 160, 100, 165, 100, 160, 110, 160, 110, 165, 110, 160
   \              6400A5006400
   \              A0006E00A000
   \              6E00A5006E00
   \              A000        
   \   00000094   7800A0007800       DC16 120, 160, 120, 165, 120, 160, 130, 160, 130, 165, 130, 160, 140
   \              A5007800A000
   \              8200A0008200
   \              A5008200A000
   \              8C00        
   \   000000AE   A0008C00A500       DC16 160, 140, 165, 140, 160, 150, 160, 150, 165, 150, 160, 160, 160
   \              8C00A0009600
   \              A0009600A500
   \              9600A000A000
   \              A000        
   \   000000C8   A000A500A000       DC16 160, 165, 160, 160, 170, 160, 170, 165, 170, 160, 180, 160, 180
   \              A000AA00A000
   \              AA00A500AA00
   \              A000B400A000
   \              B400        
   \   000000E2   A500B400A000       DC16 165, 180, 160, 190, 160, 190, 165, 190, 160, 200, 160, 200, 165
   \              BE00A000BE00
   \              A500BE00A000
   \              C800A000C800
   \              A500        
   \   000000FC   C800A000C800       DC16 200, 160, 200, 160
   \              A000        
   \   00000104   000000000000       DC16 0, 0, 0, 0, 5, 0, 0, 0, 0, 10, 5, 10, 0, 10, 0, 20, 5, 20, 0, 20
   \              000005000000
   \              000000000000
   \              0A0005000A00
   \              00000A000000
   \              140005001400
   \              00001400    
   \   0000012C   00001E000500       DC16 0, 30, 5, 30, 0, 30, 0, 40, 5, 40, 0, 40, 0, 50, 5, 50, 0, 50, 0
   \              1E0000001E00
   \              000028000500
   \              280000002800
   \              000032000500
   \              320000003200
   \              0000        
   \   00000152   3C0005003C00       DC16 60, 5, 60, 0, 60, 0, 70, 5, 70, 0, 70, 0, 80, 5, 80, 0, 80, 0, 90
   \              00003C000000
   \              460005004600
   \              000046000000
   \              500005005000
   \              000050000000
   \              5A00        
   \   00000178   05005A000000       DC16 5, 90, 0, 90, 0, 100, 5, 100, 0, 100, 0, 110, 5, 110, 0, 110, 0
   \              5A0000006400
   \              050064000000
   \              640000006E00
   \              05006E000000
   \              6E000000    
   \   0000019A   780005007800       DC16 120, 5, 120, 0, 120, 0, 130, 5, 130, 0, 130, 0, 140, 5, 140, 0
   \              000078000000
   \              820005008200
   \              000082000000
   \              8C0005008C00
   \              0000        
   \   000001BA   8C0000009600       DC16 140, 0, 150, 5, 150, 0, 150, 0, 160
   \              050096000000
   \              96000000A000
   \   000001CC   000014000A00       DC16 0, 20, 10, 25, 20, 30, 30, 35, 40, 20, 50, 22, 60, 31, 70, 26, 80
   \              190014001E00
   \              1E0023002800
   \              140032001600
   \              3C001F004600
   \              1A005000    
   \   000001EE   12005A000F00       DC16 18, 90, 15
      8          {  0,  0},
      9          {    0, 160}, {    0, 165}, {    0, 160},
     10          {   10, 160}, {   10, 165}, {   10, 160},
     11          {   20, 160}, {   20, 165}, {   20, 160},
     12          {   30, 160}, {   30, 165}, {   30, 160},
     13          {   40, 160}, {   40, 165}, {   40, 160},
     14          {   50, 160}, {   50, 165}, {   50, 160},
     15          {   60, 160}, {   60, 165}, {   60, 160},
     16          {   70, 160}, {   70, 165}, {   70, 160},
     17          {   80, 160}, {   80, 165}, {   80, 160},
     18          {   90, 160}, {   90, 165}, {   90, 160},
     19          {  100, 160}, {  100, 165}, {  100, 160},
     20          {  110, 160}, {  110, 165}, {  110, 160},
     21          {  120, 160}, {  120, 165}, {  120, 160},
     22          {  130, 160}, {  130, 165}, {  130, 160},
     23          {  140, 160}, {  140, 165}, {  140, 160},
     24          {  150, 160}, {  150, 165}, {  150, 160},
     25          {  160, 160}, {  160, 165}, {  160, 160},
     26          {  170, 160}, {  170, 165}, {  170, 160},
     27          {  180, 160}, {  180, 165}, {  180, 160},
     28          {  190, 160}, {  190, 165}, {  190, 160},
     29          {  200, 160}, {  200, 165}, {  200, 160},
     30          {  200, 160},			
     31          };
     32          const GUI_POINT YLine[] = {
     33          {  0,  0},
     34          {  0,   0}, {  5,   0}, {  0,   0},
     35          {  0,  10}, {  5,  10}, {  0,  10},
     36          {  0,  20}, {  5,  20}, {  0,  20},
     37          {  0,  30}, {  5,  30}, {  0,  30},
     38          {  0,  40}, {  5,  40}, {  0,  40},
     39          {  0,  50}, {  5,  50}, {  0,  50},
     40          {  0,  60}, {  5,  60}, {  0,  60},
     41          {  0,  70}, {  5,  70}, {  0,  70},
     42          {  0,  80}, {  5,  80}, {  0,  80},
     43          {  0,  90}, {  5,  90}, {  0,  90},
     44          {  0, 100}, {  5, 100}, {  0, 100},
     45          {  0, 110}, {  5, 110}, {  0, 110},
     46          {  0, 120}, {  5, 120}, {  0, 120},
     47          {  0, 130}, {  5, 130}, {  0, 130},
     48          {  0, 140}, {  5, 140}, {  0, 140},
     49          {  0, 150}, {  5, 150}, {  0, 150},
     50          {  0, 160}
     51          };
     52          const GUI_POINT aPoints[] = {
     53          {  0, 20},
     54          { 10, 25},
     55          { 20, 30},
     56          { 30, 35},
     57          { 40, 20},
     58          { 50, 22},
     59          { 60, 31},
     60          { 70, 26},
     61          { 80, 18},
     62          { 90, 15},
     63          };
     64          
     65          //	static I16 aY[100];
     66          

   \                                 In segment CODE, align 4, keep-with-next
     67          TDUTempGraphWin::TDUTempGraphWin(void)
     68          {
     69          //	hFramWin = FRAMEWIN_CreateAsChild( 0, 0, 286, 198, TempWindow->WinHandl, "Graph", cbEventHandler,WM_CF_SHOW);
     70          //	hFramWin = FRAMEWIN_Create( "Graph", cbEventHandler, 0, 0, 0, 286, 198);
     71          }
   \                     ??TDUTempGraphWin:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     72          

   \                                 In segment CODE, align 4, keep-with-next
     73          void TDUTempGraphWin::ExecTempGraph(void)
     74          {
   \                     ??ExecTempGraph:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     75          	hFramWin = FRAMEWIN_CreateAsChild( 0, 0, 286, 198, TempWindow->WinHandl, "Temperature graph", cbEventHandler,WM_CF_SHOW);
   \   00000008   0200A0E3           MOV      R0,#+2
   \   0000000C   01002DE9           PUSH     {R0}
   \   00000010   4C009FE5           LDR      R0,??ExecTempGraph_1  ;; ??cbEventHandler
   \   00000014   C630A0E3           MOV      R3,#+198
   \   00000018   01002DE9           PUSH     {R0}
   \   0000001C   44009FE5           LDR      R0,??ExecTempGraph_1+0x4  ;; `?<Constant "Temperature graph">`
   \   00000020   582083E2           ADD      R2,R3,#+88
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   3C009FE5           LDR      R0,??ExecTempGraph_1+0x8  ;; TempWindow
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   FA02D0E1           LDRSH    R0,[R0, #+42]
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   ........           _BLF     FRAMEWIN_CreateAsChild,??FRAMEWIN_CreateAsChild??rA
   \   00000044   B200C4E1           STRH     R0,[R4, #+2]
     76          	int i;
     77          //	for (i = 0; i < GUI_COUNTOF(aY); i++) {
     78          	for (i = 0; i < 200; i++) {
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   10D08DE2           ADD      SP,SP,#+16
   \                     ??ExecTempGraph_2:
   \   00000050   010080E2           ADD      R0,R0,#+1
   \   00000054   C80050E3           CMP      R0,#+200
   \   00000058   FCFFFFBA           BLT      ??ExecTempGraph_2
     79          		//aY[i] = rand() % 50;
     80          	}
     81          }
   \   0000005C   1040BDE8           POP      {R4,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return
   \                     ??ExecTempGraph_1:
   \   00000064   ........           DC32     ??cbEventHandler
   \   00000068   ........           DC32     `?<Constant "Temperature graph">`
   \   0000006C   ........           DC32     TempWindow
     82          

   \                                 In segment CODE, align 4, keep-with-next
     83          void TDUTempGraphWin::cbEventHandler(WM_MESSAGE * pMsg)
     84          {
   \                     ??cbEventHandler:
   \   00000000   10402DE9           PUSH     {R4,LR}
     85          	//WM_HWIN hWin = pMsg->hWin;
     86          	switch (pMsg->MsgId)
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   011051E2           SUBS     R1,R1,#+1
   \   0000000C   1D00000A           BEQ      ??cbEventHandler_1
   \   00000010   0E1051E2           SUBS     R1,R1,#+14
   \   00000014   0200000A           BEQ      ??cbEventHandler_2
   \   00000018   171051E2           SUBS     R1,R1,#+23
   \   0000001C   1900000A           BEQ      ??cbEventHandler_1
   \   00000020   170000EA           B        ??cbEventHandler_3
     87          	{
     88          		case WM_NOTIFY_PARENT:
     89          		{
     90          			int NCode;//, Id;
     91          			//Id    = WM_GetId(pMsg->hWinSrc);
     92          			NCode = pMsg->Data.v;
     93          			switch (NCode)
     94          			{
     95          				case WM_NOTIFICATION_RELEASED:    /* React only if released */
     96          //				case WM_NOTIFICATION_CLICKED:
     97          				{
     98          //					UserTouch = true;
     99          				}
    100          				break;
    101          			}
    102          		}
    103          		break;
    104          		case WM_PAINT:
    105          			GUI_SetBkColor(TDU_C_BACK_DEFAULT);
   \                     ??cbEventHandler_2:
   \   00000024   64009FE5           LDR      R0,??cbEventHandler_4  ;; 0xd3d3d3
    106          			GUI_Clear();
    107          			GUI_SetColor(TDU_C_TEXT_DEFAULT);
    108          
    109          			GUI_DrawPolyLine(XLine, GUI_COUNTOF(XLine), 10,10);
   \   00000028   64409FE5           LDR      R4,??cbEventHandler_4+0x4  ;; XLine
   \   0000002C   ........           _BLF     GUI_SetBkColor,??GUI_SetBkColor??rA
   \   00000030   ........           _BLF     GUI_Clear,??GUI_Clear??rA
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   ........           _BLF     GUI_SetColor,??GUI_SetColor??rA
   \   0000003C   0A30A0E3           MOV      R3,#+10
   \   00000040   0A20A0E3           MOV      R2,#+10
   \   00000044   4110A0E3           MOV      R1,#+65
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           _BLF     GUI_DrawPolyLine,??GUI_DrawPolyLine??rA
    110          			GUI_DrawPolyLine(YLine, GUI_COUNTOF(YLine), 10,10);
   \   00000050   0A30A0E3           MOV      R3,#+10
   \   00000054   0320A0E1           MOV      R2,R3
   \   00000058   3210A0E3           MOV      R1,#+50
   \   0000005C   410F84E2           ADD      R0,R4,#+260
   \   00000060   ........           _BLF     GUI_DrawPolyLine,??GUI_DrawPolyLine??rA
    111          
    112          		//	GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 10);
    113          			GUI_SetLineStyle(GUI_LS_DOT);
   \   00000064   0200A0E3           MOV      R0,#+2
   \   00000068   ........           _BLF     GUI_SetLineStyle,??GUI_SetLineStyle??rA
    114          			GUI_DrawPolyLine(aPoints, GUI_COUNTOF(aPoints), 10, 10);
   \   0000006C   0A30A0E3           MOV      R3,#+10
   \   00000070   0320A0E1           MOV      R2,R3
   \   00000074   0210A0E1           MOV      R1,R2
   \   00000078   730F84E2           ADD      R0,R4,#+460
   \   0000007C   ........           _BLF     GUI_DrawPolyLine,??GUI_DrawPolyLine??rA
   \   00000080   000000EA           B        ??cbEventHandler_1
    115          		break;
    116          		case WM_CREATE:
    117          		break;
    118          		default:
    119          			WM_DefaultProc(pMsg);
   \                     ??cbEventHandler_3:
   \   00000084   ........           _BLF     WM_DefaultProc,??WM_DefaultProc??rA
    120            }
    121          }
   \                     ??cbEventHandler_1:
   \   00000088   1040BDE8           POP      {R4,LR}
   \   0000008C   1EFF2FE1           BX       LR               ;; return
   \                     ??cbEventHandler_4:
   \   00000090   D3D3D300           DC32     0xd3d3d3
   \   00000094   ........           DC32     XLine

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Temperature graph">`:
   \   00000000   54656D706572       DC8 "Temperature graph"
   \              617475726520
   \              677261706800
   \   00000012   0000               DC8 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs TDUTempGraphWin &TDUTempGraphWin::new TDUTempGraphWin()
   \                     `??new TDUTempGraphWin`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0400A0E3           MOV      R0,#+4
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   0040BDE8           POP      {LR}
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TDUTempGraphWin::delete ~TDUTempGraphWin(TDUTempGraphWin *)
   \                     `??delete ~TDUTempGraphWin`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0000000A           BEQ      `??delete ~TDUTempGraphWin_1`
   \   0000000C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `??delete ~TDUTempGraphWin_1`:
   \   00000010   0040BDE8           POP      {LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    122          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     TDUTempGraphWin::ExecTempGraph()
                                       24
     TDUTempGraphWin::TDUTempGraphWin()
                                        0
     TDUTempGraphWin::cbEventHandler(WM_MESSAGE *)
                                        8
     TDUTempGraphWin::delete ~TDUTempGraphWin(TDUTempGraphWin *)
                                        4
     TDUTempGraphWin::new TDUTempGraphWin()
                                        4
     TDUTempGraphWin::~TDUTempGraphWin()
                                        0
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     TDUTempGraphWin::~TDUTempGraphWin()
                                       4
     XLine                           500
     TDUTempGraphWin::TDUTempGraphWin()
                                       4
     TDUTempGraphWin::ExecTempGraph()
                                     112
     TDUTempGraphWin::cbEventHandler(WM_MESSAGE *)
                                     152
     ?<Constant "Temperature graph">
                                      20
     TDUTempGraphWin::new TDUTempGraphWin()
                                      20
     TDUTempGraphWin::delete ~TDUTempGraphWin(TDUTempGraphWin *)
                                      24
     __sti__routine()                  4
      Others                         140

 
 456 bytes in segment CODE
 520 bytes in segment DATA_C
   4 bytes in segment DIFUNCT
 
 324 bytes of CODE  memory (+ 136 bytes shared)
 520 bytes of CONST memory

Errors: none
Warnings: none
