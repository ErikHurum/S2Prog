##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:12:21 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AlarmHighVapRet.Cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\AlarmHighVapRet.Cpp --fpu None  #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AlarmHighVapRet.lst         #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AlarmHighVapRet.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AlarmHighVapRet.Cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighVapRet::~AlarmHighVapRet()
   \                     `?~AlarmHighVapRet`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AlarmHighVapRet_1`
   \   00000014   0100000A           BEQ      `?~AlarmHighVapRet_2`
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \                     `?~AlarmHighVapRet_2`:
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AlarmHighVapRet_1`
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmHighVapRet_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment DATA_Z, align 4, align-sorted
      9          unsigned AlarmHighVapRet::NumberOfAlarmSettings = 0;
   \                     ??NumberOfAlarmSettings:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
     10          AlarmHighVapRet::AlarmHighVapRet(PRogramObjectBase *PROPtr)  {
   \                     ??AlarmHighVapRet:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??AlarmHighPressure,??AlarmHighPressure??rA
   \   00000010   ........           LDR      R0,??DataTable1  ;; ??__vtbl
     11              Init(PROPtr);
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       ??Init
     12          }
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          AlarmHighVapRet::AlarmHighVapRet(PRogramObjectBase *PROPtr, float Lim, bool Visible) {
   \                     ??AlarmHighVapRet_1:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   ........           _BLF     ??AlarmHighPressure,??AlarmHighPressure??rA
   \   00000018   ........           LDR      R0,??DataTable1  ;; ??__vtbl
     15              Init(PROPtr);
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   A40084E5           STR      R0,[R4, #+164]
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ??Init
     16              IsVisible         = Visible;
   \   0000002C   B070C4E5           STRB     R7,[R4, #+176]
     17              Limit             = Lim;
   \   00000030   E46084E5           STR      R6,[R4, #+228]
     18          }
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   F040BDE8           POP      {R4-R7,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     19          

   \                                 In segment CODE, align 4, keep-with-next
     20          void AlarmHighVapRet::Init(PRogramObjectBase *PROPtr){
     21              NumberOfAlarmSettings++;
   \                     ??Init:
   \   00000000   6C209FE5           LDR      R2,??Init_1      ;; ??NumberOfAlarmSettings
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   013083E2           ADD      R3,R3,#+1
   \   0000000C   003082E5           STR      R3,[R2, #+0]
     22              IDNumber          = (ID_AL_HIGH_VAPOUR_RETURN << 16) + NumberOfAlarmSettings;
   \   00000010   B026A0E3           MOV      R2,#+184549376
   \   00000014   D62882E3           ORR      R2,R2,#0xD60000
   \   00000018   032082E0           ADD      R2,R2,R3
   \   0000001C   9C2080E5           STR      R2,[R0, #+156]
     23              Type              = ID_AL_HIGH_VAPOUR_RETURN;
   \   00000020   D620A0E3           MOV      R2,#+214
   \   00000024   B02E82E3           ORR      R2,R2,#0xB00
   \   00000028   A02080E5           STR      R2,[R0, #+160]
     24              Locked            = true;
   \   0000002C   0120A0E3           MOV      R2,#+1
   \   00000030   E820C0E5           STRB     R2,[R0, #+232]
     25          	IsExtraAlarm      = true;
   \   00000034   CD20C0E5           STRB     R2,[R0, #+205]
     26              PROPointer        = PROPtr;
   \   00000038   C41080E5           STR      R1,[R0, #+196]
     27          	PROTPressPtr      = (PROTankPressure*)PROPtr;
   \   0000003C   EC1080E5           STR      R1,[R0, #+236]
     28              Deadband          = 10.0 / MH2O_TO_MBAR;
   \   00000040   30109FE5           LDR      R1,??Init_1+0x4  ;; 0x3dd0d67f
   \   00000044   BC1080E5           STR      R1,[R0, #+188]
     29          	Limit             = PROTPressPtr->HighVapourReturnLimit;
   \   00000048   EC1090E5           LDR      R1,[R0, #+236]
   \   0000004C   C41191E5           LDR      R1,[R1, #+452]
   \   00000050   E41080E5           STR      R1,[R0, #+228]
     30              MessageKey        = L_WORD1055;  // LoVapRet
   \   00000054   1F10A0E3           MOV      R1,#+31
   \   00000058   401E81E3           ORR      R1,R1,#0x400
   \   0000005C   B81080E5           STR      R1,[R0, #+184]
     31              TPCMessageKey     = L_WORD1057;  // LVPRet
   \   00000060   021081E2           ADD      R1,R1,#+2
   \   00000064   B41080E5           STR      R1,[R0, #+180]
     32          	PROTankPressure::hasVapRetAlarms = true;
   \   00000068   0C009FE5           LDR      R0,??Init_1+0x8  ;; ??hasVapRetAlarms
   \   0000006C   0020C0E5           STRB     R2,[R0, #+0]
     33          }
   \   00000070   1EFF2FE1           BX       LR               ;; return
   \                     ??Init_1:
   \   00000074   ........           DC32     ??NumberOfAlarmSettings
   \   00000078   7FD6D03D           DC32     0x3dd0d67f
   \   0000007C   ........           DC32     ??hasVapRetAlarms

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighVapRet &AlarmHighVapRet::new AlarmHighVapRet(PRogramObjectBase *)
   \                     `??new AlarmHighVapRet`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   F000A0E3           MOV      R0,#+240
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      `??new AlarmHighVapRet_2`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??AlarmHighVapRet
   \                     `??new AlarmHighVapRet_2`:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmHighVapRet &AlarmHighVapRet::new AlarmHighVapRet(PRogramObjectBase *, float, bool)
   \                     `??new AlarmHighVapRet_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   F000A0E3           MOV      R0,#+240
   \   00000014   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0300000A           BEQ      `??new AlarmHighVapRet_3`
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           BL       ??AlarmHighVapRet_1
   \                     `??new AlarmHighVapRet_3`:
   \   00000030   7040BDE8           POP      {R4-R6,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??__vtbl
     34          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmHighVapRet::AlarmHighVapRet(PRogramObjectBase *)
                                       12
     AlarmHighVapRet::AlarmHighVapRet(PRogramObjectBase *, float, bool)
                                       20
     AlarmHighVapRet::Init(PRogramObjectBase *)
                                        0
     AlarmHighVapRet::new AlarmHighVapRet(PRogramObjectBase *)
                                        8
     AlarmHighVapRet::new AlarmHighVapRet(PRogramObjectBase *, float, bool)
                                       16
     AlarmHighVapRet::~AlarmHighVapRet()
                                       12
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AlarmHighVapRet::~AlarmHighVapRet()
                                      56
     AlarmHighVapRet::NumberOfAlarmSettings
                                       4
     AlarmHighVapRet::AlarmHighVapRet(PRogramObjectBase *)
                                      48
     AlarmHighVapRet::AlarmHighVapRet(PRogramObjectBase *, float, bool)
                                      64
     AlarmHighVapRet::Init(PRogramObjectBase *)
                                     128
     AlarmHighVapRet::new AlarmHighVapRet(PRogramObjectBase *)
                                      40
     AlarmHighVapRet::new AlarmHighVapRet(PRogramObjectBase *, float, bool)
                                      56
     __sti__routine()                  4
     ??DataTable1                      4
      Others                         204

 
 472 bytes in segment CODE
 116 bytes in segment DATA_C
   4 bytes in segment DATA_Z
   4 bytes in segment DIFUNCT
  12 bytes in segment INITTAB
 
 348 bytes of CODE  memory (+ 140 bytes shared)
 116 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
