##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:11:24 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AIPressSensor_mA.cpp            #
#    Command line    =  D:\S2Prog\Shared\Src\AIPressSensor_mA.cpp --fpu      #
#                       None -D OS_LIBMODE_SP -D CPU_S3C2410 -D              #
#                       OS_RAMVECT=0 -D OS_UART=-1 -D S2TXU -D USE_LZO=1 -D  #
#                       __ARM_LIBRARY__ -D WATCHDOG=1 -D NETWORK=1 -lCN      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\AIPressSensor_mA.lst        #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AIPressSensor_mA.r79         #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AIPressSensor_mA.cpp
      1          #ifdef ANWIN
      2          	#include "LiteCall.hpp"
      3          #endif
      4          #pragma hdrstop
      5          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_4
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_5:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_6
   \                     ??_Insert_4:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_7
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_6
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_6
   \                     ??_Insert_7:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_6
   \   00000060   F0FFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_6:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_9
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_10
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_8
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_11
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_11:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_6
   \                     ??_Insert_10:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_8
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_12
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_12:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Pairib _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::insert(AIPressSensor_mA *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Erase(_Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_1
   \                     ??_Erase_2:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_1:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_2
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::iterator _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Insert(bool, _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Nodeptr, AIPressSensor_mA *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_13
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_13:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<AIPressSensor_mA *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Tidy()
   \                     ??_Tidy:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   000084E5           STR      R0,[R4, #+0]
   \   00000014   040084E5           STR      R0,[R4, #+4]
   \   00000018   080084E5           STR      R0,[R4, #+8]
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_15:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_15
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs float * _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_1
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_1
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_2
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_1
   \                     ??_Make_room_2:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_1:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<float, allocator<float>>::_Push_back0(float)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_1
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_2:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_2
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_3
   \                     ??_Push_back0_1:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_3
   \                     ??_Push_back0_3:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy_1,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_1  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_1:
   \   0000003C   ........           DC32     ??npos
      6          #ifdef ANWIN
      7          	#include "MainUnit.h"
      8          #endif
      9          
     10          #ifdef BORLAND
     11          #pragma package(smart_init)
     12          #endif
     13          

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
     14          ANCriticalSection AIPressSensor_mA::LogSema;
   \   00000004   ........           LDR      R4,??DataTable2  ;; ??ObjectSet
   \   00000008   38509FE5           LDR      R5,??__sti__routine_1  ;; ?_0
   \   0000000C   180084E2           ADD      R0,R4,#+24
   \   00000010   ........           _BLF     ??ANCriticalSection,??ANCriticalSection??rA
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
     15          
     16          set<AIPressSensor_mA*>AIPressSensor_mA::ObjectSet;
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   1400C4E5           STRB     R0,[R4, #+20]
   \   00000038   0C0085E2           ADD      R0,R5,#+12
   \   0000003C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000040   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000048   ........           DC32     ?_0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??LogSema, `?~ANCriticalSection`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??ObjectSet, `?~set`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??ObjectSet:
   \   00000000                      DS8 24
   \                     ??LogSema:
   \   00000018                      DS8 16
     17          //---------------------------------------------------------------------------
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          AIPressSensor_mA::AIPressSensor_mA(int SnsType, bool IsAtmRef) : AIPressSensor(IsAtmRef) {
   \                     ??AIPressSensor_mA:
   \   00000000   3F402DE9           PUSH     {R0-R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0210A0E1           MOV      R1,R2
   \   00000010   ........           _BLF     ??AIPressSensor,??AIPressSensor??rA
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   720F84E2           ADD      R0,R4,#+456
   \   00000020   ........           _BLF     ??ANCriticalSection,??ANCriticalSection??rA
   \   00000024   790F84E2           ADD      R0,R4,#+484
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   081080E5           STR      R1,[R0, #+8]
   \   00000038   7C0F84E2           ADD      R0,R4,#+496
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   \   00000040   041080E5           STR      R1,[R0, #+4]
   \   00000044   081080E5           STR      R1,[R0, #+8]
   \   00000048   7F0F84E2           ADD      R0,R4,#+508
   \   0000004C   001080E5           STR      R1,[R0, #+0]
   \   00000050   041080E5           STR      R1,[R0, #+4]
   \   00000054   081080E5           STR      R1,[R0, #+8]
     20              //:m_iSizeAlloc(10)
     21              Error = false;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   D801C4E5           STRB     R0,[R4, #+472]
     22              Type = SnsType;
   \   00000060   A05084E5           STR      R5,[R4, #+160]
     23              TZS = 0.0;
   \   00000064   DC0184E5           STR      R0,[R4, #+476]
     24              TSS = 0.0;
   \   00000068   E00184E5           STR      R0,[R4, #+480]
     25              PrevTemp = -TEMP_ZERO;
   \   0000006C   ........           LDR      R0,??Subroutine15_0  ;; 0xffffffffc3889333
   \   00000070   C40184E5           STR      R0,[R4, #+452]
     26              TempPtr   = NULL;
   \   00000074   C01184E5           STR      R1,[R4, #+448]
     27              // FRO = new float(m_iSizeAlloc);
     28              // PCnt = new float(m_iSizeAlloc); // Sensor cal values
     29              AlarmmAmpOpenLoop     *OpenLoopPtr      = new AlarmmAmpOpenLoop(this);
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   ........           _BLF     `??new AlarmmAmpOpenLoop`,`??new AlarmmAmpOpenLoop??rA`
     30              AlarmSet.insert(OpenLoopPtr);
   \   00000080   0020A0E1           MOV      R2,R0
   \   00000084   C01084E2           ADD      R1,R4,#+192
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           _BLF     ??insert_1,??insert??rA
     31              // Add the short circuit alarm separately
     32              ObjectSet.insert(this);
   \   00000090   ........           LDR      R1,??DataTable2  ;; ??ObjectSet
   \   00000094   0420A0E1           MOV      R2,R4
   \   00000098   08008DE2           ADD      R0,SP,#+8
   \   0000009C   ........           _BLF     ??insert,??insert??rA_1
     33          
     34          }
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   10D08DE2           ADD      SP,SP,#+16
   \   000000A8                      REQUIRE ?Subroutine15
   \   000000A8                      ;; // Fall through to label ?Subroutine15

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   3040BDE8           POP      {R4,R5,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine15_0:
   \   00000008   339388C3           DC32     0xffffffffc3889333
     35          //---------------------------------------------------------------------------
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          AIPressSensor_mA::~AIPressSensor_mA(void) {
   \                     `?~AIPressSensor_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1000000A           BEQ      `?~AIPressSensor_mA_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000018   A40084E5           STR      R0,[R4, #+164]
     38          //  delete FRO;
     39          //  delete PCnt;
     40          }
   \   0000001C   7F0F84E2           ADD      R0,R4,#+508
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA_1
   \   00000024   7C0F84E2           ADD      R0,R4,#+496
   \   00000028   ........           _BLF     ??_Tidy,??_Tidy??rA_1
   \   0000002C   790F84E2           ADD      R0,R4,#+484
   \   00000030   ........           _BLF     ??_Tidy,??_Tidy??rA_1
   \   00000034   720F84E2           ADD      R0,R4,#+456
   \   00000038   ........           _BLF     `?~ANCriticalSection`,`?~ANCriticalSection??rA`
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     `?~AIPressSensor`,`?~AIPressSensor??rA`
   \   00000048   010015E3           TST      R5,#0x1
   \   0000004C   0100000A           BEQ      `?~AIPressSensor_mA_1`
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AIPressSensor_mA_1`:
   \   00000058   ........           B        ?Subroutine15
     41          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     42          U8 AIPressSensor_mA::GetFilter(void) {
     43              return (FILTER_MA_PRESS);
   \                     ??GetFilter:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
     44          }
     45          
     46          ///////////////////////////////////////////////////////////////
     47          //
     48          // Routines for the librarian for input
     49          //
     50          ///////////////////////////////////////////////////////////////
     51          
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          int AIPressSensor_mA::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   5C80DDE5           LDRB     R8,[SP, #+92]
   \   0000000C   60609DE5           LDR      R6,[SP, #+96]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0190A0E1           MOV      R9,R1
   \   00000018   0250A0E1           MOV      R5,R2
   \   0000001C   0310A0E1           MOV      R1,R3
     54              int Status = E_NO_ERR, ValUnitId = NO_UNIT;
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   00208DE5           STR      R2,[SP, #+0]
   \   00000028   04208DE5           STR      R2,[SP, #+4]
     55              switch ( ValueId ) {
   \   0000002C   547FA0E3           MOV      R7,#+336
   \   00000030   C40049E2           SUB      R0,R9,#+196
   \   00000034   400E40E2           SUB      R0,R0,#+1024
   \   00000038   070050E3           CMP      R0,#+7
   \   0000003C   7700008A           BHI      ??PutValue_4
   \   00000040   012F8FE2           ADR      R2,??PutValue_1
   \   00000044   0020D2E7           LDRB     R2,[R2, R0]
   \   00000048   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PutValue_1:
   \   0000004C   01017474           DC8      +1,+1,+116,+116
   \   00000050   74746352           DC8      +116,+116,+99,+82
     56              case SVT_AI_CAL_DATA_FRO    :
     57              case SVT_AI_CAL_DATA_G1     :
     58                  if ( Index >= 0 && Index < int(mAPcnt.size()) ) {
   \                     ??PutValue_5:
   \   00000054   000055E3           CMP      R5,#+0
   \   00000058   8300004A           BMI      ??PutValue_6
   \   0000005C   7C8FA0E3           MOV      R8,#+496
   \   00000060   040088E0           ADD      R0,R8,R4
   \   00000064   042090E5           LDR      R2,[R0, #+4]
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000042E0           SUB      R0,R2,R0
   \   00000070   200155E1           CMP      R5,R0, LSR #+2
   \   00000074   7C0000AA           BGE      ??PutValue_6
     59                      if ( Status == E_NO_ERR ) {
     60                          switch ( ValueId ) {
   \   00000078   C49049E2           SUB      R9,R9,#+196
   \   0000007C   409E49E2           SUB      R9,R9,#+1024
   \   00000080   010059E3           CMP      R9,#+1
   \   00000084   7500008A           BHI      ??PutValue_7
   \   00000088   010F8FE2           ADR      R0,??PutValue_2
   \   0000008C   0900D0E7           LDRB     R0,[R0, R9]
   \   00000090   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutValue_2:
   \   00000094   00260000           DC8      +0,+38,+0,+0
     61                          case SVT_AI_CAL_DATA_FRO:
     62                              {
     63                                  float Value = ConvertToSi(NewValue, PERCENT_UNIT, Status, 0.0, 100.0);
   \                     ??PutValue_8:
   \   00000098   08008DE2           ADD      R0,SP,#+8
   \   0000009C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000000A0   0030A0E1           MOV      R3,R0
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   03002DE9           PUSH     {R0,R1}
   \   000000B0   4014A0E3           MOV      R1,#+1073741824
   \   000000B4   591881E3           ORR      R1,R1,#0x590000
   \   000000B8   03002DE9           PUSH     {R0,R1}
   \   000000BC   0010A0E1           MOV      R1,R0
   \   000000C0   03002DE9           PUSH     {R0,R1}
   \   000000C4   18208DE2           ADD      R2,SP,#+24
   \   000000C8   0300A0E1           MOV      R0,R3
   \   000000CC   0800BDE8           POP      {R3}
   \   000000D0   1010A0E3           MOV      R1,#+16
   \   000000D4   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000000D8   0090A0E1           MOV      R9,R0
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   1C008DE2           ADD      R0,SP,#+28
   \   000000E8   ........           _BLF     ??_Tidy_1,??_Tidy??rA
     64                                  if ( Status == E_NO_ERR ) {
   \   000000EC   14009DE5           LDR      R0,[SP, #+20]
   \   000000F0   14D08DE2           ADD      SP,SP,#+20
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   5800001A           BNE      ??PutValue_7
     65                                      mAPcnt[Index] = Value / 100.0;
   \   000000FC   048098E7           LDR      R8,[R8, +R4]
   \   00000100   0900A0E1           MOV      R0,R9
   \   00000104   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   4034A0E3           MOV      R3,#+1073741824
   \   00000110   593883E3           ORR      R3,R3,#0x590000
   \   00000114   ........           _BLF     __dDiv,??__dDiv??rA
   \   00000118   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000011C   050188E7           STR      R0,[R8, +R5, LSL #+2]
     66                                      TimeModified = time(NULL);
   \                     ??PutValue_9:
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   ........           _BLF     time,??time??rA
   \   00000128   040087E7           STR      R0,[R7, +R4]
   \   0000012C   4B0000EA           B        ??PutValue_7
     67                                  }
     68                              }
     69                              break;
     70                          case SVT_AI_CAL_DATA_G1 :
     71                              {
     72                                  float Value = ConvertToSi(NewValue, CURRENT_UNIT, Status, 0.0, 20.0);
   \                     ??PutValue_10:
   \   00000130   08008DE2           ADD      R0,SP,#+8
   \   00000134   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000138   0020A0E3           MOV      R2,#+0
   \   0000013C   0030A0E3           MOV      R3,#+0
   \   00000140   0C002DE9           PUSH     {R2,R3}
   \   00000144   4034A0E3           MOV      R3,#+1073741824
   \   00000148   D03983E3           ORR      R3,R3,#0x340000
   \   0000014C   0C002DE9           PUSH     {R2,R3}
   \   00000150   0230A0E1           MOV      R3,R2
   \   00000154   0C002DE9           PUSH     {R2,R3}
   \   00000158   18208DE2           ADD      R2,SP,#+24
   \   0000015C   0800BDE8           POP      {R3}
   \   00000160   1110A0E3           MOV      R1,#+17
   \   00000164   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   00000168   0080A0E1           MOV      R8,R0
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   0110A0E3           MOV      R1,#+1
   \   00000174   1C008DE2           ADD      R0,SP,#+28
   \   00000178   ........           _BLF     ??_Tidy_1,??_Tidy??rA
     73                                  if ( Status == E_NO_ERR ) {
   \   0000017C   14009DE5           LDR      R0,[SP, #+20]
   \   00000180   14D08DE2           ADD      SP,SP,#+20
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   3400001A           BNE      ??PutValue_7
     74                                      mACal[Index] = Value;
   \   0000018C   E40194E5           LDR      R0,[R4, #+484]
   \   00000190   058180E7           STR      R8,[R0, +R5, LSL #+2]
     75                                      TimeModified = time(NULL);
   \   00000194   E1FFFFEA           B        ??PutValue_9
     76                                  }
     77                              }
     78                              break;
     79                          }
     80                      }
     81                  }
     82                  break;
     83              case SVT_AI_CAL_DATA_TSS:
     84                  {
     85                      short Value = GetInt(NewValue, Status);
   \                     ??PutValue_11:
   \   00000198   08008DE2           ADD      R0,SP,#+8
   \   0000019C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001A0   0D10A0E1           MOV      R1,SP
   \   000001A4   ........           _BLF     ??GetInt,??GetInt??rA
   \   000001A8   0058A0E1           MOV      R5,R0, LSL #+16
   \   000001AC   0020A0E3           MOV      R2,#+0
   \   000001B0   0110A0E3           MOV      R1,#+1
   \   000001B4   08008DE2           ADD      R0,SP,#+8
   \   000001B8   ........           _BLF     ??_Tidy_1,??_Tidy??rA
     86                      if ( Status == E_NO_ERR ) {
   \   000001BC   00009DE5           LDR      R0,[SP, #+0]
   \   000001C0   4558A0E1           MOV      R5,R5, ASR #+16
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   2400001A           BNE      ??PutValue_7
     87                          TSS             = Value;
   \   000001CC   0500A0E1           MOV      R0,R5
   \   000001D0   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000001D4   E00184E5           STR      R0,[R4, #+480]
     88                          TimeModified    = time(NULL);
   \   000001D8   D0FFFFEA           B        ??PutValue_9
     89                      }
     90                  }
     91                  break;
     92              case SVT_AI_CAL_DATA_TZS:
     93                  {
     94                      short Value = GetInt(NewValue, Status);
   \                     ??PutValue_12:
   \   000001DC   08008DE2           ADD      R0,SP,#+8
   \   000001E0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001E4   0D10A0E1           MOV      R1,SP
   \   000001E8   ........           _BLF     ??GetInt,??GetInt??rA
   \   000001EC   0058A0E1           MOV      R5,R0, LSL #+16
   \   000001F0   0020A0E3           MOV      R2,#+0
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   08008DE2           ADD      R0,SP,#+8
   \   000001FC   ........           _BLF     ??_Tidy_1,??_Tidy??rA
     95                      if ( Status == E_NO_ERR ) {
   \   00000200   00009DE5           LDR      R0,[SP, #+0]
   \   00000204   4558A0E1           MOV      R5,R5, ASR #+16
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   1300001A           BNE      ??PutValue_7
     96                          TZS             = Value;
   \   00000210   0500A0E1           MOV      R0,R5
   \   00000214   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000218   DC0184E5           STR      R0,[R4, #+476]
     97                          TimeModified    = time(NULL);
   \   0000021C   BFFFFFEA           B        ??PutValue_9
     98                      }
     99                  }
    100                  break;
    101              case SVT_AI_OFFSET   :
    102              case SVT_AI_CALC_VAL :
    103              default:
    104                  Status = AIPressSensor::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_4:
   \   00000220   24008DE2           ADD      R0,SP,#+36
   \   00000224   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000228   0030A0E1           MOV      R3,R0
   \   0000022C   04008DE2           ADD      R0,SP,#+4
   \   00000230   01002DE9           PUSH     {R0}
   \   00000234   00012DE9           PUSH     {R8}
   \   00000238   0520A0E1           MOV      R2,R5
   \   0000023C   0910A0E1           MOV      R1,R9
   \   00000240   0400A0E1           MOV      R0,R4
   \   00000244   ........           _BLF     ??PutValue_3,??PutValue??rA
   \   00000248   08008DE5           STR      R0,[SP, #+8]
   \   0000024C   0020A0E3           MOV      R2,#+0
   \   00000250   0110A0E3           MOV      R1,#+1
   \   00000254   2C008DE2           ADD      R0,SP,#+44
   \   00000258   ........           _BLF     ??_Tidy_1,??_Tidy??rA
   \   0000025C   08D08DE2           ADD      SP,SP,#+8
    105                  break;
    106              }
    107              if ( Status == E_NO_ERR ) {
   \                     ??PutValue_7:
   \   00000260   00009DE5           LDR      R0,[SP, #+0]
   \   00000264   000050E3           CMP      R0,#+0
   \   00000268   0400001A           BNE      ??PutValue_13
    108                  SetModifiedFlag();
   \                     ??PutValue_6:
   \   0000026C   A41094E5           LDR      R1,[R4, #+164]
   \   00000270   0400A0E1           MOV      R0,R4
   \   00000274   541091E5           LDR      R1,[R1, #+84]
   \   00000278   0FE0A0E1           MOV      LR,PC
   \   0000027C   11FF2FE1           BX       R1
    109              }
    110              if ( UnitId ) {
   \                     ??PutValue_13:
   \   00000280   000056E3           CMP      R6,#+0
    111                  *UnitId = ValUnitId;
   \   00000284   04009D15           LDRNE    R0,[SP, #+4]
   \   00000288   00008615           STRNE    R0,[R6, #+0]
    112              }
    113              return (Status);
   \   0000028C   00009DE5           LDR      R0,[SP, #+0]
   \   00000290   40D08DE2           ADD      SP,SP,#+64
   \   00000294   ........           B        ?Subroutine16
    114          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          int  AIPressSensor_mA::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   1C609DE5           LDR      R6,[SP, #+28]
   \   00000008   20709DE5           LDR      R7,[SP, #+32]
   \   0000000C   0350A0E1           MOV      R5,R3
    117              int Status = GETVAL_NO_ERR;
   \   00000010   0040A0E3           MOV      R4,#+0
    118              switch ( ValueId ) {
   \   00000014   7C3FA0E3           MOV      R3,#+496
   \   00000018   0090A0E3           MOV      R9,#+0
   \   0000001C   C48041E2           SUB      R8,R1,#+196
   \   00000020   408E48E2           SUB      R8,R8,#+1024
   \   00000024   090058E3           CMP      R8,#+9
   \   00000028   3F00008A           BHI      ??GetValue_4
   \   0000002C   01CF8FE2           ADR      R12,??GetValue_1
   \   00000030   08C0DCE7           LDRB     R12,[R12, R8]
   \   00000034   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_1:
   \   00000038   02023C3C           DC8      +2,+2,+60,+60
   \   0000003C   3C3C3A38           DC8      +60,+60,+58,+56
   \   00000040   02310000           DC8      +2,+49,+0,+0
    119              case SVT_AI_CAL_DATA_ENTRY	:
    120              case SVT_AI_CAL_DATA_FRO	:
    121              case SVT_AI_CAL_DATA_G1 	:
    122                  if ( Index >= 0 && Index < int(mAPcnt.size()) ) {
   \                     ??GetValue_5:
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   2A00004A           BMI      ??GetValue_6
   \   0000004C   008083E0           ADD      R8,R3,R0
   \   00000050   04C098E5           LDR      R12,[R8, #+4]
   \   00000054   008098E5           LDR      R8,[R8, #+0]
   \   00000058   08804CE0           SUB      R8,R12,R8
   \   0000005C   280152E1           CMP      R2,R8, LSR #+2
   \   00000060   240000AA           BGE      ??GetValue_6
    123                      switch ( ValueId ) {
   \   00000064   0180A0E3           MOV      R8,#+1
   \   00000068   C41041E2           SUB      R1,R1,#+196
   \   0000006C   401E41E2           SUB      R1,R1,#+1024
   \   00000070   080051E3           CMP      R1,#+8
   \   00000074   3200008A           BHI      ??GetValue_7
   \   00000078   01CF8FE2           ADR      R12,??GetValue_2
   \   0000007C   01C0DCE7           LDRB     R12,[R12, R1]
   \   00000080   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetValue_2:
   \   00000084   08172F2F           DC8      +8,+23,+47,+47
   \   00000088   2F2F2F2F           DC8      +47,+47,+47,+47
   \   0000008C   02000000           DC8      +2,+0,+0,+0
    124                      case SVT_AI_CAL_DATA_ENTRY	:
    125                          MyRetValue = Index + 1;
   \                     ??GetValue_8:
   \   00000090   010082E2           ADD      R0,R2,#+1
   \   00000094   ........           _BLF     __longToFloat,??__longToFloat??rA
   \                     ??GetValue_9:
   \   00000098   000085E5           STR      R0,[R5, #+0]
    126                          Unit       = NO_UNIT;
   \   0000009C   009087E5           STR      R9,[R7, #+0]
    127                          DecPnt     = 0;
   \   000000A0   009086E5           STR      R9,[R6, #+0]
   \   000000A4   260000EA           B        ??GetValue_7
    128                          break;
    129                      case SVT_AI_CAL_DATA_FRO:
    130                          MyRetValue = mAPcnt[Index] * 100.0;
   \                     ??GetValue_10:
   \   000000A8   000093E7           LDR      R0,[R3, +R0]
   \   000000AC   020190E7           LDR      R0,[R0, +R2, LSL #+2]
   \   000000B0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000B4   0020A0E1           MOV      R2,R0
   \   000000B8   0130A0E1           MOV      R3,R1
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   4014A0E3           MOV      R1,#+1073741824
   \   000000C4   591881E3           ORR      R1,R1,#0x590000
   \   000000C8   ........           _BLF     __dMul,??__dMul??rA
   \   000000CC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000D0   000085E5           STR      R0,[R5, #+0]
    131                          Unit       = PERCENT_UNIT;
   \   000000D4   1000A0E3           MOV      R0,#+16
   \                     ??GetValue_11:
   \   000000D8   000087E5           STR      R0,[R7, #+0]
    132                          DecPnt     = 1;
   \   000000DC   008086E5           STR      R8,[R6, #+0]
   \   000000E0   170000EA           B        ??GetValue_7
    133                          break;
    134                      case SVT_AI_CAL_DATA_G1 :
    135                          MyRetValue = mACal[Index];
   \                     ??GetValue_12:
   \   000000E4   E40190E5           LDR      R0,[R0, #+484]
   \   000000E8   020190E7           LDR      R0,[R0, +R2, LSL #+2]
   \   000000EC   000085E5           STR      R0,[R5, #+0]
    136                          Unit       = CURRENT_UNIT;
   \   000000F0   1100A0E3           MOV      R0,#+17
   \   000000F4   F7FFFFEA           B        ??GetValue_11
    137                          DecPnt     = 1;
    138                          break;
    139                      }
    140                  } else {
    141                      Status = GETVAL_NOT_AVAILABLE;
   \                     ??GetValue_6:
   \   000000F8   0140A0E3           MOV      R4,#+1
   \   000000FC   100000EA           B        ??GetValue_7
    142                  }
    143                  break;
    144              case SVT_AI_CAL_DATA_ENTRIES:
    145                  MyRetValue = mAPcnt.size();
   \                     ??GetValue_13:
   \   00000100   000083E0           ADD      R0,R3,R0
   \   00000104   041090E5           LDR      R1,[R0, #+4]
   \   00000108   000090E5           LDR      R0,[R0, #+0]
   \   0000010C   000041E0           SUB      R0,R1,R0
   \   00000110   2001A0E1           LSR      R0,R0,#+2
   \   00000114   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   00000118   DEFFFFEA           B        ??GetValue_9
    146                  Unit       = NO_UNIT;
    147                  DecPnt     = 0;
    148                  break;
    149              case SVT_AI_CAL_DATA_TSS:
    150                  MyRetValue = TSS;
   \                     ??GetValue_14:
   \   0000011C   E00190E5           LDR      R0,[R0, #+480]
   \   00000120   DCFFFFEA           B        ??GetValue_9
    151                  Unit       = NO_UNIT;
    152                  DecPnt     = 0;
    153                  break;
    154              case SVT_AI_CAL_DATA_TZS:
    155                  MyRetValue = TZS;
   \                     ??GetValue_15:
   \   00000124   DC0190E5           LDR      R0,[R0, #+476]
   \   00000128   DAFFFFEA           B        ??GetValue_9
    156                  Unit       = NO_UNIT;
    157                  DecPnt     = 0;
    158                  break;
    159              case SVT_AI_OFFSET   :
    160              case SVT_AI_CALC_VAL :
    161              default:
    162                  Status = AIPressSensor::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_4:
   \   0000012C   80002DE9           PUSH     {R7}
   \   00000130   40002DE9           PUSH     {R6}
   \   00000134   0530A0E1           MOV      R3,R5
   \   00000138   ........           _BLF     ??GetValue_3,??GetValue??rA
   \   0000013C   0040A0E1           MOV      R4,R0
   \   00000140   08D08DE2           ADD      SP,SP,#+8
    163                  break;
    164              }
    165              return (Status);
   \                     ??GetValue_7:
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148                      REQUIRE ?Subroutine16
   \   00000148                      ;; // Fall through to label ?Subroutine16
    166          }
    167          

   \                                 In segment CODE, align 4, keep-with-next
    168          int AIPressSensor_mA::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   00402DE9           PUSH     {LR}
    169              return (AIPressSensor::GetStringValue(ValueId, Index, MyString));
   \   00000004   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000008   ........           B        ?Subroutine17
    170          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    171          

   \                                 In segment CODE, align 4, keep-with-next
    172          int AIPressSensor_mA::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   00402DE9           PUSH     {LR}
    173              return (AIPressSensor::PutFloatValue(ValueId, NewValue));
   \   00000004   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
   \   00000008                      REQUIRE ?Subroutine17
   \   00000008                      ;; // Fall through to label ?Subroutine17
    174          }
    175          
    176          //////////////////////////////////////////////////////////////////
    177          //
    178          // Sensor calculations
    179          //
    180          //////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    181          float AIPressSensor_mA::Calculate(void) {
   \                     ??Calculate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    182              if ( CanCalculate() ) {
   \   00000008   527FA0E3           MOV      R7,#+328
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3F00000A           BEQ      ??Calculate_1
    183                  float CurrentTemp;
    184                  if ( TempPtr ) {
   \   00000018   C00196E5           LDR      R0,[R6, #+448]
    185                      CurrentTemp = *TempPtr;
    186                  } else {
    187                      CurrentTemp = PROSystemData::SeaWaterTemp;
    188                  }
    189                  float NewCalcValue = Gain * (Get_Press(FilteredValue, CurrentTemp) - NORMAL_ATM) + NORMAL_ATM - AtmPressure - Offset;
   \   0000001C   441196E5           LDR      R1,[R6, #+324]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   F8009F05           LDREQ    R0,??Calculate_2  ;; ??SeaWaterTemp
   \   00000028   002090E5           LDR      R2,[R0, #+0]
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           BL       ??Get_Press
   \   00000034   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000038   E8209FE5           LDR      R2,??Calculate_2+0x4  ;; 0xffffffffbf0f2b0c
   \   0000003C   E8309FE5           LDR      R3,??Calculate_2+0x8  ;; 0xffffffffc024a8d1
   \   00000040   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000044   0040A0E1           MOV      R4,R0
   \   00000048   3C0196E5           LDR      R0,[R6, #+316]
   \   0000004C   0150A0E1           MOV      R5,R1
   \   00000050   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000054   0420A0E1           MOV      R2,R4
   \   00000058   0530A0E1           MOV      R3,R5
   \   0000005C   ........           _BLF     __dMul,??__dMul??rA
   \   00000060   C0209FE5           LDR      R2,??Calculate_2+0x4  ;; 0xffffffffbf0f2b0c
   \   00000064   C4309FE5           LDR      R3,??Calculate_2+0xC  ;; 0x4024a8d1
   \   00000068   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000006C   0040A0E1           MOV      R4,R0
   \   00000070   BC009FE5           LDR      R0,??Calculate_2+0x10  ;; ??AtmPressure
   \   00000074   0150A0E1           MOV      R5,R1
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000080   0020A0E1           MOV      R2,R0
   \   00000084   0130A0E1           MOV      R3,R1
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   0510A0E1           MOV      R1,R5
   \   00000090   ........           _BLF     __dSub,??__dSub??rA
   \   00000094   0040A0E1           MOV      R4,R0
   \   00000098   400196E5           LDR      R0,[R6, #+320]
   \   0000009C   0150A0E1           MOV      R5,R1
   \   000000A0   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000A4   0020A0E1           MOV      R2,R0
   \   000000A8   0130A0E1           MOV      R3,R1
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   ........           _BLF     __dSub,??__dSub??rA
   \   000000B8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000BC   0040A0E1           MOV      R4,R0
    190                  switch ( Location ) {
   \   000000C0   280196E5           LDR      R0,[R6, #+296]
   \   000000C4   DF10A0E3           MOV      R1,#+223
   \   000000C8   801E81E3           ORR      R1,R1,#0x800
   \   000000CC   010050E1           CMP      R0,R1
   \   000000D0   8E0E5013           CMPNE    R0,#+2272
   \   000000D4   02108112           ADDNE    R1,R1,#+2
   \   000000D8   01005011           CMPNE    R0,R1
   \   000000DC   4E108112           ADDNE    R1,R1,#+78
   \   000000E0   01005011           CMPNE    R0,R1
   \   000000E4   930E5013           CMPNE    R0,#+2352
   \   000000E8   02108112           ADDNE    R1,R1,#+2
   \   000000EC   01005011           CMPNE    R0,R1
   \   000000F0   0500001A           BNE      ??Calculate_3
    191                  case C_AI_LOC_REDUNDANCY1   :
    192                  case C_AI_LOC_REDUNDANCY2   :
    193                  case C_AI_LOC_REDUNDANCY3   :
    194                  case C_AI_LOC_BOTTOM        :
    195                  case C_AI_LOC_MIDDLE        :
    196                  case C_AI_LOC_UPPER         :
    197                      NewCalcValue -= CalcRefPressure();
   \   000000F4   0600A0E1           MOV      R0,R6
   \   000000F8   ........           _BLF     ??CalcRefPressure,??CalcRefPressure??rA
   \   000000FC   0010A0E1           MOV      R1,R0
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           _BLF     __fSub,??__fSub??rA
   \   00000108   0040A0E1           MOV      R4,R0
    198                      break;
    199                  default:
    200                      break;
    201          
    202                  }
    203                  CalcValue = NewCalcValue;
   \                     ??Calculate_3:
   \   0000010C   064087E7           STR      R4,[R7, +R6]
    204                  ResultOK  = true;
   \   00000110   0100A0E3           MOV      R0,#+1
   \   00000114   3601C6E5           STRB     R0,[R6, #+310]
    205              }
    206              return (CalcValue);
   \                     ??Calculate_1:
   \   00000118   060097E7           LDR      R0,[R7, +R6]
   \   0000011C   F040BDE8           POP      {R4-R7,LR}
   \   00000120   1EFF2FE1           BX       LR               ;; return
   \                     ??Calculate_2:
   \   00000124   ........           DC32     ??SeaWaterTemp
   \   00000128   0C2B0FBF           DC32     0xffffffffbf0f2b0c
   \   0000012C   D1A824C0           DC32     0xffffffffc024a8d1
   \   00000130   D1A82440           DC32     0x4024a8d1
   \   00000134   ........           DC32     ??AtmPressure
    207          }
    208          

   \                                 In segment CODE, align 4, keep-with-next
    209          void AIPressSensor_mA::Temp_Correction(float Temp) {
   \                     ??Temp_Correction:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0060A0E1           MOV      R6,R0
   \   00000008   0140A0E1           MOV      R4,R1
    210              CalDataSema.Acquire();
   \   0000000C   72BFA0E3           MOV      R11,#+456
   \   00000010   06008BE0           ADD      R0,R11,R6
   \   00000014   ........           _BLF     ??Acquire,??Acquire??rA
    211              mACor.clear();
   \   00000018   7F8FA0E3           MOV      R8,#+508
   \   0000001C   060088E0           ADD      R0,R8,R6
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA_1
    212              if ( !mACal.empty() ) {
   \   00000024   797FA0E3           MOV      R7,#+484
   \   00000028   060087E0           ADD      R0,R7,R6
   \   0000002C   041090E5           LDR      R1,[R0, #+4]
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000041E0           SUB      R0,R1,R0
   \   00000038   2001B0E1           LSRS     R0,R0,#+2
   \   0000003C   3B00000A           BEQ      ??Temp_Correction_1
    213                  float FRODiff = mACal.back() - mACal[0];
   \   00000040   040011E5           LDR      R0,[R1, #-4]
   \   00000044   061097E7           LDR      R1,[R7, +R6]
   \   00000048   001091E5           LDR      R1,[R1, #+0]
   \   0000004C   ........           _BLF     __fSub,??__fSub??rA
   \   00000050   00A0A0E1           MOV      R10,R0
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   C034A0E3           MOV      R3,#-1073741824
   \   00000064   E43983E3           ORR      R3,R3,#0x390000
   \   00000068   ........           _BLF     __dAdd,??__dAdd??rA
   \   0000006C   0040A0E1           MOV      R4,R0
   \   00000070   DC0196E5           LDR      R0,[R6, #+476]
   \   00000074   0150A0E1           MOV      R5,R1
   \   00000078   0A10A0E1           MOV      R1,R10
   \   0000007C   ........           _BLF     __fMul,??__fMul??rA
   \   00000080   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000084   0420A0E1           MOV      R2,R4
   \   00000088   0530A0E1           MOV      R3,R5
   \   0000008C   ........           _BLF     __dMul,??__dMul??rA
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   4034A0E3           MOV      R3,#+1073741824
   \   00000098   593883E3           ORR      R3,R3,#0x590000
   \   0000009C   ........           _BLF     __dDiv,??__dDiv??rA
   \   000000A0   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000A4   0090A0E1           MOV      R9,R0
    214                  float TZSCor = FRODiff * TZS * (Temp - 25.0) / 100.0;
    215                  float TSSCor = FRODiff * TSS * (Temp - 25.0) / 100.0;
   \   000000A8   E00196E5           LDR      R0,[R6, #+480]
   \   000000AC   0A10A0E1           MOV      R1,R10
   \   000000B0   ........           _BLF     __fMul,??__fMul??rA
   \   000000B4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000000B8   0420A0E1           MOV      R2,R4
   \   000000BC   0530A0E1           MOV      R3,R5
   \   000000C0   ........           _BLF     __dMul,??__dMul??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   4034A0E3           MOV      R3,#+1073741824
   \   000000CC   593883E3           ORR      R3,R3,#0x590000
   \   000000D0   ........           _BLF     __dDiv,??__dDiv??rA
   \   000000D4   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000000D8   00A0A0E1           MOV      R10,R0
    216                  for ( unsigned i = 0; i < mACal.size(); i++ ) {
   \   000000DC   0040A0E3           MOV      R4,#+0
   \   000000E0   0C0000EA           B        ??Temp_Correction_2
    217                      mACor.push_back(mACal[i] + TSSCor * mACal[i] + TZSCor);
   \                     ??Temp_Correction_3:
   \   000000E4   060097E7           LDR      R0,[R7, +R6]
   \   000000E8   0A10A0E1           MOV      R1,R10
   \   000000EC   045180E0           ADD      R5,R0,R4, LSL #+2
   \   000000F0   000095E5           LDR      R0,[R5, #+0]
    218                  }
   \   000000F4   014084E2           ADD      R4,R4,#+1
   \   000000F8   ........           _BLF     __fMul,??__fMul??rA
   \   000000FC   001095E5           LDR      R1,[R5, #+0]
   \   00000100   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000104   0910A0E1           MOV      R1,R9
   \   00000108   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000010C   0010A0E1           MOV      R1,R0
   \   00000110   060088E0           ADD      R0,R8,R6
   \   00000114   ........           _BLF     ??_Push_back0,??_Push_back0??rA
   \                     ??Temp_Correction_2:
   \   00000118   060087E0           ADD      R0,R7,R6
   \   0000011C   041090E5           LDR      R1,[R0, #+4]
   \   00000120   000090E5           LDR      R0,[R0, #+0]
   \   00000124   000041E0           SUB      R0,R1,R0
   \   00000128   200154E1           CMP      R4,R0, LSR #+2
   \   0000012C   ECFFFF3A           BCC      ??Temp_Correction_3
    219              }
    220              CalDataSema.Release();
   \                     ??Temp_Correction_1:
   \   00000130   06008BE0           ADD      R0,R11,R6
   \   00000134   ........           _BLF     ??Release,??Release??rA
    221          }
   \   00000138   F04FBDE8           POP      {R4-R11,LR}
   \   0000013C   1EFF2FE1           BX       LR               ;; return
    222          

   \                                 In segment CODE, align 4, keep-with-next
    223          float AIPressSensor_mA::Get_Percent(float mA) {
   \                     ??Get_Percent:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0140A0E1           MOV      R4,R1
    224              int Index = 1;
    225              int LastI = mACal.size() - 1;
   \   0000000C   797FA0E3           MOV      R7,#+484
   \   00000010   050087E0           ADD      R0,R7,R5
   \   00000014   041090E5           LDR      R1,[R0, #+4]
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   0160A0E3           MOV      R6,#+1
   \   00000020   000041E0           SUB      R0,R1,R0
   \   00000024   2001A0E1           LSR      R0,R0,#+2
   \   00000028   018040E2           SUB      R8,R0,#+1
   \   0000002C   000000EA           B        ??Get_Percent_1
    226              while ( (Index < LastI) && (mA > mACal[Index]) )	Index++;
   \                     ??Get_Percent_2:
   \   00000030   016086E2           ADD      R6,R6,#+1
   \                     ??Get_Percent_1:
   \   00000034   050097E7           LDR      R0,[R7, +R5]
   \   00000038   080056E1           CMP      R6,R8
   \   0000003C   069180E0           ADD      R9,R0,R6, LSL #+2
   \   00000040   040000AA           BGE      ??Get_Percent_3
   \   00000044   000099E5           LDR      R0,[R9, #+0]
   \   00000048   0410A0E1           MOV      R1,R4
   \   0000004C   ........           _BLF     __fLess,??__fLess??rA
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   F5FFFF1A           BNE      ??Get_Percent_2
   \                     ??Get_Percent_3:
   \   00000058   F00195E5           LDR      R0,[R5, #+496]
   \   0000005C   10002DE9           PUSH     {R4}
   \   00000060   001099E5           LDR      R1,[R9, #+0]
   \   00000064   060180E0           ADD      R0,R0,R6, LSL #+2
   \   00000068   003090E5           LDR      R3,[R0, #+0]
   \   0000006C   042010E5           LDR      R2,[R0, #-4]
   \   00000070   040019E5           LDR      R0,[R9, #-4]
    227          
    228              return (IntPol1stDeg(mACal[Index - 1], mACal[Index], mAPcnt[Index - 1], mAPcnt[Index], mA));
   \   00000074   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   00000078   ........           B        ?Subroutine18
    229          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine18:
   \   00000000   F243BDE8           POP      {R1,R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    230          float AIPressSensor_mA::Get_Cor_PCnt(float mA) {
   \                     ??Get_Cor_PCnt:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    231              CalDataSema.Acquire();
   \   0000000C   725FA0E3           MOV      R5,#+456
   \   00000010   040085E0           ADD      R0,R5,R4
   \   00000014   ........           _BLF     ??Acquire,??Acquire??rA
    232              int Index = 1;
    233              int LastI = mACal.size() - 1;
   \   00000018   790F84E2           ADD      R0,R4,#+484
   \   0000001C   041090E5           LDR      R1,[R0, #+4]
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   0170A0E3           MOV      R7,#+1
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   018040E2           SUB      R8,R0,#+1
   \   00000034   000000EA           B        ??Get_Cor_PCnt_1
    234              while ( (Index < LastI) && (mA > mACor[Index]) ) Index++;
   \                     ??Get_Cor_PCnt_2:
   \   00000038   017087E2           ADD      R7,R7,#+1
   \                     ??Get_Cor_PCnt_1:
   \   0000003C   FC0194E5           LDR      R0,[R4, #+508]
   \   00000040   080057E1           CMP      R7,R8
   \   00000044   079180E0           ADD      R9,R0,R7, LSL #+2
   \   00000048   040000AA           BGE      ??Get_Cor_PCnt_3
   \   0000004C   000099E5           LDR      R0,[R9, #+0]
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   ........           _BLF     __fLess,??__fLess??rA
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   F5FFFF1A           BNE      ??Get_Cor_PCnt_2
   \                     ??Get_Cor_PCnt_3:
   \   00000060   F00194E5           LDR      R0,[R4, #+496]
   \   00000064   40002DE9           PUSH     {R6}
   \   00000068   001099E5           LDR      R1,[R9, #+0]
   \   0000006C   070180E0           ADD      R0,R0,R7, LSL #+2
   \   00000070   003090E5           LDR      R3,[R0, #+0]
   \   00000074   042010E5           LDR      R2,[R0, #-4]
   \   00000078   040019E5           LDR      R0,[R9, #-4]
    235              float CorPcnt = IntPol1stDeg(mACor[Index - 1], mACor[Index], mAPcnt[Index - 1], mAPcnt[Index], mA);
   \   0000007C   ........           _BLF     ??IntPol1stDeg,??IntPol1stDeg??rA
   \   00000080   0060A0E1           MOV      R6,R0
    236              CalDataSema.Release();
   \   00000084   040085E0           ADD      R0,R5,R4
   \   00000088   ........           _BLF     ??Release,??Release??rA
    237              return CorPcnt;
   \   0000008C   0600A0E1           MOV      R0,R6
   \   00000090                      REQUIRE ?Subroutine18
   \   00000090                      ;; // Fall through to label ?Subroutine18
    238          
    239          }

   \                                 In segment CODE, align 4, keep-with-next
    240          float AIPressSensor_mA::Get_Press(float Amp, float Temp) {
   \                     ??Get_Press:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    241              // We do not want to make a new temp correction unless we
    242              // have a significant temperature change
    243              if ( fabs(Temp - PrevTemp) > 1.0 ) {
   \   0000000C   C41194E5           LDR      R1,[R4, #+452]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0600A0E1           MOV      R0,R6
   \   00000018   ........           _BLF     __fSub,??__fSub??rA
   \   0000001C   8004C0E3           BIC      R0,R0,#0x80000000
   \   00000020   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000024   0120A0E3           MOV      R2,#+1
   \   00000028   C035A0E3           MOV      R3,#+805306368
   \   0000002C   FF3683E3           ORR      R3,R3,#0xFF00000
   \   00000030   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0300000A           BEQ      ??Get_Press_1
    244                  Temp_Correction(Temp);
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       ??Temp_Correction
    245                  PrevTemp = Temp;
   \   00000048   C46184E5           STR      R6,[R4, #+452]
    246              }
    247              float  Percent = Get_Cor_PCnt(Amp);
   \                     ??Get_Press_1:
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       ??Get_Cor_PCnt
   \   00000058   5C6194E5           LDR      R6,[R4, #+348]
   \   0000005C   0050A0E1           MOV      R5,R0
   \   00000060   600194E5           LDR      R0,[R4, #+352]
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   ........           _BLF     __fSub,??__fSub??rA
   \   0000006C   0510A0E1           MOV      R1,R5
   \   00000070   ........           _BLF     __fMul,??__fMul??rA
   \   00000074   0610A0E1           MOV      R1,R6
   \   00000078   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000007C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000080   10209FE5           LDR      R2,??Get_Press_2  ;; 0xffffffffda554b8c
   \   00000084   10309FE5           LDR      R3,??Get_Press_2+0x4  ;; 0x3fb91ae2
   \   00000088   ........           _BLF     __dDiv,??__dDiv??rA
   \   0000008C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000090   7040BDE8           POP      {R4-R6,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     ??Get_Press_2:
   \   00000098   8C4B55DA           DC32     0xffffffffda554b8c
   \   0000009C   E21AB93F           DC32     0x3fb91ae2
    248              return ((MaxRange - MinRange) * Percent + MinRange) / MH2O_TO_BAR;
    249          }
    250          
    251          

   \                                 In segment CODE, align 4, keep-with-next
    252          void AIPressSensor_mA::AddShortCircuitAlarm(void) {
   \                     ??AddShortCircuitAlarm:
   \   00000000   13402DE9           PUSH     {R0,R1,R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    253              AlarmmAmpShortCircuit *ShortCircuitPtr = new AlarmmAmpShortCircuit( this );
   \   00000008   ........           _BLF     `??new AlarmmAmpShortCircuit`,`??new AlarmmAmpShortCircuit??rA`
    254              AlarmSet.insert( ShortCircuitPtr );
   \   0000000C   0020A0E1           MOV      R2,R0
   \   00000010   C01084E2           ADD      R1,R4,#+192
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   ........           _BLF     ??insert_1,??insert??rA
    255          }
   \   0000001C   1340BDE8           POP      {R0,R1,R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AIPressSensor_mA &AIPressSensor_mA::new AIPressSensor_mA(int, bool)
   \                     `??new AIPressSensor_mA`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   820FA0E3           MOV      R0,#+520
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new AIPressSensor_mA_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??AIPressSensor_mA
   \                     `??new AIPressSensor_mA_1`:
   \   00000028   ........           B        ?Subroutine15

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl
    256          
    257          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AIPressSensor_mA::AIPressSensor_mA(int, bool)
                                       28
     AIPressSensor_mA::AddShortCircuitAlarm()
                                       16
     AIPressSensor_mA::Calculate()     20
     AIPressSensor_mA::GetFilter()      0
     AIPressSensor_mA::GetStringValue(int, int, AnsiString &)
                                        4
     AIPressSensor_mA::GetValue(int, int, float &, int &, int &)
                                       36
     AIPressSensor_mA::Get_Cor_PCnt(float)
                                       32
     AIPressSensor_mA::Get_Percent(float)
                                       32
     AIPressSensor_mA::Get_Press(float, float)
                                       16
     AIPressSensor_mA::PutFloatValue(int, float)
                                        4
     AIPressSensor_mA::PutValue(int, int, AnsiString, bool, int *)
                                      116
     AIPressSensor_mA::Temp_Correction(float)
                                       36
     AIPressSensor_mA::new AIPressSensor_mA(int, bool)
                                       12
     AIPressSensor_mA::~AIPressSensor_mA()
                                       12
     AnsiString::AnsiString(AnsiString const &)
                                       12
     _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Erase(_Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Insert(bool, _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Nodeptr, AIPressSensor_mA *)
                                       24
     _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::insert(AIPressSensor_mA *)
                                       44
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                       16
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                       32
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                        8
     _Vector_impl<float, allocator<float>>::_Tidy()
                                        8
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                        4
     __sti__routine()                  16
     set<AIPressSensor_mA *>::~set()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::insert(AIPressSensor_mA *)
                                     200
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Erase(_Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Insert(bool, _Tree<_Tset_traits<AIPressSensor_mA *, less<AIPressSensor_mA *>, allocator<AIPressSensor_mA *>, false>>::_Nodeptr, AIPressSensor_mA *)
                                      96
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     set<AIPressSensor_mA *>::~set()
                                      32
     _Vector_impl<float, allocator<float>>::_Tidy0()
                                      36
     _Vector_impl<float, allocator<float>>::_Tidy()
                                      36
     _Vector_impl<float, allocator<float>>::_Insert(float *, float const &)
                                      72
     _Vector_impl<float, allocator<float>>::_Make_room(float *, unsigned int)
                                     232
     _Vector_impl<float, allocator<float>>::_Push_back0(float)
                                      72
     AnsiString::AnsiString(AnsiString const &)
                                      64
     __sti__routine()                 76
     ?_0                              24
     AIPressSensor_mA::ObjectSet      40
     AIPressSensor_mA::AIPressSensor_mA(int, bool)
                                     168
     ?Subroutine15                    12
     AIPressSensor_mA::~AIPressSensor_mA()
                                      92
     AIPressSensor_mA::GetFilter()     8
     AIPressSensor_mA::PutValue(int, int, AnsiString, bool, int *)
                                     664
     ?Subroutine16                     8
     AIPressSensor_mA::GetValue(int, int, float &, int &, int &)
                                     328
     AIPressSensor_mA::GetStringValue(int, int, AnsiString &)
                                      12
     ?Subroutine17                     8
     AIPressSensor_mA::PutFloatValue(int, float)
                                       8
     AIPressSensor_mA::Calculate()   312
     AIPressSensor_mA::Temp_Correction(float)
                                     320
     AIPressSensor_mA::Get_Percent(float)
                                     124
     ?Subroutine18                     8
     AIPressSensor_mA::Get_Cor_PCnt(float)
                                     144
     AIPressSensor_mA::Get_Press(float, float)
                                     160
     AIPressSensor_mA::AddShortCircuitAlarm()
                                      36
     AIPressSensor_mA::new AIPressSensor_mA(int, bool)
                                      44
     ??DataTable2                      4
     ??DataTable3                      4
      Others                         896

 
 5 124 bytes in segment CODE
   176 bytes in segment DATA_C
    48 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 2 544 bytes of CODE  memory (+ 2 596 bytes shared)
   176 bytes of CONST memory
    48 bytes of DATA  memory

Errors: none
Warnings: none
