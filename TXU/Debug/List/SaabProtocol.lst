##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:17:27 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\SaabProtocol.cpp                #
#    Command line    =  D:\S2Prog\Shared\Src\SaabProtocol.cpp --fpu None -D  #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\SaabProtocol.lst            #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\SaabProtocol.r79             #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\SaabProtocol.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_2
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_3
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_2:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_3:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2B00001A           BNE      ??_Erase_4
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_5
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_5:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_6
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_7
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_8
   \                     ??_Erase_9:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_8:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_9
   \                     ??_Erase_7:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_6:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2F00001A           BNE      ??_Erase_10
   \   000000C0   0D10D7E5           LDRB     R1,[R7, #+13]
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0510A011           MOVNE    R1,R5
   \   000000D0   0600001A           BNE      ??_Erase_11
   \   000000D4   0710A0E1           MOV      R1,R7
   \   000000D8   000000EA           B        ??_Erase_12
   \                     ??_Erase_13:
   \   000000DC   0210A0E1           MOV      R1,R2
   \                     ??_Erase_12:
   \   000000E0   082091E5           LDR      R2,[R1, #+8]
   \   000000E4   0D30D2E5           LDRB     R3,[R2, #+13]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   FAFFFF0A           BEQ      ??_Erase_13
   \                     ??_Erase_11:
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \   000000F4   210000EA           B        ??_Erase_10
   \                     ??_Erase_4:
   \   000000F8   000096E5           LDR      R0,[R6, #+0]
   \   000000FC   048080E5           STR      R8,[R0, #+4]
   \   00000100   000096E5           LDR      R0,[R6, #+0]
   \   00000104   000088E5           STR      R0,[R8, #+0]
   \   00000108   080096E5           LDR      R0,[R6, #+8]
   \   0000010C   000058E1           CMP      R8,R0
   \   00000110   0850A001           MOVEQ    R5,R8
   \   00000114   0800000A           BEQ      ??_Erase_14
   \   00000118   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000011C   045098E5           LDR      R5,[R8, #+4]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   04508705           STREQ    R5,[R7, #+4]
   \   00000128   007085E5           STR      R7,[R5, #+0]
   \   0000012C   080096E5           LDR      R0,[R6, #+8]
   \   00000130   080088E5           STR      R0,[R8, #+8]
   \   00000134   080096E5           LDR      R0,[R6, #+8]
   \   00000138   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   0000013C   040094E5           LDR      R0,[R4, #+4]
   \   00000140   060050E1           CMP      R0,R6
   \   00000144   04808405           STREQ    R8,[R4, #+4]
   \   00000148   0400000A           BEQ      ??_Erase_15
   \   0000014C   040096E5           LDR      R0,[R6, #+4]
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   060051E1           CMP      R1,R6
   \   00000158   00808005           STREQ    R8,[R0, #+0]
   \   0000015C   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000160   040096E5           LDR      R0,[R6, #+4]
   \   00000164   0C1088E2           ADD      R1,R8,#+12
   \   00000168   040088E5           STR      R0,[R8, #+4]
   \   0000016C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000170   0C0086E2           ADD      R0,R6,#+12
   \   00000174   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000178   0030C1E5           STRB     R3,[R1, #+0]
   \   0000017C   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_10:
   \   00000180   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   5E00001A           BNE      ??_Erase_16
   \   0000018C   0090A0E3           MOV      R9,#+0
   \   00000190   01A0A0E3           MOV      R10,#+1
   \   00000194   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001A0   010050E3           CMP      R0,#+1
   \   000001A4   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   000001A8   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   000001AC   0570A0E1           MOV      R7,R5
   \   000001B0   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   000001B4   040094E5           LDR      R0,[R4, #+4]
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   5000000A           BEQ      ??_Erase_22
   \   000001C0   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4D00001A           BNE      ??_Erase_22
   \   000001CC   008095E5           LDR      R8,[R5, #+0]
   \   000001D0   080057E1           CMP      R7,R8
   \   000001D4   2400001A           BNE      ??_Erase_23
   \   000001D8   088095E5           LDR      R8,[R5, #+8]
   \   000001DC   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0500001A           BNE      ??_Erase_24
   \   000001E8   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001EC   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001FC   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000200   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   E7FFFF1A           BNE      ??_Erase_21
   \   0000020C   000098E5           LDR      R0,[R8, #+0]
   \   00000210   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   0000021C   080098E5           LDR      R0,[R8, #+8]
   \   00000220   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   0600001A           BNE      ??_Erase_25
   \   0000022C   000098E5           LDR      R0,[R8, #+0]
   \   00000230   0810A0E1           MOV      R1,R8
   \   00000234   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000238   0C90C8E5           STRB     R9,[R8, #+12]
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000244   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000248   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000254   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000258   080098E5           LDR      R0,[R8, #+8]
   \   0000025C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000268   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   0000026C   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   0500001A           BNE      ??_Erase_26
   \   00000278   0CA0C8E5           STRB     R10,[R8, #+12]
   \   0000027C   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000028C   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000290   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   C3FFFF1A           BNE      ??_Erase_21
   \   0000029C   080098E5           LDR      R0,[R8, #+8]
   \   000002A0   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A4   010050E3           CMP      R0,#+1
   \   000002A8   00009805           LDREQ    R0,[R8, #+0]
   \   000002AC   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   000002B0   01005003           CMPEQ    R0,#+1
   \   000002B4   BBFFFF0A           BEQ      ??_Erase_20
   \   000002B8   000098E5           LDR      R0,[R8, #+0]
   \   000002BC   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   0600001A           BNE      ??_Erase_27
   \   000002C8   080098E5           LDR      R0,[R8, #+8]
   \   000002CC   0810A0E1           MOV      R1,R8
   \   000002D0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002D4   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002E0   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002E4   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002F0   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002F4   000098E5           LDR      R0,[R8, #+0]
   \   000002F8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   00000304   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   00000308   100094E5           LDR      R0,[R4, #+16]
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   01004012           SUBNE    R0,R0,#+1
   \   00000314   10008415           STRNE    R0,[R4, #+16]
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   F047BDE8           POP      {R4-R10,LR}
   \   00000320   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_3
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_4:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_5
   \                     ??_Insert_3:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_6
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_5
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_5
   \                     ??_Insert_6:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_5
   \   00000060   F0FFFFEA           B        ??_Insert_4
   \                     ??_Insert_7:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_5:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_8
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_9
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_7
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_10
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_10:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_5
   \                     ??_Insert_9:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_7
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_11
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_11:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_5
   \                     ??_Insert_8:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_1:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_2
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_1
   \                     ??insert_2:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_3
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_4
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_5:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_6
   \                     ??insert_4:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_3:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_7
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_5
   \                     ??insert_7:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_6:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_12
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_12:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_1
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<SaabData, allocator<SaabData>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_4
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_4:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<BlockDef, allocator<BlockDef>>::_Tidy0()
   \                     ??_Tidy0_2:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_5
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_5:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs SaabProtcol ** _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Insert(SaabProtcol **, SaabProtcol * const &)
   \                     ??_Insert_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_2,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_13:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_13
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<SaabData, allocator<SaabData>>::_Insert_n(SaabData *, unsigned int, SaabData const &)
   \                     ??_Insert_n:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   \   00000008   E05193E8           LDM      R3,{R5-R8,R12,LR}
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   E05182E8           STM      R2,{R5-R8,R12,LR}
   \   00000018   0420A0E1           MOV      R2,R4
   \   0000001C   ........           _BLF     ??_Make_room_1,??_Make_room??rA_1
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   040000EA           B        ??_Insert_n_1
   \                     ??_Insert_n_2:
   \   00000028   E81192E8           LDM      R2,{R3,R5-R8,R12}
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   014044E2           SUB      R4,R4,#+1
   \   00000034   180080E2           ADD      R0,R0,#+24
   \   00000038   E81181E8           STM      R1,{R3,R5-R8,R12}
   \                     ??_Insert_n_1:
   \   0000003C   000054E3           CMP      R4,#+0
   \   00000040   F8FFFF1A           BNE      ??_Insert_n_2
   \   00000044   18D08DE2           ADD      SP,SP,#+24
   \   00000048   F041BDE8           POP      {R4-R8,LR}
   \   0000004C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs BlockDef * _Vector_impl<BlockDef, allocator<BlockDef>>::_Make_room(BlockDef *, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   007094E5           LDR      R7,[R4, #+0]
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   043094E5           LDR      R3,[R4, #+4]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   070040E0           SUB      R0,R0,R7
   \   0000001C   0C10A0E3           MOV      R1,#+12
   \   00000020   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000024   0160A0E1           MOV      R6,R1
   \   00000028   070043E0           SUB      R0,R3,R7
   \   0000002C   0C10A0E3           MOV      R1,#+12
   \   00000030   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   2D00000A           BEQ      ??_Make_room_3
   \   0000003C   BC009FE5           LDR      R0,??_Make_room_4  ;; 0x15555555
   \   00000040   017040E0           SUB      R7,R0,R1
   \   00000044   020057E1           CMP      R7,R2
   \   00000048   2900003A           BCC      ??_Make_room_3
   \   0000004C   0C80A0E3           MOV      R8,#+12
   \   00000050   980207E0           MUL      R7,R8,R2
   \   00000054   018082E0           ADD      R8,R2,R1
   \   00000058   080056E1           CMP      R6,R8
   \   0000005C   1D00002A           BCS      ??_Make_room_5
   \   00000060   A610A0E1           LSR      R1,R6,#+1
   \   00000064   010040E0           SUB      R0,R0,R1
   \   00000068   060050E1           CMP      R0,R6
   \   0000006C   0060A033           MOVCC    R6,#+0
   \   00000070   06608120           ADDCS    R6,R1,R6
   \   00000074   080056E1           CMP      R6,R8
   \   00000078   0860A031           MOVCC    R6,R8
   \   0000007C   0C10A0E3           MOV      R1,#+12
   \   00000080   910600E0           MUL      R0,R1,R6
   \   00000084   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000088   0090A0E1           MOV      R9,R0
   \   0000008C   000094E5           LDR      R0,[R4, #+0]
   \   00000090   0920A0E1           MOV      R2,R9
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000009C   041094E5           LDR      R1,[R4, #+4]
   \   000000A0   00A0A0E1           MOV      R10,R0
   \   000000A4   0A2087E0           ADD      R2,R7,R10
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           _BLF     ??_Tidy0_2,??_Tidy0??rA
   \   000000B8   0C00A0E3           MOV      R0,#+12
   \   000000BC   909621E0           MLA      R1,R0,R6,R9
   \   000000C0   081084E5           STR      R1,[R4, #+8]
   \   000000C4   909821E0           MLA      R1,R0,R8,R9
   \   000000C8   041084E5           STR      R1,[R4, #+4]
   \   000000CC   009084E5           STR      R9,[R4, #+0]
   \   000000D0   0A50A0E1           MOV      R5,R10
   \   000000D4   060000EA           B        ??_Make_room_3
   \                     ??_Make_room_5:
   \   000000D8   032087E0           ADD      R2,R7,R3
   \   000000DC   0310A0E1           MOV      R1,R3
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000E8   040094E5           LDR      R0,[R4, #+4]
   \   000000EC   000087E0           ADD      R0,R7,R0
   \   000000F0   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_3:
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   F047BDE8           POP      {R4-R10,LR}
   \   000000FC   1EFF2FE1           BX       LR               ;; return
   \                     ??_Make_room_4:
   \   00000100   55555515           DC32     0x15555555

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs SaabData * _Vector_impl<SaabData, allocator<SaabData>>::_Make_room(SaabData *, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   007094E5           LDR      R7,[R4, #+0]
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   043094E5           LDR      R3,[R4, #+4]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   070040E0           SUB      R0,R0,R7
   \   0000001C   1810A0E3           MOV      R1,#+24
   \   00000020   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000024   0160A0E1           MOV      R6,R1
   \   00000028   070043E0           SUB      R0,R3,R7
   \   0000002C   1810A0E3           MOV      R1,#+24
   \   00000030   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   2D00000A           BEQ      ??_Make_room_6
   \   0000003C   BC009FE5           LDR      R0,??_Make_room_7  ;; 0xaaaaaaa
   \   00000040   017040E0           SUB      R7,R0,R1
   \   00000044   020057E1           CMP      R7,R2
   \   00000048   2900003A           BCC      ??_Make_room_6
   \   0000004C   1880A0E3           MOV      R8,#+24
   \   00000050   980207E0           MUL      R7,R8,R2
   \   00000054   018082E0           ADD      R8,R2,R1
   \   00000058   080056E1           CMP      R6,R8
   \   0000005C   1D00002A           BCS      ??_Make_room_8
   \   00000060   A610A0E1           LSR      R1,R6,#+1
   \   00000064   010040E0           SUB      R0,R0,R1
   \   00000068   060050E1           CMP      R0,R6
   \   0000006C   0060A033           MOVCC    R6,#+0
   \   00000070   06608120           ADDCS    R6,R1,R6
   \   00000074   080056E1           CMP      R6,R8
   \   00000078   0860A031           MOVCC    R6,R8
   \   0000007C   1810A0E3           MOV      R1,#+24
   \   00000080   910600E0           MUL      R0,R1,R6
   \   00000084   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000088   0090A0E1           MOV      R9,R0
   \   0000008C   000094E5           LDR      R0,[R4, #+0]
   \   00000090   0920A0E1           MOV      R2,R9
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000009C   041094E5           LDR      R1,[R4, #+4]
   \   000000A0   00A0A0E1           MOV      R10,R0
   \   000000A4   0A2087E0           ADD      R2,R7,R10
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   000000B8   1800A0E3           MOV      R0,#+24
   \   000000BC   909621E0           MLA      R1,R0,R6,R9
   \   000000C0   081084E5           STR      R1,[R4, #+8]
   \   000000C4   909821E0           MLA      R1,R0,R8,R9
   \   000000C8   041084E5           STR      R1,[R4, #+4]
   \   000000CC   009084E5           STR      R9,[R4, #+0]
   \   000000D0   0A50A0E1           MOV      R5,R10
   \   000000D4   060000EA           B        ??_Make_room_6
   \                     ??_Make_room_8:
   \   000000D8   032087E0           ADD      R2,R7,R3
   \   000000DC   0310A0E1           MOV      R1,R3
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000E8   040094E5           LDR      R0,[R4, #+4]
   \   000000EC   000087E0           ADD      R0,R7,R0
   \   000000F0   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_6:
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   F047BDE8           POP      {R4-R10,LR}
   \   000000FC   1EFF2FE1           BX       LR               ;; return
   \                     ??_Make_room_7:
   \   00000100   AAAAAA0A           DC32     0xaaaaaaa

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs SaabProtcol ** _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Make_room(SaabProtcol **, unsigned int)
   \                     ??_Make_room_2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_9
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_9
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_10
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA_2
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_9
   \                     ??_Make_room_10:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_9:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs BlockDef * _Vector_impl<BlockDef, allocator<BlockDef>>::_Insert0(BlockDef *, BlockDef const &)
   \                     ??_Insert0:
   \   00000000   77402DE9           PUSH     {R0-R2,R4-R6,LR}
   \   00000004   085092E8           LDM      R2,{R3,R12,LR}
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0050A003           MOVEQ    R5,#+0
   \   0000001C   00504110           SUBNE    R5,R1,R0
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   085080E8           STM      R0,{R3,R12,LR}
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Make_room,??_Make_room??rA_2
   \   00000030   0110A0E3           MOV      R1,#+1
   \   00000034   0D30A0E1           MOV      R3,SP
   \                     ??_Insert0_1:
   \   00000038   405093E8           LDM      R3,{R6,R12,LR}
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   011041E2           SUB      R1,R1,#+1
   \   00000044   0C0080E2           ADD      R0,R0,#+12
   \   00000048   405082E8           STM      R2,{R6,R12,LR}
   \   0000004C   000051E3           CMP      R1,#+0
   \   00000050   F8FFFF1A           BNE      ??_Insert0_1
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   000085E0           ADD      R0,R5,R0
   \   0000005C   7E40BDE8           POP      {R1-R6,LR}
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<BlockDef, allocator<BlockDef>>::_Push_back0(BlockDef const &)
   \                     ??_Push_back0:
   \   00000000   D0412DE9           PUSH     {R4,R6-R8,LR}
   \   00000004   043090E5           LDR      R3,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020053E1           CMP      R3,R2
   \   00000010   0B00002A           BCS      ??_Push_back0_3
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   03C0A0E1           MOV      R12,R3
   \                     ??_Push_back0_4:
   \   0000001C   C00191E8           LDM      R1,{R6-R8}
   \   00000020   0C40A0E1           MOV      R4,R12
   \   00000024   012042E2           SUB      R2,R2,#+1
   \   00000028   0CC08CE2           ADD      R12,R12,#+12
   \   0000002C   C00184E8           STM      R4,{R6-R8}
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   F8FFFF1A           BNE      ??_Push_back0_4
   \   00000038   0C1083E2           ADD      R1,R3,#+12
   \   0000003C   041080E5           STR      R1,[R0, #+4]
   \   00000040   020000EA           B        ??_Push_back0_5
   \                     ??_Push_back0_3:
   \   00000044   0120A0E1           MOV      R2,R1
   \   00000048   0310A0E1           MOV      R1,R3
   \   0000004C   ........           _BLF     ??_Insert0,??_Insert0??rA
   \                     ??_Push_back0_5:
   \   00000050   D041BDE8           POP      {R4,R6-R8,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<SaabData, allocator<SaabData>>::_Push_back0(SaabData const &)
   \                     ??_Push_back0_1:
   \   00000000   D04F2DE9           PUSH     {R4,R6-R11,LR}
   \   00000004   082090E5           LDR      R2,[R0, #+8]
   \   00000008   0130A0E1           MOV      R3,R1
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   020051E1           CMP      R1,R2
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   0A00002A           BCS      ??_Push_back0_6
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_7:
   \   00000020   C00F93E8           LDM      R3,{R6-R11}
   \   00000024   0C40A0E1           MOV      R4,R12
   \   00000028   012042E2           SUB      R2,R2,#+1
   \   0000002C   18C08CE2           ADD      R12,R12,#+24
   \   00000030   C00F84E8           STM      R4,{R6-R11}
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   F8FFFF1A           BNE      ??_Push_back0_7
   \   0000003C   181081E2           ADD      R1,R1,#+24
   \   00000040   041080E5           STR      R1,[R0, #+4]
   \   00000044   000000EA           B        ??_Push_back0_8
   \                     ??_Push_back0_6:
   \   00000048   ........           _BLF     ??_Insert_n,??_Insert_n??rA
   \                     ??_Push_back0_8:
   \   0000004C   D04FBDE8           POP      {R4,R6-R11,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Push_back0(SaabProtcol *)
   \                     ??_Push_back0_2:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_9
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_10:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_10
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_11
   \                     ??_Push_back0_9:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_2,??_Insert??rA_2
   \                     ??_Push_back0_11:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<SaabProtcol *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA_2
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          #define SAAB_DELAY  30 // In Saab spec minimum 20 mS

   \                                 In segment DATA_C, align 4, align-sorted
      7          vector<SaabProtcol *>SaabProtcol::SaabProtcolVector;
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??SaabProtcolVector, `?~vector`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??ObjectSet, `?~set`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
      8          set<PRogramObjectBase *>SaabProtcol::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24
   \                     ??SaabProtcolVector:
   \   00000018                      DS8 12
      9          
     10          //---------------------------------------------------------------------------
     11          
     12          

   \                                 In segment CODE, align 4, keep-with-next
     13          SaabProtcol::SaabProtcol(int PortNum, unsigned IDNum) {
   \                     ??SaabProtcol:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
     14              ObjectSet.insert(this);
   \   00000004   ........           LDR      R7,??DataTable4  ;; ??ObjectSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0110A0E3           MOV      R1,#+1
   \   00000018   ........           _BLF     ??PRogramObject,??PRogramObject??rA
   \   0000001C   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000020   A40084E5           STR      R0,[R4, #+164]
   \   00000024   550F84E2           ADD      R0,R4,#+340
   \   00000028   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000002C   580F84E2           ADD      R0,R4,#+352
   \   00000030   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000034   0420A0E1           MOV      R2,R4
   \   00000038   0710A0E1           MOV      R1,R7
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           _BLF     ??insert,??insert??rA
     15              SaabProtcolVector.push_back(this);
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   180087E2           ADD      R0,R7,#+24
   \   0000004C   ........           _BLF     ??_Push_back0_2,??_Push_back0??rA
     16              if (IDNum == 0) {
   \   00000050   000056E3           CMP      R6,#+0
     17                  IDNumber = (C_PRO_SAAB_PROTOCOL << 16) + SaabProtcolVector.size();
   \   00000054   1C009705           LDREQ    R0,[R7, #+28]
   \   00000058   18109705           LDREQ    R1,[R7, #+24]
   \   0000005C   01004000           SUBEQ    R0,R0,R1
   \   00000060   FA16A003           MOVEQ    R1,#+262144000
   \   00000064   20618100           ADDEQ    R6,R1,R0, LSR #+2
     18              } else {
     19                  IDNumber = IDNum;
   \   00000068   9C6084E5           STR      R6,[R4, #+156]
     20              }
     21              Initiate();
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       ??Initiate
     22              if (PortNum >= 0) {
   \   00000074   000055E3           CMP      R5,#+0
     23                  WinUart = PortNum;
   \   00000078   50518455           STRPL    R5,[R4, #+336]
     24              }
     25          }
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000084   1EFF2FE1           BX       LR               ;; return
     26          

   \                                 In segment CODE, align 4, keep-with-next
     27          void SaabProtcol::Initiate(void) {
     28              Delay           = SAAB_DELAY;
   \                     ??Initiate:
   \   00000000   1E10A0E3           MOV      R1,#+30
   \   00000004   6C1180E5           STR      R1,[R0, #+364]
     29              CurrentRequest  = 0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   481180E5           STR      R1,[R0, #+328]
     30              TCUAddress      = 0;
   \   00000010   4C1180E5           STR      R1,[R0, #+332]
     31          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
     32          

   \                                 In segment CODE, align 4, keep-with-next
     33          SaabProtcol::~SaabProtcol(void) {
   \                     `?~SaabProtcol`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1500000A           BEQ      `?~SaabProtcol_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     34              ObjectSet.erase(this);
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   ........           LDR      R0,??DataTable4  ;; ??ObjectSet
     35          }
   \   00000024   586F84E2           ADD      R6,R4,#+352
   \   00000028   ........           _BLF     ??erase_1,??erase??rA_1
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA_1
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000003C   556F84E2           ADD      R6,R4,#+340
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     ??_Tidy0_2,??_Tidy0??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           _BLF     `?~PRogramObject`,`?~PRogramObject??rA`
   \   0000005C   010015E3           TST      R5,#0x1
   \   00000060   0100000A           BEQ      `?~SaabProtcol_1`
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~SaabProtcol_1`:
   \   0000006C   ........           B        ?Subroutine15

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     36          
     37          ///////////////////////////////////////////////////////////////
     38          //
     39          // Routines for the Configuration
     40          //
     41          ///////////////////////////////////////////////////////////////
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          void SaabProtcol::WriteConfigToFile(TSNConfigString& ConfigString) {
   \                     ??WriteConfigToFile:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     44          
     45              AnsiString LocalString;
     46              LocalString += KeyWord(C_PRO_SAAB_PROTOCOL) + CrLfStr;
   \   00000004   E8849FE5           LDR      R8,??WriteConfigToFile_1  ;; CrLfStr
   \   00000008   AFDF4DE2           SUB      SP,SP,#+700
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
     47              LocalString += TabStr1 + KeyWord(C_TCU_ADDRESS) + (AnsiString)TCUAddress + CrLfStr;
   \   00000014   DC749FE5           LDR      R7,??WriteConfigToFile_1+0x4  ;; TabStr1
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000020   FA1EA0E3           MOV      R1,#+4000
   \   00000024   70008DE2           ADD      R0,SP,#+112
   \   00000028   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000002C   0820A0E1           MOV      R2,R8
   \   00000030   70108DE2           ADD      R1,SP,#+112
   \   00000034   54008DE2           ADD      R0,SP,#+84
   \   00000038   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000003C   ........           LDR      R0,??DataTable6  ;; ??npos
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   006090E5           LDR      R6,[R0, #+0]
   \   00000048   54108DE2           ADD      R1,SP,#+84
   \   0000004C   0630A0E1           MOV      R3,R6
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     ??append,??append??rA
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   54008DE2           ADD      R0,SP,#+84
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   70008DE2           ADD      R0,SP,#+112
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000078   4C1194E5           LDR      R1,[R4, #+332]
   \   0000007C   9A0F8DE2           ADD      R0,SP,#+616
   \   00000080   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000084   0090A0E1           MOV      R9,R0
   \   00000088   0510A0E3           MOV      R1,#+5
   \   0000008C   801E81E3           ORR      R1,R1,#0x800
   \   00000090   E0008DE2           ADD      R0,SP,#+224
   \   00000094   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000098   E0208DE2           ADD      R2,SP,#+224
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   C4008DE2           ADD      R0,SP,#+196
   \   000000A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A8   0920A0E1           MOV      R2,R9
   \   000000AC   C4108DE2           ADD      R1,SP,#+196
   \   000000B0   A8008DE2           ADD      R0,SP,#+168
   \   000000B4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000B8   0820A0E1           MOV      R2,R8
   \   000000BC   A8108DE2           ADD      R1,SP,#+168
   \   000000C0   8C008DE2           ADD      R0,SP,#+140
   \   000000C4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000C8   0630A0E1           MOV      R3,R6
   \   000000CC   0020A0E3           MOV      R2,#+0
   \   000000D0   8C108DE2           ADD      R1,SP,#+140
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   ........           _BLF     ??append,??append??rA
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   8C008DE2           ADD      R0,SP,#+140
   \   000000E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   A8008DE2           ADD      R0,SP,#+168
   \   000000F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   9A0F8DE2           ADD      R0,SP,#+616
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   C4008DE2           ADD      R0,SP,#+196
   \   00000118   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   E0008DE2           ADD      R0,SP,#+224
   \   00000128   ........           _BLF     ??_Tidy,??_Tidy??rA
     48              LocalString += TabStr1 + KeyWord(C_TCU_PORT_NO) + (AnsiString)WinUart + CrLfStr;
   \   0000012C   501194E5           LDR      R1,[R4, #+336]
   \   00000130   A10F8DE2           ADD      R0,SP,#+644
   \   00000134   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000138   0090A0E1           MOV      R9,R0
   \   0000013C   0B10A0E3           MOV      R1,#+11
   \   00000140   801E81E3           ORR      R1,R1,#0x800
   \   00000144   540F8DE2           ADD      R0,SP,#+336
   \   00000148   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000014C   542F8DE2           ADD      R2,SP,#+336
   \   00000150   0710A0E1           MOV      R1,R7
   \   00000154   4D0F8DE2           ADD      R0,SP,#+308
   \   00000158   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000015C   0920A0E1           MOV      R2,R9
   \   00000160   4D1F8DE2           ADD      R1,SP,#+308
   \   00000164   460F8DE2           ADD      R0,SP,#+280
   \   00000168   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000016C   0820A0E1           MOV      R2,R8
   \   00000170   461F8DE2           ADD      R1,SP,#+280
   \   00000174   FC008DE2           ADD      R0,SP,#+252
   \   00000178   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000017C   0630A0E1           MOV      R3,R6
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   FC108DE2           ADD      R1,SP,#+252
   \   00000188   0D00A0E1           MOV      R0,SP
   \   0000018C   ........           _BLF     ??append,??append??rA
   \   00000190   0020A0E3           MOV      R2,#+0
   \   00000194   0110A0E3           MOV      R1,#+1
   \   00000198   FC008DE2           ADD      R0,SP,#+252
   \   0000019C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A0   0020A0E3           MOV      R2,#+0
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   460F8DE2           ADD      R0,SP,#+280
   \   000001AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B0   0020A0E3           MOV      R2,#+0
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   A10F8DE2           ADD      R0,SP,#+644
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C0   0020A0E3           MOV      R2,#+0
   \   000001C4   0110A0E3           MOV      R1,#+1
   \   000001C8   4D0F8DE2           ADD      R0,SP,#+308
   \   000001CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D0   0020A0E3           MOV      R2,#+0
   \   000001D4   0110A0E3           MOV      R1,#+1
   \   000001D8   540F8DE2           ADD      R0,SP,#+336
   \   000001DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     49          
     50              LocalString += MakeConfigString();   //common
   \   000001E0   A43094E5           LDR      R3,[R4, #+164]
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   0C3093E5           LDR      R3,[R3, #+12]
   \   000001EC   5B1F8DE2           ADD      R1,SP,#+364
   \   000001F0   0400A0E1           MOV      R0,R4
   \   000001F4   0FE0A0E1           MOV      LR,PC
   \   000001F8   13FF2FE1           BX       R3
   \   000001FC   0630A0E1           MOV      R3,R6
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   5B1F8DE2           ADD      R1,SP,#+364
   \   00000208   0D00A0E1           MOV      R0,SP
   \   0000020C   ........           _BLF     ??append,??append??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   5B0F8DE2           ADD      R0,SP,#+364
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
     51              LocalString += TabStr1 + KeyWord(C_DELAY) + TabStr1 + (AnsiString)Delay + CrLfStr;
   \   00000220   6C1194E5           LDR      R1,[R4, #+364]
   \   00000224   A80F8DE2           ADD      R0,SP,#+672
   \   00000228   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000022C   0090A0E1           MOV      R9,R0
   \   00000230   E310A0E3           MOV      R1,#+227
   \   00000234   7E0F8DE2           ADD      R0,SP,#+504
   \   00000238   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000023C   7E2F8DE2           ADD      R2,SP,#+504
   \   00000240   0710A0E1           MOV      R1,R7
   \   00000244   770F8DE2           ADD      R0,SP,#+476
   \   00000248   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000024C   0720A0E1           MOV      R2,R7
   \   00000250   771F8DE2           ADD      R1,SP,#+476
   \   00000254   700F8DE2           ADD      R0,SP,#+448
   \   00000258   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000025C   0920A0E1           MOV      R2,R9
   \   00000260   701F8DE2           ADD      R1,SP,#+448
   \   00000264   690F8DE2           ADD      R0,SP,#+420
   \   00000268   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000026C   0820A0E1           MOV      R2,R8
   \   00000270   691F8DE2           ADD      R1,SP,#+420
   \   00000274   620F8DE2           ADD      R0,SP,#+392
   \   00000278   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000027C   0630A0E1           MOV      R3,R6
   \   00000280   0020A0E3           MOV      R2,#+0
   \   00000284   621F8DE2           ADD      R1,SP,#+392
   \   00000288   0D00A0E1           MOV      R0,SP
   \   0000028C   ........           _BLF     ??append,??append??rA
   \   00000290   0020A0E3           MOV      R2,#+0
   \   00000294   0110A0E3           MOV      R1,#+1
   \   00000298   620F8DE2           ADD      R0,SP,#+392
   \   0000029C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A0   0020A0E3           MOV      R2,#+0
   \   000002A4   0110A0E3           MOV      R1,#+1
   \   000002A8   690F8DE2           ADD      R0,SP,#+420
   \   000002AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002B0   0020A0E3           MOV      R2,#+0
   \   000002B4   0110A0E3           MOV      R1,#+1
   \   000002B8   A80F8DE2           ADD      R0,SP,#+672
   \   000002BC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C0   0020A0E3           MOV      R2,#+0
   \   000002C4   0110A0E3           MOV      R1,#+1
   \   000002C8   700F8DE2           ADD      R0,SP,#+448
   \   000002CC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   0110A0E3           MOV      R1,#+1
   \   000002D8   770F8DE2           ADD      R0,SP,#+476
   \   000002DC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002E0   0020A0E3           MOV      R2,#+0
   \   000002E4   0110A0E3           MOV      R1,#+1
   \   000002E8   7E0F8DE2           ADD      R0,SP,#+504
   \   000002EC   ........           _BLF     ??_Tidy,??_Tidy??rA
     52              if (!ExtraParameters.empty()) {
   \   000002F0   589FA0E3           MOV      R9,#+352
   \   000002F4   040089E0           ADD      R0,R9,R4
   \   000002F8   041090E5           LDR      R1,[R0, #+4]
   \   000002FC   000090E5           LDR      R0,[R0, #+0]
   \   00000300   0080A0E3           MOV      R8,#+0
   \   00000304   000041E0           SUB      R0,R1,R0
   \   00000308   1810A0E3           MOV      R1,#+24
   \   0000030C   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000310   000051E3           CMP      R1,#+0
   \   00000314   2100000A           BEQ      ??WriteConfigToFile_2
     53                  for (unsigned i = 0; i < ExtraParameters.size(); i++) {
   \   00000318   00A0A0E3           MOV      R10,#+0
   \   0000031C   170000EA           B        ??WriteConfigToFile_3
     54                      LocalString += TabStr1 + KeyWord(ExtraParameters[i].Key);
   \                     ??WriteConfigToFile_4:
   \   00000320   041099E7           LDR      R1,[R9, +R4]
   \   00000324   1800A0E3           MOV      R0,#+24
   \   00000328   901A21E0           MLA      R1,R0,R10,R1
   \   0000032C   001091E5           LDR      R1,[R1, #+0]
   \   00000330   1C008DE2           ADD      R0,SP,#+28
   \   00000334   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000338   1C208DE2           ADD      R2,SP,#+28
   \   0000033C   0710A0E1           MOV      R1,R7
   \   00000340   38008DE2           ADD      R0,SP,#+56
   \   00000344   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000348   0630A0E1           MOV      R3,R6
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   38108DE2           ADD      R1,SP,#+56
   \   00000354   0D00A0E1           MOV      R0,SP
   \   00000358   ........           _BLF     ??append,??append??rA
   \   0000035C   0820A0E1           MOV      R2,R8
   \   00000360   0110A0E3           MOV      R1,#+1
   \   00000364   38008DE2           ADD      R0,SP,#+56
   \   00000368   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000036C   0820A0E1           MOV      R2,R8
   \   00000370   0110A0E3           MOV      R1,#+1
   \   00000374   1C008DE2           ADD      R0,SP,#+28
   \   00000378   ........           _BLF     ??_Tidy,??_Tidy??rA
     55                  }
   \   0000037C   01A08AE2           ADD      R10,R10,#+1
   \                     ??WriteConfigToFile_3:
   \   00000380   040089E0           ADD      R0,R9,R4
   \   00000384   041090E5           LDR      R1,[R0, #+4]
   \   00000388   000090E5           LDR      R0,[R0, #+0]
   \   0000038C   000041E0           SUB      R0,R1,R0
   \   00000390   1810A0E3           MOV      R1,#+24
   \   00000394   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000398   01005AE1           CMP      R10,R1
   \   0000039C   DFFFFF3A           BCC      ??WriteConfigToFile_4
     56              }
     57              if (!BlockVector.empty()) {
   \                     ??WriteConfigToFile_2:
   \   000003A0   559FA0E3           MOV      R9,#+340
   \   000003A4   040089E0           ADD      R0,R9,R4
   \   000003A8   041090E5           LDR      R1,[R0, #+4]
   \   000003AC   000090E5           LDR      R0,[R0, #+0]
   \   000003B0   000041E0           SUB      R0,R1,R0
   \   000003B4   0C10A0E3           MOV      R1,#+12
   \   000003B8   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   000003BC   000051E3           CMP      R1,#+0
   \   000003C0   2100000A           BEQ      ??WriteConfigToFile_5
     58                  for (unsigned i = 0; i < BlockVector.size(); i++) {
   \   000003C4   180000EA           B        ??WriteConfigToFile_6
     59                      LocalString += TabStr1 + KeyWord(BlockVector[i].ValKey + C_SVT_OFFSET);
   \                     ??WriteConfigToFile_7:
   \   000003C8   041099E7           LDR      R1,[R9, +R4]
   \   000003CC   0C00A0E3           MOV      R0,#+12
   \   000003D0   901821E0           MLA      R1,R0,R8,R1
   \   000003D4   000091E5           LDR      R0,[R1, #+0]
     60                  }
   \   000003D8   018088E2           ADD      R8,R8,#+1
   \   000003DC   401B80E2           ADD      R1,R0,#+65536
   \   000003E0   38008DE2           ADD      R0,SP,#+56
   \   000003E4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003E8   38208DE2           ADD      R2,SP,#+56
   \   000003EC   0710A0E1           MOV      R1,R7
   \   000003F0   1C008DE2           ADD      R0,SP,#+28
   \   000003F4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003F8   0630A0E1           MOV      R3,R6
   \   000003FC   0020A0E3           MOV      R2,#+0
   \   00000400   1C108DE2           ADD      R1,SP,#+28
   \   00000404   0D00A0E1           MOV      R0,SP
   \   00000408   ........           _BLF     ??append,??append??rA
   \   0000040C   0020A0E3           MOV      R2,#+0
   \   00000410   0110A0E3           MOV      R1,#+1
   \   00000414   1C008DE2           ADD      R0,SP,#+28
   \   00000418   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000041C   0020A0E3           MOV      R2,#+0
   \   00000420   0110A0E3           MOV      R1,#+1
   \   00000424   38008DE2           ADD      R0,SP,#+56
   \   00000428   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??WriteConfigToFile_6:
   \   0000042C   040089E0           ADD      R0,R9,R4
   \   00000430   041090E5           LDR      R1,[R0, #+4]
   \   00000434   000090E5           LDR      R0,[R0, #+0]
   \   00000438   000041E0           SUB      R0,R1,R0
   \   0000043C   0C10A0E3           MOV      R1,#+12
   \   00000440   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000444   010058E1           CMP      R8,R1
   \   00000448   DEFFFF3A           BCC      ??WriteConfigToFile_7
     61              }
     62              LocalString += KeyWord(C_PRO_END) + CrLfStr2;
   \                     ??WriteConfigToFile_5:
   \   0000044C   FA1FA0E3           MOV      R1,#+1000
   \   00000450   8C0F8DE2           ADD      R0,SP,#+560
   \   00000454   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000458   9C209FE5           LDR      R2,??WriteConfigToFile_1+0x8  ;; CrLfStr2
   \   0000045C   8C1F8DE2           ADD      R1,SP,#+560
   \   00000460   850F8DE2           ADD      R0,SP,#+532
   \   00000464   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000468   0630A0E1           MOV      R3,R6
   \   0000046C   0020A0E3           MOV      R2,#+0
   \   00000470   851F8DE2           ADD      R1,SP,#+532
   \   00000474   0D00A0E1           MOV      R0,SP
   \   00000478   ........           _BLF     ??append,??append??rA
   \   0000047C   0020A0E3           MOV      R2,#+0
   \   00000480   0110A0E3           MOV      R1,#+1
   \   00000484   850F8DE2           ADD      R0,SP,#+532
   \   00000488   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000048C   0020A0E3           MOV      R2,#+0
   \   00000490   0110A0E3           MOV      R1,#+1
   \   00000494   8C0F8DE2           ADD      R0,SP,#+560
   \   00000498   ........           _BLF     ??_Tidy,??_Tidy??rA
     63          
     64              ConfigString.AddString(LocalString);
   \   0000049C   0020A0E3           MOV      R2,#+0
   \   000004A0   0010A0E3           MOV      R1,#+0
   \   000004A4   930F8DE2           ADD      R0,SP,#+588
   \   000004A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004AC   0630A0E1           MOV      R3,R6
   \   000004B0   0020A0E3           MOV      R2,#+0
   \   000004B4   0D10A0E1           MOV      R1,SP
   \   000004B8   930F8DE2           ADD      R0,SP,#+588
   \   000004BC   ........           _BLF     ??assign,??assign??rA
   \   000004C0   931F8DE2           ADD      R1,SP,#+588
   \   000004C4   0500A0E1           MOV      R0,R5
   \   000004C8   ........           _BLF     ??AddString,??AddString??rA
   \   000004CC   0020A0E3           MOV      R2,#+0
   \   000004D0   0110A0E3           MOV      R1,#+1
   \   000004D4   930F8DE2           ADD      R0,SP,#+588
   \   000004D8   ........           _BLF     ??_Tidy,??_Tidy??rA
     65          }
   \   000004DC   0020A0E3           MOV      R2,#+0
   \   000004E0   0110A0E3           MOV      R1,#+1
   \   000004E4   0D00A0E1           MOV      R0,SP
   \   000004E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004EC   AFDF8DE2           ADD      SP,SP,#+700
   \   000004F0   ........           B        ?Subroutine16
   \                     ??WriteConfigToFile_1:
   \   000004F4   ........           DC32     CrLfStr
   \   000004F8   ........           DC32     TabStr1
   \   000004FC   ........           DC32     CrLfStr2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   F047BDE8           POP      {R4-R10,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine16_0:
   \   00000008   ........           DC32     `?<Constant "V">`
     66          //---------------------------------------------------------------------------
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          int SaabProtcol::LoadConfigFromFile(TSNConfigString& ConfigString) {
   \                     ??LoadConfigFromFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   98D04DE2           SUB      SP,SP,#+152
   \   00000008   0150A0E1           MOV      R5,R1
     69              SetLineNumber(ConfigString.LineCount);
   \   0000000C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
     70              bool NoError = true;
   \   00000018   0160A0E3           MOV      R6,#+1
     71              int ErrorLine = 0;
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0170E0E1           MVN      R7,R1
     72              int Key;
     73              do {
     74                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_1:
   \   00000028   0030A0E3           MOV      R3,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \   00000030   44108DE2           ADD      R1,SP,#+68
     75                  if (ErrorLine) {
   \   00000034   04939FE5           LDR      R9,??LoadConfigFromFile_2  ;; `?<Constant {4001, 1024, 100, false, 1120, 0}>`
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000040   00009DE5           LDR      R0,[SP, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0B00000A           BEQ      ??LoadConfigFromFile_3
     76                      if (ErrorLine != EOF) {
   \   0000004C   070050E1           CMP      R0,R7
   \   00000050   AE00000A           BEQ      ??LoadConfigFromFile_4
     77                          GiveConfigWarning("Saab Protocol", ErrorLine);
   \   00000054   181089E2           ADD      R1,R9,#+24
   \   00000058   10008DE2           ADD      R0,SP,#+16
   \   0000005C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000060   00109DE5           LDR      R1,[SP, #+0]
   \   00000064   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   10008DE2           ADD      R0,SP,#+16
   \                     ??LoadConfigFromFile_5:
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000078   A40000EA           B        ??LoadConfigFromFile_4
     78                      }
     79                  } else {
     80                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigFromFile_3:
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   10008DE2           ADD      R0,SP,#+16
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   ........           LDR      R0,??DataTable6  ;; ??npos
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   00A090E5           LDR      R10,[R0, #+0]
   \   00000098   44108DE2           ADD      R1,SP,#+68
   \   0000009C   0A30A0E1           MOV      R3,R10
   \   000000A0   10008DE2           ADD      R0,SP,#+16
   \   000000A4   ........           _BLF     ??assign,??assign??rA
   \   000000A8   10008DE2           ADD      R0,SP,#+16
   \   000000AC   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000B0   0080A0E1           MOV      R8,R0
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   10008DE2           ADD      R0,SP,#+16
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
     81                      switch (Key) {
   \   000000C4   580FA0E3           MOV      R0,#+352
   \   000000C8   E30058E3           CMP      R8,#+227
   \   000000CC   5B00000A           BEQ      ??LoadConfigFromFile_6
   \   000000D0   FA0F58E3           CMP      R8,#+1000
   \   000000D4   EA20A013           MOVNE    R2,#+234
   \   000000D8   C02F8213           ORRNE    R2,R2,#0x300
   \   000000DC   02005811           CMPNE    R8,R2
   \   000000E0   8A00000A           BEQ      ??LoadConfigFromFile_4
   \   000000E4   012082E3           ORR      R2,R2,#0x1
   \   000000E8   020058E1           CMP      R8,R2
   \   000000EC   3A00000A           BEQ      ??LoadConfigFromFile_7
   \   000000F0   FB0F58E3           CMP      R8,#+1004
   \   000000F4   8500000A           BEQ      ??LoadConfigFromFile_4
   \   000000F8   0520A0E3           MOV      R2,#+5
   \   000000FC   802E82E3           ORR      R2,R2,#0x800
   \   00000100   020058E1           CMP      R8,R2
   \   00000104   3800000A           BEQ      ??LoadConfigFromFile_8
   \   00000108   062082E2           ADD      R2,R2,#+6
   \   0000010C   020058E1           CMP      R8,R2
   \   00000110   4100000A           BEQ      ??LoadConfigFromFile_9
   \   00000114   A120A0E3           MOV      R2,#+161
   \   00000118   F02E82E3           ORR      R2,R2,#0xF00
   \   0000011C   020058E1           CMP      R8,R2
   \   00000120   4F00000A           BEQ      ??LoadConfigFromFile_10
   \   00000124   012082E2           ADD      R2,R2,#+1
   \   00000128   020058E1           CMP      R8,R2
   \   0000012C   5200000A           BEQ      ??LoadConfigFromFile_11
   \   00000130   012082E3           ORR      R2,R2,#0x1
   \   00000134   020058E1           CMP      R8,R2
   \   00000138   5400000A           BEQ      ??LoadConfigFromFile_12
   \   0000013C   012082E2           ADD      R2,R2,#+1
   \   00000140   020058E1           CMP      R8,R2
   \   00000144   5700000A           BEQ      ??LoadConfigFromFile_13
   \   00000148   F4219FE5           LDR      R2,??LoadConfigFromFile_2+0x4  ;; 0x103e9
   \   0000014C   020058E1           CMP      R8,R2
   \   00000150   03208212           ADDNE    R2,R2,#+3
   \   00000154   02005811           CMPNE    R8,R2
   \   00000158   02208213           ORRNE    R2,R2,#0x2
   \   0000015C   02005811           CMPNE    R8,R2
   \   00000160   0F208212           ADDNE    R2,R2,#+15
   \   00000164   02005811           CMPNE    R8,R2
   \   00000168   01208212           ADDNE    R2,R2,#+1
   \   0000016C   02005811           CMPNE    R8,R2
   \   00000170   01208213           ORRNE    R2,R2,#0x1
   \   00000174   02005811           CMPNE    R8,R2
   \   00000178   410B5813           CMPNE    R8,#+66560
   \   0000017C   4B00000A           BEQ      ??LoadConfigFromFile_14
     82                      default:
     83                          GiveConfigWarning("Saab protocol", InputKeyWord, ConfigString.LineCount);
   \   00000180   0020A0E3           MOV      R2,#+0
   \   00000184   0010A0E3           MOV      R1,#+0
   \   00000188   60008DE2           ADD      R0,SP,#+96
   \   0000018C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000190   0A30A0E1           MOV      R3,R10
   \   00000194   0020A0E3           MOV      R2,#+0
   \   00000198   44108DE2           ADD      R1,SP,#+68
   \   0000019C   60008DE2           ADD      R0,SP,#+96
   \   000001A0   ........           _BLF     ??assign,??assign??rA
   \   000001A4   281089E2           ADD      R1,R9,#+40
   \   000001A8   7C008DE2           ADD      R0,SP,#+124
   \   000001AC   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001B0   1C2095E5           LDR      R2,[R5, #+28]
   \   000001B4   60108DE2           ADD      R1,SP,#+96
   \   000001B8   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000001BC   0020A0E3           MOV      R2,#+0
   \   000001C0   0110A0E3           MOV      R1,#+1
   \   000001C4   60008DE2           ADD      R0,SP,#+96
   \   000001C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001CC   0020A0E3           MOV      R2,#+0
   \   000001D0   0110A0E3           MOV      R1,#+1
   \   000001D4   7C008DE2           ADD      R0,SP,#+124
   \   000001D8   A5FFFFEA           B        ??LoadConfigFromFile_5
     84                          break;
     85                      case C_PRO_END:
     86                      case C_PRO_END_COMMON:
     87                      case C_PRO_END_PRO:
     88                          break;
     89                      case C_PRO_START_PRO:
     90                          PRogramObject::LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_7:
   \   000001DC   0510A0E1           MOV      R1,R5
   \   000001E0   0400A0E1           MOV      R0,R4
   \   000001E4   ........           _BLF     ??LoadConfigString,??LoadConfigString??rA
   \   000001E8   480000EA           B        ??LoadConfigFromFile_4
     91                          break;
     92                      case C_TCU_ADDRESS:
     93                          TCUAddress = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigFromFile_8:
   \   000001EC   0020A0E3           MOV      R2,#+0
   \   000001F0   0D10A0E1           MOV      R1,SP
   \   000001F4   0500A0E1           MOV      R0,R5
   \   000001F8   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000001FC   4C0184E5           STR      R0,[R4, #+332]
     94                          NoError = !ErrorLine;
   \   00000200   00009DE5           LDR      R0,[SP, #+0]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   0100001A           BNE      ??LoadConfigFromFile_15
   \                     ??LoadConfigFromFile_16:
   \   0000020C   0160A0E3           MOV      R6,#+1
   \   00000210   3E0000EA           B        ??LoadConfigFromFile_4
   \                     ??LoadConfigFromFile_15:
   \   00000214   0060A0E3           MOV      R6,#+0
   \   00000218   3C0000EA           B        ??LoadConfigFromFile_4
     95                          break;
     96                      case C_TCU_PORT_NO:
     97                          WinUart = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigFromFile_9:
   \   0000021C   0020A0E3           MOV      R2,#+0
   \   00000220   0D10A0E1           MOV      R1,SP
   \   00000224   0500A0E1           MOV      R0,R5
   \   00000228   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   0000022C   500184E5           STR      R0,[R4, #+336]
     98                          NoError = !ErrorLine;
   \   00000230   00009DE5           LDR      R0,[SP, #+0]
   \   00000234   000050E3           CMP      R0,#+0
   \   00000238   F5FFFF1A           BNE      ??LoadConfigFromFile_15
   \   0000023C   F2FFFFEA           B        ??LoadConfigFromFile_16
     99                          break;
    100                      case C_DELAY:
    101                          Delay = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigFromFile_6:
   \   00000240   0020A0E3           MOV      R2,#+0
   \   00000244   0D10A0E1           MOV      R1,SP
   \   00000248   0500A0E1           MOV      R0,R5
   \   0000024C   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000250   6C0184E5           STR      R0,[R4, #+364]
    102                          NoError = !ErrorLine;
   \   00000254   00009DE5           LDR      R0,[SP, #+0]
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   EAFFFF0A           BEQ      ??LoadConfigFromFile_16
   \   00000260   EBFFFFEA           B        ??LoadConfigFromFile_15
    103                          break;
    104                      case C_SAAB_EXPORT_LPRESS    :
    105                          {
    106                              SaabData tmpData = { C_SAAB_EXPORT_LPRESS, SVT_PRESSURE, 100, false, C_PRO_LINEPRESS, SAAB_ACT_NORMAL };
   \                     ??LoadConfigFromFile_10:
   \   00000264   0C5C99E8           LDM      R9,{R2,R3,R10-R12,LR}
   \   00000268   2C108DE2           ADD      R1,SP,#+44
   \   0000026C   0C5C81E8           STM      R1,{R2,R3,R10-R12,LR}
    107                              ExtraParameters.push_back(tmpData);
   \                     ??LoadConfigFromFile_17:
   \   00000270   040080E0           ADD      R0,R0,R4
   \                     ??LoadConfigFromFile_18:
   \   00000274   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
   \   00000278   240000EA           B        ??LoadConfigFromFile_4
    108                          }
    109                          break;
    110                      case C_SAAB_EXPORT_TPRESS    :
    111                          {
    112                              SaabData tmpData = { C_SAAB_EXPORT_TPRESS, SVT_PRESSURE, 1000, true, C_PRO_TANKPRESS, SAAB_ACT_NORMAL };
   \                     ??LoadConfigFromFile_11:
   \   0000027C   C4209FE5           LDR      R2,??LoadConfigFromFile_2+0x8  ;; `?<Constant {4002, 1024, 1000, true, 1060, 0}>`
   \                     ??LoadConfigFromFile_19:
   \   00000280   2C108DE2           ADD      R1,SP,#+44
   \   00000284   085E92E8           LDM      R2,{R3,R9-R12,LR}
   \   00000288   085E81E8           STM      R1,{R3,R9-R12,LR}
    113                              ExtraParameters.push_back(tmpData);
   \   0000028C   F7FFFFEA           B        ??LoadConfigFromFile_17
    114                          }
    115                          break;
    116                      case C_SAAB_EXPORT_ATM_PRESS :
    117                          {
    118                              SaabData tmpData = { C_SAAB_EXPORT_ATM_PRESS, SVT_ATM_PRESSURE, 1000, false, C_PRO_ATMREFSENS, SAAB_ACT_SPECIAL };
   \                     ??LoadConfigFromFile_12:
   \   00000290   B4209FE5           LDR      R2,??LoadConfigFromFile_2+0xC  ;; `?<Constant {4003, 1351, 1000, false, 1020, 1}>`
   \   00000294   2C108DE2           ADD      R1,SP,#+44
   \   00000298   085E92E8           LDM      R2,{R3,R9-R12,LR}
    119                              ExtraParameters.push_back(tmpData);
   \   0000029C   040080E0           ADD      R0,R0,R4
   \   000002A0   085E81E8           STM      R1,{R3,R9-R12,LR}
   \   000002A4   F2FFFFEA           B        ??LoadConfigFromFile_18
    120                          }
    121                          break;
    122                      case C_SAAB_EXPORT_TEMP      :
    123                          {
    124                              SaabData tmpData = { C_SAAB_EXPORT_TEMP, SVT_TEMP, 10, true, C_PRO_TEMP, SAAB_ACT_NORMAL };
   \                     ??LoadConfigFromFile_13:
   \   000002A8   A0209FE5           LDR      R2,??LoadConfigFromFile_2+0x10  ;; `?<Constant {4004, 1004, 10, true, 1070, 0}>`
   \   000002AC   F3FFFFEA           B        ??LoadConfigFromFile_19
    125                              ExtraParameters.push_back(tmpData);
    126                          }
    127                          break;
    128                      case SVT_LEVEL_SENSOR  + C_SVT_OFFSET:
    129                      case SVT_VOLPERCENT    + C_SVT_OFFSET:
    130                      case SVT_TEMP          + C_SVT_OFFSET:
    131                      case SVT_WEIGHT        + C_SVT_OFFSET:
    132                      case SVT_PRESSURE      + C_SVT_OFFSET:
    133                      case SVT_DENSITY       + C_SVT_OFFSET:
    134                      case SVT_LOADRATE      + C_SVT_OFFSET:
    135                          {
    136                              unsigned FTank, NoOfTanks;
    137                              FTank = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigFromFile_14:
   \   000002B0   0020A0E3           MOV      R2,#+0
   \   000002B4   0D10A0E1           MOV      R1,SP
   \   000002B8   0500A0E1           MOV      R0,R5
   \   000002BC   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000002C0   0090A0E1           MOV      R9,R0
    138                              if (!ErrorLine) {
   \   000002C4   00009DE5           LDR      R0,[SP, #+0]
   \   000002C8   000050E3           CMP      R0,#+0
   \   000002CC   0F00001A           BNE      ??LoadConfigFromFile_4
    139                                  NoOfTanks = ConfigString.ReadLong(ErrorLine);
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   0D10A0E1           MOV      R1,SP
   \   000002D8   0500A0E1           MOV      R0,R5
   \   000002DC   ........           _BLF     ??ReadLong,??ReadLong??rA
    140                                  if (!ErrorLine) {
   \   000002E0   00109DE5           LDR      R1,[SP, #+0]
   \   000002E4   000051E3           CMP      R1,#+0
   \   000002E8   0800001A           BNE      ??LoadConfigFromFile_4
    141                                      BlockDef B = { Key - C_SVT_OFFSET, FTank, NoOfTanks };
   \   000002EC   FF24A0E3           MOV      R2,#-16777216
   \   000002F0   FF2882E3           ORR      R2,R2,#0xFF0000
   \   000002F4   082082E0           ADD      R2,R2,R8
   \   000002F8   04208DE5           STR      R2,[SP, #+4]
   \   000002FC   08908DE5           STR      R9,[SP, #+8]
   \   00000300   0C008DE5           STR      R0,[SP, #+12]
    142                                      BlockVector.push_back(B);
   \   00000304   04108DE2           ADD      R1,SP,#+4
   \   00000308   550F84E2           ADD      R0,R4,#+340
   \   0000030C   ........           _BLF     ??_Push_back0,??_Push_back0??rA_2
    143                                  }
    144                              }
    145                          }
    146                          break;
    147                      }
    148                  }
    149              }
   \                     ??LoadConfigFromFile_4:
   \   00000310   0020A0E3           MOV      R2,#+0
   \   00000314   0110A0E3           MOV      R1,#+1
   \   00000318   44008DE2           ADD      R0,SP,#+68
   \   0000031C   ........           _BLF     ??_Tidy,??_Tidy??rA
    150              while (NoError && (ErrorLine != EOF) && (Key != C_PRO_END));
   \   00000320   000056E3           CMP      R6,#+0
   \   00000324   00009D15           LDRNE    R0,[SP, #+0]
   \   00000328   07005011           CMPNE    R0,R7
   \   0000032C   FA0F5813           CMPNE    R8,#+1000
   \   00000330   3CFFFF1A           BNE      ??LoadConfigFromFile_1
    151              return ErrorLine;
   \   00000334   00009DE5           LDR      R0,[SP, #+0]
   \   00000338   98D08DE2           ADD      SP,SP,#+152
   \   0000033C   ........           B        ?Subroutine17
   \                     ??LoadConfigFromFile_2:
   \   00000340   ........           DC32     `?<Constant {4001, 1024, 100, false, 1120, 0}>`
   \   00000344   E9030100           DC32     0x103e9
   \   00000348   ........           DC32     `?<Constant {4002, 1024, 1000, true, 1060, 0}>`
   \   0000034C   ........           DC32     `?<Constant {4003, 1351, 1000, false, 1020, 1}>`
   \   00000350   ........           DC32     `?<Constant {4004, 1004, 10, true, 1070, 0}>`
    152          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine17:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine17_0:
   \   00000008   ........           DC32     ??ReceiveWeightVolume
    153          
    154          
    155          
    156          

   \                                 In segment CODE, align 4, keep-with-next
    157          void SaabProtcol::SendString(TSNUart *PortPtr, char *TxBuf, int OutPtr) {
   \                     ??SendString:
   \   00000000   7F402DE9           PUSH     {R0-R6,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0360A0E1           MOV      R6,R3
    158              unsigned short CheckSum = 0;
   \   00000010   0020A0E3           MOV      R2,#+0
    159              for (int i = 0; i < OutPtr; i++) {
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   040000EA           B        ??SendString_1
    160                  CheckSum += TxBuf[i];
   \                     ??SendString_2:
   \   0000001C   0510D0E7           LDRB     R1,[R0, +R5]
    161              }
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   022081E0           ADD      R2,R1,R2
   \   00000028   0228A0E1           MOV      R2,R2, LSL #+16
   \   0000002C   2228A0E1           MOV      R2,R2, LSR #+16
   \                     ??SendString_1:
   \   00000030   060050E1           CMP      R0,R6
   \   00000034   F8FFFFBA           BLT      ??SendString_2
    162              OutPtr += sprintf(&TxBuf[OutPtr], "%04X\r\n", CheckSum);
   \   00000038   80109FE5           LDR      R1,??SendString_3  ;; `?<Constant "%04X\\r\\n">`
   \   0000003C   050086E0           ADD      R0,R6,R5
   \   00000040   ........           _BLF     sprintf,??sprintf??rA
   \   00000044   062080E0           ADD      R2,R0,R6
    163              PortPtr->Send((U8 *)TxBuf, OutPtr, SEND_COMPLETE_EVENT);
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   0510A0E1           MOV      R1,R5
   \   00000054   DC5094E5           LDR      R5,[R4, #+220]
   \   00000058   0130A0E3           MOV      R3,#+1
   \   0000005C   045095E5           LDR      R5,[R5, #+4]
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   0FE0A0E1           MOV      LR,PC
   \   00000068   15FF2FE1           BX       R5
    164              switch (PortPtr->HWProtocol) {
   \   0000006C   A00094E5           LDR      R0,[R4, #+160]
   \   00000070   04D08DE2           ADD      SP,SP,#+4
   \   00000074   4C10A0E3           MOV      R1,#+76
   \   00000078   7C1D81E3           ORR      R1,R1,#0x1F00
   \   0000007C   010050E1           CMP      R0,R1
   \   00000080   0C00001A           BNE      ??SendString_4
    165              case C_UART_HWPRO_485 :
    166                  {
    167                      PortPtr->ClearRxBuffer();
   \   00000084   DC1094E5           LDR      R1,[R4, #+220]
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   101091E5           LDR      R1,[R1, #+16]
   \   00000090   0FE0A0E1           MOV      LR,PC
   \   00000094   11FF2FE1           BX       R1
    168                      U8 tmpBuf[16];
    169                      PortPtr->Receive(tmpBuf, 16, 10);  // Be sure to remove the ecco
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   DC4094E5           LDR      R4,[R4, #+220]
   \   000000A0   0A30A0E3           MOV      R3,#+10
   \   000000A4   084094E5           LDR      R4,[R4, #+8]
   \   000000A8   1020A0E3           MOV      R2,#+16
   \   000000AC   0D10A0E1           MOV      R1,SP
   \   000000B0   0FE0A0E1           MOV      LR,PC
   \   000000B4   14FF2FE1           BX       R4
    170                  }
    171                  break;
    172              case C_UART_HWPRO_232 :
    173                  break;
    174              }
    175          }
   \                     ??SendString_4:
   \   000000B8   7F40BDE8           POP      {R0-R6,LR}
   \   000000BC   1EFF2FE1           BX       LR               ;; return
   \                     ??SendString_3:
   \   000000C0   ........           DC32     `?<Constant "%04X\\r\\n">`
    176          
    177          ////////////////////////////////////////////////////////////////////////////
    178          //
    179          //  Add alarm status
    180          //
    181          ///////////////////////////////////////////////////////////////////////////
    182          

   \                                 In segment CODE, align 4, keep-with-next
    183          void SaabProtcol::AddAlarmStatus(char *OutBuf, int& OutPtr, int Index, int ObjectType) {
   \                     ??AddAlarmStatus:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   10109DE5           LDR      R1,[SP, #+16]
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0300A0E1           MOV      R0,R3
    184              // Include alarm status
    185              switch (ObjectType) {
   \   00000014   3860A0E3           MOV      R6,#+56
   \   00000018   020051E3           CMP      R1,#+2
   \   0000001C   4D00008A           BHI      ??AddAlarmStatus_2
   \   00000020   012F8FE2           ADR      R2,??AddAlarmStatus_1
   \   00000024   0120D2E7           LDRB     R2,[R2, R1]
   \   00000028   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??AddAlarmStatus_1:
   \   0000002C   28160000           DC8      +40,+22,+0,+0
    186              case SAAB_LPRESSVAL:
    187                  {
    188                      PROLinePressure *tmpPtr = (PROLinePressure *)PROXRefObject::GetSaabObject(Index);
   \                     ??AddAlarmStatus_3:
   \   00000030   ........           _BLF     ??GetSaabObject,??GetSaabObject??rA
    189                      if (tmpPtr) {
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   4200000A           BEQ      ??AddAlarmStatus_4
    190                          int AlStatus;
    191                          if (tmpPtr->HWFailure) {    // HW is first priority
   \   0000003C   3C10D0E5           LDRB     R1,[R0, #+60]
   \   00000040   000051E3           CMP      R1,#+0
    192                              AlStatus = 1;
   \   00000044   0100A013           MOVNE    R0,#+1
   \   00000048   0800001A           BNE      ??AddAlarmStatus_5
    193                          } else if (tmpPtr->HighPressurePtr->State != AlarmBasic::AlIdle) {
   \   0000004C   7C1190E5           LDR      R1,[R0, #+380]
   \   00000050   E010D1E5           LDRB     R1,[R1, #+224]
   \   00000054   000051E3           CMP      R1,#+0
    194                              AlStatus = 4;
   \   00000058   0400A013           MOVNE    R0,#+4
   \   0000005C   0300001A           BNE      ??AddAlarmStatus_5
    195                          } else if (tmpPtr->LowPressurePtr->State != AlarmBasic::AlIdle) {
   \   00000060   800190E5           LDR      R0,[R0, #+384]
   \   00000064   E000D0E5           LDRB     R0,[R0, #+224]
   \   00000068   000050E3           CMP      R0,#+0
    196                              AlStatus = 5;
   \   0000006C   0500A013           MOVNE    R0,#+5
    197                          } else AlStatus   = 0;
    198                          OutBuf[OutPtr++] = '0' + AlStatus; // Add the alarm status
   \                     ??AddAlarmStatus_5:
   \   00000070   001095E5           LDR      R1,[R5, #+0]
   \   00000074   300080E2           ADD      R0,R0,#+48
   \   00000078   012081E2           ADD      R2,R1,#+1
   \   0000007C   002085E5           STR      R2,[R5, #+0]
   \   00000080   0400C1E7           STRB     R0,[R1, +R4]
   \   00000084   330000EA           B        ??AddAlarmStatus_2
    199                      } else {
    200                          // Flag that the value is invalid
    201                          OutBuf[OutPtr++] = '8'; // Add the alarm status
    202                      }
    203                  }
    204                  break;
    205              case SAAB_TPRESSVAL:
    206                  {
    207                      PROTankPressure *tmpPtr = (PROTankPressure *)PROXRefObject::GetSaabObject(Index);
   \                     ??AddAlarmStatus_6:
   \   00000088   ........           _BLF     ??GetSaabObject,??GetSaabObject??rA
    208                      if (tmpPtr) {
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   2C00000A           BEQ      ??AddAlarmStatus_4
    209                          int AlStatus;
    210                          if (tmpPtr->HWFailure) {    // HW is first priority
   \   00000094   3C10D0E5           LDRB     R1,[R0, #+60]
   \   00000098   000051E3           CMP      R1,#+0
    211                              AlStatus = 1;
   \   0000009C   0100A013           MOVNE    R0,#+1
   \   000000A0   F2FFFF1A           BNE      ??AddAlarmStatus_5
    212                          } else if (tmpPtr->HighPressurePtr->State) {
   \   000000A4   741190E5           LDR      R1,[R0, #+372]
   \   000000A8   E010D1E5           LDRB     R1,[R1, #+224]
   \   000000AC   000051E3           CMP      R1,#+0
    213                              AlStatus = 4;
   \   000000B0   0400A013           MOVNE    R0,#+4
   \   000000B4   EDFFFF1A           BNE      ??AddAlarmStatus_5
    214                          } else if (tmpPtr->LowPressurePtr->State != AlarmBasic::AlIdle) {
   \   000000B8   780190E5           LDR      R0,[R0, #+376]
   \   000000BC   E000D0E5           LDRB     R0,[R0, #+224]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   E9FFFF0A           BEQ      ??AddAlarmStatus_5
    215                              AlStatus = 5;
   \   000000C8   0500A0E3           MOV      R0,#+5
    216                          } else AlStatus   = 0;
    217                          OutBuf[OutPtr++] = '0' + AlStatus; // Add the alarm status
   \   000000CC   E7FFFFEA           B        ??AddAlarmStatus_5
    218                      } else {
    219                          // Flag that the value is invalid
    220                          OutBuf[OutPtr++] = '8'; // Add the alarm status
    221                      }
    222                  }
    223                  break;
    224              case SAAB_TANKVAL:
    225                  {
    226                      PROTank *tmpPtr = (PROTank *)PROXRefObject::GetSaabObject(Index);
   \                     ??AddAlarmStatus_7:
   \   000000D0   ........           _BLF     ??GetSaabObject,??GetSaabObject??rA
    227                      if (tmpPtr) {
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   1A00000A           BEQ      ??AddAlarmStatus_4
    228                          int AlStatus;
    229                          if (tmpPtr->HWFailure) { // HW is first priority
   \   000000DC   3C10D0E5           LDRB     R1,[R0, #+60]
   \   000000E0   000051E3           CMP      R1,#+0
    230                              AlStatus = 1;
   \   000000E4   0100A013           MOVNE    R0,#+1
   \   000000E8   E0FFFF1A           BNE      ??AddAlarmStatus_5
    231                          } else if (tmpPtr->OverfillPtr && tmpPtr->OverfillPtr->State != AlarmBasic::AlIdle) {
   \   000000EC   081390E5           LDR      R1,[R0, #+776]
   \   000000F0   000051E3           CMP      R1,#+0
   \   000000F4   E010D115           LDRBNE   R1,[R1, #+224]
   \   000000F8   00005113           CMPNE    R1,#+0
    232                              AlStatus = 3;
   \   000000FC   0300A013           MOVNE    R0,#+3
   \   00000100   DAFFFF1A           BNE      ??AddAlarmStatus_5
    233                          } else if (tmpPtr->HighLevelPtr->State != AlarmBasic::AlIdle) {
   \   00000104   0C1390E5           LDR      R1,[R0, #+780]
   \   00000108   E010D1E5           LDRB     R1,[R1, #+224]
   \   0000010C   000051E3           CMP      R1,#+0
    234                              AlStatus = 4;
   \   00000110   0400A013           MOVNE    R0,#+4
   \   00000114   D5FFFF1A           BNE      ??AddAlarmStatus_5
    235                          } else if (tmpPtr->LowLevelPtr->State != AlarmBasic::AlIdle) {
   \   00000118   101390E5           LDR      R1,[R0, #+784]
   \   0000011C   E010D1E5           LDRB     R1,[R1, #+224]
   \   00000120   000051E3           CMP      R1,#+0
    236                              AlStatus = 5;
   \   00000124   0500A013           MOVNE    R0,#+5
   \   00000128   D0FFFF1A           BNE      ??AddAlarmStatus_5
    237                          } else if (tmpPtr->LoLoLevelPtr && tmpPtr->LoLoLevelPtr->State != AlarmBasic::AlIdle) {
   \   0000012C   140390E5           LDR      R0,[R0, #+788]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   E000D015           LDRBNE   R0,[R0, #+224]
   \   00000138   00005013           CMPNE    R0,#+0
   \   0000013C   CBFFFF0A           BEQ      ??AddAlarmStatus_5
    238                              AlStatus = 6;
   \   00000140   0600A0E3           MOV      R0,#+6
    239                          } else AlStatus   = 0;
    240                          OutBuf[OutPtr++] = '0' + AlStatus; // Add the alarm status
   \   00000144   C9FFFFEA           B        ??AddAlarmStatus_5
    241                      } else {
    242                          // Flag that the value is invalid
    243                          OutBuf[OutPtr++] = '8'; // Add the alarm status
   \                     ??AddAlarmStatus_4:
   \   00000148   000095E5           LDR      R0,[R5, #+0]
   \   0000014C   011080E2           ADD      R1,R0,#+1
   \   00000150   001085E5           STR      R1,[R5, #+0]
   \   00000154   0460C0E7           STRB     R6,[R0, +R4]
    244                      }
    245                  }
    246                  break;
    247          
    248              }
    249          
    250          }
   \                     ??AddAlarmStatus_2:
   \   00000158                      REQUIRE ?Subroutine15
   \   00000158                      ;; // Fall through to label ?Subroutine15
    251          
    252          
    253          
    254          
    255          ////////////////////////////////////////////////////////////
    256          //
    257          //  Handles input
    258          //
    259          // NOTE: Several values like pressure and BT,MT,UT and TT are
    260          // not supported, load rate
    261          ////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    262          void SaabProtcol::SAABHandleInput(TSNUart *PortPtr, U8 Data) {
   \                     ??SAABHandleInput:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   97DF4DE2           SUB      SP,SP,#+604
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0240A0E1           MOV      R4,R2
    263              volatile bool DataAvailable;
    264              U8 Data2;
    265              char InBuf[SAAB_BUF_SIZE] = { Data };
   \   00000010   5C40CDE5           STRB     R4,[SP, #+92]
    266              int Ptr = 1;
   \   00000014   0150A0E3           MOV      R5,#+1
    267              do {
    268                  DataAvailable = PortPtr->Receive(&Data2, 1, 200); // wait till a character comes in
   \                     ??SAABHandleInput_2:
   \   00000018   DC7096E5           LDR      R7,[R6, #+220]
   \   0000001C   C830A0E3           MOV      R3,#+200
   \   00000020   087097E5           LDR      R7,[R7, #+8]
   \   00000024   0120A0E3           MOV      R2,#+1
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   0FE0A0E1           MOV      LR,PC
   \   00000034   17FF2FE1           BX       R7
   \   00000038   0100CDE5           STRB     R0,[SP, #+1]
    269                  InBuf[Ptr++]  = (char)Data2;
   \   0000003C   0010DDE5           LDRB     R1,[SP, #+0]
   \   00000040   5C008DE2           ADD      R0,SP,#+92
   \   00000044   0010C5E7           STRB     R1,[R5, +R0]
    270              }
    271              while (DataAvailable && (Data2 != 0x0A) && (Ptr < SAAB_BUF_SIZE));
   \   00000048   0100DDE5           LDRB     R0,[SP, #+1]
   \   0000004C   015085E2           ADD      R5,R5,#+1
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0000DD15           LDRBNE   R0,[SP, #+0]
   \   00000058   0A005013           CMPNE    R0,#+10
   \   0000005C   0100000A           BEQ      ??SAABHandleInput_3
   \   00000060   800F55E3           CMP      R5,#+512
   \   00000064   EBFFFFBA           BLT      ??SAABHandleInput_2
    272              // Do we want to receive the data and does it seem like a valid packet?
    273              if ((PROSystemData::ReceiveWeightVolume) && (Ptr >= SAAB_MIN_PACKET) && (Ptr < SAAB_BUF_SIZE)) {
   \                     ??SAABHandleInput_3:
   \   00000068   ........           LDR      R0,??Subroutine17_0  ;; ??ReceiveWeightVolume
   \   0000006C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   EC00000A           BEQ      ??SAABHandleInput_4
   \   00000078   080055E3           CMP      R5,#+8
   \   0000007C   EA0000BA           BLT      ??SAABHandleInput_4
   \   00000080   800F55E3           CMP      R5,#+512
   \   00000084   E80000AA           BGE      ??SAABHandleInput_4
    274                  char *EndPtr;
    275                  unsigned CheckSum = 0;
   \   00000088   00A0A0E3           MOV      R10,#+0
   \   0000008C   0060A0E3           MOV      R6,#+0
    276                  Ptr -= 6;
   \   00000090   065045E2           SUB      R5,R5,#+6
    277                  unsigned PacketCheckSum = strtoul(&InBuf[Ptr], &EndPtr, 16);
   \   00000094   1020A0E3           MOV      R2,#+16
   \   00000098   08108DE2           ADD      R1,SP,#+8
   \   0000009C   5C008DE2           ADD      R0,SP,#+92
   \   000000A0   000085E0           ADD      R0,R5,R0
   \   000000A4   ........           _BLF     _Stoul,??_Stoul??rA
    278                  for (int i = 0; i < Ptr; i++) {
   \   000000A8   0610A0E1           MOV      R1,R6
   \   000000AC   030000EA           B        ??SAABHandleInput_5
    279                      CheckSum += InBuf[i];
   \                     ??SAABHandleInput_6:
   \   000000B0   5C208DE2           ADD      R2,SP,#+92
   \   000000B4   0220D1E7           LDRB     R2,[R1, +R2]
    280                  }
   \   000000B8   011081E2           ADD      R1,R1,#+1
   \   000000BC   066082E0           ADD      R6,R2,R6
   \                     ??SAABHandleInput_5:
   \   000000C0   050051E1           CMP      R1,R5
   \   000000C4   F9FFFFBA           BLT      ??SAABHandleInput_6
    281                  // Compare the checksum
    282                  if (CheckSum == PacketCheckSum) {
   \   000000C8   000056E1           CMP      R6,R0
   \   000000CC   D600001A           BNE      ??SAABHandleInput_4
    283                      short TNo = 0;
    284                      switch (Data) {
   \   000000D0   5D00DDE5           LDRB     R0,[SP, #+93]
   \   000000D4   5E30DDE5           LDRB     R3,[SP, #+94]
   \   000000D8   6060DDE5           LDRB     R6,[SP, #+96]
   \   000000DC   0A20A0E3           MOV      R2,#+10
   \   000000E0   923020E0           MLA      R0,R2,R0,R3
   \   000000E4   0F20E0E3           MVN      R2,#+15
   \   000000E8   802FC2E3           BIC      R2,R2,#0x200
   \   000000EC   007082E0           ADD      R7,R2,R0
   \   000000F0   5F00DDE5           LDRB     R0,[SP, #+95]
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   0A20A0E3           MOV      R2,#+10
   \   000000FC   920003E0           MUL      R3,R2,R0
   \   00000100   6100DDE5           LDRB     R0,[SP, #+97]
   \   00000104   4424A0E3           MOV      R2,#+1140850688
   \   00000108   7A2882E3           ORR      R2,R2,#0x7A0000
   \   0000010C   415054E2           SUBS     R5,R4,#+65
   \   00000110   0A00000A           BEQ      ??SAABHandleInput_7
   \   00000114   075055E2           SUBS     R5,R5,#+7
   \   00000118   04505512           SUBSNE   R5,R5,#+4
   \   0000011C   7800000A           BEQ      ??SAABHandleInput_8
   \   00000120   0A5055E2           SUBS     R5,R5,#+10
   \   00000124   0B505512           SUBSNE   R5,R5,#+11
   \   00000128   0400000A           BEQ      ??SAABHandleInput_7
   \   0000012C   075055E2           SUBS     R5,R5,#+7
   \   00000130   04505512           SUBSNE   R5,R5,#+4
   \   00000134   7200000A           BEQ      ??SAABHandleInput_8
   \   00000138   0A5055E2           SUBS     R5,R5,#+10
   \   0000013C   BA00001A           BNE      ??SAABHandleInput_4
    285                      case 'v':    // Tank values
    286                      case 'V':    // Tank values
    287                      case 'a':    // Tank values with alarm status
    288                      case 'A':    // Tank values with alarm status
    289                          {
    290                              int FirstTank     = (InBuf[1] - '0') * 10 + (InBuf[2] - '0');
   \                     ??SAABHandleInput_7:
   \   00000140   0780A0E1           MOV      R8,R7
    291                              int NumberOfTanks = (InBuf[3] - '0') * 10 + (InBuf[4] - '0');
   \   00000144   033086E0           ADD      R3,R6,R3
   \   00000148   0F60E0E3           MVN      R6,#+15
   \   0000014C   806FC6E3           BIC      R6,R6,#0x200
   \   00000150   033086E0           ADD      R3,R6,R3
    292                              int ValKey = -1;
   \   00000154   0160E0E1           MVN      R6,R1
    293                              float Scale;
    294                              switch (InBuf[5]) {
   \   00000158   4074A0E3           MOV      R7,#+1073741824
   \   0000015C   487787E3           ORR      R7,R7,#0x1200000
   \   00000160   6A9787E2           ADD      R9,R7,#+27787264
   \   00000164   430040E2           SUB      R0,R0,#+67
   \   00000168   170050E3           CMP      R0,#+23
   \   0000016C   3100008A           BHI      ??SAABHandleInput_9
   \   00000170   01BF8FE2           ADR      R11,??SAABHandleInput_1
   \   00000174   00B0DBE7           LDRB     R11,[R11, R0]
   \   00000178   0BF18FE0           ADD      PC,PC,R11, LSL #+2
   \                     ??SAABHandleInput_1:
   \   0000017C   09101B1E           DC8      +9,+16,+27,+30
   \   00000180   2E2E0B2E           DC8      +46,+46,+11,+46
   \   00000184   0D2E2E2E           DC8      +13,+46,+46,+46
   \   00000188   2E222E30           DC8      +46,+34,+46,+48
   \   0000018C   2E240515           DC8      +46,+36,+5,+21
   \   00000190   1926282B           DC8      +25,+38,+40,+43
    295                              case 'U':
    296                                  ValKey = SVT_ULLAGE;     // Corrected to ref point
   \                     ??SAABHandleInput_10:
   \   00000194   EB60A0E3           MOV      R6,#+235
   \                     ??SAABHandleInput_11:
   \   00000198   C06F86E3           ORR      R6,R6,#0x300
    297                                  Scale = 1000.0;
   \                     ??SAABHandleInput_12:
   \   0000019C   0250A0E1           MOV      R5,R2
   \   000001A0   260000EA           B        ??SAABHandleInput_13
    298                                  break;
    299                              case 'C':
    300                                  ValKey = SVT_ULLAGE_FC; // Corrected to FC
   \                     ??SAABHandleInput_14:
   \   000001A4   EF60A0E3           MOV      R6,#+239
   \   000001A8   FAFFFFEA           B        ??SAABHandleInput_11
    301                                  Scale = 1000.0;
    302                                  break;
    303                              case 'I':
    304                                  ValKey = SVT_LEVEL_FC; // Corrected to FC
   \                     ??SAABHandleInput_15:
   \   000001AC   276AA0E1           MOV      R6,R7, LSR #+20
    305                                  Scale = 1000.0;
   \   000001B0   F9FFFFEA           B        ??SAABHandleInput_12
    306                                  break;
    307                              case 'K':
    308                                  ValKey = SVT_SOUNDING; // Corrected to FC
   \                     ??SAABHandleInput_16:
   \   000001B4   0360A0E3           MOV      R6,#+3
   \   000001B8   406E86E3           ORR      R6,R6,#0x400
    309                                  Scale = 1000.0;
   \   000001BC   F6FFFFEA           B        ??SAABHandleInput_12
    310                                  break;
    311                              case 'D':
    312                                  ValKey = SVT_DENSITY;
   \                     ??SAABHandleInput_17:
   \   000001C0   EE60A0E3           MOV      R6,#+238
   \   000001C4   C06F86E3           ORR      R6,R6,#0x300
    313                                  Scale = 10000.0;
   \   000001C8   4654A0E3           MOV      R5,#+1174405120
   \   000001CC   715985E3           ORR      R5,R5,#0x1C4000
   \   000001D0   1A0000EA           B        ??SAABHandleInput_13
    314                                  break;
    315                              case 'V':
    316                                  ValKey = SVT_LC_VOLUME;
   \                     ??SAABHandleInput_18:
   \   000001D4   0960A0E3           MOV      R6,#+9
   \                     ??SAABHandleInput_19:
   \   000001D8   406E86E3           ORR      R6,R6,#0x400
    317                                  Scale = 1.0;
   \   000001DC   FE55A0E3           MOV      R5,#+1065353216
   \   000001E0   160000EA           B        ??SAABHandleInput_13
    318                                  break;
    319                              case 'W':
    320                                  ValKey = SVT_LC_WEIGHT;
   \                     ??SAABHandleInput_20:
   \   000001E4   0A60A0E3           MOV      R6,#+10
   \   000001E8   FAFFFFEA           B        ??SAABHandleInput_19
    321                                  Scale = 1.0;
    322                                  break;
    323                              case 'E':
    324                                  ValKey = SVT_LOADRATE;
   \                     ??SAABHandleInput_21:
   \   000001EC   266BA0E1           MOV      R6,R6, LSR #+22
    325                                  Scale = 10.0;
   \                     ??SAABHandleInput_22:
   \   000001F0   0750A0E1           MOV      R5,R7
   \   000001F4   110000EA           B        ??SAABHandleInput_13
    326                                  break;
    327                              case 'F':
    328                                  ValKey = SVT_VOLPERCENT;
   \                     ??SAABHandleInput_23:
   \   000001F8   FE60A0E3           MOV      R6,#+254
   \   000001FC   C06F86E3           ORR      R6,R6,#0x300
    329                                  Scale = 100.0;
   \                     ??SAABHandleInput_24:
   \   00000200   0950A0E1           MOV      R5,R9
   \   00000204   0D0000EA           B        ??SAABHandleInput_13
    330                                  break;
    331                              case 'P':
    332                                  ValKey = SVT_PRESSURE;
   \                     ??SAABHandleInput_25:
   \   00000208   406EA0E3           MOV      R6,#+1024
    333                                  Scale = 1000.0;
   \   0000020C   E2FFFFEA           B        ??SAABHandleInput_12
    334                                  break;
    335                              case 'T':
    336                                  ValKey = SVT_TEMP;
   \                     ??SAABHandleInput_26:
   \   00000210   FB6FA0E3           MOV      R6,#+1004
    337                                  Scale = 10.0;
   \   00000214   F5FFFFEA           B        ??SAABHandleInput_22
    338                                  break;
    339                              case 'R':   // Not supported
    340                                  break;
    341                              case 'X':
    342                                  ValKey = SVT_T1;
   \                     ??SAABHandleInput_27:
   \   00000218   436EA0E3           MOV      R6,#+1072
    343                                  Scale = 100.0;
   \   0000021C   F7FFFFEA           B        ??SAABHandleInput_24
    344                                  break;
    345                              case 'Y':
    346                                  ValKey = SVT_T3;
   \                     ??SAABHandleInput_28:
   \   00000220   3260A0E3           MOV      R6,#+50
   \   00000224   406E86E3           ORR      R6,R6,#0x400
    347                                  Scale = 100.0;
   \   00000228   F4FFFFEA           B        ??SAABHandleInput_24
    348                                  break;
    349                              case 'Z':
    350                                  ValKey = SVT_T4;
   \                     ??SAABHandleInput_29:
   \   0000022C   3360A0E3           MOV      R6,#+51
   \   00000230   406E86E3           ORR      R6,R6,#0x400
    351                                  Scale = 100.0;
   \   00000234   F1FFFFEA           B        ??SAABHandleInput_24
    352                                  break;
    353                              default:
    354                                  TNo = -1;
   \                     ??SAABHandleInput_9:
   \   00000238   0610A0E1           MOV      R1,R6
    355                                  ValKey = SVT_BLANK;
   \   0000023C   FA6FA0E3           MOV      R6,#+1000
    356                                  break;
    357                              }
    358                              char *InPtr = &InBuf[6];
   \                     ??SAABHandleInput_13:
   \   00000240   62708DE2           ADD      R7,SP,#+98
    359                              if (TNo >= 0) {
   \   00000244   000051E3           CMP      R1,#+0
   \   00000248   7700004A           BMI      ??SAABHandleInput_4
    360                                  // I have a value I support
    361                                  int LastTank = FirstTank + NumberOfTanks;
   \   0000024C   08B083E0           ADD      R11,R3,R8
    362                                  for (int Index = FirstTank; Index < LastTank; Index++) {
   \   00000250   010000EA           B        ??SAABHandleInput_30
    363                                      PROTank *TmpPtr = (PROTank *)PROXRefObject::GetSaabObject(Index);
    364                                      if (TmpPtr) {
    365                                          char TmpBuf[BUF_SIZE];
    366                                          memcpy(TmpBuf, InPtr, 5);
    367                                          TmpBuf[5] = 0; // Terminate the string
    368                                          //InPtr += 5;
    369                                          if ((*TmpBuf == 'E') || (*TmpBuf == '*')) {} else {
    370                                              char *EndPtr;
    371                                              //int IStatus;
    372                                              float Value = strtod(TmpBuf, &EndPtr);
    373                                              if (EndPtr) {
    374                                                  Value /= Scale;
    375                                                  switch (ValKey) {
    376                                                  case SVT_LC_VOLUME:
    377                                                  case SVT_LC_WEIGHT:
    378                                                  case SVT_LC_DENSITY:
    379                                                      /*IStatus = */TmpPtr->PutFloatValue(ValKey, Value);
    380                                                      break;
    381                                                  default:
    382                                                      /*IStatus = */TmpPtr->PutFloatValue(ValKey, Value);
    383                                                      break;
    384                                                  }
    385                                              }
    386                                          }
    387                                      }
    388                                      switch (Data) {
    389                                      case 'V':
    390                                      case 'v':
    391                                          InPtr += 5;      // Step 5 chars in the inbuffer
    392                                          break;
    393                                      case 'a':
    394                                      case 'A':
    395                                          // Include alarm status
    396                                          /*  if ( TNo >= 0){
    397                                          OnlineTank *T  = OnlineTank::Table[TNo];
    398                                              switch(InPtr[5]){
    399                                              case '0':
    400                                              case '1':
    401                                              case '2':
    402                                              case '3':
    403                                              case '4':
    404                                              case '5':
    405                                              case '8':
    406                                                  break; // All alarms handeled by master.
    407                                                           // Slave alarms are all ignored
    408                                              }
    409                                          }
    410                                                                          */
    411                                          InPtr += 6;      // Step 5 chars in the inbuffer
   \                     ??SAABHandleInput_31:
   \   00000254   067087E2           ADD      R7,R7,#+6
   \                     ??SAABHandleInput_32:
   \   00000258   018088E2           ADD      R8,R8,#+1
   \                     ??SAABHandleInput_30:
   \   0000025C   0B0058E1           CMP      R8,R11
   \   00000260   710000AA           BGE      ??SAABHandleInput_4
   \   00000264   0800A0E1           MOV      R0,R8
   \   00000268   ........           _BLF     ??GetSaabObject,??GetSaabObject??rA
   \   0000026C   0090B0E1           MOVS     R9,R0
   \   00000270   1900000A           BEQ      ??SAABHandleInput_33
   \   00000274   0520A0E3           MOV      R2,#+5
   \   00000278   0710A0E1           MOV      R1,R7
   \   0000027C   0C008DE2           ADD      R0,SP,#+12
   \   00000280   ........           _BLF     memcpy,??memcpy??rA
   \   00000284   11A0CDE5           STRB     R10,[SP, #+17]
   \   00000288   0C00DDE5           LDRB     R0,[SP, #+12]
   \   0000028C   450050E3           CMP      R0,#+69
   \   00000290   2A005013           CMPNE    R0,#+42
   \   00000294   1000000A           BEQ      ??SAABHandleInput_33
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   04108DE2           ADD      R1,SP,#+4
   \   000002A0   0C008DE2           ADD      R0,SP,#+12
   \   000002A4   ........           _BLF     _Stod,??_Stod??rA
   \   000002A8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000002AC   04109DE5           LDR      R1,[SP, #+4]
   \   000002B0   000051E3           CMP      R1,#+0
   \   000002B4   0800000A           BEQ      ??SAABHandleInput_33
   \   000002B8   0510A0E1           MOV      R1,R5
   \   000002BC   ........           _BLF     __fDiv,??__fDiv??rA
   \   000002C0   A43099E5           LDR      R3,[R9, #+164]
   \   000002C4   0020A0E1           MOV      R2,R0
   \   000002C8   343093E5           LDR      R3,[R3, #+52]
   \   000002CC   0610A0E1           MOV      R1,R6
   \   000002D0   0900A0E1           MOV      R0,R9
   \   000002D4   0FE0A0E1           MOV      LR,PC
   \   000002D8   13FF2FE1           BX       R3
   \                     ??SAABHandleInput_33:
   \   000002DC   410054E2           SUBS     R0,R4,#+65
   \   000002E0   DBFFFF0A           BEQ      ??SAABHandleInput_31
   \   000002E4   150050E2           SUBS     R0,R0,#+21
   \   000002E8   0300000A           BEQ      ??SAABHandleInput_34
   \   000002EC   0B0050E2           SUBS     R0,R0,#+11
   \   000002F0   D7FFFF0A           BEQ      ??SAABHandleInput_31
   \   000002F4   150050E2           SUBS     R0,R0,#+21
   \   000002F8   D6FFFF1A           BNE      ??SAABHandleInput_32
   \                     ??SAABHandleInput_34:
   \   000002FC   057087E2           ADD      R7,R7,#+5
   \   00000300   D4FFFFEA           B        ??SAABHandleInput_32
    412                                          break;
    413                                      } // End of switch
    414                                  }
    415                              } else {
    416                                  // Not supported value, juste ignore
    417                              }
    418                          }   // End case 'V', 'A'
    419                          break;
    420                      case 'h':
    421                      case 'H':
    422                      case 'l':
    423                      case 'L':
    424                          {
    425                              int FirstTank     = (InBuf[1] - '0') * 10 + (InBuf[2] - '0');
    426                              int NumberOfTanks = (InBuf[3] - '0') * 10 + (InBuf[4] - '0');
    427                              int ValKey = -1;
   \                     ??SAABHandleInput_8:
   \   00000304   0150E0E1           MVN      R5,R1
    428                              float Scale;
    429                              switch (InBuf[5]) {
   \   00000308   690050E2           SUBS     R0,R0,#+105
   \   0000030C   1600000A           BEQ      ??SAABHandleInput_35
   \   00000310   0C0050E2           SUBS     R0,R0,#+12
   \   00000314   0D00001A           BNE      ??SAABHandleInput_36
    430                              case 'u':
    431                                  switch (Data) {
   \   00000318   484054E2           SUBS     R4,R4,#+72
   \   0000031C   0600000A           BEQ      ??SAABHandleInput_37
   \   00000320   044054E2           SUBS     R4,R4,#+4
   \   00000324   0600000A           BEQ      ??SAABHandleInput_38
   \   00000328   1C4054E2           SUBS     R4,R4,#+28
   \   0000032C   0200000A           BEQ      ??SAABHandleInput_37
   \   00000330   044054E2           SUBS     R4,R4,#+4
   \   00000334   0200000A           BEQ      ??SAABHandleInput_38
   \   00000338   030000EA           B        ??SAABHandleInput_39
    432                                  case 'h':
    433                                  case 'H':
    434                                      ValKey = SVT_HI_ULLAGE_LIM;
   \                     ??SAABHandleInput_37:
   \   0000033C   F650A0E3           MOV      R5,#+246
   \   00000340   000000EA           B        ??SAABHandleInput_40
    435                                      break;
    436                                  case 'l':
    437                                  case 'L':
    438                                      ValKey = SVT_LO_ULLAGE_LIM;
   \                     ??SAABHandleInput_38:
   \   00000344   FB50A0E3           MOV      R5,#+251
   \                     ??SAABHandleInput_40:
   \   00000348   8C5D85E3           ORR      R5,R5,#0x2300
    439                                      break;
    440                                  }
    441                                  Scale = 1000.0;
   \                     ??SAABHandleInput_39:
   \   0000034C   0290A0E1           MOV      R9,R2
    442                                  break;
    443                              case 'i':   // Not supported
    444                                  switch (Data) {
    445                                  case 'h':
    446                                  case 'H':
    447                                      ValKey = SVT_HI_LEVEL_LIMIT;
    448                                      break;
    449                                  case 'l':
    450                                  case 'L':
    451                                      ValKey = SVT_LO_LEVEL_LIMIT;
    452                                      break;
    453                                  }
    454                                  Scale = 1000.0;
    455                                  break;
    456                              }
    457                              char *InPtr = &InBuf[6];
   \                     ??SAABHandleInput_36:
   \   00000350   62408DE2           ADD      R4,SP,#+98
    458                              if (TNo >= 0) {
    459                                  // I have a value I support
    460                                  int LastTank = FirstTank + NumberOfTanks;
   \   00000354   070083E0           ADD      R0,R3,R7
   \   00000358   000086E0           ADD      R0,R6,R0
   \   0000035C   0F10E0E3           MVN      R1,#+15
   \   00000360   801FC1E3           BIC      R1,R1,#0x200
   \   00000364   006081E0           ADD      R6,R1,R0
    461                                  for (int Index = FirstTank; Index < LastTank; Index++) {
   \   00000368   2D0000EA           B        ??SAABHandleInput_41
   \                     ??SAABHandleInput_35:
   \   0000036C   484054E2           SUBS     R4,R4,#+72
   \   00000370   0600000A           BEQ      ??SAABHandleInput_42
   \   00000374   044054E2           SUBS     R4,R4,#+4
   \   00000378   0600000A           BEQ      ??SAABHandleInput_43
   \   0000037C   1C4054E2           SUBS     R4,R4,#+28
   \   00000380   0200000A           BEQ      ??SAABHandleInput_42
   \   00000384   044054E2           SUBS     R4,R4,#+4
   \   00000388   0200000A           BEQ      ??SAABHandleInput_43
   \   0000038C   EEFFFFEA           B        ??SAABHandleInput_39
   \                     ??SAABHandleInput_42:
   \   00000390   E750A0E3           MOV      R5,#+231
   \   00000394   EBFFFFEA           B        ??SAABHandleInput_40
   \                     ??SAABHandleInput_43:
   \   00000398   E850A0E3           MOV      R5,#+232
   \   0000039C   E9FFFFEA           B        ??SAABHandleInput_40
    462                                      PROTank *TmpPtr = (PROTank *)PROXRefObject::GetSaabObject(Index);
   \                     ??SAABHandleInput_44:
   \   000003A0   0700A0E1           MOV      R0,R7
   \   000003A4   ........           _BLF     ??GetSaabObject,??GetSaabObject??rA
   \   000003A8   0080B0E1           MOVS     R8,R0
    463                                      if (TmpPtr) {
   \   000003AC   1A00000A           BEQ      ??SAABHandleInput_45
    464                                          char TmpBuf[BUF_SIZE];
    465                                          memcpy(TmpBuf, InPtr, 5);
   \   000003B0   0520A0E3           MOV      R2,#+5
   \   000003B4   0410A0E1           MOV      R1,R4
   \   000003B8   0C008DE2           ADD      R0,SP,#+12
   \   000003BC   ........           _BLF     memcpy,??memcpy??rA
    466                                          TmpBuf[5] = 0; // Terminate the string
   \   000003C0   11A0CDE5           STRB     R10,[SP, #+17]
    467                                          InPtr += 5;
    468                                          if ((*TmpBuf == 'E') || (*TmpBuf == '*')) {} else {
   \   000003C4   0C00DDE5           LDRB     R0,[SP, #+12]
   \   000003C8   054084E2           ADD      R4,R4,#+5
   \   000003CC   450050E3           CMP      R0,#+69
   \   000003D0   2A005013           CMPNE    R0,#+42
   \   000003D4   1000000A           BEQ      ??SAABHandleInput_45
    469                                              char *EndPtr;
    470                                              //int   IStatus;
    471                                              float Value = strtod(TmpBuf, &EndPtr);
   \   000003D8   0020A0E3           MOV      R2,#+0
   \   000003DC   04108DE2           ADD      R1,SP,#+4
   \   000003E0   0C008DE2           ADD      R0,SP,#+12
   \   000003E4   ........           _BLF     _Stod,??_Stod??rA
   \   000003E8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
    472                                              if (EndPtr) {
   \   000003EC   04109DE5           LDR      R1,[SP, #+4]
   \   000003F0   000051E3           CMP      R1,#+0
   \   000003F4   0800000A           BEQ      ??SAABHandleInput_45
    473                                                  Value /= Scale;
    474                                                  /*IStatus = */TmpPtr->PutFloatValue(ValKey, Value);
   \   000003F8   0910A0E1           MOV      R1,R9
   \   000003FC   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000400   A43098E5           LDR      R3,[R8, #+164]
   \   00000404   0020A0E1           MOV      R2,R0
   \   00000408   343093E5           LDR      R3,[R3, #+52]
   \   0000040C   0510A0E1           MOV      R1,R5
   \   00000410   0800A0E1           MOV      R0,R8
   \   00000414   0FE0A0E1           MOV      LR,PC
   \   00000418   13FF2FE1           BX       R3
    475                                              }
    476                                          }
    477                                      }
    478                                      InPtr += 5;      // Step 5 chars in the inbuffer
   \                     ??SAABHandleInput_45:
   \   0000041C   054084E2           ADD      R4,R4,#+5
    479                                  }
   \   00000420   017087E2           ADD      R7,R7,#+1
   \                     ??SAABHandleInput_41:
   \   00000424   060057E1           CMP      R7,R6
   \   00000428   DCFFFFBA           BLT      ??SAABHandleInput_44
    480                              } else {
    481                                  // Not supported value, juste ignore
    482                              }
    483                          }   // End case 'H', 'h'
    484                          break;
    485                      case 's':
    486                      case 'S':
    487                          // No reason to support this??
    488                          if (InBuf[1] == 'D') {} else {}
    489                          break;
    490          
    491                      } // End of block swicth
    492                  }   // end of Checksum OK
    493              } // End of if Valid packet
    494          
    495          }
   \                     ??SAABHandleInput_4:
   \   0000042C   97DF8DE2           ADD      SP,SP,#+604
   \   00000430                      REQUIRE ?Subroutine17
   \   00000430                      ;; // Fall through to label ?Subroutine17
    496          
    497          ////////////////////////////////////////////////////////////
    498          //
    499          //  Handles answer in Master mode
    500          //
    501          ////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    502          bool SaabProtcol::SAABHandleAnswer(TSNUart *PortPtr) {
   \                     ??SAABHandleAnswer:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    503              U8 Data;
    504              bool DataAvailable = PortPtr->Receive(&Data, 1, 500);
   \   00000008   DC6095E5           LDR      R6,[R5, #+220]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   086096E5           LDR      R6,[R6, #+8]
   \   00000014   7D3FA0E3           MOV      R3,#+500
   \   00000018   0120A0E3           MOV      R2,#+1
   \   0000001C   0D10A0E1           MOV      R1,SP
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   0FE0A0E1           MOV      LR,PC
   \   00000028   16FF2FE1           BX       R6
   \   0000002C   0060B0E1           MOVS     R6,R0
    505              if (DataAvailable) {
   \   00000030   0A00000A           BEQ      ??SAABHandleAnswer_1
    506                  switch (Data) {
   \   00000034   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000038   410050E2           SUBS     R0,R0,#+65
   \   0000003C   07005012           SUBSNE   R0,R0,#+7
   \   00000040   04005012           SUBSNE   R0,R0,#+4
   \   00000044   07005012           SUBSNE   R0,R0,#+7
   \   00000048   03005012           SUBSNE   R0,R0,#+3
   \   0000004C   0300001A           BNE      ??SAABHandleAnswer_1
    507                  case 'V':    // Tank values
    508                  case 'A':    // Tank values and alarm status
    509                  case 'H':    // Tank high limits
    510                  case 'L':    // Tank low limits
    511                  case 'S':    // Ship information
    512                      SAABHandleInput(PortPtr, Data);
   \   00000050   0020DDE5           LDRB     R2,[SP, #+0]
   \   00000054   0510A0E1           MOV      R1,R5
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       ??SAABHandleInput
    513                      break;
    514          
    515                  }
    516              }
    517              return (DataAvailable);
   \                     ??SAABHandleAnswer_1:
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   7240BDE8           POP      {R1,R4-R6,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
    518          }
    519          

   \                                 In segment CODE, align 4, keep-with-next
    520          SaabProtcol* SaabProtcol::FindSaabProtocolObject(int portNo) {
    521              if (!SaabProtcolVector.empty()) {
   \                     ??FindSaabProtocolObject:
   \   00000000   64109FE5           LDR      R1,??FindSaabProtocolObject_1  ;; ??ObjectSet
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   182091E5           LDR      R2,[R1, #+24]
   \   0000000C   1C1091E5           LDR      R1,[R1, #+28]
   \   00000010   021041E0           SUB      R1,R1,R2
   \   00000014   2131B0E1           LSRS     R3,R1,#+2
   \   00000018   1000000A           BEQ      ??FindSaabProtocolObject_2
    522                  for (unsigned i = 0; i < SaabProtcolVector.size(); i++) {
   \   0000001C   00C0A0E3           MOV      R12,#+0
   \   00000020   000000EA           B        ??FindSaabProtocolObject_3
   \                     ??FindSaabProtocolObject_4:
   \   00000024   01C08CE2           ADD      R12,R12,#+1
   \                     ??FindSaabProtocolObject_3:
   \   00000028   03005CE1           CMP      R12,R3
   \   0000002C   0B00002A           BCS      ??FindSaabProtocolObject_2
    523                      SaabProtcol *TempElement = SaabProtcolVector[i];
   \   00000030   0C1192E7           LDR      R1,[R2, +R12, LSL #+2]
    524                      if ((portNo == TempElement->WinUart)
    525                          && (TempElement->TCUAddress == PROTanksystemUnit::MySelf->TCUAddress)) {
   \   00000034   504191E5           LDR      R4,[R1, #+336]
   \   00000038   040050E1           CMP      R0,R4
   \   0000003C   F8FFFF1A           BNE      ??FindSaabProtocolObject_4
   \   00000040   28509FE5           LDR      R5,??FindSaabProtocolObject_1+0x4  ;; ??MySelf
   \   00000044   4C4191E5           LDR      R4,[R1, #+332]
   \   00000048   005095E5           LDR      R5,[R5, #+0]
   \   0000004C   305395E5           LDR      R5,[R5, #+816]
   \   00000050   050054E1           CMP      R4,R5
   \   00000054   F2FFFF1A           BNE      ??FindSaabProtocolObject_4
    526                          return (TempElement); // Quick and dirty, simply return
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   000000EA           B        ??FindSaabProtocolObject_5
    527                      }
    528                  }
    529              }
    530              return (NULL);
   \                     ??FindSaabProtocolObject_2:
   \   00000060   0000A0E3           MOV      R0,#+0
   \                     ??FindSaabProtocolObject_5:
   \   00000064   3000BDE8           POP      {R4,R5}
   \   00000068   1EFF2FE1           BX       LR               ;; return
   \                     ??FindSaabProtocolObject_1:
   \   0000006C   ........           DC32     ??ObjectSet
   \   00000070   ........           DC32     ??MySelf
    531          }
    532          
    533          
    534          ////////////////////////////////////////////////////////////////////////////
    535          //
    536          //  Sends request to Saab, when master. Follows configured request sequence
    537          //
    538          //
    539          ////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    540          void SaabProtcol::SAABSendRequest(TSNUart *PortPtr) {
   \                     ??SAABSendRequest:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   80DF4DE2           SUB      SP,SP,#+512
   \   00000008   0040A0E1           MOV      R4,R0
    541              if (CurrentRequest >= (int)BlockVector.size()) {
   \   0000000C   483194E5           LDR      R3,[R4, #+328]
   \   00000010   0150A0E1           MOV      R5,R1
    542                  CurrentRequest = 0;
    543              }
    544              BlockDef B = BlockVector[CurrentRequest++];
    545              char OutBuf[SAAB_BUF_SIZE] = { "V" };
   \   00000014   ........           LDR      R8,??Subroutine16_0  ;; `?<Constant "V">`
   \   00000018   552FA0E3           MOV      R2,#+340
   \   0000001C   040082E0           ADD      R0,R2,R4
   \   00000020   041090E5           LDR      R1,[R0, #+4]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   0C10A0E3           MOV      R1,#+12
   \   00000030   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000034   010053E1           CMP      R3,R1
   \   00000038   0000A0A3           MOVGE    R0,#+0
   \   0000003C   480184A5           STRGE    R0,[R4, #+328]
   \   00000040   480194E5           LDR      R0,[R4, #+328]
   \   00000044   803FA0E3           MOV      R3,#+512
   \   00000048   011080E2           ADD      R1,R0,#+1
   \   0000004C   481184E5           STR      R1,[R4, #+328]
   \   00000050   042092E7           LDR      R2,[R2, +R4]
   \   00000054   0C10A0E3           MOV      R1,#+12
   \   00000058   912020E0           MLA      R0,R1,R0,R2
   \   0000005C   006090E5           LDR      R6,[R0, #+0]
   \   00000060   042090E5           LDR      R2,[R0, #+4]
   \   00000064   087090E5           LDR      R7,[R0, #+8]
   \   00000068   0D00A0E1           MOV      R0,SP
   \                     ??SAABSendRequest_2:
   \   0000006C   043053E2           SUBS     R3,R3,#+4
   \   00000070   031098E7           LDR      R1,[R8, R3]
   \   00000074   031080E7           STR      R1,[R0, R3]
   \   00000078   FBFFFF1A           BNE      ??SAABSendRequest_2
    546              int Ptr = 1;
    547              Ptr += sprintf(&OutBuf[Ptr], "%02u", B.First_Tank);
   \   0000007C   809FA0E3           MOV      R9,#+512
   \   00000080   081089E0           ADD      R1,R9,R8
   \   00000084   01008DE2           ADD      R0,SP,#+1
   \   00000088   ........           _BLF     sprintf,??sprintf??rA
   \   0000008C   01A080E2           ADD      R10,R0,#+1
    548              Ptr += sprintf(&OutBuf[Ptr], "%02u", B.Number_of_Tanks);
   \   00000090   0720A0E1           MOV      R2,R7
   \   00000094   081089E0           ADD      R1,R9,R8
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   00008AE0           ADD      R0,R10,R0
   \   000000A0   ........           _BLF     sprintf,??sprintf??rA
   \   000000A4   0A3080E0           ADD      R3,R0,R10
    549              switch (B.ValKey) {
   \   000000A8   EB6046E2           SUB      R6,R6,#+235
   \   000000AC   C06F46E2           SUB      R6,R6,#+768
   \   000000B0   150056E3           CMP      R6,#+21
   \   000000B4   2400008A           BHI      ??SAABSendRequest_3
   \   000000B8   010F8FE2           ADR      R0,??SAABSendRequest_1
   \   000000BC   0600D0E7           LDRB     R0,[R0, R6]
   \   000000C0   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??SAABSendRequest_1:
   \   000000C4   081D210B           DC8      +8,+29,+33,+11
   \   000000C8   05212121           DC8      +5,+33,+33,+33
   \   000000CC   21212121           DC8      +33,+33,+33,+33
   \   000000D0   21212121           DC8      +33,+33,+33,+33
   \   000000D4   210E1117           DC8      +33,+14,+17,+23
   \   000000D8   141A0000           DC8      +20,+26,+0,+0
    550              case SVT_ULLAGE_FC:
    551                  OutBuf[Ptr++] = 'U';
   \                     ??SAABSendRequest_4:
   \   000000DC   0D00A0E1           MOV      R0,SP
   \   000000E0   5510A0E3           MOV      R1,#+85
   \   000000E4   160000EA           B        ??SAABSendRequest_5
    552                  break;
    553              case SVT_ULLAGE:
    554                  OutBuf[Ptr++] = 'C';
   \                     ??SAABSendRequest_6:
   \   000000E8   0D00A0E1           MOV      R0,SP
   \   000000EC   4310A0E3           MOV      R1,#+67
   \   000000F0   130000EA           B        ??SAABSendRequest_5
    555                  break;
    556              case SVT_DENSITY:
    557                  OutBuf[Ptr++] = 'D';
   \                     ??SAABSendRequest_7:
   \   000000F4   0D00A0E1           MOV      R0,SP
   \   000000F8   4410A0E3           MOV      R1,#+68
   \   000000FC   100000EA           B        ??SAABSendRequest_5
    558                  break;
    559              case SVT_VOLUME:
    560                  OutBuf[Ptr++] = 'V';
   \                     ??SAABSendRequest_8:
   \   00000100   0D00A0E1           MOV      R0,SP
   \   00000104   5610A0E3           MOV      R1,#+86
   \   00000108   0D0000EA           B        ??SAABSendRequest_5
    561                  break;
    562              case SVT_WEIGHT:
    563                  OutBuf[Ptr++] = 'W';
   \                     ??SAABSendRequest_9:
   \   0000010C   0D00A0E1           MOV      R0,SP
   \   00000110   5710A0E3           MOV      R1,#+87
   \   00000114   0A0000EA           B        ??SAABSendRequest_5
    564                  break;
    565              case SVT_LOADRATE:
    566                  OutBuf[Ptr++] = 'E';
   \                     ??SAABSendRequest_10:
   \   00000118   0D00A0E1           MOV      R0,SP
   \   0000011C   4510A0E3           MOV      R1,#+69
   \   00000120   070000EA           B        ??SAABSendRequest_5
    567                  break;
    568              case SVT_VOLPERCENT:
    569                  OutBuf[Ptr++] = 'F';
   \                     ??SAABSendRequest_11:
   \   00000124   0D00A0E1           MOV      R0,SP
   \   00000128   4610A0E3           MOV      R1,#+70
   \   0000012C   040000EA           B        ??SAABSendRequest_5
    570                  break;
    571              case SVT_PRESSURE:
    572                  OutBuf[Ptr++] = 'P';
   \                     ??SAABSendRequest_12:
   \   00000130   0D00A0E1           MOV      R0,SP
   \   00000134   5010A0E3           MOV      R1,#+80
   \   00000138   010000EA           B        ??SAABSendRequest_5
    573                  break;
    574              case SVT_TEMP:
    575                  OutBuf[Ptr++] = 'T';
   \                     ??SAABSendRequest_13:
   \   0000013C   0D00A0E1           MOV      R0,SP
   \   00000140   5410A0E3           MOV      R1,#+84
   \                     ??SAABSendRequest_5:
   \   00000144   0010C3E7           STRB     R1,[R3, +R0]
   \   00000148   013083E2           ADD      R3,R3,#+1
    576                  break;
    577              }
    578              SendString(PortPtr, OutBuf, Ptr);
   \                     ??SAABSendRequest_3:
   \   0000014C   0D20A0E1           MOV      R2,SP
   \   00000150   0510A0E1           MOV      R1,R5
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   ........           BL       ??SendString
    579          }
   \   0000015C   80DF8DE2           ADD      SP,SP,#+512
   \   00000160                      REQUIRE ?Subroutine16
   \   00000160                      ;; // Fall through to label ?Subroutine16
    580          

   \                                 In segment CODE, align 4, keep-with-next
    581          void SaabProtcol::SaabComTask(TSNUart *PortPtr) {
   \                     ??SaabComTask:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    582          #ifdef S2TXU
    583              OS_Delay(5000);
   \   0000000C   8800A0E3           MOV      R0,#+136
   \   00000010   4C0D80E3           ORR      R0,R0,#0x1300
   \   00000014   ........           _BLF     OS_Delay,??OS_Delay??rA
    584              OS_TASK *TxTaskPtr = OS_GetpCurrentTask();
    585              OS_SetPriority(TxTaskPtr, SAAB_TASK_PRIORITY);
   \   00000018   78009FE5           LDR      R0,??SaabComTask_1  ;; OS_pCurrentTask
   \   0000001C   8210A0E3           MOV      R1,#+130
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   ........           _BLF     OS_SetPriority,??OS_SetPriority??rA
    586          
    587              // Clear all other requests
    588              PortPtr->ClearRxBuffer();
   \   00000028   DC1095E5           LDR      R1,[R5, #+220]
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   101091E5           LDR      R1,[R1, #+16]
   \   00000034   0FE0A0E1           MOV      LR,PC
   \   00000038   11FF2FE1           BX       R1
    589              if (!BlockVector.empty()) {
   \   0000003C   550F84E2           ADD      R0,R4,#+340
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   000041E0           SUB      R0,R1,R0
   \   0000004C   0C10A0E3           MOV      R1,#+12
   \   00000050   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000054   000051E3           CMP      R1,#+0
   \   00000058   0A00000A           BEQ      ??SaabComTask_2
    590                  FOREVER {
    591                      SAABSendRequest(PortPtr);
   \                     ??SaabComTask_3:
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       ??SAABSendRequest
    592                      if (SAABHandleAnswer(PortPtr)) {
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       ??SAABHandleAnswer
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   F7FFFF0A           BEQ      ??SaabComTask_3
    593                          OS_Delay(Delay);
   \   0000007C   6C0194E5           LDR      R0,[R4, #+364]
   \   00000080   ........           _BLF     OS_Delay,??OS_Delay??rA
   \   00000084   F4FFFFEA           B        ??SaabComTask_3
    594                      }
    595                  }
    596              } else {
    597                  // We are slave
    598                  FOREVER {
    599                      SAABHandleRequest(PortPtr);
   \                     ??SaabComTask_2:
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       ??SAABHandleRequest
   \   00000094   FBFFFFEA           B        ??SaabComTask_2
   \                     ??SaabComTask_1:
   \   00000098   ........           DC32     OS_pCurrentTask
    600                  }
    601              }
    602          #endif
    603          }
    604          ////////////////////////////////////////////////////////////
    605          //
    606          //  Handles request in Slave mode
    607          //
    608          ////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    609          void SaabProtcol::SAABHandleRequest(TSNUart *PortPtr){
   \                     ??SAABHandleRequest:
   \   00000000   F34F2DE9           PUSH     {R0,R1,R4-R11,LR}
   \   00000004   34D04DE2           SUB      SP,SP,#+52
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
    610              U8 Data;
    611              if (PortPtr->Receive(&Data, 1, 0x7fffffff)) { // wait till a character comes in
   \   0000000C   38049DE5           LDR      R0,[SP, #+1080]
   \   00000010   8034E0E3           MVN      R3,#-2147483648
   \   00000014   DC4090E5           LDR      R4,[R0, #+220]
   \   00000018   0120A0E3           MOV      R2,#+1
   \   0000001C   084094E5           LDR      R4,[R4, #+8]
   \   00000020   10108DE2           ADD      R1,SP,#+16
   \   00000024   0FE0A0E1           MOV      LR,PC
   \   00000028   14FF2FE1           BX       R4
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   D202000A           BEQ      ??SAABHandleRequest_3
    612                  switch (Data) {
   \   00000034   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000038   410050E2           SUBS     R0,R0,#+65
   \   0000003C   07005012           SUBSNE   R0,R0,#+7
   \   00000040   04005012           SUBSNE   R0,R0,#+4
   \   00000044   07005012           SUBSNE   R0,R0,#+7
   \   00000048   03005012           SUBSNE   R0,R0,#+3
   \   0000004C   0A00000A           BEQ      ??SAABHandleRequest_4
   \   00000050   0B0050E2           SUBS     R0,R0,#+11
   \   00000054   07005012           SUBSNE   R0,R0,#+7
   \   00000058   04005012           SUBSNE   R0,R0,#+4
   \   0000005C   07005012           SUBSNE   R0,R0,#+7
   \   00000060   03005012           SUBSNE   R0,R0,#+3
   \   00000064   C502001A           BNE      ??SAABHandleRequest_3
    613                  case 'v':    // Tank values
    614                  case 'a':    // Tank values and alarm status
    615                  case 'h':    // Tank high limits
    616                  case 'l':    // Tank low limits
    617                  case 's':    // Ship information
    618                      SAABHandleInput(PortPtr, Data);
   \   00000068   1020DDE5           LDRB     R2,[SP, #+16]
   \   0000006C   38149DE5           LDR      R1,[SP, #+1080]
   \   00000070   34049DE5           LDR      R0,[SP, #+1076]
   \   00000074   ........           BL       ??SAABHandleInput
   \   00000078   C00200EA           B        ??SAABHandleRequest_3
    619                      break;
    620                  case 'V':    // Tank values
    621                  case 'A':    // Tank values and alarm status
    622                  case 'H':    // Tank high limits
    623                  case 'L':    // Tank low limits
    624                  case 'S':    // Ship information
    625                      {
    626                          volatile bool DataAvailable;
    627                          volatile char Data2;
    628                          char InBuf[SAAB_BUF_SIZE] = { Data };
   \                     ??SAABHandleRequest_4:
   \   0000007C   1010DDE5           LDRB     R1,[SP, #+16]
    629                          int Ptr = 1;
   \   00000080   0140A0E3           MOV      R4,#+1
   \   00000084   3410CDE5           STRB     R1,[SP, #+52]
    630                          do {
    631                              DataAvailable = PortPtr->Receive((U8 *)&Data2, 1, 200); /* wait till a character comes in */
   \                     ??SAABHandleRequest_5:
   \   00000088   38049DE5           LDR      R0,[SP, #+1080]
   \   0000008C   C830A0E3           MOV      R3,#+200
   \   00000090   DC5090E5           LDR      R5,[R0, #+220]
   \   00000094   0120A0E3           MOV      R2,#+1
   \   00000098   085095E5           LDR      R5,[R5, #+8]
   \   0000009C   11108DE2           ADD      R1,SP,#+17
   \   000000A0   0FE0A0E1           MOV      LR,PC
   \   000000A4   15FF2FE1           BX       R5
   \   000000A8   1200CDE5           STRB     R0,[SP, #+18]
    632                              InBuf[Ptr++] = (char)Data2;
   \   000000AC   1110DDE5           LDRB     R1,[SP, #+17]
   \   000000B0   34008DE2           ADD      R0,SP,#+52
   \   000000B4   0010C4E7           STRB     R1,[R4, +R0]
   \   000000B8   014084E2           ADD      R4,R4,#+1
    633                          }
    634                          while ((Ptr < SAAB_BUF_SIZE) && (DataAvailable) && (Data2 != 0x0A));
   \   000000BC   800F54E3           CMP      R4,#+512
   \   000000C0   040000AA           BGE      ??SAABHandleRequest_6
   \   000000C4   1200DDE5           LDRB     R0,[SP, #+18]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   1100DD15           LDRBNE   R0,[SP, #+17]
   \   000000D0   0A005013           CMPNE    R0,#+10
   \   000000D4   EBFFFF1A           BNE      ??SAABHandleRequest_5
    635                          // Does it seem like a valid packet?
    636                          if (Ptr >= SAAB_MIN_PACKET) {
   \                     ??SAABHandleRequest_6:
   \   000000D8   080054E3           CMP      R4,#+8
   \   000000DC   A70200BA           BLT      ??SAABHandleRequest_3
    637                              char *EndPtr;
    638                              unsigned CheckSum = 0;
   \   000000E0   0080A0E3           MOV      R8,#+0
   \   000000E4   0050A0E3           MOV      R5,#+0
    639                              Ptr -= 6;
   \   000000E8   064044E2           SUB      R4,R4,#+6
    640                              unsigned PacketCheckSum = strtoul(&InBuf[Ptr], &EndPtr, 16);
   \   000000EC   1020A0E3           MOV      R2,#+16
   \   000000F0   18108DE2           ADD      R1,SP,#+24
   \   000000F4   34008DE2           ADD      R0,SP,#+52
   \   000000F8   000084E0           ADD      R0,R4,R0
   \   000000FC   ........           _BLF     _Stoul,??_Stoul??rA
    641                              for (int i = 0; i < Ptr; i++) {
   \   00000100   0510A0E1           MOV      R1,R5
   \   00000104   030000EA           B        ??SAABHandleRequest_7
    642                                  CheckSum += InBuf[i];
   \                     ??SAABHandleRequest_8:
   \   00000108   34208DE2           ADD      R2,SP,#+52
   \   0000010C   0220D1E7           LDRB     R2,[R1, +R2]
    643                              }
   \   00000110   011081E2           ADD      R1,R1,#+1
   \   00000114   055082E0           ADD      R5,R2,R5
   \                     ??SAABHandleRequest_7:
   \   00000118   040051E1           CMP      R1,R4
   \   0000011C   F9FFFFBA           BLT      ??SAABHandleRequest_8
    644                              // Compare the checksum
    645                              if (CheckSum == PacketCheckSum) {
   \   00000120   000055E1           CMP      R5,R0
   \   00000124   9502001A           BNE      ??SAABHandleRequest_3
    646                                  int Action = SAAB_ACT_NORMAL;
    647                                  // Allocate a temp-buffer and set up the packet heading
    648                                  char OutBuf[SAAB_BUF_SIZE];
    649                                  int OutPtr = 0;
    650                                  float Scale;
    651                                  bool Sign;
    652                                  int ValKey = -1;
    653                                  int ObjType = SAAB_OBJ_ERROR;
    654          
    655                                  switch (Data) {
   \   00000128   604A9FE5           LDR      R4,??SAABHandleRequest_9+0x4  ;; `?<Constant {1355, 1366}>`
   \   0000012C   0010A0E3           MOV      R1,#+0
   \   00000130   00108DE5           STR      R1,[SP, #+0]
   \   00000134   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000138   0150E0E1           MVN      R5,R1
   \   0000013C   410050E2           SUBS     R0,R0,#+65
   \   00000140   0600000A           BEQ      ??SAABHandleRequest_10
   \   00000144   070050E2           SUBS     R0,R0,#+7
   \   00000148   04005012           SUBSNE   R0,R0,#+4
   \   0000014C   2301000A           BEQ      ??SAABHandleRequest_11
   \   00000150   070050E2           SUBS     R0,R0,#+7
   \   00000154   B701000A           BEQ      ??SAABHandleRequest_12
   \   00000158   030050E2           SUBS     R0,R0,#+3
   \   0000015C   7D02001A           BNE      ??SAABHandleRequest_13
    656                                  case 'V':    // Tank values
    657                                  case 'A':    // Tank values with alarm status
    658                                      memcpy(OutBuf, InBuf, 6); // Copy heading
   \                     ??SAABHandleRequest_10:
   \   00000160   0620A0E3           MOV      R2,#+6
   \   00000164   34108DE2           ADD      R1,SP,#+52
   \   00000168   8D0F8DE2           ADD      R0,SP,#+564
   \   0000016C   ........           _BLF     memcpy,??memcpy??rA
    659                                      OutPtr = 6; // Set pointer past heading, this is the default
   \   00000170   0610A0E3           MOV      R1,#+6
   \   00000174   00108DE5           STR      R1,[SP, #+0]
    660                                      {
    661                                          int FirstTank     = (InBuf[1] - '0') * 10 + (InBuf[2] - '0');
   \   00000178   3500DDE5           LDRB     R0,[SP, #+53]
   \   0000017C   3620DDE5           LDRB     R2,[SP, #+54]
   \   00000180   0A10A0E3           MOV      R1,#+10
    662                                          int NumberOfTanks = (InBuf[3] - '0') * 10 + (InBuf[4] - '0');
    663                                          switch (InBuf[5]) {
   \   00000184   44A4A0E3           MOV      R10,#+1140850688
   \   00000188   912020E0           MLA      R0,R1,R0,R2
   \   0000018C   3820DDE5           LDRB     R2,[SP, #+56]
   \   00000190   0F10E0E3           MVN      R1,#+15
   \   00000194   801FC1E3           BIC      R1,R1,#0x200
   \   00000198   00B081E0           ADD      R11,R1,R0
   \   0000019C   3700DDE5           LDRB     R0,[SP, #+55]
   \   000001A0   0A10A0E3           MOV      R1,#+10
   \   000001A4   7AA88AE3           ORR      R10,R10,#0x7A0000
   \   000001A8   912020E0           MLA      R0,R1,R0,R2
   \   000001AC   0F10E0E3           MVN      R1,#+15
   \   000001B0   801FC1E3           BIC      R1,R1,#0x200
   \   000001B4   006081E0           ADD      R6,R1,R0
   \   000001B8   3910DDE5           LDRB     R1,[SP, #+57]
   \   000001BC   4004A0E3           MOV      R0,#+1073741824
   \   000001C0   480780E3           ORR      R0,R0,#0x1200000
   \   000001C4   0190A0E3           MOV      R9,#+1
   \   000001C8   312041E2           SUB      R2,R1,#+49
   \   000001CC   050052E3           CMP      R2,#+5
   \   000001D0   1400009A           BLS      ??SAABHandleRequest_14
   \   000001D4   122052E2           SUBS     R2,R2,#+18
   \   000001D8   4000000A           BEQ      ??SAABHandleRequest_15
   \   000001DC   012052E2           SUBS     R2,R2,#+1
   \   000001E0   4000000A           BEQ      ??SAABHandleRequest_16
   \   000001E4   012052E2           SUBS     R2,R2,#+1
   \   000001E8   4800000A           BEQ      ??SAABHandleRequest_17
   \   000001EC   012052E2           SUBS     R2,R2,#+1
   \   000001F0   4900000A           BEQ      ??SAABHandleRequest_18
   \   000001F4   032052E2           SUBS     R2,R2,#+3
   \   000001F8   5000000A           BEQ      ??SAABHandleRequest_19
   \   000001FC   072052E2           SUBS     R2,R2,#+7
   \   00000200   4900000A           BEQ      ??SAABHandleRequest_20
   \   00000204   042052E2           SUBS     R2,R2,#+4
   \   00000208   4900000A           BEQ      ??SAABHandleRequest_21
   \   0000020C   012052E2           SUBS     R2,R2,#+1
   \   00000210   2F00000A           BEQ      ??SAABHandleRequest_22
   \   00000214   012052E2           SUBS     R2,R2,#+1
   \   00000218   3700000A           BEQ      ??SAABHandleRequest_23
   \   0000021C   012052E2           SUBS     R2,R2,#+1
   \   00000220   3800000A           BEQ      ??SAABHandleRequest_24
   \   00000224   180000EA           B        ??SAABHandleRequest_25
    664                                          case '1':
    665                                          case '2':
    666                                          case '3':
    667                                          case '4':
    668                                          case '5':
    669                                          case '6':
    670                                              {
    671                                                  int ExtraParameterNo = InBuf[5] - '1';
    672                                                  if (ExtraParameterNo < (int)ExtraParameters.size()) {
   \                     ??SAABHandleRequest_14:
   \   00000228   34049DE5           LDR      R0,[SP, #+1076]
   \   0000022C   583FA0E3           MOV      R3,#+352
   \   00000230   000083E0           ADD      R0,R3,R0
   \   00000234   041090E5           LDR      R1,[R0, #+4]
   \   00000238   000090E5           LDR      R0,[R0, #+0]
   \   0000023C   000041E0           SUB      R0,R1,R0
   \   00000240   1810A0E3           MOV      R1,#+24
   \   00000244   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000248   010052E1           CMP      R2,R1
   \   0000024C   0E0000AA           BGE      ??SAABHandleRequest_25
    673                                                      ValKey = ExtraParameters[ExtraParameterNo].ValueKey;
   \   00000250   34149DE5           LDR      R1,[SP, #+1076]
   \   00000254   1800A0E3           MOV      R0,#+24
   \   00000258   011093E7           LDR      R1,[R3, +R1]
   \   0000025C   901227E0           MLA      R7,R0,R2,R1
    674                                                      Scale  = ExtraParameters[ExtraParameterNo].Scale;
   \   00000260   080097E5           LDR      R0,[R7, #+8]
   \   00000264   045097E5           LDR      R5,[R7, #+4]
   \   00000268   ........           _BLF     __longToFloat,??__longToFloat??rA
    675                                                      Sign   = ExtraParameters[ExtraParameterNo].Sign;
   \   0000026C   0C90D7E5           LDRB     R9,[R7, #+12]
    676                                                      ObjType = ExtraParameters[ExtraParameterNo].ObjType;
   \   00000270   108097E5           LDR      R8,[R7, #+16]
   \   00000274   00A0A0E1           MOV      R10,R0
    677                                                      Action = ExtraParameters[ExtraParameterNo].Action;
    678                                                  } else {
    679                                                      Sign      = false;
    680                                                      Action = SAAB_ACT_ERROR;
    681                                                  }
    682                                              }
    683                                              break;
    684                                          case 'U':
    685                                              ValKey = SVT_ULLAGE; // Corrected to ref point.
    686                                              Scale = 1000;
    687                                              Sign      = false;
    688                                              ObjType = SAAB_TANKVAL;
    689                                              break;
    690                                          case 'C':
    691                                              ValKey = SVT_ULLAGE_FC;    // Corrected to FC
    692                                              Scale = 1000;
    693                                              Sign      = false;
    694                                              ObjType = SAAB_TANKVAL;
    695                                              break;
    696                                          case 'D':
    697                                              ValKey = SVT_DENSITY;
    698                                              Scale = 10000;
    699                                              Sign      = false;
    700                                              ObjType = SAAB_TANKVAL;
    701                                              break;
    702                                          case 'V':
    703                                              ValKey = SVT_VOLUME;
    704                                              Scale = 1;
    705                                              Sign      = false;
    706                                              ObjType = SAAB_TANKVAL;
    707                                              break;
    708                                          case 'W':
    709                                              ValKey = SVT_WEIGHT;
    710                                              Scale = 1;
    711                                              Sign      = false;
    712                                              ObjType = SAAB_TANKVAL;
    713                                              break;
    714                                          case 'E':
    715                                              ValKey = SVT_LOADRATE;
    716                                              Scale = 10;
    717                                              Sign      = false;
    718                                              ObjType = SAAB_TANKVAL;
    719                                              break;
    720                                          case 'F':
    721                                              ValKey = SVT_VOLPERCENT;
    722                                              Scale = 100;
    723                                              Sign      = false;
    724                                              ObjType = SAAB_TANKVAL;
    725                                              break;
    726                                          case 'P':
    727                                              ValKey = SVT_PRESSURE;
    728                                              Scale  = 1000;
    729                                              Sign   = true;
    730                                              ObjType = SAAB_TANKVAL;
    731                                              break;
    732                                          case 'T':
    733                                              ValKey = SVT_TEMP;
    734                                              Scale  = 10;
    735                                              Sign   = true;
    736                                              ObjType = SAAB_TANKVAL;
    737                                              break;
    738                                          case 'I':
    739                                              ValKey = SVT_LEVEL_SENSOR;
    740                                              Scale  = 1000;
    741                                              Sign   = false;
    742                                              ObjType = SAAB_TANKVAL;
    743                                              break;
    744                                          case 'u':
    745                                          case 'i':
    746                                              Sign   = false;
    747                                              Action = SAAB_ACT_ERROR;
    748                                              ObjType = SAAB_TANKVAL;
    749                                              break;
    750                                          case 'R':   // Not supported
    751                                          case 'X':
    752                                          case 'Y':
    753                                          case 'Z':
    754                                              Sign   = true;
    755                                              Action = SAAB_ACT_ERROR;
    756                                              ObjType = SAAB_TANKVAL;
    757                                              break;
    758                                          default:
    759                                              Sign   = false;
    760                                              Action = SAAB_ACT_ERROR;
    761                                              ObjType = SAAB_TANKVAL;
    762                                              break;
    763                                          }
    764                                          switch (Action) {
   \   00000278   140097E5           LDR      R0,[R7, #+20]
   \   0000027C   000050E3           CMP      R0,#+0
   \   00000280   3000000A           BEQ      ??SAABHandleRequest_26
   \   00000284   010050E2           SUBS     R0,R0,#+1
   \   00000288   9500000A           BEQ      ??SAABHandleRequest_27
    765                                          case SAAB_ACT_NORMAL:
    766                                              {
    767                                                  // I have a value I support
    768                                                  int LastTank = FirstTank + NumberOfTanks;
    769                                                  for (int Index = FirstTank; Index < LastTank; Index++) {
    770                                                      PROTank *TmpPtr = (PROTank *)PROXRefObject::GetSaabObject(Index);
    771                                                      if (TmpPtr) {
    772                                                          int DecPnt, Unit;
    773                                                          float Value;
    774                                                          switch (TmpPtr->GetValue(ValKey, 0, Value, DecPnt, Unit)) {
    775                                                          case GETVAL_NOT_AVAILABLE   :
    776                                                          case GETVAL_TANK_EMPTY      :
    777                                                          case GETVAL_NO_DISPLAY      :
    778                                                          case GETVAL_ERROR           :
    779                                                          case GETVAL_FLOAT_NOT_LEGAL :
    780                                                          case GETVAL_INT_NOT_LEGAL   :
    781                                                          case GETVAL_STRING_NOT_LEGAL:
    782                                                          case GETVAL_DRY_SENSOR      :
    783                                                          case GETVAL_DISABLED        :
    784                                                          case GETVAL_FWD_AFT         :
    785                                                          case GETVAL_PORT_STBD       :
    786                                                          case GETVAL_SHIP_UPRIGHT    :
    787                                                              Value = 0.0;
    788                                                              break;
    789                                                          default:
    790                                                              break;
    791          
    792                                                          }
    793                                                          Value *= Scale;
    794                                                          if (Sign) {
    795                                                              if (Value < 0.0) Value -= 0.5;
    796                                                              else Value += 0.5;
    797                                                              OutPtr += sprintf(&OutBuf[OutPtr], "%05i", (int)Value);
    798                                                          } else {
    799                                                              if (Value >= 0.0) {
    800                                                                  Value += 0.5;
    801                                                              } else {
    802                                                                  Value = 0.0;
    803                                                              }
    804                                                              unsigned UVal = (unsigned)Value;
    805                                                              OutPtr += sprintf(&OutBuf[OutPtr], "%05u", UVal);
    806                                                          }
    807                                                      } else { // If unknown tank, send just ******
    808                                                          OutPtr += sprintf(&OutBuf[OutPtr], "E****");
    809                                                      }
    810                                                      switch (Data) {
    811                                                      case 'V':
    812                                                          break;
    813                                                      case 'A':
    814                                                          // Include alarm status
    815                                                          AddAlarmStatus(OutBuf, OutPtr, Index, ObjType);
    816                                                          break;
    817                                                      } // End of switch
    818                                                  } // End for loop
    819                                              }
    820          
    821                                              break;
    822                                          case SAAB_ACT_SPECIAL:
    823                                              {
    824                                                  int DecPnt, Unit;
    825                                                  float Value;
    826                                                  switch (PROAtmReference::PROAtmRefPtr->GetValue(ValKey, 0, Value, DecPnt, Unit)) {
    827                                                  case GETVAL_NOT_AVAILABLE   :
    828                                                  case GETVAL_TANK_EMPTY      :
    829                                                  case GETVAL_NO_DISPLAY      :
    830                                                  case GETVAL_ERROR           :
    831                                                  case GETVAL_FLOAT_NOT_LEGAL :
    832                                                  case GETVAL_INT_NOT_LEGAL   :
    833                                                  case GETVAL_STRING_NOT_LEGAL:
    834                                                  case GETVAL_DRY_SENSOR      :
    835                                                  case GETVAL_DISABLED        :
    836                                                  case GETVAL_FWD_AFT         :
    837                                                  case GETVAL_PORT_STBD       :
    838                                                  case GETVAL_SHIP_UPRIGHT    :
    839                                                      Value = 0.0;
    840                                                      break;
    841                                                  default:
    842                                                      break;
    843          
    844                                                  }
    845                                                  Value *= Scale;
    846                                                  if (Value < 0.0) Value -= 0.5;
    847                                                  else Value += 0.5;
    848                                                  OutPtr += sprintf(&OutBuf[OutPtr], "%05i", (int)Value);
    849                                              }
    850                                              break;
    851                                          case SAAB_ACT_ERROR:
    852                                          default:
    853                                              {   // Not supported value, juste send *****
    854                                                  // Flag that the value is invalid
    855                                                  switch (Data) {
   \                     ??SAABHandleRequest_25:
   \   0000028C   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000290   0B5086E0           ADD      R5,R6,R11
   \   00000294   410050E2           SUBS     R0,R0,#+65
   \   00000298   C400000A           BEQ      ??SAABHandleRequest_28
   \   0000029C   150050E2           SUBS     R0,R0,#+21
   \   000002A0   2C02001A           BNE      ??SAABHandleRequest_13
    856                                                  case 'V':
    857                                                      {
    858                                                          int LastTank = FirstTank + NumberOfTanks;
    859                                                          for (int Index = FirstTank; Index < LastTank; Index++) {
   \                     ??SAABHandleRequest_29:
   \   000002A4   05005BE1           CMP      R11,R5
   \   000002A8   2A0200AA           BGE      ??SAABHandleRequest_13
    860                                                              OutPtr += sprintf(&OutBuf[OutPtr], "*****");
   \   000002AC   00009DE5           LDR      R0,[SP, #+0]
   \   000002B0   201084E2           ADD      R1,R4,#+32
   \   000002B4   8D2F8DE2           ADD      R2,SP,#+564
   \   000002B8   020080E0           ADD      R0,R0,R2
   \   000002BC   ........           _BLF     sprintf,??sprintf??rA
   \   000002C0   00209DE5           LDR      R2,[SP, #+0]
    861                                                          }
   \   000002C4   01B08BE2           ADD      R11,R11,#+1
   \   000002C8   020080E0           ADD      R0,R0,R2
   \   000002CC   00008DE5           STR      R0,[SP, #+0]
   \   000002D0   F3FFFFEA           B        ??SAABHandleRequest_29
    862                                                      }
   \                     ??SAABHandleRequest_22:
   \   000002D4   EB50A0E3           MOV      R5,#+235
   \                     ??SAABHandleRequest_30:
   \   000002D8   C05F85E3           ORR      R5,R5,#0x300
   \   000002DC   180000EA           B        ??SAABHandleRequest_31
   \                     ??SAABHandleRequest_15:
   \   000002E0   EF50A0E3           MOV      R5,#+239
   \   000002E4   FBFFFFEA           B        ??SAABHandleRequest_30
   \                     ??SAABHandleRequest_16:
   \   000002E8   EE50A0E3           MOV      R5,#+238
   \   000002EC   C05F85E3           ORR      R5,R5,#0x300
   \   000002F0   46A4A0E3           MOV      R10,#+1174405120
   \   000002F4   71A98AE3           ORR      R10,R10,#0x1C4000
   \   000002F8   110000EA           B        ??SAABHandleRequest_31
   \                     ??SAABHandleRequest_23:
   \   000002FC   FF5FA0E3           MOV      R5,#+1020
   \                     ??SAABHandleRequest_32:
   \   00000300   FEA5A0E3           MOV      R10,#+1065353216
   \   00000304   0E0000EA           B        ??SAABHandleRequest_31
   \                     ??SAABHandleRequest_24:
   \   00000308   FF5F89E3           ORR      R5,R9,#0x3FC
   \   0000030C   FBFFFFEA           B        ??SAABHandleRequest_32
   \                     ??SAABHandleRequest_17:
   \   00000310   255BA0E1           MOV      R5,R5, LSR #+22
   \   00000314   00A0A0E1           MOV      R10,R0
   \   00000318   090000EA           B        ??SAABHandleRequest_31
   \                     ??SAABHandleRequest_18:
   \   0000031C   FE50A0E3           MOV      R5,#+254
   \   00000320   C05F85E3           ORR      R5,R5,#0x300
   \   00000324   6AA780E2           ADD      R10,R0,#+27787264
   \   00000328   050000EA           B        ??SAABHandleRequest_31
   \                     ??SAABHandleRequest_20:
   \   0000032C   405EA0E3           MOV      R5,#+1024
   \   00000330   040000EA           B        ??SAABHandleRequest_26
   \                     ??SAABHandleRequest_21:
   \   00000334   FB5FA0E3           MOV      R5,#+1004
   \   00000338   00A0A0E1           MOV      R10,R0
   \   0000033C   010000EA           B        ??SAABHandleRequest_26
   \                     ??SAABHandleRequest_19:
   \   00000340   FA5F89E3           ORR      R5,R9,#0x3E8
   \                     ??SAABHandleRequest_31:
   \   00000344   0090A0E3           MOV      R9,#+0
   \                     ??SAABHandleRequest_26:
   \   00000348   0B1086E0           ADD      R1,R6,R11
   \   0000034C   14108DE5           STR      R1,[SP, #+20]
   \   00000350   130000EA           B        ??SAABHandleRequest_33
   \                     ??SAABHandleRequest_34:
   \   00000354   00009DE5           LDR      R0,[SP, #+0]
   \   00000358   181084E2           ADD      R1,R4,#+24
   \   0000035C   8D2F8DE2           ADD      R2,SP,#+564
   \   00000360   020080E0           ADD      R0,R0,R2
   \   00000364   ........           _BLF     sprintf,??sprintf??rA
   \                     ??SAABHandleRequest_35:
   \   00000368   00209DE5           LDR      R2,[SP, #+0]
   \   0000036C   020080E0           ADD      R0,R0,R2
   \   00000370   00008DE5           STR      R0,[SP, #+0]
   \   00000374   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000378   410050E3           CMP      R0,#+65
   \   0000037C   0700001A           BNE      ??SAABHandleRequest_36
   \   00000380   0800A0E1           MOV      R0,R8
   \   00000384   01002DE9           PUSH     {R0}
   \   00000388   38049DE5           LDR      R0,[SP, #+1080]
   \   0000038C   0B30A0E1           MOV      R3,R11
   \   00000390   04208DE2           ADD      R2,SP,#+4
   \   00000394   8E1F8DE2           ADD      R1,SP,#+568
   \   00000398   ........           BL       ??AddAlarmStatus
   \   0000039C   04D08DE2           ADD      SP,SP,#+4
   \                     ??SAABHandleRequest_36:
   \   000003A0   01B08BE2           ADD      R11,R11,#+1
   \                     ??SAABHandleRequest_33:
   \   000003A4   14009DE5           LDR      R0,[SP, #+20]
   \   000003A8   00005BE1           CMP      R11,R0
   \   000003AC   E90100AA           BGE      ??SAABHandleRequest_13
   \   000003B0   0B00A0E1           MOV      R0,R11
   \   000003B4   ........           _BLF     ??GetSaabObject,??GetSaabObject??rA
   \   000003B8   0060B0E1           MOVS     R6,R0
   \   000003BC   E4FFFF0A           BEQ      ??SAABHandleRequest_34
   \   000003C0   04008DE2           ADD      R0,SP,#+4
   \   000003C4   01002DE9           PUSH     {R0}
   \   000003C8   0C008DE2           ADD      R0,SP,#+12
   \   000003CC   01002DE9           PUSH     {R0}
   \   000003D0   0600A0E1           MOV      R0,R6
   \   000003D4   A46096E5           LDR      R6,[R6, #+164]
   \   000003D8   14308DE2           ADD      R3,SP,#+20
   \   000003DC   246096E5           LDR      R6,[R6, #+36]
   \   000003E0   0020A0E3           MOV      R2,#+0
   \   000003E4   0510A0E1           MOV      R1,R5
   \   000003E8   0FE0A0E1           MOV      LR,PC
   \   000003EC   16FF2FE1           BX       R6
   \   000003F0   08D08DE2           ADD      SP,SP,#+8
   \   000003F4   010040E2           SUB      R0,R0,#+1
   \   000003F8   0B0050E3           CMP      R0,#+11
   \   000003FC   0010A093           MOVLS    R1,#+0
   \   00000400   0C108D95           STRLS    R1,[SP, #+12]
   \   00000404   0C009DE5           LDR      R0,[SP, #+12]
   \   00000408   0A10A0E1           MOV      R1,R10
   \   0000040C   ........           _BLF     __fMul,??__fMul??rA
   \   00000410   0C008DE5           STR      R0,[SP, #+12]
   \   00000414   000059E3           CMP      R9,#+0
   \   00000418   1800000A           BEQ      ??SAABHandleRequest_37
   \   0000041C   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000420   0060A0E1           MOV      R6,R0
   \   00000424   0170A0E1           MOV      R7,R1
   \   00000428   0020A0E3           MOV      R2,#+0
   \   0000042C   0030A0E3           MOV      R3,#+0
   \   00000430   ........           _BLF     __dLess,??__dLess??rA
   \   00000434   000050E3           CMP      R0,#+0
   \   00000438   0000A0E3           MOV      R0,#+0
   \   0000043C   B014A013           MOVNE    R1,#-1342177280
   \   00000440   C015A003           MOVEQ    R1,#+805306368
   \   00000444   FE1681E3           ORR      R1,R1,#0xFE00000
   \   00000448   0620A0E1           MOV      R2,R6
   \   0000044C   0730A0E1           MOV      R3,R7
   \   00000450   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000454   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000458   0C008DE5           STR      R0,[SP, #+12]
   \   0000045C   0C009DE5           LDR      R0,[SP, #+12]
   \   00000460   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000464   0020A0E1           MOV      R2,R0
   \   00000468   00009DE5           LDR      R0,[SP, #+0]
   \   0000046C   081084E2           ADD      R1,R4,#+8
   \                     ??SAABHandleRequest_38:
   \   00000470   8D3F8DE2           ADD      R3,SP,#+564
   \   00000474   030080E0           ADD      R0,R0,R3
   \   00000478   ........           _BLF     sprintf,??sprintf??rA
   \   0000047C   B9FFFFEA           B        ??SAABHandleRequest_35
   \                     ??SAABHandleRequest_37:
   \   00000480   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000484   0060A0E1           MOV      R6,R0
   \   00000488   0170A0E1           MOV      R7,R1
   \   0000048C   0020A0E3           MOV      R2,#+0
   \   00000490   0030A0E3           MOV      R3,#+0
   \   00000494   ........           _BLF     __dGreaterEqual,??__dGreaterEqual??rA
   \   00000498   000050E3           CMP      R0,#+0
   \   0000049C   0800000A           BEQ      ??SAABHandleRequest_39
   \   000004A0   0000A0E3           MOV      R0,#+0
   \   000004A4   C015A0E3           MOV      R1,#+805306368
   \   000004A8   FE1681E3           ORR      R1,R1,#0xFE00000
   \   000004AC   0620A0E1           MOV      R2,R6
   \   000004B0   0730A0E1           MOV      R3,R7
   \   000004B4   ........           _BLF     __dAdd,??__dAdd??rA
   \   000004B8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000004BC   0C008DE5           STR      R0,[SP, #+12]
   \   000004C0   010000EA           B        ??SAABHandleRequest_40
   \                     ??SAABHandleRequest_39:
   \   000004C4   0010A0E3           MOV      R1,#+0
   \   000004C8   0C108DE5           STR      R1,[SP, #+12]
   \                     ??SAABHandleRequest_40:
   \   000004CC   0C009DE5           LDR      R0,[SP, #+12]
   \   000004D0   ........           _BLF     __floatToUlong,??__floatToUlong??rA
   \   000004D4   0020A0E1           MOV      R2,R0
   \   000004D8   00009DE5           LDR      R0,[SP, #+0]
   \   000004DC   101084E2           ADD      R1,R4,#+16
   \   000004E0   E2FFFFEA           B        ??SAABHandleRequest_38
   \                     ??SAABHandleRequest_27:
   \   000004E4   A8069FE5           LDR      R0,??SAABHandleRequest_9+0x8  ;; ??PROAtmRefPtr
   \   000004E8   0510A0E1           MOV      R1,R5
   \   000004EC   006090E5           LDR      R6,[R0, #+0]
   \   000004F0   04008DE2           ADD      R0,SP,#+4
   \   000004F4   01002DE9           PUSH     {R0}
   \   000004F8   10008DE2           ADD      R0,SP,#+16
   \   000004FC   01002DE9           PUSH     {R0}
   \   00000500   A45096E5           LDR      R5,[R6, #+164]
   \   00000504   10308DE2           ADD      R3,SP,#+16
   \   00000508   245095E5           LDR      R5,[R5, #+36]
   \   0000050C   0020A0E3           MOV      R2,#+0
   \   00000510   0600A0E1           MOV      R0,R6
   \   00000514   0FE0A0E1           MOV      LR,PC
   \   00000518   15FF2FE1           BX       R5
   \   0000051C   08D08DE2           ADD      SP,SP,#+8
   \   00000520   010040E2           SUB      R0,R0,#+1
   \   00000524   0B0050E3           CMP      R0,#+11
   \   00000528   0010A093           MOVLS    R1,#+0
   \   0000052C   08108D95           STRLS    R1,[SP, #+8]
   \   00000530   08009DE5           LDR      R0,[SP, #+8]
   \   00000534   0A10A0E1           MOV      R1,R10
   \   00000538   ........           _BLF     __fMul,??__fMul??rA
   \   0000053C   08008DE5           STR      R0,[SP, #+8]
   \   00000540   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000544   0060A0E1           MOV      R6,R0
   \   00000548   0170A0E1           MOV      R7,R1
   \   0000054C   0020A0E3           MOV      R2,#+0
   \   00000550   0030A0E3           MOV      R3,#+0
   \   00000554   ........           _BLF     __dLess,??__dLess??rA
   \   00000558   000050E3           CMP      R0,#+0
   \   0000055C   0000A0E3           MOV      R0,#+0
   \   00000560   B014A013           MOVNE    R1,#-1342177280
   \   00000564   C015A003           MOVEQ    R1,#+805306368
   \   00000568   FE1681E3           ORR      R1,R1,#0xFE00000
   \   0000056C   0620A0E1           MOV      R2,R6
   \   00000570   0730A0E1           MOV      R3,R7
   \   00000574   ........           _BLF     __dAdd,??__dAdd??rA
   \   00000578   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   0000057C   08008DE5           STR      R0,[SP, #+8]
   \   00000580   08009DE5           LDR      R0,[SP, #+8]
   \   00000584   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000588   0020A0E1           MOV      R2,R0
   \   0000058C   00009DE5           LDR      R0,[SP, #+0]
   \   00000590   081084E2           ADD      R1,R4,#+8
   \   00000594   8D3F8DE2           ADD      R3,SP,#+564
   \   00000598   030080E0           ADD      R0,R0,R3
   \   0000059C   ........           _BLF     sprintf,??sprintf??rA
   \   000005A0   00209DE5           LDR      R2,[SP, #+0]
   \   000005A4   020080E0           ADD      R0,R0,R2
   \   000005A8   00008DE5           STR      R0,[SP, #+0]
   \   000005AC   690100EA           B        ??SAABHandleRequest_13
    863                                                      break;
    864                                                  case 'A':
    865                                                      {
    866                                                          int LastTank = FirstTank + NumberOfTanks;
    867                                                          for (int Index = FirstTank; Index < LastTank; Index++) {
   \                     ??SAABHandleRequest_28:
   \   000005B0   05005BE1           CMP      R11,R5
   \   000005B4   670100AA           BGE      ??SAABHandleRequest_13
    868                                                              OutPtr += sprintf(&OutBuf[OutPtr], "******");
   \   000005B8   00009DE5           LDR      R0,[SP, #+0]
   \   000005BC   281084E2           ADD      R1,R4,#+40
   \   000005C0   8D2F8DE2           ADD      R2,SP,#+564
   \   000005C4   020080E0           ADD      R0,R0,R2
   \   000005C8   ........           _BLF     sprintf,??sprintf??rA
   \   000005CC   00209DE5           LDR      R2,[SP, #+0]
    869                                                          }
   \   000005D0   01B08BE2           ADD      R11,R11,#+1
   \   000005D4   020080E0           ADD      R0,R0,R2
   \   000005D8   00008DE5           STR      R0,[SP, #+0]
   \   000005DC   F3FFFFEA           B        ??SAABHandleRequest_28
    870                                                      }
    871                                                  } // End switch
    872                                              } // End case Error
    873                                          } // End switch
    874          
    875                                      }   // End case 'V', 'A'
    876          
    877                                      break;
    878          
    879                                  case 'H':
    880                                  case 'L':
    881                                      memcpy(OutBuf, InBuf, 6); // Copy heading
   \                     ??SAABHandleRequest_11:
   \   000005E0   0620A0E3           MOV      R2,#+6
   \   000005E4   34108DE2           ADD      R1,SP,#+52
   \   000005E8   8D0F8DE2           ADD      R0,SP,#+564
   \   000005EC   ........           _BLF     memcpy,??memcpy??rA
    882                                      OutPtr = 6; // Set pointer past heading, this is the default
   \   000005F0   0610A0E3           MOV      R1,#+6
   \   000005F4   00108DE5           STR      R1,[SP, #+0]
    883                                      {
    884                                          int FirstTank     = (InBuf[1] - '0') * 10 + (InBuf[2] - '0');
   \   000005F8   3500DDE5           LDRB     R0,[SP, #+53]
   \   000005FC   3620DDE5           LDRB     R2,[SP, #+54]
   \   00000600   0A10A0E3           MOV      R1,#+10
   \   00000604   912020E0           MLA      R0,R1,R0,R2
    885                                          int NumberOfTanks = (InBuf[3] - '0') * 10 + (InBuf[4] - '0');
   \   00000608   3820DDE5           LDRB     R2,[SP, #+56]
   \   0000060C   0F10E0E3           MVN      R1,#+15
   \   00000610   801FC1E3           BIC      R1,R1,#0x200
   \   00000614   008081E0           ADD      R8,R1,R0
   \   00000618   3700DDE5           LDRB     R0,[SP, #+55]
   \   0000061C   0A10A0E3           MOV      R1,#+10
   \   00000620   912020E0           MLA      R0,R1,R0,R2
   \   00000624   0F10E0E3           MVN      R1,#+15
   \   00000628   801FC1E3           BIC      R1,R1,#0x200
   \   0000062C   000081E0           ADD      R0,R1,R0
    886                                          switch (InBuf[5]) {
   \   00000630   3910DDE5           LDRB     R1,[SP, #+57]
   \   00000634   691051E2           SUBS     R1,R1,#+105
   \   00000638   0D00000A           BEQ      ??SAABHandleRequest_41
   \   0000063C   0C1051E2           SUBS     R1,R1,#+12
   \   00000640   1500001A           BNE      ??SAABHandleRequest_42
    887                                          case 'u':
    888                                              switch (Data) {
   \   00000644   1010DDE5           LDRB     R1,[SP, #+16]
   \   00000648   481051E2           SUBS     R1,R1,#+72
   \   0000064C   0200000A           BEQ      ??SAABHandleRequest_43
   \   00000650   041051E2           SUBS     R1,R1,#+4
   \   00000654   0400000A           BEQ      ??SAABHandleRequest_44
   \   00000658   010000EA           B        ??SAABHandleRequest_45
    889                                              case 'H':
    890                                                  ValKey = SVT_HI_ULLAGE_LIM;
   \                     ??SAABHandleRequest_43:
   \   0000065C   F650A0E3           MOV      R5,#+246
   \                     ??SAABHandleRequest_46:
   \   00000660   8C5D85E3           ORR      R5,R5,#0x2300
    891                                                  break;
    892                                              case 'L':
    893                                                  ValKey = SVT_LO_ULLAGE_LIM;
    894                                                  break;
    895                                              }
    896                                              Scale   = 1000;
    897                                              Sign    = true;
    898                                              ObjType = SAAB_TANKVAL;
    899                                              break;
    900                                          case 'i':
    901                                              switch (Data) {
    902                                              case 'H':
    903                                                  ValKey = SVT_HI_LEVEL_LIMIT;
    904                                                  break;
    905                                              case 'L':
    906                                                  ValKey = SVT_LO_LEVEL_LIMIT;
    907                                                  break;
    908                                              }
    909                                              Scale   = 1000;
    910                                              Sign    = true;
    911                                              ObjType = SAAB_TANKVAL;
    912                                              break;
    913                                          default:
    914                                              Sign      = false;
    915                                              Action = SAAB_ACT_ERROR;
    916                                              ObjType = SAAB_TANKVAL;
    917                                              break;
    918                                          }
    919                                          switch (Action) {
    920                                          case SAAB_ACT_NORMAL:
    921                                              {
    922                                                  // I have a value I support
    923                                                  int LastTank = FirstTank + NumberOfTanks;
   \                     ??SAABHandleRequest_45:
   \   00000664   089080E0           ADD      R9,R0,R8
    924                                                  for (int Index = FirstTank; Index < LastTank; Index++) {
   \   00000668   310000EA           B        ??SAABHandleRequest_47
   \                     ??SAABHandleRequest_44:
   \   0000066C   FB50A0E3           MOV      R5,#+251
   \   00000670   FAFFFFEA           B        ??SAABHandleRequest_46
   \                     ??SAABHandleRequest_41:
   \   00000674   1010DDE5           LDRB     R1,[SP, #+16]
   \   00000678   481051E2           SUBS     R1,R1,#+72
   \   0000067C   0200000A           BEQ      ??SAABHandleRequest_48
   \   00000680   041051E2           SUBS     R1,R1,#+4
   \   00000684   0200000A           BEQ      ??SAABHandleRequest_49
   \   00000688   F5FFFFEA           B        ??SAABHandleRequest_45
   \                     ??SAABHandleRequest_48:
   \   0000068C   E750A0E3           MOV      R5,#+231
   \   00000690   F2FFFFEA           B        ??SAABHandleRequest_46
   \                     ??SAABHandleRequest_49:
   \   00000694   E850A0E3           MOV      R5,#+232
   \   00000698   F0FFFFEA           B        ??SAABHandleRequest_46
    925                                                      PROTank *TmpPtr = (PROTank *)PROXRefObject::GetSaabObject(Index);
    926                                                      if (TmpPtr) {
    927                                                          int DecPnt, Unit;
    928                                                          float Value;
    929                                                          switch (TmpPtr->GetValue(ValKey, 0, Value, DecPnt, Unit)) {
    930                                                          case GETVAL_NOT_AVAILABLE   :
    931                                                          case GETVAL_TANK_EMPTY      :
    932                                                          case GETVAL_NO_DISPLAY      :
    933                                                          case GETVAL_ERROR           :
    934                                                          case GETVAL_FLOAT_NOT_LEGAL :
    935                                                          case GETVAL_INT_NOT_LEGAL   :
    936                                                          case GETVAL_STRING_NOT_LEGAL:
    937                                                          case GETVAL_DRY_SENSOR      :
    938                                                          case GETVAL_DISABLED        :
    939                                                          case GETVAL_FWD_AFT         :
    940                                                          case GETVAL_PORT_STBD       :
    941                                                          case GETVAL_SHIP_UPRIGHT    :
    942                                                              Value = 0.0;
    943                                                              break;
    944                                                          default:
    945                                                              break;
    946          
    947                                                          }
    948                                                          Value *= Scale;
    949                                                          if (Sign) {
    950                                                              if (Value < 0.0) Value -= 0.5;
    951                                                              else Value += 0.5;
    952                                                              OutPtr += sprintf(&OutBuf[OutPtr], "%05i", (int)Value);
    953                                                          } else {
    954                                                              if (Value >= 0.0) {
    955                                                                  Value += 0.5;
    956                                                              } else {
    957                                                                  Value = 0.0;
    958                                                              }
    959                                                              unsigned UVal = (unsigned)Value;
    960                                                              OutPtr += sprintf(&OutBuf[OutPtr], "%05u", UVal);
    961                                                          }
    962                                                      } else { // If unknown tank, send just ******
    963                                                          OutPtr += sprintf(&OutBuf[OutPtr], "E****");
    964                                                      }
    965                                                      switch (Data) {
    966                                                      case 'V':
    967                                                          break;
    968                                                      case 'A':
    969                                                          // Include alarm status
    970                                                          AddAlarmStatus(OutBuf, OutPtr, Index, ObjType);
    971                                                          break;
    972                                                      } // End of switch
    973                                                  } // End for loop
    974                                              }
    975          
    976                                              break;
    977                                          case SAAB_ACT_SPECIAL:
    978                                              {
    979                                                  int DecPnt, Unit;
    980                                                  float Value;
    981                                                  switch (PROAtmReference::PROAtmRefPtr->GetValue(ValKey, 0, Value, DecPnt, Unit)) {
    982                                                  case GETVAL_NOT_AVAILABLE   :
    983                                                  case GETVAL_TANK_EMPTY      :
    984                                                  case GETVAL_NO_DISPLAY      :
    985                                                  case GETVAL_ERROR           :
    986                                                  case GETVAL_FLOAT_NOT_LEGAL :
    987                                                  case GETVAL_INT_NOT_LEGAL   :
    988                                                  case GETVAL_STRING_NOT_LEGAL:
    989                                                  case GETVAL_DRY_SENSOR      :
    990                                                  case GETVAL_DISABLED        :
    991                                                  case GETVAL_FWD_AFT         :
    992                                                  case GETVAL_PORT_STBD       :
    993                                                  case GETVAL_SHIP_UPRIGHT    :
    994                                                      Value = 0.0;
    995                                                      break;
    996                                                  default:
    997                                                      break;
    998          
    999                                                  }
   1000                                                  Value *= Scale;
   1001                                                  if (Value < 0.0) Value -= 0.5;
   1002                                                  else Value += 0.5;
   1003                                                  OutPtr += sprintf(&OutBuf[OutPtr], "%05i", (int)Value);
   1004                                              }
   1005                                              break;
   1006                                          case SAAB_ACT_ERROR:
   1007                                          default:
   1008                                              {   // Not supported value, juste send *****
   1009                                                  // Flag that the value is invalid
   1010                                                  switch (Data) {
   \                     ??SAABHandleRequest_42:
   \   0000069C   085080E0           ADD      R5,R0,R8
   \   000006A0   1000DDE5           LDRB     R0,[SP, #+16]
   \   000006A4   410050E2           SUBS     R0,R0,#+65
   \   000006A8   5600000A           BEQ      ??SAABHandleRequest_50
   \   000006AC   150050E2           SUBS     R0,R0,#+21
   \   000006B0   2801001A           BNE      ??SAABHandleRequest_13
   1011                                                  case 'V':
   1012                                                      {
   1013                                                          int LastTank = FirstTank + NumberOfTanks;
   1014                                                          for (int Index = FirstTank; Index < LastTank; Index++) {
   \                     ??SAABHandleRequest_51:
   \   000006B4   050058E1           CMP      R8,R5
   \   000006B8   260100AA           BGE      ??SAABHandleRequest_13
   1015                                                              OutPtr += sprintf(&OutBuf[OutPtr], "*****");
   \   000006BC   00009DE5           LDR      R0,[SP, #+0]
   \   000006C0   201084E2           ADD      R1,R4,#+32
   \   000006C4   8D2F8DE2           ADD      R2,SP,#+564
   \   000006C8   020080E0           ADD      R0,R0,R2
   \   000006CC   ........           _BLF     sprintf,??sprintf??rA
   \   000006D0   00209DE5           LDR      R2,[SP, #+0]
   1016                                                          }
   \   000006D4   018088E2           ADD      R8,R8,#+1
   \   000006D8   020080E0           ADD      R0,R0,R2
   \   000006DC   00008DE5           STR      R0,[SP, #+0]
   \   000006E0   F3FFFFEA           B        ??SAABHandleRequest_51
   1017                                                      }
   \                     ??SAABHandleRequest_52:
   \   000006E4   00009DE5           LDR      R0,[SP, #+0]
   \   000006E8   181084E2           ADD      R1,R4,#+24
   \   000006EC   8D2F8DE2           ADD      R2,SP,#+564
   \   000006F0   020080E0           ADD      R0,R0,R2
   \   000006F4   ........           _BLF     sprintf,??sprintf??rA
   \                     ??SAABHandleRequest_53:
   \   000006F8   00209DE5           LDR      R2,[SP, #+0]
   \   000006FC   020080E0           ADD      R0,R0,R2
   \   00000700   00008DE5           STR      R0,[SP, #+0]
   \   00000704   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000708   410050E3           CMP      R0,#+65
   \   0000070C   0700001A           BNE      ??SAABHandleRequest_54
   \   00000710   0000A0E3           MOV      R0,#+0
   \   00000714   01002DE9           PUSH     {R0}
   \   00000718   38049DE5           LDR      R0,[SP, #+1080]
   \   0000071C   0830A0E1           MOV      R3,R8
   \   00000720   04208DE2           ADD      R2,SP,#+4
   \   00000724   8E1F8DE2           ADD      R1,SP,#+568
   \   00000728   ........           BL       ??AddAlarmStatus
   \   0000072C   04D08DE2           ADD      SP,SP,#+4
   \                     ??SAABHandleRequest_54:
   \   00000730   018088E2           ADD      R8,R8,#+1
   \                     ??SAABHandleRequest_47:
   \   00000734   090058E1           CMP      R8,R9
   \   00000738   060100AA           BGE      ??SAABHandleRequest_13
   \   0000073C   0800A0E1           MOV      R0,R8
   \   00000740   ........           _BLF     ??GetSaabObject,??GetSaabObject??rA
   \   00000744   0060B0E1           MOVS     R6,R0
   \   00000748   E5FFFF0A           BEQ      ??SAABHandleRequest_52
   \   0000074C   08008DE2           ADD      R0,SP,#+8
   \   00000750   01002DE9           PUSH     {R0}
   \   00000754   10008DE2           ADD      R0,SP,#+16
   \   00000758   01002DE9           PUSH     {R0}
   \   0000075C   0600A0E1           MOV      R0,R6
   \   00000760   A46096E5           LDR      R6,[R6, #+164]
   \   00000764   0C308DE2           ADD      R3,SP,#+12
   \   00000768   246096E5           LDR      R6,[R6, #+36]
   \   0000076C   0020A0E3           MOV      R2,#+0
   \   00000770   0510A0E1           MOV      R1,R5
   \   00000774   0FE0A0E1           MOV      LR,PC
   \   00000778   16FF2FE1           BX       R6
   \   0000077C   08D08DE2           ADD      SP,SP,#+8
   \   00000780   010040E2           SUB      R0,R0,#+1
   \   00000784   0B0050E3           CMP      R0,#+11
   \   00000788   0010A093           MOVLS    R1,#+0
   \   0000078C   04108D95           STRLS    R1,[SP, #+4]
   \   00000790   04009DE5           LDR      R0,[SP, #+4]
   \   00000794   4414A0E3           MOV      R1,#+1140850688
   \   00000798   7A1881E3           ORR      R1,R1,#0x7A0000
   \   0000079C   ........           _BLF     __fMul,??__fMul??rA
   \   000007A0   04008DE5           STR      R0,[SP, #+4]
   \   000007A4   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   000007A8   0060A0E1           MOV      R6,R0
   \   000007AC   0170A0E1           MOV      R7,R1
   \   000007B0   0020A0E3           MOV      R2,#+0
   \   000007B4   0030A0E3           MOV      R3,#+0
   \   000007B8   ........           _BLF     __dLess,??__dLess??rA
   \   000007BC   000050E3           CMP      R0,#+0
   \   000007C0   0000A0E3           MOV      R0,#+0
   \   000007C4   B014A013           MOVNE    R1,#-1342177280
   \   000007C8   C015A003           MOVEQ    R1,#+805306368
   \   000007CC   FE1681E3           ORR      R1,R1,#0xFE00000
   \   000007D0   0620A0E1           MOV      R2,R6
   \   000007D4   0730A0E1           MOV      R3,R7
   \   000007D8   ........           _BLF     __dAdd,??__dAdd??rA
   \   000007DC   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   000007E0   04008DE5           STR      R0,[SP, #+4]
   \   000007E4   04009DE5           LDR      R0,[SP, #+4]
   \   000007E8   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   000007EC   0020A0E1           MOV      R2,R0
   \   000007F0   00009DE5           LDR      R0,[SP, #+0]
   \   000007F4   081084E2           ADD      R1,R4,#+8
   \   000007F8   8D3F8DE2           ADD      R3,SP,#+564
   \   000007FC   030080E0           ADD      R0,R0,R3
   \   00000800   ........           _BLF     sprintf,??sprintf??rA
   \   00000804   BBFFFFEA           B        ??SAABHandleRequest_53
   1018                                                      break;
   1019                                                  case 'A':
   1020                                                      {
   1021                                                          int LastTank = FirstTank + NumberOfTanks;
   1022                                                          for (int Index = FirstTank; Index < LastTank; Index++) {
   \                     ??SAABHandleRequest_50:
   \   00000808   050058E1           CMP      R8,R5
   \   0000080C   D10000AA           BGE      ??SAABHandleRequest_13
   1023                                                              OutPtr += sprintf(&OutBuf[OutPtr], "******");
   \   00000810   00009DE5           LDR      R0,[SP, #+0]
   \   00000814   281084E2           ADD      R1,R4,#+40
   \   00000818   8D2F8DE2           ADD      R2,SP,#+564
   \   0000081C   020080E0           ADD      R0,R0,R2
   \   00000820   ........           _BLF     sprintf,??sprintf??rA
   \   00000824   00209DE5           LDR      R2,[SP, #+0]
   1024                                                          }
   \   00000828   018088E2           ADD      R8,R8,#+1
   \   0000082C   020080E0           ADD      R0,R0,R2
   \   00000830   00008DE5           STR      R0,[SP, #+0]
   \   00000834   F3FFFFEA           B        ??SAABHandleRequest_50
   1025                                                      }
   1026                                                  } // End switch
   1027                                              } // End case Error
   1028                                          } // End switch
   1029          
   1030                                      }   // End case 'V', 'A'
   1031                                      break;
   1032                                  case 'S':
   1033                                      memcpy(OutBuf, InBuf, 2); // Copy heading
   \                     ??SAABHandleRequest_12:
   \   00000838   0220A0E3           MOV      R2,#+2
   \   0000083C   34108DE2           ADD      R1,SP,#+52
   \   00000840   8D0F8DE2           ADD      R0,SP,#+564
   \   00000844   ........           _BLF     memcpy,??memcpy??rA
   1034                                      OutPtr = 2; // Set pointer past heading, this is the default
   \   00000848   0210A0E3           MOV      R1,#+2
   \   0000084C   00108DE5           STR      R1,[SP, #+0]
   1035                                      if (InBuf[1] == 'D') {
   \   00000850   3500DDE5           LDRB     R0,[SP, #+53]
   \   00000854   440050E3           CMP      R0,#+68
   \   00000858   C800001A           BNE      ??SAABHandleRequest_3
   1036                                          switch (PROSystemData::TXUSystemData->TrimSource) {
   \   0000085C   34239FE5           LDR      R2,??SAABHandleRequest_9+0xC  ;; ??TrimSource
   \   00000860   4100A0E3           MOV      R0,#+65
   \   00000864   002092E5           LDR      R2,[R2, #+0]
   \   00000868   4D10A0E3           MOV      R1,#+77
   \   0000086C   DA2042E2           SUB      R2,R2,#+218
   \   00000870   802D42E2           SUB      R2,R2,#+8192
   \   00000874   020052E3           CMP      R2,#+2
   \   00000878   0800008A           BHI      ??SAABHandleRequest_55
   \   0000087C   013F8FE2           ADR      R3,??SAABHandleRequest_1
   \   00000880   0230D3E7           LDRB     R3,[R3, R2]
   \   00000884   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??SAABHandleRequest_1:
   \   00000888   02000000           DC8      +2,+0,+0,+0
   1037                                          case C_SD_DRAFT_SOURCE:
   1038                                          case C_SD_INC_SOURCE:
   1039                                              OutBuf[OutPtr++] = 'A';
   \                     ??SAABHandleRequest_56:
   \   0000088C   3602CDE5           STRB     R0,[SP, #+566]
   \   00000890   000000EA           B        ??SAABHandleRequest_57
   1040                                              break;
   1041                                          case C_SD_MAN_SOURCE:
   1042                                              OutBuf[OutPtr++] = 'M';
   \                     ??SAABHandleRequest_58:
   \   00000894   3612CDE5           STRB     R1,[SP, #+566]
   \                     ??SAABHandleRequest_57:
   \   00000898   0330A0E3           MOV      R3,#+3
   \   0000089C   00308DE5           STR      R3,[SP, #+0]
   1043                                              break;
   1044                                          }
   1045                                          switch (PROSystemData::TXUSystemData->ListSource) {
   \                     ??SAABHandleRequest_55:
   \   000008A0   00209DE5           LDR      R2,[SP, #+0]
   \   000008A4   8D3F8DE2           ADD      R3,SP,#+564
   \   000008A8   032082E0           ADD      R2,R2,R3
   \   000008AC   E8329FE5           LDR      R3,??SAABHandleRequest_9+0x10  ;; ??ListSource
   \   000008B0   003093E5           LDR      R3,[R3, #+0]
   \   000008B4   DA3043E2           SUB      R3,R3,#+218
   \   000008B8   803D43E2           SUB      R3,R3,#+8192
   \   000008BC   020053E3           CMP      R3,#+2
   \   000008C0   0900008A           BHI      ??SAABHandleRequest_59
   \   000008C4   015F8FE2           ADR      R5,??SAABHandleRequest_2
   \   000008C8   0350D5E7           LDRB     R5,[R5, R3]
   \   000008CC   05F18FE0           ADD      PC,PC,R5, LSL #+2
   \                     ??SAABHandleRequest_2:
   \   000008D0   02000000           DC8      +2,+0,+0,+0
   1046                                          case C_SD_DRAFT_SOURCE:
   1047                                          case C_SD_INC_SOURCE:
   1048                                              OutBuf[OutPtr++] = 'A';
   \                     ??SAABHandleRequest_60:
   \   000008D4   0000C2E5           STRB     R0,[R2, #+0]
   \   000008D8   000000EA           B        ??SAABHandleRequest_61
   1049                                              break;
   1050                                          case C_SD_MAN_SOURCE:
   1051                                              OutBuf[OutPtr++] = 'M';
   \                     ??SAABHandleRequest_62:
   \   000008DC   0010C2E5           STRB     R1,[R2, #+0]
   \                     ??SAABHandleRequest_61:
   \   000008E0   00109DE5           LDR      R1,[SP, #+0]
   \   000008E4   011081E2           ADD      R1,R1,#+1
   \   000008E8   00108DE5           STR      R1,[SP, #+0]
   1052                                              break;
   1053                                          }
   1054                                          if (PRODraftSystem::PRODraftSysPtr) {
   \                     ??SAABHandleRequest_59:
   \   000008EC   ACA29FE5           LDR      R10,??SAABHandleRequest_9+0x14  ;; ??PRODraftSysPtr
   \   000008F0   ACB29FE5           LDR      R11,??SAABHandleRequest_9+0x18  ;; 0x461c3c00
   \   000008F4   00009AE5           LDR      R0,[R10, #+0]
   \   000008F8   A36F8FE2           ADR      R6,??SAABHandleRequest_9  ;; "%5i"
   \   000008FC   01508BE3           ORR      R5,R11,#0x1
   \   00000900   000050E3           CMP      R0,#+0
   \   00000904   3400000A           BEQ      ??SAABHandleRequest_63
   1055                                              int ValKey[4] = { SVT_DF_MARK, SVT_DA_MARK, SVT_DS, SVT_DP };
   \   00000908   98129FE5           LDR      R1,??SAABHandleRequest_9+0x1C  ;; `?<Constant {1505, 1508, 1510, 1511}>`
   \   0000090C   24008DE2           ADD      R0,SP,#+36
   \   00000910   8C0291E8           LDM      R1,{R2,R3,R7,R9}
   \   00000914   8C0280E8           STM      R0,{R2,R3,R7,R9}
   1056                                              for (int i = 0; i < 4; i++) {
   \   00000918   0090A0E3           MOV      R9,#+0
   1057                                                  int DecPnt, Unit;
   1058                                                  float Value;
   1059                                                  switch (PRODraftSystem::PRODraftSysPtr->GetValue(ValKey[i], 0, Value, DecPnt, Unit)) {
   \                     ??SAABHandleRequest_64:
   \   0000091C   00709AE5           LDR      R7,[R10, #+0]
   \   00000920   04008DE2           ADD      R0,SP,#+4
   \   00000924   01002DE9           PUSH     {R0}
   \   00000928   10008DE2           ADD      R0,SP,#+16
   \   0000092C   01002DE9           PUSH     {R0}
   \   00000930   2C008DE2           ADD      R0,SP,#+44
   \   00000934   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000938   0700A0E1           MOV      R0,R7
   \   0000093C   A47097E5           LDR      R7,[R7, #+164]
   \   00000940   10308DE2           ADD      R3,SP,#+16
   \   00000944   247097E5           LDR      R7,[R7, #+36]
   \   00000948   0020A0E3           MOV      R2,#+0
   \   0000094C   0FE0A0E1           MOV      LR,PC
   \   00000950   17FF2FE1           BX       R7
   \   00000954   08D08DE2           ADD      SP,SP,#+8
   \   00000958   010040E2           SUB      R0,R0,#+1
   \   0000095C   0B0050E3           CMP      R0,#+11
   1060                                                  case GETVAL_NOT_AVAILABLE   :
   1061                                                  case GETVAL_TANK_EMPTY      :
   1062                                                  case GETVAL_NO_DISPLAY      :
   1063                                                  case GETVAL_ERROR           :
   1064                                                  case GETVAL_FLOAT_NOT_LEGAL :
   1065                                                  case GETVAL_INT_NOT_LEGAL   :
   1066                                                  case GETVAL_STRING_NOT_LEGAL:
   1067                                                  case GETVAL_DRY_SENSOR      :
   1068                                                  case GETVAL_DISABLED        :
   1069                                                  case GETVAL_FWD_AFT         :
   1070                                                  case GETVAL_PORT_STBD       :
   1071                                                  case GETVAL_SHIP_UPRIGHT    :
   1072                                                      Value = 0.0;
   \   00000960   0010A093           MOVLS    R1,#+0
   \   00000964   08108D95           STRLS    R1,[SP, #+8]
   1073                                                      break;
   1074                                                  case GETVAL_NOT_MEASURED    :
   1075                                                  default                     :
   1076                                                      break;
   1077          
   1078                                                  }
   1079                                                  Value *= 100.0;
   \   00000968   08009DE5           LDR      R0,[SP, #+8]
   1080                                                  if (Value > 9999) {
   1081                                                      Value = 9999;
   1082                                                  }
   1083                                                  OutPtr += sprintf(&OutBuf[OutPtr], "%5i", (int)Value);
   1084                                              }
   \   0000096C   019089E2           ADD      R9,R9,#+1
   \   00000970   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000974   0020A0E1           MOV      R2,R0
   \   00000978   0130A0E1           MOV      R3,R1
   \   0000097C   0000A0E3           MOV      R0,#+0
   \   00000980   4014A0E3           MOV      R1,#+1073741824
   \   00000984   591881E3           ORR      R1,R1,#0x590000
   \   00000988   ........           _BLF     __dMul,??__dMul??rA
   \   0000098C   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000990   08008DE5           STR      R0,[SP, #+8]
   \   00000994   0510A0E1           MOV      R1,R5
   \   00000998   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   0000099C   000050E3           CMP      R0,#+0
   \   000009A0   08B08D15           STRNE    R11,[SP, #+8]
   \   000009A4   08009DE5           LDR      R0,[SP, #+8]
   \   000009A8   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   000009AC   0020A0E1           MOV      R2,R0
   \   000009B0   00009DE5           LDR      R0,[SP, #+0]
   \   000009B4   0610A0E1           MOV      R1,R6
   \   000009B8   8D3F8DE2           ADD      R3,SP,#+564
   \   000009BC   030080E0           ADD      R0,R0,R3
   \   000009C0   ........           _BLF     sprintf,??sprintf??rA
   \   000009C4   00209DE5           LDR      R2,[SP, #+0]
   \   000009C8   040059E3           CMP      R9,#+4
   \   000009CC   020080E0           ADD      R0,R0,R2
   \   000009D0   00008DE5           STR      R0,[SP, #+0]
   \   000009D4   0C0000AA           BGE      ??SAABHandleRequest_65
   \   000009D8   CFFFFFEA           B        ??SAABHandleRequest_64
   1085                                          } else {
   1086                                              for (int i = 0; i < 4; i++) {
   \                     ??SAABHandleRequest_63:
   \   000009DC   0070A0E3           MOV      R7,#+0
   1087                                                  OutPtr += sprintf(&OutBuf[OutPtr], "*****");
   \                     ??SAABHandleRequest_66:
   \   000009E0   00009DE5           LDR      R0,[SP, #+0]
   \   000009E4   201084E2           ADD      R1,R4,#+32
   \   000009E8   8D2F8DE2           ADD      R2,SP,#+564
   \   000009EC   020080E0           ADD      R0,R0,R2
   \   000009F0   ........           _BLF     sprintf,??sprintf??rA
   \   000009F4   00209DE5           LDR      R2,[SP, #+0]
   1088                                              }
   \   000009F8   017087E2           ADD      R7,R7,#+1
   \   000009FC   020080E0           ADD      R0,R0,R2
   \   00000A00   00008DE5           STR      R0,[SP, #+0]
   \   00000A04   040057E3           CMP      R7,#+4
   \   00000A08   F4FFFFBA           BLT      ??SAABHandleRequest_66
   1089                                          }
   1090                                          // Always trim and list.
   1091                                          // Sign convention oposite of Tanksystem
   1092                                          {
   1093                                              int ValKey[] = { SVT_TRIM_M, SVT_LIST_DEG };
   \                     ??SAABHandleRequest_65:
   \   00000A0C   0C0094E8           LDM      R4,{R2,R3}
   \   00000A10   1C008DE2           ADD      R0,SP,#+28
   \   00000A14   0C0080E8           STM      R0,{R2,R3}
   1094                                              for (unsigned i = 0; i < NELEMENTS(ValKey); i++) {
   1095                                                  int DecPnt, Unit;
   1096                                                  float Value;
   1097                                                  switch (PROSystemData::TXUSystemData->GetValue(ValKey[i], 0, Value, DecPnt, Unit)) {
   \                     ??SAABHandleRequest_67:
   \   00000A18   1C008DE2           ADD      R0,SP,#+28
   \   00000A1C   087190E7           LDR      R7,[R0, +R8, LSL #+2]
   \   00000A20   84019FE5           LDR      R0,??SAABHandleRequest_9+0x20  ;; ??TXUSystemData
   \   00000A24   0020A0E3           MOV      R2,#+0
   \   00000A28   009090E5           LDR      R9,[R0, #+0]
   \   00000A2C   0C008DE2           ADD      R0,SP,#+12
   \   00000A30   01002DE9           PUSH     {R0}
   \   00000A34   0C008DE2           ADD      R0,SP,#+12
   \   00000A38   01002DE9           PUSH     {R0}
   \   00000A3C   0900A0E1           MOV      R0,R9
   \   00000A40   A49099E5           LDR      R9,[R9, #+164]
   \   00000A44   0C308DE2           ADD      R3,SP,#+12
   \   00000A48   249099E5           LDR      R9,[R9, #+36]
   \   00000A4C   0710A0E1           MOV      R1,R7
   \   00000A50   0FE0A0E1           MOV      LR,PC
   \   00000A54   19FF2FE1           BX       R9
   \   00000A58   08D08DE2           ADD      SP,SP,#+8
   \   00000A5C   010040E2           SUB      R0,R0,#+1
   \   00000A60   0B0050E3           CMP      R0,#+11
   1098                                                  case GETVAL_NOT_AVAILABLE   :
   1099                                                  case GETVAL_TANK_EMPTY      :
   1100                                                  case GETVAL_NO_DISPLAY      :
   1101                                                  case GETVAL_ERROR           :
   1102                                                  case GETVAL_FLOAT_NOT_LEGAL :
   1103                                                  case GETVAL_INT_NOT_LEGAL   :
   1104                                                  case GETVAL_STRING_NOT_LEGAL:
   1105                                                  case GETVAL_DRY_SENSOR      :
   1106                                                  case GETVAL_DISABLED        :
   1107                                                  case GETVAL_FWD_AFT         :
   1108                                                  case GETVAL_PORT_STBD       :
   1109                                                  case GETVAL_SHIP_UPRIGHT    :
   1110                                                      Value = 0.0;
   \   00000A64   0010A093           MOVLS    R1,#+0
   \   00000A68   04108D95           STRLS    R1,[SP, #+4]
   1111                                                      break;
   1112                                                  default:
   1113                                                      break;
   1114          
   1115                                                  }
   1116                                                  switch (ValKey[i]) {
   \   00000A6C   4B00A0E3           MOV      R0,#+75
   \   00000A70   500E80E3           ORR      R0,R0,#0x500
   \   00000A74   000057E1           CMP      R7,R0
   \   00000A78   0300000A           BEQ      ??SAABHandleRequest_68
   \   00000A7C   070080E2           ADD      R0,R0,#+7
   \   00000A80   000057E1           CMP      R7,R0
   \   00000A84   1000000A           BEQ      ??SAABHandleRequest_69
   \   00000A88   080000EA           B        ??SAABHandleRequest_70
   1117                                                  case SVT_TRIM_M   :
   1118                                                      Value *= 1000.0;
   \                     ??SAABHandleRequest_68:
   \   00000A8C   04009DE5           LDR      R0,[SP, #+4]
   \   00000A90   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000A94   0130A0E1           MOV      R3,R1
   \   00000A98   10119FE5           LDR      R1,??SAABHandleRequest_9+0x24  ;; 0x408f4000
   \   00000A9C   0020A0E1           MOV      R2,R0
   \   00000AA0   0000A0E3           MOV      R0,#+0
   \   00000AA4   ........           _BLF     __dMul,??__dMul??rA
   \   00000AA8   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000AAC   04008DE5           STR      R0,[SP, #+4]
   1119                                                      break;
   1120                                                  case SVT_LIST_ANGLE :
   1121                                                      Value = -100.0 * RAD_FACTOR;
   1122                                                      break;
   1123                                                  }
   1124                                                  if (Value > 9999) {
   \                     ??SAABHandleRequest_70:
   \   00000AB0   04009DE5           LDR      R0,[SP, #+4]
   \   00000AB4   0510A0E1           MOV      R1,R5
   \   00000AB8   ........           _BLF     __fGreaterEqual,??__fGreaterEqual??rA
   \   00000ABC   000050E3           CMP      R0,#+0
   \   00000AC0   0400000A           BEQ      ??SAABHandleRequest_71
   1125                                                      Value = 9999;
   \   00000AC4   04B08DE5           STR      R11,[SP, #+4]
   \   00000AC8   080000EA           B        ??SAABHandleRequest_72
   1126                                                  } else if (Value < -9999) {
   \                     ??SAABHandleRequest_69:
   \   00000ACC   E0109FE5           LDR      R1,??SAABHandleRequest_9+0x28  ;; 0xffffffffc5b30ca0
   \   00000AD0   04108DE5           STR      R1,[SP, #+4]
   \   00000AD4   050000EA           B        ??SAABHandleRequest_72
   \                     ??SAABHandleRequest_71:
   \   00000AD8   04009DE5           LDR      R0,[SP, #+4]
   \   00000ADC   80748BE3           ORR      R7,R11,#0x80000000
   \   00000AE0   0710A0E1           MOV      R1,R7
   \   00000AE4   ........           _BLF     __fLess,??__fLess??rA
   \   00000AE8   000050E3           CMP      R0,#+0
   1127                                                      Value = -9999;
   \   00000AEC   04708D15           STRNE    R7,[SP, #+4]
   1128                                                  }
   1129          
   1130                                                  OutPtr += sprintf(&OutBuf[OutPtr], "%5i", (int)Value);
   \                     ??SAABHandleRequest_72:
   \   00000AF0   04009DE5           LDR      R0,[SP, #+4]
   1131          
   1132                                              }
   \   00000AF4   018088E2           ADD      R8,R8,#+1
   \   00000AF8   ........           _BLF     __floatToLong,??__floatToLong??rA
   \   00000AFC   0020A0E1           MOV      R2,R0
   \   00000B00   00009DE5           LDR      R0,[SP, #+0]
   \   00000B04   0610A0E1           MOV      R1,R6
   \   00000B08   8D3F8DE2           ADD      R3,SP,#+564
   \   00000B0C   030080E0           ADD      R0,R0,R3
   \   00000B10   ........           _BLF     sprintf,??sprintf??rA
   \   00000B14   00209DE5           LDR      R2,[SP, #+0]
   \   00000B18   020058E3           CMP      R8,#+2
   \   00000B1C   020080E0           ADD      R0,R0,R2
   \   00000B20   00008DE5           STR      R0,[SP, #+0]
   \   00000B24   BBFFFF3A           BCC      ??SAABHandleRequest_67
   1133                                          }
   1134          
   1135                                          // Share force and bending moment
   1136          #if defined(S2TXU) || defined(ANTDUSIM)
   1137          #pragma diag_suppress=Pe550
   1138                                          {
   1139                                              int ValKey[] = { SVT_S_MAX_BM, SVT_S_MAX_SF };
   1140                                              for (int i = 0; i < NELEMENTS(ValKey); i++) {
   \   00000B28   0050A0E3           MOV      R5,#+0
   1141                                                  OutPtr   += sprintf(&OutBuf[OutPtr], "**********");
   \                     ??SAABHandleRequest_73:
   \   00000B2C   00009DE5           LDR      R0,[SP, #+0]
   \   00000B30   301084E2           ADD      R1,R4,#+48
   \   00000B34   8D2F8DE2           ADD      R2,SP,#+564
   \   00000B38   020080E0           ADD      R0,R0,R2
   \   00000B3C   ........           _BLF     sprintf,??sprintf??rA
   \   00000B40   00209DE5           LDR      R2,[SP, #+0]
   1142                                              }
   \   00000B44   015085E2           ADD      R5,R5,#+1
   \   00000B48   020080E0           ADD      R0,R0,R2
   \   00000B4C   00008DE5           STR      R0,[SP, #+0]
   \   00000B50   020055E3           CMP      R5,#+2
   \   00000B54   F4FFFF3A           BCC      ??SAABHandleRequest_73
   1143                                          }
   1144          #else
   1145                                          {
   1146                                              if (PROProjectInfo::PROProjectInfoPtr->IntegratedLoadingComputer && !LCShipData::Stability_Only) {
   1147                                                  int ValKey[] = { SVT_S_MAX_BM, SVT_S_MAX_SF };
   1148                                                  for (unsigned i = 0; i < NELEMENTS(ValKey); i++) {
   1149                                                      int DecPnt, Unit;
   1150                                                      float Value;
   1151                                                      switch (PROSystemData::TXUSystemData->GetValue(ValKey[i], 0, Value, DecPnt, Unit)) {
   1152                                                      case GETVAL_NOT_AVAILABLE   :
   1153                                                      case GETVAL_TANK_EMPTY      :
   1154                                                      case GETVAL_NO_DISPLAY      :
   1155                                                      case GETVAL_ERROR           :
   1156                                                      case GETVAL_FLOAT_NOT_LEGAL :
   1157                                                      case GETVAL_INT_NOT_LEGAL   :
   1158                                                      case GETVAL_STRING_NOT_LEGAL:
   1159                                                      case GETVAL_DRY_SENSOR      :
   1160                                                      case GETVAL_DISABLED        :
   1161                                                      case GETVAL_FWD_AFT         :
   1162                                                      case GETVAL_PORT_STBD       :
   1163                                                      case GETVAL_SHIP_UPRIGHT    :
   1164                                                          Value = 0.0;
   1165                                                          break;
   1166                                                      default:
   1167                                                          break;
   1168          
   1169                                                      }
   1170                                                      switch (ValKey[i]) {
   1171                                                      case SVT_S_MAX_BM   :
   1172                                                          Value *= 100.0;
   1173                                                          break;
   1174                                                      case SVT_S_MAX_SF :
   1175                                                          Value =  100.0;
   1176                                                          break;
   1177                                                      }
   1178                                                      OutPtr += sprintf(&OutBuf[OutPtr], "%5i", Value);
   1179                                                  }
   1180                                              } else {
   1181                                                  OutPtr   += sprintf(&OutBuf[OutPtr], "**********");
   1182                                              }
   1183                                          }
   1184          #endif
   1185          
   1186                                      } else {}
   1187                                      break;
   1188                                  } // End of block swicth
   1189                                    // Send if we have more than just the heading
   1190                                  if (OutPtr > 6) {
   \                     ??SAABHandleRequest_13:
   \   00000B58   00009DE5           LDR      R0,[SP, #+0]
   \   00000B5C   070050E3           CMP      R0,#+7
   \   00000B60   060000BA           BLT      ??SAABHandleRequest_3
   1191                                      TSN_Delay(SAAB_DELAY);
   \   00000B64   1E00A0E3           MOV      R0,#+30
   \   00000B68   ........           _BLF     OS_Delay,??OS_Delay??rA
   1192                                      SendString(PortPtr, OutBuf, OutPtr);
   \   00000B6C   00309DE5           LDR      R3,[SP, #+0]
   \   00000B70   38149DE5           LDR      R1,[SP, #+1080]
   \   00000B74   34049DE5           LDR      R0,[SP, #+1076]
   \   00000B78   8D2F8DE2           ADD      R2,SP,#+564
   \   00000B7C   ........           BL       ??SendString
   1193                                  }
   1194                              }   // end of Checksum OK
   1195                          } // End of if Valid packet
   1196                      }
   1197                      break;
   1198                  default:
   1199                      break;
   1200                  }
   1201              }
   1202          }
   \                     ??SAABHandleRequest_3:
   \   00000B80   3CD08DE2           ADD      SP,SP,#+60
   \   00000B84   40DE8DE2           ADD      SP,SP,#+1024
   \   00000B88   ........           B        ?Subroutine17
   \                     ??SAABHandleRequest_9:
   \   00000B8C   25356900           DC8      "%5i"
   \   00000B90   ........           DC32     `?<Constant {1355, 1366}>`
   \   00000B94   ........           DC32     ??PROAtmRefPtr
   \   00000B98   ........           DC32     ??TrimSource
   \   00000B9C   ........           DC32     ??ListSource
   \   00000BA0   ........           DC32     ??PRODraftSysPtr
   \   00000BA4   003C1C46           DC32     0x461c3c00
   \   00000BA8   ........           DC32     `?<Constant {1505, 1508, 1510, 1511}>`
   \   00000BAC   ........           DC32     ??TXUSystemData
   \   00000BB0   00408F40           DC32     0x408f4000
   \   00000BB4   A00CB3C5           DC32     0xffffffffc5b30ca0

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {4001, 1024, 100, false, 1120, 0}>`:
   \   00000000   A10F00000004       DC32 4001, 1024, 100
   \              000064000000
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \   00000010   600400000000       DC32 1120, 0
   \              0000        
   \   00000018   536161622050       DC8 "Saab Protocol"
   \              726F746F636F
   \              6C00        
   \   00000026   0000               DC8 0, 0
   \   00000028   536161622070       DC8 "Saab protocol"
   \              726F746F636F
   \              6C00        
   \   00000036   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {4002, 1024, 1000, true, 1060, 0}>`:
   \   00000000   A20F00000004       DC32 4002, 1024, 1000
   \              0000E8030000
   \   0000000C   01000000           DC8 1, 0, 0, 0
   \   00000010   240400000000       DC32 1060, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {4003, 1351, 1000, false, 1020, 1}>`:
   \   00000000   A30F00004705       DC32 4003, 1351, 1000
   \              0000E8030000
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \   00000010   FC0300000100       DC32 1020, 1
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {4004, 1004, 10, true, 1070, 0}>`:
   \   00000000   A40F0000EC03       DC32 4004, 1004, 10
   \              00000A000000
   \   0000000C   01000000           DC8 1, 0, 0, 0
   \   00000010   2E0400000000       DC32 1070, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%04X\\r\\n">`:
   \   00000000   253034580D0A       DC8 "%04X\015\012"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "V">`:
   \   00000000   5600               DC8 "V"
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000012   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000022   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000052   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000062   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000082   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000092   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000102   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000112   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000122   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000132   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000142   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000152   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000162   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000172   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000182   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000192   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000        
   \   00000200   2530327500         DC8 "%02u"
   \   00000205   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {1355, 1366}>`:
   \   00000000   4B0500005605       DC32 1355, 1366
   \              0000        
   \   00000008   2530356900         DC8 "%05i"
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   2530357500         DC8 "%05u"
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   452A2A2A2A00       DC8 "E****"
   \   0000001E   0000               DC8 0, 0
   \   00000020   2A2A2A2A2A00       DC8 "*****"
   \   00000026   0000               DC8 0, 0
   \   00000028   2A2A2A2A2A2A       DC8 "******"
   \              00          
   \   0000002F   00                 DC8 0
   \   00000030   2A2A2A2A2A2A       DC8 "**********"
   \              2A2A2A2A00  
   \   0000003B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {1505, 1508, 1510, 1511}>`:
   \   00000000   E1050000E405       DC32 1505, 1508, 1510, 1511
   \              0000E6050000
   \              E7050000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25356900           DC8 "%5i"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs SaabProtcol &SaabProtcol::new SaabProtcol(int, unsigned int)
   \                     `??new SaabProtcol`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   5C0FA0E3           MOV      R0,#+368
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new SaabProtcol_1`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??SaabProtcol
   \                     `??new SaabProtcol_1`:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable4  ;; ??ObjectSet
   \   00000008   38509FE5           LDR      R5,??__sti__routine_1  ;; ?_0
   \   0000000C   180084E2           ADD      R0,R4,#+24
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000030   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000034   1400C4E5           STRB     R0,[R4, #+20]
   \   00000038   0C0085E2           ADD      R0,R5,#+12
   \   0000003C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000040   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000048   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??npos
   1203          
   1204          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     SaabProtcol::AddAlarmStatus(char *, int &, int, int)
                                       16
     SaabProtcol::FindSaabProtocolObject(int)
                                        8
     SaabProtcol::Initiate()            0
     SaabProtcol::LoadConfigFromFile(TSNConfigString &)
                                      188
     SaabProtcol::SAABHandleAnswer(TSNUart *)
                                       20
     SaabProtcol::SAABHandleInput(TSNUart *, unsigned char)
                                      640
     SaabProtcol::SAABHandleRequest(TSNUart *)
                                     1128
     SaabProtcol::SAABSendRequest(TSNUart *)
                                      544
     SaabProtcol::SaabComTask(TSNUart *)
                                       12
     SaabProtcol::SaabProtcol(int, unsigned int)
                                       28
     SaabProtcol::SendString(TSNUart *, char *, int)
                                       36
     SaabProtcol::WriteConfigToFile(TSNConfigString &)
                                      732
     SaabProtcol::new SaabProtcol(int, unsigned int)
                                       12
     SaabProtcol::~SaabProtcol()       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<BlockDef, allocator<BlockDef>>::_Insert0(BlockDef *, BlockDef const &)
                                       28
     _Vector_impl<BlockDef, allocator<BlockDef>>::_Make_room(BlockDef *, unsigned int)
                                       32
     _Vector_impl<BlockDef, allocator<BlockDef>>::_Push_back0(BlockDef const &)
                                       24
     _Vector_impl<BlockDef, allocator<BlockDef>>::_Tidy0()
                                        4
     _Vector_impl<SaabData, allocator<SaabData>>::_Insert_n(SaabData *, unsigned int, SaabData const &)
                                       48
     _Vector_impl<SaabData, allocator<SaabData>>::_Make_room(SaabData *, unsigned int)
                                       32
     _Vector_impl<SaabData, allocator<SaabData>>::_Push_back0(SaabData const &)
                                       36
     _Vector_impl<SaabData, allocator<SaabData>>::_Tidy0()
                                        4
     _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Insert(SaabProtcol **, SaabProtcol * const &)
                                       16
     _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Make_room(SaabProtcol **, unsigned int)
                                       32
     _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Push_back0(SaabProtcol *)
                                        8
     _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  16
     operator+(string const &, string const &)
                                       48
     set<PRogramObjectBase *>::~set()
                                        4
     vector<SaabProtcol *>::~vector()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     804
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     set<PRogramObjectBase *>::~set()
                                      16
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Tidy0()
                                      36
     _Vector_impl<SaabData, allocator<SaabData>>::_Tidy0()
                                      36
     _Vector_impl<BlockDef, allocator<BlockDef>>::_Tidy0()
                                      36
     _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Insert(SaabProtcol **, SaabProtcol * const &)
                                      72
     _Vector_impl<SaabData, allocator<SaabData>>::_Insert_n(SaabData *, unsigned int, SaabData const &)
                                      80
     _Vector_impl<BlockDef, allocator<BlockDef>>::_Make_room(BlockDef *, unsigned int)
                                     260
     _Vector_impl<SaabData, allocator<SaabData>>::_Make_room(SaabData *, unsigned int)
                                     260
     _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Make_room(SaabProtcol **, unsigned int)
                                     232
     _Vector_impl<BlockDef, allocator<BlockDef>>::_Insert0(BlockDef *, BlockDef const &)
                                     100
     _Vector_impl<BlockDef, allocator<BlockDef>>::_Push_back0(BlockDef const &)
                                      88
     _Vector_impl<SaabData, allocator<SaabData>>::_Push_back0(SaabData const &)
                                      84
     _Vector_impl<SaabProtcol *, allocator<SaabProtcol *>>::_Push_back0(SaabProtcol *)
                                      72
     vector<SaabProtcol *>::~vector()
                                      28
     operator+(string const &, string const &)
                                     156
     ?_0                              24
     SaabProtcol::ObjectSet           36
     SaabProtcol::SaabProtcol(int, unsigned int)
                                     136
     SaabProtcol::Initiate()          24
     SaabProtcol::~SaabProtcol()     112
     ?Subroutine15                     8
     SaabProtcol::WriteConfigToFile(TSNConfigString &)
                                    1280
     ?Subroutine16                    12
     SaabProtcol::LoadConfigFromFile(TSNConfigString &)
                                     852
     ?Subroutine17                    12
     SaabProtcol::SendString(TSNUart *, char *, int)
                                     196
     SaabProtcol::AddAlarmStatus(char *, int &, int, int)
                                     344
     SaabProtcol::SAABHandleInput(TSNUart *, unsigned char)
                                    1072
     SaabProtcol::SAABHandleAnswer(TSNUart *)
                                     108
     SaabProtcol::FindSaabProtocolObject(int)
                                     116
     SaabProtcol::SAABSendRequest(TSNUart *)
                                     352
     SaabProtcol::SaabComTask(TSNUart *)
                                     156
     SaabProtcol::SAABHandleRequest(TSNUart *)
                                    3000
     ?<Constant {4001, 1024, 100, false, 1120, 0}>
                                      56
     ?<Constant {4002, 1024, 1000, true, 1060, 0}>
                                      24
     ?<Constant {4003, 1351, 1000, false, 1020, 1}>
                                      24
     ?<Constant {4004, 1004, 10, true, 1070, 0}>
                                      24
     ?<Constant "%04X\r\n">            8
     ?<Constant "V">                 520
     ?<Constant {1355, 1366}>         60
     ?<Constant {1505, 1508, 1510, 1511}>
                                      16
     ?<Constant "%5i">                 4
     SaabProtcol::new SaabProtcol(int, unsigned int)
                                      48
     __sti__routine()                 76
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable6                      4
      Others                        1096

 
 12 740 bytes in segment CODE
    884 bytes in segment DATA_C
     44 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     12 bytes in segment INITTAB
 
 7 920 bytes of CODE  memory (+ 4 836 bytes shared)
   884 bytes of CONST memory
    44 bytes of DATA  memory

Errors: none
Warnings: none
