##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:14:13 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ModbusMultiple.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\ModbusMultiple.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\ModbusMultiple.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\ModbusMultiple.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ModbusMultiple.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Max:
   \   00000000   000000EA           B        ??_Max_1
   \                     ??_Max_2:
   \   00000004   080090E5           LDR      R0,[R0, #+8]
   \                     ??_Max_1:
   \   00000008   081090E5           LDR      R1,[R0, #+8]
   \   0000000C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   FAFFFF0A           BEQ      ??_Max_2
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   08009015           LDRNE    R0,[R0, #+8]
   \   00000010   0E00001A           BNE      ??_DecP_1
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0D20D1E5           LDRB     R2,[R1, #+13]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0200001A           BNE      ??_DecP_2
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   ........           _BLF     ??_Max,??_Max??rA
   \   0000002C   070000EA           B        ??_DecP_1
   \                     ??_DecP_2:
   \   00000030   041090E5           LDR      R1,[R0, #+4]
   \   00000034   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0300001A           BNE      ??_DecP_1
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   020050E1           CMP      R0,R2
   \   00000048   0100A0E1           MOV      R0,R1
   \   0000004C   F7FFFF0A           BEQ      ??_DecP_2
   \                     ??_DecP_1:
   \   00000050   0040BDE8           POP      {LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_5
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_6:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_7
   \                     ??_Insert_5:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_8
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_7
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_7
   \                     ??_Insert_8:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_7
   \   00000060   F0FFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_7:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_10
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_11
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_9
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_12
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_12:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_7
   \                     ??_Insert_11:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_9
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_13
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_13:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Pairib _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::insert(unsigned int)
   \                     ??insert_1:
   \   00000000   F3432DE9           PUSH     {R0,R1,R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   040096E5           LDR      R0,[R6, #+4]
   \   00000010   0270A0E1           MOV      R7,R2
   \   00000014   0680A0E1           MOV      R8,R6
   \   00000018   0190A0E3           MOV      R9,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   0080A0E1           MOV      R8,R0
   \   00000030   010057E1           CMP      R7,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0190A033           MOVCC    R9,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0090A023           MOVCS    R9,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0800A0E1           MOV      R0,R8
   \   0000004C   0150A0E3           MOV      R5,#+1
   \   00000050   000059E3           CMP      R9,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001096E5           LDR      R1,[R6, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0730A0E1           MOV      R3,R7
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   0450CDE5           STRB     R5,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   070051E1           CMP      R1,R7
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0730A0E1           MOV      R3,R7
   \   00000098   0820A0E1           MOV      R2,R8
   \   0000009C   0910A0E1           MOV      R1,R9
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F643BDE8           POP      {R1,R2,R4-R9,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::find(unsigned int)
   \                     ??find:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   00000010   040050E1           CMP      R0,R4
   \   00000014   0300000A           BEQ      ??find_1
   \   00000018   101090E5           LDR      R1,[R0, #+16]
   \   0000001C   010055E1           CMP      R5,R1
   \   00000020   0040A021           MOVCS    R4,R0
   \   00000024   0400A0E1           MOV      R0,R4
   \                     ??find_1:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>> const &)
   \                     ??_Copy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_6,??_Copy??rA
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_10
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_11
   \                     ??_Copy_12:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_11:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_12
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_13
   \                     ??_Copy_10:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_13:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
   \                     ??_Copy_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_5,??_Copy??rA_1
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_14
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_15
   \                     ??_Copy_16:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_15:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_16
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_17
   \                     ??_Copy_14:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_17:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>> const &)
   \                     ??_Copy_2:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_7,??_Copy??rA_2
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_18
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_19
   \                     ??_Copy_20:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_19:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_20
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_21
   \                     ??_Copy_18:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_21:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>> const &)
   \                     ??_Copy_3:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_8,??_Copy??rA_3
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_22
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_23
   \                     ??_Copy_24:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_23:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_24
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_25
   \                     ??_Copy_22:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_25:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>> const &)
   \                     ??_Copy_4:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   041095E5           LDR      R1,[R5, #+4]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0420A0E1           MOV      R2,R4
   \   00000014   ........           _BLF     ??_Copy_9,??_Copy??rA_4
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   100095E5           LDR      R0,[R5, #+16]
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   0D10D0E5           LDRB     R1,[R0, #+13]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0900001A           BNE      ??_Copy_26
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   000000EA           B        ??_Copy_27
   \                     ??_Copy_28:
   \   0000003C   0210A0E1           MOV      R1,R2
   \                     ??_Copy_27:
   \   00000040   002091E5           LDR      R2,[R1, #+0]
   \   00000044   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000048   000053E3           CMP      R3,#+0
   \   0000004C   FAFFFF0A           BEQ      ??_Copy_28
   \   00000050   001084E5           STR      R1,[R4, #+0]
   \   00000054   ........           _BLF     ??_Max,??_Max??rA
   \   00000058   010000EA           B        ??_Copy_29
   \                     ??_Copy_26:
   \   0000005C   004084E5           STR      R4,[R4, #+0]
   \   00000060   0400A0E1           MOV      R0,R4
   \                     ??_Copy_29:
   \   00000064   080084E5           STR      R0,[R4, #+8]
   \   00000068   3040BDE8           POP      {R4,R5,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
   \                     ??_Copy_5:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_30
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_31
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_31:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_5
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_5
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_30:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
   \                     ??_Copy_6:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_32
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_33
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_33:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_6
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_6
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_32:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Copy_7:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_34
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_35
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_35:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_7
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_7
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_34:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
   \                     ??_Copy_8:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_36
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_37
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_37:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_8
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_8
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_36:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr)
   \                     ??_Copy_9:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0D00D5E5           LDRB     R0,[R5, #+13]
   \   00000010   0280A0E1           MOV      R8,R2
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1900001A           BNE      ??_Copy_38
   \   00000020   0C90D5E5           LDRB     R9,[R5, #+12]
   \   00000024   10A095E5           LDR      R10,[R5, #+16]
   \   00000028   1400A0E3           MOV      R0,#+20
   \   0000002C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000030   0070B0E1           MOVS     R7,R0
   \   00000034   0600000A           BEQ      ??_Copy_39
   \   00000038   004087E5           STR      R4,[R7, #+0]
   \   0000003C   048087E5           STR      R8,[R7, #+4]
   \   00000040   084087E5           STR      R4,[R7, #+8]
   \   00000044   0C90C7E5           STRB     R9,[R7, #+12]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0D00C7E5           STRB     R0,[R7, #+13]
   \   00000050   10A087E5           STR      R10,[R7, #+16]
   \                     ??_Copy_39:
   \   00000054   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   0720A0E1           MOV      R2,R7
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0760A011           MOVNE    R6,R7
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   E3FFFFEB           BL       ??_Copy_9
   \   00000070   000087E5           STR      R0,[R7, #+0]
   \   00000074   081095E5           LDR      R1,[R5, #+8]
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   DEFFFFEB           BL       ??_Copy_9
   \   00000084   080087E5           STR      R0,[R7, #+8]
   \                     ??_Copy_38:
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   F047BDE8           POP      {R4-R10,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_2
   \                     ??_Erase_3:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_2:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_3
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_4
   \                     ??_Erase_5:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_4:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_5
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::iterator _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Insert(bool, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, unsigned int)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Lbound(unsigned int) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObject *>::set(set<PRogramObject *> const &)
   \                     ??set:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   1460D5E5           LDRB     R6,[R5, #+20]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000014   1460C4E5           STRB     R6,[R4, #+20]
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Copy_3,??_Copy??rA_5
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   7040BDE8           POP      {R4-R6,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<unsigned int>::set(set<unsigned int> const &)
   \                     ??set_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   1460D5E5           LDRB     R6,[R5, #+20]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000014   1460C4E5           STRB     R6,[R4, #+20]
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Copy_1,??_Copy??rA_6
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   7040BDE8           POP      {R4-R6,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<AlarmBasic *>::set(set<AlarmBasic *> const &)
   \                     ??set_2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   1460D5E5           LDRB     R6,[R5, #+20]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000014   1460C4E5           STRB     R6,[R4, #+20]
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Copy,??_Copy??rA_7
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   7040BDE8           POP      {R4-R6,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs bool _Vector_value<allocator<void>>::_Buy(unsigned int)
   \                     ??_Buy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0000A003           MOVEQ    R0,#+0
   \   00000018   0600000A           BEQ      ??_Buy_1
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000024   000084E5           STR      R0,[R4, #+0]
   \   00000028   040084E5           STR      R0,[R4, #+4]
   \   0000002C   000085E0           ADD      R0,R5,R0
   \   00000030   080084E5           STR      R0,[R4, #+8]
   \   00000034   0100A0E3           MOV      R0,#+1
   \                     ??_Buy_1:
   \   00000038   3040BDE8           POP      {R4,R5,LR}
   \   0000003C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_2
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_2:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
   \                     ??_Tidy0_1:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_3
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_3:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Assign(_Vector_impl<AnalogInput *, allocator<AnalogInput *>> const &)
   \                     ??_Assign:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   2D00000A           BEQ      ??_Assign_3
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   002094E5           LDR      R2,[R4, #+0]
   \   00000028   0700001A           BNE      ??_Assign_4
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   0200000A           BEQ      ??_Assign_5
   \   00000034   042084E5           STR      R2,[R4, #+4]
   \   00000038   0200A0E1           MOV      R0,R2
   \   0000003C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_5:
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000048   1F0000EA           B        ??_Assign_3
   \                     ??_Assign_4:
   \   0000004C   04C094E5           LDR      R12,[R4, #+4]
   \   00000050   02C04CE0           SUB      R12,R12,R2
   \   00000054   2C0153E1           CMP      R3,R12, LSR #+2
   \   00000058   0700008A           BHI      ??_Assign_6
   \   0000005C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000060   040095E5           LDR      R0,[R5, #+4]
   \   00000064   001095E5           LDR      R1,[R5, #+0]
   \   00000068   010040E0           SUB      R0,R0,R1
   \   0000006C   001094E5           LDR      R1,[R4, #+0]
   \   00000070   2001A0E1           LSR      R0,R0,#+2
   \   00000074   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000078   120000EA           B        ??_Assign_7
   \                     ??_Assign_6:
   \   0000007C   08C094E5           LDR      R12,[R4, #+8]
   \   00000080   02C04CE0           SUB      R12,R12,R2
   \   00000084   2C0153E1           CMP      R3,R12, LSR #+2
   \   00000088   0D00009A           BLS      ??_Assign_8
   \                     ??_Assign_9:
   \   0000008C   000052E3           CMP      R2,#+0
   \   00000090   0100000A           BEQ      ??_Assign_10
   \   00000094   0200A0E1           MOV      R0,R2
   \   00000098   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_10:
   \   0000009C   040095E5           LDR      R0,[R5, #+4]
   \   000000A0   001095E5           LDR      R1,[R5, #+0]
   \   000000A4   011040E0           SUB      R1,R0,R1
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     ??_Buy,??_Buy??rA
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0400000A           BEQ      ??_Assign_3
   \   000000B8   002094E5           LDR      R2,[R4, #+0]
   \   000000BC   041095E5           LDR      R1,[R5, #+4]
   \   000000C0   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_8:
   \   000000C4   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_7:
   \   000000C8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_3:
   \   000000CC   3140BDE8           POP      {R0,R4,R5,LR}
   \   000000D0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<int, allocator<int>>::_Assign(_Vector_impl<int, allocator<int>> const &)
   \                     ??_Assign_1:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   2D00000A           BEQ      ??_Assign_11
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   002094E5           LDR      R2,[R4, #+0]
   \   00000028   0700001A           BNE      ??_Assign_12
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   0200000A           BEQ      ??_Assign_13
   \   00000034   042084E5           STR      R2,[R4, #+4]
   \   00000038   0200A0E1           MOV      R0,R2
   \   0000003C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_13:
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000048   1F0000EA           B        ??_Assign_11
   \                     ??_Assign_12:
   \   0000004C   04C094E5           LDR      R12,[R4, #+4]
   \   00000050   02C04CE0           SUB      R12,R12,R2
   \   00000054   2C0153E1           CMP      R3,R12, LSR #+2
   \   00000058   0700008A           BHI      ??_Assign_14
   \   0000005C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000060   040095E5           LDR      R0,[R5, #+4]
   \   00000064   001095E5           LDR      R1,[R5, #+0]
   \   00000068   010040E0           SUB      R0,R0,R1
   \   0000006C   001094E5           LDR      R1,[R4, #+0]
   \   00000070   2001A0E1           LSR      R0,R0,#+2
   \   00000074   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000078   120000EA           B        ??_Assign_15
   \                     ??_Assign_14:
   \   0000007C   08C094E5           LDR      R12,[R4, #+8]
   \   00000080   02C04CE0           SUB      R12,R12,R2
   \   00000084   2C0153E1           CMP      R3,R12, LSR #+2
   \   00000088   0D00009A           BLS      ??_Assign_16
   \                     ??_Assign_17:
   \   0000008C   000052E3           CMP      R2,#+0
   \   00000090   0100000A           BEQ      ??_Assign_18
   \   00000094   0200A0E1           MOV      R0,R2
   \   00000098   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_18:
   \   0000009C   040095E5           LDR      R0,[R5, #+4]
   \   000000A0   001095E5           LDR      R1,[R5, #+0]
   \   000000A4   011040E0           SUB      R1,R0,R1
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     ??_Buy,??_Buy??rA
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0400000A           BEQ      ??_Assign_11
   \   000000B8   002094E5           LDR      R2,[R4, #+0]
   \   000000BC   041095E5           LDR      R1,[R5, #+4]
   \   000000C0   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_16:
   \   000000C4   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_15:
   \   000000C8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_11:
   \   000000CC   3140BDE8           POP      {R0,R4,R5,LR}
   \   000000D0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Assign(_Vector_impl<unsigned int, allocator<unsigned int>> const &)
   \                     ??_Assign_2:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   2A00000A           BEQ      ??_Assign_19
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   0400001A           BNE      ??_Assign_20
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   200000EA           B        ??_Assign_19
   \                     ??_Assign_20:
   \   0000003C   002094E5           LDR      R2,[R4, #+0]
   \   00000040   04C094E5           LDR      R12,[R4, #+4]
   \   00000044   02C04CE0           SUB      R12,R12,R2
   \   00000048   2C0153E1           CMP      R3,R12, LSR #+2
   \   0000004C   0700008A           BHI      ??_Assign_21
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000054   040095E5           LDR      R0,[R5, #+4]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   2001A0E1           LSR      R0,R0,#+2
   \   00000068   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000006C   120000EA           B        ??_Assign_22
   \                     ??_Assign_21:
   \   00000070   08C094E5           LDR      R12,[R4, #+8]
   \   00000074   02C04CE0           SUB      R12,R12,R2
   \   00000078   2C0153E1           CMP      R3,R12, LSR #+2
   \   0000007C   0D00009A           BLS      ??_Assign_23
   \                     ??_Assign_24:
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100000A           BEQ      ??_Assign_25
   \   00000088   0200A0E1           MOV      R0,R2
   \   0000008C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_25:
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   011040E0           SUB      R1,R0,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??_Buy,??_Buy??rA
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0400000A           BEQ      ??_Assign_19
   \   000000AC   002094E5           LDR      R2,[R4, #+0]
   \   000000B0   041095E5           LDR      R1,[R5, #+4]
   \   000000B4   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_23:
   \   000000B8   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_22:
   \   000000BC   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_19:
   \   000000C0   3140BDE8           POP      {R0,R4,R5,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_16:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_16
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusObject ** _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Insert(ModbusObject **, ModbusObject * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusObject ** _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Make_room(ModbusObject **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_2
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_2
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_3
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA_1
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_2
   \                     ??_Make_room_3:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_2:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int * _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_4
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_4
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_5
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_4
   \                     ??_Make_room_5:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_4:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_2
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_3:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_3
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_4
   \                     ??_Push_back0_2:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_3
   \                     ??_Push_back0_4:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Push_back0(ModbusObject *)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_5
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_6:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_6
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_7
   \                     ??_Push_back0_5:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_7:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000024   6C009FE5           LDR      R0,`??operator+_1`  ;; ??npos
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   007090E5           LDR      R7,[R0, #+0]
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0730A0E1           MOV      R3,R7
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   ........           _BLF     ??assign,??assign??rA
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??append,??append??rA
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   0210A0E1           MOV      R1,R2
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000068   0730A0E1           MOV      R3,R7
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     ??assign,??assign??rA
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   0110A0E3           MOV      R1,#+1
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000008C   1CD08DE2           ADD      SP,SP,#+28
   \   00000090   F040BDE8           POP      {R4-R7,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_1`:
   \   00000098   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??AnsiString_4  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??AnsiString_4:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase::PRogramObjectBase(PRogramObjectBase const &)
   \                     ??PRogramObjectBase:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   8C009FE5           LDR      R0,??PRogramObjectBase_2  ;; ??__vtbl_2
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   A40084E5           STR      R0,[R4, #+164]
   \   00000014   0000D5E5           LDRB     R0,[R5, #+0]
   \   00000018   081085E2           ADD      R1,R5,#+8
   \   0000001C   0000C4E5           STRB     R0,[R4, #+0]
   \   00000020   040095E5           LDR      R0,[R5, #+4]
   \   00000024   040084E5           STR      R0,[R4, #+4]
   \   00000028   080084E2           ADD      R0,R4,#+8
   \   0000002C   ........           _BLF     ??set_1,??set??rA
   \   00000030   201085E2           ADD      R1,R5,#+32
   \   00000034   200084E2           ADD      R0,R4,#+32
   \   00000038   ........           _BLF     ??set_1,??set??rA
   \   0000003C   380095E5           LDR      R0,[R5, #+56]
   \   00000040   441085E2           ADD      R1,R5,#+68
   \   00000044   380084E5           STR      R0,[R4, #+56]
   \   00000048   3C00D5E5           LDRB     R0,[R5, #+60]
   \   0000004C   3C00C4E5           STRB     R0,[R4, #+60]
   \   00000050   400095E5           LDR      R0,[R5, #+64]
   \   00000054   400084E5           STR      R0,[R4, #+64]
   \   00000058   440084E2           ADD      R0,R4,#+68
   \   0000005C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000060   601085E2           ADD      R1,R5,#+96
   \   00000064   600084E2           ADD      R0,R4,#+96
   \   00000068   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000006C   7C1085E2           ADD      R1,R5,#+124
   \   00000070   7C0084E2           ADD      R0,R4,#+124
   \   00000074   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000078   980095E5           LDR      R0,[R5, #+152]
   \   0000007C   980084E5           STR      R0,[R4, #+152]
   \   00000080   9C0095E5           LDR      R0,[R5, #+156]
   \   00000084   9C0084E5           STR      R0,[R4, #+156]
   \   00000088   A00095E5           LDR      R0,[R5, #+160]
   \   0000008C   A00084E5           STR      R0,[R4, #+160]
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   3040BDE8           POP      {R4,R5,LR}
   \   00000098   1EFF2FE1           BX       LR               ;; return
   \                     ??PRogramObjectBase_2:
   \   0000009C   ........           DC32     ??__vtbl_2

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObject::PRogramObject(PRogramObject const &)
   \                     ??PRogramObject:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??PRogramObjectBase,??PRogramObjectBase??rA
   \   00000010   B4009FE5           LDR      R0,??PRogramObject_1  ;; ??__vtbl_3
   \   00000014   AC6085E2           ADD      R6,R5,#+172
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   A80095E5           LDR      R0,[R5, #+168]
   \   00000020   AC7084E2           ADD      R7,R4,#+172
   \   00000024   A80084E5           STR      R0,[R4, #+168]
   \   00000028   1480D6E5           LDRB     R8,[R6, #+20]
   \   0000002C   0700A0E1           MOV      R0,R7
   \   00000030   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000034   1480C7E5           STRB     R8,[R7, #+20]
   \   00000038   0610A0E1           MOV      R1,R6
   \   0000003C   0700A0E1           MOV      R0,R7
   \   00000040   ........           _BLF     ??_Copy_4,??_Copy??rA_8
   \   00000044   C41085E2           ADD      R1,R5,#+196
   \   00000048   C40084E2           ADD      R0,R4,#+196
   \   0000004C   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000050   E000D5E5           LDRB     R0,[R5, #+224]
   \   00000054   E41085E2           ADD      R1,R5,#+228
   \   00000058   4B6FA0E3           MOV      R6,#+300
   \   0000005C   E000C4E5           STRB     R0,[R4, #+224]
   \   00000060   E40084E2           ADD      R0,R4,#+228
   \   00000064   ........           _BLF     ??set_2,??set??rA_1
   \   00000068   FC1085E2           ADD      R1,R5,#+252
   \   0000006C   FC0084E2           ADD      R0,R4,#+252
   \   00000070   ........           _BLF     ??set_2,??set??rA_1
   \   00000074   450FA0E3           MOV      R0,#+276
   \   00000078   051080E0           ADD      R1,R0,R5
   \   0000007C   040080E0           ADD      R0,R0,R4
   \   00000080   ........           _BLF     ??set_2,??set??rA_1
   \   00000084   047086E0           ADD      R7,R6,R4
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000090   051086E0           ADD      R1,R6,R5
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   ........           _BLF     ??_Assign,??_Assign??rA
   \   0000009C   4E6FA0E3           MOV      R6,#+312
   \   000000A0   047086E0           ADD      R7,R6,R4
   \   000000A4   0700A0E1           MOV      R0,R7
   \   000000A8   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000AC   051086E0           ADD      R1,R6,R5
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   ........           _BLF     ??_Assign,??_Assign??rA
   \   000000B8   4401D5E5           LDRB     R0,[R5, #+324]
   \   000000BC   4401C4E5           STRB     R0,[R4, #+324]
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   F041BDE8           POP      {R4-R8,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
   \                     ??PRogramObject_1:
   \   000000CC   ........           DC32     ??__vtbl_3

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusObject::ModbusObject(ModbusObject const &)
   \                     ??ModbusObject:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??PRogramObject,??PRogramObject??rA
   \   00000010   54009FE5           LDR      R0,??ModbusObject_1  ;; ??__vtbl_4
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   520FA0E3           MOV      R0,#+328
   \   0000001C   051080E0           ADD      R1,R0,R5
   \   00000020   040080E0           ADD      R0,R0,R4
   \   00000024   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000028   640195E5           LDR      R0,[R5, #+356]
   \   0000002C   640184E5           STR      R0,[R4, #+356]
   \   00000030   680195E5           LDR      R0,[R5, #+360]
   \   00000034   680184E5           STR      R0,[R4, #+360]
   \   00000038   6C0195E5           LDR      R0,[R5, #+364]
   \   0000003C   6C0184E5           STR      R0,[R4, #+364]
   \   00000040   700195E5           LDR      R0,[R5, #+368]
   \   00000044   700184E5           STR      R0,[R4, #+368]
   \   00000048   740195E5           LDR      R0,[R5, #+372]
   \   0000004C   740184E5           STR      R0,[R4, #+372]
   \   00000050   7801D5E5           LDRB     R0,[R5, #+376]
   \   00000054   7801C4E5           STRB     R0,[R4, #+376]
   \   00000058   7901D5E5           LDRB     R0,[R5, #+377]
   \   0000005C   7901C4E5           STRB     R0,[R4, #+377]
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   3040BDE8           POP      {R4,R5,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusObject_1:
   \   0000006C   ........           DC32     ??__vtbl_4

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusCoil::ModbusCoil(ModbusCoil const &)
   \                     ??ModbusCoil:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??ModbusObject,??ModbusObject??rA
   \   00000010   1C009FE5           LDR      R0,??ModbusCoil_1  ;; ??__vtbl_5
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   7C0195E5           LDR      R0,[R5, #+380]
   \   0000001C   7C0184E5           STR      R0,[R4, #+380]
   \   00000020   800195E5           LDR      R0,[R5, #+384]
   \   00000024   800184E5           STR      R0,[R4, #+384]
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusCoil_1:
   \   00000034   ........           DC32     ??__vtbl_5

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusCoilIn::ModbusCoilIn(ModbusCoilIn const &)
   \                     ??ModbusCoilIn:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??ModbusCoil,??ModbusCoil??rA
   \   00000010   44009FE5           LDR      R0,??ModbusCoilIn_1  ;; ??__vtbl_6
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   840195E5           LDR      R0,[R5, #+388]
   \   0000001C   840184E5           STR      R0,[R4, #+388]
   \   00000020   880195E5           LDR      R0,[R5, #+392]
   \   00000024   880184E5           STR      R0,[R4, #+392]
   \   00000028   8C0195E5           LDR      R0,[R5, #+396]
   \   0000002C   8C0184E5           STR      R0,[R4, #+396]
   \   00000030   900195E5           LDR      R0,[R5, #+400]
   \   00000034   900184E5           STR      R0,[R4, #+400]
   \   00000038   9401D5E5           LDRB     R0,[R5, #+404]
   \   0000003C   9401C4E5           STRB     R0,[R4, #+404]
   \   00000040   9501D5E5           LDRB     R0,[R5, #+405]
   \   00000044   9501C4E5           STRB     R0,[R4, #+405]
   \   00000048   9601D5E5           LDRB     R0,[R5, #+406]
   \   0000004C   9601C4E5           STRB     R0,[R4, #+406]
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   3040BDE8           POP      {R4,R5,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusCoilIn_1:
   \   0000005C   ........           DC32     ??__vtbl_6

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusCoilOut::ModbusCoilOut(ModbusCoilOut const &)
   \                     ??ModbusCoilOut:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??ModbusCoil,??ModbusCoil??rA
   \   00000010   AC009FE5           LDR      R0,??ModbusCoilOut_1  ;; ??__vtbl_7
   \   00000014   756FA0E3           MOV      R6,#+468
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   840195E5           LDR      R0,[R5, #+388]
   \   00000020   047086E0           ADD      R7,R6,R4
   \   00000024   840184E5           STR      R0,[R4, #+388]
   \   00000028   880195E5           LDR      R0,[R5, #+392]
   \   0000002C   880184E5           STR      R0,[R4, #+392]
   \   00000030   8C0195E5           LDR      R0,[R5, #+396]
   \   00000034   8C0184E5           STR      R0,[R4, #+396]
   \   00000038   900195E5           LDR      R0,[R5, #+400]
   \   0000003C   900184E5           STR      R0,[R4, #+400]
   \   00000040   940195E5           LDR      R0,[R5, #+404]
   \   00000044   940184E5           STR      R0,[R4, #+404]
   \   00000048   9801D5E5           LDRB     R0,[R5, #+408]
   \   0000004C   9801C4E5           STRB     R0,[R4, #+408]
   \   00000050   9C0195E5           LDR      R0,[R5, #+412]
   \   00000054   9C0184E5           STR      R0,[R4, #+412]
   \   00000058   680FA0E3           MOV      R0,#+416
   \   0000005C   051080E0           ADD      R1,R0,R5
   \   00000060   040080E0           ADD      R0,R0,R4
   \   00000064   ........           _BLF     ??set,??set??rA_2
   \   00000068   6E0FA0E3           MOV      R0,#+440
   \   0000006C   051080E0           ADD      R1,R0,R5
   \   00000070   040080E0           ADD      R0,R0,R4
   \   00000074   ........           _BLF     ??set_2,??set??rA_1
   \   00000078   D00195E5           LDR      R0,[R5, #+464]
   \   0000007C   D00184E5           STR      R0,[R4, #+464]
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000088   051086E0           ADD      R1,R6,R5
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   ........           _BLF     ??_Assign_1,??_Assign??rA_1
   \   00000094   786FA0E3           MOV      R6,#+480
   \   00000098   047086E0           ADD      R7,R6,R4
   \   0000009C   0700A0E1           MOV      R0,R7
   \   000000A0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A4   051086E0           ADD      R1,R6,R5
   \   000000A8   0700A0E1           MOV      R0,R7
   \   000000AC   ........           _BLF     ??_Assign_2,??_Assign??rA_2
   \   000000B0   EC0195E5           LDR      R0,[R5, #+492]
   \   000000B4   EC0184E5           STR      R0,[R4, #+492]
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   F040BDE8           POP      {R4-R7,LR}
   \   000000C0   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusCoilOut_1:
   \   000000C4   ........           DC32     ??__vtbl_7

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusRegister::ModbusRegister(ModbusRegister const &)
   \                     ??ModbusRegister:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??ModbusObject,??ModbusObject??rA
   \   00000010   7C009FE5           LDR      R0,??ModbusRegister_1  ;; ??__vtbl_8
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   7C0195E5           LDR      R0,[R5, #+380]
   \   0000001C   7C0184E5           STR      R0,[R4, #+380]
   \   00000020   800195E5           LDR      R0,[R5, #+384]
   \   00000024   800184E5           STR      R0,[R4, #+384]
   \   00000028   8401D5E5           LDRB     R0,[R5, #+388]
   \   0000002C   8401C4E5           STRB     R0,[R4, #+388]
   \   00000030   880195E5           LDR      R0,[R5, #+392]
   \   00000034   880184E5           STR      R0,[R4, #+392]
   \   00000038   8C0195E5           LDR      R0,[R5, #+396]
   \   0000003C   8C0184E5           STR      R0,[R4, #+396]
   \   00000040   900195E5           LDR      R0,[R5, #+400]
   \   00000044   900184E5           STR      R0,[R4, #+400]
   \   00000048   940195E5           LDR      R0,[R5, #+404]
   \   0000004C   940184E5           STR      R0,[R4, #+404]
   \   00000050   9801D5E5           LDRB     R0,[R5, #+408]
   \   00000054   9801C4E5           STRB     R0,[R4, #+408]
   \   00000058   9901D5E5           LDRB     R0,[R5, #+409]
   \   0000005C   9901C4E5           STRB     R0,[R4, #+409]
   \   00000060   9A01D5E5           LDRB     R0,[R5, #+410]
   \   00000064   9A01C4E5           STRB     R0,[R4, #+410]
   \   00000068   9C0195E5           LDR      R0,[R5, #+412]
   \   0000006C   9C0184E5           STR      R0,[R4, #+412]
   \   00000070   A00195E5           LDR      R0,[R5, #+416]
   \   00000074   A00184E5           STR      R0,[R4, #+416]
   \   00000078   A40195E5           LDR      R0,[R5, #+420]
   \   0000007C   A40184E5           STR      R0,[R4, #+420]
   \   00000080   A80195E5           LDR      R0,[R5, #+424]
   \   00000084   A80184E5           STR      R0,[R4, #+424]
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   3040BDE8           POP      {R4,R5,LR}
   \   00000090   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusRegister_1:
   \   00000094   ........           DC32     ??__vtbl_8

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusRegisterIn::ModbusRegisterIn(ModbusRegisterIn const &)
   \                     ??ModbusRegisterIn:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??ModbusRegister,??ModbusRegister??rA
   \   00000010   14009FE5           LDR      R0,??ModbusRegisterIn_1  ;; ??__vtbl_9
   \   00000014   A40084E5           STR      R0,[R4, #+164]
   \   00000018   AC01D5E5           LDRB     R0,[R5, #+428]
   \   0000001C   AC01C4E5           STRB     R0,[R4, #+428]
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusRegisterIn_1:
   \   0000002C   ........           DC32     ??__vtbl_9

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusRegBitIn::ModbusRegBitIn(ModbusRegBitIn const &)
   \                     ??ModbusRegBitIn:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??ModbusRegisterIn,??ModbusRegisterIn??rA
   \   00000010   68009FE5           LDR      R0,??ModbusRegBitIn_1  ;; ??__vtbl_10
   \   00000014   786FA0E3           MOV      R6,#+480
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   B00195E5           LDR      R0,[R5, #+432]
   \   00000020   047086E0           ADD      R7,R6,R4
   \   00000024   B00184E5           STR      R0,[R4, #+432]
   \   00000028   B40195E5           LDR      R0,[R5, #+436]
   \   0000002C   B40184E5           STR      R0,[R4, #+436]
   \   00000030   B80195E5           LDR      R0,[R5, #+440]
   \   00000034   B80184E5           STR      R0,[R4, #+440]
   \   00000038   BC01D5E5           LDRB     R0,[R5, #+444]
   \   0000003C   BC01C4E5           STRB     R0,[R4, #+444]
   \   00000040   C00195E5           LDR      R0,[R5, #+448]
   \   00000044   C00184E5           STR      R0,[R4, #+448]
   \   00000048   C40195E5           LDR      R0,[R5, #+452]
   \   0000004C   C40184E5           STR      R0,[R4, #+452]
   \   00000050   720FA0E3           MOV      R0,#+456
   \   00000054   051080E0           ADD      R1,R0,R5
   \   00000058   040080E0           ADD      R0,R0,R4
   \   0000005C   ........           _BLF     ??set,??set??rA_2
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000068   051086E0           ADD      R1,R6,R5
   \   0000006C   0700A0E1           MOV      R0,R7
   \   00000070   ........           _BLF     ??_Assign_2,??_Assign??rA_2
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   F040BDE8           POP      {R4-R7,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusRegBitIn_1:
   \   00000080   ........           DC32     ??__vtbl_10

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusRegBitOut::ModbusRegBitOut(ModbusRegBitOut const &)
   \                     ??ModbusRegBitOut:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   ........           _BLF     ??ModbusRegister,??ModbusRegister??rA
   \   00000010   C4009FE5           LDR      R0,??ModbusRegBitOut_1  ;; ??__vtbl_11
   \   00000014   826FA0E3           MOV      R6,#+520
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   AC0195E5           LDR      R0,[R5, #+428]
   \   00000020   047086E0           ADD      R7,R6,R4
   \   00000024   AC0184E5           STR      R0,[R4, #+428]
   \   00000028   B00195E5           LDR      R0,[R5, #+432]
   \   0000002C   B00184E5           STR      R0,[R4, #+432]
   \   00000030   B40195E5           LDR      R0,[R5, #+436]
   \   00000034   B40184E5           STR      R0,[R4, #+436]
   \   00000038   B80195E5           LDR      R0,[R5, #+440]
   \   0000003C   B80184E5           STR      R0,[R4, #+440]
   \   00000040   BC0195E5           LDR      R0,[R5, #+444]
   \   00000044   BC0184E5           STR      R0,[R4, #+444]
   \   00000048   C00195E5           LDR      R0,[R5, #+448]
   \   0000004C   C00184E5           STR      R0,[R4, #+448]
   \   00000050   C40195E5           LDR      R0,[R5, #+452]
   \   00000054   C40184E5           STR      R0,[R4, #+452]
   \   00000058   C80195E5           LDR      R0,[R5, #+456]
   \   0000005C   C80184E5           STR      R0,[R4, #+456]
   \   00000060   CC01D5E5           LDRB     R0,[R5, #+460]
   \   00000064   CC01C4E5           STRB     R0,[R4, #+460]
   \   00000068   CD01D5E5           LDRB     R0,[R5, #+461]
   \   0000006C   CD01C4E5           STRB     R0,[R4, #+461]
   \   00000070   D00195E5           LDR      R0,[R5, #+464]
   \   00000074   D00184E5           STR      R0,[R4, #+464]
   \   00000078   D40195E5           LDR      R0,[R5, #+468]
   \   0000007C   D40184E5           STR      R0,[R4, #+468]
   \   00000080   760FA0E3           MOV      R0,#+472
   \   00000084   051080E0           ADD      R1,R0,R5
   \   00000088   040080E0           ADD      R0,R0,R4
   \   0000008C   ........           _BLF     ??set,??set??rA_2
   \   00000090   7C0FA0E3           MOV      R0,#+496
   \   00000094   051080E0           ADD      R1,R0,R5
   \   00000098   040080E0           ADD      R0,R0,R4
   \   0000009C   ........           _BLF     ??set_2,??set??rA_1
   \   000000A0   0700A0E1           MOV      R0,R7
   \   000000A4   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A8   051086E0           ADD      R1,R6,R5
   \   000000AC   0700A0E1           MOV      R0,R7
   \   000000B0   ........           _BLF     ??_Assign_1,??_Assign??rA_1
   \   000000B4   856FA0E3           MOV      R6,#+532
   \   000000B8   047086E0           ADD      R7,R6,R4
   \   000000BC   0700A0E1           MOV      R0,R7
   \   000000C0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000C4   051086E0           ADD      R1,R6,R5
   \   000000C8   0700A0E1           MOV      R0,R7
   \   000000CC   ........           _BLF     ??_Assign_2,??_Assign??rA_2
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   F040BDE8           POP      {R4-R7,LR}
   \   000000D8   1EFF2FE1           BX       LR               ;; return
   \                     ??ModbusRegBitOut_1:
   \   000000DC   ........           DC32     ??__vtbl_11

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusWago473RegisterIn &ModbusWago473RegisterIn::operator=(ModbusWago473RegisterIn const &)
   \                     `??operator=`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   6CDF4DE2           SUB      SP,SP,#+432
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     ??ModbusRegisterIn,??ModbusRegisterIn??rA
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           _BLF     `??operator=_5`,`??operator=??rA`
   \   00000020   0210A0E3           MOV      R1,#+2
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     `?~ModbusRegisterIn`,`?~ModbusRegisterIn??rA`
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   6CDF8DE2           ADD      SP,SP,#+432
   \   00000034   1040BDE8           POP      {R4,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusWago479RegisterIn &ModbusWago479RegisterIn::operator=(ModbusWago479RegisterIn const &)
   \                     `??operator=_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   6CDF4DE2           SUB      SP,SP,#+432
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     ??ModbusRegisterIn,??ModbusRegisterIn??rA
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           _BLF     `??operator=_5`,`??operator=??rA`
   \   00000020   0210A0E3           MOV      R1,#+2
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     `?~ModbusRegisterIn`,`?~ModbusRegisterIn??rA`
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   6CDF8DE2           ADD      SP,SP,#+432
   \   00000034   1040BDE8           POP      {R4,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusWago482RegisterIn &ModbusWago482RegisterIn::operator=(ModbusWago482RegisterIn const &)
   \                     `??operator=_2`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   6CDF4DE2           SUB      SP,SP,#+432
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     ??ModbusRegisterIn,??ModbusRegisterIn??rA
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           _BLF     `??operator=_5`,`??operator=??rA`
   \   00000020   0210A0E3           MOV      R1,#+2
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     `?~ModbusRegisterIn`,`?~ModbusRegisterIn??rA`
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   6CDF8DE2           ADD      SP,SP,#+432
   \   00000034   1040BDE8           POP      {R4,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusWago485RegisterIn &ModbusWago485RegisterIn::operator=(ModbusWago485RegisterIn const &)
   \                     `??operator=_3`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   6CDF4DE2           SUB      SP,SP,#+432
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     ??ModbusRegisterIn,??ModbusRegisterIn??rA
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           _BLF     `??operator=_5`,`??operator=??rA`
   \   00000020   0210A0E3           MOV      R1,#+2
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     `?~ModbusRegisterIn`,`?~ModbusRegisterIn??rA`
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   6CDF8DE2           ADD      SP,SP,#+432
   \   00000034   1040BDE8           POP      {R4,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusWago487RegisterIn &ModbusWago487RegisterIn::operator=(ModbusWago487RegisterIn const &)
   \                     `??operator=_4`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   6CDF4DE2           SUB      SP,SP,#+432
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     ??ModbusRegisterIn,??ModbusRegisterIn??rA
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           _BLF     `??operator=_5`,`??operator=??rA`
   \   00000020   0210A0E3           MOV      R1,#+2
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           _BLF     `?~ModbusRegisterIn`,`?~ModbusRegisterIn??rA`
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   6CDF8DE2           ADD      SP,SP,#+432
   \   00000034   1040BDE8           POP      {R4,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4          #pragma package(smart_init)
      5          #endif
      6          
      7          ///////////////////////////////////////////////////////////////////////
      8          //
      9          //  WagoIn object routines
     10          //
     11          ///////////////////////////////////////////////////////////////////////
     12          

   \                                 In segment DATA_Z, align 4, align-sorted
     13          set<PRogramObjectBase *>ModbusMultiple::ModbusSet;
   \                     ??ModbusSet:
   \   00000000                      DS8 24
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          ModbusMultiple::ModbusMultiple():PRogramObjectBase( false ) {
   \                     ??ModbusMultiple:
   \   00000000   37402DE9           PUSH     {R0-R2,R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   ........           _BLF     ??PRogramObjectBase_1,??PRogramObjectBase??rA_1
   \   00000010   ........           LDR      R0,??DataTable3  ;; ??__vtbl
   \   00000014   D45084E2           ADD      R5,R4,#+212
   \   00000018   A40084E5           STR      R0,[R4, #+164]
   \   0000001C   BC0084E2           ADD      R0,R4,#+188
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000024   C80084E2           ADD      R0,R4,#+200
   \   00000028   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
     16              ModbusSet.insert(this);
   \   00000044   0420A0E1           MOV      R2,R4
   \   00000048   1400C5E5           STRB     R0,[R5, #+20]
   \   0000004C   ........           LDR      R5,??DataTable2  ;; ??ModbusSet
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   0510A0E1           MOV      R1,R5
   \   00000058   ........           _BLF     ??insert,??insert??rA
     17              IDNumber        = (C_PRO_MULTI_MODBUS << 16) + ModbusSet.size();
   \   0000005C   100095E5           LDR      R0,[R5, #+16]
   \   00000060   B016A0E3           MOV      R1,#+184549376
   \   00000064   4A1881E3           ORR      R1,R1,#0x4A0000
   \   00000068   000081E0           ADD      R0,R1,R0
   \   0000006C   9C0084E5           STR      R0,[R4, #+156]
     18              Type            = C_PRO_MULTI_MODBUS;
   \   00000070   2108A0E1           MOV      R0,R1, LSR #+16
   \   00000074   A00084E5           STR      R0,[R4, #+160]
     19              NumberOfCopies  = 0;
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   A80084E5           STR      R0,[R4, #+168]
     20              RegisterStepsIn = -1;
   \   00000080   0000E0E1           MVN      R0,R0
   \   00000084   AC0084E5           STR      R0,[R4, #+172]
     21              RegisterStepsOut = -1;
   \   00000088   B00084E5           STR      R0,[R4, #+176]
     22              CoilStepsIn     = -1;
   \   0000008C   B40084E5           STR      R0,[R4, #+180]
     23              CoilStepsOut    = -1;
   \   00000090   B80084E5           STR      R0,[R4, #+184]
     24          
     25          }
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   3E40BDE8           POP      {R1-R5,LR}
   \   0000009C   1EFF2FE1           BX       LR               ;; return
     26          

   \                                 In segment CODE, align 4, keep-with-next
     27          ModbusMultiple::~ModbusMultiple() {
   \                     `?~ModbusMultiple`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1800000A           BEQ      `?~ModbusMultiple_1`
   \   00000014   ........           LDR      R0,??DataTable3  ;; ??__vtbl
     28          }
   \   00000018   D46084E2           ADD      R6,R4,#+212
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   041096E5           LDR      R1,[R6, #+4]
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000034   C86084E2           ADD      R6,R4,#+200
   \   00000038   0600A0E1           MOV      R0,R6
   \   0000003C   ........           _BLF     ??_Tidy0_1,??_Tidy0??rA
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000048   BC6084E2           ADD      R6,R4,#+188
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   ........           _BLF     ??_Tidy0,??_Tidy0??rA_1
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   ........           _BLF     ??_Zero,??_Zero??rA
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \   00000068   010015E3           TST      R5,#0x1
   \   0000006C   0100000A           BEQ      `?~ModbusMultiple_1`
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~ModbusMultiple_1`:
   \   00000078   ........           B        ?Subroutine7

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine7:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     29          ///////////////////////////////////////////////////////////////
     30          //
     31          // Routines for the Configuration
     32          //
     33          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     34          AnsiString ModbusMultiple::MakeConfigString(int ExtraTabs) {
   \                     ??MakeConfigString:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     35          
     36              AnsiString LocalString;
     37              LocalString += TabStr1 + KeyWord(C_PRO_NAME) + Name;
   \   00000004   3C669FE5           LDR      R6,??MakeConfigString_1  ;; TabStr1
   \   00000008   E0DF4DE2           SUB      SP,SP,#+896
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000001C   1510A0E3           MOV      R1,#+21
   \   00000020   501E81E3           ORR      R1,R1,#0x500
   \   00000024   E0008DE2           ADD      R0,SP,#+224
   \   00000028   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   0000002C   E0208DE2           ADD      R2,SP,#+224
   \   00000030   0610A0E1           MOV      R1,R6
   \   00000034   C4008DE2           ADD      R0,SP,#+196
   \   00000038   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000003C   442084E2           ADD      R2,R4,#+68
   \   00000040   C4108DE2           ADD      R1,SP,#+196
   \   00000044   A8008DE2           ADD      R0,SP,#+168
   \   00000048   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000004C   ........           LDR      R0,??DataTable4  ;; ??npos
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   007090E5           LDR      R7,[R0, #+0]
   \   00000058   A8108DE2           ADD      R1,SP,#+168
   \   0000005C   0730A0E1           MOV      R3,R7
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           _BLF     ??append,??append??rA
   \   00000068   0020A0E3           MOV      R2,#+0
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   A8008DE2           ADD      R0,SP,#+168
   \   00000074   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   0110A0E3           MOV      R1,#+1
   \   00000080   C4008DE2           ADD      R0,SP,#+196
   \   00000084   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   E0008DE2           ADD      R0,SP,#+224
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
     38          
     39              LocalString += TabStr1 + KeyWord(C_NUMBER_OF_COPIES) + (AnsiString)NumberOfCopies;
   \   00000098   A81094E5           LDR      R1,[R4, #+168]
   \   0000009C   BD0F8DE2           ADD      R0,SP,#+756
   \   000000A0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000A4   0080A0E1           MOV      R8,R0
   \   000000A8   EA10A0E3           MOV      R1,#+234
   \   000000AC   4D0F8DE2           ADD      R0,SP,#+308
   \   000000B0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000B4   4D2F8DE2           ADD      R2,SP,#+308
   \   000000B8   0610A0E1           MOV      R1,R6
   \   000000BC   460F8DE2           ADD      R0,SP,#+280
   \   000000C0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000C4   0820A0E1           MOV      R2,R8
   \   000000C8   461F8DE2           ADD      R1,SP,#+280
   \   000000CC   FC008DE2           ADD      R0,SP,#+252
   \   000000D0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D4   0730A0E1           MOV      R3,R7
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   FC108DE2           ADD      R1,SP,#+252
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   ........           _BLF     ??append,??append??rA
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   FC008DE2           ADD      R0,SP,#+252
   \   000000F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0110A0E3           MOV      R1,#+1
   \   00000100   BD0F8DE2           ADD      R0,SP,#+756
   \   00000104   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   460F8DE2           ADD      R0,SP,#+280
   \   00000114   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   4D0F8DE2           ADD      R0,SP,#+308
   \   00000124   ........           _BLF     ??_Tidy,??_Tidy??rA
     40              LocalString += TabStr1 + KeyWord(C_REGISTER_STEPS_IN) + (AnsiString)RegisterStepsIn;
   \   00000128   AC1094E5           LDR      R1,[R4, #+172]
   \   0000012C   C40F8DE2           ADD      R0,SP,#+784
   \   00000130   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000134   0080A0E1           MOV      R8,R0
   \   00000138   EB10A0E3           MOV      R1,#+235
   \   0000013C   620F8DE2           ADD      R0,SP,#+392
   \   00000140   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000144   622F8DE2           ADD      R2,SP,#+392
   \   00000148   0610A0E1           MOV      R1,R6
   \   0000014C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000150   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000154   0820A0E1           MOV      R2,R8
   \   00000158   5B1F8DE2           ADD      R1,SP,#+364
   \   0000015C   540F8DE2           ADD      R0,SP,#+336
   \   00000160   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000164   0730A0E1           MOV      R3,R7
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   541F8DE2           ADD      R1,SP,#+336
   \   00000170   0500A0E1           MOV      R0,R5
   \   00000174   ........           _BLF     ??append,??append??rA
   \   00000178   0020A0E3           MOV      R2,#+0
   \   0000017C   0110A0E3           MOV      R1,#+1
   \   00000180   540F8DE2           ADD      R0,SP,#+336
   \   00000184   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000188   0020A0E3           MOV      R2,#+0
   \   0000018C   0110A0E3           MOV      R1,#+1
   \   00000190   C40F8DE2           ADD      R0,SP,#+784
   \   00000194   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0110A0E3           MOV      R1,#+1
   \   000001A0   5B0F8DE2           ADD      R0,SP,#+364
   \   000001A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   620F8DE2           ADD      R0,SP,#+392
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     41              LocalString += TabStr1 + KeyWord(C_REGISTER_STEPS_OUT) + (AnsiString)RegisterStepsOut;
   \   000001B8   B01094E5           LDR      R1,[R4, #+176]
   \   000001BC   CB0F8DE2           ADD      R0,SP,#+812
   \   000001C0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001C4   0080A0E1           MOV      R8,R0
   \   000001C8   EC10A0E3           MOV      R1,#+236
   \   000001CC   770F8DE2           ADD      R0,SP,#+476
   \   000001D0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001D4   772F8DE2           ADD      R2,SP,#+476
   \   000001D8   0610A0E1           MOV      R1,R6
   \   000001DC   700F8DE2           ADD      R0,SP,#+448
   \   000001E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001E4   0820A0E1           MOV      R2,R8
   \   000001E8   701F8DE2           ADD      R1,SP,#+448
   \   000001EC   690F8DE2           ADD      R0,SP,#+420
   \   000001F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001F4   0730A0E1           MOV      R3,R7
   \   000001F8   0020A0E3           MOV      R2,#+0
   \   000001FC   691F8DE2           ADD      R1,SP,#+420
   \   00000200   0500A0E1           MOV      R0,R5
   \   00000204   ........           _BLF     ??append,??append??rA
   \   00000208   0020A0E3           MOV      R2,#+0
   \   0000020C   0110A0E3           MOV      R1,#+1
   \   00000210   690F8DE2           ADD      R0,SP,#+420
   \   00000214   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000218   0020A0E3           MOV      R2,#+0
   \   0000021C   0110A0E3           MOV      R1,#+1
   \   00000220   CB0F8DE2           ADD      R0,SP,#+812
   \   00000224   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000228   0020A0E3           MOV      R2,#+0
   \   0000022C   0110A0E3           MOV      R1,#+1
   \   00000230   700F8DE2           ADD      R0,SP,#+448
   \   00000234   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000238   0020A0E3           MOV      R2,#+0
   \   0000023C   0110A0E3           MOV      R1,#+1
   \   00000240   770F8DE2           ADD      R0,SP,#+476
   \   00000244   ........           _BLF     ??_Tidy,??_Tidy??rA
     42              LocalString += TabStr1 + KeyWord(C_COIL_STEPS_IN) + (AnsiString)CoilStepsIn;
   \   00000248   B41094E5           LDR      R1,[R4, #+180]
   \   0000024C   D20F8DE2           ADD      R0,SP,#+840
   \   00000250   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000254   0080A0E1           MOV      R8,R0
   \   00000258   ED10A0E3           MOV      R1,#+237
   \   0000025C   8C0F8DE2           ADD      R0,SP,#+560
   \   00000260   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000264   8C2F8DE2           ADD      R2,SP,#+560
   \   00000268   0610A0E1           MOV      R1,R6
   \   0000026C   850F8DE2           ADD      R0,SP,#+532
   \   00000270   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000274   0820A0E1           MOV      R2,R8
   \   00000278   851F8DE2           ADD      R1,SP,#+532
   \   0000027C   7E0F8DE2           ADD      R0,SP,#+504
   \   00000280   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000284   0730A0E1           MOV      R3,R7
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   7E1F8DE2           ADD      R1,SP,#+504
   \   00000290   0500A0E1           MOV      R0,R5
   \   00000294   ........           _BLF     ??append,??append??rA
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   0110A0E3           MOV      R1,#+1
   \   000002A0   7E0F8DE2           ADD      R0,SP,#+504
   \   000002A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002A8   0020A0E3           MOV      R2,#+0
   \   000002AC   0110A0E3           MOV      R1,#+1
   \   000002B0   D20F8DE2           ADD      R0,SP,#+840
   \   000002B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002B8   0020A0E3           MOV      R2,#+0
   \   000002BC   0110A0E3           MOV      R1,#+1
   \   000002C0   850F8DE2           ADD      R0,SP,#+532
   \   000002C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002C8   0020A0E3           MOV      R2,#+0
   \   000002CC   0110A0E3           MOV      R1,#+1
   \   000002D0   8C0F8DE2           ADD      R0,SP,#+560
   \   000002D4   ........           _BLF     ??_Tidy,??_Tidy??rA
     43              LocalString += TabStr1 + KeyWord(C_COIL_STEPS_OUT) + (AnsiString)CoilStepsOut;
   \   000002D8   B81094E5           LDR      R1,[R4, #+184]
   \   000002DC   D90F8DE2           ADD      R0,SP,#+868
   \   000002E0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000002E4   0080A0E1           MOV      R8,R0
   \   000002E8   EE10A0E3           MOV      R1,#+238
   \   000002EC   A10F8DE2           ADD      R0,SP,#+644
   \   000002F0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000002F4   A12F8DE2           ADD      R2,SP,#+644
   \   000002F8   0610A0E1           MOV      R1,R6
   \   000002FC   9A0F8DE2           ADD      R0,SP,#+616
   \   00000300   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000304   0820A0E1           MOV      R2,R8
   \   00000308   9A1F8DE2           ADD      R1,SP,#+616
     44              if (IdNumbers.size() == 1) {
   \   0000030C   38839FE5           LDR      R8,??MakeConfigString_1+0x4  ;; `?<Constant "0x%0x">`
   \   00000310   930F8DE2           ADD      R0,SP,#+588
   \   00000314   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000318   0730A0E1           MOV      R3,R7
   \   0000031C   0020A0E3           MOV      R2,#+0
   \   00000320   931F8DE2           ADD      R1,SP,#+588
   \   00000324   0500A0E1           MOV      R0,R5
   \   00000328   ........           _BLF     ??append,??append??rA
   \   0000032C   0020A0E3           MOV      R2,#+0
   \   00000330   0110A0E3           MOV      R1,#+1
   \   00000334   930F8DE2           ADD      R0,SP,#+588
   \   00000338   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   D90F8DE2           ADD      R0,SP,#+868
   \   00000348   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   0110A0E3           MOV      R1,#+1
   \   00000354   9A0F8DE2           ADD      R0,SP,#+616
   \   00000358   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000035C   0020A0E3           MOV      R2,#+0
   \   00000360   0110A0E3           MOV      R1,#+1
   \   00000364   A10F8DE2           ADD      R0,SP,#+644
   \   00000368   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000036C   C80084E2           ADD      R0,R4,#+200
   \   00000370   041090E5           LDR      R1,[R0, #+4]
   \   00000374   000090E5           LDR      R0,[R0, #+0]
   \   00000378   000041E0           SUB      R0,R1,R0
   \   0000037C   2001A0E1           LSR      R0,R0,#+2
   \   00000380   010050E3           CMP      R0,#+1
   \   00000384   3300001A           BNE      ??MakeConfigString_2
     45                  AnsiString ObjectIdStr;
   \   00000388   0D00A0E1           MOV      R0,SP
   \   0000038C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
     46                  ObjectIdStr.cat_sprintf("0x%0x", IdNumbers[0]);
   \   00000390   C80094E5           LDR      R0,[R4, #+200]
   \   00000394   0820A0E1           MOV      R2,R8
   \   00000398   003090E5           LDR      R3,[R0, #+0]
   \   0000039C   8C108DE2           ADD      R1,SP,#+140
   \   000003A0   0D00A0E1           MOV      R0,SP
   \   000003A4   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000003A8   0020A0E3           MOV      R2,#+0
   \   000003AC   0110A0E3           MOV      R1,#+1
   \   000003B0   8C008DE2           ADD      R0,SP,#+140
   \   000003B4   ........           _BLF     ??_Tidy,??_Tidy??rA
     47                  LocalString += TabStr1 + KeyWord(C_REF_OBJECT_ID) + (AnsiString)ObjectIdStr;
   \   000003B8   0D10A0E1           MOV      R1,SP
   \   000003BC   70008DE2           ADD      R0,SP,#+112
   \   000003C0   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000003C4   0080A0E1           MOV      R8,R0
   \   000003C8   D410A0E3           MOV      R1,#+212
   \   000003CC   1C008DE2           ADD      R0,SP,#+28
   \   000003D0   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000003D4   1C208DE2           ADD      R2,SP,#+28
   \   000003D8   0610A0E1           MOV      R1,R6
   \   000003DC   38008DE2           ADD      R0,SP,#+56
   \   000003E0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003E4   0820A0E1           MOV      R2,R8
   \   000003E8   38108DE2           ADD      R1,SP,#+56
   \   000003EC   54008DE2           ADD      R0,SP,#+84
   \   000003F0   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000003F4   0730A0E1           MOV      R3,R7
   \   000003F8   0020A0E3           MOV      R2,#+0
   \   000003FC   54108DE2           ADD      R1,SP,#+84
   \   00000400   0500A0E1           MOV      R0,R5
   \   00000404   ........           _BLF     ??append,??append??rA
   \   00000408   0020A0E3           MOV      R2,#+0
   \   0000040C   0110A0E3           MOV      R1,#+1
   \   00000410   54008DE2           ADD      R0,SP,#+84
   \   00000414   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000418   0020A0E3           MOV      R2,#+0
   \   0000041C   0110A0E3           MOV      R1,#+1
   \   00000420   70008DE2           ADD      R0,SP,#+112
   \   00000424   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000428   0020A0E3           MOV      R2,#+0
   \   0000042C   0110A0E3           MOV      R1,#+1
   \   00000430   38008DE2           ADD      R0,SP,#+56
   \   00000434   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000438   0020A0E3           MOV      R2,#+0
   \   0000043C   0110A0E3           MOV      R1,#+1
   \   00000440   1C008DE2           ADD      R0,SP,#+28
   \   00000444   ........           _BLF     ??_Tidy,??_Tidy??rA
     48              } else {
   \   00000448   0020A0E3           MOV      R2,#+0
   \   0000044C   0110A0E3           MOV      R1,#+1
   \   00000450   0D00A0E1           MOV      R0,SP
   \   00000454   450000EA           B        ??MakeConfigString_3
     49                  LocalString += TabStr1 + KeyWord(C_OBJECT_ID_LIST);
   \                     ??MakeConfigString_2:
   \   00000458   D210A0E3           MOV      R1,#+210
   \   0000045C   54008DE2           ADD      R0,SP,#+84
   \   00000460   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000464   54208DE2           ADD      R2,SP,#+84
   \   00000468   0610A0E1           MOV      R1,R6
   \   0000046C   38008DE2           ADD      R0,SP,#+56
   \   00000470   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000474   0730A0E1           MOV      R3,R7
   \   00000478   0020A0E3           MOV      R2,#+0
   \   0000047C   38108DE2           ADD      R1,SP,#+56
   \   00000480   0500A0E1           MOV      R0,R5
   \   00000484   ........           _BLF     ??append,??append??rA
   \   00000488   0020A0E3           MOV      R2,#+0
   \   0000048C   0110A0E3           MOV      R1,#+1
   \   00000490   38008DE2           ADD      R0,SP,#+56
   \   00000494   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000498   0020A0E3           MOV      R2,#+0
   \   0000049C   0110A0E3           MOV      R1,#+1
   \   000004A0   54008DE2           ADD      R0,SP,#+84
   \   000004A4   ........           _BLF     ??_Tidy,??_Tidy??rA
     50                  for (unsigned i = 0; i < IdNumbers.size(); i++) {
   \   000004A8   0090A0E3           MOV      R9,#+0
   \   000004AC   150000EA           B        ??MakeConfigString_4
     51                      AnsiString IdNumStr;
   \                     ??MakeConfigString_5:
   \   000004B0   1C008DE2           ADD      R0,SP,#+28
   \   000004B4   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
     52                      IdNumStr.cat_sprintf("0x%0X\t", IdNumbers[i]);
   \   000004B8   C80094E5           LDR      R0,[R4, #+200]
   \   000004BC   082088E2           ADD      R2,R8,#+8
   \   000004C0   093190E7           LDR      R3,[R0, +R9, LSL #+2]
   \   000004C4   0D10A0E1           MOV      R1,SP
   \   000004C8   1C008DE2           ADD      R0,SP,#+28
   \   000004CC   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   000004D0   0020A0E3           MOV      R2,#+0
   \   000004D4   0110A0E3           MOV      R1,#+1
   \   000004D8   0D00A0E1           MOV      R0,SP
   \   000004DC   ........           _BLF     ??_Tidy,??_Tidy??rA
     53                      LocalString += IdNumStr;
   \   000004E0   0730A0E1           MOV      R3,R7
   \   000004E4   0020A0E3           MOV      R2,#+0
   \   000004E8   1C108DE2           ADD      R1,SP,#+28
   \   000004EC   0500A0E1           MOV      R0,R5
   \   000004F0   ........           _BLF     ??append,??append??rA
     54                  }
   \   000004F4   0020A0E3           MOV      R2,#+0
   \   000004F8   0110A0E3           MOV      R1,#+1
   \   000004FC   1C008DE2           ADD      R0,SP,#+28
   \   00000500   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000504   019089E2           ADD      R9,R9,#+1
   \                     ??MakeConfigString_4:
   \   00000508   C80084E2           ADD      R0,R4,#+200
   \   0000050C   041090E5           LDR      R1,[R0, #+4]
   \   00000510   000090E5           LDR      R0,[R0, #+0]
   \   00000514   000041E0           SUB      R0,R1,R0
   \   00000518   200159E1           CMP      R9,R0, LSR #+2
   \   0000051C   E3FFFF3A           BCC      ??MakeConfigString_5
     55                  LocalString += TabStr1 + KeyWord(C_PROLIST_END);
   \   00000520   4910A0E3           MOV      R1,#+73
   \   00000524   501E81E3           ORR      R1,R1,#0x500
   \   00000528   8C008DE2           ADD      R0,SP,#+140
   \   0000052C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000530   8C208DE2           ADD      R2,SP,#+140
   \   00000534   0610A0E1           MOV      R1,R6
   \   00000538   70008DE2           ADD      R0,SP,#+112
   \   0000053C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000540   0730A0E1           MOV      R3,R7
   \   00000544   0020A0E3           MOV      R2,#+0
   \   00000548   70108DE2           ADD      R1,SP,#+112
   \   0000054C   0500A0E1           MOV      R0,R5
   \   00000550   ........           _BLF     ??append,??append??rA
   \   00000554   0020A0E3           MOV      R2,#+0
   \   00000558   0110A0E3           MOV      R1,#+1
   \   0000055C   70008DE2           ADD      R0,SP,#+112
   \   00000560   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000564   0020A0E3           MOV      R2,#+0
   \   00000568   0110A0E3           MOV      R1,#+1
   \   0000056C   8C008DE2           ADD      R0,SP,#+140
   \                     ??MakeConfigString_3:
   \   00000570   ........           _BLF     ??_Tidy,??_Tidy??rA
     56          
     57              }
     58              for (unsigned j = 0; j < ModbusObectVector.size(); j++) {
   \   00000574   0080A0E3           MOV      R8,#+0
   \   00000578   0D0000EA           B        ??MakeConfigString_6
     59                  ModbusObectVector[j]->MakeConfigString(1);
   \                     ??MakeConfigString_7:
   \   0000057C   BC0094E5           LDR      R0,[R4, #+188]
   \   00000580   0120A0E3           MOV      R2,#+1
   \   00000584   083190E7           LDR      R3,[R0, +R8, LSL #+2]
   \   00000588   8C108DE2           ADD      R1,SP,#+140
   \   0000058C   0300A0E1           MOV      R0,R3
   \   00000590   A43093E5           LDR      R3,[R3, #+164]
     60              }
   \   00000594   018088E2           ADD      R8,R8,#+1
   \   00000598   0C3093E5           LDR      R3,[R3, #+12]
   \   0000059C   0FE0A0E1           MOV      LR,PC
   \   000005A0   13FF2FE1           BX       R3
   \   000005A4   0020A0E3           MOV      R2,#+0
   \   000005A8   0110A0E3           MOV      R1,#+1
   \   000005AC   8C008DE2           ADD      R0,SP,#+140
   \   000005B0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??MakeConfigString_6:
   \   000005B4   BC0084E2           ADD      R0,R4,#+188
   \   000005B8   041090E5           LDR      R1,[R0, #+4]
   \   000005BC   000090E5           LDR      R0,[R0, #+0]
   \   000005C0   000041E0           SUB      R0,R1,R0
   \   000005C4   200158E1           CMP      R8,R0, LSR #+2
   \   000005C8   EBFFFF3A           BCC      ??MakeConfigString_7
     61              LocalString += TabStr1 + KeyWord(C_PRO_END) + CrLfStr;
   \   000005CC   FA1FA0E3           MOV      R1,#+1000
   \   000005D0   B60F8DE2           ADD      R0,SP,#+728
   \   000005D4   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000005D8   B62F8DE2           ADD      R2,SP,#+728
   \   000005DC   0610A0E1           MOV      R1,R6
   \   000005E0   AF0F8DE2           ADD      R0,SP,#+700
   \   000005E4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005E8   60209FE5           LDR      R2,??MakeConfigString_1+0x8  ;; CrLfStr
   \   000005EC   AF1F8DE2           ADD      R1,SP,#+700
   \   000005F0   A80F8DE2           ADD      R0,SP,#+672
   \   000005F4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000005F8   0730A0E1           MOV      R3,R7
   \   000005FC   0020A0E3           MOV      R2,#+0
   \   00000600   A81F8DE2           ADD      R1,SP,#+672
   \   00000604   0500A0E1           MOV      R0,R5
   \   00000608   ........           _BLF     ??append,??append??rA
   \   0000060C   0020A0E3           MOV      R2,#+0
   \   00000610   0110A0E3           MOV      R1,#+1
   \   00000614   A80F8DE2           ADD      R0,SP,#+672
   \   00000618   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000061C   0020A0E3           MOV      R2,#+0
   \   00000620   0110A0E3           MOV      R1,#+1
   \   00000624   AF0F8DE2           ADD      R0,SP,#+700
   \   00000628   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000062C   0020A0E3           MOV      R2,#+0
   \   00000630   0110A0E3           MOV      R1,#+1
   \   00000634   B60F8DE2           ADD      R0,SP,#+728
   \   00000638   ........           _BLF     ??_Tidy,??_Tidy??rA
     62              return (LocalString);
   \   0000063C   E0DF8DE2           ADD      SP,SP,#+896
   \   00000640   F043BDE8           POP      {R4-R9,LR}
   \   00000644   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_1:
   \   00000648   ........           DC32     TabStr1
   \   0000064C   ........           DC32     `?<Constant "0x%0x">`
   \   00000650   ........           DC32     CrLfStr
     63          
     64          }
     65          //---------------------------------------------------------------------------
     66          

   \                                 In segment CODE, align 4, keep-with-next
     67          bool ModbusMultiple::LoadConfigString(TSNConfigString &ConfigString) {
   \                     ??LoadConfigString:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   E2DF4DE2           SUB      SP,SP,#+904
   \   00000008   80DE4DE2           SUB      SP,SP,#+2048
     68              int ErrorLine = 0;
     69              bool NoError = true;
     70              int Key;
     71              SetLineNumber(ConfigString.LineCount);
   \   0000000C   E89C9FE5           LDR      R9,??LoadConfigString_2  ;; `?<Constant "Multiple Modbus">`
   \   00000010   0170A0E1           MOV      R7,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   1C1097E5           LDR      R1,[R7, #+28]
   \   00000020   0040A0E1           MOV      R4,R0
   \   00000024   0150A0E3           MOV      R5,#+1
   \   00000028   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
   \   0000002C   0060A0E3           MOV      R6,#+0
     72              do {
     73                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_3:
   \   00000030   0030A0E3           MOV      R3,#+0
   \   00000034   0D20A0E1           MOV      R2,SP
   \   00000038   04108DE2           ADD      R1,SP,#+4
   \   0000003C   0700A0E1           MOV      R0,R7
   \   00000040   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000044   00009DE5           LDR      R0,[SP, #+0]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0B00000A           BEQ      ??LoadConfigString_4
     74                  if (ErrorLine) {
     75                      if (ErrorLine != EOF) {
   \   00000050   010070E3           CMN      R0,#+1
   \   00000054   D101000A           BEQ      ??LoadConfigString_5
     76                          GiveConfigWarning("Multiple Modbus", ErrorLine);
   \   00000058   0910A0E1           MOV      R1,R9
   \   0000005C   20008DE2           ADD      R0,SP,#+32
   \   00000060   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000064   00109DE5           LDR      R1,[SP, #+0]
   \   00000068   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   20008DE2           ADD      R0,SP,#+32
   \                     ??LoadConfigString_6:
   \   00000078   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000007C   C70100EA           B        ??LoadConfigString_5
     77                      }
     78                  } else {
     79                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_4:
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   20008DE2           ADD      R0,SP,#+32
   \   00000088   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000008C   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   20008DE2           ADD      R0,SP,#+32
   \   000000A0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A4   49B0A0E3           MOV      R11,#+73
   \   000000A8   50BE8BE3           ORR      R11,R11,#0x500
   \   000000AC   D1005AE3           CMP      R10,#+209
   \   000000B0   D2005A13           CMPNE    R10,#+210
   \   000000B4   9000000A           BEQ      ??LoadConfigString_7
   \   000000B8   D4005AE3           CMP      R10,#+212
   \   000000BC   AF00000A           BEQ      ??LoadConfigString_8
   \   000000C0   EA005AE3           CMP      R10,#+234
   \   000000C4   6F00000A           BEQ      ??LoadConfigString_9
   \   000000C8   EB005AE3           CMP      R10,#+235
   \   000000CC   7300000A           BEQ      ??LoadConfigString_10
   \   000000D0   EC005AE3           CMP      R10,#+236
   \   000000D4   7700000A           BEQ      ??LoadConfigString_11
   \   000000D8   ED005AE3           CMP      R10,#+237
   \   000000DC   7B00000A           BEQ      ??LoadConfigString_12
   \   000000E0   EE005AE3           CMP      R10,#+238
   \   000000E4   7E00000A           BEQ      ??LoadConfigString_13
   \   000000E8   EF005AE3           CMP      R10,#+239
   \   000000EC   9400000A           BEQ      ??LoadConfigString_14
   \   000000F0   FA0F5AE3           CMP      R10,#+1000
   \   000000F4   A901000A           BEQ      ??LoadConfigString_5
   \   000000F8   EA10A0E3           MOV      R1,#+234
   \   000000FC   C01F81E3           ORR      R1,R1,#0x300
   \   00000100   01005AE1           CMP      R10,R1
   \   00000104   4700000A           BEQ      ??LoadConfigString_15
   \   00000108   34104BE2           SUB      R1,R11,#+52
   \   0000010C   01005AE1           CMP      R10,R1
   \   00000110   4600000A           BEQ      ??LoadConfigString_16
   \   00000114   6C10A0E3           MOV      R1,#+108
   \   00000118   701E81E3           ORR      R1,R1,#0x700
   \   0000011C   01005AE1           CMP      R10,R1
   \   00000120   02108113           ORRNE    R1,R1,#0x2
   \   00000124   01005A11           CMPNE    R10,R1
   \   00000128   6110A013           MOVNE    R1,#+97
   \   0000012C   901E8113           ORRNE    R1,R1,#0x900
   \   00000130   01005A11           CMPNE    R10,R1
   \   00000134   3B00000A           BEQ      ??LoadConfigString_15
   \   00000138   F310A0E3           MOV      R1,#+243
   \   0000013C   A01E81E3           ORR      R1,R1,#0xA00
   \   00000140   01005AE1           CMP      R10,R1
   \   00000144   E900000A           BEQ      ??LoadConfigString_17
   \   00000148   011081E2           ADD      R1,R1,#+1
   \   0000014C   01005AE1           CMP      R10,R1
   \   00000150   D200000A           BEQ      ??LoadConfigString_18
   \   00000154   011081E3           ORR      R1,R1,#0x1
   \   00000158   01005AE1           CMP      R10,R1
   \   0000015C   6901000A           BEQ      ??LoadConfigString_19
   \   00000160   021081E3           ORR      R1,R1,#0x2
   \   00000164   01005AE1           CMP      R10,R1
   \   00000168   A600000A           BEQ      ??LoadConfigString_20
   \   0000016C   011081E2           ADD      R1,R1,#+1
   \   00000170   01005AE1           CMP      R10,R1
   \   00000174   8C00000A           BEQ      ??LoadConfigString_21
   \   00000178   011081E3           ORR      R1,R1,#0x1
   \   0000017C   01005AE1           CMP      R10,R1
   \   00000180   B300000A           BEQ      ??LoadConfigString_22
   \   00000184   011081E2           ADD      R1,R1,#+1
   \   00000188   01005AE1           CMP      R10,R1
   \   0000018C   7001000A           BEQ      ??LoadConfigString_23
   \   00000190   011081E3           ORR      R1,R1,#0x1
   \   00000194   01005AE1           CMP      R10,R1
   \   00000198   E800000A           BEQ      ??LoadConfigString_24
   \   0000019C   271081E2           ADD      R1,R1,#+39
   \   000001A0   01005AE1           CMP      R10,R1
   \   000001A4   F800000A           BEQ      ??LoadConfigString_25
   \   000001A8   011081E3           ORR      R1,R1,#0x1
   \   000001AC   01005AE1           CMP      R10,R1
   \   000001B0   0801000A           BEQ      ??LoadConfigString_26
   \   000001B4   011081E2           ADD      R1,R1,#+1
   \   000001B8   01005AE1           CMP      R10,R1
   \   000001BC   1801000A           BEQ      ??LoadConfigString_27
   \   000001C0   011081E3           ORR      R1,R1,#0x1
   \   000001C4   01005AE1           CMP      R10,R1
   \   000001C8   2801000A           BEQ      ??LoadConfigString_28
   \   000001CC   011081E2           ADD      R1,R1,#+1
   \   000001D0   01005AE1           CMP      R10,R1
   \   000001D4   3801000A           BEQ      ??LoadConfigString_29
     80                      switch (Key) {
     81                      default:
     82                          GiveConfigWarning("Multiple Modbus", InputKeyWord, ConfigString.LineCount);
   \   000001D8   04108DE2           ADD      R1,SP,#+4
   \   000001DC   CD0F8DE2           ADD      R0,SP,#+820
   \   000001E0   800E80E2           ADD      R0,R0,#+2048
   \   000001E4   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   000001E8   00B0A0E1           MOV      R11,R0
   \   000001EC   0910A0E1           MOV      R1,R9
   \   000001F0   B50E8DE2           ADD      R0,SP,#+2896
   \   000001F4   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000001F8   1C2097E5           LDR      R2,[R7, #+28]
   \   000001FC   0B10A0E1           MOV      R1,R11
   \   00000200   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000204   0020A0E3           MOV      R2,#+0
   \   00000208   0110A0E3           MOV      R1,#+1
   \   0000020C   CD0F8DE2           ADD      R0,SP,#+820
   \   00000210   800E80E2           ADD      R0,R0,#+2048
   \   00000214   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000218   0620A0E1           MOV      R2,R6
   \   0000021C   0110A0E3           MOV      R1,#+1
   \   00000220   B50E8DE2           ADD      R0,SP,#+2896
   \   00000224   93FFFFEA           B        ??LoadConfigString_6
     83                          break;
     84                      case C_PRO_END          :
     85                          break;
     86                      case C_PRO_END_COMMON   :
     87                      case C_CTRL_END_COMMON  :
     88                      case C_CTRL_END         :
     89                      case C_MODBUS_END       :
     90                          NoError = false;
   \                     ??LoadConfigString_15:
   \   00000228   0050A0E3           MOV      R5,#+0
   \   0000022C   5B0100EA           B        ??LoadConfigString_5
     91                          break;
     92                      case C_PRO_NAME         :
     93                          Name = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_16:
   \   00000230   0030A0E3           MOV      R3,#+0
   \   00000234   0D20A0E1           MOV      R2,SP
   \   00000238   DB1F8DE2           ADD      R1,SP,#+876
   \   0000023C   801E81E2           ADD      R1,R1,#+2048
   \   00000240   0700A0E1           MOV      R0,R7
   \   00000244   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000248   ........           LDR      R0,??DataTable5  ;; ??npos
   \   0000024C   0620A0E1           MOV      R2,R6
   \   00000250   003090E5           LDR      R3,[R0, #+0]
   \   00000254   DB1F8DE2           ADD      R1,SP,#+876
   \   00000258   801E81E2           ADD      R1,R1,#+2048
   \   0000025C   440084E2           ADD      R0,R4,#+68
   \   00000260   ........           _BLF     ??assign,??assign??rA
   \   00000264   0620A0E1           MOV      R2,R6
   \   00000268   0110A0E3           MOV      R1,#+1
   \   0000026C   DB0F8DE2           ADD      R0,SP,#+876
   \   00000270   800E80E2           ADD      R0,R0,#+2048
   \   00000274   ........           _BLF     ??_Tidy,??_Tidy??rA
     94                          NoError = !ErrorLine;
   \                     ??LoadConfigString_30:
   \   00000278   00009DE5           LDR      R0,[SP, #+0]
   \   0000027C   000050E3           CMP      R0,#+0
   \   00000280   E8FFFF1A           BNE      ??LoadConfigString_15
   \   00000284   440100EA           B        ??LoadConfigString_31
     95                          break;
     96                      case C_NUMBER_OF_COPIES:
     97                          NumberOfCopies = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_9:
   \   00000288   0020A0E3           MOV      R2,#+0
   \   0000028C   0D10A0E1           MOV      R1,SP
   \   00000290   0700A0E1           MOV      R0,R7
   \   00000294   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   00000298   A80084E5           STR      R0,[R4, #+168]
   \   0000029C   3F0100EA           B        ??LoadConfigString_5
     98                          break;
     99                      case C_REGISTER_STEPS_IN:
    100                          RegisterStepsIn = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_10:
   \   000002A0   0020A0E3           MOV      R2,#+0
   \   000002A4   0D10A0E1           MOV      R1,SP
   \   000002A8   0700A0E1           MOV      R0,R7
   \   000002AC   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000002B0   AC0084E5           STR      R0,[R4, #+172]
   \   000002B4   390100EA           B        ??LoadConfigString_5
    101                          break;
    102                      case C_REGISTER_STEPS_OUT:
    103                          RegisterStepsOut = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_11:
   \   000002B8   0020A0E3           MOV      R2,#+0
   \   000002BC   0D10A0E1           MOV      R1,SP
   \   000002C0   0700A0E1           MOV      R0,R7
   \   000002C4   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000002C8   B00084E5           STR      R0,[R4, #+176]
   \   000002CC   330100EA           B        ??LoadConfigString_5
    104                          break;
    105                      case C_COIL_STEPS_IN   :
    106                          CoilStepsIn = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_12:
   \   000002D0   0020A0E3           MOV      R2,#+0
   \   000002D4   0D10A0E1           MOV      R1,SP
   \   000002D8   0700A0E1           MOV      R0,R7
   \   000002DC   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000002E0   B40084E5           STR      R0,[R4, #+180]
    107                      case C_COIL_STEPS_OUT  :
    108                          CoilStepsOut = ConfigString.ReadLong(ErrorLine);
   \                     ??LoadConfigString_13:
   \   000002E4   0020A0E3           MOV      R2,#+0
   \   000002E8   0D10A0E1           MOV      R1,SP
   \   000002EC   0700A0E1           MOV      R0,R7
   \   000002F0   ........           _BLF     ??ReadLong,??ReadLong??rA
   \   000002F4   B80084E5           STR      R0,[R4, #+184]
   \   000002F8   280100EA           B        ??LoadConfigString_5
    109                          break;
    110                      case C_OBJECT_ID_LIST:
    111                      case C_OBJECT_ID     :
    112                          do {
    113                              unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_7:
   \   000002FC   0B20A0E1           MOV      R2,R11
   \   00000300   0D10A0E1           MOV      R1,SP
   \   00000304   0700A0E1           MOV      R0,R7
   \   00000308   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    114                              if (!ErrorLine) {
   \   0000030C   00109DE5           LDR      R1,[SP, #+0]
   \   00000310   000051E3           CMP      R1,#+0
   \   00000314   0200001A           BNE      ??LoadConfigString_32
    115                                  IdNumbers.push_back(tmpIDNumber);
   \   00000318   0010A0E1           MOV      R1,R0
   \   0000031C   C80084E2           ADD      R0,R4,#+200
   \   00000320   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    116                              }
    117                          }while (!ErrorLine);
   \                     ??LoadConfigString_32:
   \   00000324   00009DE5           LDR      R0,[SP, #+0]
   \   00000328   000050E3           CMP      R0,#+0
   \   0000032C   F2FFFF0A           BEQ      ??LoadConfigString_7
    118                          if (ErrorLine == END_FOUND) {
   \                     ??LoadConfigString_33:
   \   00000330   020070E3           CMN      R0,#+2
   \   00000334   BBFFFF1A           BNE      ??LoadConfigString_15
    119                              ErrorLine = 0;
   \   00000338   0010A0E3           MOV      R1,#+0
   \   0000033C   00108DE5           STR      R1,[SP, #+0]
   \   00000340   150100EA           B        ??LoadConfigString_31
    120                          }
    121                          NoError = !ErrorLine;
    122                          break;
    123                      case C_OBJECT_ID_IGNORE_LIST:
    124                          do {
    125                              unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_14:
   \   00000344   0B20A0E1           MOV      R2,R11
   \   00000348   0D10A0E1           MOV      R1,SP
   \   0000034C   0700A0E1           MOV      R0,R7
   \   00000350   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   00000354   0020A0E1           MOV      R2,R0
    126                              if (!ErrorLine) {
   \   00000358   00009DE5           LDR      R0,[SP, #+0]
   \   0000035C   000050E3           CMP      R0,#+0
   \   00000360   0200001A           BNE      ??LoadConfigString_34
    127                                  IgnoreIdNumbers.insert(tmpIDNumber);
   \   00000364   D41084E2           ADD      R1,R4,#+212
   \   00000368   3C008DE2           ADD      R0,SP,#+60
   \   0000036C   ........           _BLF     ??insert_1,??insert??rA_1
    128                              }
    129                          }while (!ErrorLine);
   \                     ??LoadConfigString_34:
   \   00000370   00009DE5           LDR      R0,[SP, #+0]
   \   00000374   000050E3           CMP      R0,#+0
   \   00000378   F1FFFF0A           BEQ      ??LoadConfigString_14
    130                          if (ErrorLine == END_FOUND) {
   \   0000037C   EBFFFFEA           B        ??LoadConfigString_33
    131                              ErrorLine = 0;
    132                          }
    133                          NoError = !ErrorLine;
    134                          break;
    135                      case C_REF_OBJECT_ID     :
    136                          {
    137                              unsigned tmpIDNumber = ConfigString.ReadInteger(ErrorLine, C_PROLIST_END);
   \                     ??LoadConfigString_8:
   \   00000380   0B20A0E1           MOV      R2,R11
   \   00000384   0D10A0E1           MOV      R1,SP
   \   00000388   0700A0E1           MOV      R0,R7
   \   0000038C   ........           _BLF     ??ReadInteger,??ReadInteger??rA
    138                              if (!ErrorLine) {
   \   00000390   00109DE5           LDR      R1,[SP, #+0]
   \   00000394   000051E3           CMP      R1,#+0
   \   00000398   B6FFFF1A           BNE      ??LoadConfigString_30
    139                                  IdNumbers.push_back(tmpIDNumber);
   \   0000039C   0010A0E1           MOV      R1,R0
   \   000003A0   C80084E2           ADD      R0,R4,#+200
   \   000003A4   ........           _BLF     ??_Push_back0,??_Push_back0??rA
    140                              }
    141                          }
    142                          NoError = !ErrorLine;
   \                     ??LoadConfigString_35:
   \   000003A8   B2FFFFEA           B        ??LoadConfigString_30
    143                          break;
    144                      case C_PRO_MODBUS_COIL_IN:
    145                          {
    146                              ModbusCoilIn *ModbusCoilInPtr = new ModbusCoilIn(true);
   \                     ??LoadConfigString_21:
   \   000003AC   0100A0E3           MOV      R0,#+1
   \   000003B0   ........           _BLF     `??new ModbusCoilIn`,`??new ModbusCoilIn??rA`
   \   000003B4   00B0A0E1           MOV      R11,R0
    147                              NoError = ModbusCoilInPtr->LoadConfigString(ConfigString);
   \   000003B8   A4209BE5           LDR      R2,[R11, #+164]
   \   000003BC   0710A0E1           MOV      R1,R7
   \   000003C0   102092E5           LDR      R2,[R2, #+16]
   \   000003C4   0FE0A0E1           MOV      LR,PC
   \   000003C8   12FF2FE1           BX       R2
   \   000003CC   0050B0E1           MOVS     R5,R0
    148                              if (NoError) {
   \   000003D0   0300000A           BEQ      ??LoadConfigString_36
    149                                  ModbusObectVector.push_back(ModbusCoilInPtr);
   \                     ??LoadConfigString_37:
   \   000003D4   0B10A0E1           MOV      R1,R11
   \   000003D8   BC0084E2           ADD      R0,R4,#+188
   \   000003DC   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA_1
   \   000003E0   EE0000EA           B        ??LoadConfigString_5
    150                              } else {
    151                                  delete ModbusCoilInPtr;
   \                     ??LoadConfigString_36:
   \   000003E4   00005BE3           CMP      R11,#+0
   \   000003E8   EB00000A           BEQ      ??LoadConfigString_31
   \   000003EC   A4209BE5           LDR      R2,[R11, #+164]
   \   000003F0   0310A0E3           MOV      R1,#+3
   \   000003F4   002092E5           LDR      R2,[R2, #+0]
   \   000003F8   0B00A0E1           MOV      R0,R11
   \   000003FC   0FE0A0E1           MOV      LR,PC
   \   00000400   12FF2FE1           BX       R2
    152                                  ModbusCoilInPtr = NULL;
    153                                  NoError = true; // Non-critical?
   \   00000404   E40000EA           B        ??LoadConfigString_31
    154                              }
    155                          }
    156                          break;
    157                      case C_PRO_MODBUS_COIL_OUT:
    158                          {
    159                              ModbusCoilOut *ModbusCoilOutPtr = new ModbusCoilOut(true);
   \                     ??LoadConfigString_20:
   \   00000408   0100A0E3           MOV      R0,#+1
   \   0000040C   ........           _BLF     `??new ModbusCoilOut`,`??new ModbusCoilOut??rA`
   \   00000410   00B0A0E1           MOV      R11,R0
    160                              NoError = ModbusCoilOutPtr->LoadConfigString(ConfigString);
   \   00000414   A4209BE5           LDR      R2,[R11, #+164]
   \   00000418   0710A0E1           MOV      R1,R7
   \   0000041C   102092E5           LDR      R2,[R2, #+16]
   \   00000420   0FE0A0E1           MOV      LR,PC
   \   00000424   12FF2FE1           BX       R2
   \   00000428   0050B0E1           MOVS     R5,R0
    161                              if (NoError) {
   \   0000042C   E8FFFF1A           BNE      ??LoadConfigString_37
    162                                  ModbusObectVector.push_back(ModbusCoilOutPtr);
    163                              } else {
    164                                  delete ModbusCoilOutPtr;
   \   00000430   00005BE3           CMP      R11,#+0
   \   00000434   D800000A           BEQ      ??LoadConfigString_31
   \   00000438   A4209BE5           LDR      R2,[R11, #+164]
   \   0000043C   0310A0E3           MOV      R1,#+3
   \   00000440   002092E5           LDR      R2,[R2, #+0]
   \   00000444   0B00A0E1           MOV      R0,R11
   \   00000448   0FE0A0E1           MOV      LR,PC
   \   0000044C   12FF2FE1           BX       R2
    165                                  ModbusCoilOutPtr = NULL;
    166                                  NoError = true; // Non-critical?
   \   00000450   D10000EA           B        ??LoadConfigString_31
    167                              }
    168                          }
    169                          break;
    170                      case C_PRO_MODBUS_COIL_HIST:
    171                          {
    172                              ModbusCoilHistory *ModbusCoilHistoryPtr = new ModbusCoilHistory(true);
   \                     ??LoadConfigString_22:
   \   00000454   0100A0E3           MOV      R0,#+1
   \   00000458   ........           _BLF     `??new ModbusCoilHistory`,`??new ModbusCoilHistory??rA`
   \   0000045C   00B0A0E1           MOV      R11,R0
    173                              NoError = ModbusCoilHistoryPtr->LoadConfigString(ConfigString);
   \   00000460   A4209BE5           LDR      R2,[R11, #+164]
   \   00000464   0710A0E1           MOV      R1,R7
   \   00000468   102092E5           LDR      R2,[R2, #+16]
   \   0000046C   0FE0A0E1           MOV      LR,PC
   \   00000470   12FF2FE1           BX       R2
   \   00000474   0050B0E1           MOVS     R5,R0
    174                              if (NoError) {
   \   00000478   D5FFFF1A           BNE      ??LoadConfigString_37
    175                                  ModbusObectVector.push_back(ModbusCoilHistoryPtr);
    176                              } else {
    177                                  delete ModbusCoilHistoryPtr;
   \   0000047C   00005BE3           CMP      R11,#+0
   \   00000480   C500000A           BEQ      ??LoadConfigString_31
   \   00000484   A4209BE5           LDR      R2,[R11, #+164]
   \   00000488   0310A0E3           MOV      R1,#+3
   \   0000048C   002092E5           LDR      R2,[R2, #+0]
   \   00000490   0B00A0E1           MOV      R0,R11
   \   00000494   0FE0A0E1           MOV      LR,PC
   \   00000498   12FF2FE1           BX       R2
    178                                  ModbusCoilHistoryPtr = NULL;
    179                                  NoError = true; // Non-critical?
   \   0000049C   BE0000EA           B        ??LoadConfigString_31
    180                              }
    181                          }
    182                          break;
    183                      case C_PRO_MODBUS_REG_IN:
    184                          {
    185                              ModbusRegisterIn *ModbusRegisterInPtr = new ModbusRegisterIn(true);
   \                     ??LoadConfigString_18:
   \   000004A0   0120A0E3           MOV      R2,#+1
   \   000004A4   0100A0E3           MOV      R0,#+1
   \   000004A8   ........           _BLF     `??new ModbusRegisterIn`,`??new ModbusRegisterIn??rA`
   \   000004AC   00B0A0E1           MOV      R11,R0
    186                              NoError = ModbusRegisterInPtr->LoadConfigString(ConfigString);
   \   000004B0   A4209BE5           LDR      R2,[R11, #+164]
   \   000004B4   0710A0E1           MOV      R1,R7
   \   000004B8   102092E5           LDR      R2,[R2, #+16]
   \   000004BC   0FE0A0E1           MOV      LR,PC
   \   000004C0   12FF2FE1           BX       R2
   \   000004C4   0050B0E1           MOVS     R5,R0
    187                              if (NoError) {
   \   000004C8   C1FFFF1A           BNE      ??LoadConfigString_37
    188                                  ModbusObectVector.push_back(ModbusRegisterInPtr);
    189                              } else {
    190                                  delete ModbusRegisterInPtr;
   \   000004CC   00005BE3           CMP      R11,#+0
   \   000004D0   B100000A           BEQ      ??LoadConfigString_31
   \   000004D4   A4209BE5           LDR      R2,[R11, #+164]
   \   000004D8   0310A0E3           MOV      R1,#+3
   \   000004DC   002092E5           LDR      R2,[R2, #+0]
   \   000004E0   0B00A0E1           MOV      R0,R11
   \   000004E4   0FE0A0E1           MOV      LR,PC
   \   000004E8   12FF2FE1           BX       R2
    191                                  ModbusRegisterInPtr = NULL;
    192                                  NoError = true; // Non-critical?
   \   000004EC   AA0000EA           B        ??LoadConfigString_31
    193                              }
    194                          }
    195                          break;
    196                      case C_PRO_MODBUS_REG_OUT:
    197                          {
    198                              ModbusRegisterOut *ModbusRegisterOutPtr = new ModbusRegisterOut(true);
   \                     ??LoadConfigString_17:
   \   000004F0   0120A0E3           MOV      R2,#+1
   \   000004F4   0100A0E3           MOV      R0,#+1
   \   000004F8   ........           _BLF     `??new ModbusRegisterOut`,`??new ModbusRegisterOut??rA`
   \   000004FC   00B0A0E1           MOV      R11,R0
    199                              NoError = ModbusRegisterOutPtr->LoadConfigString(ConfigString);
   \   00000500   A4209BE5           LDR      R2,[R11, #+164]
   \   00000504   0710A0E1           MOV      R1,R7
   \   00000508   102092E5           LDR      R2,[R2, #+16]
   \   0000050C   0FE0A0E1           MOV      LR,PC
   \   00000510   12FF2FE1           BX       R2
   \   00000514   0050B0E1           MOVS     R5,R0
    200                              if (NoError) {
   \   00000518   ADFFFF1A           BNE      ??LoadConfigString_37
    201                                  ModbusObectVector.push_back(ModbusRegisterOutPtr);
    202                              } else {
    203                                  delete ModbusRegisterOutPtr;
   \   0000051C   00005BE3           CMP      R11,#+0
   \   00000520   9D00000A           BEQ      ??LoadConfigString_31
   \   00000524   A4209BE5           LDR      R2,[R11, #+164]
   \   00000528   0310A0E3           MOV      R1,#+3
   \   0000052C   002092E5           LDR      R2,[R2, #+0]
   \   00000530   0B00A0E1           MOV      R0,R11
   \   00000534   0FE0A0E1           MOV      LR,PC
   \   00000538   12FF2FE1           BX       R2
    204                                  ModbusRegisterOutPtr = NULL;
    205                                  NoError = true; // Non-critical?
   \   0000053C   960000EA           B        ??LoadConfigString_31
    206                              }
    207                          }
    208                          break;
    209                      case C_PRO_MODBUS_REG_BIT_OUT:
    210                          {
    211                              ModbusRegBitOut *ModbusRegBitOutPtr = new ModbusRegBitOut(true);
   \                     ??LoadConfigString_24:
   \   00000540   0100A0E3           MOV      R0,#+1
   \   00000544   ........           _BLF     `??new ModbusRegBitOut`,`??new ModbusRegBitOut??rA`
   \   00000548   00B0A0E1           MOV      R11,R0
    212                              NoError = ModbusRegBitOutPtr->LoadConfigString(ConfigString);
   \   0000054C   A4209BE5           LDR      R2,[R11, #+164]
   \   00000550   0710A0E1           MOV      R1,R7
   \   00000554   102092E5           LDR      R2,[R2, #+16]
   \   00000558   0FE0A0E1           MOV      LR,PC
   \   0000055C   12FF2FE1           BX       R2
   \   00000560   0050B0E1           MOVS     R5,R0
    213                              if (NoError) {
   \   00000564   9AFFFF1A           BNE      ??LoadConfigString_37
    214                                  ModbusObectVector.push_back(ModbusRegBitOutPtr);
    215                              } else {
    216                                  delete ModbusRegBitOutPtr;
   \   00000568   00005BE3           CMP      R11,#+0
   \   0000056C   8A00000A           BEQ      ??LoadConfigString_31
   \   00000570   A4209BE5           LDR      R2,[R11, #+164]
   \   00000574   0310A0E3           MOV      R1,#+3
   \   00000578   002092E5           LDR      R2,[R2, #+0]
   \   0000057C   0B00A0E1           MOV      R0,R11
   \   00000580   0FE0A0E1           MOV      LR,PC
   \   00000584   12FF2FE1           BX       R2
    217                                  ModbusRegBitOutPtr = NULL;
    218                                  NoError = true; // Non-critical?
   \   00000588   830000EA           B        ??LoadConfigString_31
    219                              }
    220                          }
    221                          break;
    222                      case C_PRO_MBUS_WAGO473_RIN  :
    223                          {
    224                              ModbusWago473RegisterIn *ModbusWago473RegisterInPtr = new ModbusWago473RegisterIn(true);
   \                     ??LoadConfigString_25:
   \   0000058C   0100A0E3           MOV      R0,#+1
   \   00000590   ........           _BLF     `??new ModbusWago473RegisterIn`,`??new ModbusWago473RegisterIn??rA`
   \   00000594   00B0A0E1           MOV      R11,R0
    225                              NoError = ModbusWago473RegisterInPtr->LoadConfigString(ConfigString);
   \   00000598   A4209BE5           LDR      R2,[R11, #+164]
   \   0000059C   0710A0E1           MOV      R1,R7
   \   000005A0   102092E5           LDR      R2,[R2, #+16]
   \   000005A4   0FE0A0E1           MOV      LR,PC
   \   000005A8   12FF2FE1           BX       R2
   \   000005AC   0050B0E1           MOVS     R5,R0
    226                              if (NoError) {
   \   000005B0   87FFFF1A           BNE      ??LoadConfigString_37
    227                                  ModbusObectVector.push_back(ModbusWago473RegisterInPtr);
    228                              } else {
    229                                  delete ModbusWago473RegisterInPtr;
   \   000005B4   00005BE3           CMP      R11,#+0
   \   000005B8   7700000A           BEQ      ??LoadConfigString_31
   \   000005BC   A4209BE5           LDR      R2,[R11, #+164]
   \   000005C0   0310A0E3           MOV      R1,#+3
   \   000005C4   002092E5           LDR      R2,[R2, #+0]
   \   000005C8   0B00A0E1           MOV      R0,R11
   \   000005CC   0FE0A0E1           MOV      LR,PC
   \   000005D0   12FF2FE1           BX       R2
    230                                  ModbusWago473RegisterInPtr = NULL;
    231                                  NoError = true; // Non-critical?
   \   000005D4   700000EA           B        ??LoadConfigString_31
    232                              }
    233                          }
    234                          break;
    235                      case C_PRO_MBUS_WAGO479_RIN  :
    236                          {
    237                              ModbusWago479RegisterIn *ModbusWago479RegisterInPtr = new ModbusWago479RegisterIn(true);
   \                     ??LoadConfigString_26:
   \   000005D8   0100A0E3           MOV      R0,#+1
   \   000005DC   ........           _BLF     `??new ModbusWago479RegisterIn`,`??new ModbusWago479RegisterIn??rA`
   \   000005E0   00B0A0E1           MOV      R11,R0
    238                              NoError = ModbusWago479RegisterInPtr->LoadConfigString(ConfigString);
   \   000005E4   A4209BE5           LDR      R2,[R11, #+164]
   \   000005E8   0710A0E1           MOV      R1,R7
   \   000005EC   102092E5           LDR      R2,[R2, #+16]
   \   000005F0   0FE0A0E1           MOV      LR,PC
   \   000005F4   12FF2FE1           BX       R2
   \   000005F8   0050B0E1           MOVS     R5,R0
    239                              if (NoError) {
   \   000005FC   74FFFF1A           BNE      ??LoadConfigString_37
    240                                  ModbusObectVector.push_back(ModbusWago479RegisterInPtr);
    241                              } else {
    242                                  delete ModbusWago479RegisterInPtr;
   \   00000600   00005BE3           CMP      R11,#+0
   \   00000604   6400000A           BEQ      ??LoadConfigString_31
   \   00000608   A4209BE5           LDR      R2,[R11, #+164]
   \   0000060C   0310A0E3           MOV      R1,#+3
   \   00000610   002092E5           LDR      R2,[R2, #+0]
   \   00000614   0B00A0E1           MOV      R0,R11
   \   00000618   0FE0A0E1           MOV      LR,PC
   \   0000061C   12FF2FE1           BX       R2
    243                                  ModbusWago479RegisterInPtr = NULL;
    244                                  NoError = true; // Non-critical?
   \   00000620   5D0000EA           B        ??LoadConfigString_31
    245                              }
    246                          }
    247                          break;
    248                      case C_PRO_MBUS_WAGO482_RIN  :
    249                          {
    250                              ModbusWago482RegisterIn *ModbusWago482RegisterInPtr = new ModbusWago482RegisterIn(true);
   \                     ??LoadConfigString_27:
   \   00000624   0100A0E3           MOV      R0,#+1
   \   00000628   ........           _BLF     `??new ModbusWago482RegisterIn`,`??new ModbusWago482RegisterIn??rA`
   \   0000062C   00B0A0E1           MOV      R11,R0
    251                              NoError = ModbusWago482RegisterInPtr->LoadConfigString(ConfigString);
   \   00000630   A4209BE5           LDR      R2,[R11, #+164]
   \   00000634   0710A0E1           MOV      R1,R7
   \   00000638   102092E5           LDR      R2,[R2, #+16]
   \   0000063C   0FE0A0E1           MOV      LR,PC
   \   00000640   12FF2FE1           BX       R2
   \   00000644   0050B0E1           MOVS     R5,R0
    252                              if (NoError) {
   \   00000648   61FFFF1A           BNE      ??LoadConfigString_37
    253                                  ModbusObectVector.push_back(ModbusWago482RegisterInPtr);
    254                              } else {
    255                                  delete ModbusWago482RegisterInPtr;
   \   0000064C   00005BE3           CMP      R11,#+0
   \   00000650   5100000A           BEQ      ??LoadConfigString_31
   \   00000654   A4209BE5           LDR      R2,[R11, #+164]
   \   00000658   0310A0E3           MOV      R1,#+3
   \   0000065C   002092E5           LDR      R2,[R2, #+0]
   \   00000660   0B00A0E1           MOV      R0,R11
   \   00000664   0FE0A0E1           MOV      LR,PC
   \   00000668   12FF2FE1           BX       R2
    256                                  ModbusWago482RegisterInPtr = NULL;
    257                                  NoError = true; // Non-critical?
   \   0000066C   4A0000EA           B        ??LoadConfigString_31
    258                              }
    259                          }
    260                          break;
    261                      case C_PRO_MBUS_WAGO485_RIN  :
    262                          {
    263                              ModbusWago485RegisterIn *ModbusWago485RegisterInPtr = new ModbusWago485RegisterIn(true);
   \                     ??LoadConfigString_28:
   \   00000670   0100A0E3           MOV      R0,#+1
   \   00000674   ........           _BLF     `??new ModbusWago485RegisterIn`,`??new ModbusWago485RegisterIn??rA`
   \   00000678   00B0A0E1           MOV      R11,R0
    264                              NoError = ModbusWago485RegisterInPtr->LoadConfigString(ConfigString);
   \   0000067C   A4209BE5           LDR      R2,[R11, #+164]
   \   00000680   0710A0E1           MOV      R1,R7
   \   00000684   102092E5           LDR      R2,[R2, #+16]
   \   00000688   0FE0A0E1           MOV      LR,PC
   \   0000068C   12FF2FE1           BX       R2
   \   00000690   0050B0E1           MOVS     R5,R0
    265                              if (NoError) {
   \   00000694   4EFFFF1A           BNE      ??LoadConfigString_37
    266                                  ModbusObectVector.push_back(ModbusWago485RegisterInPtr);
    267                              } else {
    268                                  delete ModbusWago485RegisterInPtr;
   \   00000698   00005BE3           CMP      R11,#+0
   \   0000069C   3E00000A           BEQ      ??LoadConfigString_31
   \   000006A0   A4209BE5           LDR      R2,[R11, #+164]
   \   000006A4   0310A0E3           MOV      R1,#+3
   \   000006A8   002092E5           LDR      R2,[R2, #+0]
   \   000006AC   0B00A0E1           MOV      R0,R11
   \   000006B0   0FE0A0E1           MOV      LR,PC
   \   000006B4   12FF2FE1           BX       R2
    269                                  ModbusWago485RegisterInPtr = NULL;
    270                                  NoError = true; // Non-critical?
   \   000006B8   370000EA           B        ??LoadConfigString_31
    271                              }
    272                          }
    273                          break;
    274                      case C_PRO_MBUS_WAGO487_RIN  :
    275                          {
    276                              ModbusWago487RegisterIn *ModbusWago487RegisterInPtr = new ModbusWago487RegisterIn(true);
   \                     ??LoadConfigString_29:
   \   000006BC   0100A0E3           MOV      R0,#+1
   \   000006C0   ........           _BLF     `??new ModbusWago487RegisterIn`,`??new ModbusWago487RegisterIn??rA`
   \   000006C4   00B0A0E1           MOV      R11,R0
    277                              NoError = ModbusWago487RegisterInPtr->LoadConfigString(ConfigString);
   \   000006C8   A4209BE5           LDR      R2,[R11, #+164]
   \   000006CC   0710A0E1           MOV      R1,R7
   \   000006D0   102092E5           LDR      R2,[R2, #+16]
   \   000006D4   0FE0A0E1           MOV      LR,PC
   \   000006D8   12FF2FE1           BX       R2
   \   000006DC   0050B0E1           MOVS     R5,R0
    278                              if (NoError) {
   \   000006E0   3BFFFF1A           BNE      ??LoadConfigString_37
    279                                  ModbusObectVector.push_back(ModbusWago487RegisterInPtr);
    280                              } else {
    281                                  delete ModbusWago487RegisterInPtr;
   \   000006E4   00005BE3           CMP      R11,#+0
   \   000006E8   2B00000A           BEQ      ??LoadConfigString_31
   \   000006EC   A4209BE5           LDR      R2,[R11, #+164]
   \   000006F0   0310A0E3           MOV      R1,#+3
   \   000006F4   002092E5           LDR      R2,[R2, #+0]
   \   000006F8   0B00A0E1           MOV      R0,R11
   \   000006FC   0FE0A0E1           MOV      LR,PC
   \   00000700   12FF2FE1           BX       R2
    282                                  ModbusWago487RegisterInPtr = NULL;
    283                                  NoError = true; // Non-critical?
   \   00000704   240000EA           B        ??LoadConfigString_31
    284                              }
    285                          }
    286                          break;
    287                      case C_PRO_MODBUS_REG_HIST:
    288                          {
    289                              ModbusRegisterHistory *ModbusRegisterHistoryPtr = new ModbusRegisterHistory(true);
   \                     ??LoadConfigString_19:
   \   00000708   0100A0E3           MOV      R0,#+1
   \   0000070C   ........           _BLF     `??new ModbusRegisterHistory`,`??new ModbusRegisterHistory??rA`
   \   00000710   00B0A0E1           MOV      R11,R0
    290                              NoError = ModbusRegisterHistoryPtr->LoadConfigString(ConfigString);
   \   00000714   A4209BE5           LDR      R2,[R11, #+164]
   \   00000718   0710A0E1           MOV      R1,R7
   \   0000071C   102092E5           LDR      R2,[R2, #+16]
   \   00000720   0FE0A0E1           MOV      LR,PC
   \   00000724   12FF2FE1           BX       R2
   \   00000728   0050B0E1           MOVS     R5,R0
    291                              if (NoError) {
   \   0000072C   28FFFF1A           BNE      ??LoadConfigString_37
    292                                  ModbusObectVector.push_back(ModbusRegisterHistoryPtr);
    293                              } else {
    294                                  delete ModbusRegisterHistoryPtr;
   \   00000730   00005BE3           CMP      R11,#+0
   \   00000734   1800000A           BEQ      ??LoadConfigString_31
   \   00000738   A4209BE5           LDR      R2,[R11, #+164]
   \   0000073C   0310A0E3           MOV      R1,#+3
   \   00000740   002092E5           LDR      R2,[R2, #+0]
   \   00000744   0B00A0E1           MOV      R0,R11
   \   00000748   0FE0A0E1           MOV      LR,PC
   \   0000074C   12FF2FE1           BX       R2
    295                                  ModbusRegisterHistoryPtr = NULL;
    296                                  NoError = true; // Non-critical?
   \   00000750   110000EA           B        ??LoadConfigString_31
    297                              }
    298                          }
    299                          break;
    300                      case C_PRO_MODBUS_REG_BIT_IN:
    301                          {
    302                              ModbusRegBitIn *ModbusRegBitInPtr = new ModbusRegBitIn(true);
   \                     ??LoadConfigString_23:
   \   00000754   0100A0E3           MOV      R0,#+1
   \   00000758   ........           _BLF     `??new ModbusRegBitIn`,`??new ModbusRegBitIn??rA`
   \   0000075C   00B0A0E1           MOV      R11,R0
    303                              NoError = ModbusRegBitInPtr->LoadConfigString(ConfigString);
   \   00000760   A4209BE5           LDR      R2,[R11, #+164]
   \   00000764   0710A0E1           MOV      R1,R7
   \   00000768   102092E5           LDR      R2,[R2, #+16]
   \   0000076C   0FE0A0E1           MOV      LR,PC
   \   00000770   12FF2FE1           BX       R2
   \   00000774   0050B0E1           MOVS     R5,R0
    304                              if (NoError) {
   \   00000778   15FFFF1A           BNE      ??LoadConfigString_37
    305                                  ModbusObectVector.push_back(ModbusRegBitInPtr);
    306                              } else {
    307                                  delete ModbusRegBitInPtr;
   \   0000077C   00005BE3           CMP      R11,#+0
   \   00000780   0500000A           BEQ      ??LoadConfigString_31
   \   00000784   A4209BE5           LDR      R2,[R11, #+164]
   \   00000788   0310A0E3           MOV      R1,#+3
   \   0000078C   002092E5           LDR      R2,[R2, #+0]
   \   00000790   0B00A0E1           MOV      R0,R11
   \   00000794   0FE0A0E1           MOV      LR,PC
   \   00000798   12FF2FE1           BX       R2
    308                                  ModbusRegBitInPtr = NULL;
    309                                  NoError = true; // Non-critical?
   \                     ??LoadConfigString_31:
   \   0000079C   0150A0E3           MOV      R5,#+1
    310                              }
    311                          }
    312                          break;
    313                      }
    314                  }
    315              }while (NoError && (ErrorLine != EOF) && (Key != C_PRO_END));
   \                     ??LoadConfigString_5:
   \   000007A0   0020A0E3           MOV      R2,#+0
   \   000007A4   0110A0E3           MOV      R1,#+1
   \   000007A8   04008DE2           ADD      R0,SP,#+4
   \   000007AC   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000007B0   000055E3           CMP      R5,#+0
   \   000007B4   1200000A           BEQ      ??LoadConfigString_38
   \   000007B8   00009DE5           LDR      R0,[SP, #+0]
   \   000007BC   010070E3           CMN      R0,#+1
   \   000007C0   FA0F5A13           CMPNE    R10,#+1000
   \   000007C4   19FEFF1A           BNE      ??LoadConfigString_3
    316              if (NoError) {
    317                  if (IdNumbers.empty()) {
   \   000007C8   C80084E2           ADD      R0,R4,#+200
   \   000007CC   041090E5           LDR      R1,[R0, #+4]
   \   000007D0   000090E5           LDR      R0,[R0, #+0]
   \   000007D4   000041E0           SUB      R0,R1,R0
   \   000007D8   2001B0E1           LSRS     R0,R0,#+2
   \   000007DC   0D00001A           BNE      ??LoadConfigString_39
    318                      GiveConfigWarning("No IDNumbers for Multiple definition", ConfigString.LineCount);
   \   000007E0   101089E2           ADD      R1,R9,#+16
   \   000007E4   04008DE2           ADD      R0,SP,#+4
   \   000007E8   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000007EC   1C1097E5           LDR      R1,[R7, #+28]
   \   000007F0   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000007F4   0020A0E3           MOV      R2,#+0
   \   000007F8   0110A0E3           MOV      R1,#+1
   \   000007FC   04008DE2           ADD      R0,SP,#+4
   \   00000800   ........           _BLF     ??_Tidy,??_Tidy??rA
    319                  } else {
    320                      if (IdNumbers.size() > 1) {
    321                          if (NumberOfCopies) {
    322                              GiveConfigWarning("Number of copies overrided", ConfigString.LineCount);
    323                          }
    324                          NumberOfCopies = IdNumbers.size();
    325                      }
    326                      for (int i = 0; i < NumberOfCopies; i++) {
    327                          unsigned RefIdNumber;
    328                          if (IdNumbers.size() > 1) {
    329                              RefIdNumber = IdNumbers[i];
    330                          } else {
    331                              RefIdNumber = IdNumbers[0] + i;
    332                          }
    333                          //set<unsigned>::iterator Iterator = IgnoreIdNumbers.find(RefIdNumber);
    334                          if (IgnoreIdNumbers.find(RefIdNumber) != IgnoreIdNumbers.end()) {
    335                              RefIdNumber = 0;
    336                          }
    337                          if (RefIdNumber) {
    338                              if (i) {
    339                                  for (unsigned j = 0; j < ModbusObectVector.size(); j++) {
    340                                      switch (ModbusObectVector[j]->Type) {
    341                                      default:
    342                                          break;
    343                                      case C_PRO_MODBUS_COIL_IN:
    344                                          {
    345                                              ModbusCoilIn *tmpPtr = new ModbusCoilIn(true);
    346                                              ModbusCoilIn *TPtr = (ModbusCoilIn *)ModbusObectVector[j];
    347                                              *tmpPtr = *TPtr;
    348                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * CoilStepsIn);
    349                                              tmpPtr->SetLineNumber(GetLineNumber());
    350                                          }
    351                                          break;
    352                                      case C_PRO_MODBUS_COIL_OUT:
    353                                          {
    354                                              ModbusCoilOut *tmpPtr = new ModbusCoilOut(true);
    355                                              ModbusCoilOut *TPtr = (ModbusCoilOut *)ModbusObectVector[j];
    356                                              *tmpPtr = *TPtr;
    357                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * CoilStepsOut);
    358                                              tmpPtr->SetLineNumber(GetLineNumber());
    359                                          }
    360                                          break;
    361                                      case C_PRO_MODBUS_COIL_HIST:
    362                                          break;
    363                                      case C_PRO_MODBUS_REG_IN:
    364                                          {
    365                                              ModbusRegisterIn *tmpPtr = new ModbusRegisterIn(true);
    366                                              ModbusRegisterIn *TPtr = (ModbusRegisterIn *)ModbusObectVector[j];
    367                                              *tmpPtr = *TPtr;
    368                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * RegisterStepsIn);
    369                                              tmpPtr->SetLineNumber(GetLineNumber());
    370                                          }
    371                                          break;
    372                                      case C_PRO_MODBUS_REG_OUT:
    373                                          {
    374                                              ModbusRegisterOut *tmpPtr = new ModbusRegisterOut(true);
    375                                              ModbusRegisterOut *TPtr = (ModbusRegisterOut *)ModbusObectVector[j];
    376                                              *tmpPtr = *TPtr;
    377                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * RegisterStepsOut);
    378                                              tmpPtr->SetLineNumber(GetLineNumber());
    379                                          }
    380                                          break;
    381                                      case C_PRO_MODBUS_REG_BIT_OUT:
    382                                          {
    383                                              ModbusRegBitOut *tmpPtr = new ModbusRegBitOut(true);
    384                                              ModbusRegBitOut *TPtr = (ModbusRegBitOut*)ModbusObectVector[j];
    385                                              *tmpPtr = *TPtr;
    386                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * RegisterStepsOut);
    387                                              tmpPtr->SetLineNumber(GetLineNumber());
    388                                          }
    389                                          break;
    390                                      case C_PRO_MODBUS_REG_HIST:
    391                                          break;
    392                                      case C_PRO_MBUS_WAGO473_RIN:
    393                                          {
    394                                              ModbusWago473RegisterIn *tmpPtr = new ModbusWago473RegisterIn(true);
    395                                              ModbusWago473RegisterIn *TPtr = (ModbusWago473RegisterIn *)ModbusObectVector[j];
    396                                              *tmpPtr = *TPtr;
    397                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * RegisterStepsIn);
    398                                              tmpPtr->SetLineNumber(GetLineNumber());
    399                                          }
    400                                          break;
    401                                      case C_PRO_MBUS_WAGO479_RIN:
    402                                          {
    403                                              ModbusWago479RegisterIn *tmpPtr = new ModbusWago479RegisterIn(true);
    404                                              ModbusWago479RegisterIn *TPtr = (ModbusWago479RegisterIn *)ModbusObectVector[j];
    405                                              *tmpPtr = *TPtr;
    406                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * RegisterStepsIn);
    407                                              tmpPtr->SetLineNumber(GetLineNumber());
    408                                          }
    409                                          break;
    410                                      case C_PRO_MBUS_WAGO482_RIN:
    411                                          {
    412                                              ModbusWago482RegisterIn *tmpPtr = new ModbusWago482RegisterIn(true);
    413                                              ModbusWago482RegisterIn *TPtr = (ModbusWago482RegisterIn *)ModbusObectVector[j];
    414                                              *tmpPtr = *TPtr;
    415                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * RegisterStepsIn);
    416                                              tmpPtr->SetLineNumber(GetLineNumber());
    417                                          }
    418                                          break;
    419                                      case C_PRO_MBUS_WAGO485_RIN:
    420                                          {
    421                                              ModbusWago485RegisterIn *tmpPtr = new ModbusWago485RegisterIn(true);
    422                                              ModbusWago485RegisterIn *TPtr = (ModbusWago485RegisterIn *)ModbusObectVector[j];
    423                                              *tmpPtr = *TPtr;
    424                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * RegisterStepsIn);
    425                                              tmpPtr->SetLineNumber(GetLineNumber());
    426                                          }
    427                                          break;
    428                                      case C_PRO_MBUS_WAGO487_RIN:
    429                                          {
    430                                              ModbusWago487RegisterIn *tmpPtr = new ModbusWago487RegisterIn(true);
    431                                              ModbusWago487RegisterIn *TPtr = (ModbusWago487RegisterIn *)ModbusObectVector[j];
    432                                              *tmpPtr = *TPtr;
    433                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * RegisterStepsIn);
    434                                              tmpPtr->SetLineNumber(GetLineNumber());
    435                                          }
    436                                          break;
    437                                      case C_PRO_MODBUS_REG_BIT_IN:
    438                                          {
    439                                              ModbusRegBitIn *tmpPtr = new ModbusRegBitIn(true);
    440                                              ModbusRegBitIn *TPtr = (ModbusRegBitIn *)ModbusObectVector[j];
    441                                              *tmpPtr = *TPtr;
    442                                              tmpPtr->UpdateFromMultiple(RefIdNumber, i * RegisterStepsIn);
    443                                              tmpPtr->SetLineNumber(GetLineNumber());
    444                                          }
    445                                          break;
    446                                      }
    447                                  }
    448                              } else {
    449                                  for (unsigned j = 0; j < ModbusObectVector.size(); j++) {
    450                                      // 0 increment as this is the first Modbus objects defined directly from config,
    451                                      // not a copied object
    452                                      ModbusObectVector[j]->UpdateFromMultiple(RefIdNumber, 0);
    453          
    454                                      ModbusObectVector[j]->SetLineNumber(GetLineNumber());
    455                                  }
    456                              }
    457                          } // End if RefIdNumber
    458                      }
    459                  } // If ObecjtIDVector is Empty
    460          
    461              }
    462              return (NoError);
   \                     ??LoadConfigString_38:
   \   00000804   0500A0E1           MOV      R0,R5
   \   00000808   E2DF8DE2           ADD      SP,SP,#+904
   \   0000080C   80DE8DE2           ADD      SP,SP,#+2048
   \   00000810   F04FBDE8           POP      {R4-R11,LR}
   \   00000814   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_39:
   \   00000818   C80084E2           ADD      R0,R4,#+200
   \   0000081C   000090E5           LDR      R0,[R0, #+0]
   \   00000820   000041E0           SUB      R0,R1,R0
   \   00000824   2001A0E1           LSR      R0,R0,#+2
   \   00000828   020050E3           CMP      R0,#+2
   \   0000082C   1100003A           BCC      ??LoadConfigString_40
   \   00000830   A80094E5           LDR      R0,[R4, #+168]
   \   00000834   000050E3           CMP      R0,#+0
   \   00000838   0800000A           BEQ      ??LoadConfigString_41
   \   0000083C   381089E2           ADD      R1,R9,#+56
   \   00000840   04008DE2           ADD      R0,SP,#+4
   \   00000844   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000848   1C1097E5           LDR      R1,[R7, #+28]
   \   0000084C   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000850   0020A0E3           MOV      R2,#+0
   \   00000854   0110A0E3           MOV      R1,#+1
   \   00000858   04008DE2           ADD      R0,SP,#+4
   \   0000085C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??LoadConfigString_41:
   \   00000860   C80084E2           ADD      R0,R4,#+200
   \   00000864   041090E5           LDR      R1,[R0, #+4]
   \   00000868   000090E5           LDR      R0,[R0, #+0]
   \   0000086C   000041E0           SUB      R0,R1,R0
   \   00000870   2001A0E1           LSR      R0,R0,#+2
   \   00000874   A80084E5           STR      R0,[R4, #+168]
   \                     ??LoadConfigString_40:
   \   00000878   0070A0E3           MOV      R7,#+0
   \   0000087C   160000EA           B        ??LoadConfigString_42
   \                     ??LoadConfigString_43:
   \   00000880   BC0094E5           LDR      R0,[R4, #+188]
   \   00000884   0020A0E3           MOV      R2,#+0
   \   00000888   093190E7           LDR      R3,[R0, +R9, LSL #+2]
   \   0000088C   0810A0E1           MOV      R1,R8
   \   00000890   0300A0E1           MOV      R0,R3
   \   00000894   A43093E5           LDR      R3,[R3, #+164]
   \   00000898   883093E5           LDR      R3,[R3, #+136]
   \   0000089C   0FE0A0E1           MOV      LR,PC
   \   000008A0   13FF2FE1           BX       R3
   \   000008A4   0400A0E1           MOV      R0,R4
   \   000008A8   ........           _BLF     ??GetLineNumber,??GetLineNumber??rA
   \   000008AC   0010A0E1           MOV      R1,R0
   \   000008B0   BC0094E5           LDR      R0,[R4, #+188]
   \   000008B4   090190E7           LDR      R0,[R0, +R9, LSL #+2]
   \   000008B8   019089E2           ADD      R9,R9,#+1
   \   000008BC   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
   \                     ??LoadConfigString_44:
   \   000008C0   BC0084E2           ADD      R0,R4,#+188
   \   000008C4   041090E5           LDR      R1,[R0, #+4]
   \   000008C8   000090E5           LDR      R0,[R0, #+0]
   \   000008CC   000041E0           SUB      R0,R1,R0
   \   000008D0   200159E1           CMP      R9,R0, LSR #+2
   \   000008D4   E9FFFF3A           BCC      ??LoadConfigString_43
   \                     ??LoadConfigString_45:
   \   000008D8   017087E2           ADD      R7,R7,#+1
   \                     ??LoadConfigString_42:
   \   000008DC   A80094E5           LDR      R0,[R4, #+168]
   \   000008E0   000057E1           CMP      R7,R0
   \   000008E4   C6FFFFAA           BGE      ??LoadConfigString_38
   \   000008E8   C81094E5           LDR      R1,[R4, #+200]
   \   000008EC   C80084E2           ADD      R0,R4,#+200
   \   000008F0   042090E5           LDR      R2,[R0, #+4]
   \   000008F4   D49084E2           ADD      R9,R4,#+212
   \   000008F8   010042E0           SUB      R0,R2,R1
   \   000008FC   2001A0E1           LSR      R0,R0,#+2
   \   00000900   020050E3           CMP      R0,#+2
   \   00000904   07819127           LDRCS    R8,[R1, +R7, LSL #+2]
   \   00000908   00009135           LDRCC    R0,[R1, #+0]
   \   0000090C   00808730           ADDCC    R8,R7,R0
   \   00000910   0810A0E1           MOV      R1,R8
   \   00000914   D40084E2           ADD      R0,R4,#+212
   \   00000918   ........           _BLF     ??find,??find??rA
   \   0000091C   090050E1           CMP      R0,R9
   \   00000920   ECFFFF1A           BNE      ??LoadConfigString_45
   \   00000924   000058E3           CMP      R8,#+0
   \   00000928   EAFFFF0A           BEQ      ??LoadConfigString_45
   \   0000092C   000057E3           CMP      R7,#+0
   \   00000930   0090A0E3           MOV      R9,#+0
   \   00000934   E1FFFF0A           BEQ      ??LoadConfigString_44
   \   00000938   1C0000EA           B        ??LoadConfigString_46
   \                     ??LoadConfigString_47:
   \   0000093C   0100A0E3           MOV      R0,#+1
   \   00000940   ........           _BLF     `??new ModbusRegBitIn`,`??new ModbusRegBitIn??rA`
   \   00000944   00A0A0E1           MOV      R10,R0
   \   00000948   BC0094E5           LDR      R0,[R4, #+188]
   \   0000094C   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000950   54008DE2           ADD      R0,SP,#+84
   \   00000954   400E80E2           ADD      R0,R0,#+1024
   \   00000958   ........           _BLF     ??ModbusRegBitIn,??ModbusRegBitIn??rA
   \   0000095C   0010A0E1           MOV      R1,R0
   \   00000960   0A00A0E1           MOV      R0,R10
   \   00000964   ........           _BLF     `??operator=_6`,`??operator=??rA_1`
   \   00000968   0210A0E3           MOV      R1,#+2
   \   0000096C   54008DE2           ADD      R0,SP,#+84
   \   00000970   400E80E2           ADD      R0,R0,#+1024
   \   00000974   ........           _BLF     `?~ModbusRegBitIn`,`?~ModbusRegBitIn??rA`
   \   00000978   A4309AE5           LDR      R3,[R10, #+164]
   \   0000097C   AC0094E5           LDR      R0,[R4, #+172]
   \   00000980   883093E5           LDR      R3,[R3, #+136]
   \   00000984   900702E0           MUL      R2,R0,R7
   \   00000988   0810A0E1           MOV      R1,R8
   \   0000098C   0A00A0E1           MOV      R0,R10
   \   00000990   0FE0A0E1           MOV      LR,PC
   \   00000994   13FF2FE1           BX       R3
   \                     ??LoadConfigString_48:
   \   00000998   0400A0E1           MOV      R0,R4
   \   0000099C   ........           _BLF     ??GetLineNumber,??GetLineNumber??rA
   \   000009A0   0010A0E1           MOV      R1,R0
   \   000009A4   0A00A0E1           MOV      R0,R10
   \   000009A8   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
   \                     ??LoadConfigString_49:
   \   000009AC   019089E2           ADD      R9,R9,#+1
   \                     ??LoadConfigString_46:
   \   000009B0   BC0084E2           ADD      R0,R4,#+188
   \   000009B4   041090E5           LDR      R1,[R0, #+4]
   \   000009B8   000090E5           LDR      R0,[R0, #+0]
   \   000009BC   000041E0           SUB      R0,R1,R0
   \   000009C0   200159E1           CMP      R9,R0, LSR #+2
   \   000009C4   C3FFFF2A           BCS      ??LoadConfigString_45
   \   000009C8   BC0094E5           LDR      R0,[R4, #+188]
   \   000009CC   090190E7           LDR      R0,[R0, +R9, LSL #+2]
   \   000009D0   A00090E5           LDR      R0,[R0, #+160]
   \   000009D4   F30040E2           SUB      R0,R0,#+243
   \   000009D8   A00E40E2           SUB      R0,R0,#+2560
   \   000009DC   330050E3           CMP      R0,#+51
   \   000009E0   F1FFFF8A           BHI      ??LoadConfigString_49
   \   000009E4   021F8FE2           ADR      R1,??LoadConfigString_1
   \   000009E8   8000A0E1           MOV      R0,R0, LSL #+1
   \   000009EC   F01091E1           LDRSH    R1,[R1, R0]
   \   000009F0   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   000009F4   60004700EDFF       DC16     +96,+71,+65517,+65517
   \              EDFF        
   \   000009FC   31001900EDFF       DC16     +49,+25,+65517,+65489
   \              D1FF        
   \   00000A04   7B00EDFFEDFF       DC16     +123,+65517,+65517,+65517
   \              EDFF        
   \   00000A0C   EDFFEDFFEDFF       DC16     +65517,+65517,+65517,+65517
   \              EDFF        
   \   00000A14   EDFFEDFFEDFF       DC16     +65517,+65517,+65517,+65517
   \              EDFF        
   \   00000A1C   EDFFEDFFEDFF       DC16     +65517,+65517,+65517,+65517
   \              EDFF        
   \   00000A24   EDFFEDFFEDFF       DC16     +65517,+65517,+65517,+65517
   \              EDFF        
   \   00000A2C   EDFFEDFFEDFF       DC16     +65517,+65517,+65517,+65517
   \              EDFF        
   \   00000A34   EDFFEDFFEDFF       DC16     +65517,+65517,+65517,+65517
   \              EDFF        
   \   00000A3C   EDFFEDFFEDFF       DC16     +65517,+65517,+65517,+65517
   \              EDFF        
   \   00000A44   EDFFEDFFEDFF       DC16     +65517,+65517,+65517,+65517
   \              EDFF        
   \   00000A4C   EDFFEDFFEDFF       DC16     +65517,+65517,+65517,+145
   \              9100        
   \   00000A54   9900A900B100       DC16     +153,+169,+177,+185
   \              B900        
   \                     ??LoadConfigString_50:
   \   00000A5C   0100A0E3           MOV      R0,#+1
   \   00000A60   ........           _BLF     `??new ModbusCoilIn`,`??new ModbusCoilIn??rA`
   \   00000A64   00A0A0E1           MOV      R10,R0
   \   00000A68   BC0094E5           LDR      R0,[R4, #+188]
   \   00000A6C   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000A70   670F8DE2           ADD      R0,SP,#+412
   \   00000A74   800E80E2           ADD      R0,R0,#+2048
   \   00000A78   ........           _BLF     ??ModbusCoilIn,??ModbusCoilIn??rA
   \   00000A7C   0010A0E1           MOV      R1,R0
   \   00000A80   0A00A0E1           MOV      R0,R10
   \   00000A84   ........           _BLF     `??operator=_7`,`??operator=??rA_2`
   \   00000A88   0210A0E3           MOV      R1,#+2
   \   00000A8C   670F8DE2           ADD      R0,SP,#+412
   \   00000A90   800E80E2           ADD      R0,R0,#+2048
   \   00000A94   ........           _BLF     `?~ModbusCoilIn`,`?~ModbusCoilIn??rA`
   \   00000A98   A4309AE5           LDR      R3,[R10, #+164]
   \   00000A9C   B40094E5           LDR      R0,[R4, #+180]
   \   00000AA0   883093E5           LDR      R3,[R3, #+136]
   \   00000AA4   900702E0           MUL      R2,R0,R7
   \   00000AA8   0810A0E1           MOV      R1,R8
   \   00000AAC   0A00A0E1           MOV      R0,R10
   \   00000AB0   0FE0A0E1           MOV      LR,PC
   \   00000AB4   13FF2FE1           BX       R3
   \   00000AB8   B6FFFFEA           B        ??LoadConfigString_48
   \                     ??LoadConfigString_51:
   \   00000ABC   0100A0E3           MOV      R0,#+1
   \   00000AC0   ........           _BLF     `??new ModbusCoilOut`,`??new ModbusCoilOut??rA`
   \   00000AC4   00A0A0E1           MOV      R10,R0
   \   00000AC8   BC0094E5           LDR      R0,[R4, #+188]
   \   00000ACC   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000AD0   990F8DE2           ADD      R0,SP,#+612
   \   00000AD4   ........           _BLF     ??ModbusCoilOut,??ModbusCoilOut??rA
   \   00000AD8   0010A0E1           MOV      R1,R0
   \   00000ADC   0A00A0E1           MOV      R0,R10
   \   00000AE0   ........           _BLF     `??operator=_8`,`??operator=??rA_3`
   \   00000AE4   0210A0E3           MOV      R1,#+2
   \   00000AE8   990F8DE2           ADD      R0,SP,#+612
   \   00000AEC   ........           _BLF     `?~ModbusCoilOut`,`?~ModbusCoilOut??rA`
   \   00000AF0   A4309AE5           LDR      R3,[R10, #+164]
   \   00000AF4   B80094E5           LDR      R0,[R4, #+184]
   \   00000AF8   883093E5           LDR      R3,[R3, #+136]
   \   00000AFC   900702E0           MUL      R2,R0,R7
   \   00000B00   0810A0E1           MOV      R1,R8
   \   00000B04   0A00A0E1           MOV      R0,R10
   \   00000B08   0FE0A0E1           MOV      LR,PC
   \   00000B0C   13FF2FE1           BX       R3
   \   00000B10   A0FFFFEA           B        ??LoadConfigString_48
   \                     ??LoadConfigString_52:
   \   00000B14   0120A0E3           MOV      R2,#+1
   \   00000B18   F410A0E3           MOV      R1,#+244
   \   00000B1C   A01E81E3           ORR      R1,R1,#0xA00
   \   00000B20   0100A0E3           MOV      R0,#+1
   \   00000B24   ........           _BLF     `??new ModbusRegisterIn`,`??new ModbusRegisterIn??rA`
   \   00000B28   00A0A0E1           MOV      R10,R0
   \   00000B2C   BC0094E5           LDR      R0,[R4, #+188]
   \   00000B30   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000B34   640E8DE2           ADD      R0,SP,#+1600
   \   00000B38   ........           _BLF     ??ModbusRegisterIn,??ModbusRegisterIn??rA
   \   00000B3C   0010A0E1           MOV      R1,R0
   \   00000B40   0A00A0E1           MOV      R0,R10
   \   00000B44   ........           _BLF     `??operator=_5`,`??operator=??rA`
   \   00000B48   0210A0E3           MOV      R1,#+2
   \   00000B4C   640E8DE2           ADD      R0,SP,#+1600
   \   00000B50   ........           _BLF     `?~ModbusRegisterIn`,`?~ModbusRegisterIn??rA`
   \                     ??LoadConfigString_53:
   \   00000B54   A4309AE5           LDR      R3,[R10, #+164]
   \   00000B58   AC0094E5           LDR      R0,[R4, #+172]
   \   00000B5C   883093E5           LDR      R3,[R3, #+136]
   \   00000B60   900702E0           MUL      R2,R0,R7
   \   00000B64   0810A0E1           MOV      R1,R8
   \   00000B68   0A00A0E1           MOV      R0,R10
   \   00000B6C   0FE0A0E1           MOV      LR,PC
   \   00000B70   13FF2FE1           BX       R3
   \   00000B74   87FFFFEA           B        ??LoadConfigString_48
   \                     ??LoadConfigString_54:
   \   00000B78   0120A0E3           MOV      R2,#+1
   \   00000B7C   F310A0E3           MOV      R1,#+243
   \   00000B80   A01E81E3           ORR      R1,R1,#0xA00
   \   00000B84   0100A0E3           MOV      R0,#+1
   \   00000B88   ........           _BLF     `??new ModbusRegisterOut`,`??new ModbusRegisterOut??rA`
   \   00000B8C   00A0A0E1           MOV      R10,R0
   \   00000B90   BC0094E5           LDR      R0,[R4, #+188]
   \   00000B94   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000B98   7F0E8DE2           ADD      R0,SP,#+2032
   \   00000B9C   ........           _BLF     ??ModbusRegister,??ModbusRegister??rA
   \   00000BA0   58119FE5           LDR      R1,??LoadConfigString_2+0x4  ;; ??__vtbl_1
   \   00000BA4   0A00A0E1           MOV      R0,R10
   \   00000BA8   94188DE5           STR      R1,[SP, #+2196]
   \   00000BAC   7F1E8DE2           ADD      R1,SP,#+2032
   \   00000BB0   ........           _BLF     `??operator=_9`,`??operator=??rA_4`
   \   00000BB4   0210A0E3           MOV      R1,#+2
   \   00000BB8   7F0E8DE2           ADD      R0,SP,#+2032
   \   00000BBC   ........           _BLF     `?~ModbusRegisterOut`,`?~ModbusRegisterOut??rA`
   \   00000BC0   A4309AE5           LDR      R3,[R10, #+164]
   \   00000BC4   B00094E5           LDR      R0,[R4, #+176]
   \   00000BC8   883093E5           LDR      R3,[R3, #+136]
   \   00000BCC   900702E0           MUL      R2,R0,R7
   \   00000BD0   0810A0E1           MOV      R1,R8
   \   00000BD4   0A00A0E1           MOV      R0,R10
   \   00000BD8   0FE0A0E1           MOV      LR,PC
   \   00000BDC   13FF2FE1           BX       R3
   \   00000BE0   6CFFFFEA           B        ??LoadConfigString_48
   \                     ??LoadConfigString_55:
   \   00000BE4   0100A0E3           MOV      R0,#+1
   \   00000BE8   ........           _BLF     `??new ModbusRegBitOut`,`??new ModbusRegBitOut??rA`
   \   00000BEC   00A0A0E1           MOV      R10,R0
   \   00000BF0   BC0094E5           LDR      R0,[R4, #+188]
   \   00000BF4   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000BF8   44008DE2           ADD      R0,SP,#+68
   \   00000BFC   ........           _BLF     ??ModbusRegBitOut,??ModbusRegBitOut??rA
   \   00000C00   0010A0E1           MOV      R1,R0
   \   00000C04   0A00A0E1           MOV      R0,R10
   \   00000C08   ........           _BLF     `??operator=_10`,`??operator=??rA_5`
   \   00000C0C   0210A0E3           MOV      R1,#+2
   \   00000C10   44008DE2           ADD      R0,SP,#+68
   \   00000C14   ........           _BLF     `?~ModbusRegBitOut`,`?~ModbusRegBitOut??rA`
   \   00000C18   A4309AE5           LDR      R3,[R10, #+164]
   \   00000C1C   B00094E5           LDR      R0,[R4, #+176]
   \   00000C20   883093E5           LDR      R3,[R3, #+136]
   \   00000C24   900702E0           MUL      R2,R0,R7
   \   00000C28   0810A0E1           MOV      R1,R8
   \   00000C2C   0A00A0E1           MOV      R0,R10
   \   00000C30   0FE0A0E1           MOV      LR,PC
   \   00000C34   13FF2FE1           BX       R3
   \   00000C38   56FFFFEA           B        ??LoadConfigString_48
   \                     ??LoadConfigString_56:
   \   00000C3C   0100A0E3           MOV      R0,#+1
   \   00000C40   ........           _BLF     `??new ModbusWago473RegisterIn`,`??new ModbusWago473RegisterIn??rA`
   \   00000C44   00A0A0E1           MOV      R10,R0
   \   00000C48   BC0094E5           LDR      R0,[R4, #+188]
   \   00000C4C   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000C50   0A00A0E1           MOV      R0,R10
   \   00000C54   ........           _BLF     `??operator=`,`??operator=??rA_6`
   \   00000C58   BDFFFFEA           B        ??LoadConfigString_53
   \                     ??LoadConfigString_57:
   \   00000C5C   0100A0E3           MOV      R0,#+1
   \   00000C60   ........           _BLF     `??new ModbusWago479RegisterIn`,`??new ModbusWago479RegisterIn??rA`
   \   00000C64   00A0A0E1           MOV      R10,R0
   \   00000C68   BC0094E5           LDR      R0,[R4, #+188]
   \   00000C6C   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000C70   0A00A0E1           MOV      R0,R10
   \   00000C74   ........           _BLF     `??operator=_1`,`??operator=??rA_7`
   \                     ??LoadConfigString_58:
   \   00000C78   A4309AE5           LDR      R3,[R10, #+164]
   \   00000C7C   AC0094E5           LDR      R0,[R4, #+172]
   \   00000C80   883093E5           LDR      R3,[R3, #+136]
   \   00000C84   900702E0           MUL      R2,R0,R7
   \   00000C88   0810A0E1           MOV      R1,R8
   \   00000C8C   0A00A0E1           MOV      R0,R10
   \   00000C90   0FE0A0E1           MOV      LR,PC
   \   00000C94   13FF2FE1           BX       R3
   \   00000C98   3EFFFFEA           B        ??LoadConfigString_48
   \                     ??LoadConfigString_59:
   \   00000C9C   0100A0E3           MOV      R0,#+1
   \   00000CA0   ........           _BLF     `??new ModbusWago482RegisterIn`,`??new ModbusWago482RegisterIn??rA`
   \   00000CA4   00A0A0E1           MOV      R10,R0
   \   00000CA8   BC0094E5           LDR      R0,[R4, #+188]
   \   00000CAC   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000CB0   0A00A0E1           MOV      R0,R10
   \   00000CB4   ........           _BLF     `??operator=_2`,`??operator=??rA_8`
   \   00000CB8   A5FFFFEA           B        ??LoadConfigString_53
   \                     ??LoadConfigString_60:
   \   00000CBC   0100A0E3           MOV      R0,#+1
   \   00000CC0   ........           _BLF     `??new ModbusWago485RegisterIn`,`??new ModbusWago485RegisterIn??rA`
   \   00000CC4   00A0A0E1           MOV      R10,R0
   \   00000CC8   BC0094E5           LDR      R0,[R4, #+188]
   \   00000CCC   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000CD0   0A00A0E1           MOV      R0,R10
   \   00000CD4   ........           _BLF     `??operator=_3`,`??operator=??rA_9`
   \   00000CD8   E6FFFFEA           B        ??LoadConfigString_58
   \                     ??LoadConfigString_61:
   \   00000CDC   0100A0E3           MOV      R0,#+1
   \   00000CE0   ........           _BLF     `??new ModbusWago487RegisterIn`,`??new ModbusWago487RegisterIn??rA`
   \   00000CE4   00A0A0E1           MOV      R10,R0
   \   00000CE8   BC0094E5           LDR      R0,[R4, #+188]
   \   00000CEC   091190E7           LDR      R1,[R0, +R9, LSL #+2]
   \   00000CF0   0A00A0E1           MOV      R0,R10
   \   00000CF4   ........           _BLF     `??operator=_4`,`??operator=??rA_10`
   \   00000CF8   95FFFFEA           B        ??LoadConfigString_53
   \                     ??LoadConfigString_2:
   \   00000CFC   ........           DC32     `?<Constant "Multiple Modbus">`
   \   00000D00   ........           DC32     ??__vtbl_1
    463          }
    464          
    465          

   \                                 In segment CODE, align 4, keep-with-next
    466          set<PRogramObjectBase *> ModbusMultiple::GetModbusObjectSet(void) {
   \                     ??GetModbusObjectSet:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    467              return ModbusSet;
   \   00000004   ........           LDR      R5,??DataTable6  ;; ??ModbusSet
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   1460D5E5           LDRB     R6,[R5, #+20]
   \   00000010   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   1460C4E5           STRB     R6,[R4, #+20]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     ??_Copy_2,??_Copy??rA_9
   \   00000024                      REQUIRE ?Subroutine7
   \   00000024                      ;; // Fall through to label ?Subroutine7
    468          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0
   \   00000008   307825305809       DC8 "0x%0X      "
   \              00          
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Multiple Modbus">`:
   \   00000000   4D756C746970       DC8 "Multiple Modbus"
   \              6C65204D6F64
   \              62757300    
   \   00000010   4E6F2049444E       DC8 "No IDNumbers for Multiple definition"
   \              756D62657273
   \              20666F72204D
   \              756C7469706C
   \              652064656669
   \              6E6974696F6E
   \              00          
   \   00000035   000000             DC8 0, 0, 0
   \   00000038   4E756D626572       DC8 "Number of copies overrided"
   \              206F6620636F
   \              70696573206F
   \              766572726964
   \              656400      
   \   00000053   00                 DC8 0

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
   \   00000004   ........           LDR      R4,??DataTable2  ;; ??ModbusSet
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     ??_Clear,??_Clear??rA
   \   0000001C   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000020   1400C4E5           STRB     R0,[R4, #+20]
   \   00000024   08009FE5           LDR      R0,??__sti__routine_1  ;; ?_0
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   1140BDE8           POP      {R0,R4,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000034   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ModbusMultiple &ModbusMultiple::new ModbusMultiple()
   \                     `??new ModbusMultiple`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   EC00A0E3           MOV      R0,#+236
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      `??new ModbusMultiple_1`
   \   00000014   ........           BL       ??ModbusMultiple
   \                     `??new ModbusMultiple_1`:
   \   00000018   0040BDE8           POP      {LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??ModbusSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     ??ModbusSet
    469          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AnsiString::AnsiString(AnsiString const &)
                                       12
     ModbusCoil::ModbusCoil(ModbusCoil const &)
                                       12
     ModbusCoilIn::ModbusCoilIn(ModbusCoilIn const &)
                                       12
     ModbusCoilOut::ModbusCoilOut(ModbusCoilOut const &)
                                       20
     ModbusMultiple::GetModbusObjectSet()
                                       16
     ModbusMultiple::LoadConfigString(TSNConfigString &)
                                     2988
     ModbusMultiple::MakeConfigString(int)
                                      924
     ModbusMultiple::ModbusMultiple()
                                       24
     ModbusMultiple::new ModbusMultiple()
                                        4
     ModbusMultiple::~ModbusMultiple()
                                       16
     ModbusObject::ModbusObject(ModbusObject const &)
                                       12
     ModbusRegBitIn::ModbusRegBitIn(ModbusRegBitIn const &)
                                       20
     ModbusRegBitOut::ModbusRegBitOut(ModbusRegBitOut const &)
                                       20
     ModbusRegister::ModbusRegister(ModbusRegister const &)
                                       12
     ModbusRegisterIn::ModbusRegisterIn(ModbusRegisterIn const &)
                                       12
     ModbusWago473RegisterIn::operator=(ModbusWago473RegisterIn const &)
                                      440
     ModbusWago479RegisterIn::operator=(ModbusWago479RegisterIn const &)
                                      440
     ModbusWago482RegisterIn::operator=(ModbusWago482RegisterIn const &)
                                      440
     ModbusWago485RegisterIn::operator=(ModbusWago485RegisterIn const &)
                                      440
     ModbusWago487RegisterIn::operator=(ModbusWago487RegisterIn const &)
                                      440
     PRogramObject::PRogramObject(PRogramObject const &)
                                       24
     PRogramObjectBase::PRogramObjectBase(PRogramObjectBase const &)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>> const &)
                                       12
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>> const &)
                                       12
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>> const &)
                                       12
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>> const &)
                                       12
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
                                       12
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                       32
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Insert(bool, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, unsigned int)
                                       24
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Lbound(unsigned int) const
                                        0
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::find(unsigned int)
                                       12
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::insert(unsigned int)
                                       40
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        4
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Assign(_Vector_impl<AnalogInput *, allocator<AnalogInput *>> const &)
                                       16
     _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Insert(ModbusObject **, ModbusObject * const &)
                                       16
     _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Make_room(ModbusObject **, unsigned int)
                                       32
     _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Push_back0(ModbusObject *)
                                        8
     _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Tidy0()
                                        4
     _Vector_impl<int, allocator<int>>::_Assign(_Vector_impl<int, allocator<int>> const &)
                                       16
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Assign(_Vector_impl<unsigned int, allocator<unsigned int>> const &)
                                       16
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                       16
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                       32
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                        8
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Buy(unsigned int)
                                       12
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  12
     operator+(string const &, string const &)
                                       48
     set<AlarmBasic *>::set(set<AlarmBasic *> const &)
                                       16
     set<PRogramObject *>::set(set<PRogramObject *> const &)
                                       16
     set<PRogramObjectBase *>::~set()
                                        8
     set<unsigned int>::set(set<unsigned int> const &)
                                       16


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _Tree_algobase<allocator<void>>::_Max(_Tree_algobase<allocator<void>>::_Genptr)
                                      28
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                      88
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::insert(unsigned int)
                                     200
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::find(unsigned int)
                                      48
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>> const &)
                                     112
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>> const &)
                                     112
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>> const &)
                                     112
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>> const &)
                                     112
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>> const &)
                                     112
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Copy(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Copy(_Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Copy(_Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr, _Tree<_Tset_traits<PRogramObject *, less<PRogramObject *>, allocator<PRogramObject *>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Copy(_Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr, _Tree<_Tset_traits<AnalogInput *, less<AnalogInput *>, allocator<AnalogInput *>, false>>::_Nodeptr)
                                     148
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Erase(_Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Insert(bool, _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Nodeptr, unsigned int)
                                      96
     _Tree<_Tset_traits<unsigned int, less<unsigned int>, allocator<unsigned int>, false>>::_Lbound(unsigned int) const
                                      40
     set<PRogramObject *>::set(set<PRogramObject *> const &)
                                      48
     set<unsigned int>::set(set<unsigned int> const &)
                                      48
     set<PRogramObjectBase *>::~set()
                                      32
     set<AlarmBasic *>::set(set<AlarmBasic *> const &)
                                      48
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_value<allocator<void>>::_Buy(unsigned int)
                                      64
     _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Tidy0()
                                      36
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Tidy0()
                                      36
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Assign(_Vector_impl<AnalogInput *, allocator<AnalogInput *>> const &)
                                     212
     _Vector_impl<int, allocator<int>>::_Assign(_Vector_impl<int, allocator<int>> const &)
                                     212
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Assign(_Vector_impl<unsigned int, allocator<unsigned int>> const &)
                                     200
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Insert(unsigned int *, unsigned int const &)
                                      72
     _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Insert(ModbusObject **, ModbusObject * const &)
                                      72
     _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Make_room(ModbusObject **, unsigned int)
                                     232
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Make_room(unsigned int *, unsigned int)
                                     232
     _Vector_impl<unsigned int, allocator<unsigned int>>::_Push_back0(unsigned int)
                                      72
     _Vector_impl<ModbusObject *, allocator<ModbusObject *>>::_Push_back0(ModbusObject *)
                                      72
     operator+(string const &, string const &)
                                     156
     AnsiString::AnsiString(AnsiString const &)
                                      64
     PRogramObjectBase::PRogramObjectBase(PRogramObjectBase const &)
                                     160
     PRogramObject::PRogramObject(PRogramObject const &)
                                     208
     ModbusObject::ModbusObject(ModbusObject const &)
                                     112
     ModbusCoil::ModbusCoil(ModbusCoil const &)
                                      56
     ModbusCoilIn::ModbusCoilIn(ModbusCoilIn const &)
                                      96
     ModbusCoilOut::ModbusCoilOut(ModbusCoilOut const &)
                                     200
     ModbusRegister::ModbusRegister(ModbusRegister const &)
                                     152
     ModbusRegisterIn::ModbusRegisterIn(ModbusRegisterIn const &)
                                      48
     ModbusRegBitIn::ModbusRegBitIn(ModbusRegBitIn const &)
                                     132
     ModbusRegBitOut::ModbusRegBitOut(ModbusRegBitOut const &)
                                     224
     ModbusWago473RegisterIn::operator=(ModbusWago473RegisterIn const &)
                                      60
     ModbusWago479RegisterIn::operator=(ModbusWago479RegisterIn const &)
                                      60
     ModbusWago482RegisterIn::operator=(ModbusWago482RegisterIn const &)
                                      60
     ModbusWago485RegisterIn::operator=(ModbusWago485RegisterIn const &)
                                      60
     ModbusWago487RegisterIn::operator=(ModbusWago487RegisterIn const &)
                                      60
     ModbusMultiple::ModbusSet        24
     ModbusMultiple::ModbusMultiple()
                                     160
     ModbusMultiple::~ModbusMultiple()
                                     124
     ?Subroutine7                      8
     ModbusMultiple::MakeConfigString(int)
                                    1620
     ModbusMultiple::LoadConfigString(TSNConfigString &)
                                    3332
     ModbusMultiple::GetModbusObjectSet()
                                      36
     ?<Constant "0x%0x">              16
     ?<Constant "Multiple Modbus">    84
     __sti__routine()                 56
     ModbusMultiple::new ModbusMultiple()
                                      32
     ??DataTable2                      4
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable6                      4
      Others                        1424

 
 13 096 bytes in segment CODE
    204 bytes in segment DATA_C
     28 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     12 bytes in segment INITTAB
 
 5 392 bytes of CODE  memory (+ 7 720 bytes shared)
   204 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: none
