##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Dec/2022  11:03:49 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\AILNGFloat.cpp                  #
#    Command line    =  D:\S2Prog\Shared\Src\AILNGFloat.cpp --fpu None -D    #
#                       OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D      #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z2 --no_cse --no_unroll    #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#    List file       =  D:\S2Prog\TXU\Debug\List\AILNGFloat.lst              #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\AILNGFloat.r79               #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\AILNGFloat.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs size_t char_traits::length(char const *)
   \                     ??length:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     strlen,??strlen??rA
   \   00000010   1040BDE8           POP      {R4,LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs char_allocator::char_allocator(char_allocator const &)
   \                     ??char_allocator:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _String_val::_String_val(char_allocator)
   \                     ??_String_val:
   \   00000000   12402DE9           PUSH     {R1,R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0D10B0E1           MOVS     R1,SP
   \   0000000C   0400B0E1           MOVS     R0,R4
   \   00000010   ........           _BLF     ??char_allocator,??char_allocator??rA
   \   00000014   0400B0E1           MOVS     R0,R4
   \   00000018   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   0000001C   1040BDE8           POP      {R4,LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_String_val,??_String_val??rA
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400B0E1           MOVS     R0,R4
   \   00000024   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000028   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000002C   003090E5           LDR      R3,[R0, #+0]
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0510B0E1           MOVS     R1,R5
   \   00000038   0400B0E1           MOVS     R0,R4
   \   0000003C   ........           _BLF     ??assign_1,??assign??rA
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   3040BDE8           POP      {R4,R5,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000004C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::~string()
   \                     `?~string`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator=(string const &)
   \                     `??operator=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??assign,??assign??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(string const &)
   \                     `??operator+=`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append,??append??rA
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::operator+=(char const *)
   \                     `??operator+=_1`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0510B0E1           MOVS     R1,R5
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   ........           _BLF     ??append_1,??append??rA_1
   \   00000018   3040BDE8           POP      {R4,R5,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(string const &)
   \                     ??append:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??append_4    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_2,??append??rA_2
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??append_4:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::append(char const *)
   \                     ??append_1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0500B0E1           MOVS     R0,R5
   \   00000010   ........           _BLF     ??length,??length??rA
   \   00000014   0020B0E1           MOVS     R2,R0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??append_3,??append??rA_3
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string &string::assign(string const &)
   \                     ??assign:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   18009FE5           LDR      R0,??assign_2    ;; ??npos
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0510B0E1           MOVS     R1,R5
   \   0000001C   0400B0E1           MOVS     R0,R4
   \   00000020   ........           _BLF     ??assign_1,??assign??rA
   \   00000024   3040BDE8           POP      {R4,R5,LR}
   \   00000028   1EFF2FE1           BX       LR               ;; return
   \                     ??assign_2:
   \   0000002C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0510B0E1           MOVS     R1,R5
   \   00000018   0D00B0E1           MOVS     R0,SP
   \   0000001C   ........           _BLF     ??string,??string??rA
   \   00000020   0610B0E1           MOVS     R1,R6
   \   00000024   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000028   0010B0E1           MOVS     R1,R0
   \   0000002C   0400B0E1           MOVS     R0,R4
   \   00000030   ........           _BLF     ??string,??string??rA
   \   00000034   0D00B0E1           MOVS     R0,SP
   \   00000038   ........           _BLF     `?~string`,`?~string??rA`
   \   0000003C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::AnsiString(AnsiString const &)
   \                     ??AnsiString:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??string,??string??rA
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString::~AnsiString()
   \                     `?~AnsiString`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     `?~string`,`?~string??rA`
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnsiString &AnsiString::operator=(AnsiString const &)
   \                     `??operator=_1`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     `??operator=`,`??operator=??rA`
   \   00000010   0400B0E1           MOVS     R0,R4
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_ST
   \                     TDU_FONT_ST:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_PW
   \                     TDU_FONT_PW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HW
   \                     TDU_FONT_HW:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BU
   \                     TDU_FONT_BU:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_HEADING
   \                     TDU_FONT_HEADING:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static GUI_FONT const __data TDU_FONT_BIG
   \                     TDU_FONT_BIG:
   \   00000000                      DS8 36
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          AILNGFloat::AILNGFloat(void)
   \                     ??AILNGFloat:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     10          {
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??AnalogInput,??AnalogInput??rA
   \   00000010   18009FE5           LDR      R0,??AILNGFloat_1  ;; ??__vtbl
   \   00000014   A40084E5           STR      R0,[R4, #+164]
     11              Type = C_AI_HSH_LNG_Float;
   \   00000018   7C00A0E3           MOV      R0,#+124
   \   0000001C   800E80E3           ORR      R0,R0,#0x800
   \   00000020   A00084E5           STR      R0,[R4, #+160]
     12          }
   \   00000024   0400B0E1           MOVS     R0,R4
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??AILNGFloat_1:
   \   00000030   ........           DC32     ??__vtbl
     13          //---------------------------------------------------------------------------
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          AILNGFloat::~AILNGFloat(void)
     16          {
   \                     `?~AILNGFloat`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0600000A           BEQ      `?~AILNGFloat_1`
     17          }
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0400B0E1           MOVS     R0,R4
   \   0000001C   ........           _BLF     `?~AnalogInput`,`?~AnalogInput??rA`
   \   00000020   010015E3           TST      R5,#0x1
   \   00000024   0100000A           BEQ      `?~AILNGFloat_1`
   \   00000028   0400B0E1           MOVS     R0,R4
   \   0000002C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AILNGFloat_1`:
   \   00000030   3040BDE8           POP      {R4,R5,LR}
   \   00000034   1EFF2FE1           BX       LR               ;; return
     18          ///////////////////////////////////////////////////////////////
     19          //
     20          // Routines for the Configuration
     21          //
     22          ///////////////////////////////////////////////////////////////
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          AnsiString AILNGFloat::MakeConfigString(int ExtraTabs)
     25          {
   \                     ??MakeConfigString:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   46DF4DE2           SUB      SP,SP,#+280
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
     26              AnsiString LocalString =TabStrX(1,ExtraTabs)+KeyWord(Type)+CrLfStr;
   \   00000014   A01094E5           LDR      R1,[R4, #+160]
   \   00000018   8C008DE2           ADD      R0,SP,#+140
   \   0000001C   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000020   0620B0E1           MOVS     R2,R6
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   A8008DE2           ADD      R0,SP,#+168
   \   0000002C   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   00000030   8C208DE2           ADD      R2,SP,#+140
   \   00000034   A8108DE2           ADD      R1,SP,#+168
   \   00000038   C4008DE2           ADD      R0,SP,#+196
   \   0000003C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000040   DC209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   00000044   C4108DE2           ADD      R1,SP,#+196
   \   00000048   E0008DE2           ADD      R0,SP,#+224
   \   0000004C   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000050   E0108DE2           ADD      R1,SP,#+224
   \   00000054   0500B0E1           MOVS     R0,R5
   \   00000058   ........           _BLF     ??AnsiString_1,??AnsiString??rA
   \   0000005C   E0008DE2           ADD      R0,SP,#+224
   \   00000060   ........           _BLF     `?~string`,`?~string??rA`
   \   00000064   C4008DE2           ADD      R0,SP,#+196
   \   00000068   ........           _BLF     `?~string`,`?~string??rA`
   \   0000006C   8C008DE2           ADD      R0,SP,#+140
   \   00000070   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000074   A8008DE2           ADD      R0,SP,#+168
   \   00000078   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     27              LocalString += AnalogInput::MakeConfigString();     //common
   \   0000007C   0020A0E3           MOV      R2,#+0
   \   00000080   70108DE2           ADD      R1,SP,#+112
   \   00000084   0400B0E1           MOVS     R0,R4
   \   00000088   ........           _BLF     ??MakeConfigString_1,??MakeConfigString??rA
   \   0000008C   70108DE2           ADD      R1,SP,#+112
   \   00000090   0500B0E1           MOVS     R0,R5
   \   00000094   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000098   70008DE2           ADD      R0,SP,#+112
   \   0000009C   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     28              LocalString +=TabStrX(1,ExtraTabs)+KeyWord(C_AI_END)+CrLfStr;
   \   000000A0   9810A0E3           MOV      R1,#+152
   \   000000A4   801E81E3           ORR      R1,R1,#0x800
   \   000000A8   0D00B0E1           MOVS     R0,SP
   \   000000AC   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000000B0   0620B0E1           MOVS     R2,R6
   \   000000B4   0110A0E3           MOV      R1,#+1
   \   000000B8   1C008DE2           ADD      R0,SP,#+28
   \   000000BC   ........           _BLF     ??TabStrX,??TabStrX??rA
   \   000000C0   0D20B0E1           MOVS     R2,SP
   \   000000C4   1C108DE2           ADD      R1,SP,#+28
   \   000000C8   38008DE2           ADD      R0,SP,#+56
   \   000000CC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000D0   4C209FE5           LDR      R2,??MakeConfigString_2  ;; CrLfStr
   \   000000D4   38108DE2           ADD      R1,SP,#+56
   \   000000D8   54008DE2           ADD      R0,SP,#+84
   \   000000DC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000E0   54108DE2           ADD      R1,SP,#+84
   \   000000E4   0500B0E1           MOVS     R0,R5
   \   000000E8   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   000000EC   54008DE2           ADD      R0,SP,#+84
   \   000000F0   ........           _BLF     `?~string`,`?~string??rA`
   \   000000F4   38008DE2           ADD      R0,SP,#+56
   \   000000F8   ........           _BLF     `?~string`,`?~string??rA`
   \   000000FC   0D00B0E1           MOVS     R0,SP
   \   00000100   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000104   1C008DE2           ADD      R0,SP,#+28
   \   00000108   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     29              LocalString += CrLfStr;
   \   0000010C   10109FE5           LDR      R1,??MakeConfigString_2  ;; CrLfStr
   \   00000110   0500B0E1           MOVS     R0,R5
   \   00000114   ........           _BLF     `??operator+=`,`??operator+=??rA`
     30          
     31              return(LocalString);
   \   00000118   46DF8DE2           ADD      SP,SP,#+280      ;; stack cleaning
   \   0000011C   7040BDE8           POP      {R4-R6,LR}
   \   00000120   1EFF2FE1           BX       LR               ;; return
   \                     ??MakeConfigString_2:
   \   00000124   ........           DC32     CrLfStr
     32          }
     33          //---------------------------------------------------------------------------
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          bool AILNGFloat::LoadConfigString(TSNConfigString &ConfigString)
     36          {
   \                     ??LoadConfigString:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   E4D04DE2           SUB      SP,SP,#+228
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
     37              bool NoError = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   0070B0E1           MOVS     R7,R0
     38              int ErrorLine=0;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   00108DE5           STR      R1,[SP, #+0]
     39              int Key;
     40              AnsiString PROName = "LNG_float";
   \   00000020   78119FE5           LDR      R1,??LoadConfigString_3+0x4  ;; `?<Constant "LNG_float">`
   \   00000024   04008DE2           ADD      R0,SP,#+4
   \   00000028   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
     41              if ( PROPtr )   PROName +=(AnsiString)", for "+PROPtr->Name;
   \   0000002C   240194E5           LDR      R0,[R4, #+292]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0E00000A           BEQ      ??LoadConfigString_4
   \   00000038   64119FE5           LDR      R1,??LoadConfigString_3+0x8  ;; `?<Constant ", for ">`
   \   0000003C   C8008DE2           ADD      R0,SP,#+200
   \   00000040   ........           _BLF     ??AnsiString_2,??AnsiString??rA_1
   \   00000044   0010B0E1           MOVS     R1,R0
   \   00000048   240194E5           LDR      R0,[R4, #+292]
   \   0000004C   442090E2           ADDS     R2,R0,#+68
   \   00000050   3C008DE2           ADD      R0,SP,#+60
   \   00000054   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000058   3C108DE2           ADD      R1,SP,#+60
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   ........           _BLF     `??operator+=`,`??operator+=??rA`
   \   00000064   3C008DE2           ADD      R0,SP,#+60
   \   00000068   ........           _BLF     `?~string`,`?~string??rA`
   \   0000006C   C8008DE2           ADD      R0,SP,#+200
   \   00000070   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     42              PROName += ":\n";
   \                     ??LoadConfigString_4:
   \   00000074   481F8FE2           ADR      R1,??LoadConfigString_3  ;; ":\n"
   \   00000078   04008DE2           ADD      R0,SP,#+4
   \   0000007C   ........           _BLF     `??operator+=_1`,`??operator+=??rA_1`
     43              do {
     44                  AnsiString InputKeyWord= ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigString_5:
   \   00000080   0030A0E3           MOV      R3,#+0
   \   00000084   0D20B0E1           MOVS     R2,SP
   \   00000088   20108DE2           ADD      R1,SP,#+32
   \   0000008C   0500B0E1           MOVS     R0,R5
   \   00000090   ........           _BLF     ??NextWord,??NextWord??rA
     45                  if ( ErrorLine ) {
   \   00000094   00009DE5           LDR      R0,[SP, #+0]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0A00000A           BEQ      ??LoadConfigString_6
     46                      if ( ErrorLine != EOF ) {
   \   000000A0   00009DE5           LDR      R0,[SP, #+0]
   \   000000A4   010070E3           CMN      R0,#+1
   \   000000A8   2900000A           BEQ      ??LoadConfigString_7
     47                          GiveConfigWarning(PROName,ErrorLine);
   \   000000AC   04108DE2           ADD      R1,SP,#+4
   \   000000B0   AC008DE2           ADD      R0,SP,#+172
   \   000000B4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000B8   00109DE5           LDR      R1,[SP, #+0]
   \   000000BC   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   000000C0   AC008DE2           ADD      R0,SP,#+172
   \   000000C4   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   000000C8   210000EA           B        ??LoadConfigString_7
     48                      }
     49                  } else {
     50                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigString_6:
   \   000000CC   20108DE2           ADD      R1,SP,#+32
   \   000000D0   90008DE2           ADD      R0,SP,#+144
   \   000000D4   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   000000D8   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000DC   0060B0E1           MOVS     R6,R0
   \   000000E0   90008DE2           ADD      R0,SP,#+144
   \   000000E4   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
     51                      switch ( Key ) {
   \   000000E8   0600B0E1           MOVS     R0,R6
   \   000000EC   980040E2           SUB      R0,R0,#+152
   \   000000F0   800E40E2           SUB      R0,R0,#+2048
   \   000000F4   010050E3           CMP      R0,#+1
   \   000000F8   0300008A           BHI      ??LoadConfigString_8
   \   000000FC   011F8FE2           ADR      R1,??LoadConfigString_1
   \   00000100   0010D1E7           LDRB     R1,[R1, R0]
   \   00000104   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??LoadConfigString_1:
   \   00000108   120F0000           DC8      +18,+15,+0,+0
     52                      default:
     53                          GiveConfigWarning(PROName,InputKeyWord,ConfigString.LineCount);
   \                     ??LoadConfigString_8:
   \   0000010C   20108DE2           ADD      R1,SP,#+32
   \   00000110   74008DE2           ADD      R0,SP,#+116
   \   00000114   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000118   0080B0E1           MOVS     R8,R0
   \   0000011C   04108DE2           ADD      R1,SP,#+4
   \   00000120   58008DE2           ADD      R0,SP,#+88
   \   00000124   ........           _BLF     ??AnsiString,??AnsiString??rA_2
   \   00000128   1C2095E5           LDR      R2,[R5, #+28]
   \   0000012C   0810B0E1           MOVS     R1,R8
   \   00000130   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   00000134   74008DE2           ADD      R0,SP,#+116
   \   00000138   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000013C   58008DE2           ADD      R0,SP,#+88
   \   00000140   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000144   020000EA           B        ??LoadConfigString_7
     54                          break;
     55                      case C_AI_START_COMMON:
     56                          AnalogInput::LoadConfigString(ConfigString);
   \                     ??LoadConfigString_9:
   \   00000148   0510B0E1           MOVS     R1,R5
   \   0000014C   0400B0E1           MOVS     R0,R4
   \   00000150   ........           _BLF     ??LoadConfigString_2,??LoadConfigString??rA
     57                          break;
     58                      case C_AI_END:
     59                          break;
     60                      }
     61                  }
     62              }while ( NoError && ( ErrorLine != EOF )&& ( Key != C_AI_END ) );
   \                     ??LoadConfigString_7:
   \   00000154   20008DE2           ADD      R0,SP,#+32
   \   00000158   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000015C   000057E3           CMP      R7,#+0
   \   00000160   0600000A           BEQ      ??LoadConfigString_10
   \   00000164   00009DE5           LDR      R0,[SP, #+0]
   \   00000168   010070E3           CMN      R0,#+1
   \   0000016C   0300000A           BEQ      ??LoadConfigString_10
   \   00000170   9800A0E3           MOV      R0,#+152
   \   00000174   800E80E3           ORR      R0,R0,#0x800
   \   00000178   000056E1           CMP      R6,R0
   \   0000017C   BFFFFF1A           BNE      ??LoadConfigString_5
     63              return(NoError);
   \                     ??LoadConfigString_10:
   \   00000180   04008DE2           ADD      R0,SP,#+4
   \   00000184   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   00000188   0700B0E1           MOVS     R0,R7
   \   0000018C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000190   E4D08DE2           ADD      SP,SP,#+228      ;; stack cleaning
   \   00000194   F041BDE8           POP      {R4-R8,LR}
   \   00000198   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigString_3:
   \   0000019C   3A0A0000           DC8      ":\n",+0
   \   000001A0   ........           DC32     `?<Constant "LNG_float">`
   \   000001A4   ........           DC32     `?<Constant ", for ">`
     64          }
     65          
     66          
     67          ///////////////////////////////////////////////////////////////
     68          //
     69          // Routines for the librarian for input
     70          //
     71          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
     72          int  AILNGFloat::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
     73          {
   \                     ??GetValue:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
   \   00000014   20809DE5           LDR      R8,[SP, #+32]
   \   00000018   24909DE5           LDR      R9,[SP, #+36]
     74              int Status = GETVAL_NO_ERR;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   00A0B0E1           MOVS     R10,R0
     75              switch ( ValueId ) {
   \   00000024   0500B0E1           MOVS     R0,R5
   \   00000028   B50040E2           SUB      R0,R0,#+181
   \   0000002C   400E40E2           SUB      R0,R0,#+1024
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   1500008A           BHI      ??GetValue_3
   \   00000038   011F8FE2           ADR      R1,??GetValue_1
   \   0000003C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000040   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   00000044   00121203           DC8      +0,+18,+18,+3
     76              case SVT_AI_OFFSET   :
     77                  MyRetValue = Offset;
   \                     ??GetValue_4:
   \   00000048   400194E5           LDR      R0,[R4, #+320]
   \   0000004C   000087E5           STR      R0,[R7, #+0]
   \   00000050   190000EA           B        ??GetValue_5
     78                  break;
     79              case SVT_AI_CALC_VAL :
     80                  if ( CanCalculate() ) {
   \                     ??GetValue_6:
   \   00000054   0400B0E1           MOVS     R0,R4
   \   00000058   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0700000A           BEQ      ??GetValue_7
     81                      MyRetValue = Calculate();
   \   00000064   A40094E5           LDR      R0,[R4, #+164]
   \   00000068   601090E2           ADDS     R1,R0,#+96
   \   0000006C   0400B0E1           MOVS     R0,R4
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   0FE0A0E1           MOV      LR,PC
   \   00000078   11FF2FE1           BX       R1
   \   0000007C   000087E5           STR      R0,[R7, #+0]
   \   00000080   0D0000EA           B        ??GetValue_5
     82                  } else {
     83                      Status = GETVAL_FLOAT_NOT_LEGAL;
   \                     ??GetValue_7:
   \   00000084   0500A0E3           MOV      R0,#+5
   \   00000088   00A0B0E1           MOVS     R10,R0
   \   0000008C   0A0000EA           B        ??GetValue_5
     84                  }
     85                  break;
     86              default:
     87                  Status = AnalogInput::GetValue(ValueId, Index, MyRetValue, DecPnt, Unit);
   \                     ??GetValue_3:
   \   00000090   0900B0E1           MOVS     R0,R9
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   0800B0E1           MOVS     R0,R8
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   0730B0E1           MOVS     R3,R7
   \   000000A4   0620B0E1           MOVS     R2,R6
   \   000000A8   0510B0E1           MOVS     R1,R5
   \   000000AC   0400B0E1           MOVS     R0,R4
   \   000000B0   ........           _BLF     ??GetValue_2,??GetValue??rA
   \   000000B4   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000B8   00A0B0E1           MOVS     R10,R0
     88                  break;
     89              }
     90              return(Status);
   \                     ??GetValue_5:
   \   000000BC   0A00B0E1           MOVS     R0,R10
   \   000000C0   F047BDE8           POP      {R4-R10,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return
     91          }

   \                                 In segment CODE, align 4, keep-with-next
     92          int AILNGFloat::GetStringValue(int ValueId, int Index, AnsiString &MyString)
     93          {
   \                     ??GetStringValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0150B0E1           MOVS     R5,R1
   \   00000010   0260B0E1           MOVS     R6,R2
   \   00000014   0370B0E1           MOVS     R7,R3
     94              int Status = GETVAL_NO_ERR;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0080B0E1           MOVS     R8,R0
     95              switch ( ValueId ) {
   \   00000020   0500B0E1           MOVS     R0,R5
   \   00000024   4C0E50E3           CMP      R0,#+1216
   \   00000028   0800001A           BNE      ??GetStringValue_2
     96              case SVT_AI_UNIT:
     97                  MyString = GetUnitName(LENGTH_UNIT);
   \                     ??GetStringValue_3:
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00B0E1           MOVS     R0,SP
   \   00000034   ........           _BLF     ??GetUnitName,??GetUnitName??rA
   \   00000038   0D10B0E1           MOVS     R1,SP
   \   0000003C   0700B0E1           MOVS     R0,R7
   \   00000040   ........           _BLF     `??operator=_1`,`??operator=??rA_1`
   \   00000044   0D00B0E1           MOVS     R0,SP
   \   00000048   ........           _BLF     `?~AnsiString`,`?~AnsiString??rA`
   \   0000004C   050000EA           B        ??GetStringValue_4
     98                  break;
     99              default:
    100                  Status = AnalogInput::GetStringValue(ValueId,Index, MyString);
   \                     ??GetStringValue_2:
   \   00000050   0730B0E1           MOVS     R3,R7
   \   00000054   0620B0E1           MOVS     R2,R6
   \   00000058   0510B0E1           MOVS     R1,R5
   \   0000005C   0400B0E1           MOVS     R0,R4
   \   00000060   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000064   0080B0E1           MOVS     R8,R0
    101          
    102              }
    103              return(Status);
   \                     ??GetStringValue_4:
   \   00000068   0800B0E1           MOVS     R0,R8
   \   0000006C   1CD08DE2           ADD      SP,SP,#+28       ;; stack cleaning
   \   00000070   F041BDE8           POP      {R4-R8,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
    104          }
    105          
    106          //////////////////////////////////////////////////////////////////
    107          //
    108          // Sensor calculations
    109          //
    110          //////////////////////////////////////////////////////////////////
    111          

   \                                 In segment CODE, align 4, keep-with-next
    112          float AILNGFloat::Calculate(void)
    113          {
   \                     ??Calculate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    114              if ( CanCalculate() ) {
   \   00000008   0400B0E1           MOVS     R0,R4
   \   0000000C   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1400000A           BEQ      ??Calculate_1
    115                  // This value should be checked for alarm
    116                  float RawCalcValue = AdjustedDistance - Gain*FilteredValue-Offset;
   \   00000018   3C1194E5           LDR      R1,[R4, #+316]
   \   0000001C   440194E5           LDR      R0,[R4, #+324]
   \   00000020   ........           _BLF     __fMul,??__fMul??rA
   \   00000024   0010B0E1           MOVS     R1,R0
   \   00000028   300194E5           LDR      R0,[R4, #+304]
   \   0000002C   ........           _BLF     __fSub,??__fSub??rA
   \   00000030   401194E5           LDR      R1,[R4, #+320]
   \   00000034   ........           _BLF     __fSub,??__fSub??rA
   \   00000038   0050B0E1           MOVS     R5,R0
    117                  if (RawCalcValue < 0.0) {
   \   0000003C   0500B0E1           MOVS     R0,R5
   \   00000040   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0030A0E3           MOV      R3,#+0
   \   0000004C   ........           _BLF     __dLess,??__dLess??rA
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0100000A           BEQ      ??Calculate_2
    118                      RawCalcValue = 0.0;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   0050B0E1           MOVS     R5,R0
    119                  }
    120                  CalcValue = RawCalcValue;
   \                     ??Calculate_2:
   \   00000060   485184E5           STR      R5,[R4, #+328]
    121                  ResultOK  = true;
   \   00000064   0100A0E3           MOV      R0,#+1
   \   00000068   3601C4E5           STRB     R0,[R4, #+310]
    122          
    123              }
    124              return(CalcValue);
   \                     ??Calculate_1:
   \   0000006C   480194E5           LDR      R0,[R4, #+328]
   \   00000070   3040BDE8           POP      {R4,R5,LR}
   \   00000074   1EFF2FE1           BX       LR               ;; return
    125          
    126          }

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "LNG_float">`:
   \   00000000   4C4E475F666C       DC8 "LNG_float"
   \              6F617400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ", for ">`:
   \   00000000   2C20666F7220       DC8 ", for "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3A0A00             DC8 ":\012"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AILNGFloat &AILNGFloat::new AILNGFloat()
   \                     `??new AILNGFloat`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   590FA0E3           MOV      R0,#+356
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      `??new AILNGFloat_1`
   \   00000014   ........           BL       ??AILNGFloat
   \   00000018   000000EA           B        `??new AILNGFloat_2`
   \                     `??new AILNGFloat_1`:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \                     `??new AILNGFloat_2`:
   \   00000020   0040BDE8           POP      {LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   A4009FE5           LDR      R0,??__sti__routine_1  ;; TDU_FONT_ST
   \   00000004   A4109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000008   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_2:
   \   0000000C   043053E2           SUBS     R3,R3,#+4
   \   00000010   032091E7           LDR      R2,[R1, R3]
   \   00000014   032080E7           STR      R2,[R0, R3]
   \   00000018   FBFFFF1A           BNE      ??__sti__routine_2
   \   0000001C   90009FE5           LDR      R0,??__sti__routine_1+0x8  ;; TDU_FONT_PW
   \   00000020   90109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000024   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_3:
   \   00000028   043053E2           SUBS     R3,R3,#+4
   \   0000002C   032091E7           LDR      R2,[R1, R3]
   \   00000030   032080E7           STR      R2,[R0, R3]
   \   00000034   FBFFFF1A           BNE      ??__sti__routine_3
   \   00000038   7C009FE5           LDR      R0,??__sti__routine_1+0x10  ;; TDU_FONT_HW
   \   0000003C   74109FE5           LDR      R1,??__sti__routine_1+0xC  ;; GUI_Font16_1
   \   00000040   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_4:
   \   00000044   043053E2           SUBS     R3,R3,#+4
   \   00000048   032091E7           LDR      R2,[R1, R3]
   \   0000004C   032080E7           STR      R2,[R0, R3]
   \   00000050   FBFFFF1A           BNE      ??__sti__routine_4
   \   00000054   64009FE5           LDR      R0,??__sti__routine_1+0x14  ;; TDU_FONT_BU
   \   00000058   50109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   0000005C   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_5:
   \   00000060   043053E2           SUBS     R3,R3,#+4
   \   00000064   032091E7           LDR      R2,[R1, R3]
   \   00000068   032080E7           STR      R2,[R0, R3]
   \   0000006C   FBFFFF1A           BNE      ??__sti__routine_5
   \   00000070   4C009FE5           LDR      R0,??__sti__routine_1+0x18  ;; TDU_FONT_HEADING
   \   00000074   34109FE5           LDR      R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
   \   00000078   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_6:
   \   0000007C   043053E2           SUBS     R3,R3,#+4
   \   00000080   032091E7           LDR      R2,[R1, R3]
   \   00000084   032080E7           STR      R2,[R0, R3]
   \   00000088   FBFFFF1A           BNE      ??__sti__routine_6
   \   0000008C   34009FE5           LDR      R0,??__sti__routine_1+0x1C  ;; TDU_FONT_BIG
   \   00000090   34109FE5           LDR      R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
   \   00000094   2430A0E3           MOV      R3,#+36
   \                     ??__sti__routine_7:
   \   00000098   043053E2           SUBS     R3,R3,#+4
   \   0000009C   032091E7           LDR      R2,[R1, R3]
   \   000000A0   032080E7           STR      R2,[R0, R3]
   \   000000A4   FBFFFF1A           BNE      ??__sti__routine_7
   \   000000A8   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   000000AC   ........           DC32     TDU_FONT_ST
   \   000000B0   ........           DC32     GUI_Font13_1
   \   000000B4   ........           DC32     TDU_FONT_PW
   \   000000B8   ........           DC32     GUI_Font16_1
   \   000000BC   ........           DC32     TDU_FONT_HW
   \   000000C0   ........           DC32     TDU_FONT_BU
   \   000000C4   ........           DC32     TDU_FONT_HEADING
   \   000000C8   ........           DC32     TDU_FONT_BIG
   \   000000CC   ........           DC32     GUI_Font24_1
    127          
    128          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AILNGFloat::AILNGFloat()           8
     AILNGFloat::Calculate()           12
     AILNGFloat::GetStringValue(int, int, AnsiString &)
                                       52
     AILNGFloat::GetValue(int, int, float &, int &, int &)
                                       40
     AILNGFloat::LoadConfigString(TSNConfigString &)
                                      252
     AILNGFloat::MakeConfigString(int)
                                      296
     AILNGFloat::new AILNGFloat()       4
     AILNGFloat::~AILNGFloat()         12
     AnsiString::AnsiString(AnsiString const &)
                                        8
     AnsiString::operator=(AnsiString const &)
                                        8
     AnsiString::~AnsiString()          4
     _String_val::_String_val(char_allocator)
                                       12
     __sti__routine()                   0
     char_allocator::char_allocator(char_allocator const &)
                                        0
     char_traits::length(char const *)
                                        8
     operator+(string const &, string const &)
                                       44
     string::append(char const *)      12
     string::append(string const &)    12
     string::assign(string const &)    12
     string::operator+=(char const *)
                                       12
     string::operator+=(string const &)
                                       12
     string::operator=(string const &)
                                       12
     string::string(string const &)    12
     string::~string()                  8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     char_traits::length(char const *)
                                      24
     char_allocator::char_allocator(char_allocator const &)
                                       4
     _String_val::_String_val(char_allocator)
                                      36
     string::string(string const &)   80
     string::~string()                32
     string::operator=(string const &)
                                      32
     string::operator+=(string const &)
                                      32
     string::operator+=(char const *)
                                      32
     string::append(string const &)   48
     string::append(char const *)     44
     string::assign(string const &)   48
     operator+(string const &, string const &)
                                      72
     AnsiString::AnsiString(AnsiString const &)
                                      28
     AnsiString::~AnsiString()        16
     AnsiString::operator=(AnsiString const &)
                                      28
     TDU_FONT_ST                      36
     TDU_FONT_PW                      36
     TDU_FONT_HW                      36
     TDU_FONT_BU                      36
     TDU_FONT_HEADING                 36
     TDU_FONT_BIG                     36
     AILNGFloat::AILNGFloat()         52
     AILNGFloat::~AILNGFloat()        56
     AILNGFloat::MakeConfigString(int)
                                     296
     AILNGFloat::LoadConfigString(TSNConfigString &)
                                     424
     AILNGFloat::GetValue(int, int, float &, int &, int &)
                                     200
     AILNGFloat::GetStringValue(int, int, AnsiString &)
                                     120
     AILNGFloat::Calculate()         120
     ?<Constant "LNG_float">          12
     ?<Constant ", for ">              8
     ?<Constant ":\n">                 3
     AILNGFloat::new AILNGFloat()     40
     __sti__routine()                208
      Others                         692

 
 2 612 bytes in segment CODE
   159 bytes in segment DATA_C
   216 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    12 bytes in segment INITTAB
 
 1 520 bytes of CODE  memory (+ 1 108 bytes shared)
   159 bytes of CONST memory
   216 bytes of DATA  memory

Errors: none
Warnings: none
