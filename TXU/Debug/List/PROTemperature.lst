##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               14/Sep/2022  15:16:55 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\PROTemperature.cpp              #
#    Command line    =  D:\S2Prog\Shared\Src\PROTemperature.cpp --fpu None   #
#                       -D OS_LIBMODE_SP -D CPU_S3C2410 -D OS_RAMVECT=0 -D   #
#                       OS_UART=-1 -D S2TXU -D USE_LZO=1 -D __ARM_LIBRARY__  #
#                       -D WATCHDOG=1 -D NETWORK=1 -lCN                      #
#                       D:\S2Prog\TXU\Debug\List\ -o                         #
#                       D:\S2Prog\TXU\Debug\Obj\ -z9 --debug --cpu_mode arm  #
#                       --endian little --cpu ARM920T --stack_align 4        #
#                       --interwork -e --enable_multibytes --eec++           #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8n.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.210\ -I          #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ -I             #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\include\ipv4\ -I        #
#                       D:\S2Prog\TXU\lwip-1.4.1\src\ -I                     #
#                       D:\S2Prog\TXU\..\SHARED\Database\ -I                 #
#                       D:\S2Prog\TXU\src\ -I "C:\Program Files (x86)\IAR    #
#                       Systems\Embedded Workbench 4.0\arm\INC\"             #
#                       --inline_threshold=2                                 #
#    List file       =  D:\S2Prog\TXU\Debug\List\PROTemperature.lst          #
#    Object file     =  D:\S2Prog\TXU\Debug\Obj\PROTemperature.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\PROTemperature.cpp
      1          #include "TSNIncludes.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs string::string(string const &)
   \                     ??string:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000018   1C009FE5           LDR      R0,??string_1    ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??assign,??assign??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   3040BDE8           POP      {R4,R5,LR}
   \   00000038   1EFF2FE1           BX       LR               ;; return
   \                     ??string_1:
   \   0000003C   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_DecP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   08009015           LDRNE    R0,[R0, #+8]
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   0700001A           BNE      ??_DecP_1
   \   00000020   000000EA           B        ??_DecP_2
   \                     ??_DecP_3:
   \   00000024   0010A0E1           MOV      R1,R0
   \                     ??_DecP_2:
   \   00000028   080091E5           LDR      R0,[R1, #+8]
   \   0000002C   0D20D0E5           LDRB     R2,[R0, #+13]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   FAFFFF0A           BEQ      ??_DecP_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR
   \                     ??_DecP_1:
   \   00000040   041090E5           LDR      R1,[R0, #+4]
   \   00000044   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000048   000052E3           CMP      R2,#+0
   \   0000004C   1EFF2F11           BXNE     LR
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   020050E1           CMP      R0,R2
   \   00000058   0100A0E1           MOV      R0,R1
   \   0000005C   F7FFFF0A           BEQ      ??_DecP_1
   \   00000060   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_IncP:
   \   00000000   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   1EFF2F11           BXNE     LR
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
   \   00000010   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700001A           BNE      ??_IncP_1
   \   0000001C   000000EA           B        ??_IncP_2
   \                     ??_IncP_3:
   \   00000020   0010A0E1           MOV      R1,R0
   \                     ??_IncP_2:
   \   00000024   000091E5           LDR      R0,[R1, #+0]
   \   00000028   0D20D0E5           LDRB     R2,[R0, #+13]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   FAFFFF0A           BEQ      ??_IncP_3
   \   00000034   060000EA           B        ??_IncP_4
   \                     ??_IncP_5:
   \   00000038   0100A0E1           MOV      R0,R1
   \                     ??_IncP_1:
   \   0000003C   041090E5           LDR      R1,[R0, #+4]
   \   00000040   0D20D1E5           LDRB     R2,[R1, #+13]
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   08209105           LDREQ    R2,[R1, #+8]
   \   0000004C   02005001           CMPEQ    R0,R2
   \   00000050   F8FFFF0A           BEQ      ??_IncP_5
   \                     ??_IncP_4:
   \   00000054   0100A0E1           MOV      R0,R1
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Clear()
   \                     ??_Clear:
   \   00000000   040080E5           STR      R0,[R0, #+4]
   \   00000004   000080E5           STR      R0,[R0, #+0]
   \   00000008   080080E5           STR      R0,[R0, #+8]
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   0D10C0E5           STRB     R1,[R0, #+13]
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   101080E5           STR      R1,[R0, #+16]
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Rrotate:
   \   00000000   002091E5           LDR      R2,[R1, #+0]
   \   00000004   083092E5           LDR      R3,[R2, #+8]
   \   00000008   003081E5           STR      R3,[R1, #+0]
   \   0000000C   083092E5           LDR      R3,[R2, #+8]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Rrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   083090E5           LDR      R3,[R0, #+8]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   08208005           STREQ    R2,[R0, #+8]
   \   00000044   00208015           STRNE    R2,[R0, #+0]
   \                     ??_Rrotate_1:
   \   00000048   081082E5           STR      R1,[R2, #+8]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Lrotate:
   \   00000000   082091E5           LDR      R2,[R1, #+8]
   \   00000004   003092E5           LDR      R3,[R2, #+0]
   \   00000008   083081E5           STR      R3,[R1, #+8]
   \   0000000C   003092E5           LDR      R3,[R2, #+0]
   \   00000010   0DC0D3E5           LDRB     R12,[R3, #+13]
   \   00000014   00005CE3           CMP      R12,#+0
   \   00000018   04108305           STREQ    R1,[R3, #+4]
   \   0000001C   043091E5           LDR      R3,[R1, #+4]
   \   00000020   043082E5           STR      R3,[R2, #+4]
   \   00000024   043090E5           LDR      R3,[R0, #+4]
   \   00000028   030051E1           CMP      R1,R3
   \   0000002C   04208005           STREQ    R2,[R0, #+4]
   \   00000030   0400000A           BEQ      ??_Lrotate_1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   003090E5           LDR      R3,[R0, #+0]
   \   0000003C   030051E1           CMP      R1,R3
   \   00000040   00208005           STREQ    R2,[R0, #+0]
   \   00000044   08208015           STRNE    R2,[R0, #+8]
   \                     ??_Lrotate_1:
   \   00000048   001082E5           STR      R1,[R2, #+0]
   \   0000004C   042081E5           STR      R2,[R1, #+4]
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree_algobase<allocator<void>>::_Genptr _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Erase:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0680A0E1           MOV      R8,R6
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000018   007098E5           LDR      R7,[R8, #+0]
   \   0000001C   0D10D7E5           LDRB     R1,[R7, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400001A           BNE      ??_Erase_2
   \   00000028   081098E5           LDR      R1,[R8, #+8]
   \   0000002C   0D10D1E5           LDRB     R1,[R1, #+13]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0100001A           BNE      ??_Erase_3
   \   00000038   0080A0E1           MOV      R8,R0
   \                     ??_Erase_2:
   \   0000003C   087098E5           LDR      R7,[R8, #+8]
   \                     ??_Erase_3:
   \   00000040   060058E1           CMP      R8,R6
   \   00000044   2B00001A           BNE      ??_Erase_4
   \   00000048   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000004C   045096E5           LDR      R5,[R6, #+4]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   04508705           STREQ    R5,[R7, #+4]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   04708405           STREQ    R7,[R4, #+4]
   \   00000064   0300000A           BEQ      ??_Erase_5
   \   00000068   000095E5           LDR      R0,[R5, #+0]
   \   0000006C   060050E1           CMP      R0,R6
   \   00000070   00708505           STREQ    R7,[R5, #+0]
   \   00000074   08708515           STRNE    R7,[R5, #+8]
   \                     ??_Erase_5:
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   0B00001A           BNE      ??_Erase_6
   \   00000084   0D00D7E5           LDRB     R0,[R7, #+13]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500A011           MOVNE    R0,R5
   \   00000090   0600001A           BNE      ??_Erase_7
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   000000EA           B        ??_Erase_8
   \                     ??_Erase_9:
   \   0000009C   0100A0E1           MOV      R0,R1
   \                     ??_Erase_8:
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0D20D1E5           LDRB     R2,[R1, #+13]
   \   000000A8   000052E3           CMP      R2,#+0
   \   000000AC   FAFFFF0A           BEQ      ??_Erase_9
   \                     ??_Erase_7:
   \   000000B0   000084E5           STR      R0,[R4, #+0]
   \                     ??_Erase_6:
   \   000000B4   080094E5           LDR      R0,[R4, #+8]
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   2F00001A           BNE      ??_Erase_10
   \   000000C0   0D10D7E5           LDRB     R1,[R7, #+13]
   \   000000C4   080084E2           ADD      R0,R4,#+8
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   0510A011           MOVNE    R1,R5
   \   000000D0   0600001A           BNE      ??_Erase_11
   \   000000D4   0710A0E1           MOV      R1,R7
   \   000000D8   000000EA           B        ??_Erase_12
   \                     ??_Erase_13:
   \   000000DC   0210A0E1           MOV      R1,R2
   \                     ??_Erase_12:
   \   000000E0   082091E5           LDR      R2,[R1, #+8]
   \   000000E4   0D30D2E5           LDRB     R3,[R2, #+13]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   FAFFFF0A           BEQ      ??_Erase_13
   \                     ??_Erase_11:
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \   000000F4   210000EA           B        ??_Erase_10
   \                     ??_Erase_4:
   \   000000F8   000096E5           LDR      R0,[R6, #+0]
   \   000000FC   048080E5           STR      R8,[R0, #+4]
   \   00000100   000096E5           LDR      R0,[R6, #+0]
   \   00000104   000088E5           STR      R0,[R8, #+0]
   \   00000108   080096E5           LDR      R0,[R6, #+8]
   \   0000010C   000058E1           CMP      R8,R0
   \   00000110   0850A001           MOVEQ    R5,R8
   \   00000114   0800000A           BEQ      ??_Erase_14
   \   00000118   0D00D7E5           LDRB     R0,[R7, #+13]
   \   0000011C   045098E5           LDR      R5,[R8, #+4]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   04508705           STREQ    R5,[R7, #+4]
   \   00000128   007085E5           STR      R7,[R5, #+0]
   \   0000012C   080096E5           LDR      R0,[R6, #+8]
   \   00000130   080088E5           STR      R0,[R8, #+8]
   \   00000134   080096E5           LDR      R0,[R6, #+8]
   \   00000138   048080E5           STR      R8,[R0, #+4]
   \                     ??_Erase_14:
   \   0000013C   040094E5           LDR      R0,[R4, #+4]
   \   00000140   060050E1           CMP      R0,R6
   \   00000144   04808405           STREQ    R8,[R4, #+4]
   \   00000148   0400000A           BEQ      ??_Erase_15
   \   0000014C   040096E5           LDR      R0,[R6, #+4]
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   060051E1           CMP      R1,R6
   \   00000158   00808005           STREQ    R8,[R0, #+0]
   \   0000015C   08808015           STRNE    R8,[R0, #+8]
   \                     ??_Erase_15:
   \   00000160   040096E5           LDR      R0,[R6, #+4]
   \   00000164   0C1088E2           ADD      R1,R8,#+12
   \   00000168   040088E5           STR      R0,[R8, #+4]
   \   0000016C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000170   0C0086E2           ADD      R0,R6,#+12
   \   00000174   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000178   0030C1E5           STRB     R3,[R1, #+0]
   \   0000017C   0020C0E5           STRB     R2,[R0, #+0]
   \                     ??_Erase_10:
   \   00000180   0C00D6E5           LDRB     R0,[R6, #+12]
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   5E00001A           BNE      ??_Erase_16
   \   0000018C   0090A0E3           MOV      R9,#+0
   \   00000190   01A0A0E3           MOV      R10,#+1
   \   00000194   060000EA           B        ??_Erase_17
   \                     ??_Erase_18:
   \   00000198   080098E5           LDR      R0,[R8, #+8]
   \   0000019C   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000001A0   010050E3           CMP      R0,#+1
   \   000001A4   1C00001A           BNE      ??_Erase_19
   \                     ??_Erase_20:
   \   000001A8   0C90C8E5           STRB     R9,[R8, #+12]
   \                     ??_Erase_21:
   \   000001AC   0570A0E1           MOV      R7,R5
   \   000001B0   045097E5           LDR      R5,[R7, #+4]
   \                     ??_Erase_17:
   \   000001B4   040094E5           LDR      R0,[R4, #+4]
   \   000001B8   000057E1           CMP      R7,R0
   \   000001BC   5000000A           BEQ      ??_Erase_22
   \   000001C0   0C00D7E5           LDRB     R0,[R7, #+12]
   \   000001C4   010050E3           CMP      R0,#+1
   \   000001C8   4D00001A           BNE      ??_Erase_22
   \   000001CC   008095E5           LDR      R8,[R5, #+0]
   \   000001D0   080057E1           CMP      R7,R8
   \   000001D4   2400001A           BNE      ??_Erase_23
   \   000001D8   088095E5           LDR      R8,[R5, #+8]
   \   000001DC   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   0500001A           BNE      ??_Erase_24
   \   000001E8   0CA0C8E5           STRB     R10,[R8, #+12]
   \   000001EC   0C90C5E5           STRB     R9,[R5, #+12]
   \   000001F0   0510A0E1           MOV      R1,R5
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000001FC   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_24:
   \   00000200   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000204   000050E3           CMP      R0,#+0
   \   00000208   E7FFFF1A           BNE      ??_Erase_21
   \   0000020C   000098E5           LDR      R0,[R8, #+0]
   \   00000210   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000214   010050E3           CMP      R0,#+1
   \   00000218   DEFFFF0A           BEQ      ??_Erase_18
   \                     ??_Erase_19:
   \   0000021C   080098E5           LDR      R0,[R8, #+8]
   \   00000220   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000224   010050E3           CMP      R0,#+1
   \   00000228   0600001A           BNE      ??_Erase_25
   \   0000022C   000098E5           LDR      R0,[R8, #+0]
   \   00000230   0810A0E1           MOV      R1,R8
   \   00000234   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000238   0C90C8E5           STRB     R9,[R8, #+12]
   \   0000023C   0400A0E1           MOV      R0,R4
   \   00000240   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   00000244   088095E5           LDR      R8,[R5, #+8]
   \                     ??_Erase_25:
   \   00000248   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000254   0CA0C5E5           STRB     R10,[R5, #+12]
   \   00000258   080098E5           LDR      R0,[R8, #+8]
   \   0000025C   0CA0C0E5           STRB     R10,[R0, #+12]
   \   00000260   0400A0E1           MOV      R0,R4
   \   00000264   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000268   250000EA           B        ??_Erase_22
   \                     ??_Erase_23:
   \   0000026C   0C00D8E5           LDRB     R0,[R8, #+12]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   0500001A           BNE      ??_Erase_26
   \   00000278   0CA0C8E5           STRB     R10,[R8, #+12]
   \   0000027C   0C90C5E5           STRB     R9,[R5, #+12]
   \   00000280   0510A0E1           MOV      R1,R5
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   0000028C   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_26:
   \   00000290   0D00D8E5           LDRB     R0,[R8, #+13]
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   C3FFFF1A           BNE      ??_Erase_21
   \   0000029C   080098E5           LDR      R0,[R8, #+8]
   \   000002A0   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002A4   010050E3           CMP      R0,#+1
   \   000002A8   00009805           LDREQ    R0,[R8, #+0]
   \   000002AC   0C00D005           LDRBEQ   R0,[R0, #+12]
   \   000002B0   01005003           CMPEQ    R0,#+1
   \   000002B4   BBFFFF0A           BEQ      ??_Erase_20
   \   000002B8   000098E5           LDR      R0,[R8, #+0]
   \   000002BC   0C00D0E5           LDRB     R0,[R0, #+12]
   \   000002C0   010050E3           CMP      R0,#+1
   \   000002C4   0600001A           BNE      ??_Erase_27
   \   000002C8   080098E5           LDR      R0,[R8, #+8]
   \   000002CC   0810A0E1           MOV      R1,R8
   \   000002D0   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002D4   0C90C8E5           STRB     R9,[R8, #+12]
   \   000002D8   0400A0E1           MOV      R0,R4
   \   000002DC   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   000002E0   008095E5           LDR      R8,[R5, #+0]
   \                     ??_Erase_27:
   \   000002E4   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000002E8   0510A0E1           MOV      R1,R5
   \   000002EC   0C00C8E5           STRB     R0,[R8, #+12]
   \   000002F0   0CA0C5E5           STRB     R10,[R5, #+12]
   \   000002F4   000098E5           LDR      R0,[R8, #+0]
   \   000002F8   0CA0C0E5           STRB     R10,[R0, #+12]
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Erase_22:
   \   00000304   0CA0C7E5           STRB     R10,[R7, #+12]
   \                     ??_Erase_16:
   \   00000308   100094E5           LDR      R0,[R4, #+16]
   \   0000030C   000050E3           CMP      R0,#+0
   \   00000310   01004012           SUBNE    R0,R0,#+1
   \   00000314   10008415           STRNE    R0,[R4, #+16]
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   F047BDE8           POP      {R4-R10,LR}
   \   00000320   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
   \                     ??_Insert:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   0350A0E1           MOV      R5,R3
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   100084E5           STR      R0,[R4, #+16]
   \   00000018   040052E1           CMP      R2,R4
   \   0000001C   0300001A           BNE      ??_Insert_5
   \   00000020   045084E5           STR      R5,[R4, #+4]
   \   00000024   005084E5           STR      R5,[R4, #+0]
   \                     ??_Insert_6:
   \   00000028   085084E5           STR      R5,[R4, #+8]
   \   0000002C   130000EA           B        ??_Insert_7
   \                     ??_Insert_5:
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0500000A           BEQ      ??_Insert_8
   \   00000038   005082E5           STR      R5,[R2, #+0]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   000052E1           CMP      R2,R0
   \   00000044   0D00001A           BNE      ??_Insert_7
   \   00000048   005084E5           STR      R5,[R4, #+0]
   \   0000004C   0B0000EA           B        ??_Insert_7
   \                     ??_Insert_8:
   \   00000050   085082E5           STR      R5,[R2, #+8]
   \   00000054   080094E5           LDR      R0,[R4, #+8]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   0700001A           BNE      ??_Insert_7
   \   00000060   F0FFFFEA           B        ??_Insert_6
   \                     ??_Insert_9:
   \   00000064   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000068   0C70C2E5           STRB     R7,[R2, #+12]
   \   0000006C   040095E5           LDR      R0,[R5, #+4]
   \   00000070   040090E5           LDR      R0,[R0, #+4]
   \   00000074   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000078   040095E5           LDR      R0,[R5, #+4]
   \   0000007C   045090E5           LDR      R5,[R0, #+4]
   \                     ??_Insert_7:
   \   00000080   0170A0E3           MOV      R7,#+1
   \   00000084   040095E5           LDR      R0,[R5, #+4]
   \   00000088   0C10D0E5           LDRB     R1,[R0, #+12]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   2F00001A           BNE      ??_Insert_10
   \   00000094   041090E5           LDR      R1,[R0, #+4]
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   041090E5           LDR      R1,[R0, #+4]
   \   000000A8   1400001A           BNE      ??_Insert_11
   \   000000AC   082091E5           LDR      R2,[R1, #+8]
   \   000000B0   0C10D2E5           LDRB     R1,[R2, #+12]
   \   000000B4   000051E3           CMP      R1,#+0
   \   000000B8   E9FFFF0A           BEQ      ??_Insert_9
   \   000000BC   081090E5           LDR      R1,[R0, #+8]
   \   000000C0   010055E1           CMP      R5,R1
   \   000000C4   0300001A           BNE      ??_Insert_12
   \   000000C8   0050A0E1           MOV      R5,R0
   \   000000CC   0510A0E1           MOV      R1,R5
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \                     ??_Insert_12:
   \   000000D8   040095E5           LDR      R0,[R5, #+4]
   \   000000DC   0C70C0E5           STRB     R7,[R0, #+12]
   \   000000E0   040095E5           LDR      R0,[R5, #+4]
   \   000000E4   040090E5           LDR      R0,[R0, #+4]
   \   000000E8   0C60C0E5           STRB     R6,[R0, #+12]
   \   000000EC   040095E5           LDR      R0,[R5, #+4]
   \   000000F0   041090E5           LDR      R1,[R0, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \   000000FC   DFFFFFEA           B        ??_Insert_7
   \                     ??_Insert_11:
   \   00000100   002091E5           LDR      R2,[R1, #+0]
   \   00000104   0C10D2E5           LDRB     R1,[R2, #+12]
   \   00000108   000051E3           CMP      R1,#+0
   \   0000010C   D4FFFF0A           BEQ      ??_Insert_9
   \   00000110   001090E5           LDR      R1,[R0, #+0]
   \   00000114   010055E1           CMP      R5,R1
   \   00000118   0300001A           BNE      ??_Insert_13
   \   0000011C   0050A0E1           MOV      R5,R0
   \   00000120   0510A0E1           MOV      R1,R5
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   ........           _BLF     ??_Rrotate,??_Rrotate??rA
   \                     ??_Insert_13:
   \   0000012C   040095E5           LDR      R0,[R5, #+4]
   \   00000130   0C70C0E5           STRB     R7,[R0, #+12]
   \   00000134   040095E5           LDR      R0,[R5, #+4]
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   0C60C0E5           STRB     R6,[R0, #+12]
   \   00000140   040095E5           LDR      R0,[R5, #+4]
   \   00000144   041090E5           LDR      R1,[R0, #+4]
   \   00000148   0400A0E1           MOV      R0,R4
   \   0000014C   ........           _BLF     ??_Lrotate,??_Lrotate??rA
   \   00000150   CAFFFFEA           B        ??_Insert_7
   \                     ??_Insert_10:
   \   00000154   040094E5           LDR      R0,[R4, #+4]
   \   00000158   0C70C0E5           STRB     R7,[R0, #+12]
   \   0000015C   F040BDE8           POP      {R4-R7,LR}
   \   00000160   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Pairib _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
   \                     ??insert:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_2:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_3
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_2
   \                     ??insert_3:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_4
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_5
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_6:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_1,??_Insert??rA
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_7
   \                     ??insert_5:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_4:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_8
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_6
   \                     ??insert_8:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_7:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairib _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
   \                     ??insert_1:
   \   00000000   F34C2DE9           PUSH     {R0,R1,R4-R7,R10,R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   05B0A0E1           MOV      R11,R5
   \   00000018   0170A0E3           MOV      R7,#+1
   \                     ??insert_9:
   \   0000001C   0D10D0E5           LDRB     R1,[R0, #+13]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0700001A           BNE      ??insert_10
   \   00000028   101090E5           LDR      R1,[R0, #+16]
   \   0000002C   00B0A0E1           MOV      R11,R0
   \   00000030   010056E1           CMP      R6,R1
   \   00000034   00009035           LDRCC    R0,[R0, #+0]
   \   00000038   0170A033           MOVCC    R7,#+1
   \   0000003C   08009025           LDRCS    R0,[R0, #+8]
   \   00000040   0070A023           MOVCS    R7,#+0
   \   00000044   F4FFFFEA           B        ??insert_9
   \                     ??insert_10:
   \   00000048   0B00A0E1           MOV      R0,R11
   \   0000004C   01A0A0E3           MOV      R10,#+1
   \   00000050   000057E3           CMP      R7,#+0
   \   00000054   0B00000A           BEQ      ??insert_11
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   0700001A           BNE      ??insert_12
   \   00000064   0630A0E1           MOV      R3,R6
   \   00000068   0B20A0E1           MOV      R2,R11
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??insert_13:
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   ........           _BLF     ??_Insert_2,??_Insert??rA_1
   \   00000078   00008DE5           STR      R0,[SP, #+0]
   \   0000007C   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000080   0A0000EA           B        ??insert_14
   \                     ??insert_12:
   \   00000084   ........           _BLF     ??_DecP,??_DecP??rA
   \                     ??insert_11:
   \   00000088   101090E5           LDR      R1,[R0, #+16]
   \   0000008C   060051E1           CMP      R1,R6
   \   00000090   0300002A           BCS      ??insert_15
   \   00000094   0630A0E1           MOV      R3,R6
   \   00000098   0B20A0E1           MOV      R2,R11
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   F2FFFFEA           B        ??insert_13
   \                     ??insert_15:
   \   000000A4   00008DE5           STR      R0,[SP, #+0]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0410CDE5           STRB     R1,[SP, #+4]
   \                     ??insert_14:
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   030090E8           LDM      R0,{R0,R1}
   \   000000B8   030084E8           STM      R4,{R0,R1}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   F64CBDE8           POP      {R1,R2,R4-R7,R10,R11,LR}
   \   000000C4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
   \                     ??erase:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000055E1           CMP      R5,R0
   \   00000018   04005601           CMPEQ    R6,R4
   \   0000001C   0D00001A           BNE      ??erase_2
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??clear,??clear??rA
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0C0000EA           B        ??erase_3
   \                     ??erase_4:
   \   00000030   0570A0E1           MOV      R7,R5
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     ??_IncP,??_IncP??rA
   \   0000003C   0050A0E1           MOV      R5,R0
   \   00000040   0700A0E1           MOV      R0,R7
   \   00000044   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Erase,??_Erase??rA
   \   00000054   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??erase_2:
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   F3FFFF1A           BNE      ??erase_4
   \   00000060   0500A0E1           MOV      R0,R5
   \                     ??erase_3:
   \   00000064   F040BDE8           POP      {R4-R7,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs unsigned int _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
   \                     ??erase_1:
   \   00000000   73402DE9           PUSH     {R0,R1,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??equal_range,??equal_range??rA
   \   00000018   04509DE5           LDR      R5,[SP, #+4]
   \   0000001C   00009DE5           LDR      R0,[SP, #+0]
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   010000EA           B        ??erase_5
   \                     ??erase_6:
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??erase_5:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   FBFFFF1A           BNE      ??erase_6
   \   00000038   04209DE5           LDR      R2,[SP, #+4]
   \   0000003C   00109DE5           LDR      R1,[SP, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     ??erase,??erase??rA
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   7640BDE8           POP      {R1,R2,R4-R6,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
   \                     ??clear:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   041094E5           LDR      R1,[R4, #+4]
   \   0000000C   ........           _BLF     ??_Erase_1,??_Erase??rA_1
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000018   1040BDE8           POP      {R4,LR}
   \   0000001C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Pairii _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
   \                     ??equal_range:
   \   00000000   F3402DE9           PUSH     {R0,R1,R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0610A0E1           MOV      R1,R6
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     ??_Ubound,??_Ubound??rA
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     ??_Lbound,??_Lbound??rA
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   04708DE5           STR      R7,[SP, #+4]
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   030090E8           LDM      R0,{R0,R1}
   \   0000003C   030084E8           STM      R4,{R0,R1}
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   F640BDE8           POP      {R1,R2,R4-R7,LR}
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
   \                     ??_Erase_1:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0560A0E1           MOV      R6,R5
   \   00000010   060000EA           B        ??_Erase_28
   \                     ??_Erase_29:
   \   00000014   081096E5           LDR      R1,[R6, #+8]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   F7FFFFEB           BL       ??_Erase_1
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   0000002C   0650A0E1           MOV      R5,R6
   \                     ??_Erase_28:
   \   00000030   0D00D6E5           LDRB     R0,[R6, #+13]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F5FFFF0A           BEQ      ??_Erase_29
   \   0000003C   7040BDE8           POP      {R4-R6,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::iterator _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
   \                     ??_Insert_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_14
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_14:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
   \                     ??_Insert_2:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   1400A0E3           MOV      R0,#+20
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   0080B0E1           MOVS     R8,R0
   \   00000020   0600000A           BEQ      ??_Insert_15
   \   00000024   004088E5           STR      R4,[R8, #+0]
   \   00000028   046088E5           STR      R6,[R8, #+4]
   \   0000002C   084088E5           STR      R4,[R8, #+8]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   0C00C8E5           STRB     R0,[R8, #+12]
   \   00000038   0D00C8E5           STRB     R0,[R8, #+13]
   \   0000003C   107088E5           STR      R7,[R8, #+16]
   \                     ??_Insert_15:
   \   00000040   0830A0E1           MOV      R3,R8
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     ??_Insert,??_Insert??rA_2
   \   00000054   0800A0E1           MOV      R0,R8
   \   00000058   F041BDE8           POP      {R4-R8,LR}
   \   0000005C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
   \                     ??_Lbound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Lbound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   08209235           LDRCC    R2,[R2, #+8]
   \   0000001C   0200A021           MOVCS    R0,R2
   \   00000020   00209225           LDRCS    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Lbound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
   \                     ??_Ubound:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \                     ??_Ubound_1:
   \   00000004   0D30D2E5           LDRB     R3,[R2, #+13]
   \   00000008   000053E3           CMP      R3,#+0
   \   0000000C   1EFF2F11           BXNE     LR
   \   00000010   103092E5           LDR      R3,[R2, #+16]
   \   00000014   030051E1           CMP      R1,R3
   \   00000018   08209225           LDRCS    R2,[R2, #+8]
   \   0000001C   0200A031           MOVCC    R0,R2
   \   00000020   00209235           LDRCC    R2,[R2, #+0]
   \   00000024   F6FFFFEA           B        ??_Ubound_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs set<PRogramObjectBase *>::~set()
   \                     `?~set`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     ??clear,??clear??rA
   \   00000008   0040BDE8           POP      {LR}
   \   0000000C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_value<allocator<void>>::_Zero()
   \                     ??_Zero:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
   \   00000008   041080E5           STR      R1,[R0, #+4]
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
   \                     ??_Tidy0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0200000A           BEQ      ??_Tidy0_1
   \   00000010   041080E5           STR      R1,[R0, #+4]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Tidy0_1:
   \   0000001C   0040BDE8           POP      {LR}
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
   \                     ??_Assign:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   050054E1           CMP      R4,R5
   \   00000010   3000000A           BEQ      ??_Assign_1
   \   00000014   041095E5           LDR      R1,[R5, #+4]
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002041E0           SUB      R2,R1,R0
   \   00000020   2231B0E1           LSRS     R3,R2,#+2
   \   00000024   0400001A           BNE      ??_Assign_2
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000038   260000EA           B        ??_Assign_1
   \                     ??_Assign_2:
   \   0000003C   002094E5           LDR      R2,[R4, #+0]
   \   00000040   046094E5           LDR      R6,[R4, #+4]
   \   00000044   026046E0           SUB      R6,R6,R2
   \   00000048   260153E1           CMP      R3,R6, LSR #+2
   \   0000004C   0700008A           BHI      ??_Assign_3
   \   00000050   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   00000054   040095E5           LDR      R0,[R5, #+4]
   \   00000058   001095E5           LDR      R1,[R5, #+0]
   \   0000005C   010040E0           SUB      R0,R0,R1
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   2001A0E1           LSR      R0,R0,#+2
   \   00000068   000181E0           ADD      R0,R1,R0, LSL #+2
   \   0000006C   180000EA           B        ??_Assign_4
   \                     ??_Assign_3:
   \   00000070   086094E5           LDR      R6,[R4, #+8]
   \   00000074   026046E0           SUB      R6,R6,R2
   \   00000078   260153E1           CMP      R3,R6, LSR #+2
   \   0000007C   1300009A           BLS      ??_Assign_5
   \                     ??_Assign_6:
   \   00000080   000052E3           CMP      R2,#+0
   \   00000084   0100000A           BEQ      ??_Assign_7
   \   00000088   0200A0E1           MOV      R0,R2
   \   0000008C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Assign_7:
   \   00000090   040095E5           LDR      R0,[R5, #+4]
   \   00000094   001095E5           LDR      R1,[R5, #+0]
   \   00000098   016040E0           SUB      R6,R0,R1
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000A4   000056E3           CMP      R6,#+0
   \   000000A8   0A00000A           BEQ      ??_Assign_1
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000000B4   000084E5           STR      R0,[R4, #+0]
   \   000000B8   0020A0E1           MOV      R2,R0
   \   000000BC   042084E5           STR      R2,[R4, #+4]
   \   000000C0   020086E0           ADD      R0,R6,R2
   \   000000C4   080084E5           STR      R0,[R4, #+8]
   \   000000C8   041095E5           LDR      R1,[R5, #+4]
   \   000000CC   000095E5           LDR      R0,[R5, #+0]
   \                     ??_Assign_5:
   \   000000D0   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \                     ??_Assign_4:
   \   000000D4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Assign_1:
   \   000000D8   7140BDE8           POP      {R0,R4-R6,LR}
   \   000000DC   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
   \                     ??_Insert_3:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room_1,??_Make_room??rA
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_16:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_16
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
   \                     ??_Insert_4:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   005092E5           LDR      R5,[R2, #+0]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0120A0E3           MOV      R2,#+1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0060A003           MOVEQ    R6,#+0
   \   0000001C   00604110           SUBNE    R6,R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           _BLF     ??_Make_room,??_Make_room??rA_1
   \   00000028   0110A0E3           MOV      R1,#+1
   \                     ??_Insert_17:
   \   0000002C   ........           STR      R5,[R0], #+4
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   FCFFFF1A           BNE      ??_Insert_17
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   000086E0           ADD      R0,R6,R0
   \   00000040   7040BDE8           POP      {R4-R6,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PRogramObjectBase ** _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
   \                     ??_Make_room:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2900000A           BEQ      ??_Make_room_2
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2500003A           BCC      ??_Make_room_2
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1C00002A           BCS      ??_Make_room_3
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   000000A8   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000AC   080084E5           STR      R0,[R4, #+8]
   \   000000B0   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000B4   040084E5           STR      R0,[R4, #+4]
   \   000000B8   009084E5           STR      R9,[R4, #+0]
   \   000000BC   0A50A0E1           MOV      R5,R10
   \   000000C0   050000EA           B        ??_Make_room_2
   \                     ??_Make_room_3:
   \   000000C4   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000D0   040094E5           LDR      R0,[R4, #+4]
   \   000000D4   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000D8   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_2:
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   F047BDE8           POP      {R4-R10,LR}
   \   000000E4   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AnalogInput ** _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
   \                     ??_Make_room_1:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   081094E5           LDR      R1,[R4, #+8]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   001041E0           SUB      R1,R1,R0
   \   0000001C   2171A0E1           LSR      R7,R1,#+2
   \   00000020   041094E5           LDR      R1,[R4, #+4]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   000041E0           SUB      R0,R1,R0
   \   0000002C   2001A0E1           LSR      R0,R0,#+2
   \   00000030   2C00000A           BEQ      ??_Make_room_4
   \   00000034   C024E0E3           MVN      R2,#-1073741824
   \   00000038   002042E0           SUB      R2,R2,R0
   \   0000003C   060052E1           CMP      R2,R6
   \   00000040   2800003A           BCC      ??_Make_room_4
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   080057E1           CMP      R7,R8
   \   0000004C   1F00002A           BCS      ??_Make_room_5
   \   00000050   A700A0E1           LSR      R0,R7,#+1
   \   00000054   C014E0E3           MVN      R1,#-1073741824
   \   00000058   001041E0           SUB      R1,R1,R0
   \   0000005C   070051E1           CMP      R1,R7
   \   00000060   0070A033           MOVCC    R7,#+0
   \   00000064   07708020           ADDCS    R7,R0,R7
   \   00000068   080057E1           CMP      R7,R8
   \   0000006C   0870A031           MOVCC    R7,R8
   \   00000070   0701A0E1           LSL      R0,R7,#+2
   \   00000074   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000078   0090A0E1           MOV      R9,R0
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   0000008C   041094E5           LDR      R1,[R4, #+4]
   \   00000090   00A0A0E1           MOV      R10,R0
   \   00000094   06218AE0           ADD      R2,R10,R6, LSL #+2
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   ........           _BLF     _Copy_a4,??_Copy_a4??rA
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0100000A           BEQ      ??_Make_room_6
   \   000000AC   040084E5           STR      R0,[R4, #+4]
   \   000000B0   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     ??_Make_room_6:
   \   000000B4   070189E0           ADD      R0,R9,R7, LSL #+2
   \   000000B8   080084E5           STR      R0,[R4, #+8]
   \   000000BC   080189E0           ADD      R0,R9,R8, LSL #+2
   \   000000C0   040084E5           STR      R0,[R4, #+4]
   \   000000C4   009084E5           STR      R9,[R4, #+0]
   \   000000C8   0A50A0E1           MOV      R5,R10
   \   000000CC   050000EA           B        ??_Make_room_4
   \                     ??_Make_room_5:
   \   000000D0   062181E0           ADD      R2,R1,R6, LSL #+2
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   ........           _BLF     _Copy_backward_a4,??_Copy_backward_a4??rA
   \   000000DC   040094E5           LDR      R0,[R4, #+4]
   \   000000E0   060180E0           ADD      R0,R0,R6, LSL #+2
   \   000000E4   040084E5           STR      R0,[R4, #+4]
   \                     ??_Make_room_4:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   F047BDE8           POP      {R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
   \                     ??_Push_back0:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_2
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_3:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_3
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_4
   \                     ??_Push_back0_2:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_3,??_Insert??rA_3
   \                     ??_Push_back0_4:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
   \                     ??_Push_back0_1:
   \   00000000   02402DE9           PUSH     {R1,LR}
   \   00000004   041090E5           LDR      R1,[R0, #+4]
   \   00000008   082090E5           LDR      R2,[R0, #+8]
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   0800002A           BCS      ??_Push_back0_5
   \   00000014   00209DE5           LDR      R2,[SP, #+0]
   \   00000018   0130A0E3           MOV      R3,#+1
   \   0000001C   01C0A0E1           MOV      R12,R1
   \                     ??_Push_back0_6:
   \   00000020   ........           STR      R2,[R12], #+4
   \   00000024   013053E2           SUBS     R3,R3,#+1
   \   00000028   FCFFFF1A           BNE      ??_Push_back0_6
   \   0000002C   041081E2           ADD      R1,R1,#+4
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   010000EA           B        ??_Push_back0_7
   \                     ??_Push_back0_5:
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   ........           _BLF     ??_Insert_4,??_Insert??rA_4
   \                     ??_Push_back0_7:
   \   00000040   0140BDE8           POP      {R0,LR}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs vector<PRogramObjectBase *>::~vector()
   \                     `?~vector`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     ??_Tidy0,??_Tidy0??rA
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   1040BDE8           POP      {R4,LR}
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
   \                     `??operator+`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   34109FE5           LDR      R1,`??operator+_2`  ;; ??npos
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   003091E5           LDR      R3,[R1, #+0]
   \   00000024   0510A0E1           MOV      R1,R5
   \   00000028   ........           _BLF     ??append,??append??rA
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     ??string,??string??rA
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000048   1CD08DE2           ADD      SP,SP,#+28
   \   0000004C   3040BDE8           POP      {R4,R5,LR}
   \   00000050   1EFF2FE1           BX       LR               ;; return
   \                     `??operator+_2`:
   \   00000054   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
   \                     `??operator+_1`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           _BLF     ??string,??string??rA
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           _BLF     strlen,??strlen??rA
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   ........           _BLF     ??append_1,??append??rA_1
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??string,??string??rA
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000050   1CD08DE2           ADD      SP,SP,#+28
   \   00000054   7040BDE8           POP      {R4-R6,LR}
   \   00000058   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AlarmBasic::~AlarmBasic()
   \                     `?~AlarmBasic`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   0500000A           BEQ      `?~AlarmBasic_1`
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   ........           _BLF     `?~PRogramObjectBase`,`?~PRogramObjectBase??rA`
   \   0000001C   010015E3           TST      R5,#0x1
   \   00000020   0100000A           BEQ      `?~AlarmBasic_1`
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~AlarmBasic_1`:
   \   0000002C   3040BDE8           POP      {R4,R5,LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
      2          #pragma hdrstop
      3          #ifdef BORLAND
      4              #pragma package(smart_init)
      5          #endif
      6          
      7          //---------------------------------------------------------------------------

   \                                 In segment DATA_C, align 4, align-sorted
      8          vector<PRogramObjectBase *>PROTemperature::AllObjVector;
   \                     ?_0:
   \   00000000   ............       DC32 ?_1, ??AllObjVector, `?~vector`
   \              ............
   \   0000000C   ............       DC32 ?_3, ??ObjVector, `?~vector`
   \              ............
   \   00000018   ............       DC32 ?_5, ??ObjectSet, `?~set`
   \              ............

   \                                 In segment DATA_Z, align 4, align-sorted
      9          vector<PRogramObjectBase *>PROTemperature::ObjVector;
     10          set<PRogramObjectBase *>   PROTemperature::ObjectSet;
   \                     ??ObjectSet:
   \   00000000                      DS8 24
   \                     ??AllObjVector:
   \   00000018                      DS8 12
   \                     ??ObjVector:
   \   00000024                      DS8 12
     11          
     12          unsigned PROTemperature::MaxTempCnt             = 0;
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          PROTemperature::PROTemperature(bool AddToList, int LNumber) : PROXRefObject(AddToList) {
   \                     ??PROTemperature:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   ........           _BLF     ??PROXRefObject,??PROXRefObject??rA
   \   00000018   ........           LDR      R0,??DataTable8  ;; ??__vtbl
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
     15              LineNumber = LNumber;
   \   00000020   046084E5           STR      R6,[R4, #+4]
     16              Initiate();
     17              if (AddToList) {
   \   00000024   ........           LDR      R6,??DataTable9  ;; ??ObjectSet
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??Initiate
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   0800000A           BEQ      ??PROTemperature_2
     18                  ObjectSet.insert(this);
   \   00000038   0420A0E1           MOV      R2,R4
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   0C008DE2           ADD      R0,SP,#+12
   \   00000044   ........           _BLF     ??insert_1,??insert??rA
     19                  AllObjVector.push_back(this);
   \   00000048   0410A0E1           MOV      R1,R4
   \   0000004C   180086E2           ADD      R0,R6,#+24
   \   00000050   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
     20                  AddToIOObjectList();
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   ........           _BLF     ??AddToIOObjectList,??AddToIOObjectList??rA
     21              }
     22              SetIdNumber(this, 0,C_PRO_TEMP,AllObjVector);
   \                     ??PROTemperature_2:
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000064   181086E2           ADD      R1,R6,#+24
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   ........           _BLF     ??_Assign,??_Assign??rA
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   04308DE2           ADD      R3,SP,#+4
   \   0000007C   2E20A0E3           MOV      R2,#+46
   \   00000080   402E82E3           ORR      R2,R2,#0x400
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   ........           _BLF     ??SetIdNumber,??SetIdNumber??rA
   \   00000090   04008DE2           ADD      R0,SP,#+4
   \   00000094   ........           _BLF     `?~vector`,`?~vector??rA`
     23              CreateAlarms();
   \   00000098   A41094E5           LDR      R1,[R4, #+164]
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   681091E5           LDR      R1,[R1, #+104]
   \   000000A4   0FE0A0E1           MOV      LR,PC
   \   000000A8   11FF2FE1           BX       R1
     24          }
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   18D08DE2           ADD      SP,SP,#+24
   \   000000B4   ........           B        ?Subroutine34

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine34:
   \   00000000   7040BDE8           POP      {R4-R6,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          PROTemperature::PROTemperature(int IdNum, PROXRefObject *CreatedFromTank, bool AddToList, int LNumber) : PROXRefObject(AddToList) {
   \                     ??PROTemperature_1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
   \   00000008   2C709DE5           LDR      R7,[SP, #+44]
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   0250A0E1           MOV      R5,R2
   \   00000018   0310A0E1           MOV      R1,R3
   \   0000001C   ........           _BLF     ??PROXRefObject,??PROXRefObject??rA
   \   00000020   ........           LDR      R0,??DataTable8  ;; ??__vtbl
     27              if (CreatedFromTank) {
   \   00000024   000055E3           CMP      R5,#+0
   \   00000028   A40084E5           STR      R0,[R4, #+164]
   \   0000002C   0200000A           BEQ      ??PROTemperature_3
     28                  LineNumber = CreatedFromTank->GetLineNumber();
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     ??GetLineNumber,??GetLineNumber??rA
   \   00000038   0070A0E1           MOV      R7,R0
     29              }else{
     30                  LineNumber = LNumber;
   \                     ??PROTemperature_3:
   \   0000003C   047084E5           STR      R7,[R4, #+4]
     31              }
     32              Initiate();
     33              ObjectSet.insert(this);
   \   00000040   ........           LDR      R7,??DataTable9  ;; ??ObjectSet
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       ??Initiate
   \   0000004C   0420A0E1           MOV      R2,R4
   \   00000050   0710A0E1           MOV      R1,R7
   \   00000054   0C008DE2           ADD      R0,SP,#+12
   \   00000058   ........           _BLF     ??insert_1,??insert??rA
     34              AllObjVector.push_back(this);
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   180087E2           ADD      R0,R7,#+24
   \   00000064   ........           _BLF     ??_Push_back0_1,??_Push_back0??rA
     35              if (CreatedFromTank) {
   \   00000068   2E80A0E3           MOV      R8,#+46
   \   0000006C   408E88E3           ORR      R8,R8,#0x400
   \   00000070   000055E3           CMP      R5,#+0
   \   00000074   0E00000A           BEQ      ??PROTemperature_4
     36                  CreatedFromThisTank = CreatedFromTank;
   \   00000078   645184E5           STR      R5,[R4, #+356]
     37                  SetIdNumber(this, (C_PRO_TEMP << 16) | ( CreatedFromTank->IDNumber & 0x7fff),C_PRO_TEMP,AllObjVector,true);
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000084   181087E2           ADD      R1,R7,#+24
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           _BLF     ??_Assign,??_Assign??rA
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   9C0095E5           LDR      R0,[R5, #+156]
   \   0000009C   04308DE2           ADD      R3,SP,#+4
   \   000000A0   0820A0E1           MOV      R2,R8
   \   000000A4   8008A0E1           LSL      R0,R0,#+17
   \   000000A8   0218A0E1           MOV      R1,R2, LSL #+16
   \   000000AC   A01881E1           ORR      R1,R1,R0, LSR #+17
   \   000000B0   0B0000EA           B        ??PROTemperature_5
     38              } else {
     39                  AddToIOObjectList();
   \                     ??PROTemperature_4:
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           _BLF     ??AddToIOObjectList,??AddToIOObjectList??rA
     40          		SetIdNumber(this, IdNum,C_PRO_TEMP,AllObjVector);
   \   000000BC   0D00A0E1           MOV      R0,SP
   \   000000C0   ........           _BLF     ??_Zero,??_Zero??rA
   \   000000C4   181087E2           ADD      R1,R7,#+24
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   ........           _BLF     ??_Assign,??_Assign??rA
   \   000000D0   0000A0E3           MOV      R0,#+0
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   04308DE2           ADD      R3,SP,#+4
   \   000000DC   0820A0E1           MOV      R2,R8
   \   000000E0   0610A0E1           MOV      R1,R6
   \                     ??PROTemperature_5:
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   ........           _BLF     ??SetIdNumber,??SetIdNumber??rA
   \   000000EC   04008DE2           ADD      R0,SP,#+4
   \   000000F0   ........           _BLF     `?~vector`,`?~vector??rA`
   \   000000F4   04D08DE2           ADD      SP,SP,#+4
     41              }
     42          
     43          }
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   14D08DE2           ADD      SP,SP,#+20
   \   00000100   ........           B        ?Subroutine35

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine35:
   \   00000000   F041BDE8           POP      {R4-R8,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
     44          //---------------------------------------------------------------------------
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          void PROTemperature::Initiate(void) {
     47              HasTemp               = false;
   \                     ??Initiate:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   6021C0E5           STRB     R2,[R0, #+352]
     48              CreatedFromThisTank   = NULL;
   \   0000000C   641180E5           STR      R1,[R0, #+356]
     49              Type                  = C_PRO_TEMP;
   \   00000010   2E20A0E3           MOV      R2,#+46
   \   00000014   402E82E3           ORR      R2,R2,#0x400
   \   00000018   A02080E5           STR      R2,[R0, #+160]
     50              Temperature           = 0.0;
   \   0000001C   0120A0E1           MOV      R2,R1
   \   00000020   682180E5           STR      R2,[R0, #+360]
     51              Level                 = 0.0;
   \   00000024   6C2180E5           STR      R2,[R0, #+364]
     52              VaporTemp             = 0.0;
   \   00000028   702180E5           STR      R2,[R0, #+368]
     53              BottomTemp            = 0.0;
   \   0000002C   742180E5           STR      R2,[R0, #+372]
     54              BottomTempOK          = false;
   \   00000030   7821C0E5           STRB     R2,[R0, #+376]
     55              NotEmptyTank          = true;
   \   00000034   0120A0E3           MOV      R2,#+1
   \   00000038   7921C0E5           STRB     R2,[R0, #+377]
     56              StatusTemp            = GETVAL_FLOAT_NOT_LEGAL;
   \   0000003C   0520A0E3           MOV      R2,#+5
   \   00000040   582180E5           STR      R2,[R0, #+344]
     57              OutsideCnt            = MAX_OUTSIDE_WIN_CNT;            // Accept first reading
   \   00000044   1420A0E3           MOV      R2,#+20
   \   00000048   5C2180E5           STR      R2,[R0, #+348]
     58              HighTempLimit         = PROProjectInfo::HighTempLimit;
   \   0000004C   ........           LDR      R2,??DataTable13  ;; ??HighTempLimit
   \   00000050   002092E5           LDR      R2,[R2, #+0]
   \   00000054   8C2180E5           STR      R2,[R0, #+396]
     59              LowTempLimit          = PROProjectInfo::LowTempLimit;
   \   00000058   ........           LDR      R2,??DataTable14  ;; ??LowTempLimit
   \   0000005C   002092E5           LDR      R2,[R2, #+0]
   \   00000060   902180E5           STR      R2,[R0, #+400]
     60              TankType              = TANKTYPE_TEMPERATURE;
   \   00000064   0D20A0E3           MOV      R2,#+13
   \   00000068   542180E5           STR      R2,[R0, #+340]
     61              HighTempPtr           = NULL;
   \   0000006C   7C1180E5           STR      R1,[R0, #+380]
     62              LowTempPtr            = NULL;
   \   00000070   801180E5           STR      R1,[R0, #+384]
     63              HighBotTempPtr        = NULL;
   \   00000074   841180E5           STR      R1,[R0, #+388]
     64              LowBotTempPtr         = NULL;
   \   00000078   881180E5           STR      R1,[R0, #+392]
     65          }
   \   0000007C   1EFF2FE1           BX       LR               ;; return
     66          //---------------------------------------------------------------------------
     67          
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          void PROTemperature::CreateAlarms(void)
     70          {
   \                     ??CreateAlarms:
   \   00000000   3F402DE9           PUSH     {R0-R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     71              HighTempPtr    = new AlarmHighTemp(this);
   \   00000008   ........           _BLF     `??new AlarmHighTemp`,`??new AlarmHighTemp??rA`
   \   0000000C   7C0184E5           STR      R0,[R4, #+380]
     72              LowTempPtr     = new AlarmLowTemp(this);
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??new AlarmLowTemp`,`??new AlarmLowTemp??rA`
   \   00000018   800184E5           STR      R0,[R4, #+384]
     73              HighTempPtr->Limit = HighTempLimit;
   \   0000001C   7C2194E5           LDR      R2,[R4, #+380]
   \   00000020   8C0194E5           LDR      R0,[R4, #+396]
     74              LowTempPtr->Limit  = LowTempLimit;
     75              AlarmSet.insert(HighTempPtr);
     76              AlarmSet.insert(LowTempPtr);
     77          
     78              if ( AnalogInList.size() > 1) {
   \   00000024   4B5FA0E3           MOV      R5,#+300
   \   00000028   E40082E5           STR      R0,[R2, #+228]
   \   0000002C   800194E5           LDR      R0,[R4, #+384]
   \   00000030   901194E5           LDR      R1,[R4, #+400]
   \   00000034   E41080E5           STR      R1,[R0, #+228]
   \   00000038   E41084E2           ADD      R1,R4,#+228
   \   0000003C   08008DE2           ADD      R0,SP,#+8
   \   00000040   ........           _BLF     ??insert,??insert??rA_1
   \   00000044   802194E5           LDR      R2,[R4, #+384]
   \   00000048   E41084E2           ADD      R1,R4,#+228
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   ........           _BLF     ??insert,??insert??rA_1
   \   00000054   040085E0           ADD      R0,R5,R4
   \   00000058   041090E5           LDR      R1,[R0, #+4]
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000041E0           SUB      R0,R1,R0
   \   00000064   2001A0E1           LSR      R0,R0,#+2
   \   00000068   020050E3           CMP      R0,#+2
   \   0000006C   1200003A           BCC      ??CreateAlarms_1
     79                  HighBotTempPtr = new AlarmHighBotTemp(this);
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     `??new AlarmHighBotTemp`,`??new AlarmHighBotTemp??rA`
   \   00000078   840184E5           STR      R0,[R4, #+388]
     80                  LowBotTempPtr  = new AlarmLowBotTemp(this);
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           _BLF     `??new AlarmLowBotTemp`,`??new AlarmLowBotTemp??rA`
   \   00000084   880184E5           STR      R0,[R4, #+392]
     81                  HighBotTempPtr->Limit = HighTempLimit;
   \   00000088   842194E5           LDR      R2,[R4, #+388]
   \   0000008C   8C0194E5           LDR      R0,[R4, #+396]
   \   00000090   E40082E5           STR      R0,[R2, #+228]
     82                  LowBotTempPtr->Limit  = LowTempLimit;
   \   00000094   880194E5           LDR      R0,[R4, #+392]
   \   00000098   901194E5           LDR      R1,[R4, #+400]
   \   0000009C   E41080E5           STR      R1,[R0, #+228]
     83                  AlarmSet.insert(HighBotTempPtr);
   \   000000A0   E41084E2           ADD      R1,R4,#+228
   \   000000A4   0D00A0E1           MOV      R0,SP
   \   000000A8   ........           _BLF     ??insert,??insert??rA_1
     84                  AlarmSet.insert(LowBotTempPtr);
   \   000000AC   882194E5           LDR      R2,[R4, #+392]
   \   000000B0   E41084E2           ADD      R1,R4,#+228
   \   000000B4   08008DE2           ADD      R0,SP,#+8
   \   000000B8   ........           _BLF     ??insert,??insert??rA_1
     85          
     86              }
     87              AddAlarms(CompleteAlarmInfoList);
   \                     ??CreateAlarms_1:
   \   000000BC   FC1084E2           ADD      R1,R4,#+252
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   ........           _BLF     ??AddAlarms,??AddAlarms??rA
     88              MaxTempCnt = MAX(AnalogInList.size(), MaxTempCnt);
   \   000000C8   ........           LDR      R1,??DataTable7  ;; ??MaxTempCnt
   \   000000CC   040085E0           ADD      R0,R5,R4
   \   000000D0   042090E5           LDR      R2,[R0, #+4]
   \   000000D4   000090E5           LDR      R0,[R0, #+0]
   \   000000D8   000042E0           SUB      R0,R2,R0
   \   000000DC   002091E5           LDR      R2,[R1, #+0]
   \   000000E0   200152E1           CMP      R2,R0, LSR #+2
   \   000000E4   0500008A           BHI      ??CreateAlarms_2
   \   000000E8   040085E0           ADD      R0,R5,R4
   \   000000EC   042090E5           LDR      R2,[R0, #+4]
   \   000000F0   000090E5           LDR      R0,[R0, #+0]
   \   000000F4   000042E0           SUB      R0,R2,R0
   \   000000F8   2001A0E1           LSR      R0,R0,#+2
   \   000000FC   000081E5           STR      R0,[R1, #+0]
     89          }
   \                     ??CreateAlarms_2:
   \   00000100   3F40BDE8           POP      {R0-R5,LR}
   \   00000104   1EFF2FE1           BX       LR               ;; return
     90          //---------------------------------------------------------------------------
     91          

   \                                 In segment CODE, align 4, keep-with-next
     92          PROTemperature::~PROTemperature(void) {
   \                     `?~PROTemperature`:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   1400000A           BEQ      `?~PROTemperature_1`
   \   00000014   ........           LDR      R0,??DataTable8  ;; ??__vtbl
     93              ObjectSet.erase(this);
   \   00000018   ........           LDR      R6,??DataTable9  ;; ??ObjectSet
   \   0000001C   A40084E5           STR      R0,[R4, #+164]
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     ??erase_1,??erase??rA_1
     94              EraseFromVector(ObjVector, this);
   \   0000002C   0420A0E1           MOV      R2,R4
   \   00000030   241086E2           ADD      R1,R6,#+36
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     ??EraseFromVector,??EraseFromVector??rA
     95              EraseFromVector(AllObjVector, this);
   \   0000003C   0420A0E1           MOV      R2,R4
   \   00000040   181086E2           ADD      R1,R6,#+24
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           _BLF     ??EraseFromVector,??EraseFromVector??rA
     96          }
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           _BLF     `?~PROXRefObject`,`?~PROXRefObject??rA`
   \   00000058   010015E3           TST      R5,#0x1
   \   0000005C   0100000A           BEQ      `?~PROTemperature_1`
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \                     `?~PROTemperature_1`:
   \   00000068                      REQUIRE ?Subroutine34
   \   00000068                      ;; // Fall through to label ?Subroutine34
     97          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     98          void PROTemperature::SortAnalogInputs(void) {
   \                     ??SortAnalogInputs:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     99              PRogramObject::SortAnalogInputs();
   \   00000008   ........           _BLF     ??SortAnalogInputs_1,??SortAnalogInputs??rA
    100              for (unsigned j = 0; j < AnalogInList.size(); j++) {
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   4B6FA0E3           MOV      R6,#+300
   \   00000014   010000EA           B        ??SortAnalogInputs_2
    101                  if (AnalogInList[j]->GetIsPressureSns()) {
    102                      AnalogInList[j]->Location = C_AI_LOC_VAPOUR; // This should be the topmost sensor.
   \                     ??SortAnalogInputs_3:
   \   00000018   281180E5           STR      R1,[R0, #+296]
   \   0000001C   015085E2           ADD      R5,R5,#+1
   \                     ??SortAnalogInputs_2:
   \   00000020   040086E0           ADD      R0,R6,R4
   \   00000024   041090E5           LDR      R1,[R0, #+4]
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   000041E0           SUB      R0,R1,R0
   \   00000030   200155E1           CMP      R5,R0, LSR #+2
   \   00000034   0F00002A           BCS      ??SortAnalogInputs_4
   \   00000038   040096E7           LDR      R0,[R6, +R4]
   \   0000003C   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   00000040   ........           _BLF     ??GetIsPressureSns,??GetIsPressureSns??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   040096E7           LDR      R0,[R6, +R4]
   \   0000004C   0110A013           MOVNE    R1,#+1
   \   00000050   0010A003           MOVEQ    R1,#+0
   \   00000054   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000051E3           CMP      R1,#+0
   \   00000060   FD10A003           MOVEQ    R1,#+253
   \   00000064   801E8103           ORREQ    R1,R1,#0x800
   \   00000068   05108100           ADDEQ    R1,R1,R5
   \   0000006C   E210A013           MOVNE    R1,#+226
   \   00000070   801E8113           ORRNE    R1,R1,#0x800
   \   00000074   E7FFFFEA           B        ??SortAnalogInputs_3
    103                  } else {
    104                      AnalogInList[j]->Location = C_AI_LOC_TEMP1 + j;
    105                  }
    106              }
    107          }
   \                     ??SortAnalogInputs_4:
   \   00000078   ........           B        ?Subroutine34
    108          
    109          
    110          ///////////////////////////////////////////////////////////////
    111          //
    112          // Routines for the Configuration
    113          //
    114          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    115          void PROTemperature::WriteConfigToFile(TSNConfigString &ConfigString) {
   \                     ??WriteConfigToFile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   69DF4DE2           SUB      SP,SP,#+420
   \   00000008   0040A0E1           MOV      R4,R0
    116              if (!CreatedFromThisTank) {
   \   0000000C   640194E5           LDR      R0,[R4, #+356]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   E600001A           BNE      ??WriteConfigToFile_1
    117                  AnsiString LocalString;
    118                  AnsiString IdNumStr;
    119                  IdNumStr.cat_sprintf("0x%0x", IDNumber);
    120                  LocalString += KeyWord(C_PRO_TEMP) + TabStr1 + IdNumStr + CrLfStr;
   \   0000001C   9C839FE5           LDR      R8,??WriteConfigToFile_2  ;; TabStr1
   \   00000020   ........           LDR      R6,??DataTable16  ;; CrLfStr
   \   00000024   1C008DE2           ADD      R0,SP,#+28
   \   00000028   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000002C   5B0F8DE2           ADD      R0,SP,#+364
   \   00000030   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000034   9C3094E5           LDR      R3,[R4, #+156]
   \   00000038   ........           LDR      R2,??DataTable17  ;; `?<Constant "0x%0x">`
   \   0000003C   621F8DE2           ADD      R1,SP,#+392
   \   00000040   5B0F8DE2           ADD      R0,SP,#+364
   \   00000044   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   620F8DE2           ADD      R0,SP,#+392
   \   00000054   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000058   2E10A0E3           MOV      R1,#+46
   \   0000005C   401E81E3           ORR      R1,R1,#0x400
   \   00000060   E0008DE2           ADD      R0,SP,#+224
   \   00000064   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   E0108DE2           ADD      R1,SP,#+224
   \   00000070   C4008DE2           ADD      R0,SP,#+196
   \   00000074   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000078   5B2F8DE2           ADD      R2,SP,#+364
   \   0000007C   C4108DE2           ADD      R1,SP,#+196
   \   00000080   A8008DE2           ADD      R0,SP,#+168
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   0620A0E1           MOV      R2,R6
   \   0000008C   A8108DE2           ADD      R1,SP,#+168
   \   00000090   8C008DE2           ADD      R0,SP,#+140
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   ........           LDR      R0,??DataTable18  ;; ??npos
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   007090E5           LDR      R7,[R0, #+0]
   \   000000A4   8C108DE2           ADD      R1,SP,#+140
   \   000000A8   0730A0E1           MOV      R3,R7
   \   000000AC   1C008DE2           ADD      R0,SP,#+28
   \   000000B0   ........           _BLF     ??append,??append??rA
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   8C008DE2           ADD      R0,SP,#+140
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   A8008DE2           ADD      R0,SP,#+168
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   C4008DE2           ADD      R0,SP,#+196
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E4   0020A0E3           MOV      R2,#+0
   \   000000E8   0110A0E3           MOV      R1,#+1
   \   000000EC   E0008DE2           ADD      R0,SP,#+224
   \   000000F0   ........           _BLF     ??_Tidy,??_Tidy??rA
    121                  LocalString += MakeConfigString();   //common
   \   000000F4   A43094E5           LDR      R3,[R4, #+164]
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0C3093E5           LDR      R3,[R3, #+12]
   \   00000100   FC108DE2           ADD      R1,SP,#+252
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   0FE0A0E1           MOV      LR,PC
   \   0000010C   13FF2FE1           BX       R3
   \   00000110   0730A0E1           MOV      R3,R7
   \   00000114   0020A0E3           MOV      R2,#+0
   \   00000118   FC108DE2           ADD      R1,SP,#+252
   \   0000011C   1C008DE2           ADD      R0,SP,#+28
   \   00000120   ........           _BLF     ??append,??append??rA
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0110A0E3           MOV      R1,#+1
   \   0000012C   FC008DE2           ADD      R0,SP,#+252
   \   00000130   ........           _BLF     ??_Tidy,??_Tidy??rA
    122          
    123                  if (HighTempLimit != PROProjectInfo::HighTempLimit) {
   \   00000134   ........           LDR      R0,??DataTable13  ;; ??HighTempLimit
   \   00000138   8C9194E5           LDR      R9,[R4, #+396]
   \   0000013C   000090E5           LDR      R0,[R0, #+0]
   \   00000140   0910A0E1           MOV      R1,R9
   \   00000144   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   2500000A           BEQ      ??WriteConfigToFile_3
    124                      LocalString += TabStr1 + KeyWord(AL_LIM_HIGHTEMP) + FloatToAnsiString(HighTempLimit);
   \   00000150   0330A0E3           MOV      R3,#+3
   \   00000154   0720A0E3           MOV      R2,#+7
   \   00000158   0910A0E1           MOV      R1,R9
   \   0000015C   38008DE2           ADD      R0,SP,#+56
   \   00000160   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000164   1E10A0E3           MOV      R1,#+30
   \   00000168   E01E81E3           ORR      R1,R1,#0xE00
   \   0000016C   54008DE2           ADD      R0,SP,#+84
   \   00000170   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000174   54208DE2           ADD      R2,SP,#+84
   \   00000178   0810A0E1           MOV      R1,R8
   \   0000017C   70008DE2           ADD      R0,SP,#+112
   \   00000180   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000184   38208DE2           ADD      R2,SP,#+56
   \   00000188   70108DE2           ADD      R1,SP,#+112
   \   0000018C   0D00A0E1           MOV      R0,SP
   \   00000190   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000194   0730A0E1           MOV      R3,R7
   \   00000198   0020A0E3           MOV      R2,#+0
   \   0000019C   0D10A0E1           MOV      R1,SP
   \   000001A0   1C008DE2           ADD      R0,SP,#+28
   \   000001A4   ........           _BLF     ??append,??append??rA
   \   000001A8   0020A0E3           MOV      R2,#+0
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   0D00A0E1           MOV      R0,SP
   \   000001B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001B8   0020A0E3           MOV      R2,#+0
   \   000001BC   0110A0E3           MOV      R1,#+1
   \   000001C0   38008DE2           ADD      R0,SP,#+56
   \   000001C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   70008DE2           ADD      R0,SP,#+112
   \   000001D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   0110A0E3           MOV      R1,#+1
   \   000001E0   54008DE2           ADD      R0,SP,#+84
   \   000001E4   ........           _BLF     ??_Tidy,??_Tidy??rA
    125                  }
    126                  if (LowTempLimit != PROProjectInfo::LowTempLimit) {
   \                     ??WriteConfigToFile_3:
   \   000001E8   ........           LDR      R0,??DataTable14  ;; ??LowTempLimit
   \   000001EC   909194E5           LDR      R9,[R4, #+400]
   \   000001F0   000090E5           LDR      R0,[R0, #+0]
   \   000001F4   0910A0E1           MOV      R1,R9
   \   000001F8   ........           _BLF     __fNotEqual,??__fNotEqual??rA
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   2500000A           BEQ      ??WriteConfigToFile_4
    127                      LocalString += TabStr1 + KeyWord(AL_LIM_LOWTEMP) + FloatToAnsiString(LowTempLimit);
   \   00000204   0330A0E3           MOV      R3,#+3
   \   00000208   0720A0E3           MOV      R2,#+7
   \   0000020C   0910A0E1           MOV      R1,R9
   \   00000210   0D00A0E1           MOV      R0,SP
   \   00000214   ........           _BLF     ??FloatToAnsiString,??FloatToAnsiString??rA
   \   00000218   1F10A0E3           MOV      R1,#+31
   \   0000021C   E01E81E3           ORR      R1,R1,#0xE00
   \   00000220   70008DE2           ADD      R0,SP,#+112
   \   00000224   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000228   70208DE2           ADD      R2,SP,#+112
   \   0000022C   0810A0E1           MOV      R1,R8
   \   00000230   54008DE2           ADD      R0,SP,#+84
   \   00000234   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000238   0D20A0E1           MOV      R2,SP
   \   0000023C   54108DE2           ADD      R1,SP,#+84
   \   00000240   38008DE2           ADD      R0,SP,#+56
   \   00000244   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000248   0730A0E1           MOV      R3,R7
   \   0000024C   0020A0E3           MOV      R2,#+0
   \   00000250   38108DE2           ADD      R1,SP,#+56
   \   00000254   1C008DE2           ADD      R0,SP,#+28
   \   00000258   ........           _BLF     ??append,??append??rA
   \   0000025C   0020A0E3           MOV      R2,#+0
   \   00000260   0110A0E3           MOV      R1,#+1
   \   00000264   38008DE2           ADD      R0,SP,#+56
   \   00000268   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   0D00A0E1           MOV      R0,SP
   \   00000278   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000027C   0020A0E3           MOV      R2,#+0
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   54008DE2           ADD      R0,SP,#+84
   \   00000288   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000028C   0020A0E3           MOV      R2,#+0
   \   00000290   0110A0E3           MOV      R1,#+1
   \   00000294   70008DE2           ADD      R0,SP,#+112
   \   00000298   ........           _BLF     ??_Tidy,??_Tidy??rA
    128                  }
    129                  for (unsigned i = 0; i < AnalogInList.size(); i++) {
   \                     ??WriteConfigToFile_4:
   \   0000029C   0080A0E3           MOV      R8,#+0
   \   000002A0   4B9FA0E3           MOV      R9,#+300
   \   000002A4   120000EA           B        ??WriteConfigToFile_5
    130                      LocalString += AnalogInList[i]->MakeConfigString();     //common
   \                     ??WriteConfigToFile_6:
   \   000002A8   040099E7           LDR      R0,[R9, +R4]
   \   000002AC   0020A0E3           MOV      R2,#+0
   \   000002B0   083190E7           LDR      R3,[R0, +R8, LSL #+2]
   \   000002B4   0D10A0E1           MOV      R1,SP
   \   000002B8   0300A0E1           MOV      R0,R3
   \   000002BC   A43093E5           LDR      R3,[R3, #+164]
    131                  }
   \   000002C0   018088E2           ADD      R8,R8,#+1
   \   000002C4   0C3093E5           LDR      R3,[R3, #+12]
   \   000002C8   0FE0A0E1           MOV      LR,PC
   \   000002CC   13FF2FE1           BX       R3
   \   000002D0   0730A0E1           MOV      R3,R7
   \   000002D4   0020A0E3           MOV      R2,#+0
   \   000002D8   0D10A0E1           MOV      R1,SP
   \   000002DC   1C008DE2           ADD      R0,SP,#+28
   \   000002E0   ........           _BLF     ??append,??append??rA
   \   000002E4   0020A0E3           MOV      R2,#+0
   \   000002E8   0110A0E3           MOV      R1,#+1
   \   000002EC   0D00A0E1           MOV      R0,SP
   \   000002F0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \                     ??WriteConfigToFile_5:
   \   000002F4   040089E0           ADD      R0,R9,R4
   \   000002F8   041090E5           LDR      R1,[R0, #+4]
   \   000002FC   000090E5           LDR      R0,[R0, #+0]
   \   00000300   000041E0           SUB      R0,R1,R0
   \   00000304   200158E1           CMP      R8,R0, LSR #+2
   \   00000308   E6FFFF3A           BCC      ??WriteConfigToFile_6
    132          
    133                  LocalString += KeyWord(C_PRO_END) + CrLfStr;
   \   0000030C   FA1FA0E3           MOV      R1,#+1000
   \   00000310   4D0F8DE2           ADD      R0,SP,#+308
   \   00000314   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000318   0620A0E1           MOV      R2,R6
   \   0000031C   4D1F8DE2           ADD      R1,SP,#+308
   \   00000320   460F8DE2           ADD      R0,SP,#+280
   \   00000324   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000328   0730A0E1           MOV      R3,R7
   \   0000032C   0020A0E3           MOV      R2,#+0
   \   00000330   461F8DE2           ADD      R1,SP,#+280
   \   00000334   1C008DE2           ADD      R0,SP,#+28
   \   00000338   ........           _BLF     ??append,??append??rA
   \   0000033C   0020A0E3           MOV      R2,#+0
   \   00000340   0110A0E3           MOV      R1,#+1
   \   00000344   460F8DE2           ADD      R0,SP,#+280
   \   00000348   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000034C   0020A0E3           MOV      R2,#+0
   \   00000350   0110A0E3           MOV      R1,#+1
   \   00000354   4D0F8DE2           ADD      R0,SP,#+308
   \   00000358   ........           _BLF     ??_Tidy,??_Tidy??rA
    134                  LocalString += CrLfStr;
   \   0000035C   0730A0E1           MOV      R3,R7
   \   00000360   0020A0E3           MOV      R2,#+0
   \   00000364   0610A0E1           MOV      R1,R6
   \   00000368   1C008DE2           ADD      R0,SP,#+28
   \   0000036C   ........           _BLF     ??append,??append??rA
    135          
    136                  ConfigString.AddString(LocalString);
   \   00000370   1C108DE2           ADD      R1,SP,#+28
   \   00000374   540F8DE2           ADD      R0,SP,#+336
   \   00000378   ........           _BLF     ??string,??string??rA
   \   0000037C   541F8DE2           ADD      R1,SP,#+336
   \   00000380   0500A0E1           MOV      R0,R5
   \   00000384   ........           _BLF     ??AddString,??AddString??rA
   \   00000388   0020A0E3           MOV      R2,#+0
   \   0000038C   0110A0E3           MOV      R1,#+1
   \   00000390   540F8DE2           ADD      R0,SP,#+336
   \   00000394   ........           _BLF     ??_Tidy,??_Tidy??rA
    137              }
   \   00000398   0020A0E3           MOV      R2,#+0
   \   0000039C   0110A0E3           MOV      R1,#+1
   \   000003A0   5B0F8DE2           ADD      R0,SP,#+364
   \   000003A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000003A8   0020A0E3           MOV      R2,#+0
   \   000003AC   0110A0E3           MOV      R1,#+1
   \   000003B0   1C008DE2           ADD      R0,SP,#+28
   \   000003B4   ........           _BLF     ??_Tidy,??_Tidy??rA
    138          }
   \                     ??WriteConfigToFile_1:
   \   000003B8   69DF8DE2           ADD      SP,SP,#+420
   \   000003BC   ........           B        ?Subroutine36
   \                     ??WriteConfigToFile_2:
   \   000003C0   ........           DC32     TabStr1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine36:
   \   00000000   F043BDE8           POP      {R4-R9,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine36_0:
   \   00000008   ........           DC32     ??WriteAll
    139          //---------------------------------------------------------------------------
    140          

   \                                 In segment CODE, align 4, keep-with-next
    141          int PROTemperature::LoadConfigFromFile(TSNConfigString &ConfigString) {
   \                     ??LoadConfigFromFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   E4D04DE2           SUB      SP,SP,#+228
   \   00000008   0160A0E1           MOV      R6,R1
    142              SetLineNumber(ConfigString.LineCount);
   \   0000000C   1C1096E5           LDR      R1,[R6, #+28]
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   ........           _BLF     ??SetLineNumber,??SetLineNumber??rA
    143              bool NoError   = true;
   \   00000018   0190A0E3           MOV      R9,#+1
    144              int  ErrorLine = 0;
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
   \   00000024   0180E0E1           MVN      R8,R1
   \   00000028   4BAFA0E3           MOV      R10,#+300
    145              int  Key;
    146              do {
    147                  AnsiString InputKeyWord = ConfigString.NextWord(ErrorLine);
   \                     ??LoadConfigFromFile_1:
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   0D20A0E1           MOV      R2,SP
   \   00000034   20108DE2           ADD      R1,SP,#+32
    148                  if (ErrorLine) {
   \   00000038   ........           LDR      R11,??DataTable19  ;; `?<Constant "Temperature ">`
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   ........           _BLF     ??NextWord,??NextWord??rA
   \   00000044   00009DE5           LDR      R0,[SP, #+0]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1A00000A           BEQ      ??LoadConfigFromFile_2
    149                      if (ErrorLine != EOF) {
   \   00000050   080050E1           CMP      R0,R8
   \   00000054   B900000A           BEQ      ??LoadConfigFromFile_3
    150                          GiveConfigWarning((AnsiString)"Temperature " + Name, ErrorLine);
   \   00000058   0B10A0E1           MOV      R1,R11
   \   0000005C   58008DE2           ADD      R0,SP,#+88
   \   00000060   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000064   442085E2           ADD      R2,R5,#+68
   \   00000068   0010A0E1           MOV      R1,R0
   \   0000006C   04008DE2           ADD      R0,SP,#+4
   \   00000070   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000074   04108DE2           ADD      R1,SP,#+4
   \   00000078   3C008DE2           ADD      R0,SP,#+60
   \   0000007C   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000080   00109DE5           LDR      R1,[SP, #+0]
   \   00000084   ........           _BLF     ??GiveConfigWarning,??GiveConfigWarning??rA
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0110A0E3           MOV      R1,#+1
   \   00000090   3C008DE2           ADD      R0,SP,#+60
   \   00000094   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0110A0E3           MOV      R1,#+1
   \   000000A0   04008DE2           ADD      R0,SP,#+4
   \   000000A4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000A8   0020A0E3           MOV      R2,#+0
   \   000000AC   0110A0E3           MOV      R1,#+1
   \   000000B0   58008DE2           ADD      R0,SP,#+88
   \                     ??LoadConfigFromFile_4:
   \   000000B4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000B8   A00000EA           B        ??LoadConfigFromFile_3
    151                      }
    152                  } else {
    153                      Key = FindConfigKey(InputKeyWord);
   \                     ??LoadConfigFromFile_2:
   \   000000BC   20108DE2           ADD      R1,SP,#+32
   \   000000C0   04008DE2           ADD      R0,SP,#+4
   \   000000C4   ........           _BLF     ??string,??string??rA
   \   000000C8   04008DE2           ADD      R0,SP,#+4
   \   000000CC   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   000000D0   0070A0E1           MOV      R7,R0
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   04008DE2           ADD      R0,SP,#+4
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    154                      switch (Key) {
   \   000000E4   0700A0E1           MOV      R0,R7
   \   000000E8   FA0F50E3           CMP      R0,#+1000
   \   000000EC   EA10A013           MOVNE    R1,#+234
   \   000000F0   C01F8113           ORRNE    R1,R1,#0x300
   \   000000F4   01005011           CMPNE    R0,R1
   \   000000F8   9000000A           BEQ      ??LoadConfigFromFile_3
   \   000000FC   011081E3           ORR      R1,R1,#0x1
   \   00000100   010050E1           CMP      R0,R1
   \   00000104   3F00000A           BEQ      ??LoadConfigFromFile_5
   \   00000108   FB0F50E3           CMP      R0,#+1004
   \   0000010C   8B00000A           BEQ      ??LoadConfigFromFile_3
   \   00000110   5E10A0E3           MOV      R1,#+94
   \   00000114   801E81E3           ORR      R1,R1,#0x800
   \   00000118   010050E1           CMP      R0,R1
   \   0000011C   6000000A           BEQ      ??LoadConfigFromFile_6
   \   00000120   011081E3           ORR      R1,R1,#0x1
   \   00000124   010050E1           CMP      R0,R1
   \   00000128   6400000A           BEQ      ??LoadConfigFromFile_7
   \   0000012C   071081E2           ADD      R1,R1,#+7
   \   00000130   010050E1           CMP      R0,R1
   \   00000134   6800000A           BEQ      ??LoadConfigFromFile_8
   \   00000138   021081E2           ADD      R1,R1,#+2
   \   0000013C   010050E1           CMP      R0,R1
   \   00000140   6E00000A           BEQ      ??LoadConfigFromFile_9
   \   00000144   301081E2           ADD      R1,R1,#+48
   \   00000148   010050E1           CMP      R0,R1
   \   0000014C   B910A013           MOVNE    R1,#+185
   \   00000150   B01E8113           ORRNE    R1,R1,#0xB00
   \   00000154   01005011           CMPNE    R0,R1
   \   00000158   7800000A           BEQ      ??LoadConfigFromFile_3
   \   0000015C   1E10A0E3           MOV      R1,#+30
   \   00000160   E01E81E3           ORR      R1,R1,#0xE00
   \   00000164   010050E1           CMP      R0,R1
   \   00000168   3100000A           BEQ      ??LoadConfigFromFile_10
   \   0000016C   011081E3           ORR      R1,R1,#0x1
   \   00000170   010050E1           CMP      R0,R1
   \   00000174   3E00000A           BEQ      ??LoadConfigFromFile_11
   \   00000178   3410A0E3           MOV      R1,#+52
   \   0000017C   841D81E3           ORR      R1,R1,#0x2100
   \   00000180   010050E1           CMP      R0,R1
   \   00000184   2300000A           BEQ      ??LoadConfigFromFile_12
    155                      default:
    156                          GiveConfigWarning((AnsiString)"Temperature " + Name, InputKeyWord, ConfigString.LineCount);
   \   00000188   20108DE2           ADD      R1,SP,#+32
   \   0000018C   74008DE2           ADD      R0,SP,#+116
   \   00000190   ........           _BLF     ??string,??string??rA
   \   00000194   0B10A0E1           MOV      R1,R11
   \   00000198   C8008DE2           ADD      R0,SP,#+200
   \   0000019C   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   000001A0   0010A0E1           MOV      R1,R0
   \   000001A4   442085E2           ADD      R2,R5,#+68
   \   000001A8   AC008DE2           ADD      R0,SP,#+172
   \   000001AC   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001B0   AC108DE2           ADD      R1,SP,#+172
   \   000001B4   90008DE2           ADD      R0,SP,#+144
   \   000001B8   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000001BC   1C2096E5           LDR      R2,[R6, #+28]
   \   000001C0   74108DE2           ADD      R1,SP,#+116
   \   000001C4   ........           _BLF     ??GiveConfigWarning_1,??GiveConfigWarning??rA_1
   \   000001C8   0020A0E3           MOV      R2,#+0
   \   000001CC   0110A0E3           MOV      R1,#+1
   \   000001D0   74008DE2           ADD      R0,SP,#+116
   \   000001D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001D8   0020A0E3           MOV      R2,#+0
   \   000001DC   0110A0E3           MOV      R1,#+1
   \   000001E0   90008DE2           ADD      R0,SP,#+144
   \   000001E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   0110A0E3           MOV      R1,#+1
   \   000001F0   AC008DE2           ADD      R0,SP,#+172
   \   000001F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000001F8   0020A0E3           MOV      R2,#+0
   \   000001FC   0110A0E3           MOV      R1,#+1
   \   00000200   C8008DE2           ADD      R0,SP,#+200
   \   00000204   AAFFFFEA           B        ??LoadConfigFromFile_4
    157                          break;
    158                      case C_AI_END:      // If AI type not found can continue with this
    159                      case C_AL_END:
    160                      case C_PRO_END:
    161                      case C_PRO_END_COMMON:
    162                      case C_PRO_END_PRO:
    163                          break;
    164                      case C_PRO_START_PRO:
    165                          PRogramObject::LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_5:
   \   00000208   0610A0E1           MOV      R1,R6
   \   0000020C   0500A0E1           MOV      R0,R5
   \   00000210   ........           _BLF     ??LoadConfigString_1,??LoadConfigString??rA
   \   00000214   490000EA           B        ??LoadConfigFromFile_3
    166                          break;
    167                      case C_XREF_START:
    168                          LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_12:
   \   00000218   A42095E5           LDR      R2,[R5, #+164]
   \   0000021C   0610A0E1           MOV      R1,R6
   \   00000220   102092E5           LDR      R2,[R2, #+16]
   \   00000224   0500A0E1           MOV      R0,R5
   \   00000228   0FE0A0E1           MOV      LR,PC
   \   0000022C   12FF2FE1           BX       R2
   \   00000230   420000EA           B        ??LoadConfigFromFile_3
    169                          break;
    170                      case AL_LIM_HIGHTEMP:
    171                          HighTempLimit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_10:
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0D10A0E1           MOV      R1,SP
   \   0000023C   0600A0E1           MOV      R0,R6
   \   00000240   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000244   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000248   8C0185E5           STR      R0,[R5, #+396]
    172                          NoError = !ErrorLine;
   \   0000024C   00009DE5           LDR      R0,[SP, #+0]
   \   00000250   000050E3           CMP      R0,#+0
   \   00000254   0400001A           BNE      ??LoadConfigFromFile_13
    173                          if (NoError) {
    174                              HighTempPtr->Limit = HighTempLimit;
   \   00000258   7C0195E5           LDR      R0,[R5, #+380]
   \   0000025C   8C1195E5           LDR      R1,[R5, #+396]
   \                     ??LoadConfigFromFile_14:
   \   00000260   0190A0E3           MOV      R9,#+1
   \   00000264   E41080E5           STR      R1,[R0, #+228]
   \   00000268   340000EA           B        ??LoadConfigFromFile_3
    175                          }
   \                     ??LoadConfigFromFile_13:
   \   0000026C   0090A0E3           MOV      R9,#+0
   \   00000270   320000EA           B        ??LoadConfigFromFile_3
    176                          break;
    177                      case AL_LIM_LOWTEMP:
    178                          LowTempLimit = ConfigString.ReadDouble(ErrorLine);
   \                     ??LoadConfigFromFile_11:
   \   00000274   0020A0E3           MOV      R2,#+0
   \   00000278   0D10A0E1           MOV      R1,SP
   \   0000027C   0600A0E1           MOV      R0,R6
   \   00000280   ........           _BLF     ??ReadDouble,??ReadDouble??rA
   \   00000284   ........           _BLF     __doubleToFloat,??__doubleToFloat??rA
   \   00000288   900185E5           STR      R0,[R5, #+400]
    179                          NoError = !ErrorLine;
   \   0000028C   00009DE5           LDR      R0,[SP, #+0]
   \   00000290   000050E3           CMP      R0,#+0
   \   00000294   F4FFFF1A           BNE      ??LoadConfigFromFile_13
    180                          if (NoError) {
    181                              LowTempPtr->Limit = LowTempLimit;
   \   00000298   800195E5           LDR      R0,[R5, #+384]
   \   0000029C   901195E5           LDR      R1,[R5, #+400]
   \   000002A0   EEFFFFEA           B        ??LoadConfigFromFile_14
    182                          }
    183                          break;
    184                      case C_AI_Pt100:
    185                          {
    186                              AITempSensor_Pt100 *AnalogInPtr = new AITempSensor_Pt100();
   \                     ??LoadConfigFromFile_6:
   \   000002A4   630FA0E3           MOV      R0,#+396
   \   000002A8   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000002AC   00B0B0E1           MOVS     R11,R0
   \   000002B0   1800000A           BEQ      ??LoadConfigFromFile_15
   \   000002B4   0010A0E3           MOV      R1,#+0
   \   000002B8   ........           _BLF     ??AITempSensor_Pt100,??AITempSensor_Pt100??rA
   \   000002BC   160000EA           B        ??LoadConfigFromFile_16
    187                              AnalogInPtr->LoadConfigString(ConfigString);
    188                              AnalogInList.push_back((AnalogInput *)AnalogInPtr);
    189                          }
    190                          break;
    191                      case C_AI_Pt1000:
    192                          {
    193                              AITempSensor_Pt1000 *AnalogInPtr = new AITempSensor_Pt1000();
   \                     ??LoadConfigFromFile_7:
   \   000002C0   640FA0E3           MOV      R0,#+400
   \   000002C4   ........           _BLF     `??operator new`,`??operator new??rA`
   \   000002C8   00B0B0E1           MOVS     R11,R0
   \   000002CC   1100000A           BEQ      ??LoadConfigFromFile_15
   \   000002D0   0010A0E3           MOV      R1,#+0
   \   000002D4   ........           _BLF     ??AITempSensor_Pt1000,??AITempSensor_Pt1000??rA
   \   000002D8   0F0000EA           B        ??LoadConfigFromFile_16
    194                              AnalogInPtr->LoadConfigString(ConfigString);
    195                              AnalogInList.push_back((AnalogInput *)AnalogInPtr);
    196                          }
    197                          break;
    198                      case C_AI_TEMP_mA:
    199                          {
    200                              AITempSensor_mA *AnalogInPtr = new AITempSensor_mA(Key);
   \                     ??LoadConfigFromFile_8:
   \   000002DC   ........           _BLF     `??new AITempSensor_mA`,`??new AITempSensor_mA??rA`
   \   000002E0   0040A0E1           MOV      R4,R0
    201                              AnalogInPtr->LoadConfigString(ConfigString);
   \   000002E4   A42094E5           LDR      R2,[R4, #+164]
   \   000002E8   0610A0E1           MOV      R1,R6
   \   000002EC   102092E5           LDR      R2,[R2, #+16]
   \   000002F0   0FE0A0E1           MOV      LR,PC
   \   000002F4   12FF2FE1           BX       R2
    202                              AnalogInList.push_back((AnalogInput *)AnalogInPtr);
   \   000002F8   0410A0E1           MOV      R1,R4
   \   000002FC   0D0000EA           B        ??LoadConfigFromFile_17
    203                          }
    204                          break;
    205                      case C_AI_TEMP_AD590:
    206                          {
    207                              AITempSensor_AD590 *AnalogInPtr = new AITempSensor_AD590();
   \                     ??LoadConfigFromFile_9:
   \   00000300   630FA0E3           MOV      R0,#+396
   \   00000304   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000308   00B0B0E1           MOVS     R11,R0
   \   0000030C   0100000A           BEQ      ??LoadConfigFromFile_15
   \   00000310   ........           _BLF     ??AITempSensor_AD590,??AITempSensor_AD590??rA
   \   00000314   000000EA           B        ??LoadConfigFromFile_16
   \                     ??LoadConfigFromFile_15:
   \   00000318   00B0A0E3           MOV      R11,#+0
    208                              AnalogInPtr->LoadConfigString(ConfigString);
   \                     ??LoadConfigFromFile_16:
   \   0000031C   A4209BE5           LDR      R2,[R11, #+164]
   \   00000320   0610A0E1           MOV      R1,R6
   \   00000324   102092E5           LDR      R2,[R2, #+16]
   \   00000328   0B00A0E1           MOV      R0,R11
   \   0000032C   0FE0A0E1           MOV      LR,PC
   \   00000330   12FF2FE1           BX       R2
    209                              AnalogInList.push_back((AnalogInput *)AnalogInPtr);
   \   00000334   0B10A0E1           MOV      R1,R11
   \                     ??LoadConfigFromFile_17:
   \   00000338   05008AE0           ADD      R0,R10,R5
   \   0000033C   ........           _BLF     ??_Push_back0,??_Push_back0??rA_1
    210                          }
    211                          break;
    212                      }
    213                  }
    214              }while (NoError && (ErrorLine != EOF) && (Key != C_PRO_END));
   \                     ??LoadConfigFromFile_3:
   \   00000340   0020A0E3           MOV      R2,#+0
   \   00000344   0110A0E3           MOV      R1,#+1
   \   00000348   20008DE2           ADD      R0,SP,#+32
   \   0000034C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000350   000059E3           CMP      R9,#+0
   \   00000354   00009D15           LDRNE    R0,[SP, #+0]
   \   00000358   08005011           CMPNE    R0,R8
   \   0000035C   FA0F5713           CMPNE    R7,#+1000
   \   00000360   31FFFF1A           BNE      ??LoadConfigFromFile_1
    215              CreateAlarms();
   \   00000364   A41095E5           LDR      R1,[R5, #+164]
   \   00000368   0500A0E1           MOV      R0,R5
   \   0000036C   681091E5           LDR      R1,[R1, #+104]
   \   00000370   0FE0A0E1           MOV      LR,PC
   \   00000374   11FF2FE1           BX       R1
    216              SetChildUserRights();
   \   00000378   0500A0E1           MOV      R0,R5
   \   0000037C   ........           _BLF     ??SetChildUserRights,??SetChildUserRights??rA
    217              CopyAnalogList();
   \   00000380   0500A0E1           MOV      R0,R5
   \   00000384   ........           _BLF     ??CopyAnalogList,??CopyAnalogList??rA
    218              AddSensorAlarms();
   \   00000388   0500A0E1           MOV      R0,R5
   \   0000038C   ........           _BLF     ??AddSensorAlarms,??AddSensorAlarms??rA
    219              return ErrorLine;
   \   00000390   00009DE5           LDR      R0,[SP, #+0]
   \   00000394   E4D08DE2           ADD      SP,SP,#+228
   \   00000398   ........           B        ?Subroutine37
    220          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine37:
   \   00000000   F04FBDE8           POP      {R4-R11,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   \                     ??Subroutine37_0:
   \   00000008   ........           DC32     NewLineStr
    221          //---------------------------------------------------------------------------
    222          
    223          ///////////////////////////////////////////////////////////////
    224          //
    225          // Routines for Saving of Settings
    226          //
    227          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    228          void PROTemperature::SaveSettings(TSNConfigString *SettingsString) {
   \                     ??SaveSettings:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   4DDF4DE2           SUB      SP,SP,#+308
   \   00000008   0040A0E1           MOV      R4,R0
    229              if (IsModified || WriteAll) {
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   ........           LDREQ    R0,??Subroutine36_0  ;; ??WriteAll
   \   0000001C   0000D005           LDRBEQ   R0,[R0, #+0]
   \   00000020   00005003           CMPEQ    R0,#+0
   \   00000024   9800000A           BEQ      ??SaveSettings_2
    230                  IsModified = false;
    231                  AnsiString LocalString;
    232                  AnsiString IdNumStr;
    233                  IdNumStr.cat_sprintf("0x%0x", IDNumber);
    234                  LocalString += KeyWord(Type) + IdNumStr + CrLfStr;
   \   00000028   ........           LDR      R6,??DataTable16  ;; CrLfStr
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   0000C4E5           STRB     R0,[R4, #+0]
   \   00000034   1C008DE2           ADD      R0,SP,#+28
   \   00000038   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   0000003C   FC008DE2           ADD      R0,SP,#+252
   \   00000040   ........           _BLF     ??AnsiString,??AnsiString??rA
   \   00000044   9C3094E5           LDR      R3,[R4, #+156]
   \   00000048   ........           LDR      R2,??DataTable17  ;; `?<Constant "0x%0x">`
   \   0000004C   0080A0E3           MOV      R8,#+0
   \   00000050   461F8DE2           ADD      R1,SP,#+280
   \   00000054   FC008DE2           ADD      R0,SP,#+252
   \   00000058   ........           _BLF     ??cat_sprintf,??cat_sprintf??rA
   \   0000005C   0820A0E1           MOV      R2,R8
   \   00000060   0110A0E3           MOV      R1,#+1
   \   00000064   460F8DE2           ADD      R0,SP,#+280
   \   00000068   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000006C   A01094E5           LDR      R1,[R4, #+160]
   \   00000070   8C008DE2           ADD      R0,SP,#+140
   \   00000074   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   00000078   FC208DE2           ADD      R2,SP,#+252
   \   0000007C   8C108DE2           ADD      R1,SP,#+140
   \   00000080   70008DE2           ADD      R0,SP,#+112
   \   00000084   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000088   0620A0E1           MOV      R2,R6
   \   0000008C   70108DE2           ADD      R1,SP,#+112
   \   00000090   54008DE2           ADD      R0,SP,#+84
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   ........           LDR      R0,??DataTable18  ;; ??npos
   \   0000009C   0820A0E1           MOV      R2,R8
   \   000000A0   007090E5           LDR      R7,[R0, #+0]
   \   000000A4   54108DE2           ADD      R1,SP,#+84
   \   000000A8   0730A0E1           MOV      R3,R7
   \   000000AC   1C008DE2           ADD      R0,SP,#+28
   \   000000B0   ........           _BLF     ??append,??append??rA
   \   000000B4   0820A0E1           MOV      R2,R8
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   54008DE2           ADD      R0,SP,#+84
   \   000000C0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C4   0820A0E1           MOV      R2,R8
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   70008DE2           ADD      R0,SP,#+112
   \   000000D0   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D4   0820A0E1           MOV      R2,R8
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   8C008DE2           ADD      R0,SP,#+140
   \   000000E0   ........           _BLF     ??_Tidy,??_Tidy??rA
    235                  set<AlarmBasic *>::iterator pBIt;
    236                  for (pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++) {
   \   000000E4   E49094E5           LDR      R9,[R4, #+228]
   \   000000E8   1A0000EA           B        ??SaveSettings_3
    237                      AlarmBasic *element = *pBIt;
   \                     ??SaveSettings_4:
   \   000000EC   100099E5           LDR      R0,[R9, #+16]
    238                      if (element && !element->Locked) LocalString += (AnsiString)element->SaveSettings();
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1400000A           BEQ      ??SaveSettings_5
   \   000000F8   E810D0E5           LDRB     R1,[R0, #+232]
   \   000000FC   000051E3           CMP      R1,#+0
   \   00000100   1100001A           BNE      ??SaveSettings_5
   \   00000104   0D10A0E1           MOV      R1,SP
   \   00000108   ........           _BLF     ??SaveSettings_1,??SaveSettings??rA
   \   0000010C   0D10A0E1           MOV      R1,SP
   \   00000110   38008DE2           ADD      R0,SP,#+56
   \   00000114   ........           _BLF     ??string,??string??rA
   \   00000118   0730A0E1           MOV      R3,R7
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   38108DE2           ADD      R1,SP,#+56
   \   00000124   1C008DE2           ADD      R0,SP,#+28
   \   00000128   ........           _BLF     ??append,??append??rA
   \   0000012C   0820A0E1           MOV      R2,R8
   \   00000130   0110A0E3           MOV      R1,#+1
   \   00000134   38008DE2           ADD      R0,SP,#+56
   \   00000138   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000013C   0820A0E1           MOV      R2,R8
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   0D00A0E1           MOV      R0,SP
   \   00000148   ........           _BLF     ??_Tidy,??_Tidy??rA
    239                  }
   \                     ??SaveSettings_5:
   \   0000014C   0900A0E1           MOV      R0,R9
   \   00000150   ........           _BLF     ??_IncP,??_IncP??rA
   \   00000154   0090A0E1           MOV      R9,R0
   \                     ??SaveSettings_3:
   \   00000158   E40084E2           ADD      R0,R4,#+228
   \   0000015C   000059E1           CMP      R9,R0
   \   00000160   E1FFFF1A           BNE      ??SaveSettings_4
    240                  for (unsigned j = 0; j < AnalogInList.size(); j++) {
   \   00000164   4B9FA0E3           MOV      R9,#+300
   \   00000168   160000EA           B        ??SaveSettings_6
    241                      if (AnalogInList[j]) LocalString += AnalogInList[j]->SaveAISettings();
   \                     ??SaveSettings_7:
   \   0000016C   040099E7           LDR      R0,[R9, +R4]
   \   00000170   080180E0           ADD      R0,R0,R8, LSL #+2
   \   00000174   001090E5           LDR      R1,[R0, #+0]
   \   00000178   000051E3           CMP      R1,#+0
   \   0000017C   1000000A           BEQ      ??SaveSettings_8
   \   00000180   0130A0E1           MOV      R3,R1
   \   00000184   0300A0E1           MOV      R0,R3
   \   00000188   A43093E5           LDR      R3,[R3, #+164]
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   6C3093E5           LDR      R3,[R3, #+108]
   \   00000194   0D10A0E1           MOV      R1,SP
   \   00000198   0FE0A0E1           MOV      LR,PC
   \   0000019C   13FF2FE1           BX       R3
   \   000001A0   0730A0E1           MOV      R3,R7
   \   000001A4   0020A0E3           MOV      R2,#+0
   \   000001A8   0D10A0E1           MOV      R1,SP
   \   000001AC   1C008DE2           ADD      R0,SP,#+28
   \   000001B0   ........           _BLF     ??append,??append??rA
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0110A0E3           MOV      R1,#+1
   \   000001BC   0D00A0E1           MOV      R0,SP
   \   000001C0   ........           _BLF     ??_Tidy,??_Tidy??rA
    242                  }
   \                     ??SaveSettings_8:
   \   000001C4   018088E2           ADD      R8,R8,#+1
   \                     ??SaveSettings_6:
   \   000001C8   040089E0           ADD      R0,R9,R4
   \   000001CC   041090E5           LDR      R1,[R0, #+4]
   \   000001D0   000090E5           LDR      R0,[R0, #+0]
   \   000001D4   000041E0           SUB      R0,R1,R0
   \   000001D8   200158E1           CMP      R8,R0, LSR #+2
   \   000001DC   E2FFFF3A           BCC      ??SaveSettings_7
    243                  LocalString += KeyWord(C_PRO_END) + CrLfStr;
   \   000001E0   FA1FA0E3           MOV      R1,#+1000
   \   000001E4   C4008DE2           ADD      R0,SP,#+196
   \   000001E8   ........           _BLF     ??KeyWord,??KeyWord??rA
   \   000001EC   0620A0E1           MOV      R2,R6
   \   000001F0   C4108DE2           ADD      R1,SP,#+196
   \   000001F4   A8008DE2           ADD      R0,SP,#+168
   \   000001F8   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000001FC   0730A0E1           MOV      R3,R7
   \   00000200   0020A0E3           MOV      R2,#+0
   \   00000204   A8108DE2           ADD      R1,SP,#+168
   \   00000208   1C008DE2           ADD      R0,SP,#+28
   \   0000020C   ........           _BLF     ??append,??append??rA
   \   00000210   0020A0E3           MOV      R2,#+0
   \   00000214   0110A0E3           MOV      R1,#+1
   \   00000218   A8008DE2           ADD      R0,SP,#+168
   \   0000021C   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000220   0020A0E3           MOV      R2,#+0
   \   00000224   0110A0E3           MOV      R1,#+1
   \   00000228   C4008DE2           ADD      R0,SP,#+196
   \   0000022C   ........           _BLF     ??_Tidy,??_Tidy??rA
    244                  LocalString += CrLfStr;
   \   00000230   0730A0E1           MOV      R3,R7
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0610A0E1           MOV      R1,R6
   \   0000023C   1C008DE2           ADD      R0,SP,#+28
   \   00000240   ........           _BLF     ??append,??append??rA
    245                  SettingsString->AddString(LocalString);
   \   00000244   1C108DE2           ADD      R1,SP,#+28
   \   00000248   E0008DE2           ADD      R0,SP,#+224
   \   0000024C   ........           _BLF     ??string,??string??rA
   \   00000250   E0108DE2           ADD      R1,SP,#+224
   \   00000254   0500A0E1           MOV      R0,R5
   \   00000258   ........           _BLF     ??AddString,??AddString??rA
   \   0000025C   0020A0E3           MOV      R2,#+0
   \   00000260   0110A0E3           MOV      R1,#+1
   \   00000264   E0008DE2           ADD      R0,SP,#+224
   \   00000268   ........           _BLF     ??_Tidy,??_Tidy??rA
    246              }
   \   0000026C   0020A0E3           MOV      R2,#+0
   \   00000270   0110A0E3           MOV      R1,#+1
   \   00000274   FC008DE2           ADD      R0,SP,#+252
   \   00000278   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000027C   0020A0E3           MOV      R2,#+0
   \   00000280   0110A0E3           MOV      R1,#+1
   \   00000284   1C008DE2           ADD      R0,SP,#+28
   \   00000288   ........           _BLF     ??_Tidy,??_Tidy??rA
    247          }
   \                     ??SaveSettings_2:
   \   0000028C   4DDF8DE2           ADD      SP,SP,#+308
   \   00000290                      REQUIRE ?Subroutine36
   \   00000290                      ;; // Fall through to label ?Subroutine36
    248          

   \                                 In segment CODE, align 4, keep-with-next
    249          bool PROTemperature::RestoreSettings(TSNConfigString *SettingsString) {
   \                     ??RestoreSettings:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    250              bool NoError   = true;
    251              int  ErrorLine = 0;
   \   00000004   ........           LDR      R8,??Subroutine37_0  ;; NewLineStr
   \   00000008   ........           LDR      R9,??DataTable19  ;; `?<Constant "Temperature ">`
   \   0000000C   CFDF4DE2           SUB      SP,SP,#+828
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0160A0E3           MOV      R6,#+1
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
    252              int  Key;
    253              do {
    254                  AnsiString InputKeyWord = SettingsString->NextWord(ErrorLine);
   \                     ??RestoreSettings_2:
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   E4108DE2           ADD      R1,SP,#+228
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     ??NextWord,??NextWord??rA
    255                  if (ErrorLine) {
   \   00000038   00009DE5           LDR      R0,[SP, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   3800000A           BEQ      ??RestoreSettings_3
    256                      if (ErrorLine != EOF) {
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   3301000A           BEQ      ??RestoreSettings_4
    257                          RestoreSettingsWarning((AnsiString)"Temperature " + Name + ":\nUnknown error started at line:" + (AnsiString)ErrorLine + NewLineStr);
   \   0000004C   0010A0E1           MOV      R1,R0
   \   00000050   74008DE2           ADD      R0,SP,#+116
   \   00000054   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   00000058   00A0A0E1           MOV      R10,R0
   \   0000005C   0910A0E1           MOV      R1,R9
   \   00000060   90008DE2           ADD      R0,SP,#+144
   \   00000064   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   00000068   442084E2           ADD      R2,R4,#+68
   \   0000006C   0010A0E1           MOV      R1,R0
   \   00000070   04008DE2           ADD      R0,SP,#+4
   \   00000074   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000078   102089E2           ADD      R2,R9,#+16
   \   0000007C   04108DE2           ADD      R1,SP,#+4
   \   00000080   20008DE2           ADD      R0,SP,#+32
   \   00000084   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   00000088   0A20A0E1           MOV      R2,R10
   \   0000008C   20108DE2           ADD      R1,SP,#+32
   \   00000090   3C008DE2           ADD      R0,SP,#+60
   \   00000094   ........           _BLF     `??operator+`,`??operator+??rA`
   \   00000098   0820A0E1           MOV      R2,R8
   \   0000009C   3C108DE2           ADD      R1,SP,#+60
   \   000000A0   58008DE2           ADD      R0,SP,#+88
   \   000000A4   ........           _BLF     `??operator+`,`??operator+??rA`
   \   000000A8   58108DE2           ADD      R1,SP,#+88
   \   000000AC   AC008DE2           ADD      R0,SP,#+172
   \   000000B0   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   000000B4   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0110A0E3           MOV      R1,#+1
   \   000000C0   AC008DE2           ADD      R0,SP,#+172
   \   000000C4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   58008DE2           ADD      R0,SP,#+88
   \   000000D4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   3C008DE2           ADD      R0,SP,#+60
   \   000000E4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   74008DE2           ADD      R0,SP,#+116
   \   000000F4   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000000F8   0020A0E3           MOV      R2,#+0
   \   000000FC   0110A0E3           MOV      R1,#+1
   \   00000100   20008DE2           ADD      R0,SP,#+32
   \   00000104   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   04008DE2           ADD      R0,SP,#+4
   \   00000114   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0110A0E3           MOV      R1,#+1
   \   00000120   90008DE2           ADD      R0,SP,#+144
   \   00000124   FB0000EA           B        ??RestoreSettings_5
    258                      }
    259                  } else {
    260                      Key = FindConfigKey(InputKeyWord);
   \                     ??RestoreSettings_3:
   \   00000128   E4108DE2           ADD      R1,SP,#+228
   \   0000012C   04008DE2           ADD      R0,SP,#+4
   \   00000130   ........           _BLF     ??string,??string??rA
   \   00000134   04008DE2           ADD      R0,SP,#+4
   \   00000138   ........           _BLF     ??FindConfigKey,??FindConfigKey??rA
   \   0000013C   0070A0E1           MOV      R7,R0
   \   00000140   0020A0E3           MOV      R2,#+0
   \   00000144   0110A0E3           MOV      R1,#+1
   \   00000148   04008DE2           ADD      R0,SP,#+4
   \   0000014C   ........           _BLF     ??_Tidy,??_Tidy??rA
    261                      switch (Key) {
   \   00000150   FA0F57E3           CMP      R7,#+1000
   \   00000154   EA10A013           MOVNE    R1,#+234
   \   00000158   C01F8113           ORRNE    R1,R1,#0x300
   \   0000015C   01005711           CMPNE    R7,R1
   \   00000160   FB0F5713           CMPNE    R7,#+1004
   \   00000164   AF10A013           MOVNE    R1,#+175
   \   00000168   501E8113           ORRNE    R1,R1,#0x500
   \   0000016C   01005711           CMPNE    R7,R1
   \   00000170   6D00000A           BEQ      ??RestoreSettings_6
   \   00000174   3E10A0E3           MOV      R1,#+62
   \   00000178   801E81E3           ORR      R1,R1,#0x800
   \   0000017C   010057E1           CMP      R7,R1
   \   00000180   01108113           ORRNE    R1,R1,#0x1
   \   00000184   01005711           CMPNE    R7,R1
   \   00000188   1F108112           ADDNE    R1,R1,#+31
   \   0000018C   01005711           CMPNE    R7,R1
   \   00000190   01108113           ORRNE    R1,R1,#0x1
   \   00000194   01005711           CMPNE    R7,R1
   \   00000198   07108112           ADDNE    R1,R1,#+7
   \   0000019C   01005711           CMPNE    R7,R1
   \   000001A0   02108112           ADDNE    R1,R1,#+2
   \   000001A4   01005711           CMPNE    R7,R1
   \   000001A8   20108112           ADDNE    R1,R1,#+32
   \   000001AC   01005711           CMPNE    R7,R1
   \   000001B0   01108113           ORRNE    R1,R1,#0x1
   \   000001B4   01005711           CMPNE    R7,R1
   \   000001B8   01108112           ADDNE    R1,R1,#+1
   \   000001BC   01005711           CMPNE    R7,R1
   \   000001C0   7800000A           BEQ      ??RestoreSettings_7
   \   000001C4   0E1081E2           ADD      R1,R1,#+14
   \   000001C8   010057E1           CMP      R7,R1
   \   000001CC   B910A013           MOVNE    R1,#+185
   \   000001D0   B01E8113           ORRNE    R1,R1,#0xB00
   \   000001D4   01005711           CMPNE    R7,R1
   \   000001D8   5300000A           BEQ      ??RestoreSettings_6
   \   000001DC   0D1081E2           ADD      R1,R1,#+13
   \   000001E0   010057E1           CMP      R7,R1
   \   000001E4   5200000A           BEQ      ??RestoreSettings_8
   \   000001E8   011081E3           ORR      R1,R1,#0x1
   \   000001EC   010057E1           CMP      R7,R1
   \   000001F0   6200000A           BEQ      ??RestoreSettings_9
   \   000001F4   011081E2           ADD      R1,R1,#+1
   \   000001F8   010057E1           CMP      R7,R1
   \   000001FC   6300000A           BEQ      ??RestoreSettings_10
   \   00000200   011081E3           ORR      R1,R1,#0x1
   \   00000204   010057E1           CMP      R7,R1
   \   00000208   6400000A           BEQ      ??RestoreSettings_11
    262                      default:
    263                          NoError = false;
    264                          RestoreSettingsWarning((AnsiString)"Temperature " + Name + ":\nThe keyword " + InputKeyWord + " is not allowed here!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \   0000020C   1C1095E5           LDR      R1,[R5, #+28]
   \   00000210   0060A0E3           MOV      R6,#+0
   \   00000214   C80F8DE2           ADD      R0,SP,#+800
   \   00000218   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   0000021C   00A0A0E1           MOV      R10,R0
   \   00000220   0910A0E1           MOV      R1,R9
   \   00000224   C10F8DE2           ADD      R0,SP,#+772
   \   00000228   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000022C   0010A0E1           MOV      R1,R0
   \   00000230   442084E2           ADD      R2,R4,#+68
   \   00000234   BA0F8DE2           ADD      R0,SP,#+744
   \   00000238   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000023C   342089E2           ADD      R2,R9,#+52
   \   00000240   BA1F8DE2           ADD      R1,SP,#+744
   \   00000244   B30F8DE2           ADD      R0,SP,#+716
   \   00000248   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000024C   E4208DE2           ADD      R2,SP,#+228
   \   00000250   B31F8DE2           ADD      R1,SP,#+716
   \   00000254   AC0F8DE2           ADD      R0,SP,#+688
   \   00000258   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000025C   442089E2           ADD      R2,R9,#+68
   \   00000260   AC1F8DE2           ADD      R1,SP,#+688
   \   00000264   A50F8DE2           ADD      R0,SP,#+660
   \   00000268   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000026C   0A20A0E1           MOV      R2,R10
   \   00000270   A51F8DE2           ADD      R1,SP,#+660
   \   00000274   9E0F8DE2           ADD      R0,SP,#+632
   \   00000278   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000027C   0820A0E1           MOV      R2,R8
   \   00000280   9E1F8DE2           ADD      R1,SP,#+632
   \   00000284   970F8DE2           ADD      R0,SP,#+604
   \   00000288   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000028C   971F8DE2           ADD      R1,SP,#+604
   \   00000290   900F8DE2           ADD      R0,SP,#+576
   \   00000294   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000298   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   0000029C   0020A0E3           MOV      R2,#+0
   \   000002A0   0110A0E3           MOV      R1,#+1
   \   000002A4   900F8DE2           ADD      R0,SP,#+576
   \   000002A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002AC   0620A0E1           MOV      R2,R6
   \   000002B0   0110A0E3           MOV      R1,#+1
   \   000002B4   970F8DE2           ADD      R0,SP,#+604
   \   000002B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002BC   0620A0E1           MOV      R2,R6
   \   000002C0   0110A0E3           MOV      R1,#+1
   \   000002C4   9E0F8DE2           ADD      R0,SP,#+632
   \   000002C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002CC   0620A0E1           MOV      R2,R6
   \   000002D0   0110A0E3           MOV      R1,#+1
   \   000002D4   C80F8DE2           ADD      R0,SP,#+800
   \   000002D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002DC   0620A0E1           MOV      R2,R6
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   A50F8DE2           ADD      R0,SP,#+660
   \   000002E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002EC   0620A0E1           MOV      R2,R6
   \   000002F0   0110A0E3           MOV      R1,#+1
   \   000002F4   AC0F8DE2           ADD      R0,SP,#+688
   \   000002F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000002FC   0620A0E1           MOV      R2,R6
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   B30F8DE2           ADD      R0,SP,#+716
   \   00000308   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000030C   0620A0E1           MOV      R2,R6
   \   00000310   0110A0E3           MOV      R1,#+1
   \   00000314   BA0F8DE2           ADD      R0,SP,#+744
   \   00000318   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000031C   0620A0E1           MOV      R2,R6
   \   00000320   0110A0E3           MOV      R1,#+1
   \   00000324   C10F8DE2           ADD      R0,SP,#+772
   \   00000328   7A0000EA           B        ??RestoreSettings_5
    265                          break;
    266                      case C_AI_END:          // If AI type not found can continue with this
    267                      case C_AL_END:
    268                      case C_CT_END:
    269                      case C_PRO_END:
    270                      case C_PRO_END_COMMON:
    271                      case C_PRO_END_PRO:
    272                          Key = C_PRO_END;
   \                     ??RestoreSettings_6:
   \   0000032C   FA7FA0E3           MOV      R7,#+1000
   \   00000330   790000EA           B        ??RestoreSettings_4
    273                          break;
    274                      case ID_AL_HIGH_TEMP:
    275                          if (HighTempPtr) {
   \                     ??RestoreSettings_8:
   \   00000334   7C2194E5           LDR      R2,[R4, #+380]
   \   00000338   000052E3           CMP      R2,#+0
   \   0000033C   0600000A           BEQ      ??RestoreSettings_12
    276                              HighTempPtr->RestoreSettings(SettingsString);
   \                     ??RestoreSettings_13:
   \   00000340   0200A0E1           MOV      R0,R2
   \   00000344   A42092E5           LDR      R2,[R2, #+164]
   \   00000348   0510A0E1           MOV      R1,R5
   \   0000034C   142092E5           LDR      R2,[R2, #+20]
   \   00000350   0FE0A0E1           MOV      LR,PC
   \   00000354   12FF2FE1           BX       R2
   \   00000358   6F0000EA           B        ??RestoreSettings_4
    277                          } else {
    278                              AlarmBasic tmpAlarm;
   \                     ??RestoreSettings_12:
   \   0000035C   400F8DE2           ADD      R0,SP,#+256
   \   00000360   ........           _BLF     ??AlarmBasic,??AlarmBasic??rA
    279                              tmpAlarm.RestoreSettings(SettingsString);
   \   00000364   0510A0E1           MOV      R1,R5
   \   00000368   400F8DE2           ADD      R0,SP,#+256
   \   0000036C   ........           _BLF     ??RestoreSettings_1,??RestoreSettings??rA
    280                          }
   \   00000370   0210A0E3           MOV      R1,#+2
   \   00000374   400F8DE2           ADD      R0,SP,#+256
   \   00000378   ........           _BLF     `?~AlarmBasic`,`?~AlarmBasic??rA`
   \   0000037C   660000EA           B        ??RestoreSettings_4
    281                          break;
    282                      case ID_AL_LOW_TEMP:
    283                          if (LowTempPtr) {
   \                     ??RestoreSettings_9:
   \   00000380   802194E5           LDR      R2,[R4, #+384]
   \                     ??RestoreSettings_14:
   \   00000384   000052E3           CMP      R2,#+0
   \   00000388   F3FFFF0A           BEQ      ??RestoreSettings_12
    284                              LowTempPtr->RestoreSettings(SettingsString);
   \   0000038C   EBFFFFEA           B        ??RestoreSettings_13
    285                          } else {
    286                              AlarmBasic tmpAlarm;
    287                              tmpAlarm.RestoreSettings(SettingsString);
    288                          }
    289                          break;
    290                      case ID_AL_HIGH_BOT_TEMP:
    291                          if (HighBotTempPtr) {
   \                     ??RestoreSettings_10:
   \   00000390   842194E5           LDR      R2,[R4, #+388]
   \   00000394   000052E3           CMP      R2,#+0
   \   00000398   E8FFFF1A           BNE      ??RestoreSettings_13
    292                              HighBotTempPtr->RestoreSettings(SettingsString);
    293                          } else {
    294                              AlarmBasic tmpAlarm;
   \   0000039C   EEFFFFEA           B        ??RestoreSettings_12
    295                              tmpAlarm.RestoreSettings(SettingsString);
    296                          }
    297                          break;
    298                      case ID_AL_LOW_BOT_TEMP:
    299                          if (LowBotTempPtr) {
   \                     ??RestoreSettings_11:
   \   000003A0   882194E5           LDR      R2,[R4, #+392]
   \   000003A4   F6FFFFEA           B        ??RestoreSettings_14
    300                              LowBotTempPtr->RestoreSettings(SettingsString);
    301                          } else {
    302                              AlarmBasic tmpAlarm;
    303                              tmpAlarm.RestoreSettings(SettingsString);
    304                          }
    305                          break;
    306                      case C_AI_P906_0110         :
    307                      case C_AI_P906_0111         :
    308                      case C_AI_Pt100             :
    309                      case C_AI_Pt1000            :
    310                      case C_AI_TEMP_mA           :
    311                      case C_AI_TEMP_AD590        :
    312                      case C_AI_WATERINGR_TEMP    :
    313                      case C_AI_WATERINGR_TEMP_P  :
    314                      case C_AI_WATERINGR_TEMP_M  :
    315          
    316          
    317                          {
    318                              int         AIIDNumber   = SettingsString->ReadInteger(ErrorLine);
   \                     ??RestoreSettings_7:
   \   000003A8   0020A0E3           MOV      R2,#+0
   \   000003AC   0D10A0E1           MOV      R1,SP
   \   000003B0   0500A0E1           MOV      R0,R5
   \   000003B4   ........           _BLF     ??ReadInteger,??ReadInteger??rA
   \   000003B8   00B0A0E1           MOV      R11,R0
    319          					AnalogInput *AnalogInPtr = (AnalogInput *)FindObject(AIIDNumber);
   \   000003BC   ........           _BLF     ??FindObject,??FindObject??rA
   \   000003C0   0020B0E1           MOVS     R2,R0
    320          					if (AnalogInPtr) {
   \   000003C4   0500000A           BEQ      ??RestoreSettings_15
    321          						AnalogInPtr->RestoreAISettings(SettingsString);
   \   000003C8   A42090E5           LDR      R2,[R0, #+164]
   \   000003CC   0510A0E1           MOV      R1,R5
   \   000003D0   702092E5           LDR      R2,[R2, #+112]
   \   000003D4   0FE0A0E1           MOV      LR,PC
   \   000003D8   12FF2FE1           BX       R2
   \   000003DC   4E0000EA           B        ??RestoreSettings_4
    322          					}else{
    323          						RestoreSettingsWarning((AnsiString)"Temperature " + Name + ":\nSensor Id " + AnsiString(AIIDNumber) + " is not found!! Line:" + (AnsiString)SettingsString->LineCount + NewLineStr);
   \                     ??RestoreSettings_15:
   \   000003E0   1C1095E5           LDR      R1,[R5, #+28]
   \   000003E4   890F8DE2           ADD      R0,SP,#+548
   \   000003E8   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000003EC   00A0A0E1           MOV      R10,R0
   \   000003F0   0B10A0E1           MOV      R1,R11
   \   000003F4   820F8DE2           ADD      R0,SP,#+520
   \   000003F8   ........           _BLF     ??AnsiString_3,??AnsiString??rA_3
   \   000003FC   00B0A0E1           MOV      R11,R0
   \   00000400   0910A0E1           MOV      R1,R9
   \   00000404   7B0F8DE2           ADD      R0,SP,#+492
   \   00000408   ........           _BLF     ??AnsiString_1,??AnsiString??rA_1
   \   0000040C   442084E2           ADD      R2,R4,#+68
   \   00000410   0010A0E1           MOV      R1,R0
   \   00000414   C8008DE2           ADD      R0,SP,#+200
   \   00000418   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000041C   642089E2           ADD      R2,R9,#+100
   \   00000420   C8108DE2           ADD      R1,SP,#+200
   \   00000424   AC008DE2           ADD      R0,SP,#+172
   \   00000428   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000042C   0B20A0E1           MOV      R2,R11
   \   00000430   AC108DE2           ADD      R1,SP,#+172
   \   00000434   90008DE2           ADD      R0,SP,#+144
   \   00000438   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000043C   742089E2           ADD      R2,R9,#+116
   \   00000440   90108DE2           ADD      R1,SP,#+144
   \   00000444   74008DE2           ADD      R0,SP,#+116
   \   00000448   ........           _BLF     `??operator+_1`,`??operator+??rA_1`
   \   0000044C   0A20A0E1           MOV      R2,R10
   \   00000450   74108DE2           ADD      R1,SP,#+116
   \   00000454   58008DE2           ADD      R0,SP,#+88
   \   00000458   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000045C   0820A0E1           MOV      R2,R8
   \   00000460   58108DE2           ADD      R1,SP,#+88
   \   00000464   3C008DE2           ADD      R0,SP,#+60
   \   00000468   ........           _BLF     `??operator+`,`??operator+??rA`
   \   0000046C   3C108DE2           ADD      R1,SP,#+60
   \   00000470   20008DE2           ADD      R0,SP,#+32
   \   00000474   ........           _BLF     ??AnsiString_2,??AnsiString??rA_2
   \   00000478   ........           _BLF     ??RestoreSettingsWarning,??RestoreSettingsWarning??rA
   \   0000047C   0020A0E3           MOV      R2,#+0
   \   00000480   0110A0E3           MOV      R1,#+1
   \   00000484   20008DE2           ADD      R0,SP,#+32
   \   00000488   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000048C   0020A0E3           MOV      R2,#+0
   \   00000490   0110A0E3           MOV      R1,#+1
   \   00000494   3C008DE2           ADD      R0,SP,#+60
   \   00000498   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000049C   0020A0E3           MOV      R2,#+0
   \   000004A0   0110A0E3           MOV      R1,#+1
   \   000004A4   58008DE2           ADD      R0,SP,#+88
   \   000004A8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004AC   0020A0E3           MOV      R2,#+0
   \   000004B0   0110A0E3           MOV      R1,#+1
   \   000004B4   890F8DE2           ADD      R0,SP,#+548
   \   000004B8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004BC   0020A0E3           MOV      R2,#+0
   \   000004C0   0110A0E3           MOV      R1,#+1
   \   000004C4   74008DE2           ADD      R0,SP,#+116
   \   000004C8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004CC   0020A0E3           MOV      R2,#+0
   \   000004D0   0110A0E3           MOV      R1,#+1
   \   000004D4   90008DE2           ADD      R0,SP,#+144
   \   000004D8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004DC   0020A0E3           MOV      R2,#+0
   \   000004E0   0110A0E3           MOV      R1,#+1
   \   000004E4   820F8DE2           ADD      R0,SP,#+520
   \   000004E8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004EC   0020A0E3           MOV      R2,#+0
   \   000004F0   0110A0E3           MOV      R1,#+1
   \   000004F4   AC008DE2           ADD      R0,SP,#+172
   \   000004F8   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   000004FC   0020A0E3           MOV      R2,#+0
   \   00000500   0110A0E3           MOV      R1,#+1
   \   00000504   C8008DE2           ADD      R0,SP,#+200
   \   00000508   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000050C   0020A0E3           MOV      R2,#+0
   \   00000510   0110A0E3           MOV      R1,#+1
   \   00000514   7B0F8DE2           ADD      R0,SP,#+492
   \                     ??RestoreSettings_5:
   \   00000518   ........           _BLF     ??_Tidy,??_Tidy??rA
    324          					}
    325                          }
    326                          break;
    327                      }
    328                  }
    329              }while (NoError && (ErrorLine != EOF) && (Key != C_PRO_END));
   \                     ??RestoreSettings_4:
   \   0000051C   0020A0E3           MOV      R2,#+0
   \   00000520   0110A0E3           MOV      R1,#+1
   \   00000524   E4008DE2           ADD      R0,SP,#+228
   \   00000528   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   0000052C   000056E3           CMP      R6,#+0
   \   00000530   00009D15           LDRNE    R0,[SP, #+0]
   \   00000534   01007013           CMNNE    R0,#+1
   \   00000538   FA0F5713           CMPNE    R7,#+1000
   \   0000053C   B8FEFF1A           BNE      ??RestoreSettings_2
    330              return (NoError);
   \   00000540   0600A0E1           MOV      R0,R6
   \   00000544   CFDF8DE2           ADD      SP,SP,#+828
   \   00000548                      REQUIRE ?Subroutine37
   \   00000548                      ;; // Fall through to label ?Subroutine37
    331          }
    332          
    333          ///////////////////////////////////////////////////////////////
    334          //
    335          // Routines for the librarian
    336          //
    337          ///////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    338          int PROTemperature::FindPROStatus(AnsiString &MyString) {
   \                     ??FindPROStatus:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   1CD04DE2           SUB      SP,SP,#+28
   \   00000008   0050A0E1           MOV      R5,R0
    339              int PROStatus1 = ST_OK;
    340              int PROStatus2 = ST_OK;
    341          
    342              if (HWFailure) {
   \   0000000C   3C00D5E5           LDRB     R0,[R5, #+60]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   3DA0A0E3           MOV      R10,#+61
   \   00000018   F0AE8AE3           ORR      R10,R10,#0xF00
   \   0000001C   0A40A0E1           MOV      R4,R10
   \   00000020   047084E2           ADD      R7,R4,#+4
   \   00000024   000050E3           CMP      R0,#+0
    343                  PROStatus1 = ST_ERROR;
   \   00000028   0740A011           MOVNE    R4,R7
   \   0000002C   2800001A           BNE      ??FindPROStatus_1
    344              }
    345              if (PROStatus1 != ST_ERROR) {
    346                  for (unsigned i = 0; i < AnalogInList.size() && (PROStatus1 != ST_ERROR); i++) {
   \   00000030   0090A0E3           MOV      R9,#+0
   \   00000034   4B8FA0E3           MOV      R8,#+300
   \   00000038   0B0000EA           B        ??FindPROStatus_2
    347                      PROStatus2 = AnalogInList[i]->FindPROStatus(MyString);
   \                     ??FindPROStatus_3:
   \   0000003C   050098E7           LDR      R0,[R8, +R5]
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   092190E7           LDR      R2,[R0, +R9, LSL #+2]
    348                      if (PROStatus2 > PROStatus1) {
    349                          PROStatus1 = PROStatus2;
    350                      }
    351                  }
   \   00000048   019089E2           ADD      R9,R9,#+1
   \   0000004C   0200A0E1           MOV      R0,R2
   \   00000050   A42092E5           LDR      R2,[R2, #+164]
   \   00000054   1C2092E5           LDR      R2,[R2, #+28]
   \   00000058   0FE0A0E1           MOV      LR,PC
   \   0000005C   12FF2FE1           BX       R2
   \   00000060   00A0A0E1           MOV      R10,R0
   \   00000064   0A0054E1           CMP      R4,R10
   \   00000068   0A40A0B1           MOVLT    R4,R10
   \                     ??FindPROStatus_2:
   \   0000006C   050088E0           ADD      R0,R8,R5
   \   00000070   041090E5           LDR      R1,[R0, #+4]
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   000041E0           SUB      R0,R1,R0
   \   0000007C   200159E1           CMP      R9,R0, LSR #+2
   \   00000080   0100002A           BCS      ??FindPROStatus_4
   \   00000084   070054E1           CMP      R4,R7
   \   00000088   EBFFFF1A           BNE      ??FindPROStatus_3
    352              }
    353              if (PROStatus1 != ST_ERROR) {
   \                     ??FindPROStatus_4:
   \   0000008C   070054E1           CMP      R4,R7
   \   00000090   0F00000A           BEQ      ??FindPROStatus_1
    354                  bool                        AlActive = false;
    355                  set<AlarmBasic *>::iterator pBIt;
    356                  for (pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++) {
   \   00000094   E40095E5           LDR      R0,[R5, #+228]
   \   00000098   0070A0E3           MOV      R7,#+0
   \   0000009C   050000EA           B        ??FindPROStatus_5
    357                      AlarmBasic *Element = *pBIt;
   \                     ??FindPROStatus_6:
   \   000000A0   101090E5           LDR      R1,[R0, #+16]
    358                      if (Element && (Element->State != AlarmBasic::AlIdle)) AlActive = true;
   \   000000A4   000051E3           CMP      R1,#+0
   \   000000A8   E010D115           LDRBNE   R1,[R1, #+224]
   \   000000AC   00005113           CMPNE    R1,#+0
   \   000000B0   0170A013           MOVNE    R7,#+1
    359                  }
   \   000000B4   ........           _BLF     ??_IncP,??_IncP??rA
   \                     ??FindPROStatus_5:
   \   000000B8   E41085E2           ADD      R1,R5,#+228
   \   000000BC   010050E1           CMP      R0,R1
   \   000000C0   F6FFFF1A           BNE      ??FindPROStatus_6
    360                  if (AlActive)	PROStatus2 = ST_ALARM;
   \   000000C4   000057E3           CMP      R7,#+0
   \   000000C8   F4AEA013           MOVNE    R10,#+3904
    361                  if (PROStatus2 > PROStatus1) {
   \   000000CC   0A0054E1           CMP      R4,R10
    362                      PROStatus1 = PROStatus2;
   \   000000D0   0A40A0B1           MOVLT    R4,R10
    363                  }
    364              }
    365              MyString = FindStatusChar(PROStatus1);
   \                     ??FindPROStatus_1:
   \   000000D4   0420A0E1           MOV      R2,R4
   \   000000D8   0D10A0E1           MOV      R1,SP
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   ........           _BLF     ??FindStatusChar,??FindStatusChar??rA
   \   000000E4   ........           LDR      R0,??DataTable20  ;; ??npos
   \   000000E8   0020A0E3           MOV      R2,#+0
   \   000000EC   003090E5           LDR      R3,[R0, #+0]
   \   000000F0   0D10A0E1           MOV      R1,SP
   \   000000F4   0600A0E1           MOV      R0,R6
   \   000000F8   ........           _BLF     ??assign,??assign??rA
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   0D00A0E1           MOV      R0,SP
   \   00000108   ........           _BLF     ??_Tidy,??_Tidy??rA
    366              return (PROStatus1);
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   1CD08DE2           ADD      SP,SP,#+28
   \   00000114   F047BDE8           POP      {R4-R10,LR}
   \   00000118   1EFF2FE1           BX       LR               ;; return
    367          }
    368          

   \                                 In segment CODE, align 4, keep-with-next
    369          int PROTemperature::GetValue(int ValueId, int Index, float &MyRetValue,  int &DecPnt, int &Unit) {
   \                     ??GetValue:
   \   00000000   F44F2DE9           PUSH     {R2,R4-R11,LR}
   \   00000004   28609DE5           LDR      R6,[SP, #+40]
   \   00000008   2C709DE5           LDR      R7,[SP, #+44]
   \   0000000C   00B0A0E1           MOV      R11,R0
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0350A0E1           MOV      R5,R3
    370              int Status = GETVAL_NO_ERR;
    371              switch (ValueId) {
   \   00000018   4A00A0E3           MOV      R0,#+74
   \   0000001C   400F80E3           ORR      R0,R0,#0x100
   \   00000020   0580A0E3           MOV      R8,#+5
   \   00000024   0190A0E3           MOV      R9,#+1
   \   00000028   FB0F51E3           CMP      R1,#+1004
   \   0000002C   C600000A           BEQ      ??GetValue_4
   \   00000030   FA2F88E3           ORR      R2,R8,#0x3E8
   \   00000034   020051E1           CMP      R1,R2
   \   00000038   D500000A           BEQ      ??GetValue_5
   \   0000003C   430E51E3           CMP      R1,#+1072
   \   00000040   44208212           ADDNE    R2,R2,#+68
   \   00000044   02005111           CMPNE    R1,R2
   \   00000048   BA2F8012           ADDNE    R2,R0,#+744
   \   0000004C   02005111           CMPNE    R1,R2
   \   00000050   01208213           ORRNE    R2,R2,#0x1
   \   00000054   02005111           CMPNE    R1,R2
   \   00000058   01208212           ADDNE    R2,R2,#+1
   \   0000005C   02005111           CMPNE    R1,R2
   \   00000060   01208213           ORRNE    R2,R2,#0x1
   \   00000064   02005111           CMPNE    R1,R2
   \   00000068   440E5113           CMPNE    R1,#+1088
   \   0000006C   0C208212           ADDNE    R2,R2,#+12
   \   00000070   02005111           CMPNE    R1,R2
   \   00000074   BE2F8012           ADDNE    R2,R0,#+760
   \   00000078   02005111           CMPNE    R1,R2
   \   0000007C   01208213           ORRNE    R2,R2,#0x1
   \   00000080   02005111           CMPNE    R1,R2
   \   00000084   01208212           ADDNE    R2,R2,#+1
   \   00000088   02005111           CMPNE    R1,R2
   \   0000008C   01208213           ORRNE    R2,R2,#0x1
   \   00000090   02005111           CMPNE    R1,R2
   \   00000094   14208212           ADDNE    R2,R2,#+20
   \   00000098   02005111           CMPNE    R1,R2
   \   0000009C   0F208212           ADDNE    R2,R2,#+15
   \   000000A0   02005111           CMPNE    R1,R2
   \   000000A4   01208213           ORRNE    R2,R2,#0x1
   \   000000A8   02005111           CMPNE    R1,R2
   \   000000AC   C82F8012           ADDNE    R2,R0,#+800
   \   000000B0   02005111           CMPNE    R1,R2
   \   000000B4   01208213           ORRNE    R2,R2,#0x1
   \   000000B8   02005111           CMPNE    R1,R2
   \   000000BC   01208212           ADDNE    R2,R2,#+1
   \   000000C0   02005111           CMPNE    R1,R2
   \   000000C4   01208213           ORRNE    R2,R2,#0x1
   \   000000C8   02005111           CMPNE    R1,R2
   \   000000CC   C92F8012           ADDNE    R2,R0,#+804
   \   000000D0   02005111           CMPNE    R1,R2
   \   000000D4   01208213           ORRNE    R2,R2,#0x1
   \   000000D8   02005111           CMPNE    R1,R2
   \   000000DC   470E5113           CMPNE    R1,#+1136
   \   000000E0   02208212           ADDNE    R2,R2,#+2
   \   000000E4   02005111           CMPNE    R1,R2
   \   000000E8   CA2F8012           ADDNE    R2,R0,#+808
   \   000000EC   02005111           CMPNE    R1,R2
   \   000000F0   2200000A           BEQ      ??GetValue_6
   \   000000F4   8C20A0E3           MOV      R2,#+140
   \   000000F8   8C2D82E3           ORR      R2,R2,#0x2300
   \   000000FC   020051E1           CMP      R1,R2
   \   00000100   01208213           ORRNE    R2,R2,#0x1
   \   00000104   02005111           CMPNE    R1,R2
   \   00000108   01208212           ADDNE    R2,R2,#+1
   \   0000010C   02005111           CMPNE    R1,R2
   \   00000110   01208213           ORRNE    R2,R2,#0x1
   \   00000114   02005111           CMPNE    R1,R2
   \   00000118   01208212           ADDNE    R2,R2,#+1
   \   0000011C   02005111           CMPNE    R1,R2
   \   00000120   01208213           ORRNE    R2,R2,#0x1
   \   00000124   02005111           CMPNE    R1,R2
   \   00000128   01208212           ADDNE    R2,R2,#+1
   \   0000012C   02005111           CMPNE    R1,R2
   \   00000130   01208213           ORRNE    R2,R2,#0x1
   \   00000134   02005111           CMPNE    R1,R2
   \   00000138   01208212           ADDNE    R2,R2,#+1
   \   0000013C   02005111           CMPNE    R1,R2
   \   00000140   01208213           ORRNE    R2,R2,#0x1
   \   00000144   02005111           CMPNE    R1,R2
   \   00000148   01208212           ADDNE    R2,R2,#+1
   \   0000014C   02005111           CMPNE    R1,R2
   \   00000150   01208213           ORRNE    R2,R2,#0x1
   \   00000154   02005111           CMPNE    R1,R2
   \   00000158   01208212           ADDNE    R2,R2,#+1
   \   0000015C   02005111           CMPNE    R1,R2
   \   00000160   01208213           ORRNE    R2,R2,#0x1
   \   00000164   02005111           CMPNE    R1,R2
   \   00000168   01208212           ADDNE    R2,R2,#+1
   \   0000016C   02005111           CMPNE    R1,R2
   \   00000170   01208213           ORRNE    R2,R2,#0x1
   \   00000174   02005111           CMPNE    R1,R2
   \   00000178   9100000A           BEQ      ??GetValue_7
   \   0000017C   D30000EA           B        ??GetValue_8
    372              case SVT_T1  :
    373              case SVT_T1_GAIN :
    374              case SVT_T1_OFFSET :
    375              case SVT_T2  :
    376              case SVT_T2_GAIN :
    377              case SVT_T2_OFFSET :
    378              case SVT_T3  :
    379              case SVT_T3_GAIN :
    380              case SVT_T3_OFFSET :
    381              case SVT_T4  :
    382              case SVT_T4_GAIN :
    383              case SVT_T4_OFFSET :
    384              case SVT_T5  :
    385              case SVT_T5_GAIN :
    386              case SVT_T5_OFFSET :
    387              case SVT_TT  :
    388              case SVT_TT_GAIN :
    389              case SVT_TT_OFFSET :
    390              case SVT_T1_ENABLE :
    391              case SVT_T2_ENABLE :
    392              case SVT_T5_ENABLE :
    393              case SVT_T3_ENABLE :
    394              case SVT_T4_ENABLE :
    395              case SVT_TP_ENABLE :
    396                  {
    397                      AnalogInput *SnsPtr = NULL;
   \                     ??GetValue_6:
   \   00000180   00A0A0E3           MOV      R10,#+0
    398                      switch (ValueId) {
   \   00000184   430E44E2           SUB      R0,R4,#+1072
   \   00000188   430050E3           CMP      R0,#+67
   \   0000018C   3600008A           BHI      ??GetValue_9
   \   00000190   011F8FE2           ADR      R1,??GetValue_1
   \   00000194   0010D1E7           LDRB     R1,[R1, R0]
   \   00000198   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??GetValue_1:
   \   0000019C   1014171B           DC8      +16,+20,+23,+27
   \   000001A0   1E213333           DC8      +30,+33,+51,+51
   \   000001A4   33333333           DC8      +51,+51,+51,+51
   \   000001A8   33333333           DC8      +51,+51,+51,+51
   \   000001AC   141E1017           DC8      +20,+30,+16,+23
   \   000001B0   1B213333           DC8      +27,+33,+51,+51
   \   000001B4   33333333           DC8      +51,+51,+51,+51
   \   000001B8   33333333           DC8      +51,+51,+51,+51
   \   000001BC   33333333           DC8      +51,+51,+51,+51
   \   000001C0   33333333           DC8      +51,+51,+51,+51
   \   000001C4   33333333           DC8      +51,+51,+51,+51
   \   000001C8   33333333           DC8      +51,+51,+51,+51
   \   000001CC   33333333           DC8      +51,+51,+51,+51
   \   000001D0   33333333           DC8      +51,+51,+51,+51
   \   000001D4   1014171B           DC8      +16,+20,+23,+27
   \   000001D8   1E211014           DC8      +30,+33,+16,+20
   \   000001DC   171B1E21           DC8      +23,+27,+30,+33
    399                      case SVT_T1 :
    400                      case SVT_T1_GAIN :
    401                      case SVT_T1_OFFSET :
    402                      case SVT_T1_ENABLE :
    403                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP1, AI_SENSOR_TEMP);
   \                     ??GetValue_10:
   \   000001E0   0220A0E3           MOV      R2,#+2
   \   000001E4   FD10A0E3           MOV      R1,#+253
   \                     ??GetValue_11:
   \   000001E8   801E81E3           ORR      R1,R1,#0x800
   \   000001EC   1B0000EA           B        ??GetValue_12
    404                          break;
    405                      case SVT_T2 :
    406                      case SVT_T2_GAIN :
    407                      case SVT_T2_OFFSET :
    408                      case SVT_T2_ENABLE :
    409                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP2, AI_SENSOR_TEMP);
   \                     ??GetValue_13:
   \   000001F0   0220A0E3           MOV      R2,#+2
   \   000001F4   FE10A0E3           MOV      R1,#+254
   \   000001F8   FAFFFFEA           B        ??GetValue_11
    410                          break;
    411                      case SVT_T3 :
    412                      case SVT_T3_GAIN :
    413                      case SVT_T3_OFFSET :
    414                      case SVT_T3_ENABLE :
    415                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP3, AI_SENSOR_TEMP);
   \                     ??GetValue_14:
   \   000001FC   0220A0E3           MOV      R2,#+2
   \   00000200   FF10A0E3           MOV      R1,#+255
   \   00000204   801E81E3           ORR      R1,R1,#0x800
   \   00000208   140000EA           B        ??GetValue_12
    416                          break;
    417                      case SVT_T4 :
    418                      case SVT_T4_GAIN :
    419                      case SVT_T4_OFFSET :
    420                      case SVT_T4_ENABLE :
    421                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP4, AI_SENSOR_TEMP);
   \                     ??GetValue_15:
   \   0000020C   0220A0E3           MOV      R2,#+2
   \   00000210   901EA0E3           MOV      R1,#+2304
   \   00000214   110000EA           B        ??GetValue_12
    422                          break;
    423                      case SVT_T5 :
    424                      case SVT_T5_GAIN :
    425                      case SVT_T5_OFFSET :
    426                      case SVT_T5_ENABLE :
    427                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP5, AI_SENSOR_TEMP);
   \                     ??GetValue_16:
   \   00000218   0220A0E3           MOV      R2,#+2
   \   0000021C   901E89E3           ORR      R1,R9,#0x900
   \   00000220   0E0000EA           B        ??GetValue_12
    428                          break;
    429                      case SVT_TT :
    430                      case SVT_TT_GAIN :
    431                      case SVT_TT_OFFSET :
    432                      case SVT_TT_ENABLE :
    433                          SnsPtr = FindAnalogInput(C_AI_LOC_VAPOUR, AI_SENSOR_TEMP);
   \                     ??GetValue_17:
   \   00000224   0220A0E3           MOV      R2,#+2
   \   00000228   8E1E82E3           ORR      R1,R2,#0x8E0
   \   0000022C   0B00A0E1           MOV      R0,R11
   \   00000230   ........           _BLF     ??FindAnalogInput,??FindAnalogInput??rA
   \   00000234   00A0B0E1           MOVS     R10,R0
    434                          if (!SnsPtr) {
   \   00000238   0B00001A           BNE      ??GetValue_9
    435                              SnsPtr = FindAnalogInput(C_AI_LOC_DECK, AI_SENSOR_TEMP);
   \   0000023C   0220A0E3           MOV      R2,#+2
   \   00000240   EA10A0E3           MOV      R1,#+234
   \   00000244   801E81E3           ORR      R1,R1,#0x800
   \   00000248   0B00A0E1           MOV      R0,R11
   \   0000024C   ........           _BLF     ??FindAnalogInput,??FindAnalogInput??rA
   \   00000250   00A0B0E1           MOVS     R10,R0
    436                              if (!SnsPtr) {
   \   00000254   0400001A           BNE      ??GetValue_9
    437                                  SnsPtr = FindAnalogInput(C_AI_LOC_TEMP6, AI_SENSOR_TEMP);
   \   00000258   0220A0E3           MOV      R2,#+2
   \   0000025C   901E82E3           ORR      R1,R2,#0x900
   \                     ??GetValue_12:
   \   00000260   0B00A0E1           MOV      R0,R11
   \   00000264   ........           _BLF     ??FindAnalogInput,??FindAnalogInput??rA
   \   00000268   00A0A0E1           MOV      R10,R0
    438                              }
    439                          }
    440                          break;
    441                      }
    442                      int SnsValId = SVT_NOT_DEFINED;
   \                     ??GetValue_9:
   \   0000026C   00B0A0E3           MOV      R11,#+0
    443                      switch (ValueId) {
   \   00000270   B800A0E3           MOV      R0,#+184
   \   00000274   400E80E3           ORR      R0,R0,#0x400
   \   00000278   434E44E2           SUB      R4,R4,#+1072
   \   0000027C   070054E3           CMP      R4,#+7
   \   00000280   09404482           SUBHI    R4,R4,#+9
   \   00000284   02005483           CMPHI    R4,#+2
   \   00000288   0F00009A           BLS      ??GetValue_18
   \   0000028C   074044E2           SUB      R4,R4,#+7
   \   00000290   050054E3           CMP      R4,#+5
   \   00000294   0A00009A           BLS      ??GetValue_19
   \   00000298   194054E2           SUBS     R4,R4,#+25
   \   0000029C   0C00000A           BEQ      ??GetValue_20
   \   000002A0   0F4044E2           SUB      R4,R4,#+15
   \   000002A4   050054E3           CMP      R4,#+5
   \   000002A8   0300009A           BLS      ??GetValue_21
   \   000002AC   064044E2           SUB      R4,R4,#+6
   \   000002B0   040054E3           CMP      R4,#+4
   \   000002B4   0600009A           BLS      ??GetValue_20
   \   000002B8   060000EA           B        ??GetValue_22
    444                      case SVT_T1_GAIN :
    445                      case SVT_T2_GAIN :
    446                      case SVT_T5_GAIN :
    447                      case SVT_T3_GAIN :
    448                      case SVT_T4_GAIN :
    449                      case SVT_TT_GAIN :
    450                          SnsValId = SVT_AI_GAIN;
   \                     ??GetValue_21:
   \   000002BC   04B040E2           SUB      R11,R0,#+4
   \   000002C0   040000EA           B        ??GetValue_22
    451                          break;
    452                      case SVT_T1_OFFSET :
    453                      case SVT_T2_OFFSET :
    454                      case SVT_T5_OFFSET :
    455                      case SVT_T3_OFFSET :
    456                      case SVT_T4_OFFSET :
    457                      case SVT_TT_OFFSET :
    458                          SnsValId = SVT_AI_OFFSET;
   \                     ??GetValue_19:
   \   000002C4   03B040E2           SUB      R11,R0,#+3
   \   000002C8   020000EA           B        ??GetValue_22
    459                          break;
    460                      case SVT_T1 :
    461                      case SVT_T2 :
    462                      case SVT_T5 :
    463                      case SVT_T3 :
    464                      case SVT_T4 :
    465                      case SVT_TMP1 :
    466                      case SVT_TMP2 :
    467                      case SVT_TMP5 :
    468                      case SVT_TMP3 :
    469                      case SVT_TMP4 :
    470                      case SVT_TT :
    471                          SnsValId = SVT_AI_CALC_VAL;
   \                     ??GetValue_18:
   \   000002CC   00B0A0E1           MOV      R11,R0
   \   000002D0   000000EA           B        ??GetValue_22
    472                          break;
    473                      case SVT_T1_ENABLE :
    474                      case SVT_T2_ENABLE :
    475                      case SVT_T5_ENABLE :
    476                      case SVT_T3_ENABLE :
    477                      case SVT_T4_ENABLE :
    478                      case SVT_TP_ENABLE :
    479                          SnsValId = SVT_AI_ENABLE;
   \                     ??GetValue_20:
   \   000002D4   05B040E2           SUB      R11,R0,#+5
    480                          break;
    481          
    482                      }
    483                      if (SnsPtr) {
   \                     ??GetValue_22:
   \   000002D8   00005AE3           CMP      R10,#+0
   \   000002DC   1600000A           BEQ      ??GetValue_23
    484                          if ((SnsValId == SVT_AI_CALC_VAL) && (!SnsPtr->CanCalculate() || !SnsPtr->ResultOK)) {
   \   000002E0   00005BE1           CMP      R11,R0
   \   000002E4   0900001A           BNE      ??GetValue_24
   \   000002E8   0A00A0E1           MOV      R0,R10
   \   000002EC   ........           _BLF     ??CanCalculate,??CanCalculate??rA
   \   000002F0   000050E3           CMP      R0,#+0
   \   000002F4   3601DA15           LDRBNE   R0,[R10, #+310]
   \   000002F8   00005013           CMPNE    R0,#+0
   \   000002FC   0300001A           BNE      ??GetValue_24
    485                              DecPnt = 1;
   \   00000300   009086E5           STR      R9,[R6, #+0]
    486                              Unit   = TEMP_UNIT;
   \   00000304   008087E5           STR      R8,[R7, #+0]
    487                              Status = GETVAL_FLOAT_NOT_LEGAL;
    488                          } else {
    489                              Status = SnsPtr->GetValue(SnsValId, Index, MyRetValue,  DecPnt, Unit);
    490                          }
    491                      } else {
    492                          DecPnt     = 1;
    493                          Unit       = TEMP_UNIT;
    494                          Status     = GETVAL_NOT_AVAILABLE;
    495                      }
    496                  }
    497                  break;
    498              case SVT_TEMP:
    499                  DecPnt     = 1;
    500                  Unit       = TEMP_UNIT;
    501                  if (IsOnline) {
    502                      if (HasTemp && IsNewData) {
    503                          MyRetValue = Temperature;
    504                          Status     = StatusTemp;
    505                      } else {
    506                          Status = GETVAL_FLOAT_NOT_LEGAL;
   \                     ??GetValue_25:
   \   00000308   0500A0E3           MOV      R0,#+5
   \   0000030C   750000EA           B        ??GetValue_26
    507                      }
   \                     ??GetValue_24:
   \   00000310   80002DE9           PUSH     {R7}
   \   00000314   40002DE9           PUSH     {R6}
   \   00000318   A4409AE5           LDR      R4,[R10, #+164]
   \   0000031C   08209DE5           LDR      R2,[SP, #+8]
   \   00000320   244094E5           LDR      R4,[R4, #+36]
   \   00000324   0530A0E1           MOV      R3,R5
   \   00000328   0B10A0E1           MOV      R1,R11
   \   0000032C   0A00A0E1           MOV      R0,R10
   \   00000330   0FE0A0E1           MOV      LR,PC
   \   00000334   14FF2FE1           BX       R4
   \   00000338   690000EA           B        ??GetValue_27
   \                     ??GetValue_23:
   \   0000033C   009086E5           STR      R9,[R6, #+0]
   \   00000340   008087E5           STR      R8,[R7, #+0]
   \   00000344   0100A0E3           MOV      R0,#+1
   \   00000348   660000EA           B        ??GetValue_26
   \                     ??GetValue_4:
   \   0000034C   009086E5           STR      R9,[R6, #+0]
   \   00000350   008087E5           STR      R8,[R7, #+0]
   \   00000354   0B00D0E7           LDRB     R0,[R0, +R11]
   \   00000358   000050E3           CMP      R0,#+0
   \   0000035C   0800000A           BEQ      ??GetValue_28
   \   00000360   6001DBE5           LDRB     R0,[R11, #+352]
   \   00000364   000050E3           CMP      R0,#+0
   \   00000368   E000DB15           LDRBNE   R0,[R11, #+224]
   \   0000036C   00005013           CMPNE    R0,#+0
   \   00000370   E4FFFF0A           BEQ      ??GetValue_25
   \   00000374   68019BE5           LDR      R0,[R11, #+360]
   \                     ??GetValue_29:
   \   00000378   000085E5           STR      R0,[R5, #+0]
   \   0000037C   58019BE5           LDR      R0,[R11, #+344]
   \   00000380   580000EA           B        ??GetValue_26
    508                  } else {
    509                      MyRetValue = Temperature;
   \                     ??GetValue_28:
   \   00000384   68019BE5           LDR      R0,[R11, #+360]
   \   00000388   000085E5           STR      R0,[R5, #+0]
    510                      Status     = GETVAL_OFFLINE;
   \   0000038C   1000A0E3           MOV      R0,#+16
   \   00000390   540000EA           B        ??GetValue_26
    511                  }
    512                  break;
    513              case SVT_VAPOR_TEMP:
    514                  DecPnt     = 1;
   \                     ??GetValue_5:
   \   00000394   009086E5           STR      R9,[R6, #+0]
    515                  Unit       = TEMP_UNIT;
   \   00000398   008087E5           STR      R8,[R7, #+0]
    516                  if (IsOnline) {
   \   0000039C   0B00D0E7           LDRB     R0,[R0, +R11]
   \   000003A0   000050E3           CMP      R0,#+0
   \   000003A4   F6FFFF0A           BEQ      ??GetValue_28
    517                      if (HasTemp && IsNewData) {
   \   000003A8   6001DBE5           LDRB     R0,[R11, #+352]
   \   000003AC   000050E3           CMP      R0,#+0
   \   000003B0   E000DB15           LDRBNE   R0,[R11, #+224]
   \   000003B4   00005013           CMPNE    R0,#+0
   \   000003B8   D2FFFF0A           BEQ      ??GetValue_25
    518                          MyRetValue = VaporTemp;
   \   000003BC   70019BE5           LDR      R0,[R11, #+368]
   \   000003C0   ECFFFFEA           B        ??GetValue_29
    519                          Status     = StatusTemp;
    520                      } else {
    521                          Status = GETVAL_FLOAT_NOT_LEGAL;
    522                      }
    523                  } else {
   \                     ??GetValue_7:
   \   000003C4   84019BE5           LDR      R0,[R11, #+388]
   \   000003C8   88219BE5           LDR      R2,[R11, #+392]
   \   000003CC   3E30A0E3           MOV      R3,#+62
   \   000003D0   8C3D83E3           ORR      R3,R3,#0x2300
   \   000003D4   0C90C3E3           BIC      R9,R3,#0xC
   \   000003D8   05A083E2           ADD      R10,R3,#+5
   \   000003DC   0BC043E2           SUB      R12,R3,#+11
   \   000003E0   8C4044E2           SUB      R4,R4,#+140
   \   000003E4   8C4D44E2           SUB      R4,R4,#+8960
   \   000003E8   0F0054E3           CMP      R4,#+15
   \   000003EC   2900008A           BHI      ??GetValue_30
   \   000003F0   01EF8FE2           ADR      LR,??GetValue_2
   \   000003F4   04E0DEE7           LDRB     LR,[LR, R4]
   \   000003F8   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??GetValue_2:
   \   000003FC   0E100306           DC8      +14,+16,+3,+6
   \   00000400   1E201618           DC8      +30,+32,+22,+24
   \   00000404   1214090C           DC8      +18,+20,+9,+12
   \   00000408   22241A1C           DC8      +34,+36,+26,+28
    524                      MyRetValue = Temperature;
    525                      Status     = GETVAL_OFFLINE;
    526                  }
    527                  break;
    528              case SVT_HI_TEMP_ENABLE     :
    529              case SVT_LO_TEMP_ENABLE     :
    530              case SVT_HI_BOT_TEMP_ENABLE :
    531              case SVT_LO_BOT_TEMP_ENABLE :
    532              case SVT_HI_TEMP_LIMIT      :
    533              case SVT_LO_TEMP_LIMIT      :
    534              case SVT_HI_TEMP_STATE      :
    535              case SVT_LO_TEMP_STATE      :
    536              case SVT_HI_BOT_TEMP_LIMIT  :
    537              case SVT_LO_BOT_TEMP_LIMIT  :
    538              case SVT_HI_TEMP_VALUE      :
    539              case SVT_LO_TEMP_VALUE      :
    540              case SVT_HI_BOT_TEMP_VALUE  :
    541              case SVT_LO_BOT_TEMP_VALUE  :
    542              case SVT_HI_BOT_TEMP_STATE  :
    543              case SVT_LO_BOT_TEMP_STATE  :
    544                  {
    545                      int        tmpValKey;
    546                      AlarmBasic *tmpPtr;
    547                      switch (ValueId) {
    548                      case SVT_HI_TEMP_ENABLE:
    549                          tmpValKey = SVT_AL_ENABLE;
   \                     ??GetValue_31:
   \   0000040C   0310A0E1           MOV      R1,R3
    550                          tmpPtr = (AlarmBasic *)HighTempPtr;
   \                     ??GetValue_32:
   \   00000410   7C819BE5           LDR      R8,[R11, #+380]
   \   00000414   1F0000EA           B        ??GetValue_30
    551                          break;
    552                      case SVT_LO_TEMP_ENABLE:
    553                          tmpValKey = SVT_AL_ENABLE;
   \                     ??GetValue_33:
   \   00000418   0310A0E1           MOV      R1,R3
    554                          tmpPtr = (AlarmBasic *)LowTempPtr;
   \                     ??GetValue_34:
   \   0000041C   80819BE5           LDR      R8,[R11, #+384]
   \   00000420   1C0000EA           B        ??GetValue_30
    555                          break;
    556                      case SVT_HI_BOT_TEMP_ENABLE:
    557                          tmpValKey = SVT_AL_ENABLE;
   \                     ??GetValue_35:
   \   00000424   0310A0E1           MOV      R1,R3
    558                          tmpPtr = (AlarmBasic *)HighBotTempPtr;
   \                     ??GetValue_36:
   \   00000428   0080A0E1           MOV      R8,R0
   \   0000042C   190000EA           B        ??GetValue_30
    559                          break;
    560                      case SVT_LO_BOT_TEMP_ENABLE:
    561                          tmpValKey = SVT_AL_ENABLE;
   \                     ??GetValue_37:
   \   00000430   0310A0E1           MOV      R1,R3
    562                          tmpPtr = (AlarmBasic *)LowBotTempPtr;
   \   00000434   160000EA           B        ??GetValue_38
    563                          break;
    564                      case SVT_HI_TEMP_LIMIT:
    565                          tmpValKey = SVT_AL_LIMIT;
   \                     ??GetValue_39:
   \   00000438   0910A0E1           MOV      R1,R9
    566                          tmpPtr = (AlarmBasic *)HighTempPtr;
   \   0000043C   F3FFFFEA           B        ??GetValue_32
    567                          break;
    568                      case SVT_LO_TEMP_LIMIT:
    569                          tmpValKey = SVT_AL_LIMIT;
   \                     ??GetValue_40:
   \   00000440   0910A0E1           MOV      R1,R9
    570                          tmpPtr = (AlarmBasic *)LowTempPtr;
   \   00000444   F4FFFFEA           B        ??GetValue_34
    571                          break;
    572                      case SVT_HI_BOT_TEMP_LIMIT:
    573                          tmpValKey = SVT_AL_LIMIT;
   \                     ??GetValue_41:
   \   00000448   0910A0E1           MOV      R1,R9
    574                          tmpPtr = (AlarmBasic *)HighBotTempPtr;
   \   0000044C   F5FFFFEA           B        ??GetValue_36
    575                          break;
    576                      case SVT_LO_BOT_TEMP_LIMIT:
    577                          tmpValKey = SVT_AL_LIMIT;
   \                     ??GetValue_42:
   \   00000450   0910A0E1           MOV      R1,R9
    578                          tmpPtr = (AlarmBasic *)LowBotTempPtr;
   \   00000454   0E0000EA           B        ??GetValue_38
    579                          break;
    580                      case SVT_HI_TEMP_STATE:
    581                          tmpValKey = SVT_AL_STATE;
   \                     ??GetValue_43:
   \   00000458   0A10A0E1           MOV      R1,R10
    582                          tmpPtr = (AlarmBasic *)HighTempPtr;
   \   0000045C   EBFFFFEA           B        ??GetValue_32
    583                          break;
    584                      case SVT_LO_TEMP_STATE:
    585                          tmpValKey = SVT_AL_STATE;
   \                     ??GetValue_44:
   \   00000460   0A10A0E1           MOV      R1,R10
    586                          tmpPtr = (AlarmBasic *)LowTempPtr;
   \   00000464   ECFFFFEA           B        ??GetValue_34
    587                          break;
    588                      case SVT_HI_BOT_TEMP_STATE:
    589                          tmpValKey = SVT_AL_STATE;
   \                     ??GetValue_45:
   \   00000468   0A10A0E1           MOV      R1,R10
    590                          tmpPtr = (AlarmBasic *)HighBotTempPtr;
   \   0000046C   EDFFFFEA           B        ??GetValue_36
    591                          break;
    592                      case SVT_LO_BOT_TEMP_STATE:
    593                          tmpValKey = SVT_AL_STATE;
   \                     ??GetValue_46:
   \   00000470   0A10A0E1           MOV      R1,R10
    594                          tmpPtr = (AlarmBasic *)LowBotTempPtr;
   \   00000474   060000EA           B        ??GetValue_38
    595                          break;
    596                      case SVT_HI_TEMP_VALUE:
    597                          tmpValKey = SVT_AL_VALUE;
   \                     ??GetValue_47:
   \   00000478   0C10A0E1           MOV      R1,R12
    598                          tmpPtr = (AlarmBasic *)HighTempPtr;
   \   0000047C   E3FFFFEA           B        ??GetValue_32
    599                          break;
    600                      case SVT_LO_TEMP_VALUE:
    601                          tmpValKey = SVT_AL_VALUE;
   \                     ??GetValue_48:
   \   00000480   0C10A0E1           MOV      R1,R12
    602                          tmpPtr = (AlarmBasic *)LowTempPtr;
   \   00000484   E4FFFFEA           B        ??GetValue_34
    603                          break;
    604                      case SVT_HI_BOT_TEMP_VALUE:
    605                          tmpValKey = SVT_AL_VALUE;
   \                     ??GetValue_49:
   \   00000488   0C10A0E1           MOV      R1,R12
    606                          tmpPtr = (AlarmBasic *)HighBotTempPtr;
   \   0000048C   E5FFFFEA           B        ??GetValue_36
    607                          break;
    608                      case SVT_LO_BOT_TEMP_VALUE:
    609                          tmpValKey = SVT_AL_VALUE;
   \                     ??GetValue_50:
   \   00000490   0C10A0E1           MOV      R1,R12
    610                          tmpPtr = (AlarmBasic *)LowBotTempPtr;
   \                     ??GetValue_38:
   \   00000494   0280A0E1           MOV      R8,R2
    611                          break;
    612                      }
    613                      if (tmpPtr) {
   \                     ??GetValue_30:
   \   00000498   000058E3           CMP      R8,#+0
   \   0000049C   0900000A           BEQ      ??GetValue_51
    614                          Status = tmpPtr->GetValue(tmpValKey, 0, MyRetValue,  DecPnt, Unit);
   \   000004A0   80002DE9           PUSH     {R7}
   \   000004A4   40002DE9           PUSH     {R6}
   \   000004A8   A44098E5           LDR      R4,[R8, #+164]
   \   000004AC   0530A0E1           MOV      R3,R5
   \   000004B0   244094E5           LDR      R4,[R4, #+36]
   \   000004B4   0020A0E3           MOV      R2,#+0
   \   000004B8   0800A0E1           MOV      R0,R8
   \   000004BC   0FE0A0E1           MOV      LR,PC
   \   000004C0   14FF2FE1           BX       R4
   \   000004C4   060000EA           B        ??GetValue_27
    615                      } else {
    616                          Status = GETVAL_NO_DISPLAY;
   \                     ??GetValue_51:
   \   000004C8   0300A0E3           MOV      R0,#+3
   \   000004CC   050000EA           B        ??GetValue_26
    617                      }
    618                  }
    619                  break;
    620              default:
    621                  Status = PRogramObject::GetValue(ValueId, Index, MyRetValue,  DecPnt, Unit);
   \                     ??GetValue_8:
   \   000004D0   80002DE9           PUSH     {R7}
   \   000004D4   40002DE9           PUSH     {R6}
   \   000004D8   08209DE5           LDR      R2,[SP, #+8]
   \   000004DC   0B00A0E1           MOV      R0,R11
   \   000004E0   ........           _BLF     ??GetValue_3,??GetValue??rA
   \                     ??GetValue_27:
   \   000004E4   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
    622                  break;
    623              }
    624              return (Status);
   \                     ??GetValue_26:
   \   000004E8   F24FBDE8           POP      {R1,R4-R11,LR}
   \   000004EC   1EFF2FE1           BX       LR               ;; return
    625          }
    626          

   \                                 In segment CODE, align 4, keep-with-next
    627          int PROTemperature::GetStringValue(int ValueId, int Index, AnsiString &MyString) {
   \                     ??GetStringValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
    628              int Status = GETVAL_NO_ERR;
   \   00000004   0040A0E3           MOV      R4,#+0
    629              switch (ValueId) {
   \   00000008   19E0A0E3           MOV      LR,#+25
   \   0000000C   50EE8EE3           ORR      LR,LR,#0x500
   \   00000010   0E0051E1           CMP      R1,LR
   \   00000014   0500001A           BNE      ??GetStringValue_2
    630              case SVT_PRO_STATUS:
    631                  FindPROStatus(MyString);
   \   00000018   A42090E5           LDR      R2,[R0, #+164]
   \   0000001C   0310A0E1           MOV      R1,R3
   \   00000020   1C2092E5           LDR      R2,[R2, #+28]
   \   00000024   0FE0A0E1           MOV      LR,PC
   \   00000028   12FF2FE1           BX       R2
   \   0000002C   010000EA           B        ??GetStringValue_3
    632                  break;
    633              default:
    634                  Status = PRogramObject::GetStringValue(ValueId, Index, MyString);
   \                     ??GetStringValue_2:
   \   00000030   ........           _BLF     ??GetStringValue_1,??GetStringValue??rA
   \   00000034   0040A0E1           MOV      R4,R0
    635                  break;
    636              }
    637              return (Status);
   \                     ??GetStringValue_3:
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           B        ?Subroutine38
    638          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine38:
   \   00000000   1040BDE8           POP      {R4,LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
    639          

   \                                 In segment CODE, align 4, keep-with-next
    640          int PROTemperature::GetBitValue(int ValueId, int Index, bool &MyBit) {
   \                     ??GetBitValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
    641              int Status = GETVAL_NO_ERR;
    642              switch (ValueId) {
   \   00000004   8EC041E2           SUB      R12,R1,#+142
   \   00000008   8CCD4CE2           SUB      R12,R12,#+8960
   \   0000000C   09005CE3           CMP      R12,#+9
   \   00000010   2400008A           BHI      ??GetBitValue_4
   \   00000014   01EF8FE2           ADR      LR,??GetBitValue_1
   \   00000018   0CE0DEE7           LDRB     LR,[LR, R12]
   \   0000001C   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??GetBitValue_1:
   \   00000020   02022121           DC8      +2,+2,+33,+33
   \   00000024   21212121           DC8      +33,+33,+33,+33
   \   00000028   02020000           DC8      +2,+2,+0,+0
    643              case SVT_HI_TEMP_ENABLE     :
    644              case SVT_LO_TEMP_ENABLE     :
    645              case SVT_HI_BOT_TEMP_ENABLE :
    646              case SVT_LO_BOT_TEMP_ENABLE :
    647                  {
    648                      int        tmpValKey;
    649                      AlarmBasic *tmpPtr;
    650                      switch (ValueId) {
   \                     ??GetBitValue_5:
   \   0000002C   3E20A0E3           MOV      R2,#+62
   \   00000030   8C2D82E3           ORR      R2,R2,#0x2300
   \   00000034   8E1041E2           SUB      R1,R1,#+142
   \   00000038   8C1D41E2           SUB      R1,R1,#+8960
   \   0000003C   0D00008A           BHI      ??GetBitValue_6
   \   00000040   014F8FE2           ADR      R4,??GetBitValue_2
   \   00000044   0140D4E7           LDRB     R4,[R4, R1]
   \   00000048   04F18FE0           ADD      PC,PC,R4, LSL #+2
   \                     ??GetBitValue_2:
   \   0000004C   02040A0A           DC8      +2,+4,+10,+10
   \   00000050   0A0A0A0A           DC8      +10,+10,+10,+10
   \   00000054   06080000           DC8      +6,+8,+0,+0
    651                      case SVT_HI_TEMP_ENABLE:
    652                          tmpValKey = SVT_AL_ENABLE;
    653                          tmpPtr = (AlarmBasic *)HighTempPtr;
   \                     ??GetBitValue_7:
   \   00000058   7CE190E5           LDR      LR,[R0, #+380]
   \   0000005C   040000EA           B        ??GetBitValue_8
    654                          break;
    655                      case SVT_LO_TEMP_ENABLE:
    656                          tmpValKey = SVT_AL_ENABLE;
    657                          tmpPtr = (AlarmBasic *)LowTempPtr;
   \                     ??GetBitValue_9:
   \   00000060   80E190E5           LDR      LR,[R0, #+384]
   \   00000064   020000EA           B        ??GetBitValue_8
    658                          break;
    659                      case SVT_HI_BOT_TEMP_ENABLE:
    660                          tmpValKey = SVT_AL_ENABLE;
    661                          tmpPtr = (AlarmBasic *)HighBotTempPtr;
   \                     ??GetBitValue_10:
   \   00000068   84E190E5           LDR      LR,[R0, #+388]
   \   0000006C   000000EA           B        ??GetBitValue_8
    662                          break;
    663                      case SVT_LO_BOT_TEMP_ENABLE:
    664                          tmpValKey = SVT_AL_ENABLE;
    665                          tmpPtr = (AlarmBasic *)LowBotTempPtr;
   \                     ??GetBitValue_11:
   \   00000070   88E190E5           LDR      LR,[R0, #+392]
   \                     ??GetBitValue_8:
   \   00000074   02C0A0E1           MOV      R12,R2
    666                          break;
    667                      }
    668                      if (tmpPtr) {
   \                     ??GetBitValue_6:
   \   00000078   00005EE3           CMP      LR,#+0
   \   0000007C   0700000A           BEQ      ??GetBitValue_12
    669                          Status = tmpPtr->GetBitValue(tmpValKey, 0, MyBit);
   \   00000080   A4409EE5           LDR      R4,[LR, #+164]
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   2C4094E5           LDR      R4,[R4, #+44]
   \   0000008C   0C10A0E1           MOV      R1,R12
   \   00000090   0E00A0E1           MOV      R0,LR
   \   00000094   0FE0A0E1           MOV      LR,PC
   \   00000098   14FF2FE1           BX       R4
   \   0000009C   020000EA           B        ??GetBitValue_13
    670                      } else {
    671                          Status = GETVAL_NO_DISPLAY;
   \                     ??GetBitValue_12:
   \   000000A0   0300A0E3           MOV      R0,#+3
   \   000000A4   000000EA           B        ??GetBitValue_13
    672                      }
    673                  }
    674                  break;
    675              default:
    676                  Status = PRogramObject::GetBitValue(ValueId, Index, MyBit);
   \                     ??GetBitValue_4:
   \   000000A8   ........           _BLF     ??GetBitValue_3,??GetBitValue??rA
    677                  break;
    678              }
    679              return (Status);
   \                     ??GetBitValue_13:
   \   000000AC                      REQUIRE ?Subroutine38
   \   000000AC                      ;; // Fall through to label ?Subroutine38
    680          }
    681          
    682          

   \                                 In segment CODE, align 4, keep-with-next
    683          int PROTemperature::PutValue(int ValueId, int Index, AnsiString NewValue, bool Local, int *UnitId) {
   \                     ??PutValue:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   5CD04DE2           SUB      SP,SP,#+92
   \   00000008   8090DDE5           LDRB     R9,[SP, #+128]
   \   0000000C   0050A0E1           MOV      R5,R0
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   0380A0E1           MOV      R8,R3
    684              int Status    = E_NO_ERR,
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
    685                  ValUnitId = NO_UNIT;
   \   00000024   04108DE5           STR      R1,[SP, #+4]
    686              switch (ValueId) {
   \   00000028   3EA0A0E3           MOV      R10,#+62
   \   0000002C   8CAD8AE3           ORR      R10,R10,#0x2300
   \   00000030   0CB0CAE3           BIC      R11,R10,#0xC
   \   00000034   0040A0E3           MOV      R4,#+0
   \   00000038   FB0F56E3           CMP      R6,#+1004
   \   0000003C   ED10A013           MOVNE    R1,#+237
   \   00000040   C01F8113           ORRNE    R1,R1,#0x300
   \   00000044   01005611           CMPNE    R6,R1
   \   00000048   4600000A           BEQ      ??PutValue_3
   \   0000004C   430E56E3           CMP      R6,#+1072
   \   00000050   44108112           ADDNE    R1,R1,#+68
   \   00000054   01005611           CMPNE    R6,R1
   \   00000058   01108112           ADDNE    R1,R1,#+1
   \   0000005C   01005611           CMPNE    R6,R1
   \   00000060   01108113           ORRNE    R1,R1,#0x1
   \   00000064   01005611           CMPNE    R6,R1
   \   00000068   01108112           ADDNE    R1,R1,#+1
   \   0000006C   01005611           CMPNE    R6,R1
   \   00000070   01108113           ORRNE    R1,R1,#0x1
   \   00000074   01005611           CMPNE    R6,R1
   \   00000078   440E5613           CMPNE    R6,#+1088
   \   0000007C   0C108112           ADDNE    R1,R1,#+12
   \   00000080   01005611           CMPNE    R6,R1
   \   00000084   01108112           ADDNE    R1,R1,#+1
   \   00000088   01005611           CMPNE    R6,R1
   \   0000008C   01108113           ORRNE    R1,R1,#0x1
   \   00000090   01005611           CMPNE    R6,R1
   \   00000094   01108112           ADDNE    R1,R1,#+1
   \   00000098   01005611           CMPNE    R6,R1
   \   0000009C   01108113           ORRNE    R1,R1,#0x1
   \   000000A0   01005611           CMPNE    R6,R1
   \   000000A4   14108112           ADDNE    R1,R1,#+20
   \   000000A8   01005611           CMPNE    R6,R1
   \   000000AC   0F108112           ADDNE    R1,R1,#+15
   \   000000B0   01005611           CMPNE    R6,R1
   \   000000B4   01108113           ORRNE    R1,R1,#0x1
   \   000000B8   01005611           CMPNE    R6,R1
   \   000000BC   01108112           ADDNE    R1,R1,#+1
   \   000000C0   01005611           CMPNE    R6,R1
   \   000000C4   01108113           ORRNE    R1,R1,#0x1
   \   000000C8   01005611           CMPNE    R6,R1
   \   000000CC   01108112           ADDNE    R1,R1,#+1
   \   000000D0   01005611           CMPNE    R6,R1
   \   000000D4   01108113           ORRNE    R1,R1,#0x1
   \   000000D8   01005611           CMPNE    R6,R1
   \   000000DC   01108112           ADDNE    R1,R1,#+1
   \   000000E0   01005611           CMPNE    R6,R1
   \   000000E4   01108113           ORRNE    R1,R1,#0x1
   \   000000E8   01005611           CMPNE    R6,R1
   \   000000EC   470E5613           CMPNE    R6,#+1136
   \   000000F0   02108112           ADDNE    R1,R1,#+2
   \   000000F4   01005611           CMPNE    R6,R1
   \   000000F8   01108112           ADDNE    R1,R1,#+1
   \   000000FC   01005611           CMPNE    R6,R1
   \   00000100   E200000A           BEQ      ??PutValue_4
   \   00000104   4E108AE2           ADD      R1,R10,#+78
   \   00000108   010056E1           CMP      R6,R1
   \   0000010C   9100000A           BEQ      ??PutValue_5
   \   00000110   011081E3           ORR      R1,R1,#0x1
   \   00000114   010056E1           CMP      R6,R1
   \   00000118   9F00000A           BEQ      ??PutValue_6
   \   0000011C   011081E2           ADD      R1,R1,#+1
   \   00000120   010056E1           CMP      R6,R1
   \   00000124   3700000A           BEQ      ??PutValue_7
   \   00000128   011081E3           ORR      R1,R1,#0x1
   \   0000012C   010056E1           CMP      R6,R1
   \   00000130   4B00000A           BEQ      ??PutValue_8
   \   00000134   051081E2           ADD      R1,R1,#+5
   \   00000138   010056E1           CMP      R6,R1
   \   0000013C   A900000A           BEQ      ??PutValue_9
   \   00000140   011081E3           ORR      R1,R1,#0x1
   \   00000144   010056E1           CMP      R6,R1
   \   00000148   BD00000A           BEQ      ??PutValue_10
   \   0000014C   011081E2           ADD      R1,R1,#+1
   \   00000150   010056E1           CMP      R6,R1
   \   00000154   5500000A           BEQ      ??PutValue_11
   \   00000158   011081E3           ORR      R1,R1,#0x1
   \   0000015C   010056E1           CMP      R6,R1
   \   00000160   6900000A           BEQ      ??PutValue_12
   \   00000164   2E0100EA           B        ??PutValue_13
    687              case SVT_TEMP       :
    688              case SVT_VAPOR_TEMP :
    689                  Temperature = ConvertToSi(NewValue, TEMP_UNIT, Status, MIN_TEMP, MAX_TEMP, Temperature);
   \                     ??PutValue_3:
   \   00000168   0810A0E1           MOV      R1,R8
   \   0000016C   24008DE2           ADD      R0,SP,#+36
   \   00000170   ........           _BLF     ??string,??string??rA
   \   00000174   680195E5           LDR      R0,[R5, #+360]
   \   00000178   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000017C   03002DE9           PUSH     {R0,R1}
   \   00000180   0000A0E3           MOV      R0,#+0
   \   00000184   4014A0E3           MOV      R1,#+1073741824
   \   00000188   691881E3           ORR      R1,R1,#0x690000
   \   0000018C   03002DE9           PUSH     {R0,R1}
   \   00000190   0C159FE5           LDR      R1,??PutValue_14  ;; 0xffffffffc0668000
   \   00000194   03002DE9           PUSH     {R0,R1}
   \   00000198   18208DE2           ADD      R2,SP,#+24
   \   0000019C   3C008DE2           ADD      R0,SP,#+60
   \   000001A0   0800BDE8           POP      {R3}
   \   000001A4   0510A0E3           MOV      R1,#+5
   \   000001A8   ........           _BLF     ??ConvertToSi,??ConvertToSi??rA
   \   000001AC   680185E5           STR      R0,[R5, #+360]
   \   000001B0   0420A0E1           MOV      R2,R4
   \   000001B4   0110A0E3           MOV      R1,#+1
   \   000001B8   38008DE2           ADD      R0,SP,#+56
   \   000001BC   ........           _BLF     ??_Tidy,??_Tidy??rA
    690                  if (Status == E_NO_ERR) {
   \   000001C0   14009DE5           LDR      R0,[SP, #+20]
   \   000001C4   14D08DE2           ADD      SP,SP,#+20
   \   000001C8   000050E3           CMP      R0,#+0
   \   000001CC   2501001A           BNE      ??PutValue_15
    691                      if (!Master) {
   \   000001D0   D0049FE5           LDR      R0,??PutValue_14+0x4  ;; Master
   \   000001D4   0010D0E5           LDRB     R1,[R0, #+0]
   \   000001D8   000051E3           CMP      R1,#+0
    692          				IsOnline = false;
   \   000001DC   4A11C505           STRBEQ   R1,[R5, #+330]
    693                      }
    694                      if (CreatedFromThisTank ) {
   \   000001E0   641195E5           LDR      R1,[R5, #+356]
   \   000001E4   000051E3           CMP      R1,#+0
   \   000001E8   1E01000A           BEQ      ??PutValue_15
    695                          ((PROTank *)CreatedFromThisTank)->Temperature = Temperature;
   \   000001EC   682195E5           LDR      R2,[R5, #+360]
   \   000001F0   8C2281E5           STR      R2,[R1, #+652]
    696                          if (!Master) {
   \   000001F4   0000D0E5           LDRB     R0,[R0, #+0]
   \   000001F8   000050E3           CMP      R0,#+0
   \   000001FC   1901001A           BNE      ??PutValue_15
    697          					CreatedFromThisTank->SetToOffline();
   \   00000200   ........           _BLF     ??SetToOffline,??SetToOffline??rA
   \   00000204   170100EA           B        ??PutValue_15
    698                          }
    699                      }
    700                  }
    701                  break;
    702              case SVT_HI_TEMP_ENABLE:
    703                  if (HighTempPtr) {
   \                     ??PutValue_7:
   \   00000208   7C0195E5           LDR      R0,[R5, #+380]
   \   0000020C   000050E3           CMP      R0,#+0
   \   00000210   1701000A           BEQ      ??PutValue_16
    704                      Status = HighTempPtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local, &ValUnitId);
   \   00000214   A40090E5           LDR      R0,[R0, #+164]
   \   00000218   0810A0E1           MOV      R1,R8
   \   0000021C   304080E2           ADD      R4,R0,#+48
   \   00000220   08008DE2           ADD      R0,SP,#+8
   \   00000224   ........           _BLF     ??string,??string??rA
   \   00000228   04008DE2           ADD      R0,SP,#+4
   \   0000022C   01002DE9           PUSH     {R0}
   \   00000230   00022DE9           PUSH     {R9}
   \   00000234   7C0195E5           LDR      R0,[R5, #+380]
   \   00000238   004094E5           LDR      R4,[R4, #+0]
   \   0000023C   10308DE2           ADD      R3,SP,#+16
   \   00000240   0720A0E1           MOV      R2,R7
   \   00000244   0A10A0E1           MOV      R1,R10
   \   00000248   0FE0A0E1           MOV      LR,PC
   \   0000024C   14FF2FE1           BX       R4
   \                     ??PutValue_17:
   \   00000250   08008DE5           STR      R0,[SP, #+8]
   \   00000254   0020A0E3           MOV      R2,#+0
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   10008DE2           ADD      R0,SP,#+16
   \   00000260   FE0000EA           B        ??PutValue_18
    705                  }
    706                  break;
    707              case SVT_LO_TEMP_ENABLE:
    708                  if (LowTempPtr) {
   \                     ??PutValue_8:
   \   00000264   800195E5           LDR      R0,[R5, #+384]
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   0001000A           BEQ      ??PutValue_16
    709                      Status = LowTempPtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local, &ValUnitId);
   \   00000270   A40090E5           LDR      R0,[R0, #+164]
   \   00000274   0810A0E1           MOV      R1,R8
   \   00000278   304080E2           ADD      R4,R0,#+48
   \   0000027C   08008DE2           ADD      R0,SP,#+8
   \   00000280   ........           _BLF     ??string,??string??rA
   \   00000284   04008DE2           ADD      R0,SP,#+4
   \   00000288   01002DE9           PUSH     {R0}
   \   0000028C   00022DE9           PUSH     {R9}
   \   00000290   800195E5           LDR      R0,[R5, #+384]
   \   00000294   004094E5           LDR      R4,[R4, #+0]
   \   00000298   10308DE2           ADD      R3,SP,#+16
   \   0000029C   0720A0E1           MOV      R2,R7
   \   000002A0   0A10A0E1           MOV      R1,R10
   \   000002A4   0FE0A0E1           MOV      LR,PC
   \   000002A8   14FF2FE1           BX       R4
   \   000002AC   E7FFFFEA           B        ??PutValue_17
    710                  }
    711                  break;
    712              case SVT_HI_BOT_TEMP_ENABLE:
    713                  if (HighBotTempPtr) {
   \                     ??PutValue_11:
   \   000002B0   840195E5           LDR      R0,[R5, #+388]
   \   000002B4   000050E3           CMP      R0,#+0
   \   000002B8   ED00000A           BEQ      ??PutValue_16
    714                      Status = HighBotTempPtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local, &ValUnitId);
   \   000002BC   A40090E5           LDR      R0,[R0, #+164]
   \   000002C0   0810A0E1           MOV      R1,R8
   \   000002C4   304080E2           ADD      R4,R0,#+48
   \   000002C8   08008DE2           ADD      R0,SP,#+8
   \   000002CC   ........           _BLF     ??string,??string??rA
   \   000002D0   04008DE2           ADD      R0,SP,#+4
   \   000002D4   01002DE9           PUSH     {R0}
   \   000002D8   00022DE9           PUSH     {R9}
   \   000002DC   840195E5           LDR      R0,[R5, #+388]
   \   000002E0   004094E5           LDR      R4,[R4, #+0]
   \   000002E4   10308DE2           ADD      R3,SP,#+16
   \   000002E8   0720A0E1           MOV      R2,R7
   \   000002EC   0A10A0E1           MOV      R1,R10
   \                     ??PutValue_19:
   \   000002F0   0FE0A0E1           MOV      LR,PC
   \   000002F4   14FF2FE1           BX       R4
   \                     ??PutValue_20:
   \   000002F8   08008DE5           STR      R0,[SP, #+8]
   \   000002FC   0020A0E3           MOV      R2,#+0
   \   00000300   0110A0E3           MOV      R1,#+1
   \   00000304   10008DE2           ADD      R0,SP,#+16
   \   00000308   D40000EA           B        ??PutValue_18
    715                  }
    716                  break;
    717              case SVT_LO_BOT_TEMP_ENABLE:
    718                  if (LowBotTempPtr) {
   \                     ??PutValue_12:
   \   0000030C   880195E5           LDR      R0,[R5, #+392]
   \   00000310   000050E3           CMP      R0,#+0
   \   00000314   D600000A           BEQ      ??PutValue_16
    719                      Status = LowBotTempPtr->PutValue(SVT_AL_ENABLE, Index, NewValue, Local, &ValUnitId);
   \   00000318   A40090E5           LDR      R0,[R0, #+164]
   \   0000031C   0810A0E1           MOV      R1,R8
   \   00000320   304080E2           ADD      R4,R0,#+48
   \   00000324   08008DE2           ADD      R0,SP,#+8
   \   00000328   ........           _BLF     ??string,??string??rA
   \   0000032C   04008DE2           ADD      R0,SP,#+4
   \   00000330   01002DE9           PUSH     {R0}
   \   00000334   00022DE9           PUSH     {R9}
   \   00000338   880195E5           LDR      R0,[R5, #+392]
   \   0000033C   004094E5           LDR      R4,[R4, #+0]
   \   00000340   10308DE2           ADD      R3,SP,#+16
   \   00000344   0720A0E1           MOV      R2,R7
   \   00000348   0A10A0E1           MOV      R1,R10
   \   0000034C   0FE0A0E1           MOV      LR,PC
   \   00000350   14FF2FE1           BX       R4
   \   00000354   BDFFFFEA           B        ??PutValue_17
    720                  }
    721                  break;
    722              case SVT_HI_TEMP_LIMIT:
    723                  if (HighTempPtr) {
   \                     ??PutValue_5:
   \   00000358   7C0195E5           LDR      R0,[R5, #+380]
   \   0000035C   000050E3           CMP      R0,#+0
   \   00000360   C300000A           BEQ      ??PutValue_16
    724                      Status = HighTempPtr->PutValue(SVT_AL_LIMIT, Index, NewValue, Local, &ValUnitId);
   \   00000364   A40090E5           LDR      R0,[R0, #+164]
   \   00000368   0810A0E1           MOV      R1,R8
   \   0000036C   304080E2           ADD      R4,R0,#+48
   \   00000370   08008DE2           ADD      R0,SP,#+8
   \   00000374   ........           _BLF     ??string,??string??rA
   \   00000378   04008DE2           ADD      R0,SP,#+4
   \   0000037C   01002DE9           PUSH     {R0}
   \   00000380   00022DE9           PUSH     {R9}
   \   00000384   7C0195E5           LDR      R0,[R5, #+380]
   \   00000388   004094E5           LDR      R4,[R4, #+0]
   \   0000038C   10308DE2           ADD      R3,SP,#+16
   \   00000390   0720A0E1           MOV      R2,R7
   \   00000394   0B10A0E1           MOV      R1,R11
   \   00000398   D4FFFFEA           B        ??PutValue_19
    725                  }
    726                  break;
    727              case SVT_LO_TEMP_LIMIT:
    728                  if (LowTempPtr) {
   \                     ??PutValue_6:
   \   0000039C   800195E5           LDR      R0,[R5, #+384]
   \   000003A0   000050E3           CMP      R0,#+0
   \   000003A4   B200000A           BEQ      ??PutValue_16
    729                      Status = LowTempPtr->PutValue(SVT_AL_LIMIT, Index, NewValue, Local, &ValUnitId);
   \   000003A8   A40090E5           LDR      R0,[R0, #+164]
   \   000003AC   0810A0E1           MOV      R1,R8
   \   000003B0   304080E2           ADD      R4,R0,#+48
   \   000003B4   08008DE2           ADD      R0,SP,#+8
   \   000003B8   ........           _BLF     ??string,??string??rA
   \   000003BC   04008DE2           ADD      R0,SP,#+4
   \   000003C0   01002DE9           PUSH     {R0}
   \   000003C4   00022DE9           PUSH     {R9}
   \   000003C8   800195E5           LDR      R0,[R5, #+384]
   \   000003CC   004094E5           LDR      R4,[R4, #+0]
   \   000003D0   10308DE2           ADD      R3,SP,#+16
   \   000003D4   0720A0E1           MOV      R2,R7
   \   000003D8   0B10A0E1           MOV      R1,R11
   \   000003DC   0FE0A0E1           MOV      LR,PC
   \   000003E0   14FF2FE1           BX       R4
   \   000003E4   99FFFFEA           B        ??PutValue_17
    730                  }
    731                  break;
    732              case SVT_HI_BOT_TEMP_LIMIT:
    733                  if (HighBotTempPtr) {
   \                     ??PutValue_9:
   \   000003E8   840195E5           LDR      R0,[R5, #+388]
   \   000003EC   000050E3           CMP      R0,#+0
   \   000003F0   9F00000A           BEQ      ??PutValue_16
    734                      Status = HighBotTempPtr->PutValue(SVT_AL_LIMIT, Index, NewValue, Local, &ValUnitId);
   \   000003F4   A40090E5           LDR      R0,[R0, #+164]
   \   000003F8   0810A0E1           MOV      R1,R8
   \   000003FC   304080E2           ADD      R4,R0,#+48
   \   00000400   08008DE2           ADD      R0,SP,#+8
   \   00000404   ........           _BLF     ??string,??string??rA
   \   00000408   04008DE2           ADD      R0,SP,#+4
   \   0000040C   01002DE9           PUSH     {R0}
   \   00000410   00022DE9           PUSH     {R9}
   \   00000414   840195E5           LDR      R0,[R5, #+388]
   \   00000418   004094E5           LDR      R4,[R4, #+0]
   \   0000041C   10308DE2           ADD      R3,SP,#+16
   \   00000420   0720A0E1           MOV      R2,R7
   \   00000424   0B10A0E1           MOV      R1,R11
   \   00000428   0FE0A0E1           MOV      LR,PC
   \   0000042C   14FF2FE1           BX       R4
   \   00000430   08008DE5           STR      R0,[SP, #+8]
   \   00000434   0020A0E3           MOV      R2,#+0
   \   00000438   0110A0E3           MOV      R1,#+1
   \   0000043C   10008DE2           ADD      R0,SP,#+16
   \   00000440   860000EA           B        ??PutValue_18
    735                  }
    736                  break;
    737              case SVT_LO_BOT_TEMP_LIMIT:
    738                  if (LowBotTempPtr) {
   \                     ??PutValue_10:
   \   00000444   880195E5           LDR      R0,[R5, #+392]
   \   00000448   000050E3           CMP      R0,#+0
   \   0000044C   8800000A           BEQ      ??PutValue_16
    739                      Status = LowBotTempPtr->PutValue(SVT_AL_LIMIT, Index, NewValue, Local, &ValUnitId);
   \   00000450   A40090E5           LDR      R0,[R0, #+164]
   \   00000454   0810A0E1           MOV      R1,R8
   \   00000458   304080E2           ADD      R4,R0,#+48
   \   0000045C   08008DE2           ADD      R0,SP,#+8
   \   00000460   ........           _BLF     ??string,??string??rA
   \   00000464   04008DE2           ADD      R0,SP,#+4
   \   00000468   01002DE9           PUSH     {R0}
   \   0000046C   00022DE9           PUSH     {R9}
   \   00000470   880195E5           LDR      R0,[R5, #+392]
   \   00000474   004094E5           LDR      R4,[R4, #+0]
   \   00000478   10308DE2           ADD      R3,SP,#+16
   \   0000047C   0720A0E1           MOV      R2,R7
   \   00000480   0B10A0E1           MOV      R1,R11
   \   00000484   0FE0A0E1           MOV      LR,PC
   \   00000488   14FF2FE1           BX       R4
   \   0000048C   6FFFFFEA           B        ??PutValue_17
    740                  }
    741                  break;
    742              case SVT_T1  :
    743              case SVT_T1_GAIN :
    744              case SVT_T1_OFFSET :
    745              case SVT_T2  :
    746              case SVT_T2_GAIN :
    747              case SVT_T2_OFFSET :
    748              case SVT_T3  :
    749              case SVT_T3_GAIN :
    750              case SVT_T3_OFFSET :
    751              case SVT_T4  :
    752              case SVT_T4_GAIN :
    753              case SVT_T4_OFFSET :
    754              case SVT_T5  :
    755              case SVT_T5_GAIN :
    756              case SVT_T5_OFFSET :
    757              case SVT_TT  :
    758              case SVT_TT_GAIN :
    759              case SVT_TT_OFFSET :
    760              case SVT_T1_ENABLE :
    761              case SVT_T2_ENABLE :
    762              case SVT_T5_ENABLE :
    763              case SVT_T3_ENABLE :
    764              case SVT_T4_ENABLE :
    765              case SVT_TP_ENABLE :
    766                  {
    767                      AnalogInput *SnsPtr = NULL;
    768                      switch (ValueId) {
   \                     ??PutValue_4:
   \   00000490   430E46E2           SUB      R0,R6,#+1072
   \   00000494   430050E3           CMP      R0,#+67
   \   00000498   3600008A           BHI      ??PutValue_21
   \   0000049C   011F8FE2           ADR      R1,??PutValue_1
   \   000004A0   0010D1E7           LDRB     R1,[R1, R0]
   \   000004A4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??PutValue_1:
   \   000004A8   1014171A           DC8      +16,+20,+23,+26
   \   000004AC   1D213333           DC8      +29,+33,+51,+51
   \   000004B0   33333333           DC8      +51,+51,+51,+51
   \   000004B4   33333333           DC8      +51,+51,+51,+51
   \   000004B8   141D1017           DC8      +20,+29,+16,+23
   \   000004BC   1A213333           DC8      +26,+33,+51,+51
   \   000004C0   33333333           DC8      +51,+51,+51,+51
   \   000004C4   33333333           DC8      +51,+51,+51,+51
   \   000004C8   33333333           DC8      +51,+51,+51,+51
   \   000004CC   33333333           DC8      +51,+51,+51,+51
   \   000004D0   33333333           DC8      +51,+51,+51,+51
   \   000004D4   33333333           DC8      +51,+51,+51,+51
   \   000004D8   33333333           DC8      +51,+51,+51,+51
   \   000004DC   33333333           DC8      +51,+51,+51,+51
   \   000004E0   1014171A           DC8      +16,+20,+23,+26
   \   000004E4   1D211014           DC8      +29,+33,+16,+20
   \   000004E8   171A1D21           DC8      +23,+26,+29,+33
    769                      case SVT_T1 :
    770                      case SVT_T1_GAIN :
    771                      case SVT_T1_OFFSET :
    772                      case SVT_T1_ENABLE :
    773                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP1, AI_SENSOR_TEMP);
   \                     ??PutValue_22:
   \   000004EC   0220A0E3           MOV      R2,#+2
   \   000004F0   FD10A0E3           MOV      R1,#+253
   \                     ??PutValue_23:
   \   000004F4   801E81E3           ORR      R1,R1,#0x800
   \   000004F8   1B0000EA           B        ??PutValue_24
    774                          break;
    775                      case SVT_T2 :
    776                      case SVT_T2_GAIN :
    777                      case SVT_T2_OFFSET :
    778                      case SVT_T2_ENABLE :
    779                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP2, AI_SENSOR_TEMP);
   \                     ??PutValue_25:
   \   000004FC   0220A0E3           MOV      R2,#+2
   \   00000500   691D4AE2           SUB      R1,R10,#+6720
   \   00000504   180000EA           B        ??PutValue_24
    780                          break;
    781                      case SVT_T3 :
    782                      case SVT_T3_GAIN :
    783                      case SVT_T3_OFFSET :
    784                      case SVT_T3_ENABLE :
    785                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP3, AI_SENSOR_TEMP);
   \                     ??PutValue_26:
   \   00000508   0220A0E3           MOV      R2,#+2
   \   0000050C   FF10A0E3           MOV      R1,#+255
   \   00000510   F7FFFFEA           B        ??PutValue_23
    786                          break;
    787                      case SVT_T4 :
    788                      case SVT_T4_GAIN :
    789                      case SVT_T4_OFFSET :
    790                      case SVT_T4_ENABLE :
    791                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP4, AI_SENSOR_TEMP);
   \                     ??PutValue_27:
   \   00000514   0220A0E3           MOV      R2,#+2
   \   00000518   901EA0E3           MOV      R1,#+2304
   \   0000051C   120000EA           B        ??PutValue_24
    792                          break;
    793                      case SVT_T5 :
    794                      case SVT_T5_GAIN :
    795                      case SVT_T5_OFFSET :
    796                      case SVT_T5_ENABLE :
    797                          SnsPtr = FindAnalogInput(C_AI_LOC_TEMP5, AI_SENSOR_TEMP);
   \                     ??PutValue_28:
   \   00000520   0220A0E3           MOV      R2,#+2
   \   00000524   0110A0E3           MOV      R1,#+1
   \   00000528   901E81E3           ORR      R1,R1,#0x900
   \   0000052C   0E0000EA           B        ??PutValue_24
    798                          break;
    799                      case SVT_TT :
    800                      case SVT_TT_GAIN :
    801                      case SVT_TT_OFFSET :
    802                      case SVT_TT_ENABLE :
    803                          SnsPtr = FindAnalogInput(C_AI_LOC_VAPOUR, AI_SENSOR_TEMP);
   \                     ??PutValue_29:
   \   00000530   0220A0E3           MOV      R2,#+2
   \   00000534   8E1E82E3           ORR      R1,R2,#0x8E0
   \   00000538   0500A0E1           MOV      R0,R5
   \   0000053C   ........           _BLF     ??FindAnalogInput,??FindAnalogInput??rA
   \   00000540   0040B0E1           MOVS     R4,R0
    804                          if (!SnsPtr) {
   \   00000544   0B00001A           BNE      ??PutValue_21
    805                              SnsPtr = FindAnalogInput(C_AI_LOC_DECK, AI_SENSOR_TEMP);
   \   00000548   0220A0E3           MOV      R2,#+2
   \   0000054C   EA10A0E3           MOV      R1,#+234
   \   00000550   801E81E3           ORR      R1,R1,#0x800
   \   00000554   0500A0E1           MOV      R0,R5
   \   00000558   ........           _BLF     ??FindAnalogInput,??FindAnalogInput??rA
   \   0000055C   0040B0E1           MOVS     R4,R0
    806                              if (!SnsPtr) {
   \   00000560   0400001A           BNE      ??PutValue_21
    807                                  SnsPtr = FindAnalogInput(C_AI_LOC_TEMP6, AI_SENSOR_TEMP);
   \   00000564   0220A0E3           MOV      R2,#+2
   \   00000568   901E82E3           ORR      R1,R2,#0x900
   \                     ??PutValue_24:
   \   0000056C   0500A0E1           MOV      R0,R5
   \   00000570   ........           _BLF     ??FindAnalogInput,??FindAnalogInput??rA
   \   00000574   0040A0E1           MOV      R4,R0
    808                              }
    809                          }
    810                          break;
    811                      }
    812                      int SnsValId = SVT_NOT_DEFINED;
   \                     ??PutValue_21:
   \   00000578   00A0A0E3           MOV      R10,#+0
    813                      switch (ValueId) {
   \   0000057C   436E46E2           SUB      R6,R6,#+1072
   \   00000580   050056E3           CMP      R6,#+5
   \   00000584   0D00009A           BLS      ??PutValue_30
   \   00000588   106046E2           SUB      R6,R6,#+16
   \   0000058C   050056E3           CMP      R6,#+5
   \   00000590   0800009A           BLS      ??PutValue_31
   \   00000594   286046E2           SUB      R6,R6,#+40
   \   00000598   050056E3           CMP      R6,#+5
   \   0000059C   0300009A           BLS      ??PutValue_32
   \   000005A0   066046E2           SUB      R6,R6,#+6
   \   000005A4   050056E3           CMP      R6,#+5
   \   000005A8   0600009A           BLS      ??PutValue_33
   \   000005AC   070000EA           B        ??PutValue_34
    814                      case SVT_T1_GAIN :
    815                      case SVT_T2_GAIN :
    816                      case SVT_T5_GAIN :
    817                      case SVT_T3_GAIN :
    818                      case SVT_T4_GAIN :
    819                      case SVT_TT_GAIN :
    820                          SnsValId = SVT_AI_GAIN;
   \                     ??PutValue_32:
   \   000005B0   B4A0A0E3           MOV      R10,#+180
   \   000005B4   040000EA           B        ??PutValue_35
    821                          break;
    822                      case SVT_T1_OFFSET :
    823                      case SVT_T2_OFFSET :
    824                      case SVT_T5_OFFSET :
    825                      case SVT_T3_OFFSET :
    826                      case SVT_T4_OFFSET :
    827                      case SVT_TT_OFFSET :
    828                          SnsValId = SVT_AI_OFFSET;
   \                     ??PutValue_31:
   \   000005B8   B5A0A0E3           MOV      R10,#+181
   \   000005BC   020000EA           B        ??PutValue_35
    829                          break;
    830                      case SVT_T1 :
    831                      case SVT_T2 :
    832                      case SVT_T5 :
    833                      case SVT_T3 :
    834                      case SVT_T4 :
    835                      case SVT_TT :
    836                          SnsValId = SVT_AI_CALC_VAL;
   \                     ??PutValue_30:
   \   000005C0   B8A0A0E3           MOV      R10,#+184
   \   000005C4   000000EA           B        ??PutValue_35
    837                          break;
    838                      case SVT_T1_ENABLE :
    839                      case SVT_T2_ENABLE :
    840                      case SVT_T5_ENABLE :
    841                      case SVT_T3_ENABLE :
    842                      case SVT_T4_ENABLE :
    843                      case SVT_TT_ENABLE :
    844                          SnsValId = SVT_AI_ENABLE;
   \                     ??PutValue_33:
   \   000005C8   B3A0A0E3           MOV      R10,#+179
   \                     ??PutValue_35:
   \   000005CC   40AE8AE3           ORR      R10,R10,#0x400
    845                          break;
    846          
    847                      }
    848                      if (SnsPtr) {
   \                     ??PutValue_34:
   \   000005D0   000054E3           CMP      R4,#+0
   \   000005D4   0F00000A           BEQ      ??PutValue_36
    849                          Status = SnsPtr->PutValue(SnsValId, Index, NewValue, Local, &ValUnitId);
   \   000005D8   A40094E5           LDR      R0,[R4, #+164]
   \   000005DC   0810A0E1           MOV      R1,R8
   \   000005E0   306080E2           ADD      R6,R0,#+48
   \   000005E4   08008DE2           ADD      R0,SP,#+8
   \   000005E8   ........           _BLF     ??string,??string??rA
   \   000005EC   04008DE2           ADD      R0,SP,#+4
   \   000005F0   01002DE9           PUSH     {R0}
   \   000005F4   00022DE9           PUSH     {R9}
   \   000005F8   0400A0E1           MOV      R0,R4
   \   000005FC   004096E5           LDR      R4,[R6, #+0]
   \   00000600   10308DE2           ADD      R3,SP,#+16
   \   00000604   0720A0E1           MOV      R2,R7
   \   00000608   0A10A0E1           MOV      R1,R10
   \   0000060C   0FE0A0E1           MOV      LR,PC
   \   00000610   14FF2FE1           BX       R4
   \   00000614   37FFFFEA           B        ??PutValue_20
    850                      } else {
    851                          Status     = GETVAL_NOT_AVAILABLE;
   \                     ??PutValue_36:
   \   00000618   0110A0E3           MOV      R1,#+1
   \   0000061C   00108DE5           STR      R1,[SP, #+0]
   \   00000620   180000EA           B        ??PutValue_37
    852                      }
    853                  }
    854                  break;
    855              default:
    856                  Status = PRogramObject::PutValue(ValueId, Index, NewValue, Local, &ValUnitId);
   \                     ??PutValue_13:
   \   00000624   0810A0E1           MOV      R1,R8
   \   00000628   40008DE2           ADD      R0,SP,#+64
   \   0000062C   ........           _BLF     ??string,??string??rA
   \   00000630   04008DE2           ADD      R0,SP,#+4
   \   00000634   01002DE9           PUSH     {R0}
   \   00000638   00022DE9           PUSH     {R9}
   \   0000063C   48308DE2           ADD      R3,SP,#+72
   \   00000640   0720A0E1           MOV      R2,R7
   \   00000644   0610A0E1           MOV      R1,R6
   \   00000648   0500A0E1           MOV      R0,R5
   \   0000064C   ........           _BLF     ??PutValue_2,??PutValue??rA
   \   00000650   08008DE5           STR      R0,[SP, #+8]
   \   00000654   0020A0E3           MOV      R2,#+0
   \   00000658   0110A0E3           MOV      R1,#+1
   \   0000065C   48008DE2           ADD      R0,SP,#+72
   \                     ??PutValue_18:
   \   00000660   ........           _BLF     ??_Tidy,??_Tidy??rA
   \   00000664   08D08DE2           ADD      SP,SP,#+8
    857                  break;
    858              }
    859              if (Status == E_NO_ERR) {
   \                     ??PutValue_15:
   \   00000668   00009DE5           LDR      R0,[SP, #+0]
   \   0000066C   000050E3           CMP      R0,#+0
   \   00000670   0400001A           BNE      ??PutValue_37
    860                  SetModifiedFlag();
   \                     ??PutValue_16:
   \   00000674   A41095E5           LDR      R1,[R5, #+164]
   \   00000678   0500A0E1           MOV      R0,R5
   \   0000067C   541091E5           LDR      R1,[R1, #+84]
   \   00000680   0FE0A0E1           MOV      LR,PC
   \   00000684   11FF2FE1           BX       R1
    861              }
    862              if (UnitId) {
   \                     ??PutValue_37:
   \   00000688   84009DE5           LDR      R0,[SP, #+132]
   \   0000068C   000050E3           CMP      R0,#+0
    863                  *UnitId = ValUnitId;
   \   00000690   04109D15           LDRNE    R1,[SP, #+4]
   \   00000694   00108015           STRNE    R1,[R0, #+0]
    864              }
    865              return (Status);
   \   00000698   00009DE5           LDR      R0,[SP, #+0]
   \   0000069C   5CD08DE2           ADD      SP,SP,#+92
   \   000006A0   ........           B        ?Subroutine37
   \                     ??PutValue_14:
   \   000006A4   008066C0           DC32     0xffffffffc0668000
   \   000006A8   ........           DC32     Master
    866          }
    867          

   \                                 In segment CODE, align 4, keep-with-next
    868          int PROTemperature::PutFloatValue(int ValueId, float NewValue) {
   \                     ??PutFloatValue:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   0130A0E1           MOV      R3,R1
    869              int Status = E_NO_ERR;
   \   0000000C   0000A0E3           MOV      R0,#+0
    870              switch (ValueId) {
   \   00000010   3210A0E3           MOV      R1,#+50
   \   00000014   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000018   FB0F53E3           CMP      R3,#+1004
   \   0000001C   0C00000A           BEQ      ??PutFloatValue_2
   \   00000020   5A4081E2           ADD      R4,R1,#+90
   \   00000024   040053E1           CMP      R3,R4
   \   00000028   1000000A           BEQ      ??PutFloatValue_3
   \   0000002C   5B4081E2           ADD      R4,R1,#+91
   \   00000030   040053E1           CMP      R3,R4
   \   00000034   1600000A           BEQ      ??PutFloatValue_4
   \   00000038   624081E2           ADD      R4,R1,#+98
   \   0000003C   040053E1           CMP      R3,R4
   \   00000040   1C00000A           BEQ      ??PutFloatValue_5
   \   00000044   634081E2           ADD      R4,R1,#+99
   \   00000048   040053E1           CMP      R3,R4
   \   0000004C   1B00000A           BEQ      ??PutFloatValue_6
   \   00000050   1C0000EA           B        ??PutFloatValue_7
    871              case SVT_TEMP:
    872                  HasTemp   	= true;
   \                     ??PutFloatValue_2:
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   6011CCE5           STRB     R1,[R12, #+352]
    873                  IsNewData 	= true;
   \   0000005C   E010CCE5           STRB     R1,[R12, #+224]
    874                  Temperature = NewValue;
   \   00000060   68218CE5           STR      R2,[R12, #+360]
    875                  StatusTemp 	= GETVAL_NO_ERR;
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   58118CE5           STR      R1,[R12, #+344]
   \   0000006C   180000EA           B        ??PutFloatValue_8
    876                  break;
    877              case SVT_HI_TEMP_LIMIT:
    878                  if (HighTempPtr) {
   \                     ??PutFloatValue_3:
   \   00000070   7C319CE5           LDR      R3,[R12, #+380]
   \                     ??PutFloatValue_9:
   \   00000074   000053E3           CMP      R3,#+0
   \   00000078   1500000A           BEQ      ??PutFloatValue_8
    879                      Status = HighTempPtr->PutFloatValue(SVT_AL_LIMIT, NewValue);
   \   0000007C   0300A0E1           MOV      R0,R3
   \   00000080   A43093E5           LDR      R3,[R3, #+164]
   \   00000084   343093E5           LDR      R3,[R3, #+52]
   \   00000088   0FE0A0E1           MOV      LR,PC
   \   0000008C   13FF2FE1           BX       R3
   \   00000090   0F0000EA           B        ??PutFloatValue_8
    880                  }
    881                  break;
    882              case SVT_LO_TEMP_LIMIT:
    883                  if (LowTempPtr) {
   \                     ??PutFloatValue_4:
   \   00000094   80319CE5           LDR      R3,[R12, #+384]
   \                     ??PutFloatValue_10:
   \   00000098   000053E3           CMP      R3,#+0
   \   0000009C   0C00000A           BEQ      ??PutFloatValue_8
    884                      Status = LowTempPtr->PutFloatValue(SVT_AL_LIMIT, NewValue);
   \   000000A0   0300A0E1           MOV      R0,R3
   \   000000A4   A43093E5           LDR      R3,[R3, #+164]
   \   000000A8   343093E5           LDR      R3,[R3, #+52]
   \   000000AC   0FE0A0E1           MOV      LR,PC
   \   000000B0   13FF2FE1           BX       R3
   \   000000B4   060000EA           B        ??PutFloatValue_8
    885                  }
    886                  break;
    887              case SVT_HI_BOT_TEMP_LIMIT:
    888                  if (HighBotTempPtr) {
   \                     ??PutFloatValue_5:
   \   000000B8   84319CE5           LDR      R3,[R12, #+388]
   \   000000BC   ECFFFFEA           B        ??PutFloatValue_9
    889                      Status = HighBotTempPtr->PutFloatValue(SVT_AL_LIMIT, NewValue);
    890                  }
    891                  break;
    892              case SVT_LO_BOT_TEMP_LIMIT:
    893                  if (LowBotTempPtr) {
   \                     ??PutFloatValue_6:
   \   000000C0   88319CE5           LDR      R3,[R12, #+392]
   \   000000C4   F3FFFFEA           B        ??PutFloatValue_10
    894                      Status = LowBotTempPtr->PutFloatValue(SVT_AL_LIMIT, NewValue);
    895                  }
    896                  break;
    897              default:
    898                  Status = PRogramObject::PutFloatValue(ValueId, NewValue);
   \                     ??PutFloatValue_7:
   \   000000C8   0310A0E1           MOV      R1,R3
   \   000000CC   0C00A0E1           MOV      R0,R12
   \   000000D0   ........           _BLF     ??PutFloatValue_1,??PutFloatValue??rA
    899                  break;
    900              }
    901              return (Status);
   \                     ??PutFloatValue_8:
   \   000000D4   ........           B        ?Subroutine38
    902          }
    903          

   \                                 In segment CODE, align 4, keep-with-next
    904          int PROTemperature::PutBitValue(int ValueId, int Index, bool NewValue){
   \                     ??PutBitValue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    905              int Status = E_NO_ERR;
    906              switch (ValueId) {
   \   00000004   7CC190E5           LDR      R12,[R0, #+380]
   \   00000008   80E190E5           LDR      LR,[R0, #+384]
   \   0000000C   844190E5           LDR      R4,[R0, #+388]
   \   00000010   885190E5           LDR      R5,[R0, #+392]
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   8E80A0E3           MOV      R8,#+142
   \   0000001C   8C8D88E3           ORR      R8,R8,#0x2300
   \   00000020   080051E1           CMP      R1,R8
   \   00000024   01808813           ORRNE    R8,R8,#0x1
   \   00000028   08005111           CMPNE    R1,R8
   \   0000002C   07808812           ADDNE    R8,R8,#+7
   \   00000030   08005111           CMPNE    R1,R8
   \   00000034   01808813           ORRNE    R8,R8,#0x1
   \   00000038   08005111           CMPNE    R1,R8
   \   0000003C   0900000A           BEQ      ??PutBitValue_4
   \   00000040   778088E2           ADD      R8,R8,#+119
   \   00000044   080051E1           CMP      R1,R8
   \   00000048   01808813           ORRNE    R8,R8,#0x1
   \   0000004C   08005111           CMPNE    R1,R8
   \   00000050   01808812           ADDNE    R8,R8,#+1
   \   00000054   08005111           CMPNE    R1,R8
   \   00000058   01808813           ORRNE    R8,R8,#0x1
   \   0000005C   08005111           CMPNE    R1,R8
   \   00000060   1E00000A           BEQ      ??PutBitValue_5
   \   00000064   310000EA           B        ??PutBitValue_6
    907              case SVT_HI_TEMP_ENABLE     :
    908              case SVT_LO_TEMP_ENABLE     :
    909              case SVT_HI_BOT_TEMP_ENABLE :
    910              case SVT_LO_BOT_TEMP_ENABLE :
    911                  {
    912                      AlarmBasic *AlPtr = NULL;
    913                      switch ( ValueId ) {
   \                     ??PutBitValue_4:
   \   00000068   8E1041E2           SUB      R1,R1,#+142
   \   0000006C   8C1D41E2           SUB      R1,R1,#+8960
   \   00000070   090051E3           CMP      R1,#+9
   \   00000074   0C00008A           BHI      ??PutBitValue_7
   \   00000078   010F8FE2           ADR      R0,??PutBitValue_1
   \   0000007C   0100D0E7           LDRB     R0,[R0, R1]
   \   00000080   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutBitValue_1:
   \   00000084   02040909           DC8      +2,+4,+9,+9
   \   00000088   09090909           DC8      +9,+9,+9,+9
   \   0000008C   06080000           DC8      +6,+8,+0,+0
    914                      case SVT_HI_TEMP_ENABLE       :
    915                          AlPtr = (AlarmBasic *)HighTempPtr;
   \                     ??PutBitValue_8:
   \   00000090   0C60A0E1           MOV      R6,R12
   \   00000094   040000EA           B        ??PutBitValue_7
    916                          break;
    917                      case SVT_LO_TEMP_ENABLE       :
    918                          AlPtr = (AlarmBasic *)LowTempPtr;
   \                     ??PutBitValue_9:
   \   00000098   0E60A0E1           MOV      R6,LR
   \   0000009C   020000EA           B        ??PutBitValue_7
    919                          break;
    920                      case SVT_HI_BOT_TEMP_ENABLE  :
    921                          AlPtr = (AlarmBasic *)HighBotTempPtr;
   \                     ??PutBitValue_10:
   \   000000A0   0460A0E1           MOV      R6,R4
   \   000000A4   000000EA           B        ??PutBitValue_7
    922                          break;
    923                      case SVT_LO_BOT_TEMP_ENABLE  :
    924                          AlPtr = (AlarmBasic *)LowBotTempPtr;
   \                     ??PutBitValue_11:
   \   000000A8   0560A0E1           MOV      R6,R5
    925                          break;
    926                      }
    927                      if ( AlPtr ) {
   \                     ??PutBitValue_7:
   \   000000AC   000056E3           CMP      R6,#+0
   \   000000B0   0800000A           BEQ      ??PutBitValue_12
    928                          Status = AlPtr->PutBitValue(SVT_AL_ENABLE, 0, NewValue);
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   3E10A0E3           MOV      R1,#+62
   \   000000BC   8C1D81E3           ORR      R1,R1,#0x2300
   \                     ??PutBitValue_13:
   \   000000C0   A44096E5           LDR      R4,[R6, #+164]
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   384094E5           LDR      R4,[R4, #+56]
   \   000000CC   0FE0A0E1           MOV      LR,PC
   \   000000D0   14FF2FE1           BX       R4
   \   000000D4   160000EA           B        ??PutBitValue_14
    929                      } else {
    930                          Status = GETVAL_NOT_AVAILABLE;
   \                     ??PutBitValue_12:
   \   000000D8   0100A0E3           MOV      R0,#+1
   \   000000DC   140000EA           B        ??PutBitValue_14
    931                      }
    932                  }
    933                  break;
    934              case SVT_HI_TEMP_AL_ACK      :
    935              case SVT_LO_TEMP_AL_ACK      :
    936              case SVT_HI_BOT_TEMP_AL_ACK  :
    937              case SVT_LO_BOT_TEMP_AL_ACK  :
    938                  {
    939                      AlarmBasic *AlPtr = NULL;
    940                      switch ( ValueId ) {
   \                     ??PutBitValue_5:
   \   000000E0   0E1041E2           SUB      R1,R1,#+14
   \   000000E4   901D41E2           SUB      R1,R1,#+9216
   \   000000E8   030051E3           CMP      R1,#+3
   \   000000EC   0A00008A           BHI      ??PutBitValue_15
   \   000000F0   010F8FE2           ADR      R0,??PutBitValue_2
   \   000000F4   0100D0E7           LDRB     R0,[R0, R1]
   \   000000F8   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??PutBitValue_2:
   \   000000FC   00020406           DC8      +0,+2,+4,+6
    941                      case SVT_HI_TEMP_AL_ACK       :
    942                          AlPtr = (AlarmBasic *)HighTempPtr;
   \                     ??PutBitValue_16:
   \   00000100   0C60A0E1           MOV      R6,R12
   \   00000104   040000EA           B        ??PutBitValue_15
    943                          break;
    944                      case SVT_LO_TEMP_AL_ACK       :
    945                          AlPtr = (AlarmBasic *)LowTempPtr;
   \                     ??PutBitValue_17:
   \   00000108   0E60A0E1           MOV      R6,LR
   \   0000010C   020000EA           B        ??PutBitValue_15
    946                          break;
    947                      case SVT_HI_BOT_TEMP_AL_ACK  :
    948                          AlPtr = (AlarmBasic *)HighBotTempPtr;
   \                     ??PutBitValue_18:
   \   00000110   0460A0E1           MOV      R6,R4
   \   00000114   000000EA           B        ??PutBitValue_15
    949                          break;
    950                      case SVT_LO_BOT_TEMP_AL_ACK  :
    951                          AlPtr = (AlarmBasic *)LowBotTempPtr;
   \                     ??PutBitValue_19:
   \   00000118   0560A0E1           MOV      R6,R5
    952                          break;
    953                      }
    954                      if ( AlPtr ) {
   \                     ??PutBitValue_15:
   \   0000011C   000056E3           CMP      R6,#+0
   \   00000120   ECFFFF0A           BEQ      ??PutBitValue_12
    955                          Status = AlPtr->PutBitValue(SVT_AL_ACKNOWLEDGE, 0, NewValue);
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   8D1DA0E3           MOV      R1,#+9024
   \   0000012C   E3FFFFEA           B        ??PutBitValue_13
    956                      } else {
    957                          Status = GETVAL_NOT_AVAILABLE;
    958                      }
    959                  }
    960                  break;
    961              default:
    962                  Status = PRogramObject::PutBitValue(ValueId, Index, NewValue);
   \                     ??PutBitValue_6:
   \   00000130   ........           _BLF     ??PutBitValue_3,??PutBitValue??rA
    963                  break;
    964              }
    965              return (Status);
   \                     ??PutBitValue_14:
   \   00000134                      REQUIRE ?Subroutine35
   \   00000134                      ;; // Fall through to label ?Subroutine35
    966          }
    967          
    968          // Routines for object internode communication

   \                                 In segment CODE, align 4, keep-with-next
    969          int PROTemperature::ReceiveData(U8 *data) {
   \                     ??ReceiveData:
   \   00000000   17402DE9           PUSH     {R0-R2,R4,LR}
    970              int                    ErrorStatus = E_OK;
    971              ANPRO10_CommandHeading *pCH        = (ANPRO10_CommandHeading *)data;
    972          
    973              switch (pCH->CommandNo) {
   \   00000004   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000008   0030D1E5           LDRB     R3,[R1, #+0]
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   022483E1           ORR      R2,R3,R2, LSL #+8
   \   00000014   650052E3           CMP      R2,#+101
   \   00000018   3C00001A           BNE      ??ReceiveData_1
    974              case CMD_GENERIC_REALTIME_DATA:
    975                  if (IsOnline) {
   \   0000001C   4A20A0E3           MOV      R2,#+74
   \   00000020   402F82E3           ORR      R2,R2,#0x100
   \   00000024   0030D2E7           LDRB     R3,[R2, +R0]
   \   00000028   000053E3           CMP      R3,#+0
   \   0000002C   3800000A           BEQ      ??ReceiveData_2
    976                      ANPRO10_COMMAND_2106 *pCommand = (ANPRO10_COMMAND_2106 *)data;
    977                      HasTemp     = pCommand->HasTemp;
   \   00000030   0830D1E5           LDRB     R3,[R1, #+8]
   \   00000034   6031C0E5           STRB     R3,[R0, #+352]
    978                      HWFailure   = pCommand->HWFailure;
   \   00000038   0930D1E5           LDRB     R3,[R1, #+9]
   \   0000003C   3C30C0E5           STRB     R3,[R0, #+60]
    979                      IsNewData   = pCommand->IsNewData;
   \   00000040   1630D1E5           LDRB     R3,[R1, #+22]
   \   00000044   E030C0E5           STRB     R3,[R0, #+224]
    980                      StatusTemp  = pCommand->StatusTemp;
   \   00000048   0D30D1E5           LDRB     R3,[R1, #+13]
   \   0000004C   0CC0D1E5           LDRB     R12,[R1, #+12]
   \   00000050   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   00000054   0BC0D1E5           LDRB     R12,[R1, #+11]
   \   00000058   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   0000005C   0AC0D1E5           LDRB     R12,[R1, #+10]
   \   00000060   03348CE1           ORR      R3,R12,R3, LSL #+8
   \   00000064   583180E5           STR      R3,[R0, #+344]
    981                      Temperature = pCommand->Temperature;
   \   00000068   0030A0E3           MOV      R3,#+0
   \   0000006C   0DC0A0E1           MOV      R12,SP
   \                     ??ReceiveData_3:
   \   00000070   0EE081E2           ADD      LR,R1,#+14
   \   00000074   0EE0D3E7           LDRB     LR,[R3, +LR]
   \   00000078   0CE0C3E7           STRB     LR,[R3, +R12]
   \   0000007C   013083E2           ADD      R3,R3,#+1
   \   00000080   040053E3           CMP      R3,#+4
   \   00000084   F9FFFFBA           BLT      ??ReceiveData_3
   \   00000088   00309DE5           LDR      R3,[SP, #+0]
    982                      VaporTemp   = pCommand->VaporTemp;
   \   0000008C   04C08DE2           ADD      R12,SP,#+4
   \   00000090   683180E5           STR      R3,[R0, #+360]
   \   00000094   0030A0E3           MOV      R3,#+0
   \                     ??ReceiveData_4:
   \   00000098   12E081E2           ADD      LR,R1,#+18
   \   0000009C   0EE0D3E7           LDRB     LR,[R3, +LR]
   \   000000A0   0CE0C3E7           STRB     LR,[R3, +R12]
   \   000000A4   013083E2           ADD      R3,R3,#+1
   \   000000A8   040053E3           CMP      R3,#+4
   \   000000AC   F9FFFFBA           BLT      ??ReceiveData_4
   \   000000B0   04309DE5           LDR      R3,[SP, #+4]
    983                      BottomTemp  = pCommand->BottomTemp;
   \   000000B4   08C08DE2           ADD      R12,SP,#+8
   \   000000B8   703180E5           STR      R3,[R0, #+368]
   \   000000BC   0030A0E3           MOV      R3,#+0
   \                     ??ReceiveData_5:
   \   000000C0   17E081E2           ADD      LR,R1,#+23
   \   000000C4   0EE0D3E7           LDRB     LR,[R3, +LR]
   \   000000C8   0CE0C3E7           STRB     LR,[R3, +R12]
   \   000000CC   013083E2           ADD      R3,R3,#+1
   \   000000D0   040053E3           CMP      R3,#+4
   \   000000D4   F9FFFFBA           BLT      ??ReceiveData_5
   \   000000D8   08309DE5           LDR      R3,[SP, #+8]
   \   000000DC   743180E5           STR      R3,[R0, #+372]
    984                      IsOnline    = pCommand->IsOnline;
   \   000000E0   1B10D1E5           LDRB     R1,[R1, #+27]
   \   000000E4   0010C2E7           STRB     R1,[R2, +R0]
    985                      if (CreatedFromThisTank) {
   \   000000E8   642190E5           LDR      R2,[R0, #+356]
   \   000000EC   000052E3           CMP      R2,#+0
   \   000000F0   0700000A           BEQ      ??ReceiveData_2
    986                          CreatedFromThisTank->SetTemperature(Temperature);
   \   000000F4   681190E5           LDR      R1,[R0, #+360]
   \   000000F8   0200A0E1           MOV      R0,R2
   \   000000FC   A42092E5           LDR      R2,[R2, #+164]
   \   00000100   882092E5           LDR      R2,[R2, #+136]
   \   00000104   0FE0A0E1           MOV      LR,PC
   \   00000108   12FF2FE1           BX       R2
   \   0000010C   000000EA           B        ??ReceiveData_2
    987                      }
    988                      ErrorStatus =  E_OK;
    989                  }
    990                  break;
    991              default:
    992                  ErrorStatus =  E_UNKNOWN_COMMAND;
   \                     ??ReceiveData_1:
   \   00000110   0140A0E3           MOV      R4,#+1
    993                  break;
    994              }
    995              return (ErrorStatus);
   \                     ??ReceiveData_2:
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   1E40BDE8           POP      {R1-R4,LR}
   \   0000011C   1EFF2FE1           BX       LR               ;; return
    996          }
    997          

   \                                 In segment CODE, align 4, keep-with-next
    998          int PROTemperature::SendData(U16 CommandNo) {
   \                     ??SendData:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
    999              int ErrorStatus = E_OK;
   1000              switch (CommandNo) {
   \   00000008   650051E3           CMP      R1,#+101
   \   0000000C   2D00001A           BNE      ??SendData_1
   1001              case CMD_GENERIC_REALTIME_DATA:
   1002                  {
   1003                      QueueANPRO10_COMMAND_2106 Cmd;
   1004                      Cmd.TxInfo.Port      = NULL;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   00208DE5           STR      R2,[SP, #+0]
   1005                      Cmd.TxInfo.rxAddr    = DEVICE_BROADCAST_ADDR;
   \   00000018   FF20A0E3           MOV      R2,#+255
   \   0000001C   0420CDE5           STRB     R2,[SP, #+4]
   1006                      Cmd.TxInfo.rxId      = DEVICE_BROADCAST_TXU;
   \   00000020   0E20A0E3           MOV      R2,#+14
   \   00000024   0520CDE5           STRB     R2,[SP, #+5]
   1007                      Cmd.Data.CommandNo   = CMD_GENERIC_REALTIME_DATA;
   \   00000028   6520A0E3           MOV      R2,#+101
   \   0000002C   B620CDE1           STRH     R2,[SP, #+6]
   1008                      Cmd.Data.ndb         = sizeof(Cmd) - sizeof(QueueANPRO10_CommandHeading);
   \   00000030   1820A0E3           MOV      R2,#+24
   \   00000034   B820CDE1           STRH     R2,[SP, #+8]
   1009                      Cmd.Data.ObjectId    = IDNumber;
   \   00000038   9C1090E5           LDR      R1,[R0, #+156]
   \   0000003C   0A10CDE5           STRB     R1,[SP, #+10]
   \   00000040   2114A0E1           LSR      R1,R1,#+8
   \   00000044   0B10CDE5           STRB     R1,[SP, #+11]
   \   00000048   2114A0E1           LSR      R1,R1,#+8
   \   0000004C   0C10CDE5           STRB     R1,[SP, #+12]
   \   00000050   2114A0E1           LSR      R1,R1,#+8
   \   00000054   0D10CDE5           STRB     R1,[SP, #+13]
   1010                      Cmd.Data.HasTemp     = HasTemp;
   \   00000058   6021D0E5           LDRB     R2,[R0, #+352]
   1011                      Cmd.Data.HWFailure   = HWFailure;
   1012                      Cmd.Data.IsNewData   = IsNewData;
   1013                      Cmd.Data.StatusTemp  = StatusTemp;
   1014                      Cmd.Data.Temperature = Temperature;
   1015                      Cmd.Data.VaporTemp   = VaporTemp;
   1016                      Cmd.Data.BottomTemp  = BottomTemp;
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   0E20CDE5           STRB     R2,[SP, #+14]
   \   00000064   3C20D0E5           LDRB     R2,[R0, #+60]
   \   00000068   0F20CDE5           STRB     R2,[SP, #+15]
   \   0000006C   E020D0E5           LDRB     R2,[R0, #+224]
   \   00000070   1C20CDE5           STRB     R2,[SP, #+28]
   \   00000074   582190E5           LDR      R2,[R0, #+344]
   \   00000078   10208DE5           STR      R2,[SP, #+16]
   \   0000007C   682190E5           LDR      R2,[R0, #+360]
   \   00000080   14208DE5           STR      R2,[SP, #+20]
   \   00000084   702190E5           LDR      R2,[R0, #+368]
   \   00000088   18208DE5           STR      R2,[SP, #+24]
   \   0000008C   1D208DE2           ADD      R2,SP,#+29
   \                     ??SendData_2:
   \   00000090   5D3F80E2           ADD      R3,R0,#+372
   \   00000094   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000098   0230C1E7           STRB     R3,[R1, +R2]
   \   0000009C   011081E2           ADD      R1,R1,#+1
   \   000000A0   040051E3           CMP      R1,#+4
   \   000000A4   F9FFFFBA           BLT      ??SendData_2
   1017                      Cmd.Data.IsOnline    = IsOnline;
   \   000000A8   4A01D0E5           LDRB     R0,[R0, #+330]
   \   000000AC   2100CDE5           STRB     R0,[SP, #+33]
   1018                      // post command on messageQ
   1019                      bool sent = ANPRO10SendNormal(&Cmd);
   1020                      if (!sent) ErrorStatus =  E_QUEUE_FULL;
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   ........           _BLF     ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0000A013           MOVNE    R0,#+0
   \   000000C0   0300A003           MOVEQ    R0,#+3
   \   000000C4   000000EA           B        ??SendData_3
   1021                      else ErrorStatus	=  E_OK;
   1022                  }
   1023                  break;
   1024              default:
   1025                  ErrorStatus =  E_UNKNOWN_COMMAND;
   \                     ??SendData_1:
   \   000000C8   0100A0E3           MOV      R0,#+1
   1026                  break;
   1027              }
   1028              return (ErrorStatus);
   \                     ??SendData_3:
   \   000000CC   24D08DE2           ADD      SP,SP,#+36
   \   000000D0   ........           B        ?Subroutine39
   1029          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine39:
   \   00000000   0040BDE8           POP      {LR}
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1030          

   \                                 In segment CODE, align 4, keep-with-next
   1031          bool PROTemperature::IsTemperatureInsideWindow(float NewValue, float OldValue) {
   \                     ??IsTemperatureInsideWindow:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1032              bool AcceptValue = true;
   1033              if (fabs(NewValue - OldValue) > PROProjectInfo::TemperatureWindowTmpLim) {
   \   00000008   54009FE5           LDR      R0,??IsTemperatureInsideWindow_1  ;; ??TemperatureWindowTmpLim
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   006090E5           LDR      R6,[R0, #+0]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   0210A0E1           MOV      R1,R2
   \   0000001C   ........           _BLF     __fSub,??__fSub??rA
   \   00000020   8014C0E3           BIC      R1,R0,#0x80000000
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   ........           _BLF     __fLess,??__fLess??rA
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0600000A           BEQ      ??IsTemperatureInsideWindow_2
   1034                  if (++OutsideCnt > PROProjectInfo::TemperatureWindowMaxCnt) {
   \   00000034   5C0194E5           LDR      R0,[R4, #+348]
   \   00000038   28109FE5           LDR      R1,??IsTemperatureInsideWindow_1+0x4  ;; ??TemperatureWindowMaxCnt
   \   0000003C   010080E2           ADD      R0,R0,#+1
   \   00000040   5C0184E5           STR      R0,[R4, #+348]
   \   00000044   001091E5           LDR      R1,[R1, #+0]
   \   00000048   000051E1           CMP      R1,R0
   \   0000004C   0200002A           BCS      ??IsTemperatureInsideWindow_3
   1035                      OutsideCnt  = 0;
   \                     ??IsTemperatureInsideWindow_2:
   \   00000050   5C5184E5           STR      R5,[R4, #+348]
   1036                      AcceptValue = true;
   \   00000054   0100A0E3           MOV      R0,#+1
   \   00000058   000000EA           B        ??IsTemperatureInsideWindow_4
   1037                  } else {
   1038                      AcceptValue = false;
   \                     ??IsTemperatureInsideWindow_3:
   \   0000005C   0000A0E3           MOV      R0,#+0
   1039                  }
   1040              } else {
   1041                  OutsideCnt  = 0;
   1042                  AcceptValue = true;
   1043              }
   1044              return (AcceptValue);
   \                     ??IsTemperatureInsideWindow_4:
   \   00000060   ........           B        ?Subroutine34
   \                     ??IsTemperatureInsideWindow_1:
   \   00000064   ........           DC32     ??TemperatureWindowTmpLim
   \   00000068   ........           DC32     ??TemperatureWindowMaxCnt
   1045          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??MaxTempCnt:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for MaxTempCnt>`
   1046          
   1047          ValueList PROTemperature::TempValueList1[] =  {
   \                     ??TempValueList1:
   \   00000004                      DS8 156
   \   000000A0                      REQUIRE `?<Initializer for TempValueList1>`
   1048              { L_WORD304, L_WORD237, SVT_BLANK },                    // {"Unused"    ,"",SVT_BLANK},
   1049              { L_WORD338, L_WORD338, SVT_TEMP },                     // {"Temp"      ,"Temp",SVT_TEMP},
   1050              { L_WORD1049, L_WORD1049, SVT_VAPOR_TEMP },               // {"VaporTemp"      ,"VaporTemp",SVT_TEMP},
   1051              { L_WORD112, L_WORD237, SVT_HI_TEMP_LIMIT },            // {"High Temp" ,"",SVT_HI_TEMP_LIMIT},
   1052              { L_WORD113, L_WORD237, SVT_LO_TEMP_LIMIT },            // {"Low Temp"  ,"",SVT_LO_TEMP_LIMIT},
   1053              { L_WORD1060, L_WORD1062, SVT_HI_BOT_TEMP_LIMIT },       // {"High Bot Temp" ,"",SVT_HI_TEMP_LIMIT},
   1054              { L_WORD1061, L_WORD1063, SVT_LO_BOT_TEMP_LIMIT },       // {"Low Bot Temp"  ,"",SVT_LO_TEMP_LIMIT},
   1055              { L_WORD985, L_WORD364, SVT_T1 },                       // {"Bot Temp"  ,"BT",SVT_T1},
   1056              { L_WORD986, L_WORD1039, SVT_T2 },                       // {"Mid Temp"  ,"MT",SVT_T2},
   1057              { L_WORD987, L_WORD365, SVT_T3 },                       // {"Upp Temp"  ,"UT",SVT_T3},
   1058              { L_WORD988, L_WORD365, SVT_T4 },                       // {"Upp Temp"  ,"UT",SVT_T3},
   1059              { L_WORD989, L_WORD365, SVT_T5 },                       // {"Upp Temp"  ,"UT",SVT_T3},
   1060              { L_WORD363, L_WORD367, SVT_TT },                       // {"Top Temp"  ,"TT",SVT_TT},
   1061          };
   1062          
   1063          
   1064          ValueList PROTemperature::TempValueList2[] =  {
   \                     ??TempValueList2:
   \   000000A0                      DS8 156
   \   0000013C                      REQUIRE `?<Initializer for TempValueList2>`
   1065              { L_WORD304, L_WORD237, SVT_BLANK },                    // {"Unused"    ,"",SVT_BLANK},
   1066              { L_WORD338, L_WORD338, SVT_TEMP },                     // {"Temp"      ,"Temp",SVT_TEMP},
   1067              { L_WORD1049, L_WORD1049, SVT_VAPOR_TEMP },               // {"VaporTemp"      ,"VaporTemp",SVT_TEMP},
   1068              { L_WORD112, L_WORD237, SVT_HI_TEMP_LIMIT },            // {"High Temp" ,"",SVT_HI_TEMP_LIMIT},
   1069              { L_WORD113, L_WORD237, SVT_LO_TEMP_LIMIT },            // {"Low Temp"  ,"",SVT_LO_TEMP_LIMIT},
   1070              { L_WORD1060, L_WORD1062, SVT_HI_BOT_TEMP_LIMIT },       // {"High Bot Temp" ,"",SVT_HI_TEMP_LIMIT},
   1071              { L_WORD1061, L_WORD1063, SVT_LO_BOT_TEMP_LIMIT },       // {"Low Bot Temp"  ,"",SVT_LO_TEMP_LIMIT},
   1072              { L_WORD360, L_WORD364 , SVT_T1 },                       // {"Temp 1"  ,"BT",SVT_T1},
   1073              { L_WORD361, L_WORD1039, SVT_T2 },                       // {"Temp 2"  ,"MT",SVT_T2},
   1074              { L_WORD362, L_WORD365 , SVT_T3 },                       // {"Temp 3"  ,"UT",SVT_T3},
   1075              { L_WORD988, L_WORD832 , SVT_T4 },                       // {"Temp 4"  ,"UT",SVT_T3},
   1076              { L_WORD989, L_WORD1040, SVT_T5 },                       // {"Temp 5"  ,"UT",SVT_T3},
   1077              { L_WORD363, L_WORD367 , SVT_TT },                       // {"Top Temp"  ,"TT",SVT_TT},
   1078          };
   1079          ValueList PROTemperature::TempAlarmValueList[] =  {
   \                     ??TempAlarmValueList:
   \   0000013C                      DS8 84
   \   00000190                      REQUIRE `?<Initializer for TempAlarmValueList>`
   1080              { L_WORD304, L_WORD237, SVT_BLANK },                    // {"Unused"    ,"",SVT_BLANK},
   1081              { L_WORD338, L_WORD338, SVT_TEMP },                     // {"Temp"      ,"Temp",SVT_TEMP},
   1082              { L_WORD1049, L_WORD1049, SVT_VAPOR_TEMP },               // {"VaporTemp"      ,"VaporTemp",SVT_TEMP},
   1083              { L_WORD112, L_WORD237, SVT_HI_TEMP_LIMIT },            // {"High Temp" ,"",SVT_HI_TEMP_LIMIT},
   1084              { L_WORD113, L_WORD237, SVT_LO_TEMP_LIMIT },            // {"Low Temp"  ,"",SVT_LO_TEMP_LIMIT},
   1085              { L_WORD1060, L_WORD1062, SVT_HI_BOT_TEMP_LIMIT },        // {"Unused"    ,"",SVT_BLANK},
   1086              { L_WORD1061, L_WORD1063, SVT_LO_BOT_TEMP_LIMIT },       // {"Low Bot Temp"  ,"",SVT_LO_TEMP_LIMIT},
   1087          };
   1088          
   1089          ValueList PROTemperature::TempSensorValueList1[] =  {
   \                     ??TempSensorValueList1:
   \   00000190                      DS8 252
   \   0000028C                      REQUIRE `?<Initializer for TempSensorValueList1>`
   1090              { L_WORD304 , L_WORD237 , SVT_BLANK },                  // {"Unused"    ,"",SVT_BLANK},
   1091              { L_WORD338 , L_WORD338 , SVT_TEMP },                   // {"Temp"      ,"Temp",SVT_TEMP},
   1092              { L_WORD1049, L_WORD1049, SVT_VAPOR_TEMP },             // {"VaporTemp"      ,"VaporTemp",SVT_TEMP},
   1093              { L_WORD830 , L_WORD830 , SVT_T1 },                      // {"Bot Temp" ,"BT"  ,SVT_BT},
   1094              { L_WORD1039, L_WORD1039, SVT_T2 },                      // {"Mid Temp" ,"MT"  ,SVT_MT},
   1095              { L_WORD831 , L_WORD831 , SVT_T3 },                      // {"Upp Temp" ,"UT"  ,SVT_UT},
   1096              { L_WORD832 , L_WORD832 , SVT_T4 },                      // {"Upp Temp" ,"UT"  ,SVT_UT},
   1097              { L_WORD1040, L_WORD1040, SVT_T5 },                      // {"Upp Temp" ,"UT"  ,SVT_UT},
   1098              { L_WORD363 , L_WORD367 , SVT_TT },                      // {"Top Temp" ,"TT"  ,SVT_TT},
   1099              { L_WORD822 , L_WORD834 , SVT_T1_GAIN   },                 // {"BT Gain"   ,"BTGn",SVT_T1_GAIN},
   1100              { L_WORD1035, L_WORD1041, SVT_T2_GAIN   },                 // {"MT Gain"   ,"MTGn",SVT_T3_GAIN},
   1101              { L_WORD823 , L_WORD835 , SVT_T3_GAIN   },                 // {"UT Gain"   ,"UTGn",SVT_T4_GAIN},
   1102              { L_WORD824 , L_WORD836 , SVT_T4_GAIN   },                 // {"T4 Gain"   ,"TTGn",SVT_TT_GAIN},
   1103              { L_WORD1036, L_WORD1042, SVT_T5_GAIN   },                 // {"T5 Gain"   ,"T5Gn",SVT_TT_GAIN},
   1104              { L_WORD825 , L_WORD837 , SVT_TT_GAIN   },                 // {"TT Gain"   ,"TTGn",SVT_TT_GAIN},
   1105              { L_WORD826 , L_WORD838 , SVT_T1_OFFSET },               // {"BT Offset" ,"BTOf",SVT_T1_OFFSET},
   1106              { L_WORD1037, L_WORD1043, SVT_T2_OFFSET },               // {"MT Offset" ,"MTOf",SVT_T3_OFFSET},
   1107              { L_WORD827 , L_WORD839 , SVT_T3_OFFSET },               // {"UT Offset" ,"UTOf",SVT_T4_OFFSET},
   1108              { L_WORD828 , L_WORD840 , SVT_T4_OFFSET },               // {"T4 Offset" ,"T4Of",SVT_T4_OFFSET},
   1109              { L_WORD1038, L_WORD1044, SVT_T5_OFFSET },               // {"T5 Offset" ,"T5Of",SVT_T4_OFFSET},
   1110              { L_WORD829 , L_WORD841 , SVT_TT_OFFSET },               // {"TT Offset" ,"TTOf",SVT_TT_OFFSET},
   1111          };
   1112          
   1113          
   1114          ValueList PROTemperature::TempSensorValueList2[] =  {
   \                     ??TempSensorValueList2:
   \   0000028C                      DS8 252
   \   00000388                      REQUIRE `?<Initializer for TempSensorValueList2>`
   1115              { L_WORD304 , L_WORD237 , SVT_BLANK  },                  // {"Unused"    ,"",SVT_BLANK},
   1116              { L_WORD338 , L_WORD338 , SVT_TEMP   },                  // {"Temp"      ,"Temp",SVT_TEMP},
   1117              { L_WORD1049, L_WORD1049, SVT_VAPOR_TEMP },              // {"VaporTemp"      ,"VaporTemp",SVT_TEMP},
   1118              { L_WORD360 , L_WORD830 , SVT_T1      },                 // {"Bot Temp" ,"BT"  ,SVT_BT},
   1119              { L_WORD361 , L_WORD1039, SVT_T2      },                 // {"Mid Temp" ,"MT"  ,SVT_MT},
   1120              { L_WORD362 , L_WORD831 , SVT_T3      },                 // {"Upp Temp" ,"UT"  ,SVT_UT},
   1121              { L_WORD988 , L_WORD366 , SVT_T4      },                 // {"Upp Temp" ,"UT"  ,SVT_UT},
   1122              { L_WORD989 , L_WORD1040, SVT_T5      },                 // {"Upp Temp" ,"UT"  ,SVT_UT},
   1123              { L_WORD363 , L_WORD367 , SVT_TT      },                 // {"Top Temp" ,"TT"  ,SVT_TT},
   1124              { L_WORD822 , L_WORD834 , SVT_T1_GAIN },                 // {"BT Gain"   ,"BTGn",SVT_T1_GAIN},
   1125              { L_WORD1035, L_WORD1041, SVT_T2_GAIN },                 // {"MT Gain"   ,"MTGn",SVT_T3_GAIN},
   1126              { L_WORD823 , L_WORD835 , SVT_T3_GAIN },                 // {"UT Gain"   ,"UTGn",SVT_T4_GAIN},
   1127              { L_WORD824 , L_WORD836 , SVT_T4_GAIN },                 // {"T4 Gain"   ,"TTGn",SVT_TT_GAIN},
   1128              { L_WORD1036, L_WORD1042, SVT_T5_GAIN },                 // {"T5 Gain"   ,"T5Gn",SVT_TT_GAIN},
   1129              { L_WORD825 , L_WORD837 , SVT_TT_GAIN },                 // {"TT Gain"   ,"TTGn",SVT_TT_GAIN},
   1130              { L_WORD826 , L_WORD838 , SVT_T1_OFFSET },               // {"BT Offset" ,"BTOf",SVT_T1_OFFSET},
   1131              { L_WORD1037, L_WORD1043, SVT_T2_OFFSET },               // {"MT Offset" ,"MTOf",SVT_T3_OFFSET},
   1132              { L_WORD827 , L_WORD839 , SVT_T3_OFFSET },               // {"UT Offset" ,"UTOf",SVT_T4_OFFSET},
   1133              { L_WORD828 , L_WORD840 , SVT_T4_OFFSET },               // {"T4 Offset" ,"T4Of",SVT_T4_OFFSET},
   1134              { L_WORD1038, L_WORD1044, SVT_T5_OFFSET },               // {"T5 Offset" ,"T5Of",SVT_T4_OFFSET},
   1135              { L_WORD829 , L_WORD841 , SVT_TT_OFFSET },               // {"TT Offset" ,"TTOf",SVT_TT_OFFSET},
   1136          };
   1137          

   \                                 In segment CODE, align 4, keep-with-next
   1138          ValueList* PROTemperature::GetValueInfoTable(int &Entries, int Index) {
   \                     ??GetValueInfoTable:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
   \   00000008   0210A0E1           MOV      R1,R2
   1139              return GetValueInfoTableStatic(Entries, Index);
   \   0000000C   ........           BL       ??GetValueInfoTableStatic
   \   00000010                      REQUIRE ?Subroutine39
   \   00000010                      ;; // Fall through to label ?Subroutine39
   1140          }
   1141          
   1142          

   \                                 In segment CODE, align 4, keep-with-next
   1143          ValueList* PROTemperature::GetValueInfoTableStatic(int &Entries, int Index) {
   1144              ValueList *tmpPtr;
   1145              switch (Index) {
   \                     ??GetValueInfoTableStatic:
   \   00000000   ........           LDR      R3,??DataTable22  ;; ??MaxTempCnt
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   00C093E5           LDR      R12,[R3, #+0]
   \   0000000C   030051E3           CMP      R1,#+3
   \   00000010   1200008A           BHI      ??GetValueInfoTableStatic_2
   \   00000014   014F8FE2           ADR      R4,??GetValueInfoTableStatic_1
   \   00000018   0140D4E7           LDRB     R4,[R4, R1]
   \   0000001C   04F18FE0           ADD      PC,PC,R4, LSL #+2
   \                     ??GetValueInfoTableStatic_1:
   \   00000020   00060F0A           DC8      +0,+6,+15,+10
   1146              case TAB_TANK_VALUES:
   1147                  if (MaxTempCnt > 4) {
   \                     ??GetValueInfoTableStatic_3:
   \   00000024   0D10A0E3           MOV      R1,#+13
   \   00000028   05005CE3           CMP      R12,#+5
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   \   00000030   A0208332           ADDCC    R2,R3,#+160
   1148                      Entries = NELEMENTS(TempValueList1);
   1149                      tmpPtr = TempValueList1;
   \   00000034   04208322           ADDCS    R2,R3,#+4
   \   00000038   080000EA           B        ??GetValueInfoTableStatic_2
   1150                  } else {
   1151                      Entries = NELEMENTS(TempValueList2);
   1152                      tmpPtr = TempValueList2;
   1153                  }
   1154                  break;
   1155              case TAB_ALARM_LIMITS:
   1156                  Entries = NELEMENTS(TempAlarmValueList);
   \                     ??GetValueInfoTableStatic_4:
   \   0000003C   0710A0E3           MOV      R1,#+7
   \   00000040   001080E5           STR      R1,[R0, #+0]
   1157                  tmpPtr = TempAlarmValueList;
   \   00000044   4F2F83E2           ADD      R2,R3,#+316
   \   00000048   040000EA           B        ??GetValueInfoTableStatic_2
   1158                  break;
   1159              case TAB_SENSOR_VALUES:
   1160                  if (MaxTempCnt > 3) {
   \                     ??GetValueInfoTableStatic_5:
   \   0000004C   1510A0E3           MOV      R1,#+21
   \   00000050   04005CE3           CMP      R12,#+4
   \   00000054   001080E5           STR      R1,[R0, #+0]
   1161                      Entries = NELEMENTS(TempSensorValueList1);
   1162                      tmpPtr = TempSensorValueList1;
   \   00000058   642F8322           ADDCS    R2,R3,#+400
   1163                  } else {
   1164                      Entries = NELEMENTS(TempSensorValueList2);
   1165                      tmpPtr = TempSensorValueList2;
   \   0000005C   A32F8332           ADDCC    R2,R3,#+652
   1166                  }
   1167                  break;
   1168              }
   1169              return (tmpPtr);
   \                     ??GetValueInfoTableStatic_2:
   \   00000060   1000BDE8           POP      {R4}
   \   00000064   0200A0E1           MOV      R0,R2
   \   00000068   1EFF2FE1           BX       LR               ;; return
   1170          }
   1171          
   1172          

   \                                 In segment CODE, align 4, keep-with-next
   1173          void PROTemperature::Calculate(void) {
   \                     ??Calculate:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   4B0F84E2           ADD      R0,R4,#+300
   \   00000010   041090E5           LDR      R1,[R0, #+4]
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   000041E0           SUB      R0,R1,R0
   \   0000001C   2001B0E1           LSRS     R0,R0,#+2
   1174              if (!AnalogInList.empty()) {
   1175                  float WetSum            = 0.0;
   1176                  float DrySum            = 0.0;
   1177                  float TopSubmergedTemp  = -273.15;
   1178                  float TopSensorLocation = 0.0;
   1179                  int   WetCnt            = 0;
   1180                  int   DryCnt            = 0;
   1181                  int   HWFailureCnt      = 0;
   1182                  float tmpTemp           = 0.0;
   1183                  bool  BotSnsNearBot     = true;
   1184                  bool  hasSubmergedSensor= false;
   1185                  for (unsigned i = 0; i < AnalogInList.size(); i++) {
   1186                      AITempSensor *SnsPtr = (AITempSensor *)AnalogInList[i];
   1187                      if (!SnsPtr->GetIsPressureSns()) {
   1188                          float        Tmp     = SnsPtr->Calculate();
   1189                          if (SnsPtr->ResultOK) {
   1190                              StatusTemp = GETVAL_NO_ERR;
   1191                              float AdjustedDistance = SnsPtr->AdjustedDistance;
   1192                              if (AdjustedDistance < Level) { // See if the sensor is submerged
   1193                                  hasSubmergedSensor = true;
   1194                                  if (TopSensorLocation < AdjustedDistance ) {
   1195                                      TopSensorLocation = AdjustedDistance;
   1196                                      TopSubmergedTemp  = Tmp;
   1197                                  }
   1198                                  if (SnsPtr->Location == C_AI_LOC_TEMP1) {
   1199                                      BottomTemp     = Tmp;
   1200                                      BottomTempOK   = true;
   1201                                      if (AdjustedDistance < BOT_TEMP_DISTANCE_LIMIT) {
   1202                                          BotSnsNearBot = true;
   1203                                      } else {
   1204                                          BotSnsNearBot = false;
   1205                                      }
   1206                                  } else{
   1207                                      WetSum += Tmp;
   1208                                      WetCnt++;
   1209                                  }
   1210                              } else { // Sensor not submerged
   1211                                  DrySum += Tmp;
   1212                                  DryCnt++;
   1213                                  if (SnsPtr->Location == C_AI_LOC_TEMP1) {
   1214                                      BottomTemp   = Tmp;
   1215                                      BottomTempOK = true;
   1216                                  }
   1217                              }
   1218                          } else {
   1219                              HWFailureCnt++;
   1220                              if (SnsPtr->Location == C_AI_LOC_TEMP1) {
   1221                                  BottomTempOK   = false;
   1222                              }
   1223                          }
   1224                      }
   1225                  }   // End for
   1226                  if (unsigned(HWFailureCnt) == AnalogInList.size()) {
   1227                      HWFailure  = true;
   1228                      HasTemp    = false;
   1229                      StatusTemp = GETVAL_FLOAT_NOT_LEGAL;
   1230                      SetAlarmsToNormal(AlarmSet);
   1231                  } else {
   1232                      HWFailure = false;
   1233                      // If level under 5 cm, Use all the temp sensors exept top to calculate an
   1234                      // average temp.
   1235                      if (NotEmptyTank) {
   1236                          if ( hasSubmergedSensor ) { // First see if we have submerged sensors
   1237                              if (BotSnsNearBot && BottomTempOK) {
   1238                                  // Most likely P906 system with Only bottom and mid sensor. Bottom sensor is weighted with 1/4
   1239                                  switch (WetCnt) {
   1240                                  case 0:
   1241                                      tmpTemp = BottomTemp;
   1242                                      break;
   1243                                  case 1:
   1244                                      tmpTemp = (3 * WetSum + BottomTemp) / 4;
   1245                                      break;
   1246                                  default:
   1247                                      tmpTemp = WetSum / WetCnt;
   1248                                      break;
   1249                                  }
   1250                              } else {
   1251                                  if (BottomTempOK && !BotSnsNearBot) { // See if we can use the bottom sensor
   1252                                      WetSum += BottomTemp;
   1253                                      WetCnt++;
   1254                                  }
   1255                                  tmpTemp = WetSum / WetCnt;
   1256                              }
   1257          
   1258                              if (DryCnt) {
   1259                                  VaporTemp = DrySum / DryCnt;
   1260                              } else {
   1261                                  // If all sensors are submerged, VapourTemp must be near the liquid Temperature from the uppermost temp sensor
   1262                                  VaporTemp = TopSubmergedTemp;
   1263                              }
   1264                          } else {
   1265                              if (BottomTempOK) { // See if we can use the bottom sensor
   1266                                  DrySum += BottomTemp;
   1267                                  DryCnt++;
   1268                              }
   1269                              // If all sensors are dry, VapourTemp must be equal to the average of all the sensors
   1270                              if (DryCnt) {
   1271                                  VaporTemp = DrySum / DryCnt;
   1272                                  tmpTemp   = VaporTemp;
   1273                                  if (BottomTempOK) { // See if we can use the bottom sensor
   1274                                      tmpTemp   = BottomTemp;
   1275                                  }
   1276                              }
   1277                          }
   1278                      } else { // else NotEmptyTank
   1279                          if (DryCnt) {
   1280                              VaporTemp = DrySum / DryCnt;
   1281                          }
   1282                          // Set Temperature to BottomTemp
   1283                          tmpTemp = BottomTemp;
   1284                      }
   1285                      if (! PROProjectInfo::UseTemperatureWindow || IsTemperatureInsideWindow(tmpTemp, Temperature)) {
   1286                          Temperature = tmpTemp;
   1287                      }
   1288          
   1289                      HasTemp = (bool)(DryCnt + WetCnt) || BottomTempOK;
   1290                      if (HasTemp) {
   1291                          StatusTemp = GETVAL_NO_ERR;
   1292                      } else {
   1293                          StatusTemp = GETVAL_FLOAT_NOT_LEGAL;
   1294                      }
   1295                  }
   1296          
   1297              } else {
   1298                  // We should never get here, This indicates taht no tempsensors are available
   1299                  StatusTemp = GETVAL_FLOAT_NOT_LEGAL;
   \   00000020   0500A003           MOVEQ    R0,#+5
   \   00000024   58018405           STREQ    R0,[R4, #+344]
   1300                  Temperature = 0.0;
   \   00000028   0000A003           MOVEQ    R0,#+0
   \   0000002C   68018405           STREQ    R0,[R4, #+360]
   \   00000030   E800000A           BEQ      ??Calculate_1
   1301              }
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   08108DE5           STR      R1,[SP, #+8]
   \   0000003C   D8139FE5           LDR      R1,??Calculate_2  ;; 0xffffffffc3889333
   \   00000040   0050A0E3           MOV      R5,#+0
   \   00000044   20108DE5           STR      R1,[SP, #+32]
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   18108DE5           STR      R1,[SP, #+24]
   \   00000050   0C108DE5           STR      R1,[SP, #+12]
   \   00000054   0160A0E1           MOV      R6,R1
   \   00000058   14108DE5           STR      R1,[SP, #+20]
   \   0000005C   00108DE5           STR      R1,[SP, #+0]
   \   00000060   0180A0E3           MOV      R8,#+1
   \   00000064   0480CDE5           STRB     R8,[SP, #+4]
   \   00000068   0170A0E1           MOV      R7,R1
   \   0000006C   0510CDE5           STRB     R1,[SP, #+5]
   \   00000070   10708DE5           STR      R7,[SP, #+16]
   \   00000074   0B0000EA           B        ??Calculate_3
   \                     ??Calculate_4:
   \   00000078   14109DE5           LDR      R1,[SP, #+20]
   \   0000007C   011081E2           ADD      R1,R1,#+1
   \   00000080   14108DE5           STR      R1,[SP, #+20]
   \   00000084   280199E5           LDR      R0,[R9, #+296]
   \   00000088   FD10A0E3           MOV      R1,#+253
   \   0000008C   801E81E3           ORR      R1,R1,#0x800
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   0000A003           MOVEQ    R0,#+0
   \   00000098   7801C405           STRBEQ   R0,[R4, #+376]
   \                     ??Calculate_5:
   \   0000009C   10109DE5           LDR      R1,[SP, #+16]
   \   000000A0   011081E2           ADD      R1,R1,#+1
   \   000000A4   10108DE5           STR      R1,[SP, #+16]
   \                     ??Calculate_3:
   \   000000A8   0C209DE5           LDR      R2,[SP, #+12]
   \   000000AC   4B0F84E2           ADD      R0,R4,#+300
   \   000000B0   012082E2           ADD      R2,R2,#+1
   \   000000B4   1C208DE5           STR      R2,[SP, #+28]
   \   000000B8   10109DE5           LDR      R1,[SP, #+16]
   \   000000BC   042090E5           LDR      R2,[R0, #+4]
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   000042E0           SUB      R0,R2,R0
   \   000000C8   200151E1           CMP      R1,R0, LSR #+2
   \   000000CC   4300002A           BCS      ??Calculate_6
   \   000000D0   0100A0E1           MOV      R0,R1
   \   000000D4   2C1194E5           LDR      R1,[R4, #+300]
   \   000000D8   009191E7           LDR      R9,[R1, +R0, LSL #+2]
   \   000000DC   0900A0E1           MOV      R0,R9
   \   000000E0   ........           _BLF     ??GetIsPressureSns,??GetIsPressureSns??rA
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   EBFFFF1A           BNE      ??Calculate_5
   \   000000EC   A41099E5           LDR      R1,[R9, #+164]
   \   000000F0   0900A0E1           MOV      R0,R9
   \   000000F4   601091E5           LDR      R1,[R1, #+96]
   \   000000F8   0FE0A0E1           MOV      LR,PC
   \   000000FC   11FF2FE1           BX       R1
   \   00000100   00A0A0E1           MOV      R10,R0
   \   00000104   3601D9E5           LDRB     R0,[R9, #+310]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   D9FFFF0A           BEQ      ??Calculate_4
   \   00000110   587184E5           STR      R7,[R4, #+344]
   \   00000114   30B199E5           LDR      R11,[R9, #+304]
   \   00000118   6C1194E5           LDR      R1,[R4, #+364]
   \   0000011C   0B00A0E1           MOV      R0,R11
   \   00000120   ........           _BLF     __fLess,??__fLess??rA
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   1F00000A           BEQ      ??Calculate_7
   \   0000012C   0580CDE5           STRB     R8,[SP, #+5]
   \   00000130   18009DE5           LDR      R0,[SP, #+24]
   \   00000134   0B10A0E1           MOV      R1,R11
   \   00000138   ........           _BLF     __fLess,??__fLess??rA
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   18B08D15           STRNE    R11,[SP, #+24]
   \   00000144   20A08D15           STRNE    R10,[SP, #+32]
   \   00000148   280199E5           LDR      R0,[R9, #+296]
   \   0000014C   FD10A0E3           MOV      R1,#+253
   \   00000150   801E81E3           ORR      R1,R1,#0x800
   \   00000154   010050E1           CMP      R0,R1
   \   00000158   0C00001A           BNE      ??Calculate_8
   \   0000015C   74A184E5           STR      R10,[R4, #+372]
   \   00000160   7881C4E5           STRB     R8,[R4, #+376]
   \   00000164   0B00A0E1           MOV      R0,R11
   \   00000168   ........           _BLF     __floatToDouble,??__floatToDouble??rA
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   C035A0E3           MOV      R3,#+805306368
   \   00000174   FE3683E3           ORR      R3,R3,#0xFE00000
   \   00000178   ........           _BLF     __dLess,??__dLess??rA
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   0010A003           MOVEQ    R1,#+0
   \   00000184   0410CD05           STRBEQ   R1,[SP, #+4]
   \   00000188   0480CD15           STRBNE   R8,[SP, #+4]
   \   0000018C   C2FFFFEA           B        ??Calculate_5
   \                     ??Calculate_8:
   \   00000190   08009DE5           LDR      R0,[SP, #+8]
   \   00000194   0A10A0E1           MOV      R1,R10
   \   00000198   ........           _BLF     __fAdd,??__fAdd??rA
   \   0000019C   08008DE5           STR      R0,[SP, #+8]
   \   000001A0   1C109DE5           LDR      R1,[SP, #+28]
   \   000001A4   0C108DE5           STR      R1,[SP, #+12]
   \   000001A8   BBFFFFEA           B        ??Calculate_5
   \                     ??Calculate_7:
   \   000001AC   0500A0E1           MOV      R0,R5
   \   000001B0   0A10A0E1           MOV      R1,R10
   \   000001B4   ........           _BLF     __fAdd,??__fAdd??rA
   \   000001B8   0050A0E1           MOV      R5,R0
   \   000001BC   280199E5           LDR      R0,[R9, #+296]
   \   000001C0   016086E2           ADD      R6,R6,#+1
   \   000001C4   FD10A0E3           MOV      R1,#+253
   \   000001C8   801E81E3           ORR      R1,R1,#0x800
   \   000001CC   010050E1           CMP      R0,R1
   \   000001D0   B1FFFF1A           BNE      ??Calculate_5
   \   000001D4   74A184E5           STR      R10,[R4, #+372]
   \   000001D8   7881C4E5           STRB     R8,[R4, #+376]
   \   000001DC   AEFFFFEA           B        ??Calculate_5
   \                     ??Calculate_6:
   \   000001E0   14109DE5           LDR      R1,[SP, #+20]
   \   000001E4   4B0F84E2           ADD      R0,R4,#+300
   \   000001E8   000090E5           LDR      R0,[R0, #+0]
   \   000001EC   000042E0           SUB      R0,R2,R0
   \   000001F0   200151E1           CMP      R1,R0, LSR #+2
   \   000001F4   0700001A           BNE      ??Calculate_9
   \   000001F8   3C80C4E5           STRB     R8,[R4, #+60]
   \   000001FC   0000A0E3           MOV      R0,#+0
   \   00000200   6001C4E5           STRB     R0,[R4, #+352]
   \   00000204   0500A0E3           MOV      R0,#+5
   \   00000208   580184E5           STR      R0,[R4, #+344]
   \   0000020C   E40084E2           ADD      R0,R4,#+228
   \   00000210   ........           _BLF     ??SetAlarmsToNormal,??SetAlarmsToNormal??rA
   \   00000214   6F0000EA           B        ??Calculate_1
   \                     ??Calculate_9:
   \   00000218   0000A0E3           MOV      R0,#+0
   \   0000021C   3C00C4E5           STRB     R0,[R4, #+60]
   \   00000220   7901D4E5           LDRB     R0,[R4, #+377]
   \   00000224   000050E3           CMP      R0,#+0
   \   00000228   4800000A           BEQ      ??Calculate_10
   \   0000022C   0500DDE5           LDRB     R0,[SP, #+5]
   \   00000230   749194E5           LDR      R9,[R4, #+372]
   \   00000234   78A1D4E5           LDRB     R10,[R4, #+376]
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   2F00000A           BEQ      ??Calculate_11
   \   00000240   0400DDE5           LDRB     R0,[SP, #+4]
   \   00000244   000050E3           CMP      R0,#+0
   \   00000248   00005A13           CMPNE    R10,#+0
   \   0000024C   1A00000A           BEQ      ??Calculate_12
   \   00000250   0C009DE5           LDR      R0,[SP, #+12]
   \   00000254   000050E3           CMP      R0,#+0
   \   00000258   0200000A           BEQ      ??Calculate_13
   \   0000025C   010050E2           SUBS     R0,R0,#+1
   \   00000260   0A00000A           BEQ      ??Calculate_14
   \   00000264   1D0000EA           B        ??Calculate_15
   \                     ??Calculate_13:
   \   00000268   00908DE5           STR      R9,[SP, #+0]
   \                     ??Calculate_16:
   \   0000026C   000056E3           CMP      R6,#+0
   \   00000270   2000000A           BEQ      ??Calculate_17
   \   00000274   0600A0E1           MOV      R0,R6
   \   00000278   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   0000027C   0010A0E1           MOV      R1,R0
   \   00000280   0500A0E1           MOV      R0,R5
   \   00000284   ........           _BLF     __fDiv,??__fDiv??rA
   \                     ??Calculate_18:
   \   00000288   700184E5           STR      R0,[R4, #+368]
   \   0000028C   390000EA           B        ??Calculate_19
   \                     ??Calculate_14:
   \   00000290   08109DE5           LDR      R1,[SP, #+8]
   \   00000294   4004A0E3           MOV      R0,#+1073741824
   \   00000298   400880E3           ORR      R0,R0,#0x400000
   \   0000029C   ........           _BLF     __fMul,??__fMul??rA
   \   000002A0   0910A0E1           MOV      R1,R9
   \   000002A4   ........           _BLF     __fAdd,??__fAdd??rA
   \   000002A8   4014A0E3           MOV      R1,#+1073741824
   \   000002AC   801881E3           ORR      R1,R1,#0x800000
   \                     ??Calculate_20:
   \   000002B0   ........           _BLF     __fDiv,??__fDiv??rA
   \   000002B4   00008DE5           STR      R0,[SP, #+0]
   \   000002B8   EBFFFFEA           B        ??Calculate_16
   \                     ??Calculate_12:
   \   000002BC   010020E2           EOR      R0,R0,#0x1
   \   000002C0   0A0010E1           TST      R0,R10
   \   000002C4   0500000A           BEQ      ??Calculate_15
   \   000002C8   08009DE5           LDR      R0,[SP, #+8]
   \   000002CC   0910A0E1           MOV      R1,R9
   \   000002D0   ........           _BLF     __fAdd,??__fAdd??rA
   \   000002D4   08008DE5           STR      R0,[SP, #+8]
   \   000002D8   1C109DE5           LDR      R1,[SP, #+28]
   \   000002DC   0C108DE5           STR      R1,[SP, #+12]
   \                     ??Calculate_15:
   \   000002E0   08A09DE5           LDR      R10,[SP, #+8]
   \   000002E4   0C009DE5           LDR      R0,[SP, #+12]
   \   000002E8   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   000002EC   0010A0E1           MOV      R1,R0
   \   000002F0   0A00A0E1           MOV      R0,R10
   \   000002F4   EDFFFFEA           B        ??Calculate_20
   \                     ??Calculate_17:
   \   000002F8   20009DE5           LDR      R0,[SP, #+32]
   \   000002FC   E1FFFFEA           B        ??Calculate_18
   \                     ??Calculate_11:
   \   00000300   00005AE3           CMP      R10,#+0
   \   00000304   0400000A           BEQ      ??Calculate_21
   \   00000308   0500A0E1           MOV      R0,R5
   \   0000030C   0910A0E1           MOV      R1,R9
   \   00000310   ........           _BLF     __fAdd,??__fAdd??rA
   \   00000314   0050A0E1           MOV      R5,R0
   \   00000318   016086E2           ADD      R6,R6,#+1
   \                     ??Calculate_21:
   \   0000031C   000056E3           CMP      R6,#+0
   \   00000320   1400000A           BEQ      ??Calculate_19
   \   00000324   0600A0E1           MOV      R0,R6
   \   00000328   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   0000032C   0010A0E1           MOV      R1,R0
   \   00000330   0500A0E1           MOV      R0,R5
   \   00000334   ........           _BLF     __fDiv,??__fDiv??rA
   \   00000338   700184E5           STR      R0,[R4, #+368]
   \   0000033C   00008DE5           STR      R0,[SP, #+0]
   \   00000340   00005AE3           CMP      R10,#+0
   \   00000344   0B00000A           BEQ      ??Calculate_19
   \   00000348   00908DE5           STR      R9,[SP, #+0]
   \   0000034C   090000EA           B        ??Calculate_19
   \                     ??Calculate_10:
   \   00000350   000056E3           CMP      R6,#+0
   \   00000354   0500000A           BEQ      ??Calculate_22
   \   00000358   0600A0E1           MOV      R0,R6
   \   0000035C   ........           _BLF     __longToFloat,??__longToFloat??rA
   \   00000360   0010A0E1           MOV      R1,R0
   \   00000364   0500A0E1           MOV      R0,R5
   \   00000368   ........           _BLF     __fDiv,??__fDiv??rA
   \   0000036C   700184E5           STR      R0,[R4, #+368]
   \                     ??Calculate_22:
   \   00000370   741194E5           LDR      R1,[R4, #+372]
   \   00000374   00108DE5           STR      R1,[SP, #+0]
   \                     ??Calculate_19:
   \   00000378   A0009FE5           LDR      R0,??Calculate_2+0x4  ;; ??UseTemperatureWindow
   \   0000037C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000380   000050E3           CMP      R0,#+0
   \   00000384   0800000A           BEQ      ??Calculate_23
   \   00000388   A43094E5           LDR      R3,[R4, #+164]
   \   0000038C   682194E5           LDR      R2,[R4, #+360]
   \   00000390   00109DE5           LDR      R1,[SP, #+0]
   \   00000394   943093E5           LDR      R3,[R3, #+148]
   \   00000398   0400A0E1           MOV      R0,R4
   \   0000039C   0FE0A0E1           MOV      LR,PC
   \   000003A0   13FF2FE1           BX       R3
   \   000003A4   000050E3           CMP      R0,#+0
   \   000003A8   0100000A           BEQ      ??Calculate_24
   \                     ??Calculate_23:
   \   000003AC   00009DE5           LDR      R0,[SP, #+0]
   \   000003B0   680184E5           STR      R0,[R4, #+360]
   \                     ??Calculate_24:
   \   000003B4   0C009DE5           LDR      R0,[SP, #+12]
   \   000003B8   060090E0           ADDS     R0,R0,R6
   \   000003BC   7881D405           LDRBEQ   R8,[R4, #+376]
   \   000003C0   6081C4E5           STRB     R8,[R4, #+352]
   \   000003C4   6001D4E5           LDRB     R0,[R4, #+352]
   \   000003C8   000050E3           CMP      R0,#+0
   \   000003CC   58718415           STRNE    R7,[R4, #+344]
   \   000003D0   0500A003           MOVEQ    R0,#+5
   \   000003D4   58018405           STREQ    R0,[R4, #+344]
   1302              if (CreatedFromThisTank) {
   \                     ??Calculate_1:
   \   000003D8   642194E5           LDR      R2,[R4, #+356]
   \   000003DC   000052E3           CMP      R2,#+0
   \   000003E0   0500000A           BEQ      ??Calculate_25
   1303                  CreatedFromThisTank->SetTemperature(Temperature);
   \   000003E4   681194E5           LDR      R1,[R4, #+360]
   \   000003E8   0200A0E1           MOV      R0,R2
   \   000003EC   A42092E5           LDR      R2,[R2, #+164]
   \   000003F0   882092E5           LDR      R2,[R2, #+136]
   \   000003F4   0FE0A0E1           MOV      LR,PC
   \   000003F8   12FF2FE1           BX       R2
   1304              }
   1305              SendData();
   \                     ??Calculate_25:
   \   000003FC   A42094E5           LDR      R2,[R4, #+164]
   \   00000400   6510A0E3           MOV      R1,#+101
   \   00000404   402092E5           LDR      R2,[R2, #+64]
   \   00000408   0400A0E1           MOV      R0,R4
   \   0000040C   0FE0A0E1           MOV      LR,PC
   \   00000410   12FF2FE1           BX       R2
   1306          }
   \   00000414   24D08DE2           ADD      SP,SP,#+36
   \   00000418   ........           B        ?Subroutine37
   \                     ??Calculate_2:
   \   0000041C   339388C3           DC32     0xffffffffc3889333
   \   00000420   ........           DC32     ??UseTemperatureWindow
   1307          

   \                                 In segment CODE, align 4, keep-with-next
   1308          void PROTemperature::SimCalculate(void) {
   \                     ??SimCalculate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1309              StatusTemp = GETVAL_NO_ERR;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   580184E5           STR      R0,[R4, #+344]
   1310              HasTemp    = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   6001C4E5           STRB     R0,[R4, #+352]
   1311              IsNewData  = true;
   \   00000018   E000C4E5           STRB     R0,[R4, #+224]
   1312              if (PROProjectInfo::SimulateFixedValues) {
   \   0000001C   48009FE5           LDR      R0,??SimCalculate_1  ;; ??SimulateFixedValues
   \   00000020   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0500000A           BEQ      ??SimCalculate_2
   1313                  Temperature = (IDNumber & 0xFFF);
   \   0000002C   9C0094E5           LDR      R0,[R4, #+156]
   \   00000030   000AA0E1           LSL      R0,R0,#+20
   \   00000034   200AA0E1           LSR      R0,R0,#+20
   \   00000038   ........           _BLF     __ulongToFloat,??__ulongToFloat??rA
   \   0000003C   680184E5           STR      R0,[R4, #+360]
   \   00000040   040000EA           B        ??SimCalculate_3
   1314              } else {
   1315                  Calculate();
   \                     ??SimCalculate_2:
   \   00000044   A41094E5           LDR      R1,[R4, #+164]
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   641091E5           LDR      R1,[R1, #+100]
   \   00000050   0FE0A0E1           MOV      LR,PC
   \   00000054   11FF2FE1           BX       R1
   1316                  /*
   1317                  if (Temperature < 10.0) {
   1318                      Temperature = 10.0;
   1319                  }
   1320                  Temperature += SimulatorSign * (rand() % 10) / 100.0;
   1321                  if (Temperature > 50.0 || Temperature < 10.0) {
   1322                      SimulatorSign = -SimulatorSign;
   1323                  }
   1324                  */
   1325              }
   1326          
   1327              if (CreatedFromThisTank) {
   \                     ??SimCalculate_3:
   \   00000058   640194E5           LDR      R0,[R4, #+356]
   \   0000005C   000050E3           CMP      R0,#+0
   1328                  ((PROTank *)CreatedFromThisTank)->Temperature = Temperature;
   \   00000060   68119415           LDRNE    R1,[R4, #+360]
   \   00000064   8C128015           STRNE    R1,[R0, #+652]
   1329              }
   1330          }
   \   00000068   ........           B        ?Subroutine38
   \                     ??SimCalculate_1:
   \   0000006C   ........           DC32     ??SimulateFixedValues
   1331          

   \                                 In segment CODE, align 4, keep-with-next
   1332          void PROTemperature::SetState(TankState newState) {
   \                     ??SetState:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
   \   00000008   0040A0E1           MOV      R4,R0
   1333              switch (newState) {
   \   0000000C   525FA0E3           MOV      R5,#+328
   \   00000010   040051E3           CMP      R1,#+4
   1334              case tSeaGoing      :
   1335              case tLoad          :
   1336              case tDischarge     :
   1337              case tTankCleaning  :
   1338              case tUndefined     :
   1339                  State = newState;
   \   00000014   0410C597           STRBLS   R1,[R5, +R4]
   1340                  break;
   1341              default:
   1342                  break;
   1343              }
   1344              if (!ExcludeState && newState != tUndefined) {
   \   00000018   4901D4E5           LDRB     R0,[R4, #+329]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   2500001A           BNE      ??SetState_1
   \   00000024   040051E3           CMP      R1,#+4
   \   00000028   2300000A           BEQ      ??SetState_1
   1345                  const AlarmBasic::StateAlarmTable AlarmSet[] = {   //tSeaGoing       , tLoad             , tDischarge        , tTankCleaning, tUndefined
   1346                      { (AlarmBasic *)HighTempPtr, { EnableUsePrevious, EnableUsePrevious, EnableUsePrevious, EnableNoMemFalse } },
   1347                      { (AlarmBasic *)LowTempPtr, { EnableUsePrevious, EnableUsePrevious, EnableUsePrevious, EnableNoMemFalse } },
   1348                      { (AlarmBasic *)HighBotTempPtr, { EnableUsePrevious, EnableUsePrevious, EnableUsePrevious, EnableNoMemFalse } },
   1349                      { (AlarmBasic *)LowBotTempPtr, { EnableUsePrevious, EnableUsePrevious, EnableUsePrevious, EnableNoMemFalse } },
   1350                  };
   \   0000002C   90109FE5           LDR      R1,??SetState_2  ;; `?<Constant {{(AlarmBasic *)0, {EnableUsePrevio`
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   3030A0E3           MOV      R3,#+48
   \                     ??SetState_3:
   \   00000038   043053E2           SUBS     R3,R3,#+4
   \   0000003C   032091E7           LDR      R2,[R1, R3]
   \   00000040   032080E7           STR      R2,[R0, R3]
   \   00000044   FBFFFF1A           BNE      ??SetState_3
   \   00000048   7C1194E5           LDR      R1,[R4, #+380]
   1351                  for (unsigned i = 0; i < NELEMENTS(AlarmSet); i++) {
   \   0000004C   0060A0E3           MOV      R6,#+0
   \   00000050   00108DE5           STR      R1,[SP, #+0]
   \   00000054   801194E5           LDR      R1,[R4, #+384]
   \   00000058   0C108DE5           STR      R1,[SP, #+12]
   \   0000005C   841194E5           LDR      R1,[R4, #+388]
   \   00000060   18108DE5           STR      R1,[SP, #+24]
   \   00000064   881194E5           LDR      R1,[R4, #+392]
   \   00000068   24108DE5           STR      R1,[SP, #+36]
   1352                      AlarmBasic *AlPtr = AlarmSet[i].AlarmPtr;
   \                     ??SetState_4:
   \   0000006C   0C10A0E3           MOV      R1,#+12
   \   00000070   910600E0           MUL      R0,R1,R6
   \   00000074   0D10A0E1           MOV      R1,SP
   \   00000078   012080E0           ADD      R2,R0,R1
   \   0000007C   001092E5           LDR      R1,[R2, #+0]
   1353                      if (AlPtr && !AlPtr->Locked) {
   \   00000080   000051E3           CMP      R1,#+0
   \   00000084   0900000A           BEQ      ??SetState_5
   \   00000088   E810D1E5           LDRB     R1,[R1, #+232]
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   0600001A           BNE      ??SetState_5
   1354                          AlarmSet[i].AlarmPtr->SetEnable(AlarmSet[i].Enable[State]);
   \   00000094   0410D5E7           LDRB     R1,[R5, +R4]
   \   00000098   0D30A0E1           MOV      R3,SP
   \   0000009C   031081E0           ADD      R1,R1,R3
   \   000000A0   010080E0           ADD      R0,R0,R1
   \   000000A4   0410D0E5           LDRB     R1,[R0, #+4]
   \   000000A8   000092E5           LDR      R0,[R2, #+0]
   \   000000AC   ........           _BLF     ??SetEnable,??SetEnable??rA
   1355                      }
   1356                  }
   \                     ??SetState_5:
   \   000000B0   016086E2           ADD      R6,R6,#+1
   \   000000B4   040056E3           CMP      R6,#+4
   \   000000B8   EBFFFF3A           BCC      ??SetState_4
   1357              }
   1358          }
   \                     ??SetState_1:
   \   000000BC   30D08DE2           ADD      SP,SP,#+48
   \   000000C0   ........           B        ?Subroutine34
   \                     ??SetState_2:
   \   000000C4   ........           DC32     `?<Constant {{(AlarmBasic *)0, {EnableUsePrevio`
   1359          

   \                                 In segment CODE, align 4, keep-with-next
   1360          float PROTemperature::GetTemperature(void) {
   1361              if (IsOnline) {
   \                     ??GetTemperature:
   \   00000000   4A11D0E5           LDRB     R1,[R0, #+330]
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   0400000A           BEQ      ??GetTemperature_1
   1362                  if (HasTemp && IsNewData) {
   \   0000000C   6011D0E5           LDRB     R1,[R0, #+352]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   E010D015           LDRBNE   R1,[R0, #+224]
   \   00000018   00005113           CMPNE    R1,#+0
   \   0000001C   0100000A           BEQ      ??GetTemperature_2
   1363                      return Temperature;
   \                     ??GetTemperature_1:
   \   00000020   680190E5           LDR      R0,[R0, #+360]
   \   00000024   1EFF2FE1           BX       LR
   1364                  } else {
   1365                      return 0.0;
   \                     ??GetTemperature_2:
   \   00000028   ........           B        ?Subroutine40
   1366                  }
   1367              } else {
   1368                  return Temperature;
   1369              }
   1370          
   1371          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine40:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   1372          void PROTemperature::SetTemperature(float NewTemp) {
   1373              Temperature = NewTemp;
   \                     ??SetTemperature:
   \   00000000   681180E5           STR      R1,[R0, #+360]
   1374          }
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1375          

   \                                 In segment CODE, align 4, keep-with-next
   1376          bool PROTemperature::IsAvailableNewData(void) {
   \                     ??IsAvailableNewData:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1377              bool Expired;
   1378              if (abs(double(clock() - TimeStamp)) < 5 * DATA_EXPIRATION_TIME) {
   \   00000008   ........           _BLF     clock,??clock??rA
   \   0000000C   401094E5           LDR      R1,[R4, #+64]
   \   00000010   010040E0           SUB      R0,R0,R1
   \   00000014   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   00000018   24309FE5           LDR      R3,??IsAvailableNewData_1  ;; 0x40e86a00
   \   0000001C   8014C1E3           BIC      R1,R1,#0x80000000
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   ........           _BLF     __dLess,??__dLess??rA
   1379                  Expired = false;
   1380              } else {
   1381                  Expired = true;
   1382              }
   1383              return !Expired;
   \   00000028   1040BDE8           POP      {R4,LR}
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0000A013           MOVNE    R0,#+0
   \   00000034   0100A003           MOVEQ    R0,#+1
   \   00000038   010020E2           EOR      R0,R0,#0x1
   \   0000003C   FF0000E2           AND      R0,R0,#0xFF
   \   00000040   1EFF2FE1           BX       LR               ;; return
   \                     ??IsAvailableNewData_1:
   \   00000044   006AE840           DC32     0x40e86a00
   1384              //return bool(abs(clock() - TimeStamp)<3*DATA_EXPIRATION_TIME);
   1385          }
   1386          
   1387          

   \                                 In segment CODE, align 4, keep-with-next
   1388          void PROTemperature::UpdateLevelInfo(float pLevel, bool pEmpty) {
   1389              Level 	     = pLevel;
   \                     ??UpdateLevelInfo:
   \   00000000   6C1180E5           STR      R1,[R0, #+364]
   1390              NotEmptyTank = pEmpty;
   \   00000004   7921C0E5           STRB     R2,[R0, #+377]
   1391          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
   1392          
   1393          

   \                                 In segment CODE, align 4, keep-with-next
   1394          int PROTemperature::WriteXML(char *StrBuf, bool IncAlarms) {
   1395          #ifdef ANWIN
   1396              AnsiString TempStr = LibGetValue(SVT_TEMP, this, 0);
   1397              // Alarm status
   1398              //
   1399              int LEDStatus = TPC_LED_OFF;
   1400              if (!CompleteAlarmInfoList.empty()) {
   1401                  bool ActiveAlarm = false;
   1402                  time_t NewestAlarmAct = 0;
   1403                  time_t NewestAlarmAck = 0;
   1404                  set<AlarmBasic *>::iterator pBIt;
   1405                  for (pBIt = AlarmSet.begin(); pBIt != AlarmSet.end(); pBIt++) {
   1406                      AlarmBasic *Element = *pBIt;
   1407                      if (Element) {
   1408                          switch (Element->State) {
   1409                          case AlarmBasic::AlIdle :
   1410                              break;
   1411                          case AlarmBasic::AlActive :
   1412                              if (Element->Time_Rised > NewestAlarmAct) {
   1413                                  LEDStatus = TPC_LED_FLASH;
   1414                              }
   1415                              break;
   1416                          case AlarmBasic::AlAknowledged :
   1417                              if (!ActiveAlarm && (Element->Time_Acknowledged > NewestAlarmAck)) {
   1418                                  LEDStatus = TPC_LED_ON;
   1419                              }
   1420                              break;
   1421                          }
   1422                      }
   1423                  }
   1424              }
   1425          
   1426              int  tmpPtr = sprintf(StrBuf, "\t<Packet>\r\n");
   1427              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<PacketID>Freevalue</PacketID>\r\n");
   1428              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<TagID>%s</TagID>\r\n", TagName.c_str());
   1429              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<Value>%s</Value>\r\n", TempStr);
   1430              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t\t<Alarm>%i</Alarm>\r\n", LEDStatus);
   1431              tmpPtr += sprintf(&StrBuf[tmpPtr], "\t</Packet>\r\n");
   1432              return tmpPtr;
   1433          #else
   1434              return 0;
   \                     ??WriteXML:
   \   00000000                      REQUIRE ?Subroutine40
   \   00000000                      ;; // Fall through to label ?Subroutine40
   1435          #endif
   1436          }
   1437          
   1438          

   \                                 In segment CODE, align 4, keep-with-next
   1439          int PROTemperature::GetMaxTempSensors(void)
   1440          {
   1441              return MaxTempCnt;
   \                     ??GetMaxTempSensors:
   \   00000000   ........           LDR      R0,??DataTable22  ;; ??MaxTempCnt
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
   1442          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for MaxTempCnt>`:
   \   00000000   00000000           DC32 0
   \                     `?<Initializer for TempValueList1>`:
   \   00000004   30010000ED00       DC32 304, 237, 1000, 338, 338, 1004, 1049, 1049, 1005, 112, 237, 9100
   \              0000E8030000
   \              520100005201
   \              0000EC030000
   \              190400001904
   \              0000ED030000
   \              70000000ED00
   \              00008C230000
   \   00000034   71000000ED00       DC32 113, 237, 9101, 1060, 1062, 9108, 1061, 1063, 9109, 985, 364, 1072
   \              00008D230000
   \              240400002604
   \              000094230000
   \              250400002704
   \              000095230000
   \              D90300006C01
   \              000030040000
   \   00000064   DA0300000F04       DC32 986, 1039, 1073, 987, 365, 1074, 988, 365, 1075, 989, 365, 1076
   \              000031040000
   \              DB0300006D01
   \              000032040000
   \              DC0300006D01
   \              000033040000
   \              DD0300006D01
   \              000034040000
   \   00000094   6B0100006F01       DC32 363, 367, 1077
   \              000035040000
   \                     `?<Initializer for TempValueList2>`:
   \   000000A0   30010000ED00       DC32 304, 237, 1000, 338, 338, 1004, 1049, 1049, 1005, 112, 237, 9100
   \              0000E8030000
   \              520100005201
   \              0000EC030000
   \              190400001904
   \              0000ED030000
   \              70000000ED00
   \              00008C230000
   \   000000D0   71000000ED00       DC32 113, 237, 9101, 1060, 1062, 9108, 1061, 1063, 9109, 360, 364, 1072
   \              00008D230000
   \              240400002604
   \              000094230000
   \              250400002704
   \              000095230000
   \              680100006C01
   \              000030040000
   \   00000100   690100000F04       DC32 361, 1039, 1073, 362, 365, 1074, 988, 832, 1075, 989, 1040, 1076
   \              000031040000
   \              6A0100006D01
   \              000032040000
   \              DC0300004003
   \              000033040000
   \              DD0300001004
   \              000034040000
   \   00000130   6B0100006F01       DC32 363, 367, 1077
   \              000035040000
   \                     `?<Initializer for TempAlarmValueList>`:
   \   0000013C   30010000ED00       DC32 304, 237, 1000, 338, 338, 1004, 1049, 1049, 1005, 112, 237, 9100
   \              0000E8030000
   \              520100005201
   \              0000EC030000
   \              190400001904
   \              0000ED030000
   \              70000000ED00
   \              00008C230000
   \   0000016C   71000000ED00       DC32 113, 237, 9101, 1060, 1062, 9108, 1061, 1063, 9109
   \              00008D230000
   \              240400002604
   \              000094230000
   \              250400002704
   \              000095230000
   \                     `?<Initializer for TempSensorValueList1>`:
   \   00000190   30010000ED00       DC32 304, 237, 1000, 338, 338, 1004, 1049, 1049, 1005, 830, 830, 1072
   \              0000E8030000
   \              520100005201
   \              0000EC030000
   \              190400001904
   \              0000ED030000
   \              3E0300003E03
   \              000030040000
   \   000001C0   0F0400000F04       DC32 1039, 1039, 1073, 831, 831, 1074, 832, 832, 1075, 1040, 1040, 1076
   \              000031040000
   \              3F0300003F03
   \              000032040000
   \              400300004003
   \              000033040000
   \              100400001004
   \              000034040000
   \   000001F0   6B0100006F01       DC32 363, 367, 1077, 822, 834, 1128, 1035, 1041, 1129, 823, 835, 1130
   \              000035040000
   \              360300004203
   \              000068040000
   \              0B0400001104
   \              000069040000
   \              370300004303
   \              00006A040000
   \   00000220   380300004403       DC32 824, 836, 1131, 1036, 1042, 1132, 825, 837, 1133, 826, 838, 1090
   \              00006B040000
   \              0C0400001204
   \              00006C040000
   \              390300004503
   \              00006D040000
   \              3A0300004603
   \              000042040000
   \   00000250   0D0400001304       DC32 1037, 1043, 1088, 827, 839, 1091, 828, 840, 1092, 1038, 1044, 1089
   \              000040040000
   \              3B0300004703
   \              000043040000
   \              3C0300004803
   \              000044040000
   \              0E0400001404
   \              000041040000
   \   00000280   3D0300004903       DC32 829, 841, 1093
   \              000045040000
   \                     `?<Initializer for TempSensorValueList2>`:
   \   0000028C   30010000ED00       DC32 304, 237, 1000, 338, 338, 1004, 1049, 1049, 1005, 360, 830, 1072
   \              0000E8030000
   \              520100005201
   \              0000EC030000
   \              190400001904
   \              0000ED030000
   \              680100003E03
   \              000030040000
   \   000002BC   690100000F04       DC32 361, 1039, 1073, 362, 831, 1074, 988, 366, 1075, 989, 1040, 1076
   \              000031040000
   \              6A0100003F03
   \              000032040000
   \              DC0300006E01
   \              000033040000
   \              DD0300001004
   \              000034040000
   \   000002EC   6B0100006F01       DC32 363, 367, 1077, 822, 834, 1128, 1035, 1041, 1129, 823, 835, 1130
   \              000035040000
   \              360300004203
   \              000068040000
   \              0B0400001104
   \              000069040000
   \              370300004303
   \              00006A040000
   \   0000031C   380300004403       DC32 824, 836, 1131, 1036, 1042, 1132, 825, 837, 1133, 826, 838, 1090
   \              00006B040000
   \              0C0400001204
   \              00006C040000
   \              390300004503
   \              00006D040000
   \              3A0300004603
   \              000042040000
   \   0000034C   0D0400001304       DC32 1037, 1043, 1088, 827, 839, 1091, 828, 840, 1092, 1038, 1044, 1089
   \              000040040000
   \              3B0300004703
   \              000043040000
   \              3C0300004803
   \              000044040000
   \              0E0400001404
   \              000041040000
   \   0000037C   3D0300004903       DC32 829, 841, 1093
   \              000045040000

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x%0x">`:
   \   00000000   307825307800       DC8 "0x%0x"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Temperature ">`:
   \   00000000   54656D706572       DC8 "Temperature "
   \              617475726520
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   3A0A556E6B6E       DC8 ":\012Unknown error started at line:"
   \              6F776E206572
   \              726F72207374
   \              617274656420
   \              6174206C696E
   \              653A00      
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   3A0A54686520       DC8 ":\012The keyword "
   \              6B6579776F72
   \              642000      
   \   00000043   00                 DC8 0
   \   00000044   206973206E6F       DC8 " is not allowed here!! Line:"
   \              7420616C6C6F
   \              776564206865
   \              72652121204C
   \              696E653A00  
   \   00000061   000000             DC8 0, 0, 0
   \   00000064   3A0A53656E73       DC8 ":\012Sensor Id "
   \              6F7220496420
   \              00          
   \   00000071   000000             DC8 0, 0, 0
   \   00000074   206973206E6F       DC8 " is not found!! Line:"
   \              7420666F756E
   \              642121204C69
   \              6E653A00    
   \   0000008A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {{(AlarmBasic *)0, {EnableUsePrevio`:
   \   00000000   00000000           DC32 0H
   \   00000004   020202040000       DC8 2, 2, 2, 4, 0, 0, 0, 0
   \              0000        
   \   0000000C   00000000           DC32 0H
   \   00000010   020202040000       DC8 2, 2, 2, 4, 0, 0, 0, 0
   \              0000        
   \   00000018   00000000           DC32 0H
   \   0000001C   020202040000       DC8 2, 2, 2, 4, 0, 0, 0, 0
   \              0000        
   \   00000024   00000000           DC32 0H
   \   00000028   020202040000       DC8 2, 2, 2, 4, 0, 0, 0, 0
   \              0000        

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable9  ;; ??ObjectSet
   \   00000008   48509FE5           LDR      R5,??__sti__routine_1  ;; ?_0
   \   0000000C   180084E2           ADD      R0,R4,#+24
   \   00000010   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000001C   240084E2           ADD      R0,R4,#+36
   \   00000020   ........           _BLF     ??_Zero,??_Zero??rA
   \   00000024   0C0085E2           ADD      R0,R5,#+12
   \   00000028   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     __data_memzero,??__data_memzero??rA
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     ??_Clear,??_Clear??rA
   \   00000040   0000DDE5           LDRB     R0,[SP, #+0]
   \   00000044   1400C4E5           STRB     R0,[R4, #+20]
   \   00000048   180085E2           ADD      R0,R5,#+24
   \   0000004C   ........           _BLF     __record_needed_destruction,??__record_needed_destruction??rA
   \   00000050   3140BDE8           POP      {R0,R4,R5,LR}
   \   00000054   1EFF2FE1           BX       LR               ;; return
   \                     ??__sti__routine_1:
   \   00000058   ........           DC32     ?_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROTemperature &PROTemperature::new PROTemperature(bool, int)
   \                     `??new PROTemperature`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   650FA0E3           MOV      R0,#+404
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0200000A           BEQ      `??new PROTemperature_2`
   \   0000001C   0520A0E1           MOV      R2,R5
   \   00000020   0410A0E1           MOV      R1,R4
   \   00000024   ........           BL       ??PROTemperature
   \                     `??new PROTemperature_2`:
   \   00000028   3040BDE8           POP      {R4,R5,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs PROTemperature &PROTemperature::new PROTemperature(int, PROXRefObject *, bool, int)
   \                     `??new PROTemperature_1`:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   650FA0E3           MOV      R0,#+404
   \   00000018   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0500000A           BEQ      `??new PROTemperature_3`
   \   00000024   80002DE9           PUSH     {R7}
   \   00000028   0630A0E1           MOV      R3,R6
   \   0000002C   0520A0E1           MOV      R2,R5
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   ........           BL       ??PROTemperature_1
   \   00000038   04D08DE2           ADD      SP,SP,#+4
   \                     `??new PROTemperature_3`:
   \   0000003C   F040BDE8           POP      {R4-R7,LR}
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ??MaxTempCnt

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     ??__vtbl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     ??ObjectSet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     ??HighTempLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     ??LowTempLimit

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     CrLfStr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     `?<Constant "0x%0x">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     `?<Constant "Temperature ">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     ??npos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     ??MaxTempCnt
   1443          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AlarmBasic::~AlarmBasic()         12
     PROTemperature::Calculate()       72
     PROTemperature::CreateAlarms()    28
     PROTemperature::FindPROStatus(AnsiString &)
                                       60
     PROTemperature::GetBitValue(int, int, bool &)
                                        8
     PROTemperature::GetMaxTempSensors()
                                        0
     PROTemperature::GetStringValue(int, int, AnsiString &)
                                        8
     PROTemperature::GetTemperature()
                                        0
     PROTemperature::GetValue(int, int, float &, int &, int &)
                                       48
     PROTemperature::GetValueInfoTable(int &, int)
                                        4
     PROTemperature::GetValueInfoTableStatic(int &, int)
                                        4
     PROTemperature::Initiate()         0
     PROTemperature::IsAvailableNewData()
                                        8
     PROTemperature::IsTemperatureInsideWindow(float, float)
                                       16
     PROTemperature::LoadConfigFromFile(TSNConfigString &)
                                      264
     PROTemperature::PROTemperature(bool, int)
                                       40
     PROTemperature::PROTemperature(int, PROXRefObject *, bool, int)
                                       48
     PROTemperature::PutBitValue(int, int, bool)
                                       24
     PROTemperature::PutFloatValue(int, float)
                                        8
     PROTemperature::PutValue(int, int, AnsiString, bool, int *)
                                      152
     PROTemperature::ReceiveData(unsigned char *)
                                       20
     PROTemperature::RestoreSettings(TSNConfigString *)
                                      864
     PROTemperature::SaveSettings(TSNConfigString *)
                                      336
     PROTemperature::SendData(unsigned short)
                                       40
     PROTemperature::SetState(TankState)
                                       64
     PROTemperature::SetTemperature(float)
                                        0
     PROTemperature::SimCalculate()     8
     PROTemperature::SortAnalogInputs()
                                       16
     PROTemperature::UpdateLevelInfo(float, bool)
                                        0
     PROTemperature::WriteConfigToFile(TSNConfigString &)
                                      448
     PROTemperature::WriteXML(char *, bool)
                                        0
     PROTemperature::new PROTemperature(bool, int)
                                       12
     PROTemperature::new PROTemperature(int, PROXRefObject *, bool, int)
                                       24
     PROTemperature::~PROTemperature()
                                       16
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                       24
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                       44
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                       16
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                        0
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                        8
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                       28
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                       24
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                       20
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                       44
     _Tree_algobase<allocator<void>>::_Clear()
                                        0
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                       32
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                       20
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                        0
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                       16
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                       32
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
                                       20
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                       16
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                       32
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                        8
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                        4
     _Vector_value<allocator<void>>::_Zero()
                                        0
     __sti__routine()                  16
     operator+(string const &, char const *)
                                       44
     operator+(string const &, string const &)
                                       40
     set<PRogramObjectBase *>::~set()
                                        4
     string::string(string const &)    12
     vector<PRogramObjectBase *>::~vector()
                                        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     string::string(string const &)   64
     _Tree_algobase<allocator<void>>::_DecP(_Tree_algobase<allocator<void>>::_Genptr)
                                     100
     _Tree_algobase<allocator<void>>::_IncP(_Tree_algobase<allocator<void>>::_Genptr)
                                      92
     _Tree_algobase<allocator<void>>::_Clear()
                                      36
     _Tree_algobase<allocator<void>>::_Rrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Lrotate(_Tree_algobase<allocator<void>>::_Genptr)
                                      84
     _Tree_algobase<allocator<void>>::_Erase(_Tree_algobase<allocator<void>>::_Genptr)
                                     804
     _Tree_algobase<allocator<void>>::_Insert(bool, _Tree_algobase<allocator<void>>::_Genptr, _Tree_algobase<allocator<void>>::_Genptr)
                                     356
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::insert(AlarmBasic *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::insert(PRogramObjectBase *)
                                     200
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::iterator)
                                     108
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::erase(PRogramObjectBase *)
                                      84
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::clear()
                                      32
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::equal_range(PRogramObjectBase *)
                                      76
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Erase(_Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr)
                                      68
     _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Insert(bool, _Tree<_Tset_traits<AlarmBasic *, less<AlarmBasic *>, allocator<AlarmBasic *>, false>>::_Nodeptr, AlarmBasic *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Insert(bool, _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Nodeptr, PRogramObjectBase *)
                                      96
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Lbound(PRogramObjectBase *) const
                                      40
     _Tree<_Tset_traits<PRogramObjectBase *, less<PRogramObjectBase *>, allocator<PRogramObjectBase *>, false>>::_Ubound(PRogramObjectBase *) const
                                      40
     set<PRogramObjectBase *>::~set()
                                      16
     _Vector_value<allocator<void>>::_Zero()
                                      20
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Tidy0()
                                      36
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Assign(_Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>> const &)
                                     224
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Insert(AnalogInput **, AnalogInput * const &)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Insert(PRogramObjectBase **, PRogramObjectBase * const &)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Make_room(PRogramObjectBase **, unsigned int)
                                     232
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Make_room(AnalogInput **, unsigned int)
                                     244
     _Vector_impl<AnalogInput *, allocator<AnalogInput *>>::_Push_back0(AnalogInput *)
                                      72
     _Vector_impl<PRogramObjectBase *, allocator<PRogramObjectBase *>>::_Push_back0(PRogramObjectBase *)
                                      72
     vector<PRogramObjectBase *>::~vector()
                                      28
     operator+(string const &, string const &)
                                      88
     operator+(string const &, char const *)
                                      92
     AlarmBasic::~AlarmBasic()        52
     ?_0                              36
     PROTemperature::ObjectSet        48
     PROTemperature::PROTemperature(bool, int)
                                     184
     ?Subroutine34                     8
     PROTemperature::PROTemperature(int, PROXRefObject *, bool, int)
                                     260
     ?Subroutine35                     8
     PROTemperature::Initiate()      128
     PROTemperature::CreateAlarms()  264
     PROTemperature::~PROTemperature()
                                     104
     PROTemperature::SortAnalogInputs()
                                     124
     PROTemperature::WriteConfigToFile(TSNConfigString &)
                                     964
     ?Subroutine36                    12
     PROTemperature::LoadConfigFromFile(TSNConfigString &)
                                     924
     ?Subroutine37                    12
     PROTemperature::SaveSettings(TSNConfigString *)
                                     656
     PROTemperature::RestoreSettings(TSNConfigString *)
                                    1352
     PROTemperature::FindPROStatus(AnsiString &)
                                     284
     PROTemperature::GetValue(int, int, float &, int &, int &)
                                    1264
     PROTemperature::GetStringValue(int, int, AnsiString &)
                                      64
     ?Subroutine38                     8
     PROTemperature::GetBitValue(int, int, bool &)
                                     172
     PROTemperature::PutValue(int, int, AnsiString, bool, int *)
                                    1708
     PROTemperature::PutFloatValue(int, float)
                                     216
     PROTemperature::PutBitValue(int, int, bool)
                                     308
     PROTemperature::ReceiveData(unsigned char *)
                                     288
     PROTemperature::SendData(unsigned short)
                                     212
     ?Subroutine39                     8
     PROTemperature::IsTemperatureInsideWindow(float, float)
                                     108
     PROTemperature::MaxTempCnt      904
     PROTemperature::GetValueInfoTable(int &, int)
                                      16
     PROTemperature::GetValueInfoTableStatic(int &, int)
                                     108
     PROTemperature::Calculate()    1060
     PROTemperature::SimCalculate()  112
     PROTemperature::SetState(TankState)
                                     200
     PROTemperature::GetTemperature()
                                      44
     ?Subroutine40                     8
     PROTemperature::SetTemperature(float)
                                       8
     PROTemperature::IsAvailableNewData()
                                      72
     PROTemperature::UpdateLevelInfo(float, bool)
                                      12
     PROTemperature::WriteXML(char *, bool)
                                       0
     PROTemperature::GetMaxTempSensors()
                                      12
     ?<Initializer for MaxTempCnt>   904
     ?<Constant "0x%0x">               8
     ?<Constant "Temperature ">      140
     ?<Constant {{(AlarmBasic *)0, {EnableUsePrevio
                                      48
     __sti__routine()                 92
     PROTemperature::new PROTemperature(bool, int)
                                      48
     PROTemperature::new PROTemperature(int, PROXRefObject *, bool, int)
                                      68
     ??DataTable7                      4
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable13                     4
     ??DataTable14                     4
     ??DataTable16                     4
     ??DataTable17                     4
     ??DataTable18                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable22                     4
      Others                        1672

 
 17 004 bytes in segment CODE
    384 bytes in segment DATA_C
    904 bytes in segment DATA_I
    904 bytes in segment DATA_ID
     60 bytes in segment DATA_Z
      4 bytes in segment DIFUNCT
     24 bytes in segment INITTAB
 
 11 548 bytes of CODE  memory (+ 5 484 bytes shared)
  1 288 bytes of CONST memory
    964 bytes of DATA  memory

Errors: none
Warnings: none
