##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               19/Jan/2017  10:13:09 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\BootWindowSystem.cpp               #
#    Command line    =  D:\S2Prog\TXU\src\BootWindowSystem.cpp --fpu None    #
#                       -D OS_LIBMODE_DP -D OS_RAMVECT=0 -D CPU_S3C2410 -D   #
#                       OS_UART=1 -D ANBOOTLOADER -D __ARM_LIBRARY__ -lCN    #
#                       D:\S2Prog\TXU\TargetDebug\List\ -o                   #
#                       D:\S2Prog\TXU\TargetDebug\Obj\ -s2 --no_cse          #
#                       --no_unroll --no_inline --no_code_motion --no_tbaa   #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --eec++ --dlib_config "C:\Program     #
#                       Files (x86)\IAR Systems\Embedded Workbench           #
#                       4.0\arm\LIB\dl4tpainl8f.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\MINILZO.108\ -I          #
#                       "C:\Program Files (x86)\IAR Systems\Embedded         #
#                       Workbench 4.0\arm\INC\"                              #
#    List file       =  D:\S2Prog\TXU\TargetDebug\List\BootWindowSystem.lst  #
#    Object file     =  D:\S2Prog\TXU\TargetDebug\Obj\BootWindowSystem.r79   #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\BootWindowSystem.cpp
      1          #include <stdio.h>
      2          #include "RTOS.h"               /* embOS include */
      3          #include "GUI.h"
      4          #include "GUI_X.h"
      5          #include "WM.h"
      6          #include "ANPro10Inc.h"
      7          #include "2410addr.h"
      8          #include "TSNVersion.h"
      9          

   \                                 In segment DATA_Z, align 4, align-sorted
     10          OS_TASK GUITaskHandle;													 /* Task control blocks */
   \                     GUITaskHandle:
   \   00000000                      DS8 68

   \                                 In segment DATA_Z, align 4, align-sorted
     11          char GUITaskStack[4*4096];
   \                     GUITaskStack:
   \   00000000                      DS8 16384
     12          extern short GlobalDeviceHWId;
     13          

   \                                 In segment DATA_I, align 4, align-sorted
     14          char RevisionName[4][10]={
   \                     RevisionName:
   \   00000000                      DS8 40
   \   00000028                      REQUIRE `?<Initializer for RevisionName>`
     15          	"TCU_R1",
     16          	"TCU_R2",
     17          	"TDU_R1",
     18          	"TDU_R2",
     19          };
     20          
     21          #ifdef ANBOOTLOADER
     22          extern "C" {
     23          		// Bitmap Files
     24          	extern const GUI_BITMAP bmAriston_logo2;
     25          }
     26          #endif
     27          /*******************************************************************
     28          *       _GUI_Task
     29          *  This task does the background processing.
     30          *  The MainTask job is to update invalid windows, but other things such as
     31          *  evaluating mouse or touch input may also be done.
     32          */

   \                                 In segment CODE, align 4, keep-with-next
     33          void GUI_Task(void)
     34          {
   \                     ??GUI_Task:
   \   00000000   00402DE9           PUSH     {LR}
     35          	while ( 1 ) {
     36          		GUI_Exec();											/* Do the background work ... Update windows etc.) */
   \                     ??GUI_Task_1:
   \   00000004   ........           _BLF     GUI_Exec,??GUI_Exec??rA
     37          //		GUI_TOUCH_Exec();
     38          		GUI_X_ExecIdle();						/* Nothing left to do for the moment ... Idle processing */
   \   00000008   ........           _BLF     GUI_X_ExecIdle,??GUI_X_ExecIdle??rA
   \   0000000C   FCFFFFEA           B        ??GUI_Task_1
     39          	}
     40          
     41          }
     42          
     43          

   \                                 In segment DATA_Z, align 4, align-sorted
     44          int LCDXSize;
   \                     LCDXSize:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     45          int LCDYSize;
   \                     LCDYSize:
   \   00000000                      DS8 4
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          void InitTDUGUI(void)
     48          {
   \                     ??InitTDUGUI:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   50D04DE2           SUB      SP,SP,#+80
     49          	GUI_Init();
   \   00000008   ........           _BLF     GUI_Init,??GUI_Init??rA
     50          	WM_SetCreateFlags(WM_CF_MEMDEV);   /* Use memory devices on all windows to avoid flicker */
   \   0000000C   0400A0E3           MOV      R0,#+4
   \   00000010   ........           _BLF     WM_SetCreateFlags,??WM_SetCreateFlags??rA
     51          
     52          	LCDXSize = LCD_GET_XSIZE();
   \   00000014   ........           _BLF     LCD_GetXSize,??LCD_GetXSize??rA
   \   00000018   08119FE5           LDR      R1,??InitTDUGUI_1  ;; LCDXSize
   \   0000001C   000081E5           STR      R0,[R1, #+0]
     53          	LCDYSize = LCD_GET_YSIZE();
   \   00000020   ........           _BLF     LCD_GetYSize,??LCD_GetYSize??rA
   \   00000024   00119FE5           LDR      R1,??InitTDUGUI_1+0x4  ;; LCDYSize
   \   00000028   000081E5           STR      R0,[R1, #+0]
     54          //Set Welcome picture:
     55          	GUI_SetBkColor(GUI_LIGHTGRAY);
   \   0000002C   FC009FE5           LDR      R0,??InitTDUGUI_1+0x8  ;; 0xd3d3d3
   \   00000030   ........           _BLF     GUI_SetBkColor,??GUI_SetBkColor??rA
     56          	GUI_Clear();
   \   00000034   ........           _BLF     GUI_Clear,??GUI_Clear??rA
     57          	GUI_SetColor(GUI_BLACK);
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   ........           _BLF     GUI_SetColor,??GUI_SetColor??rA
     58          	GUI_DrawBitmap(&bmAriston_logo2,20,1);
   \   00000040   0120A0E3           MOV      R2,#+1
   \   00000044   1410A0E3           MOV      R1,#+20
   \   00000048   E4009FE5           LDR      R0,??InitTDUGUI_1+0xC  ;; bmAriston_logo2
   \   0000004C   ........           _BLF     GUI_DrawBitmap,??GUI_DrawBitmap??rA
     59          	GUI_SetTextMode(GUI_TM_TRANS);
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   ........           _BLF     GUI_SetTextMode,??GUI_SetTextMode??rA
     60          	GUI_SetFont(&GUI_Font24B_ASCII);
   \   00000058   D8009FE5           LDR      R0,??InitTDUGUI_1+0x10  ;; GUI_Font24B_ASCII
   \   0000005C   ........           _BLF     GUI_SetFont,??GUI_SetFont??rA
     61          	GUI_DispStringHCenterAt("Boot loader",LCDXSize/2,120);
   \   00000060   7820A0E3           MOV      R2,#+120
   \   00000064   BC009FE5           LDR      R0,??InitTDUGUI_1  ;; LCDXSize
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   0210A0E3           MOV      R1,#+2
   \   00000070   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000074   C0009FE5           LDR      R0,??InitTDUGUI_1+0x14  ;; `?<Constant "Boot loader">`
   \   00000078   ........           _BLF     GUI_DispStringHCenterAt,??GUI_DispStringHCenterAt??rA
     62          	GUI_SetFont(&GUI_Font16B_ASCII);
   \   0000007C   BC009FE5           LDR      R0,??InitTDUGUI_1+0x18  ;; GUI_Font16B_ASCII
   \   00000080   ........           _BLF     GUI_SetFont,??GUI_SetFont??rA
     63          	char Buf[80];
     64          	sprintf(Buf,"Revision:  %s.",RevisionName[GlobalDeviceHWId]);
   \   00000084   B8009FE5           LDR      R0,??InitTDUGUI_1+0x1C  ;; GlobalDeviceHWId
   \   00000088   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000008C   0A10A0E3           MOV      R1,#+10
   \   00000090   B0209FE5           LDR      R2,??InitTDUGUI_1+0x20  ;; RevisionName
   \   00000094   912022E0           MLA      R2,R1,R0,R2
   \   00000098   AC109FE5           LDR      R1,??InitTDUGUI_1+0x24  ;; `?<Constant "Revision:  %s.">`
   \   0000009C   0D00B0E1           MOVS     R0,SP
   \   000000A0   ........           _BLF     sprintf,??sprintf??rA
     65          	GUI_DispStringAt(Buf,1,200);
   \   000000A4   C820A0E3           MOV      R2,#+200
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   0D00B0E1           MOVS     R0,SP
   \   000000B0   ........           _BLF     GUI_DispStringAt,??GUI_DispStringAt??rA
     66          	sprintf(Buf,"Version:%i.%i.%i.%i",VERSION_PROD_NO,VERSION_PACKET,VERSION_BOOT_NEW_FUNC,VERSION_BOOT_BUG_FIX);
   \   000000B4   0100A0E3           MOV      R0,#+1
   \   000000B8   01002DE9           PUSH     {R0}
   \   000000BC   0000A0E3           MOV      R0,#+0
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   0630A0E3           MOV      R3,#+6
   \   000000C8   0220A0E3           MOV      R2,#+2
   \   000000CC   7C109FE5           LDR      R1,??InitTDUGUI_1+0x28  ;; `?<Constant "Version:%i.%i.%i.%i">`
   \   000000D0   08008DE2           ADD      R0,SP,#+8
   \   000000D4   ........           _BLF     sprintf,??sprintf??rA
   \   000000D8   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
     67          	GUI_DispStringAt(Buf,1,220);
   \   000000DC   DC20A0E3           MOV      R2,#+220
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   0D00B0E1           MOVS     R0,SP
   \   000000E8   ........           _BLF     GUI_DispStringAt,??GUI_DispStringAt??rA
     68            //OS_Delay(1000);
     69          	OS_CREATETASK(&GUITaskHandle, "GUI_TASK", GUI_Task,          10, GUITaskStack);		//Background window update
   \   000000EC   0200A0E3           MOV      R0,#+2
   \   000000F0   01002DE9           PUSH     {R0}
   \   000000F4   400CA0E3           MOV      R0,#+16384
   \   000000F8   01002DE9           PUSH     {R0}
   \   000000FC   50009FE5           LDR      R0,??InitTDUGUI_1+0x2C  ;; GUITaskStack
   \   00000100   01002DE9           PUSH     {R0}
   \   00000104   4C309FE5           LDR      R3,??InitTDUGUI_1+0x30  ;; ??GUI_Task
   \   00000108   0A20A0E3           MOV      R2,#+10
   \   0000010C   48109FE5           LDR      R1,??InitTDUGUI_1+0x34  ;; `?<Constant "GUI_TASK">`
   \   00000110   48009FE5           LDR      R0,??InitTDUGUI_1+0x38  ;; GUITaskHandle
   \   00000114   ........           _BLF     OS_CreateTask_DP,??OS_CreateTask_DP??rA
   \   00000118   0CD08DE2           ADD      SP,SP,#+12       ;; stack cleaning
     70          }
   \   0000011C   50D08DE2           ADD      SP,SP,#+80       ;; stack cleaning
   \   00000120   0040BDE8           POP      {LR}
   \   00000124   1EFF2FE1           BX       LR               ;; return
   \                     ??InitTDUGUI_1:
   \   00000128   ........           DC32     LCDXSize
   \   0000012C   ........           DC32     LCDYSize
   \   00000130   D3D3D300           DC32     0xd3d3d3
   \   00000134   ........           DC32     bmAriston_logo2
   \   00000138   ........           DC32     GUI_Font24B_ASCII
   \   0000013C   ........           DC32     `?<Constant "Boot loader">`
   \   00000140   ........           DC32     GUI_Font16B_ASCII
   \   00000144   ........           DC32     GlobalDeviceHWId
   \   00000148   ........           DC32     RevisionName
   \   0000014C   ........           DC32     `?<Constant "Revision:  %s.">`
   \   00000150   ........           DC32     `?<Constant "Version:%i.%i.%i.%i">`
   \   00000154   ........           DC32     GUITaskStack
   \   00000158   ........           DC32     ??GUI_Task
   \   0000015C   ........           DC32     `?<Constant "GUI_TASK">`
   \   00000160   ........           DC32     GUITaskHandle

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for RevisionName>`:
   \   00000000   5443555F5231       DC8 "TCU_R1"
   \              00          
   \   00000007   000000             DC8 0, 0, 0
   \   0000000A   5443555F5232       DC8 "TCU_R2"
   \              00          
   \   00000011   000000             DC8 0, 0, 0
   \   00000014   5444555F5231       DC8 "TDU_R1"
   \              00          
   \   0000001B   000000             DC8 0, 0, 0
   \   0000001E   5444555F5232       DC8 "TDU_R2"
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Boot loader">`:
   \   00000000   426F6F74206C       DC8 "Boot loader"
   \              6F6164657200

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Revision:  %s.">`:
   \   00000000   526576697369       DC8 "Revision:  %s."
   \              6F6E3A202025
   \              732E00      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Version:%i.%i.%i.%i">`:
   \   00000000   56657273696F       DC8 "Version:%i.%i.%i.%i"
   \              6E3A25692E25
   \              692E25692E25
   \              6900        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "GUI_TASK">`:
   \   00000000   4755495F5441       DC8 "GUI_TASK"
   \              534B00      
   \   00000009   000000             DC8 0, 0, 0
     71          

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     GUI_Task()       4
     InitTDUGUI()    96


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     GUITaskHandle                     68
     GUITaskStack                   16384
     RevisionName                      40
     GUI_Task()                        16
     LCDXSize                           4
     LCDYSize                           4
     InitTDUGUI()                     356
     ?<Initializer for RevisionName>
                                       40
     ?<Constant "Boot loader">         12
     ?<Constant "Revision:  %s.">      16
     ?<Constant "Version:%i.%i.%i.%i">
                                       20
     ?<Constant "GUI_TASK">            12
      Others                          236

 
    584 bytes in segment CODE
     60 bytes in segment DATA_C
     40 bytes in segment DATA_I
     40 bytes in segment DATA_ID
 16 460 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
    372 bytes of CODE  memory (+ 236 bytes shared)
    100 bytes of CONST memory
 16 500 bytes of DATA  memory

Errors: none
Warnings: none
