##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               13/Sep/2016  09:47:28 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\VMShare\working\trunk\TXU\CStartup\time.c         #
#    Command line    =  E:\VMShare\working\trunk\TXU\CStartup\time.c --fpu   #
#                       None -D OS_LIBMODE_DP -D OS_RAMVECT=0 -D             #
#                       CPU_S3C2410 -D OS_UART=1 -D ANBOOTLOADER -D          #
#                       __ARM_LIBRARY__ -lCN E:\VMShare\working\trunk\TXU\Ta #
#                       rgetDebug\List\ -o E:\VMShare\working\trunk\TXU\Targ #
#                       etDebug\Obj\ -s2 --no_cse --no_unroll --no_inline    #
#                       --no_code_motion --no_tbaa --no_clustering           #
#                       --no_scheduling --debug --cpu_mode arm --endian      #
#                       little --cpu ARM920T --stack_align 4 --interwork -e  #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8f.h" -I                        #
#                       E:\VMShare\working\trunk\TXU\GUI\CORE\ -I            #
#                       E:\VMShare\working\trunk\TXU\GUI\WM\ -I              #
#                       E:\VMShare\working\trunk\TXU\GUI\WIDGET\ -I          #
#                       E:\VMShare\working\trunk\TXU\CONFIG\ -I              #
#                       E:\VMShare\working\trunk\TXU\INC\ -I                 #
#                       E:\VMShare\working\trunk\TXU\..\SHARED\INC\ -I       #
#                       E:\VMShare\working\trunk\TXU\..\SHARED\SRC\ -I       #
#                       E:\VMShare\working\trunk\TXU\..\SHARED\LZO\MINILZO.1 #
#                       08\ -I "C:\Program Files (x86)\IAR Systems\Embedded  #
#                       Workbench 4.0\arm\INC\"                              #
#    List file       =  E:\VMShare\working\trunk\TXU\TargetDebug\List\time.l #
#                       st                                                   #
#    Object file     =  E:\VMShare\working\trunk\TXU\TargetDebug\Obj\time.r7 #
#                       9                                                    #
#                                                                            #
#                                                                            #
##############################################################################

E:\VMShare\working\trunk\TXU\CStartup\time.c
      1          /*******************
      2           *
      3           * Copyright 1998-2003 IAR Systems. All rights reserved.
      4           *
      5           * $Revision: 1.4 $
      6           *
      7           * This is the default implementation of the "time" function of the
      8           * standard library.  It can be replaced with a system-specific
      9           * implementation.
     10           *
     11           * The "time" function returns the current calendar time.  (time_t)-1
     12           * should be returned if the calendar time is not available.  The time
     13           * is measured in seconds since the first of January 1970.
     14           *
     15           ********************/
     16          
     17          #include <time.h>
     18          extern 	volatile time_t CurrentTime;
     19          #pragma module_name = "?time"
     20          

   \                                 In segment CODE, align 4, keep-with-next
     21          time_t (time)(time_t *t)
     22          {
   \                     time:
   \   00000000   0010B0E1           MOVS     R1,R0
     23            if (t)
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   0200000A           BEQ      ??time_0
     24            {
     25              *t = CurrentTime;
   \   0000000C   10009FE5           LDR      R0,??time_1      ;; CurrentTime
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   000081E5           STR      R0,[R1, #+0]
     26          
     27            }
     28            return CurrentTime;
   \                     ??time_0:
   \   00000018   04009FE5           LDR      R0,??time_1      ;; CurrentTime
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   1EFF2FE1           BX       LR               ;; return
   \                     ??time_1:
   \   00000024   ........           DC32     CurrentTime
     29          }

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     time         0


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     time             40
      Others           4

 
 44 bytes in segment CODE
 
 40 bytes of CODE memory (+ 4 bytes shared)

Errors: none
Warnings: none
