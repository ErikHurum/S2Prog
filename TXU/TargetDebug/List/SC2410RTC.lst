##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               19/Jan/2017  10:13:08 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\SC2410RTC.cpp                      #
#    Command line    =  D:\S2Prog\TXU\src\SC2410RTC.cpp --fpu None -D        #
#                       OS_LIBMODE_DP -D OS_RAMVECT=0 -D CPU_S3C2410 -D      #
#                       OS_UART=1 -D ANBOOTLOADER -D __ARM_LIBRARY__ -lCN    #
#                       D:\S2Prog\TXU\TargetDebug\List\ -o                   #
#                       D:\S2Prog\TXU\TargetDebug\Obj\ -s2 --no_cse          #
#                       --no_unroll --no_inline --no_code_motion --no_tbaa   #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --eec++ --dlib_config "C:\Program     #
#                       Files (x86)\IAR Systems\Embedded Workbench           #
#                       4.0\arm\LIB\dl4tpainl8f.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\MINILZO.108\ -I          #
#                       "C:\Program Files (x86)\IAR Systems\Embedded         #
#                       Workbench 4.0\arm\INC\"                              #
#    List file       =  D:\S2Prog\TXU\TargetDebug\List\SC2410RTC.lst         #
#    Object file     =  D:\S2Prog\TXU\TargetDebug\Obj\SC2410RTC.r79          #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\SC2410RTC.cpp
      1          #include "RTOS.h"
      2          #include "def.h"
      3          #include "2410addr.h"
      4          #include <time.h>
      5          extern 	volatile time_t CurrentTime;

   \                                 In segment DATA_Z, align 4, align-sorted
      6          OS_RSEMA RTCSema;
   \                     RTCSema:
   \   00000000                      DS8 20

   \                                 In segment CODE, align 4, keep-with-next
      7          U8 IntToBCD(int IntVal)
      8          {
   \                     ??IntToBCD:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0020B0E1           MOVS     R2,R0
      9          	return((IntVal/10) << 4) + (IntVal % 10 );
   \   00000008   0200B0E1           MOVS     R0,R2
   \   0000000C   0A10A0E3           MOV      R1,#+10
   \   00000010   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000014   0130B0E1           MOVS     R3,R1
   \   00000018   0200B0E1           MOVS     R0,R2
   \   0000001C   0A10A0E3           MOV      R1,#+10
   \   00000020   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000024   030290E0           ADDS     R0,R0,R3, LSL #+4
   \   00000028   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000002C   0040BDE8           POP      {LR}
   \   00000030   1EFF2FE1           BX       LR               ;; return
     10          }
     11          
     12          //************************[ Rtc_Init ]*********************************

   \                                 In segment CODE, align 4, keep-with-next
     13          void SetRTC(time_t NewTime)
     14          {
   \                     ??SetRTC:
   \   00000000   11402DE9           PUSH     {R0,R4,LR}
     15          	struct tm *tBuf = localtime((const time_t*)&NewTime);
   \   00000004   0D00B0E1           MOVS     R0,SP
   \   00000008   ........           _BLF     localtime,??localtime??rA
   \   0000000C   0040B0E1           MOVS     R4,R0
     16          
     17            // hkim
     18            OS_IncDI();
   \   00000010   ........           LDR      R0,??DataTable19  ;; OS_Counters + 1
   \   00000014   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000018   F00010E3           TST      R0,#0xF0
   \   0000001C   0100000A           BEQ      ??SetRTC_1
   \   00000020   9900A0E3           MOV      R0,#+153
   \   00000024   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??SetRTC_1:
   \   00000028   ........           _BLF     OS_DisableInt,??OS_DisableInt??rA
   \   0000002C   ........           LDR      R0,??DataTable19  ;; OS_Counters + 1
   \   00000030   ........           LDR      R1,??DataTable19  ;; OS_Counters + 1
   \   00000034   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000038   011091E2           ADDS     R1,R1,#+1
   \   0000003C   0010C0E5           STRB     R1,[R0, #+0]
     19          	CurrentTime = NewTime;
   \   00000040   ........           LDR      R0,??DataTable16  ;; CurrentTime
   \   00000044   00109DE5           LDR      R1,[SP, #+0]
   \   00000048   001080E5           STR      R1,[R0, #+0]
     20            OS_DecRI();
   \   0000004C   ........           LDR      R0,??DataTable19  ;; OS_Counters + 1
   \   00000050   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000054   F00010E3           TST      R0,#0xF0
   \   00000058   0100000A           BEQ      ??SetRTC_2
   \   0000005C   9900A0E3           MOV      R0,#+153
   \   00000060   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??SetRTC_2:
   \   00000064   ........           LDR      R0,??DataTable19  ;; OS_Counters + 1
   \   00000068   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000006C   010050E2           SUBS     R0,R0,#+1
   \   00000070   ........           LDR      R1,??DataTable19  ;; OS_Counters + 1
   \   00000074   0000C1E5           STRB     R0,[R1, #+0]
   \   00000078   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0000001A           BNE      ??SetRTC_3
   \   00000084   ........           _BLF     OS_EnableInt,??OS_EnableInt??rA
     21          	OS_Use(&RTCSema);
   \                     ??SetRTC_3:
   \   00000088   ........           LDR      R0,??DataTable21  ;; RTCSema
   \   0000008C   ........           _BLF     OS_Use,??OS_Use??rA
     22          	rRTCCON  = 0x1;						 //No reset, Merge BCD counters, 1/32768, RTC Control enable
   \   00000090   4000A0E3           MOV      R0,#+64
   \   00000094   570480E3           ORR      R0,R0,#0x57000000
   \   00000098   0110A0E3           MOV      R1,#+1
   \   0000009C   0010C0E5           STRB     R1,[R0, #+0]
     23          
     24          	rBCDYEAR = IntToBCD(tBuf->tm_year % 100);
   \   000000A0   140094E5           LDR      R0,[R4, #+20]
   \   000000A4   6410A0E3           MOV      R1,#+100
   \   000000A8   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000AC   ........           BL       ??IntToBCD
   \   000000B0   8810A0E3           MOV      R1,#+136
   \   000000B4   571481E3           ORR      R1,R1,#0x57000000
   \   000000B8   0000C1E5           STRB     R0,[R1, #+0]
     25          	rBCDMON  = IntToBCD(tBuf->tm_mon+1);
   \   000000BC   100094E5           LDR      R0,[R4, #+16]
   \   000000C0   010090E2           ADDS     R0,R0,#+1
   \   000000C4   ........           BL       ??IntToBCD
   \   000000C8   8410A0E3           MOV      R1,#+132
   \   000000CC   571481E3           ORR      R1,R1,#0x57000000
   \   000000D0   0000C1E5           STRB     R0,[R1, #+0]
     26          	rBCDDATE = IntToBCD(tBuf->tm_mday);
   \   000000D4   0C0094E5           LDR      R0,[R4, #+12]
   \   000000D8   ........           BL       ??IntToBCD
   \   000000DC   7C10A0E3           MOV      R1,#+124
   \   000000E0   571481E3           ORR      R1,R1,#0x57000000
   \   000000E4   0000C1E5           STRB     R0,[R1, #+0]
     27          	rBCDDAY  = IntToBCD(tBuf->tm_wday);				//SUN:1 MON:2 TUE:3 WED:4 THU:5 FRI:6 SAT:7
   \   000000E8   180094E5           LDR      R0,[R4, #+24]
   \   000000EC   ........           BL       ??IntToBCD
   \   000000F0   8010A0E3           MOV      R1,#+128
   \   000000F4   571481E3           ORR      R1,R1,#0x57000000
   \   000000F8   0000C1E5           STRB     R0,[R1, #+0]
     28          	rBCDHOUR = IntToBCD(tBuf->tm_hour);
   \   000000FC   080094E5           LDR      R0,[R4, #+8]
   \   00000100   ........           BL       ??IntToBCD
   \   00000104   7810A0E3           MOV      R1,#+120
   \   00000108   571481E3           ORR      R1,R1,#0x57000000
   \   0000010C   0000C1E5           STRB     R0,[R1, #+0]
     29          	rBCDMIN  = IntToBCD(tBuf->tm_min);
   \   00000110   040094E5           LDR      R0,[R4, #+4]
   \   00000114   ........           BL       ??IntToBCD
   \   00000118   7410A0E3           MOV      R1,#+116
   \   0000011C   571481E3           ORR      R1,R1,#0x57000000
   \   00000120   0000C1E5           STRB     R0,[R1, #+0]
     30          	rBCDSEC  = IntToBCD(tBuf->tm_sec);
   \   00000124   000094E5           LDR      R0,[R4, #+0]
   \   00000128   ........           BL       ??IntToBCD
   \   0000012C   7010A0E3           MOV      R1,#+112
   \   00000130   571481E3           ORR      R1,R1,#0x57000000
   \   00000134   0000C1E5           STRB     R0,[R1, #+0]
     31          	rRTCCON  = 0x0;							//No reset, Merge BCD counters, 1/32768, RTC Control disable
   \   00000138   4000A0E3           MOV      R0,#+64
   \   0000013C   570480E3           ORR      R0,R0,#0x57000000
   \   00000140   0010A0E3           MOV      R1,#+0
   \   00000144   0010C0E5           STRB     R1,[R0, #+0]
     32          	OS_Unuse(&RTCSema);
   \   00000148   ........           LDR      R0,??DataTable21  ;; RTCSema
   \   0000014C   ........           _BLF     OS_Unuse,??OS_Unuse??rA
     33          }
   \   00000150   04D08DE2           ADD      SP,SP,#+4        ;; stack cleaning
   \   00000154   1040BDE8           POP      {R4,LR}
   \   00000158   1EFF2FE1           BX       LR               ;; return
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          U8 BCD_to_Int(int BCDVal)
     36          {
     37          	return (10*(BCDVal>>4) + (BCDVal & 0xF));
   \                     ??BCD_to_Int:
   \   00000000   4012B0E1           ASRS     R1,R0,#+4
   \   00000004   0A20A0E3           MOV      R2,#+10
   \   00000008   0F0010E2           ANDS     R0,R0,#0xF
   \   0000000C   920120E0           MLA      R0,R2,R1,R0
   \   00000010   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000014   1EFF2FE1           BX       LR               ;; return
     38          }
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          void GetRTC(void)
     41          {
   \                     ??GetRTC:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
     42          	struct tm tBuf;
     43            U8 Year,Month,Date,Hour,Minute,Seconds;
     44          	OS_Use(&RTCSema);
   \   00000008   ........           LDR      R0,??DataTable21  ;; RTCSema
   \   0000000C   ........           _BLF     OS_Use,??OS_Use??rA
     45            rRTCCON  = 0x1;
   \   00000010   4000A0E3           MOV      R0,#+64
   \   00000014   570480E3           ORR      R0,R0,#0x57000000
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   0010C0E5           STRB     R1,[R0, #+0]
     46          	do{
     47          		Seconds = rBCDSEC;
   \                     ??GetRTC_1:
   \   00000020   7000A0E3           MOV      R0,#+112
   \   00000024   570480E3           ORR      R0,R0,#0x57000000
   \   00000028   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000002C   0090B0E1           MOVS     R9,R0
     48          		Minute  = rBCDMIN;
   \   00000030   7400A0E3           MOV      R0,#+116
   \   00000034   570480E3           ORR      R0,R0,#0x57000000
   \   00000038   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000003C   0080B0E1           MOVS     R8,R0
     49          		Hour		= rBCDHOUR;
   \   00000040   7800A0E3           MOV      R0,#+120
   \   00000044   570480E3           ORR      R0,R0,#0x57000000
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   0070B0E1           MOVS     R7,R0
     50          		Date		= rBCDDATE;
   \   00000050   7C00A0E3           MOV      R0,#+124
   \   00000054   570480E3           ORR      R0,R0,#0x57000000
   \   00000058   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000005C   0060B0E1           MOVS     R6,R0
     51          		Month		= rBCDMON;
   \   00000060   8400A0E3           MOV      R0,#+132
   \   00000064   570480E3           ORR      R0,R0,#0x57000000
   \   00000068   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000006C   0050B0E1           MOVS     R5,R0
     52          		Year    = rBCDYEAR;
   \   00000070   8800A0E3           MOV      R0,#+136
   \   00000074   570480E3           ORR      R0,R0,#0x57000000
   \   00000078   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000007C   0040B0E1           MOVS     R4,R0
     53          	}while(!Seconds);
   \   00000080   FF9019E2           ANDS     R9,R9,#0xFF      ;; Zero extend
   \   00000084   000059E3           CMP      R9,#+0
   \   00000088   E4FFFF0A           BEQ      ??GetRTC_1
     54            rRTCCON  = 0x0;
   \   0000008C   4000A0E3           MOV      R0,#+64
   \   00000090   570480E3           ORR      R0,R0,#0x57000000
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   0010C0E5           STRB     R1,[R0, #+0]
     55          	OS_Unuse(&RTCSema);
   \   0000009C   ........           LDR      R0,??DataTable21  ;; RTCSema
   \   000000A0   ........           _BLF     OS_Unuse,??OS_Unuse??rA
     56          
     57          	tBuf.tm_sec  = BCD_to_Int(Seconds);
   \   000000A4   0900B0E1           MOVS     R0,R9
   \   000000A8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000AC   ........           BL       ??BCD_to_Int
   \   000000B0   00008DE5           STR      R0,[SP, #+0]
     58          	tBuf.tm_min  = BCD_to_Int(Minute );
   \   000000B4   0800B0E1           MOVS     R0,R8
   \   000000B8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000BC   ........           BL       ??BCD_to_Int
   \   000000C0   04008DE5           STR      R0,[SP, #+4]
     59          	tBuf.tm_hour = BCD_to_Int(Hour   );
   \   000000C4   0700B0E1           MOVS     R0,R7
   \   000000C8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000CC   ........           BL       ??BCD_to_Int
   \   000000D0   08008DE5           STR      R0,[SP, #+8]
     60          	tBuf.tm_mday = BCD_to_Int(Date   );
   \   000000D4   0600B0E1           MOVS     R0,R6
   \   000000D8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000DC   ........           BL       ??BCD_to_Int
   \   000000E0   0C008DE5           STR      R0,[SP, #+12]
     61          	tBuf.tm_mon  = BCD_to_Int(Month  )-1;
   \   000000E4   0500B0E1           MOVS     R0,R5
   \   000000E8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000EC   ........           BL       ??BCD_to_Int
   \   000000F0   010050E2           SUBS     R0,R0,#+1
   \   000000F4   10008DE5           STR      R0,[SP, #+16]
     62          	tBuf.tm_year = BCD_to_Int(Year   )+100;
   \   000000F8   0400B0E1           MOVS     R0,R4
   \   000000FC   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000100   ........           BL       ??BCD_to_Int
   \   00000104   640090E2           ADDS     R0,R0,#+100
   \   00000108   14008DE5           STR      R0,[SP, #+20]
     63            tBuf.tm_isdst= 0;
   \   0000010C   0010A0E3           MOV      R1,#+0
   \   00000110   20108DE5           STR      R1,[SP, #+32]
     64          
     65          	time_t NewTime = mktime(&tBuf);
   \   00000114   0D00B0E1           MOVS     R0,SP
   \   00000118   ........           _BLF     mktime,??mktime??rA
   \   0000011C   00A0B0E1           MOVS     R10,R0
     66          
     67            if ( int(NewTime)!=-1 ) {  
   \   00000120   01007AE3           CMN      R10,#+1
   \   00000124   0600000A           BEQ      ??GetRTC_2
     68              if ( NewTime < 0x4B5FE6A7 || NewTime < 0 ) { // 27 Jan 2010
   \   00000128   ........           LDR      R0,??DataTable23  ;; 0x4b5fe6a7
   \   0000012C   00005AE1           CMP      R10,R0
   \   00000130   010000BA           BLT      ??GetRTC_3
   \   00000134   00005AE3           CMP      R10,#+0
   \   00000138   0100005A           BPL      ??GetRTC_2
     69                NewTime = 0x4B5FE6A7;
   \                     ??GetRTC_3:
   \   0000013C   ........           LDR      R0,??DataTable23  ;; 0x4b5fe6a7
   \   00000140   00A0B0E1           MOVS     R10,R0
     70              }
     71            }
     72          
     73            // hkim
     74            OS_IncDI();
   \                     ??GetRTC_2:
   \   00000144   ........           LDR      R0,??DataTable19  ;; OS_Counters + 1
   \   00000148   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000014C   F00010E3           TST      R0,#0xF0
   \   00000150   0100000A           BEQ      ??GetRTC_4
   \   00000154   9900A0E3           MOV      R0,#+153
   \   00000158   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??GetRTC_4:
   \   0000015C   ........           _BLF     OS_DisableInt,??OS_DisableInt??rA
   \   00000160   ........           LDR      R0,??DataTable19  ;; OS_Counters + 1
   \   00000164   ........           LDR      R1,??DataTable19  ;; OS_Counters + 1
   \   00000168   0010D1E5           LDRB     R1,[R1, #+0]
   \   0000016C   011091E2           ADDS     R1,R1,#+1
   \   00000170   0010C0E5           STRB     R1,[R0, #+0]
     75            CurrentTime = NewTime;
   \   00000174   ........           LDR      R0,??DataTable16  ;; CurrentTime
   \   00000178   00A080E5           STR      R10,[R0, #+0]
     76            OS_DecRI();
   \   0000017C   ........           LDR      R0,??DataTable19  ;; OS_Counters + 1
   \   00000180   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000184   F00010E3           TST      R0,#0xF0
   \   00000188   0100000A           BEQ      ??GetRTC_5
   \   0000018C   9900A0E3           MOV      R0,#+153
   \   00000190   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??GetRTC_5:
   \   00000194   ........           LDR      R0,??DataTable19  ;; OS_Counters + 1
   \   00000198   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000019C   010050E2           SUBS     R0,R0,#+1
   \   000001A0   ........           LDR      R1,??DataTable19  ;; OS_Counters + 1
   \   000001A4   0000C1E5           STRB     R0,[R1, #+0]
   \   000001A8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   0000001A           BNE      ??GetRTC_6
   \   000001B4   ........           _BLF     OS_EnableInt,??OS_EnableInt??rA
     77          }
   \                     ??GetRTC_6:
   \   000001B8   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000001BC   F047BDE8           POP      {R4-R10,LR}
   \   000001C0   1EFF2FE1           BX       LR               ;; return
     78          
     79          extern "C" {

   \                                 In segment CODE, align 4, keep-with-next
     80          time_t GetRTC2(void)
     81          {
   \                     GetRTC2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
     82            struct tm tBuf;
     83          
     84            U8 Year,Month,Date,Hour,Minute,Seconds;
     85            time_t NewTime;
     86          
     87            OS_Use(&RTCSema);
   \   00000008   ........           LDR      R0,??DataTable21  ;; RTCSema
   \   0000000C   ........           _BLF     OS_Use,??OS_Use??rA
     88            rRTCCON  = 0x1;
   \   00000010   4000A0E3           MOV      R0,#+64
   \   00000014   570480E3           ORR      R0,R0,#0x57000000
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   0010C0E5           STRB     R1,[R0, #+0]
     89          	do{
     90          		Seconds = rBCDSEC;
   \                     ??GetRTC2_0:
   \   00000020   7000A0E3           MOV      R0,#+112
   \   00000024   570480E3           ORR      R0,R0,#0x57000000
   \   00000028   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000002C   0090B0E1           MOVS     R9,R0
     91          		Minute  = rBCDMIN;
   \   00000030   7400A0E3           MOV      R0,#+116
   \   00000034   570480E3           ORR      R0,R0,#0x57000000
   \   00000038   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000003C   0080B0E1           MOVS     R8,R0
     92          		Hour		= rBCDHOUR;
   \   00000040   7800A0E3           MOV      R0,#+120
   \   00000044   570480E3           ORR      R0,R0,#0x57000000
   \   00000048   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000004C   0070B0E1           MOVS     R7,R0
     93              Date		= rBCDDATE;
   \   00000050   7C00A0E3           MOV      R0,#+124
   \   00000054   570480E3           ORR      R0,R0,#0x57000000
   \   00000058   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000005C   0060B0E1           MOVS     R6,R0
     94          		Month		= rBCDMON;
   \   00000060   8400A0E3           MOV      R0,#+132
   \   00000064   570480E3           ORR      R0,R0,#0x57000000
   \   00000068   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000006C   0050B0E1           MOVS     R5,R0
     95          		Year    = rBCDYEAR;
   \   00000070   8800A0E3           MOV      R0,#+136
   \   00000074   570480E3           ORR      R0,R0,#0x57000000
   \   00000078   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000007C   0040B0E1           MOVS     R4,R0
     96          	}while(!Seconds);
   \   00000080   FF9019E2           ANDS     R9,R9,#0xFF      ;; Zero extend
   \   00000084   000059E3           CMP      R9,#+0
   \   00000088   E4FFFF0A           BEQ      ??GetRTC2_0
     97            rRTCCON  = 0x0;
   \   0000008C   4000A0E3           MOV      R0,#+64
   \   00000090   570480E3           ORR      R0,R0,#0x57000000
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   0010C0E5           STRB     R1,[R0, #+0]
     98          	OS_Unuse(&RTCSema);
   \   0000009C   ........           LDR      R0,??DataTable21  ;; RTCSema
   \   000000A0   ........           _BLF     OS_Unuse,??OS_Unuse??rA
     99          	tBuf.tm_sec  = BCD_to_Int(Seconds);
   \   000000A4   0900B0E1           MOVS     R0,R9
   \   000000A8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000AC   ........           BL       ??BCD_to_Int
   \   000000B0   00008DE5           STR      R0,[SP, #+0]
    100          	tBuf.tm_min  = BCD_to_Int(Minute );
   \   000000B4   0800B0E1           MOVS     R0,R8
   \   000000B8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000BC   ........           BL       ??BCD_to_Int
   \   000000C0   04008DE5           STR      R0,[SP, #+4]
    101          	tBuf.tm_hour = BCD_to_Int(Hour   );
   \   000000C4   0700B0E1           MOVS     R0,R7
   \   000000C8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000CC   ........           BL       ??BCD_to_Int
   \   000000D0   08008DE5           STR      R0,[SP, #+8]
    102            tBuf.tm_mday = BCD_to_Int(Date   );
   \   000000D4   0600B0E1           MOVS     R0,R6
   \   000000D8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000DC   ........           BL       ??BCD_to_Int
   \   000000E0   0C008DE5           STR      R0,[SP, #+12]
    103          	tBuf.tm_mon  = BCD_to_Int(Month  )-1;
   \   000000E4   0500B0E1           MOVS     R0,R5
   \   000000E8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000EC   ........           BL       ??BCD_to_Int
   \   000000F0   010050E2           SUBS     R0,R0,#+1
   \   000000F4   10008DE5           STR      R0,[SP, #+16]
    104          	tBuf.tm_year = BCD_to_Int(Year   )+100;
   \   000000F8   0400B0E1           MOVS     R0,R4
   \   000000FC   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000100   ........           BL       ??BCD_to_Int
   \   00000104   640090E2           ADDS     R0,R0,#+100
   \   00000108   14008DE5           STR      R0,[SP, #+20]
    105          	tBuf.tm_isdst= 0; 
   \   0000010C   0010A0E3           MOV      R1,#+0
   \   00000110   20108DE5           STR      R1,[SP, #+32]
    106          
    107            NewTime = mktime(&tBuf);
   \   00000114   0D00B0E1           MOVS     R0,SP
   \   00000118   ........           _BLF     mktime,??mktime??rA
   \   0000011C   00A0B0E1           MOVS     R10,R0
    108          	if ( int(NewTime)!=-1 ) {  
   \   00000120   01007AE3           CMN      R10,#+1
   \   00000124   0600000A           BEQ      ??GetRTC2_1
    109          		if ( NewTime < 0x4B5FE6A7 || NewTime < 0 ) { // 27 Jan 2010
   \   00000128   ........           LDR      R0,??DataTable23  ;; 0x4b5fe6a7
   \   0000012C   00005AE1           CMP      R10,R0
   \   00000130   010000BA           BLT      ??GetRTC2_2
   \   00000134   00005AE3           CMP      R10,#+0
   \   00000138   0100005A           BPL      ??GetRTC2_1
    110          			NewTime = 0x4B5FE6A7;
   \                     ??GetRTC2_2:
   \   0000013C   ........           LDR      R0,??DataTable23  ;; 0x4b5fe6a7
   \   00000140   00A0B0E1           MOVS     R10,R0
    111                          }
    112          	}
    113            return NewTime;
   \                     ??GetRTC2_1:
   \   00000144   0A00B0E1           MOVS     R0,R10
   \   00000148   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   0000014C   F047BDE8           POP      {R4-R10,LR}
   \   00000150   1EFF2FE1           BX       LR               ;; return
    114          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     CurrentTime

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     OS_Counters + 1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     RTCSema

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   A7E65F4B           DC32     0x4b5fe6a7
    115          }

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     BCD_to_Int(int)     0
     GetRTC()           68
     GetRTC2            68
     IntToBCD(int)       4
     SetRTC(long)       12


   Segment part sizes:

     Function/Label  Bytes
     --------------  -----
     RTCSema           20
     IntToBCD(int)     52
     SetRTC(long)     348
     BCD_to_Int(int)   24
     GetRTC()         452
     GetRTC2          340
     ??DataTable16      4
     ??DataTable19      4
     ??DataTable21      4
     ??DataTable23      4
      Others          128

 
 1 348 bytes in segment CODE
    20 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 1 232 bytes of CODE memory (+ 128 bytes shared)
    20 bytes of DATA memory

Errors: none
Warnings: none
