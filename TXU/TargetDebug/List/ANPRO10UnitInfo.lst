##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               19/Jan/2017  10:13:08 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\Shared\Src\ANPRO10UnitInfo.cpp             #
#    Command line    =  D:\S2Prog\Shared\Src\ANPRO10UnitInfo.cpp --fpu None  #
#                       -D OS_LIBMODE_DP -D OS_RAMVECT=0 -D CPU_S3C2410 -D   #
#                       OS_UART=1 -D ANBOOTLOADER -D __ARM_LIBRARY__ -lCN    #
#                       D:\S2Prog\TXU\TargetDebug\List\ -o                   #
#                       D:\S2Prog\TXU\TargetDebug\Obj\ -s2 --no_cse          #
#                       --no_unroll --no_inline --no_code_motion --no_tbaa   #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --eec++ --dlib_config "C:\Program     #
#                       Files (x86)\IAR Systems\Embedded Workbench           #
#                       4.0\arm\LIB\dl4tpainl8f.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\MINILZO.108\ -I          #
#                       "C:\Program Files (x86)\IAR Systems\Embedded         #
#                       Workbench 4.0\arm\INC\"                              #
#    List file       =  D:\S2Prog\TXU\TargetDebug\List\ANPRO10UnitInfo.lst   #
#    Object file     =  D:\S2Prog\TXU\TargetDebug\Obj\ANPRO10UnitInfo.r79    #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\Shared\Src\ANPRO10UnitInfo.cpp
      1          
      2          #ifdef ANBOOTLOADER
      3          	#include "RTOS.h"
      4          	#include "ANPro10Inc.h"
      5          #else
      6          	#include "TSNIncludes.h"
      7          	#pragma hdrstop
      8          	#ifdef BORLAND
      9          		#pragma package(smart_init)
     10          	#endif
     11          
     12          #endif
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          ANPRO10UnitInfo::ANPRO10UnitInfo(void)
     15          {
     16          #ifndef WIN32
     17          	pTask         = NULL;
   \                     ??ANPRO10UnitInfo:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   501080E5           STR      R1,[R0, #+80]
     18          #endif
     19          	ErrorStatus   = 0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   2C10C0E5           STRB     R1,[R0, #+44]
     20          	HasInfo       = false;
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0010C0E5           STRB     R1,[R0, #+0]
     21          	SignalHasInfo = false;
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0110C0E5           STRB     R1,[R0, #+1]
     22          	UnitID        =0;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   2910C0E5           STRB     R1,[R0, #+41]
     23          	UnitAdress    =0;
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   2A10C0E5           STRB     R1,[R0, #+42]
     24          	ProgramType   =0;	// 0 = Bootloader, 1 = Application
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   2B10C0E5           STRB     R1,[R0, #+43]
     25          	UpdateTime    = 0;
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   541080E5           STR      R1,[R0, #+84]
     26          	ErrorStatus   = FLASH_NO_ERROR;
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   2C10C0E5           STRB     R1,[R0, #+44]
     27          
     28          }
   \   00000048   1EFF2FE1           BX       LR               ;; return
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          void ANPRO10UnitInfo::Update_Unit_Info(ANPRO10_COMMAND_2001 *InfoStruct)
     31          {
   \                     ??Update_Unit_Info:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
     32          	UnitID        = InfoStruct->UnitID;
   \   0000000C   0400D5E5           LDRB     R0,[R5, #+4]
   \   00000010   2900C4E5           STRB     R0,[R4, #+41]
     33          	UnitAdress    = InfoStruct->UnitAdress;
   \   00000014   0500D5E5           LDRB     R0,[R5, #+5]
   \   00000018   2A00C4E5           STRB     R0,[R4, #+42]
     34          	ProgramType   = InfoStruct->ProgramType; // 0 = Bootloader, 1 = Application
   \   0000001C   0600D5E5           LDRB     R0,[R5, #+6]
   \   00000020   2B00C4E5           STRB     R0,[R4, #+43]
     35          
     36          	strcpy(SystemID,InfoStruct->SystemID);// #### 7 bytes for this??????
   \   00000024   071095E2           ADDS     R1,R5,#+7
   \   00000028   2D0094E2           ADDS     R0,R4,#+45
   \   0000002C   ........           _BLF     strcpy,??strcpy??rA
     37          	DataVersion                 = InfoStruct->DataVersion;
   \   00000030   1C00D5E5           LDRB     R0,[R5, #+28]
   \   00000034   1B10D5E5           LDRB     R1,[R5, #+27]
   \   00000038   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   0000003C   B204C4E1           STRH     R0,[R4, #+66]
     38          	ProgramVersion.Build        = InfoStruct->ProgramVersion.Build;
   \   00000040   2000D5E5           LDRB     R0,[R5, #+32]
   \   00000044   4700C4E5           STRB     R0,[R4, #+71]
     39          	ProgramVersion.NewFunctions = InfoStruct->ProgramVersion.NewFunctions;
   \   00000048   1F00D5E5           LDRB     R0,[R5, #+31]
   \   0000004C   4600C4E5           STRB     R0,[R4, #+70]
     40          	ProgramVersion.PacketFormat = InfoStruct->ProgramVersion.PacketFormat;
   \   00000050   1E00D5E5           LDRB     R0,[R5, #+30]
   \   00000054   4500C4E5           STRB     R0,[R4, #+69]
     41          	ProgramVersion.ProdNo       = InfoStruct->ProgramVersion.ProdNo;
   \   00000058   1D00D5E5           LDRB     R0,[R5, #+29]
   \   0000005C   4400C4E5           STRB     R0,[R4, #+68]
     42          	BootVersion.Build           = InfoStruct->BootVersion.Build;
   \   00000060   2400D5E5           LDRB     R0,[R5, #+36]
   \   00000064   4B00C4E5           STRB     R0,[R4, #+75]
     43          	BootVersion.NewFunctions    = InfoStruct->BootVersion.NewFunctions;
   \   00000068   2300D5E5           LDRB     R0,[R5, #+35]
   \   0000006C   4A00C4E5           STRB     R0,[R4, #+74]
     44          	BootVersion.PacketFormat    = InfoStruct->BootVersion.PacketFormat;
   \   00000070   2200D5E5           LDRB     R0,[R5, #+34]
   \   00000074   4900C4E5           STRB     R0,[R4, #+73]
     45          	BootVersion.ProdNo          = InfoStruct->BootVersion.ProdNo;
   \   00000078   2100D5E5           LDRB     R0,[R5, #+33]
   \   0000007C   4800C4E5           STRB     R0,[R4, #+72]
     46          	ProgrDate                   = InfoStruct->ProgrDate;
   \   00000080   2800D5E5           LDRB     R0,[R5, #+40]
   \   00000084   2710D5E5           LDRB     R1,[R5, #+39]
   \   00000088   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   0000008C   2610D5E5           LDRB     R1,[R5, #+38]
   \   00000090   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   00000094   2510D5E5           LDRB     R1,[R5, #+37]
   \   00000098   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   0000009C   4C0084E5           STR      R0,[R4, #+76]
     47          	UpdateTime                  = time(NULL);
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   ........           _BLF     time,??time??rA
   \   000000A8   540084E5           STR      R0,[R4, #+84]
     48          	LastOSErr                   = InfoStruct->LastOSError;
   \   000000AC   2900D5E5           LDRB     R0,[R5, #+41]
   \   000000B0   2A60D5E5           LDRB     R6,[R5, #+42]
   \   000000B4   2B70D5E5           LDRB     R7,[R5, #+43]
   \   000000B8   2C80D5E5           LDRB     R8,[R5, #+44]
   \   000000BC   0200C4E5           STRB     R0,[R4, #+2]
     49          	LastErrAddr                 = InfoStruct->LastErrAddress;
   \   000000C0   3000D5E5           LDRB     R0,[R5, #+48]
   \   000000C4   2F10D5E5           LDRB     R1,[R5, #+47]
   \   000000C8   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000000CC   2E10D5E5           LDRB     R1,[R5, #+46]
   \   000000D0   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000000D4   2D10D5E5           LDRB     R1,[R5, #+45]
   \   000000D8   000491E1           ORRS     R0,R1,R0, LSL #+8
   \   000000DC   040084E5           STR      R0,[R4, #+4]
     50          	FlashErrStatus              = InfoStruct->FlashErrorStatus;
   \   000000E0   3100D5E5           LDRB     R0,[R5, #+49]
   \   000000E4   3290D5E5           LDRB     R9,[R5, #+50]
   \   000000E8   33A0D5E5           LDRB     R10,[R5, #+51]
   \   000000EC   34B0D5E5           LDRB     R11,[R5, #+52]
   \   000000F0   0800C4E5           STRB     R0,[R4, #+8]
     51          	strncpy(LastOSErrTask,InfoStruct->LastOSErrorTask,0x20);
   \   000000F4   2020A0E3           MOV      R2,#+32
   \   000000F8   351095E2           ADDS     R1,R5,#+53
   \   000000FC   090094E2           ADDS     R0,R4,#+9
   \   00000100   ........           _BLF     strncpy,??strncpy??rA
     52          
     53          
     54          
     55          	HasInfo       = true;
   \   00000104   0100A0E3           MOV      R0,#+1
   \   00000108   0000C4E5           STRB     R0,[R4, #+0]
     56          #ifndef WIN32
     57          	if ( pTask && SignalHasInfo ) {
   \   0000010C   500094E5           LDR      R0,[R4, #+80]
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   0700000A           BEQ      ??Update_Unit_Info_1
   \   00000118   0100D4E5           LDRB     R0,[R4, #+1]
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   0400000A           BEQ      ??Update_Unit_Info_1
     58          		SignalHasInfo = false;
   \   00000124   0000A0E3           MOV      R0,#+0
   \   00000128   0100C4E5           STRB     R0,[R4, #+1]
     59          		OS_SignalEvent(SYSINFO_RECEIVED_EVENT,pTask);
   \   0000012C   501094E5           LDR      R1,[R4, #+80]
   \   00000130   0400A0E3           MOV      R0,#+4
   \   00000134   ........           _BLF     OS_SignalEvent,??OS_SignalEvent??rA
     60          	}
     61          #endif
     62          
     63          }
   \                     ??Update_Unit_Info_1:
   \   00000138   F04FBDE8           POP      {R4-R11,LR}
   \   0000013C   1EFF2FE1           BX       LR               ;; return
     64          
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          void ANPRO10UnitInfo::VersionControl(TSNUart *Port)
     67          {
     68          #if !defined(ANBOOTLOADER) && !defined(WIN32)
     69          	pTask = OS_GetpCurrentTask();
     70          	switch ( ProgramType ) {
     71          		case 0:// Bootloader
     72          			ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_FLASH_PROG,SectorProgStart,SectorProgEnd);
     73          			if ( ErrorStatus == FLASH_NO_ERROR ) {
     74          				ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_CONFIG,SectorConfigStart,SectorConfigEnd);
     75          				if ( ErrorStatus == FLASH_NO_ERROR ) {
     76          					ANPRO10_SendRestartTXU(Port,UnitAdress,UnitID);
     77          				}
     78          			}
     79          			break;
     80          		case 1:
     81          			{
     82          				if ( memcmp(&MyProgramVersion,&ProgramVersion,sizeof(ProgramVersionInfo) ) ) {
     83          					ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_FLASH_PROG,SectorProgStart,SectorProgEnd);
     84          					if ( ErrorStatus == FLASH_NO_ERROR ) {
     85          						ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_CONFIG,SectorConfigStart,SectorConfigEnd);
     86          						if ( ErrorStatus == FLASH_NO_ERROR ) {
     87          							ANPRO10_SendRestartTXU(Port,UnitAdress,UnitID);
     88          						}
     89          					}
     90          				} else if ( strncmp(SystemID,PROProjectInfo::PROProjectInfoPtr->ProjectName.c_str(),ANPRO10_ID_LENGTH-1) || DataVersion != ConfigInfoPtr->PrevConfigDataRevision ) {
     91          					ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_CONFIG,SectorConfigStart,SectorConfigEnd);
     92          					if ( ErrorStatus == FLASH_NO_ERROR ) {
     93          						ANPRO10_SendRestartTXU(Port,UnitAdress,UnitID);
     94          					}
     95          				}
     96          
     97          			}
     98          			break;
     99          		case 2:
    100          			if ( strncmp(SystemID,PROProjectInfo::PROProjectInfoPtr->ProjectName.c_str(),ANPRO10_ID_LENGTH-1) || DataVersion != ConfigInfoPtr->PrevConfigDataRevision ) {
    101          				ErrorStatus = ANPRO10_SendFlashData(Port,UnitAdress,UnitID,CMD_SEND_CONFIG,SectorConfigStart,SectorConfigEnd);
    102          				if ( ErrorStatus == FLASH_NO_ERROR ) {
    103          					ANPRO10_SendRestartTXU(Port,UnitAdress,UnitID);
    104          				}
    105          			}
    106          			break;
    107          
    108          	}
    109          #endif
    110          }
   \                     ??VersionControl:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs ANPRO10UnitInfo &ANPRO10UnitInfo::new ANPRO10UnitInfo()
   \                     `??new ANPRO10UnitInfo`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5800A0E3           MOV      R0,#+88
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      `??new ANPRO10UnitInfo_1`
   \   00000014   ........           BL       ??ANPRO10UnitInfo
   \   00000018   000000EA           B        `??new ANPRO10UnitInfo_2`
   \                     `??new ANPRO10UnitInfo_1`:
   \   0000001C   0000A0E3           MOV      R0,#+0
   \                     `??new ANPRO10UnitInfo_2`:
   \   00000020   0040BDE8           POP      {LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
    111          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ANPRO10UnitInfo::ANPRO10UnitInfo()
                                        0
     ANPRO10UnitInfo::Update_Unit_Info(ANPRO10_COMMAND_2001 *)
                                       36
     ANPRO10UnitInfo::VersionControl(TSNUart *)
                                        0
     ANPRO10UnitInfo::new ANPRO10UnitInfo()
                                        4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     ANPRO10UnitInfo::ANPRO10UnitInfo()
                                      76
     ANPRO10UnitInfo::Update_Unit_Info(ANPRO10_COMMAND_2001 *)
                                     320
     ANPRO10UnitInfo::VersionControl(TSNUart *)
                                       4
     ANPRO10UnitInfo::new ANPRO10UnitInfo()
                                      40
      Others                          76

 
 516 bytes in segment CODE
 
 440 bytes of CODE memory (+ 76 bytes shared)

Errors: none
Warnings: none
