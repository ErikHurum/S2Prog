##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               19/Jan/2017  10:13:09 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\mx29LV160TB.cpp                    #
#    Command line    =  D:\S2Prog\TXU\src\mx29LV160TB.cpp --fpu None -D      #
#                       OS_LIBMODE_DP -D OS_RAMVECT=0 -D CPU_S3C2410 -D      #
#                       OS_UART=1 -D ANBOOTLOADER -D __ARM_LIBRARY__ -lCN    #
#                       D:\S2Prog\TXU\TargetDebug\List\ -o                   #
#                       D:\S2Prog\TXU\TargetDebug\Obj\ -s2 --no_cse          #
#                       --no_unroll --no_inline --no_code_motion --no_tbaa   #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --eec++ --dlib_config "C:\Program     #
#                       Files (x86)\IAR Systems\Embedded Workbench           #
#                       4.0\arm\LIB\dl4tpainl8f.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\MINILZO.108\ -I          #
#                       "C:\Program Files (x86)\IAR Systems\Embedded         #
#                       Workbench 4.0\arm\INC\"                              #
#    List file       =  D:\S2Prog\TXU\TargetDebug\List\mx29LV160TB.lst       #
#    Object file     =  D:\S2Prog\TXU\TargetDebug\Obj\mx29LV160TB.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\mx29LV160TB.cpp
      1          #include <string.h>
      2          #include "def.h"
      3          #include "option.h"
      4          #include "2410addr.h"
      5          #include "2410lib.h"
      6          #include "2410slib.h"
      7          #include "rtos.h"
      8          #include "mmu.h"
      9          #include "ANPRO10Const.h"
     10          #include "TSNConstants.h"
     11          #pragma diag_suppress=Pa082
     12          extern short CurrentDeviceId;
     13          

   \                                 In segment DATA_Z, align 4, align-sorted
     14          OS_RSEMA FlashSema;
   \                     FlashSema:
   \   00000000                      DS8 20
     15          
     16          
     17          bool MX29LV_ProgFlash(U32 realAddr, U32 data);
     18          bool MX29LV_EraseSector(int targetAddr);
     19          bool MX29LV_EraseSectors(int FirstSector, int LastSector);
     20          
     21          bool MX29LV_EraseChip(void);
     22          bool MX29LV_CheckId(void);
     23          bool BlankCheck(int targetAddr, int targetSize);
     24          bool WaitForFlash(void);
     25          
     26          
     27          #define FLASH_READY_MASK	0x600
     28          #define FLASH_MASK_Q7		0x800080
     29          #define FLASH_MASK_Q6		0x400040
     30          #define FLASH_MASK_Q5		0x200020
     31          #define FLASH_MASK_Q4		0x100010
     32          #define FLASH_MASK_Q3		0x080008
     33          #define FLASH_MASK_Q2		0x040004
     34          #define FLASH_MASK_Q1		0x020002
     35          #define FIRST_CMD		  	0xaa00aa
     36          #define SECOND_CMD			0x550055
     37          #define PROGRAM_CMD			0xa000a0
     38          #define ERASE_CMD		  	0x800080
     39          #define ERASE_ALL_CMD		0x100010
     40          #define ERASE_SEC_CMD		0x300030
     41          #define ID_CMD			 	0x900090
     42          #define RESET_CMD			0xf000f0
     43          

   \                                 In segment DATA_I, align 4, align-sorted
     44          U32 FlashBaseAddress = 0x04000000;
   \                     FlashBaseAddress:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for FlashBaseAddress>`
     45          
     46          // Because KS32C41000_A1 is connected to AM29LV800_A0,
     47          // the addr parameter has to be a WORD address, so called in AMD specification.
     48          
     49          #define _WR(addr,data)  *((volatile U32*)(FlashBaseAddress+addr))=(U32)data
     50          #define _RD(addr)       ( *((volatile U32*)(FlashBaseAddress+addr)) )
     51          //#define _WR(addr,data)  *((U32 *)(addr))=(U32)data
     52          //#define _RD(addr)       ( *((U32 *)(addr)) )
     53          #define _RESET()	_WR(0x0,0x00f000f0)
     54          
     55          

   \                                 In segment DATA_Z, align 4, align-sorted
     56          volatile U32 *firstAddr = (volatile U32 *)(FlashBaseAddress + (0x555 << 2)); //(ulong *)(FlashBaseAddress+0x1554);
   \                     firstAddr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     57          volatile U32 *secondAddr = (volatile U32 *)(FlashBaseAddress + (0x2aa << 2)); //	(ulong *)(FlashBaseAddress+0xaa8);
   \                     secondAddr:
   \   00000000                      DS8 4
     58          
     59          //static U32 downloadProgramSize  = 500000;
     60          
     61          #ifdef ANBOOTLOADER
     62          extern "C"
     63          {
     64          //extern char ProgramData[];
     65          //extern int ProgramDataSize;
     66          }
     67          #endif
     68          

   \                                 In segment DATA_I, align 4, align-sorted
     69          U32 SectorTable1[] = {  // MX29LVB 32bit satt opp i byte mode
   \                     SectorTable1:
   \   00000000                      DS8 148
   \   00000094                      REQUIRE `?<Initializer for SectorTable1>`
     70              0x00000000 << 1,
     71              0x00004000 << 1,
     72              0x00006000 << 1,
     73              0x00008000 << 1,
     74              0x00010000 << 1, // First program sector 5
     75              0x00020000 << 1,
     76              0x00030000 << 1,
     77              0x00040000 << 1,
     78              0x00050000 << 1,
     79              0x00060000 << 1,
     80              0x00070000 << 1,
     81              0x00080000 << 1,
     82              0x00090000 << 1,
     83              0x000a0000 << 1,
     84              0x000b0000 << 1,
     85              0x000c0000 << 1,
     86              0x000d0000 << 1,
     87              0x000e0000 << 1,
     88              0x000f0000 << 1,
     89              0x00100000 << 1,
     90              0x00110000 << 1,
     91              0x00120000 << 1,
     92              0x00130000 << 1, // Last program sector 22
     93              0x00140000 << 1, // First config sector 23
     94              0x00150000 << 1,
     95              0x00160000 << 1,
     96              0x00170000 << 1, // Last config sector 26
     97              0x00180000 << 1, // First config backup 27
     98              0x00190000 << 1,
     99              0x001a0000 << 1,
    100              0x001b0000 << 1, // Last config backup sector 30
    101              0x001c0000 << 1, // Setting start 31
    102              0x001d0000 << 1, // Setting end   32
    103              0x001e0000 << 1, // Setting start backup 33
    104              0x001f0000 << 1, // Setting end backup 34
    105              0x00200000 << 1, // TDU settings 35
    106              0x00210000 << 1, // TDU settings 36 ( Does not exist ), But will give correct Erase
    107          };
    108          

   \                                 In segment DATA_I, align 4, align-sorted
    109          U32 SectorTable2[] = {  // MX29LVB 32bit satt opp i byte mode
   \                     SectorTable2:
   \   00000000                      DS8 540
   \   0000021C                      REQUIRE `?<Initializer for SectorTable2>`
    110              0x00000000 << 1,
    111              0x00002000 << 1,
    112              0x00004000 << 1,
    113              0x00006000 << 1,
    114              0x00008000 << 1,
    115              0x0000A000 << 1,
    116              0x0000C000 << 1,
    117              0x0000E000 << 1,
    118              0x00010000 << 1,
    119              0x00020000 << 1, // First program sector 10
    120              0x00030000 << 1,
    121              0x00040000 << 1,
    122              0x00050000 << 1,
    123              0x00060000 << 1,
    124              0x00070000 << 1,
    125              0x00080000 << 1,
    126              0x00090000 << 1,
    127              0x000a0000 << 1,
    128              0x000b0000 << 1,
    129              0x000c0000 << 1,
    130              0x000d0000 << 1,
    131              0x000e0000 << 1,
    132              0x000f0000 << 1,
    133              0x00100000 << 1,
    134              0x00110000 << 1,
    135              0x00120000 << 1,  // Program End Sector 25
    136              0x00130000 << 1, // First config sector 26
    137              0x00140000 << 1,
    138              0x00150000 << 1,
    139              0x00160000 << 1, // Last config sector 29
    140              0x00170000 << 1, // First config backup 30
    141              0x00180000 << 1,
    142              0x00190000 << 1,
    143              0x001a0000 << 1, // Last config backup sector 33
    144              0x001b0000 << 1,  // Settings 1
    145              0x001c0000 << 1,
    146              0x001d0000 << 1,  // Settings 2
    147              0x001e0000 << 1,
    148              0x001f0000 << 1,  // 38, Local settings
    149              0x00200000 << 1,
    150              0x00210000 << 1,
    151              0x00220000 << 1,
    152              0x00230000 << 1,
    153              0x00240000 << 1,
    154              0x00250000 << 1,
    155              0x00260000 << 1,
    156              0x00270000 << 1,
    157              0x00280000 << 1,
    158              0x00290000 << 1,
    159              0x002a0000 << 1,
    160              0x002b0000 << 1,
    161              0x002c0000 << 1,
    162              0x002d0000 << 1,
    163              0x002e0000 << 1,
    164              0x002f0000 << 1,
    165              0x00300000 << 1,
    166              0x00310000 << 1,
    167              0x00320000 << 1,
    168              0x00330000 << 1,
    169              0x00340000 << 1,
    170              0x00350000 << 1,
    171              0x00360000 << 1,
    172              0x00370000 << 1,
    173              0x00380000 << 1,
    174              0x00390000 << 1,
    175              0x003a0000 << 1,
    176              0x003b0000 << 1,
    177              0x003c0000 << 1,
    178              0x003d0000 << 1,
    179              0x003e0000 << 1,
    180              0x003f0000 << 1,
    181              0x00400000 << 1,
    182              0x00410000 << 1,
    183              0x00420000 << 1,
    184              0x00430000 << 1,
    185              0x00440000 << 1,
    186              0x00450000 << 1,
    187              0x00460000 << 1,
    188              0x00470000 << 1,
    189              0x00480000 << 1,
    190              0x00490000 << 1,
    191              0x004a0000 << 1,
    192              0x004b0000 << 1,
    193              0x004c0000 << 1,
    194              0x004d0000 << 1,
    195              0x004e0000 << 1,
    196              0x004f0000 << 1,
    197              0x00500000 << 1,
    198              0x00510000 << 1,
    199              0x00520000 << 1,
    200              0x00530000 << 1,
    201              0x00540000 << 1,
    202              0x00550000 << 1,
    203              0x00560000 << 1,
    204              0x00570000 << 1,
    205              0x00580000 << 1,
    206              0x00590000 << 1,
    207              0x005a0000 << 1,
    208              0x005b0000 << 1,
    209              0x005c0000 << 1,
    210              0x005d0000 << 1,
    211              0x005e0000 << 1,
    212              0x005f0000 << 1,
    213              0x00600000 << 1,
    214              0x00610000 << 1,
    215              0x00620000 << 1,
    216              0x00630000 << 1,
    217              0x00640000 << 1,
    218              0x00650000 << 1,
    219              0x00660000 << 1,
    220              0x00670000 << 1,
    221              0x00680000 << 1,
    222              0x00690000 << 1,
    223              0x006a0000 << 1,
    224              0x006b0000 << 1,
    225              0x006c0000 << 1,
    226              0x006d0000 << 1,
    227              0x006e0000 << 1,
    228              0x006f0000 << 1,
    229              0x00700000 << 1,
    230              0x00710000 << 1,
    231              0x00720000 << 1,
    232              0x00730000 << 1,
    233              0x00740000 << 1,
    234              0x00750000 << 1,
    235              0x00760000 << 1,
    236              0x00770000 << 1,
    237              0x00780000 << 1,
    238              0x00790000 << 1,
    239              0x007a0000 << 1,
    240              0x007b0000 << 1,
    241              0x007c0000 << 1,
    242              0x007d0000 << 1,
    243              0x007e0000 << 1,
    244              0x007f0000 << 1,
    245          };
    246          
    247          //#pragma pack(1)

   \                                 In segment DATA_Z, align 1, align-sorted
    248          bool IdOk = false;
   \                     IdOk:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 4, align-sorted
    249          U32 *SectorTable = NULL;
   \                     SectorTable:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    250          U32 SectorBootStart = 0;
   \                     SectorBootStart:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    251          U32 SectorBootEnd = 0;
   \                     SectorBootEnd:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    252          U32 SectorProgStart = 0;
   \                     SectorProgStart:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    253          U32 SectorProgEnd = 0;
   \                     SectorProgEnd:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    254          U32 SectorConfigStart = 0;
   \                     SectorConfigStart:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    255          U32 SectorConfigEnd = 0;
   \                     SectorConfigEnd:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    256          U32 SectorConfigBakStart = 0;
   \                     SectorConfigBakStart:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    257          U32 SectorConfigBakEnd = 0;
   \                     SectorConfigBakEnd:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    258          U32 SectorSettings1Start = 0;
   \                     SectorSettings1Start:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    259          U32 SectorSettings1End = 0;
   \                     SectorSettings1End:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    260          U32 SectorSettings2Start = 0;
   \                     SectorSettings2Start:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    261          U32 SectorSettings2End = 0;
   \                     SectorSettings2End:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    262          U32 SectorLocalSettings = 0;
   \                     SectorLocalSettings:
   \   00000000                      DS8 4
    263          

   \                                 In segment CODE, align 4, keep-with-next
    264          void SetFlashSectorTable(void) {
    265              switch (GlobalDeviceHWId) {
   \                     ??SetFlashSectorTable:
   \   00000000   ........           LDR      R0,??DataTable27  ;; GlobalDeviceHWId
   \   00000004   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0100000A           BEQ      ??SetFlashSectorTable_1
   \   00000010   020050E3           CMP      R0,#+2
   \   00000014   2A00001A           BNE      ??SetFlashSectorTable_2
    266              case TCU_R1:
    267              case TDU_R1:
    268                  SectorTable = SectorTable1;
   \                     ??SetFlashSectorTable_1:
   \   00000018   ........           LDR      R0,??DataTable111  ;; SectorTable
   \   0000001C   ........           LDR      R1,??DataTable29  ;; SectorTable1
   \   00000020   001080E5           STR      R1,[R0, #+0]
    269                  SectorBootStart = SECTOR_BOOT_START_R1;
   \   00000024   44019FE5           LDR      R0,??SetFlashSectorTable_3  ;; SectorBootStart
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   001080E5           STR      R1,[R0, #+0]
    270                  SectorBootEnd = SECTOR_BOOT_END_R1;
   \   00000030   3C019FE5           LDR      R0,??SetFlashSectorTable_3+0x4  ;; SectorBootEnd
   \   00000034   0510A0E3           MOV      R1,#+5
   \   00000038   001080E5           STR      R1,[R0, #+0]
    271                  SectorProgStart = SECTOR_PROG_START_R1;
   \   0000003C   34019FE5           LDR      R0,??SetFlashSectorTable_3+0x8  ;; SectorProgStart
   \   00000040   0610A0E3           MOV      R1,#+6
   \   00000044   001080E5           STR      R1,[R0, #+0]
    272                  SectorProgEnd = SECTOR_PROG_END_R1;
   \   00000048   2C019FE5           LDR      R0,??SetFlashSectorTable_3+0xC  ;; SectorProgEnd
   \   0000004C   1610A0E3           MOV      R1,#+22
   \   00000050   001080E5           STR      R1,[R0, #+0]
    273                  SectorConfigStart = SECTOR_CONFIG_START_R1;
   \   00000054   24019FE5           LDR      R0,??SetFlashSectorTable_3+0x10  ;; SectorConfigStart
   \   00000058   1710A0E3           MOV      R1,#+23
   \   0000005C   001080E5           STR      R1,[R0, #+0]
    274                  SectorConfigEnd = SECTOR_CONFIG_END_R1;
   \   00000060   1C019FE5           LDR      R0,??SetFlashSectorTable_3+0x14  ;; SectorConfigEnd
   \   00000064   1A10A0E3           MOV      R1,#+26
   \   00000068   001080E5           STR      R1,[R0, #+0]
    275                  SectorConfigBakStart = SECTOR_CONFIG_BAK_START_R1;
   \   0000006C   14019FE5           LDR      R0,??SetFlashSectorTable_3+0x18  ;; SectorConfigBakStart
   \   00000070   1B10A0E3           MOV      R1,#+27
   \   00000074   001080E5           STR      R1,[R0, #+0]
    276                  SectorConfigBakEnd = SECTOR_CONFIG_BAK_END_R1;
   \   00000078   0C019FE5           LDR      R0,??SetFlashSectorTable_3+0x1C  ;; SectorConfigBakEnd
   \   0000007C   1E10A0E3           MOV      R1,#+30
   \   00000080   001080E5           STR      R1,[R0, #+0]
    277                  SectorSettings1Start = SECTOR_SETTINGS1_START_R1;
   \   00000084   04019FE5           LDR      R0,??SetFlashSectorTable_3+0x20  ;; SectorSettings1Start
   \   00000088   1F10A0E3           MOV      R1,#+31
   \   0000008C   001080E5           STR      R1,[R0, #+0]
    278                  SectorSettings1End = SECTOR_SETTINGS1_END_R1;
   \   00000090   FC009FE5           LDR      R0,??SetFlashSectorTable_3+0x24  ;; SectorSettings1End
   \   00000094   2010A0E3           MOV      R1,#+32
   \   00000098   001080E5           STR      R1,[R0, #+0]
    279                  SectorSettings2Start = SECTOR_SETTINGS2_START_R1;
   \   0000009C   F4009FE5           LDR      R0,??SetFlashSectorTable_3+0x28  ;; SectorSettings2Start
   \   000000A0   2110A0E3           MOV      R1,#+33
   \   000000A4   001080E5           STR      R1,[R0, #+0]
    280                  SectorSettings2End = SECTOR_SETTINGS2_END_R1;
   \   000000A8   EC009FE5           LDR      R0,??SetFlashSectorTable_3+0x2C  ;; SectorSettings2End
   \   000000AC   2210A0E3           MOV      R1,#+34
   \   000000B0   001080E5           STR      R1,[R0, #+0]
    281                  SectorLocalSettings = SECTOR_LOCAL_SETTINGS_START_R1;
   \   000000B4   E4009FE5           LDR      R0,??SetFlashSectorTable_3+0x30  ;; SectorLocalSettings
   \   000000B8   1510A0E3           MOV      R1,#+21
   \   000000BC   001080E5           STR      R1,[R0, #+0]
   \   000000C0   290000EA           B        ??SetFlashSectorTable_4
    282                  break;
    283              case TCU_R2:
    284              case TDU_R2:
    285              default:
    286                  SectorTable = SectorTable2;
   \                     ??SetFlashSectorTable_2:
   \   000000C4   ........           LDR      R0,??DataTable111  ;; SectorTable
   \   000000C8   ........           LDR      R1,??DataTable31  ;; SectorTable2
   \   000000CC   001080E5           STR      R1,[R0, #+0]
    287                  SectorBootStart = SECTOR_BOOT_START_R2;
   \   000000D0   98009FE5           LDR      R0,??SetFlashSectorTable_3  ;; SectorBootStart
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   001080E5           STR      R1,[R0, #+0]
    288                  SectorBootEnd = SECTOR_BOOT_END_R2;
   \   000000DC   90009FE5           LDR      R0,??SetFlashSectorTable_3+0x4  ;; SectorBootEnd
   \   000000E0   0910A0E3           MOV      R1,#+9
   \   000000E4   001080E5           STR      R1,[R0, #+0]
    289                  SectorProgStart = SECTOR_PROG_START_R2;
   \   000000E8   88009FE5           LDR      R0,??SetFlashSectorTable_3+0x8  ;; SectorProgStart
   \   000000EC   0A10A0E3           MOV      R1,#+10
   \   000000F0   001080E5           STR      R1,[R0, #+0]
    290                  SectorProgEnd = SECTOR_PROG_END_R2;
   \   000000F4   80009FE5           LDR      R0,??SetFlashSectorTable_3+0xC  ;; SectorProgEnd
   \   000000F8   1910A0E3           MOV      R1,#+25
   \   000000FC   001080E5           STR      R1,[R0, #+0]
    291                  SectorConfigStart = SECTOR_CONFIG_START_R2;
   \   00000100   78009FE5           LDR      R0,??SetFlashSectorTable_3+0x10  ;; SectorConfigStart
   \   00000104   1A10A0E3           MOV      R1,#+26
   \   00000108   001080E5           STR      R1,[R0, #+0]
    292                  SectorConfigEnd = SECTOR_CONFIG_END_R2;
   \   0000010C   70009FE5           LDR      R0,??SetFlashSectorTable_3+0x14  ;; SectorConfigEnd
   \   00000110   1D10A0E3           MOV      R1,#+29
   \   00000114   001080E5           STR      R1,[R0, #+0]
    293                  SectorConfigBakStart = SECTOR_CONFIG_BAK_START_R2;
   \   00000118   68009FE5           LDR      R0,??SetFlashSectorTable_3+0x18  ;; SectorConfigBakStart
   \   0000011C   1E10A0E3           MOV      R1,#+30
   \   00000120   001080E5           STR      R1,[R0, #+0]
    294                  SectorConfigBakEnd = SECTOR_CONFIG_BAK_END_R2;
   \   00000124   60009FE5           LDR      R0,??SetFlashSectorTable_3+0x1C  ;; SectorConfigBakEnd
   \   00000128   2110A0E3           MOV      R1,#+33
   \   0000012C   001080E5           STR      R1,[R0, #+0]
    295                  SectorSettings1Start = SECTOR_SETTINGS1_START_R2;
   \   00000130   58009FE5           LDR      R0,??SetFlashSectorTable_3+0x20  ;; SectorSettings1Start
   \   00000134   2210A0E3           MOV      R1,#+34
   \   00000138   001080E5           STR      R1,[R0, #+0]
    296                  SectorSettings1End = SECTOR_SETTINGS1_END_R2;
   \   0000013C   50009FE5           LDR      R0,??SetFlashSectorTable_3+0x24  ;; SectorSettings1End
   \   00000140   2310A0E3           MOV      R1,#+35
   \   00000144   001080E5           STR      R1,[R0, #+0]
    297                  SectorSettings2Start = SECTOR_SETTINGS2_START_R2;
   \   00000148   48009FE5           LDR      R0,??SetFlashSectorTable_3+0x28  ;; SectorSettings2Start
   \   0000014C   2410A0E3           MOV      R1,#+36
   \   00000150   001080E5           STR      R1,[R0, #+0]
    298                  SectorSettings2End = SECTOR_SETTINGS2_END_R2;
   \   00000154   40009FE5           LDR      R0,??SetFlashSectorTable_3+0x2C  ;; SectorSettings2End
   \   00000158   2510A0E3           MOV      R1,#+37
   \   0000015C   001080E5           STR      R1,[R0, #+0]
    299                  SectorLocalSettings = SECTOR_LOCAL_SETTINGS_START_R2;
   \   00000160   38009FE5           LDR      R0,??SetFlashSectorTable_3+0x30  ;; SectorLocalSettings
   \   00000164   2610A0E3           MOV      R1,#+38
   \   00000168   001080E5           STR      R1,[R0, #+0]
    300                  break;
    301              }
    302          }
   \                     ??SetFlashSectorTable_4:
   \   0000016C   1EFF2FE1           BX       LR               ;; return
   \                     ??SetFlashSectorTable_3:
   \   00000170   ........           DC32     SectorBootStart
   \   00000174   ........           DC32     SectorBootEnd
   \   00000178   ........           DC32     SectorProgStart
   \   0000017C   ........           DC32     SectorProgEnd
   \   00000180   ........           DC32     SectorConfigStart
   \   00000184   ........           DC32     SectorConfigEnd
   \   00000188   ........           DC32     SectorConfigBakStart
   \   0000018C   ........           DC32     SectorConfigBakEnd
   \   00000190   ........           DC32     SectorSettings1Start
   \   00000194   ........           DC32     SectorSettings1End
   \   00000198   ........           DC32     SectorSettings2Start
   \   0000019C   ........           DC32     SectorSettings2End
   \   000001A0   ........           DC32     SectorLocalSettings
    303          

   \                                 In segment CODE, align 4, keep-with-next
    304          bool MX29LV_CheckId(void) {
   \                     ??MX29LV_CheckId:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    305              OS_Use(&FlashSema);
   \   00000004   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000008   ........           _BLF     OS_Use,??OS_Use??rA
    306              if (!IdOk) {
   \   0000000C   F8019FE5           LDR      R0,??MX29LV_CheckId_1  ;; IdOk
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   7500001A           BNE      ??MX29LV_CheckId_2
    307                  U32 manId, devId;
    308                  OS_IncDI();
   \   0000001C   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   00000020   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000024   F00010E3           TST      R0,#0xF0
   \   00000028   0100000A           BEQ      ??MX29LV_CheckId_3
   \   0000002C   9900A0E3           MOV      R0,#+153
   \   00000030   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_CheckId_3:
   \   00000034   ........           _BLF     OS_DisableInt,??OS_DisableInt??rA
   \   00000038   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   0000003C   ........           LDR      R1,??DataTable128  ;; OS_Counters + 1
   \   00000040   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000044   011091E2           ADDS     R1,R1,#+1
   \   00000048   0010C0E5           STRB     R1,[R0, #+0]
    309                  _RESET();
   \   0000004C   ........           LDR      R0,??DataTable113  ;; FlashBaseAddress
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   F010A0E3           MOV      R1,#+240
   \   00000058   F01881E3           ORR      R1,R1,#0xF00000
   \   0000005C   001080E5           STR      R1,[R0, #+0]
    310                  // Word mode, shift address 2bit left due to a2=a0
    311                  *firstAddr = FIRST_CMD;
   \   00000060   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   AA10A0E3           MOV      R1,#+170
   \   0000006C   AA1881E3           ORR      R1,R1,#0xAA0000
   \   00000070   001080E5           STR      R1,[R0, #+0]
    312                  *secondAddr = SECOND_CMD;
   \   00000074   ........           LDR      R0,??DataTable124  ;; secondAddr
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   5510A0E3           MOV      R1,#+85
   \   00000080   551881E3           ORR      R1,R1,#0x550000
   \   00000084   001080E5           STR      R1,[R0, #+0]
    313                  *firstAddr = ID_CMD;
   \   00000088   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   9010A0E3           MOV      R1,#+144
   \   00000094   901881E3           ORR      R1,R1,#0x900000
   \   00000098   001080E5           STR      R1,[R0, #+0]
    314                  manId = *((volatile U32 *)(FlashBaseAddress + 0));
   \   0000009C   ........           LDR      R0,??DataTable113  ;; FlashBaseAddress
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   0040B0E1           MOVS     R4,R0
    315                  _RESET();
   \   000000AC   ........           LDR      R0,??DataTable113  ;; FlashBaseAddress
   \   000000B0   000090E5           LDR      R0,[R0, #+0]
   \   000000B4   F010A0E3           MOV      R1,#+240
   \   000000B8   F01881E3           ORR      R1,R1,#0xF00000
   \   000000BC   001080E5           STR      R1,[R0, #+0]
    316          
    317                  *firstAddr = FIRST_CMD;
   \   000000C0   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   000000C4   000090E5           LDR      R0,[R0, #+0]
   \   000000C8   AA10A0E3           MOV      R1,#+170
   \   000000CC   AA1881E3           ORR      R1,R1,#0xAA0000
   \   000000D0   001080E5           STR      R1,[R0, #+0]
    318                  *secondAddr = SECOND_CMD;
   \   000000D4   ........           LDR      R0,??DataTable124  ;; secondAddr
   \   000000D8   000090E5           LDR      R0,[R0, #+0]
   \   000000DC   5510A0E3           MOV      R1,#+85
   \   000000E0   551881E3           ORR      R1,R1,#0x550000
   \   000000E4   001080E5           STR      R1,[R0, #+0]
    319                  *firstAddr = ID_CMD;
   \   000000E8   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   000000EC   000090E5           LDR      R0,[R0, #+0]
   \   000000F0   9010A0E3           MOV      R1,#+144
   \   000000F4   901881E3           ORR      R1,R1,#0x900000
   \   000000F8   001080E5           STR      R1,[R0, #+0]
    320                  devId = *((volatile U32 *)(FlashBaseAddress + 4));
   \   000000FC   ........           LDR      R0,??DataTable113  ;; FlashBaseAddress
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   040090E5           LDR      R0,[R0, #+4]
   \   00000108   0050B0E1           MOVS     R5,R0
    321          
    322                  _RESET();
   \   0000010C   ........           LDR      R0,??DataTable113  ;; FlashBaseAddress
   \   00000110   000090E5           LDR      R0,[R0, #+0]
   \   00000114   F010A0E3           MOV      R1,#+240
   \   00000118   F01881E3           ORR      R1,R1,#0xF00000
   \   0000011C   001080E5           STR      R1,[R0, #+0]
    323                  OS_DecRI();
   \   00000120   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   00000124   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000128   F00010E3           TST      R0,#0xF0
   \   0000012C   0100000A           BEQ      ??MX29LV_CheckId_4
   \   00000130   9900A0E3           MOV      R0,#+153
   \   00000134   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_CheckId_4:
   \   00000138   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   0000013C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000140   010050E2           SUBS     R0,R0,#+1
   \   00000144   ........           LDR      R1,??DataTable128  ;; OS_Counters + 1
   \   00000148   0000C1E5           STRB     R0,[R1, #+0]
   \   0000014C   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   0000001A           BNE      ??MX29LV_CheckId_5
   \   00000158   ........           _BLF     OS_EnableInt,??OS_EnableInt??rA
    324                  // Flash code for 160 device	"2249"
    325                  // Flash code for 640 device	"22CB"
    326                  switch (GlobalDeviceHWId) {
   \                     ??MX29LV_CheckId_5:
   \   0000015C   ........           LDR      R0,??DataTable27  ;; GlobalDeviceHWId
   \   00000160   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0600000A           BEQ      ??MX29LV_CheckId_6
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   1200000A           BEQ      ??MX29LV_CheckId_7
   \   00000174   020050E3           CMP      R0,#+2
   \   00000178   0200000A           BEQ      ??MX29LV_CheckId_6
   \   0000017C   030050E3           CMP      R0,#+3
   \   00000180   0E00000A           BEQ      ??MX29LV_CheckId_7
   \   00000184   1A0000EA           B        ??MX29LV_CheckId_2
    327                  case TCU_R1:
    328                  case TDU_R1:
    329                      if (manId == 0x00c200c2 && devId == 0x22492249) {
   \                     ??MX29LV_CheckId_6:
   \   00000188   C200A0E3           MOV      R0,#+194
   \   0000018C   C20880E3           ORR      R0,R0,#0xC20000
   \   00000190   000054E1           CMP      R4,R0
   \   00000194   1600001A           BNE      ??MX29LV_CheckId_2
   \   00000198   70009FE5           LDR      R0,??MX29LV_CheckId_1+0x4  ;; 0x22492249
   \   0000019C   000055E1           CMP      R5,R0
   \   000001A0   1300001A           BNE      ??MX29LV_CheckId_2
    330                          IdOk = true; // ID OK
   \   000001A4   60009FE5           LDR      R0,??MX29LV_CheckId_1  ;; IdOk
   \   000001A8   0110A0E3           MOV      R1,#+1
   \   000001AC   0010C0E5           STRB     R1,[R0, #+0]
    331                          SectorTable = SectorTable1;
   \   000001B0   ........           LDR      R0,??DataTable111  ;; SectorTable
   \   000001B4   ........           LDR      R1,??DataTable29  ;; SectorTable1
   \   000001B8   001080E5           STR      R1,[R0, #+0]
   \   000001BC   0C0000EA           B        ??MX29LV_CheckId_2
    332                      }
    333                      break;
    334                  case TCU_R2:
    335                  case TDU_R2:
    336                      if (manId == 0x00c200c2 && devId == 0x22CB22CB) {
   \                     ??MX29LV_CheckId_7:
   \   000001C0   C200A0E3           MOV      R0,#+194
   \   000001C4   C20880E3           ORR      R0,R0,#0xC20000
   \   000001C8   000054E1           CMP      R4,R0
   \   000001CC   0800001A           BNE      ??MX29LV_CheckId_2
   \   000001D0   3C009FE5           LDR      R0,??MX29LV_CheckId_1+0x8  ;; 0x22cb22cb
   \   000001D4   000055E1           CMP      R5,R0
   \   000001D8   0500001A           BNE      ??MX29LV_CheckId_2
    337                          IdOk = true; // ID OK
   \   000001DC   28009FE5           LDR      R0,??MX29LV_CheckId_1  ;; IdOk
   \   000001E0   0110A0E3           MOV      R1,#+1
   \   000001E4   0010C0E5           STRB     R1,[R0, #+0]
    338                          SectorTable = SectorTable2;
   \   000001E8   ........           LDR      R0,??DataTable111  ;; SectorTable
   \   000001EC   ........           LDR      R1,??DataTable31  ;; SectorTable2
   \   000001F0   001080E5           STR      R1,[R0, #+0]
    339                      }
    340                      break;
    341                  }
    342              }
    343              OS_Unuse(&FlashSema);
   \                     ??MX29LV_CheckId_2:
   \   000001F4   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   000001F8   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    344              //MX29LV_ProgFlash(FlashBaseAddress,0);
    345              return (IdOk);
   \   000001FC   08009FE5           LDR      R0,??MX29LV_CheckId_1  ;; IdOk
   \   00000200   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000204   3040BDE8           POP      {R4,R5,LR}
   \   00000208   1EFF2FE1           BX       LR               ;; return
   \                     ??MX29LV_CheckId_1:
   \   0000020C   ........           DC32     IdOk
   \   00000210   49224922           DC32     0x22492249
   \   00000214   CB22CB22           DC32     0x22cb22cb
    346          }
    347          
    348          
    349          

   \                                 In segment CODE, align 4, keep-with-next
    350          bool ProgramMX29LV(U32 FirstSector, U32 targetAddress, U32 srcAddress, U32 targetSize) {
   \                     ??ProgramMX29LV:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
    351              OS_Use(&FlashSema);
   \   00000014   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000018   ........           _BLF     OS_Use,??OS_Use??rA
    352              bool NoError = true;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   0080B0E1           MOVS     R8,R0
    353              targetAddress += SectorTable[FirstSector] + FlashBaseAddress;
   \   00000024   0400A0E3           MOV      R0,#+4
   \   00000028   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   0000002C   001091E5           LDR      R1,[R1, #+0]
   \   00000030   901421E0           MLA      R1,R0,R4,R1
   \   00000034   000091E5           LDR      R0,[R1, #+0]
   \   00000038   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   0000003C   001091E5           LDR      R1,[R1, #+0]
   \   00000040   000091E0           ADDS     R0,R1,R0
   \   00000044   055090E0           ADDS     R5,R0,R5
    354              U8 *srcPtr = (U8 *)srcAddress;
   \   00000048   0690B0E1           MOVS     R9,R6
    355              for (int i = 0x0; NoError && i < targetSize; i += 4) {
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   00A0B0E1           MOVS     R10,R0
   \                     ??ProgramMX29LV_1:
   \   00000054   000058E3           CMP      R8,#+0
   \   00000058   1100000A           BEQ      ??ProgramMX29LV_2
   \   0000005C   07005AE1           CMP      R10,R7
   \   00000060   0F00002A           BCS      ??ProgramMX29LV_2
    356                  U32 tmpData = srcPtr[3] << 24 | srcPtr[2] << 16 | srcPtr[1] << 8 | srcPtr[0];
   \   00000064   0300D9E5           LDRB     R0,[R9, #+3]
   \   00000068   0210D9E5           LDRB     R1,[R9, #+2]
   \   0000006C   0118B0E1           LSLS     R1,R1,#+16
   \   00000070   000C91E1           ORRS     R0,R1,R0, LSL #+24
   \   00000074   0110D9E5           LDRB     R1,[R9, #+1]
   \   00000078   010490E1           ORRS     R0,R0,R1, LSL #+8
   \   0000007C   0010D9E5           LDRB     R1,[R9, #+0]
   \   00000080   000091E1           ORRS     R0,R1,R0
   \   00000084   00B0B0E1           MOVS     R11,R0
    357                  srcPtr += 4;
   \   00000088   049099E2           ADDS     R9,R9,#+4
    358                  NoError = MX29LV_ProgFlash(targetAddress + i, tmpData);
   \   0000008C   0B10B0E1           MOVS     R1,R11
   \   00000090   05009AE0           ADDS     R0,R10,R5
   \   00000094   ........           BL       ??MX29LV_ProgFlash
   \   00000098   0080B0E1           MOVS     R8,R0
    359              }
   \   0000009C   04A09AE2           ADDS     R10,R10,#+4
   \   000000A0   EBFFFFEA           B        ??ProgramMX29LV_1
    360              _RESET();
   \                     ??ProgramMX29LV_2:
   \   000000A4   ........           LDR      R0,??DataTable113  ;; FlashBaseAddress
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   F010A0E3           MOV      R1,#+240
   \   000000B0   F01881E3           ORR      R1,R1,#0xF00000
   \   000000B4   001080E5           STR      R1,[R0, #+0]
    361              /*
    362              srcPtr = (U8*)srcAddress;
    363              volatile U8 *trgtPtr = (U8*)targetAddress;
    364              int Cnt;
    365              for ( Cnt=0; NoError && Cnt < targetSize; Cnt++ ) {
    366                  if ( srcPtr[Cnt] != trgtPtr[Cnt] ) {
    367                      NoError = false;
    368                  }
    369              }
    370              */
    371              /*
    372              if ( memcmp((char*)srcAddress,(char*)targetAddress,targetSize) ) {
    373                  NoError = false;
    374              }
    375              */
    376              OS_Unuse(&FlashSema);
   \   000000B8   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   000000BC   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    377              return (NoError);
   \   000000C0   0800B0E1           MOVS     R0,R8
   \   000000C4   F04FBDE8           POP      {R4-R11,LR}
   \   000000C8   1EFF2FE1           BX       LR               ;; return
    378          }
    379          
    380          

   \                                 In segment CODE, align 4, keep-with-next
    381          bool MarkCompletedMX29LV(U32 LastSector, U32 Size) {
   \                     ??MarkCompletedMX29LV:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    382              OS_Use(&FlashSema);
   \   0000000C   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000010   ........           _BLF     OS_Use,??OS_Use??rA
    383              bool NoError = true;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0060B0E1           MOVS     R6,R0
    384              //OS_EnterRegion();  // May be required, or a semaphore.
    385          
    386              U32 targetAddress = SectorTable[LastSector + 1] + FlashBaseAddress;
   \   0000001C   0400A0E3           MOV      R0,#+4
   \   00000020   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   901421E0           MLA      R1,R0,R4,R1
   \   0000002C   040091E5           LDR      R0,[R1, #+4]
   \   00000030   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   00000034   001091E5           LDR      R1,[R1, #+0]
   \   00000038   000091E0           ADDS     R0,R1,R0
   \   0000003C   0070B0E1           MOVS     R7,R0
    387              U32 OKPattern = 0x11223344;
   \   00000040   ........           LDR      R0,??DataTable65  ;; 0x11223344
   \   00000044   0080B0E1           MOVS     R8,R0
    388              NoError = MX29LV_ProgFlash(targetAddress - sizeof(U32), OKPattern);
   \   00000048   0810B0E1           MOVS     R1,R8
   \   0000004C   040057E2           SUBS     R0,R7,#+4
   \   00000050   ........           BL       ??MX29LV_ProgFlash
   \   00000054   0060B0E1           MOVS     R6,R0
    389              if (NoError) {
   \   00000058   000056E3           CMP      R6,#+0
   \   0000005C   0300000A           BEQ      ??MarkCompletedMX29LV_1
    390                  NoError = MX29LV_ProgFlash(targetAddress - 2 * sizeof(U32), Size);
   \   00000060   0510B0E1           MOVS     R1,R5
   \   00000064   080057E2           SUBS     R0,R7,#+8
   \   00000068   ........           BL       ??MX29LV_ProgFlash
   \   0000006C   0060B0E1           MOVS     R6,R0
    391              }
    392              OS_Unuse(&FlashSema);
   \                     ??MarkCompletedMX29LV_1:
   \   00000070   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000074   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    393              return (NoError);
   \   00000078   0600B0E1           MOVS     R0,R6
   \   0000007C   F041BDE8           POP      {R4-R8,LR}
   \   00000080   1EFF2FE1           BX       LR               ;; return
    394          
    395              //OS_LeaveRegion();
    396          }
    397          

   \                                 In segment CODE, align 4, keep-with-next
    398          bool GetBlockSizeMX29LV(U32 LastSector, U32 *Size) {
   \                     ??GetBlockSizeMX29LV:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    399              OS_Use(&FlashSema);
   \   0000000C   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000010   ........           _BLF     OS_Use,??OS_Use??rA
    400          
    401              bool NoError = true;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0060B0E1           MOVS     R6,R0
    402              //OS_EnterRegion();  // May be required, or a semaphore.
    403          
    404              U32 targetAddress = SectorTable[LastSector + 1] + FlashBaseAddress;
   \   0000001C   0400A0E3           MOV      R0,#+4
   \   00000020   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   901421E0           MLA      R1,R0,R4,R1
   \   0000002C   040091E5           LDR      R0,[R1, #+4]
   \   00000030   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   00000034   001091E5           LDR      R1,[R1, #+0]
   \   00000038   000091E0           ADDS     R0,R1,R0
   \   0000003C   0070B0E1           MOVS     R7,R0
    405              U32 OKPattern = 0x11223344;
   \   00000040   ........           LDR      R0,??DataTable65  ;; 0x11223344
   \   00000044   0080B0E1           MOVS     R8,R0
    406          
    407              U32 *targetPtr = (U32 *)targetAddress;
   \   00000048   0790B0E1           MOVS     R9,R7
    408              if (targetPtr[-1] == OKPattern) *Size = targetPtr[-2];
   \   0000004C   040019E5           LDR      R0,[R9, #-4]
   \   00000050   080050E1           CMP      R0,R8
   \   00000054   0200001A           BNE      ??GetBlockSizeMX29LV_1
   \   00000058   080019E5           LDR      R0,[R9, #-8]
   \   0000005C   000085E5           STR      R0,[R5, #+0]
   \   00000060   010000EA           B        ??GetBlockSizeMX29LV_2
    409              else NoError = false;
   \                     ??GetBlockSizeMX29LV_1:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   0060B0E1           MOVS     R6,R0
    410              OS_Unuse(&FlashSema);
   \                     ??GetBlockSizeMX29LV_2:
   \   0000006C   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000070   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    411          
    412              return (NoError);
   \   00000074   0600B0E1           MOVS     R0,R6
   \   00000078   F043BDE8           POP      {R4-R9,LR}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
    413          
    414              //OS_LeaveRegion();
    415          }
    416          

   \                                 In segment CODE, align 4, keep-with-next
    417          bool GetBlockInfoMX29LV(U32 FirstSector, U32 LastSector, U8 **FlashStartPtr, U32 *Size) {
   \                     ??GetBlockInfoMX29LV:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
   \   00000010   0370B0E1           MOVS     R7,R3
    418              OS_Use(&FlashSema);
   \   00000014   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000018   ........           _BLF     OS_Use,??OS_Use??rA
    419              bool NoError = true;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   0080B0E1           MOVS     R8,R0
    420              //OS_EnterRegion();  // May be required, or a semaphore.
    421          
    422              U32 targetAddress = SectorTable[LastSector + 1] + FlashBaseAddress;
   \   00000024   0400A0E3           MOV      R0,#+4
   \   00000028   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   0000002C   001091E5           LDR      R1,[R1, #+0]
   \   00000030   901521E0           MLA      R1,R0,R5,R1
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   0000003C   001091E5           LDR      R1,[R1, #+0]
   \   00000040   000091E0           ADDS     R0,R1,R0
   \   00000044   0090B0E1           MOVS     R9,R0
    423              U32 OKPattern = 0x11223344;
   \   00000048   ........           LDR      R0,??DataTable65  ;; 0x11223344
   \   0000004C   00A0B0E1           MOVS     R10,R0
    424          
    425              U32 *targetPtr = (U32 *)targetAddress;
   \   00000050   09B0B0E1           MOVS     R11,R9
    426              if (targetPtr[-1] == OKPattern) {
   \   00000054   04001BE5           LDR      R0,[R11, #-4]
   \   00000058   0A0050E1           CMP      R0,R10
   \   0000005C   0B00001A           BNE      ??GetBlockInfoMX29LV_1
    427                  *Size = targetPtr[-2];
   \   00000060   08001BE5           LDR      R0,[R11, #-8]
   \   00000064   000087E5           STR      R0,[R7, #+0]
    428                  *FlashStartPtr = (U8 *)SectorTable[FirstSector] + FlashBaseAddress;;
   \   00000068   ........           LDR      R0,??DataTable113  ;; FlashBaseAddress
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   0410A0E3           MOV      R1,#+4
   \   00000074   ........           LDR      R2,??DataTable111  ;; SectorTable
   \   00000078   002092E5           LDR      R2,[R2, #+0]
   \   0000007C   912422E0           MLA      R2,R1,R4,R2
   \   00000080   001092E5           LDR      R1,[R2, #+0]
   \   00000084   010090E0           ADDS     R0,R0,R1
   \   00000088   000086E5           STR      R0,[R6, #+0]
   \   0000008C   010000EA           B        ??GetBlockInfoMX29LV_2
    429              } else {
    430                  NoError = false;
   \                     ??GetBlockInfoMX29LV_1:
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   0080B0E1           MOVS     R8,R0
    431              }
    432              OS_Unuse(&FlashSema);
   \                     ??GetBlockInfoMX29LV_2:
   \   00000098   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   0000009C   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    433          
    434              return (NoError);
   \   000000A0   0800B0E1           MOVS     R0,R8
   \   000000A4   F04FBDE8           POP      {R4-R11,LR}
   \   000000A8   1EFF2FE1           BX       LR               ;; return
    435          
    436              //OS_LeaveRegion();
    437          }

   \                                 In segment CODE, align 4, keep-with-next
    438          bool CopyFromFlash(U32 FirstSector, U32 LastSector, char *TargetPtr) {
   \                     ??CopyFromFlash:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    439              OS_Use(&FlashSema);
   \   00000010   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000014   ........           _BLF     OS_Use,??OS_Use??rA
    440              bool NoError = false;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0070B0E1           MOVS     R7,R0
    441              U32 *FlashInfoPtr = (U32 *)(SectorTable[LastSector + 1] + FlashBaseAddress);
   \   00000020   0400A0E3           MOV      R0,#+4
   \   00000024   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   901521E0           MLA      R1,R0,R5,R1
   \   00000030   040091E5           LDR      R0,[R1, #+4]
   \   00000034   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   00000038   001091E5           LDR      R1,[R1, #+0]
   \   0000003C   000091E0           ADDS     R0,R1,R0
   \   00000040   0080B0E1           MOVS     R8,R0
    442              if (FlashInfoPtr[-1] == 0x11223344) {
   \   00000044   040018E5           LDR      R0,[R8, #-4]
   \   00000048   ........           LDR      R1,??DataTable65  ;; 0x11223344
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   1000001A           BNE      ??CopyFromFlash_1
    443                  U32 Size = FlashInfoPtr[-2];
   \   00000054   080018E5           LDR      R0,[R8, #-8]
   \   00000058   0090B0E1           MOVS     R9,R0
    444                  char *FlashStartPtr = (char *)(SectorTable[FirstSector] + FlashBaseAddress);
   \   0000005C   0400A0E3           MOV      R0,#+4
   \   00000060   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   00000064   001091E5           LDR      R1,[R1, #+0]
   \   00000068   901421E0           MLA      R1,R0,R4,R1
   \   0000006C   000091E5           LDR      R0,[R1, #+0]
   \   00000070   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   00000074   001091E5           LDR      R1,[R1, #+0]
   \   00000078   000091E0           ADDS     R0,R1,R0
   \   0000007C   00A0B0E1           MOVS     R10,R0
    445                  memcpy(TargetPtr, FlashStartPtr, Size);
   \   00000080   0920B0E1           MOVS     R2,R9
   \   00000084   0A10B0E1           MOVS     R1,R10
   \   00000088   0600B0E1           MOVS     R0,R6
   \   0000008C   ........           _BLF     memcpy,??memcpy??rA
    446                  NoError = true;
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   0070B0E1           MOVS     R7,R0
    447              }
    448              OS_Unuse(&FlashSema);
   \                     ??CopyFromFlash_1:
   \   00000098   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   0000009C   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    449              return (NoError);
   \   000000A0   0700B0E1           MOVS     R0,R7
   \   000000A4   F047BDE8           POP      {R4-R10,LR}
   \   000000A8   1EFF2FE1           BX       LR               ;; return
    450          }

   \                                 In segment CODE, align 4, keep-with-next
    451          bool GetBlockStart(U32 FirstSector, U32 LastSector, U8 **blockPtr) {
   \                     ??GetBlockStart:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
   \   0000000C   0260B0E1           MOVS     R6,R2
    452              OS_Use(&FlashSema);
   \   00000010   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000014   ........           _BLF     OS_Use,??OS_Use??rA
    453              bool NoError = true;
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   0070B0E1           MOVS     R7,R0
    454              U32 *FlashInfoPtr = (U32 *)(SectorTable[LastSector + 1] + FlashBaseAddress);
   \   00000020   0400A0E3           MOV      R0,#+4
   \   00000024   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   901521E0           MLA      R1,R0,R5,R1
   \   00000030   040091E5           LDR      R0,[R1, #+4]
   \   00000034   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   00000038   001091E5           LDR      R1,[R1, #+0]
   \   0000003C   000091E0           ADDS     R0,R1,R0
   \   00000040   0080B0E1           MOVS     R8,R0
    455              if (FlashInfoPtr[-1] == 0x11223344) {
   \   00000044   040018E5           LDR      R0,[R8, #-4]
   \   00000048   ........           LDR      R1,??DataTable65  ;; 0x11223344
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   0900001A           BNE      ??GetBlockStart_1
    456                  *blockPtr = (U8 *)(SectorTable[FirstSector] + FlashBaseAddress);
   \   00000054   0400A0E3           MOV      R0,#+4
   \   00000058   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   0000005C   001091E5           LDR      R1,[R1, #+0]
   \   00000060   901421E0           MLA      R1,R0,R4,R1
   \   00000064   000091E5           LDR      R0,[R1, #+0]
   \   00000068   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   0000006C   001091E5           LDR      R1,[R1, #+0]
   \   00000070   000091E0           ADDS     R0,R1,R0
   \   00000074   000086E5           STR      R0,[R6, #+0]
   \   00000078   010000EA           B        ??GetBlockStart_2
    457              } else {
    458                  NoError = false;
   \                     ??GetBlockStart_1:
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   0070B0E1           MOVS     R7,R0
    459              }
    460              OS_Unuse(&FlashSema);
   \                     ??GetBlockStart_2:
   \   00000084   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000088   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    461              return (NoError);
   \   0000008C   0700B0E1           MOVS     R0,R7
   \   00000090   F041BDE8           POP      {R4-R8,LR}
   \   00000094   1EFF2FE1           BX       LR               ;; return
    462          }
    463          

   \                                 In segment CODE, align 4, keep-with-next
    464          U32 GetBlockAddress(U32 FirstSector) {
    465              return SectorTable[FirstSector] + FlashBaseAddress;
   \                     ??GetBlockAddress:
   \   00000000   0410A0E3           MOV      R1,#+4
   \   00000004   ........           LDR      R2,??DataTable111  ;; SectorTable
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   912020E0           MLA      R0,R1,R0,R2
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   000091E0           ADDS     R0,R1,R0
   \   00000020   1EFF2FE1           BX       LR               ;; return
    466          }
    467          
    468          

   \                                 In segment CODE, align 4, keep-with-next
    469          bool MX29LV_EraseSector(int Sector) {
   \                     ??MX29LV_EraseSector:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    470              OS_Use(&FlashSema);
   \   00000008   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   0000000C   ........           _BLF     OS_Use,??OS_Use??rA
    471              bool NoError = true;
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   0050B0E1           MOVS     R5,R0
    472          
    473              volatile U32 *targetP = (volatile U32 *)(SectorTable[Sector] + FlashBaseAddress);
   \   00000018   0400A0E3           MOV      R0,#+4
   \   0000001C   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   901421E0           MLA      R1,R0,R4,R1
   \   00000028   000091E5           LDR      R0,[R1, #+0]
   \   0000002C   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   00000030   001091E5           LDR      R1,[R1, #+0]
   \   00000034   000091E0           ADDS     R0,R1,R0
   \   00000038   0060B0E1           MOVS     R6,R0
    474          
    475              OS_IncDI();
   \   0000003C   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   F00010E3           TST      R0,#0xF0
   \   00000048   0100000A           BEQ      ??MX29LV_EraseSector_1
   \   0000004C   9900A0E3           MOV      R0,#+153
   \   00000050   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_EraseSector_1:
   \   00000054   ........           _BLF     OS_DisableInt,??OS_DisableInt??rA
   \   00000058   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   0000005C   ........           LDR      R1,??DataTable128  ;; OS_Counters + 1
   \   00000060   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000064   011091E2           ADDS     R1,R1,#+1
   \   00000068   0010C0E5           STRB     R1,[R0, #+0]
    476              *firstAddr = FIRST_CMD;
   \   0000006C   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   AA10A0E3           MOV      R1,#+170
   \   00000078   AA1881E3           ORR      R1,R1,#0xAA0000
   \   0000007C   001080E5           STR      R1,[R0, #+0]
    477              *secondAddr = SECOND_CMD;
   \   00000080   ........           LDR      R0,??DataTable124  ;; secondAddr
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   5510A0E3           MOV      R1,#+85
   \   0000008C   551881E3           ORR      R1,R1,#0x550000
   \   00000090   001080E5           STR      R1,[R0, #+0]
    478              *firstAddr = ERASE_CMD;
   \   00000094   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   8010A0E3           MOV      R1,#+128
   \   000000A0   801881E3           ORR      R1,R1,#0x800000
   \   000000A4   001080E5           STR      R1,[R0, #+0]
    479          
    480              *firstAddr = FIRST_CMD;
   \   000000A8   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   000000AC   000090E5           LDR      R0,[R0, #+0]
   \   000000B0   AA10A0E3           MOV      R1,#+170
   \   000000B4   AA1881E3           ORR      R1,R1,#0xAA0000
   \   000000B8   001080E5           STR      R1,[R0, #+0]
    481              *secondAddr = SECOND_CMD;
   \   000000BC   ........           LDR      R0,??DataTable124  ;; secondAddr
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   5510A0E3           MOV      R1,#+85
   \   000000C8   551881E3           ORR      R1,R1,#0x550000
   \   000000CC   001080E5           STR      R1,[R0, #+0]
    482              *targetP = ERASE_SEC_CMD;
   \   000000D0   3000A0E3           MOV      R0,#+48
   \   000000D4   C00980E3           ORR      R0,R0,#0x300000
   \   000000D8   000086E5           STR      R0,[R6, #+0]
    483              OS_DecRI();
   \   000000DC   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   000000E0   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000E4   F00010E3           TST      R0,#0xF0
   \   000000E8   0100000A           BEQ      ??MX29LV_EraseSector_2
   \   000000EC   9900A0E3           MOV      R0,#+153
   \   000000F0   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_EraseSector_2:
   \   000000F4   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   000000F8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000FC   010050E2           SUBS     R0,R0,#+1
   \   00000100   ........           LDR      R1,??DataTable128  ;; OS_Counters + 1
   \   00000104   0000C1E5           STRB     R0,[R1, #+0]
   \   00000108   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0000001A           BNE      ??MX29LV_EraseSector_3
   \   00000114   ........           _BLF     OS_EnableInt,??OS_EnableInt??rA
    484              OS_Delay(10);   // If we read toggle bits too early, the status may be incorrect
   \                     ??MX29LV_EraseSector_3:
   \   00000118   0A00A0E3           MOV      R0,#+10
   \   0000011C   ........           _BLF     OS_Delay,??OS_Delay??rA
    485              int RetryCnt = 0;
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   0070B0E1           MOVS     R7,R0
    486              do {
    487                  OS_Delay(700);
   \                     ??MX29LV_EraseSector_4:
   \   00000128   AF0FA0E3           MOV      R0,#+700
   \   0000012C   ........           _BLF     OS_Delay,??OS_Delay??rA
    488          
    489              } while (RetryCnt++ < 15 && !BlankCheck(SectorTable[Sector] + FlashBaseAddress, SectorTable[Sector + 1] - SectorTable[Sector]));
   \   00000130   0700B0E1           MOVS     R0,R7
   \   00000134   017090E2           ADDS     R7,R0,#+1
   \   00000138   0F0050E3           CMP      R0,#+15
   \   0000013C   150000AA           BGE      ??MX29LV_EraseSector_5
   \   00000140   0400A0E3           MOV      R0,#+4
   \   00000144   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   00000148   001091E5           LDR      R1,[R1, #+0]
   \   0000014C   901421E0           MLA      R1,R0,R4,R1
   \   00000150   040091E5           LDR      R0,[R1, #+4]
   \   00000154   0410A0E3           MOV      R1,#+4
   \   00000158   ........           LDR      R2,??DataTable111  ;; SectorTable
   \   0000015C   002092E5           LDR      R2,[R2, #+0]
   \   00000160   912422E0           MLA      R2,R1,R4,R2
   \   00000164   001092E5           LDR      R1,[R2, #+0]
   \   00000168   011050E0           SUBS     R1,R0,R1
   \   0000016C   0400A0E3           MOV      R0,#+4
   \   00000170   ........           LDR      R2,??DataTable111  ;; SectorTable
   \   00000174   002092E5           LDR      R2,[R2, #+0]
   \   00000178   902422E0           MLA      R2,R0,R4,R2
   \   0000017C   000092E5           LDR      R0,[R2, #+0]
   \   00000180   ........           LDR      R2,??DataTable113  ;; FlashBaseAddress
   \   00000184   002092E5           LDR      R2,[R2, #+0]
   \   00000188   000092E0           ADDS     R0,R2,R0
   \   0000018C   ........           BL       ??BlankCheck
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   E3FFFF0A           BEQ      ??MX29LV_EraseSector_4
    490              // Not blank, do nothing for now
    491              if (RetryCnt > 15) NoError = false;
   \                     ??MX29LV_EraseSector_5:
   \   00000198   100057E3           CMP      R7,#+16
   \   0000019C   010000BA           BLT      ??MX29LV_EraseSector_6
   \   000001A0   0000A0E3           MOV      R0,#+0
   \   000001A4   0050B0E1           MOVS     R5,R0
    492              _RESET();
   \                     ??MX29LV_EraseSector_6:
   \   000001A8   ........           LDR      R0,??DataTable113  ;; FlashBaseAddress
   \   000001AC   000090E5           LDR      R0,[R0, #+0]
   \   000001B0   F010A0E3           MOV      R1,#+240
   \   000001B4   F01881E3           ORR      R1,R1,#0xF00000
   \   000001B8   001080E5           STR      R1,[R0, #+0]
    493              OS_Unuse(&FlashSema);
   \   000001BC   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   000001C0   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    494              return (NoError);
   \   000001C4   0500B0E1           MOVS     R0,R5
   \   000001C8   F040BDE8           POP      {R4-R7,LR}
   \   000001CC   1EFF2FE1           BX       LR               ;; return
    495          }
    496          
    497          

   \                                 In segment CODE, align 4, keep-with-next
    498          bool MX29LV_EraseSectors(int FirstSector, int LastSector) {
   \                     ??MX29LV_EraseSectors:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    499              bool NoError = true;
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0060B0E1           MOVS     R6,R0
    500              if (FirstSector >= 0 && LastSector >= FirstSector) {
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   8700004A           BMI      ??MX29LV_EraseSectors_1
   \   0000001C   040055E1           CMP      R5,R4
   \   00000020   850000BA           BLT      ??MX29LV_EraseSectors_1
    501                  OS_Use(&FlashSema);
   \   00000024   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000028   ........           _BLF     OS_Use,??OS_Use??rA
    502                  if (!BlankCheck(SectorTable[FirstSector] + FlashBaseAddress, SectorTable[LastSector] - SectorTable[FirstSector])) {
   \   0000002C   0400A0E3           MOV      R0,#+4
   \   00000030   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   00000034   001091E5           LDR      R1,[R1, #+0]
   \   00000038   901521E0           MLA      R1,R0,R5,R1
   \   0000003C   000091E5           LDR      R0,[R1, #+0]
   \   00000040   0410A0E3           MOV      R1,#+4
   \   00000044   ........           LDR      R2,??DataTable111  ;; SectorTable
   \   00000048   002092E5           LDR      R2,[R2, #+0]
   \   0000004C   912422E0           MLA      R2,R1,R4,R2
   \   00000050   001092E5           LDR      R1,[R2, #+0]
   \   00000054   011050E0           SUBS     R1,R0,R1
   \   00000058   0400A0E3           MOV      R0,#+4
   \   0000005C   ........           LDR      R2,??DataTable111  ;; SectorTable
   \   00000060   002092E5           LDR      R2,[R2, #+0]
   \   00000064   902422E0           MLA      R2,R0,R4,R2
   \   00000068   000092E5           LDR      R0,[R2, #+0]
   \   0000006C   ........           LDR      R2,??DataTable113  ;; FlashBaseAddress
   \   00000070   002092E5           LDR      R2,[R2, #+0]
   \   00000074   000092E0           ADDS     R0,R2,R0
   \   00000078   ........           BL       ??BlankCheck
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   6B00001A           BNE      ??MX29LV_EraseSectors_2
    503                      OS_IncDI();
   \   00000084   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   00000088   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000008C   F00010E3           TST      R0,#0xF0
   \   00000090   0100000A           BEQ      ??MX29LV_EraseSectors_3
   \   00000094   9900A0E3           MOV      R0,#+153
   \   00000098   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_EraseSectors_3:
   \   0000009C   ........           _BLF     OS_DisableInt,??OS_DisableInt??rA
   \   000000A0   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   000000A4   ........           LDR      R1,??DataTable128  ;; OS_Counters + 1
   \   000000A8   0010D1E5           LDRB     R1,[R1, #+0]
   \   000000AC   011091E2           ADDS     R1,R1,#+1
   \   000000B0   0010C0E5           STRB     R1,[R0, #+0]
    504                      *firstAddr = FIRST_CMD;
   \   000000B4   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   000000B8   000090E5           LDR      R0,[R0, #+0]
   \   000000BC   AA10A0E3           MOV      R1,#+170
   \   000000C0   AA1881E3           ORR      R1,R1,#0xAA0000
   \   000000C4   001080E5           STR      R1,[R0, #+0]
    505                      *secondAddr = SECOND_CMD;
   \   000000C8   ........           LDR      R0,??DataTable124  ;; secondAddr
   \   000000CC   000090E5           LDR      R0,[R0, #+0]
   \   000000D0   5510A0E3           MOV      R1,#+85
   \   000000D4   551881E3           ORR      R1,R1,#0x550000
   \   000000D8   001080E5           STR      R1,[R0, #+0]
    506                      *firstAddr = ERASE_CMD;
   \   000000DC   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   000000E0   000090E5           LDR      R0,[R0, #+0]
   \   000000E4   8010A0E3           MOV      R1,#+128
   \   000000E8   801881E3           ORR      R1,R1,#0x800000
   \   000000EC   001080E5           STR      R1,[R0, #+0]
    507          
    508                      *firstAddr = FIRST_CMD;
   \   000000F0   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   000000F4   000090E5           LDR      R0,[R0, #+0]
   \   000000F8   AA10A0E3           MOV      R1,#+170
   \   000000FC   AA1881E3           ORR      R1,R1,#0xAA0000
   \   00000100   001080E5           STR      R1,[R0, #+0]
    509                      *secondAddr = SECOND_CMD;
   \   00000104   ........           LDR      R0,??DataTable124  ;; secondAddr
   \   00000108   000090E5           LDR      R0,[R0, #+0]
   \   0000010C   5510A0E3           MOV      R1,#+85
   \   00000110   551881E3           ORR      R1,R1,#0x550000
   \   00000114   001080E5           STR      R1,[R0, #+0]
    510                      for (int Sector = LastSector; Sector >= FirstSector; Sector--) {
   \   00000118   0500B0E1           MOVS     R0,R5
   \                     ??MX29LV_EraseSectors_4:
   \   0000011C   040050E1           CMP      R0,R4
   \   00000120   0D0000BA           BLT      ??MX29LV_EraseSectors_5
    511                          volatile U32 *targetP = (volatile U32 *)(SectorTable[Sector] + FlashBaseAddress);
   \   00000124   0420A0E3           MOV      R2,#+4
   \   00000128   ........           LDR      R3,??DataTable111  ;; SectorTable
   \   0000012C   003093E5           LDR      R3,[R3, #+0]
   \   00000130   923023E0           MLA      R3,R2,R0,R3
   \   00000134   002093E5           LDR      R2,[R3, #+0]
   \   00000138   ........           LDR      R3,??DataTable113  ;; FlashBaseAddress
   \   0000013C   003093E5           LDR      R3,[R3, #+0]
   \   00000140   022093E0           ADDS     R2,R3,R2
   \   00000144   0210B0E1           MOVS     R1,R2
    512                          *targetP = ERASE_SEC_CMD;
   \   00000148   3020A0E3           MOV      R2,#+48
   \   0000014C   C02982E3           ORR      R2,R2,#0x300000
   \   00000150   002081E5           STR      R2,[R1, #+0]
    513                      }
   \   00000154   010050E2           SUBS     R0,R0,#+1
   \   00000158   EFFFFFEA           B        ??MX29LV_EraseSectors_4
    514                      OS_DecRI();
   \                     ??MX29LV_EraseSectors_5:
   \   0000015C   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   00000160   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000164   F00010E3           TST      R0,#0xF0
   \   00000168   0100000A           BEQ      ??MX29LV_EraseSectors_6
   \   0000016C   9900A0E3           MOV      R0,#+153
   \   00000170   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_EraseSectors_6:
   \   00000174   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   00000178   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000017C   010050E2           SUBS     R0,R0,#+1
   \   00000180   ........           LDR      R1,??DataTable128  ;; OS_Counters + 1
   \   00000184   0000C1E5           STRB     R0,[R1, #+0]
   \   00000188   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   0000018C   000050E3           CMP      R0,#+0
   \   00000190   0000001A           BNE      ??MX29LV_EraseSectors_7
   \   00000194   ........           _BLF     OS_EnableInt,??OS_EnableInt??rA
    515                      int RetryCnt = 0;
   \                     ??MX29LV_EraseSectors_7:
   \   00000198   0000A0E3           MOV      R0,#+0
   \   0000019C   0070B0E1           MOVS     R7,R0
    516                      do {
    517                          OS_Delay(700);
   \                     ??MX29LV_EraseSectors_8:
   \   000001A0   AF0FA0E3           MOV      R0,#+700
   \   000001A4   ........           _BLF     OS_Delay,??OS_Delay??rA
    518                      } while (RetryCnt++ < 15 && !BlankCheck(SectorTable[FirstSector] + FlashBaseAddress, SectorTable[LastSector] - SectorTable[FirstSector]));
   \   000001A8   0700B0E1           MOVS     R0,R7
   \   000001AC   017090E2           ADDS     R7,R0,#+1
   \   000001B0   0F0050E3           CMP      R0,#+15
   \   000001B4   150000AA           BGE      ??MX29LV_EraseSectors_9
   \   000001B8   0400A0E3           MOV      R0,#+4
   \   000001BC   ........           LDR      R1,??DataTable111  ;; SectorTable
   \   000001C0   001091E5           LDR      R1,[R1, #+0]
   \   000001C4   901521E0           MLA      R1,R0,R5,R1
   \   000001C8   000091E5           LDR      R0,[R1, #+0]
   \   000001CC   0410A0E3           MOV      R1,#+4
   \   000001D0   ........           LDR      R2,??DataTable111  ;; SectorTable
   \   000001D4   002092E5           LDR      R2,[R2, #+0]
   \   000001D8   912422E0           MLA      R2,R1,R4,R2
   \   000001DC   001092E5           LDR      R1,[R2, #+0]
   \   000001E0   011050E0           SUBS     R1,R0,R1
   \   000001E4   0400A0E3           MOV      R0,#+4
   \   000001E8   ........           LDR      R2,??DataTable111  ;; SectorTable
   \   000001EC   002092E5           LDR      R2,[R2, #+0]
   \   000001F0   902422E0           MLA      R2,R0,R4,R2
   \   000001F4   000092E5           LDR      R0,[R2, #+0]
   \   000001F8   ........           LDR      R2,??DataTable113  ;; FlashBaseAddress
   \   000001FC   002092E5           LDR      R2,[R2, #+0]
   \   00000200   000092E0           ADDS     R0,R2,R0
   \   00000204   ........           BL       ??BlankCheck
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   E3FFFF0A           BEQ      ??MX29LV_EraseSectors_8
    519                      // Not blank, do nothing for now
    520                      if (RetryCnt > 15) NoError = false;
   \                     ??MX29LV_EraseSectors_9:
   \   00000210   100057E3           CMP      R7,#+16
   \   00000214   010000BA           BLT      ??MX29LV_EraseSectors_10
   \   00000218   0000A0E3           MOV      R0,#+0
   \   0000021C   0060B0E1           MOVS     R6,R0
    521                      _RESET();
   \                     ??MX29LV_EraseSectors_10:
   \   00000220   ........           LDR      R0,??DataTable113  ;; FlashBaseAddress
   \   00000224   000090E5           LDR      R0,[R0, #+0]
   \   00000228   F010A0E3           MOV      R1,#+240
   \   0000022C   F01881E3           ORR      R1,R1,#0xF00000
   \   00000230   001080E5           STR      R1,[R0, #+0]
    522          
    523                  }
    524                  OS_Unuse(&FlashSema);
   \                     ??MX29LV_EraseSectors_2:
   \   00000234   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000238   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    525          
    526              }
    527              return (NoError);
   \                     ??MX29LV_EraseSectors_1:
   \   0000023C   0600B0E1           MOVS     R0,R6
   \   00000240   F040BDE8           POP      {R4-R7,LR}
   \   00000244   1EFF2FE1           BX       LR               ;; return
    528          }
    529          

   \                                 In segment CODE, align 4, keep-with-next
    530          bool MX29LV_EraseChip(void) {
   \                     ??MX29LV_EraseChip:
   \   00000000   10402DE9           PUSH     {R4,LR}
    531              OS_Use(&FlashSema);
   \   00000004   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000008   ........           _BLF     OS_Use,??OS_Use??rA
    532              // Word mode, shift address 2bit left due to a2=a0
    533              OS_IncDI();
   \   0000000C   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   F00010E3           TST      R0,#0xF0
   \   00000018   0100000A           BEQ      ??MX29LV_EraseChip_1
   \   0000001C   9900A0E3           MOV      R0,#+153
   \   00000020   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_EraseChip_1:
   \   00000024   ........           _BLF     OS_DisableInt,??OS_DisableInt??rA
   \   00000028   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   0000002C   ........           LDR      R1,??DataTable128  ;; OS_Counters + 1
   \   00000030   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000034   011091E2           ADDS     R1,R1,#+1
   \   00000038   0010C0E5           STRB     R1,[R0, #+0]
    534              *firstAddr = RESET_CMD;
   \   0000003C   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   F010A0E3           MOV      R1,#+240
   \   00000048   F01881E3           ORR      R1,R1,#0xF00000
   \   0000004C   001080E5           STR      R1,[R0, #+0]
    535              *firstAddr = FIRST_CMD;
   \   00000050   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   AA10A0E3           MOV      R1,#+170
   \   0000005C   AA1881E3           ORR      R1,R1,#0xAA0000
   \   00000060   001080E5           STR      R1,[R0, #+0]
    536              *secondAddr = SECOND_CMD;
   \   00000064   ........           LDR      R0,??DataTable124  ;; secondAddr
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   5510A0E3           MOV      R1,#+85
   \   00000070   551881E3           ORR      R1,R1,#0x550000
   \   00000074   001080E5           STR      R1,[R0, #+0]
    537              *firstAddr = ERASE_CMD;
   \   00000078   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   8010A0E3           MOV      R1,#+128
   \   00000084   801881E3           ORR      R1,R1,#0x800000
   \   00000088   001080E5           STR      R1,[R0, #+0]
    538          
    539              *firstAddr = FIRST_CMD;
   \   0000008C   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   AA10A0E3           MOV      R1,#+170
   \   00000098   AA1881E3           ORR      R1,R1,#0xAA0000
   \   0000009C   001080E5           STR      R1,[R0, #+0]
    540              *secondAddr = SECOND_CMD;
   \   000000A0   ........           LDR      R0,??DataTable124  ;; secondAddr
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   5510A0E3           MOV      R1,#+85
   \   000000AC   551881E3           ORR      R1,R1,#0x550000
   \   000000B0   001080E5           STR      R1,[R0, #+0]
    541              *firstAddr = ERASE_ALL_CMD;
   \   000000B4   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   000000B8   000090E5           LDR      R0,[R0, #+0]
   \   000000BC   1010A0E3           MOV      R1,#+16
   \   000000C0   401981E3           ORR      R1,R1,#0x100000
   \   000000C4   001080E5           STR      R1,[R0, #+0]
    542              OS_DecRI();
   \   000000C8   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   000000CC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000D0   F00010E3           TST      R0,#0xF0
   \   000000D4   0100000A           BEQ      ??MX29LV_EraseChip_2
   \   000000D8   9900A0E3           MOV      R0,#+153
   \   000000DC   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_EraseChip_2:
   \   000000E0   ........           LDR      R0,??DataTable128  ;; OS_Counters + 1
   \   000000E4   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000E8   010050E2           SUBS     R0,R0,#+1
   \   000000EC   ........           LDR      R1,??DataTable128  ;; OS_Counters + 1
   \   000000F0   0000C1E5           STRB     R0,[R1, #+0]
   \   000000F4   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000F8   000050E3           CMP      R0,#+0
   \   000000FC   0000001A           BNE      ??MX29LV_EraseChip_3
   \   00000100   ........           _BLF     OS_EnableInt,??OS_EnableInt??rA
    543              bool NoError = WaitForFlash();
   \                     ??MX29LV_EraseChip_3:
   \   00000104   ........           BL       ??WaitForFlash
   \   00000108   0040B0E1           MOVS     R4,R0
    544              *firstAddr = RESET_CMD;
   \   0000010C   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   00000110   000090E5           LDR      R0,[R0, #+0]
   \   00000114   F010A0E3           MOV      R1,#+240
   \   00000118   F01881E3           ORR      R1,R1,#0xF00000
   \   0000011C   001080E5           STR      R1,[R0, #+0]
    545              OS_Unuse(&FlashSema);
   \   00000120   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000124   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    546              return (NoError);
   \   00000128   0400B0E1           MOVS     R0,R4
   \   0000012C   1040BDE8           POP      {R4,LR}
   \   00000130   1EFF2FE1           BX       LR               ;; return
    547          }
    548          

   \                                 In segment CODE, align 4, keep-with-next
    549          bool BlankCheck(int targetAddr, int targetSize) {
   \                     ??BlankCheck:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    550              OS_Use(&FlashSema);
   \   0000000C   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   00000010   ........           _BLF     OS_Use,??OS_Use??rA
    551              int i;
    552              volatile U32 *tmpPtr = (volatile U32 *)targetAddr;
   \   00000014   0480B0E1           MOVS     R8,R4
    553              bool NoError = true;
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   0070B0E1           MOVS     R7,R0
    554              for (i = 0; NoError && i < targetSize; i += 4) {
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0060B0E1           MOVS     R6,R0
   \                     ??BlankCheck_1:
   \   00000028   000057E3           CMP      R7,#+0
   \   0000002C   0900000A           BEQ      ??BlankCheck_2
   \   00000030   050056E1           CMP      R6,R5
   \   00000034   070000AA           BGE      ??BlankCheck_2
    555                  if (*tmpPtr++ != 0xffffffff) {
   \   00000038   000098E5           LDR      R0,[R8, #+0]
   \   0000003C   048098E2           ADDS     R8,R8,#+4
   \   00000040   010070E3           CMN      R0,#+1
   \   00000044   0100000A           BEQ      ??BlankCheck_3
    556                      // Not blank
    557                      NoError = false;
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0070B0E1           MOVS     R7,R0
    558                  }
    559              }
   \                     ??BlankCheck_3:
   \   00000050   046096E2           ADDS     R6,R6,#+4
   \   00000054   F3FFFFEA           B        ??BlankCheck_1
    560              OS_Unuse(&FlashSema);
   \                     ??BlankCheck_2:
   \   00000058   ........           LDR      R0,??DataTable132  ;; FlashSema
   \   0000005C   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    561              return (NoError);
   \   00000060   0700B0E1           MOVS     R0,R7
   \   00000064   F041BDE8           POP      {R4-R8,LR}
   \   00000068   1EFF2FE1           BX       LR               ;; return
    562          }
    563          

   \                                 In segment CODE, align 4, keep-with-next
    564          bool WaitForFlash(void) {   //Check if the bit6 toggle ends.
   \                     ??WaitForFlash:
   \   00000000   08D04DE2           SUB      SP,SP,#+8
    565              volatile U32 flashStatus;
    566              volatile U32 old = *firstAddr;
   \   00000004   ........           LDR      R1,??DataTable144  ;; firstAddr
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   04108DE5           STR      R1,[SP, #+4]
    567          
    568              while (true) {
    569                  flashStatus = *firstAddr;
   \                     ??WaitForFlash_1:
   \   00000014   ........           LDR      R1,??DataTable144  ;; firstAddr
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   001091E5           LDR      R1,[R1, #+0]
   \   00000020   00108DE5           STR      R1,[SP, #+0]
    570                  if ((old & FLASH_MASK_Q6) == (flashStatus & FLASH_MASK_Q6)) return (true);
   \   00000024   04009DE5           LDR      R0,[SP, #+4]
   \   00000028   4010A0E3           MOV      R1,#+64
   \   0000002C   401881E3           ORR      R1,R1,#0x400000
   \   00000030   000011E0           ANDS     R0,R1,R0
   \   00000034   00109DE5           LDR      R1,[SP, #+0]
   \   00000038   4020A0E3           MOV      R2,#+64
   \   0000003C   402882E3           ORR      R2,R2,#0x400000
   \   00000040   011012E0           ANDS     R1,R2,R1
   \   00000044   010050E1           CMP      R0,R1
   \   00000048   0100001A           BNE      ??WaitForFlash_2
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   1D0000EA           B        ??WaitForFlash_3
    571          
    572                  if (flashStatus & FLASH_MASK_Q5) {
   \                     ??WaitForFlash_2:
   \   00000054   00009DE5           LDR      R0,[SP, #+0]
   \   00000058   2010A0E3           MOV      R1,#+32
   \   0000005C   801981E3           ORR      R1,R1,#0x200000
   \   00000060   000011E1           TST      R1,R0
   \   00000064   1500000A           BEQ      ??WaitForFlash_4
    573                      old = *firstAddr;
   \   00000068   ........           LDR      R1,??DataTable144  ;; firstAddr
   \   0000006C   001091E5           LDR      R1,[R1, #+0]
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   04108DE5           STR      R1,[SP, #+4]
    574                      flashStatus = *firstAddr;
   \   00000078   ........           LDR      R1,??DataTable144  ;; firstAddr
   \   0000007C   001091E5           LDR      R1,[R1, #+0]
   \   00000080   001091E5           LDR      R1,[R1, #+0]
   \   00000084   00108DE5           STR      R1,[SP, #+0]
    575                      if ((old & FLASH_MASK_Q6) == (flashStatus & FLASH_MASK_Q6)) {
   \   00000088   04009DE5           LDR      R0,[SP, #+4]
   \   0000008C   4010A0E3           MOV      R1,#+64
   \   00000090   401881E3           ORR      R1,R1,#0x400000
   \   00000094   000011E0           ANDS     R0,R1,R0
   \   00000098   00109DE5           LDR      R1,[SP, #+0]
   \   0000009C   4020A0E3           MOV      R2,#+64
   \   000000A0   402882E3           ORR      R2,R2,#0x400000
   \   000000A4   011012E0           ANDS     R1,R2,R1
   \   000000A8   010050E1           CMP      R0,R1
   \   000000AC   0100001A           BNE      ??WaitForFlash_5
    576                          return (true);
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   040000EA           B        ??WaitForFlash_3
    577                      } else {
    578                          return (false);
   \                     ??WaitForFlash_5:
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   020000EA           B        ??WaitForFlash_3
    579                      }
    580                  }
    581                  old = flashStatus;
   \                     ??WaitForFlash_4:
   \   000000C0   00109DE5           LDR      R1,[SP, #+0]
   \   000000C4   04108DE5           STR      R1,[SP, #+4]
   \   000000C8   D1FFFFEA           B        ??WaitForFlash_1
   \                     ??WaitForFlash_3:
   \   000000CC   08D08DE2           ADD      SP,SP,#+8        ;; stack cleaning
   \   000000D0   1EFF2FE1           BX       LR               ;; return
    582              }
    583              //return(false);
    584          }
    585          
    586          

   \                                 In segment CODE, align 4, keep-with-next
    587          bool MX29LV_ProgFlash(U32 realAddr, U32 data) {
   \                     ??MX29LV_ProgFlash:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    588              OS_Use(&FlashSema);
   \   0000000C   ........           LDR      R0,??DataTable148  ;; FlashSema
   \   00000010   ........           _BLF     OS_Use,??OS_Use??rA
    589              int ExitTime = OS_GetTime() + 2;
   \   00000014   10019FE5           LDR      R0,??MX29LV_ProgFlash_1  ;; OS_Time
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   020090E2           ADDS     R0,R0,#+2
   \   00000020   0060B0E1           MOVS     R6,R0
    590              _RESET();
   \   00000024   ........           LDR      R0,??DataTable138  ;; FlashBaseAddress
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   F010A0E3           MOV      R1,#+240
   \   00000030   F01881E3           ORR      R1,R1,#0xF00000
   \   00000034   001080E5           STR      R1,[R0, #+0]
    591              // Word mode, shift address 2bit left due to a2=a0
    592              volatile U32 *targetP = (volatile U32 *)realAddr;
   \   00000038   0470B0E1           MOVS     R7,R4
    593              OS_IncDI();
   \   0000003C   ........           LDR      R0,??DataTable147  ;; OS_Counters + 1
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   F00010E3           TST      R0,#0xF0
   \   00000048   0100000A           BEQ      ??MX29LV_ProgFlash_2
   \   0000004C   9900A0E3           MOV      R0,#+153
   \   00000050   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_ProgFlash_2:
   \   00000054   ........           _BLF     OS_DisableInt,??OS_DisableInt??rA
   \   00000058   ........           LDR      R0,??DataTable147  ;; OS_Counters + 1
   \   0000005C   ........           LDR      R1,??DataTable147  ;; OS_Counters + 1
   \   00000060   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000064   011091E2           ADDS     R1,R1,#+1
   \   00000068   0010C0E5           STRB     R1,[R0, #+0]
    594              *firstAddr = FIRST_CMD;
   \   0000006C   ........           LDR      R0,??DataTable144  ;; firstAddr
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   AA10A0E3           MOV      R1,#+170
   \   00000078   AA1881E3           ORR      R1,R1,#0xAA0000
   \   0000007C   001080E5           STR      R1,[R0, #+0]
    595              *secondAddr = SECOND_CMD;
   \   00000080   ........           LDR      R0,??DataTable143  ;; secondAddr
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   5510A0E3           MOV      R1,#+85
   \   0000008C   551881E3           ORR      R1,R1,#0x550000
   \   00000090   001080E5           STR      R1,[R0, #+0]
    596              *firstAddr = PROGRAM_CMD;
   \   00000094   ........           LDR      R0,??DataTable144  ;; firstAddr
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   A010A0E3           MOV      R1,#+160
   \   000000A0   A01881E3           ORR      R1,R1,#0xA00000
   \   000000A4   001080E5           STR      R1,[R0, #+0]
    597              *targetP = data;
   \   000000A8   005087E5           STR      R5,[R7, #+0]
    598              OS_DecRI();
   \   000000AC   ........           LDR      R0,??DataTable147  ;; OS_Counters + 1
   \   000000B0   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000B4   F00010E3           TST      R0,#0xF0
   \   000000B8   0100000A           BEQ      ??MX29LV_ProgFlash_3
   \   000000BC   9900A0E3           MOV      R0,#+153
   \   000000C0   ........           _BLF     OS_Error,??OS_Error??rA
   \                     ??MX29LV_ProgFlash_3:
   \   000000C4   ........           LDR      R0,??DataTable147  ;; OS_Counters + 1
   \   000000C8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000CC   010050E2           SUBS     R0,R0,#+1
   \   000000D0   ........           LDR      R1,??DataTable147  ;; OS_Counters + 1
   \   000000D4   0000C1E5           STRB     R0,[R1, #+0]
   \   000000D8   FF0010E2           ANDS     R0,R0,#0xFF      ;; Zero extend
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0000001A           BNE      ??MX29LV_ProgFlash_4
   \   000000E4   ........           _BLF     OS_EnableInt,??OS_EnableInt??rA
    599              while (ExitTime > OS_GetTime() && (*targetP != data));
   \                     ??MX29LV_ProgFlash_4:
   \   000000E8   3C009FE5           LDR      R0,??MX29LV_ProgFlash_1  ;; OS_Time
   \   000000EC   000090E5           LDR      R0,[R0, #+0]
   \   000000F0   060050E1           CMP      R0,R6
   \   000000F4   020000AA           BGE      ??MX29LV_ProgFlash_5
   \   000000F8   000097E5           LDR      R0,[R7, #+0]
   \   000000FC   050050E1           CMP      R0,R5
   \   00000100   F8FFFF1A           BNE      ??MX29LV_ProgFlash_4
    600              OS_Unuse(&FlashSema);
   \                     ??MX29LV_ProgFlash_5:
   \   00000104   ........           LDR      R0,??DataTable148  ;; FlashSema
   \   00000108   ........           _BLF     OS_Unuse,??OS_Unuse??rA
    601              return (*targetP == data);
   \   0000010C   000097E5           LDR      R0,[R7, #+0]
   \   00000110   050050E1           CMP      R0,R5
   \   00000114   0100001A           BNE      ??MX29LV_ProgFlash_6
   \   00000118   0100A0E3           MOV      R0,#+1
   \   0000011C   000000EA           B        ??MX29LV_ProgFlash_7
   \                     ??MX29LV_ProgFlash_6:
   \   00000120   0000A0E3           MOV      R0,#+0
   \                     ??MX29LV_ProgFlash_7:
   \   00000124   F040BDE8           POP      {R4-R7,LR}
   \   00000128   1EFF2FE1           BX       LR               ;; return
   \                     ??MX29LV_ProgFlash_1:
   \   0000012C   ........           DC32     OS_Time
    602          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for FlashBaseAddress>`:
   \   00000000   00000004           DC32 67108864

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for SectorTable1>`:
   \   00000000   000000000080       DC32 0, 32768, 49152, 65536, 131072, 262144, 393216, 524288, 655360
   \              000000C00000
   \              000001000000
   \              020000000400
   \              000006000000
   \              080000000A00
   \   00000024   00000C000000       DC32 786432, 917504, 1048576, 1179648, 1310720, 1441792, 1572864
   \              0E0000001000
   \              000012000000
   \              140000001600
   \              00001800    
   \   00000040   00001A000000       DC32 1703936, 1835008, 1966080, 2097152, 2228224, 2359296, 2490368
   \              1C0000001E00
   \              000020000000
   \              220000002400
   \              00002600    
   \   0000005C   000028000000       DC32 2621440, 2752512, 2883584, 3014656, 3145728, 3276800, 3407872
   \              2A0000002C00
   \              00002E000000
   \              300000003200
   \              00003400    
   \   00000078   000036000000       DC32 3538944, 3670016, 3801088, 3932160, 4063232, 4194304, 4325376
   \              380000003A00
   \              00003C000000
   \              3E0000004000
   \              00004200    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for SectorTable2>`:
   \   00000000   000000000040       DC32 0, 16384, 32768, 49152, 65536, 81920, 98304, 114688, 131072
   \              000000800000
   \              00C000000000
   \              010000400100
   \              0080010000C0
   \              010000000200
   \   00000024   000004000000       DC32 262144, 393216, 524288, 655360, 786432, 917504, 1048576, 1179648
   \              060000000800
   \              00000A000000
   \              0C0000000E00
   \              000010000000
   \              1200        
   \   00000044   000014000000       DC32 1310720, 1441792, 1572864, 1703936, 1835008, 1966080, 2097152
   \              160000001800
   \              00001A000000
   \              1C0000001E00
   \              00002000    
   \   00000060   000022000000       DC32 2228224, 2359296, 2490368, 2621440, 2752512, 2883584, 3014656
   \              240000002600
   \              000028000000
   \              2A0000002C00
   \              00002E00    
   \   0000007C   000030000000       DC32 3145728, 3276800, 3407872, 3538944, 3670016, 3801088, 3932160
   \              320000003400
   \              000036000000
   \              380000003A00
   \              00003C00    
   \   00000098   00003E000000       DC32 4063232, 4194304, 4325376, 4456448, 4587520, 4718592, 4849664
   \              400000004200
   \              000044000000
   \              460000004800
   \              00004A00    
   \   000000B4   00004C000000       DC32 4980736, 5111808, 5242880, 5373952, 5505024, 5636096, 5767168
   \              4E0000005000
   \              000052000000
   \              540000005600
   \              00005800    
   \   000000D0   00005A000000       DC32 5898240, 6029312, 6160384, 6291456, 6422528, 6553600, 6684672
   \              5C0000005E00
   \              000060000000
   \              620000006400
   \              00006600    
   \   000000EC   000068000000       DC32 6815744, 6946816, 7077888, 7208960, 7340032, 7471104, 7602176
   \              6A0000006C00
   \              00006E000000
   \              700000007200
   \              00007400    
   \   00000108   000076000000       DC32 7733248, 7864320, 7995392, 8126464, 8257536, 8388608, 8519680
   \              780000007A00
   \              00007C000000
   \              7E0000008000
   \              00008200    
   \   00000124   000084000000       DC32 8650752, 8781824, 8912896, 9043968, 9175040, 9306112, 9437184
   \              860000008800
   \              00008A000000
   \              8C0000008E00
   \              00009000    
   \   00000140   000092000000       DC32 9568256, 9699328, 9830400, 9961472, 10092544, 10223616, 10354688
   \              940000009600
   \              000098000000
   \              9A0000009C00
   \              00009E00    
   \   0000015C   0000A0000000       DC32 10485760, 10616832, 10747904, 10878976, 11010048, 11141120
   \              A2000000A400
   \              0000A6000000
   \              A8000000AA00
   \   00000174   0000AC000000       DC32 11272192, 11403264, 11534336, 11665408, 11796480, 11927552
   \              AE000000B000
   \              0000B2000000
   \              B4000000B600
   \   0000018C   0000B8000000       DC32 12058624, 12189696, 12320768, 12451840, 12582912, 12713984
   \              BA000000BC00
   \              0000BE000000
   \              C0000000C200
   \   000001A4   0000C4000000       DC32 12845056, 12976128, 13107200, 13238272, 13369344, 13500416
   \              C6000000C800
   \              0000CA000000
   \              CC000000CE00
   \   000001BC   0000D0000000       DC32 13631488, 13762560, 13893632, 14024704, 14155776, 14286848
   \              D2000000D400
   \              0000D6000000
   \              D8000000DA00
   \   000001D4   0000DC000000       DC32 14417920, 14548992, 14680064, 14811136, 14942208, 15073280
   \              DE000000E000
   \              0000E2000000
   \              E4000000E600
   \   000001EC   0000E8000000       DC32 15204352, 15335424, 15466496, 15597568, 15728640, 15859712
   \              EA000000EC00
   \              0000EE000000
   \              F0000000F200
   \   00000204   0000F4000000       DC32 15990784, 16121856, 16252928, 16384000, 16515072, 16646144
   \              F6000000F800
   \              0000FA000000
   \              FC000000FE00

   \                                 In segment DIFUNCT, align 4, keep-with-next, root
   \   00000000                      REQUIRE ?call_ctors
   \   00000000   ........           DC32    ??__sti__routine

   \                                 In segment CODE, align 4, keep-with-next
   \   static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
   \                     ??__sti__routine:
   \   00000000   ........           LDR      R0,??DataTable129  ;; firstAddr
   \   00000004   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   5420A0E3           MOV      R2,#+84
   \   00000010   542D82E3           ORR      R2,R2,#0x1500
   \   00000014   011092E0           ADDS     R1,R2,R1
   \   00000018   001080E5           STR      R1,[R0, #+0]
   \   0000001C   ........           LDR      R0,??DataTable124  ;; secondAddr
   \   00000020   ........           LDR      R1,??DataTable113  ;; FlashBaseAddress
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   A820A0E3           MOV      R2,#+168
   \   0000002C   A02E82E3           ORR      R2,R2,#0xA00
   \   00000030   011092E0           ADDS     R1,R2,R1
   \   00000034   001080E5           STR      R1,[R0, #+0]
   \   00000038   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     GlobalDeviceHWId

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     SectorTable1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     SectorTable2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable65:
   \   00000000   44332211           DC32     0x11223344

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable111:
   \   00000000   ........           DC32     SectorTable

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable113:
   \   00000000   ........           DC32     FlashBaseAddress

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable124:
   \   00000000   ........           DC32     secondAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable128:
   \   00000000   ........           DC32     OS_Counters + 1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable129:
   \   00000000   ........           DC32     firstAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable132:
   \   00000000   ........           DC32     FlashSema

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable138:
   \   00000000   ........           DC32     FlashBaseAddress

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable143:
   \   00000000   ........           DC32     secondAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable144:
   \   00000000   ........           DC32     firstAddr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable147:
   \   00000000   ........           DC32     OS_Counters + 1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable148:
   \   00000000   ........           DC32     FlashSema
    603          
    604          
    605          
    606          
    607          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     BlankCheck(int, int)              24
     CopyFromFlash(unsigned long, unsigned long, char *)
                                       32
     GetBlockAddress(unsigned long)     0
     GetBlockInfoMX29LV(unsigned long, unsigned long, unsigned char **, unsigned long *)
                                       36
     GetBlockSizeMX29LV(unsigned long, unsigned long *)
                                       28
     GetBlockStart(unsigned long, unsigned long, unsigned char **)
                                       24
     MX29LV_CheckId()                  12
     MX29LV_EraseChip()                 8
     MX29LV_EraseSector(int)           20
     MX29LV_EraseSectors(int, int)     20
     MX29LV_ProgFlash(unsigned long, unsigned long)
                                       20
     MarkCompletedMX29LV(unsigned long, unsigned long)
                                       24
     ProgramMX29LV(unsigned long, unsigned long, unsigned long, unsigned long)
                                       36
     SetFlashSectorTable()              0
     WaitForFlash()                     8
     __sti__routine()                   0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     FlashSema                        20
     FlashBaseAddress                  4
     firstAddr                         4
     secondAddr                        4
     SectorTable1                    148
     SectorTable2                    540
     IdOk                              1
     SectorTable                       4
     SectorBootStart                   4
     SectorBootEnd                     4
     SectorProgStart                   4
     SectorProgEnd                     4
     SectorConfigStart                 4
     SectorConfigEnd                   4
     SectorConfigBakStart              4
     SectorConfigBakEnd                4
     SectorSettings1Start              4
     SectorSettings1End                4
     SectorSettings2Start              4
     SectorSettings2End                4
     SectorLocalSettings               4
     SetFlashSectorTable()           420
     MX29LV_CheckId()                536
     ProgramMX29LV(unsigned long, unsigned long, unsigned long, unsigned long)
                                     204
     MarkCompletedMX29LV(unsigned long, unsigned long)
                                     132
     GetBlockSizeMX29LV(unsigned long, unsigned long *)
                                     128
     GetBlockInfoMX29LV(unsigned long, unsigned long, unsigned char **, unsigned long *)
                                     172
     CopyFromFlash(unsigned long, unsigned long, char *)
                                     172
     GetBlockStart(unsigned long, unsigned long, unsigned char **)
                                     152
     GetBlockAddress(unsigned long)   36
     MX29LV_EraseSector(int)         464
     MX29LV_EraseSectors(int, int)   584
     MX29LV_EraseChip()              308
     BlankCheck(int, int)            108
     WaitForFlash()                  212
     MX29LV_ProgFlash(unsigned long, unsigned long)
                                     304
     ?<Initializer for FlashBaseAddress>
                                       4
     ?<Initializer for SectorTable1>
                                     148
     ?<Initializer for SectorTable2>
                                     540
     __sti__routine()                 60
     ??DataTable27                     4
     ??DataTable29                     4
     ??DataTable31                     4
     ??DataTable65                     4
     ??DataTable111                    4
     ??DataTable113                    4
     ??DataTable124                    4
     ??DataTable128                    4
     ??DataTable129                    4
     ??DataTable132                    4
     ??DataTable138                    4
     ??DataTable143                    4
     ??DataTable144                    4
     ??DataTable147                    4
     ??DataTable148                    4
      Others                         176

 
 4 200 bytes in segment CODE
   692 bytes in segment DATA_I
   692 bytes in segment DATA_ID
    85 bytes in segment DATA_Z
     4 bytes in segment DIFUNCT
    24 bytes in segment INITTAB
 
 4 056 bytes of CODE  memory (+ 172 bytes shared)
   692 bytes of CONST memory
   777 bytes of DATA  memory

Errors: none
Warnings: none
