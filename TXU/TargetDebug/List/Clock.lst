##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               13/Sep/2016  09:47:26 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  E:\VMShare\working\trunk\TXU\CStartup\Clock.c        #
#    Command line    =  E:\VMShare\working\trunk\TXU\CStartup\Clock.c --fpu  #
#                       None -D OS_LIBMODE_DP -D OS_RAMVECT=0 -D             #
#                       CPU_S3C2410 -D OS_UART=1 -D ANBOOTLOADER -D          #
#                       __ARM_LIBRARY__ -lCN E:\VMShare\working\trunk\TXU\Ta #
#                       rgetDebug\List\ -o E:\VMShare\working\trunk\TXU\Targ #
#                       etDebug\Obj\ -s2 --no_cse --no_unroll --no_inline    #
#                       --no_code_motion --no_tbaa --no_clustering           #
#                       --no_scheduling --debug --cpu_mode arm --endian      #
#                       little --cpu ARM920T --stack_align 4 --interwork -e  #
#                       --dlib_config "C:\Program Files (x86)\IAR            #
#                       Systems\Embedded Workbench                           #
#                       4.0\arm\LIB\dl4tpainl8f.h" -I                        #
#                       E:\VMShare\working\trunk\TXU\GUI\CORE\ -I            #
#                       E:\VMShare\working\trunk\TXU\GUI\WM\ -I              #
#                       E:\VMShare\working\trunk\TXU\GUI\WIDGET\ -I          #
#                       E:\VMShare\working\trunk\TXU\CONFIG\ -I              #
#                       E:\VMShare\working\trunk\TXU\INC\ -I                 #
#                       E:\VMShare\working\trunk\TXU\..\SHARED\INC\ -I       #
#                       E:\VMShare\working\trunk\TXU\..\SHARED\SRC\ -I       #
#                       E:\VMShare\working\trunk\TXU\..\SHARED\LZO\MINILZO.1 #
#                       08\ -I "C:\Program Files (x86)\IAR Systems\Embedded  #
#                       Workbench 4.0\arm\INC\"                              #
#    List file       =  E:\VMShare\working\trunk\TXU\TargetDebug\List\Clock. #
#                       lst                                                  #
#    Object file     =  E:\VMShare\working\trunk\TXU\TargetDebug\Obj\Clock.r #
#                       79                                                   #
#                                                                            #
#                                                                            #
##############################################################################

E:\VMShare\working\trunk\TXU\CStartup\Clock.c
      1          
      2          /*******************
      3           *
      4           * Copyright 1998-2003 IAR Systems. All rights reserved.
      5           *
      6           * $Revision: 1.6 $
      7           *
      8           * This is the default implementation of the "clock" function of the
      9           * standard library.  It can be replaced with a system-specific
     10           * implementation.
     11           *
     12           * The "clock" function should return the processor time used by the
     13           * program from some implementation-defined start time.  The value
     14           * should be such that if divided by the macro CLOCKS_PER_SEC the
     15           * result should yield the time in seconds.
     16           *
     17           * The value "(clock_t)-1" means that the processor time is not
     18           * available.
     19           *
     20           ********************/
     21          
     22          #include <time.h>
     23          #include <rtos.h>
     24          
     25          _STD_BEGIN
     26          
     27          #pragma module_name = "?clock"
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          clock_t (clock)(void)
     30          {
     31            return ((clock_t) OS_Time);
   \                     clock:
   \   00000000   04009FE5           LDR      R0,??clock_0     ;; OS_Time
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
   \                     ??clock_0:
   \   0000000C   ........           DC32     OS_Time
     32          }
     33          
     34          _STD_END

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     clock        0


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     clock            16
      Others           4

 
 20 bytes in segment CODE
 
 16 bytes of CODE memory (+ 4 bytes shared)

Errors: none
Warnings: none
