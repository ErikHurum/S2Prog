##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32               19/Jan/2017  10:13:09 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\S2Prog\TXU\src\mmu.c                              #
#    Command line    =  D:\S2Prog\TXU\src\mmu.c --fpu None -D OS_LIBMODE_DP  #
#                       -D OS_RAMVECT=0 -D CPU_S3C2410 -D OS_UART=1 -D       #
#                       ANBOOTLOADER -D __ARM_LIBRARY__ -lCN                 #
#                       D:\S2Prog\TXU\TargetDebug\List\ -o                   #
#                       D:\S2Prog\TXU\TargetDebug\Obj\ -s2 --no_cse          #
#                       --no_unroll --no_inline --no_code_motion --no_tbaa   #
#                       --no_clustering --no_scheduling --debug --cpu_mode   #
#                       arm --endian little --cpu ARM920T --stack_align 4    #
#                       --interwork -e --dlib_config "C:\Program Files       #
#                       (x86)\IAR Systems\Embedded Workbench                 #
#                       4.0\arm\LIB\dl4tpainl8f.h" -I                        #
#                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\ -I  #
#                       D:\S2Prog\TXU\GUI\WIDGET\ -I D:\S2Prog\TXU\CONFIG\   #
#                       -I D:\S2Prog\TXU\INC\ -I D:\S2Prog\TXU\..\SHARED\INC #
#                       \ -I D:\S2Prog\TXU\..\SHARED\SRC\ -I                 #
#                       D:\S2Prog\TXU\..\SHARED\LZO\MINILZO.108\ -I          #
#                       "C:\Program Files (x86)\IAR Systems\Embedded         #
#                       Workbench 4.0\arm\INC\"                              #
#    List file       =  D:\S2Prog\TXU\TargetDebug\List\mmu.lst               #
#    Object file     =  D:\S2Prog\TXU\TargetDebug\Obj\mmu.r79                #
#                                                                            #
#                                                                            #
##############################################################################

D:\S2Prog\TXU\src\mmu.c
      1          /************************************************
      2              NAME    : MMU.C
      3              DESC	  :
      4              Revision: 2002.2.28 ver 0.0
      5           ************************************************/
      6          
      7          #include "def.h"
      8          #include "TSNConstants.h"
      9          #include "2410addr.h"
     10          #include "2410lib.h"
     11          #include "2410slib.h"
     12          #include "mmu.h"
     13          
     14          // 1) Only the section table is used.
     15          // 2) The cachable/non-cachable area can be changed by MMT_DEFAULT value.
     16          //    The section size is 1MB.
     17          
     18          
     19          

   \                                 In segment CODE, align 4, keep-with-next
     20          void MMU_Init(void) {
   \                     MMU_Init:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     21              //========================== IMPORTANT NOTE =========================
     22              //The current stack and code area can't be re-mapped in this routine.
     23              //If you want memory map mapped freely, your own sophisticated MMU
     24              //initialization code is needed.
     25              //===================================================================
     26          
     27              MMU_DisableDCache();
   \   00000004   ........           _BLF     MMU_DisableDCache,??MMU_DisableDCache??rA
     28              MMU_DisableICache();
   \   00000008   ........           _BLF     MMU_DisableICache,??MMU_DisableICache??rA
     29          
     30              //If write-back is used,the DCache should be cleared.
     31              for (int i = 0; i < 64; i++) {
   \   0000000C   0040A0E3           MOV      R4,#+0
   \                     ??MMU_Init_0:
   \   00000010   400054E3           CMP      R4,#+64
   \   00000014   090000AA           BGE      ??MMU_Init_1
     32                  for (int j = 0; j < 8; j++) {
   \   00000018   0050A0E3           MOV      R5,#+0
   \                     ??MMU_Init_2:
   \   0000001C   080055E3           CMP      R5,#+8
   \   00000020   040000AA           BGE      ??MMU_Init_3
     33                      MMU_CleanInvalidateDCacheIndex((i << 26) | (j << 5));
   \   00000024   8502B0E1           LSLS     R0,R5,#+5
   \   00000028   040D90E1           ORRS     R0,R0,R4, LSL #+26
   \   0000002C   ........           _BLF     MMU_CleanInvalidateDCacheIndex,??MMU_CleanInvalidateDCacheIndex??rA
     34                  }
   \   00000030   015095E2           ADDS     R5,R5,#+1
   \   00000034   F8FFFFEA           B        ??MMU_Init_2
     35              }
   \                     ??MMU_Init_3:
   \   00000038   014094E2           ADDS     R4,R4,#+1
   \   0000003C   F3FFFFEA           B        ??MMU_Init_0
     36              MMU_InvalidateICache();
   \                     ??MMU_Init_1:
   \   00000040   ........           _BLF     MMU_InvalidateICache,??MMU_InvalidateICache??rA
     37          
     38          #if 0
     39              //To complete MMU_Init() fast, Icache may be turned on here.
     40              MMU_EnableICache();
     41          #endif
     42          
     43              MMU_DisableMMU();
   \   00000044   ........           _BLF     MMU_DisableMMU,??MMU_DisableMMU??rA
     44              MMU_InvalidateTLB();
   \   00000048   ........           _BLF     MMU_InvalidateTLB,??MMU_InvalidateTLB??rA
     45          
     46              //MMU_SetMTT(int vaddrStart,int vaddrEnd,int paddrStart,int attr)
     47              MMU_SetMTT(0x00000000, 0x01b00000, 0x30000000, RW_CB);  //bank0 RAM
   \   0000004C   1E30A0E3           MOV      R3,#+30
   \   00000050   C03E83E3           ORR      R3,R3,#0xC00
   \   00000054   C025A0E3           MOV      R2,#+805306368
   \   00000058   6C17A0E3           MOV      R1,#+28311552
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   ........           BL       MMU_SetMTT
     48              MMU_SetMTT(0x04000000, 0x0405ffff, 0x00000000, RO_NCNB);   //bank0	flash boot loader
   \   00000064   1230A0E3           MOV      R3,#+18
   \   00000068   803E83E3           ORR      R3,R3,#0x800
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   FB14E0E3           MVN      R1,#-83886080
   \   00000074   FA18C1E3           BIC      R1,R1,#0xFA0000
   \   00000078   4006A0E3           MOV      R0,#+67108864
   \   0000007C   ........           BL       MMU_SetMTT
     49              MMU_SetMTT(0x04060000, 0x07ffffff, 0x00060000, RW_NCNB);   //bank0	flash program
   \   00000080   1230A0E3           MOV      R3,#+18
   \   00000084   C03E83E3           ORR      R3,R3,#0xC00
   \   00000088   602AA0E3           MOV      R2,#+393216
   \   0000008C   F814E0E3           MVN      R1,#-134217728
   \   00000090   4006A0E3           MOV      R0,#+67108864
   \   00000094   600A80E3           ORR      R0,R0,#0x60000
   \   00000098   ........           BL       MMU_SetMTT
     50              MMU_SetMTT(0x08000000, 0x2fffffff, 0x08000000, RW_NCNB);    //bank1
   \   0000009C   1230A0E3           MOV      R3,#+18
   \   000000A0   C03E83E3           ORR      R3,R3,#0xC00
   \   000000A4   8026A0E3           MOV      R2,#+134217728
   \   000000A8   D014E0E3           MVN      R1,#-805306368
   \   000000AC   8006A0E3           MOV      R0,#+134217728
   \   000000B0   ........           BL       MMU_SetMTT
     51              //MMU_SetMTT(0x30000000, 0x31ffffff, 0x30000000, RW_CB);     //	 RAM
     52          
     53          
     54              MMU_SetMTT(0x30000000, 0x307fffff, 0x30000000, RW_CB);     //	 RAM size 0x800000
   \   000000B4   1E30A0E3           MOV      R3,#+30
   \   000000B8   C03E83E3           ORR      R3,R3,#0xC00
   \   000000BC   C025A0E3           MOV      R2,#+805306368
   \   000000C0   C014E0E3           MVN      R1,#-1073741824
   \   000000C4   F816C1E3           BIC      R1,R1,#0xF800000
   \   000000C8   C005A0E3           MOV      R0,#+805306368
   \   000000CC   ........           BL       MMU_SetMTT
     55              MMU_SetMTT(0x30800000, 0x30ffffff, 0x31000000, RW_CB);     //	 RAM
   \   000000D0   1E30A0E3           MOV      R3,#+30
   \   000000D4   C03E83E3           ORR      R3,R3,#0xC00
   \   000000D8   C425A0E3           MOV      R2,#+822083584
   \   000000DC   CF14E0E3           MVN      R1,#-822083584
   \   000000E0   C205A0E3           MOV      R0,#+813694976
   \   000000E4   ........           BL       MMU_SetMTT
     56              MMU_SetMTT(0x31000000, 0x317fffff, 0x32000000, RW_CB);     //	 RAM
   \   000000E8   1E30A0E3           MOV      R3,#+30
   \   000000EC   C03E83E3           ORR      R3,R3,#0xC00
   \   000000F0   C825A0E3           MOV      R2,#+838860800
   \   000000F4   C014E0E3           MVN      R1,#-1073741824
   \   000000F8   E816C1E3           BIC      R1,R1,#0xE800000
   \   000000FC   C405A0E3           MOV      R0,#+822083584
   \   00000100   ........           BL       MMU_SetMTT
     57              MMU_SetMTT(0x31800000, 0x31ffffff, 0x33000000, RW_CB);     //	 RAM
   \   00000104   1E30A0E3           MOV      R3,#+30
   \   00000108   C03E83E3           ORR      R3,R3,#0xC00
   \   0000010C   CC25A0E3           MOV      R2,#+855638016
   \   00000110   CE14E0E3           MVN      R1,#-838860800
   \   00000114   C605A0E3           MOV      R0,#+830472192
   \   00000118   ........           BL       MMU_SetMTT
     58          /*
     59              MMU_SetMTT(0x30000000, 0x307fffff, 0x30000000, RW_CB);     //	 RAM size 0x800000
     60              MMU_SetMTT(0x30800000, 0x31Afffff, 0x31000000, RW_CB);     //	 RAM
     61              MMU_SetMTT(0x31B00000, 0x31ffffff, 0x31B00000, RW_CB);     //	 RAM LCD
     62          */
     63              //
     64              MMU_SetMTT(0x34000000, 0x3fffffff, 0x34000000, RW_NCNB);     //    Was RW_NCNB
   \   0000011C   1230A0E3           MOV      R3,#+18
   \   00000120   C03E83E3           ORR      R3,R3,#0xC00
   \   00000124   D025A0E3           MOV      R2,#+872415232
   \   00000128   C014E0E3           MVN      R1,#-1073741824
   \   0000012C   D005A0E3           MOV      R0,#+872415232
   \   00000130   ........           BL       MMU_SetMTT
     65              MMU_SetMTT(0x40000000, 0x47ffffff, 0x40000000, RW_NCNB);   //SFR
   \   00000134   1230A0E3           MOV      R3,#+18
   \   00000138   C03E83E3           ORR      R3,R3,#0xC00
   \   0000013C   4024A0E3           MOV      R2,#+1073741824
   \   00000140   B814E0E3           MVN      R1,#-1207959552
   \   00000144   4004A0E3           MOV      R0,#+1073741824
   \   00000148   ........           BL       MMU_SetMTT
     66              MMU_SetMTT(0x48000000, 0x5affffff, 0x48000000, RW_NCNB);   //SFR
   \   0000014C   1230A0E3           MOV      R3,#+18
   \   00000150   C03E83E3           ORR      R3,R3,#0xC00
   \   00000154   4824A0E3           MOV      R2,#+1207959552
   \   00000158   A514E0E3           MVN      R1,#-1526726656
   \   0000015C   4804A0E3           MOV      R0,#+1207959552
   \   00000160   ........           BL       MMU_SetMTT
     67              MMU_SetMTT(0x5b000000, 0xffffffff, 0x5b000000, RW_FAULT); //not used
   \   00000164   3230A0E3           MOV      R3,#+50
   \   00000168   C03E83E3           ORR      R3,R3,#0xC00
   \   0000016C   5B24A0E3           MOV      R2,#+1526726656
   \   00000170   0010E0E3           MVN      R1,#+0
   \   00000174   5B04A0E3           MOV      R0,#+1526726656
   \   00000178   ........           BL       MMU_SetMTT
     68          
     69              MMU_SetTTBase(_MMUTT_STARTADDRESS);
   \   0000017C   C705A0E3           MOV      R0,#+834666496
   \   00000180   FE0980E3           ORR      R0,R0,#0x3F8000
   \   00000184   ........           _BLF     MMU_SetTTBase,??MMU_SetTTBase??rA
     70              MMU_SetDomain(0x55555550 | DOMAIN1_ATTR | DOMAIN0_ATTR);
   \   00000188   20009FE5           LDR      R0,??MMU_Init_4  ;; 0x55555551
   \   0000018C   ........           _BLF     MMU_SetDomain,??MMU_SetDomain??rA
     71              //DOMAIN1: no_access, DOMAIN0,2~15=client(AP is checked)
     72              MMU_SetProcessId(0x0);
   \   00000190   0000A0E3           MOV      R0,#+0
   \   00000194   ........           _BLF     MMU_SetProcessId,??MMU_SetProcessId??rA
     73              MMU_EnableAlignFault();
   \   00000198   ........           _BLF     MMU_EnableAlignFault,??MMU_EnableAlignFault??rA
     74          
     75              MMU_EnableMMU();
   \   0000019C   ........           _BLF     MMU_EnableMMU,??MMU_EnableMMU??rA
     76              MMU_EnableICache();
   \   000001A0   ........           _BLF     MMU_EnableICache,??MMU_EnableICache??rA
     77              MMU_EnableDCache(); //DCache should be turned on after MMU is turned on.
   \   000001A4   ........           _BLF     MMU_EnableDCache,??MMU_EnableDCache??rA
     78          }
   \   000001A8   3040BDE8           POP      {R4,R5,LR}
   \   000001AC   1EFF2FE1           BX       LR               ;; return
   \                     ??MMU_Init_4:
   \   000001B0   51555555           DC32     0x55555551
     79          
     80          
     81          // attr=RW_CB,RW_CNB,RW_NCNB,RW_FAULT

   \                                 In segment CODE, align 4, keep-with-next
     82          void ChangeRomCacheStatus(int attr) {
   \                     ChangeRomCacheStatus:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     83              MMU_DisableDCache();
   \   00000008   ........           _BLF     MMU_DisableDCache,??MMU_DisableDCache??rA
     84              MMU_DisableICache();
   \   0000000C   ........           _BLF     MMU_DisableICache,??MMU_DisableICache??rA
     85              //If write-back is used,the DCache should be cleared.
     86              for (int i = 0; i < 64; i++) for (int j = 0; j < 8; j++) MMU_CleanInvalidateDCacheIndex((i << 26) | (j << 5));
   \   00000010   0050A0E3           MOV      R5,#+0
   \                     ??ChangeRomCacheStatus_0:
   \   00000014   400055E3           CMP      R5,#+64
   \   00000018   090000AA           BGE      ??ChangeRomCacheStatus_1
   \   0000001C   0060A0E3           MOV      R6,#+0
   \                     ??ChangeRomCacheStatus_2:
   \   00000020   080056E3           CMP      R6,#+8
   \   00000024   040000AA           BGE      ??ChangeRomCacheStatus_3
   \   00000028   8602B0E1           LSLS     R0,R6,#+5
   \   0000002C   050D90E1           ORRS     R0,R0,R5, LSL #+26
   \   00000030   ........           _BLF     MMU_CleanInvalidateDCacheIndex,??MMU_CleanInvalidateDCacheIndex??rA
   \   00000034   016096E2           ADDS     R6,R6,#+1
   \   00000038   F8FFFFEA           B        ??ChangeRomCacheStatus_2
   \                     ??ChangeRomCacheStatus_3:
   \   0000003C   015095E2           ADDS     R5,R5,#+1
   \   00000040   F3FFFFEA           B        ??ChangeRomCacheStatus_0
     87              MMU_InvalidateICache();
   \                     ??ChangeRomCacheStatus_1:
   \   00000044   ........           _BLF     MMU_InvalidateICache,??MMU_InvalidateICache??rA
     88              MMU_DisableMMU();
   \   00000048   ........           _BLF     MMU_DisableMMU,??MMU_DisableMMU??rA
     89              MMU_InvalidateTLB();
   \   0000004C   ........           _BLF     MMU_InvalidateTLB,??MMU_InvalidateTLB??rA
     90              MMU_SetMTT(0x00000000, 0x07ffffff, 0x00000000, attr);  //bank0
   \   00000050   0430B0E1           MOVS     R3,R4
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   F814E0E3           MVN      R1,#-134217728
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   ........           BL       MMU_SetMTT
     91              MMU_SetMTT(0x08000000, 0x0fffffff, 0x08000000, attr);  //bank1
   \   00000064   0430B0E1           MOVS     R3,R4
   \   00000068   8026A0E3           MOV      R2,#+134217728
   \   0000006C   F014E0E3           MVN      R1,#-268435456
   \   00000070   8006A0E3           MOV      R0,#+134217728
   \   00000074   ........           BL       MMU_SetMTT
     92              MMU_EnableMMU();
   \   00000078   ........           _BLF     MMU_EnableMMU,??MMU_EnableMMU??rA
     93              MMU_EnableICache();
   \   0000007C   ........           _BLF     MMU_EnableICache,??MMU_EnableICache??rA
     94              MMU_EnableDCache();
   \   00000080   ........           _BLF     MMU_EnableDCache,??MMU_EnableDCache??rA
     95          }
   \   00000084   7040BDE8           POP      {R4-R6,LR}
   \   00000088   1EFF2FE1           BX       LR               ;; return
     96          
     97          

   \                                 In segment CODE, align 4, keep-with-next
     98          void MMU_SetMTT(int vaddrStart, int vaddrEnd, int paddrStart, int attr) {
   \                     MMU_SetMTT:
   \   00000000   F0002DE9           PUSH     {R4-R7}
     99              U32 *pTT = (U32 *)_MMUTT_STARTADDRESS + (vaddrStart >> 20);
   \   00000004   405AB0E1           ASRS     R5,R0,#+20
   \   00000008   0460A0E3           MOV      R6,#+4
   \   0000000C   C775A0E3           MOV      R7,#+834666496
   \   00000010   FE7987E3           ORR      R7,R7,#0x3F8000
   \   00000014   967525E0           MLA      R5,R6,R5,R7
   \   00000018   05C0B0E1           MOVS     R12,R5
    100              int nSec = (vaddrEnd >> 20) - (vaddrStart >> 20);
   \   0000001C   415AB0E1           ASRS     R5,R1,#+20
   \   00000020   405A55E0           SUBS     R5,R5,R0, ASR #+20
   \   00000024   0540B0E1           MOVS     R4,R5
    101              for (int i = 0; i <= nSec; i++) *pTT++ = attr | (((paddrStart >> 20) + i) << 20);
   \   00000028   0050A0E3           MOV      R5,#+0
   \                     ??MMU_SetMTT_0:
   \   0000002C   050054E1           CMP      R4,R5
   \   00000030   050000BA           BLT      ??MMU_SetMTT_1
   \   00000034   426A95E0           ADDS     R6,R5,R2, ASR #+20
   \   00000038   066A93E1           ORRS     R6,R3,R6, LSL #+20
   \   0000003C   00608CE5           STR      R6,[R12, #+0]
   \   00000040   04C09CE2           ADDS     R12,R12,#+4
   \   00000044   015095E2           ADDS     R5,R5,#+1
   \   00000048   F7FFFFEA           B        ??MMU_SetMTT_0
    102          }
   \                     ??MMU_SetMTT_1:
   \   0000004C   F000BDE8           POP      {R4-R7}
   \   00000050   1EFF2FE1           BX       LR               ;; return
    103          
    104          
    105          
    106          
    107          
    108          

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     ChangeRomCacheStatus    16
     MMU_Init                12
     MMU_SetMTT              16


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     MMU_Init              436
     ChangeRomCacheStatus  140
     MMU_SetMTT             84
      Others               168

 
 828 bytes in segment CODE
 
 660 bytes of CODE memory (+ 168 bytes shared)

Errors: none
Warnings: none
