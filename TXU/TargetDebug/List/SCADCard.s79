//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.30A-P050906/W32      20/Oct/2005  15:02:00 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\S2Prog\Shared\Src\SCADCard.cpp                   /
//    Command line    =  D:\S2Prog\Shared\Src\SCADCard.cpp --fpu None -D     /
//                       OS_LIBMODE_DP -D CPU_S3C2410 -D OS_RAMVECT=0 -D     /
//                       OS_UART=-1 -D S2TXU -D USE_LZO=0 -D                 /
//                       __ARM_LIBRARY__ -D WATCHDOG=1 -lC                   /
//                       D:\S2Prog\TXU\TargetDebug\List\ -lA                 /
//                       D:\S2Prog\TXU\TargetDebug\List\ -o                  /
//                       D:\S2Prog\TXU\TargetDebug\Obj\ -s6 --no_cse         /
//                       --no_unroll --no_inline --no_code_motion --no_tbaa  /
//                       --no_clustering --no_scheduling --debug --cpu_mode  /
//                       arm --endian little --cpu ARM920T --stack_align 4   /
//                       --interwork -e --eec++ --dlib_config "C:\Program    /
//                       Files\IAR Systems\Embedded Workbench                /
//                       4.0\arm\LIB\dl4tpainl8f.h" -I                       /
//                       D:\S2Prog\TXU\GUI\CORE\ -I D:\S2Prog\TXU\GUI\WM\    /
//                       -I D:\S2Prog\TXU\GUI\WIDGET\ -I                     /
//                       D:\S2Prog\TXU\CONFIG\ -I D:\S2Prog\TXU\INC\ -I      /
//                       D:\S2Prog\TXU\..\SHARED\INC\ -I                     /
//                       D:\S2Prog\TXU\..\SHARED\SRC\ -I                     /
//                       D:\S2Prog\TXU\..\SHARED\LZO\minilzo.108\ -I         /
//                       "C:\Program Files\IAR Systems\Embedded Workbench    /
//                       4.0\arm\INC\"                                       /
//    List file       =  D:\S2Prog\TXU\TargetDebug\List\SCADCard.s79         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME SCADCard

        RTMODEL "ARMv4M", "USED"
        RTMODEL "ARMv4T", "USED"
        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__dlib_full_locale_support", "1"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?call_ctors

        PUBLIC ??ADSensorType
        MULTWEAK ??ANPRO10SendNormal??rA
        MULTWEAK ??ANPRO10_IO_Receive??rA
        PUBLIC ??ANPRO10_IO_UnpackPacket
        FUNCTION ??ANPRO10_IO_UnpackPacket,0603H
        LOCFRAME CSTACK, 144, STACK
        MULTWEAK ??ANPRO10_IO_UnpackPacket??rT
        PUBLIC ??Add
        FUNCTION ??Add,0203H
        LOCFRAME CSTACK, 696, STACK
        MULTWEAK ??Add??rT
        MULTWEAK ??AddAlarms??rA
        MULTWEAK ??AddAlarms??rA_1
        PUBLIC ??AddCommand
        FUNCTION ??AddCommand,0203H
        MULTWEAK ??AddCommand??rT
        MULTWEAK ??CheckAlarms??rA
        PUBLIC ??Correct_AD_Config
        FUNCTION ??Correct_AD_Config,0203H
        LOCFRAME CSTACK, 128, STACK
        MULTWEAK ??Correct_AD_Config??rT
        PUBLIC ??EEPromInfo
        MULTWEAK ??FindSignalConverter??rA
        PUBLIC ??GetEEPromData
        FUNCTION ??GetEEPromData,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??GetEEPromData??rT
        PUBLIC ??GetStringValue
        FUNCTION ??GetStringValue,0603H
        LOCFRAME CSTACK, 296, STACK
        MULTWEAK ??GetStringValue??rA
        MULTWEAK ??GetStringValue??rT
        PUBLIC ??GetValue
        FUNCTION ??GetValue,0603H
        LOCFRAME CSTACK, 28, STACK
        MULTWEAK ??GetValue??rA
        MULTWEAK ??GetValue??rT
        PUBLIC ??GetValueInfoTable
        FUNCTION ??GetValueInfoTable,0603H
        MULTWEAK ??GetValueInfoTable??rT
        PUBLIC ??HandleCard
        FUNCTION ??HandleCard,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??HandleCard??rT
        MULTWEAK ??HardwareSetupWarning??rA
        MULTWEAK ??KeyWord??rA
        MULTWEAK ??LibGetText??rA
        MULTWEAK ??PROLinkedList??rA
        MULTWEAK ??PackSensorData??rA
        PUBLIC ??PutFloatValue
        FUNCTION ??PutFloatValue,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??PutFloatValue??rA
        MULTWEAK ??PutFloatValue??rT
        PUBLIC ??PutValue
        FUNCTION ??PutValue,0603H
        LOCFRAME CSTACK, 44, STACK
        MULTWEAK ??PutValue??rA
        MULTWEAK ??PutValue??rT
        MULTWEAK ??RecalcProgramObjects??rA
        PUBLIC ??ReceiveData
        FUNCTION ??ReceiveData,0603H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??ReceiveData??rT
        PUBLIC ??RequestMeasuredData
        FUNCTION ??RequestMeasuredData,0603H
        LOCFRAME CSTACK, 24, STACK
        MULTWEAK ??RequestMeasuredData??rT
        PUBLIC ??SCADCard
        FUNCTION ??SCADCard,0203H
        LOCFRAME CSTACK, 100, STACK
        MULTWEAK ??SCADCard??rT
        PUBLIC ??SendData
        FUNCTION ??SendData,0603H
        LOCFRAME CSTACK, 236, STACK
        MULTWEAK ??SendData??rT
        PUBLIC ??SendGainAndOffset
        FUNCTION ??SendGainAndOffset,0203H
        LOCFRAME CSTACK, 92, STACK
        MULTWEAK ??SendGainAndOffset??rT
        MULTWEAK ??SendPacket??rA
        PUBLIC ??SendToAD
        FUNCTION ??SendToAD,0203H
        LOCFRAME CSTACK, 108, STACK
        MULTWEAK ??SendToAD??rT
        MULTWEAK ??SendToAD??rT_1
        PUBLIC ??SendToAD_1
        FUNCTION ??SendToAD_1,0203H
        LOCFRAME CSTACK, 104, STACK
        MULTWEAK ??SetAlarmsToNormal??rA
        PUBLIC ??SetHWFailure
        FUNCTION ??SetHWFailure,0603H
        LOCFRAME CSTACK, 20, STACK
        MULTWEAK ??SetHWFailure??rT
        MULTWEAK ??SetPROPtr??rA
        MULTWEAK ??SignalConverter??rA
        MULTWEAK ??Size??rA
        PUBWEAK ??TSNString
        FUNCTION ??TSNString,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??TSNString??rA
        MULTWEAK ??TSNString??rA_1
        MULTWEAK ??TSNString??rA_2
        MULTWEAK ??TSNString??rA_3
        MULTWEAK ??UnpackSensorData??rA
        PUBWEAK ??_String_val
        FUNCTION ??_String_val,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??_String_val??rA
        MULTWEAK ??_Tidy??rA
        FUNCTION ??__sti__routine,010203H
        PUBLIC ??__vtbl
        PUBWEAK ??append
        FUNCTION ??append,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??append??rA
        MULTWEAK ??append??rA_1
        MULTWEAK ??append??rA_2
        MULTWEAK ??append??rA_3
        PUBWEAK ??append_1
        FUNCTION ??append_1,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBWEAK ??assign
        FUNCTION ??assign,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??assign??rA
        MULTWEAK ??assign??rA_1
        MULTWEAK ??assign??rA_2
        MULTWEAK ??assign??rA_3
        PUBWEAK ??assign_1
        FUNCTION ??assign_1,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBWEAK ??char_allocator
        FUNCTION ??char_allocator,0203H
        MULTWEAK ??char_allocator??rA
        MULTWEAK ??char_allocator??rA_1
        PUBWEAK ??char_allocator_1
        FUNCTION ??char_allocator_1,0203H
        MULTWEAK `??delete ~PROLinkedList??rA`
        MULTWEAK ??getElement??rA
        MULTWEAK ??getHead??rA
        MULTWEAK ??getNext??rA
        MULTWEAK ??insertInOrder??rA
        MULTWEAK ??insertInOrderIfUnique??rA
        MULTWEAK ??insertLast??rA
        MULTWEAK ??isEmty??rA
        PUBWEAK ??length
        FUNCTION ??length,0203H
        MULTWEAK ??length??rA
        PUBLIC `??new SCADCard`
        FUNCTION `??new SCADCard`,0203H
        LOCFRAME CSTACK, 16, STACK
        MULTWEAK `??new SCADCard??rT`
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        PUBWEAK `??operator+`
        FUNCTION `??operator+`,0203H
        LOCFRAME CSTACK, 40, STACK
        PUBWEAK `??operator+=`
        FUNCTION `??operator+=`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??operator+=??rA`
        MULTWEAK `??operator+=??rA_1`
        PUBWEAK `??operator+=_1`
        FUNCTION `??operator+=_1`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??operator+??rA`
        MULTWEAK `??operator+??rA_1`
        MULTWEAK `??operator+??rA_2`
        PUBWEAK `??operator+_1`
        FUNCTION `??operator+_1`,0203H
        LOCFRAME CSTACK, 40, STACK
        PUBWEAK `??operator+_2`
        FUNCTION `??operator+_2`,0203H
        LOCFRAME CSTACK, 40, STACK
        PUBWEAK `??operator=`
        FUNCTION `??operator=`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??operator=??rA`
        MULTWEAK `??operator=??rA_1`
        PUBWEAK `??operator=_1`
        FUNCTION `??operator=_1`,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBWEAK ??string
        FUNCTION ??string,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??string??rA
        MULTWEAK ??string??rA_1
        PUBWEAK ??string_1
        FUNCTION ??string_1,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC `?~SCADCard`
        FUNCTION `?~SCADCard`,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK `?~SCADCard??rT`
        MULTWEAK `?~SignalConverter??rA`
        PUBWEAK `?~TSNString`
        FUNCTION `?~TSNString`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `?~TSNString??rA`
        PUBWEAK `?~string`
        FUNCTION `?~string`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `?~string??rA`
        MULTWEAK OS_Delay??rA
        MULTWEAK OS_SignalEvent??rA
        MULTWEAK __fNotEqual??rA
        MULTWEAK __longToFloat??rA
        MULTWEAK __ulongToFloat??rA
        MULTWEAK memcmp??rA
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

`?<Name string 8>`  SYMBOL "string"





































??npos              SYMBOL "npos", `?<Name string 8>`



OS_Delay            SYMBOL "OS_Delay"
OS_SignalEvent      SYMBOL "OS_SignalEvent"
__fNotEqual         SYMBOL "__fNotEqual"
__longToFloat       SYMBOL "__longToFloat"
__ulongToFloat      SYMBOL "__ulongToFloat"
memcmp              SYMBOL "memcmp"
`?<Name SCADCard 288>` SYMBOL "SCADCard"
??ADSensorType      SYMBOL "ADSensorType", `?<Name SCADCard 288>`
??ANPRO10SendNormal??rA SYMBOL "??rA", ??ANPRO10SendNormal
??ANPRO10_IO_Receive??rA SYMBOL "??rA", ??ANPRO10_IO_Receive

??ANPRO10_IO_UnpackPacket??rT SYMBOL "??rT", ??ANPRO10_IO_UnpackPacket

??Add??rT           SYMBOL "??rT", ??Add
??AddAlarms??rA     SYMBOL "??rA", ??AddAlarms
??AddAlarms??rA_1   SYMBOL "??rA", ??AddAlarms_1

??AddCommand??rT    SYMBOL "??rT", ??AddCommand
??CheckAlarms??rA   SYMBOL "??rA", ??CheckAlarms

??Correct_AD_Config??rT SYMBOL "??rT", ??Correct_AD_Config
??EEPromInfo        SYMBOL "EEPromInfo", `?<Name SCADCard 288>`
??FindSignalConverter??rA SYMBOL "??rA", ??FindSignalConverter

??GetEEPromData??rT SYMBOL "??rT", ??GetEEPromData

??GetStringValue??rA SYMBOL "??rA", ??GetStringValue_1
??GetStringValue??rT SYMBOL "??rT", ??GetStringValue

??GetValue??rA      SYMBOL "??rA", ??GetValue_1
??GetValue??rT      SYMBOL "??rT", ??GetValue

??GetValueInfoTable??rT SYMBOL "??rT", ??GetValueInfoTable

??HandleCard??rT    SYMBOL "??rT", ??HandleCard
??HardwareSetupWarning??rA SYMBOL "??rA", ??HardwareSetupWarning
??KeyWord??rA       SYMBOL "??rA", ??KeyWord
??LibGetText??rA    SYMBOL "??rA", ??LibGetText
??PROLinkedList??rA SYMBOL "??rA", ??PROLinkedList
??PackSensorData??rA SYMBOL "??rA", ??PackSensorData

??PutFloatValue??rA SYMBOL "??rA", ??PutFloatValue_1
??PutFloatValue??rT SYMBOL "??rT", ??PutFloatValue

??PutValue??rA      SYMBOL "??rA", ??PutValue_1
??PutValue??rT      SYMBOL "??rT", ??PutValue
??RecalcProgramObjects??rA SYMBOL "??rA", ??RecalcProgramObjects

??ReceiveData??rT   SYMBOL "??rT", ??ReceiveData

??RequestMeasuredData??rT SYMBOL "??rT", ??RequestMeasuredData

??SCADCard??rT      SYMBOL "??rT", ??SCADCard

??SendData??rT      SYMBOL "??rT", ??SendData

??SendGainAndOffset??rT SYMBOL "??rT", ??SendGainAndOffset
??SendPacket??rA    SYMBOL "??rA", ??SendPacket

??SendToAD??rT      SYMBOL "??rT", ??SendToAD

??SendToAD??rT_1    SYMBOL "??rT", ??SendToAD_1
??SetAlarmsToNormal??rA SYMBOL "??rA", ??SetAlarmsToNormal

??SetHWFailure??rT  SYMBOL "??rT", ??SetHWFailure
??SetPROPtr??rA     SYMBOL "??rA", ??SetPROPtr
??SignalConverter??rA SYMBOL "??rA", ??SignalConverter
??Size??rA          SYMBOL "??rA", ??Size

??TSNString??rA     SYMBOL "??rA", ??TSNString_1
??TSNString??rA_1   SYMBOL "??rA", ??TSNString_2
??TSNString??rA_2   SYMBOL "??rA", ??TSNString_3
??TSNString??rA_3   SYMBOL "??rA", ??TSNString
??UnpackSensorData??rA SYMBOL "??rA", ??UnpackSensorData

??_String_val??rA   SYMBOL "??rA", ??_String_val
??_Tidy??rA         SYMBOL "??rA", ??_Tidy
??__vtbl            SYMBOL "__vtbl", `?<Name SCADCard 288>`

??append??rA        SYMBOL "??rA", ??append

??append??rA_1      SYMBOL "??rA", ??append_1
??append??rA_2      SYMBOL "??rA", ??append_2
??append??rA_3      SYMBOL "??rA", ??append_3

??assign??rA        SYMBOL "??rA", ??assign_2

??assign??rA_1      SYMBOL "??rA", ??assign_1
??assign??rA_2      SYMBOL "??rA", ??assign
??assign??rA_3      SYMBOL "??rA", ??assign_3

??char_allocator??rA SYMBOL "??rA", ??char_allocator

??char_allocator??rA_1 SYMBOL "??rA", ??char_allocator_1
`??delete ~PROLinkedList??rA` SYMBOL "??rA", `??delete ~PROLinkedList`
??getElement??rA    SYMBOL "??rA", ??getElement
??getHead??rA       SYMBOL "??rA", ??getHead
??getNext??rA       SYMBOL "??rA", ??getNext
??insertInOrder??rA SYMBOL "??rA", ??insertInOrder
??insertInOrderIfUnique??rA SYMBOL "??rA", ??insertInOrderIfUnique
??insertLast??rA    SYMBOL "??rA", ??insertLast
??isEmty??rA        SYMBOL "??rA", ??isEmty

??length??rA        SYMBOL "??rA", ??length

`??new SCADCard??rT` SYMBOL "??rT", `??new SCADCard`
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`


`??operator+=??rA`  SYMBOL "??rA", `??operator+=`

`??operator+=??rA_1` SYMBOL "??rA", `??operator+=_1`

`??operator+??rA`   SYMBOL "??rA", `??operator+_1`
`??operator+??rA_1` SYMBOL "??rA", `??operator+`

`??operator+??rA_2` SYMBOL "??rA", `??operator+_2`

`??operator=??rA`   SYMBOL "??rA", `??operator=`

`??operator=??rA_1` SYMBOL "??rA", `??operator=_1`

??string??rA        SYMBOL "??rA", ??string

??string??rA_1      SYMBOL "??rA", ??string_1

`?~SCADCard??rT`    SYMBOL "??rT", `?~SCADCard`
`?~SignalConverter??rA` SYMBOL "??rA", `?~SignalConverter`

`?~TSNString??rA`   SYMBOL "??rA", `?~TSNString`

`?~string??rA`      SYMBOL "??rA", `?~string`
OS_Delay??rA        SYMBOL "??rA", OS_Delay
OS_SignalEvent??rA  SYMBOL "??rA", OS_SignalEvent
__fNotEqual??rA     SYMBOL "??rA", __fNotEqual
__longToFloat??rA   SYMBOL "??rA", __longToFloat
__ulongToFloat??rA  SYMBOL "??rA", __ulongToFloat
memcmp??rA          SYMBOL "??rA", memcmp

        EXTERN ??ANPRO10SendNormal
        FUNCTION ??ANPRO10SendNormal,0202H
        EXTERN ??ANPRO10_IO_Receive
        FUNCTION ??ANPRO10_IO_Receive,0202H
        EXTERN ??AddAlarms
        FUNCTION ??AddAlarms,0202H
        EXTERN ??AddAlarms_1
        FUNCTION ??AddAlarms_1,0202H
        EXTERN ??Calculate
        FUNCTION ??Calculate,0602H
        EXTERN ??CheckAlarms
        FUNCTION ??CheckAlarms,0202H
        EXTERN ??FindPROStatus
        FUNCTION ??FindPROStatus,0602H
        EXTERN ??FindSignalConverter
        FUNCTION ??FindSignalConverter,0202H
        EXTERN ??GetServiceValueInfoTable
        FUNCTION ??GetServiceValueInfoTable,0602H
        EXTERN ??GetStringValue_1
        FUNCTION ??GetStringValue_1,0202H
        EXTERN ??GetValue_1
        FUNCTION ??GetValue_1,0202H
        EXTERN ??HardwareSetupWarning
        FUNCTION ??HardwareSetupWarning,0202H
        EXTERN ??InputTimeout
        FUNCTION ??InputTimeout,0602H
        EXTERN ??KeyWord
        FUNCTION ??KeyWord,0202H
        EXTERN ??LibGetText
        FUNCTION ??LibGetText,0202H
        EXTERN ??LoadConfigFromFile
        FUNCTION ??LoadConfigFromFile,0602H
        EXTERN ??LoadConfigString
        FUNCTION ??LoadConfigString,0602H
        EXTERN ??MakeConfigString
        FUNCTION ??MakeConfigString,0602H
        EXTERN ??PROLinkedList
        FUNCTION ??PROLinkedList,0202H
        EXTERN ??PackSensorData
        FUNCTION ??PackSensorData,0202H
        EXTERN ??PutFloatValue_1
        FUNCTION ??PutFloatValue_1,0202H
        EXTERN ??PutValue_1
        FUNCTION ??PutValue_1,0202H
        EXTERN ??RecalcProgramObjects
        FUNCTION ??RecalcProgramObjects,0202H
        EXTERN ??RestoreSettings
        FUNCTION ??RestoreSettings,0602H
        EXTERN ??SaveSettings
        FUNCTION ??SaveSettings,0602H
        EXTERN ??SendPacket
        FUNCTION ??SendPacket,0202H
        EXTERN ??SetAlarmsToNormal
        FUNCTION ??SetAlarmsToNormal,0202H
        EXTERN ??SetModifiedFlag
        FUNCTION ??SetModifiedFlag,0602H
        EXTERN ??SetPROPtr
        FUNCTION ??SetPROPtr,0202H
        EXTERN ??SignalConverter
        FUNCTION ??SignalConverter,0202H
        EXTERN ??Size
        FUNCTION ??Size,0202H
        EXTERN ??SortAnalogInputs
        FUNCTION ??SortAnalogInputs,0602H
        EXTERN ??StartTimer
        FUNCTION ??StartTimer,0602H
        EXTERN ??TSNString_1
        FUNCTION ??TSNString_1,0202H
        EXTERN ??TSNString_2
        FUNCTION ??TSNString_2,0202H
        EXTERN ??TSNString_3
        FUNCTION ??TSNString_3,0202H
        EXTERN ??UnpackSensorData
        FUNCTION ??UnpackSensorData,0202H
        EXTERN ??WriteConfigToFile
        FUNCTION ??WriteConfigToFile,0602H
        EXTERN ??_Tidy
        FUNCTION ??_Tidy,0202H
        EXTERN ??append_2
        FUNCTION ??append_2,0202H
        EXTERN ??append_3
        FUNCTION ??append_3,0202H
        EXTERN ??assign_2
        FUNCTION ??assign_2,0202H
        EXTERN ??assign_3
        FUNCTION ??assign_3,0202H
        EXTERN `??delete ~PROLinkedList`
        FUNCTION `??delete ~PROLinkedList`,0202H
        EXTERN ??getElement
        FUNCTION ??getElement,0202H
        EXTERN ??getHead
        FUNCTION ??getHead,0202H
        EXTERN ??getNext
        FUNCTION ??getNext,0202H
        EXTERN ??insertInOrder
        FUNCTION ??insertInOrder,0202H
        EXTERN ??insertInOrderIfUnique
        FUNCTION ??insertInOrderIfUnique,0202H
        EXTERN ??insertLast
        FUNCTION ??insertLast,0202H
        EXTERN ??isEmty
        FUNCTION ??isEmty,0202H
        EXTERN ??npos
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `?~SignalConverter`
        FUNCTION `?~SignalConverter`,0202H
        EXTERN GUI_Font13_1
        EXTERN GUI_Font16_1
        EXTERN GUI_Font24_1
        EXTERN GlobalHW_UnitList
        EXTERN GlobalPRO_IOList
        EXTERN OS_Delay
        FUNCTION OS_Delay,0202H
        EXTERN OS_SignalEvent
        FUNCTION OS_SignalEvent,0202H
        EXTERN SCAdCardValueList
        EXTERN SaveSettingsTaskHandle
        EXTERN SizeofSCAdCardValueList
        EXTERN SizeofStatusText
        EXTERN StatusText
        EXTERN __fNotEqual
        FUNCTION __fNotEqual,0202H
        EXTERN __longToFloat
        FUNCTION __longToFloat,0202H
        EXTERN __ulongToFloat
        FUNCTION __ulongToFloat,0202H
        EXTERN memcmp
        FUNCTION memcmp,010202H

// D:\S2Prog\Shared\Src\SCADCard.cpp
//    1 //---------------------------------------------------------------------------
//    2 #ifdef BORLAND
//    3 	#pragma hdrstop
//    4 	#pragma package(smart_init)
//    5 #endif
//    6 #include "TSNIncludes.h"

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
// static GUI_FONT const __data TDU_FONT_ST
??TDU_FONT_ST:
        DS8 32

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
// static GUI_FONT const __data TDU_FONT_PW
??TDU_FONT_PW:
        DS8 32

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
// static GUI_FONT const __data TDU_FONT_HW
??TDU_FONT_HW:
        DS8 32

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
// static GUI_FONT const __data TDU_FONT_BU
??TDU_FONT_BU:
        DS8 32

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
// static GUI_FONT const __data TDU_FONT_HEADING
??TDU_FONT_HEADING:
        DS8 32

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
// static GUI_FONT const __data TDU_FONT_BIG
??TDU_FONT_BIG:
        DS8 32

        RSEG DATA_C:CONST:SORT:NOROOT(2)
// __vtbl_entry const __data SCADCard::__vtbl[26]
??__vtbl:
        DATA
        DC32 `?~SCADCard`, ??WriteConfigToFile, ??LoadConfigFromFile
        DC32 ??MakeConfigString, ??LoadConfigString, ??RestoreSettings
        DC32 ??FindPROStatus, ??GetValue, ??GetStringValue, ??PutValue
        DC32 ??PutFloatValue, ??ReceiveData, ??SendData, ??StartTimer
        DC32 ??InputTimeout, ??GetValueInfoTable, ??GetServiceValueInfoTable
        DC32 ??SetModifiedFlag, ??SortAnalogInputs, ??SaveSettings, ??Calculate
        DC32 ??ANPRO10_IO_UnpackPacket, ??SetHWFailure, ??RequestMeasuredData
        DC32 ??GetEEPromData, ??HandleCard

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ADCard:">`:
        DATA
        DC8 "ADCard:"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "TCU ">`:
        DATA
        DC8 "TCU "
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant " com-port ">`:
        DATA
        DC8 " com-port "
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant ".\\n">`:
        DATA
        DC8 ".\012"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Channel ">`:
        DATA
        DC8 "Channel "
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant " on ADCard on channel">`:
        DATA
        DC8 " on ADCard on channel"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant " on IO ">`:
        DATA
        DC8 " on IO "

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant " addr.">`:
        DATA
        DC8 " addr."
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\nChannel allredy used...">`:
        DATA
        DC8 "\012Channel allredy used.\012 Try to set sensor for "
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "">`:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant {(unsigned char)'\\005', (unsigned c`:
        DATA
        DC8 5, 2, 0
//    7 //---------------------------------------------------------------------------

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//    8 const char SCADCard::EEPromInfo[4][5]   = {"None","OK","Err","NoUs"};
??EEPromInfo:
        DATA
        DC8 "None"
        DC8 "OK"
        DC8 0, 0
        DC8 "Err"
        DC8 0
        DC8 "NoUs"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//    9 const char SCADCard::ADSensorType[AD_SNS_TYPES][10] ={"Unknown","Temp","Other","Press"};
??ADSensorType:
        DATA
        DC8 "Unknown"
        DC8 0, 0
        DC8 "Temp"
        DC8 0, 0, 0, 0, 0
        DC8 "Other"
        DC8 0, 0, 0, 0
        DC8 "Press"
        DC8 0, 0, 0, 0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        CODE16
`??new SCADCard??rT`:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock0
        REQUIRE `??new SCADCard`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function `??new SCADCard`
        CODE32
// __??Code32?? __code __interwork __atpcs SCADCard &SCADCard::new SCADCard(PROIOComponent *, PRogramObject *, ANPRO10Object *)
`??new SCADCard`:
        STMDB       SP!,{R4-R6,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV         R4,R0
        MOV         R5,R1
        MOV         R6,R2
        MOV         R0,#+0x2B8
        _BLF        `??operator new`,`??operator new??rA`
        CMP         R0,#+0
        BEQ         `??new SCADCard_1`
        MOV         R3,R6
        MOV         R2,R5
        MOV         R1,R4
        BL          ??SCADCard
`??new SCADCard_1`:
        LDMIA       SP!,{R4-R6,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CODE16
??__sti__routine??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock2
        REQUIRE ??__sti__routine

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??__sti__routine
        CODE32
// static __??Code32?? __intrinsic __code __interwork __atpcs void __sti__routine()
??__sti__routine:
        LDR         R0,??__sti__routine_1  ;; ??TDU_FONT_ST
        LDR         R1,??__sti__routine_1+0x4  ;; GUI_Font13_1
        MOV         R3,#+0x20
??__sti__routine_2:
        SUBS        R3,R3,#+0x4
        LDR         R2,[R1, R3]
        STR         R2,[R0, R3]
        BNE         ??__sti__routine_2
        LDR         R12,??__sti__routine_1+0x8  ;; ??TDU_FONT_PW
        LDR         R0,??__sti__routine_1+0xC  ;; GUI_Font16_1
        MOV         R2,#+0x20
??__sti__routine_3:
        SUBS        R2,R2,#+0x4
        LDR         R1,[R0, R2]
        STR         R1,[R12, R2]
        BNE         ??__sti__routine_3
        LDR         R3,??__sti__routine_1+0x10  ;; ??TDU_FONT_HW
        LDR         R12,??__sti__routine_1+0xC  ;; GUI_Font16_1
        MOV         R1,#+0x20
??__sti__routine_4:
        SUBS        R1,R1,#+0x4
        LDR         R0,[R12, R1]
        STR         R0,[R3, R1]
        BNE         ??__sti__routine_4
        LDR         R2,??__sti__routine_1+0x14  ;; ??TDU_FONT_BU
        LDR         R3,??__sti__routine_1+0x4  ;; GUI_Font13_1
        MOV         R0,#+0x20
??__sti__routine_5:
        SUBS        R0,R0,#+0x4
        LDR         R12,[R3, R0]
        STR         R12,[R2, R0]
        BNE         ??__sti__routine_5
        LDR         R1,??__sti__routine_1+0x18  ;; ??TDU_FONT_HEADING
        LDR         R2,??__sti__routine_1+0x4  ;; GUI_Font13_1
        MOV         R12,#+0x20
??__sti__routine_6:
        SUBS        R12,R12,#+0x4
        LDR         R3,[R2, R12]
        STR         R3,[R1, R12]
        BNE         ??__sti__routine_6
        LDR         R0,??__sti__routine_1+0x1C  ;; ??TDU_FONT_BIG
        LDR         R1,??__sti__routine_1+0x20  ;; GUI_Font24_1
        MOV         R3,#+0x20
??__sti__routine_7:
        SUBS        R3,R3,#+0x4
        LDR         R2,[R1, R3]
        STR         R2,[R0, R3]
        BNE         ??__sti__routine_7
        BX          LR                 ;; return
        DATA
??__sti__routine_1:
        DC32        ??TDU_FONT_ST
        DC32        GUI_Font13_1
        DC32        ??TDU_FONT_PW
        DC32        GUI_Font16_1
        DC32        ??TDU_FONT_HW
        DC32        ??TDU_FONT_BU
        DC32        ??TDU_FONT_HEADING
        DC32        ??TDU_FONT_BIG
        DC32        GUI_Font24_1
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CODE16
??SCADCard??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock4
        REQUIRE ??SCADCard
//   10 
//   11 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??SCADCard
        CODE32
//   12 SCADCard::SCADCard(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr,ANPRO10Object *IOModulePtr):SignalConverter(IOCompPtr->TCUPortNo,IOModulePtr)
??SCADCard:
        STMDB       SP!,{R4-R6,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB         SP,SP,#+0x54
        CFI CFA R13+100
        MOV         R4,R0
        MOV         R5,R1
        MOV         R6,R2
        MOV         R2,R3
//   13 {
        LDR         R1,[R5, #+0x78]
        _BLF        ??SignalConverter,??SignalConverter??rA
        LDR         R1,??SCADCard_1    ;; ??__vtbl
        STR         R1,[R4, #+0x50]
//   14 	Type            = C_SC_ADCARD;
        MOV         R2,#+0x21
        ORR         R2,R2,#+0x800
        STR         R2,[R4, #+0x48]
//   15 	PROList         = NULL;
        MOV         R3,#+0
        STR         R3,[R4, #+0x278]
//   16 	UniquePROList   = NULL;
        MOV         R12,R3
        STR         R12,[R4, #+0x27C]
//   17 	Restart         = true;
        MOV         R0,#+0x1
        STRB        R0,[R4, #+0x194]
//   18 	NewSensor       = true;
        MOV         R1,R0
        STRB        R1,[R4, #+0x195]
//   19 	RxBufSize       = 0;
        MOV         R2,R3
        STRB        R2,[R4, #+0x270]
//   20 	TxBufSize       = 0;
        STRB        R3,[R4, #+0x271]
//   21 	CalNull         = 0;
        MOV         R12,#+0x72
        ORR         R12,R12,#+0x200
        MOV         R0,R2
        STRH        R0,[R12, +R4]
//   22 	CalGain         = 1.0;
        MOV         R1,#+0x3F800000
        STR         R1,[R4, #+0x274]
//   23 	RequestADConfig = false;
        STRB        R2,[R4, #+0x1C0]
//   24 	RequestRawCnt   = 0;
        STR         R3,[R4, #+0x1C4]
//   25 	memset((void*)&ADConfigData,0,sizeof(ADConfigData));
        MOV         R12,#+0x38
        ADD         R1,R4,#+0x1C8
??SCADCard_2:
        SUBS        R12,R12,#+0x1
        STRB        R0,[R1, R12]
        BNE         ??SCADCard_2
//   26 	for ( int i=0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
        B           ??SCADCard_3
//   27 		IOComponent[i] = NULL;
??SCADCard_4:
        ADD         R2,R4,R0, LSL #+0x2
        MOV         R3,#+0
        STR         R3,[R2, #+0x280]
//   28 		MsrdValues[i]  = 0;
        ADD         R12,R4,R0, LSL #+0x2
        MOV         R1,R3
        STR         R1,[R12, #+0x200]
//   29 		CalValues[i]   = 0;
        ADD         R2,R4,R0, LSL #+0x1
        ADD         R3,R2,#+0x238
        MOV         R12,R1
        STRH        R12,[R3, #+0]
//   30 		RawValues[i]   = 0;
        ADD         R1,R4,R0, LSL #+0x1
        ADD         R2,R1,#+0x254
        MOV         R3,R12
        STRH        R3,[R2, #+0]
//   31 		ADConfigData[i].CalError        = false;
        ADD         R12,R4,R0, LSL #+0x2
        ADD         R1,R4,R0, LSL #+0x2
        LDR         R2,[R1, #+0x1C8]
        BIC         R3,R2,#+0x2
        STR         R3,[R12, #+0x1C8]
//   32 		ADConfigData[i].ConvError       = false;
        LDR         R2,[R1, #+0x1C8]
        BIC         R3,R2,#+0x1
        STR         R3,[R12, #+0x1C8]
//   33 		ADConfigData[i].PCSensor        = 0;
        LDR         R2,[R1, #+0x1C8]
        BIC         R3,R2,#+0xC
        STR         R3,[R12, #+0x1C8]
//   34 		ADConfigData[i].UsePCSetUp      = false;
        LDR         R2,[R1, #+0x1C8]
        BIC         R3,R2,#+0x10
        STR         R3,[R12, #+0x1C8]
//   35 		ADConfigData[i].FoundSensor     = 0;
        LDR         R2,[R1, #+0x1C8]
        BIC         R3,R2,#+0x60
        STR         R3,[R12, #+0x1C8]
//   36 		ADConfigData[i].NewSensor       = false;
        LDR         R2,[R1, #+0x1C8]
        BIC         R3,R2,#+0x80
        STR         R3,[R12, #+0x1C8]
//   37 		ADConfigData[i].EEP_PCStatus    = 0;
        LDR         R2,[R1, #+0x1C8]
        BIC         R3,R2,#+0x700
        STR         R3,[R12, #+0x1C8]
//   38 		ADConfigData[i].EEPUsePCData    = false;
        LDR         R2,[R1, #+0x1C8]
        BIC         R3,R2,#+0x800
        STR         R3,[R12, #+0x1C8]
//   39 		ADConfigData[i].EEPromStatus    = AD_EEPROM_OK;
        LDR         R2,[R1, #+0x1C8]
        BIC         R3,R2,#+0xF000
        ORR         R1,R3,#+0x1000
        STR         R1,[R12, #+0x1C8]
//   40 	}
        ADD         R0,R0,#+0x1
??SCADCard_3:
        CMP         R0,#+0xE
        BLT         ??SCADCard_4
//   41 
//   42 	TCUAddress = IOCompPtr->TCUAddress;
        LDR         R0,[R5, #+0x74]
        STR         R0,[R4, #+0x1A4]
//   43 	TCUPortNo = IOCompPtr->TCUPortNo;;
        LDR         R12,[R5, #+0x78]
        STR         R12,[R4, #+0x1A8]
//   44 	IOType = IOCompPtr->IOType;
        LDR         R2,[R5, #+0x7C]
        STR         R2,[R4, #+0x1AC]
//   45 	IOAddress = IOCompPtr->IOAddress;
        LDR         R3,[R5, #+0x80]
        STR         R3,[R4, #+0x1B0]
//   46 	IOChannel = IOCompPtr->IOChannel;
        LDR         R1,[R5, #+0x84]
        STR         R1,[R4, #+0x1B4]
//   47 	SCAddress = IOCompPtr->ADCardChannel;
        LDR         R0,[R5, #+0x88]
        STR         R0,[R4, #+0x1B8]
//   48 	Name = "ADCard:"+(TSNString)(IOChannel+1);
        MOV         R12,R1
        ADD         R1,R12,#+0x1
        ADD         R0,SP,#+0x38
        _BLF        ??TSNString_1,??TSNString??rA
        MOV         R2,R0
        LDR         R1,??SCADCard_1+0x4  ;; `?<Constant "ADCard:">`
        MOV         R0,SP
        _BLF        `??operator+_1`,`??operator+??rA`
        MOV         R1,SP
        ADD         R0,SP,#+0x1C
        _BLF        ??TSNString_2,??TSNString??rA_1
        MOV         R1,R0
        ADD         R0,R4,#+0x8
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0x1C
        _BLF        `?~TSNString`,`?~TSNString??rA`
        MOV         R0,SP
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0x38
        _BLF        `?~TSNString`,`?~TSNString??rA`
//   49 	Add(IOCompPtr, ElementPtr);
        MOV         R2,R6
        MOV         R1,R5
        MOV         R0,R4
        BL          ??Add
//   50 	if ( !GlobalPRO_IOList ) GlobalPRO_IOList = new PROLinkedList();
        LDR         R5,??SCADCard_1+0x8  ;; GlobalPRO_IOList
        LDR         R6,[R5, #+0]
        CMP         R6,#+0
        BNE         ??SCADCard_5
        MOV         R0,#+0x28
        _BLF        `??operator new`,`??operator new??rA`
        MOV         R5,R0
        CMP         R5,#+0
        BEQ         ??SCADCard_6
        MOV         R2,#+0
        MOV         R1,R2
        _BLF        ??PROLinkedList,??PROLinkedList??rA
        LDR         R2,??SCADCard_1+0x8  ;; GlobalPRO_IOList
        STR         R5,[R2, #+0]
        B           ??SCADCard_5
??SCADCard_6:
        LDR         R3,??SCADCard_1+0x8  ;; GlobalPRO_IOList
        MOV         R1,#+0
        STR         R1,[R3, #+0]
//   51 	GlobalPRO_IOList->insertInOrder(this);
??SCADCard_5:
        MOV         R1,R4
        LDR         R0,??SCADCard_1+0x8  ;; GlobalPRO_IOList
        LDR         R0,[R0, #+0]
        _BLF        ??insertInOrder,??insertInOrder??rA
//   52 	if ( !GlobalHW_UnitList )	GlobalHW_UnitList = new PROLinkedList();
        LDR         R12,??SCADCard_1+0xC  ;; GlobalHW_UnitList
        LDR         R5,[R12, #+0]
        CMP         R5,#+0
        BNE         ??SCADCard_7
        MOV         R0,#+0x28
        _BLF        `??operator new`,`??operator new??rA`
        MOV         R6,R0
        CMP         R6,#+0
        BEQ         ??SCADCard_8
        MOV         R2,#+0
        MOV         R1,R2
        _BLF        ??PROLinkedList,??PROLinkedList??rA
        LDR         R2,??SCADCard_1+0xC  ;; GlobalHW_UnitList
        STR         R6,[R2, #+0]
        B           ??SCADCard_7
??SCADCard_8:
        LDR         R6,??SCADCard_1+0xC  ;; GlobalHW_UnitList
        MOV         R3,#+0
        STR         R3,[R6, #+0]
//   53 	GlobalHW_UnitList->insertLast(this);
??SCADCard_7:
        MOV         R1,R4
        LDR         R0,??SCADCard_1+0xC  ;; GlobalHW_UnitList
        LDR         R0,[R0, #+0]
        _BLF        ??insertLast,??insertLast??rA
//   54 }
        MOV         R0,R4
        ADD         SP,SP,#+0x54       ;; stack cleaning
        CFI CFA R13+16
        LDMIA       SP!,{R4-R6,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        DATA
??SCADCard_1:
        DC32        ??__vtbl
        DC32        `?<Constant "ADCard:">`
        DC32        GlobalPRO_IOList
        DC32        GlobalHW_UnitList
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CODE16
`?~SCADCard??rT`:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock6
        REQUIRE `?~SCADCard`
//   55 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function `?~SCADCard`
        CODE32
//   56 SCADCard::~SCADCard(void)
//   57 {
`?~SCADCard`:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV         R4,R0
        MOV         R5,R1
        CMP         R4,#+0
        BEQ         `?~SCADCard_1`
//   58 	if ( PROList ) {
        LDR         R1,[R4, #+0x278]
        CMP         R1,#+0
        BEQ         `?~SCADCard_2`
//   59 		delete PROList;
        MOV         R0,R1
        _BLF        `??delete ~PROLinkedList`,`??delete ~PROLinkedList??rA`
//   60 		PROList = NULL;
        MOV         R0,#+0
        STR         R0,[R4, #+0x278]
//   61 	}
//   62 	if ( UniquePROList ) {
`?~SCADCard_2`:
        LDR         R2,[R4, #+0x27C]
        CMP         R2,#+0
        BEQ         `?~SCADCard_3`
//   63 		delete UniquePROList;
        MOV         R0,R2
        _BLF        `??delete ~PROLinkedList`,`??delete ~PROLinkedList??rA`
//   64 		UniquePROList = NULL;
        MOV         R3,#+0
        STR         R3,[R4, #+0x27C]
//   65 	}
//   66 }
`?~SCADCard_3`:
        MOV         R1,#+0
        MOV         R0,R4
        _BLF        `?~SignalConverter`,`?~SignalConverter??rA`
        TST         R5,#+0x1
        BEQ         `?~SCADCard_1`
        MOV         R0,R4
        _BLF        `??operator delete`,`??operator delete??rA`
`?~SCADCard_1`:
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CODE16
??Add??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock8
        REQUIRE ??Add
//   67 //---------------------------------------------------------------------------
//   68 
//   69 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??Add
        CODE32
//   70 bool SCADCard::Add(PROIOComponent *IOCompPtr, PRogramObject *ElementPtr)
//   71 {
??Add:
        STMDB       SP!,{R4-R8,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB         SP,SP,#+0x2A0
        CFI CFA R13+696
        MOV         R6,R0
        MOV         R7,R1
        MOV         R5,R2
//   72 	bool SensorAdded = false;
        MOV         R4,#+0
//   73 	if ( IOCompPtr->ADCardChannel >= 0 && IOCompPtr->ADCardChannel < MAX_AN_SGCNV_CHANNELS ) {
        LDR         R2,[R7, #+0x88]
        CMP         R2,#+0
        BMI         ??Add_1
        MOV         R0,R2
        CMP         R0,#+0xE
        BGE         ??Add_1
//   74 		if ( IOComponent[IOCompPtr->ADCardChannel] ) {
        MOV         R1,R0
        ADD         R3,R6,R1, LSL #+0x2
        LDR         R12,[R3, #+0x280]
        CMP         R12,#+0
        BEQ         ??Add_2
//   75 			TSNString Message =(TSNString)"TCU "+(TSNString)IOCompPtr->TCUAddress;
        LDR         R1,[R7, #+0x74]
        ADD         R0,SP,#+0x150
        _BLF        ??TSNString_1,??TSNString??rA
        MOV         R8,R0
        LDR         R1,??Add_3         ;; `?<Constant "TCU ">`
        ADD         R0,SP,#+0x134
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R2,R8
        MOV         R1,R0
        ADD         R0,SP,#+0x1C
        _BLF        `??operator+`,`??operator+??rA_1`
        ADD         R1,SP,#+0x1C
        MOV         R0,SP
        _BLF        ??TSNString_2,??TSNString??rA_1
        ADD         R0,SP,#+0x1C
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0x150
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         R0,SP,#+0x134
        _BLF        `?~TSNString`,`?~TSNString??rA`
//   76 			Message +=(TSNString)" com-port "+(TSNString)IOCompPtr->TCUPortNo+".\n";
        LDR         R1,[R7, #+0x78]
        ADD         R0,SP,#+0x188
        _BLF        ??TSNString_1,??TSNString??rA
        MOV         R8,R0
        LDR         R1,??Add_3+0x4     ;; `?<Constant " com-port ">`
        ADD         R0,SP,#+0x16C
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R2,R8
        ADD         R0,SP,#+0x54
        _BLF        `??operator+`,`??operator+??rA_1`
        LDR         R2,??Add_3+0x8     ;; `?<Constant ".\\n">`
        ADD         R1,SP,#+0x54
        ADD         R0,SP,#+0x38
        _BLF        `??operator+_2`,`??operator+??rA_2`
        ADD         R1,SP,#+0x38
        MOV         R0,SP
        _BLF        `??operator+=`,`??operator+=??rA`
        ADD         R0,SP,#+0x38
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0x54
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0x188
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         R0,SP,#+0x16C
        _BLF        `?~TSNString`,`?~TSNString??rA`
//   77 			Message +=(TSNString)"Channel "+(TSNString)(IOCompPtr->ADCardChannel+1);
        LDR         R8,[R7, #+0x88]
        ADD         R1,R8,#+0x1
        ADD         R0,SP,#+0x1C0
        _BLF        ??TSNString_1,??TSNString??rA
        MOV         R8,R0
        LDR         R1,??Add_3+0xC     ;; `?<Constant "Channel ">`
        ADD         R0,SP,#+0x1A4
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R2,R8
        ADD         R0,SP,#+0x70
        _BLF        `??operator+`,`??operator+??rA_1`
        ADD         R1,SP,#+0x70
        MOV         R0,SP
        _BLF        `??operator+=`,`??operator+=??rA`
        ADD         R0,SP,#+0x70
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0x1C0
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         R0,SP,#+0x1A4
        _BLF        `?~TSNString`,`?~TSNString??rA`
//   78 			Message +=(TSNString)" on ADCard on channel"+(TSNString)(IOCompPtr->IOChannel+1);
        LDR         R7,[R7, #+0x84]
        ADD         R1,R7,#+0x1
        ADD         R0,SP,#+0x1F8
        _BLF        ??TSNString_1,??TSNString??rA
        MOV         R7,R0
        LDR         R1,??Add_3+0x10    ;; `?<Constant " on ADCard on channel">`
        ADD         R0,SP,#+0x1DC
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R2,R7
        MOV         R1,R0
        ADD         R0,SP,#+0x8C
        _BLF        `??operator+`,`??operator+??rA_1`
        ADD         R1,SP,#+0x8C
        MOV         R0,SP
        _BLF        `??operator+=`,`??operator+=??rA`
        ADD         R0,SP,#+0x8C
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0x1F8
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         R0,SP,#+0x1DC
        _BLF        `?~TSNString`,`?~TSNString??rA`
//   79 			Message +=(TSNString)" on IO "+KeyWord(IOType)+" addr."+(TSNString)IOAddress;
        LDR         R1,[R6, #+0x1B0]
        ADD         R0,SP,#+0x230
        _BLF        ??TSNString_1,??TSNString??rA
        MOV         R8,R0
        LDR         R1,[R6, #+0x1AC]
        ADD         R0,SP,#+0xFC
        _BLF        ??KeyWord,??KeyWord??rA
        LDR         R1,??Add_3+0x14    ;; `?<Constant " on IO ">`
        ADD         R0,SP,#+0x214
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        ADD         R2,SP,#+0xFC
        ADD         R0,SP,#+0xE0
        _BLF        `??operator+`,`??operator+??rA_1`
        LDR         R2,??Add_3+0x18    ;; `?<Constant " addr.">`
        ADD         R1,SP,#+0xE0
        ADD         R0,SP,#+0xC4
        _BLF        `??operator+_2`,`??operator+??rA_2`
        MOV         R2,R8
        ADD         R1,SP,#+0xC4
        ADD         R0,SP,#+0xA8
        _BLF        `??operator+`,`??operator+??rA_1`
        ADD         R1,SP,#+0xA8
        MOV         R0,SP
        _BLF        `??operator+=`,`??operator+=??rA`
        ADD         R0,SP,#+0xA8
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0x230
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         R0,SP,#+0xC4
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0xE0
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0xFC
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         R0,SP,#+0x214
        _BLF        `?~TSNString`,`?~TSNString??rA`
//   80 			Message +=(TSNString)"\nChannel allredy used.\n Try to set sensor for ";
        LDR         R1,??Add_3+0x1C    ;; `?<Constant "\\nChannel allredy used...">`
        ADD         R0,SP,#+0x24C
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R0,SP
        _BLF        `??operator+=`,`??operator+=??rA`
        ADD         R0,SP,#+0x24C
        _BLF        `?~TSNString`,`?~TSNString??rA`
//   81 			Message +=(TSNString)ElementPtr->Name+".\n";
        ADD         R1,R5,#+0x8
        ADD         R0,SP,#+0x268
        _BLF        ??TSNString,??TSNString??rA_3
        LDR         R2,??Add_3+0x8     ;; `?<Constant ".\\n">`
        MOV         R1,R0
        ADD         R0,SP,#+0x118
        _BLF        `??operator+_2`,`??operator+??rA_2`
        ADD         R1,SP,#+0x118
        MOV         R0,SP
        _BLF        `??operator+=`,`??operator+=??rA`
        ADD         R0,SP,#+0x118
        _BLF        `?~string`,`?~string??rA`
        ADD         R0,SP,#+0x268
        _BLF        `?~TSNString`,`?~TSNString??rA`
//   82 			HardwareSetupWarning(Message);
        MOV         R1,SP
        ADD         R0,SP,#+0x284
        _BLF        ??TSNString,??TSNString??rA_3
        _BLF        ??HardwareSetupWarning,??HardwareSetupWarning??rA
        ADD         R0,SP,#+0x284
        _BLF        `?~TSNString`,`?~TSNString??rA`
//   83 			SensorAdded = false;
//   84 		} else {
        MOV         R0,SP
        _BLF        `?~TSNString`,`?~TSNString??rA`
        B           ??Add_1
//   85 			SensorAdded = true;
??Add_2:
        MOV         R4,#+0x1
//   86 			IOComponent[IOCompPtr->ADCardChannel] = IOCompPtr;
        ADD         R0,R6,R2, LSL #+0x2
        STR         R7,[R0, #+0x280]
//   87 			if ( !PROList )	PROList = new PROLinkedList();
        LDR         R1,[R6, #+0x278]
        CMP         R1,#+0
        BNE         ??Add_4
        MOV         R0,#+0x28
        _BLF        `??operator new`,`??operator new??rA`
        MOV         R8,R0
        CMP         R8,#+0
        BEQ         ??Add_5
        MOV         R2,#+0
        MOV         R1,R2
        _BLF        ??PROLinkedList,??PROLinkedList??rA
??Add_5:
        STR         R8,[R6, #+0x278]
//   88 			PROList->insertInOrder(ElementPtr);
??Add_4:
        MOV         R1,R5
        LDR         R0,[R6, #+0x278]
        _BLF        ??insertInOrder,??insertInOrder??rA
//   89 			if ( !UniquePROList )	UniquePROList = new PROLinkedList();
        LDR         R3,[R6, #+0x27C]
        CMP         R3,#+0
        BNE         ??Add_6
        MOV         R0,#+0x28
        _BLF        `??operator new`,`??operator new??rA`
        MOV         R8,R0
        CMP         R8,#+0
        BEQ         ??Add_7
        MOV         R2,#+0
        MOV         R1,R2
        _BLF        ??PROLinkedList,??PROLinkedList??rA
??Add_7:
        STR         R8,[R6, #+0x27C]
//   90 			UniquePROList->insertInOrderIfUnique(ElementPtr);
??Add_6:
        MOV         R1,R5
        LDR         R0,[R6, #+0x27C]
        _BLF        ??insertInOrderIfUnique,??insertInOrderIfUnique??rA
//   91 			AddAlarms(ElementPtr->CompleteAlarmInfoList);
        LDR         R1,[R5, #+0x140]
        MOV         R0,R6
        _BLF        ??AddAlarms,??AddAlarms??rA
//   92 			ElementPtr->AddAlarms(OthersAlarmInfoList);
        LDR         R1,[R6, #+0x144]
        MOV         R0,R5
        _BLF        ??AddAlarms,??AddAlarms??rA
//   93 			IOCompPtr->AddAlarms(OthersAlarmInfoList);
        LDR         R1,[R6, #+0x144]
        MOV         R0,R7
        _BLF        ??AddAlarms_1,??AddAlarms??rA_1
//   94 
//   95 			((AnalogInput*)IOCompPtr)->SetPROPtr(ElementPtr);
        MOV         R1,R5
        MOV         R0,R7
        _BLF        ??SetPROPtr,??SetPROPtr??rA
//   96 		}
//   97 	}
//   98 	return(SensorAdded);
??Add_1:
        MOV         R0,R4
        ADD         SP,SP,#+0x2A0      ;; stack cleaning
        CFI CFA R13+24
        LDMIA       SP!,{R4-R8,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        DATA
??Add_3:
        DC32        `?<Constant "TCU ">`
        DC32        `?<Constant " com-port ">`
        DC32        `?<Constant ".\\n">`
        DC32        `?<Constant "Channel ">`
        DC32        `?<Constant " on ADCard on channel">`
        DC32        `?<Constant " on IO ">`
        DC32        `?<Constant " addr.">`
        DC32        `?<Constant "\\nChannel allredy used...">`
        CFI EndBlock cfiBlock9
//   99 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CODE16
??GetValue??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock10
        REQUIRE ??GetValue
//  100 //---------------------------------------------------------------------------
//  101 
//  102 #ifndef ANCONF
//  103 ///////////////////////////////////////////////////////////////
//  104 //
//  105 // Routines for the librarian
//  106 //
//  107 ///////////////////////////////////////////////////////////////
//  108 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??GetValue
        CODE32
//  109 int  SCADCard::GetValue(int ValueId, int Index, float &MyRetValue, int &DecPnt, int &Unit)
//  110 {
??GetValue:
        STMDB       SP!,{R4-R7,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV         R4,R3
        LDR         R5,[SP, #+0x14]
        LDR         R6,[SP, #+0x18]
//  111 	int Status = GETVAL_NO_ERR;
        MOV         R7,#+0
//  112 	switch ( ValueId ) {
        MOV         R3,R1
        MOV         R12,#+0xB3
        ORR         R12,R12,#+0x400
        CMP         R3,R12
        BEQ         ??GetValue_2
        ADD         R12,R12,#+0x1
        CMP         R3,R12
        BEQ         ??GetValue_3
        ORR         R12,R12,#+0x1
        CMP         R3,R12
        BEQ         ??GetValue_4
        ADD         R12,R12,#+0x1
        CMP         R3,R12
        BEQ         ??GetValue_5
        MOV         R12,#+0x99
        ORR         R12,R12,#+0x1100
        CMP         R3,R12
        BEQ         ??GetValue_6
        ADD         R12,R12,#+0x1
        CMP         R3,R12
        BEQ         ??GetValue_7
        ORR         R12,R12,#+0x1
        CMP         R3,R12
        BEQ         ??GetValue_8
        ADD         R12,R12,#+0x3
        CMP         R3,R12
        BEQ         ??GetValue_9
        ADD         R12,R12,#+0x8D
        CMP         R3,R12
        BEQ         ??GetValue_10
        ADD         R12,R12,#+0x1
        CMP         R3,R12
        BEQ         ??GetValue_11
        B           ??GetValue_12
//  113 		case SVT_IO_CH_VALUE :
//  114 			MyRetValue = MsrdValues[Index];
??GetValue_4:
        ADD         R2,R0,R2, LSL #+0x2
        LDR         R0,[R2, #+0x200]
        STR         R0,[R4, #+0]
//  115 			DecPnt     = 3;
        MOV         R4,#+0x3
        STR         R4,[R5, #+0]
//  116 			Unit       = NO_UNIT;
        MOV         R5,R7
        STR         R5,[R6, #+0]
        B           ??GetValue_13
//  117 			break;
//  118 		case SVT_IO_CH_STATUS :
//  119 			MyRetValue = *((U16*)&ADConfigData[Index]);
??GetValue_5:
        ADD         R1,R0,R2, LSL #+0x2
        ADD         R3,R1,#+0x1C8
        LDRH        R0,[R3, #+0]
        _BLF        __ulongToFloat,__ulongToFloat??rA
        STR         R0,[R4, #+0]
//  120 			DecPnt     = 0;
        MOV         R12,R7
        STR         R12,[R5, #+0]
//  121 			Unit       = NO_UNIT;
        MOV         R2,R7
        STR         R2,[R6, #+0]
        B           ??GetValue_13
//  122 			break;
//  123 		case SVT_IO_CH_CAL_VAL :
//  124 			MyRetValue = CalValues[Index];
??GetValue_3:
        ADD         R0,R0,R2, LSL #+0x1
        ADD         R1,R0,#+0x238
        LDRH        R0,[R1, #+0]
        _BLF        __ulongToFloat,__ulongToFloat??rA
        STR         R0,[R4, #+0]
//  125 			DecPnt     = 0;
        MOV         R4,R7
        STR         R4,[R5, #+0]
//  126 			Unit       = NO_UNIT;
        MOV         R5,R4
        STR         R5,[R6, #+0]
        B           ??GetValue_13
//  127 			break;
//  128 		case SVT_IO_CH_RAW_VAL :
//  129 			MyRetValue = RawValues[Index];
??GetValue_2:
        ADD         R3,R0,R2, LSL #+0x1
        ADD         R12,R3,#+0x254
        LDRH        R0,[R12, #+0]
        _BLF        __ulongToFloat,__ulongToFloat??rA
        STR         R0,[R4, #+0]
//  130 			DecPnt     = 0;
        MOV         R2,R7
        STR         R2,[R5, #+0]
//  131 			Unit       = NO_UNIT;
        MOV         R0,R2
        STR         R0,[R6, #+0]
        B           ??GetValue_13
//  132 			break;
//  133 		case SVT_IO_RXBUF_SIZE:
//  134 			MyRetValue = RxBufSize;
??GetValue_6:
        LDRB        R0,[R0, #+0x270]
        _BLF        __ulongToFloat,__ulongToFloat??rA
        STR         R0,[R4, #+0]
//  135 			DecPnt     = 0;
        MOV         R1,R7
        STR         R1,[R5, #+0]
//  136 			Unit       = NO_UNIT;
        MOV         R4,R1
        STR         R4,[R6, #+0]
        B           ??GetValue_13
//  137 			break;
//  138 		case SVT_IO_TXBUF_SIZE:
//  139 			MyRetValue = TxBufSize;
??GetValue_7:
        LDRB        R0,[R0, #+0x271]
        _BLF        __ulongToFloat,__ulongToFloat??rA
        STR         R0,[R4, #+0]
//  140 			DecPnt     = 0;
        MOV         R3,R7
        STR         R3,[R5, #+0]
//  141 			Unit       = NO_UNIT;
        MOV         R5,R3
        STR         R5,[R6, #+0]
        B           ??GetValue_13
//  142 			break;
//  143 		case SVT_IO_CAL_NULL:
//  144 			MyRetValue = CalNull;
??GetValue_10:
        MOV         R12,#+0x72
        ORR         R12,R12,#+0x200
        LDRSH       R0,[R12, +R0]
        _BLF        __longToFloat,__longToFloat??rA
        STR         R0,[R4, #+0]
//  145 			DecPnt     = 0;
        MOV         R2,R7
        STR         R2,[R5, #+0]
//  146 			Unit       = NO_UNIT;
        MOV         R0,R2
        STR         R0,[R6, #+0]
        B           ??GetValue_13
//  147 			break;
//  148 		case SVT_IO_CAL_GAIN:
//  149 			MyRetValue = CalGain;
??GetValue_11:
        LDR         R1,[R0, #+0x274]
        STR         R1,[R4, #+0]
//  150 			DecPnt     = 6;
        MOV         R4,#+0x6
        STR         R4,[R5, #+0]
//  151 			Unit       = NO_UNIT;
        MOV         R3,R7
        STR         R3,[R6, #+0]
        B           ??GetValue_13
//  152 			break;
//  153 		case SVT_IO_RESET_STATUS:
//  154 			MyRetValue = Restart;
??GetValue_8:
        LDRB        R0,[R0, #+0x194]
        _BLF        __ulongToFloat,__ulongToFloat??rA
        STR         R0,[R4, #+0]
//  155 			DecPnt     = 0;
        MOV         R12,R7
        STR         R12,[R5, #+0]
//  156 			Unit       = NO_UNIT;
        MOV         R5,R7
        STR         R5,[R6, #+0]
        B           ??GetValue_13
//  157 			break;
//  158 		case SVT_IO_NEW_SENSOR:
//  159 			{
//  160 				bool NSns = false;
??GetValue_9:
        MOV         R12,R7
//  161 				for ( int i=0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
        MOV         R3,R7
        B           ??GetValue_14
//  162 					NSns |= ADConfigData[i].NewSensor;
??GetValue_15:
        MOV         R12,R7
??GetValue_16:
        ADD         R3,R3,#+0x1
??GetValue_14:
        CMP         R3,#+0xE
        BGE         ??GetValue_17
        ADD         R2,R0,R3, LSL #+0x2
        LDR         R1,[R2, #+0x1C8]
        CMP         R12,#+0
        BNE         ??GetValue_18
        TST         R1,#+0x80
        BEQ         ??GetValue_15
??GetValue_18:
        MOV         R12,#+0x1
        B           ??GetValue_16
//  163 				}
//  164 				MyRetValue = (float)NSns;
??GetValue_17:
        MOV         R0,R12
        _BLF        __ulongToFloat,__ulongToFloat??rA
        STR         R0,[R4, #+0]
//  165 			}
//  166 			DecPnt     = 0;
        MOV         R0,R7
        STR         R0,[R5, #+0]
//  167 			Unit       = NO_UNIT;
        MOV         R1,R0
        STR         R1,[R6, #+0]
        B           ??GetValue_13
//  168 			break;
//  169 		default:
//  170 			Status = SignalConverter::GetValue(ValueId,Index, MyRetValue,  DecPnt,Unit);
??GetValue_12:
        STR         R6,[SP, #-4]!      ;; Push
        CFI CFA R13+24
        STR         R5,[SP, #-4]!      ;; Push
        CFI CFA R13+28
        MOV         R3,R4
        _BLF        ??GetValue_1,??GetValue??rA
        MOV         R7,R0
        ADD         SP,SP,#+0x8        ;; stack cleaning
        CFI CFA R13+20
//  171 			break;
//  172 	}
//  173 	return(Status);
??GetValue_13:
        MOV         R0,R7
        LDMIA       SP!,{R4-R7,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock11
//  174 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CODE16
??GetStringValue??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock12
        REQUIRE ??GetStringValue
//  175 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??GetStringValue
        CODE32
//  176 int SCADCard::GetStringValue(int ValueId, int Index, TSNString &MyString)
//  177 {
??GetStringValue:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB         SP,SP,#+0x118
        CFI CFA R13+292
        MOV         R5,R3
//  178 	int Status = GETVAL_NO_ERR;
        MOV         R4,#+0
//  179 	switch ( ValueId ) {
        MOV         R12,R1
        SUBS        R12,R12,#+0x4B0
        BEQ         ??GetStringValue_2
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_3
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_4
        SUBS        R12,R12,#+0xD50
        BEQ         ??GetStringValue_5
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_6
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_7
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_8
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_9
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_10
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_11
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_12
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_13
        SUBS        R12,R12,#+0x1
        BEQ         ??GetStringValue_14
        B           ??GetStringValue_15
//  180 		case SVT_IO_CH_NAME         :
//  181 			{
//  182 				PROIOComponent *IOCPtr = IOComponent[Index];
??GetStringValue_2:
        ADD         R0,R0,R2, LSL #+0x2
        LDR         R12,[R0, #+0x280]
//  183 				if ( IOCPtr ) {
        CMP         R12,#+0
        BEQ         ??GetStringValue_16
//  184 					Status = IOCPtr->GetStringValue(SVT_AI_PRONAME,0,MyString);
        MOV         R2,R4
        MOV         R1,#+0x56
        ORR         R1,R1,#+0x400
        MOV         R0,R12
        LDR         R4,[R12, #+0x50]
        LDR         R5,[R4, #+0x20]
        MOV         LR,PC
        BX          R5
        MOV         R4,R0
        B           ??GetStringValue_17
//  185 				} else {
//  186 					MyString = "";
??GetStringValue_16:
        LDR         R1,??GetStringValue_18  ;; `?<Constant "">`
        MOV         R0,SP
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        MOV         R0,SP
        _BLF        `?~TSNString`,`?~TSNString??rA`
        B           ??GetStringValue_17
//  187 				}
//  188 			}
//  189 			break;
//  190 		case SVT_IO_CH_LOCATION         :
//  191 			{
//  192 				PROIOComponent *IOCPtr = IOComponent[Index];
??GetStringValue_3:
        ADD         R3,R0,R2, LSL #+0x2
        LDR         R12,[R3, #+0x280]
//  193 				if ( IOCPtr ) {
        CMP         R12,#+0
        BEQ         ??GetStringValue_19
//  194 					Status = IOCPtr->GetStringValue(SVT_AI_LOCATION,0,MyString);
        MOV         R3,R5
        MOV         R2,R4
        MOV         R1,#+0x55
        ORR         R1,R1,#+0x400
        MOV         R0,R12
        LDR         R12,[R12, #+0x50]
        LDR         R4,[R12, #+0x20]
        MOV         LR,PC
        BX          R4
        MOV         R4,R0
        B           ??GetStringValue_17
//  195 				} else {
//  196 					MyString = "";
??GetStringValue_19:
        LDR         R1,??GetStringValue_18  ;; `?<Constant "">`
        MOV         R0,SP
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        MOV         R0,SP
        _BLF        `?~TSNString`,`?~TSNString??rA`
        B           ??GetStringValue_17
//  197 				}
//  198 			}
//  199 			break;
//  200 		case SVT_IO_CH_TYPE_TEXT    :
//  201 			{
//  202 				PROIOComponent *IOCPtr = IOComponent[Index];
??GetStringValue_4:
        ADD         R1,R0,R2, LSL #+0x2
        LDR         R12,[R1, #+0x280]
//  203 				if ( IOCPtr ) {
        CMP         R12,#+0
        BEQ         ??GetStringValue_20
//  204 					Status = IOCPtr->GetStringValue(SVT_AI_TYPE_TEXT,0,MyString);
        MOV         R2,R4
        MOV         R1,#+0x4D
        ORR         R1,R1,#+0x400
        MOV         R0,R12
        LDR         R5,[R12, #+0x50]
        LDR         R12,[R5, #+0x20]
        MOV         LR,PC
        BX          R12
        MOV         R4,R0
        B           ??GetStringValue_17
//  205 				} else {
//  206 					MyString = "";
??GetStringValue_20:
        LDR         R1,??GetStringValue_18  ;; `?<Constant "">`
        MOV         R0,SP
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        MOV         R0,SP
        _BLF        `?~TSNString`,`?~TSNString??rA`
        B           ??GetStringValue_17
//  207 				}
//  208 			}
//  209 			break;
//  210 		case SVT_IO_CH_CONV_ERROR   :
//  211 			MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_ERROR_STAT,ADConfigData[Index].ConvError);
??GetStringValue_5:
        ADD         R2,R0,R2, LSL #+0x2
        LDR         R0,[R2, #+0x1C8]
        AND         R3,R0,#+0x1
        STR         R3,[SP, #-4]!      ;; Push
        CFI CFA R13+296
        MOV         R3,#+0x7
        LDR         R1,??GetStringValue_18+0x4  ;; SizeofStatusText
        LDR         R2,[R1, #+0]
        LDR         R1,??GetStringValue_18+0x8  ;; StatusText
        ADD         R0,SP,#+0x20
        _BLF        ??LibGetText,??LibGetText??rA
        ADD         R1,SP,#+0x20
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0x20
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+292
        B           ??GetStringValue_17
//  212 			break;
//  213 		case SVT_IO_CH_CNV_CAL_ERROR:
//  214       {
//  215         bool ADStatus = ADConfigData[Index].ConvError;
??GetStringValue_7:
        ADD         R12,R0,R2, LSL #+0x2
        LDR         R3,[R12, #+0x1C8]
        AND         R3,R3,#+0x1
//  216        	ADStatus |= ADConfigData[Index].CalError;
        ADD         R2,R0,R2, LSL #+0x2
        LDR         R1,[R2, #+0x1C8]
        CMP         R3,#+0
        BNE         ??GetStringValue_21
        TST         R1,#+0x2
        BEQ         ??GetStringValue_22
??GetStringValue_21:
        MOV         R2,#+0x1
        B           ??GetStringValue_23
??GetStringValue_22:
        MOV         R2,R4
//  217 				MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_ERROR_STAT, ADStatus );
??GetStringValue_23:
        STR         R2,[SP, #-4]!      ;; Push
        CFI CFA R13+296
        MOV         R3,#+0x7
        LDR         R0,??GetStringValue_18+0x4  ;; SizeofStatusText
        LDR         R2,[R0, #+0]
        LDR         R1,??GetStringValue_18+0x8  ;; StatusText
        ADD         R0,SP,#+0x4
        _BLF        ??LibGetText,??LibGetText??rA
        ADD         R1,SP,#+0x4
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0x4
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+292
        B           ??GetStringValue_17
//  218       }
//  219 			break;
//  220 		case SVT_IO_CH_CAL_ERROR    :
//  221 			MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_ERROR_STAT,ADConfigData[Index].CalError);
??GetStringValue_6:
        ADD         R1,R0,R2, LSL #+0x2
        LDR         R12,[R1, #+0x1C8]
        MOV         R3,R12, LSR #+0x1
        AND         R2,R3,#+0x1
        STR         R2,[SP, #-4]!      ;; Push
        CFI CFA R13+296
        MOV         R3,#+0x7
        LDR         R0,??GetStringValue_18+0x4  ;; SizeofStatusText
        LDR         R2,[R0, #+0]
        LDR         R1,??GetStringValue_18+0x8  ;; StatusText
        ADD         R0,SP,#+0x3C
        _BLF        ??LibGetText,??LibGetText??rA
        ADD         R1,SP,#+0x3C
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0x3C
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+292
        B           ??GetStringValue_17
//  222 			break;
//  223 		case SVT_IO_CH_EEP_SNS_STAT  :
//  224 			MyString = (TSNString)EEPromInfo[ADConfigData[Index].EEPromStatus];
??GetStringValue_14:
        ADD         R1,R0,R2, LSL #+0x2
        LDR         R12,[R1, #+0x1C8]
        AND         R3,R12,#+0xF000
        MOV         R2,R3, LSR #+0xC
        ADD         R0,R2,R2, LSL #+0x2
        LDR         R1,??GetStringValue_18+0xC  ;; ??EEPromInfo
        ADD         R1,R0,R1
        ADD         R0,SP,#+0x54
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0x54
        _BLF        `?~TSNString`,`?~TSNString??rA`
        B           ??GetStringValue_17
//  225 			break;
//  226 		case SVT_IO_CH_EEP_PC_STAT  :
//  227 			MyString = (TSNString)EEPromInfo[ADConfigData[Index].EEP_PCStatus];
??GetStringValue_13:
        ADD         R12,R0,R2, LSL #+0x2
        LDR         R3,[R12, #+0x1C8]
        AND         R2,R3,#+0x700
        MOV         R0,R2, LSR #+0x8
        ADD         R1,R0,R0, LSL #+0x2
        LDR         R12,??GetStringValue_18+0xC  ;; ??EEPromInfo
        ADD         R1,R1,R12
        ADD         R0,SP,#+0x70
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0x70
        _BLF        `?~TSNString`,`?~TSNString??rA`
        B           ??GetStringValue_17
//  228 			break;
//  229 		case SVT_IO_CH_EEP_USE_PCDATA:
//  230 			MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_NO_YES,ADConfigData[Index].EEPUsePCData);
??GetStringValue_12:
        ADD         R3,R0,R2, LSL #+0x2
        LDR         R2,[R3, #+0x1C8]
        MOV         R0,R2, LSR #+0xB
        AND         R1,R0,#+0x1
        STR         R1,[SP, #-4]!      ;; Push
        CFI CFA R13+296
        MOV         R3,#+0x4
        LDR         R12,??GetStringValue_18+0x4  ;; SizeofStatusText
        LDR         R2,[R12, #+0]
        LDR         R1,??GetStringValue_18+0x8  ;; StatusText
        ADD         R0,SP,#+0x90
        _BLF        ??LibGetText,??LibGetText??rA
        ADD         R1,SP,#+0x90
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0x90
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+292
        B           ??GetStringValue_17
//  231 			break;
//  232 		case SVT_IO_CH_USE_PC_SETUP  :
//  233 			MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_NO_YES,ADConfigData[Index].UsePCSetUp);
??GetStringValue_9:
        ADD         R3,R0,R2, LSL #+0x2
        LDR         R2,[R3, #+0x1C8]
        MOV         R0,R2, LSR #+0x4
        AND         R1,R0,#+0x1
        STR         R1,[SP, #-4]!      ;; Push
        CFI CFA R13+296
        MOV         R3,#+0x4
        LDR         R12,??GetStringValue_18+0x4  ;; SizeofStatusText
        LDR         R2,[R12, #+0]
        LDR         R1,??GetStringValue_18+0x8  ;; StatusText
        ADD         R0,SP,#+0xAC
        _BLF        ??LibGetText,??LibGetText??rA
        ADD         R1,SP,#+0xAC
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0xAC
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+292
        B           ??GetStringValue_17
//  234 			break;
//  235 		case SVT_IO_CH_AD_SENSOR :
//  236 			MyString = (TSNString)ADSensorType[ADConfigData[Index].FoundSensor];
??GetStringValue_10:
        ADD         R3,R0,R2, LSL #+0x2
        LDR         R2,[R3, #+0x1C8]
        AND         R0,R2,#+0x60
        MOV         R1,R0, LSR #+0x5
        MOV         R12,#+0xA
        LDR         R3,??GetStringValue_18+0x10  ;; ??ADSensorType
        MLA         R1,R12,R1,R3
        ADD         R0,SP,#+0xC4
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0xC4
        _BLF        `?~TSNString`,`?~TSNString??rA`
        B           ??GetStringValue_17
//  237 			break;
//  238 		case SVT_IO_CH_FROM_PC_SENSOR :
//  239 			MyString = (TSNString)ADSensorType[ADConfigData[Index].PCSensor];
??GetStringValue_8:
        ADD         R2,R0,R2, LSL #+0x2
        LDR         R0,[R2, #+0x1C8]
        AND         R1,R0,#+0xC
        MOV         R12,R1, LSR #+0x2
        MOV         R3,#+0xA
        LDR         R2,??GetStringValue_18+0x10  ;; ??ADSensorType
        MLA         R1,R3,R12,R2
        ADD         R0,SP,#+0xE0
        _BLF        ??TSNString_3,??TSNString??rA_2
        MOV         R1,R0
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0xE0
        _BLF        `?~TSNString`,`?~TSNString??rA`
        B           ??GetStringValue_17
//  240 			break;
//  241 		case SVT_IO_CH_NEW_SENSOR   :
//  242 			MyString = LibGetText(StatusText,SizeofStatusText,ST_TXT_NO_YES,ADConfigData[Index].NewSensor);
??GetStringValue_11:
        ADD         R0,R0,R2, LSL #+0x2
        LDR         R1,[R0, #+0x1C8]
        MOV         R12,R1, LSR #+0x7
        AND         R3,R12,#+0x1
        STR         R3,[SP, #-4]!      ;; Push
        CFI CFA R13+296
        MOV         R3,#+0x4
        LDR         R2,??GetStringValue_18+0x4  ;; SizeofStatusText
        LDR         R2,[R2, #+0]
        LDR         R1,??GetStringValue_18+0x8  ;; StatusText
        ADD         R0,SP,#+0x100
        _BLF        ??LibGetText,??LibGetText??rA
        ADD         R1,SP,#+0x100
        MOV         R0,R5
        _BLF        `??operator=_1`,`??operator=??rA_1`
        ADD         R0,SP,#+0x100
        _BLF        `?~TSNString`,`?~TSNString??rA`
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+292
        B           ??GetStringValue_17
//  243 			break;
//  244 		default:
//  245 			Status = SignalConverter::GetStringValue(ValueId,Index, MyString);
??GetStringValue_15:
        _BLF        ??GetStringValue_1,??GetStringValue??rA
        MOV         R4,R0
//  246 			break;
//  247 	}
//  248 
//  249 	return(Status);
??GetStringValue_17:
        MOV         R0,R4
        ADD         SP,SP,#+0x118      ;; stack cleaning
        CFI CFA R13+12
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        DATA
??GetStringValue_18:
        DC32        `?<Constant "">`
        DC32        SizeofStatusText
        DC32        StatusText
        DC32        ??EEPromInfo
        DC32        ??ADSensorType
        CFI EndBlock cfiBlock13
//  250 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CODE16
??PutValue??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock14
        REQUIRE ??PutValue
//  251 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??PutValue
        CODE32
//  252 int SCADCard::PutValue( int ValueId, TSNString NewValue,bool Local)
//  253 {
??PutValue:
        STMDB       SP!,{R4-R6,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB         SP,SP,#+0x1C
        CFI CFA R13+44
        MOV         R4,R0
        MOV         R5,R1
        MOV         R1,R2
        MOV         R6,R3
//  254 	return(SignalConverter::PutValue( ValueId, NewValue, Local));
        MOV         R0,SP
        _BLF        ??TSNString,??TSNString??rA_3
        MOV         R3,R6
        MOV         R2,R0
        MOV         R1,R5
        MOV         R0,R4
        _BLF        ??PutValue_1,??PutValue??rA
        MOV         R4,R0
        MOV         R0,SP
        _BLF        `?~TSNString`,`?~TSNString??rA`
        MOV         R0,R4
        ADD         SP,SP,#+0x1C       ;; stack cleaning
        CFI CFA R13+16
        LDMIA       SP!,{R4-R6,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock15
//  255 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        CODE16
??PutFloatValue??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock16
        REQUIRE ??PutFloatValue
//  256 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??PutFloatValue
        CODE32
//  257 int SCADCard::PutFloatValue( int ValueId, float NewValue)
//  258 {
??PutFloatValue:
        STR         LR,[SP, #-4]!      ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  259 	return(SignalConverter::PutFloatValue(ValueId,NewValue));
        _BLF        ??PutFloatValue_1,??PutFloatValue??rA
        LDR         LR,[SP], #+0x4     ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock17
//  260 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CODE16
??GetValueInfoTable??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock18
        REQUIRE ??GetValueInfoTable
//  261 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??GetValueInfoTable
        CODE32
//  262 ValueList *SCADCard::GetValueInfoTable(int &Entries)
//  263 {
//  264 	Entries = SizeofSCAdCardValueList;
??GetValueInfoTable:
        LDR         R2,??GetValueInfoTable_1  ;; SizeofSCAdCardValueList
        LDR         R3,[R2, #+0]
        STR         R3,[R1, #+0]
//  265 	return(SCAdCardValueList);
        LDR         R0,??GetValueInfoTable_1+0x4  ;; SCAdCardValueList
        BX          LR                 ;; return
        DATA
??GetValueInfoTable_1:
        DC32        SizeofSCAdCardValueList
        DC32        SCAdCardValueList
        CFI EndBlock cfiBlock19
//  266 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        CODE16
??SetHWFailure??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock20
        REQUIRE ??SetHWFailure
//  267 
//  268 // For communication
//  269 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ??SetHWFailure
        CODE32
//  270 void SCADCard::SetHWFailure(bool Failure,bool Send)
//  271 {
??SetHWFailure:
        STMDB       SP!,{R4-R7,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV         R4,R0
        MOV         R5,R1
        MOV         R6,R2
//  272 	for ( int i=0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
        MOV         R7,#+0
        B           ??SetHWFailure_1
//  273 		PROIOComponent *CompPtr = IOComponent[i];
??SetHWFailure_2:
        ADD         R1,R4,R7, LSL #+0x2
        LDR         R2,[R1, #+0x280]
//  274 		if ( CompPtr ) {
        CMP         R2,#+0
        BEQ         ??SetHWFailure_3
//  275 			CompPtr->HWFailure = Failure;
        STRB        R5,[R2, #+0x8C]
//  276 			if ( Send ) {
        CMP         R6,#+0
        BEQ         ??SetHWFailure_3
//  277 				CompPtr->SendData();
        MOV         R1,#+0x65
        MOV         R0,R2
        LDR         R12,[R2, #+0x50]
        LDR         R2,[R12, #+0x30]
        MOV         LR,PC
        BX          R2
//  278 			}
//  279 			if ( Failure ) {
//  280 				//SetAlarmsToNormal(CompPtr->AlarmInfoList);
//  281 			}
//  282 		}
//  283 	}
??SetHWFailure_3:
        ADD         R7,R7,#+0x1
??SetHWFailure_1:
        CMP         R7,#+0xE
        BLT         ??SetHWFailure_2
//  284 	if ( Failure ) {
        CMP         R5,#+0
        BEQ         ??SetHWFailure_4
//  285 		if ( UniquePROList && !UniquePROList->isEmty() ) {
        LDR         R0,[R4, #+0x27C]
        CMP         R0,#+0
        BEQ         ??SetHWFailure_4
        _BLF        ??isEmty,??isEmty??rA
        CMP         R0,#+0
        BNE         ??SetHWFailure_4
//  286 			int ListSize = UniquePROList->Size();
        LDR         R0,[R4, #+0x27C]
        _BLF        ??Size,??Size??rA
        MOV         R5,R0
//  287 			PRONode *TNode = UniquePROList->getHead();
        LDR         R0,[R4, #+0x27C]
        _BLF        ??getHead,??getHead??rA
        MOV         R4,R0
//  288 			for ( int i=0; i < ListSize; i++ ) {
        MOV         R6,#+0
        MOV         R7,#+0x1
        B           ??SetHWFailure_5
//  289 				TNode = TNode->getNext();
??SetHWFailure_6:
        MOV         R0,R4
        _BLF        ??getNext,??getNext??rA
        MOV         R4,R0
//  290 				PRogramObject *TempElement = (PRogramObject*)TNode->getElement();
        _BLF        ??getElement,??getElement??rA
        MOV         R3,R0
//  291 				TempElement->HWFailure=true;
        STRB        R7,[R3, #+0x148]
//  292 				TempElement->SendData();
        MOV         R1,#+0x65
        LDR         R3,[R3, #+0x50]
        LDR         R12,[R3, #+0x30]
        MOV         LR,PC
        BX          R12
//  293 				if ( Failure ) {
//  294 					//SetAlarmsToNormal(TempElement->CompleteAlarmInfoList);
//  295 				}
//  296 			}
        ADD         R6,R6,#+0x1
??SetHWFailure_5:
        CMP         R6,R5
        BLT         ??SetHWFailure_6
//  297 		}
//  298 	}
//  299 }
??SetHWFailure_4:
        LDMIA       SP!,{R4-R7,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        CODE16
??AddCommand??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock22
        REQUIRE ??AddCommand
//  300 
//  301 	#ifdef S2TXU

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function ??AddCommand
        CODE32
//  302 int SCADCard::AddCommand(U8* BufPtr, U8 Command, U8 Size, U8* Data)
//  303 {
??AddCommand:
        LDR         R12,[SP, #+0]
//  304 	BufPtr[0] = Command;
        STRB        R2,[R1, #+0]
//  305 	BufPtr[1] = Size;
        STRB        R3,[R1, #+0x1]
//  306 
//  307 	memcpy(&BufPtr[2],Data,Size);
        MOV         R2,R3
        ADD         R1,R1,#+0x2
        CMP         R2,#+0
        BEQ         ??AddCommand_1
??AddCommand_2:
        SUBS        R2,R2,#+0x1
        LDRB        R0,[R12, R2]
        STRB        R0,[R1, R2]
        BNE         ??AddCommand_2
//  308 	return(Size+2);
??AddCommand_1:
        ADD         R0,R3,#+0x2
        BX          LR                 ;; return
        CFI EndBlock cfiBlock23
//  309 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        CODE16
??SendToAD??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock24
        REQUIRE ??SendToAD
//  310 
//  311 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function ??SendToAD
        CODE32
//  312 void SCADCard::SendToAD(U8 Command, U8 Size, U8* Data)
//  313 {
??SendToAD:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB         SP,SP,#+0x60
        CFI CFA R13+108
//  314 	NetPacket Packet;
//  315 	ANPRO10_Command_1160_Single ADData;
//  316 	Packet.Command    = CMD_SND_RS4_ADBUF;
        MOV         R4,#+0x88
        ORR         R4,R4,#+0x400
        STRH        R4,[SP, #+0]
//  317 	Packet.RxAddress  = IOAddress;
        LDR         R4,[R0, #+0x1B0]
        STRB        R4,[SP, #+0x5]
//  318 	Packet.RxTypeId   = DEVICE_ZB485;
        MOV         R4,#+0x10
        STRB        R4,[SP, #+0x4]
//  319 	Packet.RequestAck = 0;
        MOV         R4,#+0
        STRB        R4,[SP, #+0x6]
//  320 	Packet.Size       = sizeof(ADData)-sizeof(ADData.Data)+Size;
        MOV         R4,R2
        ADD         R4,R4,#+0x4
        STRH        R4,[SP, #+0x2]
//  321 	Packet.Data       = (U8*)&ADData;
        ADD         R4,SP,#+0x10
        STR         R4,[SP, #+0xC]
        MOV         R12,#+0
??SendToAD_2:
        MOV         R4,SP
        ADD         R4,R12,R4
        ADD         R5,SP,#+0xC
        LDRB        R5,[R12, +R5]
        STRB        R5,[R4, #+0x7]
        ADD         R12,R12,#+0x1
        CMP         R12,#+0x4
        BLT         ??SendToAD_2
//  322 
//  323 	ADData.Channel    = IOChannel;
        LDR         R4,[R0, #+0x1B4]
        STRB        R4,[SP, #+0x10]
//  324 	ADData.Cmd        = Command;
        STRB        R1,[SP, #+0x12]
//  325 	ADData.Size       = Packet.Size-2; // Notice this one!!!
        LDRH        R4,[SP, #+0x2]
        ADD         R5,R4,#+0xFE
        STRB        R5,[SP, #+0x11]
//  326 	ADData.DSize      = Size;
        STRB        R2,[SP, #+0x13]
//  327 	memcpy(ADData.Data,Data,Size);
        ADD         R12,SP,#+0x14
        CMP         R2,#+0
        BEQ         ??SendToAD_3
??SendToAD_4:
        SUBS        R2,R2,#+0x1
        LDRB        R4,[R3, R2]
        STRB        R4,[R12, R2]
        BNE         ??SendToAD_4
//  328 	SendPacket(Packet);
??SendToAD_3:
        MOV         R1,SP
        _BLF        ??SendPacket,??SendPacket??rA
//  329 }
        ADD         SP,SP,#+0x60       ;; stack cleaning
        CFI CFA R13+12
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        CODE16
??SendToAD??rT_1:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock26
        REQUIRE ??SendToAD_1
//  330 
//  331 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function ??SendToAD_1
        CODE32
//  332 void SCADCard::SendToAD(U8 Size, U8* Data)
//  333 {
??SendToAD_1:
        STMDB       SP!,{R4,LR}        ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB         SP,SP,#+0x60
        CFI CFA R13+104
//  334 	NetPacket Packet;
//  335 	ANPRO10_Command_1160 ADData;
//  336 	Packet.Command    = CMD_SND_RS4_ADBUF;
        MOV         R3,#+0x88
        ORR         R3,R3,#+0x400
        STRH        R3,[SP, #+0]
//  337 	Packet.RxAddress  = IOAddress;
        LDR         R3,[R0, #+0x1B0]
        STRB        R3,[SP, #+0x5]
//  338 	Packet.RxTypeId   = DEVICE_ZB485;
        MOV         R3,#+0x10
        STRB        R3,[SP, #+0x4]
//  339 	Packet.RequestAck = 0;
        MOV         R3,#+0
        STRB        R3,[SP, #+0x6]
//  340 	Packet.Size       = sizeof(ADData)-sizeof(ADData.Data)+Size;
        MOV         R3,R1
        ADD         R3,R3,#+0x2
        STRH        R3,[SP, #+0x2]
//  341 	Packet.Data       = (U8*)&ADData;
        ADD         R3,SP,#+0x10
        STR         R3,[SP, #+0xC]
        MOV         R3,#+0
??SendToAD_5:
        MOV         R12,SP
        ADD         R12,R3,R12
        ADD         R4,SP,#+0xC
        LDRB        R4,[R3, +R4]
        STRB        R4,[R12, #+0x7]
        ADD         R3,R3,#+0x1
        CMP         R3,#+0x4
        BLT         ??SendToAD_5
//  342 
//  343 	ADData.Channel    = IOChannel;
        LDR         R12,[R0, #+0x1B4]
        STRB        R12,[SP, #+0x10]
//  344 	ADData.Size       = Packet.Size-2; // Notice this one!!!
        LDRH        R12,[SP, #+0x2]
        ADD         R3,R12,#+0xFE
        STRB        R3,[SP, #+0x11]
//  345 	memcpy(ADData.Data,Data,Size);
        ADD         R4,SP,#+0x12
        CMP         R1,#+0
        BEQ         ??SendToAD_6
??SendToAD_7:
        SUBS        R1,R1,#+0x1
        LDRB        R12,[R2, R1]
        STRB        R12,[R4, R1]
        BNE         ??SendToAD_7
//  346 	SendPacket(Packet);
??SendToAD_6:
        MOV         R1,SP
        _BLF        ??SendPacket,??SendPacket??rA
//  347 }
        ADD         SP,SP,#+0x60       ;; stack cleaning
        CFI CFA R13+8
        LDMIA       SP!,{R4,LR}        ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        CODE16
??SendGainAndOffset??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock28
        REQUIRE ??SendGainAndOffset
//  348 
//  349 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function ??SendGainAndOffset
        CODE32
//  350 void SCADCard::SendGainAndOffset(void)
//  351 {
??SendGainAndOffset:
        STMDB       SP!,{R4-R6,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB         SP,SP,#+0x4C
        CFI CFA R13+92
        MOV         R4,R0
//  352 	AdjustPacket AdjustData[MAX_AN_SGCNV_CHANNELS];
//  353 	int Cnt = 0;
        MOV         R5,#+0
//  354 	for ( int Ch=0; Ch < MAX_AN_SGCNV_CHANNELS; Ch++ ) {
        MOV         R6,R5
        B           ??SendGainAndOffset_2
//  355 		if ( IOComponent[Ch] ) {
??SendGainAndOffset_3:
        ADD         R0,R4,R6, LSL #+0x2
        LDR         R1,[R0, #+0x280]
        CMP         R1,#+0
        BEQ         ??SendGainAndOffset_4
//  356 			switch ( IOComponent[Ch]->Type ) {
        MOV         R12,R1
        LDR         R2,[R12, #+0x48]
        SUB         R2,R2,#+0x5C
        SUB         R2,R2,#+0x800
        CMP         R2,#+0x2
        BHI         ??SendGainAndOffset_4
        ADR         R0,??SendGainAndOffset_1
        LDRB        R0,[R0, R2]
        ADD         PC,PC,R0, LSL #+0x2
        DATA
??SendGainAndOffset_1:
        DC8         +0,+0,+0,+0
        CODE32
//  357 				case C_AI_Pt100     :
//  358 				case C_AI_Pt1000    :
//  359 				case C_AI_TEMP_mA   :
//  360 					{
//  361 						AITempSensor *SnsPtr = (AITempSensor*)IOComponent[Ch];
??SendGainAndOffset_5:
        MOV         R2,R12
//  362 						short Offset=0;
        MOV         R12,#+0
        STRH        R12,[SP, #+0]
//  363 						if ( SnsPtr->CableCorrection(Offset) ) {
        MOV         R1,SP
        MOV         R0,R2
        LDR         R2,[R2, #+0x50]
        LDR         R3,[R2, #+0x60]
        MOV         LR,PC
        BX          R3
        CMP         R0,#+0
        BEQ         ??SendGainAndOffset_4
//  364 							AdjustData[Cnt].ChNo       = Ch;
        ADD         R0,R5,R5, LSL #+0x2
        ADD         R1,SP,#+0x4
        STRB        R6,[R0, +R1]
//  365 							AdjustData[Cnt].GainHigh   = 0;
        ADD         R12,R5,R5, LSL #+0x2
        ADD         R2,SP,#+0x4
        ADD         R3,R12,R2
        MOV         R0,#+0
        STRB        R0,[R3, #+0x3]
//  366 							AdjustData[Cnt].GainLow    = 0;
        ADD         R1,R5,R5, LSL #+0x2
        ADD         R12,SP,#+0x4
        ADD         R2,R1,R12
        MOV         R3,R0
        STRB        R3,[R2, #+0x4]
//  367 							AdjustData[Cnt].OffsetHigh = Offset >> 8;
        ADD         R0,R5,R5, LSL #+0x2
        ADD         R1,SP,#+0x4
        ADD         R12,R0,R1
        LDRSH       R3,[SP, #+0]
        MOV         R0,R3, ASR #+0x8
        STRB        R0,[R12, #+0x1]
//  368 							AdjustData[Cnt].OffsetLow  = Offset & 0xFF;
        LDRSH       R0,[SP, #+0]
        STRB        R0,[R2, #+0x2]
//  369 							Cnt++;
        ADD         R5,R5,#+0x1
//  370 						}	 // End if
//  371 					}
//  372 					break;
//  373 			}// End switch
//  374 		}	// End If IO-component
//  375 	}// End for loop
??SendGainAndOffset_4:
        ADD         R6,R6,#+0x1
??SendGainAndOffset_2:
        CMP         R6,#+0xE
        BLT         ??SendGainAndOffset_3
//  376 	if ( Cnt ) {
        CMP         R5,#+0
        BEQ         ??SendGainAndOffset_6
//  377 		SendToAD(ANP1_SND_OFF_GAIN,Cnt*sizeof(AdjustPacket),(U8*)AdjustData);
        ADD         R3,SP,#+0x4
        ADD         R2,R5,R5, LSL #+0x2
        AND         R2,R2,#+0xFF
        MOV         R1,#+0x13
        MOV         R0,R4
        BL          ??SendToAD
//  378 		OS_Delay(2000);
        MOV         R0,#+0x7D0
        _BLF        OS_Delay,OS_Delay??rA
//  379 	}
//  380 }
??SendGainAndOffset_6:
        ADD         SP,SP,#+0x4C       ;; stack cleaning
        CFI CFA R13+16
        LDMIA       SP!,{R4-R6,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        CODE16
??Correct_AD_Config??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock30
        REQUIRE ??Correct_AD_Config
//  381 
//  382 		#define DUMMY_PRESS_CHANNEL 13
//  383 		#define SETUP_BUF_SIZE			15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function ??Correct_AD_Config
        CODE32
//  384 bool SCADCard::Correct_AD_Config(void)
//  385 {
??Correct_AD_Config:
        STMDB       SP!,{R4-R8,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB         SP,SP,#+0x64
        CFI CFA R13+124
        MOV         R4,R0
//  386 	bool CfgDiffer = false;
        MOV         R7,#+0
//  387 	bool  HasPressureSensor=false;
        MOV         R5,R7
//  388 	bool  HasLevelSwitchSensor=false;
        MOV         R6,R5
//  389 	// Must check all the channels to be sure that we don't skip a pressure sensor
//  390 	for ( int Ch=0; Ch < MAX_AN_SGCNV_CHANNELS; Ch++ ) {
        MOV         R3,R5
        B           ??Correct_AD_Config_3
//  391 		unsigned SnsType;
//  392 		PROIOComponent *AIPtr = IOComponent[Ch];
//  393 		if ( AIPtr ) {
//  394 			switch ( AIPtr->Type ) {
//  395 				case C_AI_Pt100         :
//  396 				case C_AI_Pt1000        :
//  397 					SnsType = AD_TEMP_SNS;
//  398 					break;
//  399 				case C_AI_P906_0111     :
//  400 					SnsType = AD_PRESS_SNS;
//  401 					HasPressureSensor   = true;
//  402 					break;
//  403 				case C_AI_LeSw_ADCard   :
//  404 					HasLevelSwitchSensor = true;
//  405 				case C_AI_INCLINOMETER  :
//  406 					SnsType = AD_OTHER_SNS;
//  407 					break;
//  408 				default              :
//  409 					// This is an error in sensor object!!!
//  410 					SnsType = AD_NO_SNS;
//  411 					break;
//  412 			}
//  413 		} else if ( ( Ch == DUMMY_PRESS_CHANNEL ) && !HasPressureSensor ) {
//  414 			SnsType = AD_PRESS_SNS;
//  415 		} else {
//  416 			SnsType = AD_NO_SNS;
//  417 		}
//  418 		CfgDiffer |= (SnsType !=  ADConfigData[Ch].PCSensor );
??Correct_AD_Config_4:
        MOV         R2,#+0
??Correct_AD_Config_5:
        ORR         R7,R2,R7
        ADD         R3,R3,#+0x1
??Correct_AD_Config_3:
        CMP         R3,#+0xE
        BGE         ??Correct_AD_Config_6
        ADD         R0,R4,R3, LSL #+0x2
        LDR         R1,[R0, #+0x280]
        CMP         R1,#+0
        BEQ         ??Correct_AD_Config_7
        LDR         R2,[R1, #+0x48]
        SUB         R2,R2,#+0x3E
        SUB         R2,R2,#+0x800
        CMP         R2,#+0x32
        BHI         ??Correct_AD_Config_8
        ADR         R1,??Correct_AD_Config_1
        LDRB        R1,[R1, R2]
        ADD         PC,PC,R1, LSL #+0x2
        DATA
??Correct_AD_Config_1:
        DC8         +0xE,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0xC,+0xC
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x11,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x12,+0
        CODE32
??Correct_AD_Config_9:
        MOV         R12,#+0x1
        B           ??Correct_AD_Config_10
??Correct_AD_Config_11:
        MOV         R12,#+0x3
        MOV         R5,#+0x1
        B           ??Correct_AD_Config_10
??Correct_AD_Config_12:
        MOV         R6,#+0x1
??Correct_AD_Config_13:
        MOV         R12,#+0x2
        B           ??Correct_AD_Config_10
??Correct_AD_Config_8:
        MOV         R12,#+0
        B           ??Correct_AD_Config_10
??Correct_AD_Config_7:
        CMP         R3,#+0xD
        BNE         ??Correct_AD_Config_8
        CMP         R5,#+0
        BNE         ??Correct_AD_Config_8
        MOV         R12,#+0x3
??Correct_AD_Config_10:
        ADD         R8,R4,R3, LSL #+0x2
        LDR         R0,[R8, #+0x1C8]
        AND         R2,R0,#+0xC
        CMP         R12,R2, LSR #+0x2
        BEQ         ??Correct_AD_Config_4
        MOV         R2,#+0x1
        B           ??Correct_AD_Config_5
//  419 	}
//  420 
//  421 	U8 TxBuf[BUF_SIZE];
//  422 	int Size = 0;
??Correct_AD_Config_6:
        MOV         R8,#+0
//  423 	if ( CfgDiffer ) {
        ANDS        R7,R7,#+0xFF
        BEQ         ??Correct_AD_Config_14
//  424 		U8 SnsSetUpBuf[SETUP_BUF_SIZE];
//  425 		for ( int Ch=0; Ch < MAX_AN_SGCNV_CHANNELS; Ch++ ) {
        MOV         R0,R8
        B           ??Correct_AD_Config_15
//  426 			PROIOComponent *AIPtr = IOComponent[Ch];
//  427 			if ( AIPtr ) {// Check that we have a valid pointer
//  428 				switch ( AIPtr->Type ) {
//  429 					case C_AI_Pt100         :
//  430 					case C_AI_Pt1000        :
//  431 						SnsSetUpBuf[Ch] = (AD_TEMP_SNS | AD_USE_PC_INFO) <<2;
//  432 						break;
//  433 					case C_AI_P906_0111     :
//  434 						SnsSetUpBuf[Ch] =(AD_PRESS_SNS | AD_USE_PC_INFO)<<2;
//  435 						break;
//  436 					default                 :
//  437 						SnsSetUpBuf[Ch] = (AD_NO_SNS | AD_USE_PC_INFO) <<2;
//  438 						break;
//  439 					case C_AI_LeSw_ADCard   :
//  440 					case C_AI_INCLINOMETER  :
//  441 						SnsSetUpBuf[Ch] =(AD_OTHER_SNS | AD_USE_PC_INFO) <<2;
??Correct_AD_Config_16:
        ADD         R3,SP,#+0x4
        MOV         R12,#+0x18
        STRB        R12,[R0, +R3]
??Correct_AD_Config_17:
        ADD         R0,R0,#+0x1
??Correct_AD_Config_15:
        CMP         R0,#+0xE
        BGE         ??Correct_AD_Config_18
        ADD         R1,R4,R0, LSL #+0x2
        LDR         R8,[R1, #+0x280]
        CMP         R8,#+0
        BEQ         ??Correct_AD_Config_19
        LDR         R8,[R8, #+0x48]
        SUB         R8,R8,#+0x3E
        SUB         R8,R8,#+0x800
        CMP         R8,#+0x32
        BHI         ??Correct_AD_Config_19
        ADR         R2,??Correct_AD_Config_2
        LDRSB       R2,[R2, R8]
        ADD         PC,PC,R2, LSL #+0x2
        DATA
??Correct_AD_Config_2:
        DC8         +0x10,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0xC,+0xC
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0xED,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0x14,+0x14
        DC8         +0x14,+0x14,+0xED,+0
        CODE32
??Correct_AD_Config_20:
        ADD         R3,SP,#+0x4
        MOV         R12,#+0x14
        STRB        R12,[R0, +R3]
        B           ??Correct_AD_Config_17
??Correct_AD_Config_21:
        ADD         R1,SP,#+0x4
        MOV         R8,#+0x1C
        STRB        R8,[R0, +R1]
        B           ??Correct_AD_Config_17
??Correct_AD_Config_19:
        ADD         R2,SP,#+0x4
        MOV         R3,#+0x10
        STRB        R3,[R0, +R2]
        B           ??Correct_AD_Config_17
//  442 						break;
//  443 				}
//  444 			} else {
//  445 				SnsSetUpBuf[Ch]= ( AD_NO_SNS | AD_USE_PC_INFO) << 2;
//  446 			}
//  447 		}
//  448 		if ( !HasPressureSensor ) {
??Correct_AD_Config_18:
        CMP         R5,#+0
        BNE         ??Correct_AD_Config_22
//  449 			// Override setting due to bug on AD-card.
//  450 			SnsSetUpBuf[DUMMY_PRESS_CHANNEL] =(AD_PRESS_SNS | AD_USE_PC_INFO)<<2;
        MOV         R12,#+0x1C
        STRB        R12,[SP, #+0x11]
//  451 		}
//  452 		SnsSetUpBuf[14] = 1;	 // Flag that this information shall be used
??Correct_AD_Config_22:
        MOV         R8,#+0x1
        STRB        R8,[SP, #+0x12]
//  453 		// Send configuration to the AD card
//  454 		//SendToAD(ANP1_SND_SET_UP,SETUP_BUF_SIZE,(U8*)SnsSetUpBuf);
//  455 
//  456 		Size += AddCommand(TxBuf,ANP1_SND_SET_UP,SETUP_BUF_SIZE,SnsSetUpBuf);
        ADD         R2,SP,#+0x4
        STR         R2,[SP, #-4]!      ;; Push
        CFI CFA R13+128
        MOV         R3,#+0xF
        MOV         R2,#+0x14
        ADD         R1,SP,#+0x18
        MOV         R0,R4
        BL          ??AddCommand
        MOV         R8,R0
//  457 		SendToAD(Size,TxBuf);
        ADD         R2,SP,#+0x18
        MOV         R1,R8
        AND         R1,R1,#+0xFF
        MOV         R0,R4
        BL          ??SendToAD_1
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+124
//  458 	}
//  459 	if ( !HasPressureSensor && Restart ) {
??Correct_AD_Config_14:
        CMP         R5,#+0
        BNE         ??Correct_AD_Config_23
        LDRB        R5,[R4, #+0x194]
        CMP         R5,#+0
        BEQ         ??Correct_AD_Config_23
//  460 		// Change temperature conversion time
//  461 		U8 Delay = 2;	// Seconds temp scan delay
        MOV         R3,#+0x2
        STRB        R3,[SP, #+0]
//  462 		Size += AddCommand(TxBuf,ANP1_SND_TBTR,sizeof(Delay),&Delay);
        MOV         R0,SP
        STR         R0,[SP, #-4]!      ;; Push
        CFI CFA R13+128
        MOV         R3,#+0x1
        MOV         R2,#+0x15
        ADD         R1,SP,#+0x18
        MOV         R0,R4
        BL          ??AddCommand
        ADD         R8,R0,R8
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+124
//  463 	}
//  464 	if ( HasLevelSwitchSensor ) {
??Correct_AD_Config_23:
        CMP         R6,#+0
        BEQ         ??Correct_AD_Config_24
//  465 		// Change filters	 Default is 5,2,2, Press,Tmp,Other
//  466 		U8 Filter[3] = {5,2,0};	// Seconds pressure.
        ADD         R6,SP,#+0x1
        LDR         R12,??Correct_AD_Config_25  ;; `?<Constant {(unsigned char)'\\005', (unsigned c`
        LDRB        R1,[R12, #0]
        STRB        R1,[R6, #+0]
        LDRB        R1,[R12, #+0x1]
        STRB        R1,[R6, #+0x1]
        LDRB        R1,[R12, #+0x2]
        STRB        R1,[R6, #+0x2]
//  467 		Size += AddCommand(TxBuf,ANP1_SND_FILTER,sizeof(Filter),Filter);
        ADD         R5,SP,#+0x1
        STR         R5,[SP, #-4]!      ;; Push
        CFI CFA R13+128
        MOV         R3,#+0x3
        MOV         R2,#+0x1A
        ADD         R1,SP,#+0x18
        MOV         R0,R4
        BL          ??AddCommand
        ADD         R8,R0,R8
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+124
//  468 	}
//  469 	if ( Size ) {
??Correct_AD_Config_24:
        CMP         R8,#+0
        BEQ         ??Correct_AD_Config_26
//  470 		SendToAD(Size,TxBuf);
        ADD         R2,SP,#+0x14
        MOV         R1,R8
        AND         R1,R1,#+0xFF
        MOV         R0,R4
        BL          ??SendToAD_1
//  471 		OS_Delay(2000);
        MOV         R0,#+0x7D0
        _BLF        OS_Delay,OS_Delay??rA
//  472 	}
//  473 	return(CfgDiffer);
??Correct_AD_Config_26:
        MOV         R0,R7
        ADD         SP,SP,#+0x64       ;; stack cleaning
        CFI CFA R13+24
        LDMIA       SP!,{R4-R8,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        DATA
??Correct_AD_Config_25:
        DC32        `?<Constant {(unsigned char)'\\005', (unsigned c`
        CFI EndBlock cfiBlock31
//  474 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        CODE16
??ANPRO10_IO_UnpackPacket??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock32
        REQUIRE ??ANPRO10_IO_UnpackPacket
//  475 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//  476 static int TCnt = 0;
??TCnt:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function ??ANPRO10_IO_UnpackPacket
        CODE32
//  477 bool SCADCard::ANPRO10_IO_UnpackPacket(U8 *Buf)
//  478 {
??ANPRO10_IO_UnpackPacket:
        STMDB       SP!,{R4-R11,LR}    ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB         SP,SP,#+0x6C
        CFI CFA R13+144
        MOV         R4,R0
//  479 	bool MoreCommands = true;
        MOV         R5,#+0x1
//  480 	bool RecalcTanks = false;
        MOV         R9,#+0
//  481 	ANPRO10_PacketHeading *pPH = (ANPRO10_PacketHeading*)Buf;
//  482 	U8 *EndPtr =  &Buf[pPH->nob];
        LDRB        R7,[R1, #+0x5]
        LDRB        R8,[R1, #+0x4]
        ORR         R0,R8,R7, LSL #+0x8
        ADD         R2,R0,R1
        STR         R2,[SP, #+0]
//  483 
//  484 	Buf += sizeof(ANPRO10_PacketHeading);
        ADD         R8,R1,#+0x7
//  485 
//  486 	volatile ANPRO10_CommandHeading *pCH;
//  487 	bool MyPacket= (pPH->txadr == this->IOAddress);
        LDRB        R3,[R1, #+0x3]
        LDR         R12,[R4, #+0x1B0]
        CMP         R3,R12
        BNE         ??ANPRO10_IO_UnpackPacket_1
        MOV         R6,R5
        B           ??ANPRO10_IO_UnpackPacket_2
??ANPRO10_IO_UnpackPacket_1:
        MOV         R6,R9
//  488 	if ( MyPacket ) {
??ANPRO10_IO_UnpackPacket_2:
        CMP         R6,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_3
//  489 		do {
//  490 			pCH = (ANPRO10_CommandHeading*)Buf;
??ANPRO10_IO_UnpackPacket_4:
        MOV         R7,R8
//  491 			Buf += sizeof(ANPRO10_CommandHeading);	// ??
        ADD         R8,R8,#+0x4
//  492 			switch ( pCH->CommandNo ) {
        LDRB        R10,[R7, #+0x1]
        LDRB        R11,[R7, #+0]
        ORRS        R1,R11,R10, LSL #+0x8
        BEQ         ??ANPRO10_IO_UnpackPacket_5
        CMP         R1,#+0x1
        BEQ         ??ANPRO10_IO_UnpackPacket_5
        MOV         R0,#+0x75
        ORR         R0,R0,#+0x400
        CMP         R1,R0
        BEQ         ??ANPRO10_IO_UnpackPacket_6
        ADD         R0,R0,#+0x1
        CMP         R1,R0
        BEQ         ??ANPRO10_IO_UnpackPacket_7
        ADD         R0,R0,#+0x13
        CMP         R1,R0
        BNE         ??ANPRO10_IO_UnpackPacket_8
//  493 				case CMD_REP_RS4_ADBUF:
//  494 					{
//  495 						bool DataIsValid = (bool)*Buf++;
        LDRB        R2,[R8], #+0x1
        CMP         R2,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_9
        MOV         R2,#+0x1
//  496 						U8 Ch = *Buf++;;
??ANPRO10_IO_UnpackPacket_9:
        LDRB        R1,[R8], #+0x1
//  497 						if ( DataIsValid ) {
        CMP         R2,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_8
//  498 							SignalConverter *SConverter = FindSignalConverter(Ch);
        MOV         R0,R4
        _BLF        ??FindSignalConverter,??FindSignalConverter??rA
        MOV         R3,R0
//  499 							if ( SConverter ) {
        CMP         R3,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_8
//  500 								SConverter->GetEEPromData(Buf);
        MOV         R1,R8
        LDR         R3,[R3, #+0x50]
        LDR         R12,[R3, #+0x60]
        MOV         LR,PC
        BX          R12
        B           ??ANPRO10_IO_UnpackPacket_8
//  501 							}
//  502 						}
//  503 					}
//  504 					break;
//  505 				case CMD_REP_RS4_MDATA:
//  506 					{
//  507 						SgCnvMeasuredDataStruct *MsrdData = (SgCnvMeasuredDataStruct*)Buf;
//  508 						if ( MsrdData->IOChannel == IOChannel ) {
??ANPRO10_IO_UnpackPacket_6:
        LDRB        R10,[R8, #+0]
        LDR         R11,[R4, #+0x1B4]
        CMP         R10,R11
        BNE         ??ANPRO10_IO_UnpackPacket_8
//  509 							IOUnitStatus    = MsrdData->IOUnitStatus;
        LDRB        R1,[R8, #+0x1]
        STRB        R1,[R4, #+0x1BD]
//  510 							U8 TmpStatus    = IOUnitStatus >> 4;
        MOV         R0,R1
        MOVS        R12,R0, LSR #+0x4
//  511 							if ( TmpStatus ) {
        BEQ         ??ANPRO10_IO_UnpackPacket_10
//  512 								((IOUnitZB485*)IOModule)->ResetStatus = TmpStatus;
        LDR         R3,[R4, #+0x1A0]
        STRB        R12,[R3, #+0x1D0]
//  513 								((IOUnitZB485*)IOModule)->Restart     = true;
        LDR         R12,[R4, #+0x1A0]
        MOV         R10,#+0x1
        STRB        R10,[R12, #+0x1D1]
//  514 							}
//  515 							FailCnt         = MsrdData->FailCnt;
??ANPRO10_IO_UnpackPacket_10:
        LDRB        R11,[R8, #+0x3]
        LDRB        R1,[R8, #+0x2]
        ORR         R0,R1,R11, LSL #+0x8
        STR         R0,[R4, #+0x190]
//  516 							FailCntTotal    = MsrdData->FailCntTotal;
        LDRB        R2,[R8, #+0x5]
        LDRB        R3,[R8, #+0x4]
        ORR         R12,R3,R2, LSL #+0x8
        STR         R12,[R4, #+0x18C]
//  517 							SoftwareVersion = MsrdData->TargetStatusSWVer;
        LDRB        R10,[R8, #+0x6]
        STRB        R10,[R4, #+0x196]
//  518 							SCAddress       = MsrdData->TargetStatusAddress & 0x7f;
        LDRB        R11,[R8, #+0x7]
        AND         R1,R11,#+0x7F
        STR         R1,[R4, #+0x1B8]
//  519 							Restart         = (bool)( MsrdData->TargetStatusAddress >> 7);
        LDRB        R0,[R8, #+0x7]
        TST         R0,#+0x80
        BEQ         ??ANPRO10_IO_UnpackPacket_11
        MOV         R2,#+0x1
        STRB        R2,[R4, #+0x194]
        B           ??ANPRO10_IO_UnpackPacket_12
??ANPRO10_IO_UnpackPacket_11:
        MOV         R3,#+0
        STRB        R3,[R4, #+0x194]
//  520 							ActiveAlarms    = CheckAlarms(AlarmInfoList);
??ANPRO10_IO_UnpackPacket_12:
        LDR         R0,[R4, #+0x13C]
        _BLF        ??CheckAlarms,??CheckAlarms??rA
        STR         R0,[R4, #+0x4]
//  521 							if ( ActiveAlarms ) {
        MOV         R10,R0
        CMP         R10,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_13
//  522 								SetAlarmsToNormal(OthersAlarmInfoList);
        LDR         R0,[R4, #+0x144]
        _BLF        ??SetAlarmsToNormal,??SetAlarmsToNormal??rA
        B           ??ANPRO10_IO_UnpackPacket_14
//  523 							} else {
//  524 								RecalcTanks = true;
??ANPRO10_IO_UnpackPacket_13:
        MOV         R9,#+0x1
//  525 								ConfigPacket tmpADConfigData[MAX_AN_SGCNV_CHANNELS];
//  526 								memcpy((void*)&tmpADConfigData,(void*)&ADConfigData,sizeof(tmpADConfigData));
        ADD         R10,R4,#+0x1C8
        ADD         R11,SP,#+0x8
        MOV         R12,#+0x38
??ANPRO10_IO_UnpackPacket_15:
        SUBS        R12,R12,#+0x1
        LDRB        R1,[R10, R12]
        STRB        R1,[R11, R12]
        BNE         ??ANPRO10_IO_UnpackPacket_15
//  527 								for ( int i=0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
        MOV         R10,#+0
        B           ??ANPRO10_IO_UnpackPacket_16
//  528 									((U8*)&ADConfigData[i])[0] = MsrdData->Channel[i].Status1;
??ANPRO10_IO_UnpackPacket_17:
        ADD         R0,R4,R10, LSL #+0x2
        MOV         R2,#+0x6
        MLA         R3,R2,R10,R8
        LDRB        R12,[R3, #+0x8]
        STRB        R12,[R0, #+0x1C8]
//  529 									((U8*)&ADConfigData[i])[1] = MsrdData->Channel[i].Status2;
        ADD         R11,R4,R10, LSL #+0x2
        MOV         R1,R2
        MLA         R0,R1,R10,R8
        LDRB        R2,[R0, #+0x9]
        STRB        R2,[R11, #+0x1C9]
//  530 									// Check channel status eeprom setup, (Refreshed on AN485 every 15 sec.
//  531 									// Check sensor type and parameters, if fault, download	sensor type
//  532 									// and sensor parameters
//  533 									MsrdValues[i] = MsrdData->Channel[i].MsrdValue;
        MOV         R11,#+0
        ADD         R3,SP,#+0x4
        MOV         R12,R1
        MLA         R1,R12,R10,R8
??ANPRO10_IO_UnpackPacket_18:
        ADD         R0,R11,R1
        LDRB        R2,[R0, #+0xA]
        STRB        R2,[R11, +R3]
        ADD         R11,R11,#+0x1
        CMP         R11,#+0x4
        BLT         ??ANPRO10_IO_UnpackPacket_18
        ADD         R11,R4,R10, LSL #+0x2
        LDR         R12,[SP, #+0x4]
        STR         R12,[R11, #+0x200]
//  534 									PROIOComponent *CompPtr = IOComponent[i];
        ADD         R1,R4,R10, LSL #+0x2
        LDR         R11,[R1, #+0x280]
//  535 									float TVal = MsrdValues[i];
        ADD         R0,R4,R10, LSL #+0x2
        LDR         R1,[R0, #+0x200]
//  536 									if ( !TVal ) {
        MOV         R0,#+0
        _BLF        __fNotEqual,__fNotEqual??rA
        CMP         R0,#+0
        BNE         ??ANPRO10_IO_UnpackPacket_19
//  537 										TCnt++;
        LDR         R2,??ANPRO10_IO_UnpackPacket_20  ;; ??TCnt
        LDR         R3,??ANPRO10_IO_UnpackPacket_20  ;; ??TCnt
        LDR         R12,[R3, #+0]
        ADD         R1,R12,#+0x1
        STR         R1,[R2, #+0]
//  538 									}
//  539 									if ( CompPtr ) {
??ANPRO10_IO_UnpackPacket_19:
        CMP         R11,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_21
//  540 										//int Test = ADConfigData[i].EEPromStatus;
//  541 										if (ADConfigData[i].NewSensor ) {
        ADD         R0,R4,R10, LSL #+0x2
        LDR         R2,[R0, #+0x1C8]
        AND         R3,R2,#+0x80
        MOVS        R12,R3, LSR #+0x7
        BEQ         ??ANPRO10_IO_UnpackPacket_22
//  542 											 ADConfigData[i].EEPromStatus = AD_EEPROM_OK;
        ADD         R1,R4,R10, LSL #+0x2
        LDR         R2,[R0, #+0x1C8]
        BIC         R3,R2,#+0xF000
        ORR         R12,R3,#+0x1000
        STR         R12,[R1, #+0x1C8]
//  543 										}
//  544 										if ( CompPtr->Type == C_AI_P906_0111 ) {
??ANPRO10_IO_UnpackPacket_22:
        LDR         R1,[R11, #+0x48]
        MOV         R0,#+0x3E
        ORR         R0,R0,#+0x800
        CMP         R1,R0
        BNE         ??ANPRO10_IO_UnpackPacket_23
//  545 											switch ( ADConfigData[i].EEPromStatus ) {
        ADD         R2,R4,R10, LSL #+0x2
        LDR         R3,[R2, #+0x1C8]
        AND         R12,R3,#+0xF000
        MOVS        R1,R12, LSR #+0xC
        BEQ         ??ANPRO10_IO_UnpackPacket_24
        SUBS        R1,R1,#+0x2
        BNE         ??ANPRO10_IO_UnpackPacket_23
//  546 												case AD_EEPROM_OK   :
//  547 												case AD_NOT_USED    :
//  548 													break;
//  549 												case AD_NO_EEPROM   :
//  550 												case AD_EEPROM_ERROR:
//  551 													// Check that our sensor has EEProm
//  552 													AIPressSensor_mV *SnsPtr = (AIPressSensor_mV*)CompPtr;
//  553 													U8 EEPData[EEPROM_SIZE+2]={i};	 // Reference AN_PRO1. Command 18
??ANPRO10_IO_UnpackPacket_24:
        STRB        R10,[SP, #+0x40]
//  554 													SnsPtr->PackSensorData(&EEPData[1]);
        ADD         R1,SP,#+0x41
        MOV         R0,R11
        _BLF        ??PackSensorData,??PackSensorData??rA
//  555 													EEPData[41] = 1;	 // Use data from the PC
        MOV         R3,R9
        STRB        R3,[SP, #+0x69]
//  556 													SendToAD(ANP1_SND_EEP_DATA,EEPROM_SIZE+2,EEPData);
        ADD         R3,SP,#+0x40
        MOV         R2,#+0x2A
        MOV         R1,#+0x12
        MOV         R0,R4
        BL          ??SendToAD
//  557 													break;
//  558 											}
//  559 										}
//  560 										CompPtr->SetStatus(*((U32*)&ADConfigData[i]));
??ANPRO10_IO_UnpackPacket_23:
        ADD         R12,R4,R10, LSL #+0x2
        LDR         R1,[R12, #+0x1C8]
        MOV         R0,R11
        LDR         R2,[R11, #+0x50]
        LDR         R3,[R2, #+0x50]
        MOV         LR,PC
        BX          R3
//  561 										CompPtr->NewValue(MsrdValues[i]);
        ADD         R1,R4,R10, LSL #+0x2
        LDR         R1,[R1, #+0x200]
        MOV         R0,R11
        LDR         R12,[R11, #+0x50]
        LDR         R2,[R12, #+0x54]
        MOV         LR,PC
        BX          R2
//  562 										CompPtr->ActiveAlarms = CheckAlarms(CompPtr->AlarmInfoList);
        LDR         R0,[R11, #+0x54]
        _BLF        ??CheckAlarms,??CheckAlarms??rA
        STR         R0,[R11, #+0x4]
//  563 										CompPtr->Calculate();
        MOV         R0,R11
        LDR         R3,[R11, #+0x50]
        LDR         R1,[R3, #+0x4C]
        MOV         LR,PC
        BX          R1
//  564 										CompPtr->SendData();
        MOV         R1,#+0x65
        MOV         R0,R11
        LDR         R11,[R11, #+0x50]
        LDR         R12,[R11, #+0x30]
        MOV         LR,PC
        BX          R12
//  565 									}
//  566 								}
??ANPRO10_IO_UnpackPacket_21:
        ADD         R10,R10,#+0x1
??ANPRO10_IO_UnpackPacket_16:
        CMP         R10,#+0xE
        BLT         ??ANPRO10_IO_UnpackPacket_17
//  567 								if ( memcmp((void*)&ADConfigData,&tmpADConfigData,sizeof(ADConfigData)) ) {
        MOV         R2,#+0x38
        ADD         R1,SP,#+0x8
        ADD         R0,R4,#+0x1C8
        _BLF        memcmp,memcmp??rA
        CMP         R0,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_14
//  568 									SendData(CMD_GENERIC_STATIC_DATA);
        MOV         R1,#+0x66
        MOV         R0,R4
        LDR         R10,[R4, #+0x50]
        LDR         R2,[R10, #+0x30]
        MOV         LR,PC
        BX          R2
//  569 								}
//  570 							}
//  571 							SetHWFailure((bool)ActiveAlarms,false);
??ANPRO10_IO_UnpackPacket_14:
        LDR         R1,[R4, #+0x4]
        CMP         R1,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_25
        MOV         R1,#+0x1
??ANPRO10_IO_UnpackPacket_25:
        MOV         R2,#+0
        MOV         R0,R4
        LDR         R3,[R4, #+0x50]
        LDR         R11,[R3, #+0x58]
        MOV         LR,PC
        BX          R11
//  572 							SendData();
        MOV         R1,#+0x65
        MOV         R0,R4
        LDR         R12,[R4, #+0x50]
        LDR         R10,[R12, #+0x30]
        MOV         LR,PC
        BX          R10
        B           ??ANPRO10_IO_UnpackPacket_8
//  573 						}
//  574 					}
//  575 					break;
//  576 				case CMD_REP_RS4_RDATA:
//  577 					{
//  578 						SgCnvRawDataStruct *MsrdData = (SgCnvRawDataStruct*)Buf;
//  579 						if ( MsrdData->IOChannel == IOChannel ) {
??ANPRO10_IO_UnpackPacket_7:
        LDRB        R0,[R8, #+0]
        LDR         R1,[R4, #+0x1B4]
        CMP         R0,R1
        BNE         ??ANPRO10_IO_UnpackPacket_8
//  580 							{
//  581 								for ( int i=0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
        MOV         R0,#+0
??ANPRO10_IO_UnpackPacket_26:
        CMP         R0,#+0xE
        BGE         ??ANPRO10_IO_UnpackPacket_8
//  582 									RawValues[i]=MsrdData->Channel[i][0];
        ADD         R2,R4,R0, LSL #+0x1
        ADD         R3,R2,#+0x254
        ADD         R11,R8,R0, LSL #+0x2
        LDRB        R12,[R11, #+0x2]
        ADD         R10,R8,R0, LSL #+0x2
        LDRB        R1,[R10, #+0x1]
        ORR         R2,R1,R12, LSL #+0x8
        STRH        R2,[R3, #+0]
//  583 									CalValues[i]=MsrdData->Channel[i][1];
        ADD         R3,R4,R0, LSL #+0x1
        ADD         R11,R3,#+0x238
        ADD         R12,R8,R0, LSL #+0x2
        LDRB        R10,[R12, #+0x4]
        ADD         R1,R8,R0, LSL #+0x2
        LDRB        R2,[R1, #+0x3]
        ORR         R3,R2,R10, LSL #+0x8
        STRH        R3,[R11, #+0]
//  584 								}
        ADD         R0,R0,#+0x1
        B           ??ANPRO10_IO_UnpackPacket_26
//  585 							}
//  586 						}
//  587 					}
//  588 					break;
//  589 					//case CMD_REP_RS4_CDATA:
//  590 				case ECMD_NMDWOACK:
//  591 				case ECMD_NMDRQACK:
//  592 					MoreCommands=false;
??ANPRO10_IO_UnpackPacket_5:
        MOV         R5,#+0
//  593 					break;
//  594 				default:
//  595 					break;
//  596 
//  597 			}
//  598 			if ( MoreCommands ) {
??ANPRO10_IO_UnpackPacket_8:
        CMP         R5,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_27
//  599 				Buf += pCH->ndb;
        LDRB        R0,[R7, #+0x3]
        LDRB        R7,[R7, #+0x2]
        ORR         R11,R7,R0, LSL #+0x8
        ADD         R8,R11,R8
//  600 			}
//  601 		} while ( MoreCommands && ( Buf < EndPtr ) );
??ANPRO10_IO_UnpackPacket_28:
        BEQ         ??ANPRO10_IO_UnpackPacket_27
        LDR         R10,[SP, #+0]
        CMP         R8,R10
        BCC         ??ANPRO10_IO_UnpackPacket_4
//  602 		if ( RecalcTanks ) {
??ANPRO10_IO_UnpackPacket_27:
        CMP         R9,#+0
        BEQ         ??ANPRO10_IO_UnpackPacket_3
//  603 			RecalcTanks = false;
//  604 			RecalcProgramObjects(UniquePROList);
        LDR         R0,[R4, #+0x27C]
        _BLF        ??RecalcProgramObjects,??RecalcProgramObjects??rA
//  605 		}
//  606 	}
//  607 	return(MyPacket);		// We came from IOUnitZB485
??ANPRO10_IO_UnpackPacket_3:
        MOV         R0,R6
        ADD         SP,SP,#+0x6C       ;; stack cleaning
        CFI CFA R13+36
        LDMIA       SP!,{R4-R11,LR}    ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        DATA
??ANPRO10_IO_UnpackPacket_20:
        DC32        ??TCnt
        CFI EndBlock cfiBlock33
//  608 	//return true;
//  609 
//  610 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        CODE16
??GetEEPromData??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock34
        REQUIRE ??GetEEPromData
//  611 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function ??GetEEPromData
        CODE32
//  612 void SCADCard::GetEEPromData(U8 *DataPtr)
//  613 {
??GetEEPromData:
        STMDB       SP!,{R4,LR}        ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV         R2,R0
//  614 	U8 Ch = *DataPtr++;
        LDRB        R0,[R1], #+0x1
//  615 	if ( Ch == MAX_AN_SGCNV_CHANNELS ) {
        MOV         R4,R0
        CMP         R4,#+0xE
        BNE         ??GetEEPromData_1
//  616 		SerialNumber=DataPtr[0]|(DataPtr[1]<<8)|(DataPtr[2]<<16)|(DataPtr[3]<<24);
        LDRB        R0,[R1, #+0]
        LDRB        R3,[R1, #+0x1]
        ORR         R12,R0,R3, LSL #+0x8
        LDRB        R4,[R1, #+0x2]
        ORR         R0,R12,R4, LSL #+0x10
        LDRB        R1,[R1, #+0x3]
        ORR         R3,R0,R1, LSL #+0x18
        STR         R3,[R2, #+0x198]
//  617 		SendData(CMD_GENERIC_STATIC_DATA);
        MOV         R1,#+0x66
        MOV         R0,R2
        LDR         R2,[R2, #+0x50]
        LDR         R12,[R2, #+0x30]
        MOV         LR,PC
        BX          R12
        B           ??GetEEPromData_2
//  618 	} else if ( Ch < MAX_AN_SGCNV_CHANNELS ) {
??GetEEPromData_1:
        BCS         ??GetEEPromData_2
//  619 		if ( !ADConfigData[Ch].EEPUsePCData && ADConfigData[Ch].EEPromStatus == AD_EEPROM_OK ) {
        MOV         R3,R0
        ADD         R12,R2,R3, LSL #+0x2
        LDR         R4,[R12, #+0x1C8]
        AND         R3,R4,#+0x800
        MOVS        R12,R3, LSR #+0xB
        BNE         ??GetEEPromData_2
        MOV         R4,R0
        ADD         R3,R2,R4, LSL #+0x2
        LDR         R12,[R3, #+0x1C8]
        AND         R4,R12,#+0xF000
        MOV         R3,R4, LSR #+0xC
        CMP         R3,#+0x1
        BNE         ??GetEEPromData_2
//  620 			PROIOComponent *CompPtr = IOComponent[Ch];
        MOV         R12,R0
        ADD         R4,R2,R12, LSL #+0x2
        LDR         R4,[R4, #+0x280]
//  621 			if ( CompPtr ) {
        CMP         R4,#+0
        BEQ         ??GetEEPromData_2
//  622 				switch ( CompPtr->Type ) {
        LDR         R3,[R4, #+0x48]
        MOV         R12,#+0x3E
        ORR         R12,R12,#+0x800
        CMP         R3,R12
        BNE         ??GetEEPromData_2
//  623 					case C_AI_P906_0111:
//  624 						{
//  625 							U8 OKPacket = 0;
        MOV         R3,#+0
//  626 							for ( int i=1; i < 8; i++ ) {
        MOV         R12,#+0x1
        B           ??GetEEPromData_3
//  627 								OKPacket |= DataPtr[i];
??GetEEPromData_4:
        LDRB        LR,[R12, +R1]
        ORR         R3,LR,R3
        AND         R3,R3,#+0xFF
//  628 							}
        ADD         R12,R12,#+0x1
??GetEEPromData_3:
        CMP         R12,#+0x8
        BLT         ??GetEEPromData_4
//  629 							if ( OKPacket ) {
        CMP         R3,#+0
        BEQ         ??GetEEPromData_2
//  630 								// Make one additional check
//  631 								OKPacket = 0;	 // Changed in Ulsan EHS 16/1/1
        MOV         R3,#+0
//  632 								for ( int i=10; i < 20; i++ ) {
        MOV         R12,#+0xA
        B           ??GetEEPromData_5
//  633 									OKPacket |= DataPtr[i];
??GetEEPromData_6:
        LDRB        LR,[R12, +R1]
        ORR         R3,LR,R3
        AND         R3,R3,#+0xFF
//  634 								}
        ADD         R12,R12,#+0x1
??GetEEPromData_5:
        CMP         R12,#+0x14
        BLT         ??GetEEPromData_6
//  635 								if ( OKPacket ) {
        CMP         R3,#+0
        BEQ         ??GetEEPromData_7
//  636 									AIPressSensor_mV *SnsPtr = (AIPressSensor_mV*)CompPtr;
//  637 									if ( SnsPtr->UnpackSensorData(DataPtr) ) {
        MOV         R0,R4
        _BLF        ??UnpackSensorData,??UnpackSensorData??rA
        CMP         R0,#+0
        BEQ         ??GetEEPromData_2
//  638 										SnsPtr->SendData(CMD_GENERIC_STATIC_DATA);
        MOV         R1,#+0x66
        MOV         R0,R4
        LDR         R2,[R4, #+0x50]
        LDR         R4,[R2, #+0x30]
        MOV         LR,PC
        BX          R4
//  639 										OS_SignalEvent(FLASH_SAVE_CONFIG,&SaveSettingsTaskHandle);
        LDR         R1,??GetEEPromData_8  ;; SaveSettingsTaskHandle
        MOV         R0,#+0x1
        _BLF        OS_SignalEvent,OS_SignalEvent??rA
        B           ??GetEEPromData_2
//  640 
//  641 										//StartUpdateConfigTimer();
//  642 									}
//  643 								} else {
//  644 									ADConfigData[Ch].EEPromStatus = AD_EEPROM_ERROR;
??GetEEPromData_7:
        MOV         R1,R0
        ADD         R3,R2,R1, LSL #+0x2
        ADD         R0,R2,R0, LSL #+0x2
        LDR         R12,[R0, #+0x1C8]
        BIC         R2,R12,#+0xF000
        ORR         R4,R2,#+0x2000
        STR         R4,[R3, #+0x1C8]
//  645 								}
//  646 							}
//  647 						}
//  648 						break;
//  649 					default:
//  650 						break;
//  651 				}
//  652 			}
//  653 		}
//  654 	}
//  655 }
??GetEEPromData_2:
        LDMIA       SP!,{R4,LR}        ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        DATA
??GetEEPromData_8:
        DC32        SaveSettingsTaskHandle
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        CODE16
??RequestMeasuredData??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock36
        REQUIRE ??RequestMeasuredData
//  656 
//  657 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function ??RequestMeasuredData
        CODE32
//  658 void SCADCard::RequestMeasuredData(int  DataType)
//  659 {
??RequestMeasuredData:
        STR         LR,[SP, #-4]!      ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB         SP,SP,#+0x14
        CFI CFA R13+24
//  660 	NetPacket Packet;
//  661 	U8 Data[2]={(U8)DataType,(U8)IOChannel};
        STRB        R1,[SP, #+0]
        LDR         R1,[R0, #+0x1B4]
        STRB        R1,[SP, #+0x1]
//  662 	Packet.Command    = CMD_REQ_RS4_DATA;
        MOV         R3,#+0x74
        ORR         R3,R3,#+0x400
        STRH        R3,[SP, #+0x4]
//  663 	Packet.RxAddress  = IOAddress;
        LDR         R1,[R0, #+0x1B0]
        STRB        R1,[SP, #+0x9]
//  664 	Packet.RxTypeId   = DEVICE_ZB485;
        MOV         R3,#+0x10
        STRB        R3,[SP, #+0x8]
//  665 	Packet.RequestAck = 0;
        MOV         R1,#+0
        STRB        R1,[SP, #+0xA]
//  666 	Packet.Size       = 2;
        MOV         R3,#+0x2
        STRH        R3,[SP, #+0x6]
//  667 	Packet.Data       = Data;
        MOV         R1,SP
        STR         R1,[SP, #+0x10]
        MOV         R2,#+0
        ADD         R1,SP,#+0x10
??RequestMeasuredData_1:
        ADD         R3,SP,#+0x4
        ADD         R12,R2,R3
        LDRB        R3,[R2, +R1]
        STRB        R3,[R12, #+0x7]
        ADD         R2,R2,#+0x1
        CMP         R2,#+0x4
        BLT         ??RequestMeasuredData_1
//  668 	SendPacket(Packet);
        ADD         R1,SP,#+0x4
        _BLF        ??SendPacket,??SendPacket??rA
//  669 }
        ADD         SP,SP,#+0x14       ;; stack cleaning
        CFI CFA R13+4
        LDR         LR,[SP], #+0x4     ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        CODE16
??HandleCard??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock38
        REQUIRE ??HandleCard
//  670 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function ??HandleCard
        CODE32
//  671 void SCADCard::HandleCard()
//  672 {
??HandleCard:
        STMDB       SP!,{R4,LR}        ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV         R4,R0
//  673 	if ( Restart ) {
        LDRB        R0,[R4, #+0x194]
        CMP         R0,#+0
        BEQ         ??HandleCard_1
//  674 		// Should ask for sensor info for all channels here
//  675 		// Should set up filters and sensor cable length etc
//  676 		Restart=false;
        MOV         R3,#+0
        STRB        R3,[R4, #+0x194]
//  677 		SendGainAndOffset();
        MOV         R0,R4
        BL          ??SendGainAndOffset
//  678 		RequestADConfig = true;
        MOV         R12,#+0x1
        STRB        R12,[R4, #+0x1C0]
        B           ??HandleCard_2
//  679 		// Download setup, Sensor types
//  680 		// Download filters
//  681 		// Use packet 1160
//  682 		// Can not download to any other card next 2 seconds
//  683 	} else if ( NewSensor ) {
??HandleCard_1:
        LDRB        R1,[R4, #+0x195]
        CMP         R1,#+0
        BEQ         ??HandleCard_3
//  684 		NewSensor = false;
        MOV         R0,#+0
        STRB        R0,[R4, #+0x195]
        B           ??HandleCard_2
//  685 		// Should ask for sensor info for all channels here
//  686 	} else {// The normal place
//  687 		RequestMeasuredData(0);
??HandleCard_3:
        MOV         R0,R4
        LDR         R2,[R4, #+0x50]
        LDR         R3,[R2, #+0x5C]
        MOV         LR,PC
        BX          R3
//  688 		//OS_Delay(1000);
//  689 		if ( ANPRO10_IO_Receive() ) {
        MOV         R1,#+0x1F4
        MOV         R0,R4
        _BLF        ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
        CMP         R0,#+0
        BEQ         ??HandleCard_2
//  690 			if ( RequestADConfig ) {
        LDRB        R1,[R4, #+0x1C0]
        CMP         R1,#+0
        BEQ         ??HandleCard_4
//  691 				RequestADConfig = false;
        MOV         R12,#+0
        STRB        R12,[R4, #+0x1C0]
//  692 				Correct_AD_Config();
        MOV         R0,R4
        BL          ??Correct_AD_Config
        B           ??HandleCard_2
//  693 			} else if ( RequestRawCnt++ >= 5 ) {
??HandleCard_4:
        LDR         R2,[R4, #+0x1C4]
        ADD         R0,R2,#+0x1
        STR         R0,[R4, #+0x1C4]
        CMP         R2,#+0x5
        BLT         ??HandleCard_2
//  694 				RequestRawCnt = 0;
        MOV         R2,#+0
        STR         R2,[R4, #+0x1C4]
//  695 				RequestMeasuredData(1);
        MOV         R1,#+0x1
        MOV         R0,R4
        LDR         R3,[R4, #+0x50]
        LDR         R12,[R3, #+0x5C]
        MOV         LR,PC
        BX          R12
//  696 				//OS_Delay(1000);
//  697 				if ( ANPRO10_IO_Receive() ) {
        MOV         R1,#+0x1F4
        MOV         R0,R4
        _BLF        ??ANPRO10_IO_Receive,??ANPRO10_IO_Receive??rA
//  698 				}
//  699 			}
//  700 		}
//  701 	}
//  702 }
??HandleCard_2:
        LDMIA       SP!,{R4,LR}        ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        CODE16
??ReceiveData??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock40
        REQUIRE ??ReceiveData
//  703 	#endif
//  704 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function ??ReceiveData
        CODE32
//  705 int SCADCard::ReceiveData(U8* data)
//  706 {
??ReceiveData:
        STMDB       SP!,{R4-R6,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB         SP,SP,#+0x8
        CFI CFA R13+24
        MOV         R4,R0
        MOV         R5,R1
//  707 	int ErrorStatus = E_OK;
//  708 	ANPRO10_CommandHeading *pCH = (ANPRO10_CommandHeading*)data;
//  709 	switch ( pCH->CommandNo ) {
        LDRB        R3,[R5, #+0x1]
        LDRB        R12,[R5, #+0]
        ORR         R6,R12,R3, LSL #+0x8
        CMP         R6,#+0x65
        BEQ         ??ReceiveData_1
        CMP         R6,#+0x66
        BEQ         ??ReceiveData_2
        MOV         R1,#+0x3C
        ORR         R1,R1,#+0xA00
        CMP         R6,R1
        BEQ         ??ReceiveData_1
        ORR         R1,R1,#+0x1
        CMP         R6,R1
        BEQ         ??ReceiveData_2
        B           ??ReceiveData_3
//  710 		case  CMD_PRO_SC_ADCARD_RT_DATA:	// Realtime data
//  711 		case CMD_GENERIC_REALTIME_DATA:
//  712 			{
//  713 				ANPRO10_COMMAND_2620  *pData = (ANPRO10_COMMAND_2620*) data;
//  714 				if ( m_ObjectId == pData->ObjectId ) {
??ReceiveData_1:
        LDR         R2,[R4, #+0x4C]
        LDRB        R0,[R5, #+0x7]
        LDRB        R3,[R5, #+0x6]
        ORR         R12,R3,R0, LSL #+0x8
        LDRB        R6,[R5, #+0x5]
        ORR         R1,R6,R12, LSL #+0x8
        LDRB        R0,[R5, #+0x4]
        ORR         R3,R0,R1, LSL #+0x8
        CMP         R2,R3
        BNE         ??ReceiveData_4
//  715 					FailCnt      = pData->FailCnt;
        LDRB        R2,[R5, #+0xF]
        LDRB        R12,[R5, #+0xE]
        ORR         R6,R12,R2, LSL #+0x8
        LDRB        R1,[R5, #+0xD]
        ORR         R0,R1,R6, LSL #+0x8
        LDRB        R3,[R5, #+0xC]
        ORR         R2,R3,R0, LSL #+0x8
        STR         R2,[R4, #+0x190]
//  716 					FailCntTotal = pData->FailCntTotal;
        LDRB        R12,[R5, #+0xB]
        LDRB        R6,[R5, #+0xA]
        ORR         R1,R6,R12, LSL #+0x8
        LDRB        R0,[R5, #+0x9]
        ORR         R3,R0,R1, LSL #+0x8
        LDRB        R2,[R5, #+0x8]
        ORR         R12,R2,R3, LSL #+0x8
        STR         R12,[R4, #+0x18C]
//  717 					for ( int i=0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
        MOV         R6,#+0
        B           ??ReceiveData_5
//  718 						MsrdValues[i] = pData->MsrdValues[i];
??ReceiveData_6:
        MOV         R1,#+0
        MOV         R0,SP
        ADD         R3,R5,R6, LSL #+0x2
??ReceiveData_7:
        ADD         R2,R1,R3
        LDRB        R12,[R2, #+0x10]
        STRB        R12,[R1, +R0]
        ADD         R1,R1,#+0x1
        CMP         R1,#+0x4
        BLT         ??ReceiveData_7
        ADD         R1,R4,R6, LSL #+0x2
        LDR         R3,[SP, #+0]
        STR         R3,[R1, #+0x200]
//  719 						CalValues[i]  = pData->CalValues[i];
        ADD         R2,R4,R6, LSL #+0x1
        ADD         R12,R2,#+0x238
        ADD         R1,R5,R6, LSL #+0x1
        LDRB        R0,[R1, #+0x49]
        ADD         R3,R5,R6, LSL #+0x1
        LDRB        R2,[R3, #+0x48]
        ORR         R1,R2,R0, LSL #+0x8
        STRH        R1,[R12, #+0]
//  720 						RawValues[i]  = pData->RawValues[i];
        ADD         R12,R4,R6, LSL #+0x1
        ADD         R0,R12,#+0x254
        LDRB        R2,[R3, #+0x65]
        ADD         R1,R5,R6, LSL #+0x1
        LDRB        R12,[R1, #+0x64]
        ORR         R3,R12,R2, LSL #+0x8
        STRH        R3,[R0, #+0]
//  721 						memcpy((void*)&ADConfigData[i],&pData->ADConfigData[i],sizeof(ConfigPacket));
        ADD         R2,R5,R6, LSL #+0x2
        ADD         R1,R2,#+0x80
        ADD         R12,R4,R6, LSL #+0x2
        ADD         R3,R12,#+0x1C8
        LDRB        R2,[R1, #0]
        STRB        R2,[R3, #+0]
        LDRB        R2,[R1, #+0x1]
        STRB        R2,[R3, #+0x1]
        LDRB        R2,[R1, #+0x2]
        STRB        R2,[R3, #+0x2]
        LDRB        R2,[R1, #+0x3]
        STRB        R2,[R3, #+0x3]
//  722 						PROIOComponent *CompPtr = IOComponent[i];
        ADD         R0,R4,R6, LSL #+0x2
        LDR         R2,[R0, #+0x280]
//  723 						if ( CompPtr ) {
        CMP         R2,#+0
        BEQ         ??ReceiveData_8
//  724 							CompPtr->SetStatus(*((U32*)&ADConfigData[i]));
        ADD         R1,R4,R6, LSL #+0x2
        LDR         R1,[R1, #+0x1C8]
        MOV         R0,R2
        LDR         R12,[R2, #+0x50]
        LDR         R3,[R12, #+0x50]
        MOV         LR,PC
        BX          R3
//  725 						}
//  726 					}
??ReceiveData_8:
        ADD         R6,R6,#+0x1
??ReceiveData_5:
        CMP         R6,#+0xE
        BLT         ??ReceiveData_6
//  727 					ErrorStatus =  E_OK;
        MOV         R0,#+0
        B           ??ReceiveData_9
//  728 				} else {
//  729 					ErrorStatus =  E_UNKNOWN_OBJECT;
??ReceiveData_4:
        MOV         R0,#+0x2
        B           ??ReceiveData_9
//  730 				}
//  731 			}
//  732 			break;
//  733 		case CMD_PRO_SC_ADCARD_ST_DATA:	// Static data
//  734 		case CMD_GENERIC_STATIC_DATA:
//  735 			{
//  736 				ANPRO10_COMMAND_2621  *pData = (ANPRO10_COMMAND_2621*) data;
//  737 				if ( m_ObjectId == pData->ObjectId ) {
??ReceiveData_2:
        LDR         R6,[R4, #+0x4C]
        LDRB        R2,[R5, #+0x7]
        LDRB        R0,[R5, #+0x6]
        ORR         R1,R0,R2, LSL #+0x8
        LDRB        R12,[R5, #+0x5]
        ORR         R3,R12,R1, LSL #+0x8
        LDRB        R2,[R5, #+0x4]
        ORR         R0,R2,R3, LSL #+0x8
        CMP         R6,R0
        BNE         ??ReceiveData_4
//  738 					SoftwareVersion = pData->SoftwareVersion;
        LDRB        R6,[R5, #+0x8]
        STRB        R6,[R4, #+0x196]
//  739 					RxBufSize       = pData->RxBufSize;
        LDRB        R1,[R5, #+0xA]
        STRB        R1,[R4, #+0x270]
//  740 					TxBufSize       = pData->TxBufSize;
        LDRB        R12,[R5, #+0xC]
        STRB        R12,[R4, #+0x271]
//  741 					CalNull         = pData->CalNull;
        MOV         R3,#+0x72
        ORR         R3,R3,#+0x200
        LDRB        R2,[R5, #+0xF]
        LDRB        R0,[R5, #+0xE]
        ORR         R6,R0,R2, LSL #+0x8
        STRH        R6,[R3, +R4]
//  742 					SerialNumber    = pData->SerialNumber;
        LDRB        R1,[R5, #+0x13]
        LDRB        R12,[R5, #+0x12]
        ORR         R3,R12,R1, LSL #+0x8
        LDRB        R2,[R5, #+0x11]
        ORR         R0,R2,R3, LSL #+0x8
        LDRB        R6,[R5, #+0x10]
        ORR         R1,R6,R0, LSL #+0x8
        STR         R1,[R4, #+0x198]
//  743 					CalGain         = pData->CalGain;
        MOV         R0,#+0
        ADD         R12,SP,#+0x4
??ReceiveData_10:
        ADD         R3,R0,R5
        LDRB        R2,[R3, #+0x14]
        STRB        R2,[R0, +R12]
        ADD         R0,R0,#+0x1
        CMP         R0,#+0x4
        BLT         ??ReceiveData_10
        LDR         R0,[SP, #+0x4]
        STR         R0,[R4, #+0x274]
//  744 					ErrorStatus =  E_OK;
        MOV         R0,#+0
        B           ??ReceiveData_9
//  745 				} else {
//  746 					ErrorStatus =  E_UNKNOWN_OBJECT;
//  747 				}
//  748 			}
//  749 			break;
//  750 
//  751 		default:
//  752 			ErrorStatus = E_UNKNOWN_COMMAND;
??ReceiveData_3:
        MOV         R0,#+0x1
//  753 			break;
//  754 	}
//  755 	return(ErrorStatus);
??ReceiveData_9:
        ADD         SP,SP,#+0x8        ;; stack cleaning
        CFI CFA R13+16
        LDMIA       SP!,{R4-R6,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock41
//  756 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        CODE16
??SendData??rT:
        BX          PC
        NOP         
        CFI EndBlock cfiBlock42
        REQUIRE ??SendData
//  757 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function ??SendData
        CODE32
//  758 int SCADCard::SendData(U16 cmd)
//  759 {
??SendData:
        STMDB       SP!,{R4,LR}        ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB         SP,SP,#+0xE4
        CFI CFA R13+236
//  760 	int ErrorStatus = E_OK;
//  761 	switch ( cmd ) {
        CMP         R1,#+0x65
        BEQ         ??SendData_1
        CMP         R1,#+0x66
        BEQ         ??SendData_2
        MOV         R12,#+0x3C
        ORR         R12,R12,#+0xA00
        CMP         R1,R12
        BEQ         ??SendData_1
        ORR         R12,R12,#+0x1
        CMP         R1,R12
        BEQ         ??SendData_2
        B           ??SendData_3
//  762 		case CMD_PRO_SC_ADCARD_RT_DATA:
//  763 		case CMD_GENERIC_REALTIME_DATA:
//  764 			{
//  765 				QueueANPRO10_COMMAND_2620 Cmd;
//  766 				Cmd.TxInfo.Port           = NULL;
??SendData_1:
        MOV         R2,#+0
        STR         R2,[SP, #+0x24]
//  767 				Cmd.TxInfo.rxAddr         = DEVICE_BROADCAST_ADDR;
        MOV         R12,#+0xFF
        STRB        R12,[SP, #+0x28]
//  768 				Cmd.TxInfo.rxId           = DEVICE_BROADCAST_TXU;
        MOV         R2,#+0xE
        STRB        R2,[SP, #+0x29]
//  769 				Cmd.Data.ObjectId         = m_ObjectId;
        LDR         R3,[R0, #+0x4C]
        STRB        R3,[SP, #+0x2E]
        MOV         R12,R3, LSR #+0x8
        STRB        R12,[SP, #+0x2F]
        MOV         R1,R12, LSR #+0x8
        STRB        R1,[SP, #+0x30]
        MOV         R1,R1, LSR #+0x8
        STRB        R1,[SP, #+0x31]
//  770 				Cmd.Data.ndb              = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
        MOV         R2,#+0xB4
        STRH        R2,[SP, #+0x2C]
//  771 				Cmd.Data.CommandNo        = CMD_PRO_SC_ADCARD_RT_DATA;
        MOV         R1,#+0x3C
        ORR         R1,R1,#+0xA00
        STRH        R1,[SP, #+0x2A]
//  772 				Cmd.Data.FailCnt          = FailCnt;
        LDR         R2,[R0, #+0x190]
        STRB        R2,[SP, #+0x36]
        MOV         R3,R2, LSR #+0x8
        STRB        R3,[SP, #+0x37]
        MOV         R12,R3, LSR #+0x8
        STRB        R12,[SP, #+0x38]
        MOV         R12,R12, LSR #+0x8
        STRB        R12,[SP, #+0x39]
//  773 				Cmd.Data.FailCntTotal     = FailCntTotal;
        LDR         R1,[R0, #+0x18C]
        STRB        R1,[SP, #+0x32]
        MOV         R2,R1, LSR #+0x8
        STRB        R2,[SP, #+0x33]
        MOV         R3,R2, LSR #+0x8
        STRB        R3,[SP, #+0x34]
        MOV         R3,R3, LSR #+0x8
        STRB        R3,[SP, #+0x35]
//  774 				for ( int i=0; i < MAX_AN_SGCNV_CHANNELS; i++ ) {
        MOV         R2,#+0
        B           ??SendData_4
//  775 					Cmd.Data.MsrdValues[i]  = MsrdValues[i];
??SendData_5:
        ADD         R12,R0,R2, LSL #+0x2
        LDR         R3,[R12, #+0x200]
        STR         R3,[SP, #+0x20]
        MOV         R12,#+0
??SendData_6:
        ADD         R1,SP,#+0x24
        ADD         R3,R1,R2, LSL #+0x2
        ADD         R1,R12,R3
        ADD         R3,SP,#+0x20
        LDRB        R3,[R12, +R3]
        STRB        R3,[R1, #+0x16]
        ADD         R12,R12,#+0x1
        CMP         R12,#+0x4
        BLT         ??SendData_6
//  776 					Cmd.Data.CalValues[i]   = CalValues[i];
        ADD         R12,SP,#+0x24
        ADD         R1,R12,R2, LSL #+0x1
        ADD         R3,R0,R2, LSL #+0x1
        ADD         R12,R3,#+0x238
        LDRH        R3,[R12, #+0]
        STRH        R3,[R1, #+0x4E]
//  777 					Cmd.Data.RawValues[i]   = RawValues[i];
        ADD         R1,SP,#+0x24
        ADD         R12,R1,R2, LSL #+0x1
        ADD         R3,R0,R2, LSL #+0x1
        ADD         R1,R3,#+0x254
        LDRH        R3,[R1, #+0]
        STRH        R3,[R12, #+0x6A]
//  778 					memcpy((void*)&Cmd.Data.ADConfigData[i],(void*)&ADConfigData[i],sizeof(ConfigPacket));
        ADD         R1,R0,R2, LSL #+0x2
        ADD         R3,R1,#+0x1C8
        ADD         R1,SP,#+0x24
        ADD         R1,R1,R2, LSL #+0x2
        ADD         R1,R1,#+0x86
        LDRB        R4,[R3, #0]
        STRB        R4,[R1, #+0]
        LDRB        R4,[R3, #+0x1]
        STRB        R4,[R1, #+0x1]
        LDRB        R4,[R3, #+0x2]
        STRB        R4,[R1, #+0x2]
        LDRB        R4,[R3, #+0x3]
        STRB        R4,[R1, #+0x3]
//  779 				}
        ADD         R2,R2,#+0x1
??SendData_4:
        CMP         R2,#+0xE
        BLT         ??SendData_5
//  780 				bool sent = ANPRO10SendNormal(&Cmd);
//  781 				if ( !sent )
        ADD         R0,SP,#+0x24
        _BLF        ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
        CMP         R0,#+0
        BNE         ??SendData_7
//  782 					ErrorStatus =  E_QUEUE_FULL;
        MOV         R0,#+0x3
        B           ??SendData_8
//  783 				else
//  784 					ErrorStatus	=  E_OK;
??SendData_7:
        MOV         R0,#+0
        B           ??SendData_8
//  785 			}
//  786 			break;
//  787 		case CMD_GENERIC_STATIC_DATA:
//  788 		case CMD_PRO_SC_ADCARD_ST_DATA:
//  789 			{
//  790 				QueueANPRO10_COMMAND_2621 Cmd;
//  791 				Cmd.TxInfo.Port    = NULL;
??SendData_2:
        MOV         R4,#+0
        STR         R4,[SP, #+0]
//  792 				Cmd.TxInfo.rxAddr  = DEVICE_BROADCAST_ADDR;
        MOV         R3,#+0xFF
        STRB        R3,[SP, #+0x4]
//  793 				Cmd.TxInfo.rxId    = DEVICE_BROADCAST_TXU;
        MOV         R1,#+0xE
        STRB        R1,[SP, #+0x5]
//  794 				Cmd.Data.ObjectId  = m_ObjectId;
        LDR         R1,[R0, #+0x4C]
        STRB        R1,[SP, #+0xA]
        MOV         R2,R1, LSR #+0x8
        STRB        R2,[SP, #+0xB]
        MOV         R3,R2, LSR #+0x8
        STRB        R3,[SP, #+0xC]
        MOV         R1,R3, LSR #+0x8
        STRB        R1,[SP, #+0xD]
//  795 				Cmd.Data.ndb       = sizeof(Cmd)-sizeof(QueueANPRO10_CommandHeading);
        MOV         R3,#+0x14
        STRH        R3,[SP, #+0x8]
//  796 				Cmd.Data.CommandNo = CMD_PRO_SC_ADCARD_ST_DATA;
        MOV         R12,#+0x3D
        ORR         R12,R12,#+0xA00
        STRH        R12,[SP, #+0x6]
//  797 
//  798 				Cmd.Data.SoftwareVersion = SoftwareVersion;
        LDRB        R4,[R0, #+0x196]
        STRH        R4,[SP, #+0xE]
//  799 				Cmd.Data.RxBufSize       = RxBufSize;
        LDRB        R2,[R0, #+0x270]
        STRH        R2,[SP, #+0x10]
//  800 				Cmd.Data.TxBufSize       = TxBufSize;
        LDRB        R1,[R0, #+0x271]
        STRH        R1,[SP, #+0x12]
//  801 				Cmd.Data.CalNull         = CalNull;
        MOV         R3,#+0x72
        ORR         R3,R3,#+0x200
        LDRSH       R2,[R3, +R0]
        STRH        R2,[SP, #+0x14]
//  802 				Cmd.Data.SerialNumber    = SerialNumber;
        LDR         R12,[R0, #+0x198]
        STRB        R12,[SP, #+0x16]
        MOV         R1,R12, LSR #+0x8
        STRB        R1,[SP, #+0x17]
        MOV         R2,R1, LSR #+0x8
        STRB        R2,[SP, #+0x18]
        MOV         R2,R2, LSR #+0x8
        STRB        R2,[SP, #+0x19]
//  803 				Cmd.Data.CalGain         = CalGain;
        MOV         R3,#+0
        MOV         R1,SP
??SendData_9:
        ADD         R12,R3,R1
        ADD         R4,R3,R0
        LDRB        R2,[R4, #+0x274]
        STRB        R2,[R12, #+0x1A]
        ADD         R3,R3,#+0x1
        CMP         R3,#+0x4
        BLT         ??SendData_9
//  804 
//  805 				bool sent = ANPRO10SendNormal(&Cmd);
//  806 				if ( !sent )
        MOV         R0,SP
        _BLF        ??ANPRO10SendNormal,??ANPRO10SendNormal??rA
        CMP         R0,#+0
        BNE         ??SendData_10
//  807 					ErrorStatus =  E_QUEUE_FULL;
        MOV         R0,#+0x3
        B           ??SendData_8
//  808 				else
//  809 					ErrorStatus	=  E_OK;
??SendData_10:
        MOV         R0,#+0
        B           ??SendData_8
//  810 			}
//  811 			break;
//  812 		default:
//  813 			ErrorStatus =  E_UNKNOWN_COMMAND;
??SendData_3:
        MOV         R0,#+0x1
//  814 			break;
//  815 	}
//  816 	return(ErrorStatus);
??SendData_8:
        ADD         SP,SP,#+0xE4       ;; stack cleaning
        CFI CFA R13+8
        LDMIA       SP!,{R4,LR}        ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock43
//  817 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon1
        CFI NoFunction
        CODE32
`??operator new??rA`:
        LDR         R12,??Subroutine22_0  ;; `??operator new`
        BX          R12
        DATA
??Subroutine22_0:
        DC32        `??operator new`
        CFI EndBlock cfiBlock44

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI NoFunction
        CODE32
??char_allocator??rA:
        LDR         R12,??Subroutine23_0  ;; ??char_allocator
        BX          R12
        DATA
??Subroutine23_0:
        DC32        ??char_allocator
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon1
        CFI NoFunction
        CODE32
??_String_val??rA:
        LDR         R12,??Subroutine24_0  ;; ??_String_val
        BX          R12
        DATA
??Subroutine24_0:
        DC32        ??_String_val
        CFI EndBlock cfiBlock46

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI NoFunction
        CODE32
??_Tidy??rA:
        LDR         R12,??Subroutine25_0  ;; ??_Tidy
        BX          R12
        DATA
??Subroutine25_0:
        DC32        ??_Tidy
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon1
        CFI NoFunction
        CODE32
??assign??rA:
        LDR         R12,??Subroutine26_0  ;; ??assign_2
        BX          R12
        DATA
??Subroutine26_0:
        DC32        ??assign_2
        CFI EndBlock cfiBlock48

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI NoFunction
        CODE32
??char_allocator??rA_1:
        LDR         R12,??Subroutine27_0  ;; ??char_allocator_1
        BX          R12
        DATA
??Subroutine27_0:
        DC32        ??char_allocator_1
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon1
        CFI NoFunction
        CODE32
??assign??rA_1:
        LDR         R12,??Subroutine28_0  ;; ??assign_1
        BX          R12
        DATA
??Subroutine28_0:
        DC32        ??assign_1
        CFI EndBlock cfiBlock50

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock51 Using cfiCommon1
        CFI NoFunction
        CODE32
??assign??rA_2:
        LDR         R12,??Subroutine29_0  ;; ??assign
        BX          R12
        DATA
??Subroutine29_0:
        DC32        ??assign
        CFI EndBlock cfiBlock51

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock52 Using cfiCommon1
        CFI NoFunction
        CODE32
??append??rA:
        LDR         R12,??Subroutine30_0  ;; ??append
        BX          R12
        DATA
??Subroutine30_0:
        DC32        ??append
        CFI EndBlock cfiBlock52

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock53 Using cfiCommon1
        CFI NoFunction
        CODE32
??append??rA_1:
        LDR         R12,??Subroutine31_0  ;; ??append_1
        BX          R12
        DATA
??Subroutine31_0:
        DC32        ??append_1
        CFI EndBlock cfiBlock53

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock54 Using cfiCommon1
        CFI NoFunction
        CODE32
??append??rA_2:
        LDR         R12,??Subroutine32_0  ;; ??append_2
        BX          R12
        DATA
??Subroutine32_0:
        DC32        ??append_2
        CFI EndBlock cfiBlock54

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock55 Using cfiCommon1
        CFI NoFunction
        CODE32
??length??rA:
        LDR         R12,??Subroutine33_0  ;; ??length
        BX          R12
        DATA
??Subroutine33_0:
        DC32        ??length
        CFI EndBlock cfiBlock55

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock56 Using cfiCommon1
        CFI NoFunction
        CODE32
??append??rA_3:
        LDR         R12,??Subroutine34_0  ;; ??append_3
        BX          R12
        DATA
??Subroutine34_0:
        DC32        ??append_3
        CFI EndBlock cfiBlock56

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock57 Using cfiCommon1
        CFI NoFunction
        CODE32
??assign??rA_3:
        LDR         R12,??Subroutine35_0  ;; ??assign_3
        BX          R12
        DATA
??Subroutine35_0:
        DC32        ??assign_3
        CFI EndBlock cfiBlock57

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock58 Using cfiCommon1
        CFI NoFunction
        CODE32
??string??rA:
        LDR         R12,??Subroutine36_0  ;; ??string
        BX          R12
        DATA
??Subroutine36_0:
        DC32        ??string
        CFI EndBlock cfiBlock58

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock59 Using cfiCommon1
        CFI NoFunction
        CODE32
`??operator+=??rA`:
        LDR         R12,??Subroutine37_0  ;; `??operator+=`
        BX          R12
        DATA
??Subroutine37_0:
        DC32        `??operator+=`
        CFI EndBlock cfiBlock59

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock60 Using cfiCommon1
        CFI NoFunction
        CODE32
`?~string??rA`:
        LDR         R12,??Subroutine38_0  ;; `?~string`
        BX          R12
        DATA
??Subroutine38_0:
        DC32        `?~string`
        CFI EndBlock cfiBlock60

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock61 Using cfiCommon1
        CFI NoFunction
        CODE32
??string??rA_1:
        LDR         R12,??Subroutine39_0  ;; ??string_1
        BX          R12
        DATA
??Subroutine39_0:
        DC32        ??string_1
        CFI EndBlock cfiBlock61

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock62 Using cfiCommon1
        CFI NoFunction
        CODE32
`??operator+=??rA_1`:
        LDR         R12,??Subroutine40_0  ;; `??operator+=_1`
        BX          R12
        DATA
??Subroutine40_0:
        DC32        `??operator+=_1`
        CFI EndBlock cfiBlock62

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock63 Using cfiCommon1
        CFI NoFunction
        CODE32
`??operator=??rA`:
        LDR         R12,??Subroutine41_0  ;; `??operator=`
        BX          R12
        DATA
??Subroutine41_0:
        DC32        `??operator=`
        CFI EndBlock cfiBlock63

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock64 Using cfiCommon1
        CFI NoFunction
        CODE32
??SignalConverter??rA:
        LDR         R12,??Subroutine42_0  ;; ??SignalConverter
        BX          R12
        DATA
??Subroutine42_0:
        DC32        ??SignalConverter
        CFI EndBlock cfiBlock64

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock65 Using cfiCommon1
        CFI NoFunction
        CODE32
??TSNString??rA:
        LDR         R12,??Subroutine43_0  ;; ??TSNString_1
        BX          R12
        DATA
??Subroutine43_0:
        DC32        ??TSNString_1
        CFI EndBlock cfiBlock65

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock66 Using cfiCommon1
        CFI NoFunction
        CODE32
`??operator+??rA`:
        LDR         R12,??Subroutine44_0  ;; `??operator+_1`
        BX          R12
        DATA
??Subroutine44_0:
        DC32        `??operator+_1`
        CFI EndBlock cfiBlock66

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock67 Using cfiCommon1
        CFI NoFunction
        CODE32
??TSNString??rA_1:
        LDR         R12,??Subroutine45_0  ;; ??TSNString_2
        BX          R12
        DATA
??Subroutine45_0:
        DC32        ??TSNString_2
        CFI EndBlock cfiBlock67

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock68 Using cfiCommon1
        CFI NoFunction
        CODE32
`??operator=??rA_1`:
        LDR         R12,??Subroutine46_0  ;; `??operator=_1`
        BX          R12
        DATA
??Subroutine46_0:
        DC32        `??operator=_1`
        CFI EndBlock cfiBlock68

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock69 Using cfiCommon1
        CFI NoFunction
        CODE32
`?~TSNString??rA`:
        LDR         R12,??Subroutine47_0  ;; `?~TSNString`
        BX          R12
        DATA
??Subroutine47_0:
        DC32        `?~TSNString`
        CFI EndBlock cfiBlock69

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock70 Using cfiCommon1
        CFI NoFunction
        CODE32
??PROLinkedList??rA:
        LDR         R12,??Subroutine48_0  ;; ??PROLinkedList
        BX          R12
        DATA
??Subroutine48_0:
        DC32        ??PROLinkedList
        CFI EndBlock cfiBlock70

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock71 Using cfiCommon1
        CFI NoFunction
        CODE32
??insertInOrder??rA:
        LDR         R12,??Subroutine49_0  ;; ??insertInOrder
        BX          R12
        DATA
??Subroutine49_0:
        DC32        ??insertInOrder
        CFI EndBlock cfiBlock71

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock72 Using cfiCommon1
        CFI NoFunction
        CODE32
??insertLast??rA:
        LDR         R12,??Subroutine50_0  ;; ??insertLast
        BX          R12
        DATA
??Subroutine50_0:
        DC32        ??insertLast
        CFI EndBlock cfiBlock72

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock73 Using cfiCommon1
        CFI NoFunction
        CODE32
`??delete ~PROLinkedList??rA`:
        LDR         R12,??Subroutine51_0  ;; `??delete ~PROLinkedList`
        BX          R12
        DATA
??Subroutine51_0:
        DC32        `??delete ~PROLinkedList`
        CFI EndBlock cfiBlock73

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock74 Using cfiCommon1
        CFI NoFunction
        CODE32
`?~SignalConverter??rA`:
        LDR         R12,??Subroutine52_0  ;; `?~SignalConverter`
        BX          R12
        DATA
??Subroutine52_0:
        DC32        `?~SignalConverter`
        CFI EndBlock cfiBlock74

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock75 Using cfiCommon1
        CFI NoFunction
        CODE32
`??operator delete??rA`:
        LDR         R12,??Subroutine53_0  ;; `??operator delete`
        BX          R12
        DATA
??Subroutine53_0:
        DC32        `??operator delete`
        CFI EndBlock cfiBlock75

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock76 Using cfiCommon1
        CFI NoFunction
        CODE32
??TSNString??rA_2:
        LDR         R12,??Subroutine54_0  ;; ??TSNString_3
        BX          R12
        DATA
??Subroutine54_0:
        DC32        ??TSNString_3
        CFI EndBlock cfiBlock76

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock77 Using cfiCommon1
        CFI NoFunction
        CODE32
`??operator+??rA_1`:
        LDR         R12,??Subroutine55_0  ;; `??operator+`
        BX          R12
        DATA
??Subroutine55_0:
        DC32        `??operator+`
        CFI EndBlock cfiBlock77

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock78 Using cfiCommon1
        CFI NoFunction
        CODE32
`??operator+??rA_2`:
        LDR         R12,??Subroutine56_0  ;; `??operator+_2`
        BX          R12
        DATA
??Subroutine56_0:
        DC32        `??operator+_2`
        CFI EndBlock cfiBlock78

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock79 Using cfiCommon1
        CFI NoFunction
        CODE32
??KeyWord??rA:
        LDR         R12,??Subroutine57_0  ;; ??KeyWord
        BX          R12
        DATA
??Subroutine57_0:
        DC32        ??KeyWord
        CFI EndBlock cfiBlock79

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock80 Using cfiCommon1
        CFI NoFunction
        CODE32
??TSNString??rA_3:
        LDR         R12,??Subroutine58_0  ;; ??TSNString
        BX          R12
        DATA
??Subroutine58_0:
        DC32        ??TSNString
        CFI EndBlock cfiBlock80

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock81 Using cfiCommon1
        CFI NoFunction
        CODE32
??HardwareSetupWarning??rA:
        LDR         R12,??Subroutine59_0  ;; ??HardwareSetupWarning
        BX          R12
        DATA
??Subroutine59_0:
        DC32        ??HardwareSetupWarning
        CFI EndBlock cfiBlock81

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock82 Using cfiCommon1
        CFI NoFunction
        CODE32
??insertInOrderIfUnique??rA:
        LDR         R12,??Subroutine60_0  ;; ??insertInOrderIfUnique
        BX          R12
        DATA
??Subroutine60_0:
        DC32        ??insertInOrderIfUnique
        CFI EndBlock cfiBlock82

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock83 Using cfiCommon1
        CFI NoFunction
        CODE32
??AddAlarms??rA:
        LDR         R12,??Subroutine61_0  ;; ??AddAlarms
        BX          R12
        DATA
??Subroutine61_0:
        DC32        ??AddAlarms
        CFI EndBlock cfiBlock83

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock84 Using cfiCommon1
        CFI NoFunction
        CODE32
??AddAlarms??rA_1:
        LDR         R12,??Subroutine62_0  ;; ??AddAlarms_1
        BX          R12
        DATA
??Subroutine62_0:
        DC32        ??AddAlarms_1
        CFI EndBlock cfiBlock84

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock85 Using cfiCommon1
        CFI NoFunction
        CODE32
??SetPROPtr??rA:
        LDR         R12,??Subroutine63_0  ;; ??SetPROPtr
        BX          R12
        DATA
??Subroutine63_0:
        DC32        ??SetPROPtr
        CFI EndBlock cfiBlock85

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock86 Using cfiCommon1
        CFI NoFunction
        CODE32
__ulongToFloat??rA:
        LDR         R3,??Subroutine64_0  ;; __ulongToFloat
        BX          R3
        DATA
??Subroutine64_0:
        DC32        __ulongToFloat
        CFI EndBlock cfiBlock86

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock87 Using cfiCommon1
        CFI NoFunction
        CODE32
__longToFloat??rA:
        LDR         R3,??Subroutine65_0  ;; __longToFloat
        BX          R3
        DATA
??Subroutine65_0:
        DC32        __longToFloat
        CFI EndBlock cfiBlock87

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock88 Using cfiCommon1
        CFI NoFunction
        CODE32
??GetValue??rA:
        LDR         R12,??Subroutine66_0  ;; ??GetValue_1
        BX          R12
        DATA
??Subroutine66_0:
        DC32        ??GetValue_1
        CFI EndBlock cfiBlock88

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock89 Using cfiCommon1
        CFI NoFunction
        CODE32
??LibGetText??rA:
        LDR         R12,??Subroutine67_0  ;; ??LibGetText
        BX          R12
        DATA
??Subroutine67_0:
        DC32        ??LibGetText
        CFI EndBlock cfiBlock89

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock90 Using cfiCommon1
        CFI NoFunction
        CODE32
??GetStringValue??rA:
        LDR         R12,??Subroutine68_0  ;; ??GetStringValue_1
        BX          R12
        DATA
??Subroutine68_0:
        DC32        ??GetStringValue_1
        CFI EndBlock cfiBlock90

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock91 Using cfiCommon1
        CFI NoFunction
        CODE32
??PutValue??rA:
        LDR         R12,??Subroutine69_0  ;; ??PutValue_1
        BX          R12
        DATA
??Subroutine69_0:
        DC32        ??PutValue_1
        CFI EndBlock cfiBlock91

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock92 Using cfiCommon1
        CFI NoFunction
        CODE32
??PutFloatValue??rA:
        LDR         R12,??Subroutine70_0  ;; ??PutFloatValue_1
        BX          R12
        DATA
??Subroutine70_0:
        DC32        ??PutFloatValue_1
        CFI EndBlock cfiBlock92

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock93 Using cfiCommon1
        CFI NoFunction
        CODE32
??isEmty??rA:
        LDR         R12,??Subroutine71_0  ;; ??isEmty
        BX          R12
        DATA
??Subroutine71_0:
        DC32        ??isEmty
        CFI EndBlock cfiBlock93

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock94 Using cfiCommon1
        CFI NoFunction
        CODE32
??Size??rA:
        LDR         R12,??Subroutine72_0  ;; ??Size
        BX          R12
        DATA
??Subroutine72_0:
        DC32        ??Size
        CFI EndBlock cfiBlock94

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock95 Using cfiCommon1
        CFI NoFunction
        CODE32
??getHead??rA:
        LDR         R12,??Subroutine73_0  ;; ??getHead
        BX          R12
        DATA
??Subroutine73_0:
        DC32        ??getHead
        CFI EndBlock cfiBlock95

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock96 Using cfiCommon1
        CFI NoFunction
        CODE32
??getNext??rA:
        LDR         R12,??Subroutine74_0  ;; ??getNext
        BX          R12
        DATA
??Subroutine74_0:
        DC32        ??getNext
        CFI EndBlock cfiBlock96

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock97 Using cfiCommon1
        CFI NoFunction
        CODE32
??getElement??rA:
        LDR         R12,??Subroutine75_0  ;; ??getElement
        BX          R12
        DATA
??Subroutine75_0:
        DC32        ??getElement
        CFI EndBlock cfiBlock97

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock98 Using cfiCommon1
        CFI NoFunction
        CODE32
??SendPacket??rA:
        LDR         R12,??Subroutine76_0  ;; ??SendPacket
        BX          R12
        DATA
??Subroutine76_0:
        DC32        ??SendPacket
        CFI EndBlock cfiBlock98

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock99 Using cfiCommon1
        CFI NoFunction
        CODE32
OS_Delay??rA:
        LDR         R12,??Subroutine77_0  ;; OS_Delay
        BX          R12
        DATA
??Subroutine77_0:
        DC32        OS_Delay
        CFI EndBlock cfiBlock99

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock100 Using cfiCommon1
        CFI NoFunction
        CODE32
??FindSignalConverter??rA:
        LDR         R12,??Subroutine78_0  ;; ??FindSignalConverter
        BX          R12
        DATA
??Subroutine78_0:
        DC32        ??FindSignalConverter
        CFI EndBlock cfiBlock100

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock101 Using cfiCommon1
        CFI NoFunction
        CODE32
??CheckAlarms??rA:
        LDR         R12,??Subroutine79_0  ;; ??CheckAlarms
        BX          R12
        DATA
??Subroutine79_0:
        DC32        ??CheckAlarms
        CFI EndBlock cfiBlock101

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock102 Using cfiCommon1
        CFI NoFunction
        CODE32
??SetAlarmsToNormal??rA:
        LDR         R12,??Subroutine80_0  ;; ??SetAlarmsToNormal
        BX          R12
        DATA
??Subroutine80_0:
        DC32        ??SetAlarmsToNormal
        CFI EndBlock cfiBlock102

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock103 Using cfiCommon1
        CFI NoFunction
        CODE32
__fNotEqual??rA:
        LDR         R3,??Subroutine81_0  ;; __fNotEqual
        BX          R3
        DATA
??Subroutine81_0:
        DC32        __fNotEqual
        CFI EndBlock cfiBlock103

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock104 Using cfiCommon1
        CFI NoFunction
        CODE32
??PackSensorData??rA:
        LDR         R12,??Subroutine82_0  ;; ??PackSensorData
        BX          R12
        DATA
??Subroutine82_0:
        DC32        ??PackSensorData
        CFI EndBlock cfiBlock104

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock105 Using cfiCommon1
        CFI NoFunction
        CODE32
memcmp??rA:
        LDR         R12,??Subroutine83_0  ;; memcmp
        BX          R12
        DATA
??Subroutine83_0:
        DC32        memcmp
        CFI EndBlock cfiBlock105

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock106 Using cfiCommon1
        CFI NoFunction
        CODE32
??RecalcProgramObjects??rA:
        LDR         R12,??Subroutine84_0  ;; ??RecalcProgramObjects
        BX          R12
        DATA
??Subroutine84_0:
        DC32        ??RecalcProgramObjects
        CFI EndBlock cfiBlock106

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock107 Using cfiCommon1
        CFI NoFunction
        CODE32
??UnpackSensorData??rA:
        LDR         R12,??Subroutine85_0  ;; ??UnpackSensorData
        BX          R12
        DATA
??Subroutine85_0:
        DC32        ??UnpackSensorData
        CFI EndBlock cfiBlock107

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock108 Using cfiCommon1
        CFI NoFunction
        CODE32
OS_SignalEvent??rA:
        LDR         R12,??Subroutine86_0  ;; OS_SignalEvent
        BX          R12
        DATA
??Subroutine86_0:
        DC32        OS_SignalEvent
        CFI EndBlock cfiBlock108

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock109 Using cfiCommon1
        CFI NoFunction
        CODE32
??ANPRO10_IO_Receive??rA:
        LDR         R12,??Subroutine87_0  ;; ??ANPRO10_IO_Receive
        BX          R12
        DATA
??Subroutine87_0:
        DC32        ??ANPRO10_IO_Receive
        CFI EndBlock cfiBlock109

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock110 Using cfiCommon1
        CFI NoFunction
        CODE32
??ANPRO10SendNormal??rA:
        LDR         R12,??Subroutine88_0  ;; ??ANPRO10SendNormal
        BX          R12
        DATA
??Subroutine88_0:
        DC32        ??ANPRO10SendNormal
        CFI EndBlock cfiBlock110

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock111 Using cfiCommon1
        CFI Function ??length
        CODE32
// __??Code32?? __code __interwork __atpcs size_t char_traits::length(char const *)
??length:
        MOV         R1,#+0
??length_1:
        LDRB        R2,[R0, R1]
        ADD         R1,R1,#+0x1
        CMP         R2,#+0
        BNE         ??length_1
        SUB         R1,R1,#+0x1
        MOV         R0,R1
        BX          LR                 ;; return
        CFI EndBlock cfiBlock111

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock112 Using cfiCommon1
        CFI Function ??char_allocator
        CODE32
// __??Code32?? char_allocator::char_allocator(char_allocator const &)
??char_allocator:
        BX          LR                 ;; return
        CFI EndBlock cfiBlock112

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock113 Using cfiCommon1
        CFI Function ??char_allocator_1
        CODE32
// __??Code32?? char_allocator::char_allocator()
??char_allocator_1:
        BX          LR                 ;; return
        CFI EndBlock cfiBlock113

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock114 Using cfiCommon1
        CFI Function ??_String_val
        CODE32
// __??Code32?? _String_val::_String_val(char_allocator)
??_String_val:
        STMDB       SP!,{R4,LR}        ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB         SP,SP,#+0x4
        CFI CFA R13+12
        MOV         R4,R0
        MOV         R1,SP
        _BLF        ??char_allocator,??char_allocator??rA
        MOV         R0,R4
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+8
        LDMIA       SP!,{R4,LR}        ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock114

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock115 Using cfiCommon1
        CFI Function ??string
        CODE32
// __??Code32?? string::string(string const &)
??string:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV         R4,R0
        MOV         R5,R1
        LDRB        R1,[R5, #+0]
        _BLF        ??_String_val,??_String_val??rA
        MOV         R2,#+0
        MOV         R1,R2
        MOV         R0,R4
        _BLF        ??_Tidy,??_Tidy??rA
        LDR         R1,??string_2      ;; ??npos
        LDR         R3,[R1, #+0]
        MOV         R2,#+0
        MOV         R1,R5
        MOV         R0,R4
        _BLF        ??assign_2,??assign??rA
        MOV         R0,R4
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        DATA
??string_2:
        DC32        ??npos
        CFI EndBlock cfiBlock115

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock116 Using cfiCommon1
        CFI Function ??string_1
        CODE32
// __??Code32?? string::string(char const *)
??string_1:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB         SP,SP,#+0x4
        CFI CFA R13+16
        MOV         R4,R0
        MOV         R5,R1
        MOV         R0,SP
        _BLF        ??char_allocator_1,??char_allocator??rA_1
        LDRB        R1,[SP, #+0]
        MOV         R0,R4
        _BLF        ??_String_val,??_String_val??rA
        MOV         R2,#+0
        MOV         R1,R2
        MOV         R0,R4
        _BLF        ??_Tidy,??_Tidy??rA
        MOV         R1,R5
        MOV         R0,R4
        _BLF        ??assign_1,??assign??rA_1
        MOV         R0,R4
        ADD         SP,SP,#+0x4        ;; stack cleaning
        CFI CFA R13+12
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock116

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock117 Using cfiCommon1
        CFI Function `?~string`
        CODE32
// __??Code32?? string::~string()
`?~string`:
        STR         LR,[SP, #-4]!      ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV         R2,#+0
        MOV         R1,#+0x1
        _BLF        ??_Tidy,??_Tidy??rA
        LDR         LR,[SP], #+0x4     ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock117

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock118 Using cfiCommon1
        CFI Function `??operator=`
        CODE32
// __??Code32?? __code __interwork __atpcs string &string::operator=(string const &)
`??operator=`:
        STR         LR,[SP, #-4]!      ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        _BLF        ??assign,??assign??rA_2
        LDR         LR,[SP], #+0x4     ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock118

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock119 Using cfiCommon1
        CFI Function `??operator+=`
        CODE32
// __??Code32?? __code __interwork __atpcs string &string::operator+=(string const &)
`??operator+=`:
        STR         LR,[SP, #-4]!      ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        _BLF        ??append,??append??rA
        LDR         LR,[SP], #+0x4     ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock119

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock120 Using cfiCommon1
        CFI Function `??operator+=_1`
        CODE32
// __??Code32?? __code __interwork __atpcs string &string::operator+=(char const *)
`??operator+=_1`:
        STR         LR,[SP, #-4]!      ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        _BLF        ??append_1,??append??rA_1
        LDR         LR,[SP], #+0x4     ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock120

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock121 Using cfiCommon1
        CFI Function ??append
        CODE32
// __??Code32?? __code __interwork __atpcs string &string::append(string const &)
??append:
        STR         LR,[SP, #-4]!      ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR         R2,??append_4      ;; ??npos
        LDR         R3,[R2, #+0]
        MOV         R2,#+0
        _BLF        ??append_2,??append??rA_2
        LDR         LR,[SP], #+0x4     ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        DATA
??append_4:
        DC32        ??npos
        CFI EndBlock cfiBlock121

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock122 Using cfiCommon1
        CFI Function ??append_1
        CODE32
// __??Code32?? __code __interwork __atpcs string &string::append(char const *)
??append_1:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV         R4,R0
        MOV         R5,R1
        MOV         R0,R5
        _BLF        ??length,??length??rA
        MOV         R2,R0
        MOV         R1,R5
        MOV         R0,R4
        _BLF        ??append_3,??append??rA_3
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock122

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock123 Using cfiCommon1
        CFI Function ??assign
        CODE32
// __??Code32?? __code __interwork __atpcs string &string::assign(string const &)
??assign:
        STR         LR,[SP, #-4]!      ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR         R2,??assign_4      ;; ??npos
        LDR         R3,[R2, #+0]
        MOV         R2,#+0
        _BLF        ??assign_2,??assign??rA
        LDR         LR,[SP], #+0x4     ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        DATA
??assign_4:
        DC32        ??npos
        CFI EndBlock cfiBlock123

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock124 Using cfiCommon1
        CFI Function ??assign_1
        CODE32
// __??Code32?? __code __interwork __atpcs string &string::assign(char const *)
??assign_1:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV         R4,R0
        MOV         R5,R1
        MOV         R0,R5
        _BLF        ??length,??length??rA
        MOV         R2,R0
        MOV         R1,R5
        MOV         R0,R4
        _BLF        ??assign_3,??assign??rA_3
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock124

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock125 Using cfiCommon1
        CFI Function `??operator+`
        CODE32
// __??Code32?? __code __interwork __atpcs void operator+(string const &, string const &)
`??operator+`:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB         SP,SP,#+0x1C
        CFI CFA R13+40
        MOV         R4,R0
        MOV         R5,R2
        MOV         R0,SP
        _BLF        ??string,??string??rA
        MOV         R1,R5
        _BLF        `??operator+=`,`??operator+=??rA`
        MOV         R1,R0
        MOV         R0,R4
        _BLF        ??string,??string??rA
        MOV         R0,SP
        _BLF        `?~string`,`?~string??rA`
        ADD         SP,SP,#+0x1C       ;; stack cleaning
        CFI CFA R13+12
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock125

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock126 Using cfiCommon1
        CFI Function `??operator+_1`
        CODE32
// __??Code32?? __code __interwork __atpcs void operator+(char const *, string const &)
`??operator+_1`:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB         SP,SP,#+0x1C
        CFI CFA R13+40
        MOV         R4,R0
        MOV         R5,R2
        MOV         R0,SP
        _BLF        ??string_1,??string??rA_1
        MOV         R1,R5
        _BLF        `??operator+=`,`??operator+=??rA`
        MOV         R1,R0
        MOV         R0,R4
        _BLF        ??string,??string??rA
        MOV         R0,SP
        _BLF        `?~string`,`?~string??rA`
        ADD         SP,SP,#+0x1C       ;; stack cleaning
        CFI CFA R13+12
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock126

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock127 Using cfiCommon1
        CFI Function `??operator+_2`
        CODE32
// __??Code32?? __code __interwork __atpcs void operator+(string const &, char const *)
`??operator+_2`:
        STMDB       SP!,{R4,R5,LR}     ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB         SP,SP,#+0x1C
        CFI CFA R13+40
        MOV         R4,R0
        MOV         R5,R2
        MOV         R0,SP
        _BLF        ??string,??string??rA
        MOV         R1,R5
        _BLF        `??operator+=_1`,`??operator+=??rA_1`
        MOV         R1,R0
        MOV         R0,R4
        _BLF        ??string,??string??rA
        MOV         R0,SP
        _BLF        `?~string`,`?~string??rA`
        ADD         SP,SP,#+0x1C       ;; stack cleaning
        CFI CFA R13+12
        LDMIA       SP!,{R4,R5,LR}     ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock127

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock128 Using cfiCommon1
        CFI Function ??TSNString
        CODE32
// __??Code32?? TSNString::TSNString(TSNString const &)
??TSNString:
        STMDB       SP!,{R4,LR}        ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV         R4,R0
        _BLF        ??string,??string??rA
        MOV         R0,R4
        LDMIA       SP!,{R4,LR}        ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock128

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock129 Using cfiCommon1
        CFI Function `?~TSNString`
        CODE32
// __??Code32?? TSNString::~TSNString()
`?~TSNString`:
        STR         LR,[SP, #-4]!      ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        _BLF        `?~string`,`?~string??rA`
        LDR         LR,[SP], #+0x4     ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock129

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock130 Using cfiCommon1
        CFI Function `??operator=_1`
        CODE32
// __??Code32?? __code __interwork __atpcs TSNString &TSNString::operator=(TSNString const &)
`??operator=_1`:
        STMDB       SP!,{R4,LR}        ;; Push
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV         R4,R0
        _BLF        `??operator=`,`??operator=??rA`
        MOV         R0,R4
        LDMIA       SP!,{R4,LR}        ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        BX          LR                 ;; return
        CFI EndBlock cfiBlock130

        RSEG DIFUNCT:CODE:ROOT(2)
        REQUIRE ?call_ctors
        DC32	??__sti__routine

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
//  818 
//  819 #endif
//  820 
// 
// 10 152 bytes in segment CODE
//    299 bytes in segment DATA_C
//    196 bytes in segment DATA_Z
//      4 bytes in segment DIFUNCT
//     12 bytes in segment INITTAB
// 
// 8 552 bytes of CODE  memory (+ 1 616 bytes shared)
//   299 bytes of CONST memory
//   196 bytes of DATA  memory
//
//Errors: none
//Warnings: none
