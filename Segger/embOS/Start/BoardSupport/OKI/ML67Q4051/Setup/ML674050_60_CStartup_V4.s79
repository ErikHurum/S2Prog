;**************************************************************************************************
;*                                                                                                *
;*    Copyright (C) 2004 Oki Electric Industry Co., LTD.                                          *
;*                                                                                                *
;*    System Name    :  ML67Q405x                                                                 *
;*    Module Name    :  Startup routine                                                           *
;*    File   Name    :  674050_cstartup.s                                                         *
;*    Revision       :  01.00                                                                     *
;*    Date           :  2004/10/19                                                                *
;*                                                                                                *
;**************************************************************************************************
;
; Naming covention of labels in this file:
;
;  ?xxx   - External labels only accessed from assembler.
;  __xxx  - External labels accessed from or defined in C.
;  xxx    - Labels local to one module (note: this file contains
;           several modules).
;  main   - The starting point of the user program.
;

;---------------------------------------------------------------
; Macros and definitions for the whole file
;---------------------------------------------------------------

; Mode, correspords to bits 0-5 in CPSR
MODE_BITS DEFINE  0x1F    ; Bit mask for mode bits in CPSR
USR_MODE  DEFINE  0x10    ; User mode
FIQ_MODE  DEFINE  0x11    ; Fast Interrupt Request mode
IRQ_MODE  DEFINE  0x12    ; Interrupt Request mode
SVC_MODE  DEFINE  0x13    ; Supervisor mode
ABT_MODE  DEFINE  0x17    ; Abort mode
UND_MODE  DEFINE  0x1B    ; Undefined Instruction mode
SYS_MODE  DEFINE  0x1F    ; System mode

;clock control register
CLKCNT    DEFINE  0xb7000010    ;CLKCNT register

ROMAC     DEFINE 0x78100004
RAMAC     DEFINE 0x78100008

;system timer setting
TMEN      DEFINE  0xb8001004
TMOVF     DEFINE  0xb8001010
TMRLR     DEFINE  0xb8001008
TMRCYC    DEFINE  10
RINGOSC   DEFINE  16
VALUE_OF_TMRLR    DEFINE  65536 - (TMRCYC * RINGOSC * 1000) /16
CHANGE_CLK_VALUE  DEFINE  0xfffffcff

;---------------------------------------------------------------
; ?RESET
; Reset Vector.
; Normally, segment INTVEC is linked at address 0.
; For debugging purposes, INTVEC may be placed at other
; addresses.
; A debugger that honors the entry point will start the
; program in a normal way even if INTVEC is not at address 0.
;---------------------------------------------------------------

        MODULE  ?RESET
        COMMON  INTVEC:CODE:NOROOT(2)
        PUBLIC  __program_start
        EXTERN  ?boot

        EXTERN  IRQ_Handler
        CODE32  ; Always ARM mode after reset
        org 0x00
__program_start
#if FLASHCODE
        b ?boot ; Relative branch allows remap
#else
        ldr     pc,=?boot ; Absolute jump can reach above 0x2000000
#endif
        org     0x04
        b       0x04
        org     0x08
swi_handler: ldr    pc,=swi_handler
        org     0x0c
        b       0x0c
        org     0x10
        b       0x10
        org     0x14
        nop
        org     0x18
        ldr     pc,=IRQ_Handler  ; OS interrupt hanlder in RTOS.asm

        org 0x1c
 fiq_handler: ldr pc,=fiq_handler

        ; Constant table entries (for ldr pc) will be placed at 0x20
        org 0x20
        LTORG
        ENDMOD


;---------------------------------------------------------------
; ?BOOT
;---------------------------------------------------------------
        MODULE  ?BOOT
        RSEG    ICODE:CODE:NOROOT(2)
        EXTERN  ?cstartup
        CODE32
        PUBLIC  ?boot

?boot:
        ; Execute C startup code.
        b       ?cstartup
        ENDMOD  ?boot    ; Entry point = ?boot


;---------------------------------------------------------------
; ?CSTARTUP
;---------------------------------------------------------------
        MODULE  ?CSTARTUP

        RSEG    IRQ_STACK:DATA(2)
        ;RSEG    FIQ_STACK:DATA(2)
        RSEG    SVC_STACK:DATA:NOROOT(2)
        RSEG    CSTACK:DATA(2)
        RSEG    ICODE:CODE:NOROOT(2)
        PUBLIC  ?cstartup
        EXTERN  ?main

; Execution starts here.
; After a reset, the mode is ARM, Supervisor, interrupts disabled.

        CODE32
?cstartup

; Add initialization nedded before setup of stackpointers here
; --- ring oscillator is srcsel?
        ldr     r0,=CLKCNT
        ldr     r1,[r0]
        and     r1,r1,#0x300
        cmp     r1,#0x100
        bne     _not_ringosc1

; --- set system timer
        mov     r0,#0x0
        ldr     r1,=TMEN
        str     r0,[r1]
        mov     r0,#0x1
        ldr     r1,=TMOVF
        str     r0,[r1]
        ; set 10msec cycle
        ldr     r0,=VALUE_OF_TMRLR
        ldr     r1,=TMRLR
        str     r0,[r1]
        ; start system timer
        mov     r0,#0x1
        ldr     r1,=TMEN
        str     r0,[r1]

_not_ringosc1

; Initialize the stack pointers.
; The pattern below can be used for any of the exception stacks:
; FIQ, IRQ, SVC, ABT, UND, SYS.
; The USR mode uses the same stack as SYS.
; The stack segments must be defined in the linker command file,
; and be declared above.

        mrs     r0,cpsr                             ; Original PSR value
        bic     r0,r0,#MODE_BITS                    ; Clear the mode bits
        orr     r0,r0,#IRQ_MODE                     ; Set IRQ mode bits
        msr     cpsr_c,r0                           ; Change the mode
        ldr     sp,=SFE(IRQ_STACK) & 0xFFFFFFF8     ; End of IRQ_STACK

        bic     r0,r0,#MODE_BITS                    ; Clear the mode bits
        orr     r0,r0,#SVC_MODE                     ; Set System mode bits
        msr     cpsr_c,r0                           ; Change the mode
        ldr     sp,=SFE(CSTACK) & 0xFFFFFFF8        ; End of SVC_STACK

; --- ring oscillator is srcsel?
        ldr     r0,=CLKCNT
        ldr     r1,[r0]
        and     r1,r1,#0x300
        cmp     r1,#0x100
        bne     _not_ringosc2

; --- timer overflow wait
_wait_ovf
        ldr     r1,=TMOVF
        ldr     r0,[r1]
        cmp     r0,#0x1
        bne     _wait_ovf

; --- change to main clk from ring oscillator
        ldr     r1,=CLKCNT
        ldr     r0,[r1]
        ldr     r1,=CHANGE_CLK_VALUE
        and     r0,r0, r1
        ldr     r1,=CLKCNT
        str     r0,[r1]
_not_ringosc2

; setup external memory access speed
        mov     r0,#0x1
        ldr     r1,=ROMAC
        str     r0,[r1]
        ldr     r1,=RAMAC
        str     r0,[r1]

        ; stop system timer
        mov     r0,#0x0
        ldr     r1,=TMEN
        str     r0,[r1]

        ; clear timer overflow bit
        mov     r0,#0x1
        ldr     r1,=TMOVF
        str     r0,[r1]

; Continue to ?main for more IAR specific system startup

        ldr     r0,=?main
        bx      r0

        LTORG

        ENDMOD

        END