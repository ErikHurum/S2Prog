;*********************************************************************
;*              SEGGER MICROCONTROLLER SYSTEME GmbH                  *
;*      Solutions for real time microcontroller applications         *
;*********************************************************************
;*                                                                   *
;*      (C) 2002-2006    SEGGER Microcontroller Systeme GmbH         *
;*                       www.segger.com                              *
;*                                                                   *
;*********************************************************************
;
;---------------------------------------------------------------------
;File   : LPC2148_CStartup.s79
;Purpose: Startup file for NXP LPC2148 CPUs
;-------  END-OF-HEADER  ---------------------------------------------
;

;*********************************************************************
;*
;*      Configuration
;*
;*********************************************************************

;*********************************************************************
;*
;*      Macros and definitions for the whole file
;*
;*********************************************************************

; Mode, corresponds to bits 0-5 in CPSR
MODE_BITS   DEFINE  0x1F        ; Bit mask for mode bits in CPSR
USR_MODE    DEFINE  0x10        ; User mode
FIQ_MODE    DEFINE  0x11        ; Fast Interrupt Request mode
IRQ_MODE    DEFINE  0x12        ; Interrupt Request mode
SVC_MODE    DEFINE  0x13        ; Supervisor mode
ABT_MODE    DEFINE  0x17        ; Abort mode
UND_MODE    DEFINE  0x1B        ; Undefined Instruction mode
SYS_MODE    DEFINE  0x1F        ; System mode

MAMCR       DEFINE  0xE01FC000  ; MAM Control Register
MAMTIM      DEFINE  0xE01FC004  ; MAM Timing register

;*********************************************************************
; ?RESET
; Reset Vector.
; Normally, segment INTVEC is linked at address 0.
; For debugging purposes, INTVEC may be placed at other
; addresses.
; A debugger that honors the entry point will start the
; program in a normal way even if INTVEC is not at address 0.
;*********************************************************************

        MODULE  ?RESET
        COMMON  INTVEC:CODE:NOROOT(2)
        PUBLIC  __program_start
        EXTERN  ?cstartup
        EXTERN  IRQ_Handler
        CODE32  ; Always ARM mode after reset

        org 0x00
__program_start
                     b   ?cstartup
undef_handler:       ldr pc,=undef_handler
swi_handler:         ldr pc,=swi_handler
prefetch_handler:    ldr pc,=prefetch_handler
data_handler:        ldr pc,=data_handler
        org 0x18
                     ldr pc,=IRQ_Handler      ; OS IRQ handler in OS library
fiq_handler:         ldr pc,=fiq_handler

        ; Constant table entries (for ldr pc) will be placed at 0x20
        org 0x20
        LTORG

        ENDMOD


;*********************************************************************
; ?CSTARTUP
;*********************************************************************
        MODULE  ?CSTARTUP

        RSEG    IRQ_STACK:DATA(2)
        RSEG    SVC_STACK:DATA:NOROOT(2)
        RSEG    CSTACK:DATA(2)
        RSEG    ICODE:CODE:NOROOT(2)
        PUBLIC  ?cstartup
        EXTERN  ?main

; Execution starts here.
; After a reset, the mode is ARM, Supervisor, interrupts disabled.

        CODE32
?cstartup

        EXTERN  ROM_BASE_ADDR, RAM_BASE_ADDR

; Execute C startup code.

; Add initialization nedded before setup of stackpointers here

; LPC2148 Errata
; Date: August 5, 2005
; Document Release: Version 1.0
; Device Affected: LPC2148
; Incorrect read of data from SRAM after Reset and MAM is not enabled or partially enabled MAM.1
; Init MAM before acsses to SRAM

        ldr   r0,=MAMCR
        ldr   r1,=MAMTIM
        ldr   r2,=0
        str   r2,[r0]
        ldr   r2,=3
        str   r2,[r1]
        ldr   r2,=2
        str   r2,[r0]


; Initialize the stack pointers.
; The pattern below can be used for any of the exception stacks:
; FIQ, IRQ, SVC, ABT, UND, SYS.
; The USR mode uses the same stack as SYS.
; The stack segments must be defined in the linker command file,
; and be declared above.
        mrs     r0,cpsr                         ; Original PSR value
        bic     r0,r0,#MODE_BITS                ; Clear the mode bits
        orr     r0,r0,#IRQ_MODE                 ; Set IRQ mode bits
        msr     cpsr_c,r0                       ; Change the mode
        ldr     sp,=SFE(IRQ_STACK) & 0xFFFFFFF8 ; End of IRQ_STACK

        bic     r0,r0,#MODE_BITS                ; Clear the mode bits
        orr     r0,r0,#SYS_MODE                 ; Set System mode bits
        msr     cpsr_c,r0                       ; Change the mode
        ldr     sp,=SFE(CSTACK) & 0xFFFFFFF8    ; End of CSTACK

#ifdef __ARMVFP__
; Enable the VFP coprocessor.
        mov     r0, #0x40000000                 ; Set EN bit in VFP
        fmxr    fpexc, r0                       ; FPEXC, clear others.

; Disable underflow exceptions by setting flush to zero mode.
; For full IEEE 754 underflow compliance this code should be removed
; and the appropriate exception handler installed.
        mov     r0, #0x01000000                 ; Set FZ bit in VFP
        fmxr    fpscr, r0                       ; FPSCR, clear others.
#endif

; Add more initialization here if required


; Continue to ?main for more IAR specific system startup

        ldr     r0,=?main
        bx      r0

        LTORG

; ********************************************************************

        ENDMOD

        END

; ***** EOF **********************************************************


