#include "stdafx.h"
#include ".\dxflayer.h"
#include "atltypes.h"

// Function name   : CDxfLayer::CDxfLayer
// Description     : Constructor
// Return type     :
// Argument        : CDxfFile& param_dxfFile

CDxfLayer::CDxfLayer(CDxfFile& param_dxfFile)
: m_dxfFile( param_dxfFile )
{
}


// Function name   : CDxfLayer::~CDxfLayer
// Description     : Destructor
// Return type     :
// Argument        : void

CDxfLayer::~CDxfLayer(void)
{
}


// Function name   : CDxfLayer::Parse
// Description     : Parses the layer information in dxf
// Return type     : DxfErrorCodes::DxfError
// Argument        : void

DxfErrorCodes::DxfError CDxfLayer::Parse(void)
{
	using namespace DxfErrorCodes;
	using namespace DxfTableSectionCodes;
	using namespace DxfLayerGroupCodes;

	DxfError enumErrorCode = NoError;

	CDxfValue dxfValue;

	do{ // Loop until we find the begining of the layer information
        m_dxfFile >> dxfValue;
	}while( static_cast <bool> ( dxfValue ) && ( dxfValue.Code() != 0 ) );

	while( dxfValue == LayerBegin )
	{	// Loop until there is layer information
		CAcDbLayerTableRecord tempLayer;

		m_dxfFile >> dxfValue;

		while( static_cast <bool> ( dxfValue ) && ( dxfValue.Code() != 0 ) )
		{
			switch( dxfValue.Code() )
			{
			case LayerName :
				tempLayer.SetLayerName( dxfValue.Value() );
				break;
			case ColorNumber:
				tempLayer.SetColorNumber( dxfValue );
				break;
			case PlottingFlag:
				tempLayer.SetPlottingFlag( dxfValue );
				break;
			} // switch( dxfValue.Code() )

			m_dxfFile >> dxfValue;
		} // while( dxfValue && ( dxfValue.Code() != 0 ) )

		m_dxfLayerTable.push_back( tempLayer ); // Store the layer information

	} // while( dxfValue == LayerBegin )

	if( enumErrorCode == NoError )	// If every thing was OK
		MakeValid();				// Make this a valid Layer Information

	return enumErrorCode;
}


// Function name   : CDxfLayer::GetCount
// Description     : Returns the number of Layers in dxf
// Return type     : int
// Argument        : void

int CDxfLayer::GetCount(void) const
{
	return static_cast <int> (m_dxfLayerTable.size());
}


// Function name   : CDxfLayer::GetLayer
// Description     : Retrieves the layer information by layer name
// Return type     : CAcDbLayerTableRecord
// Argument        : const string& param_strLayerName

CAcDbLayerTableRecord CDxfLayer::GetLayer(const string& param_strLayerName) const
{
	int i = 0;

	for(i=0; i< GetCount(); i++)
	{// Loop through all the layers
		if( m_dxfLayerTable[i].GetLayerName() == param_strLayerName )
			break;
	} // for(i=0; i< GetCount(); i++)

	if( i < GetCount()) // If layer is found
		return m_dxfLayerTable[i]; // return the layer
	else
		return CAcDbLayerTableRecord(); // return an invalid layer
}


// Function name   : CDxfLayer::GetLayer Color
// Description     : Retrieves the layer information by layer name
// Return type     : CAcDbLayerTableRecord
// Argument        : const string& param_strLayerName

int CDxfLayer::GetColor(const string& param_strLayerName) const
{
		CAcDbLayerTableRecord LayerPtr = GetLayer(param_strLayerName);
		return GetRGBColor(LayerPtr.GetColorNumber());
}

// Function name   : CDxfLayer::operator[]
// Description     : Returns a layer by its index
// Return type     : const CAcDbLayerTableRecord&
// Argument        : const int& nIndex

const CAcDbLayerTableRecord& CDxfLayer::operator[](const int& nIndex) const
{
	return m_dxfLayerTable[nIndex];
}

struct ACADColor{
	int Red;
	int Green;
	int Blue;
};
int CDxfLayer::GetRGBColor(int Index)
{
	ACADColor ColorMap[256]={
	{0x0	,0x0	,0x0 },
	{0xFF	,0x0	,0x0 },
	{0xFF	,0xFF	,0x0 },
	{0x0	,0xFF	,0x0 },
	{0x0	,0xFF	,0xFF},
	{0x0	,0x0	,0xFF},
	{0xFF	,0x0	,0xFF},
	{0xFF	,0xFF	,0xFF},
	{0x41	,0x41	,0x41},
	{0x80	,0x80	,0x80},
	{0xFF	,0x0	,0x0 },
	{0xFF	,0xAA	,0xAA},
	{0xBD	,0x0	,0x0 },
	{0xBD	,0x7E	,0x7E},
	{0x81	,0x0	,0x0 },
	{0x81	,0x56	,0x56},
	{0x68	,0x0	,0x0 },
	{0x68	,0x45	,0x45},
	{0x4F	,0x0	,0x0 },
	{0x4F	,0x35	,0x35},
	{0xFF	,0x3F	,0x0 },
	{0xFF	,0xBF	,0xAA},
	{0xBD	,0x2E	,0x0 },
	{0xBD	,0x8D	,0x7E},
	{0x81	,0x1F	,0x0 },
	{0x81	,0x60	,0x56},
	{0x68	,0x19	,0x0 },
	{0x68	,0x4E	,0x45},
	{0x4F	,0x13	,0x0 },
	{0x4F	,0x3B	,0x35},
	{0xFF	,0x7F	,0x0 },
	{0xFF	,0xD4	,0xAA},
	{0xBD	,0x5E	,0x0 },
	{0xBD	,0x9D	,0x7E},
	{0x81	,0x40	,0x0 },
	{0x81	,0x6B	,0x56},
	{0x68	,0x34	,0x0 },
	{0x68	,0x56	,0x45},
	{0x4F	,0x27	,0x0 },
	{0x4F	,0x42	,0x35},
	{0xFF	,0xBF	,0x0 },
	{0xFF	,0xEA	,0xAA},
	{0xBD	,0x8D	,0x0 },
	{0xBD	,0xAD	,0x7E},
	{0x81	,0x60	,0x0 },
	{0x81	,0x76	,0x56},
	{0x68	,0x4E	,0x0 },
	{0x68	,0x5F	,0x45},
	{0x4F	,0x3B	,0x0 },
	{0x4F	,0x49	,0x35},
	{0xFF	,0xFF	,0x0 },
	{0xFF	,0xFF	,0xAA},
	{0xBD	,0xBD	,0x0 },
	{0xBD	,0xBD	,0x7E},
	{0x81	,0x81	,0x0 },
	{0x81	,0x81	,0x56},
	{0x68	,0x68	,0x0 },
	{0x68	,0x68	,0x45},
	{0x4F	,0x4F	,0x0 },
	{0x4F	,0x4F	,0x35},
	{0xBF	,0xFF	,0x0 },
	{0xEA	,0xFF	,0xAA},
	{0x8D	,0xBD	,0x0 },
	{0xAD	,0xBD	,0x7E},
	{0x60	,0x81	,0x0 },
	{0x76	,0x81	,0x56},
	{0x4E	,0x68	,0x0 },
	{0x5F	,0x68	,0x45},
	{0x3B	,0x4F	,0x0 },
	{0x49	,0x4F	,0x35},
	{0x7F	,0xFF	,0x0 },
	{0xD4	,0xFF	,0xAA},
	{0x5E	,0xBD	,0x0 },
	{0x9D	,0xBD	,0x7E},
	{0x40	,0x81	,0x0 },
	{0x6B	,0x81	,0x56},
	{0x34	,0x68	,0x0 },
	{0x56	,0x68	,0x45},
	{0x27	,0x4F	,0x0 },
	{0x42	,0x4F	,0x35},
	{0x3F	,0xFF	,0x0 },
	{0xBF	,0xFF	,0xAA},
	{0x2E	,0xBD	,0x0 },
	{0x8D	,0xBD	,0x7E},
	{0x1F	,0x81	,0x0 },
	{0x60	,0x81	,0x56},
	{0x19	,0x68	,0x0 },
	{0x4E	,0x68	,0x45},
	{0x13	,0x4F	,0x0 },
	{0x3B	,0x4F	,0x35},
	{0x0	,0xFF	,0x0 },
	{0xAA	,0xFF	,0xAA},
	{0x0	,0xBD	,0x0 },
	{0x7E	,0xBD	,0x7E},
	{0x0	,0x81	,0x0 },
	{0x56	,0x81	,0x56},
	{0x0	,0x68	,0x0 },
	{0x45	,0x68	,0x45},
	{0x0	,0x4F	,0x0 },
	{0x35	,0x4F	,0x35},
	{0x0	,0xFF	,0x3F},
	{0xAA	,0xFF	,0xBF},
	{0x0	,0xBD	,0x2E},
	{0x7E	,0xBD	,0x8D},
	{0x0	,0x81	,0x1F},
	{0x56	,0x81	,0x60},
	{0x0	,0x68	,0x19},
	{0x45	,0x68	,0x4E},
	{0x0	,0x4F	,0x13},
	{0x35	,0x4F	,0x3B},
	{0x0	,0xFF	,0x7F},
	{0xAA	,0xFF	,0xD4},
	{0x0	,0xBD	,0x5E},
	{0x7E	,0xBD	,0x9D},
	{0x0	,0x81	,0x40},
	{0x56	,0x81	,0x6B},
	{0x0	,0x68	,0x34},
	{0x45	,0x68	,0x56},
	{0x0	,0x4F	,0x27},
	{0x35	,0x4F	,0x42},
	{0x0	,0xFF	,0xBF},
	{0xAA	,0xFF	,0xEA},
	{0x0	,0xBD	,0x8D},
	{0x7E	,0xBD	,0xAD},
	{0x0	,0x81	,0x60},
	{0x56	,0x81	,0x76},
	{0x0	,0x68	,0x4E},
	{0x45	,0x68	,0x5F},
	{0x0	,0x4F	,0x3B},
	{0x35	,0x4F	,0x49},
	{0x0	,0xFF	,0xFF},
	{0xAA	,0xFF	,0xFF},
	{0x0	,0xBD	,0xBD},
	{0x7E	,0xBD	,0xBD},
	{0x0	,0x81	,0x81},
	{0x56	,0x81	,0x81},
	{0x0	,0x68	,0x68},
	{0x45	,0x68	,0x68},
	{0x0	,0x4F	,0x4F},
	{0x35	,0x4F	,0x4F},
	{0x0	,0xBF	,0xFF},
	{0xAA	,0xEA	,0xFF},
	{0x0	,0x8D	,0xBD},
	{0x7E	,0xAD	,0xBD},
	{0x0	,0x60	,0x81},
	{0x56	,0x76	,0x81},
	{0x0	,0x4E	,0x68},
	{0x45	,0x5F	,0x68},
	{0x0	,0x3B	,0x4F},
	{0x35	,0x49	,0x4F},
	{0x0	,0x7F	,0xFF},
	{0xAA	,0xD4	,0xFF},
	{0x0	,0x5E	,0xBD},
	{0x7E	,0x9D	,0xBD},
	{0x0	,0x40	,0x81},
	{0x56	,0x6B	,0x81},
	{0x0	,0x34	,0x68},
	{0x45	,0x56	,0x68},
	{0x0	,0x27	,0x4F},
	{0x35	,0x42	,0x4F},
	{0x0	,0x3F	,0xFF},
	{0xAA	,0xBF	,0xFF},
	{0x0	,0x2E	,0xBD},
	{0x7E	,0x8D	,0xBD},
	{0x0	,0x1F	,0x81},
	{0x56	,0x60	,0x81},
	{0x0	,0x19	,0x68},
	{0x45	,0x4E	,0x68},
	{0x0	,0x13	,0x4F},
	{0x35	,0x3B	,0x4F},
	{0x0	,0x0	,0xFF},
	{0xAA	,0xAA	,0xFF},
	{0x0	,0x0	,0xBD},
	{0x7E	,0x7E	,0xBD},
	{0x0	,0x0	,0x81},
	{0x56	,0x56	,0x81},
	{0x0	,0x0	,0x68},
	{0x45	,0x45	,0x68},
	{0x0	,0x0	,0x4F},
	{0x35	,0x35	,0x4F},
	{0x3F	,0x0	,0xFF},
	{0xBF	,0xAA	,0xFF},
	{0x2E	,0x0	,0xBD},
	{0x8D	,0x7E	,0xBD},
	{0x1F	,0x0	,0x81},
	{0x60	,0x56	,0x81},
	{0x19	,0x0	,0x68},
	{0x4E	,0x45	,0x68},
	{0x13	,0x0	,0x4F},
	{0x3B	,0x35	,0x4F},
	{0x7F	,0x0	,0xFF},
	{0xD4	,0xAA	,0xFF},
	{0x5E	,0x0	,0xBD},
	{0x9D	,0x7E	,0xBD},
	{0x40	,0x0	,0x81},
	{0x6B	,0x56	,0x81},
	{0x34	,0x0	,0x68},
	{0x56	,0x45	,0x68},
	{0x27	,0x0	,0x4F},
	{0x42	,0x35	,0x4F},
	{0xBF	,0x0	,0xFF},
	{0xEA	,0xAA	,0xFF},
	{0x8D	,0x0	,0xBD},
	{0xAD	,0x7E	,0xBD},
	{0x60	,0x0	,0x81},
	{0x76	,0x56	,0x81},
	{0x4E	,0x0	,0x68},
	{0x5F	,0x45	,0x68},
	{0x3B	,0x0	,0x4F},
	{0x49	,0x35	,0x4F},
	{0xFF	,0x0	,0xFF},
	{0xFF	,0xAA	,0xFF},
	{0xBD	,0x0	,0xBD},
	{0xBD	,0x7E	,0xBD},
	{0x81	,0x0	,0x81},
	{0x81	,0x56	,0x81},
	{0x68	,0x0	,0x68},
	{0x68	,0x45	,0x68},
	{0x4F	,0x0	,0x4F},
	{0x4F	,0x35	,0x4F},
	{0xFF	,0x0	,0xBF},
	{0xFF	,0xAA	,0xEA},
	{0xBD	,0x0	,0x8D},
	{0xBD	,0x7E	,0xAD},
	{0x81	,0x0	,0x60},
	{0x81	,0x56	,0x76},
	{0x68	,0x0	,0x4E},
	{0x68	,0x45	,0x5F},
	{0x4F	,0x0	,0x3B},
	{0x4F	,0x35	,0x49},
	{0xFF	,0x0	,0x7F},
	{0xFF	,0xAA	,0xD4},
	{0xBD	,0x0	,0x5E},
	{0xBD	,0x7E	,0x9D},
	{0x81	,0x0	,0x40},
	{0x81	,0x56	,0x6B},
	{0x68	,0x0	,0x34},
	{0x68	,0x45	,0x56},
	{0x4F	,0x0	,0x27},
	{0x4F	,0x35	,0x42},
	{0xFF	,0x0	,0x3F},
	{0xFF	,0xAA	,0xBF},
	{0xBD	,0x0	,0x2E},
	{0xBD	,0x7E	,0x8D},
	{0x81	,0x0	,0x1F},
	{0x81	,0x56	,0x60},
	{0x68	,0x0	,0x19},
	{0x68	,0x45	,0x4E},
	{0x4F	,0x0	,0x13},
	{0x4F	,0x35	,0x3B},
	{0x33	,0x33	,0x33},
	{0x50	,0x50	,0x50},
	{0x69	,0x69	,0x69},
	{0x82	,0x82	,0x82},
	{0xBE	,0xBE	,0xBE},
	{0xFF	,0xFF	,0xFF},
	};
	if( Index >= 0 && Index <= 255 ){
		return 255 << 24 | ColorMap[Index].Red << 16 | ColorMap[Index].Green << 8 | ColorMap[Index].Blue;
	}else{
		return 255 << 24;
	}

}
