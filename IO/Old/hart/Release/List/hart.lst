###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       24/Aug/2022  14:11:44
# Copyright 1996-2021 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart\Src\hart.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW5095.tmp
#        (D:\S2Prog\IO\hart\Src\hart.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\hart\Release\Obj -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\hart\Release\List -y --initializers_in_flash --no_tbaa
#        --enable_external_bus -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\hart\INC\\ -I ..\..\..\Shared\Inc\\ --eeprom_size 4096
#        --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\hart\Release\List\hart.lst
#    Object file  =  D:\S2Prog\IO\hart\Release\Obj\hart.r90
#
###############################################################################

D:\S2Prog\IO\hart\Src\hart.c
      1          #include <stdio.h>
      2          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x136
   \   union <unnamed> volatile __ext_io _A_UDR3
   \                     _A_UDR3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x134
   \   union <unnamed> volatile __ext_io _A_UBRR3
   \                     _A_UBRR3:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x132
   \   union <unnamed> volatile __ext_io _A_UCSR3C
   \                     _A_UCSR3C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x131
   \   union <unnamed> volatile __ext_io _A_UCSR3B
   \                     _A_UCSR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x130
   \   union <unnamed> volatile __ext_io _A_UCSR3A
   \                     _A_UCSR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd6
   \   union <unnamed> volatile __io _A_UDR2
   \                     _A_UDR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd4
   \   union <unnamed> volatile __io _A_UBRR2
   \                     _A_UBRR2:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xd2
   \   union <unnamed> volatile __io _A_UCSR2C
   \                     _A_UCSR2C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd1
   \   union <unnamed> volatile __io _A_UCSR2B
   \                     _A_UCSR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd0
   \   union <unnamed> volatile __io _A_UCSR2A
   \                     _A_UCSR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xce
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1
      3          #include "version.h"
      4          #include "inavr.h"
      5          #include "RTOS.h"
      6          
      7          #include "constants.h"
      8          #include "hart_common.h"
      9          #include "hart.h"
     10          #include "hart_diag.h"
     11          #include "hart_msg.h"
     12          #include "hart_gpio.h"
     13          #include "externals.h"
     14          
     15          
     16          ////////////////////////////////////////////////////////////////////////////////
     17          //
     18          // private prototypes
     19          //
     20          ////////////////////////////////////////////////////////////////////////////////
     21          static void hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off);
     22          
     23          static void hart_config_uart(HartTaskStruct *task);
     24          static void hart_reset_tx(HartTaskStruct *task);
     25          static void hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl);
     26          static void hart_start_transaction(HartTaskStruct *task);
     27          
     28          static void hart_irq_tx_next(HartTaskStruct *task);
     29          static void hart_irq_finish_tx(HartTaskStruct *task);
     30          
     31          static void do_hart_transaction(HartTaskStruct *task, hart_channel_t current_chnl, HartTransaction *t);
     32          
     33          void HART_Task(void);
     34          
     35          static void demo1_hart_make_request(HartTaskStruct *task, hart_channel_t current_chnl);
     36          static void demo1_hart_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type);
     37          static uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl);
     38          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     39          HartTaskStruct       _hart_task0 =
   \                     _hart_task0:
   \   00000000                      DS8 1463
   \   000005B7                      REQUIRE `?<Initializer for _hart_task0>`
     40          {
     41          	.modem_no     = hart_modem_0,
     42          	.start_chnl   = hart_channel_0,
     43          	.end_chnl     = hart_channel_3,
     44          };
     45          
     46          HartTaskStruct       _hart_task1 =
   \                     _hart_task1:
   \   000005B7                      DS8 1463
   \   00000B6E                      REQUIRE `?<Initializer for _hart_task1>`
     47          {
     48          	.modem_no     = hart_modem_1,
     49          	.start_chnl   = hart_channel_4,
     50          	.end_chnl     = hart_channel_7,
     51          };
     52          
     53          HartTaskStruct       _hart_task2 =
   \                     _hart_task2:
   \   00000B6E                      DS8 1463
   \   00001125                      REQUIRE `?<Initializer for _hart_task2>`
     54          {
     55          	.modem_no     = hart_modem_2,
     56          	.start_chnl   = hart_channel_8,
     57          	.end_chnl     = hart_channel_11,
     58          };
     59          
     60          
     61          ////////////////////////////////////////////////////////////////////////////////
     62          //
     63          // hart module privates
     64          //
     65          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     66          static HartTransaction   _demo1_transaction =
     67          {
     68          	.make_request = demo1_hart_make_request,
     69          	.complete     = ReceiveReply,
     70          	.error        = demo1_hart_handle_rx_error,
     71          };
     72          
     73          HartChannel          _hart_channels[HART_MAX_CHANNEL] =
   \                     _hart_channels:
   \   00000000                      DS8 324
   \   00000144                      REQUIRE `?<Initializer for _hart_channels>`
   \   00000144                      DS8 7
   \   0000014B                      REQUIRE `?<Initializer for _demo1_transaction>`
     74          {
     75          	{ .chnl_num       = hart_channel_0  },
     76          	{ .chnl_num       = hart_channel_1  },
     77          	{ .chnl_num       = hart_channel_2  },
     78          	{ .chnl_num       = hart_channel_3  },
     79          	{ .chnl_num       = hart_channel_4  },
     80          	{ .chnl_num       = hart_channel_5  },
     81          	{ .chnl_num       = hart_channel_6  },
     82          	{ .chnl_num       = hart_channel_7  },
     83          	{ .chnl_num       = hart_channel_8  },
     84          	{ .chnl_num       = hart_channel_9  },
     85          	{ .chnl_num       = hart_channel_10 },
     86          	{ .chnl_num       = hart_channel_11 },
     87          };
     88          
     89          ////////////////////////////////////////////////////////////////////////////////
     90          //
     91          // hart channel specifics
     92          //
     93          ////////////////////////////////////////////////////////////////////////////////
     94          /*
     95          void hart_debug_check(void)
     96          {
     97            if((UCSR2B & _BV(TXCIE2)) == 0)
     98            {
     99          	while(1)
    100          	  ;
    101            }
    102          }
    103          */
    104          
    105          

   \                                 In  segment CODE, align 2, keep-with-next
    106          inline void hart_channel_lock(HartChannel *channel) {
   \                     hart_channel_lock:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    107          	switch (channel->chnl_num) {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8100               LD      R16, Z
   \   00000004   300C               CPI     R16, 12
   \   00000006   F4B0               BRCC    ??hart_channel_lock_0
   \   00000008   ....               LDI     R31, (`?<Jumptable for hart_channel_lock>_0`) >> 16
   \   0000000A   BFFB               OUT     0x3B, R31
   \   0000000C   E0F2               LDI     R31, 2
   \   0000000E   9F0F               MUL     R16, R31
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_channel_lock>_0`) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(`?<Jumptable for hart_channel_lock>_0`) & 0xFFFF) >> 8
   \   00000016   9007               ELPM    R0, Z+
   \   00000018   9016               ELPM    R1, Z
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   9409               IJMP
    108          	case hart_channel_0:
    109          	case hart_channel_1:
    110          	case hart_channel_2:
    111          	case hart_channel_3:
    112          		OS_Use(&_hart_task0.channel_lock);
   \                     ??hart_channel_lock_1:
   \   0000001E   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   00000020   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \   00000022   C002               RJMP    ??hart_channel_lock_2
    113          		break;
    114          
    115          	case hart_channel_4:
    116          	case hart_channel_5:
    117          	case hart_channel_6:
    118          	case hart_channel_7:
    119          		OS_Use(&_hart_task1.channel_lock);
   \                     ??hart_channel_lock_3:
   \   00000024   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000026   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \                     ??hart_channel_lock_2:
   \   00000028   ........           JMP     OS_Use
    120          		break;
    121          
    122          	case hart_channel_8:
    123          	case hart_channel_9:
    124          	case hart_channel_10:
    125          	case hart_channel_11:
    126          		OS_Use(&_hart_task2.channel_lock);
   \                     ??hart_channel_lock_4:
   \   0000002C   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   0000002E   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   00000030   ........           CALL    OS_Use
    127          		break;
    128          	}
    129          }
   \                     ??hart_channel_lock_0:
   \   00000034   9508               RET
    130          

   \                                 In  segment CODE, align 2, keep-with-next
    131          inline void hart_channel_unlock(HartChannel *channel) {
   \                     hart_channel_unlock:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    132          	switch (channel->chnl_num) {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8100               LD      R16, Z
   \   00000004   300C               CPI     R16, 12
   \   00000006   F4B0               BRCC    ??hart_channel_unlock_0
   \   00000008   ....               LDI     R31, (`?<Jumptable for hart_channel_unlock>_0`) >> 16
   \   0000000A   BFFB               OUT     0x3B, R31
   \   0000000C   E0F2               LDI     R31, 2
   \   0000000E   9F0F               MUL     R16, R31
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_channel_unlock>_0`) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(`?<Jumptable for hart_channel_unlock>_0`) & 0xFFFF) >> 8
   \   00000016   9007               ELPM    R0, Z+
   \   00000018   9016               ELPM    R1, Z
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   9409               IJMP
    133          	case hart_channel_0:
    134          	case hart_channel_1:
    135          	case hart_channel_2:
    136          	case hart_channel_3:
    137          		OS_Unuse(&_hart_task0.channel_lock);
   \                     ??hart_channel_unlock_1:
   \   0000001E   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   00000020   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \   00000022   C002               RJMP    ??hart_channel_unlock_2
    138          		break;
    139          
    140          	case hart_channel_4:
    141          	case hart_channel_5:
    142          	case hart_channel_6:
    143          	case hart_channel_7:
    144          		OS_Unuse(&_hart_task1.channel_lock);
   \                     ??hart_channel_unlock_3:
   \   00000024   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000026   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \                     ??hart_channel_unlock_2:
   \   00000028   ........           JMP     OS_Unuse
    145          		break;
    146          
    147          	case hart_channel_8:
    148          	case hart_channel_9:
    149          	case hart_channel_10:
    150          	case hart_channel_11:
    151          		OS_Unuse(&_hart_task2.channel_lock);
   \                     ??hart_channel_unlock_4:
   \   0000002C   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   0000002E   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   00000030   ........           CALL    OS_Unuse
    152          		break;
    153          	}
    154          }
   \                     ??hart_channel_unlock_0:
   \   00000034   9508               RET
    155          

   \                                 In  segment CODE, align 2, keep-with-next
    156          static inline void
    157          hart_channel_reset(HartChannel *channel) {
   \                     hart_channel_reset:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    158          	hart_channel_lock(channel);
   \   00000006   910C               LD      R16, X
   \   00000008   300C               CPI     R16, 12
   \   0000000A   F4A8               BRCC    ??hart_channel_reset_0
   \   0000000C   ....               LDI     R31, (`?<Jumptable for hart_channel_reset>_0`) >> 16
   \   0000000E   BFFB               OUT     0x3B, R31
   \   00000010   E0F2               LDI     R31, 2
   \   00000012   9F0F               MUL     R16, R31
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_channel_reset>_0`) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(`?<Jumptable for hart_channel_reset>_0`) & 0xFFFF) >> 8
   \   0000001A   9007               ELPM    R0, Z+
   \   0000001C   9016               ELPM    R1, Z
   \   0000001E   01F0               MOVW    R31:R30, R1:R0
   \   00000020   9409               IJMP
   \                     ??hart_channel_reset_1:
   \   00000022   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   00000024   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   00000026   C005               RJMP    ??hart_channel_reset_2
   \                     ??hart_channel_reset_3:
   \   00000028   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   0000002A   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   0000002C   C002               RJMP    ??hart_channel_reset_2
   \                     ??hart_channel_reset_4:
   \   0000002E   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   00000030   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??hart_channel_reset_2:
   \   00000032   ........           CALL    OS_Use
    159          
    160          	channel->status         = HartChannelStatus_No_Response;
   \                     ??hart_channel_reset_0:
   \   00000036   01FD               MOVW    R31:R30, R27:R26
   \   00000038   E001               LDI     R16, 1
   \   0000003A   8301               STD     Z+1, R16
    161          	channel->power_status   = HartChannelPowerStatus_OFF;
   \   0000003C   8302               STD     Z+2, R16
    162          
    163          	channel->MsrdCurrent     = 0.0;
   \   0000003E   E000               LDI     R16, 0
   \   00000040   8303               STD     Z+3, R16
   \   00000042   8304               STD     Z+4, R16
   \   00000044   8305               STD     Z+5, R16
   \   00000046   8306               STD     Z+6, R16
    164          
    165          	channel->rx_invalid_msg = 0;
   \   00000048   8307               STD     Z+7, R16
   \   0000004A   8700               STD     Z+8, R16
   \   0000004C   8701               STD     Z+9, R16
   \   0000004E   8702               STD     Z+10, R16
    166          	channel->rx_csum_err    = 0;
   \   00000050   8703               STD     Z+11, R16
   \   00000052   8704               STD     Z+12, R16
   \   00000054   8705               STD     Z+13, R16
   \   00000056   8706               STD     Z+14, R16
    167          	channel->rx_timeout     = 0;
   \   00000058   8707               STD     Z+15, R16
   \   0000005A   8B00               STD     Z+16, R16
   \   0000005C   8B01               STD     Z+17, R16
   \   0000005E   8B02               STD     Z+18, R16
    168          	channel->total_reqs     = 0;
   \   00000060   8B03               STD     Z+19, R16
   \   00000062   8B04               STD     Z+20, R16
   \   00000064   8B05               STD     Z+21, R16
   \   00000066   8B06               STD     Z+22, R16
    169          	channel->total_success  = 0;
   \   00000068   8B07               STD     Z+23, R16
   \   0000006A   8F00               STD     Z+24, R16
   \   0000006C   8F01               STD     Z+25, R16
   \   0000006E   8F02               STD     Z+26, R16
    170          
    171          	hart_channel_unlock(channel);
   \   00000070   8100               LD      R16, Z
   \   00000072   300C               CPI     R16, 12
   \   00000074   F4A8               BRCC    ??hart_channel_reset_5
   \   00000076   ....               LDI     R31, (`?<Jumptable for hart_channel_reset>_1`) >> 16
   \   00000078   BFFB               OUT     0x3B, R31
   \   0000007A   E0F2               LDI     R31, 2
   \   0000007C   9F0F               MUL     R16, R31
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_channel_reset>_1`) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(`?<Jumptable for hart_channel_reset>_1`) & 0xFFFF) >> 8
   \   00000084   9007               ELPM    R0, Z+
   \   00000086   9016               ELPM    R1, Z
   \   00000088   01F0               MOVW    R31:R30, R1:R0
   \   0000008A   9409               IJMP
   \                     ??hart_channel_reset_6:
   \   0000008C   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   0000008E   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   00000090   C005               RJMP    ??hart_channel_reset_7
   \                     ??hart_channel_reset_8:
   \   00000092   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000094   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000096   C002               RJMP    ??hart_channel_reset_7
   \                     ??hart_channel_reset_9:
   \   00000098   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   0000009A   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??hart_channel_reset_7:
   \   0000009C   ........           CALL    OS_Unuse
    172          }
   \                     ??hart_channel_reset_5:
   \   000000A0   91A9               LD      R26, Y+
   \   000000A2   91B9               LD      R27, Y+
   \   000000A4   9508               RET
    173          
    174          static inline void
    175          hart_channel_set_status(HartChannel *channel, HartChannelStatus status) {
    176          	hart_channel_lock(channel);
    177          
    178          	channel->status     = status;
    179          
    180          	hart_channel_unlock(channel);
    181          }
    182          
    183          static inline void
    184          hart_channel_set_power_status(HartChannel *channel, HartChannelPowerStatus status) {
    185          	hart_channel_lock(channel);
    186          
    187          	channel->power_status   = status;
    188          
    189          	hart_channel_unlock(channel);
    190          }
    191          
    192          static char hart_channel_ready_to_poll(hart_channel_t chnl) {
    193          	char isLoopOK = false;
    194          
    195          	//hart_channel_lock(&_hart_channels[chnl]);
    196          
    197          	if (_hart_channels[chnl].power_status == HartChannelPowerStatus_ON &&
    198          		_hart_channels[chnl].MsrdCurrent   >= HART_MINIMUM_MA_FEEDBACK_FOR_OK) {
    199          		isLoopOK = true;
    200          	}
    201          
    202          	//hart_channel_unlock(&_hart_channels[chnl]);
    203          
    204          	return isLoopOK;
    205          }
    206          

   \                                 In  segment CODE, align 2, keep-with-next
    207          static inline void
    208          hart_channel_inc_stat(HartChannel *channel, HartChannelStatItem item) {
   \                     hart_channel_inc_stat:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   2F82               MOV     R24, R18
    209          	hart_channel_lock(channel);
   \   0000000A   910C               LD      R16, X
   \   0000000C   300C               CPI     R16, 12
   \   0000000E   F4A8               BRCC    ??hart_channel_inc_stat_0
   \   00000010   ....               LDI     R31, (`?<Jumptable for hart_channel_inc_stat>_0`) >> 16
   \   00000012   BFFB               OUT     0x3B, R31
   \   00000014   E0F2               LDI     R31, 2
   \   00000016   9F0F               MUL     R16, R31
   \   00000018   01F0               MOVW    R31:R30, R1:R0
   \   0000001A   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_channel_inc_stat>_0`) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(`?<Jumptable for hart_channel_inc_stat>_0`) & 0xFFFF) >> 8
   \   0000001E   9007               ELPM    R0, Z+
   \   00000020   9016               ELPM    R1, Z
   \   00000022   01F0               MOVW    R31:R30, R1:R0
   \   00000024   9409               IJMP
   \                     ??hart_channel_inc_stat_1:
   \   00000026   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   00000028   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   0000002A   C005               RJMP    ??hart_channel_inc_stat_2
   \                     ??hart_channel_inc_stat_3:
   \   0000002C   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   0000002E   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000030   C002               RJMP    ??hart_channel_inc_stat_2
   \                     ??hart_channel_inc_stat_4:
   \   00000032   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   00000034   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??hart_channel_inc_stat_2:
   \   00000036   ........           CALL    OS_Use
    210          
    211          	switch (item) {
   \                     ??hart_channel_inc_stat_0:
   \   0000003A   2388               TST     R24
   \   0000003C   F049               BREQ    ??hart_channel_inc_stat_5
   \   0000003E   958A               DEC     R24
   \   00000040   F0A9               BREQ    ??hart_channel_inc_stat_6
   \   00000042   958A               DEC     R24
   \   00000044   F109               BREQ    ??hart_channel_inc_stat_7
   \   00000046   958A               DEC     R24
   \   00000048   F169               BREQ    ??hart_channel_inc_stat_8
   \   0000004A   958A               DEC     R24
   \   0000004C   F1C9               BREQ    ??hart_channel_inc_stat_9
   \   0000004E   C045               RJMP    ??hart_channel_inc_stat_10
    212          	case HartChannelStatItem_RX_INVALID:
    213          		channel->rx_invalid_msg++;
   \                     ??hart_channel_inc_stat_5:
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   8107               LDD     R16, Z+7
   \   00000054   8510               LDD     R17, Z+8
   \   00000056   8521               LDD     R18, Z+9
   \   00000058   8532               LDD     R19, Z+10
   \   0000005A   5F0F               SUBI    R16, 255
   \   0000005C   4F1F               SBCI    R17, 255
   \   0000005E   4F2F               SBCI    R18, 255
   \   00000060   4F3F               SBCI    R19, 255
   \   00000062   8307               STD     Z+7, R16
   \   00000064   8710               STD     Z+8, R17
   \   00000066   8721               STD     Z+9, R18
   \   00000068   8732               STD     Z+10, R19
    214          		break;
   \   0000006A   C037               RJMP    ??hart_channel_inc_stat_10
    215          
    216          	case HartChannelStatItem_RX_CSUM:
    217          		channel->rx_csum_err++;
   \                     ??hart_channel_inc_stat_6:
   \   0000006C   01FD               MOVW    R31:R30, R27:R26
   \   0000006E   8503               LDD     R16, Z+11
   \   00000070   8514               LDD     R17, Z+12
   \   00000072   8525               LDD     R18, Z+13
   \   00000074   8536               LDD     R19, Z+14
   \   00000076   5F0F               SUBI    R16, 255
   \   00000078   4F1F               SBCI    R17, 255
   \   0000007A   4F2F               SBCI    R18, 255
   \   0000007C   4F3F               SBCI    R19, 255
   \   0000007E   8703               STD     Z+11, R16
   \   00000080   8714               STD     Z+12, R17
   \   00000082   8725               STD     Z+13, R18
   \   00000084   8736               STD     Z+14, R19
    218          		break;
   \   00000086   C029               RJMP    ??hart_channel_inc_stat_10
    219          
    220          	case HartChannelStatItem_RX_TIMEOUT:
    221          		channel->rx_timeout++;
   \                     ??hart_channel_inc_stat_7:
   \   00000088   01FD               MOVW    R31:R30, R27:R26
   \   0000008A   8507               LDD     R16, Z+15
   \   0000008C   8910               LDD     R17, Z+16
   \   0000008E   8921               LDD     R18, Z+17
   \   00000090   8932               LDD     R19, Z+18
   \   00000092   5F0F               SUBI    R16, 255
   \   00000094   4F1F               SBCI    R17, 255
   \   00000096   4F2F               SBCI    R18, 255
   \   00000098   4F3F               SBCI    R19, 255
   \   0000009A   8707               STD     Z+15, R16
   \   0000009C   8B10               STD     Z+16, R17
   \   0000009E   8B21               STD     Z+17, R18
   \   000000A0   8B32               STD     Z+18, R19
    222          		break;
   \   000000A2   C01B               RJMP    ??hart_channel_inc_stat_10
    223          
    224          	case HartChannelStatItem_TOTAL_REQS:
    225          		channel->total_reqs++;
   \                     ??hart_channel_inc_stat_8:
   \   000000A4   01FD               MOVW    R31:R30, R27:R26
   \   000000A6   8903               LDD     R16, Z+19
   \   000000A8   8914               LDD     R17, Z+20
   \   000000AA   8925               LDD     R18, Z+21
   \   000000AC   8936               LDD     R19, Z+22
   \   000000AE   5F0F               SUBI    R16, 255
   \   000000B0   4F1F               SBCI    R17, 255
   \   000000B2   4F2F               SBCI    R18, 255
   \   000000B4   4F3F               SBCI    R19, 255
   \   000000B6   8B03               STD     Z+19, R16
   \   000000B8   8B14               STD     Z+20, R17
   \   000000BA   8B25               STD     Z+21, R18
   \   000000BC   8B36               STD     Z+22, R19
    226          		break;
   \   000000BE   C00D               RJMP    ??hart_channel_inc_stat_10
    227          
    228          	case HartChannelStatItem_TOTAL_SUCCESS:
    229          		channel->total_success++;
   \                     ??hart_channel_inc_stat_9:
   \   000000C0   01FD               MOVW    R31:R30, R27:R26
   \   000000C2   8907               LDD     R16, Z+23
   \   000000C4   8D10               LDD     R17, Z+24
   \   000000C6   8D21               LDD     R18, Z+25
   \   000000C8   8D32               LDD     R19, Z+26
   \   000000CA   5F0F               SUBI    R16, 255
   \   000000CC   4F1F               SBCI    R17, 255
   \   000000CE   4F2F               SBCI    R18, 255
   \   000000D0   4F3F               SBCI    R19, 255
   \   000000D2   8B07               STD     Z+23, R16
   \   000000D4   8F10               STD     Z+24, R17
   \   000000D6   8F21               STD     Z+25, R18
   \   000000D8   8F32               STD     Z+26, R19
    230          		break;
    231          	}
    232          
    233          	hart_channel_unlock(channel);
   \                     ??hart_channel_inc_stat_10:
   \   000000DA   910C               LD      R16, X
   \   000000DC   300C               CPI     R16, 12
   \   000000DE   F4A8               BRCC    ??hart_channel_inc_stat_11
   \   000000E0   ....               LDI     R31, (`?<Jumptable for hart_channel_inc_stat>_1`) >> 16
   \   000000E2   BFFB               OUT     0x3B, R31
   \   000000E4   E0F2               LDI     R31, 2
   \   000000E6   9F0F               MUL     R16, R31
   \   000000E8   01F0               MOVW    R31:R30, R1:R0
   \   000000EA   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_channel_inc_stat>_1`) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(`?<Jumptable for hart_channel_inc_stat>_1`) & 0xFFFF) >> 8
   \   000000EE   9007               ELPM    R0, Z+
   \   000000F0   9016               ELPM    R1, Z
   \   000000F2   01F0               MOVW    R31:R30, R1:R0
   \   000000F4   9409               IJMP
   \                     ??hart_channel_inc_stat_12:
   \   000000F6   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   000000F8   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   000000FA   C005               RJMP    ??hart_channel_inc_stat_13
   \                     ??hart_channel_inc_stat_14:
   \   000000FC   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   000000FE   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000100   C002               RJMP    ??hart_channel_inc_stat_13
   \                     ??hart_channel_inc_stat_15:
   \   00000102   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   00000104   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??hart_channel_inc_stat_13:
   \   00000106   ........           CALL    OS_Unuse
    234          }
   \                     ??hart_channel_inc_stat_11:
   \   0000010A   9189               LD      R24, Y+
   \   0000010C   91A9               LD      R26, Y+
   \   0000010E   91B9               LD      R27, Y+
   \   00000110   9508               RET
    235          
    236          
    237          ////////////////////////////////////////////////////////////////////////////////
    238          //
    239          // private utilities
    240          //
    241          ////////////////////////////////////////////////////////////////////////////////
    242          static void
    243          hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off) {
    244          	HartChannel *c = &_hart_channels[chnl];
    245          
    246          	if (on_off == HartChannelPowerStatus_ON) {
    247          		hart_gpio_power_on(chnl);
    248          	} else {
    249          		hart_gpio_power_off(chnl);
    250          	}
    251          	hart_channel_set_power_status(c, on_off);
    252          }
    253          
    254          static void
    255          hart_control_Rx_Enable(hart_modem_t   modem, uint8_t enable, uint8_t from_irq) {
    256          	switch (modem) {
    257          	case hart_modem_0:
    258          		if (enable) {
    259          			UCSR1B |= _BV(RXEN1);
    260          		} else {
    261          			UCSR1B &= ~_BV(RXEN1);
    262          		}
    263          		break;
    264          
    265          	case hart_modem_1:
    266          		if (enable) {
    267          			UCSR2B |= _BV(RXEN2);
    268          		} else {
    269          			UCSR2B &= ~_BV(RXEN2);
    270          		}
    271          		break;
    272          
    273          	case hart_modem_2:
    274          		if (enable) {
    275          			UCSR3B |= _BV(RXEN3);
    276          		} else {
    277          			UCSR3B &= ~_BV(RXEN3);
    278          		}
    279          		break;
    280          	}
    281          }
    282          
    283          ////////////////////////////////////////////////////////////////////////////////
    284          //
    285          // common IRQ context utilities
    286          //
    287          // this routines shouldn't be called in task context.
    288          //
    289          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    290          static void
    291          hart_irq_tx_next(HartTaskStruct *task) {
   \                     hart_irq_tx_next:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   01F8               MOVW    R31:R30, R17:R16
    292          	uint8_t   b;
    293          	uint16_t  len;
    294          	uint16_t  tndx;
    295          
    296          	tndx = task->tx_buf_ndx;
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   5AAC               SUBI    R26, 172
   \   0000000A   4FBD               SBCI    R27, 253
   \   0000000C   9613               ADIW    R27:R26, 3
   \   0000000E   918D               LD      R24, X+
   \   00000010   919D               LD      R25, X+
    297          	len  = task->tx_len;
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9716               SBIW    R27:R26, 6
    298          	b = task->tx_buf[tndx];
   \   00000018   0FE8               ADD     R30, R24
   \   0000001A   1FF9               ADC     R31, R25
   \   0000001C   5AE5               SUBI    R30, 165
   \   0000001E   4FFD               SBCI    R31, 253
   \   00000020   8120               LD      R18, Z
    299          
    300          	tndx++;
   \   00000022   9601               ADIW    R25:R24, 1
    301          	switch (task->modem_no) {
   \   00000024   01FD               MOVW    R31:R30, R27:R26
   \   00000026   8130               LD      R19, Z
   \   00000028   2333               TST     R19
   \   0000002A   F029               BREQ    ??hart_irq_tx_next_0
   \   0000002C   953A               DEC     R19
   \   0000002E   F0C1               BREQ    ??hart_irq_tx_next_1
   \   00000030   953A               DEC     R19
   \   00000032   F159               BREQ    ??hart_irq_tx_next_2
   \   00000034   C03E               RJMP    ??hart_irq_tx_next_3
    302          	case hart_modem_0:
    303          		if (tndx >= len) {
   \                     ??hart_irq_tx_next_0:
   \   00000036   1780               CP      R24, R16
   \   00000038   0791               CPC     R25, R17
   \   0000003A   F078               BRCS    ??hart_irq_tx_next_4
    304          			UCSR1A |=  _BV(TXC1);       // clear TXC flag if set by any chance
   \   0000003C   910000C8           LDS     R16, 200
   \   00000040   6400               ORI     R16, 0x40
   \   00000042   930000C8           STS     200, R16
    305          			UCSR1B &= ~_BV(UDRIE1);
   \   00000046   910000C9           LDS     R16, 201
   \   0000004A   7D0F               ANDI    R16, 0xDF
   \   0000004C   930000C9           STS     201, R16
    306          			UCSR1B |=  _BV(TXCIE1);
   \   00000050   910000C9           LDS     R16, 201
   \   00000054   6400               ORI     R16, 0x40
   \   00000056   930000C9           STS     201, R16
    307          		}
    308          		UDR1 = b;
   \                     ??hart_irq_tx_next_4:
   \   0000005A   9320....           STS     _A_UDR1, R18
    309          		break;
   \   0000005E   C029               RJMP    ??hart_irq_tx_next_3
    310          
    311          	case hart_modem_1:
    312          		if (tndx >= len) {
   \                     ??hart_irq_tx_next_1:
   \   00000060   1780               CP      R24, R16
   \   00000062   0791               CPC     R25, R17
   \   00000064   F078               BRCS    ??hart_irq_tx_next_5
    313          			UCSR2A |=  _BV(TXC2);       // clear TXC flag if set by any chance
   \   00000066   910000D0           LDS     R16, 208
   \   0000006A   6400               ORI     R16, 0x40
   \   0000006C   930000D0           STS     208, R16
    314          			UCSR2B &= ~_BV(UDRIE2);
   \   00000070   910000D1           LDS     R16, 209
   \   00000074   7D0F               ANDI    R16, 0xDF
   \   00000076   930000D1           STS     209, R16
    315          			UCSR2B |=  _BV(TXCIE2);
   \   0000007A   910000D1           LDS     R16, 209
   \   0000007E   6400               ORI     R16, 0x40
   \   00000080   930000D1           STS     209, R16
    316          		}
    317          		UDR2 = b;
   \                     ??hart_irq_tx_next_5:
   \   00000084   9320....           STS     _A_UDR2, R18
    318          		break;
   \   00000088   C014               RJMP    ??hart_irq_tx_next_3
    319          
    320          	case hart_modem_2:
    321          		if (tndx >= len) {
   \                     ??hart_irq_tx_next_2:
   \   0000008A   1780               CP      R24, R16
   \   0000008C   0791               CPC     R25, R17
   \   0000008E   F078               BRCS    ??hart_irq_tx_next_6
    322          			UCSR3A |=  _BV(TXC3);       // clear TXC flag if set by any chance
   \   00000090   91000130           LDS     R16, 304
   \   00000094   6400               ORI     R16, 0x40
   \   00000096   93000130           STS     304, R16
    323          			UCSR3B &= ~_BV(UDRIE3);
   \   0000009A   91000131           LDS     R16, 305
   \   0000009E   7D0F               ANDI    R16, 0xDF
   \   000000A0   93000131           STS     305, R16
    324          			UCSR3B |=  _BV(TXCIE3);
   \   000000A4   91000131           LDS     R16, 305
   \   000000A8   6400               ORI     R16, 0x40
   \   000000AA   93000131           STS     305, R16
    325          		}
    326          		UDR3 = b;
   \                     ??hart_irq_tx_next_6:
   \   000000AE   9320....           STS     _A_UDR3, R18
    327          		break;
    328          	}
    329          	task->tx_buf_ndx = tndx;
   \                     ??hart_irq_tx_next_3:
   \   000000B2   8383               STD     Z+3, R24
   \   000000B4   8394               STD     Z+4, R25
    330          }
   \   000000B6   01CA               MOVW    R25:R24, R21:R20
   \   000000B8   01DB               MOVW    R27:R26, R23:R22
   \   000000BA   9508               RET
   \   000000BC                      REQUIRE _A_UCSR1A
   \   000000BC                      REQUIRE _A_UCSR1B
   \   000000BC                      REQUIRE _A_UDR1
   \   000000BC                      REQUIRE _A_UCSR2A
   \   000000BC                      REQUIRE _A_UCSR2B
   \   000000BC                      REQUIRE _A_UDR2
   \   000000BC                      REQUIRE _A_UCSR3A
   \   000000BC                      REQUIRE _A_UCSR3B
   \   000000BC                      REQUIRE _A_UDR3
    331          

   \                                 In  segment CODE, align 2, keep-with-next
    332          static void
    333          hart_irq_finish_tx(HartTaskStruct *task) {
   \                     hart_irq_finish_tx:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    334          	switch (task->modem_no) {
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   5AEC               SUBI    R30, 172
   \   0000000A   4FFD               SBCI    R31, 253
   \   0000000C   8100               LD      R16, Z
   \   0000000E   2300               TST     R16
   \   00000010   F029               BREQ    ??hart_irq_finish_tx_0
   \   00000012   950A               DEC     R16
   \   00000014   F049               BREQ    ??hart_irq_finish_tx_1
   \   00000016   950A               DEC     R16
   \   00000018   F069               BREQ    ??hart_irq_finish_tx_2
   \   0000001A   C011               RJMP    ??hart_irq_finish_tx_3
    335          	case hart_modem_0:
    336          		UCSR1B &=  ~_BV(TXCIE1);
   \                     ??hart_irq_finish_tx_0:
   \   0000001C   910000C9           LDS     R16, 201
   \   00000020   7B0F               ANDI    R16, 0xBF
   \   00000022   930000C9           STS     201, R16
    337          		break;
   \   00000026   C00B               RJMP    ??hart_irq_finish_tx_3
    338          
    339          	case hart_modem_1:
    340          		UCSR2B &=  ~_BV(TXCIE2);
   \                     ??hart_irq_finish_tx_1:
   \   00000028   910000D1           LDS     R16, 209
   \   0000002C   7B0F               ANDI    R16, 0xBF
   \   0000002E   930000D1           STS     209, R16
    341          		break;
   \   00000032   C005               RJMP    ??hart_irq_finish_tx_3
    342          
    343          	case hart_modem_2:
    344          		UCSR3B &=  ~_BV(TXCIE3);
   \                     ??hart_irq_finish_tx_2:
   \   00000034   91000131           LDS     R16, 305
   \   00000038   7B0F               ANDI    R16, 0xBF
   \   0000003A   93000131           STS     305, R16
    345          		break;
    346          	}
    347          
    348          	//
    349          	// enable demodulator on hart modem
    350          	//
    351          #if HART_CONTROL_RTS_IN_TASK  == 0
    352          	hart_gpio_hart_carrier_off_irq(task->modem_no);
   \                     ??hart_irq_finish_tx_3:
   \   0000003E   8100               LD      R16, Z
   \   00000040   ........           CALL    hart_gpio_hart_carrier_off_irq
    353          #endif
    354          	OS_SignalEvent(HART_EVENT_TX_COMPLETE, &task->tcb);
   \   00000044   5C81               SUBI    R24, 193
   \   00000046   4F9D               SBCI    R25, 253
   \   00000048   019C               MOVW    R19:R18, R25:R24
   \   0000004A   E004               LDI     R16, 4
   \   0000004C   ........           CALL    OS_SignalEvent
    355          
    356          	return;
   \   00000050   9189               LD      R24, Y+
   \   00000052   9199               LD      R25, Y+
   \   00000054   9508               RET
   \   00000056                      REQUIRE _A_UCSR1B
   \   00000056                      REQUIRE _A_UCSR2B
   \   00000056                      REQUIRE _A_UCSR3B
    357          }
    358          
    359          
    360          ////////////////////////////////////////////////////////////////////////////////
    361          //
    362          // HART0 USART1 IRQ handler
    363          //
    364          ////////////////////////////////////////////////////////////////////////////////
    365          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    366          __interrupt void USART1_RXC(void) {
   \                     USART1_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    367          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??USART1_RXC_0
   \   00000046   9478               SEI
    368          	if (_hart_task0.rx_Listen[_hart_task0.rx_Channel]) {
   \                     ??USART1_RXC_0:
   \   00000048   9100....           LDS     R16, (_hart_task0 + 1375)
   \   0000004C   E0F0               LDI     R31, 0
   \   0000004E   2FE0               MOV     R30, R16
   \   00000050   ....               SUBI    R30, LOW((-(_hart_task0 + 1376) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(_hart_task0 + 1376) & 0xFFFF))
   \   00000054   8100               LD      R16, Z
   \   00000056   2300               TST     R16
   \   00000058   F0B1               BREQ    ??USART1_RXC_1
    369          		 char Dummy = UDR1;
   \   0000005A   9100....           LDS     R16, _A_UDR1
    370          		_hart_task0.rx_Time[_hart_task0.rx_Channel] = OS_Time;
   \   0000005E   9100....           LDS     R16, (_hart_task0 + 1375)
   \   00000062   9140....           LDS     R20, OS_Time
   \   00000066   9150....           LDS     R21, (OS_Time + 1)
   \   0000006A   9160....           LDS     R22, (OS_Time + 2)
   \   0000006E   9170....           LDS     R23, (OS_Time + 3)
   \   00000072   E014               LDI     R17, 4
   \   00000074   9F01               MUL     R16, R17
   \   00000076   01F0               MOVW    R31:R30, R1:R0
   \   00000078   ....               SUBI    R30, LOW((-(_hart_task0 + 1380) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, HIGH((-(_hart_task0 + 1380) & 0xFFFF))
   \   0000007C   8340               ST      Z, R20
   \   0000007E   8351               STD     Z+1, R21
   \   00000080   8362               STD     Z+2, R22
   \   00000082   8373               STD     Z+3, R23
   \   00000084   C006               RJMP    ??USART1_RXC_2
    371          	} else {
    372          		OS_PutMailCond1(&_hart_task0.RxMailBox, (const char *)&UDR1);
   \                     ??USART1_RXC_1:
   \   00000086   EC2E               LDI     R18, LOW(206)
   \   00000088   E030               LDI     R19, (206) >> 8
   \   0000008A   ....               LDI     R16, LOW((_hart_task0 + 564))
   \   0000008C   ....               LDI     R17, HIGH((_hart_task0 + 564))
   \   0000008E   ........           CALL    OS_PutMailCond1
    373          	}
    374          
    375          	LEAVE_IRQ;
   \                     ??USART1_RXC_2:
   \   00000092   ....               RJMP    ??Subroutine1_0
   \   00000094                      REQUIRE _A_UDR1
    376          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine1_0:
   \   00000000   94F8               CLI
   \   00000002   ........           CALL    OS__LeaveIntStack
   \   00000006   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000A   950A               DEC     R16
   \   0000000C   9300....           STS     (OS_Counters + 1), R16
   \   00000010   9100....           LDS     R16, OS_Counters
   \   00000014   950A               DEC     R16
   \   00000016   9300....           STS     OS_Counters, R16
   \   0000001A   BF9B               OUT     0x3B, R25
   \   0000001C   BF8F               OUT     0x3F, R24
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   9139               LD      R19, Y+
   \   00000026   9149               LD      R20, Y+
   \   00000028   9159               LD      R21, Y+
   \   0000002A   9169               LD      R22, Y+
   \   0000002C   9179               LD      R23, Y+
   \   0000002E   9009               LD      R0, Y+
   \   00000030   9019               LD      R1, Y+
   \   00000032   9029               LD      R2, Y+
   \   00000034   9039               LD      R3, Y+
   \   00000036   91E9               LD      R30, Y+
   \   00000038   91F9               LD      R31, Y+
   \   0000003A   9189               LD      R24, Y+
   \   0000003C   9199               LD      R25, Y+
   \   0000003E   9518               RETI
    377          
    378          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    379          __interrupt void USART1_TXC(void) {
   \                     USART1_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    380          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??USART1_TXC_0
   \   00000046   9478               SEI
    381          
    382          	hart_irq_finish_tx(&_hart_task0);
   \                     ??USART1_TXC_0:
   \   00000048   ....               LDI     R16, LOW(_hart_task0)
   \   0000004A   ....               LDI     R17, (_hart_task0) >> 8
   \   0000004C   ....               RJMP    ?Subroutine0
    383          
    384          	LEAVE_IRQ;
    385          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ....               RCALL   hart_irq_finish_tx
   \   00000002                      REQUIRE ??Subroutine1_0
   \   00000002                      ;               // Fall through to label ??Subroutine1_0
    386          
    387          #pragma vector=USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    388          __interrupt void USART1_UDRE(void) {
   \                     USART1_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    389          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??USART1_UDRE_0
   \   00000046   9478               SEI
    390          
    391          	hart_irq_tx_next(&_hart_task0);
   \                     ??USART1_UDRE_0:
   \   00000048   ....               LDI     R16, LOW(_hart_task0)
   \   0000004A   ....               LDI     R17, (_hart_task0) >> 8
   \   0000004C   ....               RCALL   hart_irq_tx_next
    392          
    393          	LEAVE_IRQ;
   \   0000004E   ....               RJMP    ??Subroutine1_0
    394          }
    395          
    396          ////////////////////////////////////////////////////////////////////////////////
    397          //
    398          // HART1 USART2 IRQ handler
    399          //
    400          ////////////////////////////////////////////////////////////////////////////////
    401          #pragma vector=USART2_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    402          __interrupt void USART2_RXC(void) {
   \                     USART2_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    403          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??USART2_RXC_0
   \   00000046   9478               SEI
    404          	if (_hart_task1.rx_Listen[_hart_task1.rx_Channel]) {
   \                     ??USART2_RXC_0:
   \   00000048   9100....           LDS     R16, (_hart_task0 + 2838)
   \   0000004C   E0F0               LDI     R31, 0
   \   0000004E   2FE0               MOV     R30, R16
   \   00000050   ....               SUBI    R30, LOW((-(_hart_task0 + 2839) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(_hart_task0 + 2839) & 0xFFFF))
   \   00000054   8100               LD      R16, Z
   \   00000056   2300               TST     R16
   \   00000058   F0B1               BREQ    ??USART2_RXC_1
    405          		 char Dummy = UDR2;
   \   0000005A   9100....           LDS     R16, _A_UDR2
    406          		_hart_task1.rx_Time[_hart_task1.rx_Channel] = OS_Time;
   \   0000005E   9100....           LDS     R16, (_hart_task0 + 2838)
   \   00000062   9140....           LDS     R20, OS_Time
   \   00000066   9150....           LDS     R21, (OS_Time + 1)
   \   0000006A   9160....           LDS     R22, (OS_Time + 2)
   \   0000006E   9170....           LDS     R23, (OS_Time + 3)
   \   00000072   E014               LDI     R17, 4
   \   00000074   9F01               MUL     R16, R17
   \   00000076   01F0               MOVW    R31:R30, R1:R0
   \   00000078   ....               SUBI    R30, LOW((-(_hart_task0 + 2843) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, HIGH((-(_hart_task0 + 2843) & 0xFFFF))
   \   0000007C   8340               ST      Z, R20
   \   0000007E   8351               STD     Z+1, R21
   \   00000080   8362               STD     Z+2, R22
   \   00000082   8373               STD     Z+3, R23
   \   00000084   C006               RJMP    ??USART2_RXC_2
    407          	} else {
    408          		OS_PutMailCond1(&_hart_task1.RxMailBox, (const char *)&UDR2);
   \                     ??USART2_RXC_1:
   \   00000086   ED26               LDI     R18, LOW(214)
   \   00000088   E030               LDI     R19, (214) >> 8
   \   0000008A   ....               LDI     R16, LOW((_hart_task0 + 2027))
   \   0000008C   ....               LDI     R17, HIGH((_hart_task0 + 2027))
   \   0000008E   ........           CALL    OS_PutMailCond1
    409          	}
    410          	LEAVE_IRQ;
   \                     ??USART2_RXC_2:
   \   00000092   ....               RJMP    ??Subroutine1_0
   \   00000094                      REQUIRE _A_UDR2
    411          }
    412          
    413          #pragma vector=USART2_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    414          __interrupt void USART2_TXC(void) {
   \                     USART2_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    415          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??USART2_TXC_0
   \   00000046   9478               SEI
    416          
    417          	hart_irq_finish_tx(&_hart_task1);
   \                     ??USART2_TXC_0:
   \   00000048   ....               LDI     R16, LOW((_hart_task0 + 1463))
   \   0000004A   ....               LDI     R17, HIGH((_hart_task0 + 1463))
   \   0000004C   ....               RJMP    ?Subroutine0
    418          
    419          	LEAVE_IRQ;
    420          }
    421          
    422          #pragma vector=USART2_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    423          __interrupt void USART2_UDRE(void) {
   \                     USART2_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    424          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??USART2_UDRE_0
   \   00000046   9478               SEI
    425          
    426          	hart_irq_tx_next(&_hart_task1);
   \                     ??USART2_UDRE_0:
   \   00000048   ....               LDI     R16, LOW((_hart_task0 + 1463))
   \   0000004A   ....               LDI     R17, HIGH((_hart_task0 + 1463))
   \   0000004C   ....               RCALL   hart_irq_tx_next
    427          
    428          	LEAVE_IRQ;
   \   0000004E   ....               RJMP    ??Subroutine1_0
    429          }
    430          
    431          ////////////////////////////////////////////////////////////////////////////////
    432          //
    433          // HART1 USART3 IRQ handler
    434          //
    435          ////////////////////////////////////////////////////////////////////////////////
    436          #pragma vector=USART3_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    437          __interrupt void USART3_RXC(void) {
   \                     USART3_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    438          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??USART3_RXC_0
   \   00000046   9478               SEI
    439          
    440          	if (_hart_task2.rx_Listen[_hart_task2.rx_Channel]) {
   \                     ??USART3_RXC_0:
   \   00000048   9100....           LDS     R16, (_hart_task0 + 4301)
   \   0000004C   E0F0               LDI     R31, 0
   \   0000004E   2FE0               MOV     R30, R16
   \   00000050   ....               SUBI    R30, LOW((-(_hart_task0 + 4302) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(_hart_task0 + 4302) & 0xFFFF))
   \   00000054   8100               LD      R16, Z
   \   00000056   2300               TST     R16
   \   00000058   F0B1               BREQ    ??USART3_RXC_1
    441          		 char Dummy = UDR3;
   \   0000005A   9100....           LDS     R16, _A_UDR3
    442          		_hart_task2.rx_Time[_hart_task2.rx_Channel] = OS_Time;
   \   0000005E   9100....           LDS     R16, (_hart_task0 + 4301)
   \   00000062   9140....           LDS     R20, OS_Time
   \   00000066   9150....           LDS     R21, (OS_Time + 1)
   \   0000006A   9160....           LDS     R22, (OS_Time + 2)
   \   0000006E   9170....           LDS     R23, (OS_Time + 3)
   \   00000072   E014               LDI     R17, 4
   \   00000074   9F01               MUL     R16, R17
   \   00000076   01F0               MOVW    R31:R30, R1:R0
   \   00000078   ....               SUBI    R30, LOW((-(_hart_task0 + 4306) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, HIGH((-(_hart_task0 + 4306) & 0xFFFF))
   \   0000007C   8340               ST      Z, R20
   \   0000007E   8351               STD     Z+1, R21
   \   00000080   8362               STD     Z+2, R22
   \   00000082   8373               STD     Z+3, R23
   \   00000084   C006               RJMP    ??USART3_RXC_2
    443          	} else {
    444          		OS_PutMailCond1(&_hart_task2.RxMailBox, (const char *)&UDR3);
   \                     ??USART3_RXC_1:
   \   00000086   E326               LDI     R18, LOW(310)
   \   00000088   E031               LDI     R19, (310) >> 8
   \   0000008A   ....               LDI     R16, LOW((_hart_task0 + 3490))
   \   0000008C   ....               LDI     R17, HIGH((_hart_task0 + 3490))
   \   0000008E   ........           CALL    OS_PutMailCond1
    445          	}
    446          	LEAVE_IRQ;
   \                     ??USART3_RXC_2:
   \   00000092   ....               RJMP    ??Subroutine1_0
   \   00000094                      REQUIRE _A_UDR3
    447          }
    448          
    449          #pragma vector=USART3_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    450          __interrupt void USART3_TXC(void) {
   \                     USART3_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    451          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??USART3_TXC_0
   \   00000046   9478               SEI
    452          
    453          	hart_irq_finish_tx(&_hart_task2);
   \                     ??USART3_TXC_0:
   \   00000048   ....               LDI     R16, LOW((_hart_task0 + 2926))
   \   0000004A   ....               LDI     R17, HIGH((_hart_task0 + 2926))
   \   0000004C   ....               RJMP    ?Subroutine0
    454          
    455          	LEAVE_IRQ;
    456          }
    457          
    458          #pragma vector=USART3_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    459          __interrupt void USART3_UDRE(void) {
   \                     USART3_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    460          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??USART3_UDRE_0
   \   00000046   9478               SEI
    461          
    462          	hart_irq_tx_next(&_hart_task2);
   \                     ??USART3_UDRE_0:
   \   00000048   ....               LDI     R16, LOW((_hart_task0 + 2926))
   \   0000004A   ....               LDI     R17, HIGH((_hart_task0 + 2926))
   \   0000004C   ....               RCALL   hart_irq_tx_next
    463          
    464          	LEAVE_IRQ;
   \   0000004E   ....               RJMP    ??Subroutine1_0
    465          }
    466          
    467          ////////////////////////////////////////////////////////////////////////////////
    468          //
    469          // UART Utilities
    470          //
    471          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    472          static void
    473          hart_config_uart(HartTaskStruct *task) {
   \                     hart_config_uart:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    474          	uint16_t    baud = 1200;
    475          	uint16_t    baud_setting = (XTAL_CPU / 4 / baud - 1) / 2;
    476          
    477          	switch (task->modem_no) {
   \   00000000   5A0C               SUBI    R16, 172
   \   00000002   4F1D               SBCI    R17, 253
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8100               LD      R16, Z
   \   00000008   2300               TST     R16
   \   0000000A   F029               BREQ    ??hart_config_uart_0
   \   0000000C   950A               DEC     R16
   \   0000000E   F099               BREQ    ??hart_config_uart_1
   \   00000010   950A               DEC     R16
   \   00000012   F109               BREQ    ??hart_config_uart_2
   \   00000014   9508               RET
    478          	case hart_modem_0:
    479          		// try U2X mode first
    480          		UCSR1A      = _BV(U2X1);
   \                     ??hart_config_uart_0:
   \   00000016   E002               LDI     R16, 2
   \   00000018   9300....           STS     _A_UCSR1A, R16
    481          		if (((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095)) {
    482          			UCSR1A      = 0;
    483          			baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
    484          		}
    485          
    486          		UBRR1H      = baud_setting >> 8;
   \   0000001C   E006               LDI     R16, 6
   \   0000001E   930000CD           STS     205, R16
    487          		UBRR1L      = baud_setting;
   \   00000022   E802               LDI     R16, 130
   \   00000024   9300....           STS     _A_UBRR1, R16
    488          
    489          		UCSR1C      = _BV(UCSZ10) | _BV(UCSZ11) | USART1_ODD_PARITY | USART1_1_STOP_BIT;
   \   00000028   E306               LDI     R16, 54
   \   0000002A   9300....           STS     _A_UCSR1C, R16
    490          		UCSR1B      = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);
   \   0000002E   E908               LDI     R16, 152
   \   00000030   9300....           STS     _A_UCSR1B, R16
    491          		break;
   \   00000034   9508               RET
    492          
    493          	case hart_modem_1:
    494          		UCSR2A      = _BV(U2X2);
   \                     ??hart_config_uart_1:
   \   00000036   E002               LDI     R16, 2
   \   00000038   9300....           STS     _A_UCSR2A, R16
    495          		if (((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095)) {
    496          			UCSR2A      = 0;
    497          			baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
    498          		}
    499          
    500          		UBRR2H      = baud_setting >> 8;
   \   0000003C   E006               LDI     R16, 6
   \   0000003E   930000D5           STS     213, R16
    501          		UBRR2L      = baud_setting;
   \   00000042   E802               LDI     R16, 130
   \   00000044   9300....           STS     _A_UBRR2, R16
    502          
    503          		UCSR2C      = _BV(UCSZ20) | _BV(UCSZ21) | USART2_ODD_PARITY | USART2_1_STOP_BIT;
   \   00000048   E306               LDI     R16, 54
   \   0000004A   9300....           STS     _A_UCSR2C, R16
    504          		UCSR2B      = _BV(RXEN2) | _BV(TXEN2) | _BV(RXCIE2);
   \   0000004E   E908               LDI     R16, 152
   \   00000050   9300....           STS     _A_UCSR2B, R16
    505          		break;
   \   00000054   9508               RET
    506          
    507          	case hart_modem_2:
    508          		UCSR3A      = _BV(U2X3);
   \                     ??hart_config_uart_2:
   \   00000056   E002               LDI     R16, 2
   \   00000058   9300....           STS     _A_UCSR3A, R16
    509          		if (((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095)) {
    510          			UCSR3A      = 0;
    511          			baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
    512          		}
    513          
    514          		UBRR3H      = baud_setting >> 8;
   \   0000005C   E006               LDI     R16, 6
   \   0000005E   93000135           STS     309, R16
    515          		UBRR3L      = baud_setting;
   \   00000062   E802               LDI     R16, 130
   \   00000064   9300....           STS     _A_UBRR3, R16
    516          
    517          		UCSR3C      = _BV(UCSZ30) | _BV(UCSZ31) | USART3_ODD_PARITY | USART3_1_STOP_BIT;
   \   00000068   E306               LDI     R16, 54
   \   0000006A   9300....           STS     _A_UCSR3C, R16
    518          		UCSR3B      = _BV(RXEN3) | _BV(TXEN3) | _BV(RXCIE3);
   \   0000006E   E908               LDI     R16, 152
   \   00000070   9300....           STS     _A_UCSR3B, R16
    519          		break;
    520          	}
    521          }
   \   00000074   9508               RET
   \   00000076                      REQUIRE _A_UCSR1A
   \   00000076                      REQUIRE _A_UBRR1
   \   00000076                      REQUIRE _A_UCSR1C
   \   00000076                      REQUIRE _A_UCSR1B
   \   00000076                      REQUIRE _A_UCSR2A
   \   00000076                      REQUIRE _A_UBRR2
   \   00000076                      REQUIRE _A_UCSR2C
   \   00000076                      REQUIRE _A_UCSR2B
   \   00000076                      REQUIRE _A_UCSR3A
   \   00000076                      REQUIRE _A_UBRR3
   \   00000076                      REQUIRE _A_UCSR3C
   \   00000076                      REQUIRE _A_UCSR3B
    522          
    523          static void
    524          hart_reset_tx(HartTaskStruct *task) {
    525          	task->tx_buf_ndx  = 0;
    526          	task->tx_len      = 0;
    527          
    528          	hart_msg_encoder_reset(&task->hart_encoder);
    529          }
    530          
    531          static void
    532          hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl) {
    533          	task->rx_buf_ndx   	 = 0;
    534          	task->rx_len       	 = 0;
    535          	//task->rx_Time    	   = 0;
    536          	//task->rx_Listen[0]   = false;
    537          	//task->rx_Listen[1]   = false;
    538          	//task->rx_Listen[2]   = false;
    539          	//task->rx_Listen[3]   = false;
    540          	hart_msg_parser_reset(&task->hart_parser);
    541          }
    542          

   \                                 In  segment CODE, align 2, keep-with-next
    543          static void
    544          hart_start_transaction(HartTaskStruct *task) {
   \                     hart_start_transaction:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    545          	if (task->tx_len == 0) {
   \   00000000   5A0C               SUBI    R16, 172
   \   00000002   4F1D               SBCI    R17, 253
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8125               LDD     R18, Z+5
   \   00000008   8136               LDD     R19, Z+6
   \   0000000A   2B23               OR      R18, R19
   \   0000000C   F0E1               BREQ    ??hart_start_transaction_0
    546          		// XXX fucked up. there is a bug
    547          		return;
    548          	}
    549          
    550          	// just to make sure
    551          	task->tx_buf_ndx    = 0;
   \   0000000E   E020               LDI     R18, 0
   \   00000010   8323               STD     Z+3, R18
   \   00000012   8324               STD     Z+4, R18
    552          
    553          	switch (task->modem_no) {
   \   00000014   8100               LD      R16, Z
   \   00000016   2300               TST     R16
   \   00000018   F029               BREQ    ??hart_start_transaction_1
   \   0000001A   950A               DEC     R16
   \   0000001C   F049               BREQ    ??hart_start_transaction_2
   \   0000001E   950A               DEC     R16
   \   00000020   F069               BREQ    ??hart_start_transaction_3
   \   00000022   9508               RET
    554          	case hart_modem_0:
    555          		UCSR1B |= _BV(UDRIE1);
   \                     ??hart_start_transaction_1:
   \   00000024   910000C9           LDS     R16, 201
   \   00000028   6200               ORI     R16, 0x20
   \   0000002A   930000C9           STS     201, R16
    556          		break;
   \   0000002E   9508               RET
    557          
    558          	case hart_modem_1:
    559          		UCSR2B |= _BV(UDRIE2);
   \                     ??hart_start_transaction_2:
   \   00000030   910000D1           LDS     R16, 209
   \   00000034   6200               ORI     R16, 0x20
   \   00000036   930000D1           STS     209, R16
    560          		break;
   \   0000003A   9508               RET
    561          
    562          	case hart_modem_2:
    563          		UCSR3B |= _BV(UDRIE3);
   \                     ??hart_start_transaction_3:
   \   0000003C   91000131           LDS     R16, 305
   \   00000040   6200               ORI     R16, 0x20
   \   00000042   93000131           STS     305, R16
    564          		break;
    565          	}
    566          }
   \                     ??hart_start_transaction_0:
   \   00000046   9508               RET
   \   00000048                      REQUIRE _A_UCSR1B
   \   00000048                      REQUIRE _A_UCSR2B
   \   00000048                      REQUIRE _A_UCSR3B
    567          
    568          ////////////////////////////////////////////////////////////////////////////////
    569          //
    570          // demo transaction
    571          //
    572          // IT IS YOUR JOB TO OVERRIDE THESE CALLBACKS
    573          //
    574          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    575          static void
    576          demo1_hart_make_request(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     demo1_hart_make_request:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   01C8               MOVW    R25:R24, R17:R16
    577          	uint8_t   addr[5] = { 0x80, 0x00, 0x00, 0x00, 0x00 };
   \   00000008   018E               MOVW    R17:R16, R29:R28
   \   0000000A   ....               LDI     R30, LOW(`?<Constant {128, 0, 0, 0, 0}>`)
   \   0000000C   ....               LDI     R31, HIGH(`?<Constant {128, 0, 0, 0, 0}>`)
   \   0000000E   ....               LDI     R19, (`?<Constant {128, 0, 0, 0, 0}>`) >> 16
   \   00000010   E045               LDI     R20, 5
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    578          	uint8_t   cmd = 0x03;                                      // no idea what to use
    579          
    580          	hart_msg_encoder_preamble(&task->hart_encoder, 5);        // we use preamble 5 for tx
   \   00000018   5587               SUBI    R24, 87
   \   0000001A   4F9A               SBCI    R25, 250
   \   0000001C   E025               LDI     R18, 5
   \   0000001E   018C               MOVW    R17:R16, R25:R24
   \   00000020   ........           CALL    hart_msg_encoder_preamble
    581          	hart_msg_encoder_long_start(&task->hart_encoder,
    582          								0x82,                                                 // master to slave request is always 82
    583          								addr,                                                 // slave address
    584          								cmd);                                                 // command to send
   \   00000024   E033               LDI     R19, 3
   \   00000026   01AE               MOVW    R21:R20, R29:R28
   \   00000028   E822               LDI     R18, 130
   \   0000002A   018C               MOVW    R17:R16, R25:R24
   \   0000002C   ........           CALL    hart_msg_encoder_long_start
    585          																					  //
    586          	// request has no status bytes
    587          	//
    588          
    589          	hart_msg_encoder_data(&task->hart_encoder,
    590          						  NULL,                                                 // command data in request
    591          						  0);                                                   // no data. thus data length 0
   \   00000030   E040               LDI     R20, 0
   \   00000032   E020               LDI     R18, 0
   \   00000034   E030               LDI     R19, 0
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   ........           CALL    hart_msg_encoder_data
    592          
    593          	hart_msg_encoder_calc_csum(&task->hart_encoder);          // finally calculate checksum
   \   0000003C   018C               MOVW    R17:R16, R25:R24
   \   0000003E   ........           CALL    hart_msg_encoder_calc_csum
    594          }
   \   00000042   9625               ADIW    R29:R28, 5
   \   00000044   9189               LD      R24, Y+
   \   00000046   9199               LD      R25, Y+
   \   00000048   9508               RET
    595          

   \                                 In  segment CODE, align 2, keep-with-next
    596          static void
    597          demo1_hart_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type) {
   \                     demo1_hart_handle_rx_error:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    598          	switch (err_type) {
   \   00000000   5033               SUBI    R19, 3
   \   00000002   F490               BRCC    ??demo1_hart_handle_rx_error_0
    599          	case HartCommErr_RX_Error:
    600          		// XXX
    601          		// do whatevern necessary here
    602          		TData.Hart.FailCnt[current_chnl][0]++;
    603          		TData.Hart.FailCnt[current_chnl][1]++;
    604          		break;
    605          
    606          	case HartCommErr_RX_Timeout:
    607          		// XXX
    608          		// do whatever necessary here
    609          		TData.Hart.FailCnt[current_chnl][0]++;
    610          		TData.Hart.FailCnt[current_chnl][1]++;
    611          		break;
    612          
    613          	case HartCommErr_RX_Checksum:
    614          		// XXX
    615          		// do whatever necessary here
    616          		TData.Hart.FailCnt[current_chnl][0]++;
   \   00000004   E004               LDI     R16, 4
   \   00000006   9F20               MUL     R18, R16
   \   00000008   ....               LDI     R30, LOW(TData)
   \   0000000A   ....               LDI     R31, (TData) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
    617          		TData.Hart.FailCnt[current_chnl][1]++;
   \   0000001C   8102               LDD     R16, Z+2
   \   0000001E   8113               LDD     R17, Z+3
   \   00000020   5F0F               SUBI    R16, 255
   \   00000022   4F1F               SBCI    R17, 255
   \   00000024   8302               STD     Z+2, R16
   \   00000026   8313               STD     Z+3, R17
    618          		break;
    619          	}
    620          }
   \                     ??demo1_hart_handle_rx_error_0:
   \   00000028   9508               RET
    621          
    622          

   \                                 In  segment CODE, align 2, keep-with-next
    623          float ConvertBigEndianToLittleEndian(char *Ptr) {
   \                     ConvertBigEndianToLittleEndian:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000000   9724               SBIW    R29:R28, 4
    624          	const char FloatBuf[4] = { Ptr[3], Ptr[2], Ptr[1], Ptr[0] };
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8123               LDD     R18, Z+3
   \   00000006   8328               ST      Y, R18
   \   00000008   8122               LDD     R18, Z+2
   \   0000000A   8329               STD     Y+1, R18
   \   0000000C   8121               LDD     R18, Z+1
   \   0000000E   832A               STD     Y+2, R18
   \   00000010   8100               LD      R16, Z
   \   00000012   830B               STD     Y+3, R16
    625          	const float *FloatNum  = (float *)FloatBuf;
    626          	return *FloatNum;
   \   00000014   8108               LD      R16, Y
   \   00000016   8119               LDD     R17, Y+1
   \   00000018   812A               LDD     R18, Y+2
   \   0000001A   813B               LDD     R19, Y+3
   \   0000001C   9624               ADIW    R29:R28, 4
   \   0000001E   9508               RET
    627          }
    628          

   \                                 In  segment CODE, align 2, keep-with-next
    629          uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     ReceiveReply:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92DA               ST      -Y, R13
   \   00000006   92CA               ST      -Y, R12
   \   00000008   92BA               ST      -Y, R11
   \   0000000A   92AA               ST      -Y, R10
   \   0000000C   929A               ST      -Y, R9
   \   0000000E   928A               ST      -Y, R8
   \   00000010   927A               ST      -Y, R7
   \   00000012   926A               ST      -Y, R6
   \   00000014   925A               ST      -Y, R5
   \   00000016   924A               ST      -Y, R4
   \   00000018   93BA               ST      -Y, R27
   \   0000001A   93AA               ST      -Y, R26
   \   0000001C   939A               ST      -Y, R25
   \   0000001E   938A               ST      -Y, R24
   \   00000020                      REQUIRE ?Register_R4_is_cg_reg
   \   00000020                      REQUIRE ?Register_R5_is_cg_reg
   \   00000020                      REQUIRE ?Register_R6_is_cg_reg
   \   00000020                      REQUIRE ?Register_R7_is_cg_reg
   \   00000020                      REQUIRE ?Register_R8_is_cg_reg
   \   00000020                      REQUIRE ?Register_R9_is_cg_reg
   \   00000020                      REQUIRE ?Register_R10_is_cg_reg
   \   00000020                      REQUIRE ?Register_R11_is_cg_reg
   \   00000020                      REQUIRE ?Register_R12_is_cg_reg
   \   00000020                      REQUIRE ?Register_R13_is_cg_reg
   \   00000020                      REQUIRE ?Register_R14_is_cg_reg
   \   00000020                      REQUIRE ?Register_R15_is_cg_reg
   \   00000020                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000020   9725               SBIW    R29:R28, 5
   \   00000022   832A               STD     Y+2, R18
   \   00000024   0148               MOVW    R9:R8, R17:R16
    630          	char RxTimeOut   = false;
    631          	char RxStatus    = HART_EVENT_NONE;
   \   00000026   2444               CLR     R4
    632          	char *BufPtr     = (char *)task->rx_buf;
   \   00000028   0178               MOVW    R15:R14, R17:R16
   \   0000002A   ED0F               LDI     R16, 223
   \   0000002C   0EE0               ADD     R14, R16
   \   0000002E   E003               LDI     R16, 3
   \   00000030   1EF0               ADC     R15, R16
    633          	int  SyncCnt     = 0;
   \   00000032   E0A0               LDI     R26, 0
   \   00000034   E0B0               LDI     R27, 0
    634          	char RxByte;
    635                  int TimeOut = 200;
   \   00000036   EC88               LDI     R24, 200
   \   00000038   E090               LDI     R25, 0
   \   0000003A   0134               MOVW    R7:R6, R9:R8
   \   0000003C   E304               LDI     R16, 52
   \   0000003E   0E60               ADD     R6, R16
   \   00000040   E002               LDI     R16, 2
   \   00000042   1E70               ADC     R7, R16
    636          	do {
    637          		RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_0:
   \   00000044   01AC               MOVW    R21:R20, R25:R24
   \   00000046   019E               MOVW    R19:R18, R29:R28
   \   00000048   0183               MOVW    R17:R16, R7:R6
   \   0000004A   ........           CALL    OS_GetMailTimed
   \   0000004E   2F10               MOV     R17, R16
    638          		if (RxByte == 0xff) {
   \   00000050   8108               LD      R16, Y
   \   00000052   3F0F               CPI     R16, 255
   \   00000054   F411               BRNE    ??ReceiveReply_1
    639          			SyncCnt++;
   \   00000056   9611               ADIW    R27:R26, 1
    640                                  TimeOut = 25;
   \   00000058   E189               LDI     R24, 25
    641          		}
    642          	}while (!RxTimeOut && (RxByte == 0xff));
   \                     ??ReceiveReply_1:
   \   0000005A   2311               TST     R17
   \   0000005C   F009               BREQ    $+2+2
   \   0000005E   C094               RJMP    ??ReceiveReply_2
   \   00000060   3F0F               CPI     R16, 255
   \   00000062   F381               BREQ    ??ReceiveReply_0
   \   00000064   9714               SBIW    R27:R26, 4
   \   00000066   F40C               BRGE    $+2+2
   \   00000068   C08F               RJMP    ??ReceiveReply_2
    643          
    644          	if (!RxTimeOut && SyncCnt >= 4) {
    645          		*BufPtr = RxByte;
   \   0000006A   01F7               MOVW    R31:R30, R15:R14
   \   0000006C   9301               ST      Z+, R16
   \   0000006E   015F               MOVW    R11:R10, R31:R30
    646          		BufPtr++;
    647          		char MasterNum   = RxByte;
    648          		switch (MasterNum) {
   \   00000070   8108               LD      R16, Y
   \   00000072   3806               CPI     R16, 134
   \   00000074   F009               BREQ    $+2+2
   \   00000076   C08A               RJMP    ??ReceiveReply_3
    649          		case HART_MSG_START_FROM_MASTER_TO_SLAVE:
    650          			break;
    651          		case HART_MSG_START_FROM_SLAVE_TO_MASTER:
    652          			break;
    653          		case HART_MSG_START_FROM_SLAVE_TO_MASTER_LONG:
    654          			{
    655          				HARTLongMessage *Msg = (HARTLongMessage *)BufPtr;
   \   00000078   83EB               STD     Y+3, R30
   \   0000007A   83FC               STD     Y+4, R31
    656          				int  hRxCnt = 0;
   \   0000007C   E0A0               LDI     R26, 0
   \   0000007E   E0B0               LDI     R27, 0
   \   00000080   012F               MOVW    R5:R4, R31:R30
   \   00000082   E008               LDI     R16, 8
   \   00000084   2EC0               MOV     R12, R16
    657          				do {
    658          					char RxByte;
    659          					RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_4:
   \   00000086   01AC               MOVW    R21:R20, R25:R24
   \   00000088   019E               MOVW    R19:R18, R29:R28
   \   0000008A   5F2F               SUBI    R18, 255
   \   0000008C   4F3F               SBCI    R19, 255
   \   0000008E   0183               MOVW    R17:R16, R7:R6
   \   00000090   ........           CALL    OS_GetMailTimed
   \   00000094   2F10               MOV     R17, R16
    660          					BufPtr[hRxCnt++] = RxByte;
   \   00000096   8109               LDD     R16, Y+1
   \   00000098   01F2               MOVW    R31:R30, R5:R4
   \   0000009A   9301               ST      Z+, R16
   \   0000009C   012F               MOVW    R5:R4, R31:R30
   \   0000009E   9611               ADIW    R27:R26, 1
    661          				}while (!RxTimeOut && hRxCnt < sizeof(HARTLongMessage));
   \   000000A0   94CA               DEC     R12
   \   000000A2   2311               TST     R17
   \   000000A4   F009               BREQ    $+2+2
   \   000000A6   C062               RJMP    ??ReceiveReply_5
   \   000000A8   20CC               TST     R12
   \   000000AA   F769               BRNE    ??ReceiveReply_4
    662          				if (RxTimeOut) {
    663          					RxStatus	 = HART_EVENT_TIMEOUT;
    664          				} else {
    665          					int  mRxCnt = 0;
   \   000000AC   2444               CLR     R4
   \   000000AE   2455               CLR     R5
    666          					BufPtr += sizeof(HARTLongMessage);
   \   000000B0   E008               LDI     R16, 8
   \   000000B2   0EA0               ADD     R10, R16
   \   000000B4   1EB9               ADC     R11, R25
   \   000000B6   0165               MOVW    R13:R12, R11:R10
    667          					do {
    668          						char RxByte;
    669          						RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_6:
   \   000000B8   01AC               MOVW    R21:R20, R25:R24
   \   000000BA   019E               MOVW    R19:R18, R29:R28
   \   000000BC   5F2F               SUBI    R18, 255
   \   000000BE   4F3F               SBCI    R19, 255
   \   000000C0   0183               MOVW    R17:R16, R7:R6
   \   000000C2   ........           CALL    OS_GetMailTimed
   \   000000C6   2F10               MOV     R17, R16
    670          						BufPtr[mRxCnt++] = RxByte;
   \   000000C8   8109               LDD     R16, Y+1
   \   000000CA   01F6               MOVW    R31:R30, R13:R12
   \   000000CC   9301               ST      Z+, R16
   \   000000CE   016F               MOVW    R13:R12, R31:R30
   \   000000D0   E001               LDI     R16, 1
   \   000000D2   0E40               ADD     R4, R16
   \   000000D4   1E59               ADC     R5, R25
    671          					}while (!RxTimeOut && (mRxCnt < Msg->MsessageSize) && (mRxCnt < HART_MAX_DATA_LENGTH));
   \   000000D6   2311               TST     R17
   \   000000D8   F009               BREQ    $+2+2
   \   000000DA   C048               RJMP    ??ReceiveReply_5
   \   000000DC   81EB               LDD     R30, Y+3
   \   000000DE   81FC               LDD     R31, Y+4
   \   000000E0   8106               LDD     R16, Z+6
   \   000000E2   1640               CP      R4, R16
   \   000000E4   0659               CPC     R5, R25
   \   000000E6   F424               BRGE    ??ReceiveReply_7
   \   000000E8   EF0D               LDI     R16, 253
   \   000000EA   1640               CP      R4, R16
   \   000000EC   0659               CPC     R5, R25
   \   000000EE   F324               BRLT    ??ReceiveReply_6
    672          					if (RxTimeOut) {
    673          						RxStatus	 = HART_EVENT_TIMEOUT;
    674          					} else {
    675          						uint8_t pcsum = task->rx_buf[hRxCnt + mRxCnt];
   \                     ??ReceiveReply_7:
   \   000000F0   0DA4               ADD     R26, R4
   \   000000F2   1DB5               ADC     R27, R5
   \   000000F4   019D               MOVW    R19:R18, R27:R26
   \   000000F6   0E82               ADD     R8, R18
   \   000000F8   1E93               ADC     R9, R19
   \   000000FA   ED0F               LDI     R16, 223
   \   000000FC   0E80               ADD     R8, R16
   \   000000FE   E003               LDI     R16, 3
   \   00000100   1E90               ADC     R9, R16
   \   00000102   01F4               MOVW    R31:R30, R9:R8
   \   00000104   81A0               LD      R26, Z
    676          						uint8_t csum = hart_msg_calc_csum((const uint8_t *)task->rx_buf, hRxCnt + mRxCnt);
    677          						if (csum == pcsum) {
   \   00000106   0187               MOVW    R17:R16, R15:R14
   \   00000108   ........           CALL    hart_msg_calc_csum
   \   0000010C   170A               CP      R16, R26
   \   0000010E   F581               BRNE    ??ReceiveReply_8
    678          							TData.Hart.HartCurrent[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[1]);
   \   00000110   810A               LDD     R16, Y+2
   \   00000112   E014               LDI     R17, 4
   \   00000114   9F01               MUL     R16, R17
   \   00000116   ....               LDI     R20, LOW(TData)
   \   00000118   ....               LDI     R21, (TData) >> 8
   \   0000011A   0D40               ADD     R20, R0
   \   0000011C   1D51               ADC     R21, R1
   \   0000011E   01BA               MOVW    R23:R22, R21:R20
   \   00000120   5362               SUBI    R22, 50
   \   00000122   4F7F               SBCI    R23, 255
   \   00000124   0185               MOVW    R17:R16, R11:R10
   \   00000126   5F0F               SUBI    R16, 255
   \   00000128   4F1F               SBCI    R17, 255
   \   0000012A   ....               RCALL   ConvertBigEndianToLittleEndian
   \   0000012C   01FB               MOVW    R31:R30, R23:R22
   \   0000012E   8300               ST      Z, R16
   \   00000130   8311               STD     Z+1, R17
   \   00000132   8322               STD     Z+2, R18
   \   00000134   8333               STD     Z+3, R19
    679          							// Ignore UnitId and other data. char UnitId     = BufPtr[5+Offset];
    680          							// Only keep Distance and level
    681          							TData.Hart.Distance[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[6 + 0]);
   \   00000136   0185               MOVW    R17:R16, R11:R10
   \   00000138   5F0A               SUBI    R16, 250
   \   0000013A   4F1F               SBCI    R17, 255
   \   0000013C   ....               RCALL   ConvertBigEndianToLittleEndian
   \   0000013E   01FB               MOVW    R31:R30, R23:R22
   \   00000140   AB00               STD     Z+48, R16
   \   00000142   AB11               STD     Z+49, R17
   \   00000144   AB22               STD     Z+50, R18
   \   00000146   AB33               STD     Z+51, R19
    682          							TData.Hart.Level[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[6 + 5]);
   \   00000148   E00B               LDI     R16, 11
   \   0000014A   0D0A               ADD     R16, R10
   \   0000014C   1EB9               ADC     R11, R25
   \   0000014E   2D1B               MOV     R17, R11
   \   00000150   ....               RCALL   ConvertBigEndianToLittleEndian
   \   00000152   01FA               MOVW    R31:R30, R21:R20
   \   00000154   5DE2               SUBI    R30, 210
   \   00000156   4FFE               SBCI    R31, 254
   \   00000158   8300               ST      Z, R16
   \   0000015A   8311               STD     Z+1, R17
   \   0000015C   8322               STD     Z+2, R18
   \   0000015E   8333               STD     Z+3, R19
    683          							TData.Hart.FailCnt[current_chnl][0] = 0;
   \   00000160   01FA               MOVW    R31:R30, R21:R20
   \   00000162   8390               ST      Z, R25
   \   00000164   8391               STD     Z+1, R25
    684          							RxStatus 						 		= HART_EVENT_RX_COMPLETE;
   \   00000166   2444               CLR     R4
   \   00000168   9443               INC     R4
   \   0000016A   C004               RJMP    ??ReceiveReply_9
    685          						} else {
   \                     ??ReceiveReply_5:
   \   0000016C   E008               LDI     R16, 8
   \   0000016E   C00D               RJMP    ??ReceiveReply_10
    686          							RxStatus 						 		= HART_EVENT_CHECKSUM_ERROR;
   \                     ??ReceiveReply_8:
   \   00000170   E100               LDI     R16, 16
   \   00000172   2E40               MOV     R4, R16
    687          						}
    688                                                          int Cnt=0;
    689                                                          do {
    690                                                                  char RxByte;
    691                                                                  RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
    692                                                                  Cnt++;
    693                                                          }while (!RxTimeOut );
   \                     ??ReceiveReply_9:
   \   00000174   01AC               MOVW    R21:R20, R25:R24
   \   00000176   019E               MOVW    R19:R18, R29:R28
   \   00000178   5F2F               SUBI    R18, 255
   \   0000017A   4F3F               SBCI    R19, 255
   \   0000017C   0183               MOVW    R17:R16, R7:R6
   \   0000017E   ........           CALL    OS_GetMailTimed
   \   00000182   2300               TST     R16
   \   00000184   F419               BRNE    ??ReceiveReply_3
   \   00000186   CFF6               RJMP    ??ReceiveReply_9
    694                                                          
    695          					}
    696          				}
    697          			}
    698          			break;
    699          		}
    700          	} else {
    701          		RxStatus = HART_EVENT_RX_ERROR;
   \                     ??ReceiveReply_2:
   \   00000188   E002               LDI     R16, 2
   \                     ??ReceiveReply_10:
   \   0000018A   2E40               MOV     R4, R16
    702          	}
    703          	return RxStatus;
   \                     ??ReceiveReply_3:
   \   0000018C   2D04               MOV     R16, R4
   \   0000018E   9625               ADIW    R29:R28, 5
   \   00000190   9189               LD      R24, Y+
   \   00000192   9199               LD      R25, Y+
   \   00000194   91A9               LD      R26, Y+
   \   00000196   91B9               LD      R27, Y+
   \   00000198   9049               LD      R4, Y+
   \   0000019A   9059               LD      R5, Y+
   \   0000019C   9069               LD      R6, Y+
   \   0000019E   9079               LD      R7, Y+
   \   000001A0   9089               LD      R8, Y+
   \   000001A2   9099               LD      R9, Y+
   \   000001A4   90A9               LD      R10, Y+
   \   000001A6   90B9               LD      R11, Y+
   \   000001A8   90C9               LD      R12, Y+
   \   000001AA   90D9               LD      R13, Y+
   \   000001AC   90E9               LD      R14, Y+
   \   000001AE   90F9               LD      R15, Y+
   \   000001B0   9508               RET
    704          }
    705          ////////////////////////////////////////////////////////////////////////////////
    706          //
    707          // core hart work
    708          //
    709          ////////////////////////////////////////////////////////////////////////////////
    710          

   \                                 In  segment CODE, align 2, keep-with-next
    711          void do_hart_transaction(HartTaskStruct *task, hart_channel_t current_chnl, HartTransaction *t) {
   \                     do_hart_transaction:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92CA               ST      -Y, R12
   \   00000006   92BA               ST      -Y, R11
   \   00000008   92AA               ST      -Y, R10
   \   0000000A   929A               ST      -Y, R9
   \   0000000C   928A               ST      -Y, R8
   \   0000000E   927A               ST      -Y, R7
   \   00000010   926A               ST      -Y, R6
   \   00000012   925A               ST      -Y, R5
   \   00000014   924A               ST      -Y, R4
   \   00000016   93BA               ST      -Y, R27
   \   00000018   93AA               ST      -Y, R26
   \   0000001A   939A               ST      -Y, R25
   \   0000001C   938A               ST      -Y, R24
   \   0000001E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R14_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R15_is_cg_reg
   \   0000001E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000001E   9724               SBIW    R29:R28, 4
   \   00000020   01D8               MOVW    R27:R26, R17:R16
   \   00000022   2EC2               MOV     R12, R18
   \   00000024   015A               MOVW    R11:R10, R21:R20
    712          	long t1 = OS_Time;
   \   00000026   9100....           LDS     R16, OS_Time
   \   0000002A   9110....           LDS     R17, (OS_Time + 1)
   \   0000002E   9120....           LDS     R18, (OS_Time + 2)
   \   00000032   9130....           LDS     R19, (OS_Time + 3)
   \   00000036   8308               ST      Y, R16
   \   00000038   8319               STD     Y+1, R17
   \   0000003A   832A               STD     Y+2, R18
   \   0000003C   833B               STD     Y+3, R19
    713          
    714          	HartChannel *chnl = &_hart_channels[current_chnl];
   \   0000003E   E10B               LDI     R16, 27
   \   00000040   9EC0               MUL     R12, R16
   \   00000042   ....               LDI     R16, LOW(_hart_channels)
   \   00000044   2E40               MOV     R4, R16
   \   00000046   ....               LDI     R16, (_hart_channels) >> 8
   \   00000048   0C40               ADD     R4, R0
   \   0000004A   1D01               ADC     R16, R1
   \   0000004C   2E50               MOV     R5, R16
    715          
    716          	const hart_channel_t ModemChannel = (hart_channel_t)current_chnl - task->start_chnl;
   \   0000004E   014D               MOVW    R9:R8, R27:R26
   \   00000050   E504               LDI     R16, 84
   \   00000052   0E80               ADD     R8, R16
   \   00000054   E002               LDI     R16, 2
   \   00000056   1E90               ADC     R9, R16
   \   00000058   01F4               MOVW    R31:R30, R9:R8
   \   0000005A   8101               LDD     R16, Z+1
   \   0000005C   2CEC               MOV     R14, R12
   \   0000005E   1AE0               SUB     R14, R16
    717          
    718          	hart_channel_inc_stat(chnl, HartChannelStatItem_TOTAL_REQS);
   \   00000060   E023               LDI     R18, 3
   \   00000062   0182               MOVW    R17:R16, R5:R4
   \   00000064   ....               RCALL   hart_channel_inc_stat
    719          
    720          	t->error_occurred   = 1;
   \   00000066   01F5               MOVW    R31:R30, R11:R10
   \   00000068   E001               LDI     R16, 1
   \   0000006A   8300               ST      Z, R16
    721          
    722          	hart_reset_rx(task, current_chnl);
   \   0000006C   01FD               MOVW    R31:R30, R27:R26
   \   0000006E   52E5               SUBI    R30, 37
   \   00000070   4FFC               SBCI    R31, 252
   \   00000072   E000               LDI     R16, 0
   \   00000074   8300               ST      Z, R16
   \   00000076   8301               STD     Z+1, R16
   \   00000078   8302               STD     Z+2, R16
   \   0000007A   8303               STD     Z+3, R16
   \   0000007C   018D               MOVW    R17:R16, R27:R26
   \   0000007E   580C               SUBI    R16, 140
   \   00000080   4F1A               SBCI    R17, 250
   \   00000082   ........           CALL    hart_msg_parser_reset
    723          	hart_reset_tx(task);
   \   00000086   01F4               MOVW    R31:R30, R9:R8
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8303               STD     Z+3, R16
   \   0000008C   8304               STD     Z+4, R16
   \   0000008E   8305               STD     Z+5, R16
   \   00000090   8306               STD     Z+6, R16
   \   00000092   018D               MOVW    R17:R16, R27:R26
   \   00000094   5507               SUBI    R16, 87
   \   00000096   4F1A               SBCI    R17, 250
   \   00000098   ........           CALL    hart_msg_encoder_reset
    724          	//uint8_t tmp1= PORTC;
    725          	hart_gpio_channel_select(current_chnl);
   \   0000009C   2D0C               MOV     R16, R12
   \   0000009E   ........           CALL    hart_gpio_channel_select
    726          	OS_Delay(10);
   \   000000A2   E00A               LDI     R16, 10
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   ........           CALL    OS_Delay
    727          
    728          	//uint8_t tmp3= PORTC;
    729          	// Don't change channel before other channel is selected
    730          	task->rx_Channel= ModemChannel;
   \   000000AA   01FD               MOVW    R31:R30, R27:R26
   \   000000AC   5AE1               SUBI    R30, 161
   \   000000AE   4FFA               SBCI    R31, 250
   \   000000B0   82E0               ST      Z, R14
    731          	long LastRxTime = 0;
    732          	if (task->rx_Time[ModemChannel]) {
   \   000000B2   E004               LDI     R16, 4
   \   000000B4   9EE0               MUL     R14, R16
   \   000000B6   013D               MOVW    R7:R6, R27:R26
   \   000000B8   0C60               ADD     R6, R0
   \   000000BA   1C71               ADC     R7, R1
   \   000000BC   E604               LDI     R16, 100
   \   000000BE   0E60               ADD     R6, R16
   \   000000C0   E005               LDI     R16, 5
   \   000000C2   1E70               ADC     R7, R16
   \   000000C4   01F3               MOVW    R31:R30, R7:R6
   \   000000C6   8100               LD      R16, Z
   \   000000C8   8111               LDD     R17, Z+1
   \   000000CA   8122               LDD     R18, Z+2
   \   000000CC   8133               LDD     R19, Z+3
   \   000000CE   2B01               OR      R16, R17
   \   000000D0   2B02               OR      R16, R18
   \   000000D2   2B03               OR      R16, R19
   \   000000D4   F0E9               BREQ    ??do_hart_transaction_0
    733          		LastRxTime = OS_Time - task->rx_Time[ModemChannel];
   \   000000D6   9100....           LDS     R16, OS_Time
   \   000000DA   9110....           LDS     R17, (OS_Time + 1)
   \   000000DE   9120....           LDS     R18, (OS_Time + 2)
   \   000000E2   9130....           LDS     R19, (OS_Time + 3)
   \   000000E6   8140               LD      R20, Z
   \   000000E8   8151               LDD     R21, Z+1
   \   000000EA   8162               LDD     R22, Z+2
   \   000000EC   8173               LDD     R23, Z+3
   \   000000EE   1B04               SUB     R16, R20
   \   000000F0   0B15               SBC     R17, R21
   \   000000F2   0B26               SBC     R18, R22
   \   000000F4   0B37               SBC     R19, R23
   \   000000F6   2F40               MOV     R20, R16
    734          	}
    735          
    736          	char NoOtherRx = LastRxTime > 30000L;
   \   000000F8   3301               CPI     R16, 49
   \   000000FA   E705               LDI     R16, 117
   \   000000FC   0710               CPC     R17, R16
   \   000000FE   E000               LDI     R16, 0
   \   00000100   0720               CPC     R18, R16
   \   00000102   0730               CPC     R19, R16
   \   00000104   F42C               BRGE    ??do_hart_transaction_0
    737                 // NoOtherRx = 1;
    738          	if (!LastRxTime || NoOtherRx) {
   \   00000106   2B41               OR      R20, R17
   \   00000108   2B42               OR      R20, R18
   \   0000010A   2B43               OR      R20, R19
   \   0000010C   F009               BREQ    $+2+2
   \   0000010E   C13D               RJMP    ??do_hart_transaction_1
    739          
    740          		t->make_request(task, current_chnl);
   \                     ??do_hart_transaction_0:
   \   00000110   2D2C               MOV     R18, R12
   \   00000112   018D               MOVW    R17:R16, R27:R26
   \   00000114   01F5               MOVW    R31:R30, R11:R10
   \   00000116   8141               LDD     R20, Z+1
   \   00000118   81F2               LDD     R31, Z+2
   \   0000011A   2FE4               MOV     R30, R20
   \   0000011C   9509               ICALL
    741          		//
    742          		// now set the tx length of tx_buf
    743          		//
    744          		task->tx_len = task->hart_encoder.tx_ndx;
   \   0000011E   01FD               MOVW    R31:R30, R27:R26
   \   00000120   55E3               SUBI    R30, 83
   \   00000122   4FFA               SBCI    R31, 250
   \   00000124   8100               LD      R16, Z
   \   00000126   8111               LDD     R17, Z+1
   \   00000128   01F4               MOVW    R31:R30, R9:R8
   \   0000012A   8305               STD     Z+5, R16
   \   0000012C   8316               STD     Z+6, R17
    745          		hart_gpio_hart_carrier_on(task->modem_no);
   \   0000012E   8100               LD      R16, Z
   \   00000130   ........           CALL    hart_gpio_hart_carrier_on
    746          		OS_Delay(5);
   \   00000134   E005               LDI     R16, 5
   \   00000136   E010               LDI     R17, 0
   \   00000138   ........           CALL    OS_Delay
    747          		// Be sure we have no unhandled signals before start
    748          		OS_ClearEvents(&task->tcb);
   \   0000013C   018D               MOVW    R17:R16, R27:R26
   \   0000013E   5C01               SUBI    R16, 193
   \   00000140   4F1D               SBCI    R17, 253
   \   00000142   ........           CALL    OS_ClearEvents
    749          		//OS_ClearMB(&task->RxMailBox);
    750          		hart_start_transaction(task);
   \   00000146   018D               MOVW    R17:R16, R27:R26
   \   00000148   ....               RCALL   hart_start_transaction
    751          		// Task will halt if no signal!
    752          		// Changed code to avoid halt EHS
    753          		char TxFlag = OS_WaitEventTimed(HART_EVENT_TX_COMPLETE, 2000);
    754          		if (TxFlag) {
   \   0000014A   ED20               LDI     R18, 208
   \   0000014C   E037               LDI     R19, 7
   \   0000014E   E004               LDI     R16, 4
   \   00000150   ........           CALL    OS_WaitEventTimed
   \   00000154   2300               TST     R16
   \   00000156   F409               BRNE    $+2+2
   \   00000158   C13D               RJMP    ??do_hart_transaction_2
    755          			int StartT = OS_Time;
   \   0000015A   9100....           LDS     R16, OS_Time
   \   0000015E   9110....           LDS     R17, (OS_Time + 1)
   \   00000162   9120....           LDS     R18, (OS_Time + 2)
   \   00000166   9130....           LDS     R19, (OS_Time + 3)
    756          			hart_gpio_hart_carrier_off(task->modem_no);
   \   0000016A   01F4               MOVW    R31:R30, R9:R8
   \   0000016C   8100               LD      R16, Z
   \   0000016E   ........           CALL    hart_gpio_hart_carrier_off
    757          			task->rx_Listen[ModemChannel] = false;
   \   00000172   24FF               CLR     R15
   \   00000174   01CD               MOVW    R25:R24, R27:R26
   \   00000176   0D8E               ADD     R24, R14
   \   00000178   1D9F               ADC     R25, R15
   \   0000017A   5A80               SUBI    R24, 160
   \   0000017C   4F9A               SBCI    R25, 250
   \   0000017E   01FC               MOVW    R31:R30, R25:R24
   \   00000180   82F0               ST      Z, R15
    758          
    759          			hart_control_Rx_Enable(task->modem_no, TRUE, FALSE);
   \   00000182   01F4               MOVW    R31:R30, R9:R8
   \   00000184   8100               LD      R16, Z
   \   00000186   2300               TST     R16
   \   00000188   F081               BREQ    ??do_hart_transaction_3
   \   0000018A   950A               DEC     R16
   \   0000018C   F041               BREQ    ??do_hart_transaction_4
   \   0000018E   950A               DEC     R16
   \   00000190   F489               BRNE    ??do_hart_transaction_5
   \   00000192   91000131           LDS     R16, 305
   \   00000196   6100               ORI     R16, 0x10
   \   00000198   93000131           STS     305, R16
   \   0000019C   C00B               RJMP    ??do_hart_transaction_5
   \                     ??do_hart_transaction_4:
   \   0000019E   910000D1           LDS     R16, 209
   \   000001A2   6100               ORI     R16, 0x10
   \   000001A4   930000D1           STS     209, R16
   \   000001A8   C005               RJMP    ??do_hart_transaction_5
   \                     ??do_hart_transaction_3:
   \   000001AA   910000C9           LDS     R16, 201
   \   000001AE   6100               ORI     R16, 0x10
   \   000001B0   930000C9           STS     201, R16
    760          			uint8_t event_status = t->complete(task, current_chnl);
   \                     ??do_hart_transaction_5:
   \   000001B4   2D2C               MOV     R18, R12
   \   000001B6   018D               MOVW    R17:R16, R27:R26
   \   000001B8   01F5               MOVW    R31:R30, R11:R10
   \   000001BA   8143               LDD     R20, Z+3
   \   000001BC   81F4               LDD     R31, Z+4
   \   000001BE   2FE4               MOV     R30, R20
   \   000001C0   9509               ICALL
   \   000001C2   2F10               MOV     R17, R16
    761          			task->rx_Time[ModemChannel] = 0;
   \   000001C4   01F3               MOVW    R31:R30, R7:R6
   \   000001C6   82F0               ST      Z, R15
   \   000001C8   82F1               STD     Z+1, R15
   \   000001CA   82F2               STD     Z+2, R15
   \   000001CC   82F3               STD     Z+3, R15
    762          			task->rx_Listen[ModemChannel] = true;
   \   000001CE   01FC               MOVW    R31:R30, R25:R24
   \   000001D0   E001               LDI     R16, 1
   \   000001D2   8300               ST      Z, R16
    763          			switch (event_status) {
   \   000001D4   951A               DEC     R17
   \   000001D6   F409               BRNE    $+2+2
   \   000001D8   C064               RJMP    ??do_hart_transaction_6
   \   000001DA   951A               DEC     R17
   \   000001DC   F149               BREQ    ??do_hart_transaction_7
   \   000001DE   5016               SUBI    R17, 6
   \   000001E0   F021               BREQ    ??do_hart_transaction_8
   \   000001E2   5018               SUBI    R17, 8
   \   000001E4   F409               BRNE    $+2+2
   \   000001E6   C092               RJMP    ??do_hart_transaction_9
   \   000001E8   C0F5               RJMP    ??do_hart_transaction_2
    764          			case HART_EVENT_TIMEOUT: // Timeout
    765          				hart_channel_inc_stat(chnl, HartChannelStatItem_RX_TIMEOUT);
   \                     ??do_hart_transaction_8:
   \   000001EA   E022               LDI     R18, 2
   \   000001EC   0182               MOVW    R17:R16, R5:R4
   \   000001EE   ....               RCALL   hart_channel_inc_stat
    766          				hart_channel_set_status(chnl, HartChannelStatus_No_Response);
   \   000001F0   01F2               MOVW    R31:R30, R5:R4
   \   000001F2   8100               LD      R16, Z
   \   000001F4   300C               CPI     R16, 12
   \   000001F6   F4A8               BRCC    ??do_hart_transaction_10
   \   000001F8   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_0`) >> 16
   \   000001FA   BFFB               OUT     0x3B, R31
   \   000001FC   E0F2               LDI     R31, 2
   \   000001FE   9F0F               MUL     R16, R31
   \   00000200   01F0               MOVW    R31:R30, R1:R0
   \   00000202   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_0`) & 0xFFFF))
   \   00000204   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_0`) & 0xFFFF) >> 8
   \   00000206   9007               ELPM    R0, Z+
   \   00000208   9016               ELPM    R1, Z
   \   0000020A   01F0               MOVW    R31:R30, R1:R0
   \   0000020C   9409               IJMP
   \                     ??do_hart_transaction_11:
   \   0000020E   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   00000210   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   00000212   C005               RJMP    ??do_hart_transaction_12
   \                     ??do_hart_transaction_13:
   \   00000214   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000216   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000218   C002               RJMP    ??do_hart_transaction_12
   \                     ??do_hart_transaction_14:
   \   0000021A   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   0000021C   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??do_hart_transaction_12:
   \   0000021E   ........           CALL    OS_Use
   \                     ??do_hart_transaction_10:
   \   00000222   01F2               MOVW    R31:R30, R5:R4
   \   00000224   E001               LDI     R16, 1
   \   00000226   8301               STD     Z+1, R16
   \   00000228   0182               MOVW    R17:R16, R5:R4
   \   0000022A   ....               RCALL   hart_channel_unlock
    767          
    768          				t->error(task, current_chnl, HartCommErr_RX_Timeout);
   \   0000022C   E031               LDI     R19, 1
   \   0000022E   C0A5               RJMP    ??do_hart_transaction_15
    769          				break;
    770          			case HART_EVENT_RX_ERROR:
    771          				// protocol parsing error
    772          				hart_channel_inc_stat(chnl, HartChannelStatItem_RX_INVALID);
   \                     ??do_hart_transaction_7:
   \   00000230   E020               LDI     R18, 0
   \   00000232   0182               MOVW    R17:R16, R5:R4
   \   00000234   ....               RCALL   hart_channel_inc_stat
    773          				hart_channel_set_status(chnl, HartChannelStatus_Invalid_Response);
   \   00000236   01F2               MOVW    R31:R30, R5:R4
   \   00000238   8100               LD      R16, Z
   \   0000023A   300C               CPI     R16, 12
   \   0000023C   F4A8               BRCC    ??do_hart_transaction_16
   \   0000023E   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_1`) >> 16
   \   00000240   BFFB               OUT     0x3B, R31
   \   00000242   E0F2               LDI     R31, 2
   \   00000244   9F0F               MUL     R16, R31
   \   00000246   01F0               MOVW    R31:R30, R1:R0
   \   00000248   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_1`) & 0xFFFF))
   \   0000024A   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_1`) & 0xFFFF) >> 8
   \   0000024C   9007               ELPM    R0, Z+
   \   0000024E   9016               ELPM    R1, Z
   \   00000250   01F0               MOVW    R31:R30, R1:R0
   \   00000252   9409               IJMP
   \                     ??do_hart_transaction_17:
   \   00000254   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   00000256   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   00000258   C005               RJMP    ??do_hart_transaction_18
   \                     ??do_hart_transaction_19:
   \   0000025A   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   0000025C   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   0000025E   C002               RJMP    ??do_hart_transaction_18
   \                     ??do_hart_transaction_20:
   \   00000260   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   00000262   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??do_hart_transaction_18:
   \   00000264   ........           CALL    OS_Use
   \                     ??do_hart_transaction_16:
   \   00000268   01F2               MOVW    R31:R30, R5:R4
   \   0000026A   E002               LDI     R16, 2
   \   0000026C   8301               STD     Z+1, R16
   \   0000026E   8100               LD      R16, Z
   \   00000270   300C               CPI     R16, 12
   \   00000272   F4A8               BRCC    ??do_hart_transaction_21
   \   00000274   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_2`) >> 16
   \   00000276   BFFB               OUT     0x3B, R31
   \   00000278   E0F2               LDI     R31, 2
   \   0000027A   9F0F               MUL     R16, R31
   \   0000027C   01F0               MOVW    R31:R30, R1:R0
   \   0000027E   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_2`) & 0xFFFF))
   \   00000280   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_2`) & 0xFFFF) >> 8
   \   00000282   9007               ELPM    R0, Z+
   \   00000284   9016               ELPM    R1, Z
   \   00000286   01F0               MOVW    R31:R30, R1:R0
   \   00000288   9409               IJMP
   \                     ??do_hart_transaction_22:
   \   0000028A   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   0000028C   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   0000028E   C005               RJMP    ??do_hart_transaction_23
   \                     ??do_hart_transaction_24:
   \   00000290   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000292   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000294   C002               RJMP    ??do_hart_transaction_23
   \                     ??do_hart_transaction_25:
   \   00000296   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   00000298   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??do_hart_transaction_23:
   \   0000029A   ........           CALL    OS_Unuse
    774          
    775          				t->error(task, current_chnl, HartCommErr_RX_Error);
   \                     ??do_hart_transaction_21:
   \   0000029E   E030               LDI     R19, 0
   \   000002A0   C06C               RJMP    ??do_hart_transaction_15
    776          				break;
    777          			case HART_EVENT_RX_COMPLETE:
    778          				hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_6:
   \   000002A2   01F2               MOVW    R31:R30, R5:R4
   \   000002A4   8100               LD      R16, Z
   \   000002A6   300C               CPI     R16, 12
   \   000002A8   F4A8               BRCC    ??do_hart_transaction_26
   \   000002AA   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_3`) >> 16
   \   000002AC   BFFB               OUT     0x3B, R31
   \   000002AE   E0F2               LDI     R31, 2
   \   000002B0   9F0F               MUL     R16, R31
   \   000002B2   01F0               MOVW    R31:R30, R1:R0
   \   000002B4   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_3`) & 0xFFFF))
   \   000002B6   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_3`) & 0xFFFF) >> 8
   \   000002B8   9007               ELPM    R0, Z+
   \   000002BA   9016               ELPM    R1, Z
   \   000002BC   01F0               MOVW    R31:R30, R1:R0
   \   000002BE   9409               IJMP
   \                     ??do_hart_transaction_27:
   \   000002C0   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   000002C2   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   000002C4   C005               RJMP    ??do_hart_transaction_28
   \                     ??do_hart_transaction_29:
   \   000002C6   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   000002C8   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   000002CA   C002               RJMP    ??do_hart_transaction_28
   \                     ??do_hart_transaction_30:
   \   000002CC   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   000002CE   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??do_hart_transaction_28:
   \   000002D0   ........           CALL    OS_Use
   \                     ??do_hart_transaction_26:
   \   000002D4   01F2               MOVW    R31:R30, R5:R4
   \   000002D6   82F1               STD     Z+1, R15
   \   000002D8   8100               LD      R16, Z
   \   000002DA   300C               CPI     R16, 12
   \   000002DC   F008               BRCS    $+2+2
   \   000002DE   C07A               RJMP    ??do_hart_transaction_2
   \   000002E0   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_4`) >> 16
   \   000002E2   BFFB               OUT     0x3B, R31
   \   000002E4   E0F2               LDI     R31, 2
   \   000002E6   9F0F               MUL     R16, R31
   \   000002E8   01F0               MOVW    R31:R30, R1:R0
   \   000002EA   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_4`) & 0xFFFF))
   \   000002EC   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_4`) & 0xFFFF) >> 8
   \   000002EE   9007               ELPM    R0, Z+
   \   000002F0   9016               ELPM    R1, Z
   \   000002F2   01F0               MOVW    R31:R30, R1:R0
   \   000002F4   9409               IJMP
   \                     ??do_hart_transaction_31:
   \   000002F6   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   000002F8   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   000002FA   C005               RJMP    ??do_hart_transaction_32
   \                     ??do_hart_transaction_33:
   \   000002FC   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   000002FE   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000300   C002               RJMP    ??do_hart_transaction_32
   \                     ??do_hart_transaction_34:
   \   00000302   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   00000304   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??do_hart_transaction_32:
   \   00000306   ........           CALL    OS_Unuse
   \   0000030A   C064               RJMP    ??do_hart_transaction_2
    779          				break;
    780          			case HART_EVENT_CHECKSUM_ERROR:
    781          				hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_9:
   \   0000030C   01F2               MOVW    R31:R30, R5:R4
   \   0000030E   8100               LD      R16, Z
   \   00000310   300C               CPI     R16, 12
   \   00000312   F4A8               BRCC    ??do_hart_transaction_35
   \   00000314   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_5`) >> 16
   \   00000316   BFFB               OUT     0x3B, R31
   \   00000318   E0F2               LDI     R31, 2
   \   0000031A   9F0F               MUL     R16, R31
   \   0000031C   01F0               MOVW    R31:R30, R1:R0
   \   0000031E   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_5`) & 0xFFFF))
   \   00000320   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_5`) & 0xFFFF) >> 8
   \   00000322   9007               ELPM    R0, Z+
   \   00000324   9016               ELPM    R1, Z
   \   00000326   01F0               MOVW    R31:R30, R1:R0
   \   00000328   9409               IJMP
   \                     ??do_hart_transaction_36:
   \   0000032A   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   0000032C   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   0000032E   C005               RJMP    ??do_hart_transaction_37
   \                     ??do_hart_transaction_38:
   \   00000330   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000332   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000334   C002               RJMP    ??do_hart_transaction_37
   \                     ??do_hart_transaction_39:
   \   00000336   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   00000338   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??do_hart_transaction_37:
   \   0000033A   ........           CALL    OS_Use
   \                     ??do_hart_transaction_35:
   \   0000033E   01F2               MOVW    R31:R30, R5:R4
   \   00000340   82F1               STD     Z+1, R15
   \   00000342   8100               LD      R16, Z
   \   00000344   300C               CPI     R16, 12
   \   00000346   F4A8               BRCC    ??do_hart_transaction_40
   \   00000348   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_6`) >> 16
   \   0000034A   BFFB               OUT     0x3B, R31
   \   0000034C   E0F2               LDI     R31, 2
   \   0000034E   9F0F               MUL     R16, R31
   \   00000350   01F0               MOVW    R31:R30, R1:R0
   \   00000352   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_6`) & 0xFFFF))
   \   00000354   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_6`) & 0xFFFF) >> 8
   \   00000356   9007               ELPM    R0, Z+
   \   00000358   9016               ELPM    R1, Z
   \   0000035A   01F0               MOVW    R31:R30, R1:R0
   \   0000035C   9409               IJMP
   \                     ??do_hart_transaction_41:
   \   0000035E   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   00000360   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   00000362   C005               RJMP    ??do_hart_transaction_42
   \                     ??do_hart_transaction_43:
   \   00000364   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000366   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000368   C002               RJMP    ??do_hart_transaction_42
   \                     ??do_hart_transaction_44:
   \   0000036A   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   0000036C   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??do_hart_transaction_42:
   \   0000036E   ........           CALL    OS_Unuse
    782          				hart_channel_inc_stat(chnl, HartChannelStatItem_RX_CSUM);
   \                     ??do_hart_transaction_40:
   \   00000372   E021               LDI     R18, 1
   \   00000374   0182               MOVW    R17:R16, R5:R4
   \   00000376   ....               RCALL   hart_channel_inc_stat
    783          				// checksum mismatch
    784          				t->error(task, current_chnl, HartCommErr_RX_Checksum);
   \   00000378   E032               LDI     R19, 2
   \                     ??do_hart_transaction_15:
   \   0000037A   2D2C               MOV     R18, R12
   \   0000037C   018D               MOVW    R17:R16, R27:R26
   \   0000037E   01F5               MOVW    R31:R30, R11:R10
   \   00000380   8145               LDD     R20, Z+5
   \   00000382   81F6               LDD     R31, Z+6
   \   00000384   2FE4               MOV     R30, R20
   \   00000386   9509               ICALL
    785          				break;
   \   00000388   C025               RJMP    ??do_hart_transaction_2
    786          			}
    787          		}
    788          	} else if (!NoOtherRx) {
    789          		OS_Delay(2);
   \                     ??do_hart_transaction_1:
   \   0000038A   E002               LDI     R16, 2
   \   0000038C   E010               LDI     R17, 0
   \   0000038E   ........           CALL    OS_Delay
    790          		task->rx_Listen[ModemChannel] = true;
   \   00000392   24FF               CLR     R15
   \   00000394   01FD               MOVW    R31:R30, R27:R26
   \   00000396   0DEE               ADD     R30, R14
   \   00000398   1DFF               ADC     R31, R15
   \   0000039A   5AE0               SUBI    R30, 160
   \   0000039C   4FFA               SBCI    R31, 250
   \   0000039E   E001               LDI     R16, 1
   \   000003A0   8300               ST      Z, R16
    791          		hart_control_Rx_Enable(task->modem_no, TRUE, FALSE);
   \   000003A2   01F4               MOVW    R31:R30, R9:R8
   \   000003A4   8100               LD      R16, Z
   \   000003A6   2300               TST     R16
   \   000003A8   F081               BREQ    ??do_hart_transaction_45
   \   000003AA   950A               DEC     R16
   \   000003AC   F041               BREQ    ??do_hart_transaction_46
   \   000003AE   950A               DEC     R16
   \   000003B0   F489               BRNE    ??do_hart_transaction_2
   \   000003B2   91000131           LDS     R16, 305
   \   000003B6   6100               ORI     R16, 0x10
   \   000003B8   93000131           STS     305, R16
   \   000003BC   C00B               RJMP    ??do_hart_transaction_2
   \                     ??do_hart_transaction_46:
   \   000003BE   910000D1           LDS     R16, 209
   \   000003C2   6100               ORI     R16, 0x10
   \   000003C4   930000D1           STS     209, R16
   \   000003C8   C005               RJMP    ??do_hart_transaction_2
   \                     ??do_hart_transaction_45:
   \   000003CA   910000C9           LDS     R16, 201
   \   000003CE   6100               ORI     R16, 0x10
   \   000003D0   930000C9           STS     201, R16
    792          	}
    793          	OS_DelayUntil(t1 + 750);
   \                     ??do_hart_transaction_2:
   \   000003D4   8108               LD      R16, Y
   \   000003D6   8119               LDD     R17, Y+1
   \   000003D8   5102               SUBI    R16, 18
   \   000003DA   4F1D               SBCI    R17, 253
   \   000003DC   ........           CALL    OS_DelayUntil
    794          	hart_control_Rx_Enable(task->modem_no, FALSE, FALSE);
   \   000003E0   01F4               MOVW    R31:R30, R9:R8
   \   000003E2   8100               LD      R16, Z
   \   000003E4   2300               TST     R16
   \   000003E6   F081               BREQ    ??do_hart_transaction_47
   \   000003E8   950A               DEC     R16
   \   000003EA   F041               BREQ    ??do_hart_transaction_48
   \   000003EC   950A               DEC     R16
   \   000003EE   F489               BRNE    ??do_hart_transaction_49
   \   000003F0   91000131           LDS     R16, 305
   \   000003F4   7E0F               ANDI    R16, 0xEF
   \   000003F6   93000131           STS     305, R16
   \   000003FA   C00B               RJMP    ??do_hart_transaction_49
   \                     ??do_hart_transaction_48:
   \   000003FC   910000D1           LDS     R16, 209
   \   00000400   7E0F               ANDI    R16, 0xEF
   \   00000402   930000D1           STS     209, R16
   \   00000406   C005               RJMP    ??do_hart_transaction_49
   \                     ??do_hart_transaction_47:
   \   00000408   910000C9           LDS     R16, 201
   \   0000040C   7E0F               ANDI    R16, 0xEF
   \   0000040E   930000C9           STS     201, R16
    795          	task->rx_Listen[ModemChannel] = false;
   \                     ??do_hart_transaction_49:
   \   00000412   24FF               CLR     R15
   \   00000414   0DAE               ADD     R26, R14
   \   00000416   1DBF               ADC     R27, R15
   \   00000418   5AA0               SUBI    R26, 160
   \   0000041A   4FBA               SBCI    R27, 250
   \   0000041C   92FC               ST      X, R15
    796          }
   \   0000041E   9624               ADIW    R29:R28, 4
   \   00000420   9189               LD      R24, Y+
   \   00000422   9199               LD      R25, Y+
   \   00000424   91A9               LD      R26, Y+
   \   00000426   91B9               LD      R27, Y+
   \   00000428   9049               LD      R4, Y+
   \   0000042A   9059               LD      R5, Y+
   \   0000042C   9069               LD      R6, Y+
   \   0000042E   9079               LD      R7, Y+
   \   00000430   9089               LD      R8, Y+
   \   00000432   9099               LD      R9, Y+
   \   00000434   90A9               LD      R10, Y+
   \   00000436   90B9               LD      R11, Y+
   \   00000438   90C9               LD      R12, Y+
   \   0000043A   90E9               LD      R14, Y+
   \   0000043C   90F9               LD      R15, Y+
   \   0000043E   9508               RET
   \   00000440                      REQUIRE _A_UCSR1B
   \   00000440                      REQUIRE _A_UCSR2B
   \   00000440                      REQUIRE _A_UCSR3B
    797          
    798          ////////////////////////////////////////////////////////////////////////////////
    799          //
    800          // HART Task
    801          //
    802          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    803          void HART_Task(void) {
   \                     HART_Task:
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R8_is_cg_reg
   \   00000010                      REQUIRE ?Register_R9_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
    804          	OS_TASK *taskPtr = OS_GetpCurrentTask();
    805          	HartTaskStruct *myTask  = container_of(taskPtr, HartTaskStruct, tcb);
   \   00000010   9080....           LDS     R8, OS_pCurrentTask
   \   00000014   9090....           LDS     R9, (OS_pCurrentTask + 1)
   \   00000018   EC01               LDI     R16, 193
   \   0000001A   0E80               ADD     R8, R16
   \   0000001C   EF0D               LDI     R16, 253
   \   0000001E   1E90               ADC     R9, R16
    806          	uint8_t           num_chnls_handled;
    807          	OS_CreateMB(&myTask->RxMailBox, 1, HART_MAX_RX_BUFFER_SIZE, (char *)myTask->mailBuf);
   \   00000020   01B4               MOVW    R23:R22, R9:R8
   \   00000022   546C               SUBI    R22, 76
   \   00000024   4F7F               SBCI    R23, 255
   \   00000026   E840               LDI     R20, 128
   \   00000028   E051               LDI     R21, 1
   \   0000002A   E021               LDI     R18, 1
   \   0000002C   0184               MOVW    R17:R16, R9:R8
   \   0000002E   5C0C               SUBI    R16, 204
   \   00000030   4F1D               SBCI    R17, 253
   \   00000032   ........           CALL    OS_CreateMB
    808          
    809          
    810          	hart_msg_parser_init(&myTask->hart_parser, myTask->rx_buf, HART_MAX_RX_BUFFER_SIZE);
   \   00000036   E840               LDI     R20, 128
   \   00000038   E051               LDI     R21, 1
   \   0000003A   0194               MOVW    R19:R18, R9:R8
   \   0000003C   5221               SUBI    R18, 33
   \   0000003E   4F3C               SBCI    R19, 252
   \   00000040   0184               MOVW    R17:R16, R9:R8
   \   00000042   580C               SUBI    R16, 140
   \   00000044   4F1A               SBCI    R17, 250
   \   00000046   ........           CALL    hart_msg_parser_init
    811          	hart_msg_encoder_init(&myTask->hart_encoder, myTask->tx_buf, HART_MAX_TX_BUFFER_SIZE);
   \   0000004A   E840               LDI     R20, 128
   \   0000004C   E051               LDI     R21, 1
   \   0000004E   0194               MOVW    R19:R18, R9:R8
   \   00000050   5A25               SUBI    R18, 165
   \   00000052   4F3D               SBCI    R19, 253
   \   00000054   0184               MOVW    R17:R16, R9:R8
   \   00000056   5507               SUBI    R16, 87
   \   00000058   4F1A               SBCI    R17, 250
   \   0000005A   ........           CALL    hart_msg_encoder_init
    812          
    813          	hart_config_uart(myTask);
   \   0000005E   0184               MOVW    R17:R16, R9:R8
   \   00000060   ....               RCALL   hart_config_uart
    814          	hart_gpio_hart_carrier_off(myTask->modem_no);
   \   00000062   01D4               MOVW    R27:R26, R9:R8
   \   00000064   5AAC               SUBI    R26, 172
   \   00000066   4FBD               SBCI    R27, 253
   \   00000068   910C               LD      R16, X
   \   0000006A   ........           CALL    hart_gpio_hart_carrier_off
    815          	hart_control_Rx_Enable(myTask->modem_no, FALSE, FALSE);
   \   0000006E   910C               LD      R16, X
   \   00000070   2300               TST     R16
   \   00000072   F081               BREQ    ??HART_Task_0
   \   00000074   950A               DEC     R16
   \   00000076   F041               BREQ    ??HART_Task_1
   \   00000078   950A               DEC     R16
   \   0000007A   F489               BRNE    ??HART_Task_2
   \   0000007C   91000131           LDS     R16, 305
   \   00000080   7E0F               ANDI    R16, 0xEF
   \   00000082   93000131           STS     305, R16
   \   00000086   C00B               RJMP    ??HART_Task_2
   \                     ??HART_Task_1:
   \   00000088   910000D1           LDS     R16, 209
   \   0000008C   7E0F               ANDI    R16, 0xEF
   \   0000008E   930000D1           STS     209, R16
   \   00000092   C005               RJMP    ??HART_Task_2
   \                     ??HART_Task_0:
   \   00000094   910000C9           LDS     R16, 201
   \   00000098   7E0F               ANDI    R16, 0xEF
   \   0000009A   930000C9           STS     201, R16
    816          
    817          	long t0 = OS_GetTime();
   \                     ??HART_Task_2:
   \   0000009E   ........           CALL    OS__Gettime
   \   000000A2   0128               MOVW    R5:R4, R17:R16
   \   000000A4   C02C               RJMP    ??HART_Task_3
    818          	while (1) {
    819          		num_chnls_handled = 0;
    820          
    821          		for (hart_channel_t current_chnl = myTask->start_chnl; current_chnl <= myTask->end_chnl; current_chnl++) {
    822          
    823          			if (hart_channel_ready_to_poll(current_chnl)) {
   \                     ??HART_Task_4:
   \   000000A6   E10B               LDI     R16, 27
   \   000000A8   9F80               MUL     R24, R16
   \   000000AA   ....               LDI     R30, LOW(_hart_channels)
   \   000000AC   ....               LDI     R31, (_hart_channels) >> 8
   \   000000AE   0DE0               ADD     R30, R0
   \   000000B0   1DF1               ADC     R31, R1
   \   000000B2   8102               LDD     R16, Z+2
   \   000000B4   2300               TST     R16
   \   000000B6   F489               BRNE    ??HART_Task_5
   \   000000B8   8103               LDD     R16, Z+3
   \   000000BA   8114               LDD     R17, Z+4
   \   000000BC   8125               LDD     R18, Z+5
   \   000000BE   8136               LDD     R19, Z+6
   \   000000C0   E040               LDI     R20, 0
   \   000000C2   E050               LDI     R21, 0
   \   000000C4   E460               LDI     R22, 64
   \   000000C6   E470               LDI     R23, 64
   \   000000C8   ........           CALL    ?F_CMP_GE_S_L04
   \   000000CC   F430               BRCC    ??HART_Task_5
    824          				num_chnls_handled++;
   \   000000CE   9593               INC     R25
    825          				do_hart_transaction(myTask, current_chnl, &_demo1_transaction);
   \   000000D0   ....               LDI     R20, LOW((_hart_channels + 324))
   \   000000D2   ....               LDI     R21, HIGH((_hart_channels + 324))
   \   000000D4   2F28               MOV     R18, R24
   \   000000D6   0184               MOVW    R17:R16, R9:R8
   \   000000D8   ....               RCALL   do_hart_transaction
    826          			}
    827          		}
   \                     ??HART_Task_5:
   \   000000DA   9583               INC     R24
   \                     ??HART_Task_6:
   \   000000DC   01FD               MOVW    R31:R30, R27:R26
   \   000000DE   8102               LDD     R16, Z+2
   \   000000E0   1708               CP      R16, R24
   \   000000E2   F708               BRCC    ??HART_Task_4
    828          		OS_DelayUntil(t0 += 3000);
   \   000000E4   EB08               LDI     R16, 184
   \   000000E6   0E40               ADD     R4, R16
   \   000000E8   E00B               LDI     R16, 11
   \   000000EA   1E50               ADC     R5, R16
   \   000000EC   0182               MOVW    R17:R16, R5:R4
   \   000000EE   ........           CALL    OS_DelayUntil
    829          
    830          		if (num_chnls_handled == 0) {
   \   000000F2   2399               TST     R25
   \   000000F4   F421               BRNE    ??HART_Task_3
    831          			//
    832          			// if all the task channels are either power down or
    833          			// fault state, then get some sleep
    834          			// much better cooperative bullshit
    835          			//
    836          			OS_Delay(200);
   \   000000F6   EC08               LDI     R16, 200
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   ........           CALL    OS_Delay
    837          		}
   \                     ??HART_Task_3:
   \   000000FE   E090               LDI     R25, 0
   \   00000100   01FD               MOVW    R31:R30, R27:R26
   \   00000102   8181               LDD     R24, Z+1
   \   00000104   CFEB               RJMP    ??HART_Task_6
   \   00000106                      REQUIRE _A_UCSR1B
   \   00000106                      REQUIRE _A_UCSR2B
   \   00000106                      REQUIRE _A_UCSR3B
    838          	}
    839          }
    840          
    841          
    842          ////////////////////////////////////////////////////////////////////////////////
    843          //
    844          // public interfaces
    845          //
    846          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    847          void
    848          hart_start(void) {
   \                     hart_start:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    849          	hart_channel_t   chnl;
    850          
    851          	OS_CREATERSEMA(&_hart_task0.channel_lock);
   \   00000008   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   0000000A   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \   0000000C   ........           CALL    OS_CreateRSema
    852          	OS_CREATERSEMA(&_hart_task1.channel_lock);
   \   00000010   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000012   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000014   ........           CALL    OS_CreateRSema
    853          	OS_CREATERSEMA(&_hart_task2.channel_lock);
   \   00000018   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   0000001A   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   0000001C   ........           CALL    OS_CreateRSema
    854          
    855          	hart_for_each_channel(chnl) {
   \   00000020   E0B0               LDI     R27, 0
   \   00000022   E0AC               LDI     R26, 12
    856          		hart_channel_reset(&_hart_channels[chnl]);
   \                     ??hart_start_0:
   \   00000024   E10B               LDI     R16, 27
   \   00000026   9FB0               MUL     R27, R16
   \   00000028   ....               LDI     R24, LOW(_hart_channels)
   \   0000002A   ....               LDI     R25, (_hart_channels) >> 8
   \   0000002C   0D80               ADD     R24, R0
   \   0000002E   1D91               ADC     R25, R1
   \   00000030   018C               MOVW    R17:R16, R25:R24
   \   00000032   ....               RCALL   hart_channel_reset
    857          		hart_control_power(chnl, HartChannelPowerStatus_ON);
   \   00000034   2F0B               MOV     R16, R27
   \   00000036   ........           CALL    hart_gpio_power_on
   \   0000003A   018C               MOVW    R17:R16, R25:R24
   \   0000003C   ....               RCALL   hart_channel_lock
   \   0000003E   01FC               MOVW    R31:R30, R25:R24
   \   00000040   E000               LDI     R16, 0
   \   00000042   8302               STD     Z+2, R16
   \   00000044   018C               MOVW    R17:R16, R25:R24
   \   00000046   ....               RCALL   hart_channel_unlock
    858          	}
   \   00000048   95B3               INC     R27
   \   0000004A   95AA               DEC     R26
   \   0000004C   F759               BRNE    ??hart_start_0
    859          	hart_gpio_enable_all_mux();
   \   0000004E   ........           CALL    hart_gpio_enable_all_mux
    860          	hart_diag_task_start();
   \   00000052   ........           CALL    hart_diag_task_start
    861          
    862          	//
    863          	// now power on modem one by one.
    864          	// don't care about start up time
    865          	//
    866          	hart_diag_init();
   \   00000056   ........           CALL    hart_diag_init
    867          	OS_Delay(HART_START_UP_POWER_UP_DELAY);
   \   0000005A   ED0C               LDI     R16, 220
   \   0000005C   E015               LDI     R17, 5
   \   0000005E   ........           CALL    OS_Delay
    868          
    869          	OS_CREATETASK(&_hart_task0.tcb, "HART0", HART_Task, HART_TASK_PRIORITY, _hart_task0.stack);
   \   00000062   E002               LDI     R16, 2
   \   00000064   E010               LDI     R17, 0
   \   00000066   931A               ST      -Y, R17
   \   00000068   930A               ST      -Y, R16
   \   0000006A   EB04               LDI     R16, 180
   \   0000006C   931A               ST      -Y, R17
   \   0000006E   930A               ST      -Y, R16
   \   00000070   ....               LDI     R16, LOW(_hart_task0)
   \   00000072   ....               LDI     R17, (_hart_task0) >> 8
   \   00000074   931A               ST      -Y, R17
   \   00000076   930A               ST      -Y, R16
   \   00000078   ....               LDI     R22, LOW(HART_Task/2)
   \   0000007A   ....               LDI     R23, (HART_Task/2) >> 8
   \   0000007C   E748               LDI     R20, 120
   \   0000007E   ....               LDI     R18, LOW(`?<Constant "HART0">`)
   \   00000080   ....               LDI     R19, (`?<Constant "HART0">`) >> 8
   \   00000082   ....               LDI     R16, LOW((_hart_task0 + 575))
   \   00000084   ....               LDI     R17, HIGH((_hart_task0 + 575))
   \   00000086   ........           CALL    OS_CreateTask_S
    870          	OS_CREATETASK(&_hart_task1.tcb, "HART1", HART_Task, HART_TASK_PRIORITY, _hart_task1.stack);
   \   0000008A   E002               LDI     R16, 2
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   931A               ST      -Y, R17
   \   00000090   930A               ST      -Y, R16
   \   00000092   EB04               LDI     R16, 180
   \   00000094   931A               ST      -Y, R17
   \   00000096   930A               ST      -Y, R16
   \   00000098   ....               LDI     R16, LOW((_hart_task0 + 1463))
   \   0000009A   ....               LDI     R17, HIGH((_hart_task0 + 1463))
   \   0000009C   931A               ST      -Y, R17
   \   0000009E   930A               ST      -Y, R16
   \   000000A0   ....               LDI     R22, LOW(HART_Task/2)
   \   000000A2   ....               LDI     R23, (HART_Task/2) >> 8
   \   000000A4   E748               LDI     R20, 120
   \   000000A6   ....               LDI     R18, LOW((`?<Constant "HART0">` + 6))
   \   000000A8   ....               LDI     R19, HIGH((`?<Constant "HART0">` + 6))
   \   000000AA   ....               LDI     R16, LOW((_hart_task0 + 2038))
   \   000000AC   ....               LDI     R17, HIGH((_hart_task0 + 2038))
   \   000000AE   ........           CALL    OS_CreateTask_S
    871          	OS_CREATETASK(&_hart_task2.tcb, "HART2", HART_Task, HART_TASK_PRIORITY, _hart_task2.stack);
   \   000000B2   E002               LDI     R16, 2
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   931A               ST      -Y, R17
   \   000000B8   930A               ST      -Y, R16
   \   000000BA   EB04               LDI     R16, 180
   \   000000BC   931A               ST      -Y, R17
   \   000000BE   930A               ST      -Y, R16
   \   000000C0   ....               LDI     R16, LOW((_hart_task0 + 2926))
   \   000000C2   ....               LDI     R17, HIGH((_hart_task0 + 2926))
   \   000000C4   931A               ST      -Y, R17
   \   000000C6   930A               ST      -Y, R16
   \   000000C8   ....               LDI     R22, LOW(HART_Task/2)
   \   000000CA   ....               LDI     R23, (HART_Task/2) >> 8
   \   000000CC   E748               LDI     R20, 120
   \   000000CE   ....               LDI     R18, LOW((`?<Constant "HART0">` + 12))
   \   000000D0   ....               LDI     R19, HIGH((`?<Constant "HART0">` + 12))
   \   000000D2   ....               LDI     R16, LOW((_hart_task0 + 3501))
   \   000000D4   ....               LDI     R17, HIGH((_hart_task0 + 3501))
   \   000000D6   ........           CALL    OS_CreateTask_S
    872          
    873          
    874          }
   \   000000DA   9189               LD      R24, Y+
   \   000000DC   9199               LD      R25, Y+
   \   000000DE   91A9               LD      R26, Y+
   \   000000E0   91B9               LD      R27, Y+
   \   000000E2   9508               RET
    875          
    876          

   \                                 In  segment CODE, align 2, keep-with-next
    877          HartChannel*
    878          hart_channel_get_with_lock(hart_channel_t chnl_num) {
   \                     hart_channel_get_with_lock:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    879          	HartChannel *chnl = &_hart_channels[chnl_num];
   \   00000004   E11B               LDI     R17, 27
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R26, LOW(_hart_channels)
   \   0000000A   ....               LDI     R27, (_hart_channels) >> 8
   \   0000000C   0DA0               ADD     R26, R0
   \   0000000E   1DB1               ADC     R27, R1
    880          
    881          	hart_channel_lock(chnl);
   \   00000010   910C               LD      R16, X
   \   00000012   300C               CPI     R16, 12
   \   00000014   F4A8               BRCC    ??hart_channel_get_with_lock_0
   \   00000016   ....               LDI     R31, (`?<Jumptable for hart_channel_get_with_lock>_0`) >> 16
   \   00000018   BFFB               OUT     0x3B, R31
   \   0000001A   E0F2               LDI     R31, 2
   \   0000001C   9F0F               MUL     R16, R31
   \   0000001E   01F0               MOVW    R31:R30, R1:R0
   \   00000020   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_channel_get_with_lock>_0`) & 0xFFFF))
   \   00000022   ....               SBCI    R31, (-(`?<Jumptable for hart_channel_get_with_lock>_0`) & 0xFFFF) >> 8
   \   00000024   9007               ELPM    R0, Z+
   \   00000026   9016               ELPM    R1, Z
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   9409               IJMP
   \                     ??hart_channel_get_with_lock_1:
   \   0000002C   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   0000002E   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   00000030   C005               RJMP    ??hart_channel_get_with_lock_2
   \                     ??hart_channel_get_with_lock_3:
   \   00000032   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000034   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \   00000036   C002               RJMP    ??hart_channel_get_with_lock_2
   \                     ??hart_channel_get_with_lock_4:
   \   00000038   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   0000003A   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \                     ??hart_channel_get_with_lock_2:
   \   0000003C   ........           CALL    OS_Use
    882          	return chnl;
   \                     ??hart_channel_get_with_lock_0:
   \   00000040   018D               MOVW    R17:R16, R27:R26
   \   00000042   91A9               LD      R26, Y+
   \   00000044   91B9               LD      R27, Y+
   \   00000046   9508               RET
    883          }
    884          

   \                                 In  segment CODE, align 2, keep-with-next
    885          void
    886          hart_channel_put_with_unlock(HartChannel *chnl) {
   \                     hart_channel_put_with_unlock:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    887          	hart_channel_unlock(chnl);
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8100               LD      R16, Z
   \   00000004   300C               CPI     R16, 12
   \   00000006   F4B0               BRCC    ??hart_channel_put_with_unlock_0
   \   00000008   ....               LDI     R31, (`?<Jumptable for hart_channel_put_with_unlock>_0`) >> 16
   \   0000000A   BFFB               OUT     0x3B, R31
   \   0000000C   E0F2               LDI     R31, 2
   \   0000000E   9F0F               MUL     R16, R31
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_channel_put_with_unlock>_0`) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(`?<Jumptable for hart_channel_put_with_unlock>_0`) & 0xFFFF) >> 8
   \   00000016   9007               ELPM    R0, Z+
   \   00000018   9016               ELPM    R1, Z
   \   0000001A   01F0               MOVW    R31:R30, R1:R0
   \   0000001C   9409               IJMP
   \                     ??hart_channel_put_with_unlock_1:
   \   0000001E   ....               LDI     R16, LOW((_hart_task0 + 4382))
   \   00000020   ....               LDI     R17, HIGH((_hart_task0 + 4382))
   \   00000022   C002               RJMP    ??hart_channel_put_with_unlock_2
   \                     ??hart_channel_put_with_unlock_3:
   \   00000024   ....               LDI     R16, LOW((_hart_task0 + 2919))
   \   00000026   ....               LDI     R17, HIGH((_hart_task0 + 2919))
   \                     ??hart_channel_put_with_unlock_2:
   \   00000028   ........           JMP     OS_Unuse
   \                     ??hart_channel_put_with_unlock_4:
   \   0000002C   ....               LDI     R16, LOW((_hart_task0 + 1456))
   \   0000002E   ....               LDI     R17, HIGH((_hart_task0 + 1456))
   \   00000030   ........           CALL    OS_Unuse
    888          }
   \                     ??hart_channel_put_with_unlock_0:
   \   00000034   9508               RET

   \                                 In  segment INTVEC, offset 0x90, root
   \                     `??USART1_RXC::??INTVEC 144`:
   \   00000090   ........           JMP     USART1_RXC

   \                                 In  segment INTVEC, offset 0x94, root
   \                     `??USART1_UDRE::??INTVEC 148`:
   \   00000094   ........           JMP     USART1_UDRE

   \                                 In  segment INTVEC, offset 0x98, root
   \                     `??USART1_TXC::??INTVEC 152`:
   \   00000098   ........           JMP     USART1_TXC

   \                                 In  segment INTVEC, offset 0xcc, root
   \                     `??USART2_RXC::??INTVEC 204`:
   \   000000CC   ........           JMP     USART2_RXC

   \                                 In  segment INTVEC, offset 0xd0, root
   \                     `??USART2_UDRE::??INTVEC 208`:
   \   000000D0   ........           JMP     USART2_UDRE

   \                                 In  segment INTVEC, offset 0xd4, root
   \                     `??USART2_TXC::??INTVEC 212`:
   \   000000D4   ........           JMP     USART2_TXC

   \                                 In  segment INTVEC, offset 0xd8, root
   \                     `??USART3_RXC::??INTVEC 216`:
   \   000000D8   ........           JMP     USART3_RXC

   \                                 In  segment INTVEC, offset 0xdc, root
   \                     `??USART3_UDRE::??INTVEC 220`:
   \   000000DC   ........           JMP     USART3_UDRE

   \                                 In  segment INTVEC, offset 0xe0, root
   \                     `??USART3_TXC::??INTVEC 224`:
   \   000000E0   ........           JMP     USART3_TXC

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HART0">>`:
   \   00000000   414854520030       DC8 "HART0"
   \                     `?<Initializer for <Constant "HART1">>`:
   \   00000006   414854520031       DC8 "HART1"
   \                     `?<Initializer for <Constant "HART2">>`:
   \   0000000C   414854520032       DC8 "HART2"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_task0>`:
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000012   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000022   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000052   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000062   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000082   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000092   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   000000B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000105   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000115   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000125   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000135   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000145   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000155   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000165   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000175   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000185   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000195   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000205   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000215   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000225   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      
   \   00000234   0000               DC16 0H
   \   00000236   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   0000023F   0000               DC16 0H
   \   00000241   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
   \              000000000000
   \              000000000000
   \              00000300    
   \   00000257   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000267   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000277   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000287   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000297   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000307   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000317   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000327   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000337   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000347   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000357   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000367   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000377   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000387   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000397   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000407   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000417   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000427   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000437   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000447   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000457   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000467   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000477   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000487   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000497   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000507   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000517   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000527   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000537   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000547   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000557   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000567   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000577   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000587   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000597   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for _hart_task1>`:
   \   000005B7   0000               DC16 0
   \   000005B9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000609   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000619   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000629   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000639   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000649   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000659   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000066C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000067C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000068C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000069C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000070C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000071C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000072C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000073C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000074C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000075C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000076C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000077C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000078C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000079C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      
   \   000007EB   0000               DC16 0H
   \   000007ED   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   000007F6   0000               DC16 0H
   \   000007F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 7
   \              000000000000
   \              000000000000
   \              01000704    
   \   0000080E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000081E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000082E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000083E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000084E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000085E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000086E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000087E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000088E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000089E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008AE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008BE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008CE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008DE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008EE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008FE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000090E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000091E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000092E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000093E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000094E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000095E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000096E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000097E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000098E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000099E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009AE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009BE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009CE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009DE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009EE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009FE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A0E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A1E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A2E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A3E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A4E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A5E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A6E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A7E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A8E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A9E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AAE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ABE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ACE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ADE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AEE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AFE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B0E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B1E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B2E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B3E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B4E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B5E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for _hart_task2>`:
   \   00000B6E   0000               DC16 0
   \   00000B70   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B80   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B90   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C00   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C10   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   00000C23   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C33   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C43   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C53   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C63   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C73   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C83   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C93   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CA3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CB3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CC3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CD3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CE3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CF3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D03   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D13   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D23   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D33   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D43   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D53   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D63   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D73   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D83   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D93   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      
   \   00000DA2   0000               DC16 0H
   \   00000DA4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   00000DAD   0000               DC16 0H
   \   00000DAF   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 11
   \              000000000000
   \              000000000000
   \              02000B08    
   \   00000DC5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DD5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DE5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DF5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E05   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E15   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E25   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E35   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E45   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E55   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E65   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E75   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E85   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E95   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EA5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EB5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EC5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ED5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EE5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EF5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F05   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F15   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F25   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F35   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F45   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F55   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F65   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F75   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F85   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F95   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FA5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FB5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FC5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FD5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FE5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FF5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001005   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001015   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001025   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001035   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001045   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001055   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001065   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001075   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001085   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001095   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010A5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001105   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001115   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_channels>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000001
   \              000000000000
   \              00          
   \   00000024   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
   \              000000000000
   \              000000000000
   \              02          
   \   00000037   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000047   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000003
   \              000000000000
   \              00          
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4
   \              000000000000
   \              000000000000
   \              04          
   \   0000006D   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007D   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000005
   \              000000000000
   \              00          
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6
   \              000000000000
   \              000000000000
   \              06          
   \   000000A3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000007
   \              000000000000
   \              00          
   \   000000C6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
   \              000000000000
   \              000000000000
   \              08          
   \   000000D9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000009
   \              000000000000
   \              00          
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10
   \              000000000000
   \              000000000000
   \              0A          
   \   0000010F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000000B
   \              000000000000
   \              00          
   \   00000132   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \                     `?<Initializer for _demo1_transaction>`:
   \   00000144   00                 DC8 0
   \   00000145   ........           DC16 demo1_hart_make_request/2, ReceiveReply/2
   \   00000149   ....               DC16 demo1_hart_handle_rx_error/2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_channel_lock>_0`:
   \   00000000   ....               DW      (??hart_channel_lock_1) /2
   \   00000002   ....               DW      (??hart_channel_lock_1) /2
   \   00000004   ....               DW      (??hart_channel_lock_1) /2
   \   00000006   ....               DW      (??hart_channel_lock_1) /2
   \   00000008   ....               DW      (??hart_channel_lock_3) /2
   \   0000000A   ....               DW      (??hart_channel_lock_3) /2
   \   0000000C   ....               DW      (??hart_channel_lock_3) /2
   \   0000000E   ....               DW      (??hart_channel_lock_3) /2
   \   00000010   ....               DW      (??hart_channel_lock_4) /2
   \   00000012   ....               DW      (??hart_channel_lock_4) /2
   \   00000014   ....               DW      (??hart_channel_lock_4) /2
   \   00000016   ....               DW      (??hart_channel_lock_4) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_channel_unlock>_0`:
   \   00000000   ....               DW      (??hart_channel_unlock_1) /2
   \   00000002   ....               DW      (??hart_channel_unlock_1) /2
   \   00000004   ....               DW      (??hart_channel_unlock_1) /2
   \   00000006   ....               DW      (??hart_channel_unlock_1) /2
   \   00000008   ....               DW      (??hart_channel_unlock_3) /2
   \   0000000A   ....               DW      (??hart_channel_unlock_3) /2
   \   0000000C   ....               DW      (??hart_channel_unlock_3) /2
   \   0000000E   ....               DW      (??hart_channel_unlock_3) /2
   \   00000010   ....               DW      (??hart_channel_unlock_4) /2
   \   00000012   ....               DW      (??hart_channel_unlock_4) /2
   \   00000014   ....               DW      (??hart_channel_unlock_4) /2
   \   00000016   ....               DW      (??hart_channel_unlock_4) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_channel_reset>_0`:
   \   00000000   ....               DW      (??hart_channel_reset_4) /2
   \   00000002   ....               DW      (??hart_channel_reset_4) /2
   \   00000004   ....               DW      (??hart_channel_reset_4) /2
   \   00000006   ....               DW      (??hart_channel_reset_4) /2
   \   00000008   ....               DW      (??hart_channel_reset_3) /2
   \   0000000A   ....               DW      (??hart_channel_reset_3) /2
   \   0000000C   ....               DW      (??hart_channel_reset_3) /2
   \   0000000E   ....               DW      (??hart_channel_reset_3) /2
   \   00000010   ....               DW      (??hart_channel_reset_1) /2
   \   00000012   ....               DW      (??hart_channel_reset_1) /2
   \   00000014   ....               DW      (??hart_channel_reset_1) /2
   \   00000016   ....               DW      (??hart_channel_reset_1) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_channel_reset>_1`:
   \   00000000   ....               DW      (??hart_channel_reset_9) /2
   \   00000002   ....               DW      (??hart_channel_reset_9) /2
   \   00000004   ....               DW      (??hart_channel_reset_9) /2
   \   00000006   ....               DW      (??hart_channel_reset_9) /2
   \   00000008   ....               DW      (??hart_channel_reset_8) /2
   \   0000000A   ....               DW      (??hart_channel_reset_8) /2
   \   0000000C   ....               DW      (??hart_channel_reset_8) /2
   \   0000000E   ....               DW      (??hart_channel_reset_8) /2
   \   00000010   ....               DW      (??hart_channel_reset_6) /2
   \   00000012   ....               DW      (??hart_channel_reset_6) /2
   \   00000014   ....               DW      (??hart_channel_reset_6) /2
   \   00000016   ....               DW      (??hart_channel_reset_6) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_channel_inc_stat>_0`:
   \   00000000   ....               DW      (??hart_channel_inc_stat_4) /2
   \   00000002   ....               DW      (??hart_channel_inc_stat_4) /2
   \   00000004   ....               DW      (??hart_channel_inc_stat_4) /2
   \   00000006   ....               DW      (??hart_channel_inc_stat_4) /2
   \   00000008   ....               DW      (??hart_channel_inc_stat_3) /2
   \   0000000A   ....               DW      (??hart_channel_inc_stat_3) /2
   \   0000000C   ....               DW      (??hart_channel_inc_stat_3) /2
   \   0000000E   ....               DW      (??hart_channel_inc_stat_3) /2
   \   00000010   ....               DW      (??hart_channel_inc_stat_1) /2
   \   00000012   ....               DW      (??hart_channel_inc_stat_1) /2
   \   00000014   ....               DW      (??hart_channel_inc_stat_1) /2
   \   00000016   ....               DW      (??hart_channel_inc_stat_1) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_channel_inc_stat>_1`:
   \   00000000   ....               DW      (??hart_channel_inc_stat_15) /2
   \   00000002   ....               DW      (??hart_channel_inc_stat_15) /2
   \   00000004   ....               DW      (??hart_channel_inc_stat_15) /2
   \   00000006   ....               DW      (??hart_channel_inc_stat_15) /2
   \   00000008   ....               DW      (??hart_channel_inc_stat_14) /2
   \   0000000A   ....               DW      (??hart_channel_inc_stat_14) /2
   \   0000000C   ....               DW      (??hart_channel_inc_stat_14) /2
   \   0000000E   ....               DW      (??hart_channel_inc_stat_14) /2
   \   00000010   ....               DW      (??hart_channel_inc_stat_12) /2
   \   00000012   ....               DW      (??hart_channel_inc_stat_12) /2
   \   00000014   ....               DW      (??hart_channel_inc_stat_12) /2
   \   00000016   ....               DW      (??hart_channel_inc_stat_12) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_0`:
   \   00000000   ....               DW      (??do_hart_transaction_14) /2
   \   00000002   ....               DW      (??do_hart_transaction_14) /2
   \   00000004   ....               DW      (??do_hart_transaction_14) /2
   \   00000006   ....               DW      (??do_hart_transaction_14) /2
   \   00000008   ....               DW      (??do_hart_transaction_13) /2
   \   0000000A   ....               DW      (??do_hart_transaction_13) /2
   \   0000000C   ....               DW      (??do_hart_transaction_13) /2
   \   0000000E   ....               DW      (??do_hart_transaction_13) /2
   \   00000010   ....               DW      (??do_hart_transaction_11) /2
   \   00000012   ....               DW      (??do_hart_transaction_11) /2
   \   00000014   ....               DW      (??do_hart_transaction_11) /2
   \   00000016   ....               DW      (??do_hart_transaction_11) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_1`:
   \   00000000   ....               DW      (??do_hart_transaction_20) /2
   \   00000002   ....               DW      (??do_hart_transaction_20) /2
   \   00000004   ....               DW      (??do_hart_transaction_20) /2
   \   00000006   ....               DW      (??do_hart_transaction_20) /2
   \   00000008   ....               DW      (??do_hart_transaction_19) /2
   \   0000000A   ....               DW      (??do_hart_transaction_19) /2
   \   0000000C   ....               DW      (??do_hart_transaction_19) /2
   \   0000000E   ....               DW      (??do_hart_transaction_19) /2
   \   00000010   ....               DW      (??do_hart_transaction_17) /2
   \   00000012   ....               DW      (??do_hart_transaction_17) /2
   \   00000014   ....               DW      (??do_hart_transaction_17) /2
   \   00000016   ....               DW      (??do_hart_transaction_17) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_2`:
   \   00000000   ....               DW      (??do_hart_transaction_25) /2
   \   00000002   ....               DW      (??do_hart_transaction_25) /2
   \   00000004   ....               DW      (??do_hart_transaction_25) /2
   \   00000006   ....               DW      (??do_hart_transaction_25) /2
   \   00000008   ....               DW      (??do_hart_transaction_24) /2
   \   0000000A   ....               DW      (??do_hart_transaction_24) /2
   \   0000000C   ....               DW      (??do_hart_transaction_24) /2
   \   0000000E   ....               DW      (??do_hart_transaction_24) /2
   \   00000010   ....               DW      (??do_hart_transaction_22) /2
   \   00000012   ....               DW      (??do_hart_transaction_22) /2
   \   00000014   ....               DW      (??do_hart_transaction_22) /2
   \   00000016   ....               DW      (??do_hart_transaction_22) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_3`:
   \   00000000   ....               DW      (??do_hart_transaction_30) /2
   \   00000002   ....               DW      (??do_hart_transaction_30) /2
   \   00000004   ....               DW      (??do_hart_transaction_30) /2
   \   00000006   ....               DW      (??do_hart_transaction_30) /2
   \   00000008   ....               DW      (??do_hart_transaction_29) /2
   \   0000000A   ....               DW      (??do_hart_transaction_29) /2
   \   0000000C   ....               DW      (??do_hart_transaction_29) /2
   \   0000000E   ....               DW      (??do_hart_transaction_29) /2
   \   00000010   ....               DW      (??do_hart_transaction_27) /2
   \   00000012   ....               DW      (??do_hart_transaction_27) /2
   \   00000014   ....               DW      (??do_hart_transaction_27) /2
   \   00000016   ....               DW      (??do_hart_transaction_27) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_4`:
   \   00000000   ....               DW      (??do_hart_transaction_34) /2
   \   00000002   ....               DW      (??do_hart_transaction_34) /2
   \   00000004   ....               DW      (??do_hart_transaction_34) /2
   \   00000006   ....               DW      (??do_hart_transaction_34) /2
   \   00000008   ....               DW      (??do_hart_transaction_33) /2
   \   0000000A   ....               DW      (??do_hart_transaction_33) /2
   \   0000000C   ....               DW      (??do_hart_transaction_33) /2
   \   0000000E   ....               DW      (??do_hart_transaction_33) /2
   \   00000010   ....               DW      (??do_hart_transaction_31) /2
   \   00000012   ....               DW      (??do_hart_transaction_31) /2
   \   00000014   ....               DW      (??do_hart_transaction_31) /2
   \   00000016   ....               DW      (??do_hart_transaction_31) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_5`:
   \   00000000   ....               DW      (??do_hart_transaction_39) /2
   \   00000002   ....               DW      (??do_hart_transaction_39) /2
   \   00000004   ....               DW      (??do_hart_transaction_39) /2
   \   00000006   ....               DW      (??do_hart_transaction_39) /2
   \   00000008   ....               DW      (??do_hart_transaction_38) /2
   \   0000000A   ....               DW      (??do_hart_transaction_38) /2
   \   0000000C   ....               DW      (??do_hart_transaction_38) /2
   \   0000000E   ....               DW      (??do_hart_transaction_38) /2
   \   00000010   ....               DW      (??do_hart_transaction_36) /2
   \   00000012   ....               DW      (??do_hart_transaction_36) /2
   \   00000014   ....               DW      (??do_hart_transaction_36) /2
   \   00000016   ....               DW      (??do_hart_transaction_36) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_6`:
   \   00000000   ....               DW      (??do_hart_transaction_44) /2
   \   00000002   ....               DW      (??do_hart_transaction_44) /2
   \   00000004   ....               DW      (??do_hart_transaction_44) /2
   \   00000006   ....               DW      (??do_hart_transaction_44) /2
   \   00000008   ....               DW      (??do_hart_transaction_43) /2
   \   0000000A   ....               DW      (??do_hart_transaction_43) /2
   \   0000000C   ....               DW      (??do_hart_transaction_43) /2
   \   0000000E   ....               DW      (??do_hart_transaction_43) /2
   \   00000010   ....               DW      (??do_hart_transaction_41) /2
   \   00000012   ....               DW      (??do_hart_transaction_41) /2
   \   00000014   ....               DW      (??do_hart_transaction_41) /2
   \   00000016   ....               DW      (??do_hart_transaction_41) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_channel_get_with_lock>_0`:
   \   00000000   ....               DW      (??hart_channel_get_with_lock_4) /2
   \   00000002   ....               DW      (??hart_channel_get_with_lock_4) /2
   \   00000004   ....               DW      (??hart_channel_get_with_lock_4) /2
   \   00000006   ....               DW      (??hart_channel_get_with_lock_4) /2
   \   00000008   ....               DW      (??hart_channel_get_with_lock_3) /2
   \   0000000A   ....               DW      (??hart_channel_get_with_lock_3) /2
   \   0000000C   ....               DW      (??hart_channel_get_with_lock_3) /2
   \   0000000E   ....               DW      (??hart_channel_get_with_lock_3) /2
   \   00000010   ....               DW      (??hart_channel_get_with_lock_1) /2
   \   00000012   ....               DW      (??hart_channel_get_with_lock_1) /2
   \   00000014   ....               DW      (??hart_channel_get_with_lock_1) /2
   \   00000016   ....               DW      (??hart_channel_get_with_lock_1) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_channel_put_with_unlock>_0`:
   \   00000000   ....               DW      (??hart_channel_put_with_unlock_4) /2
   \   00000002   ....               DW      (??hart_channel_put_with_unlock_4) /2
   \   00000004   ....               DW      (??hart_channel_put_with_unlock_4) /2
   \   00000006   ....               DW      (??hart_channel_put_with_unlock_4) /2
   \   00000008   ....               DW      (??hart_channel_put_with_unlock_3) /2
   \   0000000A   ....               DW      (??hart_channel_put_with_unlock_3) /2
   \   0000000C   ....               DW      (??hart_channel_put_with_unlock_3) /2
   \   0000000E   ....               DW      (??hart_channel_put_with_unlock_3) /2
   \   00000010   ....               DW      (??hart_channel_put_with_unlock_1) /2
   \   00000012   ....               DW      (??hart_channel_put_with_unlock_1) /2
   \   00000014   ....               DW      (??hart_channel_put_with_unlock_1) /2
   \   00000016   ....               DW      (??hart_channel_put_with_unlock_1) /2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "HART0">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "HART0">>`
   \   00000006                      DS8 6
   \   0000000C                      REQUIRE `?<Initializer for <Constant "HART1">>`
   \   0000000C                      DS8 6
   \   00000012                      REQUIRE `?<Initializer for <Constant "HART2">>`

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {128, 0, 0, 0, 0}>`:
   \   00000000   0080000000         DC8 128, 0, 0, 0, 0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   ConvertBigEndianToLittleEndian
      8      2   HART_Task
        8      2   -> OS_CreateMB
        8      2   -> OS_Delay
        8      2   -> OS_DelayUntil
        8      2   -> OS__Gettime
        8      2   -> do_hart_transaction
        8      2   -> hart_config_uart
        8      2   -> hart_gpio_hart_carrier_off
        8      2   -> hart_msg_encoder_init
        8      2   -> hart_msg_parser_init
        8      2 ?F_CMP_GE_S_L04
     21      2   ReceiveReply
       21      2   -> ConvertBigEndianToLittleEndian
       21      2   -> OS_GetMailTimed
       21      2   -> hart_msg_calc_csum
     16      2   USART1_RXC
       16      2   -> OS_PutMailCond1
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   USART1_TXC
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_finish_tx
     16      2   USART1_UDRE
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_tx_next
     16      2   USART2_RXC
       16      2   -> OS_PutMailCond1
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   USART2_TXC
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_finish_tx
     16      2   USART2_UDRE
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_tx_next
     16      2   USART3_RXC
       16      2   -> OS_PutMailCond1
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   USART3_TXC
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_finish_tx
     16      2   USART3_UDRE
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_tx_next
      0      2   demo1_hart_handle_rx_error
      7      2   demo1_hart_make_request
        7      2   -> hart_msg_encoder_calc_csum
        7      2   -> hart_msg_encoder_data
        7      2   -> hart_msg_encoder_long_start
        7      2   -> hart_msg_encoder_preamble
        7      2 ?ML_FLASH_SRAM_24EC_16_L07
     19      2   do_hart_transaction
       19      2   -- Indirect call
       19      2   -> OS_ClearEvents
       19      2   -> OS_Delay
       19      2   -> OS_DelayUntil
       19      2   -> OS_Unuse
       19      2   -> OS_Use
       19      2   -> OS_WaitEventTimed
       19      2   -> hart_channel_inc_stat
       19      2   -> hart_channel_unlock
       19      2   -> hart_gpio_channel_select
       19      2   -> hart_gpio_hart_carrier_off
       19      2   -> hart_gpio_hart_carrier_on
       19      2   -> hart_msg_encoder_reset
       19      2   -> hart_msg_parser_reset
       19      2   -> hart_start_transaction
      2      2   hart_channel_get_with_lock
        2      2   -> OS_Use
      3      2   hart_channel_inc_stat
        3      2   -> OS_Unuse
        3      2   -> OS_Use
      0      2   hart_channel_lock
        0      2   -> OS_Use
      0      2   hart_channel_put_with_unlock
        0      2   -> OS_Unuse
      2      2   hart_channel_reset
        2      2   -> OS_Unuse
        2      2   -> OS_Use
      0      2   hart_channel_unlock
        0      2   -> OS_Unuse
      0      2   hart_config_uart
      2      2   hart_irq_finish_tx
        2      2   -> OS_SignalEvent
        2      2   -> hart_gpio_hart_carrier_off_irq
      0      2   hart_irq_tx_next
     10      2   hart_start
        4      2   -> OS_CreateRSema
        4      2   -> OS_CreateTask_S
        4      2   -> OS_Delay
        4      2   -> hart_channel_lock
        4      2   -> hart_channel_reset
        4      2   -> hart_channel_unlock
        4      2   -> hart_diag_init
        4      2   -> hart_diag_task_start
        4      2   -> hart_gpio_enable_all_mux
        4      2   -> hart_gpio_power_on
      0      2   hart_start_transaction


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Constant "HART0">
       5  ?<Constant {128, 0, 0, 0, 0}>
      18  ?<Initializer for <Constant "HART0">>
     331  ?<Initializer for _hart_channels>
    4389  ?<Initializer for _hart_task0>
      24  ?<Jumptable for do_hart_transaction>_0
      24  ?<Jumptable for do_hart_transaction>_1
      24  ?<Jumptable for do_hart_transaction>_2
      24  ?<Jumptable for do_hart_transaction>_3
      24  ?<Jumptable for do_hart_transaction>_4
      24  ?<Jumptable for do_hart_transaction>_5
      24  ?<Jumptable for do_hart_transaction>_6
      24  ?<Jumptable for hart_channel_get_with_lock>_0
      24  ?<Jumptable for hart_channel_inc_stat>_0
      24  ?<Jumptable for hart_channel_inc_stat>_1
      24  ?<Jumptable for hart_channel_lock>_0
      24  ?<Jumptable for hart_channel_put_with_unlock>_0
      24  ?<Jumptable for hart_channel_reset>_0
      24  ?<Jumptable for hart_channel_reset>_1
      24  ?<Jumptable for hart_channel_unlock>_0
      64  ??Subroutine1_0
       2  ?Subroutine0
      32  ConvertBigEndianToLittleEndian
     262  HART_Task
     434  ReceiveReply
     148  USART1_RXC
       4  USART1_RXC::??INTVEC 144
      78  USART1_TXC
       4  USART1_TXC::??INTVEC 152
      80  USART1_UDRE
       4  USART1_UDRE::??INTVEC 148
     148  USART2_RXC
       4  USART2_RXC::??INTVEC 204
      78  USART2_TXC
       4  USART2_TXC::??INTVEC 212
      80  USART2_UDRE
       4  USART2_UDRE::??INTVEC 208
     148  USART3_RXC
       4  USART3_RXC::??INTVEC 216
      78  USART3_TXC
       4  USART3_TXC::??INTVEC 224
      80  USART3_UDRE
       4  USART3_UDRE::??INTVEC 220
       2  _A_UBRR1
       2  _A_UBRR2
       2  _A_UBRR3
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_UCSR2A
       1  _A_UCSR2B
       1  _A_UCSR2C
       1  _A_UCSR3A
       1  _A_UCSR3B
       1  _A_UCSR3C
       1  _A_UDR1
       1  _A_UDR2
       1  _A_UDR3
     331  _hart_channels
          _demo1_transaction
    4389  _hart_task0
          _hart_task1
          _hart_task2
      42  demo1_hart_handle_rx_error
      74  demo1_hart_make_request
    1088  do_hart_transaction
      72  hart_channel_get_with_lock
     274  hart_channel_inc_stat
      54  hart_channel_lock
      54  hart_channel_put_with_unlock
     166  hart_channel_reset
      54  hart_channel_unlock
     118  hart_config_uart
      86  hart_irq_finish_tx
     188  hart_irq_tx_next
     228  hart_start
      72  hart_start_transaction
       7  -- Other

 
    18 bytes in segment ABSOLUTE
 4 282 bytes in segment CODE
     5 bytes in segment FAR_F
     7 bytes in segment INITTAB
    36 bytes in segment INTVEC
 4 738 bytes in segment NEAR_I
 4 738 bytes in segment NEAR_ID
   360 bytes in segment SWITCH
 
 9 385 bytes of CODE memory (+ 43 bytes shared)
 4 738 bytes of DATA memory (+ 18 bytes shared)

Errors: none
Warnings: 5
