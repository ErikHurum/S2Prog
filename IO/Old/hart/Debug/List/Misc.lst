###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       15/Dec/2022  12:17:27
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart\Src\Misc.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW5713.tmp
#        (D:\S2Prog\IO\hart\Src\Misc.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\hart\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -D DEBUG
#        -lCN D:\S2Prog\IO\hart\Debug\List -y --initializers_in_flash --no_cse
#        --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\hart\INC\\ -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\hart\Debug\List\Misc.lst
#    Object file  =  D:\S2Prog\IO\hart\Debug\Obj\Misc.r90
#
###############################################################################

D:\S2Prog\IO\hart\Src\Misc.c
      1          /****************************************************************************************
      2          /  Misc. routines
      3          /
      4          ***************************************************************************************/
      5          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_PINE
   \                     _A_PINE:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          #include "hart.h"
     13          
     14          
     15          /*************************************************************************
     16          *   (This is a task)
     17          *  Watchdog handler
     18          *
     19          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     20          void WatchDogHandler(void) {
   \                     WatchDogHandler:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
     21              int HarComCheckTimeCnt = 0;
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
     22              OS_Delay(100);                         // wait 1 seconds for other tasks to start and set TaskStatus
   \   00000008   E604               LDI     R16, 100
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   ........           CALL    OS_Delay
     23              asm("WDR");                             // kick the dog!!
   \   00000010   95A8               WDR
     24              WDTCSR = 0x1f;
   \   00000012   E10F               LDI     R16, 31
   \   00000014   9300....           STS     _A_WDTCSR, R16
     25              WDTCSR = 0x0f;
   \   00000018   E00F               LDI     R16, 15
   \   0000001A   9300....           STS     _A_WDTCSR, R16
     26              asm("WDR");                             // kick the dog!!
   \   0000001E   95A8               WDR
     27              while (1) {
     28                  char Restart = false;
   \                     ??WatchDogHandler_0:
   \   00000020   E0A0               LDI     R26, 0
     29                  OS_Delay(500);
   \   00000022   EF04               LDI     R16, 244
   \   00000024   E011               LDI     R17, 1
   \   00000026   ........           CALL    OS_Delay
     30                  if ( HarComCheckTimeCnt>=10 ) {
   \   0000002A   308A               CPI     R24, 10
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   0790               CPC     R25, R16
   \   00000030   F40C               BRGE    $+2+2
   \   00000032   C045               RJMP    ??WatchDogHandler_1
     31                      if ( labs(OS_Time - _hart_task0.LastHartTaskRunTime) > 10000 ) Restart  = true;
   \   00000034   ....               LDI     R30, LOW(OS_Time)
   \   00000036   ....               LDI     R31, (OS_Time) >> 8
   \   00000038   8100               LD      R16, Z
   \   0000003A   8111               LDD     R17, Z+1
   \   0000003C   8122               LDD     R18, Z+2
   \   0000003E   8133               LDD     R19, Z+3
   \   00000040   ....               LDI     R30, LOW((_hart_task0 + 1400))
   \   00000042   ....               LDI     R31, HIGH((_hart_task0 + 1400))
   \   00000044   8140               LD      R20, Z
   \   00000046   8151               LDD     R21, Z+1
   \   00000048   8162               LDD     R22, Z+2
   \   0000004A   8173               LDD     R23, Z+3
   \   0000004C   1B04               SUB     R16, R20
   \   0000004E   0B15               SBC     R17, R21
   \   00000050   0B26               SBC     R18, R22
   \   00000052   0B37               SBC     R19, R23
   \   00000054   ........           CALL    labs
   \   00000058   3101               CPI     R16, 17
   \   0000005A   E227               LDI     R18, 39
   \   0000005C   0712               CPC     R17, R18
   \   0000005E   F00C               BRLT    ??WatchDogHandler_2
   \   00000060   E0A1               LDI     R26, 1
     32                      if ( labs(OS_Time - _hart_task1.LastHartTaskRunTime) > 10000 ) Restart |= true;
   \                     ??WatchDogHandler_2:
   \   00000062   ....               LDI     R30, LOW(OS_Time)
   \   00000064   ....               LDI     R31, (OS_Time) >> 8
   \   00000066   8100               LD      R16, Z
   \   00000068   8111               LDD     R17, Z+1
   \   0000006A   8122               LDD     R18, Z+2
   \   0000006C   8133               LDD     R19, Z+3
   \   0000006E   ....               LDI     R30, LOW((_hart_task1 + 1400))
   \   00000070   ....               LDI     R31, HIGH((_hart_task1 + 1400))
   \   00000072   8140               LD      R20, Z
   \   00000074   8151               LDD     R21, Z+1
   \   00000076   8162               LDD     R22, Z+2
   \   00000078   8173               LDD     R23, Z+3
   \   0000007A   1B04               SUB     R16, R20
   \   0000007C   0B15               SBC     R17, R21
   \   0000007E   0B26               SBC     R18, R22
   \   00000080   0B37               SBC     R19, R23
   \   00000082   ........           CALL    labs
   \   00000086   3101               CPI     R16, 17
   \   00000088   E227               LDI     R18, 39
   \   0000008A   0712               CPC     R17, R18
   \   0000008C   F00C               BRLT    ??WatchDogHandler_3
   \   0000008E   60A1               ORI     R26, 0x01
     33                      if ( labs(OS_Time - _hart_task2.LastHartTaskRunTime) > 10000 ) Restart |= true;
   \                     ??WatchDogHandler_3:
   \   00000090   ....               LDI     R30, LOW(OS_Time)
   \   00000092   ....               LDI     R31, (OS_Time) >> 8
   \   00000094   8100               LD      R16, Z
   \   00000096   8111               LDD     R17, Z+1
   \   00000098   8122               LDD     R18, Z+2
   \   0000009A   8133               LDD     R19, Z+3
   \   0000009C   ....               LDI     R30, LOW((_hart_task2 + 1400))
   \   0000009E   ....               LDI     R31, HIGH((_hart_task2 + 1400))
   \   000000A0   8140               LD      R20, Z
   \   000000A2   8151               LDD     R21, Z+1
   \   000000A4   8162               LDD     R22, Z+2
   \   000000A6   8173               LDD     R23, Z+3
   \   000000A8   1B04               SUB     R16, R20
   \   000000AA   0B15               SBC     R17, R21
   \   000000AC   0B26               SBC     R18, R22
   \   000000AE   0B37               SBC     R19, R23
   \   000000B0   ........           CALL    labs
   \   000000B4   3101               CPI     R16, 17
   \   000000B6   E227               LDI     R18, 39
   \   000000B8   0712               CPC     R17, R18
   \   000000BA   F00C               BRLT    ??WatchDogHandler_1
   \   000000BC   60A1               ORI     R26, 0x01
     34                  }
     35                  if ( Restart ) {
   \                     ??WatchDogHandler_1:
   \   000000BE   23AA               TST     R26
   \   000000C0   F029               BREQ    ??WatchDogHandler_4
     36                      OS_Delay(15000);
   \   000000C2   E908               LDI     R16, 152
   \   000000C4   E31A               LDI     R17, 58
   \   000000C6   ........           CALL    OS_Delay
   \   000000CA   CFAA               RJMP    ??WatchDogHandler_0
     37                  } else {
     38                      __watchdog_reset();               //kick the dog
   \                     ??WatchDogHandler_4:
   \   000000CC   95A8               WDR
   \   000000CE   CFA8               RJMP    ??WatchDogHandler_0
   \   000000D0                      REQUIRE _A_WDTCSR
     39                  }
     40              }
     41          }
     42          
     43          
     44          /*************************************************************************
     45          *
     46          *  Get my address
     47          *
     48          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     49          char MyAddress(void) {
   \                     MyAddress:
     50          
     51          #if (OS_UART == 0)
     52              return 0;                   // Debug only
     53          #else
     54              int Address = (~(PINE>>4) & 0x0f) ;
   \   00000000   B10C               IN      R16, 0x0C
   \   00000002   9502               SWAP    R16
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   E010               LDI     R17, 0
   \   00000008   9500               COM     R16
   \   0000000A   9510               COM     R17
   \   0000000C   700F               ANDI    R16, 0x0F
   \   0000000E   7010               ANDI    R17, 0x00
     55              return Address;
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_PINE
     56              //return(~(PINE>>4) & 0x0f) ;
     57          #endif
     58          }
     59          
     60          /*************************************************************************
     61          *
     62          *  Check for legal float
     63          *
     64          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     65          char IsFloat(float A){
   \                     IsFloat:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01A8               MOVW    R21:R20, R17:R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
     66            long exp;
     67          	// A NAN has an exponent of 255 (shifted left 23 positions) and
     68          	// Denormalized has an exponent set to 0
     69          	exp = *(long*)&A & 0x7F800000L;
   \   00000008   018A               MOVW    R17:R16, R21:R20
   \   0000000A   019B               MOVW    R19:R18, R23:R22
   \   0000000C   7000               ANDI    R16, 0x00
   \   0000000E   7010               ANDI    R17, 0x00
   \   00000010   7820               ANDI    R18, 0x80
   \   00000012   773F               ANDI    R19, 0x7F
   \   00000014   01C8               MOVW    R25:R24, R17:R16
   \   00000016   01D9               MOVW    R27:R26, R19:R18
     70          	//int mantissa = *(int*)&A & 0x007FFFFF;
     71          	if ( exp && (exp != 0x7F800000L)  ) {
   \   00000018   2F08               MOV     R16, R24
   \   0000001A   2B09               OR      R16, R25
   \   0000001C   2B0A               OR      R16, R26
   \   0000001E   2B0B               OR      R16, R27
   \   00000020   F051               BREQ    ??IsFloat_0
   \   00000022   3080               CPI     R24, 0
   \   00000024   E000               LDI     R16, 0
   \   00000026   0790               CPC     R25, R16
   \   00000028   E800               LDI     R16, 128
   \   0000002A   07A0               CPC     R26, R16
   \   0000002C   E70F               LDI     R16, 127
   \   0000002E   07B0               CPC     R27, R16
   \   00000030   F011               BREQ    ??IsFloat_0
     72          		return(true);
   \   00000032   E001               LDI     R16, 1
   \   00000034   C001               RJMP    ??IsFloat_1
     73            }
     74          	return(false);
   \                     ??IsFloat_0:
   \   00000036   E000               LDI     R16, 0
   \                     ??IsFloat_1:
   \   00000038   E0E4               LDI     R30, 4
   \   0000003A   ........           JMP     ?EPILOGUE_B4_L09
     75          }
     76          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   IsFloat
      0      2   MyAddress
      3      2   WatchDogHandler
        3      2   -> OS_Delay
        3      2   -> labs


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      62  IsFloat
      18  MyAddress
     208  WatchDogHandler
       1  _A_PINE
       1  _A_WDTCSR

 
   2 bytes in segment ABSOLUTE
 288 bytes in segment CODE
 
 288 bytes of CODE memory
   0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 6
