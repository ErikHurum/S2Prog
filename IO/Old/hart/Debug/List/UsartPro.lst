###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       15/Dec/2022  12:17:27
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart\Src\UsartPro.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW584D.tmp
#        (D:\S2Prog\IO\hart\Src\UsartPro.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\hart\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -D DEBUG
#        -lCN D:\S2Prog\IO\hart\Debug\List -y --initializers_in_flash --no_cse
#        --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\hart\INC\\ -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\hart\Debug\List\UsartPro.lst
#    Object file  =  D:\S2Prog\IO\hart\Debug\Obj\UsartPro.r90
#
###############################################################################

D:\S2Prog\IO\hart\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "string.h"
     10          #include "RTOS.h"
     11          #include "hart.h"
     12          #include "externals.h"
     13          #include "version.h"
     14          #include "structs.h"
     15          
     16          /*************************************************************************
     17          *   (This is a timer calback)
     18          *  Timout timer USART 0
     19          *
     20          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     21          void TimoutUSART0(void) {
   \                     TimoutUSART0:
     22          
     23          	UCSR0B &= ~(__BIT_MASK(UDRIE0));            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C1           STS     193, R16
     24          	ClrBit(PORTE, 0x04);                              // TXE0 off
   \   0000000A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??TimoutUSART0_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??TimoutUSART0_0:
   \   0000001C   94F8               CLI
   \   0000001E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000022   9503               INC     R16
   \   00000024   9300....           STS     (OS_Counters + 1), R16
   \   00000028   9872               CBI     0x0E, 0x02
   \   0000002A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000002E   7F00               ANDI    R16, 0xF0
   \   00000030   2300               TST     R16
   \   00000032   F021               BREQ    ??TimoutUSART0_1
   \   00000034   E909               LDI     R16, 153
   \   00000036   E010               LDI     R17, 0
   \   00000038   ........           CALL    OS_Error
   \                     ??TimoutUSART0_1:
   \   0000003C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000040   950A               DEC     R16
   \   00000042   9300....           STS     (OS_Counters + 1), R16
   \   00000046   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004A   2300               TST     R16
   \   0000004C   F409               BRNE    ??TimoutUSART0_2
   \   0000004E   9478               SEI
     25          	OS_StopTimer(&TimerUSART0);                    // and stop timer
   \                     ??TimoutUSART0_2:
   \   00000050   ....               LDI     R16, LOW(TimerUSART0)
   \   00000052   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000054   ........           CALL    OS_StopTimer
     26          	GoToSyncUART(0);                                    // go to sync modus for recive
   \   00000058   E000               LDI     R16, 0
   \   0000005A   ....               RCALL   GoToSyncUART
     27          }
   \   0000005C   9508               RET
   \   0000005E                      REQUIRE _A_UCSR0B
   \   0000005E                      REQUIRE _A_PORTE
     28          
     29          /*************************************************************************
     30          *   (This is a timer calback)
     31          *  Timer USART 0 on before TX
     32          *
     33          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     34          void TimoutUSART0On(void) {
   \                     TimoutUSART0On:
     35          
     36          	UCSR0B |= __BIT_MASK(UDRIE0);                     // start sending by enableing interrupt
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C1           STS     193, R16
     37          	OS_StopTimer(&TimerUSART0On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000000C   ....               LDI     R17, (TimerUSART0On) >> 8
   \   0000000E   ........           CALL    OS_StopTimer
     38          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_UCSR0B
     39          
     40          /*************************************************************************
     41          *   (This is a timer calback)
     42          *  Timout timer USART 1
     43          *
     44          *************************************************************************/
     45          
     46          /*************************************************************************
     47          *   (This is a timer calback)
     48          *  Timer USART 1 on before TX
     49          *
     50          *************************************************************************/
     51          
     52          
     53          /*************************************************************************
     54          *   
     55          *  Handle the ANPRO10 protocol
     56          *
     57          *************************************************************************/

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     58          unsigned short LastCommand = 0;
   \                     LastCommand:
   \   00000000                      DS8 2

   \                                 In  segment CODE, align 2, keep-with-next
     59          char ANPRO10_UnpackPacket(UARTDataType *pUART, unsigned char *Buf) {
   \                     ANPRO10_UnpackPacket:
   \   00000000   ........           CALL    ?PROLOGUE13_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004   0138               MOVW    R7:R6, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
     60          	char ch = pUART->Channel;
   \   00000008   01F3               MOVW    R31:R30, R7:R6
   \   0000000A   A040               LDD     R4, Z+32
     61          	pUART->RxCount++;
   \   0000000C   01F3               MOVW    R31:R30, R7:R6
   \   0000000E   8D06               LDD     R16, Z+30
   \   00000010   8D17               LDD     R17, Z+31
   \   00000012   5F0F               SUBI    R16, 255
   \   00000014   4F1F               SBCI    R17, 255
   \   00000016   8F06               STD     Z+30, R16
   \   00000018   8F17               STD     Z+31, R17
     62          	pUART->RxSendReply = false;                              // flag for answering set to fault
   \   0000001A   01F3               MOVW    R31:R30, R7:R6
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8F05               STD     Z+29, R16
     63          	pUART->TxFirst     = 11;                                 // Start pos for first TX command
   \   00000020   01F3               MOVW    R31:R30, R7:R6
   \   00000022   E00B               LDI     R16, 11
   \   00000024   E010               LDI     R17, 0
   \   00000026   8302               STD     Z+2, R16
   \   00000028   8313               STD     Z+3, R17
     64          
     65          	ANPRO10_PacketHeading *pPH = (ANPRO10_PacketHeading *)Buf;
   \   0000002A   015C               MOVW    R11:R10, R25:R24
     66          	char MyPacket = (pPH->rxadr == MyAddress());
   \   0000002C   ........           CALL    MyAddress
   \   00000030   01F5               MOVW    R31:R30, R11:R10
   \   00000032   8111               LDD     R17, Z+1
   \   00000034   1710               CP      R17, R16
   \   00000036   F419               BRNE    ??ANPRO10_UnpackPacket_0
   \   00000038   24CC               CLR     R12
   \   0000003A   94C3               INC     R12
   \   0000003C   C001               RJMP    ??ANPRO10_UnpackPacket_1
   \                     ??ANPRO10_UnpackPacket_0:
   \   0000003E   24CC               CLR     R12
     67          	if (MyPacket) {
   \                     ??ANPRO10_UnpackPacket_1:
   \   00000040   20CC               TST     R12
   \   00000042   F409               BRNE    $+2+2
   \   00000044   C062               RJMP    ??ANPRO10_UnpackPacket_2
     68          		Buf += sizeof(ANPRO10_PacketHeading);
   \   00000046   9607               ADIW    R25:R24, 7
     69          		unsigned char *EndPtr =  &Buf[pPH->nob];
   \   00000048   01F5               MOVW    R31:R30, R11:R10
   \   0000004A   8104               LDD     R16, Z+4
   \   0000004C   8115               LDD     R17, Z+5
   \   0000004E   014C               MOVW    R9:R8, R25:R24
   \   00000050   0E80               ADD     R8, R16
   \   00000052   1E91               ADC     R9, R17
     70          		ANPRO10_CommandHeading *pCH;
     71          		char MoreCommands = true;
   \   00000054   2455               CLR     R5
   \   00000056   9453               INC     R5
     72          		do {
     73          			pCH = (ANPRO10_CommandHeading *)Buf;
   \                     ??ANPRO10_UnpackPacket_3:
   \   00000058   01DC               MOVW    R27:R26, R25:R24
     74          			Buf += sizeof(ANPRO10_CommandHeading);  // ??
   \   0000005A   9604               ADIW    R25:R24, 4
     75          			switch (pCH->CommandNo) {
   \   0000005C   91ED               LD      R30, X+
   \   0000005E   91FC               LD      R31, X
   \   00000060   9711               SBIW    R27:R26, 1
   \   00000062   9630               ADIW    R31:R30, 0
   \   00000064   F049               BREQ    ??ANPRO10_UnpackPacket_4
   \   00000066   9731               SBIW    R31:R30, 1
   \   00000068   F039               BREQ    ??ANPRO10_UnpackPacket_4
     76          			case ECMD_NMDWOACK:
     77          			case ECMD_NMDRQACK:
     78          				break;
     79          			default:
     80          				LastCommand = pCH->CommandNo;
   \   0000006A   910D               LD      R16, X+
   \   0000006C   911C               LD      R17, X
   \   0000006E   9711               SBIW    R27:R26, 1
   \   00000070   ....               LDI     R30, LOW(LastCommand)
   \   00000072   ....               LDI     R31, (LastCommand) >> 8
   \   00000074   8300               ST      Z, R16
   \   00000076   8311               STD     Z+1, R17
     81          				break;
     82          			}
     83          			switch (pCH->CommandNo) {
   \                     ??ANPRO10_UnpackPacket_4:
   \   00000078   910D               LD      R16, X+
   \   0000007A   911C               LD      R17, X
   \   0000007C   9711               SBIW    R27:R26, 1
   \   0000007E   ....               LDI     R30, LOW(`?<Jumptable for ANPRO10_UnpackPacket>_0`)
   \   00000080   ....               LDI     R31, (`?<Jumptable for ANPRO10_UnpackPacket>_0`) >> 16
   \   00000082   BFFB               OUT     0x3B, R31
   \   00000084   ....               LDI     R31, HIGH(`?<Jumptable for ANPRO10_UnpackPacket>_0`)
   \   00000086   ........           JMP     ?SV_SWITCH_L06
     84          			case CMD_TXU_COMPRESSED_PACKET:
     85          				//Decompress(Size,Buf,Port);
     86          				break;
     87          			case CMD_REQ_STATUS :                           // Regusest status for target
     88          				BuildStatusData(ch);                         // make package
   \                     ??ANPRO10_UnpackPacket_5:
   \   0000008A   2D04               MOV     R16, R4
   \   0000008C   ....               RCALL   BuildStatusData
     89          				break;
   \   0000008E   C030               RJMP    ??ANPRO10_UnpackPacket_6
     90          			case CMD_GET_STACKSTATUS :                        // Request stck status
     91          				BuildStackStatus(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_7:
   \   00000090   019C               MOVW    R19:R18, R25:R24
   \   00000092   2D04               MOV     R16, R4
   \   00000094   ....               RCALL   BuildStackStatus
     92          				break;
   \   00000096   C02C               RJMP    ??ANPRO10_UnpackPacket_6
     93          			case CMD_EEPROM_RESET :                        // Reset EEPROM??
     94          				GetResetEEPROM(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_8:
   \   00000098   019C               MOVW    R19:R18, R25:R24
   \   0000009A   2D04               MOV     R16, R4
   \   0000009C   ....               RCALL   GetResetEEPROM
     95          				break;
   \   0000009E   C028               RJMP    ??ANPRO10_UnpackPacket_6
     96          			case CMD_GOTO_BOOTLOADER :                        // Goto bootlaoder??
     97          				GetGotoBootloader(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_9:
   \   000000A0   019C               MOVW    R19:R18, R25:R24
   \   000000A2   2D04               MOV     R16, R4
   \   000000A4   ....               RCALL   GetGotoBootloader
     98          				break;
   \   000000A6   C024               RJMP    ??ANPRO10_UnpackPacket_6
     99          			case CMD_SND_EEPROM_DATA :                              // Receive EEPROM data
    100          				GetEEPROMData(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_10:
   \   000000A8   019C               MOVW    R19:R18, R25:R24
   \   000000AA   2D04               MOV     R16, R4
   \   000000AC   ....               RCALL   GetEEPROMData
    101          				break;
   \   000000AE   C020               RJMP    ??ANPRO10_UnpackPacket_6
    102          			case CMD_REQ_EEPROM_DATA :                              // Request to send EEPROM data
    103          				BuildEEPROMData(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_11:
   \   000000B0   019C               MOVW    R19:R18, R25:R24
   \   000000B2   2D04               MOV     R16, R4
   \   000000B4   ....               RCALL   BuildEEPROMData
    104          				break;
   \   000000B6   C01C               RJMP    ??ANPRO10_UnpackPacket_6
    105          			case CMD_REQ_INT_DATA :                              // Request external data
    106          				BuildADInt(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_12:
   \   000000B8   019C               MOVW    R19:R18, R25:R24
   \   000000BA   2D04               MOV     R16, R4
   \   000000BC   ....               RCALL   BuildADInt
    107          				break;
   \   000000BE   C018               RJMP    ??ANPRO10_UnpackPacket_6
    108          			case CMD_SND_HART_SETUP :                              // Receive sertup of AN-RSANA
    109          				GetHartSetup(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_13:
   \   000000C0   019C               MOVW    R19:R18, R25:R24
   \   000000C2   2D04               MOV     R16, R4
   \   000000C4   ....               RCALL   GetHartSetup
    110          				break;
   \   000000C6   C014               RJMP    ??ANPRO10_UnpackPacket_6
    111          			case CMD_REQ_HART_SETUP :                              // Request for sertup of AN-RSANA
    112          				BuildHartSetup(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_14:
   \   000000C8   019C               MOVW    R19:R18, R25:R24
   \   000000CA   2D04               MOV     R16, R4
   \   000000CC   ........           CALL    BuildHartSetup
    113          				break;
   \   000000D0   C00F               RJMP    ??ANPRO10_UnpackPacket_6
    114          			case CMD_SND_HART_FILTER :                              // Receive filter of AN-RSANA
    115          				GetHartFilter(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_15:
   \   000000D2   019C               MOVW    R19:R18, R25:R24
   \   000000D4   2D04               MOV     R16, R4
   \   000000D6   ........           CALL    GetHartFilter
    116          				break;
   \   000000DA   C00A               RJMP    ??ANPRO10_UnpackPacket_6
    117          			case CMD_REQ_HART_FILTER :                              // Request filter of AN-RSANA
    118          				BuildHartFilter(ch, Buf);                     // receive package
   \                     ??ANPRO10_UnpackPacket_16:
   \   000000DC   019C               MOVW    R19:R18, R25:R24
   \   000000DE   2D04               MOV     R16, R4
   \   000000E0   ........           CALL    BuildHartFilter
    119          				break;
   \   000000E4   C005               RJMP    ??ANPRO10_UnpackPacket_6
    120          			case CMD_REQ_HART_DATA :                              // Request ANA data(4-20ma)
    121          				//EHSMark BuildMDataANA(ch, pointer+4) ;                     // receive
    122          				BuildMDataHart(pUART);                     // receive
   \                     ??ANPRO10_UnpackPacket_17:
   \   000000E6   0183               MOVW    R17:R16, R7:R6
   \   000000E8   ........           CALL    BuildMDataHart
    123          				break;
   \   000000EC   C001               RJMP    ??ANPRO10_UnpackPacket_6
    124          
    125          			case ECMD_NMDWOACK:
    126          			case ECMD_NMDRQACK:
    127          				MoreCommands = false;
   \                     ??ANPRO10_UnpackPacket_18:
   \   000000EE   2455               CLR     R5
    128          				break;
    129          			default:
    130          				break;
    131          
    132          			}
    133          			if (MoreCommands) {
   \                     ??ANPRO10_UnpackPacket_6:
   \   000000F0   2055               TST     R5
   \   000000F2   F029               BREQ    ??ANPRO10_UnpackPacket_19
    134          				Buf += pCH->ndb;
   \   000000F4   01FD               MOVW    R31:R30, R27:R26
   \   000000F6   8102               LDD     R16, Z+2
   \   000000F8   8113               LDD     R17, Z+3
   \   000000FA   0F80               ADD     R24, R16
   \   000000FC   1F91               ADC     R25, R17
    135          			}
    136          		} while (MoreCommands && (Buf < EndPtr));
   \                     ??ANPRO10_UnpackPacket_19:
   \   000000FE   2055               TST     R5
   \   00000100   F021               BREQ    ??ANPRO10_UnpackPacket_2
   \   00000102   1588               CP      R24, R8
   \   00000104   0599               CPC     R25, R9
   \   00000106   F408               BRCC    $+2+2
   \   00000108   CFA7               RJMP    ??ANPRO10_UnpackPacket_3
    137          	}
    138          	if (MyPacket) {
   \                     ??ANPRO10_UnpackPacket_2:
   \   0000010A   20CC               TST     R12
   \   0000010C   F039               BREQ    ??ANPRO10_UnpackPacket_20
    139          		if (pUART->RxSendReply) {                                   //send answer?
   \   0000010E   01F3               MOVW    R31:R30, R7:R6
   \   00000110   8D05               LDD     R16, Z+29
   \   00000112   2300               TST     R16
   \   00000114   F019               BREQ    ??ANPRO10_UnpackPacket_20
    140          			Uart_BuildTail(pUART);                                       // yes, build tail (and header) and start sending
   \   00000116   0183               MOVW    R17:R16, R7:R6
   \   00000118   ........           CALL    Uart_BuildTail
    141          		}
    142          	}
    143          	return (MyPacket);
   \                     ??ANPRO10_UnpackPacket_20:
   \   0000011C   2D0C               MOV     R16, R12
   \   0000011E   E0ED               LDI     R30, 13
   \   00000120   ........           JMP     ?EPILOGUE_B13_L09
    144          }
    145          
    146          #define MAX_TIME_BETWEEN_BYTE	50
    147          

   \                                 In  segment CODE, align 2, keep-with-next
    148          char ANPRO10_IO_Receive(UARTDataType *pUART) {
   \                     ANPRO10_IO_Receive:
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   9726               SBIW    R29:R28, 6
   \   00000006   0138               MOVW    R7:R6, R17:R16
    149          	unsigned char *RxBuf = (unsigned char *)pUART->pRxBuffer;
   \   00000008   01F3               MOVW    R31:R30, R7:R6
   \   0000000A   8CA2               LDD     R10, Z+26
   \   0000000C   8CB3               LDD     R11, Z+27
    150          	volatile ANPRO10_PacketHeading *pPH =  (ANPRO10_PacketHeading *)RxBuf;
   \   0000000E   0165               MOVW    R13:R12, R11:R10
    151          	char Data;
    152          	OS_GetMail1(&pUART->RxMailBox, &Data);
   \   00000010   019E               MOVW    R19:R18, R29:R28
   \   00000012   0183               MOVW    R17:R16, R7:R6
   \   00000014   5F04               SUBI    R16, 244
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   ........           CALL    OS_GetMail1
    153          	char dataAvailable = 1;
   \   0000001C   E081               LDI     R24, 1
    154          	int SyncCnt = 1;
   \   0000001E   E001               LDI     R16, 1
   \   00000020   E010               LDI     R17, 0
   \   00000022   830C               STD     Y+4, R16
   \   00000024   831D               STD     Y+5, R17
    155          	char PacketOK      = false;
   \   00000026   E000               LDI     R16, 0
   \   00000028   830B               STD     Y+3, R16
    156          	char Echo          = false;
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   8309               STD     Y+1, R16
    157          	do {
    158          		do {
    159          			dataAvailable = !OS_GetMailTimed(&pUART->RxMailBox, &Data, MAX_TIME_BETWEEN_BYTE);
   \                     ??ANPRO10_IO_Receive_0:
   \   0000002E   E342               LDI     R20, 50
   \   00000030   E050               LDI     R21, 0
   \   00000032   019E               MOVW    R19:R18, R29:R28
   \   00000034   0183               MOVW    R17:R16, R7:R6
   \   00000036   5F04               SUBI    R16, 244
   \   00000038   4F1F               SBCI    R17, 255
   \   0000003A   ........           CALL    OS_GetMailTimed
   \   0000003E   2300               TST     R16
   \   00000040   F411               BRNE    ??ANPRO10_IO_Receive_1
   \   00000042   E081               LDI     R24, 1
   \   00000044   C001               RJMP    ??ANPRO10_IO_Receive_2
   \                     ??ANPRO10_IO_Receive_1:
   \   00000046   E080               LDI     R24, 0
    160          		}  while (dataAvailable && Data != ANPRO10_SYN);
   \                     ??ANPRO10_IO_Receive_2:
   \   00000048   2388               TST     R24
   \   0000004A   F019               BREQ    ??ANPRO10_IO_Receive_3
   \   0000004C   8108               LD      R16, Y
   \   0000004E   3106               CPI     R16, 22
   \   00000050   F771               BRNE    ??ANPRO10_IO_Receive_0
    161          		if (dataAvailable) {
   \                     ??ANPRO10_IO_Receive_3:
   \   00000052   2388               TST     R24
   \   00000054   F409               BRNE    $+2+2
   \   00000056   C0FF               RJMP    ??ANPRO10_IO_Receive_4
    162          			// A minimum of 2 SYN to accept start
    163          			//Message("First SYN");
    164          			//SyncCnt = 0;
    165          			do {
    166          				dataAvailable = !OS_GetMailTimed(&pUART->RxMailBox, &Data, MAX_TIME_BETWEEN_BYTE);
   \                     ??ANPRO10_IO_Receive_5:
   \   00000058   E342               LDI     R20, 50
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   019E               MOVW    R19:R18, R29:R28
   \   0000005E   0183               MOVW    R17:R16, R7:R6
   \   00000060   5F04               SUBI    R16, 244
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   ........           CALL    OS_GetMailTimed
   \   00000068   2300               TST     R16
   \   0000006A   F411               BRNE    ??ANPRO10_IO_Receive_6
   \   0000006C   E081               LDI     R24, 1
   \   0000006E   C001               RJMP    ??ANPRO10_IO_Receive_7
   \                     ??ANPRO10_IO_Receive_6:
   \   00000070   E080               LDI     R24, 0
    167          				if (dataAvailable && (Data == ANPRO10_SYN)) SyncCnt++;
   \                     ??ANPRO10_IO_Receive_7:
   \   00000072   2388               TST     R24
   \   00000074   F049               BREQ    ??ANPRO10_IO_Receive_8
   \   00000076   8108               LD      R16, Y
   \   00000078   3106               CPI     R16, 22
   \   0000007A   F431               BRNE    ??ANPRO10_IO_Receive_8
   \   0000007C   810C               LDD     R16, Y+4
   \   0000007E   811D               LDD     R17, Y+5
   \   00000080   5F0F               SUBI    R16, 255
   \   00000082   4F1F               SBCI    R17, 255
   \   00000084   830C               STD     Y+4, R16
   \   00000086   831D               STD     Y+5, R17
    168          			} while (dataAvailable && (Data == ANPRO10_SYN));
   \                     ??ANPRO10_IO_Receive_8:
   \   00000088   2388               TST     R24
   \   0000008A   F019               BREQ    ??ANPRO10_IO_Receive_9
   \   0000008C   8108               LD      R16, Y
   \   0000008E   3106               CPI     R16, 22
   \   00000090   F319               BREQ    ??ANPRO10_IO_Receive_5
    169          			if (dataAvailable && SyncCnt && (Data == ANPRO10_SOH)) {
   \                     ??ANPRO10_IO_Receive_9:
   \   00000092   2388               TST     R24
   \   00000094   F409               BRNE    $+2+2
   \   00000096   C0DF               RJMP    ??ANPRO10_IO_Receive_4
   \   00000098   810C               LDD     R16, Y+4
   \   0000009A   811D               LDD     R17, Y+5
   \   0000009C   2B01               OR      R16, R17
   \   0000009E   F409               BRNE    $+2+2
   \   000000A0   C0DA               RJMP    ??ANPRO10_IO_Receive_4
   \   000000A2   8108               LD      R16, Y
   \   000000A4   3001               CPI     R16, 1
   \   000000A6   F009               BREQ    $+2+2
   \   000000A8   C0D6               RJMP    ??ANPRO10_IO_Receive_4
    170          				unsigned char *RxPtr = RxBuf;
   \   000000AA   01D5               MOVW    R27:R26, R11:R10
    171          				for (unsigned i = 0; dataAvailable && i < sizeof(NetHeading); i++) {
   \   000000AC   2444               CLR     R4
   \   000000AE   2455               CLR     R5
   \                     ??ANPRO10_IO_Receive_10:
   \   000000B0   2388               TST     R24
   \   000000B2   F0C1               BREQ    ??ANPRO10_IO_Receive_11
   \   000000B4   E007               LDI     R16, 7
   \   000000B6   1640               CP      R4, R16
   \   000000B8   E000               LDI     R16, 0
   \   000000BA   0650               CPC     R5, R16
   \   000000BC   F498               BRCC    ??ANPRO10_IO_Receive_11
    172          					dataAvailable = !OS_GetMailTimed(&pUART->RxMailBox, RxPtr++, MAX_TIME_BETWEEN_BYTE);
   \   000000BE   E342               LDI     R20, 50
   \   000000C0   E050               LDI     R21, 0
   \   000000C2   019D               MOVW    R19:R18, R27:R26
   \   000000C4   0183               MOVW    R17:R16, R7:R6
   \   000000C6   5F04               SUBI    R16, 244
   \   000000C8   4F1F               SBCI    R17, 255
   \   000000CA   ........           CALL    OS_GetMailTimed
   \   000000CE   9611               ADIW    R27:R26, 1
   \   000000D0   2300               TST     R16
   \   000000D2   F411               BRNE    ??ANPRO10_IO_Receive_12
   \   000000D4   E081               LDI     R24, 1
   \   000000D6   C001               RJMP    ??ANPRO10_IO_Receive_13
   \                     ??ANPRO10_IO_Receive_12:
   \   000000D8   E080               LDI     R24, 0
    173          				}
   \                     ??ANPRO10_IO_Receive_13:
   \   000000DA   E001               LDI     R16, 1
   \   000000DC   0E40               ADD     R4, R16
   \   000000DE   E000               LDI     R16, 0
   \   000000E0   1E50               ADC     R5, R16
   \   000000E2   CFE6               RJMP    ??ANPRO10_IO_Receive_10
    174          				if (dataAvailable) {
   \                     ??ANPRO10_IO_Receive_11:
   \   000000E4   2388               TST     R24
   \   000000E6   F409               BRNE    $+2+2
   \   000000E8   C0B6               RJMP    ??ANPRO10_IO_Receive_4
    175          					unsigned char HCSum = 0;
   \   000000EA   E090               LDI     R25, 0
    176          					{
    177          						unsigned char *TmpRxPtr = RxBuf;
   \   000000EC   0185               MOVW    R17:R16, R11:R10
    178          						for (unsigned i = 0; i < sizeof(ANPRO10_PacketHeading) - 1; i++) {
   \   000000EE   E040               LDI     R20, 0
   \   000000F0   E050               LDI     R21, 0
   \                     ??ANPRO10_IO_Receive_14:
   \   000000F2   3046               CPI     R20, 6
   \   000000F4   E020               LDI     R18, 0
   \   000000F6   0752               CPC     R21, R18
   \   000000F8   F478               BRCC    ??ANPRO10_IO_Receive_15
    179          							HCSum     = crc[HCSum ^ *TmpRxPtr++];
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   8120               LD      R18, Z
   \   000000FE   2792               EOR     R25, R18
   \   00000100   2FE9               MOV     R30, R25
   \   00000102   E0F0               LDI     R31, 0
   \   00000104   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000106   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000108   ....               LDI     R19, (crc) >> 16
   \   0000010A   BF3B               OUT     0x3B, R19
   \   0000010C   9196               ELPM    R25, Z
   \   0000010E   5F0F               SUBI    R16, 255
   \   00000110   4F1F               SBCI    R17, 255
    180          						}
   \   00000112   5F4F               SUBI    R20, 255
   \   00000114   4F5F               SBCI    R21, 255
   \   00000116   CFED               RJMP    ??ANPRO10_IO_Receive_14
    181          
    182          					}
    183          					if (HCSum == pPH->HCRC) {
   \                     ??ANPRO10_IO_Receive_15:
   \   00000118   01F6               MOVW    R31:R30, R13:R12
   \   0000011A   8106               LDD     R16, Z+6
   \   0000011C   1790               CP      R25, R16
   \   0000011E   F009               BREQ    $+2+2
   \   00000120   C09A               RJMP    ??ANPRO10_IO_Receive_4
    184          						//OS_Delay(1000);
    185          						unsigned DataSize = (unsigned)pPH->nob;
   \   00000122   01F6               MOVW    R31:R30, R13:R12
   \   00000124   8044               LDD     R4, Z+4
   \   00000126   8055               LDD     R5, Z+5
    186          						if (DataSize > 3 && DataSize < MAX_ANPRO10_IO_SIZE) {
   \   00000128   E004               LDI     R16, 4
   \   0000012A   1640               CP      R4, R16
   \   0000012C   E000               LDI     R16, 0
   \   0000012E   0650               CPC     R5, R16
   \   00000130   F408               BRCC    $+2+2
   \   00000132   C091               RJMP    ??ANPRO10_IO_Receive_4
   \   00000134   E000               LDI     R16, 0
   \   00000136   1640               CP      R4, R16
   \   00000138   E004               LDI     R16, 4
   \   0000013A   0650               CPC     R5, R16
   \   0000013C   F008               BRCS    $+2+2
   \   0000013E   C08B               RJMP    ??ANPRO10_IO_Receive_4
    187          							int Cnt = 0;
   \   00000140   24EE               CLR     R14
   \   00000142   24FF               CLR     R15
    188          							for (unsigned i = 0; dataAvailable && i < DataSize - sizeof(ANPRO10_PacketHeading); i++) {
   \   00000144   2488               CLR     R8
   \   00000146   2499               CLR     R9
   \                     ??ANPRO10_IO_Receive_16:
   \   00000148   2388               TST     R24
   \   0000014A   F0E9               BREQ    ??ANPRO10_IO_Receive_17
   \   0000014C   0182               MOVW    R17:R16, R5:R4
   \   0000014E   5007               SUBI    R16, 7
   \   00000150   4010               SBCI    R17, 0
   \   00000152   1680               CP      R8, R16
   \   00000154   0691               CPC     R9, R17
   \   00000156   F4B8               BRCC    ??ANPRO10_IO_Receive_17
    189          								dataAvailable = !OS_GetMailTimed(&pUART->RxMailBox, RxPtr++, MAX_TIME_BETWEEN_BYTE);
   \   00000158   E342               LDI     R20, 50
   \   0000015A   E050               LDI     R21, 0
   \   0000015C   019D               MOVW    R19:R18, R27:R26
   \   0000015E   0183               MOVW    R17:R16, R7:R6
   \   00000160   5F04               SUBI    R16, 244
   \   00000162   4F1F               SBCI    R17, 255
   \   00000164   ........           CALL    OS_GetMailTimed
   \   00000168   9611               ADIW    R27:R26, 1
   \   0000016A   2300               TST     R16
   \   0000016C   F411               BRNE    ??ANPRO10_IO_Receive_18
   \   0000016E   E081               LDI     R24, 1
   \   00000170   C001               RJMP    ??ANPRO10_IO_Receive_19
   \                     ??ANPRO10_IO_Receive_18:
   \   00000172   E080               LDI     R24, 0
    190          								Cnt++;
   \                     ??ANPRO10_IO_Receive_19:
   \   00000174   E001               LDI     R16, 1
   \   00000176   0EE0               ADD     R14, R16
   \   00000178   E000               LDI     R16, 0
   \   0000017A   1EF0               ADC     R15, R16
    191          							}
   \   0000017C   E001               LDI     R16, 1
   \   0000017E   0E80               ADD     R8, R16
   \   00000180   E000               LDI     R16, 0
   \   00000182   1E90               ADC     R9, R16
   \   00000184   CFE1               RJMP    ??ANPRO10_IO_Receive_16
    192          							if (!dataAvailable) {
    193          								//OS_Delay(100);
    194          							}
    195          							if (dataAvailable) {
   \                     ??ANPRO10_IO_Receive_17:
   \   00000186   2388               TST     R24
   \   00000188   F409               BRNE    $+2+2
   \   0000018A   C065               RJMP    ??ANPRO10_IO_Receive_4
    196          								RxPtr = RxBuf;
   \   0000018C   01D5               MOVW    R27:R26, R11:R10
    197          								volatile unsigned char CSum = 0;
   \   0000018E   E000               LDI     R16, 0
   \   00000190   830A               STD     Y+2, R16
    198          
    199          								for (unsigned i = 0; i < DataSize - 2; i++) {
   \   00000192   E040               LDI     R20, 0
   \   00000194   E050               LDI     R21, 0
   \                     ??ANPRO10_IO_Receive_20:
   \   00000196   0182               MOVW    R17:R16, R5:R4
   \   00000198   5002               SUBI    R16, 2
   \   0000019A   4010               SBCI    R17, 0
   \   0000019C   1740               CP      R20, R16
   \   0000019E   0751               CPC     R21, R17
   \   000001A0   F478               BRCC    ??ANPRO10_IO_Receive_21
    200          									CSum     = crc[CSum ^ *RxPtr++];
   \   000001A2   810A               LDD     R16, Y+2
   \   000001A4   911C               LD      R17, X
   \   000001A6   2701               EOR     R16, R17
   \   000001A8   2FE0               MOV     R30, R16
   \   000001AA   E0F0               LDI     R31, 0
   \   000001AC   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   000001AE   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   000001B0   ....               LDI     R19, (crc) >> 16
   \   000001B2   BF3B               OUT     0x3B, R19
   \   000001B4   9106               ELPM    R16, Z
   \   000001B6   830A               STD     Y+2, R16
   \   000001B8   9611               ADIW    R27:R26, 1
    201          								}
   \   000001BA   5F4F               SUBI    R20, 255
   \   000001BC   4F5F               SBCI    R21, 255
   \   000001BE   CFEB               RJMP    ??ANPRO10_IO_Receive_20
    202          								unsigned char  PacketCheckSum = *((unsigned char *)&RxBuf[DataSize - 2]);
   \                     ??ANPRO10_IO_Receive_21:
   \   000001C0   01F5               MOVW    R31:R30, R11:R10
   \   000001C2   0DE4               ADD     R30, R4
   \   000001C4   1DF5               ADC     R31, R5
   \   000001C6   9732               SBIW    R31:R30, 2
   \   000001C8   8090               LD      R9, Z
    203          								if (PacketCheckSum == CSum) {
   \   000001CA   810A               LDD     R16, Y+2
   \   000001CC   1690               CP      R9, R16
   \   000001CE   F009               BREQ    $+2+2
   \   000001D0   C042               RJMP    ??ANPRO10_IO_Receive_4
    204          									pUART->SequenceNumber = RxBuf[DataSize - 3];
   \   000001D2   01F5               MOVW    R31:R30, R11:R10
   \   000001D4   0DE4               ADD     R30, R4
   \   000001D6   1DF5               ADC     R31, R5
   \   000001D8   9733               SBIW    R31:R30, 3
   \   000001DA   8100               LD      R16, Z
   \   000001DC   01F3               MOVW    R31:R30, R7:R6
   \   000001DE   A301               STD     Z+33, R16
    205          									//U16 EndCommand = *((U16*)&ARxBuf[DataSize-6]);
    206          									//                  unsigned char EndData = *((unsigned char*)&ARxBuf[DataSize-4]);
    207          									unsigned char EOTByte = *((unsigned char *)&RxBuf[DataSize - 1]);
   \   000001E0   01F5               MOVW    R31:R30, R11:R10
   \   000001E2   0DE4               ADD     R30, R4
   \   000001E4   1DF5               ADC     R31, R5
   \   000001E6   9731               SBIW    R31:R30, 1
   \   000001E8   8080               LD      R8, Z
    208          									if (EOTByte == ANPRO10_EOT) {
   \   000001EA   E004               LDI     R16, 4
   \   000001EC   1680               CP      R8, R16
   \   000001EE   F599               BRNE    ??ANPRO10_IO_Receive_4
    209          										switch (pPH->txtypeid) {
   \   000001F0   01F6               MOVW    R31:R30, R13:R12
   \   000001F2   8102               LDD     R16, Z+2
   \   000001F4   5103               SUBI    R16, 19
   \   000001F6   F169               BREQ    ??ANPRO10_IO_Receive_22
   \   000001F8   500D               SUBI    R16, 13
   \   000001FA   F569               BRNE    ??ANPRO10_IO_Receive_4
    210          										case DEVICE_TCU :
    211          											if ((pPH->rxadr == MyAddress()) && (pPH->rxtypeid == (UnitID + DEVICE_IO))) {
   \   000001FC   01F6               MOVW    R31:R30, R13:R12
   \   000001FE   8101               LDD     R16, Z+1
   \   00000200   930A               ST      -Y, R16
   \   00000202   ........           CALL    MyAddress
   \   00000206   9119               LD      R17, Y+
   \   00000208   1710               CP      R17, R16
   \   0000020A   F529               BRNE    ??ANPRO10_IO_Receive_4
   \   0000020C   01F6               MOVW    R31:R30, R13:R12
   \   0000020E   8120               LD      R18, Z
   \   00000210   E030               LDI     R19, 0
   \   00000212   9100....           LDS     R16, UnitID
   \   00000216   E010               LDI     R17, 0
   \   00000218   5F00               SUBI    R16, 240
   \   0000021A   4F1F               SBCI    R17, 255
   \   0000021C   1720               CP      R18, R16
   \   0000021E   0731               CPC     R19, R17
   \   00000220   F4D1               BRNE    ??ANPRO10_IO_Receive_4
    212          												pUART->TxAddress = pPH->txadr;
   \   00000222   01F6               MOVW    R31:R30, R13:R12
   \   00000224   8103               LDD     R16, Z+3
   \   00000226   01F3               MOVW    R31:R30, R7:R6
   \   00000228   8703               STD     Z+11, R16
    213          												pUART->TxId      = pPH->txtypeid;
   \   0000022A   01F6               MOVW    R31:R30, R13:R12
   \   0000022C   8102               LDD     R16, Z+2
   \   0000022E   01F3               MOVW    R31:R30, R7:R6
   \   00000230   8702               STD     Z+10, R16
    214          												Echo = !ANPRO10_UnpackPacket(pUART, RxBuf);
   \   00000232   0195               MOVW    R19:R18, R11:R10
   \   00000234   0183               MOVW    R17:R16, R7:R6
   \   00000236   ....               RCALL   ANPRO10_UnpackPacket
   \   00000238   2300               TST     R16
   \   0000023A   F419               BRNE    ??ANPRO10_IO_Receive_23
   \   0000023C   E001               LDI     R16, 1
   \   0000023E   8309               STD     Y+1, R16
   \   00000240   C002               RJMP    ??ANPRO10_IO_Receive_24
   \                     ??ANPRO10_IO_Receive_23:
   \   00000242   E000               LDI     R16, 0
   \   00000244   8309               STD     Y+1, R16
    215          												if (!Echo) {
   \                     ??ANPRO10_IO_Receive_24:
   \   00000246   8109               LDD     R16, Y+1
   \   00000248   2300               TST     R16
   \   0000024A   F429               BRNE    ??ANPRO10_IO_Receive_4
    216          													PacketOK = true;
   \   0000024C   E001               LDI     R16, 1
   \   0000024E   830B               STD     Y+3, R16
    217          												}
    218          												break;
   \   00000250   C002               RJMP    ??ANPRO10_IO_Receive_4
    219          											} else {
    220          												//Ignore = true;
    221          											}
    222          
    223          											break;
    224          										case DEVICE_ZBHART:
    225          											Echo = true;
   \                     ??ANPRO10_IO_Receive_22:
   \   00000252   E001               LDI     R16, 1
   \   00000254   8309               STD     Y+1, R16
    226          											break;
    227          										default:
    228          											// Ignore message
    229          											break;
    230          										}
    231          									}
    232          								}
    233          							}
    234          						}
    235          					}
    236          				}
    237          			}
    238          		}
    239          	}while (Echo && dataAvailable);
   \                     ??ANPRO10_IO_Receive_4:
   \   00000256   8109               LDD     R16, Y+1
   \   00000258   2300               TST     R16
   \   0000025A   F019               BREQ    ??ANPRO10_IO_Receive_25
   \   0000025C   2388               TST     R24
   \   0000025E   F009               BREQ    $+2+2
   \   00000260   CEE6               RJMP    ??ANPRO10_IO_Receive_0
    240          	if (!PacketOK) {
   \                     ??ANPRO10_IO_Receive_25:
   \   00000262   810B               LDD     R16, Y+3
   \   00000264   2300               TST     R16
   \   00000266   F421               BRNE    ??ANPRO10_IO_Receive_26
    241          		pUART->RxFaultCnt++;
   \   00000268   01F3               MOVW    R31:R30, R7:R6
   \   0000026A   8D04               LDD     R16, Z+28
   \   0000026C   9503               INC     R16
   \   0000026E   8F04               STD     Z+28, R16
    242          	}
    243          	return (PacketOK);
   \                     ??ANPRO10_IO_Receive_26:
   \   00000270   810B               LDD     R16, Y+3
   \   00000272   9626               ADIW    R29:R28, 6
   \   00000274   E1E0               LDI     R30, 16
   \   00000276   ........           JMP     ?EPILOGUE_B16_L09
    244          }
    245          
    246          /*************************************************************************
    247          *   (This is a task)
    248          *  Usart0 handler
    249          *
    250          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    251          void Usart0Handler(void) {
   \                     Usart0Handler:
    252          
    253          	while (1) {
    254          		ANPRO10_IO_Receive(&UART[0]);
   \                     ??Usart0Handler_0:
   \   00000000   ....               LDI     R16, LOW(UART)
   \   00000002   ....               LDI     R17, (UART) >> 8
   \   00000004   ....               RCALL   ANPRO10_IO_Receive
   \   00000006   CFFC               RJMP    ??Usart0Handler_0
    255          	}
    256          }
    257          
    258          /*************************************************************************
    259          *   (This is a task)
    260          *  Usart1 handler
    261          *
    262          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    263          void Usart1Handler(void) {
   \                     Usart1Handler:
    264          	while (1) {
    265          		while (1) {
    266          			ANPRO10_IO_Receive(&UART[1]);
   \                     ??Usart1Handler_0:
   \   00000000   ....               LDI     R16, LOW((UART + 34))
   \   00000002   ....               LDI     R17, HIGH((UART + 34))
   \   00000004   ....               RCALL   ANPRO10_IO_Receive
   \   00000006   CFFC               RJMP    ??Usart1Handler_0
    267          		}
    268          	}
    269          }
    270          
    271          
    272          
    273          /*************************************************************************
    274          *
    275          * Build send packet header
    276          *
    277          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    278          void Uart_BuildHeader(UARTDataType *pUART) {
   \                     Uart_BuildHeader:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    279          
    280          	pUART->TxLast  = 0;
   \   00000006   01FC               MOVW    R31:R30, R25:R24
   \   00000008   E000               LDI     R16, 0
   \   0000000A   8304               STD     Z+4, R16
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   8305               STD     Z+5, R16
    281          	char *txBuf = pUART->pTxBuffer;
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   81A0               LD      R26, Z
   \   00000014   81B1               LDD     R27, Z+1
    282          
    283          	txBuf[0] = ANPRO10_SYN;                        /* Sync */
   \   00000016   E106               LDI     R16, 22
   \   00000018   930C               ST      X, R16
    284          	txBuf[1] = ANPRO10_SYN;                        /* Sync */
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   E106               LDI     R16, 22
   \   0000001E   8301               STD     Z+1, R16
    285          	txBuf[2] = ANPRO10_SYN;                        /* Sync */
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   E106               LDI     R16, 22
   \   00000024   8302               STD     Z+2, R16
    286          	txBuf[3] = ANPRO10_SOH;                        /* Start of header */
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   E001               LDI     R16, 1
   \   0000002A   8303               STD     Z+3, R16
    287          	txBuf[4] = pUART->TxId;                        /* RXID */
   \   0000002C   01FC               MOVW    R31:R30, R25:R24
   \   0000002E   8502               LDD     R16, Z+10
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8304               STD     Z+4, R16
    288          	txBuf[5] = pUART->TxAddress;                   /* Rx address */
   \   00000034   01FC               MOVW    R31:R30, R25:R24
   \   00000036   8503               LDD     R16, Z+11
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8305               STD     Z+5, R16
    289          	txBuf[6] = DEVICE_IO + UnitID;                 /* Unit ID */
   \   0000003C   9100....           LDS     R16, UnitID
   \   00000040   5F00               SUBI    R16, 240
   \   00000042   01FD               MOVW    R31:R30, R27:R26
   \   00000044   8306               STD     Z+6, R16
    290          	txBuf[7] = MyAddress();                        /* Tx address */
   \   00000046   ........           CALL    MyAddress
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8307               STD     Z+7, R16
    291          	txBuf[8] = 0;                                  /* packlen HB, don't know yet */
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   E000               LDI     R16, 0
   \   00000052   8700               STD     Z+8, R16
    292          	txBuf[9] = 0;                                  /* packlen LB, don't know yet */
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   E000               LDI     R16, 0
   \   00000058   8701               STD     Z+9, R16
    293          	txBuf[10] = 0;                                  /* Header checksum, don't know yet */
   \   0000005A   01FD               MOVW    R31:R30, R27:R26
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   8702               STD     Z+10, R16
    294          }
   \   00000060   E0E4               LDI     R30, 4
   \   00000062   ........           JMP     ?EPILOGUE_B4_L09
    295          
    296          /*************************************************************************
    297          *
    298          * Build  packet tail
    299          *
    300          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    301          void Uart_BuildTail(UARTDataType *pUART) {
   \                     Uart_BuildTail:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    302          
    303          	Uart_BuildHeader(pUART);                                    // fist build the header
   \   00000006   018D               MOVW    R17:R16, R27:R26
   \   00000008   ....               RCALL   Uart_BuildHeader
    304          	char *txBuf = pUART->pTxBuffer;
   \   0000000A   918D               LD      R24, X+
   \   0000000C   919C               LD      R25, X
   \   0000000E   9711               SBIW    R27:R26, 1
    305          	txBuf[pUART->TxFirst++] = ECMD_NMDWOACK & 0xff;  // End command lb
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   8122               LDD     R18, Z+2
   \   00000014   8133               LDD     R19, Z+3
   \   00000016   0189               MOVW    R17:R16, R19:R18
   \   00000018   5F0F               SUBI    R16, 255
   \   0000001A   4F1F               SBCI    R17, 255
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8302               STD     Z+2, R16
   \   00000020   8313               STD     Z+3, R17
   \   00000022   01FC               MOVW    R31:R30, R25:R24
   \   00000024   0FE2               ADD     R30, R18
   \   00000026   1FF3               ADC     R31, R19
   \   00000028   E000               LDI     R16, 0
   \   0000002A   8300               ST      Z, R16
    306          	txBuf[pUART->TxFirst++] = ECMD_NMDWOACK >> 8;    // End command hb
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8122               LDD     R18, Z+2
   \   00000030   8133               LDD     R19, Z+3
   \   00000032   0189               MOVW    R17:R16, R19:R18
   \   00000034   5F0F               SUBI    R16, 255
   \   00000036   4F1F               SBCI    R17, 255
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8302               STD     Z+2, R16
   \   0000003C   8313               STD     Z+3, R17
   \   0000003E   01FC               MOVW    R31:R30, R25:R24
   \   00000040   0FE2               ADD     R30, R18
   \   00000042   1FF3               ADC     R31, R19
   \   00000044   E000               LDI     R16, 0
   \   00000046   8300               ST      Z, R16
    307          	txBuf[pUART->TxFirst++] = 0x00;                  // End data
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8122               LDD     R18, Z+2
   \   0000004C   8133               LDD     R19, Z+3
   \   0000004E   0189               MOVW    R17:R16, R19:R18
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   8302               STD     Z+2, R16
   \   00000058   8313               STD     Z+3, R17
   \   0000005A   01FC               MOVW    R31:R30, R25:R24
   \   0000005C   0FE2               ADD     R30, R18
   \   0000005E   1FF3               ADC     R31, R19
   \   00000060   E000               LDI     R16, 0
   \   00000062   8300               ST      Z, R16
    308          
    309          	txBuf[pUART->TxFirst++] = pUART->TxSeqCnt++;   // Sequence counter
   \   00000064   01FD               MOVW    R31:R30, R27:R26
   \   00000066   8122               LDD     R18, Z+2
   \   00000068   8133               LDD     R19, Z+3
   \   0000006A   0189               MOVW    R17:R16, R19:R18
   \   0000006C   5F0F               SUBI    R16, 255
   \   0000006E   4F1F               SBCI    R17, 255
   \   00000070   01FD               MOVW    R31:R30, R27:R26
   \   00000072   8302               STD     Z+2, R16
   \   00000074   8313               STD     Z+3, R17
   \   00000076   01FD               MOVW    R31:R30, R27:R26
   \   00000078   8501               LDD     R16, Z+9
   \   0000007A   2F10               MOV     R17, R16
   \   0000007C   9513               INC     R17
   \   0000007E   01FD               MOVW    R31:R30, R27:R26
   \   00000080   8711               STD     Z+9, R17
   \   00000082   01FC               MOVW    R31:R30, R25:R24
   \   00000084   0FE2               ADD     R30, R18
   \   00000086   1FF3               ADC     R31, R19
   \   00000088   8300               ST      Z, R16
    310          
    311          	txBuf[8] = pUART->TxFirst - 2;                    // correct length because stx's
   \   0000008A   01FD               MOVW    R31:R30, R27:R26
   \   0000008C   8102               LDD     R16, Z+2
   \   0000008E   8113               LDD     R17, Z+3
   \   00000090   5002               SUBI    R16, 2
   \   00000092   01FC               MOVW    R31:R30, R25:R24
   \   00000094   8700               STD     Z+8, R16
    312          	txBuf[9] = (pUART->TxFirst - 2) >> 8;             // packet len high
   \   00000096   01FD               MOVW    R31:R30, R27:R26
   \   00000098   8102               LDD     R16, Z+2
   \   0000009A   8113               LDD     R17, Z+3
   \   0000009C   5002               SUBI    R16, 2
   \   0000009E   4010               SBCI    R17, 0
   \   000000A0   2F01               MOV     R16, R17
   \   000000A2   E010               LDI     R17, 0
   \   000000A4   01FC               MOVW    R31:R30, R25:R24
   \   000000A6   8701               STD     Z+9, R16
    313          
    314          	txBuf[10] = CalcDSTxChecksum(pUART, 6);         // Get header checksum
   \   000000A8   E026               LDI     R18, 6
   \   000000AA   E030               LDI     R19, 0
   \   000000AC   018D               MOVW    R17:R16, R27:R26
   \   000000AE   ....               RCALL   CalcDSTxChecksum
   \   000000B0   01FC               MOVW    R31:R30, R25:R24
   \   000000B2   8702               STD     Z+10, R16
    315          
    316          	txBuf[pUART->TxFirst] = CalcDSTxChecksum(pUART, pUART->TxFirst-4); // Get checksum
   \   000000B4   01FD               MOVW    R31:R30, R27:R26
   \   000000B6   8122               LDD     R18, Z+2
   \   000000B8   8133               LDD     R19, Z+3
   \   000000BA   5024               SUBI    R18, 4
   \   000000BC   4030               SBCI    R19, 0
   \   000000BE   018D               MOVW    R17:R16, R27:R26
   \   000000C0   ....               RCALL   CalcDSTxChecksum
   \   000000C2   01FD               MOVW    R31:R30, R27:R26
   \   000000C4   8122               LDD     R18, Z+2
   \   000000C6   8133               LDD     R19, Z+3
   \   000000C8   01FC               MOVW    R31:R30, R25:R24
   \   000000CA   0FE2               ADD     R30, R18
   \   000000CC   1FF3               ADC     R31, R19
   \   000000CE   8300               ST      Z, R16
    317          	pUART->TxFirst++;                                        // OBS!! must be inc here due to ANSI standard !!!!
   \   000000D0   01FD               MOVW    R31:R30, R27:R26
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   5F0F               SUBI    R16, 255
   \   000000D8   4F1F               SBCI    R17, 255
   \   000000DA   8302               STD     Z+2, R16
   \   000000DC   8313               STD     Z+3, R17
    318          
    319          	txBuf[pUART->TxFirst++] = ANPRO10_EOT;            // End of transmission
   \   000000DE   01FD               MOVW    R31:R30, R27:R26
   \   000000E0   8122               LDD     R18, Z+2
   \   000000E2   8133               LDD     R19, Z+3
   \   000000E4   0189               MOVW    R17:R16, R19:R18
   \   000000E6   5F0F               SUBI    R16, 255
   \   000000E8   4F1F               SBCI    R17, 255
   \   000000EA   01FD               MOVW    R31:R30, R27:R26
   \   000000EC   8302               STD     Z+2, R16
   \   000000EE   8313               STD     Z+3, R17
   \   000000F0   01FC               MOVW    R31:R30, R25:R24
   \   000000F2   0FE2               ADD     R30, R18
   \   000000F4   1FF3               ADC     R31, R19
   \   000000F6   E004               LDI     R16, 4
   \   000000F8   8300               ST      Z, R16
    320          	pUART->TxCount          = pUART->TxFirst;         //bytes to send
   \   000000FA   01FD               MOVW    R31:R30, R27:R26
   \   000000FC   8102               LDD     R16, Z+2
   \   000000FE   8113               LDD     R17, Z+3
   \   00000100   01FD               MOVW    R31:R30, R27:R26
   \   00000102   8306               STD     Z+6, R16
   \   00000104   8317               STD     Z+7, R17
    321          	pUART->TxLast 			= 0;                                     // reset cunter
   \   00000106   01FD               MOVW    R31:R30, R27:R26
   \   00000108   E000               LDI     R16, 0
   \   0000010A   8304               STD     Z+4, R16
   \   0000010C   E000               LDI     R16, 0
   \   0000010E   8305               STD     Z+5, R16
    322          	// Turn on TXE for channel
    323          	OS_RetriggerTimer(&TimerUSART0);                     // and start timeout TX timer
   \   00000110   ....               LDI     R16, LOW(TimerUSART0)
   \   00000112   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000114   ........           CALL    OS_RetriggerTimer
    324          
    325          	MB_SetBit(PORTE, 0x04);                                // TXE0 on
   \   00000118   9100....           LDS     R16, (OS_Counters + 1)
   \   0000011C   7F00               ANDI    R16, 0xF0
   \   0000011E   2300               TST     R16
   \   00000120   F021               BREQ    ??Uart_BuildTail_0
   \   00000122   E909               LDI     R16, 153
   \   00000124   E010               LDI     R17, 0
   \   00000126   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_0:
   \   0000012A   94F8               CLI
   \   0000012C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000130   9503               INC     R16
   \   00000132   9300....           STS     (OS_Counters + 1), R16
   \   00000136   9A72               SBI     0x0E, 0x02
   \   00000138   9100....           LDS     R16, (OS_Counters + 1)
   \   0000013C   7F00               ANDI    R16, 0xF0
   \   0000013E   2300               TST     R16
   \   00000140   F021               BREQ    ??Uart_BuildTail_1
   \   00000142   E909               LDI     R16, 153
   \   00000144   E010               LDI     R17, 0
   \   00000146   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_1:
   \   0000014A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000014E   950A               DEC     R16
   \   00000150   9300....           STS     (OS_Counters + 1), R16
   \   00000154   9100....           LDS     R16, (OS_Counters + 1)
   \   00000158   2300               TST     R16
   \   0000015A   F409               BRNE    ??Uart_BuildTail_2
   \   0000015C   9478               SEI
    326          	OS_RetriggerTimer(&TimerUSART0On);                   // and start timer for on before TX
   \                     ??Uart_BuildTail_2:
   \   0000015E   ....               LDI     R16, LOW(TimerUSART0On)
   \   00000160   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000162   ........           CALL    OS_RetriggerTimer
    327          }
   \   00000166   E0E4               LDI     R30, 4
   \   00000168   ........           JMP     ?EPILOGUE_B4_L09
   \   0000016C                      REQUIRE _A_PORTE
    328          
    329          /*************************************************************************
    330          *
    331          * Build datablock for card status
    332          *
    333          *************************************************************************/
    334          

   \                                 In  segment CODE, align 2, keep-with-next
    335          void BuildStatusData(char ch) {
   \                     BuildStatusData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
    336          
    337          	short ntna;
    338          	UART[ch].RxSendReply = true;                               // flag for answering
   \   00000006   2F0A               MOV     R16, R26
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E242               LDI     R20, 34
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   E001               LDI     R16, 1
   \   0000001A   8F05               STD     Z+29, R16
    339          
    340          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS & 0xff;
   \   0000001C   2F0A               MOV     R16, R26
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E242               LDI     R20, 34
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   8120               LD      R18, Z
   \   00000030   8131               LDD     R19, Z+1
   \   00000032   2F0A               MOV     R16, R26
   \   00000034   E010               LDI     R17, 0
   \   00000036   E242               LDI     R20, 34
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   8102               LDD     R16, Z+2
   \   00000046   8113               LDD     R17, Z+3
   \   00000048   0F20               ADD     R18, R16
   \   0000004A   1F31               ADC     R19, R17
   \   0000004C   01F9               MOVW    R31:R30, R19:R18
   \   0000004E   EE09               LDI     R16, 233
   \   00000050   8300               ST      Z, R16
   \   00000052   2F0A               MOV     R16, R26
   \   00000054   E010               LDI     R17, 0
   \   00000056   E242               LDI     R20, 34
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000064   8102               LDD     R16, Z+2
   \   00000066   8113               LDD     R17, Z+3
   \   00000068   5F0F               SUBI    R16, 255
   \   0000006A   4F1F               SBCI    R17, 255
   \   0000006C   8302               STD     Z+2, R16
   \   0000006E   8313               STD     Z+3, R17
    341          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS >> 8;
   \   00000070   2F0A               MOV     R16, R26
   \   00000072   E010               LDI     R17, 0
   \   00000074   E242               LDI     R20, 34
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000082   8120               LD      R18, Z
   \   00000084   8131               LDD     R19, Z+1
   \   00000086   2F0A               MOV     R16, R26
   \   00000088   E010               LDI     R17, 0
   \   0000008A   E242               LDI     R20, 34
   \   0000008C   E050               LDI     R21, 0
   \   0000008E   ........           CALL    ?S_EC_MUL_L02
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000098   8102               LDD     R16, Z+2
   \   0000009A   8113               LDD     R17, Z+3
   \   0000009C   0F20               ADD     R18, R16
   \   0000009E   1F31               ADC     R19, R17
   \   000000A0   01F9               MOVW    R31:R30, R19:R18
   \   000000A2   E003               LDI     R16, 3
   \   000000A4   8300               ST      Z, R16
   \   000000A6   2F0A               MOV     R16, R26
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   E242               LDI     R20, 34
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   ........           CALL    ?S_EC_MUL_L02
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B8   8102               LDD     R16, Z+2
   \   000000BA   8113               LDD     R17, Z+3
   \   000000BC   5F0F               SUBI    R16, 255
   \   000000BE   4F1F               SBCI    R17, 255
   \   000000C0   8302               STD     Z+2, R16
   \   000000C2   8313               STD     Z+3, R17
    342          	ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000C4   2F0A               MOV     R16, R26
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E242               LDI     R20, 34
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D6   8102               LDD     R16, Z+2
   \   000000D8   8113               LDD     R17, Z+3
   \   000000DA   0128               MOVW    R5:R4, R17:R16
    343          	UART[ch].TxFirst += 2;                                      // two byte length
   \   000000DC   2F0A               MOV     R16, R26
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E242               LDI     R20, 34
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EE   8102               LDD     R16, Z+2
   \   000000F0   8113               LDD     R17, Z+3
   \   000000F2   5F0E               SUBI    R16, 254
   \   000000F4   4F1F               SBCI    R17, 255
   \   000000F6   8302               STD     Z+2, R16
   \   000000F8   8313               STD     Z+3, R17
    344          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = ch;               // channel
   \   000000FA   2F0A               MOV     R16, R26
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   E242               LDI     R20, 34
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   01F8               MOVW    R31:R30, R17:R16
   \   00000108   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010C   8120               LD      R18, Z
   \   0000010E   8131               LDD     R19, Z+1
   \   00000110   2F0A               MOV     R16, R26
   \   00000112   E010               LDI     R17, 0
   \   00000114   E242               LDI     R20, 34
   \   00000116   E050               LDI     R21, 0
   \   00000118   ........           CALL    ?S_EC_MUL_L02
   \   0000011C   01F8               MOVW    R31:R30, R17:R16
   \   0000011E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000120   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000122   8102               LDD     R16, Z+2
   \   00000124   8113               LDD     R17, Z+3
   \   00000126   0F20               ADD     R18, R16
   \   00000128   1F31               ADC     R19, R17
   \   0000012A   01F9               MOVW    R31:R30, R19:R18
   \   0000012C   83A0               ST      Z, R26
   \   0000012E   2F0A               MOV     R16, R26
   \   00000130   E010               LDI     R17, 0
   \   00000132   E242               LDI     R20, 34
   \   00000134   E050               LDI     R21, 0
   \   00000136   ........           CALL    ?S_EC_MUL_L02
   \   0000013A   01F8               MOVW    R31:R30, R17:R16
   \   0000013C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000140   8102               LDD     R16, Z+2
   \   00000142   8113               LDD     R17, Z+3
   \   00000144   5F0F               SUBI    R16, 255
   \   00000146   4F1F               SBCI    R17, 255
   \   00000148   8302               STD     Z+2, R16
   \   0000014A   8313               STD     Z+3, R17
    345          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = DEVICE_IO + UnitID;   // Product ID
   \   0000014C   9160....           LDS     R22, UnitID
   \   00000150   5F60               SUBI    R22, 240
   \   00000152   2F0A               MOV     R16, R26
   \   00000154   E010               LDI     R17, 0
   \   00000156   E242               LDI     R20, 34
   \   00000158   E050               LDI     R21, 0
   \   0000015A   ........           CALL    ?S_EC_MUL_L02
   \   0000015E   01F8               MOVW    R31:R30, R17:R16
   \   00000160   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000164   8120               LD      R18, Z
   \   00000166   8131               LDD     R19, Z+1
   \   00000168   2F0A               MOV     R16, R26
   \   0000016A   E010               LDI     R17, 0
   \   0000016C   E242               LDI     R20, 34
   \   0000016E   E050               LDI     R21, 0
   \   00000170   ........           CALL    ?S_EC_MUL_L02
   \   00000174   01F8               MOVW    R31:R30, R17:R16
   \   00000176   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000178   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017A   8102               LDD     R16, Z+2
   \   0000017C   8113               LDD     R17, Z+3
   \   0000017E   0F20               ADD     R18, R16
   \   00000180   1F31               ADC     R19, R17
   \   00000182   01F9               MOVW    R31:R30, R19:R18
   \   00000184   8360               ST      Z, R22
   \   00000186   2F0A               MOV     R16, R26
   \   00000188   E010               LDI     R17, 0
   \   0000018A   E242               LDI     R20, 34
   \   0000018C   E050               LDI     R21, 0
   \   0000018E   ........           CALL    ?S_EC_MUL_L02
   \   00000192   01F8               MOVW    R31:R30, R17:R16
   \   00000194   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000196   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000198   8102               LDD     R16, Z+2
   \   0000019A   8113               LDD     R17, Z+3
   \   0000019C   5F0F               SUBI    R16, 255
   \   0000019E   4F1F               SBCI    R17, 255
   \   000001A0   8302               STD     Z+2, R16
   \   000001A2   8313               STD     Z+3, R17
    346          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = MyAddress();           // unit adddress
   \   000001A4   2F0A               MOV     R16, R26
   \   000001A6   E010               LDI     R17, 0
   \   000001A8   E242               LDI     R20, 34
   \   000001AA   E050               LDI     R21, 0
   \   000001AC   ........           CALL    ?S_EC_MUL_L02
   \   000001B0   01F8               MOVW    R31:R30, R17:R16
   \   000001B2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B6   8182               LDD     R24, Z+2
   \   000001B8   8193               LDD     R25, Z+3
   \   000001BA   019C               MOVW    R19:R18, R25:R24
   \   000001BC   5F2F               SUBI    R18, 255
   \   000001BE   4F3F               SBCI    R19, 255
   \   000001C0   2F0A               MOV     R16, R26
   \   000001C2   E010               LDI     R17, 0
   \   000001C4   E242               LDI     R20, 34
   \   000001C6   E050               LDI     R21, 0
   \   000001C8   ........           CALL    ?S_EC_MUL_L02
   \   000001CC   01F8               MOVW    R31:R30, R17:R16
   \   000001CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D2   8322               STD     Z+2, R18
   \   000001D4   8333               STD     Z+3, R19
   \   000001D6   ........           CALL    MyAddress
   \   000001DA   2F20               MOV     R18, R16
   \   000001DC   2F0A               MOV     R16, R26
   \   000001DE   E010               LDI     R17, 0
   \   000001E0   E242               LDI     R20, 34
   \   000001E2   E050               LDI     R21, 0
   \   000001E4   ........           CALL    ?S_EC_MUL_L02
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001EE   8100               LD      R16, Z
   \   000001F0   8111               LDD     R17, Z+1
   \   000001F2   0F08               ADD     R16, R24
   \   000001F4   1F19               ADC     R17, R25
   \   000001F6   01F8               MOVW    R31:R30, R17:R16
   \   000001F8   8320               ST      Z, R18
    347          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION;       // software version */
   \   000001FA   2F0A               MOV     R16, R26
   \   000001FC   E010               LDI     R17, 0
   \   000001FE   E242               LDI     R20, 34
   \   00000200   E050               LDI     R21, 0
   \   00000202   ........           CALL    ?S_EC_MUL_L02
   \   00000206   01F8               MOVW    R31:R30, R17:R16
   \   00000208   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000020A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000020C   8120               LD      R18, Z
   \   0000020E   8131               LDD     R19, Z+1
   \   00000210   2F0A               MOV     R16, R26
   \   00000212   E010               LDI     R17, 0
   \   00000214   E242               LDI     R20, 34
   \   00000216   E050               LDI     R21, 0
   \   00000218   ........           CALL    ?S_EC_MUL_L02
   \   0000021C   01F8               MOVW    R31:R30, R17:R16
   \   0000021E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000220   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000222   8102               LDD     R16, Z+2
   \   00000224   8113               LDD     R17, Z+3
   \   00000226   0F20               ADD     R18, R16
   \   00000228   1F31               ADC     R19, R17
   \   0000022A   01F9               MOVW    R31:R30, R19:R18
   \   0000022C   E005               LDI     R16, 5
   \   0000022E   8300               ST      Z, R16
   \   00000230   2F0A               MOV     R16, R26
   \   00000232   E010               LDI     R17, 0
   \   00000234   E242               LDI     R20, 34
   \   00000236   E050               LDI     R21, 0
   \   00000238   ........           CALL    ?S_EC_MUL_L02
   \   0000023C   01F8               MOVW    R31:R30, R17:R16
   \   0000023E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000240   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000242   8102               LDD     R16, Z+2
   \   00000244   8113               LDD     R17, Z+3
   \   00000246   5F0F               SUBI    R16, 255
   \   00000248   4F1F               SBCI    R17, 255
   \   0000024A   8302               STD     Z+2, R16
   \   0000024C   8313               STD     Z+3, R17
    348          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = COMP_VERSION;        // cpmpability version
   \   0000024E   2F0A               MOV     R16, R26
   \   00000250   E010               LDI     R17, 0
   \   00000252   E242               LDI     R20, 34
   \   00000254   E050               LDI     R21, 0
   \   00000256   ........           CALL    ?S_EC_MUL_L02
   \   0000025A   01F8               MOVW    R31:R30, R17:R16
   \   0000025C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000025E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000260   8120               LD      R18, Z
   \   00000262   8131               LDD     R19, Z+1
   \   00000264   2F0A               MOV     R16, R26
   \   00000266   E010               LDI     R17, 0
   \   00000268   E242               LDI     R20, 34
   \   0000026A   E050               LDI     R21, 0
   \   0000026C   ........           CALL    ?S_EC_MUL_L02
   \   00000270   01F8               MOVW    R31:R30, R17:R16
   \   00000272   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000274   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000276   8102               LDD     R16, Z+2
   \   00000278   8113               LDD     R17, Z+3
   \   0000027A   0F20               ADD     R18, R16
   \   0000027C   1F31               ADC     R19, R17
   \   0000027E   01F9               MOVW    R31:R30, R19:R18
   \   00000280   E001               LDI     R16, 1
   \   00000282   8300               ST      Z, R16
   \   00000284   2F0A               MOV     R16, R26
   \   00000286   E010               LDI     R17, 0
   \   00000288   E242               LDI     R20, 34
   \   0000028A   E050               LDI     R21, 0
   \   0000028C   ........           CALL    ?S_EC_MUL_L02
   \   00000290   01F8               MOVW    R31:R30, R17:R16
   \   00000292   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000294   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000296   8102               LDD     R16, Z+2
   \   00000298   8113               LDD     R17, Z+3
   \   0000029A   5F0F               SUBI    R16, 255
   \   0000029C   4F1F               SBCI    R17, 255
   \   0000029E   8302               STD     Z+2, R16
   \   000002A0   8313               STD     Z+3, R17
    349          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = STORE_VERSION;        // cpmpability version
   \   000002A2   2F0A               MOV     R16, R26
   \   000002A4   E010               LDI     R17, 0
   \   000002A6   E242               LDI     R20, 34
   \   000002A8   E050               LDI     R21, 0
   \   000002AA   ........           CALL    ?S_EC_MUL_L02
   \   000002AE   01F8               MOVW    R31:R30, R17:R16
   \   000002B0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002B2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002B4   8120               LD      R18, Z
   \   000002B6   8131               LDD     R19, Z+1
   \   000002B8   2F0A               MOV     R16, R26
   \   000002BA   E010               LDI     R17, 0
   \   000002BC   E242               LDI     R20, 34
   \   000002BE   E050               LDI     R21, 0
   \   000002C0   ........           CALL    ?S_EC_MUL_L02
   \   000002C4   01F8               MOVW    R31:R30, R17:R16
   \   000002C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002CA   8102               LDD     R16, Z+2
   \   000002CC   8113               LDD     R17, Z+3
   \   000002CE   0F20               ADD     R18, R16
   \   000002D0   1F31               ADC     R19, R17
   \   000002D2   01F9               MOVW    R31:R30, R19:R18
   \   000002D4   E002               LDI     R16, 2
   \   000002D6   8300               ST      Z, R16
   \   000002D8   2F0A               MOV     R16, R26
   \   000002DA   E010               LDI     R17, 0
   \   000002DC   E242               LDI     R20, 34
   \   000002DE   E050               LDI     R21, 0
   \   000002E0   ........           CALL    ?S_EC_MUL_L02
   \   000002E4   01F8               MOVW    R31:R30, R17:R16
   \   000002E6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002E8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002EA   8102               LDD     R16, Z+2
   \   000002EC   8113               LDD     R17, Z+3
   \   000002EE   5F0F               SUBI    R16, 255
   \   000002F0   4F1F               SBCI    R17, 255
   \   000002F2   8302               STD     Z+2, R16
   \   000002F4   8313               STD     Z+3, R17
    350          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \   000002F6   2F0A               MOV     R16, R26
   \   000002F8   E010               LDI     R17, 0
   \   000002FA   E242               LDI     R20, 34
   \   000002FC   E050               LDI     R21, 0
   \   000002FE   ........           CALL    ?S_EC_MUL_L02
   \   00000302   01F8               MOVW    R31:R30, R17:R16
   \   00000304   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000306   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000308   8120               LD      R18, Z
   \   0000030A   8131               LDD     R19, Z+1
   \   0000030C   2F0A               MOV     R16, R26
   \   0000030E   E010               LDI     R17, 0
   \   00000310   E242               LDI     R20, 34
   \   00000312   E050               LDI     R21, 0
   \   00000314   ........           CALL    ?S_EC_MUL_L02
   \   00000318   01F8               MOVW    R31:R30, R17:R16
   \   0000031A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000031C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000031E   8102               LDD     R16, Z+2
   \   00000320   8113               LDD     R17, Z+3
   \   00000322   0F20               ADD     R18, R16
   \   00000324   1F31               ADC     R19, R17
   \   00000326   01F9               MOVW    R31:R30, R19:R18
   \   00000328   E906               LDI     R16, 150
   \   0000032A   8300               ST      Z, R16
   \   0000032C   2F0A               MOV     R16, R26
   \   0000032E   E010               LDI     R17, 0
   \   00000330   E242               LDI     R20, 34
   \   00000332   E050               LDI     R21, 0
   \   00000334   ........           CALL    ?S_EC_MUL_L02
   \   00000338   01F8               MOVW    R31:R30, R17:R16
   \   0000033A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000033C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000033E   8102               LDD     R16, Z+2
   \   00000340   8113               LDD     R17, Z+3
   \   00000342   5F0F               SUBI    R16, 255
   \   00000344   4F1F               SBCI    R17, 255
   \   00000346   8302               STD     Z+2, R16
   \   00000348   8313               STD     Z+3, R17
    351          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   0000034A   2F0A               MOV     R16, R26
   \   0000034C   E010               LDI     R17, 0
   \   0000034E   E242               LDI     R20, 34
   \   00000350   E050               LDI     R21, 0
   \   00000352   ........           CALL    ?S_EC_MUL_L02
   \   00000356   01F8               MOVW    R31:R30, R17:R16
   \   00000358   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000035A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000035C   8120               LD      R18, Z
   \   0000035E   8131               LDD     R19, Z+1
   \   00000360   2F0A               MOV     R16, R26
   \   00000362   E010               LDI     R17, 0
   \   00000364   E242               LDI     R20, 34
   \   00000366   E050               LDI     R21, 0
   \   00000368   ........           CALL    ?S_EC_MUL_L02
   \   0000036C   01F8               MOVW    R31:R30, R17:R16
   \   0000036E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000370   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000372   8102               LDD     R16, Z+2
   \   00000374   8113               LDD     R17, Z+3
   \   00000376   0F20               ADD     R18, R16
   \   00000378   1F31               ADC     R19, R17
   \   0000037A   01F9               MOVW    R31:R30, R19:R18
   \   0000037C   E000               LDI     R16, 0
   \   0000037E   8300               ST      Z, R16
   \   00000380   2F0A               MOV     R16, R26
   \   00000382   E010               LDI     R17, 0
   \   00000384   E242               LDI     R20, 34
   \   00000386   E050               LDI     R21, 0
   \   00000388   ........           CALL    ?S_EC_MUL_L02
   \   0000038C   01F8               MOVW    R31:R30, R17:R16
   \   0000038E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000390   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000392   8102               LDD     R16, Z+2
   \   00000394   8113               LDD     R17, Z+3
   \   00000396   5F0F               SUBI    R16, 255
   \   00000398   4F1F               SBCI    R17, 255
   \   0000039A   8302               STD     Z+2, R16
   \   0000039C   8313               STD     Z+3, R17
    352          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \   0000039E   2F0A               MOV     R16, R26
   \   000003A0   E010               LDI     R17, 0
   \   000003A2   E242               LDI     R20, 34
   \   000003A4   E050               LDI     R21, 0
   \   000003A6   ........           CALL    ?S_EC_MUL_L02
   \   000003AA   01F8               MOVW    R31:R30, R17:R16
   \   000003AC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003AE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003B0   8120               LD      R18, Z
   \   000003B2   8131               LDD     R19, Z+1
   \   000003B4   2F0A               MOV     R16, R26
   \   000003B6   E010               LDI     R17, 0
   \   000003B8   E242               LDI     R20, 34
   \   000003BA   E050               LDI     R21, 0
   \   000003BC   ........           CALL    ?S_EC_MUL_L02
   \   000003C0   01F8               MOVW    R31:R30, R17:R16
   \   000003C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003C6   8102               LDD     R16, Z+2
   \   000003C8   8113               LDD     R17, Z+3
   \   000003CA   0F20               ADD     R18, R16
   \   000003CC   1F31               ADC     R19, R17
   \   000003CE   01F9               MOVW    R31:R30, R19:R18
   \   000003D0   E900               LDI     R16, 144
   \   000003D2   8300               ST      Z, R16
   \   000003D4   2F0A               MOV     R16, R26
   \   000003D6   E010               LDI     R17, 0
   \   000003D8   E242               LDI     R20, 34
   \   000003DA   E050               LDI     R21, 0
   \   000003DC   ........           CALL    ?S_EC_MUL_L02
   \   000003E0   01F8               MOVW    R31:R30, R17:R16
   \   000003E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003E6   8102               LDD     R16, Z+2
   \   000003E8   8113               LDD     R17, Z+3
   \   000003EA   5F0F               SUBI    R16, 255
   \   000003EC   4F1F               SBCI    R17, 255
   \   000003EE   8302               STD     Z+2, R16
   \   000003F0   8313               STD     Z+3, R17
    353          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
   \   000003F2   2F0A               MOV     R16, R26
   \   000003F4   E010               LDI     R17, 0
   \   000003F6   E242               LDI     R20, 34
   \   000003F8   E050               LDI     R21, 0
   \   000003FA   ........           CALL    ?S_EC_MUL_L02
   \   000003FE   01F8               MOVW    R31:R30, R17:R16
   \   00000400   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000402   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000404   8120               LD      R18, Z
   \   00000406   8131               LDD     R19, Z+1
   \   00000408   2F0A               MOV     R16, R26
   \   0000040A   E010               LDI     R17, 0
   \   0000040C   E242               LDI     R20, 34
   \   0000040E   E050               LDI     R21, 0
   \   00000410   ........           CALL    ?S_EC_MUL_L02
   \   00000414   01F8               MOVW    R31:R30, R17:R16
   \   00000416   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000418   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000041A   8102               LDD     R16, Z+2
   \   0000041C   8113               LDD     R17, Z+3
   \   0000041E   0F20               ADD     R18, R16
   \   00000420   1F31               ADC     R19, R17
   \   00000422   01F9               MOVW    R31:R30, R19:R18
   \   00000424   E001               LDI     R16, 1
   \   00000426   8300               ST      Z, R16
   \   00000428   2F0A               MOV     R16, R26
   \   0000042A   E010               LDI     R17, 0
   \   0000042C   E242               LDI     R20, 34
   \   0000042E   E050               LDI     R21, 0
   \   00000430   ........           CALL    ?S_EC_MUL_L02
   \   00000434   01F8               MOVW    R31:R30, R17:R16
   \   00000436   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000438   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000043A   8102               LDD     R16, Z+2
   \   0000043C   8113               LDD     R17, Z+3
   \   0000043E   5F0F               SUBI    R16, 255
   \   00000440   4F1F               SBCI    R17, 255
   \   00000442   8302               STD     Z+2, R16
   \   00000444   8313               STD     Z+3, R17
    354          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus;                  // restart flag
   \   00000446   9160....           LDS     R22, RestartStatus
   \   0000044A   2F0A               MOV     R16, R26
   \   0000044C   E010               LDI     R17, 0
   \   0000044E   E242               LDI     R20, 34
   \   00000450   E050               LDI     R21, 0
   \   00000452   ........           CALL    ?S_EC_MUL_L02
   \   00000456   01F8               MOVW    R31:R30, R17:R16
   \   00000458   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000045A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000045C   8120               LD      R18, Z
   \   0000045E   8131               LDD     R19, Z+1
   \   00000460   2F0A               MOV     R16, R26
   \   00000462   E010               LDI     R17, 0
   \   00000464   E242               LDI     R20, 34
   \   00000466   E050               LDI     R21, 0
   \   00000468   ........           CALL    ?S_EC_MUL_L02
   \   0000046C   01F8               MOVW    R31:R30, R17:R16
   \   0000046E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000470   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000472   8102               LDD     R16, Z+2
   \   00000474   8113               LDD     R17, Z+3
   \   00000476   0F20               ADD     R18, R16
   \   00000478   1F31               ADC     R19, R17
   \   0000047A   01F9               MOVW    R31:R30, R19:R18
   \   0000047C   8360               ST      Z, R22
   \   0000047E   2F0A               MOV     R16, R26
   \   00000480   E010               LDI     R17, 0
   \   00000482   E242               LDI     R20, 34
   \   00000484   E050               LDI     R21, 0
   \   00000486   ........           CALL    ?S_EC_MUL_L02
   \   0000048A   01F8               MOVW    R31:R30, R17:R16
   \   0000048C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000048E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000490   8102               LDD     R16, Z+2
   \   00000492   8113               LDD     R17, Z+3
   \   00000494   5F0F               SUBI    R16, 255
   \   00000496   4F1F               SBCI    R17, 255
   \   00000498   8302               STD     Z+2, R16
   \   0000049A   8313               STD     Z+3, R17
    355          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROGTYPE_APP;                // Application program
   \   0000049C   2F0A               MOV     R16, R26
   \   0000049E   E010               LDI     R17, 0
   \   000004A0   E242               LDI     R20, 34
   \   000004A2   E050               LDI     R21, 0
   \   000004A4   ........           CALL    ?S_EC_MUL_L02
   \   000004A8   01F8               MOVW    R31:R30, R17:R16
   \   000004AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004AE   8120               LD      R18, Z
   \   000004B0   8131               LDD     R19, Z+1
   \   000004B2   2F0A               MOV     R16, R26
   \   000004B4   E010               LDI     R17, 0
   \   000004B6   E242               LDI     R20, 34
   \   000004B8   E050               LDI     R21, 0
   \   000004BA   ........           CALL    ?S_EC_MUL_L02
   \   000004BE   01F8               MOVW    R31:R30, R17:R16
   \   000004C0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004C2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004C4   8102               LDD     R16, Z+2
   \   000004C6   8113               LDD     R17, Z+3
   \   000004C8   0F20               ADD     R18, R16
   \   000004CA   1F31               ADC     R19, R17
   \   000004CC   01F9               MOVW    R31:R30, R19:R18
   \   000004CE   E001               LDI     R16, 1
   \   000004D0   8300               ST      Z, R16
   \   000004D2   2F0A               MOV     R16, R26
   \   000004D4   E010               LDI     R17, 0
   \   000004D6   E242               LDI     R20, 34
   \   000004D8   E050               LDI     R21, 0
   \   000004DA   ........           CALL    ?S_EC_MUL_L02
   \   000004DE   01F8               MOVW    R31:R30, R17:R16
   \   000004E0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004E2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004E4   8102               LDD     R16, Z+2
   \   000004E6   8113               LDD     R17, Z+3
   \   000004E8   5F0F               SUBI    R16, 255
   \   000004EA   4F1F               SBCI    R17, 255
   \   000004EC   8302               STD     Z+2, R16
   \   000004EE   8313               STD     Z+3, R17
    356          
    357          	UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000004F0   2F0A               MOV     R16, R26
   \   000004F2   E010               LDI     R17, 0
   \   000004F4   E242               LDI     R20, 34
   \   000004F6   E050               LDI     R21, 0
   \   000004F8   ........           CALL    ?S_EC_MUL_L02
   \   000004FC   01F8               MOVW    R31:R30, R17:R16
   \   000004FE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000500   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000502   8122               LDD     R18, Z+2
   \   00000504   8133               LDD     R19, Z+3
   \   00000506   2D04               MOV     R16, R4
   \   00000508   1B20               SUB     R18, R16
   \   0000050A   5022               SUBI    R18, 2
   \   0000050C   2F0A               MOV     R16, R26
   \   0000050E   E010               LDI     R17, 0
   \   00000510   E242               LDI     R20, 34
   \   00000512   E050               LDI     R21, 0
   \   00000514   ........           CALL    ?S_EC_MUL_L02
   \   00000518   01F8               MOVW    R31:R30, R17:R16
   \   0000051A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000051C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000051E   8100               LD      R16, Z
   \   00000520   8111               LDD     R17, Z+1
   \   00000522   0D04               ADD     R16, R4
   \   00000524   1D15               ADC     R17, R5
   \   00000526   01F8               MOVW    R31:R30, R17:R16
   \   00000528   8320               ST      Z, R18
    358          	UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000052A   2F0A               MOV     R16, R26
   \   0000052C   E010               LDI     R17, 0
   \   0000052E   E242               LDI     R20, 34
   \   00000530   E050               LDI     R21, 0
   \   00000532   ........           CALL    ?S_EC_MUL_L02
   \   00000536   01F8               MOVW    R31:R30, R17:R16
   \   00000538   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000053A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000053C   8182               LDD     R24, Z+2
   \   0000053E   8193               LDD     R25, Z+3
   \   00000540   1984               SUB     R24, R4
   \   00000542   0995               SBC     R25, R5
   \   00000544   9702               SBIW    R25:R24, 2
   \   00000546   2F89               MOV     R24, R25
   \   00000548   E090               LDI     R25, 0
   \   0000054A   2F0A               MOV     R16, R26
   \   0000054C   E010               LDI     R17, 0
   \   0000054E   E242               LDI     R20, 34
   \   00000550   E050               LDI     R21, 0
   \   00000552   ........           CALL    ?S_EC_MUL_L02
   \   00000556   01F8               MOVW    R31:R30, R17:R16
   \   00000558   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000055A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000055C   8100               LD      R16, Z
   \   0000055E   8111               LDD     R17, Z+1
   \   00000560   0D04               ADD     R16, R4
   \   00000562   1D15               ADC     R17, R5
   \   00000564   01F8               MOVW    R31:R30, R17:R16
   \   00000566   8381               STD     Z+1, R24
    359          
    360          	RestartStatus = 0;                                                       // set reset stat to 0 = read
   \   00000568   E000               LDI     R16, 0
   \   0000056A   9300....           STS     RestartStatus, R16
    361          }
   \   0000056E   E0E6               LDI     R30, 6
   \   00000570   ........           JMP     ?EPILOGUE_B6_L09
    362          
    363          /*************************************************************************
    364          *
    365          * Build EEPROM data package
    366          *
    367          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    368          void BuildEEPROMData(char ch, unsigned char *pointer) {
   \                     BuildEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    369          
    370          	short ntna;
    371          	char channel;
    372          	UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E242               LDI     R20, 34
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F05               STD     Z+29, R16
    373          
    374          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA & 0xff;
   \   0000001E   2F08               MOV     R16, R24
   \   00000020   E010               LDI     R17, 0
   \   00000022   E242               LDI     R20, 34
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8120               LD      R18, Z
   \   00000032   8131               LDD     R19, Z+1
   \   00000034   2F08               MOV     R16, R24
   \   00000036   E010               LDI     R17, 0
   \   00000038   E242               LDI     R20, 34
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F20               ADD     R18, R16
   \   0000004C   1F31               ADC     R19, R17
   \   0000004E   01F9               MOVW    R31:R30, R19:R18
   \   00000050   E309               LDI     R16, 57
   \   00000052   8300               ST      Z, R16
   \   00000054   2F08               MOV     R16, R24
   \   00000056   E010               LDI     R17, 0
   \   00000058   E242               LDI     R20, 34
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    375          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA >> 8;
   \   00000072   2F08               MOV     R16, R24
   \   00000074   E010               LDI     R17, 0
   \   00000076   E242               LDI     R20, 34
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8120               LD      R18, Z
   \   00000086   8131               LDD     R19, Z+1
   \   00000088   2F08               MOV     R16, R24
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E242               LDI     R20, 34
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F20               ADD     R18, R16
   \   000000A0   1F31               ADC     R19, R17
   \   000000A2   01F9               MOVW    R31:R30, R19:R18
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F08               MOV     R16, R24
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E242               LDI     R20, 34
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    376          	ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000C6   2F08               MOV     R16, R24
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E242               LDI     R20, 34
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0128               MOVW    R5:R4, R17:R16
    377          	UART[ch].TxFirst += 2;                                      // two byte length
   \   000000DE   2F08               MOV     R16, R24
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E242               LDI     R20, 34
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    378          
    379          	channel = pointer[0];
   \   000000FC   910C               LD      R16, X
   \   000000FE   2E60               MOV     R6, R16
    380          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = channel; //channel
   \   00000100   2F08               MOV     R16, R24
   \   00000102   E010               LDI     R17, 0
   \   00000104   E242               LDI     R20, 34
   \   00000106   E050               LDI     R21, 0
   \   00000108   ........           CALL    ?S_EC_MUL_L02
   \   0000010C   01F8               MOVW    R31:R30, R17:R16
   \   0000010E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000110   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000112   8120               LD      R18, Z
   \   00000114   8131               LDD     R19, Z+1
   \   00000116   2F08               MOV     R16, R24
   \   00000118   E010               LDI     R17, 0
   \   0000011A   E242               LDI     R20, 34
   \   0000011C   E050               LDI     R21, 0
   \   0000011E   ........           CALL    ?S_EC_MUL_L02
   \   00000122   01F8               MOVW    R31:R30, R17:R16
   \   00000124   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000126   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000128   8102               LDD     R16, Z+2
   \   0000012A   8113               LDD     R17, Z+3
   \   0000012C   0F20               ADD     R18, R16
   \   0000012E   1F31               ADC     R19, R17
   \   00000130   01F9               MOVW    R31:R30, R19:R18
   \   00000132   8260               ST      Z, R6
   \   00000134   2F08               MOV     R16, R24
   \   00000136   E010               LDI     R17, 0
   \   00000138   E242               LDI     R20, 34
   \   0000013A   E050               LDI     R21, 0
   \   0000013C   ........           CALL    ?S_EC_MUL_L02
   \   00000140   01F8               MOVW    R31:R30, R17:R16
   \   00000142   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000144   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000146   8102               LDD     R16, Z+2
   \   00000148   8113               LDD     R17, Z+3
   \   0000014A   5F0F               SUBI    R16, 255
   \   0000014C   4F1F               SBCI    R17, 255
   \   0000014E   8302               STD     Z+2, R16
   \   00000150   8313               STD     Z+3, R17
    381          
    382          	ReadEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char *)&UART[ch].pTxBuffer[UART[ch].TxFirst]);
   \   00000152   2F08               MOV     R16, R24
   \   00000154   E010               LDI     R17, 0
   \   00000156   E242               LDI     R20, 34
   \   00000158   E050               LDI     R21, 0
   \   0000015A   ........           CALL    ?S_EC_MUL_L02
   \   0000015E   01F8               MOVW    R31:R30, R17:R16
   \   00000160   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000164   8120               LD      R18, Z
   \   00000166   8131               LDD     R19, Z+1
   \   00000168   2F08               MOV     R16, R24
   \   0000016A   E010               LDI     R17, 0
   \   0000016C   E242               LDI     R20, 34
   \   0000016E   E050               LDI     R21, 0
   \   00000170   ........           CALL    ?S_EC_MUL_L02
   \   00000174   01F8               MOVW    R31:R30, R17:R16
   \   00000176   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000178   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017A   8102               LDD     R16, Z+2
   \   0000017C   8113               LDD     R17, Z+3
   \   0000017E   0F20               ADD     R18, R16
   \   00000180   1F31               ADC     R19, R17
   \   00000182   01A9               MOVW    R21:R20, R19:R18
   \   00000184   E024               LDI     R18, 4
   \   00000186   01BA               MOVW    R23:R22, R21:R20
   \   00000188   2D06               MOV     R16, R6
   \   0000018A   E010               LDI     R17, 0
   \   0000018C   E048               LDI     R20, 8
   \   0000018E   E050               LDI     R21, 0
   \   00000190   ........           CALL    ?S_EC_MUL_L02
   \   00000194   01AB               MOVW    R21:R20, R23:R22
   \   00000196   ........           CALL    ReadEEPROMBuffer
    383          	UART[ch].TxFirst += sizeof(float);
   \   0000019A   2F08               MOV     R16, R24
   \   0000019C   E010               LDI     R17, 0
   \   0000019E   E242               LDI     R20, 34
   \   000001A0   E050               LDI     R21, 0
   \   000001A2   ........           CALL    ?S_EC_MUL_L02
   \   000001A6   01F8               MOVW    R31:R30, R17:R16
   \   000001A8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AC   8102               LDD     R16, Z+2
   \   000001AE   8113               LDD     R17, Z+3
   \   000001B0   5F0C               SUBI    R16, 252
   \   000001B2   4F1F               SBCI    R17, 255
   \   000001B4   8302               STD     Z+2, R16
   \   000001B6   8313               STD     Z+3, R17
    384          	ReadEEPROMBuffer((channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char *)&UART[ch].pTxBuffer[UART[ch].TxFirst]);
   \   000001B8   2F08               MOV     R16, R24
   \   000001BA   E010               LDI     R17, 0
   \   000001BC   E242               LDI     R20, 34
   \   000001BE   E050               LDI     R21, 0
   \   000001C0   ........           CALL    ?S_EC_MUL_L02
   \   000001C4   01F8               MOVW    R31:R30, R17:R16
   \   000001C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CA   8120               LD      R18, Z
   \   000001CC   8131               LDD     R19, Z+1
   \   000001CE   2F08               MOV     R16, R24
   \   000001D0   E010               LDI     R17, 0
   \   000001D2   E242               LDI     R20, 34
   \   000001D4   E050               LDI     R21, 0
   \   000001D6   ........           CALL    ?S_EC_MUL_L02
   \   000001DA   01F8               MOVW    R31:R30, R17:R16
   \   000001DC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001DE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E0   8102               LDD     R16, Z+2
   \   000001E2   8113               LDD     R17, Z+3
   \   000001E4   0F20               ADD     R18, R16
   \   000001E6   1F31               ADC     R19, R17
   \   000001E8   01A9               MOVW    R21:R20, R19:R18
   \   000001EA   E024               LDI     R18, 4
   \   000001EC   01BA               MOVW    R23:R22, R21:R20
   \   000001EE   2D06               MOV     R16, R6
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E048               LDI     R20, 8
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   5F0C               SUBI    R16, 252
   \   000001FC   4F1F               SBCI    R17, 255
   \   000001FE   01AB               MOVW    R21:R20, R23:R22
   \   00000200   ........           CALL    ReadEEPROMBuffer
    385          	UART[ch].TxFirst += sizeof(float);
   \   00000204   2F08               MOV     R16, R24
   \   00000206   E010               LDI     R17, 0
   \   00000208   E242               LDI     R20, 34
   \   0000020A   E050               LDI     R21, 0
   \   0000020C   ........           CALL    ?S_EC_MUL_L02
   \   00000210   01F8               MOVW    R31:R30, R17:R16
   \   00000212   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000214   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000216   8102               LDD     R16, Z+2
   \   00000218   8113               LDD     R17, Z+3
   \   0000021A   5F0C               SUBI    R16, 252
   \   0000021C   4F1F               SBCI    R17, 255
   \   0000021E   8302               STD     Z+2, R16
   \   00000220   8313               STD     Z+3, R17
    386          
    387          	UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000222   2F08               MOV     R16, R24
   \   00000224   E010               LDI     R17, 0
   \   00000226   E242               LDI     R20, 34
   \   00000228   E050               LDI     R21, 0
   \   0000022A   ........           CALL    ?S_EC_MUL_L02
   \   0000022E   01F8               MOVW    R31:R30, R17:R16
   \   00000230   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000232   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000234   8122               LDD     R18, Z+2
   \   00000236   8133               LDD     R19, Z+3
   \   00000238   2D04               MOV     R16, R4
   \   0000023A   1B20               SUB     R18, R16
   \   0000023C   5022               SUBI    R18, 2
   \   0000023E   2F08               MOV     R16, R24
   \   00000240   E010               LDI     R17, 0
   \   00000242   E242               LDI     R20, 34
   \   00000244   E050               LDI     R21, 0
   \   00000246   ........           CALL    ?S_EC_MUL_L02
   \   0000024A   01F8               MOVW    R31:R30, R17:R16
   \   0000024C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000024E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000250   8100               LD      R16, Z
   \   00000252   8111               LDD     R17, Z+1
   \   00000254   0D04               ADD     R16, R4
   \   00000256   1D15               ADC     R17, R5
   \   00000258   01F8               MOVW    R31:R30, R17:R16
   \   0000025A   8320               ST      Z, R18
    388          	UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000025C   2F08               MOV     R16, R24
   \   0000025E   E010               LDI     R17, 0
   \   00000260   E242               LDI     R20, 34
   \   00000262   E050               LDI     R21, 0
   \   00000264   ........           CALL    ?S_EC_MUL_L02
   \   00000268   01F8               MOVW    R31:R30, R17:R16
   \   0000026A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000026C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000026E   8102               LDD     R16, Z+2
   \   00000270   8113               LDD     R17, Z+3
   \   00000272   1904               SUB     R16, R4
   \   00000274   0915               SBC     R17, R5
   \   00000276   5002               SUBI    R16, 2
   \   00000278   4010               SBCI    R17, 0
   \   0000027A   2F01               MOV     R16, R17
   \   0000027C   E010               LDI     R17, 0
   \   0000027E   2F20               MOV     R18, R16
   \   00000280   2F08               MOV     R16, R24
   \   00000282   E010               LDI     R17, 0
   \   00000284   E242               LDI     R20, 34
   \   00000286   E050               LDI     R21, 0
   \   00000288   ........           CALL    ?S_EC_MUL_L02
   \   0000028C   01F8               MOVW    R31:R30, R17:R16
   \   0000028E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000290   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000292   8100               LD      R16, Z
   \   00000294   8111               LDD     R17, Z+1
   \   00000296   0D04               ADD     R16, R4
   \   00000298   1D15               ADC     R17, R5
   \   0000029A   01F8               MOVW    R31:R30, R17:R16
   \   0000029C   8321               STD     Z+1, R18
    389          }
   \   0000029E   E0E7               LDI     R30, 7
   \   000002A0   ........           JMP     ?EPILOGUE_B7_L09
    390          
    391          
    392          /*************************************************************************
    393          *
    394          * Build datablock for Internal AD
    395          *
    396          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    397          void BuildADInt(char ch, unsigned char *pointer) {
   \                     BuildADInt:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
    398          
    399          	short ntna, i;
    400          	UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E242               LDI     R20, 34
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01D8               MOVW    R27:R26, R17:R16
   \   00000016   ....               SUBI    R26, LOW((-(UART + 29) & 0xFFFF))
   \   00000018   ....               SBCI    R27, HIGH((-(UART + 29) & 0xFFFF))
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   930C               ST      X, R16
    401          
    402          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA & 0xff;
   \   0000001E   2F06               MOV     R16, R22
   \   00000020   E010               LDI     R17, 0
   \   00000022   E242               LDI     R20, 34
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01D8               MOVW    R27:R26, R17:R16
   \   0000002C   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000030   918D               LD      R24, X+
   \   00000032   919C               LD      R25, X
   \   00000034   9711               SBIW    R27:R26, 1
   \   00000036   2F06               MOV     R16, R22
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E242               LDI     R20, 34
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01D8               MOVW    R27:R26, R17:R16
   \   00000044   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   00000046   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000048   910D               LD      R16, X+
   \   0000004A   911C               LD      R17, X
   \   0000004C   9711               SBIW    R27:R26, 1
   \   0000004E   0F80               ADD     R24, R16
   \   00000050   1F91               ADC     R25, R17
   \   00000052   01DC               MOVW    R27:R26, R25:R24
   \   00000054   E403               LDI     R16, 67
   \   00000056   930C               ST      X, R16
   \   00000058   2F06               MOV     R16, R22
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E242               LDI     R20, 34
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01D8               MOVW    R27:R26, R17:R16
   \   00000066   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   00000068   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   0000006A   910D               LD      R16, X+
   \   0000006C   911C               LD      R17, X
   \   0000006E   5F0F               SUBI    R16, 255
   \   00000070   4F1F               SBCI    R17, 255
   \   00000072   931C               ST      X, R17
   \   00000074   930E               ST      -X, R16
    403          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA >> 8;
   \   00000076   2F06               MOV     R16, R22
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E242               LDI     R20, 34
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   01D8               MOVW    R27:R26, R17:R16
   \   00000084   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000086   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000088   918D               LD      R24, X+
   \   0000008A   919C               LD      R25, X
   \   0000008C   9711               SBIW    R27:R26, 1
   \   0000008E   2F06               MOV     R16, R22
   \   00000090   E010               LDI     R17, 0
   \   00000092   E242               LDI     R20, 34
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01D8               MOVW    R27:R26, R17:R16
   \   0000009C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000009E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000000A0   910D               LD      R16, X+
   \   000000A2   911C               LD      R17, X
   \   000000A4   9711               SBIW    R27:R26, 1
   \   000000A6   0F80               ADD     R24, R16
   \   000000A8   1F91               ADC     R25, R17
   \   000000AA   01DC               MOVW    R27:R26, R25:R24
   \   000000AC   E004               LDI     R16, 4
   \   000000AE   930C               ST      X, R16
   \   000000B0   2F06               MOV     R16, R22
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   E242               LDI     R20, 34
   \   000000B6   E050               LDI     R21, 0
   \   000000B8   ........           CALL    ?S_EC_MUL_L02
   \   000000BC   01D8               MOVW    R27:R26, R17:R16
   \   000000BE   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000000C0   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000000C2   910D               LD      R16, X+
   \   000000C4   911C               LD      R17, X
   \   000000C6   5F0F               SUBI    R16, 255
   \   000000C8   4F1F               SBCI    R17, 255
   \   000000CA   931C               ST      X, R17
   \   000000CC   930E               ST      -X, R16
    404          	ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000CE   2F06               MOV     R16, R22
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E242               LDI     R20, 34
   \   000000D4   E050               LDI     R21, 0
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   01D8               MOVW    R27:R26, R17:R16
   \   000000DC   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000000DE   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000000E0   910D               LD      R16, X+
   \   000000E2   911C               LD      R17, X
   \   000000E4   9711               SBIW    R27:R26, 1
   \   000000E6   0198               MOVW    R19:R18, R17:R16
    405          	UART[ch].TxFirst += 2;                                      // two byte length
   \   000000E8   2F06               MOV     R16, R22
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   E242               LDI     R20, 34
   \   000000EE   E050               LDI     R21, 0
   \   000000F0   ........           CALL    ?S_EC_MUL_L02
   \   000000F4   01D8               MOVW    R27:R26, R17:R16
   \   000000F6   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000000F8   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000000FA   910D               LD      R16, X+
   \   000000FC   911C               LD      R17, X
   \   000000FE   5F0E               SUBI    R16, 254
   \   00000100   4F1F               SBCI    R17, 255
   \   00000102   931C               ST      X, R17
   \   00000104   930E               ST      -X, R16
    406          
    407          	for (i = 0; i < 3; i++) {
   \   00000106   E0E0               LDI     R30, 0
   \   00000108   E0F0               LDI     R31, 0
   \                     ??BuildADInt_0:
   \   0000010A   30E3               CPI     R30, 3
   \   0000010C   E000               LDI     R16, 0
   \   0000010E   07F0               CPC     R31, R16
   \   00000110   F00C               BRLT    $+2+2
   \   00000112   C06D               RJMP    ??BuildADInt_1
    408          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i];
   \   00000114   018F               MOVW    R17:R16, R31:R30
   \   00000116   0F00               LSL     R16
   \   00000118   1F11               ROL     R17
   \   0000011A   01D8               MOVW    R27:R26, R17:R16
   \   0000011C   ....               SUBI    R26, LOW((-(ADInt) & 0xFFFF))
   \   0000011E   ....               SBCI    R27, (-(ADInt) & 0xFFFF) >> 8
   \   00000120   904D               LD      R4, X+
   \   00000122   905C               LD      R5, X
   \   00000124   9711               SBIW    R27:R26, 1
   \   00000126   2F06               MOV     R16, R22
   \   00000128   E010               LDI     R17, 0
   \   0000012A   E242               LDI     R20, 34
   \   0000012C   E050               LDI     R21, 0
   \   0000012E   ........           CALL    ?S_EC_MUL_L02
   \   00000132   01D8               MOVW    R27:R26, R17:R16
   \   00000134   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000136   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000138   918D               LD      R24, X+
   \   0000013A   919C               LD      R25, X
   \   0000013C   9711               SBIW    R27:R26, 1
   \   0000013E   2F06               MOV     R16, R22
   \   00000140   E010               LDI     R17, 0
   \   00000142   E242               LDI     R20, 34
   \   00000144   E050               LDI     R21, 0
   \   00000146   ........           CALL    ?S_EC_MUL_L02
   \   0000014A   01D8               MOVW    R27:R26, R17:R16
   \   0000014C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000014E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000150   910D               LD      R16, X+
   \   00000152   911C               LD      R17, X
   \   00000154   9711               SBIW    R27:R26, 1
   \   00000156   0F80               ADD     R24, R16
   \   00000158   1F91               ADC     R25, R17
   \   0000015A   01DC               MOVW    R27:R26, R25:R24
   \   0000015C   924C               ST      X, R4
   \   0000015E   2F06               MOV     R16, R22
   \   00000160   E010               LDI     R17, 0
   \   00000162   E242               LDI     R20, 34
   \   00000164   E050               LDI     R21, 0
   \   00000166   ........           CALL    ?S_EC_MUL_L02
   \   0000016A   01D8               MOVW    R27:R26, R17:R16
   \   0000016C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000016E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000170   910D               LD      R16, X+
   \   00000172   911C               LD      R17, X
   \   00000174   5F0F               SUBI    R16, 255
   \   00000176   4F1F               SBCI    R17, 255
   \   00000178   931C               ST      X, R17
   \   0000017A   930E               ST      -X, R16
    409          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] >> 8;   // ADresult
   \   0000017C   018F               MOVW    R17:R16, R31:R30
   \   0000017E   0F00               LSL     R16
   \   00000180   1F11               ROL     R17
   \   00000182   01D8               MOVW    R27:R26, R17:R16
   \   00000184   ....               SUBI    R26, LOW((-(ADInt) & 0xFFFF))
   \   00000186   ....               SBCI    R27, (-(ADInt) & 0xFFFF) >> 8
   \   00000188   904D               LD      R4, X+
   \   0000018A   905C               LD      R5, X
   \   0000018C   9711               SBIW    R27:R26, 1
   \   0000018E   2C45               MOV     R4, R5
   \   00000190   0C55               LSL     R5
   \   00000192   0855               SBC     R5, R5
   \   00000194   2F06               MOV     R16, R22
   \   00000196   E010               LDI     R17, 0
   \   00000198   E242               LDI     R20, 34
   \   0000019A   E050               LDI     R21, 0
   \   0000019C   ........           CALL    ?S_EC_MUL_L02
   \   000001A0   01D8               MOVW    R27:R26, R17:R16
   \   000001A2   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   000001A4   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   000001A6   918D               LD      R24, X+
   \   000001A8   919C               LD      R25, X
   \   000001AA   9711               SBIW    R27:R26, 1
   \   000001AC   2F06               MOV     R16, R22
   \   000001AE   E010               LDI     R17, 0
   \   000001B0   E242               LDI     R20, 34
   \   000001B2   E050               LDI     R21, 0
   \   000001B4   ........           CALL    ?S_EC_MUL_L02
   \   000001B8   01D8               MOVW    R27:R26, R17:R16
   \   000001BA   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000001BC   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000001BE   910D               LD      R16, X+
   \   000001C0   911C               LD      R17, X
   \   000001C2   9711               SBIW    R27:R26, 1
   \   000001C4   0F80               ADD     R24, R16
   \   000001C6   1F91               ADC     R25, R17
   \   000001C8   01DC               MOVW    R27:R26, R25:R24
   \   000001CA   924C               ST      X, R4
   \   000001CC   2F06               MOV     R16, R22
   \   000001CE   E010               LDI     R17, 0
   \   000001D0   E242               LDI     R20, 34
   \   000001D2   E050               LDI     R21, 0
   \   000001D4   ........           CALL    ?S_EC_MUL_L02
   \   000001D8   01D8               MOVW    R27:R26, R17:R16
   \   000001DA   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000001DC   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000001DE   910D               LD      R16, X+
   \   000001E0   911C               LD      R17, X
   \   000001E2   5F0F               SUBI    R16, 255
   \   000001E4   4F1F               SBCI    R17, 255
   \   000001E6   931C               ST      X, R17
   \   000001E8   930E               ST      -X, R16
    410          	}
   \   000001EA   9631               ADIW    R31:R30, 1
   \   000001EC   CF8E               RJMP    ??BuildADInt_0
    411          
    412          	UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildADInt_1:
   \   000001EE   2F06               MOV     R16, R22
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E242               LDI     R20, 34
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   01D8               MOVW    R27:R26, R17:R16
   \   000001FC   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000001FE   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000200   918D               LD      R24, X+
   \   00000202   919C               LD      R25, X
   \   00000204   9711               SBIW    R27:R26, 1
   \   00000206   2F02               MOV     R16, R18
   \   00000208   1B80               SUB     R24, R16
   \   0000020A   5082               SUBI    R24, 2
   \   0000020C   2F06               MOV     R16, R22
   \   0000020E   E010               LDI     R17, 0
   \   00000210   E242               LDI     R20, 34
   \   00000212   E050               LDI     R21, 0
   \   00000214   ........           CALL    ?S_EC_MUL_L02
   \   00000218   01D8               MOVW    R27:R26, R17:R16
   \   0000021A   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000021C   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   0000021E   910D               LD      R16, X+
   \   00000220   911C               LD      R17, X
   \   00000222   9711               SBIW    R27:R26, 1
   \   00000224   0F02               ADD     R16, R18
   \   00000226   1F13               ADC     R17, R19
   \   00000228   01D8               MOVW    R27:R26, R17:R16
   \   0000022A   938C               ST      X, R24
    413          	UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000022C   2F06               MOV     R16, R22
   \   0000022E   E010               LDI     R17, 0
   \   00000230   E242               LDI     R20, 34
   \   00000232   E050               LDI     R21, 0
   \   00000234   ........           CALL    ?S_EC_MUL_L02
   \   00000238   01D8               MOVW    R27:R26, R17:R16
   \   0000023A   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000023C   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   0000023E   918D               LD      R24, X+
   \   00000240   919C               LD      R25, X
   \   00000242   9711               SBIW    R27:R26, 1
   \   00000244   1B82               SUB     R24, R18
   \   00000246   0B93               SBC     R25, R19
   \   00000248   9702               SBIW    R25:R24, 2
   \   0000024A   2F89               MOV     R24, R25
   \   0000024C   E090               LDI     R25, 0
   \   0000024E   2F06               MOV     R16, R22
   \   00000250   E010               LDI     R17, 0
   \   00000252   E242               LDI     R20, 34
   \   00000254   E050               LDI     R21, 0
   \   00000256   ........           CALL    ?S_EC_MUL_L02
   \   0000025A   01D8               MOVW    R27:R26, R17:R16
   \   0000025C   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000025E   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000260   910D               LD      R16, X+
   \   00000262   911C               LD      R17, X
   \   00000264   9711               SBIW    R27:R26, 1
   \   00000266   0F02               ADD     R16, R18
   \   00000268   1F13               ADC     R17, R19
   \   0000026A   01D8               MOVW    R27:R26, R17:R16
   \   0000026C   9611               ADIW    R27:R26, 1
   \   0000026E   938C               ST      X, R24
   \   00000270   9711               SBIW    R27:R26, 1
    414          
    415          }
   \   00000272   E0E6               LDI     R30, 6
   \   00000274   ........           JMP     ?EPILOGUE_B6_L09
    416          
    417          
    418          /*************************************************************************
    419          *
    420          * Build setup data package for AN-ZBHART
    421          *
    422          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    423          void BuildHartSetup(char ch, unsigned char *pointer) {
   \                     BuildHartSetup:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
    424          
    425          	short ntna;
    426          	UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E242               LDI     R20, 34
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F05               STD     Z+29, R16
    427          
    428          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_HART_SETUP & 0xff;
   \   0000001E   2F06               MOV     R16, R22
   \   00000020   E010               LDI     R17, 0
   \   00000022   E242               LDI     R20, 34
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8180               LD      R24, Z
   \   00000032   8191               LDD     R25, Z+1
   \   00000034   2F06               MOV     R16, R22
   \   00000036   E010               LDI     R17, 0
   \   00000038   E242               LDI     R20, 34
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F80               ADD     R24, R16
   \   0000004C   1F91               ADC     R25, R17
   \   0000004E   01FC               MOVW    R31:R30, R25:R24
   \   00000050   EE0D               LDI     R16, 237
   \   00000052   8300               ST      Z, R16
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E242               LDI     R20, 34
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    429          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_HART_SETUP >> 8;
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E242               LDI     R20, 34
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8180               LD      R24, Z
   \   00000086   8191               LDD     R25, Z+1
   \   00000088   2F06               MOV     R16, R22
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E242               LDI     R20, 34
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F80               ADD     R24, R16
   \   000000A0   1F91               ADC     R25, R17
   \   000000A2   01FC               MOVW    R31:R30, R25:R24
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F06               MOV     R16, R22
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E242               LDI     R20, 34
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    430          	ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000C6   2F06               MOV     R16, R22
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E242               LDI     R20, 34
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0198               MOVW    R19:R18, R17:R16
    431          	UART[ch].TxFirst += 2;                                      // two byte length
   \   000000DE   2F06               MOV     R16, R22
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E242               LDI     R20, 34
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    432          
    433          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Hart.PortUsed & 0xff;
   \   000000FC   ....               LDI     R30, LOW((TData + 144))
   \   000000FE   ....               LDI     R31, HIGH((TData + 144))
   \   00000100   81A0               LD      R26, Z
   \   00000102   81B1               LDD     R27, Z+1
   \   00000104   2F06               MOV     R16, R22
   \   00000106   E010               LDI     R17, 0
   \   00000108   E242               LDI     R20, 34
   \   0000010A   E050               LDI     R21, 0
   \   0000010C   ........           CALL    ?S_EC_MUL_L02
   \   00000110   01F8               MOVW    R31:R30, R17:R16
   \   00000112   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000114   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000116   8180               LD      R24, Z
   \   00000118   8191               LDD     R25, Z+1
   \   0000011A   2F06               MOV     R16, R22
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   E242               LDI     R20, 34
   \   00000120   E050               LDI     R21, 0
   \   00000122   ........           CALL    ?S_EC_MUL_L02
   \   00000126   01F8               MOVW    R31:R30, R17:R16
   \   00000128   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012C   8102               LDD     R16, Z+2
   \   0000012E   8113               LDD     R17, Z+3
   \   00000130   0F80               ADD     R24, R16
   \   00000132   1F91               ADC     R25, R17
   \   00000134   01FC               MOVW    R31:R30, R25:R24
   \   00000136   83A0               ST      Z, R26
   \   00000138   2F06               MOV     R16, R22
   \   0000013A   E010               LDI     R17, 0
   \   0000013C   E242               LDI     R20, 34
   \   0000013E   E050               LDI     R21, 0
   \   00000140   ........           CALL    ?S_EC_MUL_L02
   \   00000144   01F8               MOVW    R31:R30, R17:R16
   \   00000146   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000148   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014A   8102               LDD     R16, Z+2
   \   0000014C   8113               LDD     R17, Z+3
   \   0000014E   5F0F               SUBI    R16, 255
   \   00000150   4F1F               SBCI    R17, 255
   \   00000152   8302               STD     Z+2, R16
   \   00000154   8313               STD     Z+3, R17
    434          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.Hart.PortUsed >> 8) & 0xff;
   \   00000156   ....               LDI     R30, LOW((TData + 144))
   \   00000158   ....               LDI     R31, HIGH((TData + 144))
   \   0000015A   81A0               LD      R26, Z
   \   0000015C   81B1               LDD     R27, Z+1
   \   0000015E   2FAB               MOV     R26, R27
   \   00000160   E0B0               LDI     R27, 0
   \   00000162   2F06               MOV     R16, R22
   \   00000164   E010               LDI     R17, 0
   \   00000166   E242               LDI     R20, 34
   \   00000168   E050               LDI     R21, 0
   \   0000016A   ........           CALL    ?S_EC_MUL_L02
   \   0000016E   01F8               MOVW    R31:R30, R17:R16
   \   00000170   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000174   8180               LD      R24, Z
   \   00000176   8191               LDD     R25, Z+1
   \   00000178   2F06               MOV     R16, R22
   \   0000017A   E010               LDI     R17, 0
   \   0000017C   E242               LDI     R20, 34
   \   0000017E   E050               LDI     R21, 0
   \   00000180   ........           CALL    ?S_EC_MUL_L02
   \   00000184   01F8               MOVW    R31:R30, R17:R16
   \   00000186   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000188   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000018A   8102               LDD     R16, Z+2
   \   0000018C   8113               LDD     R17, Z+3
   \   0000018E   0F80               ADD     R24, R16
   \   00000190   1F91               ADC     R25, R17
   \   00000192   01FC               MOVW    R31:R30, R25:R24
   \   00000194   83A0               ST      Z, R26
   \   00000196   2F06               MOV     R16, R22
   \   00000198   E010               LDI     R17, 0
   \   0000019A   E242               LDI     R20, 34
   \   0000019C   E050               LDI     R21, 0
   \   0000019E   ........           CALL    ?S_EC_MUL_L02
   \   000001A2   01F8               MOVW    R31:R30, R17:R16
   \   000001A4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A8   8102               LDD     R16, Z+2
   \   000001AA   8113               LDD     R17, Z+3
   \   000001AC   5F0F               SUBI    R16, 255
   \   000001AE   4F1F               SBCI    R17, 255
   \   000001B0   8302               STD     Z+2, R16
   \   000001B2   8313               STD     Z+3, R17
    435          
    436          	UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000001B4   2F06               MOV     R16, R22
   \   000001B6   E010               LDI     R17, 0
   \   000001B8   E242               LDI     R20, 34
   \   000001BA   E050               LDI     R21, 0
   \   000001BC   ........           CALL    ?S_EC_MUL_L02
   \   000001C0   01F8               MOVW    R31:R30, R17:R16
   \   000001C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001C6   8182               LDD     R24, Z+2
   \   000001C8   8193               LDD     R25, Z+3
   \   000001CA   2F02               MOV     R16, R18
   \   000001CC   1B80               SUB     R24, R16
   \   000001CE   5082               SUBI    R24, 2
   \   000001D0   2F06               MOV     R16, R22
   \   000001D2   E010               LDI     R17, 0
   \   000001D4   E242               LDI     R20, 34
   \   000001D6   E050               LDI     R21, 0
   \   000001D8   ........           CALL    ?S_EC_MUL_L02
   \   000001DC   01F8               MOVW    R31:R30, R17:R16
   \   000001DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E2   8100               LD      R16, Z
   \   000001E4   8111               LDD     R17, Z+1
   \   000001E6   0F02               ADD     R16, R18
   \   000001E8   1F13               ADC     R17, R19
   \   000001EA   01F8               MOVW    R31:R30, R17:R16
   \   000001EC   8380               ST      Z, R24
    437          	UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000001EE   2F06               MOV     R16, R22
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E242               LDI     R20, 34
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   01F8               MOVW    R31:R30, R17:R16
   \   000001FC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001FE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000200   8182               LDD     R24, Z+2
   \   00000202   8193               LDD     R25, Z+3
   \   00000204   1B82               SUB     R24, R18
   \   00000206   0B93               SBC     R25, R19
   \   00000208   9702               SBIW    R25:R24, 2
   \   0000020A   2F89               MOV     R24, R25
   \   0000020C   E090               LDI     R25, 0
   \   0000020E   2F06               MOV     R16, R22
   \   00000210   E010               LDI     R17, 0
   \   00000212   E242               LDI     R20, 34
   \   00000214   E050               LDI     R21, 0
   \   00000216   ........           CALL    ?S_EC_MUL_L02
   \   0000021A   01F8               MOVW    R31:R30, R17:R16
   \   0000021C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000021E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000220   8100               LD      R16, Z
   \   00000222   8111               LDD     R17, Z+1
   \   00000224   0F02               ADD     R16, R18
   \   00000226   1F13               ADC     R17, R19
   \   00000228   01F8               MOVW    R31:R30, R17:R16
   \   0000022A   8381               STD     Z+1, R24
    438          }
   \   0000022C   E0E4               LDI     R30, 4
   \   0000022E   ........           JMP     ?EPILOGUE_B4_L09
    439          
    440          /*************************************************************************
    441          *
    442          * Build filter data package for AN-ZBHART
    443          *
    444          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    445          void BuildHartFilter(char ch, unsigned char *pointer) {
   \                     BuildHartFilter:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    446          
    447          	char port;
    448          	short ntna;
    449          	UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E242               LDI     R20, 34
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F05               STD     Z+29, R16
    450          
    451          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_HART_FILTER & 0xff;
   \   0000001E   2F06               MOV     R16, R22
   \   00000020   E010               LDI     R17, 0
   \   00000022   E242               LDI     R20, 34
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   81A0               LD      R26, Z
   \   00000032   81B1               LDD     R27, Z+1
   \   00000034   2F06               MOV     R16, R22
   \   00000036   E010               LDI     R17, 0
   \   00000038   E242               LDI     R20, 34
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0FA0               ADD     R26, R16
   \   0000004C   1FB1               ADC     R27, R17
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   E001               LDI     R16, 1
   \   00000052   8300               ST      Z, R16
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E242               LDI     R20, 34
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    452          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_HART_FILTER >> 8;
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E242               LDI     R20, 34
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   81A0               LD      R26, Z
   \   00000086   81B1               LDD     R27, Z+1
   \   00000088   2F06               MOV     R16, R22
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E242               LDI     R20, 34
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0FA0               ADD     R26, R16
   \   000000A0   1FB1               ADC     R27, R17
   \   000000A2   01FD               MOVW    R31:R30, R27:R26
   \   000000A4   E005               LDI     R16, 5
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F06               MOV     R16, R22
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E242               LDI     R20, 34
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    453          	ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000C6   2F06               MOV     R16, R22
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E242               LDI     R20, 34
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0118               MOVW    R3:R2, R17:R16
    454          	UART[ch].TxFirst += 2;                                      // two byte length
   \   000000DE   2F06               MOV     R16, R22
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E242               LDI     R20, 34
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    455          
    456          	for (port = 0; port < 12; port++) {
   \   000000FC   E020               LDI     R18, 0
   \                     ??BuildHartFilter_0:
   \   000000FE   302C               CPI     R18, 12
   \   00000100   F580               BRCC    ??BuildHartFilter_1
    457          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Hart.Filter[port];
   \   00000102   E030               LDI     R19, 0
   \   00000104   01F9               MOVW    R31:R30, R19:R18
   \   00000106   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   00000108   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   0000010A   8130               LD      R19, Z
   \   0000010C   2F06               MOV     R16, R22
   \   0000010E   E010               LDI     R17, 0
   \   00000110   E242               LDI     R20, 34
   \   00000112   E050               LDI     R21, 0
   \   00000114   ........           CALL    ?S_EC_MUL_L02
   \   00000118   01F8               MOVW    R31:R30, R17:R16
   \   0000011A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011E   81A0               LD      R26, Z
   \   00000120   81B1               LDD     R27, Z+1
   \   00000122   2F06               MOV     R16, R22
   \   00000124   E010               LDI     R17, 0
   \   00000126   E242               LDI     R20, 34
   \   00000128   E050               LDI     R21, 0
   \   0000012A   ........           CALL    ?S_EC_MUL_L02
   \   0000012E   01F8               MOVW    R31:R30, R17:R16
   \   00000130   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000132   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000134   8102               LDD     R16, Z+2
   \   00000136   8113               LDD     R17, Z+3
   \   00000138   0FA0               ADD     R26, R16
   \   0000013A   1FB1               ADC     R27, R17
   \   0000013C   01FD               MOVW    R31:R30, R27:R26
   \   0000013E   8330               ST      Z, R19
   \   00000140   2F06               MOV     R16, R22
   \   00000142   E010               LDI     R17, 0
   \   00000144   E242               LDI     R20, 34
   \   00000146   E050               LDI     R21, 0
   \   00000148   ........           CALL    ?S_EC_MUL_L02
   \   0000014C   01F8               MOVW    R31:R30, R17:R16
   \   0000014E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000150   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000152   8102               LDD     R16, Z+2
   \   00000154   8113               LDD     R17, Z+3
   \   00000156   5F0F               SUBI    R16, 255
   \   00000158   4F1F               SBCI    R17, 255
   \   0000015A   8302               STD     Z+2, R16
   \   0000015C   8313               STD     Z+3, R17
    458          	}
   \   0000015E   9523               INC     R18
   \   00000160   CFCE               RJMP    ??BuildHartFilter_0
    459          
    460          	UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildHartFilter_1:
   \   00000162   2F06               MOV     R16, R22
   \   00000164   E010               LDI     R17, 0
   \   00000166   E242               LDI     R20, 34
   \   00000168   E050               LDI     R21, 0
   \   0000016A   ........           CALL    ?S_EC_MUL_L02
   \   0000016E   01F8               MOVW    R31:R30, R17:R16
   \   00000170   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000174   81A2               LDD     R26, Z+2
   \   00000176   81B3               LDD     R27, Z+3
   \   00000178   2D02               MOV     R16, R2
   \   0000017A   1BA0               SUB     R26, R16
   \   0000017C   50A2               SUBI    R26, 2
   \   0000017E   2F06               MOV     R16, R22
   \   00000180   E010               LDI     R17, 0
   \   00000182   E242               LDI     R20, 34
   \   00000184   E050               LDI     R21, 0
   \   00000186   ........           CALL    ?S_EC_MUL_L02
   \   0000018A   01F8               MOVW    R31:R30, R17:R16
   \   0000018C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000190   8100               LD      R16, Z
   \   00000192   8111               LDD     R17, Z+1
   \   00000194   0D02               ADD     R16, R2
   \   00000196   1D13               ADC     R17, R3
   \   00000198   01F8               MOVW    R31:R30, R17:R16
   \   0000019A   83A0               ST      Z, R26
    461          	UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000019C   2F06               MOV     R16, R22
   \   0000019E   E010               LDI     R17, 0
   \   000001A0   E242               LDI     R20, 34
   \   000001A2   E050               LDI     R21, 0
   \   000001A4   ........           CALL    ?S_EC_MUL_L02
   \   000001A8   01F8               MOVW    R31:R30, R17:R16
   \   000001AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AE   81A2               LDD     R26, Z+2
   \   000001B0   81B3               LDD     R27, Z+3
   \   000001B2   19A2               SUB     R26, R2
   \   000001B4   09B3               SBC     R27, R3
   \   000001B6   9712               SBIW    R27:R26, 2
   \   000001B8   2FAB               MOV     R26, R27
   \   000001BA   E0B0               LDI     R27, 0
   \   000001BC   2F06               MOV     R16, R22
   \   000001BE   E010               LDI     R17, 0
   \   000001C0   E242               LDI     R20, 34
   \   000001C2   E050               LDI     R21, 0
   \   000001C4   ........           CALL    ?S_EC_MUL_L02
   \   000001C8   01F8               MOVW    R31:R30, R17:R16
   \   000001CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CE   8100               LD      R16, Z
   \   000001D0   8111               LDD     R17, Z+1
   \   000001D2   0D02               ADD     R16, R2
   \   000001D4   1D13               ADC     R17, R3
   \   000001D6   01F8               MOVW    R31:R30, R17:R16
   \   000001D8   83A1               STD     Z+1, R26
    462          }
   \   000001DA   E0E4               LDI     R30, 4
   \   000001DC   ........           JMP     ?EPILOGUE_B4_L09
    463          
    464          /*************************************************************************
    465          *
    466          * Build datablock for Hart (Hart)
    467          *
    468          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    469          void BuildMDataHart(UARTDataType *pUART) {
   \                     BuildMDataHart:
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   0138               MOVW    R7:R6, R17:R16
    470          	short Index        = 11; // // Add data after the heading, Heading size is 11
   \   00000006   E08B               LDI     R24, 11
   \   00000008   E090               LDI     R25, 0
    471          	char *Buf          = pUART->pTxBuffer;
   \   0000000A   01F3               MOVW    R31:R30, R7:R6
   \   0000000C   8040               LD      R4, Z
   \   0000000E   8051               LDD     R5, Z+1
    472          	pUART->RxSendReply = true;                               // flag for answering
   \   00000010   01F3               MOVW    R31:R30, R7:R6
   \   00000012   E001               LDI     R16, 1
   \   00000014   8F05               STD     Z+29, R16
    473          	Buf[Index++] = CMD_REP_HART_MDATA & 0xff;
   \   00000016   01F2               MOVW    R31:R30, R5:R4
   \   00000018   0FE8               ADD     R30, R24
   \   0000001A   1FF9               ADC     R31, R25
   \   0000001C   E00B               LDI     R16, 11
   \   0000001E   8300               ST      Z, R16
   \   00000020   9601               ADIW    R25:R24, 1
    474          	Buf[Index++] = CMD_REP_HART_MDATA >> 8;
   \   00000022   01F2               MOVW    R31:R30, R5:R4
   \   00000024   0FE8               ADD     R30, R24
   \   00000026   1FF9               ADC     R31, R25
   \   00000028   E005               LDI     R16, 5
   \   0000002A   8300               ST      Z, R16
   \   0000002C   9601               ADIW    R25:R24, 1
    475          	short ntna = Index;                                  /* remember index */
   \   0000002E   014C               MOVW    R9:R8, R25:R24
    476          	Index  += 2;                                      // two byte length
   \   00000030   9602               ADIW    R25:R24, 2
    477          
    478          	Buf[Index++] = (RestartStatus << 4);    // Add restart status
   \   00000032   9100....           LDS     R16, RestartStatus
   \   00000036   9502               SWAP    R16
   \   00000038   7F00               ANDI    R16, 0xF0
   \   0000003A   01F2               MOVW    R31:R30, R5:R4
   \   0000003C   0FE8               ADD     R30, R24
   \   0000003E   1FF9               ADC     R31, R25
   \   00000040   8300               ST      Z, R16
   \   00000042   9601               ADIW    R25:R24, 1
    479          	// Hart PV
    480          	for (short i = 0; i < 12; i++) {
   \   00000044   E0A0               LDI     R26, 0
   \   00000046   E0B0               LDI     R27, 0
   \                     ??BuildMDataHart_0:
   \   00000048   30AC               CPI     R26, 12
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   07B0               CPC     R27, R16
   \   0000004E   F00C               BRLT    $+2+2
   \   00000050   C076               RJMP    ??BuildMDataHart_1
    481          		*((unsigned short *)&Buf[Index]) = TData.Hart.FailCnt[i][0];   // Hart 1st
   \   00000052   018D               MOVW    R17:R16, R27:R26
   \   00000054   0F00               LSL     R16
   \   00000056   1F11               ROL     R17
   \   00000058   0F00               LSL     R16
   \   0000005A   1F11               ROL     R17
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000060   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000062   8100               LD      R16, Z
   \   00000064   8111               LDD     R17, Z+1
   \   00000066   01F2               MOVW    R31:R30, R5:R4
   \   00000068   0FE8               ADD     R30, R24
   \   0000006A   1FF9               ADC     R31, R25
   \   0000006C   8300               ST      Z, R16
   \   0000006E   8311               STD     Z+1, R17
    482          		Index += sizeof(unsigned short);
   \   00000070   9602               ADIW    R25:R24, 2
    483          
    484          		*((unsigned short *)&Buf[Index]) = TData.Hart.FailCnt[i][1];   // Hart 1st
   \   00000072   018D               MOVW    R17:R16, R27:R26
   \   00000074   0F00               LSL     R16
   \   00000076   1F11               ROL     R17
   \   00000078   0F00               LSL     R16
   \   0000007A   1F11               ROL     R17
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000082   8102               LDD     R16, Z+2
   \   00000084   8113               LDD     R17, Z+3
   \   00000086   01F2               MOVW    R31:R30, R5:R4
   \   00000088   0FE8               ADD     R30, R24
   \   0000008A   1FF9               ADC     R31, R25
   \   0000008C   8300               ST      Z, R16
   \   0000008E   8311               STD     Z+1, R17
    485          		Index += sizeof(unsigned short);
   \   00000090   9602               ADIW    R25:R24, 2
    486          		hart_channel_lock(&_hart_channels[i]);
   \   00000092   018D               MOVW    R17:R16, R27:R26
   \   00000094   E14B               LDI     R20, 27
   \   00000096   E050               LDI     R21, 0
   \   00000098   ........           CALL    ?S_EC_MUL_L02
   \   0000009C   0198               MOVW    R19:R18, R17:R16
   \   0000009E   ....               LDI     R16, LOW(_hart_channels)
   \   000000A0   ....               LDI     R17, (_hart_channels) >> 8
   \   000000A2   0F02               ADD     R16, R18
   \   000000A4   1F13               ADC     R17, R19
   \   000000A6   ........           CALL    hart_channel_lock
    487          		*((float *)&Buf[Index]) = TData.Hart.Distance[i];   // Hart 1st
   \   000000AA   018D               MOVW    R17:R16, R27:R26
   \   000000AC   0F00               LSL     R16
   \   000000AE   1F11               ROL     R17
   \   000000B0   0F00               LSL     R16
   \   000000B2   1F11               ROL     R17
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(TData + 254) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, HIGH((-(TData + 254) & 0xFFFF))
   \   000000BA   8100               LD      R16, Z
   \   000000BC   8111               LDD     R17, Z+1
   \   000000BE   8122               LDD     R18, Z+2
   \   000000C0   8133               LDD     R19, Z+3
   \   000000C2   01F2               MOVW    R31:R30, R5:R4
   \   000000C4   0FE8               ADD     R30, R24
   \   000000C6   1FF9               ADC     R31, R25
   \   000000C8   8300               ST      Z, R16
   \   000000CA   8311               STD     Z+1, R17
   \   000000CC   8322               STD     Z+2, R18
   \   000000CE   8333               STD     Z+3, R19
    488          		Index += sizeof(float);
   \   000000D0   9604               ADIW    R25:R24, 4
    489          		*((float *)&Buf[Index]) = TData.Hart.Level[i];   // Hart 2nd
   \   000000D2   018D               MOVW    R17:R16, R27:R26
   \   000000D4   0F00               LSL     R16
   \   000000D6   1F11               ROL     R17
   \   000000D8   0F00               LSL     R16
   \   000000DA   1F11               ROL     R17
   \   000000DC   01F8               MOVW    R31:R30, R17:R16
   \   000000DE   ....               SUBI    R30, LOW((-(TData + 302) & 0xFFFF))
   \   000000E0   ....               SBCI    R31, HIGH((-(TData + 302) & 0xFFFF))
   \   000000E2   8100               LD      R16, Z
   \   000000E4   8111               LDD     R17, Z+1
   \   000000E6   8122               LDD     R18, Z+2
   \   000000E8   8133               LDD     R19, Z+3
   \   000000EA   01F2               MOVW    R31:R30, R5:R4
   \   000000EC   0FE8               ADD     R30, R24
   \   000000EE   1FF9               ADC     R31, R25
   \   000000F0   8300               ST      Z, R16
   \   000000F2   8311               STD     Z+1, R17
   \   000000F4   8322               STD     Z+2, R18
   \   000000F6   8333               STD     Z+3, R19
    490          		Index += sizeof(float);
   \   000000F8   9604               ADIW    R25:R24, 4
    491          		*((float *)&Buf[Index]) = TData.Hart.ADCurrent[i];   // Measured current
   \   000000FA   018D               MOVW    R17:R16, R27:R26
   \   000000FC   0F00               LSL     R16
   \   000000FE   1F11               ROL     R17
   \   00000100   0F00               LSL     R16
   \   00000102   1F11               ROL     R17
   \   00000104   01F8               MOVW    R31:R30, R17:R16
   \   00000106   ....               SUBI    R30, LOW((-(TData + 158) & 0xFFFF))
   \   00000108   ....               SBCI    R31, HIGH((-(TData + 158) & 0xFFFF))
   \   0000010A   8100               LD      R16, Z
   \   0000010C   8111               LDD     R17, Z+1
   \   0000010E   8122               LDD     R18, Z+2
   \   00000110   8133               LDD     R19, Z+3
   \   00000112   01F2               MOVW    R31:R30, R5:R4
   \   00000114   0FE8               ADD     R30, R24
   \   00000116   1FF9               ADC     R31, R25
   \   00000118   8300               ST      Z, R16
   \   0000011A   8311               STD     Z+1, R17
   \   0000011C   8322               STD     Z+2, R18
   \   0000011E   8333               STD     Z+3, R19
    492          		Index += sizeof(float);
   \   00000120   9604               ADIW    R25:R24, 4
    493          		hart_channel_unlock(&_hart_channels[i]);
   \   00000122   018D               MOVW    R17:R16, R27:R26
   \   00000124   E14B               LDI     R20, 27
   \   00000126   E050               LDI     R21, 0
   \   00000128   ........           CALL    ?S_EC_MUL_L02
   \   0000012C   0198               MOVW    R19:R18, R17:R16
   \   0000012E   ....               LDI     R16, LOW(_hart_channels)
   \   00000130   ....               LDI     R17, (_hart_channels) >> 8
   \   00000132   0F02               ADD     R16, R18
   \   00000134   1F13               ADC     R17, R19
   \   00000136   ........           CALL    hart_channel_unlock
    494          	}
   \   0000013A   9611               ADIW    R27:R26, 1
   \   0000013C   CF85               RJMP    ??BuildMDataHart_0
    495          	Buf[ntna] = (Index - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildMDataHart_1:
   \   0000013E   2F08               MOV     R16, R24
   \   00000140   2D18               MOV     R17, R8
   \   00000142   1B01               SUB     R16, R17
   \   00000144   5002               SUBI    R16, 2
   \   00000146   01F2               MOVW    R31:R30, R5:R4
   \   00000148   0DE8               ADD     R30, R8
   \   0000014A   1DF9               ADC     R31, R9
   \   0000014C   8300               ST      Z, R16
    496          	Buf[ntna + 1] = ((Index - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   0000014E   01FC               MOVW    R31:R30, R25:R24
   \   00000150   19E8               SUB     R30, R8
   \   00000152   09F9               SBC     R31, R9
   \   00000154   9732               SBIW    R31:R30, 2
   \   00000156   2FEF               MOV     R30, R31
   \   00000158   0FFF               LSL     R31
   \   0000015A   0BFF               SBC     R31, R31
   \   0000015C   2F0E               MOV     R16, R30
   \   0000015E   01F2               MOVW    R31:R30, R5:R4
   \   00000160   0DE8               ADD     R30, R8
   \   00000162   1DF9               ADC     R31, R9
   \   00000164   8301               STD     Z+1, R16
    497          	pUART->TxFirst = Index; // Add data after the heading
   \   00000166   01F3               MOVW    R31:R30, R7:R6
   \   00000168   8382               STD     Z+2, R24
   \   0000016A   8393               STD     Z+3, R25
    498          
    499          
    500          }
   \   0000016C   E0EA               LDI     R30, 10
   \   0000016E   ........           JMP     ?EPILOGUE_B10_L09
    501          
    502          
    503          /*************************************************************************
    504          *
    505          * Build datablock for Stack status
    506          *
    507          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    508          void BuildStackStatus(char ch, unsigned char *pointer) {
   \                     BuildStackStatus:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
    509          
    510          	short ntna, stack;
    511          	UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E242               LDI     R20, 34
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F05               STD     Z+29, R16
    512          
    513          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS & 0xff;
   \   0000001E   2F08               MOV     R16, R24
   \   00000020   E010               LDI     R17, 0
   \   00000022   E242               LDI     R20, 34
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8120               LD      R18, Z
   \   00000032   8131               LDD     R19, Z+1
   \   00000034   2F08               MOV     R16, R24
   \   00000036   E010               LDI     R17, 0
   \   00000038   E242               LDI     R20, 34
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F20               ADD     R18, R16
   \   0000004C   1F31               ADC     R19, R17
   \   0000004E   01F9               MOVW    R31:R30, R19:R18
   \   00000050   E707               LDI     R16, 119
   \   00000052   8300               ST      Z, R16
   \   00000054   2F08               MOV     R16, R24
   \   00000056   E010               LDI     R17, 0
   \   00000058   E242               LDI     R20, 34
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    514          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS >> 8;
   \   00000072   2F08               MOV     R16, R24
   \   00000074   E010               LDI     R17, 0
   \   00000076   E242               LDI     R20, 34
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8120               LD      R18, Z
   \   00000086   8131               LDD     R19, Z+1
   \   00000088   2F08               MOV     R16, R24
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E242               LDI     R20, 34
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F20               ADD     R18, R16
   \   000000A0   1F31               ADC     R19, R17
   \   000000A2   01F9               MOVW    R31:R30, R19:R18
   \   000000A4   E007               LDI     R16, 7
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F08               MOV     R16, R24
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E242               LDI     R20, 34
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    515          	ntna = UART[ch].TxFirst;                                    /* remember index */
   \   000000C6   2F08               MOV     R16, R24
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E242               LDI     R20, 34
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0128               MOVW    R5:R4, R17:R16
    516          	UART[ch].TxFirst += 2;                                      // two byte length
   \   000000DE   2F08               MOV     R16, R24
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E242               LDI     R20, 34
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    517          
    518          	stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
   \   000000FC   ....               LDI     R16, LOW(TCB_USART0)
   \   000000FE   ....               LDI     R17, (TCB_USART0) >> 8
   \   00000100   ........           CALL    OS_GetStackSpace
   \   00000104   01D8               MOVW    R27:R26, R17:R16
    519          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
   \   00000106   2F6A               MOV     R22, R26
   \   00000108   2F08               MOV     R16, R24
   \   0000010A   E010               LDI     R17, 0
   \   0000010C   E242               LDI     R20, 34
   \   0000010E   E050               LDI     R21, 0
   \   00000110   ........           CALL    ?S_EC_MUL_L02
   \   00000114   01F8               MOVW    R31:R30, R17:R16
   \   00000116   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000118   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011A   8120               LD      R18, Z
   \   0000011C   8131               LDD     R19, Z+1
   \   0000011E   2F08               MOV     R16, R24
   \   00000120   E010               LDI     R17, 0
   \   00000122   E242               LDI     R20, 34
   \   00000124   E050               LDI     R21, 0
   \   00000126   ........           CALL    ?S_EC_MUL_L02
   \   0000012A   01F8               MOVW    R31:R30, R17:R16
   \   0000012C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000130   8102               LDD     R16, Z+2
   \   00000132   8113               LDD     R17, Z+3
   \   00000134   0F20               ADD     R18, R16
   \   00000136   1F31               ADC     R19, R17
   \   00000138   01F9               MOVW    R31:R30, R19:R18
   \   0000013A   8360               ST      Z, R22
   \   0000013C   2F08               MOV     R16, R24
   \   0000013E   E010               LDI     R17, 0
   \   00000140   E242               LDI     R20, 34
   \   00000142   E050               LDI     R21, 0
   \   00000144   ........           CALL    ?S_EC_MUL_L02
   \   00000148   01F8               MOVW    R31:R30, R17:R16
   \   0000014A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014E   8102               LDD     R16, Z+2
   \   00000150   8113               LDD     R17, Z+3
   \   00000152   5F0F               SUBI    R16, 255
   \   00000154   4F1F               SBCI    R17, 255
   \   00000156   8302               STD     Z+2, R16
   \   00000158   8313               STD     Z+3, R17
    520          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
   \   0000015A   01BD               MOVW    R23:R22, R27:R26
   \   0000015C   2F67               MOV     R22, R23
   \   0000015E   0F77               LSL     R23
   \   00000160   0B77               SBC     R23, R23
   \   00000162   2F08               MOV     R16, R24
   \   00000164   E010               LDI     R17, 0
   \   00000166   E242               LDI     R20, 34
   \   00000168   E050               LDI     R21, 0
   \   0000016A   ........           CALL    ?S_EC_MUL_L02
   \   0000016E   01F8               MOVW    R31:R30, R17:R16
   \   00000170   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000174   8120               LD      R18, Z
   \   00000176   8131               LDD     R19, Z+1
   \   00000178   2F08               MOV     R16, R24
   \   0000017A   E010               LDI     R17, 0
   \   0000017C   E242               LDI     R20, 34
   \   0000017E   E050               LDI     R21, 0
   \   00000180   ........           CALL    ?S_EC_MUL_L02
   \   00000184   01F8               MOVW    R31:R30, R17:R16
   \   00000186   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000188   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000018A   8102               LDD     R16, Z+2
   \   0000018C   8113               LDD     R17, Z+3
   \   0000018E   0F20               ADD     R18, R16
   \   00000190   1F31               ADC     R19, R17
   \   00000192   01F9               MOVW    R31:R30, R19:R18
   \   00000194   8360               ST      Z, R22
   \   00000196   2F08               MOV     R16, R24
   \   00000198   E010               LDI     R17, 0
   \   0000019A   E242               LDI     R20, 34
   \   0000019C   E050               LDI     R21, 0
   \   0000019E   ........           CALL    ?S_EC_MUL_L02
   \   000001A2   01F8               MOVW    R31:R30, R17:R16
   \   000001A4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A8   8102               LDD     R16, Z+2
   \   000001AA   8113               LDD     R17, Z+3
   \   000001AC   5F0F               SUBI    R16, 255
   \   000001AE   4F1F               SBCI    R17, 255
   \   000001B0   8302               STD     Z+2, R16
   \   000001B2   8313               STD     Z+3, R17
    521          	/*
    522          	stack = OS_GetStackSpace(&TCB_USART1);                            // USART 1
    523          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    524          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    525          	*/
    526          	stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \   000001B4   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   000001B6   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   000001B8   ........           CALL    OS_GetStackSpace
   \   000001BC   01D8               MOVW    R27:R26, R17:R16
    527          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff);
   \   000001BE   2F6A               MOV     R22, R26
   \   000001C0   2F08               MOV     R16, R24
   \   000001C2   E010               LDI     R17, 0
   \   000001C4   E242               LDI     R20, 34
   \   000001C6   E050               LDI     R21, 0
   \   000001C8   ........           CALL    ?S_EC_MUL_L02
   \   000001CC   01F8               MOVW    R31:R30, R17:R16
   \   000001CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D2   8120               LD      R18, Z
   \   000001D4   8131               LDD     R19, Z+1
   \   000001D6   2F08               MOV     R16, R24
   \   000001D8   E010               LDI     R17, 0
   \   000001DA   E242               LDI     R20, 34
   \   000001DC   E050               LDI     R21, 0
   \   000001DE   ........           CALL    ?S_EC_MUL_L02
   \   000001E2   01F8               MOVW    R31:R30, R17:R16
   \   000001E4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E8   8102               LDD     R16, Z+2
   \   000001EA   8113               LDD     R17, Z+3
   \   000001EC   0F20               ADD     R18, R16
   \   000001EE   1F31               ADC     R19, R17
   \   000001F0   01F9               MOVW    R31:R30, R19:R18
   \   000001F2   8360               ST      Z, R22
   \   000001F4   2F08               MOV     R16, R24
   \   000001F6   E010               LDI     R17, 0
   \   000001F8   E242               LDI     R20, 34
   \   000001FA   E050               LDI     R21, 0
   \   000001FC   ........           CALL    ?S_EC_MUL_L02
   \   00000200   01F8               MOVW    R31:R30, R17:R16
   \   00000202   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000204   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000206   8102               LDD     R16, Z+2
   \   00000208   8113               LDD     R17, Z+3
   \   0000020A   5F0F               SUBI    R16, 255
   \   0000020C   4F1F               SBCI    R17, 255
   \   0000020E   8302               STD     Z+2, R16
   \   00000210   8313               STD     Z+3, R17
    528          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack >> 8) & 0xff);
   \   00000212   01BD               MOVW    R23:R22, R27:R26
   \   00000214   2F67               MOV     R22, R23
   \   00000216   0F77               LSL     R23
   \   00000218   0B77               SBC     R23, R23
   \   0000021A   2F08               MOV     R16, R24
   \   0000021C   E010               LDI     R17, 0
   \   0000021E   E242               LDI     R20, 34
   \   00000220   E050               LDI     R21, 0
   \   00000222   ........           CALL    ?S_EC_MUL_L02
   \   00000226   01F8               MOVW    R31:R30, R17:R16
   \   00000228   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000022A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000022C   8120               LD      R18, Z
   \   0000022E   8131               LDD     R19, Z+1
   \   00000230   2F08               MOV     R16, R24
   \   00000232   E010               LDI     R17, 0
   \   00000234   E242               LDI     R20, 34
   \   00000236   E050               LDI     R21, 0
   \   00000238   ........           CALL    ?S_EC_MUL_L02
   \   0000023C   01F8               MOVW    R31:R30, R17:R16
   \   0000023E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000240   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000242   8102               LDD     R16, Z+2
   \   00000244   8113               LDD     R17, Z+3
   \   00000246   0F20               ADD     R18, R16
   \   00000248   1F31               ADC     R19, R17
   \   0000024A   01F9               MOVW    R31:R30, R19:R18
   \   0000024C   8360               ST      Z, R22
   \   0000024E   2F08               MOV     R16, R24
   \   00000250   E010               LDI     R17, 0
   \   00000252   E242               LDI     R20, 34
   \   00000254   E050               LDI     R21, 0
   \   00000256   ........           CALL    ?S_EC_MUL_L02
   \   0000025A   01F8               MOVW    R31:R30, R17:R16
   \   0000025C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000025E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000260   8102               LDD     R16, Z+2
   \   00000262   8113               LDD     R17, Z+3
   \   00000264   5F0F               SUBI    R16, 255
   \   00000266   4F1F               SBCI    R17, 255
   \   00000268   8302               STD     Z+2, R16
   \   0000026A   8313               STD     Z+3, R17
    529          	switch (UnitID) {
   \   0000026C   9100....           LDS     R16, UnitID
   \   00000270   5000               SUBI    R16, 0
   \   00000272   F019               BREQ    ??BuildStackStatus_0
   \   00000274   950A               DEC     R16
   \   00000276   F009               BREQ    ??BuildStackStatus_0
   \   00000278   5002               SUBI    R16, 2
    530          	case AN_ZB485 :
    531          		/*
    532          		stack = OS_GetStackSpace(&TCB_RS485Ctl);                            // RS485 Control
    533          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    534          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    535          		stack = OS_GetStackSpace(&TCB_RS485Rec);                            // RS485 receive
    536          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    537          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    538          		*/
    539          		break;
    540          	case AN_ZBANA :
    541          		/*
    542          		stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
    543          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    544          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    545          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
    546          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
    547          		*/
    548          		break;
    549          	case AN_ZBHART :
    550          		/*
    551          		stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
    552          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    553          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    554          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
    555          		UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
    556          		*/
    557          		break;
    558          	}
    559          
    560          	UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildStackStatus_0:
   \   0000027A   2F08               MOV     R16, R24
   \   0000027C   E010               LDI     R17, 0
   \   0000027E   E242               LDI     R20, 34
   \   00000280   E050               LDI     R21, 0
   \   00000282   ........           CALL    ?S_EC_MUL_L02
   \   00000286   01F8               MOVW    R31:R30, R17:R16
   \   00000288   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000028A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000028C   8122               LDD     R18, Z+2
   \   0000028E   8133               LDD     R19, Z+3
   \   00000290   2D04               MOV     R16, R4
   \   00000292   1B20               SUB     R18, R16
   \   00000294   5022               SUBI    R18, 2
   \   00000296   2F08               MOV     R16, R24
   \   00000298   E010               LDI     R17, 0
   \   0000029A   E242               LDI     R20, 34
   \   0000029C   E050               LDI     R21, 0
   \   0000029E   ........           CALL    ?S_EC_MUL_L02
   \   000002A2   01F8               MOVW    R31:R30, R17:R16
   \   000002A4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002A6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002A8   8100               LD      R16, Z
   \   000002AA   8111               LDD     R17, Z+1
   \   000002AC   0D04               ADD     R16, R4
   \   000002AE   1D15               ADC     R17, R5
   \   000002B0   01F8               MOVW    R31:R30, R17:R16
   \   000002B2   8320               ST      Z, R18
    561          	UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000002B4   2F08               MOV     R16, R24
   \   000002B6   E010               LDI     R17, 0
   \   000002B8   E242               LDI     R20, 34
   \   000002BA   E050               LDI     R21, 0
   \   000002BC   ........           CALL    ?S_EC_MUL_L02
   \   000002C0   01F8               MOVW    R31:R30, R17:R16
   \   000002C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002C6   8102               LDD     R16, Z+2
   \   000002C8   8113               LDD     R17, Z+3
   \   000002CA   1904               SUB     R16, R4
   \   000002CC   0915               SBC     R17, R5
   \   000002CE   5002               SUBI    R16, 2
   \   000002D0   4010               SBCI    R17, 0
   \   000002D2   2F01               MOV     R16, R17
   \   000002D4   E010               LDI     R17, 0
   \   000002D6   2F20               MOV     R18, R16
   \   000002D8   2F08               MOV     R16, R24
   \   000002DA   E010               LDI     R17, 0
   \   000002DC   E242               LDI     R20, 34
   \   000002DE   E050               LDI     R21, 0
   \   000002E0   ........           CALL    ?S_EC_MUL_L02
   \   000002E4   01F8               MOVW    R31:R30, R17:R16
   \   000002E6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002E8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002EA   8100               LD      R16, Z
   \   000002EC   8111               LDD     R17, Z+1
   \   000002EE   0D04               ADD     R16, R4
   \   000002F0   1D15               ADC     R17, R5
   \   000002F2   01F8               MOVW    R31:R30, R17:R16
   \   000002F4   8321               STD     Z+1, R18
    562          
    563          }
   \   000002F6   E0E8               LDI     R30, 8
   \   000002F8   ........           JMP     ?EPILOGUE_B8_L09
    564          
    565          //////////////////////////////////////////////////////////////////////////////
    566          // Receiving data to IO module here
    567          /////////////////////////////////////////////////////////////////////////////
    568          
    569          /*************************************************************************
    570          *
    571          * Receive Command to Reset the EEPROM
    572          *
    573          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    574          void GetResetEEPROM(char ch, unsigned char *pointer) {
   \                     GetResetEEPROM:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    575          
    576          	EEPROMReset();
   \   00000008   ........           CALL    EEPROMReset
    577          }
   \   0000000C   E0E3               LDI     R30, 3
   \   0000000E   ........           JMP     ?EPILOGUE_B3_L09
    578          
    579          
    580          /*************************************************************************
    581          *
    582          * Receive Command to go to the bootloader program
    583          *
    584          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    585          void GetGotoBootloader(char ch, unsigned char *pointer) {
   \                     GetGotoBootloader:
    586          
    587          //    void (*BootApp)(void) = (void(*)())0xF000;
    588          
    589          	while ((EECR & 1 << EEPE) != 0) //chech if EEPROM is ready
   \                     ??GetGotoBootloader_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    590          	;
    591          	EEARL = (0x0fff & 0xff);
   \   00000004   EF1F               LDI     R17, 255
   \   00000006   BD11               OUT     0x21, R17
    592          	EEARH = (0x0fff >> 8);
   \   00000008   E01F               LDI     R17, 15
   \   0000000A   BD12               OUT     0x22, R17
    593          	EEDR = 0xff;
   \   0000000C   EF1F               LDI     R17, 255
   \   0000000E   BD10               OUT     0x20, R17
    594          	EECR |= (1 << EEMPE);
   \   00000010   9AFA               SBI     0x1F, 0x02
    595          	EECR |= (1 << EEPE);
   \   00000012   9AF9               SBI     0x1F, 0x01
    596          	while (EECR & (1 << EEPE))
   \                     ??GetGotoBootloader_1:
   \   00000014   99F9               SBIC    0x1F, 0x01
   \   00000016   CFFE               RJMP    ??GetGotoBootloader_1
    597          	;
    598          
    599          	WDTCSR = 0x18;               //Start watchdog to genetate restart
   \   00000018   E118               LDI     R17, 24
   \   0000001A   9310....           STS     _A_WDTCSR, R17
    600          	WDTCSR = 0x08;               //Start watchdog to genetate restart
   \   0000001E   E018               LDI     R17, 8
   \   00000020   9310....           STS     _A_WDTCSR, R17
    601          }
   \   00000024   9508               RET
   \   00000026                      REQUIRE _A_EECR
   \   00000026                      REQUIRE _A_EEAR
   \   00000026                      REQUIRE _A_EEDR
   \   00000026                      REQUIRE _A_WDTCSR
    602          
    603          /*************************************************************************
    604          *
    605          * Receive EEPROM data
    606          *
    607          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    608          void GetEEPROMData(char ch, unsigned char *pointer) {
   \                     GetEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    609          
    610          	char channel;
    611          	int t0;
    612          
    613          	channel = pointer[0];
   \   00000008   910C               LD      R16, X
   \   0000000A   2E60               MOV     R6, R16
    614          	switch (UnitID) {
   \   0000000C   9100....           LDS     R16, UnitID
   \   00000010   5000               SUBI    R16, 0
   \   00000012   F179               BREQ    ??GetEEPROMData_0
   \   00000014   950A               DEC     R16
   \   00000016   F169               BREQ    ??GetEEPROMData_0
   \   00000018   5002               SUBI    R16, 2
   \   0000001A   F559               BRNE    ??GetEEPROMData_0
    615          	case AN_ZBANA:
    616          		break;
    617          	case AN_ZBHART:
    618          		if (channel >= 0x80) {
   \   0000001C   E800               LDI     R16, 128
   \   0000001E   1660               CP      R6, R16
   \   00000020   F140               BRCS    ??GetEEPROMData_0
    619          			*((float *)&TData.Hart.Offset[channel & 0x0f]) = *((float *)&pointer[1]);  //offset
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   8101               LDD     R16, Z+1
   \   00000026   8112               LDD     R17, Z+2
   \   00000028   8123               LDD     R18, Z+3
   \   0000002A   8134               LDD     R19, Z+4
   \   0000002C   2D46               MOV     R20, R6
   \   0000002E   E050               LDI     R21, 0
   \   00000030   704F               ANDI    R20, 0x0F
   \   00000032   7050               ANDI    R21, 0x00
   \   00000034   0F44               LSL     R20
   \   00000036   1F55               ROL     R21
   \   00000038   0F44               LSL     R20
   \   0000003A   1F55               ROL     R21
   \   0000003C   01FA               MOVW    R31:R30, R21:R20
   \   0000003E   ....               SUBI    R30, LOW((-(TData + 374) & 0xFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(TData + 374) & 0xFFFF))
   \   00000042   8300               ST      Z, R16
   \   00000044   8311               STD     Z+1, R17
   \   00000046   8322               STD     Z+2, R18
   \   00000048   8333               STD     Z+3, R19
    620          			*((float *)&TData.Hart.Gain[channel & 0x0f]) = *((float *)&pointer[5]);  //gain
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8105               LDD     R16, Z+5
   \   0000004E   8116               LDD     R17, Z+6
   \   00000050   8127               LDD     R18, Z+7
   \   00000052   8530               LDD     R19, Z+8
   \   00000054   2D46               MOV     R20, R6
   \   00000056   E050               LDI     R21, 0
   \   00000058   704F               ANDI    R20, 0x0F
   \   0000005A   7050               ANDI    R21, 0x00
   \   0000005C   0F44               LSL     R20
   \   0000005E   1F55               ROL     R21
   \   00000060   0F44               LSL     R20
   \   00000062   1F55               ROL     R21
   \   00000064   01FA               MOVW    R31:R30, R21:R20
   \   00000066   ....               SUBI    R30, LOW((-(TData + 422) & 0xFFFF))
   \   00000068   ....               SBCI    R31, HIGH((-(TData + 422) & 0xFFFF))
   \   0000006A   8300               ST      Z, R16
   \   0000006C   8311               STD     Z+1, R17
   \   0000006E   8322               STD     Z+2, R18
   \   00000070   8333               STD     Z+3, R19
    621          		}
    622          		break;
    623          	case AN_ZB485:
    624          		break;
    625          	}
    626          	WriteEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char *)&pointer[1]);
   \                     ??GetEEPROMData_0:
   \   00000072   01AD               MOVW    R21:R20, R27:R26
   \   00000074   5F4F               SUBI    R20, 255
   \   00000076   4F5F               SBCI    R21, 255
   \   00000078   E024               LDI     R18, 4
   \   0000007A   01BA               MOVW    R23:R22, R21:R20
   \   0000007C   2D06               MOV     R16, R6
   \   0000007E   E010               LDI     R17, 0
   \   00000080   E048               LDI     R20, 8
   \   00000082   E050               LDI     R21, 0
   \   00000084   ........           CALL    ?S_EC_MUL_L02
   \   00000088   01AB               MOVW    R21:R20, R23:R22
   \   0000008A   ........           CALL    WriteEEPROMBuffer
    627          	t0 = OS_GetTime();
   \   0000008E   ........           CALL    OS__Gettime
   \   00000092   01C8               MOVW    R25:R24, R17:R16
    628          	do {
    629          		OS_Delay(1);
   \                     ??GetEEPROMData_1:
   \   00000094   E001               LDI     R16, 1
   \   00000096   E010               LDI     R17, 0
   \   00000098   ........           CALL    OS_Delay
    630          	}while ((OS_GetTime() - t0) < (sizeof(float) * 9) && !EEPWriteOK);  //8.5 ms programming time
   \   0000009C   ........           CALL    OS__Gettime
   \   000000A0   1B08               SUB     R16, R24
   \   000000A2   0B19               SBC     R17, R25
   \   000000A4   3204               CPI     R16, 36
   \   000000A6   4010               SBCI    R17, 0
   \   000000A8   F420               BRCC    ??GetEEPROMData_2
   \   000000AA   9100....           LDS     R16, EEPWriteOK
   \   000000AE   2300               TST     R16
   \   000000B0   F389               BREQ    ??GetEEPROMData_1
    631          	WriteEEPROMBuffer((channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char *)&pointer[5]);
   \                     ??GetEEPROMData_2:
   \   000000B2   01AD               MOVW    R21:R20, R27:R26
   \   000000B4   5F4B               SUBI    R20, 251
   \   000000B6   4F5F               SBCI    R21, 255
   \   000000B8   E024               LDI     R18, 4
   \   000000BA   01BA               MOVW    R23:R22, R21:R20
   \   000000BC   2D06               MOV     R16, R6
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   E048               LDI     R20, 8
   \   000000C2   E050               LDI     R21, 0
   \   000000C4   ........           CALL    ?S_EC_MUL_L02
   \   000000C8   5F0C               SUBI    R16, 252
   \   000000CA   4F1F               SBCI    R17, 255
   \   000000CC   01AB               MOVW    R21:R20, R23:R22
   \   000000CE   ........           CALL    WriteEEPROMBuffer
    632          	t0 = OS_GetTime();
   \   000000D2   ........           CALL    OS__Gettime
   \   000000D6   01C8               MOVW    R25:R24, R17:R16
    633          	do {
    634          		OS_Delay(1);
   \                     ??GetEEPROMData_3:
   \   000000D8   E001               LDI     R16, 1
   \   000000DA   E010               LDI     R17, 0
   \   000000DC   ........           CALL    OS_Delay
    635          	}while ((OS_GetTime() - t0) < (sizeof(float) * 9) && !EEPWriteOK);
   \   000000E0   ........           CALL    OS__Gettime
   \   000000E4   1B08               SUB     R16, R24
   \   000000E6   0B19               SBC     R17, R25
   \   000000E8   3204               CPI     R16, 36
   \   000000EA   4010               SBCI    R17, 0
   \   000000EC   F420               BRCC    ??GetEEPROMData_4
   \   000000EE   9100....           LDS     R16, EEPWriteOK
   \   000000F2   2300               TST     R16
   \   000000F4   F389               BREQ    ??GetEEPROMData_3
    636          }
   \                     ??GetEEPROMData_4:
   \   000000F6   E0E7               LDI     R30, 7
   \   000000F8   ........           JMP     ?EPILOGUE_B7_L09
    637          
    638          
    639          
    640          /*************************************************************************
    641          *
    642          * Receive AN-ZBHART setup
    643          *
    644          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    645          void GetHartSetup(char ch, unsigned char *pointer) {
   \                     GetHartSetup:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    646          
    647          	TData.Hart.PortUsed = pointer[0] + (pointer[1] << 8);  //Get the setup
   \   00000008   910C               LD      R16, X
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   8111               LDD     R17, Z+1
   \   0000000E   ....               LDI     R30, LOW((TData + 144))
   \   00000010   ....               LDI     R31, HIGH((TData + 144))
   \   00000012   8300               ST      Z, R16
   \   00000014   8311               STD     Z+1, R17
    648          	WriteEEPROMByte(EEPROM_PORTSETUP, pointer[0]);   // store in EEPROM
   \   00000016   912C               LD      R18, X
   \   00000018   E002               LDI     R16, 2
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ........           CALL    WriteEEPROMByte
    649          	WriteEEPROMByte(EEPROM_PORTSETUP + 1, pointer[1]);
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   8121               LDD     R18, Z+1
   \   00000024   E003               LDI     R16, 3
   \   00000026   E010               LDI     R17, 0
   \   00000028   ........           CALL    WriteEEPROMByte
    650          #if 0  // blocked by hkim for ZBHART
    651          	SetAnaPort();                           // set the port on or off
    652          #endif
    653          }
   \   0000002C   E0E4               LDI     R30, 4
   \   0000002E   ........           JMP     ?EPILOGUE_B4_L09
    654          
    655          /*************************************************************************
    656          *
    657          * Receive AN-ZBHART filter
    658          *
    659          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    660          void GetHartFilter(char ch, unsigned char *pointer) {
   \                     GetHartFilter:
    661          	char port;
    662          
    663          	for (port = 0; port < 12; port++) {
   \   00000000   E040               LDI     R20, 0
   \                     ??GetHartFilter_0:
   \   00000002   304C               CPI     R20, 12
   \   00000004   F458               BRCC    ??GetHartFilter_1
    664          		TData.Hart.Filter[port] = *pointer++;  //Get the filter
   \   00000006   01F9               MOVW    R31:R30, R19:R18
   \   00000008   8110               LD      R17, Z
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   01FA               MOVW    R31:R30, R21:R20
   \   0000000E   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   00000010   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   00000012   8310               ST      Z, R17
   \   00000014   5F2F               SUBI    R18, 255
   \   00000016   4F3F               SBCI    R19, 255
    665          	}
   \   00000018   9543               INC     R20
   \   0000001A   CFF3               RJMP    ??GetHartFilter_0
    666          }
   \                     ??GetHartFilter_1:
   \   0000001C   9508               RET
    667          
    668          /*************************************************************************
    669          *
    670          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    671          *
    672          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    673          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    674          
    675          	unsigned short  cnt;
    676          	unsigned char   csum;
    677          
    678          	csum = 0;
   \   00000008   E0A0               LDI     R26, 0
    679          	for (cnt = 0; cnt < len; cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSRxChecksum_0:
   \   0000000E   1786               CP      R24, R22
   \   00000010   0797               CPC     R25, R23
   \   00000012   F4D8               BRCC    ??CalcDSRxChecksum_1
    680          		csum = crc[csum ^ UART[ch].pRxBuffer[cnt]];
   \   00000014   E0B0               LDI     R27, 0
   \   00000016   2D02               MOV     R16, R2
   \   00000018   E010               LDI     R17, 0
   \   0000001A   E242               LDI     R20, 34
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   ........           CALL    ?S_EC_MUL_L02
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000028   8D02               LDD     R16, Z+26
   \   0000002A   8D13               LDD     R17, Z+27
   \   0000002C   0F08               ADD     R16, R24
   \   0000002E   1F19               ADC     R17, R25
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   8100               LD      R16, Z
   \   00000034   E010               LDI     R17, 0
   \   00000036   27A0               EOR     R26, R16
   \   00000038   27B1               EOR     R27, R17
   \   0000003A   01FD               MOVW    R31:R30, R27:R26
   \   0000003C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000040   ....               LDI     R19, (crc) >> 16
   \   00000042   BF3B               OUT     0x3B, R19
   \   00000044   91A6               ELPM    R26, Z
    681          	}
   \   00000046   9601               ADIW    R25:R24, 1
   \   00000048   CFE2               RJMP    ??CalcDSRxChecksum_0
    682          	if (csum == UART[ch].pRxBuffer[len]) {
   \                     ??CalcDSRxChecksum_1:
   \   0000004A   2D02               MOV     R16, R2
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   E242               LDI     R20, 34
   \   00000050   E050               LDI     R21, 0
   \   00000052   ........           CALL    ?S_EC_MUL_L02
   \   00000056   01F8               MOVW    R31:R30, R17:R16
   \   00000058   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005C   8D02               LDD     R16, Z+26
   \   0000005E   8D13               LDD     R17, Z+27
   \   00000060   0F06               ADD     R16, R22
   \   00000062   1F17               ADC     R17, R23
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8100               LD      R16, Z
   \   00000068   17A0               CP      R26, R16
   \   0000006A   F419               BRNE    ??CalcDSRxChecksum_2
    683          		return true;
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   E010               LDI     R17, 0
   \   00000070   C002               RJMP    ??CalcDSRxChecksum_3
    684          	} else {
    685          		return false;
   \                     ??CalcDSRxChecksum_2:
   \   00000072   E000               LDI     R16, 0
   \   00000074   E010               LDI     R17, 0
   \                     ??CalcDSRxChecksum_3:
   \   00000076   E0E4               LDI     R30, 4
   \   00000078   ........           JMP     ?EPILOGUE_B4_L09
    686          	}
    687          }
    688          
    689          /*************************************************************************
    690          *
    691          * Goes to sync mode
    692          *
    693          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    694          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
    695          
    696          }
   \   00000004   BF2F               OUT     0x3F, R18
   \   00000006   9508               RET
    697          
    698          /*************************************************************************
    699          *
    700          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    701          *
    702          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    703          char CalcDSTxChecksum(UARTDataType *pUART, unsigned short Length) {
   \                     CalcDSTxChecksum:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01A9               MOVW    R21:R20, R19:R18
    704          	unsigned char csum = 0;
   \   00000008   E000               LDI     R16, 0
    705          	for (short cnt = 0; cnt < Length; cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSTxChecksum_0:
   \   0000000E   1784               CP      R24, R20
   \   00000010   0795               CPC     R25, R21
   \   00000012   F490               BRCC    ??CalcDSTxChecksum_1
    706          		csum = crc[csum ^ pUART->pTxBuffer[cnt+4]];
   \   00000014   E010               LDI     R17, 0
   \   00000016   91ED               LD      R30, X+
   \   00000018   91FC               LD      R31, X
   \   0000001A   9711               SBIW    R27:R26, 1
   \   0000001C   0FE8               ADD     R30, R24
   \   0000001E   1FF9               ADC     R31, R25
   \   00000020   8124               LDD     R18, Z+4
   \   00000022   E030               LDI     R19, 0
   \   00000024   2702               EOR     R16, R18
   \   00000026   2713               EOR     R17, R19
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002C   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000002E   ....               LDI     R19, (crc) >> 16
   \   00000030   BF3B               OUT     0x3B, R19
   \   00000032   9106               ELPM    R16, Z
    707          	}
   \   00000034   9601               ADIW    R25:R24, 1
   \   00000036   CFEB               RJMP    ??CalcDSTxChecksum_0
    708          	return csum;
   \                     ??CalcDSTxChecksum_1:
   \   00000038   E0E4               LDI     R30, 4
   \   0000003A   ........           JMP     ?EPILOGUE_B4_L09
    709          }

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for ANPRO10_UnpackPacket>_0`:
   \   00000000   0000               DW      0
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??ANPRO10_UnpackPacket_6) /2
   \   00000005   ....               DW      (??ANPRO10_UnpackPacket_18) /2
   \   00000007   01                 DB      0x1
   \   00000008   ....               DW      (??ANPRO10_UnpackPacket_18) /2
   \   0000000A   03FEE7             DB      254,0x3,0xe7
   \   0000000D   ....               DW      (??ANPRO10_UnpackPacket_5) /2
   \   0000000F   0A                 DB      0xa
   \   00000010   ....               DW      (??ANPRO10_UnpackPacket_8) /2
   \   00000012   0A                 DB      0xa
   \   00000013   ....               DW      (??ANPRO10_UnpackPacket_9) /2
   \   00000015   32                 DB      0x32
   \   00000016   ....               DW      (??ANPRO10_UnpackPacket_10) /2
   \   00000018   0A                 DB      0xa
   \   00000019   ....               DW      (??ANPRO10_UnpackPacket_11) /2
   \   0000001B   0A                 DB      0xa
   \   0000001C   ....               DW      (??ANPRO10_UnpackPacket_12) /2
   \   0000001E   A0                 DB      0xa0
   \   0000001F   ....               DW      (??ANPRO10_UnpackPacket_13) /2
   \   00000021   0A                 DB      0xa
   \   00000022   ....               DW      (??ANPRO10_UnpackPacket_14) /2
   \   00000024   0A                 DB      0xa
   \   00000025   ....               DW      (??ANPRO10_UnpackPacket_15) /2
   \   00000027   0A                 DB      0xa
   \   00000028   ....               DW      (??ANPRO10_UnpackPacket_16) /2
   \   0000002A   0A                 DB      0xa
   \   0000002B   ....               DW      (??ANPRO10_UnpackPacket_17) /2
   \   0000002D   02FE6C             DB      254,0x2,0x6c
   \   00000030   ....               DW      (??ANPRO10_UnpackPacket_7) /2
   \   00000032   5D                 DB      0x5d
   \   00000033   ....               DW      (??ANPRO10_UnpackPacket_6) /2
   \   00000035   FB                 DB      251
    710          
    711          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     23      2   ANPRO10_IO_Receive
       22      2   -> ANPRO10_UnpackPacket
       23      2   -> MyAddress
       22      2   -> OS_GetMail1
       22      2   -> OS_GetMailTimed
     13      2   ANPRO10_UnpackPacket
       13      2   -> BuildADInt
       13      2   -> BuildEEPROMData
       13      2   -> BuildHartFilter
       13      2   -> BuildHartSetup
       13      2   -> BuildMDataHart
       13      2   -> BuildStackStatus
       13      2   -> BuildStatusData
       13      2   -> GetEEPROMData
       13      2   -> GetGotoBootloader
       13      2   -> GetHartFilter
       13      2   -> GetHartSetup
       13      2   -> GetResetEEPROM
       13      2   -> MyAddress
       13      2   -> Uart_BuildTail
       13      2 ?SV_SWITCH_L06
      6      2   BuildADInt
        6      2 ?S_EC_MUL_L02
      7      2   BuildEEPROMData
        7      2   -> ReadEEPROMBuffer
        7      2 ?S_EC_MUL_L02
      4      2   BuildHartFilter
        4      2 ?S_EC_MUL_L02
      4      2   BuildHartSetup
        4      2 ?S_EC_MUL_L02
     10      2   BuildMDataHart
       10      2   -> hart_channel_lock
       10      2   -> hart_channel_unlock
       10      2 ?S_EC_MUL_L02
      8      2   BuildStackStatus
        8      2   -> OS_GetStackSpace
        8      2 ?S_EC_MUL_L02
      6      2   BuildStatusData
        6      2   -> MyAddress
        6      2 ?S_EC_MUL_L02
      4      2   CalcDSRxChecksum
        4      2 ?S_EC_MUL_L02
      4      2   CalcDSTxChecksum
      7      2   GetEEPROMData
        7      2   -> OS_Delay
        7      2   -> OS__Gettime
        7      2   -> WriteEEPROMBuffer
        7      2 ?S_EC_MUL_L02
      0      2   GetGotoBootloader
      0      2   GetHartFilter
      4      2   GetHartSetup
        4      2   -> WriteEEPROMByte
      3      2   GetResetEEPROM
        3      2   -> EEPROMReset
      0      2   GoToSyncUART
      0      2   TimoutUSART0
        0      2   -> GoToSyncUART
        0      2   -> OS_Error
        0      2   -> OS_StopTimer
      0      2   TimoutUSART0On
        0      2   -> OS_StopTimer
      4      2   Uart_BuildHeader
        4      2   -> MyAddress
      4      2   Uart_BuildTail
        4      2   -> CalcDSTxChecksum
        4      2   -> OS_Error
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader
      0      2   Usart0Handler
        0      2   -> ANPRO10_IO_Receive
      0      2   Usart1Handler
        0      2   -> ANPRO10_IO_Receive


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      54  ?<Jumptable for ANPRO10_UnpackPacket>_0
     634  ANPRO10_IO_Receive
     292  ANPRO10_UnpackPacket
     632  BuildADInt
     676  BuildEEPROMData
     480  BuildHartFilter
     562  BuildHartSetup
     370  BuildMDataHart
     764  BuildStackStatus
    1396  BuildStatusData
     124  CalcDSRxChecksum
      62  CalcDSTxChecksum
     252  GetEEPROMData
      38  GetGotoBootloader
      30  GetHartFilter
      50  GetHartSetup
      18  GetResetEEPROM
       8  GoToSyncUART
       2  LastCommand
      94  TimoutUSART0
      20  TimoutUSART0On
     102  Uart_BuildHeader
     364  Uart_BuildTail
       8  Usart0Handler
       8  Usart1Handler
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_WDTCSR
       7  -- Other

 
     7 bytes in segment ABSOLUTE
 6 984 bytes in segment CODE
     7 bytes in segment INITTAB
     2 bytes in segment NEAR_Z
    54 bytes in segment SWITCH
 
 7 038 bytes of CODE memory (+ 7 bytes shared)
     2 bytes of DATA memory (+ 7 bytes shared)

Errors: none
Warnings: none
