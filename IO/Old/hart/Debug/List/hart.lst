###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       15/Dec/2022  12:17:26
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart\Src\hart.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW5569.tmp
#        (D:\S2Prog\IO\hart\Src\hart.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\hart\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -D DEBUG
#        -lCN D:\S2Prog\IO\hart\Debug\List -y --initializers_in_flash --no_cse
#        --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\hart\INC\\ -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\hart\Debug\List\hart.lst
#    Object file  =  D:\S2Prog\IO\hart\Debug\Obj\hart.r90
#
###############################################################################

D:\S2Prog\IO\hart\Src\hart.c
      1          #include <stdio.h>
      2          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x136
   \   union <unnamed> volatile __ext_io _A_UDR3
   \                     _A_UDR3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x134
   \   union <unnamed> volatile __ext_io _A_UBRR3
   \                     _A_UBRR3:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x132
   \   union <unnamed> volatile __ext_io _A_UCSR3C
   \                     _A_UCSR3C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x131
   \   union <unnamed> volatile __ext_io _A_UCSR3B
   \                     _A_UCSR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x130
   \   union <unnamed> volatile __ext_io _A_UCSR3A
   \                     _A_UCSR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd6
   \   union <unnamed> volatile __io _A_UDR2
   \                     _A_UDR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd4
   \   union <unnamed> volatile __io _A_UBRR2
   \                     _A_UBRR2:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xd2
   \   union <unnamed> volatile __io _A_UCSR2C
   \                     _A_UCSR2C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd1
   \   union <unnamed> volatile __io _A_UCSR2B
   \                     _A_UCSR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd0
   \   union <unnamed> volatile __io _A_UCSR2A
   \                     _A_UCSR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xce
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1
      3          #include "version.h"
      4          #include "inavr.h"
      5          #include "RTOS.h"
      6          
      7          #include "constants.h"
      8          #include "hart_common.h"
      9          #include "hart.h"
     10          #include "hart_diag.h"
     11          #include "hart_msg.h"
     12          #include "hart_gpio.h"
     13          #include "externals.h"
     14          
     15          
     16          ////////////////////////////////////////////////////////////////////////////////
     17          //
     18          // private prototypes
     19          //
     20          ////////////////////////////////////////////////////////////////////////////////
     21          static void hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off);
     22          
     23          static void hart_config_uart(HartTaskStruct *task);
     24          static void hart_reset_tx(HartTaskStruct *task);
     25          static void hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl);
     26          static void hart_start_transaction(HartTaskStruct *task);
     27          
     28          static void hart_irq_tx_next(HartTaskStruct *task);
     29          static void hart_irq_finish_tx(HartTaskStruct *task);
     30          
     31          static void do_hart_transaction(HartTaskStruct *task, hart_channel_t current_chnl, HartTransaction *t);
     32          
     33          void HART_Task(void);
     34          
     35          static void demo1_hart_make_request(HartTaskStruct *task, hart_channel_t current_chnl);
     36          static void demo1_hart_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type);
     37          static uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl);
     38          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     39          HartTaskStruct       _hart_task0 =
   \                     _hart_task0:
   \   00000000                      DS8 1472
   \   000005C0                      REQUIRE `?<Initializer for _hart_task0>`
     40          {
     41          	.modem_no     = hart_modem_0,
     42          	.start_chnl   = hart_channel_0,
     43          	.end_chnl     = hart_channel_3,
     44          };
     45          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     46          HartTaskStruct       _hart_task1 =
   \                     _hart_task1:
   \   00000000                      DS8 1472
   \   000005C0                      REQUIRE `?<Initializer for _hart_task1>`
     47          {
     48          	.modem_no     = hart_modem_1,
     49          	.start_chnl   = hart_channel_4,
     50          	.end_chnl     = hart_channel_7,
     51          };
     52          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     53          HartTaskStruct       _hart_task2 =
   \                     _hart_task2:
   \   00000000                      DS8 1472
   \   000005C0                      REQUIRE `?<Initializer for _hart_task2>`
     54          {
     55          	.modem_no     = hart_modem_2,
     56          	.start_chnl   = hart_channel_8,
     57          	.end_chnl     = hart_channel_11,
     58          };
     59          
     60          
     61          ////////////////////////////////////////////////////////////////////////////////
     62          //
     63          // hart module privates
     64          //
     65          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     66          static HartTransaction   _demo1_transaction =
   \                     _demo1_transaction:
   \   00000000                      DS8 7
   \   00000007                      REQUIRE `?<Initializer for _demo1_transaction>`
     67          {
     68          	.make_request = demo1_hart_make_request,
     69          	.complete     = ReceiveReply,
     70          	.error        = demo1_hart_handle_rx_error,
     71          };
     72          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     73          HartChannel          _hart_channels[HART_MAX_CHANNEL] =
   \                     _hart_channels:
   \   00000000                      DS8 324
   \   00000144                      REQUIRE `?<Initializer for _hart_channels>`
     74          {
     75          	{ .chnl_num       = hart_channel_0  },
     76          	{ .chnl_num       = hart_channel_1  },
     77          	{ .chnl_num       = hart_channel_2  },
     78          	{ .chnl_num       = hart_channel_3  },
     79          	{ .chnl_num       = hart_channel_4  },
     80          	{ .chnl_num       = hart_channel_5  },
     81          	{ .chnl_num       = hart_channel_6  },
     82          	{ .chnl_num       = hart_channel_7  },
     83          	{ .chnl_num       = hart_channel_8  },
     84          	{ .chnl_num       = hart_channel_9  },
     85          	{ .chnl_num       = hart_channel_10 },
     86          	{ .chnl_num       = hart_channel_11 },
     87          };
     88          
     89          ////////////////////////////////////////////////////////////////////////////////
     90          //
     91          // hart channel specifics
     92          //
     93          ////////////////////////////////////////////////////////////////////////////////
     94          /*
     95          void hart_debug_check(void)
     96          {
     97            if((UCSR2B & _BV(TXCIE2)) == 0)
     98            {
     99          	while(1)
    100          	  ;
    101            }
    102          }
    103          */
    104          
    105          

   \                                 In  segment CODE, align 2, keep-with-next
    106          inline void hart_channel_lock(HartChannel *channel) {
   \                     hart_channel_lock:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    107          	switch (channel->chnl_num) {
   \   00000006   910C               LD      R16, X
   \   00000008   5000               SUBI    R16, 0
   \   0000000A   5004               SUBI    R16, 4
   \   0000000C   F048               BRCS    ??hart_channel_lock_0
   \   0000000E   5000               SUBI    R16, 0
   \   00000010   F0A8               BRCS    ??hart_channel_lock_1
   \   00000012   5004               SUBI    R16, 4
   \   00000014   F050               BRCS    ??hart_channel_lock_2
   \   00000016   5000               SUBI    R16, 0
   \   00000018   F088               BRCS    ??hart_channel_lock_1
   \   0000001A   5004               SUBI    R16, 4
   \   0000001C   F058               BRCS    ??hart_channel_lock_3
   \   0000001E   C00E               RJMP    ??hart_channel_lock_1
    108          	case hart_channel_0:
    109          	case hart_channel_1:
    110          	case hart_channel_2:
    111          	case hart_channel_3:
    112          		OS_Use(&_hart_task0.channel_lock);
   \                     ??hart_channel_lock_0:
   \   00000020   ....               LDI     R16, LOW((_hart_task0 + 1464))
   \   00000022   ....               LDI     R17, HIGH((_hart_task0 + 1464))
   \   00000024   ........           CALL    OS_Use
    113          		break;
   \   00000028   C009               RJMP    ??hart_channel_lock_1
    114          
    115          	case hart_channel_4:
    116          	case hart_channel_5:
    117          	case hart_channel_6:
    118          	case hart_channel_7:
    119          		OS_Use(&_hart_task1.channel_lock);
   \                     ??hart_channel_lock_2:
   \   0000002A   ....               LDI     R16, LOW((_hart_task1 + 1464))
   \   0000002C   ....               LDI     R17, HIGH((_hart_task1 + 1464))
   \   0000002E   ........           CALL    OS_Use
    120          		break;
   \   00000032   C004               RJMP    ??hart_channel_lock_1
    121          
    122          	case hart_channel_8:
    123          	case hart_channel_9:
    124          	case hart_channel_10:
    125          	case hart_channel_11:
    126          		OS_Use(&_hart_task2.channel_lock);
   \                     ??hart_channel_lock_3:
   \   00000034   ....               LDI     R16, LOW((_hart_task2 + 1464))
   \   00000036   ....               LDI     R17, HIGH((_hart_task2 + 1464))
   \   00000038   ........           CALL    OS_Use
    127          		break;
    128          	}
    129          }
   \                     ??hart_channel_lock_1:
   \   0000003C   91A9               LD      R26, Y+
   \   0000003E   91B9               LD      R27, Y+
   \   00000040   9508               RET
    130          

   \                                 In  segment CODE, align 2, keep-with-next
    131          inline void hart_channel_unlock(HartChannel *channel) {
   \                     hart_channel_unlock:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    132          	switch (channel->chnl_num) {
   \   00000006   910C               LD      R16, X
   \   00000008   5000               SUBI    R16, 0
   \   0000000A   5004               SUBI    R16, 4
   \   0000000C   F048               BRCS    ??hart_channel_unlock_0
   \   0000000E   5000               SUBI    R16, 0
   \   00000010   F0A8               BRCS    ??hart_channel_unlock_1
   \   00000012   5004               SUBI    R16, 4
   \   00000014   F050               BRCS    ??hart_channel_unlock_2
   \   00000016   5000               SUBI    R16, 0
   \   00000018   F088               BRCS    ??hart_channel_unlock_1
   \   0000001A   5004               SUBI    R16, 4
   \   0000001C   F058               BRCS    ??hart_channel_unlock_3
   \   0000001E   C00E               RJMP    ??hart_channel_unlock_1
    133          	case hart_channel_0:
    134          	case hart_channel_1:
    135          	case hart_channel_2:
    136          	case hart_channel_3:
    137          		OS_Unuse(&_hart_task0.channel_lock);
   \                     ??hart_channel_unlock_0:
   \   00000020   ....               LDI     R16, LOW((_hart_task0 + 1464))
   \   00000022   ....               LDI     R17, HIGH((_hart_task0 + 1464))
   \   00000024   ........           CALL    OS_Unuse
    138          		break;
   \   00000028   C009               RJMP    ??hart_channel_unlock_1
    139          
    140          	case hart_channel_4:
    141          	case hart_channel_5:
    142          	case hart_channel_6:
    143          	case hart_channel_7:
    144          		OS_Unuse(&_hart_task1.channel_lock);
   \                     ??hart_channel_unlock_2:
   \   0000002A   ....               LDI     R16, LOW((_hart_task1 + 1464))
   \   0000002C   ....               LDI     R17, HIGH((_hart_task1 + 1464))
   \   0000002E   ........           CALL    OS_Unuse
    145          		break;
   \   00000032   C004               RJMP    ??hart_channel_unlock_1
    146          
    147          	case hart_channel_8:
    148          	case hart_channel_9:
    149          	case hart_channel_10:
    150          	case hart_channel_11:
    151          		OS_Unuse(&_hart_task2.channel_lock);
   \                     ??hart_channel_unlock_3:
   \   00000034   ....               LDI     R16, LOW((_hart_task2 + 1464))
   \   00000036   ....               LDI     R17, HIGH((_hart_task2 + 1464))
   \   00000038   ........           CALL    OS_Unuse
    152          		break;
    153          	}
    154          }
   \                     ??hart_channel_unlock_1:
   \   0000003C   91A9               LD      R26, Y+
   \   0000003E   91B9               LD      R27, Y+
   \   00000040   9508               RET
    155          

   \                                 In  segment CODE, align 2, keep-with-next
    156          static inline void
    157          hart_channel_reset(HartChannel *channel) {
   \                     hart_channel_reset:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    158          	hart_channel_lock(channel);
   \   00000006   018D               MOVW    R17:R16, R27:R26
   \   00000008   ....               RCALL   hart_channel_lock
    159          
    160          	channel->status         = HartChannelStatus_No_Response;
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   8301               STD     Z+1, R16
    161          	channel->power_status   = HartChannelPowerStatus_OFF;
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   E001               LDI     R16, 1
   \   00000014   8302               STD     Z+2, R16
    162          
    163          	channel->MsrdCurrent     = 0.0;
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   E000               LDI     R16, 0
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E020               LDI     R18, 0
   \   0000001E   E030               LDI     R19, 0
   \   00000020   8303               STD     Z+3, R16
   \   00000022   8314               STD     Z+4, R17
   \   00000024   8325               STD     Z+5, R18
   \   00000026   8336               STD     Z+6, R19
    164          
    165          	channel->rx_invalid_msg = 0;
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E020               LDI     R18, 0
   \   00000030   E030               LDI     R19, 0
   \   00000032   8307               STD     Z+7, R16
   \   00000034   8710               STD     Z+8, R17
   \   00000036   8721               STD     Z+9, R18
   \   00000038   8732               STD     Z+10, R19
    166          	channel->rx_csum_err    = 0;
   \   0000003A   01FD               MOVW    R31:R30, R27:R26
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   E010               LDI     R17, 0
   \   00000040   E020               LDI     R18, 0
   \   00000042   E030               LDI     R19, 0
   \   00000044   8703               STD     Z+11, R16
   \   00000046   8714               STD     Z+12, R17
   \   00000048   8725               STD     Z+13, R18
   \   0000004A   8736               STD     Z+14, R19
    167          	channel->rx_timeout     = 0;
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   E000               LDI     R16, 0
   \   00000050   E010               LDI     R17, 0
   \   00000052   E020               LDI     R18, 0
   \   00000054   E030               LDI     R19, 0
   \   00000056   8707               STD     Z+15, R16
   \   00000058   8B10               STD     Z+16, R17
   \   0000005A   8B21               STD     Z+17, R18
   \   0000005C   8B32               STD     Z+18, R19
    168          	channel->total_reqs     = 0;
   \   0000005E   01FD               MOVW    R31:R30, R27:R26
   \   00000060   E000               LDI     R16, 0
   \   00000062   E010               LDI     R17, 0
   \   00000064   E020               LDI     R18, 0
   \   00000066   E030               LDI     R19, 0
   \   00000068   8B03               STD     Z+19, R16
   \   0000006A   8B14               STD     Z+20, R17
   \   0000006C   8B25               STD     Z+21, R18
   \   0000006E   8B36               STD     Z+22, R19
    169          	channel->total_success  = 0;
   \   00000070   01FD               MOVW    R31:R30, R27:R26
   \   00000072   E000               LDI     R16, 0
   \   00000074   E010               LDI     R17, 0
   \   00000076   E020               LDI     R18, 0
   \   00000078   E030               LDI     R19, 0
   \   0000007A   8B07               STD     Z+23, R16
   \   0000007C   8F10               STD     Z+24, R17
   \   0000007E   8F21               STD     Z+25, R18
   \   00000080   8F32               STD     Z+26, R19
    170          
    171          	hart_channel_unlock(channel);
   \   00000082   018D               MOVW    R17:R16, R27:R26
   \   00000084   ....               RCALL   hart_channel_unlock
    172          }
   \   00000086   91A9               LD      R26, Y+
   \   00000088   91B9               LD      R27, Y+
   \   0000008A   9508               RET
    173          

   \                                 In  segment CODE, align 2, keep-with-next
    174          static inline void
    175          hart_channel_set_status(HartChannel *channel, HartChannelStatus status) {
   \                     hart_channel_set_status:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
    176          	hart_channel_lock(channel);
   \   00000008   018D               MOVW    R17:R16, R27:R26
   \   0000000A   ....               RCALL   hart_channel_lock
    177          
    178          	channel->status     = status;
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8381               STD     Z+1, R24
    179          
    180          	hart_channel_unlock(channel);
   \   00000010   018D               MOVW    R17:R16, R27:R26
   \   00000012   ....               RCALL   hart_channel_unlock
    181          }
   \   00000014   E0E4               LDI     R30, 4
   \   00000016   ........           JMP     ?EPILOGUE_B4_L09
    182          

   \                                 In  segment CODE, align 2, keep-with-next
    183          static inline void
    184          hart_channel_set_power_status(HartChannel *channel, HartChannelPowerStatus status) {
   \                     hart_channel_set_power_status:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
    185          	hart_channel_lock(channel);
   \   00000008   018D               MOVW    R17:R16, R27:R26
   \   0000000A   ....               RCALL   hart_channel_lock
    186          
    187          	channel->power_status   = status;
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8382               STD     Z+2, R24
    188          
    189          	hart_channel_unlock(channel);
   \   00000010   018D               MOVW    R17:R16, R27:R26
   \   00000012   ....               RCALL   hart_channel_unlock
    190          }
   \   00000014   E0E4               LDI     R30, 4
   \   00000016   ........           JMP     ?EPILOGUE_B4_L09
    191          

   \                                 In  segment CODE, align 2, keep-with-next
    192          static char hart_channel_ready_to_poll(hart_channel_t chnl) {
   \                     hart_channel_ready_to_poll:
   \   00000000   2E38               MOV     R3, R24
   \   00000002   2E20               MOV     R2, R16
    193          	char isLoopOK = false;
   \   00000004   E080               LDI     R24, 0
    194          
    195          	//hart_channel_lock(&_hart_channels[chnl]);
    196          
    197          	if (_hart_channels[chnl].power_status == HartChannelPowerStatus_ON &&
    198          		_hart_channels[chnl].MsrdCurrent   >= HART_MINIMUM_MA_FEEDBACK_FOR_OK) {
   \   00000006   2D02               MOV     R16, R2
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14B               LDI     R20, 27
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(_hart_channels) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(_hart_channels) & 0xFFFF) >> 8
   \   00000018   8102               LDD     R16, Z+2
   \   0000001A   2300               TST     R16
   \   0000001C   F4A9               BRNE    ??hart_channel_ready_to_poll_0
   \   0000001E   2D02               MOV     R16, R2
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14B               LDI     R20, 27
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(_hart_channels) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(_hart_channels) & 0xFFFF) >> 8
   \   00000030   8103               LDD     R16, Z+3
   \   00000032   8114               LDD     R17, Z+4
   \   00000034   8125               LDD     R18, Z+5
   \   00000036   8136               LDD     R19, Z+6
   \   00000038   E040               LDI     R20, 0
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   E460               LDI     R22, 64
   \   0000003E   E470               LDI     R23, 64
   \   00000040   ........           CALL    ?F_CMP_GE_L04
   \   00000044   F408               BRCC    ??hart_channel_ready_to_poll_0
    199          		isLoopOK = true;
   \   00000046   E081               LDI     R24, 1
    200          	}
    201          
    202          	//hart_channel_unlock(&_hart_channels[chnl]);
    203          
    204          	return isLoopOK;
   \                     ??hart_channel_ready_to_poll_0:
   \   00000048   2F08               MOV     R16, R24
   \   0000004A   2D83               MOV     R24, R3
   \   0000004C   9508               RET
    205          }
    206          

   \                                 In  segment CODE, align 2, keep-with-next
    207          static inline void
    208          hart_channel_inc_stat(HartChannel *channel, HartChannelStatItem item) {
   \                     hart_channel_inc_stat:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
    209          	hart_channel_lock(channel);
   \   00000008   018D               MOVW    R17:R16, R27:R26
   \   0000000A   ....               RCALL   hart_channel_lock
    210          
    211          	switch (item) {
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   5000               SUBI    R16, 0
   \   00000010   F049               BREQ    ??hart_channel_inc_stat_0
   \   00000012   950A               DEC     R16
   \   00000014   F0A9               BREQ    ??hart_channel_inc_stat_1
   \   00000016   950A               DEC     R16
   \   00000018   F109               BREQ    ??hart_channel_inc_stat_2
   \   0000001A   950A               DEC     R16
   \   0000001C   F169               BREQ    ??hart_channel_inc_stat_3
   \   0000001E   950A               DEC     R16
   \   00000020   F1C9               BREQ    ??hart_channel_inc_stat_4
   \   00000022   C045               RJMP    ??hart_channel_inc_stat_5
    212          	case HartChannelStatItem_RX_INVALID:
    213          		channel->rx_invalid_msg++;
   \                     ??hart_channel_inc_stat_0:
   \   00000024   01FD               MOVW    R31:R30, R27:R26
   \   00000026   8107               LDD     R16, Z+7
   \   00000028   8510               LDD     R17, Z+8
   \   0000002A   8521               LDD     R18, Z+9
   \   0000002C   8532               LDD     R19, Z+10
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   4F2F               SBCI    R18, 255
   \   00000034   4F3F               SBCI    R19, 255
   \   00000036   8307               STD     Z+7, R16
   \   00000038   8710               STD     Z+8, R17
   \   0000003A   8721               STD     Z+9, R18
   \   0000003C   8732               STD     Z+10, R19
    214          		break;
   \   0000003E   C037               RJMP    ??hart_channel_inc_stat_5
    215          
    216          	case HartChannelStatItem_RX_CSUM:
    217          		channel->rx_csum_err++;
   \                     ??hart_channel_inc_stat_1:
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8503               LDD     R16, Z+11
   \   00000044   8514               LDD     R17, Z+12
   \   00000046   8525               LDD     R18, Z+13
   \   00000048   8536               LDD     R19, Z+14
   \   0000004A   5F0F               SUBI    R16, 255
   \   0000004C   4F1F               SBCI    R17, 255
   \   0000004E   4F2F               SBCI    R18, 255
   \   00000050   4F3F               SBCI    R19, 255
   \   00000052   8703               STD     Z+11, R16
   \   00000054   8714               STD     Z+12, R17
   \   00000056   8725               STD     Z+13, R18
   \   00000058   8736               STD     Z+14, R19
    218          		break;
   \   0000005A   C029               RJMP    ??hart_channel_inc_stat_5
    219          
    220          	case HartChannelStatItem_RX_TIMEOUT:
    221          		channel->rx_timeout++;
   \                     ??hart_channel_inc_stat_2:
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   8507               LDD     R16, Z+15
   \   00000060   8910               LDD     R17, Z+16
   \   00000062   8921               LDD     R18, Z+17
   \   00000064   8932               LDD     R19, Z+18
   \   00000066   5F0F               SUBI    R16, 255
   \   00000068   4F1F               SBCI    R17, 255
   \   0000006A   4F2F               SBCI    R18, 255
   \   0000006C   4F3F               SBCI    R19, 255
   \   0000006E   8707               STD     Z+15, R16
   \   00000070   8B10               STD     Z+16, R17
   \   00000072   8B21               STD     Z+17, R18
   \   00000074   8B32               STD     Z+18, R19
    222          		break;
   \   00000076   C01B               RJMP    ??hart_channel_inc_stat_5
    223          
    224          	case HartChannelStatItem_TOTAL_REQS:
    225          		channel->total_reqs++;
   \                     ??hart_channel_inc_stat_3:
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   8903               LDD     R16, Z+19
   \   0000007C   8914               LDD     R17, Z+20
   \   0000007E   8925               LDD     R18, Z+21
   \   00000080   8936               LDD     R19, Z+22
   \   00000082   5F0F               SUBI    R16, 255
   \   00000084   4F1F               SBCI    R17, 255
   \   00000086   4F2F               SBCI    R18, 255
   \   00000088   4F3F               SBCI    R19, 255
   \   0000008A   8B03               STD     Z+19, R16
   \   0000008C   8B14               STD     Z+20, R17
   \   0000008E   8B25               STD     Z+21, R18
   \   00000090   8B36               STD     Z+22, R19
    226          		break;
   \   00000092   C00D               RJMP    ??hart_channel_inc_stat_5
    227          
    228          	case HartChannelStatItem_TOTAL_SUCCESS:
    229          		channel->total_success++;
   \                     ??hart_channel_inc_stat_4:
   \   00000094   01FD               MOVW    R31:R30, R27:R26
   \   00000096   8907               LDD     R16, Z+23
   \   00000098   8D10               LDD     R17, Z+24
   \   0000009A   8D21               LDD     R18, Z+25
   \   0000009C   8D32               LDD     R19, Z+26
   \   0000009E   5F0F               SUBI    R16, 255
   \   000000A0   4F1F               SBCI    R17, 255
   \   000000A2   4F2F               SBCI    R18, 255
   \   000000A4   4F3F               SBCI    R19, 255
   \   000000A6   8B07               STD     Z+23, R16
   \   000000A8   8F10               STD     Z+24, R17
   \   000000AA   8F21               STD     Z+25, R18
   \   000000AC   8F32               STD     Z+26, R19
    230          		break;
    231          	}
    232          
    233          	hart_channel_unlock(channel);
   \                     ??hart_channel_inc_stat_5:
   \   000000AE   018D               MOVW    R17:R16, R27:R26
   \   000000B0   ....               RCALL   hart_channel_unlock
    234          }
   \   000000B2   E0E4               LDI     R30, 4
   \   000000B4   ........           JMP     ?EPILOGUE_B4_L09
    235          
    236          
    237          ////////////////////////////////////////////////////////////////////////////////
    238          //
    239          // private utilities
    240          //
    241          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    242          static void
    243          hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off) {
   \                     hart_control_power:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   2FB1               MOV     R27, R17
    244          	HartChannel *c = &_hart_channels[chnl];
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14B               LDI     R20, 27
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   ....               LDI     R24, LOW(_hart_channels)
   \   00000016   ....               LDI     R25, (_hart_channels) >> 8
   \   00000018   0F80               ADD     R24, R16
   \   0000001A   1F91               ADC     R25, R17
    245          
    246          	if (on_off == HartChannelPowerStatus_ON) {
   \   0000001C   23BB               TST     R27
   \   0000001E   F421               BRNE    ??hart_control_power_0
    247          		hart_gpio_power_on(chnl);
   \   00000020   2F0A               MOV     R16, R26
   \   00000022   ........           CALL    hart_gpio_power_on
   \   00000026   C003               RJMP    ??hart_control_power_1
    248          	} else {
    249          		hart_gpio_power_off(chnl);
   \                     ??hart_control_power_0:
   \   00000028   2F0A               MOV     R16, R26
   \   0000002A   ........           CALL    hart_gpio_power_off
    250          	}
    251          	hart_channel_set_power_status(c, on_off);
   \                     ??hart_control_power_1:
   \   0000002E   2F2B               MOV     R18, R27
   \   00000030   018C               MOVW    R17:R16, R25:R24
   \   00000032   ....               RCALL   hart_channel_set_power_status
    252          }
   \   00000034   E0E4               LDI     R30, 4
   \   00000036   ........           JMP     ?EPILOGUE_B4_L09
    253          

   \                                 In  segment CODE, align 2, keep-with-next
    254          static void
    255          hart_control_Rx_Enable(hart_modem_t   modem, uint8_t enable, uint8_t from_irq) {
   \                     hart_control_Rx_Enable:
    256          	switch (modem) {
   \   00000000   2F30               MOV     R19, R16
   \   00000002   5030               SUBI    R19, 0
   \   00000004   F029               BREQ    ??hart_control_Rx_Enable_0
   \   00000006   953A               DEC     R19
   \   00000008   F089               BREQ    ??hart_control_Rx_Enable_1
   \   0000000A   953A               DEC     R19
   \   0000000C   F0E9               BREQ    ??hart_control_Rx_Enable_2
   \   0000000E   9508               RET
    257          	case hart_modem_0:
    258          		if (enable) {
   \                     ??hart_control_Rx_Enable_0:
   \   00000010   2311               TST     R17
   \   00000012   F031               BREQ    ??hart_control_Rx_Enable_3
    259          			UCSR1B |= _BV(RXEN1);
   \   00000014   913000C9           LDS     R19, 201
   \   00000018   6130               ORI     R19, 0x10
   \   0000001A   933000C9           STS     201, R19
   \   0000001E   9508               RET
    260          		} else {
    261          			UCSR1B &= ~_BV(RXEN1);
   \                     ??hart_control_Rx_Enable_3:
   \   00000020   913000C9           LDS     R19, 201
   \   00000024   7E3F               ANDI    R19, 0xEF
   \   00000026   933000C9           STS     201, R19
    262          		}
    263          		break;
   \   0000002A   9508               RET
    264          
    265          	case hart_modem_1:
    266          		if (enable) {
   \                     ??hart_control_Rx_Enable_1:
   \   0000002C   2311               TST     R17
   \   0000002E   F031               BREQ    ??hart_control_Rx_Enable_4
    267          			UCSR2B |= _BV(RXEN2);
   \   00000030   913000D1           LDS     R19, 209
   \   00000034   6130               ORI     R19, 0x10
   \   00000036   933000D1           STS     209, R19
   \   0000003A   9508               RET
    268          		} else {
    269          			UCSR2B &= ~_BV(RXEN2);
   \                     ??hart_control_Rx_Enable_4:
   \   0000003C   913000D1           LDS     R19, 209
   \   00000040   7E3F               ANDI    R19, 0xEF
   \   00000042   933000D1           STS     209, R19
    270          		}
    271          		break;
   \   00000046   9508               RET
    272          
    273          	case hart_modem_2:
    274          		if (enable) {
   \                     ??hart_control_Rx_Enable_2:
   \   00000048   2311               TST     R17
   \   0000004A   F031               BREQ    ??hart_control_Rx_Enable_5
    275          			UCSR3B |= _BV(RXEN3);
   \   0000004C   91300131           LDS     R19, 305
   \   00000050   6130               ORI     R19, 0x10
   \   00000052   93300131           STS     305, R19
   \   00000056   9508               RET
    276          		} else {
    277          			UCSR3B &= ~_BV(RXEN3);
   \                     ??hart_control_Rx_Enable_5:
   \   00000058   91300131           LDS     R19, 305
   \   0000005C   7E3F               ANDI    R19, 0xEF
   \   0000005E   93300131           STS     305, R19
    278          		}
    279          		break;
    280          	}
    281          }
   \   00000062   9508               RET
   \   00000064                      REQUIRE _A_UCSR1B
   \   00000064                      REQUIRE _A_UCSR2B
   \   00000064                      REQUIRE _A_UCSR3B
    282          
    283          ////////////////////////////////////////////////////////////////////////////////
    284          //
    285          // common IRQ context utilities
    286          //
    287          // this routines shouldn't be called in task context.
    288          //
    289          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    290          static void
    291          hart_irq_tx_next(HartTaskStruct *task) {
   \                     hart_irq_tx_next:
   \   00000000   010C               MOVW    R1:R0, R25:R24
    292          	uint8_t   b;
    293          	uint16_t  len;
    294          	uint16_t  tndx;
    295          
    296          	tndx = task->tx_buf_ndx;
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   5AE5               SUBI    R30, 165
   \   00000006   4FFD               SBCI    R31, 253
   \   00000008   8160               LD      R22, Z
   \   0000000A   8171               LDD     R23, Z+1
   \   0000000C   01CB               MOVW    R25:R24, R23:R22
    297          	len  = task->tx_len;
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   5AE3               SUBI    R30, 163
   \   00000012   4FFD               SBCI    R31, 253
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   01AB               MOVW    R21:R20, R23:R22
    298          	b = task->tx_buf[tndx];
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   0FE8               ADD     R30, R24
   \   0000001E   1FF9               ADC     R31, R25
   \   00000020   5AE1               SUBI    R30, 161
   \   00000022   4FFD               SBCI    R31, 253
   \   00000024   8120               LD      R18, Z
   \   00000026   2F32               MOV     R19, R18
    299          
    300          	tndx++;
   \   00000028   9601               ADIW    R25:R24, 1
    301          	switch (task->modem_no) {
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   5AE8               SUBI    R30, 168
   \   0000002E   4FFD               SBCI    R31, 253
   \   00000030   8120               LD      R18, Z
   \   00000032   5020               SUBI    R18, 0
   \   00000034   F029               BREQ    ??hart_irq_tx_next_0
   \   00000036   952A               DEC     R18
   \   00000038   F0C1               BREQ    ??hart_irq_tx_next_1
   \   0000003A   952A               DEC     R18
   \   0000003C   F159               BREQ    ??hart_irq_tx_next_2
   \   0000003E   C03E               RJMP    ??hart_irq_tx_next_3
    302          	case hart_modem_0:
    303          		if (tndx >= len) {
   \                     ??hart_irq_tx_next_0:
   \   00000040   1784               CP      R24, R20
   \   00000042   0795               CPC     R25, R21
   \   00000044   F078               BRCS    ??hart_irq_tx_next_4
    304          			UCSR1A |=  _BV(TXC1);       // clear TXC flag if set by any chance
   \   00000046   912000C8           LDS     R18, 200
   \   0000004A   6420               ORI     R18, 0x40
   \   0000004C   932000C8           STS     200, R18
    305          			UCSR1B &= ~_BV(UDRIE1);
   \   00000050   912000C9           LDS     R18, 201
   \   00000054   7D2F               ANDI    R18, 0xDF
   \   00000056   932000C9           STS     201, R18
    306          			UCSR1B |=  _BV(TXCIE1);
   \   0000005A   912000C9           LDS     R18, 201
   \   0000005E   6420               ORI     R18, 0x40
   \   00000060   932000C9           STS     201, R18
    307          		}
    308          		UDR1 = b;
   \                     ??hart_irq_tx_next_4:
   \   00000064   9330....           STS     _A_UDR1, R19
    309          		break;
   \   00000068   C029               RJMP    ??hart_irq_tx_next_3
    310          
    311          	case hart_modem_1:
    312          		if (tndx >= len) {
   \                     ??hart_irq_tx_next_1:
   \   0000006A   1784               CP      R24, R20
   \   0000006C   0795               CPC     R25, R21
   \   0000006E   F078               BRCS    ??hart_irq_tx_next_5
    313          			UCSR2A |=  _BV(TXC2);       // clear TXC flag if set by any chance
   \   00000070   912000D0           LDS     R18, 208
   \   00000074   6420               ORI     R18, 0x40
   \   00000076   932000D0           STS     208, R18
    314          			UCSR2B &= ~_BV(UDRIE2);
   \   0000007A   912000D1           LDS     R18, 209
   \   0000007E   7D2F               ANDI    R18, 0xDF
   \   00000080   932000D1           STS     209, R18
    315          			UCSR2B |=  _BV(TXCIE2);
   \   00000084   912000D1           LDS     R18, 209
   \   00000088   6420               ORI     R18, 0x40
   \   0000008A   932000D1           STS     209, R18
    316          		}
    317          		UDR2 = b;
   \                     ??hart_irq_tx_next_5:
   \   0000008E   9330....           STS     _A_UDR2, R19
    318          		break;
   \   00000092   C014               RJMP    ??hart_irq_tx_next_3
    319          
    320          	case hart_modem_2:
    321          		if (tndx >= len) {
   \                     ??hart_irq_tx_next_2:
   \   00000094   1784               CP      R24, R20
   \   00000096   0795               CPC     R25, R21
   \   00000098   F078               BRCS    ??hart_irq_tx_next_6
    322          			UCSR3A |=  _BV(TXC3);       // clear TXC flag if set by any chance
   \   0000009A   91200130           LDS     R18, 304
   \   0000009E   6420               ORI     R18, 0x40
   \   000000A0   93200130           STS     304, R18
    323          			UCSR3B &= ~_BV(UDRIE3);
   \   000000A4   91200131           LDS     R18, 305
   \   000000A8   7D2F               ANDI    R18, 0xDF
   \   000000AA   93200131           STS     305, R18
    324          			UCSR3B |=  _BV(TXCIE3);
   \   000000AE   91200131           LDS     R18, 305
   \   000000B2   6420               ORI     R18, 0x40
   \   000000B4   93200131           STS     305, R18
    325          		}
    326          		UDR3 = b;
   \                     ??hart_irq_tx_next_6:
   \   000000B8   9330....           STS     _A_UDR3, R19
    327          		break;
    328          	}
    329          	task->tx_buf_ndx = tndx;
   \                     ??hart_irq_tx_next_3:
   \   000000BC   01F8               MOVW    R31:R30, R17:R16
   \   000000BE   5AE5               SUBI    R30, 165
   \   000000C0   4FFD               SBCI    R31, 253
   \   000000C2   8380               ST      Z, R24
   \   000000C4   8391               STD     Z+1, R25
    330          }
   \   000000C6   01C0               MOVW    R25:R24, R1:R0
   \   000000C8   9508               RET
   \   000000CA                      REQUIRE _A_UCSR1A
   \   000000CA                      REQUIRE _A_UCSR1B
   \   000000CA                      REQUIRE _A_UDR1
   \   000000CA                      REQUIRE _A_UCSR2A
   \   000000CA                      REQUIRE _A_UCSR2B
   \   000000CA                      REQUIRE _A_UDR2
   \   000000CA                      REQUIRE _A_UCSR3A
   \   000000CA                      REQUIRE _A_UCSR3B
   \   000000CA                      REQUIRE _A_UDR3
    331          

   \                                 In  segment CODE, align 2, keep-with-next
    332          static void
    333          hart_irq_finish_tx(HartTaskStruct *task) {
   \                     hart_irq_finish_tx:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    334          	switch (task->modem_no) {
   \   00000006   01FC               MOVW    R31:R30, R25:R24
   \   00000008   5AE8               SUBI    R30, 168
   \   0000000A   4FFD               SBCI    R31, 253
   \   0000000C   8100               LD      R16, Z
   \   0000000E   5000               SUBI    R16, 0
   \   00000010   F029               BREQ    ??hart_irq_finish_tx_0
   \   00000012   950A               DEC     R16
   \   00000014   F049               BREQ    ??hart_irq_finish_tx_1
   \   00000016   950A               DEC     R16
   \   00000018   F069               BREQ    ??hart_irq_finish_tx_2
   \   0000001A   C011               RJMP    ??hart_irq_finish_tx_3
    335          	case hart_modem_0:
    336          		UCSR1B &=  ~_BV(TXCIE1);
   \                     ??hart_irq_finish_tx_0:
   \   0000001C   910000C9           LDS     R16, 201
   \   00000020   7B0F               ANDI    R16, 0xBF
   \   00000022   930000C9           STS     201, R16
    337          		break;
   \   00000026   C00B               RJMP    ??hart_irq_finish_tx_3
    338          
    339          	case hart_modem_1:
    340          		UCSR2B &=  ~_BV(TXCIE2);
   \                     ??hart_irq_finish_tx_1:
   \   00000028   910000D1           LDS     R16, 209
   \   0000002C   7B0F               ANDI    R16, 0xBF
   \   0000002E   930000D1           STS     209, R16
    341          		break;
   \   00000032   C005               RJMP    ??hart_irq_finish_tx_3
    342          
    343          	case hart_modem_2:
    344          		UCSR3B &=  ~_BV(TXCIE3);
   \                     ??hart_irq_finish_tx_2:
   \   00000034   91000131           LDS     R16, 305
   \   00000038   7B0F               ANDI    R16, 0xBF
   \   0000003A   93000131           STS     305, R16
    345          		break;
    346          	}
    347          
    348          	//
    349          	// Disable demodulator on hart modem
    350          	//
    351          #if HART_CONTROL_RTS_IN_TASK  == 0
    352          	hart_gpio_hart_carrier_off_irq(task->modem_no);
   \                     ??hart_irq_finish_tx_3:
   \   0000003E   01FC               MOVW    R31:R30, R25:R24
   \   00000040   5AE8               SUBI    R30, 168
   \   00000042   4FFD               SBCI    R31, 253
   \   00000044   8100               LD      R16, Z
   \   00000046   ........           CALL    hart_gpio_hart_carrier_off_irq
    353          #endif
    354          	OS_SignalEvent(HART_EVENT_TX_COMPLETE, &task->tcb);
   \   0000004A   019C               MOVW    R19:R18, R25:R24
   \   0000004C   5B2E               SUBI    R18, 190
   \   0000004E   4F3D               SBCI    R19, 253
   \   00000050   E004               LDI     R16, 4
   \   00000052   ........           CALL    OS_SignalEvent
    355          
    356          	return;
   \   00000056   9189               LD      R24, Y+
   \   00000058   9199               LD      R25, Y+
   \   0000005A   9508               RET
   \   0000005C                      REQUIRE _A_UCSR1B
   \   0000005C                      REQUIRE _A_UCSR2B
   \   0000005C                      REQUIRE _A_UCSR3B
    357          }
    358          
    359          
    360          ////////////////////////////////////////////////////////////////////////////////
    361          //
    362          // HART0 USART1 IRQ handler
    363          //
    364          ////////////////////////////////////////////////////////////////////////////////
    365          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    366          __interrupt void USART1_RXC(void) {
   \                     USART1_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024   9721               SBIW    R29:R28, 1
    367          	ENTER_IRQ;
   \   00000026   9100....           LDS     R16, OS_InInt
   \   0000002A   9503               INC     R16
   \   0000002C   9300....           STS     OS_InInt, R16
   \   00000030   9100....           LDS     R16, OS_Counters
   \   00000034   9503               INC     R16
   \   00000036   9300....           STS     OS_Counters, R16
   \   0000003A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003E   9503               INC     R16
   \   00000040   9300....           STS     (OS_Counters + 1), R16
   \   00000044   94F8               CLI
   \   00000046   ........           CALL    OS__EnterIntStack
   \   0000004A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004E   7F00               ANDI    R16, 0xF0
   \   00000050   2300               TST     R16
   \   00000052   F021               BREQ    ??USART1_RXC_0
   \   00000054   E909               LDI     R16, 153
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    OS_Error
   \                     ??USART1_RXC_0:
   \   0000005C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000060   2300               TST     R16
   \   00000062   F409               BRNE    ??USART1_RXC_1
   \   00000064   9478               SEI
    368          	if (_hart_task0.rx_Listen[_hart_task0.rx_Channel]) {
   \                     ??USART1_RXC_1:
   \   00000066   9100....           LDS     R16, (_hart_task0 + 1379)
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(_hart_task0 + 1380) & 0xFFFF))
   \   00000070   ....               SBCI    R31, HIGH((-(_hart_task0 + 1380) & 0xFFFF))
   \   00000072   8100               LD      R16, Z
   \   00000074   2300               TST     R16
   \   00000076   F0C9               BREQ    ??USART1_RXC_2
    369          		 char Dummy = UDR1;
   \   00000078   9120....           LDS     R18, _A_UDR1
    370          		_hart_task0.rx_Time[_hart_task0.rx_Channel] = OS_Time;
   \   0000007C   9100....           LDS     R16, (_hart_task0 + 1379)
   \   00000080   9140....           LDS     R20, OS_Time
   \   00000084   9150....           LDS     R21, (OS_Time + 1)
   \   00000088   9160....           LDS     R22, (OS_Time + 2)
   \   0000008C   9170....           LDS     R23, (OS_Time + 3)
   \   00000090   E010               LDI     R17, 0
   \   00000092   0F00               LSL     R16
   \   00000094   1F11               ROL     R17
   \   00000096   0F00               LSL     R16
   \   00000098   1F11               ROL     R17
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(_hart_task0 + 1384) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, HIGH((-(_hart_task0 + 1384) & 0xFFFF))
   \   000000A0   8340               ST      Z, R20
   \   000000A2   8351               STD     Z+1, R21
   \   000000A4   8362               STD     Z+2, R22
   \   000000A6   8373               STD     Z+3, R23
   \   000000A8   C008               RJMP    ??USART1_RXC_3
    371          	} else {
    372          		const char tmpData = UDR1;
   \                     ??USART1_RXC_2:
   \   000000AA   9100....           LDS     R16, _A_UDR1
   \   000000AE   8308               ST      Y, R16
    373          		OS_PutMailCond1(&_hart_task0.RxMailBox, &tmpData);
   \   000000B0   019E               MOVW    R19:R18, R29:R28
   \   000000B2   ....               LDI     R16, LOW((_hart_task0 + 564))
   \   000000B4   ....               LDI     R17, HIGH((_hart_task0 + 564))
   \   000000B6   ........           CALL    OS_PutMailCond1
    374          	}
    375          
    376          	LEAVE_IRQ;
   \                     ??USART1_RXC_3:
   \   000000BA   94F8               CLI
   \   000000BC   ........           CALL    OS__LeaveIntStack
   \   000000C0   9100....           LDS     R16, OS_InInt
   \   000000C4   2F10               MOV     R17, R16
   \   000000C6   951A               DEC     R17
   \   000000C8   9310....           STS     OS_InInt, R17
   \   000000CC   2300               TST     R16
   \   000000CE   F421               BRNE    ??USART1_RXC_4
   \   000000D0   E908               LDI     R16, 152
   \   000000D2   E010               LDI     R17, 0
   \   000000D4   ........           CALL    OS_Error
   \                     ??USART1_RXC_4:
   \   000000D8   9100....           LDS     R16, (OS_Counters + 1)
   \   000000DC   950A               DEC     R16
   \   000000DE   9300....           STS     (OS_Counters + 1), R16
   \   000000E2   9100....           LDS     R16, OS_Counters
   \   000000E6   950A               DEC     R16
   \   000000E8   9300....           STS     OS_Counters, R16
    377          }
   \   000000EC   9621               ADIW    R29:R28, 1
   \   000000EE   BF9B               OUT     0x3B, R25
   \   000000F0   BF8F               OUT     0x3F, R24
   \   000000F2   9109               LD      R16, Y+
   \   000000F4   9119               LD      R17, Y+
   \   000000F6   9129               LD      R18, Y+
   \   000000F8   9139               LD      R19, Y+
   \   000000FA   9149               LD      R20, Y+
   \   000000FC   9159               LD      R21, Y+
   \   000000FE   9169               LD      R22, Y+
   \   00000100   9179               LD      R23, Y+
   \   00000102   9009               LD      R0, Y+
   \   00000104   9019               LD      R1, Y+
   \   00000106   9029               LD      R2, Y+
   \   00000108   9039               LD      R3, Y+
   \   0000010A   91E9               LD      R30, Y+
   \   0000010C   91F9               LD      R31, Y+
   \   0000010E   9189               LD      R24, Y+
   \   00000110   9199               LD      R25, Y+
   \   00000112   9518               RETI
   \   00000114                      REQUIRE _A_UDR1
    378          
    379          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    380          __interrupt void USART1_TXC(void) {
   \                     USART1_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    381          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   2300               TST     R16
   \   00000050   F021               BREQ    ??USART1_TXC_0
   \   00000052   E909               LDI     R16, 153
   \   00000054   E010               LDI     R17, 0
   \   00000056   ........           CALL    OS_Error
   \                     ??USART1_TXC_0:
   \   0000005A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005E   2300               TST     R16
   \   00000060   F409               BRNE    ??USART1_TXC_1
   \   00000062   9478               SEI
    382          
    383          	hart_irq_finish_tx(&_hart_task0);
   \                     ??USART1_TXC_1:
   \   00000064   ....               LDI     R16, LOW(_hart_task0)
   \   00000066   ....               LDI     R17, (_hart_task0) >> 8
   \   00000068   ....               RCALL   hart_irq_finish_tx
    384          
    385          	LEAVE_IRQ;
   \   0000006A   94F8               CLI
   \   0000006C   ........           CALL    OS__LeaveIntStack
   \   00000070   9100....           LDS     R16, OS_InInt
   \   00000074   2F10               MOV     R17, R16
   \   00000076   951A               DEC     R17
   \   00000078   9310....           STS     OS_InInt, R17
   \   0000007C   2300               TST     R16
   \   0000007E   F421               BRNE    ??USART1_TXC_2
   \   00000080   E908               LDI     R16, 152
   \   00000082   E010               LDI     R17, 0
   \   00000084   ........           CALL    OS_Error
   \                     ??USART1_TXC_2:
   \   00000088   9100....           LDS     R16, (OS_Counters + 1)
   \   0000008C   950A               DEC     R16
   \   0000008E   9300....           STS     (OS_Counters + 1), R16
   \   00000092   9100....           LDS     R16, OS_Counters
   \   00000096   950A               DEC     R16
   \   00000098   9300....           STS     OS_Counters, R16
    386          }
   \   0000009C   BF9B               OUT     0x3B, R25
   \   0000009E   BF8F               OUT     0x3F, R24
   \   000000A0   9109               LD      R16, Y+
   \   000000A2   9119               LD      R17, Y+
   \   000000A4   9129               LD      R18, Y+
   \   000000A6   9139               LD      R19, Y+
   \   000000A8   9149               LD      R20, Y+
   \   000000AA   9159               LD      R21, Y+
   \   000000AC   9169               LD      R22, Y+
   \   000000AE   9179               LD      R23, Y+
   \   000000B0   9009               LD      R0, Y+
   \   000000B2   9019               LD      R1, Y+
   \   000000B4   9029               LD      R2, Y+
   \   000000B6   9039               LD      R3, Y+
   \   000000B8   91E9               LD      R30, Y+
   \   000000BA   91F9               LD      R31, Y+
   \   000000BC   9189               LD      R24, Y+
   \   000000BE   9199               LD      R25, Y+
   \   000000C0   9518               RETI
    387          
    388          #pragma vector=USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    389          __interrupt void USART1_UDRE(void) {
   \                     USART1_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    390          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   2300               TST     R16
   \   00000050   F021               BREQ    ??USART1_UDRE_0
   \   00000052   E909               LDI     R16, 153
   \   00000054   E010               LDI     R17, 0
   \   00000056   ........           CALL    OS_Error
   \                     ??USART1_UDRE_0:
   \   0000005A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005E   2300               TST     R16
   \   00000060   F409               BRNE    ??USART1_UDRE_1
   \   00000062   9478               SEI
    391          
    392          	hart_irq_tx_next(&_hart_task0);
   \                     ??USART1_UDRE_1:
   \   00000064   ....               LDI     R16, LOW(_hart_task0)
   \   00000066   ....               LDI     R17, (_hart_task0) >> 8
   \   00000068   ....               RCALL   hart_irq_tx_next
    393          
    394          	LEAVE_IRQ;
   \   0000006A   94F8               CLI
   \   0000006C   ........           CALL    OS__LeaveIntStack
   \   00000070   9100....           LDS     R16, OS_InInt
   \   00000074   2F10               MOV     R17, R16
   \   00000076   951A               DEC     R17
   \   00000078   9310....           STS     OS_InInt, R17
   \   0000007C   2300               TST     R16
   \   0000007E   F421               BRNE    ??USART1_UDRE_2
   \   00000080   E908               LDI     R16, 152
   \   00000082   E010               LDI     R17, 0
   \   00000084   ........           CALL    OS_Error
   \                     ??USART1_UDRE_2:
   \   00000088   9100....           LDS     R16, (OS_Counters + 1)
   \   0000008C   950A               DEC     R16
   \   0000008E   9300....           STS     (OS_Counters + 1), R16
   \   00000092   9100....           LDS     R16, OS_Counters
   \   00000096   950A               DEC     R16
   \   00000098   9300....           STS     OS_Counters, R16
    395          }
   \   0000009C   BF9B               OUT     0x3B, R25
   \   0000009E   BF8F               OUT     0x3F, R24
   \   000000A0   9109               LD      R16, Y+
   \   000000A2   9119               LD      R17, Y+
   \   000000A4   9129               LD      R18, Y+
   \   000000A6   9139               LD      R19, Y+
   \   000000A8   9149               LD      R20, Y+
   \   000000AA   9159               LD      R21, Y+
   \   000000AC   9169               LD      R22, Y+
   \   000000AE   9179               LD      R23, Y+
   \   000000B0   9009               LD      R0, Y+
   \   000000B2   9019               LD      R1, Y+
   \   000000B4   9029               LD      R2, Y+
   \   000000B6   9039               LD      R3, Y+
   \   000000B8   91E9               LD      R30, Y+
   \   000000BA   91F9               LD      R31, Y+
   \   000000BC   9189               LD      R24, Y+
   \   000000BE   9199               LD      R25, Y+
   \   000000C0   9518               RETI
    396          
    397          ////////////////////////////////////////////////////////////////////////////////
    398          //
    399          // HART1 USART2 IRQ handler
    400          //
    401          ////////////////////////////////////////////////////////////////////////////////
    402          #pragma vector=USART2_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    403          __interrupt void USART2_RXC(void) {
   \                     USART2_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024   9721               SBIW    R29:R28, 1
    404          	ENTER_IRQ;
   \   00000026   9100....           LDS     R16, OS_InInt
   \   0000002A   9503               INC     R16
   \   0000002C   9300....           STS     OS_InInt, R16
   \   00000030   9100....           LDS     R16, OS_Counters
   \   00000034   9503               INC     R16
   \   00000036   9300....           STS     OS_Counters, R16
   \   0000003A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003E   9503               INC     R16
   \   00000040   9300....           STS     (OS_Counters + 1), R16
   \   00000044   94F8               CLI
   \   00000046   ........           CALL    OS__EnterIntStack
   \   0000004A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004E   7F00               ANDI    R16, 0xF0
   \   00000050   2300               TST     R16
   \   00000052   F021               BREQ    ??USART2_RXC_0
   \   00000054   E909               LDI     R16, 153
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    OS_Error
   \                     ??USART2_RXC_0:
   \   0000005C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000060   2300               TST     R16
   \   00000062   F409               BRNE    ??USART2_RXC_1
   \   00000064   9478               SEI
    405          	if (_hart_task1.rx_Listen[_hart_task1.rx_Channel]) {
   \                     ??USART2_RXC_1:
   \   00000066   9100....           LDS     R16, (_hart_task1 + 1379)
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(_hart_task1 + 1380) & 0xFFFF))
   \   00000070   ....               SBCI    R31, HIGH((-(_hart_task1 + 1380) & 0xFFFF))
   \   00000072   8100               LD      R16, Z
   \   00000074   2300               TST     R16
   \   00000076   F0C9               BREQ    ??USART2_RXC_2
    406          		 char Dummy = UDR2;
   \   00000078   9120....           LDS     R18, _A_UDR2
    407          		_hart_task1.rx_Time[_hart_task1.rx_Channel] = OS_Time;
   \   0000007C   9100....           LDS     R16, (_hart_task1 + 1379)
   \   00000080   9140....           LDS     R20, OS_Time
   \   00000084   9150....           LDS     R21, (OS_Time + 1)
   \   00000088   9160....           LDS     R22, (OS_Time + 2)
   \   0000008C   9170....           LDS     R23, (OS_Time + 3)
   \   00000090   E010               LDI     R17, 0
   \   00000092   0F00               LSL     R16
   \   00000094   1F11               ROL     R17
   \   00000096   0F00               LSL     R16
   \   00000098   1F11               ROL     R17
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(_hart_task1 + 1384) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, HIGH((-(_hart_task1 + 1384) & 0xFFFF))
   \   000000A0   8340               ST      Z, R20
   \   000000A2   8351               STD     Z+1, R21
   \   000000A4   8362               STD     Z+2, R22
   \   000000A6   8373               STD     Z+3, R23
   \   000000A8   C008               RJMP    ??USART2_RXC_3
    408          	} else {
    409          		const char tmpData = UDR2;
   \                     ??USART2_RXC_2:
   \   000000AA   9100....           LDS     R16, _A_UDR2
   \   000000AE   8308               ST      Y, R16
    410          		OS_PutMailCond1(&_hart_task1.RxMailBox, &tmpData);
   \   000000B0   019E               MOVW    R19:R18, R29:R28
   \   000000B2   ....               LDI     R16, LOW((_hart_task1 + 564))
   \   000000B4   ....               LDI     R17, HIGH((_hart_task1 + 564))
   \   000000B6   ........           CALL    OS_PutMailCond1
    411          	}
    412          	LEAVE_IRQ;
   \                     ??USART2_RXC_3:
   \   000000BA   94F8               CLI
   \   000000BC   ........           CALL    OS__LeaveIntStack
   \   000000C0   9100....           LDS     R16, OS_InInt
   \   000000C4   2F10               MOV     R17, R16
   \   000000C6   951A               DEC     R17
   \   000000C8   9310....           STS     OS_InInt, R17
   \   000000CC   2300               TST     R16
   \   000000CE   F421               BRNE    ??USART2_RXC_4
   \   000000D0   E908               LDI     R16, 152
   \   000000D2   E010               LDI     R17, 0
   \   000000D4   ........           CALL    OS_Error
   \                     ??USART2_RXC_4:
   \   000000D8   9100....           LDS     R16, (OS_Counters + 1)
   \   000000DC   950A               DEC     R16
   \   000000DE   9300....           STS     (OS_Counters + 1), R16
   \   000000E2   9100....           LDS     R16, OS_Counters
   \   000000E6   950A               DEC     R16
   \   000000E8   9300....           STS     OS_Counters, R16
    413          }
   \   000000EC   9621               ADIW    R29:R28, 1
   \   000000EE   BF9B               OUT     0x3B, R25
   \   000000F0   BF8F               OUT     0x3F, R24
   \   000000F2   9109               LD      R16, Y+
   \   000000F4   9119               LD      R17, Y+
   \   000000F6   9129               LD      R18, Y+
   \   000000F8   9139               LD      R19, Y+
   \   000000FA   9149               LD      R20, Y+
   \   000000FC   9159               LD      R21, Y+
   \   000000FE   9169               LD      R22, Y+
   \   00000100   9179               LD      R23, Y+
   \   00000102   9009               LD      R0, Y+
   \   00000104   9019               LD      R1, Y+
   \   00000106   9029               LD      R2, Y+
   \   00000108   9039               LD      R3, Y+
   \   0000010A   91E9               LD      R30, Y+
   \   0000010C   91F9               LD      R31, Y+
   \   0000010E   9189               LD      R24, Y+
   \   00000110   9199               LD      R25, Y+
   \   00000112   9518               RETI
   \   00000114                      REQUIRE _A_UDR2
    414          
    415          #pragma vector=USART2_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    416          __interrupt void USART2_TXC(void) {
   \                     USART2_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    417          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   2300               TST     R16
   \   00000050   F021               BREQ    ??USART2_TXC_0
   \   00000052   E909               LDI     R16, 153
   \   00000054   E010               LDI     R17, 0
   \   00000056   ........           CALL    OS_Error
   \                     ??USART2_TXC_0:
   \   0000005A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005E   2300               TST     R16
   \   00000060   F409               BRNE    ??USART2_TXC_1
   \   00000062   9478               SEI
    418          
    419          	hart_irq_finish_tx(&_hart_task1);
   \                     ??USART2_TXC_1:
   \   00000064   ....               LDI     R16, LOW(_hart_task1)
   \   00000066   ....               LDI     R17, (_hart_task1) >> 8
   \   00000068   ....               RCALL   hart_irq_finish_tx
    420          
    421          	LEAVE_IRQ;
   \   0000006A   94F8               CLI
   \   0000006C   ........           CALL    OS__LeaveIntStack
   \   00000070   9100....           LDS     R16, OS_InInt
   \   00000074   2F10               MOV     R17, R16
   \   00000076   951A               DEC     R17
   \   00000078   9310....           STS     OS_InInt, R17
   \   0000007C   2300               TST     R16
   \   0000007E   F421               BRNE    ??USART2_TXC_2
   \   00000080   E908               LDI     R16, 152
   \   00000082   E010               LDI     R17, 0
   \   00000084   ........           CALL    OS_Error
   \                     ??USART2_TXC_2:
   \   00000088   9100....           LDS     R16, (OS_Counters + 1)
   \   0000008C   950A               DEC     R16
   \   0000008E   9300....           STS     (OS_Counters + 1), R16
   \   00000092   9100....           LDS     R16, OS_Counters
   \   00000096   950A               DEC     R16
   \   00000098   9300....           STS     OS_Counters, R16
    422          }
   \   0000009C   BF9B               OUT     0x3B, R25
   \   0000009E   BF8F               OUT     0x3F, R24
   \   000000A0   9109               LD      R16, Y+
   \   000000A2   9119               LD      R17, Y+
   \   000000A4   9129               LD      R18, Y+
   \   000000A6   9139               LD      R19, Y+
   \   000000A8   9149               LD      R20, Y+
   \   000000AA   9159               LD      R21, Y+
   \   000000AC   9169               LD      R22, Y+
   \   000000AE   9179               LD      R23, Y+
   \   000000B0   9009               LD      R0, Y+
   \   000000B2   9019               LD      R1, Y+
   \   000000B4   9029               LD      R2, Y+
   \   000000B6   9039               LD      R3, Y+
   \   000000B8   91E9               LD      R30, Y+
   \   000000BA   91F9               LD      R31, Y+
   \   000000BC   9189               LD      R24, Y+
   \   000000BE   9199               LD      R25, Y+
   \   000000C0   9518               RETI
    423          
    424          #pragma vector=USART2_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    425          __interrupt void USART2_UDRE(void) {
   \                     USART2_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    426          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   2300               TST     R16
   \   00000050   F021               BREQ    ??USART2_UDRE_0
   \   00000052   E909               LDI     R16, 153
   \   00000054   E010               LDI     R17, 0
   \   00000056   ........           CALL    OS_Error
   \                     ??USART2_UDRE_0:
   \   0000005A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005E   2300               TST     R16
   \   00000060   F409               BRNE    ??USART2_UDRE_1
   \   00000062   9478               SEI
    427          
    428          	hart_irq_tx_next(&_hart_task1);
   \                     ??USART2_UDRE_1:
   \   00000064   ....               LDI     R16, LOW(_hart_task1)
   \   00000066   ....               LDI     R17, (_hart_task1) >> 8
   \   00000068   ....               RCALL   hart_irq_tx_next
    429          
    430          	LEAVE_IRQ;
   \   0000006A   94F8               CLI
   \   0000006C   ........           CALL    OS__LeaveIntStack
   \   00000070   9100....           LDS     R16, OS_InInt
   \   00000074   2F10               MOV     R17, R16
   \   00000076   951A               DEC     R17
   \   00000078   9310....           STS     OS_InInt, R17
   \   0000007C   2300               TST     R16
   \   0000007E   F421               BRNE    ??USART2_UDRE_2
   \   00000080   E908               LDI     R16, 152
   \   00000082   E010               LDI     R17, 0
   \   00000084   ........           CALL    OS_Error
   \                     ??USART2_UDRE_2:
   \   00000088   9100....           LDS     R16, (OS_Counters + 1)
   \   0000008C   950A               DEC     R16
   \   0000008E   9300....           STS     (OS_Counters + 1), R16
   \   00000092   9100....           LDS     R16, OS_Counters
   \   00000096   950A               DEC     R16
   \   00000098   9300....           STS     OS_Counters, R16
    431          }
   \   0000009C   BF9B               OUT     0x3B, R25
   \   0000009E   BF8F               OUT     0x3F, R24
   \   000000A0   9109               LD      R16, Y+
   \   000000A2   9119               LD      R17, Y+
   \   000000A4   9129               LD      R18, Y+
   \   000000A6   9139               LD      R19, Y+
   \   000000A8   9149               LD      R20, Y+
   \   000000AA   9159               LD      R21, Y+
   \   000000AC   9169               LD      R22, Y+
   \   000000AE   9179               LD      R23, Y+
   \   000000B0   9009               LD      R0, Y+
   \   000000B2   9019               LD      R1, Y+
   \   000000B4   9029               LD      R2, Y+
   \   000000B6   9039               LD      R3, Y+
   \   000000B8   91E9               LD      R30, Y+
   \   000000BA   91F9               LD      R31, Y+
   \   000000BC   9189               LD      R24, Y+
   \   000000BE   9199               LD      R25, Y+
   \   000000C0   9518               RETI
    432          
    433          ////////////////////////////////////////////////////////////////////////////////
    434          //
    435          // HART1 USART3 IRQ handler
    436          //
    437          ////////////////////////////////////////////////////////////////////////////////
    438          #pragma vector=USART3_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    439          __interrupt void USART3_RXC(void) {
   \                     USART3_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024   9721               SBIW    R29:R28, 1
    440          	ENTER_IRQ;
   \   00000026   9100....           LDS     R16, OS_InInt
   \   0000002A   9503               INC     R16
   \   0000002C   9300....           STS     OS_InInt, R16
   \   00000030   9100....           LDS     R16, OS_Counters
   \   00000034   9503               INC     R16
   \   00000036   9300....           STS     OS_Counters, R16
   \   0000003A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003E   9503               INC     R16
   \   00000040   9300....           STS     (OS_Counters + 1), R16
   \   00000044   94F8               CLI
   \   00000046   ........           CALL    OS__EnterIntStack
   \   0000004A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004E   7F00               ANDI    R16, 0xF0
   \   00000050   2300               TST     R16
   \   00000052   F021               BREQ    ??USART3_RXC_0
   \   00000054   E909               LDI     R16, 153
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    OS_Error
   \                     ??USART3_RXC_0:
   \   0000005C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000060   2300               TST     R16
   \   00000062   F409               BRNE    ??USART3_RXC_1
   \   00000064   9478               SEI
    441          
    442          	if (_hart_task2.rx_Listen[_hart_task2.rx_Channel]) {
   \                     ??USART3_RXC_1:
   \   00000066   9100....           LDS     R16, (_hart_task2 + 1379)
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(_hart_task2 + 1380) & 0xFFFF))
   \   00000070   ....               SBCI    R31, HIGH((-(_hart_task2 + 1380) & 0xFFFF))
   \   00000072   8100               LD      R16, Z
   \   00000074   2300               TST     R16
   \   00000076   F0C9               BREQ    ??USART3_RXC_2
    443          		 char Dummy = UDR3;
   \   00000078   9120....           LDS     R18, _A_UDR3
    444          		_hart_task2.rx_Time[_hart_task2.rx_Channel] = OS_Time;
   \   0000007C   9100....           LDS     R16, (_hart_task2 + 1379)
   \   00000080   9140....           LDS     R20, OS_Time
   \   00000084   9150....           LDS     R21, (OS_Time + 1)
   \   00000088   9160....           LDS     R22, (OS_Time + 2)
   \   0000008C   9170....           LDS     R23, (OS_Time + 3)
   \   00000090   E010               LDI     R17, 0
   \   00000092   0F00               LSL     R16
   \   00000094   1F11               ROL     R17
   \   00000096   0F00               LSL     R16
   \   00000098   1F11               ROL     R17
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(_hart_task2 + 1384) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, HIGH((-(_hart_task2 + 1384) & 0xFFFF))
   \   000000A0   8340               ST      Z, R20
   \   000000A2   8351               STD     Z+1, R21
   \   000000A4   8362               STD     Z+2, R22
   \   000000A6   8373               STD     Z+3, R23
   \   000000A8   C008               RJMP    ??USART3_RXC_3
    445          	} else {
    446          		const char tmpData = UDR3;
   \                     ??USART3_RXC_2:
   \   000000AA   9100....           LDS     R16, _A_UDR3
   \   000000AE   8308               ST      Y, R16
    447          		OS_PutMailCond1(&_hart_task2.RxMailBox, &tmpData);
   \   000000B0   019E               MOVW    R19:R18, R29:R28
   \   000000B2   ....               LDI     R16, LOW((_hart_task2 + 564))
   \   000000B4   ....               LDI     R17, HIGH((_hart_task2 + 564))
   \   000000B6   ........           CALL    OS_PutMailCond1
    448          	}
    449          	LEAVE_IRQ;
   \                     ??USART3_RXC_3:
   \   000000BA   94F8               CLI
   \   000000BC   ........           CALL    OS__LeaveIntStack
   \   000000C0   9100....           LDS     R16, OS_InInt
   \   000000C4   2F10               MOV     R17, R16
   \   000000C6   951A               DEC     R17
   \   000000C8   9310....           STS     OS_InInt, R17
   \   000000CC   2300               TST     R16
   \   000000CE   F421               BRNE    ??USART3_RXC_4
   \   000000D0   E908               LDI     R16, 152
   \   000000D2   E010               LDI     R17, 0
   \   000000D4   ........           CALL    OS_Error
   \                     ??USART3_RXC_4:
   \   000000D8   9100....           LDS     R16, (OS_Counters + 1)
   \   000000DC   950A               DEC     R16
   \   000000DE   9300....           STS     (OS_Counters + 1), R16
   \   000000E2   9100....           LDS     R16, OS_Counters
   \   000000E6   950A               DEC     R16
   \   000000E8   9300....           STS     OS_Counters, R16
    450          }
   \   000000EC   9621               ADIW    R29:R28, 1
   \   000000EE   BF9B               OUT     0x3B, R25
   \   000000F0   BF8F               OUT     0x3F, R24
   \   000000F2   9109               LD      R16, Y+
   \   000000F4   9119               LD      R17, Y+
   \   000000F6   9129               LD      R18, Y+
   \   000000F8   9139               LD      R19, Y+
   \   000000FA   9149               LD      R20, Y+
   \   000000FC   9159               LD      R21, Y+
   \   000000FE   9169               LD      R22, Y+
   \   00000100   9179               LD      R23, Y+
   \   00000102   9009               LD      R0, Y+
   \   00000104   9019               LD      R1, Y+
   \   00000106   9029               LD      R2, Y+
   \   00000108   9039               LD      R3, Y+
   \   0000010A   91E9               LD      R30, Y+
   \   0000010C   91F9               LD      R31, Y+
   \   0000010E   9189               LD      R24, Y+
   \   00000110   9199               LD      R25, Y+
   \   00000112   9518               RETI
   \   00000114                      REQUIRE _A_UDR3
    451          
    452          #pragma vector=USART3_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    453          __interrupt void USART3_TXC(void) {
   \                     USART3_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    454          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   2300               TST     R16
   \   00000050   F021               BREQ    ??USART3_TXC_0
   \   00000052   E909               LDI     R16, 153
   \   00000054   E010               LDI     R17, 0
   \   00000056   ........           CALL    OS_Error
   \                     ??USART3_TXC_0:
   \   0000005A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005E   2300               TST     R16
   \   00000060   F409               BRNE    ??USART3_TXC_1
   \   00000062   9478               SEI
    455          
    456          	hart_irq_finish_tx(&_hart_task2);
   \                     ??USART3_TXC_1:
   \   00000064   ....               LDI     R16, LOW(_hart_task2)
   \   00000066   ....               LDI     R17, (_hart_task2) >> 8
   \   00000068   ....               RCALL   hart_irq_finish_tx
    457          
    458          	LEAVE_IRQ;
   \   0000006A   94F8               CLI
   \   0000006C   ........           CALL    OS__LeaveIntStack
   \   00000070   9100....           LDS     R16, OS_InInt
   \   00000074   2F10               MOV     R17, R16
   \   00000076   951A               DEC     R17
   \   00000078   9310....           STS     OS_InInt, R17
   \   0000007C   2300               TST     R16
   \   0000007E   F421               BRNE    ??USART3_TXC_2
   \   00000080   E908               LDI     R16, 152
   \   00000082   E010               LDI     R17, 0
   \   00000084   ........           CALL    OS_Error
   \                     ??USART3_TXC_2:
   \   00000088   9100....           LDS     R16, (OS_Counters + 1)
   \   0000008C   950A               DEC     R16
   \   0000008E   9300....           STS     (OS_Counters + 1), R16
   \   00000092   9100....           LDS     R16, OS_Counters
   \   00000096   950A               DEC     R16
   \   00000098   9300....           STS     OS_Counters, R16
    459          }
   \   0000009C   BF9B               OUT     0x3B, R25
   \   0000009E   BF8F               OUT     0x3F, R24
   \   000000A0   9109               LD      R16, Y+
   \   000000A2   9119               LD      R17, Y+
   \   000000A4   9129               LD      R18, Y+
   \   000000A6   9139               LD      R19, Y+
   \   000000A8   9149               LD      R20, Y+
   \   000000AA   9159               LD      R21, Y+
   \   000000AC   9169               LD      R22, Y+
   \   000000AE   9179               LD      R23, Y+
   \   000000B0   9009               LD      R0, Y+
   \   000000B2   9019               LD      R1, Y+
   \   000000B4   9029               LD      R2, Y+
   \   000000B6   9039               LD      R3, Y+
   \   000000B8   91E9               LD      R30, Y+
   \   000000BA   91F9               LD      R31, Y+
   \   000000BC   9189               LD      R24, Y+
   \   000000BE   9199               LD      R25, Y+
   \   000000C0   9518               RETI
    460          
    461          #pragma vector=USART3_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    462          __interrupt void USART3_UDRE(void) {
   \                     USART3_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    463          	ENTER_IRQ;
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   2300               TST     R16
   \   00000050   F021               BREQ    ??USART3_UDRE_0
   \   00000052   E909               LDI     R16, 153
   \   00000054   E010               LDI     R17, 0
   \   00000056   ........           CALL    OS_Error
   \                     ??USART3_UDRE_0:
   \   0000005A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005E   2300               TST     R16
   \   00000060   F409               BRNE    ??USART3_UDRE_1
   \   00000062   9478               SEI
    464          
    465          	hart_irq_tx_next(&_hart_task2);
   \                     ??USART3_UDRE_1:
   \   00000064   ....               LDI     R16, LOW(_hart_task2)
   \   00000066   ....               LDI     R17, (_hart_task2) >> 8
   \   00000068   ....               RCALL   hart_irq_tx_next
    466          
    467          	LEAVE_IRQ;
   \   0000006A   94F8               CLI
   \   0000006C   ........           CALL    OS__LeaveIntStack
   \   00000070   9100....           LDS     R16, OS_InInt
   \   00000074   2F10               MOV     R17, R16
   \   00000076   951A               DEC     R17
   \   00000078   9310....           STS     OS_InInt, R17
   \   0000007C   2300               TST     R16
   \   0000007E   F421               BRNE    ??USART3_UDRE_2
   \   00000080   E908               LDI     R16, 152
   \   00000082   E010               LDI     R17, 0
   \   00000084   ........           CALL    OS_Error
   \                     ??USART3_UDRE_2:
   \   00000088   9100....           LDS     R16, (OS_Counters + 1)
   \   0000008C   950A               DEC     R16
   \   0000008E   9300....           STS     (OS_Counters + 1), R16
   \   00000092   9100....           LDS     R16, OS_Counters
   \   00000096   950A               DEC     R16
   \   00000098   9300....           STS     OS_Counters, R16
    468          }
   \   0000009C   BF9B               OUT     0x3B, R25
   \   0000009E   BF8F               OUT     0x3F, R24
   \   000000A0   9109               LD      R16, Y+
   \   000000A2   9119               LD      R17, Y+
   \   000000A4   9129               LD      R18, Y+
   \   000000A6   9139               LD      R19, Y+
   \   000000A8   9149               LD      R20, Y+
   \   000000AA   9159               LD      R21, Y+
   \   000000AC   9169               LD      R22, Y+
   \   000000AE   9179               LD      R23, Y+
   \   000000B0   9009               LD      R0, Y+
   \   000000B2   9019               LD      R1, Y+
   \   000000B4   9029               LD      R2, Y+
   \   000000B6   9039               LD      R3, Y+
   \   000000B8   91E9               LD      R30, Y+
   \   000000BA   91F9               LD      R31, Y+
   \   000000BC   9189               LD      R24, Y+
   \   000000BE   9199               LD      R25, Y+
   \   000000C0   9518               RETI
    469          
    470          ////////////////////////////////////////////////////////////////////////////////
    471          //
    472          // UART Utilities
    473          //
    474          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    475          static void
    476          hart_config_uart(HartTaskStruct *task) {
   \                     hart_config_uart:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
    477          	uint16_t    baud = 1200;
   \   00000006   EB80               LDI     R24, 176
   \   00000008   E094               LDI     R25, 4
    478          	uint16_t    baud_setting = (XTAL_CPU / 4 / baud - 1) / 2;
   \   0000000A   01AC               MOVW    R21:R20, R25:R24
   \   0000000C   E060               LDI     R22, 0
   \   0000000E   E070               LDI     R23, 0
   \   00000010   E000               LDI     R16, 0
   \   00000012   E019               LDI     R17, 9
   \   00000014   E32D               LDI     R18, 61
   \   00000016   E030               LDI     R19, 0
   \   00000018   ........           CALL    ?SL_DIVMOD_L03
   \   0000001C   5001               SUBI    R16, 1
   \   0000001E   4010               SBCI    R17, 0
   \   00000020   4020               SBCI    R18, 0
   \   00000022   4030               SBCI    R19, 0
   \   00000024   E042               LDI     R20, 2
   \   00000026   E050               LDI     R21, 0
   \   00000028   E060               LDI     R22, 0
   \   0000002A   E070               LDI     R23, 0
   \   0000002C   ........           CALL    ?SL_DIVMOD_L03
   \   00000030   01D8               MOVW    R27:R26, R17:R16
    479          
    480          	switch (task->modem_no) {
   \   00000032   01F2               MOVW    R31:R30, R5:R4
   \   00000034   5AE8               SUBI    R30, 168
   \   00000036   4FFD               SBCI    R31, 253
   \   00000038   8100               LD      R16, Z
   \   0000003A   5000               SUBI    R16, 0
   \   0000003C   F031               BREQ    ??hart_config_uart_0
   \   0000003E   950A               DEC     R16
   \   00000040   F1A9               BREQ    ??hart_config_uart_1
   \   00000042   950A               DEC     R16
   \   00000044   F409               BRNE    $+2+2
   \   00000046   C063               RJMP    ??hart_config_uart_2
   \   00000048   C092               RJMP    ??hart_config_uart_3
    481          	case hart_modem_0:
    482          		// try U2X mode first
    483          		UCSR1A      = _BV(U2X1);
   \                     ??hart_config_uart_0:
   \   0000004A   E002               LDI     R16, 2
   \   0000004C   9300....           STS     _A_UCSR1A, R16
    484          		if (((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095)) {
   \   00000050   3080               CPI     R24, 0
   \   00000052   EE01               LDI     R16, 225
   \   00000054   0790               CPC     R25, R16
   \   00000056   F021               BREQ    ??hart_config_uart_4
   \   00000058   30A0               CPI     R26, 0
   \   0000005A   E100               LDI     R16, 16
   \   0000005C   07B0               CPC     R27, R16
   \   0000005E   F0B8               BRCS    ??hart_config_uart_5
    485          			UCSR1A      = 0;
   \                     ??hart_config_uart_4:
   \   00000060   E000               LDI     R16, 0
   \   00000062   9300....           STS     _A_UCSR1A, R16
    486          			baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
   \   00000066   01AC               MOVW    R21:R20, R25:R24
   \   00000068   E060               LDI     R22, 0
   \   0000006A   E070               LDI     R23, 0
   \   0000006C   E800               LDI     R16, 128
   \   0000006E   E814               LDI     R17, 132
   \   00000070   E12E               LDI     R18, 30
   \   00000072   E030               LDI     R19, 0
   \   00000074   ........           CALL    ?SL_DIVMOD_L03
   \   00000078   5001               SUBI    R16, 1
   \   0000007A   4010               SBCI    R17, 0
   \   0000007C   4020               SBCI    R18, 0
   \   0000007E   4030               SBCI    R19, 0
   \   00000080   E042               LDI     R20, 2
   \   00000082   E050               LDI     R21, 0
   \   00000084   E060               LDI     R22, 0
   \   00000086   E070               LDI     R23, 0
   \   00000088   ........           CALL    ?SL_DIVMOD_L03
   \   0000008C   01D8               MOVW    R27:R26, R17:R16
    487          		}
    488          
    489          		UBRR1H      = baud_setting >> 8;
   \                     ??hart_config_uart_5:
   \   0000008E   018D               MOVW    R17:R16, R27:R26
   \   00000090   2F01               MOV     R16, R17
   \   00000092   E010               LDI     R17, 0
   \   00000094   930000CD           STS     205, R16
    490          		UBRR1L      = baud_setting;
   \   00000098   2F0A               MOV     R16, R26
   \   0000009A   9300....           STS     _A_UBRR1, R16
    491          
    492          		UCSR1C      = _BV(UCSZ10) | _BV(UCSZ11) | USART1_ODD_PARITY | USART1_1_STOP_BIT;
   \   0000009E   E306               LDI     R16, 54
   \   000000A0   9300....           STS     _A_UCSR1C, R16
    493          		UCSR1B      = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);
   \   000000A4   E908               LDI     R16, 152
   \   000000A6   9300....           STS     _A_UCSR1B, R16
    494          		break;
   \   000000AA   C061               RJMP    ??hart_config_uart_3
    495          
    496          	case hart_modem_1:
    497          		UCSR2A      = _BV(U2X2);
   \                     ??hart_config_uart_1:
   \   000000AC   E002               LDI     R16, 2
   \   000000AE   9300....           STS     _A_UCSR2A, R16
    498          		if (((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095)) {
   \   000000B2   3080               CPI     R24, 0
   \   000000B4   EE01               LDI     R16, 225
   \   000000B6   0790               CPC     R25, R16
   \   000000B8   F021               BREQ    ??hart_config_uart_6
   \   000000BA   30A0               CPI     R26, 0
   \   000000BC   E100               LDI     R16, 16
   \   000000BE   07B0               CPC     R27, R16
   \   000000C0   F0B8               BRCS    ??hart_config_uart_7
    499          			UCSR2A      = 0;
   \                     ??hart_config_uart_6:
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   9300....           STS     _A_UCSR2A, R16
    500          			baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
   \   000000C8   01AC               MOVW    R21:R20, R25:R24
   \   000000CA   E060               LDI     R22, 0
   \   000000CC   E070               LDI     R23, 0
   \   000000CE   E800               LDI     R16, 128
   \   000000D0   E814               LDI     R17, 132
   \   000000D2   E12E               LDI     R18, 30
   \   000000D4   E030               LDI     R19, 0
   \   000000D6   ........           CALL    ?SL_DIVMOD_L03
   \   000000DA   5001               SUBI    R16, 1
   \   000000DC   4010               SBCI    R17, 0
   \   000000DE   4020               SBCI    R18, 0
   \   000000E0   4030               SBCI    R19, 0
   \   000000E2   E042               LDI     R20, 2
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   E060               LDI     R22, 0
   \   000000E8   E070               LDI     R23, 0
   \   000000EA   ........           CALL    ?SL_DIVMOD_L03
   \   000000EE   01D8               MOVW    R27:R26, R17:R16
    501          		}
    502          
    503          		UBRR2H      = baud_setting >> 8;
   \                     ??hart_config_uart_7:
   \   000000F0   018D               MOVW    R17:R16, R27:R26
   \   000000F2   2F01               MOV     R16, R17
   \   000000F4   E010               LDI     R17, 0
   \   000000F6   930000D5           STS     213, R16
    504          		UBRR2L      = baud_setting;
   \   000000FA   2F0A               MOV     R16, R26
   \   000000FC   9300....           STS     _A_UBRR2, R16
    505          
    506          		UCSR2C      = _BV(UCSZ20) | _BV(UCSZ21) | USART2_ODD_PARITY | USART2_1_STOP_BIT;
   \   00000100   E306               LDI     R16, 54
   \   00000102   9300....           STS     _A_UCSR2C, R16
    507          		UCSR2B      = _BV(RXEN2) | _BV(TXEN2) | _BV(RXCIE2);
   \   00000106   E908               LDI     R16, 152
   \   00000108   9300....           STS     _A_UCSR2B, R16
    508          		break;
   \   0000010C   C030               RJMP    ??hart_config_uart_3
    509          
    510          	case hart_modem_2:
    511          		UCSR3A      = _BV(U2X3);
   \                     ??hart_config_uart_2:
   \   0000010E   E002               LDI     R16, 2
   \   00000110   9300....           STS     _A_UCSR3A, R16
    512          		if (((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095)) {
   \   00000114   3080               CPI     R24, 0
   \   00000116   EE01               LDI     R16, 225
   \   00000118   0790               CPC     R25, R16
   \   0000011A   F021               BREQ    ??hart_config_uart_8
   \   0000011C   30A0               CPI     R26, 0
   \   0000011E   E100               LDI     R16, 16
   \   00000120   07B0               CPC     R27, R16
   \   00000122   F0B8               BRCS    ??hart_config_uart_9
    513          			UCSR3A      = 0;
   \                     ??hart_config_uart_8:
   \   00000124   E000               LDI     R16, 0
   \   00000126   9300....           STS     _A_UCSR3A, R16
    514          			baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
   \   0000012A   01AC               MOVW    R21:R20, R25:R24
   \   0000012C   E060               LDI     R22, 0
   \   0000012E   E070               LDI     R23, 0
   \   00000130   E800               LDI     R16, 128
   \   00000132   E814               LDI     R17, 132
   \   00000134   E12E               LDI     R18, 30
   \   00000136   E030               LDI     R19, 0
   \   00000138   ........           CALL    ?SL_DIVMOD_L03
   \   0000013C   5001               SUBI    R16, 1
   \   0000013E   4010               SBCI    R17, 0
   \   00000140   4020               SBCI    R18, 0
   \   00000142   4030               SBCI    R19, 0
   \   00000144   E042               LDI     R20, 2
   \   00000146   E050               LDI     R21, 0
   \   00000148   E060               LDI     R22, 0
   \   0000014A   E070               LDI     R23, 0
   \   0000014C   ........           CALL    ?SL_DIVMOD_L03
   \   00000150   01D8               MOVW    R27:R26, R17:R16
    515          		}
    516          
    517          		UBRR3H      = baud_setting >> 8;
   \                     ??hart_config_uart_9:
   \   00000152   018D               MOVW    R17:R16, R27:R26
   \   00000154   2F01               MOV     R16, R17
   \   00000156   E010               LDI     R17, 0
   \   00000158   93000135           STS     309, R16
    518          		UBRR3L      = baud_setting;
   \   0000015C   2F0A               MOV     R16, R26
   \   0000015E   9300....           STS     _A_UBRR3, R16
    519          
    520          		UCSR3C      = _BV(UCSZ30) | _BV(UCSZ31) | USART3_ODD_PARITY | USART3_1_STOP_BIT;
   \   00000162   E306               LDI     R16, 54
   \   00000164   9300....           STS     _A_UCSR3C, R16
    521          		UCSR3B      = _BV(RXEN3) | _BV(TXEN3) | _BV(RXCIE3);
   \   00000168   E908               LDI     R16, 152
   \   0000016A   9300....           STS     _A_UCSR3B, R16
    522          		break;
    523          	}
    524          }
   \                     ??hart_config_uart_3:
   \   0000016E   E0E6               LDI     R30, 6
   \   00000170   ........           JMP     ?EPILOGUE_B6_L09
   \   00000174                      REQUIRE _A_UCSR1A
   \   00000174                      REQUIRE _A_UBRR1
   \   00000174                      REQUIRE _A_UCSR1C
   \   00000174                      REQUIRE _A_UCSR1B
   \   00000174                      REQUIRE _A_UCSR2A
   \   00000174                      REQUIRE _A_UBRR2
   \   00000174                      REQUIRE _A_UCSR2C
   \   00000174                      REQUIRE _A_UCSR2B
   \   00000174                      REQUIRE _A_UCSR3A
   \   00000174                      REQUIRE _A_UBRR3
   \   00000174                      REQUIRE _A_UCSR3C
   \   00000174                      REQUIRE _A_UCSR3B
    525          

   \                                 In  segment CODE, align 2, keep-with-next
    526          static void
    527          hart_reset_tx(HartTaskStruct *task) {
   \                     hart_reset_tx:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    528          	task->tx_buf_ndx  = 0;
   \   00000006   01FC               MOVW    R31:R30, R25:R24
   \   00000008   5AE5               SUBI    R30, 165
   \   0000000A   4FFD               SBCI    R31, 253
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   E010               LDI     R17, 0
   \   00000010   8300               ST      Z, R16
   \   00000012   8311               STD     Z+1, R17
    529          	task->tx_len      = 0;
   \   00000014   01FC               MOVW    R31:R30, R25:R24
   \   00000016   5AE3               SUBI    R30, 163
   \   00000018   4FFD               SBCI    R31, 253
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   8300               ST      Z, R16
   \   00000020   8311               STD     Z+1, R17
    530          
    531          	hart_msg_encoder_reset(&task->hart_encoder);
   \   00000022   018C               MOVW    R17:R16, R25:R24
   \   00000024   540F               SUBI    R16, 79
   \   00000026   4F1A               SBCI    R17, 250
   \   00000028   ........           CALL    hart_msg_encoder_reset
    532          }
   \   0000002C   9189               LD      R24, Y+
   \   0000002E   9199               LD      R25, Y+
   \   00000030   9508               RET
    533          

   \                                 In  segment CODE, align 2, keep-with-next
    534          static void
    535          hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     hart_reset_rx:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2FA2               MOV     R26, R18
    536          	task->rx_buf_ndx   	 = 0;
   \   00000008   01FC               MOVW    R31:R30, R25:R24
   \   0000000A   52E1               SUBI    R30, 33
   \   0000000C   4FFC               SBCI    R31, 252
   \   0000000E   E000               LDI     R16, 0
   \   00000010   E010               LDI     R17, 0
   \   00000012   8300               ST      Z, R16
   \   00000014   8311               STD     Z+1, R17
    537          	task->rx_len       	 = 0;
   \   00000016   01FC               MOVW    R31:R30, R25:R24
   \   00000018   51EF               SUBI    R30, 31
   \   0000001A   4FFC               SBCI    R31, 252
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   E010               LDI     R17, 0
   \   00000020   8300               ST      Z, R16
   \   00000022   8311               STD     Z+1, R17
    538          	//task->rx_Time    	   = 0;
    539          	//task->rx_Listen[0]   = false;
    540          	//task->rx_Listen[1]   = false;
    541          	//task->rx_Listen[2]   = false;
    542          	//task->rx_Listen[3]   = false;
    543          	hart_msg_parser_reset(&task->hart_parser);
   \   00000024   018C               MOVW    R17:R16, R25:R24
   \   00000026   5804               SUBI    R16, 132
   \   00000028   4F1A               SBCI    R17, 250
   \   0000002A   ........           CALL    hart_msg_parser_reset
    544          }
   \   0000002E   E0E3               LDI     R30, 3
   \   00000030   ........           JMP     ?EPILOGUE_B3_L09
    545          

   \                                 In  segment CODE, align 2, keep-with-next
    546          static void
    547          hart_start_transaction(HartTaskStruct *task) {
   \                     hart_start_transaction:
    548          	if (task->tx_len == 0) {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   5AE3               SUBI    R30, 163
   \   00000004   4FFD               SBCI    R31, 253
   \   00000006   8120               LD      R18, Z
   \   00000008   8131               LDD     R19, Z+1
   \   0000000A   2B23               OR      R18, R19
   \   0000000C   F119               BREQ    ??hart_start_transaction_0
    549          		// XXX fucked up. there is a bug
    550          		return;
    551          	}
    552          
    553          	// just to make sure
    554          	task->tx_buf_ndx    = 0;
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   5AE5               SUBI    R30, 165
   \   00000012   4FFD               SBCI    R31, 253
   \   00000014   E020               LDI     R18, 0
   \   00000016   E030               LDI     R19, 0
   \   00000018   8320               ST      Z, R18
   \   0000001A   8331               STD     Z+1, R19
    555          
    556          	switch (task->modem_no) {
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   5AE8               SUBI    R30, 168
   \   00000020   4FFD               SBCI    R31, 253
   \   00000022   8120               LD      R18, Z
   \   00000024   5020               SUBI    R18, 0
   \   00000026   F029               BREQ    ??hart_start_transaction_1
   \   00000028   952A               DEC     R18
   \   0000002A   F049               BREQ    ??hart_start_transaction_2
   \   0000002C   952A               DEC     R18
   \   0000002E   F069               BREQ    ??hart_start_transaction_3
   \   00000030   9508               RET
    557          	case hart_modem_0:
    558          		UCSR1B |= _BV(UDRIE1);
   \                     ??hart_start_transaction_1:
   \   00000032   912000C9           LDS     R18, 201
   \   00000036   6220               ORI     R18, 0x20
   \   00000038   932000C9           STS     201, R18
    559          		break;
   \   0000003C   9508               RET
    560          
    561          	case hart_modem_1:
    562          		UCSR2B |= _BV(UDRIE2);
   \                     ??hart_start_transaction_2:
   \   0000003E   912000D1           LDS     R18, 209
   \   00000042   6220               ORI     R18, 0x20
   \   00000044   932000D1           STS     209, R18
    563          		break;
   \   00000048   9508               RET
    564          
    565          	case hart_modem_2:
    566          		UCSR3B |= _BV(UDRIE3);
   \                     ??hart_start_transaction_3:
   \   0000004A   91200131           LDS     R18, 305
   \   0000004E   6220               ORI     R18, 0x20
   \   00000050   93200131           STS     305, R18
    567          		break;
    568          	}
    569          }
   \                     ??hart_start_transaction_0:
   \   00000054   9508               RET
   \   00000056                      REQUIRE _A_UCSR1B
   \   00000056                      REQUIRE _A_UCSR2B
   \   00000056                      REQUIRE _A_UCSR3B
    570          
    571          ////////////////////////////////////////////////////////////////////////////////
    572          //
    573          // demo transaction
    574          //
    575          // IT IS YOUR JOB TO OVERRIDE THESE CALLBACKS
    576          //
    577          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    578          static void
    579          demo1_hart_make_request(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     demo1_hart_make_request:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   01C8               MOVW    R25:R24, R17:R16
   \   00000008   2FB2               MOV     R27, R18
    580          	uint8_t   addr[5] = { 0x80, 0x00, 0x00, 0x00, 0x00 };
   \   0000000A   018E               MOVW    R17:R16, R29:R28
   \   0000000C   ....               LDI     R30, LOW(`?<Constant {128, 0, 0, 0, 0}>`)
   \   0000000E   ....               LDI     R31, HIGH(`?<Constant {128, 0, 0, 0, 0}>`)
   \   00000010   ....               LDI     R19, (`?<Constant {128, 0, 0, 0, 0}>`) >> 16
   \   00000012   E045               LDI     R20, 5
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    581          	uint8_t   cmd = 0x03;                                      // no idea what to use
   \   0000001A   E0A3               LDI     R26, 3
    582          
    583          	hart_msg_encoder_preamble(&task->hart_encoder, 5);        // we use preamble 5 for tx
   \   0000001C   E025               LDI     R18, 5
   \   0000001E   018C               MOVW    R17:R16, R25:R24
   \   00000020   540F               SUBI    R16, 79
   \   00000022   4F1A               SBCI    R17, 250
   \   00000024   ........           CALL    hart_msg_encoder_preamble
    584          	hart_msg_encoder_long_start(&task->hart_encoder,
    585          								0x82,                                                 // master to slave request is always 82
    586          								addr,                                                 // slave address
    587          								cmd);                                                 // command to send
   \   00000028   2F3A               MOV     R19, R26
   \   0000002A   01AE               MOVW    R21:R20, R29:R28
   \   0000002C   E822               LDI     R18, 130
   \   0000002E   018C               MOVW    R17:R16, R25:R24
   \   00000030   540F               SUBI    R16, 79
   \   00000032   4F1A               SBCI    R17, 250
   \   00000034   ........           CALL    hart_msg_encoder_long_start
    588          																					  //
    589          	// request has no status bytes
    590          	//
    591          
    592          	hart_msg_encoder_data(&task->hart_encoder,
    593          						  NULL,                                                 // command data in request
    594          						  0);                                                   // no data. thus data length 0
   \   00000038   E040               LDI     R20, 0
   \   0000003A   E020               LDI     R18, 0
   \   0000003C   E030               LDI     R19, 0
   \   0000003E   018C               MOVW    R17:R16, R25:R24
   \   00000040   540F               SUBI    R16, 79
   \   00000042   4F1A               SBCI    R17, 250
   \   00000044   ........           CALL    hart_msg_encoder_data
    595          
    596          	hart_msg_encoder_calc_csum(&task->hart_encoder);          // finally calculate checksum
   \   00000048   018C               MOVW    R17:R16, R25:R24
   \   0000004A   540F               SUBI    R16, 79
   \   0000004C   4F1A               SBCI    R17, 250
   \   0000004E   ........           CALL    hart_msg_encoder_calc_csum
    597          }
   \   00000052   9625               ADIW    R29:R28, 5
   \   00000054   E0E4               LDI     R30, 4
   \   00000056   ........           JMP     ?EPILOGUE_B4_L09
    598          

   \                                 In  segment CODE, align 2, keep-with-next
    599          static void
    600          demo1_hart_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type) {
   \                     demo1_hart_handle_rx_error:
    601          	switch (err_type) {
   \   00000000   2F43               MOV     R20, R19
   \   00000002   5040               SUBI    R20, 0
   \   00000004   F029               BREQ    ??demo1_hart_handle_rx_error_0
   \   00000006   954A               DEC     R20
   \   00000008   F111               BREQ    ??demo1_hart_handle_rx_error_1
   \   0000000A   954A               DEC     R20
   \   0000000C   F1F9               BREQ    ??demo1_hart_handle_rx_error_2
   \   0000000E   9508               RET
    602          	case HartCommErr_RX_Error:
    603          		// XXX
    604          		// do whatevern necessary here
    605          		TData.Hart.FailCnt[current_chnl][0]++;
   \                     ??demo1_hart_handle_rx_error_0:
   \   00000010   2F42               MOV     R20, R18
   \   00000012   E050               LDI     R21, 0
   \   00000014   0F44               LSL     R20
   \   00000016   1F55               ROL     R21
   \   00000018   0F44               LSL     R20
   \   0000001A   1F55               ROL     R21
   \   0000001C   01FA               MOVW    R31:R30, R21:R20
   \   0000001E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000022   8140               LD      R20, Z
   \   00000024   8151               LDD     R21, Z+1
   \   00000026   5F4F               SUBI    R20, 255
   \   00000028   4F5F               SBCI    R21, 255
   \   0000002A   8340               ST      Z, R20
   \   0000002C   8351               STD     Z+1, R21
    606          		TData.Hart.FailCnt[current_chnl][1]++;
   \   0000002E   2F42               MOV     R20, R18
   \   00000030   E050               LDI     R21, 0
   \   00000032   0F44               LSL     R20
   \   00000034   1F55               ROL     R21
   \   00000036   0F44               LSL     R20
   \   00000038   1F55               ROL     R21
   \   0000003A   01FA               MOVW    R31:R30, R21:R20
   \   0000003C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000040   8142               LDD     R20, Z+2
   \   00000042   8153               LDD     R21, Z+3
   \   00000044   5F4F               SUBI    R20, 255
   \   00000046   4F5F               SBCI    R21, 255
   \   00000048   8342               STD     Z+2, R20
   \   0000004A   8353               STD     Z+3, R21
    607          		break;
   \   0000004C   9508               RET
    608          
    609          	case HartCommErr_RX_Timeout:
    610          		// XXX
    611          		// do whatever necessary here
    612          		TData.Hart.FailCnt[current_chnl][0]++;
   \                     ??demo1_hart_handle_rx_error_1:
   \   0000004E   2F42               MOV     R20, R18
   \   00000050   E050               LDI     R21, 0
   \   00000052   0F44               LSL     R20
   \   00000054   1F55               ROL     R21
   \   00000056   0F44               LSL     R20
   \   00000058   1F55               ROL     R21
   \   0000005A   01FA               MOVW    R31:R30, R21:R20
   \   0000005C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000060   8140               LD      R20, Z
   \   00000062   8151               LDD     R21, Z+1
   \   00000064   5F4F               SUBI    R20, 255
   \   00000066   4F5F               SBCI    R21, 255
   \   00000068   8340               ST      Z, R20
   \   0000006A   8351               STD     Z+1, R21
    613          		TData.Hart.FailCnt[current_chnl][1]++;
   \   0000006C   2F42               MOV     R20, R18
   \   0000006E   E050               LDI     R21, 0
   \   00000070   0F44               LSL     R20
   \   00000072   1F55               ROL     R21
   \   00000074   0F44               LSL     R20
   \   00000076   1F55               ROL     R21
   \   00000078   01FA               MOVW    R31:R30, R21:R20
   \   0000007A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007E   8142               LDD     R20, Z+2
   \   00000080   8153               LDD     R21, Z+3
   \   00000082   5F4F               SUBI    R20, 255
   \   00000084   4F5F               SBCI    R21, 255
   \   00000086   8342               STD     Z+2, R20
   \   00000088   8353               STD     Z+3, R21
    614          		break;
   \   0000008A   9508               RET
    615          
    616          	case HartCommErr_RX_Checksum:
    617          		// XXX
    618          		// do whatever necessary here
    619          		TData.Hart.FailCnt[current_chnl][0]++;
   \                     ??demo1_hart_handle_rx_error_2:
   \   0000008C   2F42               MOV     R20, R18
   \   0000008E   E050               LDI     R21, 0
   \   00000090   0F44               LSL     R20
   \   00000092   1F55               ROL     R21
   \   00000094   0F44               LSL     R20
   \   00000096   1F55               ROL     R21
   \   00000098   01FA               MOVW    R31:R30, R21:R20
   \   0000009A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000009E   8140               LD      R20, Z
   \   000000A0   8151               LDD     R21, Z+1
   \   000000A2   5F4F               SUBI    R20, 255
   \   000000A4   4F5F               SBCI    R21, 255
   \   000000A6   8340               ST      Z, R20
   \   000000A8   8351               STD     Z+1, R21
    620          		TData.Hart.FailCnt[current_chnl][1]++;
   \   000000AA   2F42               MOV     R20, R18
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   0F44               LSL     R20
   \   000000B0   1F55               ROL     R21
   \   000000B2   0F44               LSL     R20
   \   000000B4   1F55               ROL     R21
   \   000000B6   01FA               MOVW    R31:R30, R21:R20
   \   000000B8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000BC   8142               LDD     R20, Z+2
   \   000000BE   8153               LDD     R21, Z+3
   \   000000C0   5F4F               SUBI    R20, 255
   \   000000C2   4F5F               SBCI    R21, 255
   \   000000C4   8342               STD     Z+2, R20
   \   000000C6   8353               STD     Z+3, R21
    621          		break;
    622          	}
    623          }
   \   000000C8   9508               RET
    624          
    625          

   \                                 In  segment CODE, align 2, keep-with-next
    626          float ConvertBigEndianToLittleEndian(char *Ptr) {
   \                     ConvertBigEndianToLittleEndian:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002   9724               SBIW    R29:R28, 4
   \   00000004   01F8               MOVW    R31:R30, R17:R16
    627          	const char FloatBuf[4] = { Ptr[3], Ptr[2], Ptr[1], Ptr[0] };
   \   00000006   8103               LDD     R16, Z+3
   \   00000008   8308               ST      Y, R16
   \   0000000A   8102               LDD     R16, Z+2
   \   0000000C   8309               STD     Y+1, R16
   \   0000000E   8101               LDD     R16, Z+1
   \   00000010   830A               STD     Y+2, R16
   \   00000012   8100               LD      R16, Z
   \   00000014   830B               STD     Y+3, R16
    628          	const float *FloatNum  = (float *)FloatBuf;
   \   00000016   01DE               MOVW    R27:R26, R29:R28
    629          	return *FloatNum;
   \   00000018   910D               LD      R16, X+
   \   0000001A   911D               LD      R17, X+
   \   0000001C   912D               LD      R18, X+
   \   0000001E   913C               LD      R19, X
   \   00000020   9713               SBIW    R27:R26, 3
   \   00000022   9624               ADIW    R29:R28, 4
   \   00000024   01DA               MOVW    R27:R26, R21:R20
   \   00000026   9508               RET
    630          }
    631          

   \                                 In  segment CODE, align 2, keep-with-next
    632          uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     ReceiveReply:
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   972A               SBIW    R29:R28, 10
   \   00000006   8329               STD     Y+1, R18
   \   00000008   01D8               MOVW    R27:R26, R17:R16
    633          	char RxTimeOut   = false;
   \   0000000A   E080               LDI     R24, 0
    634          	char RxStatus    = HART_EVENT_NONE;
   \   0000000C   E090               LDI     R25, 0
    635          	char *BufPtr     = (char *)task->rx_buf;
   \   0000000E   014D               MOVW    R9:R8, R27:R26
   \   00000010   EE03               LDI     R16, 227
   \   00000012   0E80               ADD     R8, R16
   \   00000014   E003               LDI     R16, 3
   \   00000016   1E90               ADC     R9, R16
    636          	int  SyncCnt     = 0;
   \   00000018   24EE               CLR     R14
   \   0000001A   24FF               CLR     R15
    637          	char RxByte;
    638                  int TimeOut = 200;
   \   0000001C   EC08               LDI     R16, 200
   \   0000001E   2E40               MOV     R4, R16
   \   00000020   2455               CLR     R5
    639          	do {
    640          		RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_0:
   \   00000022   01A2               MOVW    R21:R20, R5:R4
   \   00000024   019E               MOVW    R19:R18, R29:R28
   \   00000026   018D               MOVW    R17:R16, R27:R26
   \   00000028   5C0C               SUBI    R16, 204
   \   0000002A   4F1D               SBCI    R17, 253
   \   0000002C   ........           CALL    OS_GetMailTimed
   \   00000030   2F80               MOV     R24, R16
    641          		if (RxByte == 0xff) {
   \   00000032   8108               LD      R16, Y
   \   00000034   3F0F               CPI     R16, 255
   \   00000036   F439               BRNE    ??ReceiveReply_1
    642          			SyncCnt++;
   \   00000038   E001               LDI     R16, 1
   \   0000003A   0EE0               ADD     R14, R16
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   1EF0               ADC     R15, R16
    643                                  TimeOut = 25;
   \   00000040   E109               LDI     R16, 25
   \   00000042   2E40               MOV     R4, R16
   \   00000044   2455               CLR     R5
    644          		}
    645          	}while (!RxTimeOut && (RxByte == 0xff));
   \                     ??ReceiveReply_1:
   \   00000046   2388               TST     R24
   \   00000048   F419               BRNE    ??ReceiveReply_2
   \   0000004A   8108               LD      R16, Y
   \   0000004C   3F0F               CPI     R16, 255
   \   0000004E   F349               BREQ    ??ReceiveReply_0
    646          
    647          	if (!RxTimeOut && SyncCnt >= 4) {
   \                     ??ReceiveReply_2:
   \   00000050   2388               TST     R24
   \   00000052   F009               BREQ    $+2+2
   \   00000054   C0E0               RJMP    ??ReceiveReply_3
   \   00000056   E004               LDI     R16, 4
   \   00000058   16E0               CP      R14, R16
   \   0000005A   E000               LDI     R16, 0
   \   0000005C   06F0               CPC     R15, R16
   \   0000005E   F40C               BRGE    $+2+2
   \   00000060   C0DA               RJMP    ??ReceiveReply_3
    648          		*BufPtr = RxByte;
   \   00000062   8108               LD      R16, Y
   \   00000064   01F4               MOVW    R31:R30, R9:R8
   \   00000066   8300               ST      Z, R16
    649          		BufPtr++;
   \   00000068   E001               LDI     R16, 1
   \   0000006A   0E80               ADD     R8, R16
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   1E90               ADC     R9, R16
    650          		char MasterNum   = RxByte;
   \   00000070   8108               LD      R16, Y
   \   00000072   830E               STD     Y+6, R16
    651          		switch (MasterNum) {
   \   00000074   810E               LDD     R16, Y+6
   \   00000076   5802               SUBI    R16, 130
   \   00000078   F029               BREQ    ??ReceiveReply_4
   \   0000007A   5004               SUBI    R16, 4
   \   0000007C   F029               BREQ    ??ReceiveReply_5
   \   0000007E   5800               SUBI    R16, 128
   \   00000080   F011               BREQ    ??ReceiveReply_6
   \   00000082   C0CA               RJMP    ??ReceiveReply_7
    652          		case HART_MSG_START_FROM_MASTER_TO_SLAVE:
    653          			break;
   \                     ??ReceiveReply_4:
   \   00000084   C0C9               RJMP    ??ReceiveReply_7
    654          		case HART_MSG_START_FROM_SLAVE_TO_MASTER:
    655          			break;
   \                     ??ReceiveReply_6:
   \   00000086   C0C8               RJMP    ??ReceiveReply_7
    656          		case HART_MSG_START_FROM_SLAVE_TO_MASTER_LONG:
    657          			{
    658          				HARTLongMessage *Msg = (HARTLongMessage *)BufPtr;
   \                     ??ReceiveReply_5:
   \   00000088   8688               STD     Y+8, R8
   \   0000008A   8699               STD     Y+9, R9
    659          				int  hRxCnt = 0;
   \   0000008C   24AA               CLR     R10
   \   0000008E   24BB               CLR     R11
    660          				do {
    661          					char RxByte;
    662          					RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_8:
   \   00000090   01A2               MOVW    R21:R20, R5:R4
   \   00000092   019E               MOVW    R19:R18, R29:R28
   \   00000094   5F2B               SUBI    R18, 251
   \   00000096   4F3F               SBCI    R19, 255
   \   00000098   018D               MOVW    R17:R16, R27:R26
   \   0000009A   5C0C               SUBI    R16, 204
   \   0000009C   4F1D               SBCI    R17, 253
   \   0000009E   ........           CALL    OS_GetMailTimed
   \   000000A2   2F80               MOV     R24, R16
    663          					BufPtr[hRxCnt++] = RxByte;
   \   000000A4   810D               LDD     R16, Y+5
   \   000000A6   01F4               MOVW    R31:R30, R9:R8
   \   000000A8   0DEA               ADD     R30, R10
   \   000000AA   1DFB               ADC     R31, R11
   \   000000AC   8300               ST      Z, R16
   \   000000AE   E001               LDI     R16, 1
   \   000000B0   0EA0               ADD     R10, R16
   \   000000B2   E000               LDI     R16, 0
   \   000000B4   1EB0               ADC     R11, R16
    664          				}while (!RxTimeOut && hRxCnt < sizeof(HARTLongMessage));
   \   000000B6   2388               TST     R24
   \   000000B8   F429               BRNE    ??ReceiveReply_9
   \   000000BA   E008               LDI     R16, 8
   \   000000BC   16A0               CP      R10, R16
   \   000000BE   E000               LDI     R16, 0
   \   000000C0   06B0               CPC     R11, R16
   \   000000C2   F330               BRCS    ??ReceiveReply_8
    665          				if (RxTimeOut) {
   \                     ??ReceiveReply_9:
   \   000000C4   2388               TST     R24
   \   000000C6   F011               BREQ    ??ReceiveReply_10
    666          					RxStatus	 = HART_EVENT_TIMEOUT;
   \   000000C8   E098               LDI     R25, 8
   \   000000CA   C0A6               RJMP    ??ReceiveReply_7
    667          				} else {
    668          					int  mRxCnt = 0;
   \                     ??ReceiveReply_10:
   \   000000CC   2466               CLR     R6
   \   000000CE   2477               CLR     R7
    669          					BufPtr += sizeof(HARTLongMessage);
   \   000000D0   E008               LDI     R16, 8
   \   000000D2   0E80               ADD     R8, R16
   \   000000D4   E000               LDI     R16, 0
   \   000000D6   1E90               ADC     R9, R16
    670          					do {
    671          						char RxByte;
    672          						RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_11:
   \   000000D8   01A2               MOVW    R21:R20, R5:R4
   \   000000DA   019E               MOVW    R19:R18, R29:R28
   \   000000DC   5F2C               SUBI    R18, 252
   \   000000DE   4F3F               SBCI    R19, 255
   \   000000E0   018D               MOVW    R17:R16, R27:R26
   \   000000E2   5C0C               SUBI    R16, 204
   \   000000E4   4F1D               SBCI    R17, 253
   \   000000E6   ........           CALL    OS_GetMailTimed
   \   000000EA   2F80               MOV     R24, R16
    673          						BufPtr[mRxCnt++] = RxByte;
   \   000000EC   810C               LDD     R16, Y+4
   \   000000EE   01F4               MOVW    R31:R30, R9:R8
   \   000000F0   0DE6               ADD     R30, R6
   \   000000F2   1DF7               ADC     R31, R7
   \   000000F4   8300               ST      Z, R16
   \   000000F6   E001               LDI     R16, 1
   \   000000F8   0E60               ADD     R6, R16
   \   000000FA   E000               LDI     R16, 0
   \   000000FC   1E70               ADC     R7, R16
    674          					}while (!RxTimeOut && (mRxCnt < Msg->MsessageSize) && (mRxCnt < HART_MAX_DATA_LENGTH));
   \   000000FE   2388               TST     R24
   \   00000100   F461               BRNE    ??ReceiveReply_12
   \   00000102   85E8               LDD     R30, Y+8
   \   00000104   85F9               LDD     R31, Y+9
   \   00000106   8106               LDD     R16, Z+6
   \   00000108   E010               LDI     R17, 0
   \   0000010A   1660               CP      R6, R16
   \   0000010C   0671               CPC     R7, R17
   \   0000010E   F42C               BRGE    ??ReceiveReply_12
   \   00000110   EF0D               LDI     R16, 253
   \   00000112   1660               CP      R6, R16
   \   00000114   E000               LDI     R16, 0
   \   00000116   0670               CPC     R7, R16
   \   00000118   F2FC               BRLT    ??ReceiveReply_11
    675          					if (RxTimeOut) {
   \                     ??ReceiveReply_12:
   \   0000011A   2388               TST     R24
   \   0000011C   F011               BREQ    ??ReceiveReply_13
    676          						RxStatus	 = HART_EVENT_TIMEOUT;
   \   0000011E   E098               LDI     R25, 8
   \   00000120   C07B               RJMP    ??ReceiveReply_7
    677          					} else {
    678          						uint8_t pcsum = task->rx_buf[hRxCnt + mRxCnt];
   \                     ??ReceiveReply_13:
   \   00000122   0185               MOVW    R17:R16, R11:R10
   \   00000124   0D06               ADD     R16, R6
   \   00000126   1D17               ADC     R17, R7
   \   00000128   01FD               MOVW    R31:R30, R27:R26
   \   0000012A   0FE0               ADD     R30, R16
   \   0000012C   1FF1               ADC     R31, R17
   \   0000012E   51ED               SUBI    R30, 29
   \   00000130   4FFC               SBCI    R31, 252
   \   00000132   8100               LD      R16, Z
   \   00000134   830B               STD     Y+3, R16
    679          						uint8_t csum = hart_msg_calc_csum((const uint8_t *)task->rx_buf, hRxCnt + mRxCnt);
   \   00000136   0195               MOVW    R19:R18, R11:R10
   \   00000138   0D26               ADD     R18, R6
   \   0000013A   1D37               ADC     R19, R7
   \   0000013C   018D               MOVW    R17:R16, R27:R26
   \   0000013E   510D               SUBI    R16, 29
   \   00000140   4F1C               SBCI    R17, 252
   \   00000142   ........           CALL    hart_msg_calc_csum
   \   00000146   830A               STD     Y+2, R16
    680          						if (csum == pcsum) {
   \   00000148   810A               LDD     R16, Y+2
   \   0000014A   811B               LDD     R17, Y+3
   \   0000014C   1701               CP      R16, R17
   \   0000014E   F009               BREQ    $+2+2
   \   00000150   C04E               RJMP    ??ReceiveReply_14
    681          							TData.Hart.HartCurrent[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[1]);
   \   00000152   0184               MOVW    R17:R16, R9:R8
   \   00000154   5F0F               SUBI    R16, 255
   \   00000156   4F1F               SBCI    R17, 255
   \   00000158   ....               RCALL   ConvertBigEndianToLittleEndian
   \   0000015A   01A8               MOVW    R21:R20, R17:R16
   \   0000015C   01B9               MOVW    R23:R22, R19:R18
   \   0000015E   8109               LDD     R16, Y+1
   \   00000160   E010               LDI     R17, 0
   \   00000162   0F00               LSL     R16
   \   00000164   1F11               ROL     R17
   \   00000166   0F00               LSL     R16
   \   00000168   1F11               ROL     R17
   \   0000016A   01F8               MOVW    R31:R30, R17:R16
   \   0000016C   ....               SUBI    R30, LOW((-(TData + 206) & 0xFFFF))
   \   0000016E   ....               SBCI    R31, HIGH((-(TData + 206) & 0xFFFF))
   \   00000170   018A               MOVW    R17:R16, R21:R20
   \   00000172   019B               MOVW    R19:R18, R23:R22
   \   00000174   8300               ST      Z, R16
   \   00000176   8311               STD     Z+1, R17
   \   00000178   8322               STD     Z+2, R18
   \   0000017A   8333               STD     Z+3, R19
    682          							// Ignore UnitId and other data. char UnitId     = BufPtr[5+Offset];
    683          							// Only keep Distance and level
    684          							TData.Hart.Distance[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[6 + 0]);
   \   0000017C   0184               MOVW    R17:R16, R9:R8
   \   0000017E   5F0A               SUBI    R16, 250
   \   00000180   4F1F               SBCI    R17, 255
   \   00000182   ....               RCALL   ConvertBigEndianToLittleEndian
   \   00000184   01A8               MOVW    R21:R20, R17:R16
   \   00000186   01B9               MOVW    R23:R22, R19:R18
   \   00000188   8109               LDD     R16, Y+1
   \   0000018A   E010               LDI     R17, 0
   \   0000018C   0F00               LSL     R16
   \   0000018E   1F11               ROL     R17
   \   00000190   0F00               LSL     R16
   \   00000192   1F11               ROL     R17
   \   00000194   01F8               MOVW    R31:R30, R17:R16
   \   00000196   ....               SUBI    R30, LOW((-(TData + 254) & 0xFFFF))
   \   00000198   ....               SBCI    R31, HIGH((-(TData + 254) & 0xFFFF))
   \   0000019A   018A               MOVW    R17:R16, R21:R20
   \   0000019C   019B               MOVW    R19:R18, R23:R22
   \   0000019E   8300               ST      Z, R16
   \   000001A0   8311               STD     Z+1, R17
   \   000001A2   8322               STD     Z+2, R18
   \   000001A4   8333               STD     Z+3, R19
    685          							TData.Hart.Level[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[6 + 5]);
   \   000001A6   0184               MOVW    R17:R16, R9:R8
   \   000001A8   5F05               SUBI    R16, 245
   \   000001AA   4F1F               SBCI    R17, 255
   \   000001AC   ....               RCALL   ConvertBigEndianToLittleEndian
   \   000001AE   01A8               MOVW    R21:R20, R17:R16
   \   000001B0   01B9               MOVW    R23:R22, R19:R18
   \   000001B2   8109               LDD     R16, Y+1
   \   000001B4   E010               LDI     R17, 0
   \   000001B6   0F00               LSL     R16
   \   000001B8   1F11               ROL     R17
   \   000001BA   0F00               LSL     R16
   \   000001BC   1F11               ROL     R17
   \   000001BE   01F8               MOVW    R31:R30, R17:R16
   \   000001C0   ....               SUBI    R30, LOW((-(TData + 302) & 0xFFFF))
   \   000001C2   ....               SBCI    R31, HIGH((-(TData + 302) & 0xFFFF))
   \   000001C4   018A               MOVW    R17:R16, R21:R20
   \   000001C6   019B               MOVW    R19:R18, R23:R22
   \   000001C8   8300               ST      Z, R16
   \   000001CA   8311               STD     Z+1, R17
   \   000001CC   8322               STD     Z+2, R18
   \   000001CE   8333               STD     Z+3, R19
    686          							TData.Hart.FailCnt[current_chnl][0] = 0;
   \   000001D0   8109               LDD     R16, Y+1
   \   000001D2   E010               LDI     R17, 0
   \   000001D4   0F00               LSL     R16
   \   000001D6   1F11               ROL     R17
   \   000001D8   0F00               LSL     R16
   \   000001DA   1F11               ROL     R17
   \   000001DC   01F8               MOVW    R31:R30, R17:R16
   \   000001DE   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001E0   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001E2   E000               LDI     R16, 0
   \   000001E4   8300               ST      Z, R16
   \   000001E6   E000               LDI     R16, 0
   \   000001E8   8301               STD     Z+1, R16
    687          							RxStatus 						 		= HART_EVENT_RX_COMPLETE;
   \   000001EA   E091               LDI     R25, 1
   \   000001EC   C001               RJMP    ??ReceiveReply_15
    688          						} else {
    689          							RxStatus 						 		= HART_EVENT_CHECKSUM_ERROR;
   \                     ??ReceiveReply_14:
   \   000001EE   E190               LDI     R25, 16
    690          						}
    691                                                          int Cnt=0;
   \                     ??ReceiveReply_15:
   \   000001F0   24CC               CLR     R12
   \   000001F2   24DD               CLR     R13
    692                                                          do {
    693                                                                  char RxByte;
    694                                                                  RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_16:
   \   000001F4   01A2               MOVW    R21:R20, R5:R4
   \   000001F6   019E               MOVW    R19:R18, R29:R28
   \   000001F8   5F29               SUBI    R18, 249
   \   000001FA   4F3F               SBCI    R19, 255
   \   000001FC   018D               MOVW    R17:R16, R27:R26
   \   000001FE   5C0C               SUBI    R16, 204
   \   00000200   4F1D               SBCI    R17, 253
   \   00000202   ........           CALL    OS_GetMailTimed
   \   00000206   2F80               MOV     R24, R16
    695                                                                  Cnt++;
   \   00000208   E001               LDI     R16, 1
   \   0000020A   0EC0               ADD     R12, R16
   \   0000020C   E000               LDI     R16, 0
   \   0000020E   1ED0               ADC     R13, R16
    696                                                          }while (!RxTimeOut );
   \   00000210   2388               TST     R24
   \   00000212   F381               BREQ    ??ReceiveReply_16
    697                                                          
    698          					}
    699          				}
    700          			}
    701          			break;
   \   00000214   C001               RJMP    ??ReceiveReply_7
    702          		}
    703          	} else {
    704          		RxStatus = HART_EVENT_RX_ERROR;
   \                     ??ReceiveReply_3:
   \   00000216   E092               LDI     R25, 2
    705          	}
    706          	return RxStatus;
   \                     ??ReceiveReply_7:
   \   00000218   2F09               MOV     R16, R25
   \   0000021A   962A               ADIW    R29:R28, 10
   \   0000021C   E1E0               LDI     R30, 16
   \   0000021E   ........           JMP     ?EPILOGUE_B16_L09
    707          }
    708          ////////////////////////////////////////////////////////////////////////////////
    709          //
    710          // core hart work
    711          //
    712          ////////////////////////////////////////////////////////////////////////////////
    713          

   \                                 In  segment CODE, align 2, keep-with-next
    714          void do_hart_transaction(HartTaskStruct *task, const hart_channel_t current_chnl, HartTransaction *t) {
   \                     do_hart_transaction:
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   01C8               MOVW    R25:R24, R17:R16
   \   00000008   2E62               MOV     R6, R18
   \   0000000A   012A               MOVW    R5:R4, R21:R20
    715          	long t1 = OS_Time;
   \   0000000C   ....               LDI     R30, LOW(OS_Time)
   \   0000000E   ....               LDI     R31, (OS_Time) >> 8
   \   00000010   80C0               LD      R12, Z
   \   00000012   80D1               LDD     R13, Z+1
   \   00000014   80E2               LDD     R14, Z+2
   \   00000016   80F3               LDD     R15, Z+3
    716          
    717          	HartChannel *chnl = &_hart_channels[current_chnl];
   \   00000018   2D06               MOV     R16, R6
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14B               LDI     R20, 27
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   ....               LDI     R26, LOW(_hart_channels)
   \   00000026   ....               LDI     R27, (_hart_channels) >> 8
   \   00000028   0FA0               ADD     R26, R16
   \   0000002A   1FB1               ADC     R27, R17
    718          
    719          	const hart_channel_t ModemChannel = (const hart_channel_t)(current_chnl - task->start_chnl);
   \   0000002C   01FC               MOVW    R31:R30, R25:R24
   \   0000002E   5AE7               SUBI    R30, 167
   \   00000030   4FFD               SBCI    R31, 253
   \   00000032   8100               LD      R16, Z
   \   00000034   2CA6               MOV     R10, R6
   \   00000036   1AA0               SUB     R10, R16
    720          
    721          	hart_channel_inc_stat(chnl, HartChannelStatItem_TOTAL_REQS);
   \   00000038   E023               LDI     R18, 3
   \   0000003A   018D               MOVW    R17:R16, R27:R26
   \   0000003C   ........           CALL    hart_channel_inc_stat
    722          
    723          	t->error_occurred   = 1;
   \   00000040   01F2               MOVW    R31:R30, R5:R4
   \   00000042   E001               LDI     R16, 1
   \   00000044   8300               ST      Z, R16
    724          
    725          	hart_reset_rx(task, current_chnl);
   \   00000046   2D26               MOV     R18, R6
   \   00000048   018C               MOVW    R17:R16, R25:R24
   \   0000004A   ....               RCALL   hart_reset_rx
    726          	hart_reset_tx(task);
   \   0000004C   018C               MOVW    R17:R16, R25:R24
   \   0000004E   ....               RCALL   hart_reset_tx
    727          	//uint8_t tmp1= PORTC;
    728          	hart_gpio_channel_select(current_chnl);
   \   00000050   2D06               MOV     R16, R6
   \   00000052   ........           CALL    hart_gpio_channel_select
    729          	OS_Delay(10);
   \   00000056   E00A               LDI     R16, 10
   \   00000058   E010               LDI     R17, 0
   \   0000005A   ........           CALL    OS_Delay
    730          
    731          	//uint8_t tmp3= PORTC;
    732          	// Don't change channel before other channel is selected
    733          	task->rx_Channel= ModemChannel;
   \   0000005E   01FC               MOVW    R31:R30, R25:R24
   \   00000060   59ED               SUBI    R30, 157
   \   00000062   4FFA               SBCI    R31, 250
   \   00000064   82A0               ST      Z, R10
    734          	long LastRxTime = 0;
   \   00000066   E000               LDI     R16, 0
   \   00000068   8309               STD     Y+1, R16
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   830A               STD     Y+2, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   830B               STD     Y+3, R16
   \   00000072   E000               LDI     R16, 0
   \   00000074   830C               STD     Y+4, R16
    735          	if (task->rx_Time[ModemChannel]) {
   \   00000076   2D0A               MOV     R16, R10
   \   00000078   E010               LDI     R17, 0
   \   0000007A   0F00               LSL     R16
   \   0000007C   1F11               ROL     R17
   \   0000007E   0F00               LSL     R16
   \   00000080   1F11               ROL     R17
   \   00000082   01FC               MOVW    R31:R30, R25:R24
   \   00000084   0FE0               ADD     R30, R16
   \   00000086   1FF1               ADC     R31, R17
   \   00000088   59E8               SUBI    R30, 152
   \   0000008A   4FFA               SBCI    R31, 250
   \   0000008C   8100               LD      R16, Z
   \   0000008E   8111               LDD     R17, Z+1
   \   00000090   8122               LDD     R18, Z+2
   \   00000092   8133               LDD     R19, Z+3
   \   00000094   2B01               OR      R16, R17
   \   00000096   2B02               OR      R16, R18
   \   00000098   2B03               OR      R16, R19
   \   0000009A   F0E9               BREQ    ??do_hart_transaction_0
    736          		LastRxTime = OS_Time - task->rx_Time[ModemChannel];
   \   0000009C   ....               LDI     R30, LOW(OS_Time)
   \   0000009E   ....               LDI     R31, (OS_Time) >> 8
   \   000000A0   8100               LD      R16, Z
   \   000000A2   8111               LDD     R17, Z+1
   \   000000A4   8122               LDD     R18, Z+2
   \   000000A6   8133               LDD     R19, Z+3
   \   000000A8   2D4A               MOV     R20, R10
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   0F44               LSL     R20
   \   000000AE   1F55               ROL     R21
   \   000000B0   0F44               LSL     R20
   \   000000B2   1F55               ROL     R21
   \   000000B4   01FC               MOVW    R31:R30, R25:R24
   \   000000B6   0FE4               ADD     R30, R20
   \   000000B8   1FF5               ADC     R31, R21
   \   000000BA   59E8               SUBI    R30, 152
   \   000000BC   4FFA               SBCI    R31, 250
   \   000000BE   8140               LD      R20, Z
   \   000000C0   8151               LDD     R21, Z+1
   \   000000C2   8162               LDD     R22, Z+2
   \   000000C4   8173               LDD     R23, Z+3
   \   000000C6   1B04               SUB     R16, R20
   \   000000C8   0B15               SBC     R17, R21
   \   000000CA   0B26               SBC     R18, R22
   \   000000CC   0B37               SBC     R19, R23
   \   000000CE   8309               STD     Y+1, R16
   \   000000D0   831A               STD     Y+2, R17
   \   000000D2   832B               STD     Y+3, R18
   \   000000D4   833C               STD     Y+4, R19
    737          	}
    738          
    739          	char NoOtherRx = LastRxTime > 30000L;
   \                     ??do_hart_transaction_0:
   \   000000D6   8109               LDD     R16, Y+1
   \   000000D8   811A               LDD     R17, Y+2
   \   000000DA   812B               LDD     R18, Y+3
   \   000000DC   813C               LDD     R19, Y+4
   \   000000DE   3301               CPI     R16, 49
   \   000000E0   E745               LDI     R20, 117
   \   000000E2   0714               CPC     R17, R20
   \   000000E4   E040               LDI     R20, 0
   \   000000E6   0724               CPC     R18, R20
   \   000000E8   E040               LDI     R20, 0
   \   000000EA   0734               CPC     R19, R20
   \   000000EC   F01C               BRLT    ??do_hart_transaction_1
   \   000000EE   E001               LDI     R16, 1
   \   000000F0   8308               ST      Y, R16
   \   000000F2   C002               RJMP    ??do_hart_transaction_2
   \                     ??do_hart_transaction_1:
   \   000000F4   E000               LDI     R16, 0
   \   000000F6   8308               ST      Y, R16
    740                 // NoOtherRx = 1;
    741          	if (!LastRxTime || NoOtherRx) {
   \                     ??do_hart_transaction_2:
   \   000000F8   8109               LDD     R16, Y+1
   \   000000FA   811A               LDD     R17, Y+2
   \   000000FC   812B               LDD     R18, Y+3
   \   000000FE   813C               LDD     R19, Y+4
   \   00000100   2B01               OR      R16, R17
   \   00000102   2B02               OR      R16, R18
   \   00000104   2B03               OR      R16, R19
   \   00000106   F021               BREQ    ??do_hart_transaction_3
   \   00000108   8108               LD      R16, Y
   \   0000010A   2300               TST     R16
   \   0000010C   F409               BRNE    $+2+2
   \   0000010E   C0AF               RJMP    ??do_hart_transaction_4
    742          
    743          		t->make_request(task, current_chnl);
   \                     ??do_hart_transaction_3:
   \   00000110   2D26               MOV     R18, R6
   \   00000112   018C               MOVW    R17:R16, R25:R24
   \   00000114   01F2               MOVW    R31:R30, R5:R4
   \   00000116   8141               LDD     R20, Z+1
   \   00000118   8152               LDD     R21, Z+2
   \   0000011A   01FA               MOVW    R31:R30, R21:R20
   \   0000011C   9509               ICALL
    744          		//
    745          		// now set the tx length of tx_buf
    746          		//
    747          		task->tx_len = task->hart_encoder.tx_ndx;
   \   0000011E   01FC               MOVW    R31:R30, R25:R24
   \   00000120   54EB               SUBI    R30, 75
   \   00000122   4FFA               SBCI    R31, 250
   \   00000124   8120               LD      R18, Z
   \   00000126   8131               LDD     R19, Z+1
   \   00000128   01FC               MOVW    R31:R30, R25:R24
   \   0000012A   5AE3               SUBI    R30, 163
   \   0000012C   4FFD               SBCI    R31, 253
   \   0000012E   8320               ST      Z, R18
   \   00000130   8331               STD     Z+1, R19
    748          		hart_gpio_hart_carrier_on(task->modem_no);
   \   00000132   01FC               MOVW    R31:R30, R25:R24
   \   00000134   5AE8               SUBI    R30, 168
   \   00000136   4FFD               SBCI    R31, 253
   \   00000138   8100               LD      R16, Z
   \   0000013A   ........           CALL    hart_gpio_hart_carrier_on
    749          		OS_Delay(5);
   \   0000013E   E005               LDI     R16, 5
   \   00000140   E010               LDI     R17, 0
   \   00000142   ........           CALL    OS_Delay
    750          		// Be sure we have no unhandled signals before start
    751          		OS_ClearEvents(&task->tcb);
   \   00000146   018C               MOVW    R17:R16, R25:R24
   \   00000148   5B0E               SUBI    R16, 190
   \   0000014A   4F1D               SBCI    R17, 253
   \   0000014C   ........           CALL    OS_ClearEvents
    752          		//OS_ClearMB(&task->RxMailBox);
    753          		hart_start_transaction(task);
   \   00000150   018C               MOVW    R17:R16, R25:R24
   \   00000152   ....               RCALL   hart_start_transaction
    754          		// Task will halt if no signal!
    755          		// Changed code to avoid halt EHS
    756          		char TxFlag = OS_WaitEventTimed(HART_EVENT_TX_COMPLETE, 2000);
   \   00000154   ED20               LDI     R18, 208
   \   00000156   E037               LDI     R19, 7
   \   00000158   E004               LDI     R16, 4
   \   0000015A   ........           CALL    OS_WaitEventTimed
   \   0000015E   2EB0               MOV     R11, R16
    757          		if (TxFlag) {
   \   00000160   20BB               TST     R11
   \   00000162   F409               BRNE    $+2+2
   \   00000164   C09B               RJMP    ??do_hart_transaction_5
    758          			int StartT = OS_Time;
   \   00000166   ....               LDI     R30, LOW(OS_Time)
   \   00000168   ....               LDI     R31, (OS_Time) >> 8
   \   0000016A   8100               LD      R16, Z
   \   0000016C   8111               LDD     R17, Z+1
   \   0000016E   8122               LDD     R18, Z+2
   \   00000170   8133               LDD     R19, Z+3
   \   00000172   0148               MOVW    R9:R8, R17:R16
    759          			hart_gpio_hart_carrier_off(task->modem_no);
   \   00000174   01FC               MOVW    R31:R30, R25:R24
   \   00000176   5AE8               SUBI    R30, 168
   \   00000178   4FFD               SBCI    R31, 253
   \   0000017A   8100               LD      R16, Z
   \   0000017C   ........           CALL    hart_gpio_hart_carrier_off
    760          			task->rx_Listen[ModemChannel] = false;
   \   00000180   2D0A               MOV     R16, R10
   \   00000182   E010               LDI     R17, 0
   \   00000184   01FC               MOVW    R31:R30, R25:R24
   \   00000186   0FE0               ADD     R30, R16
   \   00000188   1FF1               ADC     R31, R17
   \   0000018A   59EC               SUBI    R30, 156
   \   0000018C   4FFA               SBCI    R31, 250
   \   0000018E   E000               LDI     R16, 0
   \   00000190   8300               ST      Z, R16
    761          
    762          			hart_control_Rx_Enable(task->modem_no, TRUE, FALSE);
   \   00000192   E020               LDI     R18, 0
   \   00000194   E011               LDI     R17, 1
   \   00000196   01FC               MOVW    R31:R30, R25:R24
   \   00000198   5AE8               SUBI    R30, 168
   \   0000019A   4FFD               SBCI    R31, 253
   \   0000019C   8100               LD      R16, Z
   \   0000019E   ........           CALL    hart_control_Rx_Enable
    763          			uint8_t event_status = t->complete(task, current_chnl);
   \   000001A2   2D26               MOV     R18, R6
   \   000001A4   018C               MOVW    R17:R16, R25:R24
   \   000001A6   01F2               MOVW    R31:R30, R5:R4
   \   000001A8   8143               LDD     R20, Z+3
   \   000001AA   8154               LDD     R21, Z+4
   \   000001AC   01FA               MOVW    R31:R30, R21:R20
   \   000001AE   9509               ICALL
   \   000001B0   2E70               MOV     R7, R16
    764          			task->rx_Time[ModemChannel] = 0;
   \   000001B2   2D0A               MOV     R16, R10
   \   000001B4   E010               LDI     R17, 0
   \   000001B6   0F00               LSL     R16
   \   000001B8   1F11               ROL     R17
   \   000001BA   0F00               LSL     R16
   \   000001BC   1F11               ROL     R17
   \   000001BE   01FC               MOVW    R31:R30, R25:R24
   \   000001C0   0FE0               ADD     R30, R16
   \   000001C2   1FF1               ADC     R31, R17
   \   000001C4   59E8               SUBI    R30, 152
   \   000001C6   4FFA               SBCI    R31, 250
   \   000001C8   E000               LDI     R16, 0
   \   000001CA   E010               LDI     R17, 0
   \   000001CC   E020               LDI     R18, 0
   \   000001CE   E030               LDI     R19, 0
   \   000001D0   8300               ST      Z, R16
   \   000001D2   8311               STD     Z+1, R17
   \   000001D4   8322               STD     Z+2, R18
   \   000001D6   8333               STD     Z+3, R19
    765          			task->rx_Listen[ModemChannel] = true;
   \   000001D8   2D0A               MOV     R16, R10
   \   000001DA   E010               LDI     R17, 0
   \   000001DC   01FC               MOVW    R31:R30, R25:R24
   \   000001DE   0FE0               ADD     R30, R16
   \   000001E0   1FF1               ADC     R31, R17
   \   000001E2   59EC               SUBI    R30, 156
   \   000001E4   4FFA               SBCI    R31, 250
   \   000001E6   E001               LDI     R16, 1
   \   000001E8   8300               ST      Z, R16
    766          			switch (event_status) {
   \   000001EA   2D07               MOV     R16, R7
   \   000001EC   5001               SUBI    R16, 1
   \   000001EE   F149               BREQ    ??do_hart_transaction_6
   \   000001F0   950A               DEC     R16
   \   000001F2   F0B1               BREQ    ??do_hart_transaction_7
   \   000001F4   5006               SUBI    R16, 6
   \   000001F6   F019               BREQ    ??do_hart_transaction_8
   \   000001F8   5008               SUBI    R16, 8
   \   000001FA   F141               BREQ    ??do_hart_transaction_9
   \   000001FC   C04F               RJMP    ??do_hart_transaction_5
    767          			case HART_EVENT_TIMEOUT: // Timeout
    768          				hart_channel_inc_stat(chnl, HartChannelStatItem_RX_TIMEOUT);
   \                     ??do_hart_transaction_8:
   \   000001FE   E022               LDI     R18, 2
   \   00000200   018D               MOVW    R17:R16, R27:R26
   \   00000202   ........           CALL    hart_channel_inc_stat
    769          				hart_channel_set_status(chnl, HartChannelStatus_No_Response);
   \   00000206   E021               LDI     R18, 1
   \   00000208   018D               MOVW    R17:R16, R27:R26
   \   0000020A   ........           CALL    hart_channel_set_status
    770          
    771          				t->error(task, current_chnl, HartCommErr_RX_Timeout);
   \   0000020E   E031               LDI     R19, 1
   \   00000210   2D26               MOV     R18, R6
   \   00000212   018C               MOVW    R17:R16, R25:R24
   \   00000214   01F2               MOVW    R31:R30, R5:R4
   \   00000216   8145               LDD     R20, Z+5
   \   00000218   8156               LDD     R21, Z+6
   \   0000021A   01FA               MOVW    R31:R30, R21:R20
   \   0000021C   9509               ICALL
    772          				break;
   \   0000021E   C03E               RJMP    ??do_hart_transaction_5
    773          			case HART_EVENT_RX_ERROR:
    774          				// protocol parsing error
    775          				hart_channel_inc_stat(chnl, HartChannelStatItem_RX_INVALID);
   \                     ??do_hart_transaction_7:
   \   00000220   E020               LDI     R18, 0
   \   00000222   018D               MOVW    R17:R16, R27:R26
   \   00000224   ........           CALL    hart_channel_inc_stat
    776          				hart_channel_set_status(chnl, HartChannelStatus_Invalid_Response);
   \   00000228   E022               LDI     R18, 2
   \   0000022A   018D               MOVW    R17:R16, R27:R26
   \   0000022C   ........           CALL    hart_channel_set_status
    777          
    778          				t->error(task, current_chnl, HartCommErr_RX_Error);
   \   00000230   E030               LDI     R19, 0
   \   00000232   2D26               MOV     R18, R6
   \   00000234   018C               MOVW    R17:R16, R25:R24
   \   00000236   01F2               MOVW    R31:R30, R5:R4
   \   00000238   8145               LDD     R20, Z+5
   \   0000023A   8156               LDD     R21, Z+6
   \   0000023C   01FA               MOVW    R31:R30, R21:R20
   \   0000023E   9509               ICALL
    779          				break;
   \   00000240   C02D               RJMP    ??do_hart_transaction_5
    780          			case HART_EVENT_RX_COMPLETE:
    781          				hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_6:
   \   00000242   E020               LDI     R18, 0
   \   00000244   018D               MOVW    R17:R16, R27:R26
   \   00000246   ........           CALL    hart_channel_set_status
    782          				break;
   \   0000024A   C028               RJMP    ??do_hart_transaction_5
    783          			case HART_EVENT_CHECKSUM_ERROR:
    784          				hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_9:
   \   0000024C   E020               LDI     R18, 0
   \   0000024E   018D               MOVW    R17:R16, R27:R26
   \   00000250   ........           CALL    hart_channel_set_status
    785          				hart_channel_inc_stat(chnl, HartChannelStatItem_RX_CSUM);
   \   00000254   E021               LDI     R18, 1
   \   00000256   018D               MOVW    R17:R16, R27:R26
   \   00000258   ........           CALL    hart_channel_inc_stat
    786          				// checksum mismatch
    787          				t->error(task, current_chnl, HartCommErr_RX_Checksum);
   \   0000025C   E032               LDI     R19, 2
   \   0000025E   2D26               MOV     R18, R6
   \   00000260   018C               MOVW    R17:R16, R25:R24
   \   00000262   01F2               MOVW    R31:R30, R5:R4
   \   00000264   8145               LDD     R20, Z+5
   \   00000266   8156               LDD     R21, Z+6
   \   00000268   01FA               MOVW    R31:R30, R21:R20
   \   0000026A   9509               ICALL
    788          				break;
   \   0000026C   C017               RJMP    ??do_hart_transaction_5
    789          			}
    790          		}
    791          	} else if (!NoOtherRx) {
   \                     ??do_hart_transaction_4:
   \   0000026E   8108               LD      R16, Y
   \   00000270   2300               TST     R16
   \   00000272   F4A1               BRNE    ??do_hart_transaction_5
    792          		OS_Delay(2);
   \   00000274   E002               LDI     R16, 2
   \   00000276   E010               LDI     R17, 0
   \   00000278   ........           CALL    OS_Delay
    793          		task->rx_Listen[ModemChannel] = true;
   \   0000027C   24BB               CLR     R11
   \   0000027E   01FC               MOVW    R31:R30, R25:R24
   \   00000280   0DEA               ADD     R30, R10
   \   00000282   1DFB               ADC     R31, R11
   \   00000284   59EC               SUBI    R30, 156
   \   00000286   4FFA               SBCI    R31, 250
   \   00000288   E001               LDI     R16, 1
   \   0000028A   8300               ST      Z, R16
    794          		hart_control_Rx_Enable(task->modem_no, TRUE, FALSE);
   \   0000028C   E020               LDI     R18, 0
   \   0000028E   E011               LDI     R17, 1
   \   00000290   01FC               MOVW    R31:R30, R25:R24
   \   00000292   5AE8               SUBI    R30, 168
   \   00000294   4FFD               SBCI    R31, 253
   \   00000296   8100               LD      R16, Z
   \   00000298   ........           CALL    hart_control_Rx_Enable
    795          	}
    796          	OS_DelayUntil(t1 + 750);
   \                     ??do_hart_transaction_5:
   \   0000029C   0186               MOVW    R17:R16, R13:R12
   \   0000029E   5102               SUBI    R16, 18
   \   000002A0   4F1D               SBCI    R17, 253
   \   000002A2   ........           CALL    OS_DelayUntil
    797          	hart_control_Rx_Enable(task->modem_no, FALSE, FALSE);
   \   000002A6   E020               LDI     R18, 0
   \   000002A8   E010               LDI     R17, 0
   \   000002AA   01FC               MOVW    R31:R30, R25:R24
   \   000002AC   5AE8               SUBI    R30, 168
   \   000002AE   4FFD               SBCI    R31, 253
   \   000002B0   8100               LD      R16, Z
   \   000002B2   ........           CALL    hart_control_Rx_Enable
    798          	task->rx_Listen[ModemChannel] = false;
   \   000002B6   24BB               CLR     R11
   \   000002B8   01FC               MOVW    R31:R30, R25:R24
   \   000002BA   0DEA               ADD     R30, R10
   \   000002BC   1DFB               ADC     R31, R11
   \   000002BE   59EC               SUBI    R30, 156
   \   000002C0   4FFA               SBCI    R31, 250
   \   000002C2   E000               LDI     R16, 0
   \   000002C4   8300               ST      Z, R16
    799          }
   \   000002C6   9625               ADIW    R29:R28, 5
   \   000002C8   E1E0               LDI     R30, 16
   \   000002CA   ........           JMP     ?EPILOGUE_B16_L09
    800          
    801          ////////////////////////////////////////////////////////////////////////////////
    802          //
    803          // HART Task
    804          //
    805          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    806          void HART_Task(void) {
   \                     HART_Task:
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
    807          	OS_TASK *taskPtr = OS_GetpCurrentTask();
   \   00000004   ....               LDI     R30, LOW(OS_pCurrentTask)
   \   00000006   ....               LDI     R31, (OS_pCurrentTask) >> 8
   \   00000008   8080               LD      R8, Z
   \   0000000A   8091               LDD     R9, Z+1
    808          	HartTaskStruct *myTask  = container_of(taskPtr, HartTaskStruct, tcb);
   \   0000000C   01C4               MOVW    R25:R24, R9:R8
   \   0000000E   5482               SUBI    R24, 66
   \   00000010   4092               SBCI    R25, 2
    809          	OS_CreateMB(&myTask->RxMailBox, 1, HART_MAX_RX_BUFFER_SIZE, (char *)myTask->mailBuf);
   \   00000012   01BC               MOVW    R23:R22, R25:R24
   \   00000014   546C               SUBI    R22, 76
   \   00000016   4F7F               SBCI    R23, 255
   \   00000018   E840               LDI     R20, 128
   \   0000001A   E051               LDI     R21, 1
   \   0000001C   E021               LDI     R18, 1
   \   0000001E   018C               MOVW    R17:R16, R25:R24
   \   00000020   5C0C               SUBI    R16, 204
   \   00000022   4F1D               SBCI    R17, 253
   \   00000024   ........           CALL    OS_CreateMB
    810          
    811          
    812          	hart_msg_parser_init(&myTask->hart_parser, myTask->rx_buf, HART_MAX_RX_BUFFER_SIZE);
   \   00000028   E840               LDI     R20, 128
   \   0000002A   E051               LDI     R21, 1
   \   0000002C   019C               MOVW    R19:R18, R25:R24
   \   0000002E   512D               SUBI    R18, 29
   \   00000030   4F3C               SBCI    R19, 252
   \   00000032   018C               MOVW    R17:R16, R25:R24
   \   00000034   5804               SUBI    R16, 132
   \   00000036   4F1A               SBCI    R17, 250
   \   00000038   ........           CALL    hart_msg_parser_init
    813          	hart_msg_encoder_init(&myTask->hart_encoder, myTask->tx_buf, HART_MAX_TX_BUFFER_SIZE);
   \   0000003C   E840               LDI     R20, 128
   \   0000003E   E051               LDI     R21, 1
   \   00000040   019C               MOVW    R19:R18, R25:R24
   \   00000042   5A21               SUBI    R18, 161
   \   00000044   4F3D               SBCI    R19, 253
   \   00000046   018C               MOVW    R17:R16, R25:R24
   \   00000048   540F               SUBI    R16, 79
   \   0000004A   4F1A               SBCI    R17, 250
   \   0000004C   ........           CALL    hart_msg_encoder_init
    814          
    815          	hart_config_uart(myTask);
   \   00000050   018C               MOVW    R17:R16, R25:R24
   \   00000052   ....               RCALL   hart_config_uart
    816          	hart_gpio_hart_carrier_off(myTask->modem_no);
   \   00000054   01FC               MOVW    R31:R30, R25:R24
   \   00000056   5AE8               SUBI    R30, 168
   \   00000058   4FFD               SBCI    R31, 253
   \   0000005A   8100               LD      R16, Z
   \   0000005C   ........           CALL    hart_gpio_hart_carrier_off
    817          	hart_control_Rx_Enable(myTask->modem_no, FALSE, FALSE);
   \   00000060   E020               LDI     R18, 0
   \   00000062   E010               LDI     R17, 0
   \   00000064   01FC               MOVW    R31:R30, R25:R24
   \   00000066   5AE8               SUBI    R30, 168
   \   00000068   4FFD               SBCI    R31, 253
   \   0000006A   8100               LD      R16, Z
   \   0000006C   ........           CALL    hart_control_Rx_Enable
    818          
    819          	long t0 = OS_GetTime();
   \   00000070   ........           CALL    OS__Gettime
   \   00000074   0128               MOVW    R5:R4, R17:R16
   \   00000076   2C65               MOV     R6, R5
   \   00000078   0C66               LSL     R6
   \   0000007A   0866               SBC     R6, R6
   \   0000007C   2C76               MOV     R7, R6
    820          	while (1) {
    821          		uint8_t num_chnls_handled = 0;
   \                     ??HART_Task_0:
   \   0000007E   E0A0               LDI     R26, 0
    822          
    823          		for (hart_channel_t current_chnl = myTask->start_chnl; current_chnl <= myTask->end_chnl; current_chnl++) {
   \   00000080   01FC               MOVW    R31:R30, R25:R24
   \   00000082   5AE7               SUBI    R30, 167
   \   00000084   4FFD               SBCI    R31, 253
   \   00000086   81B0               LD      R27, Z
   \                     ??HART_Task_1:
   \   00000088   01FC               MOVW    R31:R30, R25:R24
   \   0000008A   5AE6               SUBI    R30, 166
   \   0000008C   4FFD               SBCI    R31, 253
   \   0000008E   8100               LD      R16, Z
   \   00000090   170B               CP      R16, R27
   \   00000092   F068               BRCS    ??HART_Task_2
    824          
    825          			if (hart_channel_ready_to_poll(current_chnl)) {
   \   00000094   2F0B               MOV     R16, R27
   \   00000096   ........           CALL    hart_channel_ready_to_poll
   \   0000009A   2300               TST     R16
   \   0000009C   F031               BREQ    ??HART_Task_3
    826          				num_chnls_handled++;
   \   0000009E   95A3               INC     R26
    827          				do_hart_transaction(myTask, current_chnl, &_demo1_transaction);
   \   000000A0   ....               LDI     R20, LOW(_demo1_transaction)
   \   000000A2   ....               LDI     R21, (_demo1_transaction) >> 8
   \   000000A4   2F2B               MOV     R18, R27
   \   000000A6   018C               MOVW    R17:R16, R25:R24
   \   000000A8   ....               RCALL   do_hart_transaction
    828          			}
    829          		}
   \                     ??HART_Task_3:
   \   000000AA   95B3               INC     R27
   \   000000AC   CFED               RJMP    ??HART_Task_1
    830          		OS_DelayUntil(t0 += 3000);
   \                     ??HART_Task_2:
   \   000000AE   EB08               LDI     R16, 184
   \   000000B0   0E40               ADD     R4, R16
   \   000000B2   E00B               LDI     R16, 11
   \   000000B4   1E50               ADC     R5, R16
   \   000000B6   E000               LDI     R16, 0
   \   000000B8   1E60               ADC     R6, R16
   \   000000BA   E000               LDI     R16, 0
   \   000000BC   1E70               ADC     R7, R16
   \   000000BE   0182               MOVW    R17:R16, R5:R4
   \   000000C0   ........           CALL    OS_DelayUntil
    831          		myTask->LastHartTaskRunTime = OS_Time;
   \   000000C4   ....               LDI     R30, LOW(OS_Time)
   \   000000C6   ....               LDI     R31, (OS_Time) >> 8
   \   000000C8   8100               LD      R16, Z
   \   000000CA   8111               LDD     R17, Z+1
   \   000000CC   8122               LDD     R18, Z+2
   \   000000CE   8133               LDD     R19, Z+3
   \   000000D0   01FC               MOVW    R31:R30, R25:R24
   \   000000D2   58E8               SUBI    R30, 136
   \   000000D4   4FFA               SBCI    R31, 250
   \   000000D6   8300               ST      Z, R16
   \   000000D8   8311               STD     Z+1, R17
   \   000000DA   8322               STD     Z+2, R18
   \   000000DC   8333               STD     Z+3, R19
   \   000000DE   CFCF               RJMP    ??HART_Task_0
    832          		/*
    833          		if (num_chnls_handled == 0) {
    834          			//
    835          			// if all the task channels are either power down or
    836          			// fault state, then get some sleep
    837          			// much better cooperative bullshit
    838          			//
    839          			OS_Delay(200);
    840          		}
    841          		*/
    842          	}
    843          }
    844          
    845          
    846          ////////////////////////////////////////////////////////////////////////////////
    847          //
    848          // public interfaces
    849          //
    850          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    851          void
    852          hart_start(void) {
   \                     hart_start:
   \   00000000   938A               ST      -Y, R24
    853          	hart_channel_t   chnl;
    854          
    855          	OS_CREATERSEMA(&_hart_task0.channel_lock);
   \   00000002   ....               LDI     R16, LOW((_hart_task0 + 1464))
   \   00000004   ....               LDI     R17, HIGH((_hart_task0 + 1464))
   \   00000006   ........           CALL    OS_CreateRSema
    856          	OS_CREATERSEMA(&_hart_task1.channel_lock);
   \   0000000A   ....               LDI     R16, LOW((_hart_task1 + 1464))
   \   0000000C   ....               LDI     R17, HIGH((_hart_task1 + 1464))
   \   0000000E   ........           CALL    OS_CreateRSema
    857          	OS_CREATERSEMA(&_hart_task2.channel_lock);
   \   00000012   ....               LDI     R16, LOW((_hart_task2 + 1464))
   \   00000014   ....               LDI     R17, HIGH((_hart_task2 + 1464))
   \   00000016   ........           CALL    OS_CreateRSema
    858          
    859          	hart_for_each_channel(chnl) {
   \   0000001A   E080               LDI     R24, 0
   \                     ??hart_start_0:
   \   0000001C   308C               CPI     R24, 12
   \   0000001E   F498               BRCC    ??hart_start_1
    860          		hart_channel_reset(&_hart_channels[chnl]);
   \   00000020   2F08               MOV     R16, R24
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14B               LDI     R20, 27
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   0198               MOVW    R19:R18, R17:R16
   \   0000002E   ....               LDI     R16, LOW(_hart_channels)
   \   00000030   ....               LDI     R17, (_hart_channels) >> 8
   \   00000032   0F02               ADD     R16, R18
   \   00000034   1F13               ADC     R17, R19
   \   00000036   ........           CALL    hart_channel_reset
    861          		hart_control_power(chnl, HartChannelPowerStatus_ON);
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   2F08               MOV     R16, R24
   \   0000003E   ........           CALL    hart_control_power
    862          	}
   \   00000042   9583               INC     R24
   \   00000044   CFEB               RJMP    ??hart_start_0
    863          	hart_gpio_enable_all_mux();
   \                     ??hart_start_1:
   \   00000046   ........           CALL    hart_gpio_enable_all_mux
    864          	hart_diag_task_start();
   \   0000004A   ........           CALL    hart_diag_task_start
    865          
    866          	//
    867          	// now power on modem one by one.
    868          	// don't care about start up time
    869          	//
    870          	hart_diag_init();
   \   0000004E   ........           CALL    hart_diag_init
    871          	OS_Delay(HART_START_UP_POWER_UP_DELAY);
   \   00000052   ED0C               LDI     R16, 220
   \   00000054   E015               LDI     R17, 5
   \   00000056   ........           CALL    OS_Delay
    872          
    873          	OS_CREATETASK(&_hart_task0.tcb, "HART0", HART_Task, HART_TASK_PRIORITY, _hart_task0.Mystack);
   \   0000005A   E002               LDI     R16, 2
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   931A               ST      -Y, R17
   \   00000060   930A               ST      -Y, R16
   \   00000062   EB04               LDI     R16, 180
   \   00000064   E010               LDI     R17, 0
   \   00000066   931A               ST      -Y, R17
   \   00000068   930A               ST      -Y, R16
   \   0000006A   ....               LDI     R16, LOW(_hart_task0)
   \   0000006C   ....               LDI     R17, (_hart_task0) >> 8
   \   0000006E   931A               ST      -Y, R17
   \   00000070   930A               ST      -Y, R16
   \   00000072   ....               LDI     R22, LOW(HART_Task/2)
   \   00000074   ....               LDI     R23, (HART_Task/2) >> 8
   \   00000076   E748               LDI     R20, 120
   \   00000078   ....               LDI     R18, LOW(`?<Constant "HART0">`)
   \   0000007A   ....               LDI     R19, (`?<Constant "HART0">`) >> 8
   \   0000007C   ....               LDI     R16, LOW((_hart_task0 + 578))
   \   0000007E   ....               LDI     R17, HIGH((_hart_task0 + 578))
   \   00000080   ........           CALL    OS_CreateTask_D
    874          	OS_CREATETASK(&_hart_task1.tcb, "HART1", HART_Task, HART_TASK_PRIORITY, _hart_task1.Mystack);
   \   00000084   E002               LDI     R16, 2
   \   00000086   E010               LDI     R17, 0
   \   00000088   931A               ST      -Y, R17
   \   0000008A   930A               ST      -Y, R16
   \   0000008C   EB04               LDI     R16, 180
   \   0000008E   E010               LDI     R17, 0
   \   00000090   931A               ST      -Y, R17
   \   00000092   930A               ST      -Y, R16
   \   00000094   ....               LDI     R16, LOW(_hart_task1)
   \   00000096   ....               LDI     R17, (_hart_task1) >> 8
   \   00000098   931A               ST      -Y, R17
   \   0000009A   930A               ST      -Y, R16
   \   0000009C   ....               LDI     R22, LOW(HART_Task/2)
   \   0000009E   ....               LDI     R23, (HART_Task/2) >> 8
   \   000000A0   E748               LDI     R20, 120
   \   000000A2   ....               LDI     R18, LOW(`?<Constant "HART1">`)
   \   000000A4   ....               LDI     R19, (`?<Constant "HART1">`) >> 8
   \   000000A6   ....               LDI     R16, LOW((_hart_task1 + 578))
   \   000000A8   ....               LDI     R17, HIGH((_hart_task1 + 578))
   \   000000AA   ........           CALL    OS_CreateTask_D
    875          	OS_CREATETASK(&_hart_task2.tcb, "HART2", HART_Task, HART_TASK_PRIORITY, _hart_task2.Mystack);
   \   000000AE   E002               LDI     R16, 2
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   931A               ST      -Y, R17
   \   000000B4   930A               ST      -Y, R16
   \   000000B6   EB04               LDI     R16, 180
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   931A               ST      -Y, R17
   \   000000BC   930A               ST      -Y, R16
   \   000000BE   ....               LDI     R16, LOW(_hart_task2)
   \   000000C0   ....               LDI     R17, (_hart_task2) >> 8
   \   000000C2   931A               ST      -Y, R17
   \   000000C4   930A               ST      -Y, R16
   \   000000C6   ....               LDI     R22, LOW(HART_Task/2)
   \   000000C8   ....               LDI     R23, (HART_Task/2) >> 8
   \   000000CA   E748               LDI     R20, 120
   \   000000CC   ....               LDI     R18, LOW(`?<Constant "HART2">`)
   \   000000CE   ....               LDI     R19, (`?<Constant "HART2">`) >> 8
   \   000000D0   ....               LDI     R16, LOW((_hart_task2 + 578))
   \   000000D2   ....               LDI     R17, HIGH((_hart_task2 + 578))
   \   000000D4   ........           CALL    OS_CreateTask_D
    876          
    877          
    878          }
   \   000000D8   9189               LD      R24, Y+
   \   000000DA   9508               RET
    879          
    880          

   \                                 In  segment CODE, align 2, keep-with-next
    881          HartChannel* hart_channel_get_with_lock(hart_channel_t chnl_num) {
   \                     hart_channel_get_with_lock:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
    882          	HartChannel *chnl = &_hart_channels[chnl_num];
   \   00000006   2F0A               MOV     R16, R26
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14B               LDI     R20, 27
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   ....               LDI     R24, LOW(_hart_channels)
   \   00000014   ....               LDI     R25, (_hart_channels) >> 8
   \   00000016   0F80               ADD     R24, R16
   \   00000018   1F91               ADC     R25, R17
    883          
    884          	hart_channel_lock(chnl);
   \   0000001A   018C               MOVW    R17:R16, R25:R24
   \   0000001C   ........           CALL    hart_channel_lock
    885          	return chnl;
   \   00000020   018C               MOVW    R17:R16, R25:R24
   \   00000022   E0E3               LDI     R30, 3
   \   00000024   ........           JMP     ?EPILOGUE_B3_L09
    886          }
    887          

   \                                 In  segment CODE, align 2, keep-with-next
    888          void hart_channel_put_with_unlock(HartChannel *chnl) {
   \                     hart_channel_put_with_unlock:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    889          	hart_channel_unlock(chnl);
   \   00000006   018C               MOVW    R17:R16, R25:R24
   \   00000008   ........           CALL    hart_channel_unlock
    890          }
   \   0000000C   9189               LD      R24, Y+
   \   0000000E   9199               LD      R25, Y+
   \   00000010   9508               RET

   \                                 In  segment INTVEC, offset 0x90, root
   \                     `??USART1_RXC::??INTVEC 144`:
   \   00000090   ........           JMP     USART1_RXC

   \                                 In  segment INTVEC, offset 0x94, root
   \                     `??USART1_UDRE::??INTVEC 148`:
   \   00000094   ........           JMP     USART1_UDRE

   \                                 In  segment INTVEC, offset 0x98, root
   \                     `??USART1_TXC::??INTVEC 152`:
   \   00000098   ........           JMP     USART1_TXC

   \                                 In  segment INTVEC, offset 0xcc, root
   \                     `??USART2_RXC::??INTVEC 204`:
   \   000000CC   ........           JMP     USART2_RXC

   \                                 In  segment INTVEC, offset 0xd0, root
   \                     `??USART2_UDRE::??INTVEC 208`:
   \   000000D0   ........           JMP     USART2_UDRE

   \                                 In  segment INTVEC, offset 0xd4, root
   \                     `??USART2_TXC::??INTVEC 212`:
   \   000000D4   ........           JMP     USART2_TXC

   \                                 In  segment INTVEC, offset 0xd8, root
   \                     `??USART3_RXC::??INTVEC 216`:
   \   000000D8   ........           JMP     USART3_RXC

   \                                 In  segment INTVEC, offset 0xdc, root
   \                     `??USART3_UDRE::??INTVEC 220`:
   \   000000DC   ........           JMP     USART3_UDRE

   \                                 In  segment INTVEC, offset 0xe0, root
   \                     `??USART3_TXC::??INTVEC 224`:
   \   000000E0   ........           JMP     USART3_TXC

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HART0">>`:
   \   00000000   414854520030       DC8 "HART0"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HART1">>`:
   \   00000000   414854520031       DC8 "HART1"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HART2">>`:
   \   00000000   414854520032       DC8 "HART2"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_task0>`:
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000012   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000022   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000052   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000062   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000082   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000092   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   000000B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000105   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000115   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000125   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000135   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000145   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000155   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000165   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000175   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000185   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000195   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000205   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000215   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000225   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      
   \   00000234   0000               DC16 0H
   \   00000236   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   00000242   0000               DC16 0H
   \   00000244   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
   \              000000000000
   \              000000000000
   \              0000000003  
   \   0000025B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000050B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000053B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000054B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000055B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000056B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000057B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000058B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000059B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_task1>`:
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000012   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000022   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000052   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000062   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000082   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000092   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   000000B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000105   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000115   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000125   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000135   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000145   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000155   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000165   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000175   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000185   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000195   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000205   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000215   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000225   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      
   \   00000234   0000               DC16 0H
   \   00000236   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   00000242   0000               DC16 0H
   \   00000244   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 7
   \              000000000000
   \              000000000000
   \              0000040107  
   \   0000025B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000050B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000053B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000054B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000055B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000056B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000057B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000058B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000059B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_task2>`:
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000012   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000022   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000052   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000062   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000082   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000092   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   000000B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000105   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000115   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000125   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000135   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000145   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000155   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000165   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000175   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000185   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000195   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000205   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000215   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000225   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000      
   \   00000234   0000               DC16 0H
   \   00000236   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   00000242   0000               DC16 0H
   \   00000244   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8
   \              000000000000
   \              000000000000
   \              00000802    
   \   0000025A   000B00000000       DC8 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   0000026B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000050B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000053B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000054B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000055B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000056B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000057B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000058B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000059B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000      

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _demo1_transaction>`:
   \   00000000   00                 DC8 0
   \   00000001   ........           DC16 demo1_hart_make_request/2, ReceiveReply/2
   \   00000005   ....               DC16 demo1_hart_handle_rx_error/2

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_channels>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000011   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000001
   \              000000000000
   \              00          
   \   00000024   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
   \              000000000000
   \              000000000000
   \              02          
   \   00000037   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000047   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000003
   \              000000000000
   \              00          
   \   0000005A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4
   \              000000000000
   \              000000000000
   \              04          
   \   0000006D   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007D   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000005
   \              000000000000
   \              00          
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6
   \              000000000000
   \              000000000000
   \              06          
   \   000000A3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000007
   \              000000000000
   \              00          
   \   000000C6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
   \              000000000000
   \              000000000000
   \              08          
   \   000000D9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000009
   \              000000000000
   \              00          
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10
   \              000000000000
   \              000000000000
   \              0A          
   \   0000010F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000000B
   \              000000000000
   \              00          
   \   00000132   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "HART0">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "HART0">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "HART1">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "HART1">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "HART2">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "HART2">>`

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {128, 0, 0, 0, 0}>`:
   \   00000000   0080000000         DC8 128, 0, 0, 0, 0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   ConvertBigEndianToLittleEndian
     10      2   HART_Task
       10      2   -> OS_CreateMB
       10      2   -> OS_DelayUntil
       10      2   -> OS__Gettime
       10      2   -> do_hart_transaction
       10      2   -> hart_channel_ready_to_poll
       10      2   -> hart_config_uart
       10      2   -> hart_control_Rx_Enable
       10      2   -> hart_gpio_hart_carrier_off
       10      2   -> hart_msg_encoder_init
       10      2   -> hart_msg_parser_init
     26      2   ReceiveReply
       26      2   -> ConvertBigEndianToLittleEndian
       26      2   -> OS_GetMailTimed
       26      2   -> hart_msg_calc_csum
     17      2   USART1_RXC
       17      2   -> OS_Error
       17      2   -> OS_PutMailCond1
       17      2   -> OS__EnterIntStack
       17      2   -> OS__LeaveIntStack
     16      2   USART1_TXC
       16      2   -> OS_Error
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_finish_tx
     16      2   USART1_UDRE
       16      2   -> OS_Error
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_tx_next
     17      2   USART2_RXC
       17      2   -> OS_Error
       17      2   -> OS_PutMailCond1
       17      2   -> OS__EnterIntStack
       17      2   -> OS__LeaveIntStack
     16      2   USART2_TXC
       16      2   -> OS_Error
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_finish_tx
     16      2   USART2_UDRE
       16      2   -> OS_Error
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_tx_next
     17      2   USART3_RXC
       17      2   -> OS_Error
       17      2   -> OS_PutMailCond1
       17      2   -> OS__EnterIntStack
       17      2   -> OS__LeaveIntStack
     16      2   USART3_TXC
       16      2   -> OS_Error
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_finish_tx
     16      2   USART3_UDRE
       16      2   -> OS_Error
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> hart_irq_tx_next
      0      2   demo1_hart_handle_rx_error
      9      2   demo1_hart_make_request
        9      2   -> hart_msg_encoder_calc_csum
        9      2   -> hart_msg_encoder_data
        9      2   -> hart_msg_encoder_long_start
        9      2   -> hart_msg_encoder_preamble
        9      2 ?ML_FLASH_SRAM_24EC_16_L07
     21      2   do_hart_transaction
       21      2   -- Indirect call
       21      2   -> OS_ClearEvents
       21      2   -> OS_Delay
       21      2   -> OS_DelayUntil
       21      2   -> OS_WaitEventTimed
       21      2   -> hart_channel_inc_stat
       21      2   -> hart_channel_set_status
       21      2   -> hart_control_Rx_Enable
       21      2   -> hart_gpio_channel_select
       21      2   -> hart_gpio_hart_carrier_off
       21      2   -> hart_gpio_hart_carrier_on
       21      2   -> hart_reset_rx
       21      2   -> hart_reset_tx
       21      2   -> hart_start_transaction
       21      2 ?S_EC_MUL_L02
      3      2   hart_channel_get_with_lock
        3      2   -> hart_channel_lock
        3      2 ?S_EC_MUL_L02
      4      2   hart_channel_inc_stat
        4      2   -> hart_channel_lock
        4      2   -> hart_channel_unlock
      2      2   hart_channel_lock
        2      2   -> OS_Use
      2      2   hart_channel_put_with_unlock
        2      2   -> hart_channel_unlock
      0      2   hart_channel_ready_to_poll
        0      2 ?F_CMP_GE_L04
        0      2 ?S_EC_MUL_L02
      2      2   hart_channel_reset
        2      2   -> hart_channel_lock
        2      2   -> hart_channel_unlock
      4      2   hart_channel_set_power_status
        4      2   -> hart_channel_lock
        4      2   -> hart_channel_unlock
      4      2   hart_channel_set_status
        4      2   -> hart_channel_lock
        4      2   -> hart_channel_unlock
      2      2   hart_channel_unlock
        2      2   -> OS_Unuse
      6      2   hart_config_uart
        6      2 ?SL_DIVMOD_L03
      0      2   hart_control_Rx_Enable
      4      2   hart_control_power
        4      2   -> hart_channel_set_power_status
        4      2   -> hart_gpio_power_off
        4      2   -> hart_gpio_power_on
        4      2 ?S_EC_MUL_L02
      2      2   hart_irq_finish_tx
        2      2   -> OS_SignalEvent
        2      2   -> hart_gpio_hart_carrier_off_irq
      0      2   hart_irq_tx_next
      3      2   hart_reset_rx
        3      2   -> hart_msg_parser_reset
      2      2   hart_reset_tx
        2      2   -> hart_msg_encoder_reset
      7      2   hart_start
        1      2   -> OS_CreateRSema
        1      2   -> OS_CreateTask_D
        1      2   -> OS_Delay
        1      2   -> hart_channel_reset
        1      2   -> hart_control_power
        1      2   -> hart_diag_init
        1      2   -> hart_diag_task_start
        1      2   -> hart_gpio_enable_all_mux
        1      2 ?S_EC_MUL_L02
      0      2   hart_start_transaction


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant "HART0">
       6  ?<Constant "HART1">
       6  ?<Constant "HART2">
       5  ?<Constant {128, 0, 0, 0, 0}>
       6  ?<Initializer for <Constant "HART0">>
       6  ?<Initializer for <Constant "HART1">>
       6  ?<Initializer for <Constant "HART2">>
       7  ?<Initializer for _demo1_transaction>
     324  ?<Initializer for _hart_channels>
    1472  ?<Initializer for _hart_task0>
    1472  ?<Initializer for _hart_task1>
    1472  ?<Initializer for _hart_task2>
      40  ConvertBigEndianToLittleEndian
     224  HART_Task
     546  ReceiveReply
     276  USART1_RXC
       4  USART1_RXC::??INTVEC 144
     194  USART1_TXC
       4  USART1_TXC::??INTVEC 152
     194  USART1_UDRE
       4  USART1_UDRE::??INTVEC 148
     276  USART2_RXC
       4  USART2_RXC::??INTVEC 204
     194  USART2_TXC
       4  USART2_TXC::??INTVEC 212
     194  USART2_UDRE
       4  USART2_UDRE::??INTVEC 208
     276  USART3_RXC
       4  USART3_RXC::??INTVEC 216
     194  USART3_TXC
       4  USART3_TXC::??INTVEC 224
     194  USART3_UDRE
       4  USART3_UDRE::??INTVEC 220
       2  _A_UBRR1
       2  _A_UBRR2
       2  _A_UBRR3
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_UCSR2A
       1  _A_UCSR2B
       1  _A_UCSR2C
       1  _A_UCSR3A
       1  _A_UCSR3B
       1  _A_UCSR3C
       1  _A_UDR1
       1  _A_UDR2
       1  _A_UDR3
       7  _demo1_transaction
     324  _hart_channels
    1472  _hart_task0
    1472  _hart_task1
    1472  _hart_task2
     202  demo1_hart_handle_rx_error
      90  demo1_hart_make_request
     718  do_hart_transaction
      40  hart_channel_get_with_lock
     184  hart_channel_inc_stat
      66  hart_channel_lock
      18  hart_channel_put_with_unlock
      78  hart_channel_ready_to_poll
     140  hart_channel_reset
      26  hart_channel_set_power_status
      26  hart_channel_set_status
      66  hart_channel_unlock
     372  hart_config_uart
     100  hart_control_Rx_Enable
      58  hart_control_power
      92  hart_irq_finish_tx
     202  hart_irq_tx_next
      52  hart_reset_rx
      50  hart_reset_tx
     220  hart_start
      86  hart_start_transaction
       7  -- Other

 
    18 bytes in segment ABSOLUTE
 5 688 bytes in segment CODE
     5 bytes in segment FAR_F
     7 bytes in segment INITTAB
    36 bytes in segment INTVEC
 4 765 bytes in segment NEAR_I
 4 765 bytes in segment NEAR_ID
 
 10 458 bytes of CODE memory (+ 43 bytes shared)
  4 765 bytes of DATA memory (+ 18 bytes shared)

Errors: none
Warnings: 5
