###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       19/Dec/2022  14:35:50
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1281\Src\RS485.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW5F0A.tmp ("D:\S2Prog\IO\ANZB –
#        ATmega1281\Src\RS485.c" --cpu=m1281 -ms -o "D:\S2Prog\IO\ANZB –
#        ATmega1281\Release\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\ANZB – ATmega1281\Release\List" -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB – ATmega1281\INC\\"
#        -I "D:\S2Prog\IO\ANZB – ATmega1281\..\..\SHARED\INC\\" --eeprom_size
#        4096 --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1281\Release\List\RS485.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1281\Release\Obj\RS485.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1281\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          //#include "stdlib.h"
     13          //#include "string.h"
     14          
     15          
     16          
     17          /************************************************ *************************
     18          *   (This is a timer calback)
     19          *  Timout timer UART 0
     20          *
     21          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     22          void TimoutUART0(void) {
   \                     TimoutUART0:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     23          
     24              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   9100220C           LDS     R16, 8716
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   9300220C           STS     8716, R16
     25          }
   \   0000000A   9508               RET
     26          
     27          /*************************************************************************
     28          *   (This is a timer calback)
     29          *  Timout timer UART 1
     30          *
     31          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     32          void TimoutUART1(void) {
   \                     TimoutUART1:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     33          
     34              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   91002204           LDS     R16, 8708
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   93002204           STS     8708, R16
     35          }
   \   0000000A   9508               RET
     36          
     37          
     38          /*************************************************************************
     39          *   (This is a task)
     40          *  Usart handler UART send request
     41          *
     42          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     43          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92DA               ST      -Y, R13
   \   00000004   92CA               ST      -Y, R12
   \   00000006   92BA               ST      -Y, R11
   \   00000008   929A               ST      -Y, R9
   \   0000000A   928A               ST      -Y, R8
   \   0000000C   927A               ST      -Y, R7
   \   0000000E   926A               ST      -Y, R6
   \   00000010   925A               ST      -Y, R5
   \   00000012   924A               ST      -Y, R4
   \   00000014   93BA               ST      -Y, R27
   \   00000016   93AA               ST      -Y, R26
   \   00000018   939A               ST      -Y, R25
   \   0000001A   938A               ST      -Y, R24
   \   0000001C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R13_is_cg_reg
   \   0000001C                      REQUIRE ?Register_R15_is_cg_reg
   \   0000001C                      REQUIRE __RSTACK_in_external_ram_new_way
     44              char SeqCnt = 0;
   \   0000001C   E090               LDI     R25, 0
     45              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   0000001E   E005               LDI     R16, 5
   \   00000020   2EB0               MOV     R11, R16
     46              char EventStatus;
     47              char AskMD[2];
     48          
     49              
     50              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000022   E840               LDI     R20, 128
   \   00000024   E255               LDI     R21, 37
   \   00000026   E060               LDI     R22, 0
   \   00000028   E070               LDI     R23, 0
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   ....               RCALL   Init16552
     51              Init16552(1, 9600);                                      // Init UART channel 1
   \   0000002E   9390....           STS     (UART16552 + 28), R25
   \   00000032   9390....           STS     (UART16552 + 29), R25
   \   00000036   9390....           STS     (UART16552 + 30), R25
   \   0000003A   9390....           STS     (UART16552 + 31), R25
   \   0000003E   9390....           STS     (UART16552 + 32), R25
   \   00000042   9390....           STS     (UART16552 + 33), R25
   \   00000046   9390....           STS     (UART16552 + 38), R25
   \   0000004A   9390....           STS     (UART16552 + 39), R25
   \   0000004E   9390....           STS     (UART16552 + 40), R25
   \   00000052   9390....           STS     (UART16552 + 41), R25
   \   00000056   9390....           STS     (UART16552 + 42), R25
   \   0000005A   9390....           STS     (UART16552 + 43), R25
   \   0000005E   9390....           STS     (UART16552 + 44), R25
   \   00000062   9390....           STS     (UART16552 + 45), R25
   \   00000066   9390....           STS     (UART16552 + 34), R25
   \   0000006A   EF0A               LDI     R16, 250
   \   0000006C   9300....           STS     (UART16552 + 46), R16
   \   00000070   9390....           STS     (UART16552 + 47), R25
   \   00000074   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   00000076   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   00000078   9300....           STS     (UART16552 + 26), R16
   \   0000007C   9310....           STS     (UART16552 + 27), R17
   \   00000080   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   00000082   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   00000084   9300....           STS     (UART16552 + 36), R16
   \   00000088   9310....           STS     (UART16552 + 37), R17
   \   0000008C   E800               LDI     R16, 128
   \   0000008E   93002203           STS     8707, R16
   \   00000092   E00D               LDI     R16, 13
   \   00000094   93002200           STS     8704, R16
   \   00000098   93902201           STS     8705, R25
   \   0000009C   E003               LDI     R16, 3
   \   0000009E   93002203           STS     8707, R16
   \   000000A2   E001               LDI     R16, 1
   \   000000A4   93002202           STS     8706, R16
   \   000000A8   EC01               LDI     R16, 193
   \   000000AA   93002202           STS     8706, R16
   \   000000AE   E003               LDI     R16, 3
   \   000000B0   93002201           STS     8705, R16
   \   000000B4   93902204           STS     8708, R25
     52              
     53              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   000000B8   E002               LDI     R16, 2
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   ........           CALL    ReadEEPROMByte
   \   000000C0   9300....           STS     TData, R16
     54              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   000000C4   E003               LDI     R16, 3
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   ........           CALL    ReadEEPROMByte
   \   000000CC   9300....           STS     (TData + 1), R16
     55              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   000000D0   E004               LDI     R16, 4
   \   000000D2   E010               LDI     R17, 0
   \   000000D4   ........           CALL    ReadEEPROMByte
   \   000000D8   9300....           STS     (TData + 2), R16
     56          
     57              TData.RS4.ToTargetBuffer[0][0] = false;
   \   000000DC   ....               LDI     R30, LOW((TData + 1268))
   \   000000DE   ....               LDI     R31, HIGH((TData + 1268))
   \   000000E0   014F               MOVW    R9:R8, R31:R30
   \   000000E2   8390               ST      Z, R25
     58              TData.RS4.ToTargetBuffer[1][0] = false;
   \   000000E4   ....               LDI     R30, LOW((TData + 1348))
   \   000000E6   ....               LDI     R31, HIGH((TData + 1348))
   \   000000E8   013F               MOVW    R7:R6, R31:R30
   \   000000EA   8390               ST      Z, R25
     59              TData.RS4.FromTargetBuffer[0][0] = false;
   \   000000EC   ....               LDI     R30, LOW((TData + 1428))
   \   000000EE   ....               LDI     R31, HIGH((TData + 1428))
   \   000000F0   012F               MOVW    R5:R4, R31:R30
   \   000000F2   8390               ST      Z, R25
     60              TData.RS4.FromTargetBuffer[1][0] = false;
   \   000000F4   AB92               STD     Z+50, R25
     61              
     62              
     63              for (char i = 0; i < 8; i++) {
   \   000000F6   E0A0               LDI     R26, 0
   \   000000F8   E088               LDI     R24, 8
     64                  MB_SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \                     ??ExtRS485Ctl_0:
   \   000000FA   94F8               CLI
   \   000000FC   9120....           LDS     R18, TData
   \   00000100   E001               LDI     R16, 1
   \   00000102   E010               LDI     R17, 0
   \   00000104   2F4A               MOV     R20, R26
   \   00000106   ........           CALL    ?S_SHL_L02
   \   0000010A   2320               AND     R18, R16
   \   0000010C   B108               IN      R16, 0x08
   \   0000010E   2B02               OR      R16, R18
   \   00000110   B908               OUT     0x08, R16
   \   00000112   9100....           LDS     R16, (OS_Counters + 1)
   \   00000116   2300               TST     R16
   \   00000118   F409               BRNE    ??ExtRS485Ctl_1
   \   0000011A   9478               SEI
     65                  OS_Delay(100);
   \                     ??ExtRS485Ctl_1:
   \   0000011C   E604               LDI     R16, 100
   \   0000011E   E010               LDI     R17, 0
   \   00000120   ........           CALL    OS_Delay
     66              }
   \   00000124   95A3               INC     R26
   \   00000126   958A               DEC     R24
   \   00000128   F741               BRNE    ??ExtRS485Ctl_0
     67              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \   0000012A   E700               LDI     R16, 112
   \   0000012C   E117               LDI     R17, 23
   \   0000012E   ........           CALL    OS_Delay
   \   00000132   ....               LDI     R26, LOW((TData + 1528))
   \   00000134   ....               LDI     R27, HIGH((TData + 1528))
   \   00000136   E101               LDI     R16, 17
   \   00000138   2ED0               MOV     R13, R16
   \   0000013A   24FF               CLR     R15
   \   0000013C   94F3               INC     R15
   \   0000013E   2CCB               MOV     R12, R11
   \   00000140   E080               LDI     R24, 0
   \   00000142   C004               RJMP    ??ExtRS485Ctl_2
     68              
     69              while (1) {
     70                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
     71                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
     72                          EmptyRxBuf16552(0);                            // Empty UART channel 0
     73                      }
     74                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
     75                          EmptyRxBuf16552(1);                            // Empty UART channel 1
     76                      }
     77                      if (PowerOnTimer < POWER_ON_CNT) {
     78                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
     79                              SetRS4Port();                                // and set power on ports
     80                          }
     81                      }
     82                      MB_SetBit(PORTE, 0xf0);
     83                      ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
     84                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
     85                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
     86                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
     87                          switch (SnsType) {
     88                          case 0x01:    //Water ingress??
     89                              switch (SeqCnt) {
     90                              case 0:
     91                                  Uart_BuildReqWISCardStatus(0);          //Card status
     92                                  break;
     93                              case 20:
     94                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
     95                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
     96                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
     97                                          TData.RS4.EEPROMPortpair[0] = 0;
     98                                      }
     99                                  } else {
    100                                      Uart_BuildReqWISData(0);                //WIS data
    101                                  }
    102                                  break;
    103                              default:
    104                                  Uart_BuildReqWISData(0);                //WIS data
    105                                  break;
    106                              }
    107                              break;
    108                          case 0x02: // Radar??
    109                              switch (SeqCnt) {
    110                              case 20:
    111                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    112                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    113                                          TData.RS4.EEPROMPortpair[0] = 0;
    114                                      }
    115                                  }
    116                                  // Fall through and send the request
    117                              default:
    118                                  Uart_BuildReqRadarData(0);          // Radar data
    119                                  break;
    120                              case 0:
    121                                  Uart_BuildReqRadarInfo(0);          //Radar Information
    122                                  break;
    123                              }
    124                              break;
    125                          case 0x00:  // AN-SGCNV
    126                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    127                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
    128                                  Uart_BuildSndData(0);                       // add data to AD card package
    129                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    130                                  AskMD[0] = false;
    131                              } else {
    132                                  AskMD[0] = true;
    133                              }
    134                              if (SeqCnt == 0) {
    135                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
    136                              } else if (SeqCnt == 5) {
    137                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
    138                              } else if (SeqCnt == 10) {
    139                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    140                              } else if (SeqCnt == 15) {
    141                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
    142                              } else if (SeqCnt == 20) {
    143                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    144                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
    145                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
    146                                          TData.RS4.EEPROMADChannel[0] = 0;
    147                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    148                                              TData.RS4.EEPROMPortpair[0] = 0;
    149                                          }
    150                                      }
    151                                  } else if (AskMD[0] == true) {
    152                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    153                                  }
    154                              } else if (AskMD[0] == true) {
    155                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    156                              }
    157                              break;
    158                          }
    159                          Uart_BuildTail16552(0);
    160                      } else {
    161                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
    162                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
    163                                  TData.RS4.EEPROMPortpair[0] = 0;
    164                              }
    165                          }
    166                      }
    167                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
    168                          UART16552[1].TxFirst = 6;                       // Start at
    169                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
    170                          switch (SnsType) {
    171                          case 0x01:    //Water ingress??
    172                              switch (SeqCnt) {
    173                              case 0:
    174                                  Uart_BuildReqWISCardStatus(1);          //Card status
    175                                  break;
    176                              case 20:
    177                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    178                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
    179                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    180                                          TData.RS4.EEPROMPortpair[1] = 0;
    181                                      }
    182                                  } else {
    183                                      Uart_BuildReqWISData(1);                //WIS data
    184                                  }
    185                                  break;
    186                              default:
    187                                  Uart_BuildReqWISData(1);                //WIS data
    188                                  break;
    189                              }
    190                              break;
    191                          case 0x02:    // Radar??
    192                              switch (SeqCnt) {
    193                              case 20:
    194                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    195                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    196                                          TData.RS4.EEPROMPortpair[1] = 0;
    197                                      }
    198                                  }
    199                                  // Fall through and send the request
    200                              default:
    201                                  Uart_BuildReqRadarData(1);          // Radar data
    202                                  break;
    203                              case 0:
    204                                  Uart_BuildReqRadarInfo(1);          //Radar Information
    205                                  break;
    206                              }
    207                              break;
    208                          case 0x00:  // AN-SGCNV
    209                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    210                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
    211                                  Uart_BuildSndData(1);                       // add data to AD card package
    212                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    213                                  AskMD[1] = false;
    214                              } else {
    215                                  AskMD[1] = true;
    216                              }
    217                              if (SeqCnt == 0) {
    218                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
    219                              } else if (SeqCnt == 5) {
    220                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
    221                              } else if (SeqCnt == 10) {
    222                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    223                              } else if (SeqCnt == 15) {
    224                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
    225                              } else if (SeqCnt == 20) {
    226                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    227                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
    228                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
    229                                          TData.RS4.EEPROMADChannel[1] = 0;
    230                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    231                                              TData.RS4.EEPROMPortpair[1] = 0;
    232                                          }
    233                                      }
    234                                  } else if (AskMD[1] == true) {
    235                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    236                                  }
    237                              } else if (AskMD[1] == true) {
    238                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    239                              }
    240                              break;
    241                          }
    242                          Uart_BuildTail16552(1);
    243                      } else {
    244                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
    245                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
    246                                  TData.RS4.EEPROMPortpair[1] = 0;
    247                              }
    248                          }
    249                      }
    250                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
    251                      if (EventStatus & 0x02) {
    252                          if (PowerOnTimer >= POWER_ON_CNT) {
    253                              PowerOnTimer = 0;                              // and start over again
    254                          }
    255                      }
    256                  }
    257                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_3:
   \   00000144   9593               INC     R25
   \   00000146   3195               CPI     R25, 21
   \   00000148   F008               BRCS    ??ExtRS485Ctl_2
    258                      SeqCnt = 0;
   \   0000014A   E090               LDI     R25, 0
    259                  }
   \                     ??ExtRS485Ctl_2:
   \   0000014C   9380....           STS     PortPair, R24
   \   00000150   C01B               RJMP    ??ExtRS485Ctl_4
   \                     ??ExtRS485Ctl_5:
   \   00000152   01FD               MOVW    R31:R30, R27:R26
   \   00000154   8103               LDD     R16, Z+3
   \   00000156   9110....           LDS     R17, PortPair
   \   0000015A   1701               CP      R16, R17
   \   0000015C   F431               BRNE    ??ExtRS485Ctl_6
   \   0000015E   9503               INC     R16
   \   00000160   9300....           STS     (TData + 1531), R16
   \   00000164   3004               CPI     R16, 4
   \   00000166   F008               BRCS    ??ExtRS485Ctl_6
   \   00000168   8383               STD     Z+3, R24
   \                     ??ExtRS485Ctl_6:
   \   0000016A   EE28               LDI     R18, 232
   \   0000016C   E033               LDI     R19, 3
   \   0000016E   E001               LDI     R16, 1
   \   00000170   ........           CALL    OS_WaitEventTimed
   \   00000174   FB01               BST     R16, 1
   \   00000176   F41E               BRTC    ??ExtRS485Ctl_7
   \   00000178   14BC               CP      R11, R12
   \   0000017A   F008               BRCS    ??ExtRS485Ctl_7
   \   0000017C   24BB               CLR     R11
   \                     ??ExtRS485Ctl_7:
   \   0000017E   9100....           LDS     R16, PortPair
   \   00000182   9503               INC     R16
   \   00000184   9300....           STS     PortPair, R16
   \                     ??ExtRS485Ctl_4:
   \   00000188   9100....           LDS     R16, PortPair
   \   0000018C   3004               CPI     R16, 4
   \   0000018E   F6D0               BRCC    ??ExtRS485Ctl_3
   \   00000190   9100....           LDS     R16, (UART16552 + 24)
   \   00000194   3009               CPI     R16, 9
   \   00000196   F030               BRCS    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_9:
   \   00000198   91002208           LDS     R16, 8712
   \   0000019C   9100220D           LDS     R16, 8717
   \   000001A0   FD00               SBRC    R16, 0
   \   000001A2   CFFA               RJMP    ??ExtRS485Ctl_9
   \                     ??ExtRS485Ctl_8:
   \   000001A4   9100....           LDS     R16, (UART16552 + 50)
   \   000001A8   3009               CPI     R16, 9
   \   000001AA   F030               BRCS    ??ExtRS485Ctl_10
   \                     ??ExtRS485Ctl_11:
   \   000001AC   91002200           LDS     R16, 8704
   \   000001B0   91002205           LDS     R16, 8709
   \   000001B4   FD00               SBRC    R16, 0
   \   000001B6   CFFA               RJMP    ??ExtRS485Ctl_11
   \                     ??ExtRS485Ctl_10:
   \   000001B8   14BC               CP      R11, R12
   \   000001BA   F430               BRCC    ??ExtRS485Ctl_12
   \   000001BC   94B3               INC     R11
   \   000001BE   14BC               CP      R11, R12
   \   000001C0   F018               BRCS    ??ExtRS485Ctl_12
   \   000001C2   9100....           LDS     R16, TData
   \   000001C6   B908               OUT     0x08, R16
   \                     ??ExtRS485Ctl_12:
   \   000001C8   94F8               CLI
   \   000001CA   B10E               IN      R16, 0x0E
   \   000001CC   6F00               ORI     R16, 0xF0
   \   000001CE   B90E               OUT     0x0E, R16
   \   000001D0   9100....           LDS     R16, (OS_Counters + 1)
   \   000001D4   2300               TST     R16
   \   000001D6   F409               BRNE    ??ExtRS485Ctl_13
   \   000001D8   9478               SEI
   \                     ??ExtRS485Ctl_13:
   \   000001DA   94F8               CLI
   \   000001DC   9140....           LDS     R20, PortPair
   \   000001E0   E100               LDI     R16, 16
   \   000001E2   E010               LDI     R17, 0
   \   000001E4   ........           CALL    ?S_SHL_L02
   \   000001E8   7F00               ANDI    R16, 0xF0
   \   000001EA   9500               COM     R16
   \   000001EC   B11E               IN      R17, 0x0E
   \   000001EE   2310               AND     R17, R16
   \   000001F0   B91E               OUT     0x0E, R17
   \   000001F2   9100....           LDS     R16, (OS_Counters + 1)
   \   000001F6   2300               TST     R16
   \   000001F8   F409               BRNE    ??ExtRS485Ctl_14
   \   000001FA   9478               SEI
   \                     ??ExtRS485Ctl_14:
   \   000001FC   9100....           LDS     R16, TData
   \   00000200   E010               LDI     R17, 0
   \   00000202   9140....           LDS     R20, PortPair
   \   00000206   ........           CALL    ?SS_SHR_L02
   \   0000020A   7001               ANDI    R16, 0x01
   \   0000020C   F409               BRNE    $+2+2
   \   0000020E   C108               RJMP    ??ExtRS485Ctl_15
   \   00000210   E006               LDI     R16, 6
   \   00000212   9300....           STS     (UART16552 + 2), R16
   \   00000216   9380....           STS     (UART16552 + 3), R24
   \   0000021A   9100....           LDS     R16, (TData + 1)
   \   0000021E   E010               LDI     R17, 0
   \   00000220   9140....           LDS     R20, PortPair
   \   00000224   0F44               LSL     R20
   \   00000226   ........           CALL    ?SS_SHR_L02
   \   0000022A   7003               ANDI    R16, 0x03
   \   0000022C   F409               BRNE    $+2+2
   \   0000022E   C049               RJMP    ??ExtRS485Ctl_16
   \   00000230   950A               DEC     R16
   \   00000232   F019               BREQ    ??ExtRS485Ctl_17
   \   00000234   950A               DEC     R16
   \   00000236   F131               BREQ    ??ExtRS485Ctl_18
   \   00000238   C0F0               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_17:
   \   0000023A   2F09               MOV     R16, R25
   \   0000023C   2399               TST     R25
   \   0000023E   F019               BREQ    ??ExtRS485Ctl_20
   \   00000240   5104               SUBI    R16, 20
   \   00000242   F039               BREQ    ??ExtRS485Ctl_21
   \   00000244   C01C               RJMP    ??ExtRS485Ctl_22
   \                     ??ExtRS485Ctl_20:
   \   00000246   91E0....           LDS     R30, UART16552
   \   0000024A   91F0....           LDS     R31, (UART16552 + 1)
   \   0000024E   E604               LDI     R16, 100
   \   00000250   C036               RJMP    ??ExtRS485Ctl_23
   \                     ??ExtRS485Ctl_21:
   \   00000252   01F2               MOVW    R31:R30, R5:R4
   \   00000254   8100               LD      R16, Z
   \   00000256   2300               TST     R16
   \   00000258   F491               BRNE    ??ExtRS485Ctl_22
   \   0000025A   01FD               MOVW    R31:R30, R27:R26
   \   0000025C   8102               LDD     R16, Z+2
   \   0000025E   9110....           LDS     R17, PortPair
   \   00000262   1701               CP      R16, R17
   \   00000264   F461               BRNE    ??ExtRS485Ctl_22
   \   00000266   E713               LDI     R17, 115
   \   00000268   E000               LDI     R16, 0
   \   0000026A   ....               RCALL   Uart_BuildReqWISXData
   \   0000026C   9100....           LDS     R16, (TData + 1530)
   \   00000270   9503               INC     R16
   \   00000272   9300....           STS     (TData + 1530), R16
   \   00000276   3004               CPI     R16, 4
   \   00000278   F408               BRCC    $+2+2
   \   0000027A   C0CF               RJMP    ??ExtRS485Ctl_19
   \   0000027C   C0C7               RJMP    ??ExtRS485Ctl_24
   \                     ??ExtRS485Ctl_22:
   \   0000027E   E000               LDI     R16, 0
   \   00000280   ....               RCALL   Uart_BuildReqWISData
   \   00000282   C0CB               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_18:
   \   00000284   2F09               MOV     R16, R25
   \   00000286   2399               TST     R25
   \   00000288   F0A9               BREQ    ??ExtRS485Ctl_25
   \   0000028A   5104               SUBI    R16, 20
   \   0000028C   F481               BRNE    ??ExtRS485Ctl_26
   \   0000028E   01F2               MOVW    R31:R30, R5:R4
   \   00000290   8100               LD      R16, Z
   \   00000292   2300               TST     R16
   \   00000294   F461               BRNE    ??ExtRS485Ctl_26
   \   00000296   01FD               MOVW    R31:R30, R27:R26
   \   00000298   8102               LDD     R16, Z+2
   \   0000029A   9110....           LDS     R17, PortPair
   \   0000029E   1701               CP      R16, R17
   \   000002A0   F431               BRNE    ??ExtRS485Ctl_26
   \   000002A2   9503               INC     R16
   \   000002A4   9300....           STS     (TData + 1530), R16
   \   000002A8   3004               CPI     R16, 4
   \   000002AA   F008               BRCS    ??ExtRS485Ctl_26
   \   000002AC   8382               STD     Z+2, R24
   \                     ??ExtRS485Ctl_26:
   \   000002AE   E000               LDI     R16, 0
   \   000002B0   ....               RCALL   Uart_BuildReqRadarData
   \   000002B2   C0B3               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_25:
   \   000002B4   91E0....           LDS     R30, UART16552
   \   000002B8   91F0....           LDS     R31, (UART16552 + 1)
   \   000002BC   EA01               LDI     R16, 161
   \                     ??ExtRS485Ctl_23:
   \   000002BE   8306               STD     Z+6, R16
   \   000002C0   C069               RJMP    ??ExtRS485Ctl_27
   \                     ??ExtRS485Ctl_16:
   \   000002C2   01F4               MOVW    R31:R30, R9:R8
   \   000002C4   8100               LD      R16, Z
   \   000002C6   3001               CPI     R16, 1
   \   000002C8   F009               BREQ    $+2+2
   \   000002CA   C04C               RJMP    ??ExtRS485Ctl_28
   \   000002CC   8101               LDD     R16, Z+1
   \   000002CE   9110....           LDS     R17, PortPair
   \   000002D2   1701               CP      R16, R17
   \   000002D4   F009               BREQ    $+2+2
   \   000002D6   C046               RJMP    ??ExtRS485Ctl_28
   \   000002D8   E043               LDI     R20, 3
   \   000002DA   C012               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_30:
   \   000002DC   2FE4               MOV     R30, R20
   \   000002DE   E0F0               LDI     R31, 0
   \   000002E0   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   000002E2   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   000002E4   8100               LD      R16, Z
   \   000002E6   01F9               MOVW    R31:R30, R19:R18
   \   000002E8   8300               ST      Z, R16
   \   000002EA   9100....           LDS     R16, (UART16552 + 2)
   \   000002EE   9110....           LDS     R17, (UART16552 + 3)
   \   000002F2   5F0F               SUBI    R16, 255
   \   000002F4   4F1F               SBCI    R17, 255
   \   000002F6   9300....           STS     (UART16552 + 2), R16
   \   000002FA   9310....           STS     (UART16552 + 3), R17
   \   000002FE   9543               INC     R20
   \                     ??ExtRS485Ctl_29:
   \   00000300   9100....           LDS     R16, (UART16552 + 2)
   \   00000304   9110....           LDS     R17, (UART16552 + 3)
   \   00000308   9120....           LDS     R18, UART16552
   \   0000030C   9130....           LDS     R19, (UART16552 + 1)
   \   00000310   0F20               ADD     R18, R16
   \   00000312   1F31               ADC     R19, R17
   \   00000314   01F4               MOVW    R31:R30, R9:R8
   \   00000316   8102               LDD     R16, Z+2
   \   00000318   E010               LDI     R17, 0
   \   0000031A   5F0D               SUBI    R16, 253
   \   0000031C   4F1F               SBCI    R17, 255
   \   0000031E   1740               CP      R20, R16
   \   00000320   0781               CPC     R24, R17
   \   00000322   F2E4               BRLT    ??ExtRS485Ctl_30
   \   00000324   8380               ST      Z, R24
   \   00000326   01F9               MOVW    R31:R30, R19:R18
   \   00000328   82D0               ST      Z, R13
   \   0000032A   9100....           LDS     R16, (UART16552 + 2)
   \   0000032E   9110....           LDS     R17, (UART16552 + 3)
   \   00000332   5F0F               SUBI    R16, 255
   \   00000334   4F1F               SBCI    R17, 255
   \   00000336   9300....           STS     (UART16552 + 2), R16
   \   0000033A   9310....           STS     (UART16552 + 3), R17
   \   0000033E   91E0....           LDS     R30, UART16552
   \   00000342   91F0....           LDS     R31, (UART16552 + 1)
   \   00000346   0FE0               ADD     R30, R16
   \   00000348   1FF1               ADC     R31, R17
   \   0000034A   8380               ST      Z, R24
   \   0000034C   9100....           LDS     R16, (UART16552 + 2)
   \   00000350   9110....           LDS     R17, (UART16552 + 3)
   \   00000354   5F0F               SUBI    R16, 255
   \   00000356   4F1F               SBCI    R17, 255
   \   00000358   9300....           STS     (UART16552 + 2), R16
   \   0000035C   9310....           STS     (UART16552 + 3), R17
   \   00000360   E010               LDI     R17, 0
   \   00000362   C001               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_28:
   \   00000364   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_31:
   \   00000366   2399               TST     R25
   \   00000368   F419               BRNE    ??ExtRS485Ctl_32
   \   0000036A   E000               LDI     R16, 0
   \   0000036C   ....               RCALL   Uart_BuildReqCardStatus
   \   0000036E   C055               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_32:
   \   00000370   3095               CPI     R25, 5
   \   00000372   F419               BRNE    ??ExtRS485Ctl_33
   \   00000374   E000               LDI     R16, 0
   \   00000376   ....               RCALL   Uart_BuildReqR16552
   \   00000378   C050               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_33:
   \   0000037A   309A               CPI     R25, 10
   \   0000037C   F539               BRNE    ??ExtRS485Ctl_34
   \   0000037E   9100....           LDS     R16, (UART16552 + 2)
   \   00000382   9110....           LDS     R17, (UART16552 + 3)
   \   00000386   91E0....           LDS     R30, UART16552
   \   0000038A   91F0....           LDS     R31, (UART16552 + 1)
   \   0000038E   0FE0               ADD     R30, R16
   \   00000390   1FF1               ADC     R31, R17
   \   00000392   82D0               ST      Z, R13
   \                     ??ExtRS485Ctl_27:
   \   00000394   9100....           LDS     R16, (UART16552 + 2)
   \   00000398   9110....           LDS     R17, (UART16552 + 3)
   \   0000039C   5F0F               SUBI    R16, 255
   \   0000039E   4F1F               SBCI    R17, 255
   \   000003A0   9300....           STS     (UART16552 + 2), R16
   \   000003A4   9310....           STS     (UART16552 + 3), R17
   \   000003A8   91E0....           LDS     R30, UART16552
   \   000003AC   91F0....           LDS     R31, (UART16552 + 1)
   \   000003B0   0FE0               ADD     R30, R16
   \   000003B2   1FF1               ADC     R31, R17
   \   000003B4   8380               ST      Z, R24
   \   000003B6   9100....           LDS     R16, (UART16552 + 2)
   \   000003BA   9110....           LDS     R17, (UART16552 + 3)
   \   000003BE   5F0F               SUBI    R16, 255
   \   000003C0   4F1F               SBCI    R17, 255
   \   000003C2   9300....           STS     (UART16552 + 2), R16
   \   000003C6   9310....           STS     (UART16552 + 3), R17
   \   000003CA   C027               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_34:
   \   000003CC   309F               CPI     R25, 15
   \   000003CE   F419               BRNE    ??ExtRS485Ctl_35
   \   000003D0   E000               LDI     R16, 0
   \   000003D2   ....               RCALL   Uart_BuildReqC16552
   \   000003D4   C022               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_35:
   \   000003D6   3194               CPI     R25, 20
   \   000003D8   F4E1               BRNE    ??ExtRS485Ctl_36
   \   000003DA   01F2               MOVW    R31:R30, R5:R4
   \   000003DC   8100               LD      R16, Z
   \   000003DE   2300               TST     R16
   \   000003E0   F4C1               BRNE    ??ExtRS485Ctl_36
   \   000003E2   01FD               MOVW    R31:R30, R27:R26
   \   000003E4   8102               LDD     R16, Z+2
   \   000003E6   9120....           LDS     R18, PortPair
   \   000003EA   1702               CP      R16, R18
   \   000003EC   F491               BRNE    ??ExtRS485Ctl_36
   \   000003EE   E000               LDI     R16, 0
   \   000003F0   ....               RCALL   Uart_BuildReqEEPROMData
   \   000003F2   910C               LD      R16, X
   \   000003F4   5F0E               SUBI    R16, 254
   \   000003F6   930C               ST      X, R16
   \   000003F8   300F               CPI     R16, 15
   \   000003FA   F078               BRCS    ??ExtRS485Ctl_19
   \   000003FC   938C               ST      X, R24
   \   000003FE   9100....           LDS     R16, (TData + 1530)
   \   00000402   9503               INC     R16
   \   00000404   9300....           STS     (TData + 1530), R16
   \   00000408   3004               CPI     R16, 4
   \   0000040A   F038               BRCS    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_24:
   \   0000040C   01FD               MOVW    R31:R30, R27:R26
   \   0000040E   8382               STD     Z+2, R24
   \   00000410   C004               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_36:
   \   00000412   2311               TST     R17
   \   00000414   F011               BREQ    ??ExtRS485Ctl_19
   \   00000416   E000               LDI     R16, 0
   \   00000418   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_19:
   \   0000041A   E000               LDI     R16, 0
   \   0000041C   ....               RCALL   Uart_BuildTail16552
   \   0000041E   C00C               RJMP    ??ExtRS485Ctl_37
   \                     ??ExtRS485Ctl_15:
   \   00000420   01FD               MOVW    R31:R30, R27:R26
   \   00000422   8102               LDD     R16, Z+2
   \   00000424   9110....           LDS     R17, PortPair
   \   00000428   1701               CP      R16, R17
   \   0000042A   F431               BRNE    ??ExtRS485Ctl_37
   \   0000042C   9503               INC     R16
   \   0000042E   9300....           STS     (TData + 1530), R16
   \   00000432   3004               CPI     R16, 4
   \   00000434   F008               BRCS    ??ExtRS485Ctl_37
   \   00000436   8382               STD     Z+2, R24
   \                     ??ExtRS485Ctl_37:
   \   00000438   9100....           LDS     R16, TData
   \   0000043C   9140....           LDS     R20, PortPair
   \   00000440   5F4C               SUBI    R20, 252
   \   00000442   E010               LDI     R17, 0
   \   00000444   ........           CALL    ?SS_SHR_L02
   \   00000448   7001               ANDI    R16, 0x01
   \   0000044A   F409               BRNE    $+2+2
   \   0000044C   CE82               RJMP    ??ExtRS485Ctl_5
   \   0000044E   E006               LDI     R16, 6
   \   00000450   9300....           STS     (UART16552 + 28), R16
   \   00000454   9380....           STS     (UART16552 + 29), R24
   \   00000458   9100....           LDS     R16, (TData + 2)
   \   0000045C   E010               LDI     R17, 0
   \   0000045E   9140....           LDS     R20, PortPair
   \   00000462   0F44               LSL     R20
   \   00000464   ........           CALL    ?SS_SHR_L02
   \   00000468   7003               ANDI    R16, 0x03
   \   0000046A   F409               BRNE    $+2+2
   \   0000046C   C07B               RJMP    ??ExtRS485Ctl_38
   \   0000046E   950A               DEC     R16
   \   00000470   F021               BREQ    ??ExtRS485Ctl_39
   \   00000472   950A               DEC     R16
   \   00000474   F409               BRNE    $+2+2
   \   00000476   C057               RJMP    ??ExtRS485Ctl_40
   \   00000478   C128               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_39:
   \   0000047A   2F09               MOV     R16, R25
   \   0000047C   2399               TST     R25
   \   0000047E   F019               BREQ    ??ExtRS485Ctl_42
   \   00000480   5104               SUBI    R16, 20
   \   00000482   F039               BREQ    ??ExtRS485Ctl_43
   \   00000484   C04D               RJMP    ??ExtRS485Ctl_44
   \                     ??ExtRS485Ctl_42:
   \   00000486   91E0....           LDS     R30, (UART16552 + 26)
   \   0000048A   91F0....           LDS     R31, (UART16552 + 27)
   \   0000048E   E604               LDI     R16, 100
   \   00000490   C067               RJMP    ??ExtRS485Ctl_45
   \                     ??ExtRS485Ctl_43:
   \   00000492   01F2               MOVW    R31:R30, R5:R4
   \   00000494   A902               LDD     R16, Z+50
   \   00000496   2300               TST     R16
   \   00000498   F009               BREQ    $+2+2
   \   0000049A   C042               RJMP    ??ExtRS485Ctl_44
   \   0000049C   01FD               MOVW    R31:R30, R27:R26
   \   0000049E   8103               LDD     R16, Z+3
   \   000004A0   9110....           LDS     R17, PortPair
   \   000004A4   1701               CP      R16, R17
   \   000004A6   F5E1               BRNE    ??ExtRS485Ctl_44
   \   000004A8   91E0....           LDS     R30, (UART16552 + 26)
   \   000004AC   91F0....           LDS     R31, (UART16552 + 27)
   \   000004B0   E606               LDI     R16, 102
   \   000004B2   8306               STD     Z+6, R16
   \   000004B4   9100....           LDS     R16, (UART16552 + 28)
   \   000004B8   9110....           LDS     R17, (UART16552 + 29)
   \   000004BC   5F0F               SUBI    R16, 255
   \   000004BE   4F1F               SBCI    R17, 255
   \   000004C0   9300....           STS     (UART16552 + 28), R16
   \   000004C4   9310....           STS     (UART16552 + 29), R17
   \   000004C8   91E0....           LDS     R30, (UART16552 + 26)
   \   000004CC   91F0....           LDS     R31, (UART16552 + 27)
   \   000004D0   0FE0               ADD     R30, R16
   \   000004D2   1FF1               ADC     R31, R17
   \   000004D4   82F0               ST      Z, R15
   \   000004D6   9100....           LDS     R16, (UART16552 + 28)
   \   000004DA   9110....           LDS     R17, (UART16552 + 29)
   \   000004DE   5F0F               SUBI    R16, 255
   \   000004E0   4F1F               SBCI    R17, 255
   \   000004E2   9300....           STS     (UART16552 + 28), R16
   \   000004E6   9310....           STS     (UART16552 + 29), R17
   \   000004EA   91E0....           LDS     R30, (UART16552 + 26)
   \   000004EE   91F0....           LDS     R31, (UART16552 + 27)
   \   000004F2   0FE0               ADD     R30, R16
   \   000004F4   1FF1               ADC     R31, R17
   \   000004F6   E703               LDI     R16, 115
   \   000004F8   8300               ST      Z, R16
   \   000004FA   9100....           LDS     R16, (UART16552 + 28)
   \   000004FE   9110....           LDS     R17, (UART16552 + 29)
   \   00000502   5F0F               SUBI    R16, 255
   \   00000504   4F1F               SBCI    R17, 255
   \   00000506   9300....           STS     (UART16552 + 28), R16
   \   0000050A   9310....           STS     (UART16552 + 29), R17
   \   0000050E   9100....           LDS     R16, (TData + 1531)
   \   00000512   9503               INC     R16
   \   00000514   9300....           STS     (TData + 1531), R16
   \   00000518   3004               CPI     R16, 4
   \   0000051A   F408               BRCC    $+2+2
   \   0000051C   C0D6               RJMP    ??ExtRS485Ctl_41
   \   0000051E   C0CE               RJMP    ??ExtRS485Ctl_46
   \                     ??ExtRS485Ctl_44:
   \   00000520   E001               LDI     R16, 1
   \   00000522   ....               RCALL   Uart_BuildReqWISData
   \   00000524   C0D2               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_40:
   \   00000526   2F09               MOV     R16, R25
   \   00000528   2399               TST     R25
   \   0000052A   F0A9               BREQ    ??ExtRS485Ctl_47
   \   0000052C   5104               SUBI    R16, 20
   \   0000052E   F481               BRNE    ??ExtRS485Ctl_48
   \   00000530   01F2               MOVW    R31:R30, R5:R4
   \   00000532   A902               LDD     R16, Z+50
   \   00000534   2300               TST     R16
   \   00000536   F461               BRNE    ??ExtRS485Ctl_48
   \   00000538   01FD               MOVW    R31:R30, R27:R26
   \   0000053A   8103               LDD     R16, Z+3
   \   0000053C   9110....           LDS     R17, PortPair
   \   00000540   1701               CP      R16, R17
   \   00000542   F431               BRNE    ??ExtRS485Ctl_48
   \   00000544   9503               INC     R16
   \   00000546   9300....           STS     (TData + 1531), R16
   \   0000054A   3004               CPI     R16, 4
   \   0000054C   F008               BRCS    ??ExtRS485Ctl_48
   \   0000054E   8383               STD     Z+3, R24
   \                     ??ExtRS485Ctl_48:
   \   00000550   E001               LDI     R16, 1
   \   00000552   ....               RCALL   Uart_BuildReqRadarData
   \   00000554   C0BA               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_47:
   \   00000556   91E0....           LDS     R30, (UART16552 + 26)
   \   0000055A   91F0....           LDS     R31, (UART16552 + 27)
   \   0000055E   EA01               LDI     R16, 161
   \                     ??ExtRS485Ctl_45:
   \   00000560   8306               STD     Z+6, R16
   \   00000562   C06D               RJMP    ??ExtRS485Ctl_49
   \                     ??ExtRS485Ctl_38:
   \   00000564   01F3               MOVW    R31:R30, R7:R6
   \   00000566   8100               LD      R16, Z
   \   00000568   3001               CPI     R16, 1
   \   0000056A   F009               BREQ    $+2+2
   \   0000056C   C050               RJMP    ??ExtRS485Ctl_50
   \   0000056E   8121               LDD     R18, Z+1
   \   00000570   9100....           LDS     R16, PortPair
   \   00000574   E010               LDI     R17, 0
   \   00000576   5F0C               SUBI    R16, 252
   \   00000578   4F1F               SBCI    R17, 255
   \   0000057A   1720               CP      R18, R16
   \   0000057C   0781               CPC     R24, R17
   \   0000057E   F009               BREQ    $+2+2
   \   00000580   C046               RJMP    ??ExtRS485Ctl_50
   \   00000582   E043               LDI     R20, 3
   \   00000584   C012               RJMP    ??ExtRS485Ctl_51
   \                     ??ExtRS485Ctl_52:
   \   00000586   2FE4               MOV     R30, R20
   \   00000588   E0F0               LDI     R31, 0
   \   0000058A   ....               SUBI    R30, LOW((-(TData + 1348) & 0xFFFF))
   \   0000058C   ....               SBCI    R31, HIGH((-(TData + 1348) & 0xFFFF))
   \   0000058E   8100               LD      R16, Z
   \   00000590   01F9               MOVW    R31:R30, R19:R18
   \   00000592   8300               ST      Z, R16
   \   00000594   9100....           LDS     R16, (UART16552 + 28)
   \   00000598   9110....           LDS     R17, (UART16552 + 29)
   \   0000059C   5F0F               SUBI    R16, 255
   \   0000059E   4F1F               SBCI    R17, 255
   \   000005A0   9300....           STS     (UART16552 + 28), R16
   \   000005A4   9310....           STS     (UART16552 + 29), R17
   \   000005A8   9543               INC     R20
   \                     ??ExtRS485Ctl_51:
   \   000005AA   9120....           LDS     R18, (UART16552 + 26)
   \   000005AE   9130....           LDS     R19, (UART16552 + 27)
   \   000005B2   9100....           LDS     R16, (UART16552 + 28)
   \   000005B6   9110....           LDS     R17, (UART16552 + 29)
   \   000005BA   0F20               ADD     R18, R16
   \   000005BC   1F31               ADC     R19, R17
   \   000005BE   01F3               MOVW    R31:R30, R7:R6
   \   000005C0   8102               LDD     R16, Z+2
   \   000005C2   E010               LDI     R17, 0
   \   000005C4   5F0D               SUBI    R16, 253
   \   000005C6   4F1F               SBCI    R17, 255
   \   000005C8   1740               CP      R20, R16
   \   000005CA   0781               CPC     R24, R17
   \   000005CC   F2E4               BRLT    ??ExtRS485Ctl_52
   \   000005CE   8380               ST      Z, R24
   \   000005D0   01F9               MOVW    R31:R30, R19:R18
   \   000005D2   82D0               ST      Z, R13
   \   000005D4   9100....           LDS     R16, (UART16552 + 28)
   \   000005D8   9110....           LDS     R17, (UART16552 + 29)
   \   000005DC   5F0F               SUBI    R16, 255
   \   000005DE   4F1F               SBCI    R17, 255
   \   000005E0   9300....           STS     (UART16552 + 28), R16
   \   000005E4   9310....           STS     (UART16552 + 29), R17
   \   000005E8   91E0....           LDS     R30, (UART16552 + 26)
   \   000005EC   91F0....           LDS     R31, (UART16552 + 27)
   \   000005F0   0FE0               ADD     R30, R16
   \   000005F2   1FF1               ADC     R31, R17
   \   000005F4   8380               ST      Z, R24
   \   000005F6   9100....           LDS     R16, (UART16552 + 28)
   \   000005FA   9110....           LDS     R17, (UART16552 + 29)
   \   000005FE   5F0F               SUBI    R16, 255
   \   00000600   4F1F               SBCI    R17, 255
   \   00000602   9300....           STS     (UART16552 + 28), R16
   \   00000606   9310....           STS     (UART16552 + 29), R17
   \   0000060A   E010               LDI     R17, 0
   \   0000060C   C001               RJMP    ??ExtRS485Ctl_53
   \                     ??ExtRS485Ctl_50:
   \   0000060E   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_53:
   \   00000610   2399               TST     R25
   \   00000612   F419               BRNE    ??ExtRS485Ctl_54
   \   00000614   E001               LDI     R16, 1
   \   00000616   ....               RCALL   Uart_BuildReqCardStatus
   \   00000618   C058               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_54:
   \   0000061A   3095               CPI     R25, 5
   \   0000061C   F419               BRNE    ??ExtRS485Ctl_55
   \   0000061E   E001               LDI     R16, 1
   \   00000620   ....               RCALL   Uart_BuildReqR16552
   \   00000622   C053               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_55:
   \   00000624   309A               CPI     R25, 10
   \   00000626   F539               BRNE    ??ExtRS485Ctl_56
   \   00000628   91E0....           LDS     R30, (UART16552 + 26)
   \   0000062C   91F0....           LDS     R31, (UART16552 + 27)
   \   00000630   9100....           LDS     R16, (UART16552 + 28)
   \   00000634   9110....           LDS     R17, (UART16552 + 29)
   \   00000638   0FE0               ADD     R30, R16
   \   0000063A   1FF1               ADC     R31, R17
   \   0000063C   82D0               ST      Z, R13
   \                     ??ExtRS485Ctl_49:
   \   0000063E   9100....           LDS     R16, (UART16552 + 28)
   \   00000642   9110....           LDS     R17, (UART16552 + 29)
   \   00000646   5F0F               SUBI    R16, 255
   \   00000648   4F1F               SBCI    R17, 255
   \   0000064A   9300....           STS     (UART16552 + 28), R16
   \   0000064E   9310....           STS     (UART16552 + 29), R17
   \   00000652   91E0....           LDS     R30, (UART16552 + 26)
   \   00000656   91F0....           LDS     R31, (UART16552 + 27)
   \   0000065A   0FE0               ADD     R30, R16
   \   0000065C   1FF1               ADC     R31, R17
   \   0000065E   8380               ST      Z, R24
   \   00000660   9100....           LDS     R16, (UART16552 + 28)
   \   00000664   9110....           LDS     R17, (UART16552 + 29)
   \   00000668   5F0F               SUBI    R16, 255
   \   0000066A   4F1F               SBCI    R17, 255
   \   0000066C   9300....           STS     (UART16552 + 28), R16
   \   00000670   9310....           STS     (UART16552 + 29), R17
   \   00000674   C02A               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_56:
   \   00000676   309F               CPI     R25, 15
   \   00000678   F419               BRNE    ??ExtRS485Ctl_57
   \   0000067A   E001               LDI     R16, 1
   \   0000067C   ....               RCALL   Uart_BuildReqC16552
   \   0000067E   C025               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_57:
   \   00000680   3194               CPI     R25, 20
   \   00000682   F4F9               BRNE    ??ExtRS485Ctl_58
   \   00000684   01F2               MOVW    R31:R30, R5:R4
   \   00000686   A902               LDD     R16, Z+50
   \   00000688   2300               TST     R16
   \   0000068A   F4D9               BRNE    ??ExtRS485Ctl_58
   \   0000068C   01FD               MOVW    R31:R30, R27:R26
   \   0000068E   8103               LDD     R16, Z+3
   \   00000690   9120....           LDS     R18, PortPair
   \   00000694   1702               CP      R16, R18
   \   00000696   F4A9               BRNE    ??ExtRS485Ctl_58
   \   00000698   E001               LDI     R16, 1
   \   0000069A   ....               RCALL   Uart_BuildReqEEPROMData
   \   0000069C   9100....           LDS     R16, (TData + 1529)
   \   000006A0   5F0E               SUBI    R16, 254
   \   000006A2   9300....           STS     (TData + 1529), R16
   \   000006A6   300F               CPI     R16, 15
   \   000006A8   F080               BRCS    ??ExtRS485Ctl_41
   \   000006AA   01FD               MOVW    R31:R30, R27:R26
   \   000006AC   8381               STD     Z+1, R24
   \   000006AE   9100....           LDS     R16, (TData + 1531)
   \   000006B2   9503               INC     R16
   \   000006B4   9300....           STS     (TData + 1531), R16
   \   000006B8   3004               CPI     R16, 4
   \   000006BA   F038               BRCS    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_46:
   \   000006BC   01FD               MOVW    R31:R30, R27:R26
   \   000006BE   8383               STD     Z+3, R24
   \   000006C0   C004               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_58:
   \   000006C2   2311               TST     R17
   \   000006C4   F011               BREQ    ??ExtRS485Ctl_41
   \   000006C6   E001               LDI     R16, 1
   \   000006C8   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_41:
   \   000006CA   E001               LDI     R16, 1
   \   000006CC   ....               RCALL   Uart_BuildTail16552
   \   000006CE   CD4D               RJMP    ??ExtRS485Ctl_6
   \   000006D0                      REQUIRE _A_PORTC
   \   000006D0                      REQUIRE _A_PORTE
    260              }
    261          }
    262          
    263          
    264          /*************************************************************************
    265          *   (This is a task)
    266          *  Usart handler UART receive data
    267          *
    268          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    269          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   93AA               ST      -Y, R26
   \   00000002   938A               ST      -Y, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    270          
    271              char portresp;
    272          
    273              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   00000004   E900               LDI     R16, 144
   \   00000006   E11A               LDI     R17, 26
   \   00000008   ........           CALL    OS_Delay
   \   0000000C   E0A0               LDI     R26, 0
   \   0000000E   C05D               RJMP    ??ExtRS485Rec_0
    274          
    275              while (1) {
    276                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
    277                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
    278                  if (portresp & 0x01) {                  // answer on ch 0
    279                      Usart16552CheckPackage(0);         // handle incomming package
    280                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
    281                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
    282                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
    283                  } else {
    284                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
    285                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
    286                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
    287                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
    288                      }
    289                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
    290                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
    291                              ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    292                              OS_SignalEvent(2, &TCB_RS485Ctl);
    293                          }
    294                      }
    295                  }
    296                  if (portresp & 0x02) {                  // answer on ch 1
    297                      Usart16552CheckPackage(1);         // handle incomming package
    298                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
    299                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
    300                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
    301                  } else {
    302                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   00000010   9100....           LDS     R16, (UART16552 + 50)
   \   00000014   9503               INC     R16
   \   00000016   9300....           STS     (UART16552 + 50), R16
    303                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   0000001A   9100....           LDS     R16, PortPair
   \   0000001E   E014               LDI     R17, 4
   \   00000020   9F01               MUL     R16, R17
   \   00000022   01F0               MOVW    R31:R30, R1:R0
   \   00000024   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000028   8D05               LDD     R16, Z+29
   \   0000002A   8D16               LDD     R17, Z+30
   \   0000002C   5F0F               SUBI    R16, 255
   \   0000002E   4F1F               SBCI    R17, 255
   \   00000030   8F05               STD     Z+29, R16
   \   00000032   8F16               STD     Z+30, R17
    304                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   00000034   9100....           LDS     R16, PortPair
   \   00000038   E014               LDI     R17, 4
   \   0000003A   9F01               MUL     R16, R17
   \   0000003C   ....               LDI     R30, LOW(TData)
   \   0000003E   ....               LDI     R31, (TData) >> 8
   \   00000040   0DE0               ADD     R30, R0
   \   00000042   1DF1               ADC     R31, R1
   \   00000044   8D03               LDD     R16, Z+27
   \   00000046   8D14               LDD     R17, Z+28
   \   00000048   0198               MOVW    R19:R18, R17:R16
   \   0000004A   5F2F               SUBI    R18, 255
   \   0000004C   4F3F               SBCI    R19, 255
   \   0000004E   8F23               STD     Z+27, R18
   \   00000050   8F34               STD     Z+28, R19
   \   00000052   3006               CPI     R16, 6
   \   00000054   4010               SBCI    R17, 0
   \   00000056   F048               BRCS    ??ExtRS485Rec_2
    305                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   00000058   9100....           LDS     R16, PortPair
   \   0000005C   E0F0               LDI     R31, 0
   \   0000005E   2FE0               MOV     R30, R16
   \   00000060   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000064   8107               LDD     R16, Z+7
   \   00000066   6001               ORI     R16, 0x01
   \   00000068   8307               STD     Z+7, R16
    306                      }
    307                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_2:
   \   0000006A   9100....           LDS     R16, TData
   \   0000006E   E010               LDI     R17, 0
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   5F4C               SUBI    R20, 252
   \   00000076   ........           CALL    ?SS_SHR_L02
   \   0000007A   7001               ANDI    R16, 0x01
   \   0000007C   F109               BREQ    ??ExtRS485Rec_3
    308                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   0000007E   9100....           LDS     R16, PortPair
   \   00000082   E014               LDI     R17, 4
   \   00000084   9F01               MUL     R16, R17
   \   00000086   01F0               MOVW    R31:R30, R1:R0
   \   00000088   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000008A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000008C   8D03               LDD     R16, Z+27
   \   0000008E   7007               ANDI    R16, 0x07
   \   00000090   3004               CPI     R16, 4
   \   00000092   F4B1               BRNE    ??ExtRS485Rec_3
    309                              ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
   \   00000094   94F8               CLI
   \   00000096   9140....           LDS     R20, PortPair
   \   0000009A   5F4C               SUBI    R20, 252
   \   0000009C   E001               LDI     R16, 1
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   ........           CALL    ?S_SHL_L02
   \   000000A4   9500               COM     R16
   \   000000A6   B118               IN      R17, 0x08
   \   000000A8   2310               AND     R17, R16
   \   000000AA   B918               OUT     0x08, R17
   \   000000AC   9100....           LDS     R16, (OS_Counters + 1)
   \   000000B0   2300               TST     R16
   \   000000B2   F409               BRNE    ??ExtRS485Rec_4
   \   000000B4   9478               SEI
    310                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_4:
   \   000000B6   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000B8   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000BA   E002               LDI     R16, 2
   \   000000BC   ........           CALL    OS_SignalEvent
    311                          }
    312                      }
    313                  }
    314                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_3:
   \   000000C0   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000C2   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_0:
   \   000000CA   EF03               LDI     R16, 243
   \   000000CC   E011               LDI     R17, 1
   \   000000CE   ........           CALL    OS_Delay
   \   000000D2   E021               LDI     R18, 1
   \   000000D4   E030               LDI     R19, 0
   \   000000D6   E003               LDI     R16, 3
   \   000000D8   ........           CALL    OS_WaitEventTimed
   \   000000DC   2F80               MOV     R24, R16
   \   000000DE   FB00               BST     R16, 0
   \   000000E0   F4BE               BRTC    ??ExtRS485Rec_5
   \   000000E2   E000               LDI     R16, 0
   \   000000E4   ....               RCALL   Usart16552CheckPackage
   \   000000E6   9100....           LDS     R16, PortPair
   \   000000EA   E014               LDI     R17, 4
   \   000000EC   9F01               MUL     R16, R17
   \   000000EE   01F0               MOVW    R31:R30, R1:R0
   \   000000F0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000F2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000F4   87A3               STD     Z+11, R26
   \   000000F6   87A4               STD     Z+12, R26
   \   000000F8   9100....           LDS     R16, PortPair
   \   000000FC   E0F0               LDI     R31, 0
   \   000000FE   2FE0               MOV     R30, R16
   \   00000100   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000102   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000104   8103               LDD     R16, Z+3
   \   00000106   7F0E               ANDI    R16, 0xFE
   \   00000108   8303               STD     Z+3, R16
   \   0000010A   93A0....           STS     (UART16552 + 24), R26
   \   0000010E   C056               RJMP    ??ExtRS485Rec_6
   \                     ??ExtRS485Rec_5:
   \   00000110   9100....           LDS     R16, (UART16552 + 24)
   \   00000114   9503               INC     R16
   \   00000116   9300....           STS     (UART16552 + 24), R16
   \   0000011A   9100....           LDS     R16, PortPair
   \   0000011E   E014               LDI     R17, 4
   \   00000120   9F01               MUL     R16, R17
   \   00000122   01F0               MOVW    R31:R30, R1:R0
   \   00000124   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000126   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000128   8505               LDD     R16, Z+13
   \   0000012A   8516               LDD     R17, Z+14
   \   0000012C   5F0F               SUBI    R16, 255
   \   0000012E   4F1F               SBCI    R17, 255
   \   00000130   8705               STD     Z+13, R16
   \   00000132   8716               STD     Z+14, R17
   \   00000134   9100....           LDS     R16, PortPair
   \   00000138   E014               LDI     R17, 4
   \   0000013A   9F01               MUL     R16, R17
   \   0000013C   ....               LDI     R30, LOW(TData)
   \   0000013E   ....               LDI     R31, (TData) >> 8
   \   00000140   0DE0               ADD     R30, R0
   \   00000142   1DF1               ADC     R31, R1
   \   00000144   8503               LDD     R16, Z+11
   \   00000146   8514               LDD     R17, Z+12
   \   00000148   0198               MOVW    R19:R18, R17:R16
   \   0000014A   5F2F               SUBI    R18, 255
   \   0000014C   4F3F               SBCI    R19, 255
   \   0000014E   8723               STD     Z+11, R18
   \   00000150   8734               STD     Z+12, R19
   \   00000152   3006               CPI     R16, 6
   \   00000154   4010               SBCI    R17, 0
   \   00000156   F048               BRCS    ??ExtRS485Rec_7
   \   00000158   9100....           LDS     R16, PortPair
   \   0000015C   E0F0               LDI     R31, 0
   \   0000015E   2FE0               MOV     R30, R16
   \   00000160   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000164   8103               LDD     R16, Z+3
   \   00000166   6001               ORI     R16, 0x01
   \   00000168   8303               STD     Z+3, R16
   \                     ??ExtRS485Rec_7:
   \   0000016A   9100....           LDS     R16, TData
   \   0000016E   E010               LDI     R17, 0
   \   00000170   9140....           LDS     R20, PortPair
   \   00000174   ........           CALL    ?SS_SHR_L02
   \   00000178   7001               ANDI    R16, 0x01
   \   0000017A   F101               BREQ    ??ExtRS485Rec_6
   \   0000017C   9100....           LDS     R16, PortPair
   \   00000180   E014               LDI     R17, 4
   \   00000182   9F01               MUL     R16, R17
   \   00000184   01F0               MOVW    R31:R30, R1:R0
   \   00000186   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000188   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000018A   8503               LDD     R16, Z+11
   \   0000018C   7007               ANDI    R16, 0x07
   \   0000018E   3004               CPI     R16, 4
   \   00000190   F4A9               BRNE    ??ExtRS485Rec_6
   \   00000192   94F8               CLI
   \   00000194   9140....           LDS     R20, PortPair
   \   00000198   E001               LDI     R16, 1
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   ........           CALL    ?S_SHL_L02
   \   000001A0   9500               COM     R16
   \   000001A2   B118               IN      R17, 0x08
   \   000001A4   2310               AND     R17, R16
   \   000001A6   B918               OUT     0x08, R17
   \   000001A8   9100....           LDS     R16, (OS_Counters + 1)
   \   000001AC   2300               TST     R16
   \   000001AE   F409               BRNE    ??ExtRS485Rec_8
   \   000001B0   9478               SEI
   \                     ??ExtRS485Rec_8:
   \   000001B2   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000001B4   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000001B6   E002               LDI     R16, 2
   \   000001B8   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_6:
   \   000001BC   FB81               BST     R24, 1
   \   000001BE   F00E               BRTS    $+2+2
   \   000001C0   CF27               RJMP    ??ExtRS485Rec_1
   \   000001C2   E001               LDI     R16, 1
   \   000001C4   ....               RCALL   Usart16552CheckPackage
   \   000001C6   9100....           LDS     R16, PortPair
   \   000001CA   E014               LDI     R17, 4
   \   000001CC   9F01               MUL     R16, R17
   \   000001CE   01F0               MOVW    R31:R30, R1:R0
   \   000001D0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001D4   8FA3               STD     Z+27, R26
   \   000001D6   8FA4               STD     Z+28, R26
   \   000001D8   9100....           LDS     R16, PortPair
   \   000001DC   E0F0               LDI     R31, 0
   \   000001DE   2FE0               MOV     R30, R16
   \   000001E0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001E2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001E4   8107               LDD     R16, Z+7
   \   000001E6   7F0E               ANDI    R16, 0xFE
   \   000001E8   8307               STD     Z+7, R16
   \   000001EA   93A0....           STS     (UART16552 + 50), R26
   \   000001EE   CF68               RJMP    ??ExtRS485Rec_3
   \   000001F0                      REQUIRE _A_PORTC
    315              }
    316          }
    317          
    318          /*************************************************************************
    319          *
    320          *  Set ports on or off
    321          *
    322          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    323          void SetRS4Port(void) {
   \                     SetRS4Port:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    324          
    325              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   B908               OUT     0x08, R16
    326          
    327          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    328          
    329          /*************************************************************************
    330          *
    331          *  Check the incoming packages from AN_SGCNV / WIS
    332          *
    333          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    334          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000E   2E50               MOV     R5, R16
    335          
    336              unsigned short pointer;
    337              char count_out, more;
    338          
    339              count_out = MAX_PROT_CMD;                  // max command
   \   00000010   2466               CLR     R6
   \   00000012   946A               DEC     R6
    340              more = true;
   \   00000014   2444               CLR     R4
   \   00000016   9443               INC     R4
    341              pointer = 4;
   \   00000018   E084               LDI     R24, 4
   \   0000001A   E090               LDI     R25, 0
   \   0000001C   E10A               LDI     R16, 26
   \   0000001E   9E50               MUL     R5, R16
   \   00000020   ....               LDI     R26, LOW(UART16552)
   \   00000022   ....               LDI     R27, (UART16552) >> 8
   \   00000024   0DA0               ADD     R26, R0
   \   00000026   1DB1               ADC     R27, R1
    342              do {
    343                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   00000028   019C               MOVW    R19:R18, R25:R24
   \   0000002A   2D05               MOV     R16, R5
   \   0000002C   ....               RCALL   CheckActionUart16552
   \   0000002E   2300               TST     R16
   \   00000030   F409               BRNE    ??Usart16552CheckPackage_1
    344                      more = false;                          // terminate while loop
   \   00000032   2444               CLR     R4
    345                  }
    346                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8502               LDD     R16, Z+10
   \   00000038   8513               LDD     R17, Z+11
   \   0000003A   0F08               ADD     R16, R24
   \   0000003C   1F19               ADC     R17, R25
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   81E1               LDD     R30, Z+1
   \   00000042   E0F0               LDI     R31, 0
   \   00000044   9632               ADIW    R31:R30, 2
   \   00000046   0F8E               ADD     R24, R30
   \   00000048   1F9F               ADC     R25, R31
    347                  if (!--count_out) {
   \   0000004A   946A               DEC     R6
   \   0000004C   F051               BREQ    ??Usart16552CheckPackage_2
    348                      more = false;
    349                  }
    350              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \   0000004E   2044               TST     R4
   \   00000050   F041               BREQ    ??Usart16552CheckPackage_2
   \   00000052   01FD               MOVW    R31:R30, R27:R26
   \   00000054   8906               LDD     R16, Z+22
   \   00000056   8917               LDD     R17, Z+23
   \   00000058   5003               SUBI    R16, 3
   \   0000005A   4010               SBCI    R17, 0
   \   0000005C   1780               CP      R24, R16
   \   0000005E   0791               CPC     R25, R17
   \   00000060   F318               BRCS    ??Usart16552CheckPackage_0
    351              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_2:
   \   00000062   2D05               MOV     R16, R5
   \   00000064   ....               RCALL   GoToSyncUART16552
    352          }
   \   00000066                      REQUIRE ?Subroutine2
   \   00000066                      ;               // Fall through to label ?Subroutine2

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9508               RET
    353          
    354          /*************************************************************************
    355          *
    356          *  Check action on received data from AN_SGCNV
    357          *
    358          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    359          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   938A               ST      -Y, R24
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    360          
    361              char retval = true;
   \   00000002   E081               LDI     R24, 1
    362          
    363              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8542               LDD     R20, Z+10
   \   00000010   8553               LDD     R21, Z+11
   \   00000012   0F42               ADD     R20, R18
   \   00000014   1F53               ADC     R21, R19
   \   00000016   01FA               MOVW    R31:R30, R21:R20
   \   00000018   8110               LD      R17, Z
   \   0000001A   5810               SUBI    R17, 128
   \   0000001C   F409               BRNE    $+2+2
   \   0000001E   C040               RJMP    ??CheckActionUart16552_0
   \   00000020   5314               SUBI    R17, 52
   \   00000022   F409               BRNE    $+2+2
   \   00000024   C045               RJMP    ??CheckActionUart16552_1
   \   00000026   951A               DEC     R17
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C046               RJMP    ??CheckActionUart16552_2
   \   0000002C   541B               SUBI    R17, 75
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C047               RJMP    ??CheckActionUart16552_3
   \   00000032   951A               DEC     R17
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C044               RJMP    ??CheckActionUart16552_3
   \   00000038   511D               SUBI    R17, 29
   \   0000003A   F088               BRCS    ??CheckActionUart16552_4
   \   0000003C   5013               SUBI    R17, 3
   \   0000003E   F080               BRCS    ??CheckActionUart16552_5
   \   00000040   5013               SUBI    R17, 3
   \   00000042   F0B0               BRCS    ??CheckActionUart16552_6
   \   00000044   F0C9               BREQ    ??CheckActionUart16552_7
   \   00000046   951A               DEC     R17
   \   00000048   F0F9               BREQ    ??CheckActionUart16552_8
   \   0000004A   5017               SUBI    R17, 7
   \   0000004C   F109               BREQ    ??CheckActionUart16552_9
   \   0000004E   5013               SUBI    R17, 3
   \   00000050   F0B9               BREQ    ??CheckActionUart16552_10
   \   00000052   5012               SUBI    R17, 2
   \   00000054   F049               BREQ    ??CheckActionUart16552_11
   \   00000056   541D               SUBI    R17, 77
   \   00000058   F0F9               BREQ    ??CheckActionUart16552_12
   \   0000005A   951A               DEC     R17
   \   0000005C   F129               BREQ    ??CheckActionUart16552_13
   \                     ??CheckActionUart16552_4:
   \   0000005E   C031               RJMP    ??CheckActionUart16552_14
    364          
    365              case ANP1_REP_MP_DATA :                              // Measured pressure data
    366              case ANP1_REP_MT_DATA :                              // Measured temperature data
    367              case ANP1_REP_MO_DATA :                              // Measured "other" data
    368                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_5:
   \   00000060   5F2E               SUBI    R18, 254
   \   00000062   4F3F               SBCI    R19, 255
   \   00000064   ....               RCALL   ReceivePTOData
    369                  break;
   \   00000066   C02D               RJMP    ??CheckActionUart16552_14
    370              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    371                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_11:
   \   00000068   5F2E               SUBI    R18, 254
   \   0000006A   4F3F               SBCI    R19, 255
   \   0000006C   ....               RCALL   ReceiveWHData
    372                  break;
   \   0000006E   C029               RJMP    ??CheckActionUart16552_14
    373              case ANP1_REP_RP_DATA :                              // Raw pressure data
    374              case ANP1_REP_RT_DATA :                              // Raw temp. data
    375              case ANP1_REP_RO_DATA :                              // Raw "other" data
    376                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_6:
   \   00000070   5F2E               SUBI    R18, 254
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   ....               RCALL   ReceiveRData
    377                  break;
   \   00000076   C025               RJMP    ??CheckActionUart16552_14
    378              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    379                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_7:
   \   00000078   5F2E               SUBI    R18, 254
   \   0000007A   4F3F               SBCI    R19, 255
   \   0000007C   ....               RCALL   ReceiveCData
    380                  break;
   \   0000007E   C021               RJMP    ??CheckActionUart16552_14
    381          
    382              case ANP1_REP_CARD_STAT :                             // card status package
    383                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_10:
   \   00000080   5F2E               SUBI    R18, 254
   \   00000082   4F3F               SBCI    R19, 255
   \   00000084   ....               RCALL   ReceiveCardStatus
    384                  break;
   \   00000086   C01D               RJMP    ??CheckActionUart16552_14
    385          
    386              case ANP1_REP_CONFIG :                             // config data
    387                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_8:
   \   00000088   5F2E               SUBI    R18, 254
   \   0000008A   4F3F               SBCI    R19, 255
   \   0000008C   ....               RCALL   ReceiveConfigData
    388                  break;
   \   0000008E   C019               RJMP    ??CheckActionUart16552_14
    389          
    390              case ANP1_REP_EEP_DATA :                             // card eeprome
    391                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_9:
   \   00000090   5F2E               SUBI    R18, 254
   \   00000092   4F3F               SBCI    R19, 255
   \   00000094   ....               RCALL   ReceiveCardEEPROMData
    392                  break;
   \   00000096   C015               RJMP    ??CheckActionUart16552_14
    393          
    394              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    395                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_12:
   \   00000098   5F2E               SUBI    R18, 254
   \   0000009A   4F3F               SBCI    R19, 255
   \   0000009C   ....               RCALL   ReceiveWISStatus
    396                  break;
   \   0000009E   C011               RJMP    ??CheckActionUart16552_14
    397          
    398              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    399                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_0:
   \   000000A0   5F2E               SUBI    R18, 254
   \   000000A2   4F3F               SBCI    R19, 255
   \   000000A4   ....               RCALL   ReceiveWISXData
    400                  break;
   \   000000A6   C00D               RJMP    ??CheckActionUart16552_14
    401          
    402              case ANP1_REP_WIS_DATA :                             // Data from WIS
    403                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_13:
   \   000000A8   5F2E               SUBI    R18, 254
   \   000000AA   4F3F               SBCI    R19, 255
   \   000000AC   ....               RCALL   ReceiveWISData
    404                  break;
   \   000000AE   C009               RJMP    ??CheckActionUart16552_14
    405              case ANP1_REP_GODA_DATA:
    406                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_1:
   \   000000B0   5F2E               SUBI    R18, 254
   \   000000B2   4F3F               SBCI    R19, 255
   \   000000B4   ....               RCALL   ReceiveRadarData
    407                  break;
   \   000000B6   C005               RJMP    ??CheckActionUart16552_14
    408              case ANP1_REP_GODA_INFO:
    409                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_2:
   \   000000B8   5F2E               SUBI    R18, 254
   \   000000BA   4F3F               SBCI    R19, 255
   \   000000BC   ....               RCALL   ReceiveRadarInfo
    410                  break;
   \   000000BE   C001               RJMP    ??CheckActionUart16552_14
    411              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    412              case ANP1_ECMD_NMDWOACK :                         // No more data
    413                  retval = false;
   \                     ??CheckActionUart16552_3:
   \   000000C0   E080               LDI     R24, 0
    414                  break;
    415              }
    416              return retval;
   \                     ??CheckActionUart16552_14:
   \   000000C2   2F08               MOV     R16, R24
   \   000000C4   9189               LD      R24, Y+
   \   000000C6   9508               RET
    417          }
    418          
    419          /*************************************************************************
    420          *
    421          *  Receive card status from WIS
    422          *
    423          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    424          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   2F10               MOV     R17, R16
    425          
    426              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000004   9100....           LDS     R16, PortPair
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   9F14               MUL     R17, R20
   \   0000000C   ....               LDI     R26, LOW(UART16552)
   \   0000000E   ....               LDI     R27, (UART16552) >> 8
   \   00000010   0DA0               ADD     R26, R0
   \   00000012   1DB1               ADC     R27, R1
   \   00000014   961A               ADIW    R27:R26, 10
   \   00000016   91ED               LD      R30, X+
   \   00000018   91FC               LD      R31, X
   \   0000001A   0FE2               ADD     R30, R18
   \   0000001C   1FF3               ADC     R31, R19
   \   0000001E   E024               LDI     R18, 4
   \   00000020   9F12               MUL     R17, R18
   \   00000022   8120               LD      R18, Z
   \   00000024   E010               LDI     R17, 0
   \   00000026   01A0               MOVW    R21:R20, R1:R0
   \   00000028   0F40               ADD     R20, R16
   \   0000002A   1F51               ADC     R21, R17
   \   0000002C   01DA               MOVW    R27:R26, R21:R20
   \   0000002E   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   00000030   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000032   910C               LD      R16, X
   \   00000034   2B02               OR      R16, R18
   \   00000036   930C               ST      X, R16
    427              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000038   8121               LDD     R18, Z+1
   \   0000003A   9100....           LDS     R16, PortPair
   \   0000003E   01A0               MOVW    R21:R20, R1:R0
   \   00000040   0F40               ADD     R20, R16
   \   00000042   1F51               ADC     R21, R17
   \   00000044   01DA               MOVW    R27:R26, R21:R20
   \   00000046   ....               SUBI    R26, LOW((-(TData + 51) & 0xFFFF))
   \   00000048   ....               SBCI    R27, HIGH((-(TData + 51) & 0xFFFF))
   \   0000004A   932C               ST      X, R18
    428              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   0000004C   8104               LDD     R16, Z+4
   \   0000004E   2300               TST     R16
   \   00000050   F051               BREQ    ??ReceiveWISStatus_0
    429                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   00000052   9100....           LDS     R16, PortPair
   \   00000056   0E00               ADD     R0, R16
   \   00000058   1E11               ADC     R1, R17
   \   0000005A   01F0               MOVW    R31:R30, R1:R0
   \   0000005C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000060   A903               LDD     R16, Z+51
   \   00000062   6800               ORI     R16, 0x80
   \   00000064   AB03               STD     Z+51, R16
    430              }
    431          }
   \                     ??ReceiveWISStatus_0:
   \   00000066   01DB               MOVW    R27:R26, R23:R22
   \   00000068   9508               RET
    432          
    433          /*************************************************************************
    434          *
    435          *  Receive WIS protocol data
    436          *
    437          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    438          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    439          
    440              char i;
    441          
    442              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART16552)
   \   0000000A   ....               LDI     R31, (UART16552) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   85A2               LDD     R26, Z+10
   \   00000012   85B3               LDD     R27, Z+11
   \   00000014   0FA2               ADD     R26, R18
   \   00000016   1FB3               ADC     R27, R19
   \   00000018   911D               LD      R17, X+
   \   0000001A   3713               CPI     R17, 115
   \   0000001C   F4D9               BRNE    ??ReceiveWISXData_0
    443              case 115:                                     // Serial number
    444                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   0000001E   E312               LDI     R17, 50
   \   00000020   9F01               MUL     R16, R17
   \   00000022   ....               LDI     R24, LOW(TData)
   \   00000024   ....               LDI     R25, (TData) >> 8
   \   00000026   0D80               ADD     R24, R0
   \   00000028   1D91               ADC     R25, R1
   \   0000002A   01FC               MOVW    R31:R30, R25:R24
   \   0000002C   56EC               SUBI    R30, 108
   \   0000002E   4FFA               SBCI    R31, 250
   \   00000030   E011               LDI     R17, 1
   \   00000032   8310               ST      Z, R17
    445                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000034   0F00               LSL     R16
   \   00000036   0F00               LSL     R16
   \   00000038   9110....           LDS     R17, PortPair
   \   0000003C   0F01               ADD     R16, R17
   \   0000003E   8301               STD     Z+1, R16
    446                  for (i = 2; i < (4 + 2); i++) {
   \   00000040   9602               ADIW    R25:R24, 2
   \   00000042   E004               LDI     R16, 4
    447                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveWISXData_1:
   \   00000044   911D               LD      R17, X+
   \   00000046   01FC               MOVW    R31:R30, R25:R24
   \   00000048   56EC               SUBI    R30, 108
   \   0000004A   4FFA               SBCI    R31, 250
   \   0000004C   8310               ST      Z, R17
    448                  }
   \   0000004E   9601               ADIW    R25:R24, 1
   \   00000050   950A               DEC     R16
   \   00000052   F7C1               BRNE    ??ReceiveWISXData_1
    449                  break;
    450              default:
    451                  break;
    452              }
    453          }
   \                     ??ReceiveWISXData_0:
   \   00000054   01CA               MOVW    R25:R24, R21:R20
   \   00000056   01DB               MOVW    R27:R26, R23:R22
   \   00000058   9508               RET
    454          
    455          /*************************************************************************
    456          *
    457          *  Receive measured data from WIS
    458          *
    459          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    460          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R30, LOW(UART16552)
   \   0000000E   ....               LDI     R31, (UART16552) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   85A2               LDD     R26, Z+10
   \   00000016   85B3               LDD     R27, Z+11
   \   00000018   0FA2               ADD     R26, R18
   \   0000001A   1FB3               ADC     R27, R19
   \   0000001C   E014               LDI     R17, 4
   \   0000001E   9F01               MUL     R16, R17
   \   00000020   01C0               MOVW    R25:R24, R1:R0
   \   00000022   910C               LD      R16, X
   \   00000024   E010               LDI     R17, 0
   \   00000026   E020               LDI     R18, 0
   \   00000028   E030               LDI     R19, 0
   \   0000002A   ........           CALL    ?UL2F_S_L04
   \   0000002E   9140....           LDS     R20, PortPair
   \   00000032   E050               LDI     R21, 0
   \   00000034   01BC               MOVW    R23:R22, R25:R24
   \   00000036   0F64               ADD     R22, R20
   \   00000038   1F75               ADC     R23, R21
   \   0000003A   E348               LDI     R20, 56
   \   0000003C   9F74               MUL     R23, R20
   \   0000003E   2D70               MOV     R23, R0
   \   00000040   9F64               MUL     R22, R20
   \   00000042   0D71               ADD     R23, R1
   \   00000044   2DE0               MOV     R30, R0
   \   00000046   2FF7               MOV     R31, R23
   \   00000048   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   0000004C   8300               ST      Z, R16
   \   0000004E   8311               STD     Z+1, R17
   \   00000050   8322               STD     Z+2, R18
   \   00000052   8333               STD     Z+3, R19
    461          
    462              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
    463              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    464                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   8111               LDD     R17, Z+1
   \   00000058   8102               LDD     R16, Z+2
   \   0000005A   2F21               MOV     R18, R17
   \   0000005C   0F22               LSL     R18
   \   0000005E   0B22               SBC     R18, R18
   \   00000060   2F32               MOV     R19, R18
   \   00000062   ........           CALL    ?SL2F_S_L04
   \   00000066   E040               LDI     R20, 0
   \   00000068   E260               LDI     R22, 32
   \   0000006A   E471               LDI     R23, 65
   \   0000006C   ........           CALL    ?F_DIV_S_L04
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   E050               LDI     R21, 0
   \   00000076   01BC               MOVW    R23:R22, R25:R24
   \   00000078   0F64               ADD     R22, R20
   \   0000007A   1F75               ADC     R23, R21
   \   0000007C   E348               LDI     R20, 56
   \   0000007E   9F74               MUL     R23, R20
   \   00000080   2D70               MOV     R23, R0
   \   00000082   9F64               MUL     R22, R20
   \   00000084   0D71               ADD     R23, R1
   \   00000086   2DE0               MOV     R30, R0
   \   00000088   2FF7               MOV     R31, R23
   \   0000008A   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   0000008E   8300               ST      Z, R16
   \   00000090   8311               STD     Z+1, R17
   \   00000092   8322               STD     Z+2, R18
   \   00000094   8333               STD     Z+3, R19
    465              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   00000096   01FD               MOVW    R31:R30, R27:R26
   \   00000098   8123               LDD     R18, Z+3
   \   0000009A   9100....           LDS     R16, PortPair
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   01AC               MOVW    R21:R20, R25:R24
   \   000000A2   0F40               ADD     R20, R16
   \   000000A4   1F51               ADC     R21, R17
   \   000000A6   E00E               LDI     R16, 14
   \   000000A8   9F50               MUL     R21, R16
   \   000000AA   2D50               MOV     R21, R0
   \   000000AC   9F40               MUL     R20, R16
   \   000000AE   0D51               ADD     R21, R1
   \   000000B0   2DE0               MOV     R30, R0
   \   000000B2   2FF5               MOV     R31, R21
   \   000000B4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B8   AF23               STD     Z+59, R18
    466              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   000000BA   9100....           LDS     R16, PortPair
   \   000000BE   0F80               ADD     R24, R16
   \   000000C0   1F91               ADC     R25, R17
   \   000000C2   E00E               LDI     R16, 14
   \   000000C4   9F90               MUL     R25, R16
   \   000000C6   2D90               MOV     R25, R0
   \   000000C8   9F80               MUL     R24, R16
   \   000000CA   0D91               ADD     R25, R1
   \   000000CC   2DE0               MOV     R30, R0
   \   000000CE   2FF9               MOV     R31, R25
   \   000000D0   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000D4   8310               ST      Z, R17
    467          }
   \   000000D6                      REQUIRE ?Subroutine3
   \   000000D6                      ;               // Fall through to label ?Subroutine3

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9508               RET
    468          
    469          
    470          /*************************************************************************
    471          *
    472          *  Receive measured data from Radar
    473          *
    474          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    475          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R26, LOW(UART16552)
   \   0000000A   ....               LDI     R27, (UART16552) >> 8
   \   0000000C   0DA0               ADD     R26, R0
   \   0000000E   1DB1               ADC     R27, R1
   \   00000010   961A               ADIW    R27:R26, 10
   \   00000012   91ED               LD      R30, X+
   \   00000014   91FC               LD      R31, X
   \   00000016   0FE2               ADD     R30, R18
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   E014               LDI     R17, 4
   \   0000001C   9F01               MUL     R16, R17
   \   0000001E   0190               MOVW    R19:R18, R1:R0
   \   00000020   8140               LD      R20, Z
   \   00000022   8151               LDD     R21, Z+1
   \   00000024   8162               LDD     R22, Z+2
   \   00000026   8173               LDD     R23, Z+3
   \   00000028   9100....           LDS     R16, PortPair
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   0110               MOVW    R3:R2, R1:R0
   \   00000030   0E20               ADD     R2, R16
   \   00000032   1E31               ADC     R3, R17
   \   00000034   E308               LDI     R16, 56
   \   00000036   9E30               MUL     R3, R16
   \   00000038   2C30               MOV     R3, R0
   \   0000003A   9E20               MUL     R2, R16
   \   0000003C   0C31               ADD     R3, R1
   \   0000003E   2DA0               MOV     R26, R0
   \   00000040   2DB3               MOV     R27, R3
   \   00000042   ....               SUBI    R26, LOW((-(TData + 731) & 0xFFFF))
   \   00000044   ....               SBCI    R27, HIGH((-(TData + 731) & 0xFFFF))
   \   00000046   934D               ST      X+, R20
   \   00000048   935D               ST      X+, R21
   \   0000004A   936D               ST      X+, R22
   \   0000004C   937C               ST      X, R23
    476              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
    477              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
    478          
    479              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
    480              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   0000004E   8144               LDD     R20, Z+4
   \   00000050   8155               LDD     R21, Z+5
   \   00000052   8166               LDD     R22, Z+6
   \   00000054   8177               LDD     R23, Z+7
   \   00000056   9100....           LDS     R16, PortPair
   \   0000005A   0119               MOVW    R3:R2, R19:R18
   \   0000005C   0E20               ADD     R2, R16
   \   0000005E   1E31               ADC     R3, R17
   \   00000060   E308               LDI     R16, 56
   \   00000062   9E30               MUL     R3, R16
   \   00000064   2C30               MOV     R3, R0
   \   00000066   9E20               MUL     R2, R16
   \   00000068   0C31               ADD     R3, R1
   \   0000006A   2DA0               MOV     R26, R0
   \   0000006C   2DB3               MOV     R27, R3
   \   0000006E   ....               SUBI    R26, LOW((-(TData + 735) & 0xFFFF))
   \   00000070   ....               SBCI    R27, HIGH((-(TData + 735) & 0xFFFF))
   \   00000072   934D               ST      X+, R20
   \   00000074   935D               ST      X+, R21
   \   00000076   936D               ST      X+, R22
   \   00000078   937C               ST      X, R23
    481              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   0000007A   8540               LDD     R20, Z+8
   \   0000007C   9100....           LDS     R16, PortPair
   \   00000080   01B9               MOVW    R23:R22, R19:R18
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   E00E               LDI     R16, 14
   \   00000088   9F70               MUL     R23, R16
   \   0000008A   2D70               MOV     R23, R0
   \   0000008C   9F60               MUL     R22, R16
   \   0000008E   0D71               ADD     R23, R1
   \   00000090   2DA0               MOV     R26, R0
   \   00000092   ....               SUBI    R26, LOW((-(TData + 59) & 0xFFFF))
   \   00000094   ....               SBCI    R23, HIGH((-(TData + 59) & 0xFFFF))
   \   00000096   2FB7               MOV     R27, R23
   \   00000098   934C               ST      X, R20
    482              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   0000009A   8541               LDD     R20, Z+9
   \   0000009C   9100....           LDS     R16, PortPair
   \   000000A0   0F20               ADD     R18, R16
   \   000000A2   1F31               ADC     R19, R17
   \   000000A4   E00E               LDI     R16, 14
   \   000000A6   9F30               MUL     R19, R16
   \   000000A8   2D30               MOV     R19, R0
   \   000000AA   9F20               MUL     R18, R16
   \   000000AC   0D31               ADD     R19, R1
   \   000000AE   2DE0               MOV     R30, R0
   \   000000B0   2FF3               MOV     R31, R19
   \   000000B2   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000B6   8340               ST      Z, R20
    483          }
   \   000000B8   91A9               LD      R26, Y+
   \   000000BA   91B9               LD      R27, Y+
   \   000000BC   9508               RET
    484          
    485          
    486          /*************************************************************************
    487          *
    488          *  Receive Serial number and version information from Radar
    489          *
    490          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    491          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   0129               MOVW    R5:R4, R19:R18
    492              TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
   \   00000012   9060....           LDS     R6, PortPair
   \   00000016   E11A               LDI     R17, 26
   \   00000018   9F01               MUL     R16, R17
   \   0000001A   ....               LDI     R26, LOW(UART16552)
   \   0000001C   ....               LDI     R27, (UART16552) >> 8
   \   0000001E   0DA0               ADD     R26, R0
   \   00000020   1DB1               ADC     R27, R1
   \   00000022   E014               LDI     R17, 4
   \   00000024   9F01               MUL     R16, R17
   \   00000026   01C0               MOVW    R25:R24, R1:R0
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8502               LDD     R16, Z+10
   \   0000002C   8513               LDD     R17, Z+11
   \   0000002E   0D04               ADD     R16, R4
   \   00000030   1D15               ADC     R17, R5
   \   00000032   ........           CALL    atol
   \   00000036   2F21               MOV     R18, R17
   \   00000038   0F22               LSL     R18
   \   0000003A   0B22               SBC     R18, R18
   \   0000003C   2477               CLR     R7
   \   0000003E   01AC               MOVW    R21:R20, R25:R24
   \   00000040   0D46               ADD     R20, R6
   \   00000042   1D57               ADC     R21, R7
   \   00000044   0F44               LSL     R20
   \   00000046   1F55               ROL     R21
   \   00000048   0F44               LSL     R20
   \   0000004A   1F55               ROL     R21
   \   0000004C   01FA               MOVW    R31:R30, R21:R20
   \   0000004E   ....               SUBI    R30, LOW((-(TData + 1532) & 0xFFFF))
   \   00000050   ....               SBCI    R31, HIGH((-(TData + 1532) & 0xFFFF))
   \   00000052   8300               ST      Z, R16
   \   00000054   8311               STD     Z+1, R17
   \   00000056   8322               STD     Z+2, R18
   \   00000058   8323               STD     Z+3, R18
    493              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   0000005A   01FD               MOVW    R31:R30, R27:R26
   \   0000005C   8502               LDD     R16, Z+10
   \   0000005E   8513               LDD     R17, Z+11
   \   00000060   0D04               ADD     R16, R4
   \   00000062   1D15               ADC     R17, R5
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8502               LDD     R16, Z+10
   \   00000068   9120....           LDS     R18, PortPair
   \   0000006C   0F82               ADD     R24, R18
   \   0000006E   1D97               ADC     R25, R7
   \   00000070   01FC               MOVW    R31:R30, R25:R24
   \   00000072   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000074   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000076   A703               STD     Z+43, R16
    494          }
   \   00000078                      REQUIRE ?Subroutine1
   \   00000078                      ;               // Fall through to label ?Subroutine1

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9508               RET
    495          
    496          /*************************************************************************
    497          *
    498          *  Receive pressure measured data from AN_SGCNV
    499          *
    500          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    501          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000E   2E60               MOV     R6, R16
   \   00000010   0129               MOVW    R5:R4, R19:R18
    502          
    503              unsigned short pnt, ADCh;
    504              short packlen;
    505          
    506              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000012   E10A               LDI     R16, 26
   \   00000014   9E60               MUL     R6, R16
   \   00000016   ....               LDI     R26, LOW(UART16552)
   \   00000018   ....               LDI     R27, (UART16552) >> 8
   \   0000001A   0DA0               ADD     R26, R0
   \   0000001C   1DB1               ADC     R27, R1
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8502               LDD     R16, Z+10
   \   00000022   8513               LDD     R17, Z+11
   \   00000024   0D04               ADD     R16, R4
   \   00000026   1D15               ADC     R17, R5
   \   00000028   5001               SUBI    R16, 1
   \   0000002A   4010               SBCI    R17, 0
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   8180               LD      R24, Z
   \   00000030   E090               LDI     R25, 0
    507          
    508              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000032   ....               LDI     R16, LOW(UARTSEND)
   \   00000034   ....               LDI     R17, (UARTSEND) >> 8
   \   00000036   ........           CALL    OS_Use
    509          
    510              if (packlen > 0) {
   \   0000003A   3081               CPI     R24, 1
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   0799               CPC     R25, R25
   \   00000040   F40C               BRGE    $+2+2
   \   00000042   C046               RJMP    ??ReceivePTOData_0
    511                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   00000044   E010               LDI     R17, 0
   \   00000046   2388               TST     R24
   \   00000048   F409               BRNE    $+2+2
   \   0000004A   C042               RJMP    ??ReceivePTOData_0
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   85A2               LDD     R26, Z+10
   \   00000050   85B3               LDD     R27, Z+11
   \   00000052   0DA4               ADD     R26, R4
   \   00000054   1DB5               ADC     R27, R5
   \   00000056   E024               LDI     R18, 4
   \   00000058   9E62               MUL     R6, R18
   \   0000005A   0110               MOVW    R3:R2, R1:R0
    512                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceivePTOData_1:
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   8120               LD      R18, Z
   \   00000060   E030               LDI     R19, 0
    513                      if (ADCh < 14) {
   \   00000062   302E               CPI     R18, 14
   \   00000064   F578               BRCC    ??ReceivePTOData_2
    514                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000066   8161               LDD     R22, Z+1
   \   00000068   ....               LDI     R30, LOW((TData + 59))
   \   0000006A   ....               LDI     R31, HIGH((TData + 59))
   \   0000006C   0FE2               ADD     R30, R18
   \   0000006E   1FF9               ADC     R31, R25
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   0121               MOVW    R5:R4, R3:R2
   \   00000076   0E44               ADD     R4, R20
   \   00000078   1E59               ADC     R5, R25
   \   0000007A   E04E               LDI     R20, 14
   \   0000007C   9E54               MUL     R5, R20
   \   0000007E   2C50               MOV     R5, R0
   \   00000080   9E44               MUL     R4, R20
   \   00000082   0C51               ADD     R5, R1
   \   00000084   0DE0               ADD     R30, R0
   \   00000086   1DF5               ADC     R31, R5
   \   00000088   8360               ST      Z, R22
    515                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000008A   01FD               MOVW    R31:R30, R27:R26
   \   0000008C   8142               LDD     R20, Z+2
   \   0000008E   8153               LDD     R21, Z+3
   \   00000090   8164               LDD     R22, Z+4
   \   00000092   8175               LDD     R23, Z+5
   \   00000094   ....               LDI     R30, LOW((TData + 731))
   \   00000096   ....               LDI     R31, HIGH((TData + 731))
   \   00000098   0F22               LSL     R18
   \   0000009A   1F33               ROL     R19
   \   0000009C   0F22               LSL     R18
   \   0000009E   1F33               ROL     R19
   \   000000A0   0FE2               ADD     R30, R18
   \   000000A2   1FF3               ADC     R31, R19
   \   000000A4   9120....           LDS     R18, PortPair
   \   000000A8   0121               MOVW    R5:R4, R3:R2
   \   000000AA   0E42               ADD     R4, R18
   \   000000AC   1E59               ADC     R5, R25
   \   000000AE   E328               LDI     R18, 56
   \   000000B0   9E52               MUL     R5, R18
   \   000000B2   2C50               MOV     R5, R0
   \   000000B4   9E42               MUL     R4, R18
   \   000000B6   0C51               ADD     R5, R1
   \   000000B8   0DE0               ADD     R30, R0
   \   000000BA   1DF5               ADC     R31, R5
   \   000000BC   8340               ST      Z, R20
   \   000000BE   8351               STD     Z+1, R21
   \   000000C0   8362               STD     Z+2, R22
   \   000000C2   8373               STD     Z+3, R23
    516                      }
    517                  }
   \                     ??ReceivePTOData_2:
   \   000000C4   5F0A               SUBI    R16, 250
   \   000000C6   4F1F               SBCI    R17, 255
   \   000000C8   9616               ADIW    R27:R26, 6
   \   000000CA   1708               CP      R16, R24
   \   000000CC   0719               CPC     R17, R25
   \   000000CE   F230               BRCS    ??ReceivePTOData_1
    518              }
    519              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   000000D0   ....               LDI     R16, LOW(UARTSEND)
   \   000000D2   ....               LDI     R17, (UARTSEND) >> 8
   \   000000D4   ........           CALL    OS_Unuse
    520          }
   \   000000D8   ....               RJMP    ?Subroutine2
    521          /*************************************************************************
    522          *
    523          *  Receive Wash Track and High Level data from AN_SGCNV
    524          *
    525          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    526          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   93AA               ST      -Y, R26
   \   00000002   939A               ST      -Y, R25
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2FA0               MOV     R26, R16
   \   00000008   01C9               MOVW    R25:R24, R19:R18
    527          
    528              // Fixed packet length
    529              //short packlen;
    530          
    531              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    532          
    533              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   0000000A   ....               LDI     R16, LOW(UARTSEND)
   \   0000000C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000000E   ........           CALL    OS_Use
    534              short Index = (ch * 4) + PortPair;
   \   00000012   E004               LDI     R16, 4
   \   00000014   9FA0               MUL     R26, R16
   \   00000016   0180               MOVW    R17:R16, R1:R0
   \   00000018   9120....           LDS     R18, PortPair
   \   0000001C   E030               LDI     R19, 0
   \   0000001E   0F02               ADD     R16, R18
   \   00000020   1F13               ADC     R17, R19
   \   00000022   E12A               LDI     R18, 26
   \   00000024   9FA2               MUL     R26, R18
   \   00000026   ....               LDI     R30, LOW(UART16552)
   \   00000028   ....               LDI     R31, (UART16552) >> 8
   \   0000002A   0DE0               ADD     R30, R0
   \   0000002C   1DF1               ADC     R31, R1
   \   0000002E   8562               LDD     R22, Z+10
   \   00000030   8573               LDD     R23, Z+11
   \   00000032   0F68               ADD     R22, R24
   \   00000034   1F79               ADC     R23, R25
   \   00000036   01A8               MOVW    R21:R20, R17:R16
   \   00000038   0F44               LSL     R20
   \   0000003A   1F55               ROL     R21
   \   0000003C   0F44               LSL     R20
   \   0000003E   1F55               ROL     R21
   \   00000040   0F44               LSL     R20
   \   00000042   1F55               ROL     R21
   \   00000044   ....               LDI     R18, LOW(TData)
   \   00000046   2E02               MOV     R0, R18
   \   00000048   ....               LDI     R18, (TData) >> 8
   \   0000004A   0E04               ADD     R0, R20
   \   0000004C   1F25               ADC     R18, R21
   \   0000004E   2E12               MOV     R1, R18
   \   00000050   0190               MOVW    R19:R18, R1:R0
   \   00000052   5625               SUBI    R18, 101
   \   00000054   4F3B               SBCI    R19, 251
   \   00000056   01FB               MOVW    R31:R30, R23:R22
   \   00000058   9142               LD      R20, -Z
   \   0000005A   3044               CPI     R20, 4
   \   0000005C   01AB               MOVW    R21:R20, R23:R22
   \   0000005E   F501               BRNE    ??ReceiveWHData_0
    535              // Check if we have time information included
    536              if (UART16552[ch].pRxBuffer[pointer -1] == 4 ) {
    537                  for (short pnt = 0; pnt < 3; pnt++) {
   \   00000060   E083               LDI     R24, 3
    538                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer+pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_1:
   \   00000062   01FA               MOVW    R31:R30, R21:R20
   \   00000064   9021               LD      R2, Z+
   \   00000066   01AF               MOVW    R21:R20, R31:R30
   \   00000068   2433               CLR     R3
   \   0000006A   01F9               MOVW    R31:R30, R19:R18
   \   0000006C   9221               ST      Z+, R2
   \   0000006E   9231               ST      Z+, R3
   \   00000070   019F               MOVW    R19:R18, R31:R30
    539                  }
   \   00000072   958A               DEC     R24
   \   00000074   F7B1               BRNE    ??ReceiveWHData_1
    540                  // 4th WashTrack dont come
    541                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \   00000076   EA21               LDI     R18, 161
   \   00000078   0E02               ADD     R0, R18
   \   0000007A   E024               LDI     R18, 4
   \   0000007C   1E12               ADC     R1, R18
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   8230               ST      Z, R3
   \   00000082   8231               STD     Z+1, R3
    542                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer +3]; // Hgh levels in 5th byte
   \   00000084   01FB               MOVW    R31:R30, R23:R22
   \   00000086   8123               LDD     R18, Z+3
   \   00000088   01F8               MOVW    R31:R30, R17:R16
   \   0000008A   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   0000008E   8320               ST      Z, R18
    543                  TData.RS4.WTTime[Index] = 0;
   \   00000090   0F00               LSL     R16
   \   00000092   1F11               ROL     R17
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   00000098   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   0000009A   8230               ST      Z, R3
   \   0000009C   8231               STD     Z+1, R3
   \   0000009E   C01B               RJMP    ??ReceiveWHData_2
    544              }else{
    545                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   000000A0   E084               LDI     R24, 4
    546                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_3:
   \   000000A2   01FA               MOVW    R31:R30, R21:R20
   \   000000A4   9001               LD      R0, Z+
   \   000000A6   9011               LD      R1, Z+
   \   000000A8   01AF               MOVW    R21:R20, R31:R30
   \   000000AA   01F9               MOVW    R31:R30, R19:R18
   \   000000AC   9201               ST      Z+, R0
   \   000000AE   9211               ST      Z+, R1
   \   000000B0   019F               MOVW    R19:R18, R31:R30
    547                  }
   \   000000B2   958A               DEC     R24
   \   000000B4   F7B1               BRNE    ??ReceiveWHData_3
    548                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \   000000B6   01FB               MOVW    R31:R30, R23:R22
   \   000000B8   8520               LDD     R18, Z+8
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000C0   8320               ST      Z, R18
    549                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   000000C2   01FB               MOVW    R31:R30, R23:R22
   \   000000C4   8521               LDD     R18, Z+9
   \   000000C6   8532               LDD     R19, Z+10
   \   000000C8   0F00               LSL     R16
   \   000000CA   1F11               ROL     R17
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000D2   8320               ST      Z, R18
   \   000000D4   8331               STD     Z+1, R19
    550              }
    551              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_2:
   \   000000D6   0FAA               LSL     R26
   \   000000D8   0FAA               LSL     R26
   \   000000DA   9100....           LDS     R16, PortPair
   \   000000DE   0FA0               ADD     R26, R16
   \   000000E0   E001               LDI     R16, 1
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   2F4A               MOV     R20, R26
   \   000000E6   ........           CALL    ?S_SHL_L02
   \   000000EA   9110....           LDS     R17, (TData + 1267)
   \   000000EE   2B10               OR      R17, R16
   \   000000F0   9310....           STS     (TData + 1267), R17
    552              OS_Unuse(&UARTSEND);
   \   000000F4   ....               LDI     R16, LOW(UARTSEND)
   \   000000F6   ....               LDI     R17, (UARTSEND) >> 8
   \   000000F8   ........           CALL    OS_Unuse
    553          }
   \   000000FC   9189               LD      R24, Y+
   \   000000FE   9199               LD      R25, Y+
   \   00000100   91A9               LD      R26, Y+
   \   00000102   9508               RET
    554          
    555          
    556          /************************************************************************
    557          *
    558          *  Receive raw data for pressure, temp and other from AN_SGCNV
    559          *
    560          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    561          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   01A9               MOVW    R21:R20, R19:R18
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   ....               LDI     R30, LOW(UART16552)
   \   00000018   ....               LDI     R31, (UART16552) >> 8
   \   0000001A   0DE0               ADD     R30, R0
   \   0000001C   1DF1               ADC     R31, R1
   \   0000001E   8562               LDD     R22, Z+10
   \   00000020   8573               LDD     R23, Z+11
   \   00000022   01FB               MOVW    R31:R30, R23:R22
   \   00000024   0FE4               ADD     R30, R20
   \   00000026   1FF5               ADC     R31, R21
   \   00000028   9122               LD      R18, -Z
   \   0000002A   E030               LDI     R19, 0
    562          
    563              char pnt, ADCh;
    564              short packlen;
    565          
    566              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    567          
    568              if (packlen > 0) {
   \   0000002C   3021               CPI     R18, 1
   \   0000002E   0733               CPC     R19, R19
   \   00000030   F1E4               BRLT    ??ReceiveRData_0
    569                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000032   E080               LDI     R24, 0
   \   00000034   E014               LDI     R17, 4
   \   00000036   9F01               MUL     R16, R17
   \   00000038   0110               MOVW    R3:R2, R1:R0
   \   0000003A   C034               RJMP    ??ReceiveRData_1
   \                     ??ReceiveRData_2:
   \   0000003C   018A               MOVW    R17:R16, R21:R20
   \   0000003E   0F08               ADD     R16, R24
   \   00000040   1F13               ADC     R17, R19
   \   00000042   01DB               MOVW    R27:R26, R23:R22
   \   00000044   0FA0               ADD     R26, R16
   \   00000046   1FB1               ADC     R27, R17
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8190               LD      R25, Z
    570                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    571                      if (ADCh < 14) {
   \   0000004C   309E               CPI     R25, 14
   \   0000004E   F548               BRCC    ??ReceiveRData_3
    572                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000050   8041               LDD     R4, Z+1
   \   00000052   ....               LDI     R30, LOW((TData + 59))
   \   00000054   ....               LDI     R31, HIGH((TData + 59))
   \   00000056   0FE9               ADD     R30, R25
   \   00000058   1FF3               ADC     R31, R19
   \   0000005A   9100....           LDS     R16, PortPair
   \   0000005E   0131               MOVW    R7:R6, R3:R2
   \   00000060   0E60               ADD     R6, R16
   \   00000062   1E73               ADC     R7, R19
   \   00000064   E00E               LDI     R16, 14
   \   00000066   9E70               MUL     R7, R16
   \   00000068   2C70               MOV     R7, R0
   \   0000006A   9E60               MUL     R6, R16
   \   0000006C   0C71               ADD     R7, R1
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1DF7               ADC     R31, R7
   \   00000072   8240               ST      Z, R4
    573                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   81A2               LDD     R26, Z+2
   \   00000078   81B3               LDD     R27, Z+3
   \   0000007A   ....               LDI     R30, LOW((TData + 283))
   \   0000007C   ....               LDI     R31, HIGH((TData + 283))
   \   0000007E   E002               LDI     R16, 2
   \   00000080   9F90               MUL     R25, R16
   \   00000082   0DE0               ADD     R30, R0
   \   00000084   1DF1               ADC     R31, R1
   \   00000086   9100....           LDS     R16, PortPair
   \   0000008A   0121               MOVW    R5:R4, R3:R2
   \   0000008C   0E40               ADD     R4, R16
   \   0000008E   1E53               ADC     R5, R19
   \   00000090   E10C               LDI     R16, 28
   \   00000092   9E50               MUL     R5, R16
   \   00000094   2C50               MOV     R5, R0
   \   00000096   9E40               MUL     R4, R16
   \   00000098   0C51               ADD     R5, R1
   \   0000009A   0DE0               ADD     R30, R0
   \   0000009C   1DF5               ADC     R31, R5
   \   0000009E   83A0               ST      Z, R26
   \   000000A0   83B1               STD     Z+1, R27
    574                      }
    575                  }
   \                     ??ReceiveRData_3:
   \   000000A2   5F8C               SUBI    R24, 252
   \                     ??ReceiveRData_1:
   \   000000A4   1782               CP      R24, R18
   \   000000A6   0733               CPC     R19, R19
   \   000000A8   F24C               BRLT    ??ReceiveRData_2
    576              }
    577          }
   \                     ??ReceiveRData_0:
   \   000000AA   ....               RJMP    ?Subroutine1
    578          
    579          /*************************************************************************
    580          *
    581          *  Receive cal data  from AN_SGCNV
    582          *
    583          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    584          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   01A9               MOVW    R21:R20, R19:R18
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   ....               LDI     R30, LOW(UART16552)
   \   00000018   ....               LDI     R31, (UART16552) >> 8
   \   0000001A   0DE0               ADD     R30, R0
   \   0000001C   1DF1               ADC     R31, R1
   \   0000001E   8562               LDD     R22, Z+10
   \   00000020   8573               LDD     R23, Z+11
   \   00000022   01FB               MOVW    R31:R30, R23:R22
   \   00000024   0FE4               ADD     R30, R20
   \   00000026   1FF5               ADC     R31, R21
   \   00000028   9122               LD      R18, -Z
   \   0000002A   E030               LDI     R19, 0
    585          
    586              char pnt, ADCh;
    587              short packlen;
    588          
    589              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    590          
    591              if (packlen > 0) {
   \   0000002C   3021               CPI     R18, 1
   \   0000002E   0733               CPC     R19, R19
   \   00000030   F1E4               BRLT    ??ReceiveCData_0
    592                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000032   E080               LDI     R24, 0
   \   00000034   E014               LDI     R17, 4
   \   00000036   9F01               MUL     R16, R17
   \   00000038   0110               MOVW    R3:R2, R1:R0
   \   0000003A   C034               RJMP    ??ReceiveCData_1
   \                     ??ReceiveCData_2:
   \   0000003C   018A               MOVW    R17:R16, R21:R20
   \   0000003E   0F08               ADD     R16, R24
   \   00000040   1F13               ADC     R17, R19
   \   00000042   01DB               MOVW    R27:R26, R23:R22
   \   00000044   0FA0               ADD     R26, R16
   \   00000046   1FB1               ADC     R27, R17
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8190               LD      R25, Z
    593                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    594                      if (ADCh < 14) {
   \   0000004C   309E               CPI     R25, 14
   \   0000004E   F548               BRCC    ??ReceiveCData_3
    595                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000050   8041               LDD     R4, Z+1
   \   00000052   ....               LDI     R30, LOW((TData + 59))
   \   00000054   ....               LDI     R31, HIGH((TData + 59))
   \   00000056   0FE9               ADD     R30, R25
   \   00000058   1FF3               ADC     R31, R19
   \   0000005A   9100....           LDS     R16, PortPair
   \   0000005E   0131               MOVW    R7:R6, R3:R2
   \   00000060   0E60               ADD     R6, R16
   \   00000062   1E73               ADC     R7, R19
   \   00000064   E00E               LDI     R16, 14
   \   00000066   9E70               MUL     R7, R16
   \   00000068   2C70               MOV     R7, R0
   \   0000006A   9E60               MUL     R6, R16
   \   0000006C   0C71               ADD     R7, R1
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1DF7               ADC     R31, R7
   \   00000072   8240               ST      Z, R4
    596                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   81A2               LDD     R26, Z+2
   \   00000078   81B3               LDD     R27, Z+3
   \   0000007A   ....               LDI     R30, LOW((TData + 507))
   \   0000007C   ....               LDI     R31, HIGH((TData + 507))
   \   0000007E   E002               LDI     R16, 2
   \   00000080   9F90               MUL     R25, R16
   \   00000082   0DE0               ADD     R30, R0
   \   00000084   1DF1               ADC     R31, R1
   \   00000086   9100....           LDS     R16, PortPair
   \   0000008A   0121               MOVW    R5:R4, R3:R2
   \   0000008C   0E40               ADD     R4, R16
   \   0000008E   1E53               ADC     R5, R19
   \   00000090   E10C               LDI     R16, 28
   \   00000092   9E50               MUL     R5, R16
   \   00000094   2C50               MOV     R5, R0
   \   00000096   9E40               MUL     R4, R16
   \   00000098   0C51               ADD     R5, R1
   \   0000009A   0DE0               ADD     R30, R0
   \   0000009C   1DF5               ADC     R31, R5
   \   0000009E   83A0               ST      Z, R26
   \   000000A0   83B1               STD     Z+1, R27
    597                      }
    598                  }
   \                     ??ReceiveCData_3:
   \   000000A2   5F8C               SUBI    R24, 252
   \                     ??ReceiveCData_1:
   \   000000A4   1782               CP      R24, R18
   \   000000A6   0733               CPC     R19, R19
   \   000000A8   F24C               BRLT    ??ReceiveCData_2
    599              }
    600          }
   \                     ??ReceiveCData_0:
   \   000000AA   ....               RJMP    ?Subroutine1
    601          
    602          /*************************************************************************
    603          *
    604          *  Receive card status  from AN_SGCNV
    605          *
    606          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    607          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   961A               ADIW    R27:R26, 10
   \   00000010   91ED               LD      R30, X+
   \   00000012   91FC               LD      R31, X
   \   00000014   0FE2               ADD     R30, R18
   \   00000016   1FF3               ADC     R31, R19
   \   00000018   E014               LDI     R17, 4
   \   0000001A   9F01               MUL     R16, R17
   \   0000001C   8120               LD      R18, Z
   \   0000001E   9100....           LDS     R16, PortPair
   \   00000022   E010               LDI     R17, 0
   \   00000024   01A0               MOVW    R21:R20, R1:R0
   \   00000026   0F40               ADD     R20, R16
   \   00000028   1F51               ADC     R21, R17
   \   0000002A   01DA               MOVW    R27:R26, R21:R20
   \   0000002C   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   0000002E   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000030   932C               ST      X, R18
    608          
    609              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
    610              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000032   8121               LDD     R18, Z+1
   \   00000034   9100....           LDS     R16, PortPair
   \   00000038   0E00               ADD     R0, R16
   \   0000003A   1E11               ADC     R1, R17
   \   0000003C   01F0               MOVW    R31:R30, R1:R0
   \   0000003E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000042   AB23               STD     Z+51, R18
    611          }
   \   00000044   01DB               MOVW    R27:R26, R23:R22
   \   00000046   9508               RET
    612          
    613          /*************************************************************************
    614          *
    615          *  Receive config data from AN_SGCNV
    616          *
    617          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    618          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    619          
    620              char i, ADCh;
    621          
    622              for (i = 0; i < 14; i++) {
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   85A2               LDD     R26, Z+10
   \   00000010   85B3               LDD     R27, Z+11
   \   00000012   0FA2               ADD     R26, R18
   \   00000014   1FB3               ADC     R27, R19
   \   00000016   E02E               LDI     R18, 14
   \   00000018   E014               LDI     R17, 4
   \   0000001A   9F01               MUL     R16, R17
   \   0000001C   01A0               MOVW    R21:R20, R1:R0
    623                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveConfigData_0:
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8160               LD      R22, Z
    624                  if (ADCh < 14) {
   \   00000022   306E               CPI     R22, 14
   \   00000024   F538               BRCC    ??ReceiveConfigData_1
    625                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000026   8131               LDD     R19, Z+1
   \   00000028   ....               LDI     R30, LOW((TData + 59))
   \   0000002A   ....               LDI     R31, HIGH((TData + 59))
   \   0000002C   E070               LDI     R23, 0
   \   0000002E   0FE6               ADD     R30, R22
   \   00000030   1FF7               ADC     R31, R23
   \   00000032   9100....           LDS     R16, PortPair
   \   00000036   E010               LDI     R17, 0
   \   00000038   011A               MOVW    R3:R2, R21:R20
   \   0000003A   0E20               ADD     R2, R16
   \   0000003C   1E37               ADC     R3, R23
   \   0000003E   E00E               LDI     R16, 14
   \   00000040   9E30               MUL     R3, R16
   \   00000042   2C30               MOV     R3, R0
   \   00000044   9E20               MUL     R2, R16
   \   00000046   0C31               ADD     R3, R1
   \   00000048   0DE0               ADD     R30, R0
   \   0000004A   1DF3               ADC     R31, R3
   \   0000004C   8330               ST      Z, R19
    626                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   8132               LDD     R19, Z+2
   \   00000052   ....               LDI     R30, LOW((TData + 171))
   \   00000054   ....               LDI     R31, HIGH((TData + 171))
   \   00000056   0FE6               ADD     R30, R22
   \   00000058   1FF7               ADC     R31, R23
   \   0000005A   9100....           LDS     R16, PortPair
   \   0000005E   01BA               MOVW    R23:R22, R21:R20
   \   00000060   0F60               ADD     R22, R16
   \   00000062   1F71               ADC     R23, R17
   \   00000064   E00E               LDI     R16, 14
   \   00000066   9F70               MUL     R23, R16
   \   00000068   2D70               MOV     R23, R0
   \   0000006A   9F60               MUL     R22, R16
   \   0000006C   0D71               ADD     R23, R1
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1FF7               ADC     R31, R23
   \   00000072   8330               ST      Z, R19
    627                  }
    628                  pointer += 2;
    629              }
   \                     ??ReceiveConfigData_1:
   \   00000074   9613               ADIW    R27:R26, 3
   \   00000076   952A               DEC     R18
   \   00000078   F691               BRNE    ??ReceiveConfigData_0
    630          }
   \   0000007A   91A9               LD      R26, Y+
   \   0000007C   91B9               LD      R27, Y+
   \   0000007E   9508               RET
    631          
    632          /*************************************************************************
    633          *
    634          *  Receive eeprom data from AN_SGCNV
    635          *
    636          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    637          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    638          
    639              short i;
    640          
    641              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000004   E312               LDI     R17, 50
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(TData)
   \   0000000A   ....               LDI     R31, (TData) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   01DF               MOVW    R27:R26, R31:R30
   \   00000012   56AC               SUBI    R26, 108
   \   00000014   4FBA               SBCI    R27, 250
   \   00000016   E011               LDI     R17, 1
   \   00000018   931D               ST      X+, R17
    642              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   0000001A   2F10               MOV     R17, R16
   \   0000001C   0F11               LSL     R17
   \   0000001E   0F11               LSL     R17
   \   00000020   9140....           LDS     R20, PortPair
   \   00000024   0F14               ADD     R17, R20
   \   00000026   931C               ST      X, R17
    643              for (i = 2; i < (41 + 2); i++) {
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01D0               MOVW    R27:R26, R1:R0
   \   0000002E   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   00000030   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   00000032   910D               LD      R16, X+
   \   00000034   911C               LD      R17, X
   \   00000036   0F02               ADD     R16, R18
   \   00000038   1F13               ADC     R17, R19
   \   0000003A   56EA               SUBI    R30, 106
   \   0000003C   4FFA               SBCI    R31, 250
   \   0000003E   E229               LDI     R18, 41
    644                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveCardEEPROMData_0:
   \   00000040   01D8               MOVW    R27:R26, R17:R16
   \   00000042   913D               LD      R19, X+
   \   00000044   018D               MOVW    R17:R16, R27:R26
   \   00000046   9331               ST      Z+, R19
    645              }
   \   00000048   952A               DEC     R18
   \   0000004A   F7D1               BRNE    ??ReceiveCardEEPROMData_0
    646          }
   \   0000004C   2FA6               MOV     R26, R22
   \   0000004E   2FB5               MOV     R27, R21
   \   00000050   9508               RET
    647          
    648          /*************************************************************************
    649          *
    650          * Build send packet header for AN-SGCNV
    651          *
    652          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    653          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    654          
    655              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   01FD               MOVW    R31:R30, R27:R26
   \   00000010   E000               LDI     R16, 0
   \   00000012   8704               STD     Z+12, R16
   \   00000014   8705               STD     Z+13, R16
    656              UART16552[ch].RxLast = 0;
   \   00000016   8706               STD     Z+14, R16
   \   00000018   8707               STD     Z+15, R16
    657              UART16552[ch].TxLast = 0;
   \   0000001A   8304               STD     Z+4, R16
   \   0000001C   8305               STD     Z+5, R16
    658          
    659              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   0000001E   91ED               LD      R30, X+
   \   00000020   91FC               LD      R31, X
   \   00000022   9711               SBIW    R27:R26, 1
   \   00000024   E002               LDI     R16, 2
   \   00000026   8300               ST      Z, R16
    660              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9711               SBIW    R27:R26, 1
   \   0000002E   8301               STD     Z+1, R16
    661              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   00000030   91ED               LD      R30, X+
   \   00000032   91FC               LD      R31, X
   \   00000034   9711               SBIW    R27:R26, 1
   \   00000036   E000               LDI     R16, 0
   \   00000038   8302               STD     Z+2, R16
    662              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   0000003A   91ED               LD      R30, X+
   \   0000003C   91FC               LD      R31, X
   \   0000003E   9711               SBIW    R27:R26, 1
   \   00000040   EF0D               LDI     R16, 253
   \   00000042   8303               STD     Z+3, R16
    663              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   00000044   91ED               LD      R30, X+
   \   00000046   91FC               LD      R31, X
   \   00000048   9711               SBIW    R27:R26, 1
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   8304               STD     Z+4, R16
    664              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   0000004E   91ED               LD      R30, X+
   \   00000050   91FC               LD      R31, X
   \   00000052   8305               STD     Z+5, R16
    665          }
   \   00000054   01D9               MOVW    R27:R26, R19:R18
   \   00000056   9508               RET
    666          
    667          /*************************************************************************
    668          *
    669          * Build  packet tail
    670          *
    671          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    672          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F80               MOV     R24, R16
    673          
    674              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000008   ....               RCALL   Uart_BuildHeader16552
    675          
    676              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F80               MUL     R24, R16
   \   0000000E   ....               LDI     R26, LOW(UART16552)
   \   00000010   ....               LDI     R27, (UART16552) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   910D               LD      R16, X+
   \   00000018   911C               LD      R17, X
   \   0000001A   9711               SBIW    R27:R26, 1
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8122               LDD     R18, Z+2
   \   00000020   8133               LDD     R19, Z+3
   \   00000022   0F02               ADD     R16, R18
   \   00000024   1F13               ADC     R17, R19
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   E001               LDI     R16, 1
   \   0000002A   8300               ST      Z, R16
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8102               LDD     R16, Z+2
   \   00000030   8113               LDD     R17, Z+3
   \   00000032   5F0F               SUBI    R16, 255
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   8302               STD     Z+2, R16
   \   00000038   8313               STD     Z+3, R17
    677              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   8122               LDD     R18, Z+2
   \   00000040   8133               LDD     R19, Z+3
   \   00000042   0F02               ADD     R16, R18
   \   00000044   1F13               ADC     R17, R19
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8300               ST      Z, R16
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8102               LDD     R16, Z+2
   \   00000050   8113               LDD     R17, Z+3
   \   00000052   5F0F               SUBI    R16, 255
   \   00000054   4F1F               SBCI    R17, 255
   \   00000056   8302               STD     Z+2, R16
   \   00000058   8313               STD     Z+3, R17
    678          
    679              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   0000005A   91ED               LD      R30, X+
   \   0000005C   91FC               LD      R31, X
   \   0000005E   9711               SBIW    R27:R26, 1
   \   00000060   8314               STD     Z+4, R17
    680              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   00000062   01FD               MOVW    R31:R30, R27:R26
   \   00000064   8102               LDD     R16, Z+2
   \   00000066   91ED               LD      R30, X+
   \   00000068   91FC               LD      R31, X
   \   0000006A   9711               SBIW    R27:R26, 1
   \   0000006C   8305               STD     Z+5, R16
    681          
    682          
    683              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   8122               LDD     R18, Z+2
   \   00000072   8133               LDD     R19, Z+3
   \   00000074   2F08               MOV     R16, R24
   \   00000076   ....               RCALL   CalcDSTxChecksumUART16552
   \   00000078   2F20               MOV     R18, R16
   \   0000007A   910D               LD      R16, X+
   \   0000007C   911C               LD      R17, X
   \   0000007E   9711               SBIW    R27:R26, 1
   \   00000080   01FD               MOVW    R31:R30, R27:R26
   \   00000082   8142               LDD     R20, Z+2
   \   00000084   8153               LDD     R21, Z+3
   \   00000086   0F04               ADD     R16, R20
   \   00000088   1F15               ADC     R17, R21
   \   0000008A   01F8               MOVW    R31:R30, R17:R16
   \   0000008C   8320               ST      Z, R18
    684              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   0000008E   01FD               MOVW    R31:R30, R27:R26
   \   00000090   8102               LDD     R16, Z+2
   \   00000092   8113               LDD     R17, Z+3
   \   00000094   5F0F               SUBI    R16, 255
   \   00000096   4F1F               SBCI    R17, 255
   \   00000098   8302               STD     Z+2, R16
   \   0000009A   8313               STD     Z+3, R17
    685                                                                           // to ANSI standard !!!!
    686          
    687              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   0000009C   8100               LD      R16, Z
   \   0000009E   8111               LDD     R17, Z+1
   \   000000A0   8122               LDD     R18, Z+2
   \   000000A2   8133               LDD     R19, Z+3
   \   000000A4   0F02               ADD     R16, R18
   \   000000A6   1F13               ADC     R17, R19
   \   000000A8   01F8               MOVW    R31:R30, R17:R16
   \   000000AA   E003               LDI     R16, 3
   \   000000AC   8300               ST      Z, R16
   \   000000AE   01FD               MOVW    R31:R30, R27:R26
   \   000000B0   8102               LDD     R16, Z+2
   \   000000B2   8113               LDD     R17, Z+3
   \   000000B4   5F0F               SUBI    R16, 255
   \   000000B6   4F1F               SBCI    R17, 255
   \   000000B8   8302               STD     Z+2, R16
   \   000000BA   8313               STD     Z+3, R17
    688              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   000000BC   8100               LD      R16, Z
   \   000000BE   8111               LDD     R17, Z+1
   \   000000C0   8122               LDD     R18, Z+2
   \   000000C2   8133               LDD     R19, Z+3
   \   000000C4   0F02               ADD     R16, R18
   \   000000C6   1F13               ADC     R17, R19
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   8300               ST      Z, R16
   \   000000CE   01FD               MOVW    R31:R30, R27:R26
   \   000000D0   8102               LDD     R16, Z+2
   \   000000D2   8113               LDD     R17, Z+3
   \   000000D4   5F0F               SUBI    R16, 255
   \   000000D6   4F1F               SBCI    R17, 255
   \   000000D8   8302               STD     Z+2, R16
   \   000000DA   8313               STD     Z+3, R17
    689          
    690              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   000000DC   5001               SUBI    R16, 1
   \   000000DE   4010               SBCI    R17, 0
   \   000000E0   8306               STD     Z+6, R16
   \   000000E2   8317               STD     Z+7, R17
    691              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   000000E4   E001               LDI     R16, 1
   \   000000E6   8304               STD     Z+4, R16
   \   000000E8   E000               LDI     R16, 0
   \   000000EA   8305               STD     Z+5, R16
    692              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   000000EC   2F08               MOV     R16, R24
   \   000000EE   ....               RCALL   GoToSyncUART16552
    693              if (ch == 0) {                                           // Turn on TXE for channel
   \   000000F0   2388               TST     R24
   \   000000F2   F4A9               BRNE    ??Uart_BuildTail16552_0
    694                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   000000F4   ....               LDI     R16, LOW(TimerUART0)
   \   000000F6   ....               LDI     R17, (TimerUART0) >> 8
   \   000000F8   ........           CALL    OS_RetriggerTimer
    695                  U0_MCR |= RTS;                                    // set RTS on
   \   000000FC   9100220C           LDS     R16, 8716
   \   00000100   6002               ORI     R16, 0x02
   \   00000102   9300220C           STS     8716, R16
    696                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000106   E104               LDI     R16, 20
   \   00000108   E010               LDI     R17, 0
   \   0000010A   ........           CALL    OS_Delay
    697                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   0000010E   91E0....           LDS     R30, UART16552
   \   00000112   91F0....           LDS     R31, (UART16552 + 1)
   \   00000116   8100               LD      R16, Z
   \   00000118   93002208           STS     8712, R16
   \   0000011C   C016               RJMP    ??Uart_BuildTail16552_1
    698              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   0000011E   3081               CPI     R24, 1
   \   00000120   F4A1               BRNE    ??Uart_BuildTail16552_1
    699                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   00000122   ....               LDI     R16, LOW(TimerUART1)
   \   00000124   ....               LDI     R17, (TimerUART1) >> 8
   \   00000126   ........           CALL    OS_RetriggerTimer
    700                  U1_MCR |= RTS;                                      // set RTS on
   \   0000012A   91002204           LDS     R16, 8708
   \   0000012E   6002               ORI     R16, 0x02
   \   00000130   93002204           STS     8708, R16
    701                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000134   E104               LDI     R16, 20
   \   00000136   E010               LDI     R17, 0
   \   00000138   ........           CALL    OS_Delay
    702                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   0000013C   91E0....           LDS     R30, (UART16552 + 26)
   \   00000140   91F0....           LDS     R31, (UART16552 + 27)
   \   00000144   8100               LD      R16, Z
   \   00000146   93002200           STS     8704, R16
    703              }
    704          }
   \                     ??Uart_BuildTail16552_1:
   \   0000014A   9189               LD      R24, Y+
   \   0000014C   91A9               LD      R26, Y+
   \   0000014E   91B9               LD      R27, Y+
   \   00000150   9508               RET
    705          
    706          /*************************************************************************
    707          *
    708          * Build send request for system status on WIS
    709          *
    710          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine5_0:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   5F0F               SUBI    R16, 255
   \   00000006   4F1F               SBCI    R17, 255
   \   00000008   8302               STD     Z+2, R16
   \   0000000A   8313               STD     Z+3, R17
   \   0000000C   01D9               MOVW    R27:R26, R19:R18
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    711          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    712          
    713              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   91ED               LD      R30, X+
   \   00000010   91FD               LD      R31, X+
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E604               LDI     R16, 100
   \   0000001E                      REQUIRE ?Subroutine4
   \   0000001E                      ;               // Fall through to label ?Subroutine4
    714              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    715          
    716          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   8300               ST      Z, R16
   \   00000002   01FD               MOVW    R31:R30, R27:R26
   \   00000004   8102               LDD     R16, Z+2
   \   00000006   8113               LDD     R17, Z+3
   \   00000008   5F0F               SUBI    R16, 255
   \   0000000A   4F1F               SBCI    R17, 255
   \   0000000C   8302               STD     Z+2, R16
   \   0000000E   8313               STD     Z+3, R17
   \   00000010   91ED               LD      R30, X+
   \   00000012   91FD               LD      R31, X+
   \   00000014   910D               LD      R16, X+
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8300               ST      Z, R16
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   ........           JMP     ??Subroutine5_0
    717          
    718          /*************************************************************************
    719          *
    720          * Build send request for WIS protocoler on WIS
    721          *
    722          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    723          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    724          
    725              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000002   E12A               LDI     R18, 26
   \   00000004   9F02               MUL     R16, R18
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8122               LDD     R18, Z+2
   \   00000014   8133               LDD     R19, Z+3
   \   00000016   0FA2               ADD     R26, R18
   \   00000018   1FB3               ADC     R27, R19
   \   0000001A   E606               LDI     R16, 102
   \   0000001C   930C               ST      X, R16
   \   0000001E   8122               LDD     R18, Z+2
   \   00000020   8133               LDD     R19, Z+3
   \   00000022   5F2F               SUBI    R18, 255
   \   00000024   4F3F               SBCI    R19, 255
   \   00000026   8322               STD     Z+2, R18
   \   00000028   8333               STD     Z+3, R19
    726              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   0000002A   81A0               LD      R26, Z
   \   0000002C   81B1               LDD     R27, Z+1
   \   0000002E   0FA2               ADD     R26, R18
   \   00000030   1FB3               ADC     R27, R19
   \   00000032   E001               LDI     R16, 1
   \   00000034   930C               ST      X, R16
   \   00000036   8122               LDD     R18, Z+2
   \   00000038   8133               LDD     R19, Z+3
   \   0000003A   5F2F               SUBI    R18, 255
   \   0000003C   4F3F               SBCI    R19, 255
   \   0000003E   8322               STD     Z+2, R18
   \   00000040   8333               STD     Z+3, R19
    727              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   00000042   81A0               LD      R26, Z
   \   00000044   81B1               LDD     R27, Z+1
   \   00000046   0FA2               ADD     R26, R18
   \   00000048   1FB3               ADC     R27, R19
   \   0000004A   931C               ST      X, R17
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    728          
    729          }
   \   00000058   01DA               MOVW    R27:R26, R21:R20
   \   0000005A   9508               RET
    730          
    731          /*************************************************************************
    732          *
    733          * Build send request for measure data to Water ingress
    734          *
    735          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   930C               ST      X, R16
   \   00000002   8102               LDD     R16, Z+2
   \   00000004   8113               LDD     R17, Z+3
   \   00000006   5F0F               SUBI    R16, 255
   \   00000008   4F1F               SBCI    R17, 255
   \   0000000A   8302               STD     Z+2, R16
   \   0000000C   8313               STD     Z+3, R17
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   0FA0               ADD     R26, R16
   \   00000014   1FB1               ADC     R27, R17
   \   00000016   E001               LDI     R16, 1
   \   00000018   930C               ST      X, R16
   \   0000001A   8102               LDD     R16, Z+2
   \   0000001C   8113               LDD     R17, Z+3
   \   0000001E   5F0F               SUBI    R16, 255
   \   00000020   4F1F               SBCI    R17, 255
   \   00000022   8302               STD     Z+2, R16
   \   00000024   8313               STD     Z+3, R17
   \   00000026   81A0               LD      R26, Z
   \   00000028   81B1               LDD     R27, Z+1
   \   0000002A   0FA0               ADD     R26, R16
   \   0000002C   1FB1               ADC     R27, R17
   \   0000002E   E000               LDI     R16, 0
   \   00000030   930C               ST      X, R16
   \   00000032                      REQUIRE ??Subroutine5_0
   \   00000032                      ;               // Fall through to label ??Subroutine5_0

   \                                 In  segment CODE, align 2, keep-with-next
    736          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    737          
    738              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E605               LDI     R16, 101
   \   0000001C   ....               RJMP    ?Subroutine0
    739              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    740              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    741          
    742          }
    743          
    744          
    745          /*************************************************************************
    746          *
    747          * Build send request for GODA measurement
    748          *
    749          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    750          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    751          
    752              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   EA00               LDI     R16, 160
   \   0000001C                      REQUIRE ?Subroutine0
   \   0000001C                      ;               // Fall through to label ?Subroutine0
    753              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    754              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
    755          
    756          }
    757          
    758          /*************************************************************************
    759          *
    760          * Build send request for GODA device information
    761          *
    762          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    763          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    764          
    765              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   91ED               LD      R30, X+
   \   00000010   91FD               LD      R31, X+
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   EA01               LDI     R16, 161
   \   0000001E   ....               RJMP    ?Subroutine4
    766              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
    767          }
    768          
    769          /*************************************************************************
    770          *
    771          * Build datablock to AN-SGCNV
    772          *
    773          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    774          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   011C               MOVW    R3:R2, R25:R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F20               MOV     R18, R16
    775          
    776              char i;
    777          
    778              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000008   E043               LDI     R20, 3
   \   0000000A   E500               LDI     R16, 80
   \   0000000C   9F20               MUL     R18, R16
   \   0000000E   ....               LDI     R22, LOW(TData)
   \   00000010   ....               LDI     R23, (TData) >> 8
   \   00000012   0D60               ADD     R22, R0
   \   00000014   1D71               ADC     R23, R1
   \   00000016   018B               MOVW    R17:R16, R23:R22
   \   00000018   500C               SUBI    R16, 12
   \   0000001A   4F1B               SBCI    R17, 251
   \   0000001C   E13A               LDI     R19, 26
   \   0000001E   9F23               MUL     R18, R19
   \   00000020   ....               LDI     R30, LOW(UART16552)
   \   00000022   ....               LDI     R31, (UART16552) >> 8
   \   00000024   0DE0               ADD     R30, R0
   \   00000026   1DF1               ADC     R31, R1
   \   00000028   E050               LDI     R21, 0
   \   0000002A   C014               RJMP    ??Uart_BuildSndData_0
    779                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \                     ??Uart_BuildSndData_1:
   \   0000002C   01DB               MOVW    R27:R26, R23:R22
   \   0000002E   0FA4               ADD     R26, R20
   \   00000030   1FB5               ADC     R27, R21
   \   00000032   50AC               SUBI    R26, 12
   \   00000034   4FBB               SBCI    R27, 251
   \   00000036   912C               LD      R18, X
   \   00000038   81A0               LD      R26, Z
   \   0000003A   81B1               LDD     R27, Z+1
   \   0000003C   8002               LDD     R0, Z+2
   \   0000003E   8013               LDD     R1, Z+3
   \   00000040   0DA0               ADD     R26, R0
   \   00000042   1DB1               ADC     R27, R1
   \   00000044   932C               ST      X, R18
   \   00000046   8122               LDD     R18, Z+2
   \   00000048   8133               LDD     R19, Z+3
   \   0000004A   5F2F               SUBI    R18, 255
   \   0000004C   4F3F               SBCI    R19, 255
   \   0000004E   8322               STD     Z+2, R18
   \   00000050   8333               STD     Z+3, R19
    780              }
   \   00000052   9543               INC     R20
   \                     ??Uart_BuildSndData_0:
   \   00000054   01D8               MOVW    R27:R26, R17:R16
   \   00000056   9612               ADIW    R27:R26, 2
   \   00000058   918C               LD      R24, X
   \   0000005A   E090               LDI     R25, 0
   \   0000005C   9603               ADIW    R25:R24, 3
   \   0000005E   1748               CP      R20, R24
   \   00000060   0759               CPC     R21, R25
   \   00000062   F324               BRLT    ??Uart_BuildSndData_1
    781              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8350               ST      Z, R21
    782          }
   \   00000068   01C1               MOVW    R25:R24, R3:R2
   \   0000006A   91A9               LD      R26, Y+
   \   0000006C   91B9               LD      R27, Y+
   \   0000006E   9508               RET
    783          
    784          /*************************************************************************
    785          *
    786          * Build send request for measure data to AN-SGCNV
    787          *
    788          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    789          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    790          
    791              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E00A               LDI     R16, 10
   \   0000001C   ....               RJMP    ?Subroutine0
    792              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    793              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    794          
    795          }
    796          
    797          /*************************************************************************
    798          *
    799          * Build send request for raw data to AN-SGCNV
    800          *
    801          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    802          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    803          
    804              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E00D               LDI     R16, 13
   \   0000001C   ....               RJMP    ?Subroutine0
    805              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    806              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    807          
    808          }
    809          
    810          /*************************************************************************
    811          *
    812          * Build send request for cal data to AN-SGCNV
    813          *
    814          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    815          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    816          
    817              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E100               LDI     R16, 16
   \   0000001C   ....               RJMP    ?Subroutine0
    818              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    819              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    820          
    821          }
    822          
    823          /*************************************************************************
    824          *
    825          * Build send request for system status on AN_SGCNV
    826          *
    827          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    828          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    829          
    830              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E10B               LDI     R16, 27
   \   0000001C   ....               RJMP    ?Subroutine0
    831              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    832              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    833          
    834          }
    835          
    836          /*************************************************************************
    837          *
    838          * Build send request for card config on AN_SGCNV
    839          *
    840          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    841          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    842          
    843              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   91ED               LD      R30, X+
   \   00000010   91FD               LD      R31, X+
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E101               LDI     R16, 17
   \   0000001E   ....               RJMP    ?Subroutine4
    844              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    845          
    846          }
    847          
    848          /*************************************************************************
    849          *
    850          * Build send request for EEPROM data on AN_SGCNV
    851          *
    852          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    853          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F4A               MOV     R20, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F20               MOV     R18, R16
    854          
    855              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000006   E10A               LDI     R16, 26
   \   00000008   9F20               MUL     R18, R16
   \   0000000A   ....               LDI     R30, LOW(UART16552)
   \   0000000C   ....               LDI     R31, (UART16552) >> 8
   \   0000000E   0DE0               ADD     R30, R0
   \   00000010   1DF1               ADC     R31, R1
   \   00000012   81A0               LD      R26, Z
   \   00000014   81B1               LDD     R27, Z+1
   \   00000016   8102               LDD     R16, Z+2
   \   00000018   8113               LDD     R17, Z+3
   \   0000001A   0FA0               ADD     R26, R16
   \   0000001C   1FB1               ADC     R27, R17
   \   0000001E   E108               LDI     R16, 24
   \   00000020   930C               ST      X, R16
   \   00000022   8102               LDD     R16, Z+2
   \   00000024   8113               LDD     R17, Z+3
   \   00000026   5F0F               SUBI    R16, 255
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   8302               STD     Z+2, R16
   \   0000002C   8313               STD     Z+3, R17
    856              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   0000002E   81A0               LD      R26, Z
   \   00000030   81B1               LDD     R27, Z+1
   \   00000032   0FA0               ADD     R26, R16
   \   00000034   1FB1               ADC     R27, R17
   \   00000036   E001               LDI     R16, 1
   \   00000038   930C               ST      X, R16
   \   0000003A   8102               LDD     R16, Z+2
   \   0000003C   8113               LDD     R17, Z+3
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8302               STD     Z+2, R16
   \   00000044   8313               STD     Z+3, R17
    857              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   00000046   E0B0               LDI     R27, 0
   \   00000048   ....               SUBI    R18, LOW((-(TData + 1528) & 0xFFFF))
   \   0000004A   2FA2               MOV     R26, R18
   \   0000004C   ....               SBCI    R27, HIGH((-(TData + 1528) & 0xFFFF))
   \   0000004E   910C               LD      R16, X
   \   00000050   81A0               LD      R26, Z
   \   00000052   81B1               LDD     R27, Z+1
   \   00000054   8122               LDD     R18, Z+2
   \   00000056   0FA2               ADD     R26, R18
   \   00000058   1FB1               ADC     R27, R17
   \   0000005A   930C               ST      X, R16
   \   0000005C   8102               LDD     R16, Z+2
   \   0000005E   8113               LDD     R17, Z+3
   \   00000060   5F0F               SUBI    R16, 255
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   8302               STD     Z+2, R16
   \   00000066   8313               STD     Z+3, R17
    858          
    859          }
   \   00000068   2FA4               MOV     R26, R20
   \   0000006A   2FB3               MOV     R27, R19
   \   0000006C   9508               RET
    860          /*************************************************************************
    861          *
    862          *  Receive data on USARTs
    863          *
    864          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    865          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   2F80               MOV     R24, R16
    866          
    867              switch (UART16552[ch].RxState) {                  // check status
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F80               MUL     R24, R16
   \   0000000E   ....               LDI     R26, LOW(UART16552)
   \   00000010   ....               LDI     R27, (UART16552) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8902               LDD     R16, Z+18
   \   0000001A   2300               TST     R16
   \   0000001C   F409               BRNE    $+2+2
   \   0000001E   C05F               RJMP    ??ReceivePacketUart16552_0
   \   00000020   950A               DEC     R16
   \   00000022   F031               BREQ    ??ReceivePacketUart16552_1
   \   00000024   950A               DEC     R16
   \   00000026   F139               BREQ    ??ReceivePacketUart16552_2
   \   00000028   5008               SUBI    R16, 8
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C058               RJMP    ??ReceivePacketUart16552_0
   \   0000002E   C054               RJMP    ??ReceivePacketUart16552_3
    868              case SYNC :
    869                  // all functionallity in inerrupt routine
    870                  break;
    871              case HEADER :
    872                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   00000030   8506               LDD     R16, Z+14
   \   00000032   8517               LDD     R17, Z+15
   \   00000034   3003               CPI     R16, 3
   \   00000036   4010               SBCI    R17, 0
   \   00000038   F408               BRCC    $+2+2
   \   0000003A   C051               RJMP    ??ReceivePacketUart16552_0
    873                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    874                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000003C   8502               LDD     R16, Z+10
   \   0000003E   85F3               LDD     R31, Z+11
   \   00000040   2FE0               MOV     R30, R16
   \   00000042   8132               LDD     R19, Z+2
   \   00000044   E010               LDI     R17, 0
   \   00000046   8103               LDD     R16, Z+3
   \   00000048   2F20               MOV     R18, R16
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8B06               STD     Z+22, R16
   \   0000004E   8B37               STD     Z+23, R19
    875                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    876                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   00000050   E708               LDI     R16, 120
   \   00000052   8546               LDD     R20, Z+14
   \   00000054   8557               LDD     R21, Z+15
   \   00000056   1B04               SUB     R16, R20
   \   00000058   0B15               SBC     R17, R21
   \   0000005A   1720               CP      R18, R16
   \   0000005C   0731               CPC     R19, R17
   \   0000005E   F5E0               BRCC    ??ReceivePacketUart16552_3
   \   00000060   3027               CPI     R18, 7
   \   00000062   4030               SBCI    R19, 0
   \   00000064   F1C8               BRCS    ??ReceivePacketUart16552_3
    877                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   00000066   E002               LDI     R16, 2
   \   00000068   8B02               STD     Z+18, R16
    878                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   0000006A   8586               LDD     R24, Z+14
   \   0000006C   8597               LDD     R25, Z+15
   \   0000006E   9601               ADIW    R25:R24, 1
   \   00000070   8B80               STD     Z+16, R24
   \   00000072   8B91               STD     Z+17, R25
   \   00000074   C034               RJMP    ??ReceivePacketUart16552_0
    879                      } else {
    880                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    881                      }
    882                  }
    883                  break;
    884              case RECEIVE :
    885                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   00000076   8900               LDD     R16, Z+16
   \   00000078   8911               LDD     R17, Z+17
   \   0000007A   5F0F               SUBI    R16, 255
   \   0000007C   4F1F               SBCI    R17, 255
   \   0000007E   8B00               STD     Z+16, R16
   \   00000080   8B11               STD     Z+17, R17
   \   00000082   8926               LDD     R18, Z+22
   \   00000084   8937               LDD     R19, Z+23
   \   00000086   1702               CP      R16, R18
   \   00000088   0713               CPC     R17, R19
   \   0000008A   F148               BRCS    ??ReceivePacketUart16552_0
    886                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   0000008C   8502               LDD     R16, Z+10
   \   0000008E   8513               LDD     R17, Z+11
   \   00000090   0F02               ADD     R16, R18
   \   00000092   1F13               ADC     R17, R19
   \   00000094   5001               SUBI    R16, 1
   \   00000096   4010               SBCI    R17, 0
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   8100               LD      R16, Z
   \   0000009C   3003               CPI     R16, 3
   \   0000009E   F4E1               BRNE    ??ReceivePacketUart16552_3
    887                          if (CalcDSRxChecksum16552(ch)) {
   \   000000A0   2F08               MOV     R16, R24
   \   000000A2   ....               RCALL   CalcDSRxChecksum16552
   \   000000A4   2B01               OR      R16, R17
   \   000000A6   F0C1               BREQ    ??ReceivePacketUart16552_3
    888                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   000000A8   01FD               MOVW    R31:R30, R27:R26
   \   000000AA   8502               LDD     R16, Z+10
   \   000000AC   85F3               LDD     R31, Z+11
   \   000000AE   2FE0               MOV     R30, R16
   \   000000B0   8100               LD      R16, Z
   \   000000B2   3F0D               CPI     R16, 253
   \   000000B4   F489               BRNE    ??ReceivePacketUart16552_3
    889                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   000000B6   01FD               MOVW    R31:R30, R27:R26
   \   000000B8   E00A               LDI     R16, 10
   \   000000BA   8B02               STD     Z+18, R16
    890                                  if (ch == 0) {
   \   000000BC   2388               TST     R24
   \   000000BE   F421               BRNE    ??ReceivePacketUart16552_4
    891                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   000000C0   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000C2   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   C005               RJMP    ??ReceivePacketUart16552_5
    892                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_4:
   \   000000C8   3081               CPI     R24, 1
   \   000000CA   F449               BRNE    ??ReceivePacketUart16552_0
    893                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   000000CC   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000CE   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000D0   E002               LDI     R16, 2
   \                     ??ReceivePacketUart16552_5:
   \   000000D2   ........           CALL    OS_SignalEvent
   \   000000D6   C003               RJMP    ??ReceivePacketUart16552_0
    894                                  }
    895                              } else {
    896                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
    897                              }
    898                          } else {
    899                              GoToSyncUART16552(ch);                                // go to sync modus for recive
    900                          }
    901                      } else {
    902                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    903                      }
    904                  }
    905                  break;
    906              case HANDLE :
    907                  break;
    908              default :
    909                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_3:
   \   000000D8   2F08               MOV     R16, R24
   \   000000DA   ........           CALL    GoToSyncUART16552
    910                  break;
    911              }                                                           // end switch
    912              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_0:
   \   000000DE   01FD               MOVW    R31:R30, R27:R26
   \   000000E0   8506               LDD     R16, Z+14
   \   000000E2   8517               LDD     R17, Z+15
   \   000000E4   5F0F               SUBI    R16, 255
   \   000000E6   4F1F               SBCI    R17, 255
   \   000000E8   8706               STD     Z+14, R16
   \   000000EA   8717               STD     Z+15, R17
   \   000000EC   3708               CPI     R16, 120
   \   000000EE   E020               LDI     R18, 0
   \   000000F0   4010               SBCI    R17, 0
   \   000000F2   F010               BRCS    ??ReceivePacketUart16552_6
    913                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   000000F4   8726               STD     Z+14, R18
   \   000000F6   8727               STD     Z+15, R18
    914              }
    915          }
   \                     ??ReceivePacketUart16552_6:
   \   000000F8   ....               RJMP    ?Subroutine3
    916          
    917          
    918          /*************************************************************************
    919          *
    920          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    921          *
    922          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    923          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F10               MOV     R17, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    924          
    925              unsigned short cnt;
    926              unsigned char csum;
    927          
    928              csum = 0;
   \   00000008   E000               LDI     R16, 0
    929              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   3023               CPI     R18, 3
   \   0000000C   4030               SBCI    R19, 0
   \   0000000E   F0A0               BRCS    ??CalcDSTxChecksumUART16552_0
   \   00000010   E12A               LDI     R18, 26
   \   00000012   9F12               MUL     R17, R18
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   81A0               LD      R26, Z
   \   0000001C   81B1               LDD     R27, Z+1
   \   0000001E   9612               ADIW    R27:R26, 2
   \   00000020   9702               SBIW    R25:R24, 2
   \   00000022   ....               LDI     R19, (crc) >> 16
    930                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000024   2FE0               MOV     R30, R16
   \   00000026   E0F0               LDI     R31, 0
   \   00000028   910D               LD      R16, X+
   \   0000002A   27E0               EOR     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000030   BF3B               OUT     0x3B, R19
   \   00000032   9106               ELPM    R16, Z
    931              }
   \   00000034   9701               SBIW    R25:R24, 1
   \   00000036   F7B1               BRNE    ??CalcDSTxChecksumUART16552_1
    932              return csum;
   \                     ??CalcDSTxChecksumUART16552_0:
   \   00000038   01CA               MOVW    R25:R24, R21:R20
   \   0000003A   01DB               MOVW    R27:R26, R23:R22
   \   0000003C   9508               RET
    933          }
    934          
    935          /*************************************************************************
    936          *
    937          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    938          *
    939          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    940          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2E3A               MOV     R3, R26
   \   00000004   2F59               MOV     R21, R25
   \   00000006   2E28               MOV     R2, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    941          
    942              short cnt;
    943              unsigned char csum;
    944          
    945              csum = 0;
   \   00000008   E040               LDI     R20, 0
    946              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   E11A               LDI     R17, 26
   \   00000010   9F01               MUL     R16, R17
   \   00000012   ....               LDI     R26, LOW(UART16552)
   \   00000014   ....               LDI     R27, (UART16552) >> 8
   \   00000016   0DA0               ADD     R26, R0
   \   00000018   1DB1               ADC     R27, R1
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8502               LDD     R16, Z+10
   \   0000001E   8513               LDD     R17, Z+11
   \   00000020   8966               LDD     R22, Z+22
   \   00000022   8977               LDD     R23, Z+23
   \   00000024   5062               SUBI    R22, 2
   \   00000026   4070               SBCI    R23, 0
   \   00000028   ....               LDI     R19, (crc) >> 16
   \   0000002A   C00B               RJMP    ??CalcDSRxChecksum16552_0
    947                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum16552_1:
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   9121               LD      R18, Z+
   \   00000030   018F               MOVW    R17:R16, R31:R30
   \   00000032   2742               EOR     R20, R18
   \   00000034   2FE4               MOV     R30, R20
   \   00000036   E0F0               LDI     R31, 0
   \   00000038   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000003C   BF3B               OUT     0x3B, R19
   \   0000003E   9146               ELPM    R20, Z
    948              }
   \   00000040   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum16552_0:
   \   00000042   1786               CP      R24, R22
   \   00000044   0797               CPC     R25, R23
   \   00000046   F390               BRCS    ??CalcDSRxChecksum16552_1
    949              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \   00000048   961A               ADIW    R27:R26, 10
   \   0000004A   91ED               LD      R30, X+
   \   0000004C   91FC               LD      R31, X
   \   0000004E   961B               ADIW    R27:R26, 11
   \   00000050   910D               LD      R16, X+
   \   00000052   911C               LD      R17, X
   \   00000054   0FE0               ADD     R30, R16
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   9732               SBIW    R31:R30, 2
   \   0000005A   8100               LD      R16, Z
   \   0000005C   1740               CP      R20, R16
   \   0000005E   F411               BRNE    ??CalcDSRxChecksum16552_2
    950                  return true;
   \   00000060   E001               LDI     R16, 1
   \   00000062   C001               RJMP    ??CalcDSRxChecksum16552_3
    951              } else {
    952                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   00000064   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   00000066   E010               LDI     R17, 0
   \   00000068   2D82               MOV     R24, R2
   \   0000006A   2F95               MOV     R25, R21
   \   0000006C   2DA3               MOV     R26, R3
   \   0000006E   91B9               LD      R27, Y+
   \   00000070   9508               RET
    953              }
    954          }
    955          
    956          /*************************************************************************
    957          *
    958          * Goes to sync mode
    959          *
    960          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    961          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    962          
    963              if (ch < 2) {
   \   00000000   3002               CPI     R16, 2
   \   00000002   F468               BRCC    ??GoToSyncUART16552_0
    964                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART16552)
   \   0000000A   ....               LDI     R31, (UART16552) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E000               LDI     R16, 0
   \   00000012   8B03               STD     Z+19, R16
    965                  UART16552[ch].RxState = SYNC;
   \   00000014   8B02               STD     Z+18, R16
    966                  UART16552[ch].RxFirst = 0;
   \   00000016   8704               STD     Z+12, R16
   \   00000018   8705               STD     Z+13, R16
    967                  UART16552[ch].RxPacklen = 0;
   \   0000001A   8B06               STD     Z+22, R16
   \   0000001C   8B07               STD     Z+23, R16
    968              }
    969          }
   \                     ??GoToSyncUART16552_0:
   \   0000001E   9508               RET
    970          
    971          /*************************************************************************
    972          *
    973          *  Empty rx buffer on PC16552 UART
    974          *
    975          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    976          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    977          
    978              switch (uartno) {
   \   00000000   2300               TST     R16
   \   00000002   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000004   950A               DEC     R16
   \   00000006   F041               BREQ    ??EmptyRxBuf16552_1
   \   00000008   9508               RET
    979              case 0:
    980                  do {
    981                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000A   91002208           LDS     R16, 8712
    982                  } while (U0_LSR & DATA_READY);
   \   0000000E   9100220D           LDS     R16, 8717
   \   00000012   FD00               SBRC    R16, 0
   \   00000014   CFFA               RJMP    ??EmptyRxBuf16552_0
   \   00000016   9508               RET
    983                  break;
    984              case 1:
    985                  do {
    986                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   00000018   91002200           LDS     R16, 8704
    987                  } while (U1_LSR & DATA_READY);
   \   0000001C   91002205           LDS     R16, 8709
   \   00000020   FD00               SBRC    R16, 0
   \   00000022   CFFA               RJMP    ??EmptyRxBuf16552_1
    988                  break;
    989              }
    990          }
   \   00000024   9508               RET
    991          
    992          /*************************************************************************
    993          *
    994          *  Init the PC16552 UART
    995          *
    996          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    997          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    998          
    999              /*--- Configure UART data block ---*/
   1000              UART16552[channel].TxFirst = 0x00;
   \   00000000   E11A               LDI     R17, 26
   \   00000002   9F01               MUL     R16, R17
   \   00000004   ....               LDI     R30, LOW(UART16552)
   \   00000006   ....               LDI     R31, (UART16552) >> 8
   \   00000008   0DE0               ADD     R30, R0
   \   0000000A   1DF1               ADC     R31, R1
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   8312               STD     Z+2, R17
   \   00000010   8313               STD     Z+3, R17
   1001              UART16552[channel].TxLast = 0x00;
   \   00000012   8314               STD     Z+4, R17
   \   00000014   8315               STD     Z+5, R17
   1002              UART16552[channel].TxCount = 0x00;
   \   00000016   8316               STD     Z+6, R17
   \   00000018   8317               STD     Z+7, R17
   1003              UART16552[channel].RxFirst = 0x00;
   \   0000001A   8714               STD     Z+12, R17
   \   0000001C   8715               STD     Z+13, R17
   1004              UART16552[channel].RxLast = 0x00;
   \   0000001E   8716               STD     Z+14, R17
   \   00000020   8717               STD     Z+15, R17
   1005              UART16552[channel].RxCount = 0x00;
   \   00000022   8B10               STD     Z+16, R17
   \   00000024   8B11               STD     Z+17, R17
   1006              UART16552[channel].RxState = SYNC;
   \   00000026   8B12               STD     Z+18, R17
   1007              UART16552[channel].SyncCnt = 0;
   \   00000028   8B13               STD     Z+19, R17
   1008              UART16552[channel].TxStatus = 0x00;
   \   0000002A   8710               STD     Z+8, R17
   1009          
   1010              switch (channel) {
   \   0000002C   2300               TST     R16
   \   0000002E   F019               BREQ    ??Init16552_0
   \   00000030   950A               DEC     R16
   \   00000032   F179               BREQ    ??Init16552_1
   \   00000034   9508               RET
   1011              case 0x00 :
   1012                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   00000036   EF0A               LDI     R16, 250
   \   00000038   9300....           STS     (UART16552 + 20), R16
   \   0000003C   9310....           STS     (UART16552 + 21), R17
   1013                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   00000040   ....               LDI     R16, LOW(TxBuf16552Ch0)
   \   00000042   ....               LDI     R17, (TxBuf16552Ch0) >> 8
   \   00000044   9300....           STS     UART16552, R16
   \   00000048   9310....           STS     (UART16552 + 1), R17
   1014                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   0000004C   ....               LDI     R16, LOW(RxBuf16552Ch0)
   \   0000004E   ....               LDI     R17, (RxBuf16552Ch0) >> 8
   \   00000050   9300....           STS     (UART16552 + 10), R16
   \   00000054   9310....           STS     (UART16552 + 11), R17
   1015                  U0_LCR = 0x80;          // set DLAB
   \   00000058   E800               LDI     R16, 128
   \   0000005A   9300220B           STS     8715, R16
   1016                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000005E   E408               LDI     R16, 72
   \   00000060   EE18               LDI     R17, 232
   \   00000062   E021               LDI     R18, 1
   \   00000064   E030               LDI     R19, 0
   \   00000066   ........           CALL    ?UL_DIVMOD_S_L03
   \   0000006A   93002208           STS     8712, R16
   1017                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   0000006E   93102209           STS     8713, R17
   1018                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000072   E003               LDI     R16, 3
   \   00000074   9300220B           STS     8715, R16
   1019                  U0_FCR = 0x01;          // enable FIFO ..
   \   00000078   E001               LDI     R16, 1
   \   0000007A   9300220A           STS     8714, R16
   1020                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   0000007E   EC01               LDI     R16, 193
   \   00000080   9300220A           STS     8714, R16
   1021                  U0_IER = 0x03;          // enable TX and RX int.
   \   00000084   E003               LDI     R16, 3
   \   00000086   93002209           STS     8713, R16
   1022                  U0_MCR = 0x00;          // RTS off
   \   0000008A   E000               LDI     R16, 0
   \   0000008C   9300220C           STS     8716, R16
   1023                  break;
   \   00000090   9508               RET
   1024              case 0x01 :
   1025                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   00000092   EF0A               LDI     R16, 250
   \   00000094   9300....           STS     (UART16552 + 46), R16
   \   00000098   9310....           STS     (UART16552 + 47), R17
   1026                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   0000009C   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   0000009E   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   000000A0   9300....           STS     (UART16552 + 26), R16
   \   000000A4   9310....           STS     (UART16552 + 27), R17
   1027                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   000000A8   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   000000AA   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   000000AC   9300....           STS     (UART16552 + 36), R16
   \   000000B0   9310....           STS     (UART16552 + 37), R17
   1028                  U1_LCR = 0x80;          // set DLAB
   \   000000B4   E800               LDI     R16, 128
   \   000000B6   93002203           STS     8707, R16
   1029                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000000BA   E408               LDI     R16, 72
   \   000000BC   EE18               LDI     R17, 232
   \   000000BE   E021               LDI     R18, 1
   \   000000C0   E030               LDI     R19, 0
   \   000000C2   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000C6   93002200           STS     8704, R16
   1030                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000CA   93102201           STS     8705, R17
   1031                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000CE   E003               LDI     R16, 3
   \   000000D0   93002203           STS     8707, R16
   1032                  U1_FCR = 0x01;          // enable FIFO ..
   \   000000D4   E001               LDI     R16, 1
   \   000000D6   93002202           STS     8706, R16
   1033                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000000DA   EC01               LDI     R16, 193
   \   000000DC   93002202           STS     8706, R16
   1034                  U1_IER = 0x03;          // enable TX and RX int.
   \   000000E0   E003               LDI     R16, 3
   \   000000E2   93002201           STS     8705, R16
   1035                  U1_MCR = 0x00;          // RTS off
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   93002204           STS     8708, R16
   1036                  break;
   1037              default:
   1038                  break;
   1039              }
   1040          }
   \   000000EC   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   CalcDSRxChecksum16552
      0      2   CalcDSTxChecksumUART16552
      1      2   CheckActionUart16552
        1      2   -> ReceiveCData
        1      2   -> ReceiveCardEEPROMData
        1      2   -> ReceiveCardStatus
        1      2   -> ReceiveConfigData
        1      2   -> ReceivePTOData
        1      2   -> ReceiveRData
        1      2   -> ReceiveRadarData
        1      2   -> ReceiveRadarInfo
        1      2   -> ReceiveWHData
        1      2   -> ReceiveWISData
        1      2   -> ReceiveWISStatus
        1      2   -> ReceiveWISXData
      0      2   EmptyRxBuf16552
     14      2   ExtRS485Ctl
       14      2   -> Init16552
       14      2   -> OS_Delay
       14      2   -> OS_WaitEventTimed
       14      2   -> ReadEEPROMByte
       14      2   -> Uart_BuildReqC16552
       14      2   -> Uart_BuildReqCardStatus
       14      2   -> Uart_BuildReqEEPROMData
       14      2   -> Uart_BuildReqM16552
       14      2   -> Uart_BuildReqR16552
       14      2   -> Uart_BuildReqRadarData
       14      2   -> Uart_BuildReqWISData
       14      2   -> Uart_BuildReqWISXData
       14      2   -> Uart_BuildTail16552
       14      2 ?SS_SHR_L02
       14      2 ?S_SHL_L02
      2      2   ExtRS485Rec
        2      2   -> OS_Delay
        2      2   -> OS_SignalEvent
        2      2   -> OS_WaitEventTimed
        2      2   -> Usart16552CheckPackage
        2      2 ?SS_SHR_L02
        2      2 ?S_SHL_L02
      0      2   GoToSyncUART16552
      0      2   Init16552
        0      2 ?UL_DIVMOD_S_L03
      8      2   ReceiveCData
      0      2   ReceiveCardEEPROMData
      0      2   ReceiveCardStatus
      2      2   ReceiveConfigData
      7      2   ReceivePTOData
        7      2   -> OS_Unuse
        7      2   -> OS_Use
      4      2   ReceivePacketUart16552
        4      2   -> CalcDSRxChecksum16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_SignalEvent
      8      2   ReceiveRData
      2      2   ReceiveRadarData
      8      2   ReceiveRadarInfo
        8      2   -> atol
      3      2   ReceiveWHData
        3      2   -> OS_Unuse
        3      2   -> OS_Use
        3      2 ?S_SHL_L02
      4      2   ReceiveWISData
        4      2 ?F_DIV_S_L04
        4      2 ?SL2F_S_L04
        4      2 ?UL2F_S_L04
      0      2   ReceiveWISStatus
      0      2   ReceiveWISXData
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
      0      2   Uart_BuildReqC16552
      0      2   Uart_BuildReqCardStatus
      0      2   Uart_BuildReqConfig
      0      2   Uart_BuildReqEEPROMData
      0      2   Uart_BuildReqM16552
      0      2   Uart_BuildReqR16552
      0      2   Uart_BuildReqRadarData
      0      2   Uart_BuildReqRadarInfo
      0      2   Uart_BuildReqWISCardStatus
      0      2   Uart_BuildReqWISData
      0      2   Uart_BuildReqWISXData
      2      2   Uart_BuildSndData
      3      2   Uart_BuildTail16552
        3      2   -> CalcDSTxChecksumUART16552
        3      2   -> GoToSyncUART16552
        3      2   -> OS_Delay
        3      2   -> OS_RetriggerTimer
        3      2   -> Uart_BuildHeader16552
      7      2   Usart16552CheckPackage
        7      2   -> CheckActionUart16552
        7      2   -> GoToSyncUART16552


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ??Subroutine5_0
      50  ?Subroutine0
      18  ?Subroutine1
      16  ?Subroutine2
      10  ?Subroutine3
      38  ?Subroutine4
     114  CalcDSRxChecksum16552
      62  CalcDSTxChecksumUART16552
     200  CheckActionUart16552
      38  EmptyRxBuf16552
    1744  ExtRS485Ctl
     496  ExtRS485Rec
      32  GoToSyncUART16552
     238  Init16552
     172  ReceiveCData
      82  ReceiveCardEEPROMData
      72  ReceiveCardStatus
     128  ReceiveConfigData
     218  ReceivePTOData
     250  ReceivePacketUart16552
     172  ReceiveRData
     190  ReceiveRadarData
     120  ReceiveRadarInfo
     260  ReceiveWHData
     214  ReceiveWISData
     106  ReceiveWISStatus
      90  ReceiveWISXData
       8  SetRS4Port
      12  TimoutUART0
      12  TimoutUART1
      88  Uart_BuildHeader16552
      30  Uart_BuildReqC16552
      30  Uart_BuildReqCardStatus
      32  Uart_BuildReqConfig
     110  Uart_BuildReqEEPROMData
      30  Uart_BuildReqM16552
      30  Uart_BuildReqR16552
      28  Uart_BuildReqRadarData
      32  Uart_BuildReqRadarInfo
      30  Uart_BuildReqWISCardStatus
      30  Uart_BuildReqWISData
      92  Uart_BuildReqWISXData
     112  Uart_BuildSndData
     338  Uart_BuildTail16552
     102  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 6 292 bytes in segment CODE
 
 6 292 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 4
