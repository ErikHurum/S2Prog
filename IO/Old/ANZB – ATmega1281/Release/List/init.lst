###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       19/Dec/2022  14:35:48
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1281\Src\init.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW5D12.tmp ("D:\S2Prog\IO\ANZB –
#        ATmega1281\Src\init.c" --cpu=m1281 -ms -o "D:\S2Prog\IO\ANZB –
#        ATmega1281\Release\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\ANZB – ATmega1281\Release\List" -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB – ATmega1281\INC\\"
#        -I "D:\S2Prog\IO\ANZB – ATmega1281\..\..\SHARED\INC\\" --eeprom_size
#        4096 --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1281\Release\List\init.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1281\Release\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1281\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7c
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x75
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x47
   \   union <unnamed> volatile __io _A_OCR0A
   \                     _A_OCR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x44
   \   union <unnamed> volatile __io _A_TCCR0A
   \                     _A_TCCR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*
     14          **===========================================================================
     15          ** Init the system according to board type
     16          **===========================================================================
     17          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     18          void InitSystem(void) {
   \                     InitSystem:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     19          
     20              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   B904               OUT     0x04, R16
     21          //    PORTB   =  0xc;
     22              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000004   B103               IN      R16, 0x03
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     23          #if (OS_UART == 0)
     24              UnitID = 0x00; //AStmark  for test
     25          #endif
     26          
     27              Init_CPU();                         // init all processes
   \   00000010   ....               RCALL   Init_CPU
     28              Init_IO();
   \   00000012   ....               RCALL   Init_IO
     29              Init_TMR() ;
   \   00000014   9100....           LDS     R16, UnitID
   \   00000018   2300               TST     R16
   \   0000001A   F031               BREQ    ??InitSystem_0
   \   0000001C   950A               DEC     R16
   \   0000001E   F441               BRNE    ??InitSystem_1
   \   00000020   E909               LDI     R16, 153
   \   00000022   BD04               OUT     0x24, R16
   \   00000024   E007               LDI     R16, 7
   \   00000026   C003               RJMP    ??InitSystem_2
   \                     ??InitSystem_0:
   \   00000028   E909               LDI     R16, 153
   \   0000002A   BD04               OUT     0x24, R16
   \   0000002C   E003               LDI     R16, 3
   \                     ??InitSystem_2:
   \   0000002E   BD07               OUT     0x27, R16
     30          #if (OS_UART != 0)
     31              Init_USART(0, 38400) ;              // 
   \                     ??InitSystem_1:
   \   00000030   E040               LDI     R20, 0
   \   00000032   E956               LDI     R21, 150
   \   00000034   E060               LDI     R22, 0
   \   00000036   E070               LDI     R23, 0
   \   00000038   E000               LDI     R16, 0
   \   0000003A   ....               RCALL   Init_USART
     32          #endif
     33              Init_USART(1, 38400) ;              //    
   \   0000003C   E040               LDI     R20, 0
   \   0000003E   E956               LDI     R21, 150
   \   00000040   E060               LDI     R22, 0
   \   00000042   E070               LDI     R23, 0
   \   00000044   E001               LDI     R16, 1
   \   00000046   ....               RCALL   Init_USART
     34              Init_AD();
   \   00000048   ....               RCALL   Init_AD
     35              Init_Values();                      // init the values in the system
     36          
     37              ADCSRA |= 0x40 ;                     //start the AD convertion
   \   0000004A   9100007A           LDS     R16, 122
   \   0000004E   6400               ORI     R16, 0x40
   \   00000050   9300007A           STS     122, R16
     38          }
   \   00000054   9508               RET
   \   00000056                      REQUIRE _A_DDRB
   \   00000056                      REQUIRE _A_PINB
   \   00000056                      REQUIRE _A_ADCSRA
   \   00000056                      REQUIRE _A_TCCR0A
   \   00000056                      REQUIRE _A_OCR0A
     39          
     40          /*
     41          **===========================================================================
     42          ** Init the CPU related registers
     43          **===========================================================================
     44          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     45          void Init_CPU( void ) {
   \                     Init_CPU:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     46          
     47              __disable_interrupt();
   \   00000000   94F8               CLI
     48          
     49              /*--- Configure CPU and interrupts ---*/
     50              switch (UnitID) {
   \   00000002   9100....           LDS     R16, UnitID
   \   00000006   2300               TST     R16
   \   00000008   F019               BREQ    ??Init_CPU_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F069               BREQ    ??Init_CPU_1
   \   0000000E   C016               RJMP    ??Init_CPU_2
     51              case AN_ZB485:                  // AN-ZB485 
     52                  MCUCR = 0xc0 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_0:
   \   00000010   EC00               LDI     R16, 192
   \   00000012   BF05               OUT     0x35, R16
     53                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB0D               OUT     0x1D, R16
     54                  EICRA = 0xAf ;        // External interrupt control register, 0,1 raising, rest faling
   \   00000018   EA0F               LDI     R16, 175
   \   0000001A   9300....           STS     _A_EICRA, R16
     55                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000001E   EA0A               LDI     R16, 170
   \   00000020   9300....           STS     _A_EICRB, R16
     56                  EIMSK = 0x03 ;        // External interrupt mask register, int 0 and 1 on 
   \   00000024   E003               LDI     R16, 3
   \   00000026   C009               RJMP    ??Init_CPU_3
     57                  break;
     58              case AN_ZBANA:                  // AN-ZBANA
     59                  MCUCR = 0x00 ;        // MCU control register wait state
   \                     ??Init_CPU_1:
   \   00000028   E000               LDI     R16, 0
   \   0000002A   BF05               OUT     0x35, R16
     60                  EIMSK = 0x00 ;        // External interrupt mask register , all off
   \   0000002C   BB0D               OUT     0x1D, R16
     61                  EICRA = 0xAA ;        // External interrupt control register, o on faling edge
   \   0000002E   EA0A               LDI     R16, 170
   \   00000030   9300....           STS     _A_EICRA, R16
     62                  EICRB = 0xAA ;        // External interrupt control register 
   \   00000034   9300....           STS     _A_EICRB, R16
     63                  EIMSK = 0x01 ;        // External interrupt mask register, int 0 on 
   \   00000038   E001               LDI     R16, 1
   \                     ??Init_CPU_3:
   \   0000003A   BB0D               OUT     0x1D, R16
     64                  break;
     65              }
     66              XMCRA = 0x00 ;       // maximum wait states
   \                     ??Init_CPU_2:
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   9300....           STS     _A_XMCRA, R16
     67              XMCRB = 0x07 ;       // Full portC + bus keeper
   \   00000042   E007               LDI     R16, 7
   \   00000044   9300....           STS     _A_XMCRB, R16
     68              SREG  = 0x80 ;        // global interrupt
   \   00000048   E800               LDI     R16, 128
   \   0000004A   BF0F               OUT     0x3F, R16
     69              //XDIV  = 0x00 ;     // Init valuse used 0x00v XXX
     70          
     71              RestartStatus = MCUCR;       // Remember reset source
   \   0000004C   B705               IN      R16, 0x35
   \   0000004E   9300....           STS     RestartStatus, R16
     72              MCUCR = 0x00;              // and reset
   \   00000052   E000               LDI     R16, 0
   \   00000054   BF05               OUT     0x35, R16
     73              /*--- Initialize buffer ---*/
     74              WriteCount = 0;
   \   00000056   9300....           STS     WriteCount, R16
     75          
     76          }
   \   0000005A   9508               RET
   \   0000005C                      REQUIRE _A_MCUCR
   \   0000005C                      REQUIRE _A_EIMSK
   \   0000005C                      REQUIRE _A_EICRA
   \   0000005C                      REQUIRE _A_EICRB
   \   0000005C                      REQUIRE _A_XMCRA
   \   0000005C                      REQUIRE _A_XMCRB
   \   0000005C                      REQUIRE _A_SREG
     77          
     78          /*
     79          **===========================================================================
     80          ** Init the watchdog registers
     81          **===========================================================================
     82          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     83          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   94F8               CLI
     84          
     85              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
     86              WDTCSR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   9300....           STS     _A_WDTCSR, R16
     87              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
     88          
     89          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCSR
     90          
     91          /*
     92          **===========================================================================
     93          ** Init the IO related registers
     94          **===========================================================================
     95          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     96          void Init_IO( void ) {
   \                     Init_IO:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     97          
     98              /*--- Initialize the data registers, output value and input pullup ---*/
     99              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   2300               TST     R16
   \   00000006   F019               BREQ    ??Init_IO_0
   \   00000008   950A               DEC     R16
   \   0000000A   F0D9               BREQ    ??Init_IO_1
   \   0000000C   9508               RET
    100              case AN_ZB485:                  // AN-ZB485  
    101                  DDRA   =  0xff ;      // Port A data direction (out), external bus
   \                     ??Init_IO_0:
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   B901               OUT     0x01, R16
    102                  PORTA  =  0x00 ;      // Port A data
   \   00000012   E000               LDI     R16, 0
   \   00000014   B902               OUT     0x02, R16
    103                  DDRB   =  0x10 ;      // Port B data direction, bit 0, 4-7 out
   \   00000016   E100               LDI     R16, 16
   \   00000018   B904               OUT     0x04, R16
    104                  PORTB  =  0x00 ;      // Port B data   
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   B905               OUT     0x05, R16
    105                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   B907               OUT     0x07, R16
    106                  PORTC  =  0x00 ;      // Port C data
   \   00000022   E000               LDI     R16, 0
   \   00000024   B908               OUT     0x08, R16
    107                  DDRD   =  0x00 ;      // Port D data direction, all in except output to osc and txd
   \   00000026   B90A               OUT     0x0A, R16
    108                  PORTD  =  0xff ;      // Port D data pullup on int fro AD
   \   00000028   EF0F               LDI     R16, 255
   \   0000002A   B90B               OUT     0x0B, R16
    109                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   0000002C   EF0E               LDI     R16, 254
   \   0000002E   B90D               OUT     0x0D, R16
    110                  PORTE  =  0xf0 ;      // Port E data 
   \   00000030   EF00               LDI     R16, 240
   \   00000032   B90E               OUT     0x0E, R16
    111                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000034   E000               LDI     R16, 0
   \   00000036   BB00               OUT     0x10, R16
    112                  PORTF  =  0x00 ;      // Port F data 
   \   00000038   BB01               OUT     0x11, R16
    113                  DDRG   =  0x07 ;      // Port G data direction, port 1,2,3 out
   \   0000003A   E007               LDI     R16, 7
   \   0000003C   BB03               OUT     0x13, R16
    114                  PORTG  =  0x03 ;      // Port G data 
   \   0000003E   E003               LDI     R16, 3
   \   00000040   C018               RJMP    ??Init_IO_2
    115                  break;
    116              case AN_ZBANA:                  // AN-ZBANA
    117                  DDRA   =  0x00 ;      // Port A data direction in (not used)
   \                     ??Init_IO_1:
   \   00000042   E000               LDI     R16, 0
   \   00000044   B901               OUT     0x01, R16
    118                  PORTA  =  0x00 ;      // Port A data
   \   00000046   B902               OUT     0x02, R16
    119                  DDRB   =  0xF1 ;      // Port B data direction, bit 0, 4-7 out
   \   00000048   EF01               LDI     R16, 241
   \   0000004A   B904               OUT     0x04, R16
    120                  PORTB  =  0x00 ;      // Port B data   
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   B905               OUT     0x05, R16
    121                  DDRC   =  0xFF ;      // Port C data direction, all out
   \   00000050   EF0F               LDI     R16, 255
   \   00000052   B907               OUT     0x07, R16
    122                  PORTC  =  0x00 ;      // Port C data
   \   00000054   E000               LDI     R16, 0
   \   00000056   B908               OUT     0x08, R16
    123                  DDRD   =  0x02 ;      // Port D data direction, all in except output to osc and txd
   \   00000058   E002               LDI     R16, 2
   \   0000005A   B90A               OUT     0x0A, R16
    124                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD
   \   0000005C   EF01               LDI     R16, 241
   \   0000005E   B90B               OUT     0x0B, R16
    125                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000060   EF0E               LDI     R16, 254
   \   00000062   B90D               OUT     0x0D, R16
    126                  PORTE  =  0x00 ;      // Port E data 
   \   00000064   E000               LDI     R16, 0
   \   00000066   B90E               OUT     0x0E, R16
    127                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000068   BB00               OUT     0x10, R16
    128                  PORTF  =  0x00 ;      // Port F data 
   \   0000006A   BB01               OUT     0x11, R16
    129                  DDRG   =  0x10 ;      // Port G data direction, bit 5 out
   \   0000006C   E100               LDI     R16, 16
   \   0000006E   BB03               OUT     0x13, R16
    130                  PORTG  =  0x00 ;      // Port G data 
   \   00000070   E000               LDI     R16, 0
   \                     ??Init_IO_2:
   \   00000072   BB04               OUT     0x14, R16
    131                  break;
    132              default:
    133                  break;
    134              }    
    135          }
   \   00000074   9508               RET
   \   00000076                      REQUIRE _A_DDRA
   \   00000076                      REQUIRE _A_PORTA
   \   00000076                      REQUIRE _A_DDRB
   \   00000076                      REQUIRE _A_PORTB
   \   00000076                      REQUIRE _A_DDRC
   \   00000076                      REQUIRE _A_PORTC
   \   00000076                      REQUIRE _A_DDRD
   \   00000076                      REQUIRE _A_PORTD
   \   00000076                      REQUIRE _A_DDRE
   \   00000076                      REQUIRE _A_PORTE
   \   00000076                      REQUIRE _A_DDRF
   \   00000076                      REQUIRE _A_PORTF
   \   00000076                      REQUIRE _A_DDRG
   \   00000076                      REQUIRE _A_PORTG
    136          
    137          /*
    138          **===========================================================================
    139          ** Init the timer related registers
    140          **===========================================================================
    141          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    142          void Init_TMR( void ) {
   \                     Init_TMR:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    143              /*--- Timer control (disable clock inputs) ---*/
    144          
    145              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   2300               TST     R16
   \   00000006   F019               BREQ    ??Init_TMR_0
   \   00000008   950A               DEC     R16
   \   0000000A   F029               BREQ    ??Init_TMR_1
   \   0000000C   9508               RET
    146              case AN_ZB485:                  // AN-ZB485
    147                  TCCR0A   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_0:
   \   0000000E   E909               LDI     R16, 153
   \   00000010   BD04               OUT     0x24, R16
    148                  OCR0A    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
   \   00000012   E003               LDI     R16, 3
   \   00000014   C003               RJMP    ??Init_TMR_2
    149                  break;
    150              case AN_ZBANA:                  // AN-ZBANA
    151                  TCCR0A   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_1:
   \   00000016   E909               LDI     R16, 153
   \   00000018   BD04               OUT     0x24, R16
    152                  OCR0A    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
   \   0000001A   E007               LDI     R16, 7
   \                     ??Init_TMR_2:
   \   0000001C   BD07               OUT     0x27, R16
    153                  break;
    154              default:
    155                  break;
    156              }
    157          
    158          } 
   \   0000001E   9508               RET
   \   00000020                      REQUIRE _A_TCCR0A
   \   00000020                      REQUIRE _A_OCR0A
    159          
    160          /*
    161          **===========================================================================
    162          ** Init the USARTs registers
    163          **===========================================================================
    164          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    165          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    166          
    167          
    168              /*--- Configure UART data block ---*/
    169              UART[channel].TxFirst   = 0x00;
   \   00000000   E11A               LDI     R17, 26
   \   00000002   9F01               MUL     R16, R17
   \   00000004   ....               LDI     R30, LOW(UART)
   \   00000006   ....               LDI     R31, (UART) >> 8
   \   00000008   0DE0               ADD     R30, R0
   \   0000000A   1DF1               ADC     R31, R1
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   8312               STD     Z+2, R17
   \   00000010   8313               STD     Z+3, R17
    170              UART[channel].TxLast    = 0x00;
   \   00000012   8314               STD     Z+4, R17
   \   00000014   8315               STD     Z+5, R17
    171              UART[channel].TxCount   = 0x00;
   \   00000016   8316               STD     Z+6, R17
   \   00000018   8317               STD     Z+7, R17
    172              UART[channel].RxFirst   = 0x00;
   \   0000001A   8714               STD     Z+12, R17
   \   0000001C   8715               STD     Z+13, R17
    173              UART[channel].RxLast    = 0x00;
   \   0000001E   8716               STD     Z+14, R17
   \   00000020   8717               STD     Z+15, R17
    174              UART[channel].RxCount   = 0x00;
   \   00000022   8B10               STD     Z+16, R17
   \   00000024   8B11               STD     Z+17, R17
    175              UART[channel].RxState   = SYNC;
   \   00000026   8B12               STD     Z+18, R17
    176              UART[channel].SyncCnt   = 0 ;
   \   00000028   8B13               STD     Z+19, R17
    177              UART[channel].TxStatus  = 0x00;
   \   0000002A   8710               STD     Z+8, R17
    178          
    179              switch (channel) {
   \   0000002C   2300               TST     R16
   \   0000002E   F019               BREQ    ??Init_USART_0
   \   00000030   950A               DEC     R16
   \   00000032   F151               BREQ    ??Init_USART_1
   \   00000034   9508               RET
    180              case 0x00 :          
    181                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   00000036   EF0A               LDI     R16, 250
   \   00000038   9300....           STS     (UART + 20), R16
   \   0000003C   9310....           STS     (UART + 21), R17
    182                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   00000040   ....               LDI     R16, LOW(TxBufferCh0)
   \   00000042   ....               LDI     R17, (TxBufferCh0) >> 8
   \   00000044   9300....           STS     UART, R16
   \   00000048   9310....           STS     (UART + 1), R17
    183                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   0000004C   ....               LDI     R16, LOW(RxBufferCh0)
   \   0000004E   ....               LDI     R17, (RxBufferCh0) >> 8
   \   00000050   9300....           STS     (UART + 10), R16
   \   00000054   9310....           STS     (UART + 11), R17
    184                  UCSR0A  = 0x00; 
   \   00000058   E000               LDI     R16, 0
   \   0000005A   9300....           STS     _A_UCSR0A, R16
    185                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000005E   E400               LDI     R16, 64
   \   00000060   E412               LDI     R17, 66
   \   00000062   E02F               LDI     R18, 15
   \   00000064   E030               LDI     R19, 0
   \   00000066   ........           CALL    ?UL_DIVMOD_S_L03
   \   0000006A   2F40               MOV     R20, R16
   \   0000006C   954A               DEC     R20
   \   0000006E   9340....           STS     _A_UBRR0, R20
    186                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   00000072   5001               SUBI    R16, 1
   \   00000074   4010               SBCI    R17, 0
   \   00000076   931000C5           STS     197, R17
    187                  UCSR0B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   0000007A   EB08               LDI     R16, 184
   \   0000007C   9300....           STS     _A_UCSR0B, R16
    188                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000080   E006               LDI     R16, 6
   \   00000082   9300....           STS     _A_UCSR0C, R16
    189                  break;
   \   00000086   9508               RET
    190              case 0x01 :
    191                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   00000088   EF0A               LDI     R16, 250
   \   0000008A   9300....           STS     (UART + 46), R16
   \   0000008E   9310....           STS     (UART + 47), R17
    192                  UART[channel].pTxBuffer = TxBufferCh1;
   \   00000092   ....               LDI     R16, LOW(TxBufferCh1)
   \   00000094   ....               LDI     R17, (TxBufferCh1) >> 8
   \   00000096   9300....           STS     (UART + 26), R16
   \   0000009A   9310....           STS     (UART + 27), R17
    193                  UART[channel].pRxBuffer = RxBufferCh1;
   \   0000009E   ....               LDI     R16, LOW(RxBufferCh1)
   \   000000A0   ....               LDI     R17, (RxBufferCh1) >> 8
   \   000000A2   9300....           STS     (UART + 36), R16
   \   000000A6   9310....           STS     (UART + 37), R17
    194                  UCSR1A  = 0x00; 
   \   000000AA   E000               LDI     R16, 0
   \   000000AC   9300....           STS     _A_UCSR1A, R16
    195                  UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   000000B0   E400               LDI     R16, 64
   \   000000B2   E412               LDI     R17, 66
   \   000000B4   E02F               LDI     R18, 15
   \   000000B6   E030               LDI     R19, 0
   \   000000B8   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000BC   2F40               MOV     R20, R16
   \   000000BE   954A               DEC     R20
   \   000000C0   9340....           STS     _A_UBRR1, R20
    196                  UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   000000C4   5001               SUBI    R16, 1
   \   000000C6   4010               SBCI    R17, 0
   \   000000C8   931000CD           STS     205, R17
    197                  UCSR1B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   000000CC   EB08               LDI     R16, 184
   \   000000CE   9300....           STS     _A_UCSR1B, R16
    198                  UCSR1C  = 0x06;       /* n,8,1 */
   \   000000D2   E006               LDI     R16, 6
   \   000000D4   9300....           STS     _A_UCSR1C, R16
    199                  break;
    200              default:
    201                  break ;
    202              }    
    203          }
   \   000000D8   9508               RET
   \   000000DA                      REQUIRE _A_UCSR0A
   \   000000DA                      REQUIRE _A_UBRR0
   \   000000DA                      REQUIRE _A_UCSR0B
   \   000000DA                      REQUIRE _A_UCSR0C
   \   000000DA                      REQUIRE _A_UCSR1A
   \   000000DA                      REQUIRE _A_UBRR1
   \   000000DA                      REQUIRE _A_UCSR1B
   \   000000DA                      REQUIRE _A_UCSR1C
    204          
    205          
    206          /*
    207          **===========================================================================
    208          ** Init the AD converter registers
    209          **===========================================================================
    210          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    211          void Init_AD( void ) {
   \                     Init_AD:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    212          
    213              char i;     
    214              for (i = 0; i<8; i++) {                 // Init variables
   \   00000000   ....               LDI     R30, LOW(ADInt)
   \   00000002   ....               LDI     R31, (ADInt) >> 8
   \   00000004   E008               LDI     R16, 8
   \   00000006   E020               LDI     R18, 0
    215                  ADInt.Result[i] = 0;                   // convertion resluts
   \                     ??Init_AD_0:
   \   00000008   9321               ST      Z+, R18
   \   0000000A   9321               ST      Z+, R18
    216              }
   \   0000000C   950A               DEC     R16
   \   0000000E   F7E1               BRNE    ??Init_AD_0
    217              ADChannel = 0x00 ;                      // AD channel to be converted
   \   00000010   9320....           STS     ADChannel, R18
    218              ADMUX   = 0xc0 ;                        // Ref = 2,56V, right adjust
   \   00000014   EC00               LDI     R16, 192
   \   00000016   9300....           STS     _A_ADMUX, R16
    219              ADCSRA   = 0x8f ;                        // AD enabled, int enabled, xtal / 128
   \   0000001A   E80F               LDI     R16, 143
   \   0000001C   9300....           STS     _A_ADCSRA, R16
    220          }
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_ADMUX
   \   00000022                      REQUIRE _A_ADCSRA
    221          
    222          /*
    223          **===========================================================================
    224          ** Init values  in the system
    225          **===========================================================================
    226          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    227          void Init_Values(void) {
   \                     Init_Values:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    228          
    229          
    230          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   InitSystem
        2   -> Init_AD
        2   -> Init_CPU
        2   -> Init_IO
        2   -> Init_USART
      2   Init_AD
      2   Init_CPU
      2   Init_IO
      2   Init_TMR
      2   Init_USART
        2 ?UL_DIVMOD_S_L03
      2   Init_Values
      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      86  InitSystem
      34  Init_AD
      92  Init_CPU
     118  Init_IO
      32  Init_TMR
     218  Init_USART
       2  Init_Values
      18  Init_Watchdog
       1  _A_ADCSRA
       1  _A_ADMUX
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_OCR0A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR0A
       2  _A_UBRR0
       2  _A_UBRR1
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_WDTCSR
       1  _A_XMCRA
       1  _A_XMCRB

 
  37 bytes in segment ABSOLUTE
 600 bytes in segment CODE
 
 600 bytes of CODE memory
   0 bytes of DATA memory (+ 37 bytes shared)

Errors: none
Warnings: none
