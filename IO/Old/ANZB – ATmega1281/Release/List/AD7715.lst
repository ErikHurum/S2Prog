###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       19/Dec/2022  14:35:47
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1281\Src\AD7715.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW48EC.tmp ("D:\S2Prog\IO\ANZB –
#        ATmega1281\Src\AD7715.c" --cpu=m1281 -ms -o "D:\S2Prog\IO\ANZB –
#        ATmega1281\Release\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\ANZB – ATmega1281\Release\List" -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB – ATmega1281\INC\\"
#        -I "D:\S2Prog\IO\ANZB – ATmega1281\..\..\SHARED\INC\\" --eeprom_size
#        4096 --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1281\Release\List\AD7715.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1281\Release\Obj\AD7715.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1281\Src\AD7715.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PING
   \                     _A_PING:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          
     12          /*************************************************************************
     13          *   (This is a task)
     14          *  AD7715 task 
     15          *
     16          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     17          void AD7715(void) {
   \                     AD7715:
   \   00000000   92CA               ST      -Y, R12
   \   00000002   927A               ST      -Y, R7
   \   00000004   926A               ST      -Y, R6
   \   00000006   925A               ST      -Y, R5
   \   00000008   924A               ST      -Y, R4
   \   0000000A   93BA               ST      -Y, R27
   \   0000000C   93AA               ST      -Y, R26
   \   0000000E   939A               ST      -Y, R25
   \   00000010   938A               ST      -Y, R24
   \   00000012                      REQUIRE ?Register_R4_is_cg_reg
   \   00000012                      REQUIRE ?Register_R5_is_cg_reg
   \   00000012                      REQUIRE ?Register_R6_is_cg_reg
   \   00000012                      REQUIRE ?Register_R7_is_cg_reg
   \   00000012                      REQUIRE ?Register_R12_is_cg_reg
   \   00000012                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000012   9727               SBIW    R29:R28, 7
     18              char ch, Rev1 = 0; 
   \   00000014   E000               LDI     R16, 0
   \   00000016   8309               STD     Y+1, R16
     19              unsigned int addata ;
     20              float Tempfloat;
     21          
     22              for (ch = 0; ch<12; ch++) {
   \   00000018   ....               LDI     R30, LOW((TData + 2))
   \   0000001A   ....               LDI     R31, HIGH((TData + 2))
   \   0000001C   E00C               LDI     R16, 12
   \   0000001E   E011               LDI     R17, 1
     23                  TData.Ana.Filter[ch] = 1.0;
   \                     ??AD7715_0:
   \   00000020   9311               ST      Z+, R17
     24              }
   \   00000022   950A               DEC     R16
   \   00000024   F7E9               BRNE    ??AD7715_0
     25              TData.Ana.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP) + (ReadEEPROMByte(EEPROM_PORTSETUP+1) <<8); // Get setup from EEPROM
   \   00000026   E002               LDI     R16, 2
   \   00000028   E010               LDI     R17, 0
   \   0000002A   ........           CALL    ReadEEPROMByte
   \   0000002E   2F80               MOV     R24, R16
   \   00000030   E003               LDI     R16, 3
   \   00000032   E010               LDI     R17, 0
   \   00000034   ........           CALL    ReadEEPROMByte
   \   00000038   9380....           STS     TData, R24
   \   0000003C   9300....           STS     (TData + 1), R16
     26              SetRS4Port();                                           // and set power on ports
   \   00000040   ........           CALL    SetRS4Port
     27          
     28               
     29              WriteAdByte(0xff) ;             // Write 32 1's to reset
   \   00000044   EF0F               LDI     R16, 255
   \   00000046   ....               RCALL   WriteAdByte
     30              WriteAdByte(0xff) ;
   \   00000048   EF0F               LDI     R16, 255
   \   0000004A   ....               RCALL   WriteAdByte
     31              WriteAdByte(0xff) ;
   \   0000004C   EF0F               LDI     R16, 255
   \   0000004E   ....               RCALL   WriteAdByte
     32              WriteAdByte(0xff) ;
   \   00000050   EF0F               LDI     R16, 255
   \   00000052   ....               RCALL   WriteAdByte
     33              
     34              // Calibrate and check if the card is layout rev 1?
     35              WriteAdByte(0x10) ;             // Next write setup reg 
   \   00000054   E100               LDI     R16, 16
   \   00000056   ....               RCALL   WriteAdByte
     36              WriteAdByte(0x4e) ;             //  Ad setup data, unipolar, calibrate
   \   00000058   E40E               LDI     R16, 78
   \   0000005A   ....               RCALL   WriteAdByte
     37              OS_Delay(250);
   \   0000005C   EF0A               LDI     R16, 250
   \   0000005E   E010               LDI     R17, 0
   \   00000060   ........           CALL    OS_Delay
     38              OS_ClearEvents(&TCB_AD7715);
   \   00000064   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000066   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000068   ........           CALL    OS_ClearEvents
     39              OS_WaitEventTimed(1, 1000);
   \   0000006C   EE28               LDI     R18, 232
   \   0000006E   E033               LDI     R19, 3
   \   00000070   E001               LDI     R16, 1
   \   00000072   ........           CALL    OS_WaitEventTimed
     40              
     41              ClrBit(PORTE,0xf0);                 // check channel 14 for 2.5 V
   \   00000076   94F8               CLI
   \   00000078   B10E               IN      R16, 0x0E
   \   0000007A   700F               ANDI    R16, 0x0F
   \   0000007C   B90E               OUT     0x0E, R16
   \   0000007E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000082   2300               TST     R16
   \   00000084   F409               BRNE    ??AD7715_1
   \   00000086   9478               SEI
     42              MB_SetBit(PORTE, (14 << 4) & 0xf0);    // check 
   \                     ??AD7715_1:
   \   00000088   94F8               CLI
   \   0000008A   B10E               IN      R16, 0x0E
   \   0000008C   6E00               ORI     R16, 0xE0
   \   0000008E   B90E               OUT     0x0E, R16
   \   00000090   9100....           LDS     R16, (OS_Counters + 1)
   \   00000094   2300               TST     R16
   \   00000096   F409               BRNE    ??AD7715_2
   \   00000098   9478               SEI
     43              WriteAdByte(0x10) ;                 // Next write data 
   \                     ??AD7715_2:
   \   0000009A   E100               LDI     R16, 16
   \   0000009C   ....               RCALL   WriteAdByte
     44              WriteAdByte(0x0e) ;                 // Ad setup data, unipolar
   \   0000009E   E00E               LDI     R16, 14
   \   000000A0   ....               RCALL   WriteAdByte
     45              OS_Delay(85);
   \   000000A2   E505               LDI     R16, 85
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   ........           CALL    OS_Delay
     46              OS_ClearEvents(&TCB_AD7715);
   \   000000AA   ....               LDI     R16, LOW(TCB_AD7715)
   \   000000AC   ....               LDI     R17, (TCB_AD7715) >> 8
   \   000000AE   ........           CALL    OS_ClearEvents
     47              OS_WaitEventTimed(1, 250);
   \   000000B2   EF2A               LDI     R18, 250
   \   000000B4   E030               LDI     R19, 0
   \   000000B6   E001               LDI     R16, 1
   \   000000B8   ........           CALL    OS_WaitEventTimed
     48              WriteAdByte(0x38) ;                 // Next read data 
   \   000000BC   E308               LDI     R16, 56
   \   000000BE   ....               RCALL   WriteAdByte
     49              addata = ReadAdByte()* 256 ;        // read data 16 bit data from ad 
   \   000000C0   ....               RCALL   ReadAdByte
     50              addata += ReadAdByte() ;
     51              if (addata > 60000){
   \   000000C2   E040               LDI     R20, 0
   \   000000C4   2FF0               MOV     R31, R16
   \   000000C6   ....               RCALL   ReadAdByte
   \   000000C8   3601               CPI     R16, 97
   \   000000CA   4EFA               SBCI    R31, 234
   \   000000CC   F0D8               BRCS    ??AD7715_3
     52                  Rev1 = true;
   \   000000CE   E001               LDI     R16, 1
   \   000000D0   8309               STD     Y+1, R16
     53                  for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \   000000D2   ....               LDI     R24, LOW(TData)
   \   000000D4   ....               LDI     R25, (TData) >> 8
   \   000000D6   E00C               LDI     R16, 12
   \   000000D8   EB12               LDI     R17, 178
   \   000000DA   2E01               MOV     R0, R17
   \   000000DC   E91D               LDI     R17, 157
   \   000000DE   2E11               MOV     R1, R17
   \   000000E0   E71F               LDI     R17, 127
   \   000000E2   2E21               MOV     R2, R17
   \   000000E4   E31F               LDI     R17, 63
     54                     TData.Ana.Offset[ch] = 0.0;
   \                     ??AD7715_4:
   \   000000E6   01FC               MOVW    R31:R30, R25:R24
   \   000000E8   59EE               SUBI    R30, 158
   \   000000EA   4FFF               SBCI    R31, 255
   \   000000EC   8340               ST      Z, R20
   \   000000EE   8341               STD     Z+1, R20
   \   000000F0   8342               STD     Z+2, R20
   \   000000F2   8343               STD     Z+3, R20
     55                     TData.Ana.Gain[ch] = 0.9985;
   \   000000F4   AA00               STD     Z+48, R0
   \   000000F6   AA11               STD     Z+49, R1
   \   000000F8   AA22               STD     Z+50, R2
   \   000000FA   AB13               STD     Z+51, R17
     56                 }
   \   000000FC   9604               ADIW    R25:R24, 4
   \   000000FE   950A               DEC     R16
   \   00000100   F0C9               BREQ    ??AD7715_5
   \   00000102   CFF1               RJMP    ??AD7715_4
     57              } else {
     58                  for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \                     ??AD7715_3:
   \   00000104   ....               LDI     R24, LOW(TData)
   \   00000106   ....               LDI     R25, (TData) >> 8
   \   00000108   E00C               LDI     R16, 12
   \   0000010A   EA10               LDI     R17, 160
   \   0000010C   2E01               MOV     R0, R17
   \   0000010E   E11A               LDI     R17, 26
   \   00000110   2E11               MOV     R1, R17
   \   00000112   E71F               LDI     R17, 127
   \   00000114   2E21               MOV     R2, R17
   \   00000116   E31F               LDI     R17, 63
     59                     TData.Ana.Offset[ch] = 0.0;
   \                     ??AD7715_6:
   \   00000118   01FC               MOVW    R31:R30, R25:R24
   \   0000011A   59EE               SUBI    R30, 158
   \   0000011C   4FFF               SBCI    R31, 255
   \   0000011E   8340               ST      Z, R20
   \   00000120   8341               STD     Z+1, R20
   \   00000122   8342               STD     Z+2, R20
   \   00000124   8343               STD     Z+3, R20
     60                     TData.Ana.Gain[ch] = 0.9965;
   \   00000126   AA00               STD     Z+48, R0
   \   00000128   AA11               STD     Z+49, R1
   \   0000012A   AA22               STD     Z+50, R2
   \   0000012C   AB13               STD     Z+51, R17
     61                 }
   \   0000012E   9604               ADIW    R25:R24, 4
   \   00000130   950A               DEC     R16
   \   00000132   F791               BRNE    ??AD7715_6
     62              }
     63              for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \                     ??AD7715_5:
   \   00000134   8348               ST      Y, R20
   \   00000136   ....               LDI     R26, LOW(TData)
   \   00000138   ....               LDI     R27, (TData) >> 8
   \   0000013A   E00C               LDI     R16, 12
   \   0000013C   2E40               MOV     R4, R16
   \                     ??AD7715_7:
   \   0000013E   8188               LD      R24, Y
   \   00000140   6880               ORI     R24, 0x80
   \   00000142   0F88               LSL     R24
   \   00000144   E091               LDI     R25, 1
   \   00000146   0F88               LSL     R24
   \   00000148   1F99               ROL     R25
   \   0000014A   0F88               LSL     R24
   \   0000014C   1F99               ROL     R25
   \   0000014E   01AE               MOVW    R21:R20, R29:R28
   \   00000150   5F4E               SUBI    R20, 254
   \   00000152   4F5F               SBCI    R21, 255
   \   00000154   E024               LDI     R18, 4
   \   00000156   018C               MOVW    R17:R16, R25:R24
     64                ReadEEPROMBuffer( (ch | 0x80) * sizeof(float)*2, sizeof(float), (char*)&Tempfloat );
   \   00000158   ........           CALL    ReadEEPROMBuffer
     65                
     66                if (IsFloat(Tempfloat) && Tempfloat > -2.0 && Tempfloat < 2.0 ) { 
   \   0000015C   810A               LDD     R16, Y+2
   \   0000015E   811B               LDD     R17, Y+3
   \   00000160   812C               LDD     R18, Y+4
   \   00000162   813D               LDD     R19, Y+5
   \   00000164   ........           CALL    IsFloat
   \   00000168   2300               TST     R16
   \   0000016A   F0C9               BREQ    ??AD7715_8
   \   0000016C   810A               LDD     R16, Y+2
   \   0000016E   811B               LDD     R17, Y+3
   \   00000170   812C               LDD     R18, Y+4
   \   00000172   813D               LDD     R19, Y+5
   \   00000174   EF4F               LDI     R20, 255
   \   00000176   EF5F               LDI     R21, 255
   \   00000178   EF6F               LDI     R22, 255
   \   0000017A   EB7F               LDI     R23, 191
   \   0000017C   ........           CALL    ?F_CMP_GE_S_L04
   \   00000180   F470               BRCC    ??AD7715_8
   \   00000182   E040               LDI     R20, 0
   \   00000184   E050               LDI     R21, 0
   \   00000186   E060               LDI     R22, 0
   \   00000188   E470               LDI     R23, 64
   \   0000018A   ........           CALL    ?F_CMP_LT_S_L04
   \   0000018E   F438               BRCC    ??AD7715_8
     67                  *((float*)&TData.Ana.Offset[ch]) = *((float*)&Tempfloat) ;  //offset
   \   00000190   01FD               MOVW    R31:R30, R27:R26
   \   00000192   59EE               SUBI    R30, 158
   \   00000194   4FFF               SBCI    R31, 255
   \   00000196   8300               ST      Z, R16
   \   00000198   8311               STD     Z+1, R17
   \   0000019A   8322               STD     Z+2, R18
   \   0000019C   8333               STD     Z+3, R19
     68                }
     69                
     70                ReadEEPROMBuffer( ((ch | 0x80) * sizeof(float)*2) + sizeof(float), sizeof(float), (char*)&Tempfloat );
   \                     ??AD7715_8:
   \   0000019E   01AE               MOVW    R21:R20, R29:R28
   \   000001A0   5F4E               SUBI    R20, 254
   \   000001A2   4F5F               SBCI    R21, 255
   \   000001A4   E024               LDI     R18, 4
   \   000001A6   9604               ADIW    R25:R24, 4
   \   000001A8   018C               MOVW    R17:R16, R25:R24
   \   000001AA   ........           CALL    ReadEEPROMBuffer
     71                
     72                if (IsFloat(Tempfloat) && Tempfloat > 0.98 && Tempfloat < 1.02) { 
   \   000001AE   810A               LDD     R16, Y+2
   \   000001B0   811B               LDD     R17, Y+3
   \   000001B2   812C               LDD     R18, Y+4
   \   000001B4   813D               LDD     R19, Y+5
   \   000001B6   ........           CALL    IsFloat
   \   000001BA   2300               TST     R16
   \   000001BC   F0C1               BREQ    ??AD7715_9
   \   000001BE   810A               LDD     R16, Y+2
   \   000001C0   811B               LDD     R17, Y+3
   \   000001C2   812C               LDD     R18, Y+4
   \   000001C4   813D               LDD     R19, Y+5
   \   000001C6   E449               LDI     R20, 73
   \   000001C8   EE51               LDI     R21, 225
   \   000001CA   E76A               LDI     R22, 122
   \   000001CC   E37F               LDI     R23, 63
   \   000001CE   ........           CALL    ?F_CMP_GE_S_L04
   \   000001D2   F468               BRCC    ??AD7715_9
   \   000001D4   E54C               LDI     R20, 92
   \   000001D6   E85F               LDI     R21, 143
   \   000001D8   E862               LDI     R22, 130
   \   000001DA   ........           CALL    ?F_CMP_LT_S_L04
   \   000001DE   F438               BRCC    ??AD7715_9
     73                  *((float*)&TData.Ana.Gain[ch]) = *((float*)&Tempfloat) ;  //gain
   \   000001E0   01FD               MOVW    R31:R30, R27:R26
   \   000001E2   59EE               SUBI    R30, 158
   \   000001E4   4FFF               SBCI    R31, 255
   \   000001E6   AB00               STD     Z+48, R16
   \   000001E8   AB11               STD     Z+49, R17
   \   000001EA   AB22               STD     Z+50, R18
   \   000001EC   AB33               STD     Z+51, R19
     74                }
     75             }
   \                     ??AD7715_9:
   \   000001EE   8108               LD      R16, Y
   \   000001F0   9503               INC     R16
   \   000001F2   8308               ST      Y, R16
   \   000001F4   9614               ADIW    R27:R26, 4
   \   000001F6   944A               DEC     R4
   \   000001F8   F009               BREQ    $+2+2
   \   000001FA   CFA1               RJMP    ??AD7715_7
     76             
     77              while (1) {
     78                  if (Rev1) {
   \                     ??AD7715_10:
   \   000001FC   8109               LDD     R16, Y+1
   \   000001FE   2300               TST     R16
   \   00000200   F1C9               BREQ    ??AD7715_11
     79                     
     80                      ClrBit(PORTE,0xf0); 
   \   00000202   94F8               CLI
   \   00000204   B10E               IN      R16, 0x0E
   \   00000206   700F               ANDI    R16, 0x0F
   \   00000208   B90E               OUT     0x0E, R16
   \   0000020A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000020E   2300               TST     R16
   \   00000210   F409               BRNE    ??AD7715_12
   \   00000212   9478               SEI
     81                      MB_SetBit(PORTE, (15 << 4) & 0xf0); // 0V at ch 16
   \                     ??AD7715_12:
   \   00000214   94F8               CLI
   \   00000216   B10E               IN      R16, 0x0E
   \   00000218   6F00               ORI     R16, 0xF0
   \   0000021A   B90E               OUT     0x0E, R16
   \   0000021C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000220   2300               TST     R16
   \   00000222   F409               BRNE    ??AD7715_13
   \   00000224   9478               SEI
     82                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_13:
   \   00000226   E100               LDI     R16, 16
   \   00000228   ....               RCALL   WriteAdByte
     83                      WriteAdByte(0x8e) ;             //  AStark test zero scale calibrate
   \   0000022A   E80E               LDI     R16, 142
   \   0000022C   ....               RCALL   WriteAdByte
     84                      OS_Delay(250);
   \   0000022E   EF0A               LDI     R16, 250
   \   00000230   E010               LDI     R17, 0
   \   00000232   ........           CALL    OS_Delay
     85                      OS_ClearEvents(&TCB_AD7715);
   \   00000236   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000238   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000023A   ........           CALL    OS_ClearEvents
     86                      OS_WaitEventTimed(1, 1000);
   \   0000023E   EE28               LDI     R18, 232
   \   00000240   E033               LDI     R19, 3
   \   00000242   E001               LDI     R16, 1
   \   00000244   ........           CALL    OS_WaitEventTimed
     87                      
     88                      ClrBit(PORTE,0xf0); 
   \   00000248   94F8               CLI
   \   0000024A   B10E               IN      R16, 0x0E
   \   0000024C   700F               ANDI    R16, 0x0F
   \   0000024E   B90E               OUT     0x0E, R16
   \   00000250   9100....           LDS     R16, (OS_Counters + 1)
   \   00000254   2300               TST     R16
   \   00000256   F409               BRNE    ??AD7715_14
   \   00000258   9478               SEI
     89                      MB_SetBit(PORTE, (14 << 4) & 0xf0); // 2.5V at ch 15
   \                     ??AD7715_14:
   \   0000025A   94F8               CLI
   \   0000025C   B10E               IN      R16, 0x0E
   \   0000025E   6E00               ORI     R16, 0xE0
   \   00000260   B90E               OUT     0x0E, R16
   \   00000262   9100....           LDS     R16, (OS_Counters + 1)
   \   00000266   2300               TST     R16
   \   00000268   F409               BRNE    ??AD7715_15
   \   0000026A   9478               SEI
     90                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_15:
   \   0000026C   E100               LDI     R16, 16
   \   0000026E   ....               RCALL   WriteAdByte
     91                      WriteAdByte(0xce) ;             //  AStark test full scale calibrate
   \   00000270   EC0E               LDI     R16, 206
   \   00000272   C003               RJMP    ??AD7715_16
     92                      OS_Delay(250);
     93                      OS_ClearEvents(&TCB_AD7715);
     94                      OS_WaitEventTimed(1, 1000);
     95           
     96                  } else {
     97                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_11:
   \   00000274   E100               LDI     R16, 16
   \   00000276   ....               RCALL   WriteAdByte
     98                      WriteAdByte(0x4e) ;             //  Internal calibration calibrate
   \   00000278   E40E               LDI     R16, 78
   \                     ??AD7715_16:
   \   0000027A   ....               RCALL   WriteAdByte
     99                      OS_Delay(250);
   \   0000027C   EF0A               LDI     R16, 250
   \   0000027E   E010               LDI     R17, 0
   \   00000280   ........           CALL    OS_Delay
    100                      OS_ClearEvents(&TCB_AD7715);
   \   00000284   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000286   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000288   ........           CALL    OS_ClearEvents
    101                      OS_WaitEventTimed(1, 1000);
   \   0000028C   EE28               LDI     R18, 232
   \   0000028E   E033               LDI     R19, 3
   \   00000290   E001               LDI     R16, 1
   \   00000292   ........           CALL    OS_WaitEventTimed
    102                  }
    103          
    104                  for (ch = 0 ; ch < 12 ; ch++) {
   \   00000296   E000               LDI     R16, 0
   \   00000298   8308               ST      Y, R16
   \   0000029A   ....               LDI     R16, LOW((TData + 2))
   \   0000029C   ....               LDI     R17, HIGH((TData + 2))
   \   0000029E   0138               MOVW    R7:R6, R17:R16
   \   000002A0   ....               LDI     R16, LOW((TData + 26))
   \   000002A2   ....               LDI     R17, HIGH((TData + 26))
   \   000002A4   0128               MOVW    R5:R4, R17:R16
   \   000002A6   E00C               LDI     R16, 12
   \   000002A8   830E               STD     Y+6, R16
   \   000002AA   24CC               CLR     R12
    105                      ClrBit(PORTE,0xf0); 
   \                     ??AD7715_17:
   \   000002AC   94F8               CLI
   \   000002AE   B10E               IN      R16, 0x0E
   \   000002B0   700F               ANDI    R16, 0x0F
   \   000002B2   B90E               OUT     0x0E, R16
   \   000002B4   9100....           LDS     R16, (OS_Counters + 1)
   \   000002B8   2300               TST     R16
   \   000002BA   F409               BRNE    ??AD7715_18
   \   000002BC   9478               SEI
    106                      MB_SetBit(PORTE, (ch << 4) & 0xf0);
   \                     ??AD7715_18:
   \   000002BE   94F8               CLI
   \   000002C0   8108               LD      R16, Y
   \   000002C2   9502               SWAP    R16
   \   000002C4   7F00               ANDI    R16, 0xF0
   \   000002C6   B11E               IN      R17, 0x0E
   \   000002C8   2B10               OR      R17, R16
   \   000002CA   B91E               OUT     0x0E, R17
   \   000002CC   9100....           LDS     R16, (OS_Counters + 1)
   \   000002D0   2300               TST     R16
   \   000002D2   F409               BRNE    ??AD7715_19
   \   000002D4   9478               SEI
    107                      WriteAdByte(0x10) ;                 // Next write data 
   \                     ??AD7715_19:
   \   000002D6   E100               LDI     R16, 16
   \   000002D8   ....               RCALL   WriteAdByte
    108                      WriteAdByte(0x0e) ;                          // Ad setup data, unipolar
   \   000002DA   E01E               LDI     R17, 14
   \   000002DC   E008               LDI     R16, 8
   \                     ??AD7715_20:
   \   000002DE   94F8               CLI
   \   000002E0   9859               CBI     0x0B, 0x01
   \   000002E2   9120....           LDS     R18, (OS_Counters + 1)
   \   000002E6   2322               TST     R18
   \   000002E8   F409               BRNE    ??AD7715_21
   \   000002EA   9478               SEI
   \                     ??AD7715_21:
   \   000002EC   FB17               BST     R17, 7
   \   000002EE   94F8               CLI
   \   000002F0   F436               BRTC    ??AD7715_22
   \   000002F2   9AA4               SBI     0x14, 0x04
   \   000002F4   9120....           LDS     R18, (OS_Counters + 1)
   \   000002F8   2322               TST     R18
   \   000002FA   F439               BRNE    ??AD7715_23
   \   000002FC   C005               RJMP    ??AD7715_24
   \                     ??AD7715_22:
   \   000002FE   98A4               CBI     0x14, 0x04
   \   00000300   9120....           LDS     R18, (OS_Counters + 1)
   \   00000304   2322               TST     R18
   \   00000306   F409               BRNE    ??AD7715_23
   \                     ??AD7715_24:
   \   00000308   9478               SEI
   \                     ??AD7715_23:
   \   0000030A   0F11               LSL     R17
   \   0000030C   94F8               CLI
   \   0000030E   9A59               SBI     0x0B, 0x01
   \   00000310   9120....           LDS     R18, (OS_Counters + 1)
   \   00000314   2322               TST     R18
   \   00000316   F409               BRNE    ??AD7715_25
   \   00000318   9478               SEI
   \                     ??AD7715_25:
   \   0000031A   950A               DEC     R16
   \   0000031C   F701               BRNE    ??AD7715_20
    109                      OS_Delay(85);
   \   0000031E   E505               LDI     R16, 85
   \   00000320   E010               LDI     R17, 0
   \   00000322   ........           CALL    OS_Delay
    110                      OS_ClearEvents(&TCB_AD7715);
   \   00000326   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000328   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000032A   ........           CALL    OS_ClearEvents
    111                      OS_WaitEventTimed(1, 250);
   \   0000032E   EF2A               LDI     R18, 250
   \   00000330   E030               LDI     R19, 0
   \   00000332   E001               LDI     R16, 1
   \   00000334   ........           CALL    OS_WaitEventTimed
    112                      WriteAdByte(0x38) ;             // Next read data 
   \   00000338   E318               LDI     R17, 56
   \   0000033A   E008               LDI     R16, 8
   \                     ??AD7715_26:
   \   0000033C   94F8               CLI
   \   0000033E   9859               CBI     0x0B, 0x01
   \   00000340   9120....           LDS     R18, (OS_Counters + 1)
   \   00000344   2322               TST     R18
   \   00000346   F409               BRNE    ??AD7715_27
   \   00000348   9478               SEI
   \                     ??AD7715_27:
   \   0000034A   FB17               BST     R17, 7
   \   0000034C   94F8               CLI
   \   0000034E   F436               BRTC    ??AD7715_28
   \   00000350   9AA4               SBI     0x14, 0x04
   \   00000352   9120....           LDS     R18, (OS_Counters + 1)
   \   00000356   2322               TST     R18
   \   00000358   F439               BRNE    ??AD7715_29
   \   0000035A   C005               RJMP    ??AD7715_30
   \                     ??AD7715_28:
   \   0000035C   98A4               CBI     0x14, 0x04
   \   0000035E   9120....           LDS     R18, (OS_Counters + 1)
   \   00000362   2322               TST     R18
   \   00000364   F409               BRNE    ??AD7715_29
   \                     ??AD7715_30:
   \   00000366   9478               SEI
   \                     ??AD7715_29:
   \   00000368   0F11               LSL     R17
   \   0000036A   94F8               CLI
   \   0000036C   9A59               SBI     0x0B, 0x01
   \   0000036E   9120....           LDS     R18, (OS_Counters + 1)
   \   00000372   2322               TST     R18
   \   00000374   F409               BRNE    ??AD7715_31
   \   00000376   9478               SEI
   \                     ??AD7715_31:
   \   00000378   950A               DEC     R16
   \   0000037A   F701               BRNE    ??AD7715_26
    113                      addata = ReadAdByte()* 256 ;        // read data 16 bit data from ad 
   \   0000037C   ....               RCALL   ReadAdByte
   \   0000037E   2F30               MOV     R19, R16
    114                      addata += ReadAdByte() ;
   \   00000380   ....               RCALL   ReadAdByte
    115                      TData.Ana.Status[ch] = 0;                   // Result ok
   \   00000382   01F3               MOVW    R31:R30, R7:R6
   \   00000384   86C4               STD     Z+12, R12
    116                      TData.Ana.Result[ch] += ((((((float)addata / 65535.0) * 25.0) * TData.Ana.Gain[ch])-TData.Ana.Offset[ch] - TData.Ana.Result[ch])
    117                                               / (TData.Ana.Filter[ch]+1.0))  ;             // readed value / 16bit * 2.5 volt range
   \   00000386   01D2               MOVW    R27:R26, R5:R4
   \   00000388   5BA8               SUBI    R26, 184
   \   0000038A   4FBF               SBCI    R27, 255
   \   0000038C   2F13               MOV     R17, R19
   \   0000038E   E030               LDI     R19, 0
   \   00000390   E020               LDI     R18, 0
   \   00000392   ........           CALL    ?UL2F_S_L04
   \   00000396   E040               LDI     R20, 0
   \   00000398   EF5F               LDI     R21, 255
   \   0000039A   E76F               LDI     R22, 127
   \   0000039C   E477               LDI     R23, 71
   \   0000039E   ........           CALL    ?F_DIV_S_L04
   \   000003A2   E040               LDI     R20, 0
   \   000003A4   E050               LDI     R21, 0
   \   000003A6   EC68               LDI     R22, 200
   \   000003A8   E471               LDI     R23, 65
   \   000003AA   ........           CALL    ?F_MUL_S_L04
   \   000003AE   01A8               MOVW    R21:R20, R17:R16
   \   000003B0   01B9               MOVW    R23:R22, R19:R18
   \   000003B2   01FD               MOVW    R31:R30, R27:R26
   \   000003B4   A900               LDD     R16, Z+48
   \   000003B6   A911               LDD     R17, Z+49
   \   000003B8   A922               LDD     R18, Z+50
   \   000003BA   A933               LDD     R19, Z+51
   \   000003BC   ........           CALL    ?F_MUL_S_L04
   \   000003C0   914D               LD      R20, X+
   \   000003C2   915D               LD      R21, X+
   \   000003C4   916D               LD      R22, X+
   \   000003C6   917C               LD      R23, X
   \   000003C8   ........           CALL    ?F_SUB_S_L04
   \   000003CC   01F2               MOVW    R31:R30, R5:R4
   \   000003CE   8140               LD      R20, Z
   \   000003D0   8151               LDD     R21, Z+1
   \   000003D2   8162               LDD     R22, Z+2
   \   000003D4   8173               LDD     R23, Z+3
   \   000003D6   ........           CALL    ?F_SUB_S_L04
   \   000003DA   01C8               MOVW    R25:R24, R17:R16
   \   000003DC   01D9               MOVW    R27:R26, R19:R18
   \   000003DE   01F3               MOVW    R31:R30, R7:R6
   \   000003E0   8100               LD      R16, Z
   \   000003E2   E010               LDI     R17, 0
   \   000003E4   E020               LDI     R18, 0
   \   000003E6   E030               LDI     R19, 0
   \   000003E8   ........           CALL    ?UL2F_S_L04
   \   000003EC   E040               LDI     R20, 0
   \   000003EE   E050               LDI     R21, 0
   \   000003F0   E860               LDI     R22, 128
   \   000003F2   E37F               LDI     R23, 63
   \   000003F4   ........           CALL    ?F_ADD_S_L04
   \   000003F8   01A8               MOVW    R21:R20, R17:R16
   \   000003FA   01B9               MOVW    R23:R22, R19:R18
   \   000003FC   018C               MOVW    R17:R16, R25:R24
   \   000003FE   019D               MOVW    R19:R18, R27:R26
   \   00000400   ........           CALL    ?F_DIV_S_L04
   \   00000404   01F2               MOVW    R31:R30, R5:R4
   \   00000406   8140               LD      R20, Z
   \   00000408   8151               LDD     R21, Z+1
   \   0000040A   8162               LDD     R22, Z+2
   \   0000040C   8173               LDD     R23, Z+3
   \   0000040E   ........           CALL    ?F_ADD_S_L04
   \   00000412   01F2               MOVW    R31:R30, R5:R4
   \   00000414   8300               ST      Z, R16
   \   00000416   8311               STD     Z+1, R17
   \   00000418   8322               STD     Z+2, R18
   \   0000041A   8333               STD     Z+3, R19
    118                  } 
   \   0000041C   8108               LD      R16, Y
   \   0000041E   9503               INC     R16
   \   00000420   8308               ST      Y, R16
   \   00000422   E004               LDI     R16, 4
   \   00000424   0E40               ADD     R4, R16
   \   00000426   1C5C               ADC     R5, R12
   \   00000428   E001               LDI     R16, 1
   \   0000042A   0E60               ADD     R6, R16
   \   0000042C   1C7C               ADC     R7, R12
   \   0000042E   810E               LDD     R16, Y+6
   \   00000430   950A               DEC     R16
   \   00000432   830E               STD     Y+6, R16
   \   00000434   F409               BRNE    $+2+2
   \   00000436   CEE2               RJMP    ??AD7715_10
   \   00000438   CF39               RJMP    ??AD7715_17
   \   0000043A                      REQUIRE _A_PORTE
   \   0000043A                      REQUIRE _A_PORTD
   \   0000043A                      REQUIRE _A_PORTG
    119              }
    120          }
    121          
    122          /*************************************************************************
    123          *
    124          *  Set ports on or off
    125          *
    126          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    127          void SetAnaPort(void) {
   \                     SetAnaPort:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    128          
    129              PORTC = (TData.Ana.PortUsed & 0xff) ;         // Set power on ports 0-7
   \   00000000   9100....           LDS     R16, TData
   \   00000004   B908               OUT     0x08, R16
    130              ClrBit(PORTB, 0xe1);                            // Set power on ports 8-11 off
   \   00000006   94F8               CLI
   \   00000008   B105               IN      R16, 0x05
   \   0000000A   710E               ANDI    R16, 0x1E
   \   0000000C   B905               OUT     0x05, R16
   \   0000000E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000012   2300               TST     R16
   \   00000014   F409               BRNE    ??SetAnaPort_0
   \   00000016   9478               SEI
    131              MB_SetBit(PORTB, TData.Ana.PortUsed>>8 & 0x01);    // Set power on port 8
   \                     ??SetAnaPort_0:
   \   00000018   94F8               CLI
   \   0000001A   9100....           LDS     R16, (TData + 1)
   \   0000001E   7001               ANDI    R16, 0x01
   \   00000020   B115               IN      R17, 0x05
   \   00000022   2B10               OR      R17, R16
   \   00000024   B915               OUT     0x05, R17
   \   00000026   9100....           LDS     R16, (OS_Counters + 1)
   \   0000002A   2300               TST     R16
   \   0000002C   F409               BRNE    ??SetAnaPort_1
   \   0000002E   9478               SEI
    132              MB_SetBit(PORTB, TData.Ana.PortUsed>>4 & 0xe0);      // Set power on ports 9-11
   \                     ??SetAnaPort_1:
   \   00000030   94F8               CLI
   \   00000032   9100....           LDS     R16, TData
   \   00000036   9110....           LDS     R17, (TData + 1)
   \   0000003A   9516               LSR     R17
   \   0000003C   9507               ROR     R16
   \   0000003E   9516               LSR     R17
   \   00000040   9507               ROR     R16
   \   00000042   9516               LSR     R17
   \   00000044   9507               ROR     R16
   \   00000046   9516               LSR     R17
   \   00000048   9507               ROR     R16
   \   0000004A   7E00               ANDI    R16, 0xE0
   \   0000004C   B115               IN      R17, 0x05
   \   0000004E   2B10               OR      R17, R16
   \   00000050   B915               OUT     0x05, R17
   \   00000052   9100....           LDS     R16, (OS_Counters + 1)
   \   00000056   2300               TST     R16
   \   00000058   F409               BRNE    ??SetAnaPort_2
   \   0000005A   9478               SEI
    133          
    134          }
   \                     ??SetAnaPort_2:
   \   0000005C   9508               RET
   \   0000005E                      REQUIRE _A_PORTC
   \   0000005E                      REQUIRE _A_PORTB
    135          
    136          /*************************************************************************
    137          *
    138          *  Read from AD-converter
    139          *
    140          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    141          char ReadAdByte(void) {
   \                     ReadAdByte:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    142          
    143              char i, readbyte;
    144          
    145              for (i = 0; i <  8; i++) {
   \   00000000   E018               LDI     R17, 8
    146                  readbyte <<= 1 ;                    // shift to next bit 
   \                     ??ReadAdByte_0:
   \   00000002   0F00               LSL     R16
    147                  ClrBit(PORTD, ADCLK) ;
   \   00000004   94F8               CLI
   \   00000006   9859               CBI     0x0B, 0x01
   \   00000008   9120....           LDS     R18, (OS_Counters + 1)
   \   0000000C   2322               TST     R18
   \   0000000E   F409               BRNE    ??ReadAdByte_1
   \   00000010   9478               SEI
    148                  MB_SetBit(PORTD, ADCLK) ;                  // set clock line high 
   \                     ??ReadAdByte_1:
   \   00000012   94F8               CLI
   \   00000014   9A59               SBI     0x0B, 0x01
   \   00000016   9120....           LDS     R18, (OS_Counters + 1)
   \   0000001A   2322               TST     R18
   \   0000001C   F409               BRNE    ??ReadAdByte_2
   \   0000001E   9478               SEI
    149                  if (PING & ADDO) {                  // data  = 1?
   \                     ??ReadAdByte_2:
   \   00000020   9993               SBIC    0x12, 0x03
    150                      readbyte |= 0x01 ;                    // set bit high 
   \   00000022   6001               ORI     R16, 0x01
    151                  } else {
    152                      readbyte &= ~0x01 ;                   // set bit low 
    153                  }
    154              }
   \                     ??ReadAdByte_3:
   \   00000024   951A               DEC     R17
   \   00000026   F769               BRNE    ??ReadAdByte_0
    155              return readbyte ;
   \   00000028   9508               RET
   \   0000002A                      REQUIRE _A_PORTD
   \   0000002A                      REQUIRE _A_PING
    156          }
    157          
    158          /*************************************************************************
    159          *
    160          *  Write to AD-converter
    161          *
    162          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    163          void WriteAdByte(char data) {
   \                     WriteAdByte:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    164          
    165              char i;
    166          
    167              for (i = 0; i <  8; i++) {
   \   00000000   E018               LDI     R17, 8
    168                  ClrBit(PORTD, ADCLK) ;                  // set clock line low
   \                     ??WriteAdByte_0:
   \   00000002   94F8               CLI
   \   00000004   9859               CBI     0x0B, 0x01
   \   00000006   9120....           LDS     R18, (OS_Counters + 1)
   \   0000000A   2322               TST     R18
   \   0000000C   F409               BRNE    ??WriteAdByte_1
   \   0000000E   9478               SEI
    169                  if (data & 0x80) {                  // data bit = 1? 
   \                     ??WriteAdByte_1:
   \   00000010   FB07               BST     R16, 7
   \   00000012   94F8               CLI
   \   00000014   F436               BRTC    ??WriteAdByte_2
    170                      MB_SetBit(PORTG,ADDI) ;                  // set data high 
   \   00000016   9AA4               SBI     0x14, 0x04
   \   00000018   9120....           LDS     R18, (OS_Counters + 1)
   \   0000001C   2322               TST     R18
   \   0000001E   F439               BRNE    ??WriteAdByte_3
   \   00000020   C005               RJMP    ??WriteAdByte_4
    171                  } else {
    172                      ClrBit(PORTG, ADDI) ;                 // set data low 
   \                     ??WriteAdByte_2:
   \   00000022   98A4               CBI     0x14, 0x04
   \   00000024   9120....           LDS     R18, (OS_Counters + 1)
   \   00000028   2322               TST     R18
   \   0000002A   F409               BRNE    ??WriteAdByte_3
   \                     ??WriteAdByte_4:
   \   0000002C   9478               SEI
    173                  }
    174                  data <<= 1 ;                        // shift to next bit 
   \                     ??WriteAdByte_3:
   \   0000002E   0F00               LSL     R16
    175                  MB_SetBit(PORTD, ADCLK) ;                  // set clock line high 
   \   00000030   94F8               CLI
   \   00000032   9A59               SBI     0x0B, 0x01
   \   00000034   9120....           LDS     R18, (OS_Counters + 1)
   \   00000038   2322               TST     R18
   \   0000003A   F409               BRNE    ??WriteAdByte_5
   \   0000003C   9478               SEI
    176              }           
   \                     ??WriteAdByte_5:
   \   0000003E   951A               DEC     R17
   \   00000040   F701               BRNE    ??WriteAdByte_0
    177          }       
   \   00000042   9508               RET
   \   00000044                      REQUIRE _A_PORTD
   \   00000044                      REQUIRE _A_PORTG
    178          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   AD7715
       16      2   -> IsFloat
       16      2   -> OS_ClearEvents
       16      2   -> OS_Delay
       16      2   -> OS_WaitEventTimed
       16      2   -> ReadAdByte
       16      2   -> ReadEEPROMBuffer
       16      2   -> ReadEEPROMByte
       16      2   -> SetRS4Port
       16      2   -> WriteAdByte
       16      2 ?F_ADD_S_L04
       16      2 ?F_CMP_GE_S_L04
       16      2 ?F_CMP_LT_S_L04
       16      2 ?F_DIV_S_L04
       16      2 ?F_MUL_S_L04
       16      2 ?F_SUB_S_L04
       16      2 ?UL2F_S_L04
      0      2   ReadAdByte
      0      2   SetAnaPort
      0      2   WriteAdByte


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
    1082  AD7715
      42  ReadAdByte
      94  SetAnaPort
      68  WriteAdByte
       1  _A_PING
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTG

 
     6 bytes in segment ABSOLUTE
 1 286 bytes in segment CODE
 
 1 286 bytes of CODE memory
     0 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
