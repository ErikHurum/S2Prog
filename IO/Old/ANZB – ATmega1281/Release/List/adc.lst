###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       19/Dec/2022  14:35:46
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1281\Src\adc.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW48E9.tmp ("D:\S2Prog\IO\ANZB –
#        ATmega1281\Src\adc.c" --cpu=m1281 -ms -o "D:\S2Prog\IO\ANZB –
#        ATmega1281\Release\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\ANZB – ATmega1281\Release\List" -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB – ATmega1281\INC\\"
#        -I "D:\S2Prog\IO\ANZB – ATmega1281\..\..\SHARED\INC\\" --eeprom_size
#        4096 --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1281\Release\List\adc.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1281\Release\Obj\adc.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1281\Src\adc.c
      1          /****************************************************************************************
      2          / AD converter functions and interrupt
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x7c
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x78
   \   union <unnamed> volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                      DS8 2
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          
     12          #pragma vector=ADC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     13          __interrupt void IntHandler_AD( void ){
   \                     IntHandler_AD:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
     14          
     15              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
     16              OS_EnterIntStack();
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??IntHandler_AD_0
   \   00000046   9478               SEI
     17              ADInt.Result[ADChannel] = ADC; // Reading ADCL and ADCH in one run
   \                     ??IntHandler_AD_0:
   \   00000048   9100....           LDS     R16, ADChannel
   \   0000004C   9120....           LDS     R18, _A_ADC
   \   00000050   9130....           LDS     R19, (_A_ADC + 1)
   \   00000054   E012               LDI     R17, 2
   \   00000056   9F01               MUL     R16, R17
   \   00000058   01F0               MOVW    R31:R30, R1:R0
   \   0000005A   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   0000005E   8320               ST      Z, R18
   \   00000060   8331               STD     Z+1, R19
     18              if (++ADChannel > 0x01 ) {                //set next ADchannel
   \   00000062   9100....           LDS     R16, ADChannel
   \   00000066   9503               INC     R16
   \   00000068   9300....           STS     ADChannel, R16
   \   0000006C   3002               CPI     R16, 2
   \   0000006E   F018               BRCS    ??IntHandler_AD_1
     19                    ADChannel = 0x00 ;
   \   00000070   E000               LDI     R16, 0
   \   00000072   9300....           STS     ADChannel, R16
     20              }
     21              ADMUX &= 0xe0 ;                           // set the channel
   \                     ??IntHandler_AD_1:
   \   00000076   9100....           LDS     R16, _A_ADMUX
   \   0000007A   7E00               ANDI    R16, 0xE0
   \   0000007C   9300....           STS     _A_ADMUX, R16
     22              ADMUX |= ADChannel ;
   \   00000080   9100....           LDS     R16, ADChannel
   \   00000084   9110....           LDS     R17, _A_ADMUX
   \   00000088   2B10               OR      R17, R16
   \   0000008A   9310....           STS     _A_ADMUX, R17
     23              ADCSRA |= 0x40 ;                           //start new convertion
   \   0000008E   9100007A           LDS     R16, 122
   \   00000092   6400               ORI     R16, 0x40
   \   00000094   9300007A           STS     122, R16
     24              OS_LeaveIntStack();
   \   00000098   94F8               CLI
   \   0000009A   ........           CALL    OS__LeaveIntStack
     25              OS_LeaveInterruptNoSwitch();
   \   0000009E   9100....           LDS     R16, (OS_Counters + 1)
   \   000000A2   950A               DEC     R16
   \   000000A4   9300....           STS     (OS_Counters + 1), R16
   \   000000A8   9100....           LDS     R16, OS_Counters
   \   000000AC   950A               DEC     R16
   \   000000AE   9300....           STS     OS_Counters, R16
     26          }
   \   000000B2   BF9B               OUT     0x3B, R25
   \   000000B4   BF8F               OUT     0x3F, R24
   \   000000B6   9109               LD      R16, Y+
   \   000000B8   9119               LD      R17, Y+
   \   000000BA   9129               LD      R18, Y+
   \   000000BC   9139               LD      R19, Y+
   \   000000BE   9149               LD      R20, Y+
   \   000000C0   9159               LD      R21, Y+
   \   000000C2   9169               LD      R22, Y+
   \   000000C4   9179               LD      R23, Y+
   \   000000C6   9009               LD      R0, Y+
   \   000000C8   9019               LD      R1, Y+
   \   000000CA   9029               LD      R2, Y+
   \   000000CC   9039               LD      R3, Y+
   \   000000CE   91E9               LD      R30, Y+
   \   000000D0   91F9               LD      R31, Y+
   \   000000D2   9189               LD      R24, Y+
   \   000000D4   9199               LD      R25, Y+
   \   000000D6   9518               RETI
   \   000000D8                      REQUIRE _A_ADC
   \   000000D8                      REQUIRE _A_ADMUX
   \   000000D8                      REQUIRE _A_ADCSRA

   \                                 In  segment INTVEC, offset 0x74, root
   \                     `??IntHandler_AD::??INTVEC 116`:
   \   00000074   ........           JMP     IntHandler_AD

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_AD
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     216  IntHandler_AD
       4  IntHandler_AD::??INTVEC 116
       2  _A_ADC
       1  _A_ADCSRA
       1  _A_ADMUX

 
   4 bytes in segment ABSOLUTE
 216 bytes in segment CODE
   4 bytes in segment INTVEC
 
 216 bytes of CODE memory (+ 4 bytes shared)
   0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: 2
