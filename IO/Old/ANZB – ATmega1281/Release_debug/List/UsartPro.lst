###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            07/Feb/2017  14:17:42
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\UsartPro.c
#    Command line =  
#        D:\S2Prog\IO\ANZB\Src\UsartPro.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB\Release_debug\Obj -D OS_LIBMODE_S -D OS_UART=0 -lCN
#        D:\S2Prog\IO\ANZB\Release_debug\List -y --initializers_in_flash
#        --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB\INC\ -I
#        D:\S2Prog\IO\ANZB\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohz
#    List file    =  D:\S2Prog\IO\ANZB\Release_debug\List\UsartPro.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release_debug\Obj\UsartPro.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "string.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          /*************************************************************************
     14          *   (This is a timer calback)
     15          *  Timout timer USART 0
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void TimoutUSART0(void) {
   \                     TimoutUSART0:
     19          
     20              UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000000   9855               CBI     0x0A, 0x05
     21              ClrBit(PORTE, 0x04) ;                              // TXE0 off
   \   00000002   94F8               CLI
   \   00000004   981A               CBI     0x03, 0x02
   \   00000006   ....               RCALL   ?Subroutine13
     22              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \                     ??CrossCallReturnLabel_6:
   \   00000008   ....               LDI     R16, LOW(TimerUSART0)
   \   0000000A   ....               LDI     R17, (TimerUSART0) >> 8
   \   0000000C   ........           CALL    OS_StopTimer
     23              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000010   E000               LDI     R16, 0
   \   00000012                      REQUIRE ?Subroutine132
   \   00000012                      REQUIRE _A_UCSR0B
   \   00000012                      REQUIRE _A_PORTE
   \   00000012                      ;               // Fall through to label ?Subroutine132
     24          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine132:
   \   00000000   ....               RJMP    GoToSyncUART

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   9100....           LDS     R16, (OS_Counters + 1)
   \   00000004   2300               TST     R16
   \   00000006   F409               BRNE    ??Subroutine13_0
   \   00000008   9478               SEI
   \                     ??Subroutine13_0:
   \   0000000A   9508               RET
     25          
     26          /*************************************************************************
     27          *   (This is a timer calback)
     28          *  Timer USART 0 on before TX
     29          *
     30          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     31          void TimoutUSART0On(void) {
   \                     TimoutUSART0On:
     32          
     33              UCSR0B |= __BIT_MASK( UDRIE0) ;                     // start sending by enableing interrupt
   \   00000000   9A55               SBI     0x0A, 0x05
     34              OS_StopTimer(&TimerUSART0On);                    // and stop timer
   \   00000002   ....               LDI     R16, LOW(TimerUSART0On)
   \   00000004   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000006                      REQUIRE ?Subroutine133
   \   00000006                      REQUIRE _A_UCSR0B
   \   00000006                      ;               // Fall through to label ?Subroutine133
     35          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine133:
   \   00000000   ........           JMP     OS_StopTimer
     36          
     37          /*************************************************************************
     38          *   (This is a timer calback)
     39          *  Timout timer USART 1
     40          *
     41          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     42          void TimoutUSART1(void) {
   \                     TimoutUSART1:
     43          
     44              UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \   00000000   9100009A           LDS     R16, 154
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   9300009A           STS     154, R16
     45              ClrBit(PORTE, 0x08) ;                              // TXE1 off
   \   0000000A   94F8               CLI
   \   0000000C   981B               CBI     0x03, 0x03
   \   0000000E   ....               RCALL   ?Subroutine13
     46              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \                     ??CrossCallReturnLabel_7:
   \   00000010   ....               LDI     R16, LOW(TimerUSART1)
   \   00000012   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000014   ........           CALL    OS_StopTimer
     47              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000018   E001               LDI     R16, 1
   \   0000001A   ....               RJMP    ?Subroutine132
   \   0000001C                      REQUIRE _A_UCSR1B
   \   0000001C                      REQUIRE _A_PORTE
     48          }
     49          
     50          
     51          /*************************************************************************
     52          *   (This is a timer calback)
     53          *  Timer USART 1 on before TX
     54          *
     55          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     56          void TimoutUSART1On(void) {
   \                     TimoutUSART1On:
     57          
     58              UCSR1B |= __BIT_MASK( UDRIE1) ;                     // start sending by enableing interrupt
   \   00000000   9100009A           LDS     R16, 154
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   9300009A           STS     154, R16
     59              OS_StopTimer(&TimerUSART1On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000000C   ....               LDI     R17, (TimerUSART1On) >> 8
   \   0000000E   ....               RJMP    ?Subroutine133
   \   00000010                      REQUIRE _A_UCSR1B
     60          }
     61          
     62          
     63          /*************************************************************************
     64          *   (This is a task)
     65          *  Usart0 handler
     66          *
     67          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine131:
   \   00000000   2300               TST     R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
     68          void Usart0Handler(void) {
   \                     Usart0Handler:
   \                     ??Usart0Handler_0:
     69              char stat;
     70          
     71              while (1) {
     72                  stat = OS_WaitEventTimed(1,500);
     73                  if (stat) {
   \   00000000   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_196:
   \   00000002   F3F1               BREQ    ??Usart0Handler_0
     74                      OS_Use(&UARTSEND);
   \   00000004   ....               RCALL   ?Subroutine76
     75                      UsartCheckPackage(0) ;
   \                     ??CrossCallReturnLabel_110:
   \   00000006   E000               LDI     R16, 0
   \   00000008   ....               RCALL   ?Subroutine77
     76                      OS_Unuse(&UARTSEND);
     77                  }
     78              }
   \                     ??CrossCallReturnLabel_112:
   \   0000000A   CFFA               RJMP    ??Usart0Handler_0
     79          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   ....               RCALL   UsartCheckPackage
   \   00000002   ....               LDI     R16, LOW(UARTSEND)
   \   00000004   ....               LDI     R17, (UARTSEND) >> 8
   \   00000006   ........           JMP     OS_Unuse

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   ....               LDI     R16, LOW(UARTSEND)
   \   00000002   ....               LDI     R17, (UARTSEND) >> 8
   \   00000004   ........           JMP     OS_Use

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   EF24               LDI     R18, 244
   \   00000002   E031               LDI     R19, 1
   \   00000004   E001               LDI     R16, 1
   \   00000006   ........           CALL    OS_WaitEventTimed
   \   0000000A   ....               RJMP    ?Subroutine131
     80          
     81          /*************************************************************************
     82          *   (This is a task)
     83          *  Usart1 handler
     84          *
     85          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     86          void Usart1Handler(void) {
   \                     Usart1Handler:
   \                     ??Usart1Handler_0:
     87              char stat;
     88          
     89              while (1) {
     90                  stat = OS_WaitEventTimed(1,500);
     91                  if (stat) {
   \   00000000   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_197:
   \   00000002   F3F1               BREQ    ??Usart1Handler_0
     92                      OS_Use(&UARTSEND);
   \   00000004   ....               RCALL   ?Subroutine76
     93                      UsartCheckPackage(1) ;
   \                     ??CrossCallReturnLabel_109:
   \   00000006   E001               LDI     R16, 1
   \   00000008   ....               RCALL   ?Subroutine77
     94                      OS_Unuse(&UARTSEND);
     95                  }
     96              }
   \                     ??CrossCallReturnLabel_111:
   \   0000000A   CFFA               RJMP    ??Usart1Handler_0
     97          }
     98          
     99          /*************************************************************************
    100          *
    101          *  Check the incoming packages
    102          *
    103          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine125:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine137:
   \   00000000   ........           JMP     ?S_EC_MUL_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E14A               LDI     R20, 26
   \   00000004   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_263:
   \   00000006                      REQUIRE ?Subroutine116
   \   00000006                      ;               // Fall through to label ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine116:
   \   00000000   ....               LDI     R26, LOW(UART)
   \   00000002   ....               LDI     R27, (UART) >> 8
   \   00000004                      REQUIRE ??Subroutine160_0
   \   00000004                      ;               // Fall through to label ??Subroutine160_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine160_0:
   \   00000000   0FA0               ADD     R26, R16
   \   00000002   1FB1               ADC     R27, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine114:
   \   00000000   E050               LDI     R21, 0
   \   00000002   ....               RJMP    ?Subroutine137

   \                                 In  segment CODE, align 2, keep-with-next
    104          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    105          
    106              unsigned short pointer;
    107              char    retval ;
    108          
    109              UART[ch].RxSendReply = false ;                              // flag for answering set to fault
   \   00000006   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_172:
   \   00000008   8F51               STD     Z+25, R21
    110              UART[ch].TxFirst = 11 ;                                     // Start pos for first TX command
   \   0000000A   E00B               LDI     R16, 11
   \   0000000C   8302               STD     Z+2, R16
   \   0000000E   8353               STD     Z+3, R21
    111              pointer = 7 ;
   \   00000010   E087               LDI     R24, 7
   \   00000012   E090               LDI     R25, 0
    112              do {
    113                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   00000014   019C               MOVW    R19:R18, R25:R24
   \   00000016   2D04               MOV     R16, R4
   \   00000018   ....               RCALL   CheckActionUart
    114                  pointer = pointer + UART[ch].pRxBuffer[pointer+2]
    115                            + (UART[ch].pRxBuffer[pointer+3]*256) + 4;      // Point to a command cmd hb/lb
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   ....               RCALL   ?Subroutine72
    116              } while (retval && (pointer < (UART[ch].RxPacklen - 4 )));
   \                     ??CrossCallReturnLabel_92:
   \   0000001E   8112               LDD     R17, Z+2
   \   00000020   81F3               LDD     R31, Z+3
   \   00000022   2FE1               MOV     R30, R17
   \   00000024   9634               ADIW    R31:R30, 4
   \   00000026   0F8E               ADD     R24, R30
   \   00000028   1F9F               ADC     R25, R31
   \   0000002A   2300               TST     R16
   \   0000002C   F041               BREQ    ??UsartCheckPackage_1
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   8906               LDD     R16, Z+22
   \   00000032   8917               LDD     R17, Z+23
   \   00000034   5004               SUBI    R16, 4
   \   00000036   4010               SBCI    R17, 0
   \   00000038   1780               CP      R24, R16
   \   0000003A   0791               CPC     R25, R17
   \   0000003C   F358               BRCS    ??UsartCheckPackage_0
    117              if (UART[ch].RxSendReply) {                                   //send answer?
   \                     ??UsartCheckPackage_1:
   \   0000003E   01FD               MOVW    R31:R30, R27:R26
   \   00000040   8D01               LDD     R16, Z+25
   \   00000042   2300               TST     R16
   \   00000044   2D04               MOV     R16, R4
   \   00000046   F011               BREQ    ??UsartCheckPackage_2
    118                  Uart_BuildTail(ch);                                       // yes, build tail (and header) and start sending
   \   00000048   ....               RCALL   Uart_BuildTail
   \   0000004A   C001               RJMP    ??UsartCheckPackage_3
    119              } else {
    120                  GoToSyncUART(ch) ;                                        // go to sync modus here if not reply
   \                     ??UsartCheckPackage_2:
   \   0000004C   ....               RCALL   GoToSyncUART
    121              }
    122          }
   \                     ??UsartCheckPackage_3:
   \   0000004E   E0E5               LDI     R30, 5
   \   00000050   ........           JMP     ?EPILOGUE_B5_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine72:
   \   00000000   8522               LDD     R18, Z+10
   \   00000002   8533               LDD     R19, Z+11
   \   00000004   0F28               ADD     R18, R24
   \   00000006   1F39               ADC     R19, R25
   \   00000008   01F9               MOVW    R31:R30, R19:R18
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_361:
   \   00000002   ....               RJMP    ?Subroutine125
    123          
    124          
    125          /*************************************************************************
    126          *
    127          *  Check action on received data
    128          *
    129          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    130          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   2E60               MOV     R6, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    131          
    132              unsigned short   command;
    133              char    retval = true;
   \   00000008   2477               CLR     R7
   \   0000000A   9473               INC     R7
    134          
    135              command = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer+1] << 8);
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_261:
   \   00000012   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_90:
   \   00000014   8482               LDD     R8, Z+10
   \   00000016   8493               LDD     R9, Z+11
   \   00000018   0E88               ADD     R8, R24
   \   0000001A   1E93               ADC     R9, R19
   \   0000001C   01F4               MOVW    R31:R30, R9:R8
   \   0000001E   80A0               LD      R10, Z
   \   00000020   80B1               LDD     R11, Z+1
   \   00000022   2FA8               MOV     R26, R24
   \   00000024   2FB3               MOV     R27, R19
   \   00000026   9614               ADIW    R27:R26, 4
   \   00000028   0185               MOVW    R17:R16, R11:R10
   \   0000002A   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   0000002C   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   0000002E   BFFB               OUT     0x3B, R31
   \   00000030   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000032   ........           JMP     ?SV_SWITCH_L06
    136              switch (command) {                                  // check action
    137              case CMD_REQ_STATUS :                           // Regusest status for target
    138                  BuildStatusData(ch) ;                         // make package
   \                     ??CheckActionUart_0:
   \   00000036   2D06               MOV     R16, R6
   \   00000038   ....               RCALL   BuildStatusData
    139                  break;
   \   0000003A   C074               RJMP    ??CheckActionUart_1
    140          
    141              case CMD_GET_STACKSTATUS :                        // Request stck status
    142                  BuildStackStatus(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_2:
   \   0000003C   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_93:
   \   0000003E   ....               RCALL   BuildStackStatus
    143                  break ;
   \   00000040   C071               RJMP    ??CheckActionUart_1
    144          
    145              case CMD_EEPROM_RESET :                        // Reset EEPROM??
    146                  GetResetEEPROM(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_3:
   \   00000042   ........           CALL    EEPROMReset
    147                  break ;
   \   00000046   C06E               RJMP    ??CheckActionUart_1
    148          
    149              case CMD_GOTO_BOOTLOADER :                        // Goto bootlaoder??
    150                  GetGotoBootloader(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_4:
   \   00000048   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_94:
   \   0000004A   ....               RCALL   GetGotoBootloader
    151                  break ;
   \   0000004C   C06B               RJMP    ??CheckActionUart_1
    152          
    153              case CMD_SND_EEPROM_DATA :                              // Receive EEPROM data
    154                  GetEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_5:
   \   0000004E   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_95:
   \   00000050   ....               RCALL   GetEEPROMData
    155                  break ;
   \   00000052   C068               RJMP    ??CheckActionUart_1
    156          
    157              case CMD_REQ_EEPROM_DATA :                              // Request to send EEPROM data
    158                  BuildEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_6:
   \   00000054   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_96:
   \   00000056   ....               RCALL   BuildEEPROMData
    159                  break ;
   \   00000058   C065               RJMP    ??CheckActionUart_1
    160          
    161              case CMD_REQ_INT_DATA :                              // Request external data
    162                  BuildADInt(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_7:
   \   0000005A   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_97:
   \   0000005C   ....               RCALL   BuildADInt
    163                  break ;
   \   0000005E   C062               RJMP    ??CheckActionUart_1
    164          
    165              case CMD_SND_RS4_SETUP :                              // Receive sertup of AN-RS485
    166                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_8:
   \   00000060   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_199:
   \   00000062   F009               BREQ    $+2+2
   \   00000064   C05F               RJMP    ??CheckActionUart_1
    167                      GetRS4Setup(ch, pointer+4) ;                     // receive package
   \   00000066   ....               RCALL   ?Subroutine75
    168                  }
   \                     ??CrossCallReturnLabel_98:
   \   00000068   ....               RCALL   GetRS4Setup
   \   0000006A   C05C               RJMP    ??CheckActionUart_1
    169                  break ;
    170          
    171              case CMD_REQ_RS4_SETUP :                              // Request for sertup of AN-RS485
    172                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_9:
   \   0000006C   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_200:
   \   0000006E   F009               BREQ    $+2+2
   \   00000070   C059               RJMP    ??CheckActionUart_1
    173                      BuildRS4Setup(ch, pointer+4) ;                     // receive package
   \   00000072   ....               RCALL   ?Subroutine75
    174                  }
   \                     ??CrossCallReturnLabel_99:
   \   00000074   ....               RCALL   BuildRS4Setup
   \   00000076   C056               RJMP    ??CheckActionUart_1
    175                  break ;
    176          
    177              case CMD_SND_RS4_ADBUF :                              // Request external AD data
    178                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_10:
   \   00000078   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_201:
   \   0000007A   F009               BREQ    $+2+2
   \   0000007C   C053               RJMP    ??CheckActionUart_1
    179                      GetADData(ch, pointer+4) ;                     // receive package
   \   0000007E   ....               RCALL   ?Subroutine75
    180                  }
   \                     ??CrossCallReturnLabel_100:
   \   00000080   ....               RCALL   GetADData
   \   00000082   C050               RJMP    ??CheckActionUart_1
    181                  break;
    182          
    183              case CMD_REQ_RS4_DATA :                              // Request external AD eeprom data
    184                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_11:
   \   00000084   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_202:
   \   00000086   F009               BREQ    $+2+2
   \   00000088   C04D               RJMP    ??CheckActionUart_1
   \   0000008A   01DC               MOVW    R27:R26, R25:R24
   \   0000008C   9615               ADIW    R27:R26, 5
   \   0000008E   01F4               MOVW    R31:R30, R9:R8
   \   00000090   8104               LDD     R16, Z+4
   \   00000092   2300               TST     R16
   \   00000094   F019               BREQ    ??CheckActionUart_12
   \   00000096   950A               DEC     R16
   \   00000098   F119               BREQ    ??CheckActionUart_13
   \   0000009A   C044               RJMP    ??CheckActionUart_1
    185                      switch (UART[ch].pRxBuffer[pointer+4]) {
    186                      case 0:                                         // Measure data
    187                          BuildMData485(ch, pointer+5) ;              // receive package
   \                     ??CheckActionUart_12:
   \   0000009C   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_101:
   \   0000009E   ....               RCALL   BuildMData485
    188                          if (TData.RS4.FromTargetBuffer[0][0] == true) {     // send eepromdata ch 0?
   \   000000A0   9100....           LDS     R16, (TData + 1428)
   \   000000A4   3001               CPI     R16, 1
   \   000000A6   F431               BRNE    ??CheckActionUart_14
    189                            BuildADEpromdata(ch, 0);
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   2D06               MOV     R16, R6
   \   000000AC   ....               RCALL   BuildADEpromdata
    190                            TData.RS4.FromTargetBuffer[0][0] = false ;  // Marked as sent
   \   000000AE   E000               LDI     R16, 0
   \   000000B0   9300....           STS     (TData + 1428), R16
    191                          }
    192                          if (TData.RS4.FromTargetBuffer[1][0] == true) {     // send eepromdata ch 1?
   \                     ??CheckActionUart_14:
   \   000000B4   9100....           LDS     R16, (TData + 1478)
   \   000000B8   3001               CPI     R16, 1
   \   000000BA   F429               BRNE    ??CheckActionUart_15
    193                            BuildADEpromdata(ch, 1);                  // channel 1
   \   000000BC   0183               MOVW    R17:R16, R7:R6
   \   000000BE   ....               RCALL   BuildADEpromdata
    194                            TData.RS4.FromTargetBuffer[1][0] = false ;  // Marked as sent
   \   000000C0   E000               LDI     R16, 0
   \   000000C2   9300....           STS     (TData + 1478), R16
    195                          }
    196                          if ((TData.RS4.WHDataAvailable >> UART[ch].pRxBuffer[pointer+5]) & 0x01) {
   \                     ??CheckActionUart_15:
   \   000000C6   9100....           LDS     R16, (TData + 1267)
   \   000000CA   E010               LDI     R17, 0
   \   000000CC   01F2               MOVW    R31:R30, R5:R4
   \   000000CE   ....               RCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_91:
   \   000000D0   8145               LDD     R20, Z+5
   \   000000D2   ........           CALL    ?SS_SHR_L02
   \   000000D6   7001               ANDI    R16, 0x01
   \   000000D8   F129               BREQ    ??CheckActionUart_1
    197                              BuildWHdata(ch, pointer + 5);
   \   000000DA   ....               RCALL   ?Subroutine75
    198                              //TData.RS4.WHDataAvailable &= ~(0x01 << UART[ch].pRxBuffer[pointer+5]);
    199                          }
   \                     ??CrossCallReturnLabel_102:
   \   000000DC   ....               RCALL   BuildWHdata
   \   000000DE   C022               RJMP    ??CheckActionUart_1
    200                          break;
    201                      case 1:                                         // Raw and cal data
    202                          BuildRData485(ch, pointer+5) ;                     // receive package
   \                     ??CheckActionUart_13:
   \   000000E0   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_103:
   \   000000E2   ....               RCALL   BuildRData485
    203                          break;
   \   000000E4   C01F               RJMP    ??CheckActionUart_1
    204                      }
    205                  }
    206                  break;
    207          
    208              case CMD_SND_ANA_SETUP :                              // Receive sertup of AN-RSANA
    209                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_16:
   \   000000E6   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_44:
   \   000000E8   F4E9               BRNE    ??CheckActionUart_1
    210                      GetANASetup(ch, pointer+4) ;                     // receive package
   \   000000EA   ....               RCALL   ?Subroutine75
    211                  }
   \                     ??CrossCallReturnLabel_104:
   \   000000EC   ....               RCALL   GetANASetup
   \   000000EE   C01A               RJMP    ??CheckActionUart_1
    212                  break ;
    213          
    214              case CMD_REQ_ANA_SETUP :                              // Request for sertup of AN-RSANA
    215                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_17:
   \   000000F0   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_45:
   \   000000F2   F4C1               BRNE    ??CheckActionUart_1
    216                      BuildANASetup(ch, pointer+4) ;                     // receive package
   \   000000F4   ....               RCALL   ?Subroutine75
    217                  }
   \                     ??CrossCallReturnLabel_105:
   \   000000F6   ....               RCALL   BuildANASetup
   \   000000F8   C015               RJMP    ??CheckActionUart_1
    218                  break ;
    219          
    220              case CMD_SND_ANA_FILTER :                              // Receive filter of AN-RSANA
    221                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_18:
   \   000000FA   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_46:
   \   000000FC   F499               BRNE    ??CheckActionUart_1
    222                      GetANAFilter(ch, pointer+4) ;                     // receive package
   \   000000FE   ....               RCALL   ?Subroutine75
    223                  }
   \                     ??CrossCallReturnLabel_106:
   \   00000100   ....               RCALL   GetANAFilter
   \   00000102   C010               RJMP    ??CheckActionUart_1
    224                  break ;
    225          
    226              case CMD_REQ_ANA_FILTER :                              // Request filter of AN-RSANA
    227                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_19:
   \   00000104   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_47:
   \   00000106   F471               BRNE    ??CheckActionUart_1
    228                      BuildANAFilter(ch, pointer+4) ;                     // receive package
   \   00000108   ....               RCALL   ?Subroutine75
    229                  }
   \                     ??CrossCallReturnLabel_107:
   \   0000010A   ....               RCALL   BuildANAFilter
   \   0000010C   C00B               RJMP    ??CheckActionUart_1
    230                  break ;
    231          
    232              case CMD_REQ_ANA_DATA :                              // Request ANA data(4-20ma)
    233                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_20:
   \   0000010E   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_48:
   \   00000110   F449               BRNE    ??CheckActionUart_1
    234                      BuildMDataANA(ch, pointer+4) ;                     // receive
   \   00000112   ....               RCALL   ?Subroutine75
    235                  }
   \                     ??CrossCallReturnLabel_108:
   \   00000114   ....               RCALL   BuildMDataANA
   \   00000116   C006               RJMP    ??CheckActionUart_1
    236                  break ;
    237          
    238              default:
    239                  if (command < MAX_ECMD) {                   // handle end commands
   \                     ??CheckActionUart_21:
   \   00000118   E604               LDI     R16, 100
   \   0000011A   16A0               CP      R10, R16
   \   0000011C   E000               LDI     R16, 0
   \   0000011E   06B0               CPC     R11, R16
   \   00000120   F408               BRCC    ??CheckActionUart_1
    240                      retval = false ;
   \   00000122   2477               CLR     R7
    241                  }
    242                  break;
    243          
    244              }
    245              return retval;
   \                     ??CheckActionUart_1:
   \   00000124   2D07               MOV     R16, R7
   \   00000126   E0EC               LDI     R30, 12
   \   00000128   ........           JMP     ?EPILOGUE_B12_L09
    246          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002   2D06               MOV     R16, R6
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine71:
   \   00000000   ....               LDI     R18, LOW(UART)
   \   00000002   2E42               MOV     R4, R18
   \   00000004   ....               LDI     R18, (UART) >> 8
   \   00000006   0E40               ADD     R4, R16
   \   00000008   1F21               ADC     R18, R17
   \   0000000A   2E52               MOV     R5, R18
   \   0000000C   2DE4               MOV     R30, R4
   \   0000000E   2FF2               MOV     R31, R18
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004                      REQUIRE ?Subroutine131
   \   00000004                      ;               // Fall through to label ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   3001               CPI     R16, 1
   \   00000006   9508               RET
    247          
    248          /*************************************************************************
    249          *
    250          * Build send packet header
    251          *
    252          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    253          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
    254          
    255              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000004   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_170:
   \   00000006   8754               STD     Z+12, R21
   \   00000008   8755               STD     Z+13, R21
    256              UART[ch].RxLast  = 0;
   \   0000000A   8756               STD     Z+14, R21
   \   0000000C   8757               STD     Z+15, R21
    257              UART[ch].TxLast  = 0;
   \   0000000E   8354               STD     Z+4, R21
   \   00000010   8355               STD     Z+5, R21
    258          
    259              UART[ch].pTxBuffer[0] = ANPRO10_SYN ;                        /* Sync */
   \   00000012   E106               LDI     R16, 22
   \   00000014   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_119:
   \   00000016   8300               ST      Z, R16
    260              UART[ch].pTxBuffer[1] = ANPRO10_SYN ;                        /* Sync */
   \   00000018   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_120:
   \   0000001A   8301               STD     Z+1, R16
    261              UART[ch].pTxBuffer[2] = ANPRO10_SYN ;                        /* Sync */
   \   0000001C   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_121:
   \   0000001E   8302               STD     Z+2, R16
    262              UART[ch].pTxBuffer[3] = ANPRO10_SOH ;                        /* Start of header */
   \   00000020   E001               LDI     R16, 1
   \   00000022   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_144:
   \   00000024   9619               ADIW    R27:R26, 9
   \   00000026   8303               STD     Z+3, R16
    263              UART[ch].pTxBuffer[4] = UART[ch].pRxBuffer[2] ;      /* RXID */
   \   00000028   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_145:
   \   0000002A   971B               SBIW    R27:R26, 11
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_146:
   \   00000030   9619               ADIW    R27:R26, 9
   \   00000032   8304               STD     Z+4, R16
    264              UART[ch].pTxBuffer[5] = UART[ch].pRxBuffer[3] ;      /* Rx address */
   \   00000034   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_147:
   \   00000036   971B               SBIW    R27:R26, 11
   \   00000038   8103               LDD     R16, Z+3
   \   0000003A   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_122:
   \   0000003C   8305               STD     Z+5, R16
    265              UART[ch].pTxBuffer[6] = 0x10 + UnitID ;              /* Unit ID */
   \   0000003E   9100....           LDS     R16, UnitID
   \   00000042   5F00               SUBI    R16, 240
   \   00000044   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_123:
   \   00000046   8306               STD     Z+6, R16
    266              UART[ch].pTxBuffer[7] = MyAddress();                 /* Tx address */
   \   00000048   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_56:
   \   0000004A   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_124:
   \   0000004C   8307               STD     Z+7, R16
    267              UART[ch].pTxBuffer[8] = 0 ;                          /* packlen HB, don't know yet */
   \   0000004E   E000               LDI     R16, 0
   \   00000050   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_125:
   \   00000052   8700               STD     Z+8, R16
    268              UART[ch].pTxBuffer[9] = 0 ;                          /* packlen LB, don't know yet */
   \   00000054   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_126:
   \   00000056   8701               STD     Z+9, R16
    269              UART[ch].pTxBuffer[10] = 0 ;                         /* Header checksum, don't know yet */
   \   00000058   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_148:
   \   0000005A   8702               STD     Z+10, R16
    270          }
   \   0000005C                      REQUIRE ?Subroutine122
   \   0000005C                      ;               // Fall through to label ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   91A9               LD      R26, Y+
   \   00000002   91B9               LD      R27, Y+
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_152:
   \   00000002   9711               SBIW    R27:R26, 1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_114:
   \   00000002                      REQUIRE ?Subroutine125
   \   00000002                      ;               // Fall through to label ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine107:
   \   00000000   2F40               MOV     R20, R16
   \   00000002   E050               LDI     R21, 0
   \   00000004   E10A               LDI     R16, 26
   \   00000006                      REQUIRE ?Subroutine137
   \   00000006                      REQUIRE ??Subroutine150_0
   \   00000006                      ;               // Fall through to label ??Subroutine150_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine150_0:
   \   00000000   E010               LDI     R17, 0
   \   00000002                      REQUIRE ?Subroutine137
   \   00000002                      ;               // Fall through to label ?Subroutine137

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_266:
   \   00000002   ....               RJMP    ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   91ED               LD      R30, X+
   \   00000002   91FC               LD      R31, X
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   ........           JMP     MyAddress
    271          
    272          /*************************************************************************
    273          *
    274          * Build  packet tail
    275          *
    276          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    277          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_49:
   \   00000002   2F80               MOV     R24, R16
    278          
    279              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000004   ....               RCALL   Uart_BuildHeader
    280          
    281              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK & 0xff ;  // End command lb
   \   00000006   2F08               MOV     R16, R24
   \   00000008   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_359:
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_174:
   \   0000000E   ....               RCALL   ?Subroutine16
    282              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK >> 8 ;    // End command hb
   \                     ??CrossCallReturnLabel_293:
   \   00000010   ....               RCALL   ??Subroutine154_0
    283              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;                  // End data
   \                     ??CrossCallReturnLabel_291:
   \   00000012   ....               RCALL   ??Subroutine158_0
    284          
    285              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].TxSeqCnt++ ;   // Sequence counter
   \                     ??CrossCallReturnLabel_328:
   \   00000014   8521               LDD     R18, Z+9
   \   00000016   2F02               MOV     R16, R18
   \   00000018   9503               INC     R16
   \   0000001A   8701               STD     Z+9, R16
   \   0000001C   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_294:
   \   0000001E   ....               RCALL   ??Subroutine158_0
    286          
    287              UART[ch].pTxBuffer[8] = UART[ch].TxFirst -2;                    // correct length because stx's
   \                     ??CrossCallReturnLabel_329:
   \   00000020   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_131:
   \   00000022   8700               STD     Z+8, R16
    288              UART[ch].pTxBuffer[9] = (UART[ch].TxFirst-2) >> 8 ;             // packet len high
   \   00000024   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_286:
   \   00000026   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_302:
   \   00000028   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_127:
   \   0000002A   8711               STD     Z+9, R17
    289          
    290              UART[ch].pTxBuffer[10] = CalcDSTxChecksum(ch, 10) ;         // Get header checksum
   \   0000002C   E02A               LDI     R18, 10
   \   0000002E   E030               LDI     R19, 0
   \   00000030   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_58:
   \   00000032   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_128:
   \   00000034   8702               STD     Z+10, R16
    291          
    292              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst) ; // Get checksum
   \   00000036   01FD               MOVW    R31:R30, R27:R26
   \   00000038   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_139:
   \   0000003A   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_57:
   \   0000003C   2F20               MOV     R18, R16
   \   0000003E   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_175:
   \   00000040   ....               RCALL   ?Subroutine17
    293              UART[ch].TxFirst++ ;                                        // OBS!! must be inc here due to ANSI standard !!!!
    294          
    295              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO10_EOT ;            // End of transmission
    296              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send
   \                     ??CrossCallReturnLabel_11:
   \   00000042   8306               STD     Z+6, R16
   \   00000044   8317               STD     Z+7, R17
    297              UART[ch].TxLast = 0;                                     // reset cunter
   \   00000046   E000               LDI     R16, 0
   \   00000048   8304               STD     Z+4, R16
   \   0000004A   8305               STD     Z+5, R16
    298              if (ch == 0) {                                           // Turn on TXE for channel
   \   0000004C   2388               TST     R24
   \   0000004E   F449               BRNE    ??Uart_BuildTail_0
    299                  OS_RetriggerTimer(&TimerUSART0);                     // and start timeout TX timer
   \   00000050   ....               LDI     R16, LOW(TimerUSART0)
   \   00000052   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000054   ....               RCALL   ?Subroutine60
    300                  SetBit(PORTE, 0x04) ;                                // TXE0 on
   \                     ??CrossCallReturnLabel_69:
   \   00000056   94F8               CLI
   \   00000058   9A1A               SBI     0x03, 0x02
   \   0000005A   ....               RCALL   ?Subroutine13
    301                  OS_RetriggerTimer(&TimerUSART0On);                   // and start timer for on before TX
   \                     ??CrossCallReturnLabel_8:
   \   0000005C   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000005E   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000060   C00A               RJMP    ??Uart_BuildTail_1
    302              } else if (ch ==1) {
   \                     ??Uart_BuildTail_0:
   \   00000062   3081               CPI     R24, 1
   \   00000064   F449               BRNE    ??CrossCallReturnLabel_67
    303                  OS_RetriggerTimer(&TimerUSART1);                     // and start timeout TX timer
   \   00000066   ....               LDI     R16, LOW(TimerUSART1)
   \   00000068   ....               LDI     R17, (TimerUSART1) >> 8
   \   0000006A   ....               RCALL   ?Subroutine60
    304                  SetBit(PORTE, 0x08) ;                                // TXE1 on
   \                     ??CrossCallReturnLabel_68:
   \   0000006C   94F8               CLI
   \   0000006E   9A1B               SBI     0x03, 0x03
   \   00000070   ....               RCALL   ?Subroutine13
    305                  OS_RetriggerTimer(&TimerUSART1On);                   // and start timer for on before TX
   \                     ??CrossCallReturnLabel_9:
   \   00000072   ....               LDI     R16, LOW(TimerUSART1On)
   \   00000074   ....               LDI     R17, (TimerUSART1On) >> 8
    306              }
   \                     ??Uart_BuildTail_1:
   \   00000076   ....               RCALL   ?Subroutine60
    307          }
   \                     ??CrossCallReturnLabel_67:
   \   00000078   ....               RJMP    ??Subroutine143_0
   \   0000007A                      REQUIRE _A_PORTE

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine60:
   \   00000000   ........           JMP     OS_RetriggerTimer

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   2F08               MOV     R16, R24
   \   00000002   ....               RJMP    CalcDSTxChecksum

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   5002               SUBI    R16, 2
   \   00000002                      REQUIRE ?Subroutine96
   \   00000002                      ;               // Fall through to label ?Subroutine96

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine111:
   \   00000000   8122               LDD     R18, Z+2
   \   00000002   8133               LDD     R19, Z+3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine90:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ??Subroutine142_0
   \   00000002                      ;               // Fall through to label ??Subroutine142_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine142_0:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   ....               RCALL   ??Subroutine157_0
   \                     ??CrossCallReturnLabel_323:
   \   00000002   E024               LDI     R18, 4
   \   00000004   ....               RJMP    ?Subroutine83

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine143_0:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   ........           JMP     ?PROLOGUE4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine121:
   \   00000000   4F1F               SBCI    R17, 255
   \   00000002   8302               STD     Z+2, R16
   \   00000004   8313               STD     Z+3, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   910D               LD      R16, X+
   \   00000002   911C               LD      R17, X
   \   00000004   9711               SBIW    R27:R26, 1
   \   00000006   ....               RJMP    ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine139:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   ....               RJMP    ??Subroutine159_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine129:
   \   00000000   4010               SBCI    R17, 0
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine140:
   \   00000000   5F0F               SUBI    R16, 255
   \   00000002   ....               RJMP    ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_321:
   \   00000002                      REQUIRE ?Subroutine85
   \   00000002                      REQUIRE ??Subroutine154_0
   \   00000002                      ;               // Fall through to label ??Subroutine154_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine154_0:
   \   00000000   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_337:
   \   00000002                      REQUIRE ?Subroutine85
   \   00000002                      ;               // Fall through to label ?Subroutine85

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine85:
   \   00000000   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_317:
   \   00000002   ....               RJMP    ?Subroutine117

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   8142               LDD     R20, Z+2
   \   00000002   8153               LDD     R21, Z+3
   \   00000004   0F04               ADD     R16, R20
   \   00000006   1F15               ADC     R17, R21
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine155_0:
   \   00000000   5002               SUBI    R16, 2
   \   00000002   ....               RJMP    ?Subroutine129

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine109:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine83:
   \   00000000   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_318:
   \   00000002                      REQUIRE ??Subroutine157_0
   \   00000002                      ;               // Fall through to label ??Subroutine157_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine157_0:
   \   00000000   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_322:
   \   00000002                      REQUIRE ??Subroutine158_0
   \   00000002                      ;               // Fall through to label ??Subroutine158_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine158_0:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8320               ST      Z, R18
   \   00000004   ....               RJMP    ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine159_0:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   ....               RJMP    ?Subroutine140
    308          
    309          /*************************************************************************
    310          *
    311          * Build datablock for card status
    312          *
    313          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine136:
   \   00000000   E0E6               LDI     R30, 6
   \   00000002   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine70:
   \   00000000   ........           JMP     ?PROLOGUE6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine128:
   \   00000000   01C8               MOVW    R25:R24, R17:R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    314          void BuildStatusData(char ch){
   \                     BuildStatusData:
   \   00000000   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_88:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   2F20               MOV     R18, R16
    315          
    316              short ntna ;
    317              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000004   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_360:
   \   00000006   E001               LDI     R16, 1
   \   00000008   01FD               MOVW    R31:R30, R27:R26
   \   0000000A   8F01               STD     Z+25, R16
    318          
    319              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS & 0xff;
   \   0000000C   EE39               LDI     R19, 233
   \   0000000E   ....               RCALL   ?Subroutine22
    320              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS >> 8;
   \                     ??CrossCallReturnLabel_326:
   \   00000010   E033               LDI     R19, 3
   \   00000012   ....               RCALL   ?Subroutine22
    321              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_327:
   \   00000014   0128               MOVW    R5:R4, R17:R16
    322              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000016   5F0E               SUBI    R16, 254
   \   00000018   ....               RCALL   ?Subroutine121
    323              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ch ;               // channel
   \                     ??CrossCallReturnLabel_353:
   \   0000001A   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_296:
   \   0000001C   ....               RCALL   ??Subroutine158_0
    324              UART[ch].pTxBuffer[UART[ch].TxFirst++] = DEVICE_IO + UnitID ;   // Product ID
   \                     ??CrossCallReturnLabel_333:
   \   0000001E   9120....           LDS     R18, UnitID
   \   00000022   5F20               SUBI    R18, 240
   \   00000024   ....               RCALL   ?Subroutine19
    325              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MyAddress();           // unit adddress
   \                     ??CrossCallReturnLabel_187:
   \   00000026   ....               RCALL   ?Subroutine140
   \                     ??CrossCallReturnLabel_341:
   \   00000028   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_55:
   \   0000002A   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_167:
   \   0000002C   8300               ST      Z, R16
    326              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION ;       // software version */
   \   0000002E   E228               LDI     R18, 40
   \   00000030   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_178:
   \   00000032   ....               RCALL   ??Subroutine156_0
    327              UART[ch].pTxBuffer[UART[ch].TxFirst++] = COMP_VERSION;        // cpmpability version
    328              UART[ch].pTxBuffer[UART[ch].TxFirst++] = STORE_VERSION;        // cpmpability version
   \                     ??CrossCallReturnLabel_308:
   \   00000034   E022               LDI     R18, 2
   \   00000036   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_297:
   \   00000038   ....               RCALL   ??Subroutine158_0
    329              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \                     ??CrossCallReturnLabel_334:
   \   0000003A   E926               LDI     R18, 150
   \   0000003C   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_298:
   \   0000003E   ....               RCALL   ?Subroutine18
    330              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (( RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \                     ??CrossCallReturnLabel_12:
   \   00000040   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_320:
   \   00000042   ....               RCALL   ??Subroutine158_0
    331              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \                     ??CrossCallReturnLabel_335:
   \   00000044   E123               LDI     R18, 19
   \   00000046   ....               RCALL   ?Subroutine15
    332              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
    333              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus ;                  // restart flag
   \                     ??CrossCallReturnLabel_310:
   \   00000048   9120....           LDS     R18, RestartStatus
   \   0000004C   ....               RCALL   ?Subroutine15
    334              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROGTYPE_APP ;                // Application program
    335          
    336              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_309:
   \   0000004E   ....               RCALL   ?Subroutine34
    337              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    338          
    339              RestartStatus = 0 ;                                                       // set reset stat to 0 = read
   \                     ??CrossCallReturnLabel_27:
   \   00000050   E000               LDI     R16, 0
   \   00000052   9300....           STS     RestartStatus, R16
    340          }
   \   00000056   ....               RJMP    ?Subroutine136

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_130:
   \   00000002                      REQUIRE ?Subroutine123
   \   00000002                      ;               // Fall through to label ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine123:
   \   00000000   0FE8               ADD     R30, R24
   \   00000002   1FF9               ADC     R31, R25
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   1904               SUB     R16, R4
   \   00000002   5002               SUBI    R16, 2
   \   00000004   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_129:
   \   00000006   0DE4               ADD     R30, R4
   \   00000008   1DF5               ADC     R31, R5
   \   0000000A   8300               ST      Z, R16
   \   0000000C   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_288:
   \   0000000E   1904               SUB     R16, R4
   \   00000010   0915               SBC     R17, R5
   \   00000012   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_305:
   \   00000014   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_150:
   \   00000016   0DE4               ADD     R30, R4
   \   00000018   1DF5               ADC     R31, R5
   \   0000001A   8311               STD     Z+1, R17
   \   0000001C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_299:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8330               ST      Z, R19
   \   00000006   ....               RJMP    ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_339:
   \   00000002   ....               RJMP    ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   ....               RCALL   ??Subroutine158_0
   \                     ??CrossCallReturnLabel_336:
   \   00000002   E020               LDI     R18, 0
   \   00000004                      REQUIRE ?Subroutine109
   \   00000004                      ;               // Fall through to label ?Subroutine109

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_313:
   \   00000002                      REQUIRE ?Subroutine83
   \   00000002                      REQUIRE ??Subroutine156_0
   \   00000002                      ;               // Fall through to label ??Subroutine156_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine156_0:
   \   00000000   ....               RCALL   ??Subroutine157_0
   \                     ??CrossCallReturnLabel_338:
   \   00000002   E021               LDI     R18, 1
   \   00000004                      REQUIRE ?Subroutine83
   \   00000004                      ;               // Fall through to label ?Subroutine83
    341          
    342          /*************************************************************************
    343          *
    344          * Build EEPROM data package
    345          *
    346          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   8F01               STD     Z+25, R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    347          void BuildEEPROMData(char ch, short pointer) {
   \                     BuildEEPROMData:
   \   00000000   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_87:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
    348          
    349              short ntna ;
    350              char channel;
    351              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   ....               RCALL   ?Subroutine1
    352          
    353              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA & 0xff;
   \                     ??CrossCallReturnLabel_212:
   \   00000004   E349               LDI     R20, 57
   \   00000006   ....               RCALL   ?Subroutine21
    354              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA >> 8;
   \                     ??CrossCallReturnLabel_324:
   \   00000008   E044               LDI     R20, 4
   \   0000000A   ....               RCALL   ?Subroutine21
    355              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_325:
   \   0000000C   0128               MOVW    R5:R4, R17:R16
    356              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000000E   5F0E               SUBI    R16, 254
   \   00000010   ....               RCALL   ?Subroutine121
    357          
    358              channel = UART[ch].pRxBuffer[pointer];
   \                     ??CrossCallReturnLabel_351:
   \   00000012   ....               RCALL   ?Subroutine68
    359              UART[ch].pTxBuffer[UART[ch].TxFirst++] = channel; //channel
   \                     ??CrossCallReturnLabel_85:
   \   00000014   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_177:
   \   00000016   ....               RCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_319:
   \   00000018   ....               RCALL   ??Subroutine158_0
    360          
    361              ReadEEPROMBuffer( (channel * sizeof(float)* 2) , sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \                     ??CrossCallReturnLabel_330:
   \   0000001A   E008               LDI     R16, 8
   \   0000001C   9F20               MUL     R18, R16
   \   0000001E   01C0               MOVW    R25:R24, R1:R0
   \   00000020   8140               LD      R20, Z
   \   00000022   8151               LDD     R21, Z+1
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   0F40               ADD     R20, R16
   \   00000028   1F51               ADC     R21, R17
   \   0000002A   E024               LDI     R18, 4
   \   0000002C   0180               MOVW    R17:R16, R1:R0
   \   0000002E   ....               RCALL   ?Subroutine35
    362              UART[ch].TxFirst += sizeof(float) ;
    363              ReadEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \                     ??CrossCallReturnLabel_29:
   \   00000030   8140               LD      R20, Z
   \   00000032   8151               LDD     R21, Z+1
   \   00000034   0F40               ADD     R20, R16
   \   00000036   1F51               ADC     R21, R17
   \   00000038   E024               LDI     R18, 4
   \   0000003A   9604               ADIW    R25:R24, 4
   \   0000003C   018C               MOVW    R17:R16, R25:R24
   \   0000003E   ....               RCALL   ?Subroutine35
    364              UART[ch].TxFirst += sizeof(float) ;
    365          
    366              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_28:
   \   00000040   ....               RCALL   ?Subroutine34
    367              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    368          }
   \                     ??CrossCallReturnLabel_26:
   \   00000042   ....               RJMP    ?Subroutine136

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine68:
   \   00000000   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_195:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8120               LD      R18, Z
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   ........           CALL    ReadEEPROMBuffer
   \   00000004   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_289:
   \   00000006   5F0C               SUBI    R16, 252
   \   00000008   ....               RJMP    ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_314:
   \   00000002   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_154:
   \   00000004   0F06               ADD     R16, R22
   \   00000006   1F17               ADC     R17, R23
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   8340               ST      Z, R20
   \   0000000C                      REQUIRE ?Subroutine139
   \   0000000C                      ;               // Fall through to label ?Subroutine139

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   8162               LDD     R22, Z+2
   \   00000002   8173               LDD     R23, Z+3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_113:
   \   00000002   E001               LDI     R16, 1
   \   00000004   01FD               MOVW    R31:R30, R27:R26
   \   00000006   ....               RJMP    ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine130:
   \   00000000   1F13               ADC     R17, R19
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine105:
   \   00000000   8502               LDD     R16, Z+10
   \   00000002   8513               LDD     R17, Z+11
   \   00000004   0F02               ADD     R16, R18
   \   00000006   ....               RJMP    ?Subroutine130
    369          
    370          
    371          /*************************************************************************
    372          *
    373          * Build datablock for Internal AD
    374          *
    375          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004                      REQUIRE ?Subroutine124
   \   00000004                      REQUIRE ??Subroutine141_0
   \   00000004                      ;               // Fall through to label ??Subroutine141_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine141_0:
   \   00000000   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_206:
   \   00000002   E001               LDI     R16, 1
   \   00000004                      REQUIRE ?Subroutine124
   \   00000004                      ;               // Fall through to label ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine144_0:
   \   00000000   E000               LDI     R16, 0
   \   00000002   0790               CPC     R25, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine126:
   \   00000000   8341               STD     Z+1, R20
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine64:
   \   00000000   E080               LDI     R24, 0
   \   00000002   E090               LDI     R25, 0
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine119:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine61:
   \   00000000   910C               LD      R16, X
   \   00000002                      REQUIRE ??Subroutine145_0
   \   00000002                      ;               // Fall through to label ??Subroutine145_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine145_0:
   \   00000000   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_238:
   \   00000002   8142               LDD     R20, Z+2
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine146_0:
   \   00000000   0FA2               ADD     R26, R18
   \   00000002   1FB3               ADC     R27, R19
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine79:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_267:
   \   00000002   ....               LDI     R30, LOW(UART)
   \   00000004   ....               LDI     R31, (UART) >> 8
   \   00000006   0FE0               ADD     R30, R16
   \   00000008   1FF1               ADC     R31, R17
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    376          void BuildADInt(char ch, short pointer) {
   \                     BuildADInt:
   \   00000000   ....               RCALL   ?Subroutine0
    377          
    378              short ntna, i ;
    379              UART[ch].RxSendReply = true ;                               // flag for answering
    380          
    381              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA & 0xff;
   \                     ??CrossCallReturnLabel_210:
   \   00000002   E403               LDI     R16, 67
   \   00000004   ....               RCALL   ?Subroutine32
    382              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA >> 8;
    383              ntna = UART[ch].TxFirst ;                                    /* remember index */
    384              UART[ch].TxFirst += 2 ;                                      // two byte length
    385          
    386              for (i = 0; i<3; i++) {
   \                     ??CrossCallReturnLabel_24:
   \   00000006   ....               RCALL   ?Subroutine64
    387                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] ;
   \                     ??CrossCallReturnLabel_75:
   \   00000008   01AC               MOVW    R21:R20, R25:R24
   \   0000000A   0F44               LSL     R20
   \   0000000C   1F55               ROL     R21
   \   0000000E   ....               LDI     R16, LOW(ADInt)
   \   00000010   ....               LDI     R17, (ADInt) >> 8
   \   00000012   0F04               ADD     R16, R20
   \   00000014   1F15               ADC     R17, R21
   \   00000016   01D8               MOVW    R27:R26, R17:R16
   \   00000018   914D               LD      R20, X+
   \   0000001A   ....               RCALL   ?Subroutine56
    388                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] >> 8 ;   // ADresult
   \                     ??CrossCallReturnLabel_64:
   \   0000001C   01D8               MOVW    R27:R26, R17:R16
   \   0000001E   9611               ADIW    R27:R26, 1
   \   00000020   ....               RCALL   ?Subroutine61
    389              }
   \                     ??CrossCallReturnLabel_224:
   \   00000022   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_344:
   \   00000024   9601               ADIW    R25:R24, 1
   \   00000026   3083               CPI     R24, 3
   \   00000028   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_221:
   \   0000002A   F374               BRLT    ??CrossCallReturnLabel_75
    390          
    391              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000002C   ....               RCALL   ?Subroutine25
    392              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    393          
    394          }
   \                     ??CrossCallReturnLabel_180:
   \   0000002E   ....               RJMP    ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_231:
   \   00000002   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_136:
   \   00000004   ....               RJMP    ?Subroutine102

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_156:
   \   00000002   0FA6               ADD     R26, R22
   \   00000004   1FB7               ADC     R27, R23
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine102:
   \   00000000   934C               ST      X, R20
   \   00000002   8142               LDD     R20, Z+2
   \   00000004   8153               LDD     R21, Z+3
   \   00000006   5F4F               SUBI    R20, 255
   \   00000008   4F5F               SBCI    R21, 255
   \   0000000A   8342               STD     Z+2, R20
   \   0000000C   8353               STD     Z+3, R21
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_116:
   \   00000002                      REQUIRE ?Subroutine91
   \   00000002                      ;               // Fall through to label ?Subroutine91

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine91:
   \   00000000   5F0E               SUBI    R16, 254
   \   00000002                      REQUIRE ?Subroutine121
   \   00000002                      ;               // Fall through to label ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine87:
   \   00000000   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_235:
   \   00000002   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_142:
   \   00000004   0FA2               ADD     R26, R18
   \   00000006   1FB3               ADC     R27, R19
   \   00000008   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_346:
   \   0000000A   E004               LDI     R16, 4
   \   0000000C   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_236:
   \   0000000E   8122               LDD     R18, Z+2
   \   00000010   0FA2               ADD     R26, R18
   \   00000012   1FB1               ADC     R27, R17
   \   00000014   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_347:
   \   00000016   0198               MOVW    R19:R18, R17:R16
   \   00000018   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   1B02               SUB     R16, R18
   \   00000004   5002               SUBI    R16, 2
   \   00000006   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_230:
   \   00000008   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_239:
   \   0000000A   930C               ST      X, R16
   \   0000000C   ....               RCALL   ??Subroutine142_0
   \                     ??CrossCallReturnLabel_285:
   \   0000000E   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_307:
   \   00000010   2F41               MOV     R20, R17
   \   00000012   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_315:
   \   00000014   0F02               ADD     R16, R18
   \   00000016   1F13               ADC     R17, R19
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               RJMP    ?Subroutine126

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   0FA4               ADD     R26, R20
   \   00000002   1FB5               ADC     R27, R21
   \   00000004                      REQUIRE ?Subroutine140
   \   00000004                      REQUIRE ??Subroutine153_0
   \   00000004                      ;               // Fall through to label ??Subroutine153_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine153_0:
   \   00000000   930C               ST      X, R16
   \   00000002   ....               RCALL   ??Subroutine142_0
   \                     ??CrossCallReturnLabel_290:
   \   00000004                      REQUIRE ?Subroutine140
   \   00000004                      ;               // Fall through to label ?Subroutine140

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine94:
   \   00000000   1B02               SUB     R16, R18
   \   00000002   0B13               SBC     R17, R19
   \   00000004                      REQUIRE ??Subroutine155_0
   \   00000004                      ;               // Fall through to label ??Subroutine155_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine108:
   \   00000000   930C               ST      X, R16
   \   00000002                      REQUIRE ??Subroutine159_0
   \   00000002                      ;               // Fall through to label ??Subroutine159_0
    395          
    396          
    397          /*************************************************************************
    398          *
    399          * Build datablock for eeprom on ADcard
    400          *
    401          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine135:
   \   00000000   8321               STD     Z+1, R18
   \   00000002                      REQUIRE ??Subroutine143_0
   \   00000002                      ;               // Fall through to label ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
    402          void BuildADEpromdata(char ch, char portch) {
   \                     BuildADEpromdata:
   \   00000000   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_51:
   \   00000002   2F21               MOV     R18, R17
    403          
    404              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000004   ....               RCALL   ??Subroutine141_0
    405          
    406              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF & 0xff;
   \                     ??CrossCallReturnLabel_216:
   \   00000006   E809               LDI     R16, 137
   \   00000008   ....               RCALL   ?Subroutine33
    407              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF >> 8;
    408              short ntna = UART[ch].TxFirst ;                                    // remember index
   \                     ??CrossCallReturnLabel_251:
   \   0000000A   01B8               MOVW    R23:R22, R17:R16
    409              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000000C   5F0E               SUBI    R16, 254
   \   0000000E   ....               RCALL   ?Subroutine121
    410          
    411              for (short i = 0; i < 44; i++) {
   \                     ??CrossCallReturnLabel_349:
   \   00000010   ....               RCALL   ?Subroutine64
    412                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FromTargetBuffer[portch][i] ;
   \                     ??CrossCallReturnLabel_73:
   \   00000012   ....               LDI     R26, LOW((TData + 1428))
   \   00000014   ....               LDI     R27, HIGH((TData + 1428))
   \   00000016   0FA8               ADD     R26, R24
   \   00000018   1FB9               ADC     R27, R25
   \   0000001A   2F02               MOV     R16, R18
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   E342               LDI     R20, 50
   \   00000020   ....               RCALL   ?Subroutine114
    413              }
   \                     ??CrossCallReturnLabel_260:
   \   00000022   ....               RCALL   ??Subroutine160_0
   \                     ??CrossCallReturnLabel_355:
   \   00000024   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_223:
   \   00000026   8153               LDD     R21, Z+3
   \   00000028   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_343:
   \   0000002A   9601               ADIW    R25:R24, 1
   \   0000002C   328C               CPI     R24, 44
   \   0000002E   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_220:
   \   00000030   F384               BRLT    ??CrossCallReturnLabel_73
    414              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000032   8102               LDD     R16, Z+2
   \   00000034   1B06               SUB     R16, R22
   \   00000036   5002               SUBI    R16, 2
   \   00000038   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_227:
   \   0000003A   0FA6               ADD     R26, R22
   \   0000003C   1FB7               ADC     R27, R23
   \   0000003E   ....               RCALL   ?Subroutine46
    415              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \                     ??CrossCallReturnLabel_41:
   \   00000040   1B06               SUB     R16, R22
   \   00000042   0B17               SBC     R17, R23
   \   00000044   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_18:
   \   00000046   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_82:
   \   00000048   ....               RJMP    ?Subroutine135
    416          
    417          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine67:
   \   00000000   0F06               ADD     R16, R22
   \   00000002   1F17               ADC     R17, R23
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   930C               ST      X, R16
   \   00000002   ....               RJMP    ??Subroutine142_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_304:
   \   00000002   2F21               MOV     R18, R17
   \   00000004   ....               RJMP    ?Subroutine109

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine115:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   8142               LDD     R20, Z+2
   \   00000006   8153               LDD     R21, Z+3
   \   00000008   0FA4               ADD     R26, R20
   \   0000000A   1FB5               ADC     R27, R21
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_259:
   \   00000002   E004               LDI     R16, 4
   \   00000004                      REQUIRE ??Subroutine147_0
   \   00000004                      ;               // Fall through to label ??Subroutine147_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine147_0:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_249:
   \   00000002                      REQUIRE ??Subroutine148_0
   \   00000002                      ;               // Fall through to label ??Subroutine148_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine148_0:
   \   00000000   1FB1               ADC     R27, R17
   \   00000002   ....               RJMP    ??Subroutine149_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   8142               LDD     R20, Z+2
   \   00000006   0FA4               ADD     R26, R20
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine89:
   \   00000000   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_163:
   \   00000002                      REQUIRE ??Subroutine149_0
   \   00000002                      ;               // Fall through to label ??Subroutine149_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine149_0:
   \   00000000   930C               ST      X, R16
   \   00000002   ....               RJMP    ??Subroutine159_0
    418          
    419          /*************************************************************************
    420          *
    421          * Build datablock for WHData on ADcard
    422          *
    423          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    424          void BuildWHdata(char ch, short pointer) {
   \                     BuildWHdata:
   \   00000000   ....               RCALL   ?Subroutine0
    425          
    426              UART[ch].RxSendReply = true;                               // flag for answering
    427          
    428              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF & 0xff;
   \                     ??CrossCallReturnLabel_208:
   \   00000002   E90C               LDI     R16, 156
   \   00000004   ....               RCALL   ?Subroutine33
    429              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF >> 8;
    430              short ntna = UART[ch].TxFirst;                          // remember index
    431              UART[ch].TxFirst += 2;                                  // two byte length
   \                     ??CrossCallReturnLabel_252:
   \   00000006   01A8               MOVW    R21:R20, R17:R16
   \   00000008   5F4E               SUBI    R20, 254
   \   0000000A   4F5F               SBCI    R21, 255
   \   0000000C   8342               STD     Z+2, R20
   \   0000000E   8353               STD     Z+3, R21
    432          
    433              OS_EnterRegion();
   \   00000010   ....               LDI     R26, LOW(OS_Counters)
   \   00000012   ....               LDI     R27, (OS_Counters) >> 8
   \   00000014   914C               LD      R20, X
   \   00000016   9543               INC     R20
   \   00000018   934C               ST      X, R20
    434              for (short i = 0; i < 4; i++) {
   \   0000001A   ....               RCALL   ?Subroutine64
    435                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] & 0xff; // WashTrackcnt
   \                     ??CrossCallReturnLabel_72:
   \   0000001C   01BC               MOVW    R23:R22, R25:R24
   \   0000001E   0F66               LSL     R22
   \   00000020   1F77               ROL     R23
   \   00000022   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_245:
   \   00000024   902C               LD      R2, X
   \   00000026   E0A8               LDI     R26, 8
   \   00000028   9E2A               MUL     R2, R26
   \   0000002A   0D40               ADD     R20, R0
   \   0000002C   1D51               ADC     R21, R1
   \   0000002E   01DA               MOVW    R27:R26, R21:R20
   \   00000030   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_233:
   \   00000032   8002               LDD     R0, Z+2
   \   00000034   8013               LDD     R1, Z+3
   \   00000036   0DA0               ADD     R26, R0
   \   00000038   1DB1               ADC     R27, R1
   \   0000003A   ....               RCALL   ?Subroutine102
    436                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] >> 8) & 0xff; // WashTrackcnt
   \                     ??CrossCallReturnLabel_133:
   \   0000003C   ....               RCALL   ?Subroutine63
    437              }
   \                     ??CrossCallReturnLabel_246:
   \   0000003E   916C               LD      R22, X
   \   00000040   E078               LDI     R23, 8
   \   00000042   9F67               MUL     R22, R23
   \   00000044   0D40               ADD     R20, R0
   \   00000046   1D51               ADC     R21, R1
   \   00000048   01DA               MOVW    R27:R26, R21:R20
   \   0000004A   9611               ADIW    R27:R26, 1
   \   0000004C   914C               LD      R20, X
   \   0000004E   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_63:
   \   00000050   9601               ADIW    R25:R24, 1
   \   00000052   3084               CPI     R24, 4
   \   00000054   E040               LDI     R20, 0
   \   00000056   0794               CPC     R25, R20
   \   00000058   F30C               BRLT    ??CrossCallReturnLabel_72
    438              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.LevelSwitch[UART[ch].pRxBuffer[pointer]];
   \   0000005A   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_240:
   \   0000005C   91AC               LD      R26, X
   \   0000005E   ....               SUBI    R26, LOW((-(TData + 1243) & 0xFFFF))
   \   00000060   ....               SBCI    R20, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000062   2FB4               MOV     R27, R20
   \   00000064   914C               LD      R20, X
   \   00000066   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_226:
   \   00000068   8162               LDD     R22, Z+2
   \   0000006A   0FA6               ADD     R26, R22
   \   0000006C   1FB5               ADC     R27, R21
   \   0000006E   ....               RCALL   ?Subroutine55
    439              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] & 0xff; // WashTrackcnt
   \                     ??CrossCallReturnLabel_62:
   \   00000070   914C               LD      R20, X
   \   00000072   E052               LDI     R21, 2
   \   00000074   9F45               MUL     R20, R21
   \   00000076   01D0               MOVW    R27:R26, R1:R0
   \   00000078   ....               SUBI    R26, LOW((-(TData + 1251) & 0xFFFF))
   \   0000007A   ....               SBCI    R27, HIGH((-(TData + 1251) & 0xFFFF))
   \   0000007C   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_234:
   \   0000007E   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_135:
   \   00000080   ....               RCALL   ?Subroutine55
    440              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] >> 8) & 0xff; // WashTrackcnt
   \                     ??CrossCallReturnLabel_61:
   \   00000082   912C               LD      R18, X
   \   00000084   E032               LDI     R19, 2
   \   00000086   9F23               MUL     R18, R19
   \   00000088   01D0               MOVW    R27:R26, R1:R0
   \   0000008A   ....               SUBI    R26, LOW((-(TData + 1251) & 0xFFFF))
   \   0000008C   ....               SBCI    R27, HIGH((-(TData + 1251) & 0xFFFF))
   \   0000008E   9611               ADIW    R27:R26, 1
   \   00000090   912C               LD      R18, X
   \   00000092   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_222:
   \   00000094   0FA4               ADD     R26, R20
   \   00000096   1FB5               ADC     R27, R21
   \   00000098   ....               RCALL   ??Subroutine151_0
    441              UART[ch].pTxBuffer[ntna]     = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??CrossCallReturnLabel_273:
   \   0000009A   ....               RCALL   ?Subroutine93
    442              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
    443              OS_LeaveRegion();
   \                     ??CrossCallReturnLabel_182:
   \   0000009C   ........           CALL    OS_LeaveRegion
    444          }
   \   000000A0   ....               RJMP    ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_134:
   \   00000002   ....               RJMP    ?Subroutine95

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine93:
   \   00000000   1B20               SUB     R18, R16
   \   00000002   5022               SUBI    R18, 2
   \   00000004   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_237:
   \   00000006   ....               RCALL   ??Subroutine160_0
   \                     ??CrossCallReturnLabel_357:
   \   00000008   932C               ST      X, R18
   \   0000000A   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_143:
   \   0000000C   1B20               SUB     R18, R16
   \   0000000E   0B31               SBC     R19, R17
   \   00000010   5022               SUBI    R18, 2
   \   00000012   4030               SBCI    R19, 0
   \   00000014   2F43               MOV     R20, R19
   \   00000016   8120               LD      R18, Z
   \   00000018   8131               LDD     R19, Z+1
   \   0000001A   0F20               ADD     R18, R16
   \   0000001C   1F31               ADC     R19, R17
   \   0000001E   01F9               MOVW    R31:R30, R19:R18
   \   00000020                      REQUIRE ?Subroutine126
   \   00000020                      ;               // Fall through to label ?Subroutine126

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   914D               LD      R20, X+
   \   00000002                      REQUIRE ?Subroutine119
   \   00000002                      ;               // Fall through to label ?Subroutine119

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine63:
   \   00000000   ....               LDI     R20, LOW((TData + 1179))
   \   00000002   ....               LDI     R21, HIGH((TData + 1179))
   \   00000004   0F46               ADD     R20, R22
   \   00000006   1F57               ADC     R21, R23
   \   00000008                      REQUIRE ?Subroutine95
   \   00000008                      ;               // Fall through to label ?Subroutine95

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   85A2               LDD     R26, Z+10
   \   00000002   85B3               LDD     R27, Z+11
   \   00000004                      REQUIRE ??Subroutine146_0
   \   00000004                      ;               // Fall through to label ??Subroutine146_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine120:
   \   00000000   4F3F               SBCI    R19, 255
   \   00000002   8322               STD     Z+2, R18
   \   00000004   8333               STD     Z+3, R19
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine151_0:
   \   00000000   932C               ST      X, R18
   \   00000002                      REQUIRE ?Subroutine110
   \   00000002                      ;               // Fall through to label ?Subroutine110

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine110:
   \   00000000   8122               LDD     R18, Z+2
   \   00000002   8133               LDD     R19, Z+3
   \   00000004   5F2F               SUBI    R18, 255
   \   00000006   ....               RJMP    ?Subroutine120
    445          
    446          
    447          
    448          /*************************************************************************
    449          *
    450          * Build setup dat package for AN-ZB485
    451          *
    452          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine127:
   \   00000000   01DB               MOVW    R27:R26, R23:R22
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    453          void BuildRS4Setup(char ch, short pointer) {
   \                     BuildRS4Setup:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    454          
    455              short ntna ;
    456              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   ....               RCALL   ??Subroutine141_0
    457          
    458              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP & 0xff;
   \                     ??CrossCallReturnLabel_217:
   \   00000004   E507               LDI     R16, 87
   \   00000006   ....               RCALL   ?Subroutine28
    459              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP >> 8;
    460              ntna = UART[ch].TxFirst ;                                    /* remember index */
    461              UART[ch].TxFirst += 2 ;                                      // two byte length
    462          
    463              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.PortUsed;  // send the setup
    464              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[0];  // send the sensor type
    465              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[1];  // send the sensor type
   \                     ??CrossCallReturnLabel_20:
   \   00000008   9120....           LDS     R18, (TData + 2)
   \   0000000C   ....               RCALL   ?Subroutine92
    466          
    467              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_275:
   \   0000000E                      REQUIRE ?Subroutine29
   \   0000000E                      ;               // Fall through to label ?Subroutine29
    468              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    469          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_183:
   \   00000002   ....               RJMP    ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_115:
   \   00000002   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_270:
   \   00000004   9120....           LDS     R18, TData
   \   00000008   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_276:
   \   0000000A   9120....           LDS     R18, (TData + 1)
   \   0000000E   ....               RJMP    ?Subroutine92

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine97:
   \   00000000   5F2E               SUBI    R18, 254
   \   00000002                      REQUIRE ?Subroutine120
   \   00000002                      ;               // Fall through to label ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_248:
   \   00000002   1FB3               ADC     R27, R19
   \   00000004                      REQUIRE ?Subroutine110
   \   00000004                      REQUIRE ??Subroutine151_0
   \   00000004                      ;               // Fall through to label ??Subroutine151_0
    470          
    471          /*************************************************************************
    472          *
    473          * Build datablock of measured data for ADcard
    474          *
    475          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   9601               ADIW    R25:R24, 1
   \   00000002   308E               CPI     R24, 14
   \   00000004                      REQUIRE ??Subroutine144_0
   \   00000004                      ;               // Fall through to label ??Subroutine144_0

   \                                 In  segment CODE, align 2, keep-with-next
    476          void BuildMData485(char ch, short pointer) {
   \                     BuildMData485:
   \   00000000   ....               RCALL   ?Subroutine0
    477          
    478              short ntna, i ;
    479              UART[ch].RxSendReply = true ;                               // flag for answering
    480          
    481              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA & 0xff;
   \                     ??CrossCallReturnLabel_209:
   \   00000002   E705               LDI     R16, 117
   \   00000004   ....               RCALL   ?Subroutine33
    482              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA >> 8;
    483              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_250:
   \   00000006   0118               MOVW    R3:R2, R17:R16
    484              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000008   5F0E               SUBI    R16, 254
   \   0000000A   ....               RCALL   ?Subroutine44
    485          
    486              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \                     ??CrossCallReturnLabel_39:
   \   0000000C   910C               LD      R16, X
   \   0000000E   ....               RCALL   ??Subroutine147_0
    487              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.IOUnitStatus[UART[ch].pRxBuffer[pointer]] | (RestartStatus <<4); // IOUnit status +  restart status
   \                     ??CrossCallReturnLabel_255:
   \   00000010   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_241:
   \   00000012   91AC               LD      R26, X
   \   00000014   E0B0               LDI     R27, 0
   \   00000016   ....               SUBI    R26, LOW((-(TData + 3) & 0xFFFF))
   \   00000018   ....               SBCI    R27, HIGH((-(TData + 3) & 0xFFFF))
   \   0000001A   911C               LD      R17, X
   \   0000001C   9100....           LDS     R16, RestartStatus
   \   00000020   9502               SWAP    R16
   \   00000022   7F00               ANDI    R16, 0xF0
   \   00000024   2B10               OR      R17, R16
   \   00000026   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_158:
   \   00000028   931C               ST      X, R17
   \   0000002A   ....               RCALL   ?Subroutine42
    488              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] & 0xff; // Failcnt error
   \                     ??CrossCallReturnLabel_34:
   \   0000002C   910D               LD      R16, X+
   \   0000002E   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_159:
   \   00000030   930C               ST      X, R16
   \   00000032   ....               RCALL   ?Subroutine42
    489              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] >> 8) & 0xff; // Failcnt error
   \                     ??CrossCallReturnLabel_35:
   \   00000034   9611               ADIW    R27:R26, 1
   \   00000036   910C               LD      R16, X
   \   00000038   ....               RCALL   ?Subroutine43
    490              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] & 0xff; // Failcnt total
   \                     ??CrossCallReturnLabel_36:
   \   0000003A   910D               LD      R16, X+
   \   0000003C   ....               RCALL   ?Subroutine43
    491              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] >> 8) & 0xff; // Failcnt total
   \                     ??CrossCallReturnLabel_37:
   \   0000003E   9611               ADIW    R27:R26, 1
   \   00000040   910C               LD      R16, X
   \   00000042   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_160:
   \   00000044   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_42:
   \   00000046   5F0F               SUBI    R16, 255
   \   00000048   ....               RCALL   ?Subroutine44
    492              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusSWVer[UART[ch].pRxBuffer[pointer]] ; // Target status byte 1
   \                     ??CrossCallReturnLabel_38:
   \   0000004A   91AC               LD      R26, X
   \   0000004C   E0B0               LDI     R27, 0
   \   0000004E   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   00000050   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000052   910C               LD      R16, X
   \   00000054   ....               RCALL   ?Subroutine30
    493              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] ; // Target status byte 2
   \                     ??CrossCallReturnLabel_22:
   \   00000056   ....               RCALL   ?Subroutine30
    494          
    495              TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] &= ~0x80;                                  //reset restart flag for adcard
   \                     ??CrossCallReturnLabel_23:
   \   00000058   770F               ANDI    R16, 0x7F
   \   0000005A   930C               ST      X, R16
    496          
    497              for (i = 0; i < 14; i++) {
   \   0000005C   ....               RCALL   ?Subroutine64
    498                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup1[UART[ch].pRxBuffer[pointer]][i] ;
   \                     ??CrossCallReturnLabel_74:
   \   0000005E   ....               LDI     R22, LOW((TData + 59))
   \   00000060   ....               LDI     R23, HIGH((TData + 59))
   \   00000062   ....               RCALL   ?Subroutine3
    499                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup2[UART[ch].pRxBuffer[pointer]][i] ;
   \                     ??CrossCallReturnLabel_257:
   \   00000064   ....               LDI     R22, LOW((TData + 171))
   \   00000066   ....               LDI     R23, HIGH((TData + 171))
   \   00000068   ....               RCALL   ?Subroutine3
    500                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.RS4.Result[UART[ch].pRxBuffer[pointer]][i]) ;   // ADresult
   \                     ??CrossCallReturnLabel_258:
   \   0000006A   ....               LDI     R22, LOW((TData + 731))
   \   0000006C   ....               LDI     R23, HIGH((TData + 731))
   \   0000006E   018C               MOVW    R17:R16, R25:R24
   \   00000070   0F00               LSL     R16
   \   00000072   1F11               ROL     R17
   \   00000074   0F00               LSL     R16
   \   00000076   1F11               ROL     R17
   \   00000078   0F60               ADD     R22, R16
   \   0000007A   1F71               ADC     R23, R17
   \   0000007C   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_242:
   \   0000007E   914C               LD      R20, X
   \   00000080   E050               LDI     R21, 0
   \   00000082   E308               LDI     R16, 56
   \   00000084   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_184:
   \   00000086   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_78:
   \   00000088   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_228:
   \   0000008A   ....               RCALL   ??Subroutine142_0
   \                     ??CrossCallReturnLabel_282:
   \   0000008C   ....               RCALL   ??Subroutine160_0
   \                     ??CrossCallReturnLabel_356:
   \   0000008E   ....               RCALL   ?Subroutine66
    501                  UART[ch].TxFirst += sizeof(float) ;
   \                     ??CrossCallReturnLabel_80:
   \   00000090   ....               RCALL   ??Subroutine142_0
    502              }
   \                     ??CrossCallReturnLabel_283:
   \   00000092   5F0C               SUBI    R16, 252
   \   00000094   ....               RCALL   ?Subroutine121
   \                     ??CrossCallReturnLabel_350:
   \   00000096   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_219:
   \   00000098   F314               BRLT    ??CrossCallReturnLabel_74
    503          
    504              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   1902               SUB     R16, R2
   \   0000009E   5002               SUBI    R16, 2
   \   000000A0   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_229:
   \   000000A2   0DA2               ADD     R26, R2
   \   000000A4   1DB3               ADC     R27, R3
   \   000000A6   ....               RCALL   ?Subroutine46
    505              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \                     ??CrossCallReturnLabel_40:
   \   000000A8   1902               SUB     R16, R2
   \   000000AA   0913               SBC     R17, R3
   \   000000AC   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_19:
   \   000000AE   0D02               ADD     R16, R2
   \   000000B0   1D13               ADC     R17, R3
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               RJMP    ?Subroutine135
    506          
    507          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine66:
   \   00000000   934D               ST      X+, R20
   \   00000002   935D               ST      X+, R21
   \   00000004   936D               ST      X+, R22
   \   00000006   937C               ST      X, R23
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine65:
   \   00000000   914D               LD      R20, X+
   \   00000002   915D               LD      R21, X+
   \   00000004   916D               LD      R22, X+
   \   00000006   917C               LD      R23, X
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   ....               RCALL   ?Subroutine121
   \                     ??CrossCallReturnLabel_354:
   \   00000002   ....               RJMP    ?Subroutine95

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_162:
   \   00000002   930C               ST      X, R16
   \   00000004   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_117:
   \   00000006   ....               SUBI    R26, LOW((-(TData + 13) & 0xFFFF))
   \   00000008   ....               SBCI    R27, HIGH((-(TData + 13) & 0xFFFF))
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine42:
   \   00000000   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_118:
   \   00000002   ....               SUBI    R26, LOW((-(TData + 11) & 0xFFFF))
   \   00000004   ....               SBCI    R27, HIGH((-(TData + 11) & 0xFFFF))
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine88:
   \   00000000   ....               RCALL   ??Subroutine159_0
   \                     ??CrossCallReturnLabel_345:
   \   00000002   85A2               LDD     R26, Z+10
   \   00000004   85B3               LDD     R27, Z+11
   \   00000006   0FA2               ADD     R26, R18
   \   00000008   1FB3               ADC     R27, R19
   \   0000000A   910C               LD      R16, X
   \   0000000C   E014               LDI     R17, 4
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   01D0               MOVW    R27:R26, R1:R0
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_247:
   \   00000002   1FB1               ADC     R27, R17
   \   00000004   ....               RCALL   ??Subroutine149_0
   \                     ??CrossCallReturnLabel_256:
   \   00000006   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_244:
   \   00000008   91AC               LD      R26, X
   \   0000000A   E0B0               LDI     R27, 0
   \   0000000C   ....               SUBI    R26, LOW((-(TData + 51) & 0xFFFF))
   \   0000000E   ....               SBCI    R27, HIGH((-(TData + 51) & 0xFFFF))
   \   00000010   910C               LD      R16, X
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0F68               ADD     R22, R24
   \   00000002   1F79               ADC     R23, R25
   \   00000004   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_243:
   \   00000006   914C               LD      R20, X
   \   00000008   E050               LDI     R21, 0
   \   0000000A   E00E               LDI     R16, 14
   \   0000000C   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_185:
   \   0000000E   910C               LD      R16, X
   \   00000010                      REQUIRE ?Subroutine89
   \   00000010                      ;               // Fall through to label ?Subroutine89

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine81:
   \   00000000   ....               RCALL   ??Subroutine150_0
   \                     ??CrossCallReturnLabel_265:
   \   00000002   0F60               ADD     R22, R16
   \   00000004   1F71               ADC     R23, R17
   \   00000006                      REQUIRE ?Subroutine127
   \   00000006                      ;               // Fall through to label ?Subroutine127
    508          
    509          /*************************************************************************
    510          *
    511          * Build datablock of raw and cal data for ADcard
    512          *
    513          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    514          void BuildRData485(char ch, short pointer) {
   \                     BuildRData485:
   \   00000000   ....               RCALL   ?Subroutine70
   \                     ??CrossCallReturnLabel_86:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   0119               MOVW    R3:R2, R19:R18
    515          
    516              short ntna, i ;
    517              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000004   ....               RCALL   ??Subroutine141_0
    518          
    519              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA & 0xff;
   \                     ??CrossCallReturnLabel_215:
   \   00000006   E706               LDI     R16, 118
   \   00000008   ....               RCALL   ?Subroutine32
    520              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA >> 8;
    521              ntna = UART[ch].TxFirst ;                                    /* remember index */
    522              UART[ch].TxFirst += 2 ;                                      // two byte length
    523          
    524              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \                     ??CrossCallReturnLabel_25:
   \   0000000A   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_137:
   \   0000000C   910C               LD      R16, X
   \   0000000E   ....               RCALL   ??Subroutine147_0
    525              for (i = 0; i < 14; i++) {
   \                     ??CrossCallReturnLabel_254:
   \   00000010   ....               RCALL   ?Subroutine64
    526                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Raw[UART[ch].pRxBuffer[pointer]][i]) ;   // Raw data
   \                     ??CrossCallReturnLabel_71:
   \   00000012   01BC               MOVW    R23:R22, R25:R24
   \   00000014   0F66               LSL     R22
   \   00000016   1F77               ROL     R23
   \   00000018   ....               LDI     R16, LOW((TData + 283))
   \   0000001A   2E40               MOV     R4, R16
   \   0000001C   ....               LDI     R16, HIGH((TData + 283))
   \   0000001E   ....               RCALL   ?Subroutine2
    527                  UART[ch].TxFirst += sizeof(short) ;
    528                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Cal[UART[ch].pRxBuffer[pointer]][i]) ;   // Cal data
   \                     ??CrossCallReturnLabel_1:
   \   00000020   ....               LDI     R16, LOW((TData + 507))
   \   00000022   2E40               MOV     R4, R16
   \   00000024   ....               LDI     R16, HIGH((TData + 507))
   \   00000026   ....               RCALL   ?Subroutine2
    529                  UART[ch].TxFirst += sizeof(short) ;
    530              }
   \                     ??CrossCallReturnLabel_0:
   \   00000028   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_218:
   \   0000002A   F39C               BRLT    ??CrossCallReturnLabel_71
    531          
    532              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000002C   ....               RCALL   ?Subroutine25
    533              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    534          
    535          }
   \                     ??CrossCallReturnLabel_179:
   \   0000002E                      REQUIRE ?Subroutine136
   \   0000002E                      ;               // Fall through to label ?Subroutine136

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0E46               ADD     R4, R22
   \   00000002   1F07               ADC     R16, R23
   \   00000004   2E50               MOV     R5, R16
   \   00000006   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_138:
   \   00000008   914C               LD      R20, X
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   E10C               LDI     R16, 28
   \   0000000E   ....               RCALL   ??Subroutine150_0
   \                     ??CrossCallReturnLabel_264:
   \   00000010   0E40               ADD     R4, R16
   \   00000012   1E51               ADC     R5, R17
   \   00000014   01D2               MOVW    R27:R26, R5:R4
   \   00000016   910D               LD      R16, X+
   \   00000018   911C               LD      R17, X
   \   0000001A   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_161:
   \   0000001C   930D               ST      X+, R16
   \   0000001E   931C               ST      X, R17
   \   00000020   ....               RCALL   ??Subroutine142_0
   \                     ??CrossCallReturnLabel_284:
   \   00000022   ....               RJMP    ?Subroutine91

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine106:
   \   00000000   85A2               LDD     R26, Z+10
   \   00000002   85B3               LDD     R27, Z+11
   \   00000004   0DA2               ADD     R26, R2
   \   00000006   1DB3               ADC     R27, R3
   \   00000008   9508               RET
    536          
    537          /*************************************************************************
    538          *
    539          * Build setup data package for AN-ZBANA
    540          *
    541          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    542          void BuildANASetup(char ch, short pointer) {
   \                     BuildANASetup:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    543          
    544              short ntna ;
    545              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   ....               RCALL   ??Subroutine141_0
    546          
    547              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP & 0xff;
   \                     ??CrossCallReturnLabel_214:
   \   00000004   EB0B               LDI     R16, 187
   \   00000006   ....               RCALL   ?Subroutine28
    548              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP >> 8;
    549              ntna = UART[ch].TxFirst ;                                    /* remember index */
    550              UART[ch].TxFirst += 2 ;                                      // two byte length
    551          
    552              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.PortUsed & 0xff;
    553              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.Ana.PortUsed >> 8) & 0xff;
    554          
    555              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_21:
   \   00000008   ....               RJMP    ?Subroutine29
    556              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    557          }
    558          
    559          /*************************************************************************
    560          *
    561          * Build filter data package for AN-ZBANA
    562          *
    563          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    564          void BuildANAFilter(char ch, short pointer) {
   \                     BuildANAFilter:
   \   00000000   011D               MOVW    R3:R2, R27:R26
    565          
    566              char port;
    567              short ntna ;
    568              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   ....               RCALL   ?Subroutine1
    569          
    570              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER & 0xff;
   \                     ??CrossCallReturnLabel_211:
   \   00000004   EC2F               LDI     R18, 207
   \   00000006   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_312:
   \   00000008   ....               RCALL   ?Subroutine17
    571              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER >> 8;
    572              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \                     ??CrossCallReturnLabel_10:
   \   0000000A   0198               MOVW    R19:R18, R17:R16
    573              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000000C   5F0E               SUBI    R16, 254
   \   0000000E   ....               RCALL   ?Subroutine121
    574          
    575              for (port = 0; port < 12; port++) {
   \                     ??CrossCallReturnLabel_348:
   \   00000010   E040               LDI     R20, 0
    576                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Filter[port];
   \                     ??BuildANAFilter_0:
   \   00000012   E0F0               LDI     R31, 0
   \   00000014   2FE4               MOV     R30, R20
   \   00000016   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000001A   8152               LDD     R21, Z+2
   \   0000001C   ....               RCALL   ?Subroutine39
    577              }
   \                     ??CrossCallReturnLabel_176:
   \   0000001E   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_153:
   \   00000020   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_81:
   \   00000022   8350               ST      Z, R21
   \   00000024   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_287:
   \   00000026   ....               RCALL   ?Subroutine140
   \                     ??CrossCallReturnLabel_340:
   \   00000028   9543               INC     R20
   \   0000002A   304C               CPI     R20, 12
   \   0000002C   F390               BRCS    ??BuildANAFilter_0
    578          
    579              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000002E   8102               LDD     R16, Z+2
   \   00000030   1B02               SUB     R16, R18
   \   00000032   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_132:
   \   00000034   0FE2               ADD     R30, R18
   \   00000036   1FF3               ADC     R31, R19
   \   00000038   ....               RCALL   ?Subroutine36
    580              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \                     ??CrossCallReturnLabel_31:
   \   0000003A   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_306:
   \   0000003C   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_32:
   \   0000003E   8311               STD     Z+1, R17
    581          }
   \   00000040   01D1               MOVW    R27:R26, R3:R2
   \   00000042   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   8300               ST      Z, R16
   \   00000002                      REQUIRE ?Subroutine90
   \   00000002                      ;               // Fall through to label ?Subroutine90

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_151:
   \   00000002   0FE2               ADD     R30, R18
   \   00000004   1FF3               ADC     R31, R19
   \   00000006   9508               RET
    582          
    583          /*************************************************************************
    584          *
    585          * Build datablock for External AD (ANA)
    586          *
    587          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    588          void BuildMDataANA(char ch, short pointer) {
   \                     BuildMDataANA:
   \   00000000   ....               RCALL   ?Subroutine0
    589          
    590              short ntna, i ;
    591              UART[ch].RxSendReply = true ;                               // flag for answering
    592          
    593              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA & 0xff;
   \                     ??CrossCallReturnLabel_207:
   \   00000002   ED09               LDI     R16, 217
   \   00000004   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_65:
   \   00000006   ....               RCALL   ??Subroutine153_0
    594              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA >> 8;
   \                     ??CrossCallReturnLabel_342:
   \   00000008   E004               LDI     R16, 4
   \   0000000A   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_225:
   \   0000000C   8122               LDD     R18, Z+2
   \   0000000E   0FA2               ADD     R26, R18
   \   00000010   ....               RCALL   ??Subroutine148_0
    595              ntna = UART[ch].TxFirst ;                                    /* remember index */
    596              UART[ch].TxFirst += 2 ;                                      // two byte length
   \                     ??CrossCallReturnLabel_253:
   \   00000012   0198               MOVW    R19:R18, R17:R16
   \   00000014   ....               RCALL   ?Subroutine97
    597          
    598              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RestartStatus << 4) ;    // Add restart status
   \                     ??CrossCallReturnLabel_269:
   \   00000016   9120....           LDS     R18, RestartStatus
   \   0000001A   9522               SWAP    R18
   \   0000001C   7F20               ANDI    R18, 0xF0
   \   0000001E   ....               RCALL   ?Subroutine92
    599              for (i = 0; i<12; i++) {
   \                     ??CrossCallReturnLabel_274:
   \   00000020   ....               RCALL   ?Subroutine64
    600                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Status[i] ;
   \                     ??CrossCallReturnLabel_70:
   \   00000022   01DC               MOVW    R27:R26, R25:R24
   \   00000024   ....               SUBI    R26, LOW((-(TData + 14) & 0xFFFF))
   \   00000026   ....               SBCI    R27, HIGH((-(TData + 14) & 0xFFFF))
   \   00000028   912C               LD      R18, X
   \   0000002A   ....               RCALL   ?Subroutine115
   \                     ??CrossCallReturnLabel_157:
   \   0000002C   ....               RCALL   ??Subroutine151_0
    601                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.Ana.Result[i]) ;   // ADresult
   \                     ??CrossCallReturnLabel_272:
   \   0000002E   019C               MOVW    R19:R18, R25:R24
   \   00000030   0F22               LSL     R18
   \   00000032   1F33               ROL     R19
   \   00000034   0F22               LSL     R18
   \   00000036   1F33               ROL     R19
   \   00000038   01D9               MOVW    R27:R26, R19:R18
   \   0000003A   ....               SUBI    R26, LOW((-(TData + 26) & 0xFFFF))
   \   0000003C   ....               SBCI    R27, HIGH((-(TData + 26) & 0xFFFF))
   \   0000003E   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_77:
   \   00000040   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_66:
   \   00000042   ....               RCALL   ?Subroutine66
    602                  UART[ch].TxFirst += sizeof(float) ;
   \                     ??CrossCallReturnLabel_79:
   \   00000044   ....               RCALL   ?Subroutine111
    603              }
   \                     ??CrossCallReturnLabel_140:
   \   00000046   5F2C               SUBI    R18, 252
   \   00000048   ....               RCALL   ?Subroutine120
   \                     ??CrossCallReturnLabel_268:
   \   0000004A   9601               ADIW    R25:R24, 1
   \   0000004C   308C               CPI     R24, 12
   \   0000004E   E020               LDI     R18, 0
   \   00000050   0792               CPC     R25, R18
   \   00000052   F33C               BRLT    ??CrossCallReturnLabel_70
    604          
    605              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000054   8122               LDD     R18, Z+2
   \   00000056   ....               RCALL   ?Subroutine93
    606              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    607          
    608          }
   \                     ??CrossCallReturnLabel_181:
   \   00000058   ....               RJMP    ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine59:
   \   00000000   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_232:
   \   00000002   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_141:
   \   00000004   ....               RJMP    ??Subroutine146_0
    609          
    610          /*************************************************************************
    611          *
    612          * Build datablock for Stack status
    613          *
    614          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    615          void BuildStackStatus(char ch, short pointer) {
   \                     BuildStackStatus:
   \   00000000   ....               RCALL   ?Subroutine49
    616          
    617              short ntna, stack ;
    618              UART[ch].RxSendReply = true ;                               // flag for answering
   \                     ??CrossCallReturnLabel_52:
   \   00000002   ....               RCALL   ?Subroutine1
    619          
    620              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS & 0xff;
   \                     ??CrossCallReturnLabel_213:
   \   00000004   E727               LDI     R18, 119
   \   00000006   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_295:
   \   00000008   ....               RCALL   ??Subroutine158_0
    621              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS >> 8;
   \                     ??CrossCallReturnLabel_331:
   \   0000000A   E027               LDI     R18, 7
   \   0000000C   ....               RCALL   ?Subroutine19
    622              ntna = UART[ch].TxFirst ;                                    /* remember index */
    623              UART[ch].TxFirst += 2 ;                                      // two byte length
   \                     ??CrossCallReturnLabel_186:
   \   0000000E   5F0E               SUBI    R16, 254
   \   00000010   ....               RCALL   ?Subroutine121
    624          
    625              stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
   \                     ??CrossCallReturnLabel_352:
   \   00000012   ....               LDI     R16, LOW(TCB_USART0)
   \   00000014   ....               LDI     R17, (TCB_USART0) >> 8
   \   00000016   ....               RCALL   ?Subroutine20
    626              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    627              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    628              stack = OS_GetStackSpace(&TCB_USART1);                            // USART 1
   \                     ??CrossCallReturnLabel_17:
   \   00000018   ....               LDI     R16, LOW(TCB_USART1)
   \   0000001A   ....               LDI     R17, (TCB_USART1) >> 8
   \   0000001C   ....               RCALL   ?Subroutine20
    629              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    630              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    631              stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \                     ??CrossCallReturnLabel_16:
   \   0000001E   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   00000020   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   00000022   ....               RCALL   ?Subroutine20
    632              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    633              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    634              switch (UnitID) {
   \                     ??CrossCallReturnLabel_15:
   \   00000024   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_198:
   \   00000026   F019               BREQ    ??BuildStackStatus_0
   \   00000028   950A               DEC     R16
   \   0000002A   F041               BREQ    ??BuildStackStatus_1
   \   0000002C   C00D               RJMP    ??CrossCallReturnLabel_332
    635              case AN_ZB485 :
    636                  stack = OS_GetStackSpace(&TCB_RS485Ctl);                            // RS485 Control
   \                     ??BuildStackStatus_0:
   \   0000002E   ....               LDI     R16, LOW(TCB_RS485Ctl)
   \   00000030   ....               LDI     R17, (TCB_RS485Ctl) >> 8
   \   00000032   ....               RCALL   ?Subroutine20
    637                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    638                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
    639                  stack = OS_GetStackSpace(&TCB_RS485Rec);                            // RS485 receive
   \                     ??CrossCallReturnLabel_14:
   \   00000034   ....               LDI     R16, LOW(TCB_RS485Rec)
   \   00000036   ....               LDI     R17, (TCB_RS485Rec) >> 8
   \   00000038   ....               RCALL   ?Subroutine84
    640                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    641                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \                     ??CrossCallReturnLabel_191:
   \   0000003A   C005               RJMP    ??CrossCallReturnLabel_292
    642                  break;
    643              case AN_ZBANA :
    644                  stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
   \                     ??BuildStackStatus_1:
   \   0000003C   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000003E   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000040   ....               RCALL   ?Subroutine84
    645                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
    646                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \                     ??CrossCallReturnLabel_190:
   \   00000042   ....               RCALL   ?Subroutine18
    647                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \                     ??CrossCallReturnLabel_13:
   \   00000044   ....               RCALL   ?Subroutine16
    648                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \                     ??CrossCallReturnLabel_292:
   \   00000046   ....               RCALL   ??Subroutine158_0
    649                  break;
    650              }
    651          
    652              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??CrossCallReturnLabel_332:
   \   00000048   8102               LDD     R16, Z+2
   \   0000004A   1B08               SUB     R16, R24
   \   0000004C   5002               SUBI    R16, 2
   \   0000004E   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_166:
   \   00000050   ....               RCALL   ?Subroutine36
    653              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \                     ??CrossCallReturnLabel_30:
   \   00000052   1B08               SUB     R16, R24
   \   00000054   0B19               SBC     R17, R25
   \   00000056   ....               RCALL   ??Subroutine155_0
   \                     ??CrossCallReturnLabel_303:
   \   00000058   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_149:
   \   0000005A   ....               RCALL   ?Subroutine123
   \                     ??CrossCallReturnLabel_164:
   \   0000005C   8311               STD     Z+1, R17
    654          
    655          }
   \   0000005E   ....               RJMP    ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine84:
   \   00000000   ........           CALL    OS_GetStackSpace
   \   00000004   912D               LD      R18, X+
   \   00000006   913C               LD      R19, X
   \   00000008   9711               SBIW    R27:R26, 1
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_155:
   \   0000000E   0F26               ADD     R18, R22
   \   00000010   1F37               ADC     R19, R23
   \   00000012   01F9               MOVW    R31:R30, R19:R18
   \   00000014   8300               ST      Z, R16
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_271:
   \   0000001A   2F21               MOV     R18, R17
   \   0000001C   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_316:
   \   0000001E   8142               LDD     R20, Z+2
   \   00000020   0F04               ADD     R16, R20
   \   00000022                      REQUIRE ?Subroutine130
   \   00000022                      ;               // Fall through to label ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_192:
   \   00000002   ....               RJMP    ??Subroutine158_0
    656          
    657          //////////////////////////////////////////////////////////////////////////////
    658          // Receiving data to IO module here
    659          /////////////////////////////////////////////////////////////////////////////
    660          
    661          /*************************************************************************
    662          *
    663          * Receive Command to Reset the EEPROM
    664          *
    665          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    666          void GetResetEEPROM(char ch, short pointer) {
   \                     GetResetEEPROM:
    667          
    668              EEPROMReset();
   \   00000000   ........           JMP     EEPROMReset
    669          }
    670          
    671          
    672          /*************************************************************************
    673          *
    674          * Receive Command to go to the bootloader program
    675          *
    676          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    677          void GetGotoBootloader(char ch, short pointer) {
   \                     GetGotoBootloader:
   \                     ??GetGotoBootloader_0:
    678          
    679          //    void (*BootApp)(void) = (void(*)())0xF000;
    680          
    681              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    682                  ;
    683              EEARL = (0x0fff & 0xff);
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB0E               OUT     0x1E, R16
    684              EEARH = (0x0fff >> 8);
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   BB0F               OUT     0x1F, R16
    685              EEDR = 0xff;
   \   0000000C   EF0F               LDI     R16, 255
   \   0000000E   BB0D               OUT     0x1D, R16
    686              EECR |= (1<<EEMWE);
   \   00000010   9AE2               SBI     0x1C, 0x02
    687              EECR |= (1<<EEWE);
   \   00000012   9AE1               SBI     0x1C, 0x01
    688              while (EECR & (1<<EEWE))
   \                     ??GetGotoBootloader_1:
   \   00000014   99E1               SBIC    0x1C, 0x01
   \   00000016   CFFE               RJMP    ??GetGotoBootloader_1
    689                  ;
    690          
    691              WDTCR = 0x18;               //Start watchdog to genetate restart
   \   00000018   E108               LDI     R16, 24
   \   0000001A   BD01               OUT     0x21, R16
    692              WDTCR = 0x08;               //Start watchdog to genetate restart
   \   0000001C   E008               LDI     R16, 8
   \   0000001E   BD01               OUT     0x21, R16
    693          }
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_EECR
   \   00000022                      REQUIRE _A_EEAR
   \   00000022                      REQUIRE _A_EEDR
   \   00000022                      REQUIRE _A_WDTCR
    694          
    695          /*************************************************************************
    696          *
    697          * Receive EEPROM data
    698          *
    699          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    700          void GetEEPROMData(char ch, short pointer) {
   \                     GetEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   0139               MOVW    R7:R6, R19:R18
    701          
    702            char channel;
    703            int t0;
    704          
    705              channel = UART[ch].pRxBuffer[pointer] ;
   \   00000006   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_3:
   \   00000008   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_89:
   \   0000000A   8542               LDD     R20, Z+10
   \   0000000C   8553               LDD     R21, Z+11
   \   0000000E   0D46               ADD     R20, R6
   \   00000010   1F53               ADC     R21, R19
   \   00000012   01FA               MOVW    R31:R30, R21:R20
   \   00000014   8120               LD      R18, Z
    706              if ((channel >= 0x80) && (UnitID == 0x01)) { // AN-ZBANA
   \   00000016   3820               CPI     R18, 128
   \   00000018   F0F0               BRCS    ??GetEEPROMData_0
   \   0000001A   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_43:
   \   0000001C   F4E1               BRNE    ??GetEEPROMData_0
    707                *((float*)&TData.Ana.Offset[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+1]) ;  //offset
   \   0000001E   ....               LDI     R16, LOW((TData + 98))
   \   00000020   ....               LDI     R17, HIGH((TData + 98))
   \   00000022   2F62               MOV     R22, R18
   \   00000024   E070               LDI     R23, 0
   \   00000026   706F               ANDI    R22, 0x0F
   \   00000028   0F66               LSL     R22
   \   0000002A   0F66               LSL     R22
   \   0000002C   0F06               ADD     R16, R22
   \   0000002E   1F17               ADC     R17, R23
   \   00000030   8001               LDD     R0, Z+1
   \   00000032   8012               LDD     R1, Z+2
   \   00000034   8023               LDD     R2, Z+3
   \   00000036   8034               LDD     R3, Z+4
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   8200               ST      Z, R0
   \   0000003C   8211               STD     Z+1, R1
   \   0000003E   8222               STD     Z+2, R2
   \   00000040   8233               STD     Z+3, R3
    708                *((float*)&TData.Ana.Gain[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+5]) ;  //gain
   \   00000042   01FA               MOVW    R31:R30, R21:R20
   \   00000044   8005               LDD     R0, Z+5
   \   00000046   8016               LDD     R1, Z+6
   \   00000048   8027               LDD     R2, Z+7
   \   0000004A   8430               LDD     R3, Z+8
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   AA00               STD     Z+48, R0
   \   00000050   AA11               STD     Z+49, R1
   \   00000052   AA22               STD     Z+50, R2
   \   00000054   AA33               STD     Z+51, R3
    709              }
    710              WriteEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+1]);
   \                     ??GetEEPROMData_0:
   \   00000056   E008               LDI     R16, 8
   \   00000058   9F20               MUL     R18, R16
   \   0000005A   01D0               MOVW    R27:R26, R1:R0
   \   0000005C   5F4F               SUBI    R20, 255
   \   0000005E   4F5F               SBCI    R21, 255
   \   00000060   E024               LDI     R18, 4
   \   00000062   0180               MOVW    R17:R16, R1:R0
   \   00000064   ....               RCALL   ?Subroutine74
    711              t0 = OS_GetTime();
    712              do {
    713                OS_Delay(1);
   \                     ??CrossCallReturnLabel_188:
   \   00000066   ....               RCALL   ?Subroutine12
    714              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);  //8.5 ms programming time
   \                     ??CrossCallReturnLabel_300:
   \   00000068   F420               BRCC    ??GetEEPROMData_1
   \   0000006A   9100....           LDS     R16, EEPWriteOK
   \   0000006E   2300               TST     R16
   \   00000070   F3D1               BREQ    ??CrossCallReturnLabel_188
    715              WriteEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+5]);
   \                     ??GetEEPROMData_1:
   \   00000072   01F2               MOVW    R31:R30, R5:R4
   \   00000074   8542               LDD     R20, Z+10
   \   00000076   8553               LDD     R21, Z+11
   \   00000078   0D46               ADD     R20, R6
   \   0000007A   1D57               ADC     R21, R7
   \   0000007C   5F4B               SUBI    R20, 251
   \   0000007E   4F5F               SBCI    R21, 255
   \   00000080   E024               LDI     R18, 4
   \   00000082   9614               ADIW    R27:R26, 4
   \   00000084   018D               MOVW    R17:R16, R27:R26
   \   00000086   ....               RCALL   ?Subroutine74
    716              t0 = OS_GetTime();
    717              do {
    718                OS_Delay(1);
   \                     ??CrossCallReturnLabel_189:
   \   00000088   ....               RCALL   ?Subroutine12
    719              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);
   \                     ??CrossCallReturnLabel_301:
   \   0000008A   F420               BRCC    ??GetEEPROMData_2
   \   0000008C   9100....           LDS     R16, EEPWriteOK
   \   00000090   2300               TST     R16
   \   00000092   F3D1               BREQ    ??CrossCallReturnLabel_189
    720          }
   \                     ??GetEEPROMData_2:
   \   00000094   E0E8               LDI     R30, 8
   \   00000096   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine74:
   \   00000000   ........           CALL    WriteEEPROMBuffer
   \   00000004   ........           CALL    OS__Gettime
   \   00000008                      REQUIRE ?Subroutine128
   \   00000008                      ;               // Fall through to label ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   E001               LDI     R16, 1
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    OS_Delay
   \   00000008   ........           CALL    OS__Gettime
   \   0000000C   1B08               SUB     R16, R24
   \   0000000E   0B19               SBC     R17, R25
   \   00000010   3204               CPI     R16, 36
   \   00000012                      REQUIRE ?Subroutine129
   \   00000012                      ;               // Fall through to label ?Subroutine129

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   2F40               MOV     R20, R16
   \   00000002   E050               LDI     R21, 0
   \   00000004   E10A               LDI     R16, 26
   \   00000006   ....               RJMP    ??Subroutine150_0
    721          
    722          /*************************************************************************
    723          *
    724          * Receive AN-ZB485 setup
    725          *
    726          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    727          void GetRS4Setup(char ch, short pointer) {
   \                     GetRS4Setup:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_2:
   \   00000006   ....               RCALL   ?Subroutine116
   \                     ??CrossCallReturnLabel_358:
   \   00000008   961A               ADIW    R27:R26, 10
   \   0000000A   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_33:
   \   0000000C   8100               LD      R16, Z
   \   0000000E   9300....           STS     TData, R16
    728          
    729              TData.RS4.PortUsed = UART[ch].pRxBuffer[pointer];           // Get the setup
    730              TData.RS4.SensorType[0] = UART[ch].pRxBuffer[pointer+1];       // Get the sensor type
   \   00000012   8101               LDD     R16, Z+1
   \   00000014   9300....           STS     (TData + 1), R16
    731              TData.RS4.SensorType[1] = UART[ch].pRxBuffer[pointer+2];       // Get the sensor type
   \   00000018   8102               LDD     R16, Z+2
   \   0000001A   9300....           STS     (TData + 2), R16
    732              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);      // store in EEPROM
   \   0000001E   9120....           LDS     R18, TData
   \   00000022   ....               RCALL   ?Subroutine11
    733              WriteEEPROMByte(EEPROM_PORTSETUP+1, TData.RS4.SensorType[0]);
   \                     ??CrossCallReturnLabel_280:
   \   00000024   9120....           LDS     R18, (TData + 1)
   \   00000028   E003               LDI     R16, 3
   \   0000002A   ....               RCALL   ??Subroutine152_0
    734              WriteEEPROMByte(EEPROM_PORTSETUP+2, TData.RS4.SensorType[1]);
   \                     ??CrossCallReturnLabel_278:
   \   0000002C   9120....           LDS     R18, (TData + 2)
   \   00000030   E004               LDI     R16, 4
   \   00000032   ....               RCALL   ??Subroutine152_0
    735              SetRS4Port();                                               // Set power on ports
   \                     ??CrossCallReturnLabel_277:
   \   00000034   ........           CALL    SetRS4Port
    736          }
   \   00000038   ....               RJMP    ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   E002               LDI     R16, 2
   \   00000002                      REQUIRE ??Subroutine152_0
   \   00000002                      ;               // Fall through to label ??Subroutine152_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine152_0:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           JMP     WriteEEPROMByte
    737          
    738          /*************************************************************************
    739          *
    740          * Rceive data fo AD card
    741          *
    742          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine134:
   \   00000000   E0E3               LDI     R30, 3
   \   00000002   ........           JMP     ?EPILOGUE_B3_L09

   \                                 In  segment CODE, align 2, keep-with-next
    743          void GetADData(char ch, short pointer) {
   \                     GetADData:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   01C9               MOVW    R25:R24, R19:R18
   \   00000006   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_204:
   \   00000008   8522               LDD     R18, Z+10
   \   0000000A   8533               LDD     R19, Z+11
   \   0000000C   01B9               MOVW    R23:R22, R19:R18
   \   0000000E   0F68               ADD     R22, R24
   \   00000010   1F79               ADC     R23, R25
   \   00000012   01FB               MOVW    R31:R30, R23:R22
   \   00000014   8100               LD      R16, Z
   \   00000016   3004               CPI     R16, 4
   \   00000018   F410               BRCC    ??GetADData_0
    744          
    745             char i, pair;
    746          
    747             if (UART[ch].pRxBuffer[pointer] <=3) {
    748               pair = 0;
   \   0000001A   E040               LDI     R20, 0
   \   0000001C   C001               RJMP    ??GetADData_1
    749             } else {
    750               pair = 1;
   \                     ??GetADData_0:
   \   0000001E   E540               LDI     R20, 80
    751             }
    752             if (!TData.RS4.ToTargetBuffer[pair][0]) {                                // buffer empty?
   \                     ??GetADData_1:
   \   00000020   ....               LDI     R16, LOW(TData)
   \   00000022   ....               LDI     R17, (TData) >> 8
   \   00000024   0F04               ADD     R16, R20
   \   00000026   1F15               ADC     R17, R21
   \   00000028   01A8               MOVW    R21:R20, R17:R16
   \   0000002A   504C               SUBI    R20, 12
   \   0000002C   4F5B               SBCI    R21, 251
   \   0000002E   01FA               MOVW    R31:R30, R21:R20
   \   00000030   8000               LD      R0, Z
   \   00000032   2000               TST     R0
   \   00000034   F501               BRNE    ??GetADData_2
    753                TData.RS4.ToTargetBuffer[pair][0] = true;                            //  Availible data for AD card
   \   00000036   E0A1               LDI     R26, 1
   \   00000038   83A0               ST      Z, R26
    754                TData.RS4.ToTargetBuffer[pair][1] = UART[ch].pRxBuffer[pointer++];   //  Channel to AD card
   \   0000003A   01FB               MOVW    R31:R30, R23:R22
   \   0000003C   8160               LD      R22, Z
   \   0000003E   01FA               MOVW    R31:R30, R21:R20
   \   00000040   8361               STD     Z+1, R22
   \   00000042   9601               ADIW    R25:R24, 1
    755                TData.RS4.ToTargetBuffer[pair][2] = UART[ch].pRxBuffer[pointer++];   // nob in datablock
   \   00000044   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_168:
   \   00000046   8160               LD      R22, Z
   \   00000048   01FA               MOVW    R31:R30, R21:R20
   \   0000004A   8362               STD     Z+2, R22
   \   0000004C   9601               ADIW    R25:R24, 1
    756                for (i = 3; i < TData.RS4.ToTargetBuffer[pair][2] + 3; i++) {
   \   0000004E   E063               LDI     R22, 3
   \   00000050   E070               LDI     R23, 0
   \   00000052   C00A               RJMP    ??GetADData_3
    757                    TData.RS4.ToTargetBuffer[pair][i] = UART[ch].pRxBuffer[pointer++];  //Get the buffer
   \                     ??GetADData_4:
   \   00000054   ....               RCALL   ?Subroutine73
    758                }
   \                     ??CrossCallReturnLabel_169:
   \   00000056   8000               LD      R0, Z
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   0FE6               ADD     R30, R22
   \   0000005C   1FF7               ADC     R31, R23
   \   0000005E   50EC               SUBI    R30, 12
   \   00000060   4FFB               SBCI    R31, 251
   \   00000062   8200               ST      Z, R0
   \   00000064   9601               ADIW    R25:R24, 1
   \   00000066   9563               INC     R22
   \                     ??GetADData_3:
   \   00000068   01FA               MOVW    R31:R30, R21:R20
   \   0000006A   81E2               LDD     R30, Z+2
   \   0000006C   E0F0               LDI     R31, 0
   \   0000006E   9633               ADIW    R31:R30, 3
   \   00000070   176E               CP      R22, R30
   \   00000072   077F               CPC     R23, R31
   \   00000074   F37C               BRLT    ??GetADData_4
    759             }
    760          }
   \                     ??GetADData_2:
   \   00000076   ....               RJMP    ?Subroutine134

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   01F9               MOVW    R31:R30, R19:R18
   \   00000002   ....               RJMP    ?Subroutine123
    761          
    762          /*************************************************************************
    763          *
    764          * Receive AN-ZBANA setup
    765          *
    766          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    767          void GetANASetup(char ch, short pointer) {
   \                     GetANASetup:
   \   00000000   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_50:
   \   00000002   01C9               MOVW    R25:R24, R19:R18
    768          
    769              TData.Ana.PortUsed = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer+1] << 8);  //Get the setup
   \   00000004   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_171:
   \   00000006   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_84:
   \   00000008   8131               LDD     R19, Z+1
   \   0000000A   ....               LDI     R30, LOW(TData)
   \   0000000C   ....               LDI     R31, (TData) >> 8
   \   0000000E   8320               ST      Z, R18
   \   00000010   8331               STD     Z+1, R19
    770              WriteEEPROMByte(EEPROM_PORTSETUP,UART[ch].pRxBuffer[pointer]);   // store in EEPROM
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   8120               LD      R18, Z
   \   00000016   ....               RCALL   ?Subroutine11
    771              WriteEEPROMByte(EEPROM_PORTSETUP+1,UART[ch].pRxBuffer[pointer+1]);
   \                     ??CrossCallReturnLabel_281:
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8502               LDD     R16, Z+10
   \   0000001C   8513               LDD     R17, Z+11
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8121               LDD     R18, Z+1
   \   00000026   E003               LDI     R16, 3
   \   00000028   ....               RCALL   ??Subroutine152_0
    772              SetAnaPort();                           // set the port on or off
   \                     ??CrossCallReturnLabel_279:
   \   0000002A   ........           CALL    SetAnaPort
    773          }
   \   0000002E   ....               RJMP    ??Subroutine143_0
    774          
    775          /*************************************************************************
    776          *
    777          * Receive AN-ZBANA filter
    778          *
    779          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    780          void GetANAFilter(char ch, short pointer) {
   \                     GetANAFilter:
   \   00000000   2F70               MOV     R23, R16
    781              char port;
    782          
    783              for (port = 0; port <12; port++) {
   \   00000002   E060               LDI     R22, 0
    784                  TData.Ana.Filter[port] = UART[ch].pRxBuffer[pointer++];  //Get the filter
   \                     ??GetANAFilter_0:
   \   00000004   2F07               MOV     R16, R23
   \   00000006   E010               LDI     R17, 0
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   ....               RCALL   ?Subroutine9
    785              }
   \                     ??CrossCallReturnLabel_5:
   \   0000000C   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_193:
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   8140               LD      R20, Z
   \   00000012   E0F0               LDI     R31, 0
   \   00000014   2FE6               MOV     R30, R22
   \   00000016   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000001A   8342               STD     Z+2, R20
   \   0000001C   5F2F               SUBI    R18, 255
   \   0000001E   4F3F               SBCI    R19, 255
   \   00000020   9563               INC     R22
   \   00000022   306C               CPI     R22, 12
   \   00000024   F378               BRCS    ??GetANAFilter_0
    786          }
   \   00000026   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_262:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000006   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000008   9508               RET
    787          
    788          /*************************************************************************
    789          *
    790          *  Receive data on USARTs
    791          *
    792          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    793          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_53:
   \   00000002   2F80               MOV     R24, R16
    794          
    795              switch (UART[ch].RxState) {                  // check status
   \   00000004   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_173:
   \   00000006   8902               LDD     R16, Z+18
   \   00000008   2300               TST     R16
   \   0000000A   F409               BRNE    $+2+2
   \   0000000C   C074               RJMP    ??ReceivePacketUart_0
   \   0000000E   950A               DEC     R16
   \   00000010   F031               BREQ    ??ReceivePacketUart_1
   \   00000012   950A               DEC     R16
   \   00000014   F1D9               BREQ    ??ReceivePacketUart_2
   \   00000016   5008               SUBI    R16, 8
   \   00000018   F409               BRNE    $+2+2
   \   0000001A   C06D               RJMP    ??ReceivePacketUart_0
   \   0000001C   C06A               RJMP    ??ReceivePacketUart_3
    796              case SYNC :
    797                  // all functionallity in inerrupt routine
    798                  break ;
    799              case HEADER :
    800                  if (UART[ch].RxLast >= 6) {             // receive header
   \                     ??ReceivePacketUart_1:
   \   0000001E   8506               LDD     R16, Z+14
   \   00000020   8517               LDD     R17, Z+15
   \   00000022   3006               CPI     R16, 6
   \   00000024   4010               SBCI    R17, 0
   \   00000026   F408               BRCC    $+2+2
   \   00000028   C066               RJMP    ??ReceivePacketUart_0
    801                      UART[ch].RxPacklen = (UART[ch].pRxBuffer[4] + (UART[ch].pRxBuffer[5] * 256)) ; // Find length of package
   \   0000002A   8502               LDD     R16, Z+10
   \   0000002C   85F3               LDD     R31, Z+11
   \   0000002E   2FE0               MOV     R30, R16
   \   00000030   8104               LDD     R16, Z+4
   \   00000032   8115               LDD     R17, Z+5
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8B06               STD     Z+22, R16
   \   00000038   8B17               STD     Z+23, R17
    802                      if (CalcDSRxChecksum(ch, 6) && (UART[ch].pRxBuffer[0] == (DEVICE_IO + UnitID))) {
   \   0000003A   E026               LDI     R18, 6
   \   0000003C   E030               LDI     R19, 0
   \   0000003E   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_59:
   \   00000040   F409               BRNE    $+2+2
   \   00000042   C057               RJMP    ??ReceivePacketUart_3
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8502               LDD     R16, Z+10
   \   00000048   85F3               LDD     R31, Z+11
   \   0000004A   2FE0               MOV     R30, R16
   \   0000004C   8100               LD      R16, Z
   \   0000004E   E010               LDI     R17, 0
   \   00000050   91E0....           LDS     R30, UnitID
   \   00000054   E0F0               LDI     R31, 0
   \   00000056   9670               ADIW    R31:R30, 16
   \   00000058   170E               CP      R16, R30
   \   0000005A   071F               CPC     R17, R31
   \   0000005C   F009               BREQ    $+2+2
   \   0000005E   C049               RJMP    ??ReceivePacketUart_3
    803                          // header checksum OK and to me
    804                          if ((UART[ch].RxPacklen < ((short) RXSIZE_UART-UART[ch].RxLast)) &&    /* chk. header */
    805                              (UART[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   00000060   01FD               MOVW    R31:R30, R27:R26
   \   00000062   8926               LDD     R18, Z+22
   \   00000064   8937               LDD     R19, Z+23
   \   00000066   E906               LDI     R16, 150
   \   00000068   8546               LDD     R20, Z+14
   \   0000006A   8557               LDD     R21, Z+15
   \   0000006C   1B04               SUB     R16, R20
   \   0000006E   0B15               SBC     R17, R21
   \   00000070   1720               CP      R18, R16
   \   00000072   0731               CPC     R19, R17
   \   00000074   F5F0               BRCC    ??ReceivePacketUart_3
   \   00000076   3027               CPI     R18, 7
   \   00000078   4030               SBCI    R19, 0
   \   0000007A   F1D8               BRCS    ??ReceivePacketUart_3
    806                              UART[ch].RxState = RECEIVE ;       // Header ok go to data receive state
   \   0000007C   E002               LDI     R16, 2
   \   0000007E   8B02               STD     Z+18, R16
    807                              UART[ch].RxCount = UART[ch].RxLast + 1 ;    // Set receive counter
   \   00000080   8586               LDD     R24, Z+14
   \   00000082   8597               LDD     R25, Z+15
   \   00000084   9601               ADIW    R25:R24, 1
   \   00000086   8B80               STD     Z+16, R24
   \   00000088   8B91               STD     Z+17, R25
   \   0000008A   C035               RJMP    ??ReceivePacketUart_0
    808                          } else {
    809                              GoToSyncUART(ch) ;                        // go to sync modus for recive
    810                          }
    811                      } else {
    812                          GoToSyncUART(ch) ;                            // go to sync modus for recive
    813                      }
    814                  }
    815                  break ;
    816              case RECEIVE :
    817                  if (++UART[ch].RxCount >= UART[ch].RxPacklen) {
   \                     ??ReceivePacketUart_2:
   \   0000008C   8900               LDD     R16, Z+16
   \   0000008E   8911               LDD     R17, Z+17
   \   00000090   5F0F               SUBI    R16, 255
   \   00000092   4F1F               SBCI    R17, 255
   \   00000094   8B00               STD     Z+16, R16
   \   00000096   8B11               STD     Z+17, R17
   \   00000098   8926               LDD     R18, Z+22
   \   0000009A   8937               LDD     R19, Z+23
   \   0000009C   1702               CP      R16, R18
   \   0000009E   0713               CPC     R17, R19
   \   000000A0   F150               BRCS    ??ReceivePacketUart_0
    818                      if ((UART[ch].pRxBuffer[UART[ch].RxPacklen -1]) == ANPRO10_EOT) {
   \   000000A2   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_194:
   \   000000A4   5001               SUBI    R16, 1
   \   000000A6   4010               SBCI    R17, 0
   \   000000A8   01F8               MOVW    R31:R30, R17:R16
   \   000000AA   8100               LD      R16, Z
   \   000000AC   3004               CPI     R16, 4
   \   000000AE   F509               BRNE    ??ReceivePacketUart_3
    819                          if (CalcDSRxChecksum(ch, UART[ch].RxPacklen-2)) {
   \   000000B0   5022               SUBI    R18, 2
   \   000000B2   4030               SBCI    R19, 0
   \   000000B4   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_60:
   \   000000B6   F0E9               BREQ    ??ReceivePacketUart_3
    820                              if ((UART[ch].pRxBuffer[1] == MyAddress())||      // message to me? or
    821                                  (UART[ch].pRxBuffer[1] == 0xff)) {            // broadcast
   \   000000B8   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_54:
   \   000000BA   01FD               MOVW    R31:R30, R27:R26
   \   000000BC   8522               LDD     R18, Z+10
   \   000000BE   85F3               LDD     R31, Z+11
   \   000000C0   2FE2               MOV     R30, R18
   \   000000C2   8111               LDD     R17, Z+1
   \   000000C4   1710               CP      R17, R16
   \   000000C6   F011               BREQ    ??ReceivePacketUart_4
   \   000000C8   3F1F               CPI     R17, 255
   \   000000CA   F499               BRNE    ??ReceivePacketUart_3
    822                                  hostAddress = UART[ch].pRxBuffer[3];            // address to sender (host)
   \                     ??ReceivePacketUart_4:
   \   000000CC   8103               LDD     R16, Z+3
   \   000000CE   9300....           STS     hostAddress, R16
    823                                  UART[ch].RxState = HANDLE ;                     // Package OK
   \   000000D2   E00A               LDI     R16, 10
   \   000000D4   01FD               MOVW    R31:R30, R27:R26
   \   000000D6   8B02               STD     Z+18, R16
    824                                  if (ch == 0) {
   \   000000D8   2388               TST     R24
   \   000000DA   F419               BRNE    ??ReceivePacketUart_5
    825                                      OS_SignalEvent(1, &TCB_USART0);
   \   000000DC   ....               LDI     R18, LOW(TCB_USART0)
   \   000000DE   ....               LDI     R19, (TCB_USART0) >> 8
   \   000000E0   C004               RJMP    ??ReceivePacketUart_6
    826                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart_5:
   \   000000E2   3081               CPI     R24, 1
   \   000000E4   F441               BRNE    ??ReceivePacketUart_0
    827                                      OS_SignalEvent(1, &TCB_USART1);
   \   000000E6   ....               LDI     R18, LOW(TCB_USART1)
   \   000000E8   ....               LDI     R19, (TCB_USART1) >> 8
   \                     ??ReceivePacketUart_6:
   \   000000EA   E001               LDI     R16, 1
   \   000000EC   ........           CALL    OS_SignalEvent
   \   000000F0   C002               RJMP    ??ReceivePacketUart_0
    828                                  }
    829                              } else {
    830                                  GoToSyncUART(ch) ;                             // go to sync modus for recive
    831                              }
    832                          } else {
    833                              GoToSyncUART(ch) ;                                // go to sync modus for recive
    834                          }
    835                      } else {
    836                          GoToSyncUART(ch) ;                                    // go to sync modus for recive
    837                      }
    838                  }
    839                  break ;
    840              case HANDLE :
    841                  break;
    842              default :
    843                  GoToSyncUART(ch) ;                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_3:
   \   000000F2   2F08               MOV     R16, R24
   \   000000F4   ....               RCALL   GoToSyncUART
    844                  break ;
    845              }                                                           // end switch
    846              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer
   \                     ??ReceivePacketUart_0:
   \   000000F6   01FD               MOVW    R31:R30, R27:R26
   \   000000F8   8506               LDD     R16, Z+14
   \   000000FA   8517               LDD     R17, Z+15
   \   000000FC   5F0F               SUBI    R16, 255
   \   000000FE   4F1F               SBCI    R17, 255
   \   00000100   8706               STD     Z+14, R16
   \   00000102   8717               STD     Z+15, R17
   \   00000104   3906               CPI     R16, 150
   \   00000106   E020               LDI     R18, 0
   \   00000108   4010               SBCI    R17, 0
   \   0000010A   F010               BRCS    ??ReceivePacketUart_7
    847                  UART[ch].RxLast = 0;                                     // reset pointer
   \   0000010C   8726               STD     Z+14, R18
   \   0000010E   8727               STD     Z+15, R18
    848              }
    849          }
   \                     ??ReceivePacketUart_7:
   \   00000110   ....               RJMP    ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine52:
   \   00000000   2F08               MOV     R16, R24
   \   00000002   ....               RCALL   CalcDSRxChecksum
   \   00000004   2B01               OR      R16, R17
   \   00000006   9508               RET
    850          
    851          
    852          /*************************************************************************
    853          *
    854          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    855          *
    856          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    857          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2E20               MOV     R2, R16
   \   00000006   2F73               MOV     R23, R19
    858          
    859              unsigned short  cnt ;
    860              unsigned char   csum ;
    861          
    862              csum = 0 ;
   \   00000008   E000               LDI     R16, 0
    863              for (cnt = 4 ; cnt < len ; cnt++) {
   \   0000000A   E084               LDI     R24, 4
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   ....               LDI     R19, (crc) >> 16
   \   00000012   C011               RJMP    ??CalcDSTxChecksum_0
    864                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]] ;
   \                     ??CalcDSTxChecksum_1:
   \   00000014   2FA0               MOV     R26, R16
   \   00000016   2D02               MOV     R16, R2
   \   00000018   E010               LDI     R17, 0
   \   0000001A   ....               RCALL   ?Subroutine9
    865              }
   \                     ??CrossCallReturnLabel_4:
   \   0000001C   ....               RCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_311:
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   27A0               EOR     R26, R16
   \   00000028   2FEA               MOV     R30, R26
   \   0000002A   E0F0               LDI     R31, 0
   \   0000002C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000030   BF3B               OUT     0x3B, R19
   \   00000032   9106               ELPM    R16, Z
   \   00000034   9601               ADIW    R25:R24, 1
   \                     ??CalcDSTxChecksum_0:
   \   00000036   1782               CP      R24, R18
   \   00000038   0797               CPC     R25, R23
   \   0000003A   F360               BRCS    ??CalcDSTxChecksum_1
    866              return csum ;
   \   0000003C                      REQUIRE ?Subroutine134
   \   0000003C                      ;               // Fall through to label ?Subroutine134
    867          }
    868          
    869          /*************************************************************************
    870          *
    871          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    872          *
    873          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    874          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   01B9               MOVW    R23:R22, R19:R18
    875          
    876              unsigned short  cnt ;
    877              unsigned char   csum ;
    878          
    879              csum = 0 ;
   \   00000004   E020               LDI     R18, 0
    880              for (cnt=0 ; cnt < len ; cnt++) {
   \   00000006   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_76:
   \   00000008   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_205:
   \   0000000A   8502               LDD     R16, Z+10
   \   0000000C   8513               LDD     R17, Z+11
   \   0000000E   ....               LDI     R19, (crc) >> 16
   \   00000010   C00B               RJMP    ??CalcDSRxChecksum_0
    881                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]] ;
   \                     ??CalcDSRxChecksum_1:
   \   00000012   2F42               MOV     R20, R18
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               RCALL   ?Subroutine123
    882              }
   \                     ??CrossCallReturnLabel_165:
   \   00000018   8120               LD      R18, Z
   \   0000001A   2742               EOR     R20, R18
   \   0000001C   01FA               MOVW    R31:R30, R21:R20
   \   0000001E   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000020   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000022   BF3B               OUT     0x3B, R19
   \   00000024   9126               ELPM    R18, Z
   \   00000026   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum_0:
   \   00000028   1786               CP      R24, R22
   \   0000002A   0797               CPC     R25, R23
   \   0000002C   F390               BRCS    ??CalcDSRxChecksum_1
    883              if (csum == UART[ch].pRxBuffer[len]) {
   \   0000002E   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_83:
   \   00000030   8100               LD      R16, Z
   \   00000032   1720               CP      R18, R16
   \   00000034   F411               BRNE    ??CalcDSRxChecksum_2
    884                  return true ;
   \   00000036   E001               LDI     R16, 1
   \   00000038   C001               RJMP    ??CalcDSRxChecksum_3
    885              } else {
    886                  return false ;
   \                     ??CalcDSRxChecksum_2:
   \   0000003A   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum_3:
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   01C1               MOVW    R25:R24, R3:R2
   \   00000040   9508               RET
    887              }
    888          }
    889          
    890          /*************************************************************************
    891          *
    892          * Goes to sync mode
    893          *
    894          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    895          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
    896          
    897              if (ch < 2) {
   \   00000004   3002               CPI     R16, 2
   \   00000006   F428               BRCC    ??GoToSyncUART_0
    898                  UART[ch].SyncCnt = 0 ;                        // ready for sync
   \   00000008   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_203:
   \   0000000A   8B53               STD     Z+19, R21
    899                  UART[ch].RxState = SYNC ;
   \   0000000C   8B52               STD     Z+18, R21
    900                  UART[ch].RxFirst = 0 ;
   \   0000000E   8754               STD     Z+12, R21
   \   00000010   8755               STD     Z+13, R21
    901              }
    902          }
   \                     ??GoToSyncUART_0:
   \   00000012   BF2F               OUT     0x3F, R18
   \   00000014   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_21) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   0A                 DB      0xa
   \   00000008   ....               DW      (??CheckActionUart_3) /2
   \   0000000A   0A                 DB      0xa
   \   0000000B   ....               DW      (??CheckActionUart_4) /2
   \   0000000D   32                 DB      0x32
   \   0000000E   ....               DW      (??CheckActionUart_5) /2
   \   00000010   0A                 DB      0xa
   \   00000011   ....               DW      (??CheckActionUart_6) /2
   \   00000013   0A                 DB      0xa
   \   00000014   ....               DW      (??CheckActionUart_7) /2
   \   00000016   0A                 DB      0xa
   \   00000017   ....               DW      (??CheckActionUart_8) /2
   \   00000019   0A                 DB      0xa
   \   0000001A   ....               DW      (??CheckActionUart_9) /2
   \   0000001C   1E                 DB      0x1e
   \   0000001D   ....               DW      (??CheckActionUart_11) /2
   \   0000001F   14                 DB      0x14
   \   00000020   ....               DW      (??CheckActionUart_10) /2
   \   00000022   28                 DB      0x28
   \   00000023   ....               DW      (??CheckActionUart_16) /2
   \   00000025   0A                 DB      0xa
   \   00000026   ....               DW      (??CheckActionUart_17) /2
   \   00000028   0A                 DB      0xa
   \   00000029   ....               DW      (??CheckActionUart_18) /2
   \   0000002B   0A                 DB      0xa
   \   0000002C   ....               DW      (??CheckActionUart_19) /2
   \   0000002E   0A                 DB      0xa
   \   0000002F   ....               DW      (??CheckActionUart_20) /2
   \   00000031   02FE9E             DB      254,0x2,0x9e
   \   00000034   ....               DW      (??CheckActionUart_2) /2
   \   00000036   FB                 DB      251
   \   00000037   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   BuildADEpromdata
        4      2 ?S_EC_MUL_L02
        4      6 ?S_EC_MUL_L02
      4      2   BuildADInt
        4      6 ?S_EC_MUL_L02
      0      2   BuildANAFilter
        0      6 ?S_EC_MUL_L02
      0      2   BuildANASetup
        0      6 ?S_EC_MUL_L02
      6      2   BuildEEPROMData
        6      4   -> ReadEEPROMBuffer
        6      6 ?S_EC_MUL_L02
      4      2   BuildMData485
        4      4 ?S_EC_MUL_L02
        4      6 ?S_EC_MUL_L02
      4      2   BuildMDataANA
        4      6 ?S_EC_MUL_L02
      6      2   BuildRData485
        6      4 ?S_EC_MUL_L02
        6      6 ?S_EC_MUL_L02
      0      2   BuildRS4Setup
        0      6 ?S_EC_MUL_L02
      4      2   BuildStackStatus
        4      4   -> OS_GetStackSpace
        4      6   -> OS_GetStackSpace
        4      6 ?S_EC_MUL_L02
      6      2   BuildStatusData
        6      2   -> MyAddress
        6      4 ?S_EC_MUL_L02
      4      2   BuildWHdata
        4      2   -> OS_LeaveRegion
        4      6 ?S_EC_MUL_L02
      0      2   CalcDSRxChecksum
        0      4 ?S_EC_MUL_L02
      3      2   CalcDSTxChecksum
        3      4 ?S_EC_MUL_L02
     12      2   CheckActionUart
       12      2   -> BuildADEpromdata
       12      2   -> BuildADInt
       12      2   -> BuildANAFilter
       12      2   -> BuildANASetup
       12      2   -> BuildEEPROMData
       12      2   -> BuildMData485
       12      2   -> BuildMDataANA
       12      2   -> BuildRData485
       12      2   -> BuildRS4Setup
       12      2   -> BuildStackStatus
       12      2   -> BuildStatusData
       12      2   -> BuildWHdata
       12      2   -> EEPROMReset
       12      2   -> GetADData
       12      2   -> GetANAFilter
       12      2   -> GetANASetup
       12      2   -> GetEEPROMData
       12      2   -> GetGotoBootloader
       12      2   -> GetRS4Setup
       12      2 ?SS_SHR_L02
       12      2 ?SV_SWITCH_L06
       12      2 ?S_EC_MUL_L02
      3      2   GetADData
        3      4 ?S_EC_MUL_L02
      0      2   GetANAFilter
        0      4 ?S_EC_MUL_L02
      4      2   GetANASetup
        4      2   -> SetAnaPort
        4      2   -> WriteEEPROMByte
        4      6 ?S_EC_MUL_L02
      8      2   GetEEPROMData
        8      4   -> OS_Delay
        8      4   -> OS__Gettime
        8      4   -> WriteEEPROMBuffer
        8      2 ?S_EC_MUL_L02
      0      2   GetGotoBootloader
      2      2   GetRS4Setup
        2      2   -> SetRS4Port
        2      2   -> WriteEEPROMByte
        2      2 ?S_EC_MUL_L02
      0      2   GetResetEEPROM
        0      2   -> EEPROMReset
      0      2   GoToSyncUART
        0      4 ?S_EC_MUL_L02
      4      2   ReceivePacketUart
        4      4   -> CalcDSRxChecksum
        4      2   -> GoToSyncUART
        4      2   -> MyAddress
        4      2   -> OS_SignalEvent
        4      6 ?S_EC_MUL_L02
      0      2   TimoutUSART0
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   TimoutUSART0On
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1On
        0      2   -> OS_StopTimer
      2      2   Uart_BuildHeader
        2      2   -> MyAddress
        2      6 ?S_EC_MUL_L02
      4      2   Uart_BuildTail
        4      2   -> CalcDSTxChecksum
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader
        4      4 ?S_EC_MUL_L02
      0      2   Usart0Handler
        0      2   -> OS_Unuse
        0      2   -> OS_Use
        0      4   -> OS_WaitEventTimed
        0      4   -> UsartCheckPackage
      0      2   Usart1Handler
        0      2   -> OS_Unuse
        0      2   -> OS_Use
        0      4   -> OS_WaitEventTimed
        0      4   -> UsartCheckPackage
      5      2   UsartCheckPackage
        5      2   -> CheckActionUart
        5      2   -> GoToSyncUART
        5      2   -> Uart_BuildTail
        5      6 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Jumptable for CheckActionUart>_0
       4  ??Subroutine141_0
       6  ??Subroutine142_0
       6  ??Subroutine143_0
       6  ??Subroutine144_0
       6  ??Subroutine145_0
       6  ??Subroutine146_0
       2  ??Subroutine147_0
       4  ??Subroutine148_0
       4  ??Subroutine149_0
       2  ??Subroutine150_0
       2  ??Subroutine151_0
       6  ??Subroutine152_0
       4  ??Subroutine153_0
       2  ??Subroutine154_0
       4  ??Subroutine155_0
       4  ??Subroutine156_0
       2  ??Subroutine157_0
       6  ??Subroutine158_0
       6  ??Subroutine159_0
       6  ??Subroutine160_0
       4  ?Subroutine0
       8  ?Subroutine1
      16  ?Subroutine102
       8  ?Subroutine103
       8  ?Subroutine105
      10  ?Subroutine106
       6  ?Subroutine107
       2  ?Subroutine108
       6  ?Subroutine109
       2  ?Subroutine11
       8  ?Subroutine110
       6  ?Subroutine111
       6  ?Subroutine112
       6  ?Subroutine113
       4  ?Subroutine114
      14  ?Subroutine115
       4  ?Subroutine116
      10  ?Subroutine117
      10  ?Subroutine118
       6  ?Subroutine119
      18  ?Subroutine12
       8  ?Subroutine120
       8  ?Subroutine121
       6  ?Subroutine122
       6  ?Subroutine123
       4  ?Subroutine124
       4  ?Subroutine125
       4  ?Subroutine126
       4  ?Subroutine127
       4  ?Subroutine128
       4  ?Subroutine129
      12  ?Subroutine13
       4  ?Subroutine130
       4  ?Subroutine131
       2  ?Subroutine132
       4  ?Subroutine133
       6  ?Subroutine134
       2  ?Subroutine135
       6  ?Subroutine136
       4  ?Subroutine137
       4  ?Subroutine139
       4  ?Subroutine14
       4  ?Subroutine140
       2  ?Subroutine15
       2  ?Subroutine16
       6  ?Subroutine17
       4  ?Subroutine18
       4  ?Subroutine19
      36  ?Subroutine2
       4  ?Subroutine20
      12  ?Subroutine21
       8  ?Subroutine22
      12  ?Subroutine23
      28  ?Subroutine25
       6  ?Subroutine27
      16  ?Subroutine28
       4  ?Subroutine29
      16  ?Subroutine3
      20  ?Subroutine30
       2  ?Subroutine32
       4  ?Subroutine33
      30  ?Subroutine34
      10  ?Subroutine35
       2  ?Subroutine36
       2  ?Subroutine37
       2  ?Subroutine38
       8  ?Subroutine39
       8  ?Subroutine40
       8  ?Subroutine42
      12  ?Subroutine43
       4  ?Subroutine44
       4  ?Subroutine45
       4  ?Subroutine46
       8  ?Subroutine47
       4  ?Subroutine48
       4  ?Subroutine49
       2  ?Subroutine5
       4  ?Subroutine50
       4  ?Subroutine51
       8  ?Subroutine52
       4  ?Subroutine55
       6  ?Subroutine56
       6  ?Subroutine59
       4  ?Subroutine6
       4  ?Subroutine60
       2  ?Subroutine61
       2  ?Subroutine62
       8  ?Subroutine63
       6  ?Subroutine64
      10  ?Subroutine65
      10  ?Subroutine66
       8  ?Subroutine67
       8  ?Subroutine68
       8  ?Subroutine7
       4  ?Subroutine70
      18  ?Subroutine71
      12  ?Subroutine72
       4  ?Subroutine73
       8  ?Subroutine74
       6  ?Subroutine75
       8  ?Subroutine76
      10  ?Subroutine77
       6  ?Subroutine78
      12  ?Subroutine79
       4  ?Subroutine80
       6  ?Subroutine81
       2  ?Subroutine83
      34  ?Subroutine84
       4  ?Subroutine85
      26  ?Subroutine87
      20  ?Subroutine88
       2  ?Subroutine89
      10  ?Subroutine9
       2  ?Subroutine90
       2  ?Subroutine91
       4  ?Subroutine92
      32  ?Subroutine93
       4  ?Subroutine94
       4  ?Subroutine95
       6  ?Subroutine96
       2  ?Subroutine97
      74  BuildADEpromdata
      48  BuildADInt
      68  BuildANAFilter
      10  BuildANASetup
      68  BuildEEPROMData
     182  BuildMData485
      90  BuildMDataANA
      46  BuildRData485
      14  BuildRS4Setup
      96  BuildStackStatus
      88  BuildStatusData
     162  BuildWHdata
      66  CalcDSRxChecksum
      60  CalcDSTxChecksum
     300  CheckActionUart
     120  GetADData
      40  GetANAFilter
      48  GetANASetup
     154  GetEEPROMData
      34  GetGotoBootloader
      58  GetRS4Setup
       4  GetResetEEPROM
      22  GoToSyncUART
     274  ReceivePacketUart
      18  TimoutUSART0
       6  TimoutUSART0On
      28  TimoutUSART1
      16  TimoutUSART1On
      92  Uart_BuildHeader
     122  Uart_BuildTail
      12  Usart0Handler
      12  Usart1Handler
      84  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_UCSR1B
       1  _A_WDTCR

 
     8 bytes in segment ABSOLUTE
 3 526 bytes in segment CODE
    56 bytes in segment SWITCH
 
 3 582 bytes of CODE memory
     0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
