###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            08/Feb/2017  15:43:32
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1281\Src\OS_Error.c
#    Command line =  
#        "D:\S2Prog\IO\ANZB – ATmega1281\Src\OS_Error.c" --cpu=m1280 -ms -o
#        "D:\S2Prog\IO\ANZB – ATmega1281\Debug\Obj" -D OS_LIBMODE_D -D
#        OS_UART=-1 -lCN "D:\S2Prog\IO\ANZB – ATmega1281\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB – ATmega1281\INC\"
#        -I "D:\S2Prog\IO\ANZB – ATmega1281\..\..\SHARED\INC\" --eeprom_size
#        4096 --clib -On
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1281\Debug\List\OS_Error.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1281\Debug\Obj\OS_Error.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1281\Src\OS_Error.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER SYSTEME GmbH                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (C) 2005   SEGGER Microcontroller Systeme GmbH               *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       embOS version: 3.28h                                         *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : OS_Error.c
     31          Purpose : embOS error handler. Not required in "R" (release) builds
     32                    Feel free to modify this file acc. to your target system.
     33          --------  END-OF-HEADER  ---------------------------------------------
     34          */
     35          
     36          #include "RTOS.H"
     37          
     38          /*********************************************************************
     39          *
     40          *       Run-time error reaction (OS_Error)
     41          *
     42          **********************************************************************
     43          
     44           Run-time error reaction
     45          
     46           When this happens, a fatal error has occured and the kernel
     47           can not continue. In linux, the equivalent would be a
     48           "kernel panic"
     49          
     50           This routine can be modified to suit your needs ...
     51           E.g. a red LED could light up. When using an
     52           emulator, you may set a breakpoint here.
     53           In the release builds of the library (R), this routine is not required
     54           (as no checks are performed).
     55           In the stack check builds (S/SP), only error 120 may occur.
     56           In the debug builds(D/DP), all of the listed errors may occur.
     57          
     58           The following are the current errorcodes (V3.20) :
     59           (Please refer to the documentation for more info)
     60            
     61          OS_ERR_STACK                          (120 = 0x78)
     62          *** invalid or non-initialized data structures ***
     63          OS_ERR_INV_TASK                       (128 = 0x80)
     64          OS_ERR_INV_TIMER                      (129 = 0x81)
     65          OS_ERR_INV_MAILBOX                    (130 = 0x82)
     66          OS_ERR_INV_CSEMA                      (132 = 0x84)
     67          OS_ERR_INV_RSEMA                      (133 = 0x85)
     68          
     69          *** Using GetMail1, PutMail1, GetMailCond1 or PutMailCond1
     70          *** on a non-1 byte mailbox  *********************
     71          OS_ERR_MAILBOX_NOT1                   (135 = 0x87)
     72          
     73          *** internal errors, please contact SEGGER Microcontrollersysteme ***
     74          OS_ERR_MAILBOX_NOT_IN_LIST            (140 = 0x8C)
     75          OS_ERR_TASKLIST_CORRUPT               (142 = 0x8E)
     76          
     77          *** not matching routine calls or macro usage ****
     78          OS_ERR_UNUSE_BEFORE_USE               (150 = 0x96)
     79          OS_ERR_LEAVEREGION_BEFORE_ENTERREGION (151 = 0x97)
     80          OS_ERR_LEAVEINT                       (152 = 0x98)
     81          OS_ERR_DICNT                          (153 = 0x99)
     82          OS_ERR_INTERRUPT_DISABLED             (154 = 0x9A)
     83          OS_ERR_TASK_ENDS_WITHOUT_TERMINATE    (155 = 0x9B)
     84          
     85          *** not a legal system call during interrupt *****
     86          OS_ERR_ILLEGAL_IN_ISR                 (160 = 0xA0)
     87          
     88          *** not a legal system call during timer *********
     89          OS_ERR_ILLEGAL_IN_TIMER               (161 = 0xA1)
     90          
     91          *** not a legal system call outside interrupt ****
     92          OS_ERR_ILLEGAL_OUT_ISR                (162 = 0xA2) 
     93          
     94          *** double used data structures **
     95          OS_ERR_2USE_TASK                      (170 = 0xAA)
     96          OS_ERR_2USE_TIMER                     (171 = 0xAB)
     97          OS_ERR_2USE_MAILBOX                   (172 = 0xAC)
     98          OS_ERR_2USE_BSEMA                     (173 = 0xAD)
     99          OS_ERR_2USE_CSEMA                     (174 = 0xAE)
    100          OS_ERR_2USE_RSEMA                     (175 = 0xAF)
    101          
    102          *** Communication errors (OSCOM) **
    103          OS_ERR_NESTED_RX_INT                  (180 = 0xB4)
    104          
    105          *** Fixed block memory pool  ***
    106          OS_ERR_MEMF_INV                       (190 = 0xBE)
    107          OS_ERR_MEMF_INV_PTR                   (191 = 0xBF)
    108          OS_ERR_MEMF_PTR_FREE                  (192 = 0xC0)
    109          OS_ERR_MEMF_RELEASE                   (193 = 0xC1)
    110          
    111          *** Task suspend / resume errors ***
    112          OS_ERR_SUSPEND_TOO_OFTEN              (200 = 0xC8)
    113          OS_ERR_RESUME_BEFORE_SUSPEND          (201 = 0xC9)
    114          
    115          */
    116          

   \                                 In  segment CODE, align 2, keep-with-next
    117          void OS_Error(int ErrCode) {
   \                     OS_Error:
    118            OS_EnterRegion();     /* Avoid further task switches            */
   \   00000000   9120....           LDS     R18, OS_Counters
   \   00000004   9523               INC     R18
   \   00000006   9320....           STS     OS_Counters, R18
    119            OS_DICnt = 0;         /* Allow interrupts so we can communicate */
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   9320....           STS     (OS_Counters + 1), R18
    120            OS_EI();
   \   00000010   9478               SEI
    121            OS_Status = (OS_U8) ErrCode;
   \   00000012   2F20               MOV     R18, R16
   \   00000014   9320....           STS     OS_Status, R18
    122            while (OS_Status);
   \                     ??OS_Error_0:
   \   00000018   9120....           LDS     R18, OS_Status
   \   0000001C   2322               TST     R18
   \   0000001E   F7E1               BRNE    ??OS_Error_0
    123          }
   \   00000020   9508               RET
    124          
    125          /****** EOF *********************************************************/
    126          

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   OS_Error


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      34  OS_Error

 
 34 bytes in segment CODE
 
 34 bytes of CODE memory

Errors: none
Warnings: none
