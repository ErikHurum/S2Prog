###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            08/Feb/2017  15:43:32
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1281\Src\init.c
#    Command line =  
#        "D:\S2Prog\IO\ANZB – ATmega1281\Src\init.c" --cpu=m1280 -ms -o
#        "D:\S2Prog\IO\ANZB – ATmega1281\Debug\Obj" -D OS_LIBMODE_D -D
#        OS_UART=-1 -lCN "D:\S2Prog\IO\ANZB – ATmega1281\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB – ATmega1281\INC\"
#        -I "D:\S2Prog\IO\ANZB – ATmega1281\..\..\SHARED\INC\" --eeprom_size
#        4096 --clib -On
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1281\Debug\List\init.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1281\Debug\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1281\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7c
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x75
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x47
   \   union <unnamed> volatile __io _A_OCR0A
   \                     _A_OCR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x44
   \   union <unnamed> volatile __io _A_TCCR0A
   \                     _A_TCCR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*
     14          **===========================================================================
     15          ** Init the system according to board type
     16          **===========================================================================
     17          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     18          void InitSystem(void) {
   \                     InitSystem:
     19          
     20              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   B904               OUT     0x04, R16
     21          //    PORTB   =  0xc;
     22              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000004   B103               IN      R16, 0x03
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     23          #if (OS_UART == 0)
     24              UnitID = 0x00; //AStmark  for test
     25          #endif
     26          
     27              Init_CPU();                         // init all processes
   \   00000010   ....               RCALL   Init_CPU
     28              Init_IO();
   \   00000012   ....               RCALL   Init_IO
     29              Init_TMR() ;
   \   00000014   ....               RCALL   Init_TMR
     30          #if (OS_UART != 0)
     31              Init_USART(0, 38400) ;              // 
   \   00000016   E040               LDI     R20, 0
   \   00000018   E956               LDI     R21, 150
   \   0000001A   E060               LDI     R22, 0
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   E000               LDI     R16, 0
   \   00000020   ....               RCALL   Init_USART
     32          #endif
     33              Init_USART(1, 38400) ;              //    
   \   00000022   E040               LDI     R20, 0
   \   00000024   E956               LDI     R21, 150
   \   00000026   E060               LDI     R22, 0
   \   00000028   E070               LDI     R23, 0
   \   0000002A   E001               LDI     R16, 1
   \   0000002C   ....               RCALL   Init_USART
     34              Init_AD();
   \   0000002E   ....               RCALL   Init_AD
     35              Init_Values();                      // init the values in the system
   \   00000030   ....               RCALL   Init_Values
     36          
     37              ADCSRA |= 0x40 ;                     //start the AD convertion
   \   00000032   9100007A           LDS     R16, 122
   \   00000036   6400               ORI     R16, 0x40
   \   00000038   9300007A           STS     122, R16
     38          }
   \   0000003C   9508               RET
   \   0000003E                      REQUIRE _A_DDRB
   \   0000003E                      REQUIRE _A_PINB
   \   0000003E                      REQUIRE _A_ADCSRA
     39          
     40          /*
     41          **===========================================================================
     42          ** Init the CPU related registers
     43          **===========================================================================
     44          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     45          void Init_CPU( void ) {
   \                     Init_CPU:
     46          
     47              __disable_interrupt();
   \   00000000   94F8               CLI
     48          
     49              /*--- Configure CPU and interrupts ---*/
     50              switch (UnitID) {
   \   00000002   9100....           LDS     R16, UnitID
   \   00000006   5000               SUBI    R16, 0
   \   00000008   F019               BREQ    ??Init_CPU_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F071               BREQ    ??Init_CPU_1
   \   0000000E   C019               RJMP    ??Init_CPU_2
     51              case AN_ZB485:                  // AN-ZB485 
     52                  MCUCR = 0xc0 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_0:
   \   00000010   EC00               LDI     R16, 192
   \   00000012   BF05               OUT     0x35, R16
     53                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB0D               OUT     0x1D, R16
     54                  EICRA = 0xAf ;        // External interrupt control register, 0,1 raising, rest faling
   \   00000018   EA0F               LDI     R16, 175
   \   0000001A   9300....           STS     _A_EICRA, R16
     55                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000001E   EA0A               LDI     R16, 170
   \   00000020   9300....           STS     _A_EICRB, R16
     56                  EIMSK = 0x03 ;        // External interrupt mask register, int 0 and 1 on 
   \   00000024   E003               LDI     R16, 3
   \   00000026   BB0D               OUT     0x1D, R16
     57                  break;
   \   00000028   C00C               RJMP    ??Init_CPU_2
     58              case AN_ZBANA:                  // AN-ZBANA
     59                  MCUCR = 0x00 ;        // MCU control register wait state
   \                     ??Init_CPU_1:
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   BF05               OUT     0x35, R16
     60                  EIMSK = 0x00 ;        // External interrupt mask register , all off
   \   0000002E   E000               LDI     R16, 0
   \   00000030   BB0D               OUT     0x1D, R16
     61                  EICRA = 0xAA ;        // External interrupt control register, o on faling edge
   \   00000032   EA0A               LDI     R16, 170
   \   00000034   9300....           STS     _A_EICRA, R16
     62                  EICRB = 0xAA ;        // External interrupt control register 
   \   00000038   EA0A               LDI     R16, 170
   \   0000003A   9300....           STS     _A_EICRB, R16
     63                  EIMSK = 0x01 ;        // External interrupt mask register, int 0 on 
   \   0000003E   E001               LDI     R16, 1
   \   00000040   BB0D               OUT     0x1D, R16
     64                  break;
     65              }
     66              XMCRA = 0x00 ;       // maximum wait states
   \                     ??Init_CPU_2:
   \   00000042   E000               LDI     R16, 0
   \   00000044   9300....           STS     _A_XMCRA, R16
     67              XMCRB = 0x07 ;       // Full portC + bus keeper
   \   00000048   E007               LDI     R16, 7
   \   0000004A   9300....           STS     _A_XMCRB, R16
     68              SREG  = 0x80 ;        // global interrupt
   \   0000004E   E800               LDI     R16, 128
   \   00000050   BF0F               OUT     0x3F, R16
     69              //XDIV  = 0x00 ;     // Init valuse used 0x00v XXX
     70          
     71              RestartStatus = MCUCR;       // Remember reset source
   \   00000052   B705               IN      R16, 0x35
   \   00000054   9300....           STS     RestartStatus, R16
     72              MCUCR = 0x00;              // and reset
   \   00000058   E000               LDI     R16, 0
   \   0000005A   BF05               OUT     0x35, R16
     73              /*--- Initialize buffer ---*/
     74              WriteCount = 0;
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   9300....           STS     WriteCount, R16
     75          
     76          }
   \   00000062   9508               RET
   \   00000064                      REQUIRE _A_MCUCR
   \   00000064                      REQUIRE _A_EIMSK
   \   00000064                      REQUIRE _A_EICRA
   \   00000064                      REQUIRE _A_EICRB
   \   00000064                      REQUIRE _A_XMCRA
   \   00000064                      REQUIRE _A_XMCRB
   \   00000064                      REQUIRE _A_SREG
     77          
     78          /*
     79          **===========================================================================
     80          ** Init the watchdog registers
     81          **===========================================================================
     82          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     83          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
     84          
     85              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
     86              WDTCSR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   9300....           STS     _A_WDTCSR, R16
     87              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
     88          
     89          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCSR
     90          
     91          /*
     92          **===========================================================================
     93          ** Init the IO related registers
     94          **===========================================================================
     95          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     96          void Init_IO( void ) {
   \                     Init_IO:
     97          
     98              /*--- Initialize the data registers, output value and input pullup ---*/
     99              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F019               BREQ    ??Init_IO_0
   \   00000008   950A               DEC     R16
   \   0000000A   F0F1               BREQ    ??Init_IO_1
   \   0000000C   9508               RET
    100              case AN_ZB485:                  // AN-ZB485  
    101                  DDRA   =  0xff ;      // Port A data direction (out), external bus
   \                     ??Init_IO_0:
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   B901               OUT     0x01, R16
    102                  PORTA  =  0x00 ;      // Port A data
   \   00000012   E000               LDI     R16, 0
   \   00000014   B902               OUT     0x02, R16
    103                  DDRB   =  0x10 ;      // Port B data direction, bit 0, 4-7 out
   \   00000016   E100               LDI     R16, 16
   \   00000018   B904               OUT     0x04, R16
    104                  PORTB  =  0x00 ;      // Port B data   
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   B905               OUT     0x05, R16
    105                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   B907               OUT     0x07, R16
    106                  PORTC  =  0x00 ;      // Port C data
   \   00000022   E000               LDI     R16, 0
   \   00000024   B908               OUT     0x08, R16
    107                  DDRD   =  0x00 ;      // Port D data direction, all in except output to osc and txd
   \   00000026   E000               LDI     R16, 0
   \   00000028   B90A               OUT     0x0A, R16
    108                  PORTD  =  0xff ;      // Port D data pullup on int fro AD
   \   0000002A   EF0F               LDI     R16, 255
   \   0000002C   B90B               OUT     0x0B, R16
    109                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   0000002E   EF0E               LDI     R16, 254
   \   00000030   B90D               OUT     0x0D, R16
    110                  PORTE  =  0xf0 ;      // Port E data 
   \   00000032   EF00               LDI     R16, 240
   \   00000034   B90E               OUT     0x0E, R16
    111                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000036   E000               LDI     R16, 0
   \   00000038   BB00               OUT     0x10, R16
    112                  PORTF  =  0x00 ;      // Port F data 
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   BB01               OUT     0x11, R16
    113                  DDRG   =  0x07 ;      // Port G data direction, port 1,2,3 out
   \   0000003E   E007               LDI     R16, 7
   \   00000040   BB03               OUT     0x13, R16
    114                  PORTG  =  0x03 ;      // Port G data 
   \   00000042   E003               LDI     R16, 3
   \   00000044   BB04               OUT     0x14, R16
    115                  break;
   \   00000046   9508               RET
    116              case AN_ZBANA:                  // AN-ZBANA
    117                  DDRA   =  0x00 ;      // Port A data direction in (not used)
   \                     ??Init_IO_1:
   \   00000048   E000               LDI     R16, 0
   \   0000004A   B901               OUT     0x01, R16
    118                  PORTA  =  0x00 ;      // Port A data
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   B902               OUT     0x02, R16
    119                  DDRB   =  0xF1 ;      // Port B data direction, bit 0, 4-7 out
   \   00000050   EF01               LDI     R16, 241
   \   00000052   B904               OUT     0x04, R16
    120                  PORTB  =  0x00 ;      // Port B data   
   \   00000054   E000               LDI     R16, 0
   \   00000056   B905               OUT     0x05, R16
    121                  DDRC   =  0xFF ;      // Port C data direction, all out
   \   00000058   EF0F               LDI     R16, 255
   \   0000005A   B907               OUT     0x07, R16
    122                  PORTC  =  0x00 ;      // Port C data
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   B908               OUT     0x08, R16
    123                  DDRD   =  0x02 ;      // Port D data direction, all in except output to osc and txd
   \   00000060   E002               LDI     R16, 2
   \   00000062   B90A               OUT     0x0A, R16
    124                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD
   \   00000064   EF01               LDI     R16, 241
   \   00000066   B90B               OUT     0x0B, R16
    125                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000068   EF0E               LDI     R16, 254
   \   0000006A   B90D               OUT     0x0D, R16
    126                  PORTE  =  0x00 ;      // Port E data 
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   B90E               OUT     0x0E, R16
    127                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000070   E000               LDI     R16, 0
   \   00000072   BB00               OUT     0x10, R16
    128                  PORTF  =  0x00 ;      // Port F data 
   \   00000074   E000               LDI     R16, 0
   \   00000076   BB01               OUT     0x11, R16
    129                  DDRG   =  0x10 ;      // Port G data direction, bit 5 out
   \   00000078   E100               LDI     R16, 16
   \   0000007A   BB03               OUT     0x13, R16
    130                  PORTG  =  0x00 ;      // Port G data 
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   BB04               OUT     0x14, R16
    131                  break;
    132              default:
    133                  break;
    134              }    
    135          }
   \   00000080   9508               RET
   \   00000082                      REQUIRE _A_DDRA
   \   00000082                      REQUIRE _A_PORTA
   \   00000082                      REQUIRE _A_DDRB
   \   00000082                      REQUIRE _A_PORTB
   \   00000082                      REQUIRE _A_DDRC
   \   00000082                      REQUIRE _A_PORTC
   \   00000082                      REQUIRE _A_DDRD
   \   00000082                      REQUIRE _A_PORTD
   \   00000082                      REQUIRE _A_DDRE
   \   00000082                      REQUIRE _A_PORTE
   \   00000082                      REQUIRE _A_DDRF
   \   00000082                      REQUIRE _A_PORTF
   \   00000082                      REQUIRE _A_DDRG
   \   00000082                      REQUIRE _A_PORTG
    136          
    137          /*
    138          **===========================================================================
    139          ** Init the timer related registers
    140          **===========================================================================
    141          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    142          void Init_TMR( void ) {
   \                     Init_TMR:
    143              /*--- Timer control (disable clock inputs) ---*/
    144          
    145              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F019               BREQ    ??Init_TMR_0
   \   00000008   950A               DEC     R16
   \   0000000A   F031               BREQ    ??Init_TMR_1
   \   0000000C   9508               RET
    146              case AN_ZB485:                  // AN-ZB485
    147                  TCCR0A   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_0:
   \   0000000E   E909               LDI     R16, 153
   \   00000010   BD04               OUT     0x24, R16
    148                  OCR0A    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
   \   00000012   E003               LDI     R16, 3
   \   00000014   BD07               OUT     0x27, R16
    149                  break;
   \   00000016   9508               RET
    150              case AN_ZBANA:                  // AN-ZBANA
    151                  TCCR0A   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_1:
   \   00000018   E909               LDI     R16, 153
   \   0000001A   BD04               OUT     0x24, R16
    152                  OCR0A    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
   \   0000001C   E007               LDI     R16, 7
   \   0000001E   BD07               OUT     0x27, R16
    153                  break;
    154              default:
    155                  break;
    156              }
    157          
    158          } 
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_TCCR0A
   \   00000022                      REQUIRE _A_OCR0A
    159          
    160          /*
    161          **===========================================================================
    162          ** Init the USARTs registers
    163          **===========================================================================
    164          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    165          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FF0               MOV     R31, R16
   \   00000006   012A               MOVW    R5:R4, R21:R20
   \   00000008   013B               MOVW    R7:R6, R23:R22
    166          
    167          
    168              /*--- Configure UART data block ---*/
    169              UART[channel].TxFirst   = 0x00;
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   E030               LDI     R19, 0
   \   0000000E   2F0F               MOV     R16, R31
   \   00000010   E010               LDI     R17, 0
   \   00000012   E14A               LDI     R20, 26
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   01D8               MOVW    R27:R26, R17:R16
   \   0000001C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000001E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000020   932D               ST      X+, R18
   \   00000022   933C               ST      X, R19
   \   00000024   9711               SBIW    R27:R26, 1
    170              UART[channel].TxLast    = 0x00;
   \   00000026   E020               LDI     R18, 0
   \   00000028   E030               LDI     R19, 0
   \   0000002A   2F0F               MOV     R16, R31
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E14A               LDI     R20, 26
   \   00000030   E050               LDI     R21, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01D8               MOVW    R27:R26, R17:R16
   \   00000038   ....               SUBI    R26, LOW((-(UART + 4) & 0xFFFF))
   \   0000003A   ....               SBCI    R27, HIGH((-(UART + 4) & 0xFFFF))
   \   0000003C   932D               ST      X+, R18
   \   0000003E   933C               ST      X, R19
   \   00000040   9711               SBIW    R27:R26, 1
    171              UART[channel].TxCount   = 0x00;
   \   00000042   E020               LDI     R18, 0
   \   00000044   E030               LDI     R19, 0
   \   00000046   2F0F               MOV     R16, R31
   \   00000048   E010               LDI     R17, 0
   \   0000004A   E14A               LDI     R20, 26
   \   0000004C   E050               LDI     R21, 0
   \   0000004E   ........           CALL    ?S_EC_MUL_L02
   \   00000052   01D8               MOVW    R27:R26, R17:R16
   \   00000054   ....               SUBI    R26, LOW((-(UART + 6) & 0xFFFF))
   \   00000056   ....               SBCI    R27, HIGH((-(UART + 6) & 0xFFFF))
   \   00000058   932D               ST      X+, R18
   \   0000005A   933C               ST      X, R19
   \   0000005C   9711               SBIW    R27:R26, 1
    172              UART[channel].RxFirst   = 0x00;
   \   0000005E   E020               LDI     R18, 0
   \   00000060   E030               LDI     R19, 0
   \   00000062   2F0F               MOV     R16, R31
   \   00000064   E010               LDI     R17, 0
   \   00000066   E14A               LDI     R20, 26
   \   00000068   E050               LDI     R21, 0
   \   0000006A   ........           CALL    ?S_EC_MUL_L02
   \   0000006E   01D8               MOVW    R27:R26, R17:R16
   \   00000070   ....               SUBI    R26, LOW((-(UART + 12) & 0xFFFF))
   \   00000072   ....               SBCI    R27, HIGH((-(UART + 12) & 0xFFFF))
   \   00000074   932D               ST      X+, R18
   \   00000076   933C               ST      X, R19
   \   00000078   9711               SBIW    R27:R26, 1
    173              UART[channel].RxLast    = 0x00;
   \   0000007A   E020               LDI     R18, 0
   \   0000007C   E030               LDI     R19, 0
   \   0000007E   2F0F               MOV     R16, R31
   \   00000080   E010               LDI     R17, 0
   \   00000082   E14A               LDI     R20, 26
   \   00000084   E050               LDI     R21, 0
   \   00000086   ........           CALL    ?S_EC_MUL_L02
   \   0000008A   01D8               MOVW    R27:R26, R17:R16
   \   0000008C   ....               SUBI    R26, LOW((-(UART + 14) & 0xFFFF))
   \   0000008E   ....               SBCI    R27, HIGH((-(UART + 14) & 0xFFFF))
   \   00000090   932D               ST      X+, R18
   \   00000092   933C               ST      X, R19
   \   00000094   9711               SBIW    R27:R26, 1
    174              UART[channel].RxCount   = 0x00;
   \   00000096   E020               LDI     R18, 0
   \   00000098   E030               LDI     R19, 0
   \   0000009A   2F0F               MOV     R16, R31
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   E14A               LDI     R20, 26
   \   000000A0   E050               LDI     R21, 0
   \   000000A2   ........           CALL    ?S_EC_MUL_L02
   \   000000A6   01D8               MOVW    R27:R26, R17:R16
   \   000000A8   ....               SUBI    R26, LOW((-(UART + 16) & 0xFFFF))
   \   000000AA   ....               SBCI    R27, HIGH((-(UART + 16) & 0xFFFF))
   \   000000AC   932D               ST      X+, R18
   \   000000AE   933C               ST      X, R19
   \   000000B0   9711               SBIW    R27:R26, 1
    175              UART[channel].RxState   = SYNC;
   \   000000B2   E020               LDI     R18, 0
   \   000000B4   2F0F               MOV     R16, R31
   \   000000B6   E010               LDI     R17, 0
   \   000000B8   E14A               LDI     R20, 26
   \   000000BA   E050               LDI     R21, 0
   \   000000BC   ........           CALL    ?S_EC_MUL_L02
   \   000000C0   01D8               MOVW    R27:R26, R17:R16
   \   000000C2   ....               SUBI    R26, LOW((-(UART + 18) & 0xFFFF))
   \   000000C4   ....               SBCI    R27, HIGH((-(UART + 18) & 0xFFFF))
   \   000000C6   932C               ST      X, R18
    176              UART[channel].SyncCnt   = 0 ;
   \   000000C8   E020               LDI     R18, 0
   \   000000CA   2F0F               MOV     R16, R31
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   E14A               LDI     R20, 26
   \   000000D0   E050               LDI     R21, 0
   \   000000D2   ........           CALL    ?S_EC_MUL_L02
   \   000000D6   01D8               MOVW    R27:R26, R17:R16
   \   000000D8   ....               SUBI    R26, LOW((-(UART + 19) & 0xFFFF))
   \   000000DA   ....               SBCI    R27, HIGH((-(UART + 19) & 0xFFFF))
   \   000000DC   932C               ST      X, R18
    177              UART[channel].TxStatus  = 0x00;
   \   000000DE   E020               LDI     R18, 0
   \   000000E0   2F0F               MOV     R16, R31
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01D8               MOVW    R27:R26, R17:R16
   \   000000EE   ....               SUBI    R26, LOW((-(UART + 8) & 0xFFFF))
   \   000000F0   ....               SBCI    R27, HIGH((-(UART + 8) & 0xFFFF))
   \   000000F2   932C               ST      X, R18
    178          
    179              switch (channel) {
   \   000000F4   2F0F               MOV     R16, R31
   \   000000F6   5000               SUBI    R16, 0
   \   000000F8   F021               BREQ    ??Init_USART_0
   \   000000FA   950A               DEC     R16
   \   000000FC   F409               BRNE    $+2+2
   \   000000FE   C04E               RJMP    ??Init_USART_1
   \   00000100   C099               RJMP    ??Init_USART_2
    180              case 0x00 :          
    181                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   00000102   EF2A               LDI     R18, 250
   \   00000104   E030               LDI     R19, 0
   \   00000106   2F0F               MOV     R16, R31
   \   00000108   E010               LDI     R17, 0
   \   0000010A   E14A               LDI     R20, 26
   \   0000010C   E050               LDI     R21, 0
   \   0000010E   ........           CALL    ?S_EC_MUL_L02
   \   00000112   01D8               MOVW    R27:R26, R17:R16
   \   00000114   ....               SUBI    R26, LOW((-(UART + 20) & 0xFFFF))
   \   00000116   ....               SBCI    R27, HIGH((-(UART + 20) & 0xFFFF))
   \   00000118   932D               ST      X+, R18
   \   0000011A   933C               ST      X, R19
   \   0000011C   9711               SBIW    R27:R26, 1
    182                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   0000011E   ....               LDI     R18, LOW(TxBufferCh0)
   \   00000120   ....               LDI     R19, (TxBufferCh0) >> 8
   \   00000122   2F0F               MOV     R16, R31
   \   00000124   E010               LDI     R17, 0
   \   00000126   E14A               LDI     R20, 26
   \   00000128   E050               LDI     R21, 0
   \   0000012A   ........           CALL    ?S_EC_MUL_L02
   \   0000012E   01D8               MOVW    R27:R26, R17:R16
   \   00000130   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000132   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000134   932D               ST      X+, R18
   \   00000136   933C               ST      X, R19
   \   00000138   9711               SBIW    R27:R26, 1
    183                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   0000013A   ....               LDI     R18, LOW(RxBufferCh0)
   \   0000013C   ....               LDI     R19, (RxBufferCh0) >> 8
   \   0000013E   2F0F               MOV     R16, R31
   \   00000140   E010               LDI     R17, 0
   \   00000142   E14A               LDI     R20, 26
   \   00000144   E050               LDI     R21, 0
   \   00000146   ........           CALL    ?S_EC_MUL_L02
   \   0000014A   01D8               MOVW    R27:R26, R17:R16
   \   0000014C   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   0000014E   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   00000150   932D               ST      X+, R18
   \   00000152   933C               ST      X, R19
   \   00000154   9711               SBIW    R27:R26, 1
    184                  UCSR0A  = 0x00; 
   \   00000156   E000               LDI     R16, 0
   \   00000158   9300....           STS     _A_UCSR0A, R16
    185                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000015C   E400               LDI     R16, 64
   \   0000015E   E412               LDI     R17, 66
   \   00000160   E02F               LDI     R18, 15
   \   00000162   E030               LDI     R19, 0
   \   00000164   01A2               MOVW    R21:R20, R5:R4
   \   00000166   01B3               MOVW    R23:R22, R7:R6
   \   00000168   ........           CALL    ?UL_DIVMOD_L03
   \   0000016C   950A               DEC     R16
   \   0000016E   9300....           STS     _A_UBRR0, R16
    186                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   00000172   E400               LDI     R16, 64
   \   00000174   E412               LDI     R17, 66
   \   00000176   E02F               LDI     R18, 15
   \   00000178   E030               LDI     R19, 0
   \   0000017A   01A2               MOVW    R21:R20, R5:R4
   \   0000017C   01B3               MOVW    R23:R22, R7:R6
   \   0000017E   ........           CALL    ?UL_DIVMOD_L03
   \   00000182   5001               SUBI    R16, 1
   \   00000184   4010               SBCI    R17, 0
   \   00000186   2F01               MOV     R16, R17
   \   00000188   E010               LDI     R17, 0
   \   0000018A   930000C5           STS     197, R16
    187                  UCSR0B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   0000018E   EB08               LDI     R16, 184
   \   00000190   9300....           STS     _A_UCSR0B, R16
    188                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000194   E006               LDI     R16, 6
   \   00000196   9300....           STS     _A_UCSR0C, R16
    189                  break;
   \   0000019A   C04C               RJMP    ??Init_USART_2
    190              case 0x01 :
    191                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   0000019C   EF2A               LDI     R18, 250
   \   0000019E   E030               LDI     R19, 0
   \   000001A0   2F0F               MOV     R16, R31
   \   000001A2   E010               LDI     R17, 0
   \   000001A4   E14A               LDI     R20, 26
   \   000001A6   E050               LDI     R21, 0
   \   000001A8   ........           CALL    ?S_EC_MUL_L02
   \   000001AC   01D8               MOVW    R27:R26, R17:R16
   \   000001AE   ....               SUBI    R26, LOW((-(UART + 20) & 0xFFFF))
   \   000001B0   ....               SBCI    R27, HIGH((-(UART + 20) & 0xFFFF))
   \   000001B2   932D               ST      X+, R18
   \   000001B4   933C               ST      X, R19
   \   000001B6   9711               SBIW    R27:R26, 1
    192                  UART[channel].pTxBuffer = TxBufferCh1;
   \   000001B8   ....               LDI     R18, LOW(TxBufferCh1)
   \   000001BA   ....               LDI     R19, (TxBufferCh1) >> 8
   \   000001BC   2F0F               MOV     R16, R31
   \   000001BE   E010               LDI     R17, 0
   \   000001C0   E14A               LDI     R20, 26
   \   000001C2   E050               LDI     R21, 0
   \   000001C4   ........           CALL    ?S_EC_MUL_L02
   \   000001C8   01D8               MOVW    R27:R26, R17:R16
   \   000001CA   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   000001CC   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   000001CE   932D               ST      X+, R18
   \   000001D0   933C               ST      X, R19
   \   000001D2   9711               SBIW    R27:R26, 1
    193                  UART[channel].pRxBuffer = RxBufferCh1;
   \   000001D4   ....               LDI     R18, LOW(RxBufferCh1)
   \   000001D6   ....               LDI     R19, (RxBufferCh1) >> 8
   \   000001D8   2F0F               MOV     R16, R31
   \   000001DA   E010               LDI     R17, 0
   \   000001DC   E14A               LDI     R20, 26
   \   000001DE   E050               LDI     R21, 0
   \   000001E0   ........           CALL    ?S_EC_MUL_L02
   \   000001E4   01D8               MOVW    R27:R26, R17:R16
   \   000001E6   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   000001E8   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   000001EA   932D               ST      X+, R18
   \   000001EC   933C               ST      X, R19
   \   000001EE   9711               SBIW    R27:R26, 1
    194                  UCSR1A  = 0x00; 
   \   000001F0   E000               LDI     R16, 0
   \   000001F2   9300....           STS     _A_UCSR1A, R16
    195                  UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   000001F6   E400               LDI     R16, 64
   \   000001F8   E412               LDI     R17, 66
   \   000001FA   E02F               LDI     R18, 15
   \   000001FC   E030               LDI     R19, 0
   \   000001FE   01A2               MOVW    R21:R20, R5:R4
   \   00000200   01B3               MOVW    R23:R22, R7:R6
   \   00000202   ........           CALL    ?UL_DIVMOD_L03
   \   00000206   950A               DEC     R16
   \   00000208   9300....           STS     _A_UBRR1, R16
    196                  UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   0000020C   E400               LDI     R16, 64
   \   0000020E   E412               LDI     R17, 66
   \   00000210   E02F               LDI     R18, 15
   \   00000212   E030               LDI     R19, 0
   \   00000214   01A2               MOVW    R21:R20, R5:R4
   \   00000216   01B3               MOVW    R23:R22, R7:R6
   \   00000218   ........           CALL    ?UL_DIVMOD_L03
   \   0000021C   5001               SUBI    R16, 1
   \   0000021E   4010               SBCI    R17, 0
   \   00000220   2F01               MOV     R16, R17
   \   00000222   E010               LDI     R17, 0
   \   00000224   930000CD           STS     205, R16
    197                  UCSR1B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   00000228   EB08               LDI     R16, 184
   \   0000022A   9300....           STS     _A_UCSR1B, R16
    198                  UCSR1C  = 0x06;       /* n,8,1 */
   \   0000022E   E006               LDI     R16, 6
   \   00000230   9300....           STS     _A_UCSR1C, R16
    199                  break;
    200              default:
    201                  break ;
    202              }    
    203          }
   \                     ??Init_USART_2:
   \   00000234   E0E8               LDI     R30, 8
   \   00000236   ........           JMP     ?EPILOGUE_B8_L09
   \   0000023A                      REQUIRE _A_UCSR0A
   \   0000023A                      REQUIRE _A_UBRR0
   \   0000023A                      REQUIRE _A_UCSR0B
   \   0000023A                      REQUIRE _A_UCSR0C
   \   0000023A                      REQUIRE _A_UCSR1A
   \   0000023A                      REQUIRE _A_UBRR1
   \   0000023A                      REQUIRE _A_UCSR1B
   \   0000023A                      REQUIRE _A_UCSR1C
    204          
    205          
    206          /*
    207          **===========================================================================
    208          ** Init the AD converter registers
    209          **===========================================================================
    210          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    211          void Init_AD( void ) {
   \                     Init_AD:
    212          
    213              char i;     
    214              for (i = 0; i<8; i++) {                 // Init variables
   \   00000000   E000               LDI     R16, 0
   \                     ??Init_AD_0:
   \   00000002   3008               CPI     R16, 8
   \   00000004   F468               BRCC    ??Init_AD_1
    215                  ADInt.Result[i] = 0;                   // convertion resluts
   \   00000006   E020               LDI     R18, 0
   \   00000008   E030               LDI     R19, 0
   \   0000000A   2F40               MOV     R20, R16
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   0F44               LSL     R20
   \   00000010   1F55               ROL     R21
   \   00000012   01FA               MOVW    R31:R30, R21:R20
   \   00000014   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   00000018   8320               ST      Z, R18
   \   0000001A   8331               STD     Z+1, R19
    216              }
   \   0000001C   9503               INC     R16
   \   0000001E   CFF1               RJMP    ??Init_AD_0
    217              ADChannel = 0x00 ;                      // AD channel to be converted
   \                     ??Init_AD_1:
   \   00000020   E010               LDI     R17, 0
   \   00000022   9310....           STS     ADChannel, R17
    218              ADMUX   = 0xc0 ;                        // Ref = 2,56V, right adjust
   \   00000026   EC10               LDI     R17, 192
   \   00000028   9310....           STS     _A_ADMUX, R17
    219              ADCSRA   = 0x8f ;                        // AD enabled, int enabled, xtal / 128
   \   0000002C   E81F               LDI     R17, 143
   \   0000002E   9310....           STS     _A_ADCSRA, R17
    220          }
   \   00000032   9508               RET
   \   00000034                      REQUIRE _A_ADMUX
   \   00000034                      REQUIRE _A_ADCSRA
    221          
    222          /*
    223          **===========================================================================
    224          ** Init values  in the system
    225          **===========================================================================
    226          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    227          void Init_Values(void) {
   \                     Init_Values:
    228          
    229          
    230          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   InitSystem
        0      2   -> Init_AD
        0      2   -> Init_CPU
        0      2   -> Init_IO
        0      2   -> Init_TMR
        0      2   -> Init_USART
        0      2   -> Init_Values
      0      2   Init_AD
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      8      2   Init_USART
        8      2 ?S_EC_MUL_L02
        8      2 ?UL_DIVMOD_L03
      0      2   Init_Values
      0      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      62  InitSystem
      52  Init_AD
     100  Init_CPU
     130  Init_IO
      34  Init_TMR
     570  Init_USART
       2  Init_Values
      18  Init_Watchdog
       1  _A_ADCSRA
       1  _A_ADMUX
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_OCR0A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR0A
       2  _A_UBRR0
       2  _A_UBRR1
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_WDTCSR
       1  _A_XMCRA
       1  _A_XMCRB

 
  37 bytes in segment ABSOLUTE
 968 bytes in segment CODE
 
 968 bytes of CODE memory
   0 bytes of DATA memory (+ 37 bytes shared)

Errors: none
Warnings: none
