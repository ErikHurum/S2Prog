###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            08/Feb/2017  15:43:26
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1281\Src\AD7715.c
#    Command line =  
#        "D:\S2Prog\IO\ANZB – ATmega1281\Src\AD7715.c" --cpu=m1280 -ms -o
#        "D:\S2Prog\IO\ANZB – ATmega1281\Debug\Obj" -D OS_LIBMODE_D -D
#        OS_UART=-1 -lCN "D:\S2Prog\IO\ANZB – ATmega1281\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB – ATmega1281\INC\"
#        -I "D:\S2Prog\IO\ANZB – ATmega1281\..\..\SHARED\INC\" --eeprom_size
#        4096 --clib -On
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1281\Debug\List\AD7715.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1281\Debug\Obj\AD7715.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1281\Src\AD7715.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PING
   \                     _A_PING:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          
     12          /*************************************************************************
     13          *   (This is a task)
     14          *  AD7715 task 
     15          *
     16          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     17          void AD7715(void) {
   \                     AD7715:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   9724               SBIW    R29:R28, 4
     18              char ch, Rev1 = 0; 
   \   00000006   E090               LDI     R25, 0
     19              unsigned int addata ;
     20              float Tempfloat;
     21          
     22              for (ch = 0; ch<12; ch++) {
   \   00000008   E080               LDI     R24, 0
   \                     ??AD7715_0:
   \   0000000A   308C               CPI     R24, 12
   \   0000000C   F448               BRCC    ??AD7715_1
     23                  TData.Ana.Filter[ch] = 1.0;
   \   0000000E   E021               LDI     R18, 1
   \   00000010   2F08               MOV     R16, R24
   \   00000012   E010               LDI     R17, 0
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000001A   8322               STD     Z+2, R18
     24              }
   \   0000001C   9583               INC     R24
   \   0000001E   CFF5               RJMP    ??AD7715_0
     25              TData.Ana.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP) + (ReadEEPROMByte(EEPROM_PORTSETUP+1) <<8); // Get setup from EEPROM
   \                     ??AD7715_1:
   \   00000020   E002               LDI     R16, 2
   \   00000022   E010               LDI     R17, 0
   \   00000024   ........           CALL    ReadEEPROMByte
   \   00000028   2E40               MOV     R4, R16
   \   0000002A   E003               LDI     R16, 3
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   ........           CALL    ReadEEPROMByte
   \   00000032   2D24               MOV     R18, R4
   \   00000034   2F30               MOV     R19, R16
   \   00000036   9320....           STS     TData, R18
   \   0000003A   9330....           STS     (TData + 1), R19
     26              SetRS4Port();                                           // and set power on ports
   \   0000003E   ........           CALL    SetRS4Port
     27          
     28               
     29              WriteAdByte(0xff) ;             // Write 32 1's to reset
   \   00000042   EF0F               LDI     R16, 255
   \   00000044   ....               RCALL   WriteAdByte
     30              WriteAdByte(0xff) ;
   \   00000046   EF0F               LDI     R16, 255
   \   00000048   ....               RCALL   WriteAdByte
     31              WriteAdByte(0xff) ;
   \   0000004A   EF0F               LDI     R16, 255
   \   0000004C   ....               RCALL   WriteAdByte
     32              WriteAdByte(0xff) ;
   \   0000004E   EF0F               LDI     R16, 255
   \   00000050   ....               RCALL   WriteAdByte
     33              
     34              // Calibrate and check if the card is layout rev 1?
     35              WriteAdByte(0x10) ;             // Next write setup reg 
   \   00000052   E100               LDI     R16, 16
   \   00000054   ....               RCALL   WriteAdByte
     36              WriteAdByte(0x4e) ;             //  Ad setup data, unipolar, calibrate
   \   00000056   E40E               LDI     R16, 78
   \   00000058   ....               RCALL   WriteAdByte
     37              OS_Delay(250);
   \   0000005A   EF0A               LDI     R16, 250
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   ........           CALL    OS_Delay
     38              OS_ClearEvents(&TCB_AD7715);
   \   00000062   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000064   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000066   ........           CALL    OS_ClearEvents
     39              OS_WaitEventTimed(1, 1000);
   \   0000006A   EE28               LDI     R18, 232
   \   0000006C   E033               LDI     R19, 3
   \   0000006E   E001               LDI     R16, 1
   \   00000070   ........           CALL    OS_WaitEventTimed
     40              
     41              ClrBit(PORTE,0xf0);                 // check channel 14 for 2.5 V
   \   00000074   9100....           LDS     R16, (OS_Counters + 1)
   \   00000078   7F00               ANDI    R16, 0xF0
   \   0000007A   2300               TST     R16
   \   0000007C   F021               BREQ    ??AD7715_2
   \   0000007E   E909               LDI     R16, 153
   \   00000080   E010               LDI     R17, 0
   \   00000082   ........           CALL    OS_Error
   \                     ??AD7715_2:
   \   00000086   94F8               CLI
   \   00000088   9100....           LDS     R16, (OS_Counters + 1)
   \   0000008C   9503               INC     R16
   \   0000008E   9300....           STS     (OS_Counters + 1), R16
   \   00000092   B10E               IN      R16, 0x0E
   \   00000094   700F               ANDI    R16, 0x0F
   \   00000096   B90E               OUT     0x0E, R16
   \   00000098   9100....           LDS     R16, (OS_Counters + 1)
   \   0000009C   7F00               ANDI    R16, 0xF0
   \   0000009E   2300               TST     R16
   \   000000A0   F021               BREQ    ??AD7715_3
   \   000000A2   E909               LDI     R16, 153
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   ........           CALL    OS_Error
   \                     ??AD7715_3:
   \   000000AA   9100....           LDS     R16, (OS_Counters + 1)
   \   000000AE   950A               DEC     R16
   \   000000B0   9300....           STS     (OS_Counters + 1), R16
   \   000000B4   9100....           LDS     R16, (OS_Counters + 1)
   \   000000B8   2300               TST     R16
   \   000000BA   F409               BRNE    ??AD7715_4
   \   000000BC   9478               SEI
     42              SetBit(PORTE, (14 << 4) & 0xf0);    // check 
   \                     ??AD7715_4:
   \   000000BE   9100....           LDS     R16, (OS_Counters + 1)
   \   000000C2   7F00               ANDI    R16, 0xF0
   \   000000C4   2300               TST     R16
   \   000000C6   F021               BREQ    ??AD7715_5
   \   000000C8   E909               LDI     R16, 153
   \   000000CA   E010               LDI     R17, 0
   \   000000CC   ........           CALL    OS_Error
   \                     ??AD7715_5:
   \   000000D0   94F8               CLI
   \   000000D2   9100....           LDS     R16, (OS_Counters + 1)
   \   000000D6   9503               INC     R16
   \   000000D8   9300....           STS     (OS_Counters + 1), R16
   \   000000DC   B10E               IN      R16, 0x0E
   \   000000DE   6E00               ORI     R16, 0xE0
   \   000000E0   B90E               OUT     0x0E, R16
   \   000000E2   9100....           LDS     R16, (OS_Counters + 1)
   \   000000E6   7F00               ANDI    R16, 0xF0
   \   000000E8   2300               TST     R16
   \   000000EA   F021               BREQ    ??AD7715_6
   \   000000EC   E909               LDI     R16, 153
   \   000000EE   E010               LDI     R17, 0
   \   000000F0   ........           CALL    OS_Error
   \                     ??AD7715_6:
   \   000000F4   9100....           LDS     R16, (OS_Counters + 1)
   \   000000F8   950A               DEC     R16
   \   000000FA   9300....           STS     (OS_Counters + 1), R16
   \   000000FE   9100....           LDS     R16, (OS_Counters + 1)
   \   00000102   2300               TST     R16
   \   00000104   F409               BRNE    ??AD7715_7
   \   00000106   9478               SEI
     43              WriteAdByte(0x10) ;                 // Next write data 
   \                     ??AD7715_7:
   \   00000108   E100               LDI     R16, 16
   \   0000010A   ....               RCALL   WriteAdByte
     44              WriteAdByte(0x0e) ;                 // Ad setup data, unipolar
   \   0000010C   E00E               LDI     R16, 14
   \   0000010E   ....               RCALL   WriteAdByte
     45              OS_Delay(85);
   \   00000110   E505               LDI     R16, 85
   \   00000112   E010               LDI     R17, 0
   \   00000114   ........           CALL    OS_Delay
     46              OS_ClearEvents(&TCB_AD7715);
   \   00000118   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000011A   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000011C   ........           CALL    OS_ClearEvents
     47              OS_WaitEventTimed(1, 250);
   \   00000120   EF2A               LDI     R18, 250
   \   00000122   E030               LDI     R19, 0
   \   00000124   E001               LDI     R16, 1
   \   00000126   ........           CALL    OS_WaitEventTimed
     48              WriteAdByte(0x38) ;                 // Next read data 
   \   0000012A   E308               LDI     R16, 56
   \   0000012C   ....               RCALL   WriteAdByte
     49              addata = ReadAdByte()* 256 ;        // read data 16 bit data from ad 
   \   0000012E   ....               RCALL   ReadAdByte
   \   00000130   E010               LDI     R17, 0
   \   00000132   2F10               MOV     R17, R16
   \   00000134   E000               LDI     R16, 0
   \   00000136   01D8               MOVW    R27:R26, R17:R16
     50              addata += ReadAdByte() ;
   \   00000138   ....               RCALL   ReadAdByte
   \   0000013A   E010               LDI     R17, 0
   \   0000013C   0FA0               ADD     R26, R16
   \   0000013E   1FB1               ADC     R27, R17
     51              if (addata > 60000){
   \   00000140   36A1               CPI     R26, 97
   \   00000142   EE0A               LDI     R16, 234
   \   00000144   07B0               CPC     R27, R16
   \   00000146   F148               BRCS    ??AD7715_8
     52                  Rev1 = true;
   \   00000148   E091               LDI     R25, 1
     53                  for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \   0000014A   E080               LDI     R24, 0
   \                     ??AD7715_9:
   \   0000014C   308C               CPI     R24, 12
   \   0000014E   F008               BRCS    $+2+2
   \   00000150   C04B               RJMP    ??AD7715_10
     54                     TData.Ana.Offset[ch] = 0.0;
   \   00000152   E000               LDI     R16, 0
   \   00000154   E010               LDI     R17, 0
   \   00000156   E020               LDI     R18, 0
   \   00000158   E030               LDI     R19, 0
   \   0000015A   2F48               MOV     R20, R24
   \   0000015C   E050               LDI     R21, 0
   \   0000015E   0F44               LSL     R20
   \   00000160   1F55               ROL     R21
   \   00000162   0F44               LSL     R20
   \   00000164   1F55               ROL     R21
   \   00000166   01FA               MOVW    R31:R30, R21:R20
   \   00000168   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   0000016A   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   0000016C   8300               ST      Z, R16
   \   0000016E   8311               STD     Z+1, R17
   \   00000170   8322               STD     Z+2, R18
   \   00000172   8333               STD     Z+3, R19
     55                     TData.Ana.Gain[ch] = 0.9985;
   \   00000174   EB02               LDI     R16, 178
   \   00000176   E91D               LDI     R17, 157
   \   00000178   E72F               LDI     R18, 127
   \   0000017A   E33F               LDI     R19, 63
   \   0000017C   2F48               MOV     R20, R24
   \   0000017E   E050               LDI     R21, 0
   \   00000180   0F44               LSL     R20
   \   00000182   1F55               ROL     R21
   \   00000184   0F44               LSL     R20
   \   00000186   1F55               ROL     R21
   \   00000188   01FA               MOVW    R31:R30, R21:R20
   \   0000018A   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   0000018C   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   0000018E   8300               ST      Z, R16
   \   00000190   8311               STD     Z+1, R17
   \   00000192   8322               STD     Z+2, R18
   \   00000194   8333               STD     Z+3, R19
     56                 }
   \   00000196   9583               INC     R24
   \   00000198   CFD9               RJMP    ??AD7715_9
     57              } else {
     58                  for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \                     ??AD7715_8:
   \   0000019A   E080               LDI     R24, 0
   \                     ??AD7715_11:
   \   0000019C   308C               CPI     R24, 12
   \   0000019E   F520               BRCC    ??AD7715_10
     59                     TData.Ana.Offset[ch] = 0.0;
   \   000001A0   E000               LDI     R16, 0
   \   000001A2   E010               LDI     R17, 0
   \   000001A4   E020               LDI     R18, 0
   \   000001A6   E030               LDI     R19, 0
   \   000001A8   2F48               MOV     R20, R24
   \   000001AA   E050               LDI     R21, 0
   \   000001AC   0F44               LSL     R20
   \   000001AE   1F55               ROL     R21
   \   000001B0   0F44               LSL     R20
   \   000001B2   1F55               ROL     R21
   \   000001B4   01FA               MOVW    R31:R30, R21:R20
   \   000001B6   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   000001B8   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   000001BA   8300               ST      Z, R16
   \   000001BC   8311               STD     Z+1, R17
   \   000001BE   8322               STD     Z+2, R18
   \   000001C0   8333               STD     Z+3, R19
     60                     TData.Ana.Gain[ch] = 0.9965;
   \   000001C2   EA00               LDI     R16, 160
   \   000001C4   E11A               LDI     R17, 26
   \   000001C6   E72F               LDI     R18, 127
   \   000001C8   E33F               LDI     R19, 63
   \   000001CA   2F48               MOV     R20, R24
   \   000001CC   E050               LDI     R21, 0
   \   000001CE   0F44               LSL     R20
   \   000001D0   1F55               ROL     R21
   \   000001D2   0F44               LSL     R20
   \   000001D4   1F55               ROL     R21
   \   000001D6   01FA               MOVW    R31:R30, R21:R20
   \   000001D8   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   000001DA   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   000001DC   8300               ST      Z, R16
   \   000001DE   8311               STD     Z+1, R17
   \   000001E0   8322               STD     Z+2, R18
   \   000001E2   8333               STD     Z+3, R19
     61                 }
   \   000001E4   9583               INC     R24
   \   000001E6   CFDA               RJMP    ??AD7715_11
     62              }
     63              for (ch = 0 ; ch < 12 ; ch++) {       // Get the gain and offset from the EEPROM
   \                     ??AD7715_10:
   \   000001E8   E080               LDI     R24, 0
   \                     ??AD7715_12:
   \   000001EA   308C               CPI     R24, 12
   \   000001EC   F008               BRCS    $+2+2
   \   000001EE   C080               RJMP    ??AD7715_13
     64                ReadEEPROMBuffer( (ch | 0x80) * sizeof(float)*2, sizeof(float), (char*)&Tempfloat );
   \   000001F0   01AE               MOVW    R21:R20, R29:R28
   \   000001F2   E024               LDI     R18, 4
   \   000001F4   01BA               MOVW    R23:R22, R21:R20
   \   000001F6   2F48               MOV     R20, R24
   \   000001F8   E050               LDI     R21, 0
   \   000001FA   6840               ORI     R20, 0x80
   \   000001FC   6050               ORI     R21, 0x00
   \   000001FE   E008               LDI     R16, 8
   \   00000200   E010               LDI     R17, 0
   \   00000202   ........           CALL    ?S_EC_MUL_L02
   \   00000206   01AB               MOVW    R21:R20, R23:R22
   \   00000208   ........           CALL    ReadEEPROMBuffer
     65                
     66                if (IsFloat(Tempfloat) && Tempfloat > -2.0 && Tempfloat < 2.0 ) { 
   \   0000020C   8108               LD      R16, Y
   \   0000020E   8119               LDD     R17, Y+1
   \   00000210   812A               LDD     R18, Y+2
   \   00000212   813B               LDD     R19, Y+3
   \   00000214   ........           CALL    IsFloat
   \   00000218   2300               TST     R16
   \   0000021A   F139               BREQ    ??AD7715_14
   \   0000021C   EF4E               LDI     R20, 254
   \   0000021E   EF5F               LDI     R21, 255
   \   00000220   EF6F               LDI     R22, 255
   \   00000222   EB7F               LDI     R23, 191
   \   00000224   8108               LD      R16, Y
   \   00000226   8119               LDD     R17, Y+1
   \   00000228   812A               LDD     R18, Y+2
   \   0000022A   813B               LDD     R19, Y+3
   \   0000022C   ........           CALL    ?F_CMP_GE_L04
   \   00000230   F4E0               BRCC    ??AD7715_14
   \   00000232   E040               LDI     R20, 0
   \   00000234   E050               LDI     R21, 0
   \   00000236   E060               LDI     R22, 0
   \   00000238   E470               LDI     R23, 64
   \   0000023A   8108               LD      R16, Y
   \   0000023C   8119               LDD     R17, Y+1
   \   0000023E   812A               LDD     R18, Y+2
   \   00000240   813B               LDD     R19, Y+3
   \   00000242   ........           CALL    ?F_CMP_LT_L04
   \   00000246   F488               BRCC    ??AD7715_14
     67                  *((float*)&TData.Ana.Offset[ch]) = *((float*)&Tempfloat) ;  //offset
   \   00000248   8148               LD      R20, Y
   \   0000024A   8159               LDD     R21, Y+1
   \   0000024C   816A               LDD     R22, Y+2
   \   0000024E   817B               LDD     R23, Y+3
   \   00000250   2F08               MOV     R16, R24
   \   00000252   E010               LDI     R17, 0
   \   00000254   0F00               LSL     R16
   \   00000256   1F11               ROL     R17
   \   00000258   0F00               LSL     R16
   \   0000025A   1F11               ROL     R17
   \   0000025C   01F8               MOVW    R31:R30, R17:R16
   \   0000025E   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   00000260   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   00000262   8340               ST      Z, R20
   \   00000264   8351               STD     Z+1, R21
   \   00000266   8362               STD     Z+2, R22
   \   00000268   8373               STD     Z+3, R23
     68                }
     69                
     70                ReadEEPROMBuffer( ((ch | 0x80) * sizeof(float)*2) + sizeof(float), sizeof(float), (char*)&Tempfloat );
   \                     ??AD7715_14:
   \   0000026A   01AE               MOVW    R21:R20, R29:R28
   \   0000026C   E024               LDI     R18, 4
   \   0000026E   2F62               MOV     R22, R18
   \   00000270   019A               MOVW    R19:R18, R21:R20
   \   00000272   2F48               MOV     R20, R24
   \   00000274   E050               LDI     R21, 0
   \   00000276   6840               ORI     R20, 0x80
   \   00000278   6050               ORI     R21, 0x00
   \   0000027A   E008               LDI     R16, 8
   \   0000027C   E010               LDI     R17, 0
   \   0000027E   ........           CALL    ?S_EC_MUL_L02
   \   00000282   5F0C               SUBI    R16, 252
   \   00000284   4F1F               SBCI    R17, 255
   \   00000286   01A9               MOVW    R21:R20, R19:R18
   \   00000288   2F26               MOV     R18, R22
   \   0000028A   ........           CALL    ReadEEPROMBuffer
     71                
     72                if (IsFloat(Tempfloat) && Tempfloat > 0.98 && Tempfloat < 1.02) { 
   \   0000028E   8108               LD      R16, Y
   \   00000290   8119               LDD     R17, Y+1
   \   00000292   812A               LDD     R18, Y+2
   \   00000294   813B               LDD     R19, Y+3
   \   00000296   ........           CALL    IsFloat
   \   0000029A   2300               TST     R16
   \   0000029C   F139               BREQ    ??AD7715_15
   \   0000029E   E449               LDI     R20, 73
   \   000002A0   EE51               LDI     R21, 225
   \   000002A2   E76A               LDI     R22, 122
   \   000002A4   E37F               LDI     R23, 63
   \   000002A6   8108               LD      R16, Y
   \   000002A8   8119               LDD     R17, Y+1
   \   000002AA   812A               LDD     R18, Y+2
   \   000002AC   813B               LDD     R19, Y+3
   \   000002AE   ........           CALL    ?F_CMP_GE_L04
   \   000002B2   F4E0               BRCC    ??AD7715_15
   \   000002B4   E54C               LDI     R20, 92
   \   000002B6   E85F               LDI     R21, 143
   \   000002B8   E862               LDI     R22, 130
   \   000002BA   E37F               LDI     R23, 63
   \   000002BC   8108               LD      R16, Y
   \   000002BE   8119               LDD     R17, Y+1
   \   000002C0   812A               LDD     R18, Y+2
   \   000002C2   813B               LDD     R19, Y+3
   \   000002C4   ........           CALL    ?F_CMP_LT_L04
   \   000002C8   F488               BRCC    ??AD7715_15
     73                  *((float*)&TData.Ana.Gain[ch]) = *((float*)&Tempfloat) ;  //gain
   \   000002CA   8148               LD      R20, Y
   \   000002CC   8159               LDD     R21, Y+1
   \   000002CE   816A               LDD     R22, Y+2
   \   000002D0   817B               LDD     R23, Y+3
   \   000002D2   2F08               MOV     R16, R24
   \   000002D4   E010               LDI     R17, 0
   \   000002D6   0F00               LSL     R16
   \   000002D8   1F11               ROL     R17
   \   000002DA   0F00               LSL     R16
   \   000002DC   1F11               ROL     R17
   \   000002DE   01F8               MOVW    R31:R30, R17:R16
   \   000002E0   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   000002E2   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   000002E4   8340               ST      Z, R20
   \   000002E6   8351               STD     Z+1, R21
   \   000002E8   8362               STD     Z+2, R22
   \   000002EA   8373               STD     Z+3, R23
     74                }
     75             }
   \                     ??AD7715_15:
   \   000002EC   9583               INC     R24
   \   000002EE   CF7D               RJMP    ??AD7715_12
     76             
     77              while (1) {
     78                  if (Rev1) {
   \                     ??AD7715_13:
   \   000002F0   2399               TST     R25
   \   000002F2   F409               BRNE    $+2+2
   \   000002F4   C0B7               RJMP    ??AD7715_16
     79                     
     80                      ClrBit(PORTE,0xf0); 
   \   000002F6   9100....           LDS     R16, (OS_Counters + 1)
   \   000002FA   7F00               ANDI    R16, 0xF0
   \   000002FC   2300               TST     R16
   \   000002FE   F021               BREQ    ??AD7715_17
   \   00000300   E909               LDI     R16, 153
   \   00000302   E010               LDI     R17, 0
   \   00000304   ........           CALL    OS_Error
   \                     ??AD7715_17:
   \   00000308   94F8               CLI
   \   0000030A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000030E   9503               INC     R16
   \   00000310   9300....           STS     (OS_Counters + 1), R16
   \   00000314   B10E               IN      R16, 0x0E
   \   00000316   700F               ANDI    R16, 0x0F
   \   00000318   B90E               OUT     0x0E, R16
   \   0000031A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000031E   7F00               ANDI    R16, 0xF0
   \   00000320   2300               TST     R16
   \   00000322   F021               BREQ    ??AD7715_18
   \   00000324   E909               LDI     R16, 153
   \   00000326   E010               LDI     R17, 0
   \   00000328   ........           CALL    OS_Error
   \                     ??AD7715_18:
   \   0000032C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000330   950A               DEC     R16
   \   00000332   9300....           STS     (OS_Counters + 1), R16
   \   00000336   9100....           LDS     R16, (OS_Counters + 1)
   \   0000033A   2300               TST     R16
   \   0000033C   F409               BRNE    ??AD7715_19
   \   0000033E   9478               SEI
     81                      SetBit(PORTE, (15 << 4) & 0xf0); // 0V at ch 16
   \                     ??AD7715_19:
   \   00000340   9100....           LDS     R16, (OS_Counters + 1)
   \   00000344   7F00               ANDI    R16, 0xF0
   \   00000346   2300               TST     R16
   \   00000348   F021               BREQ    ??AD7715_20
   \   0000034A   E909               LDI     R16, 153
   \   0000034C   E010               LDI     R17, 0
   \   0000034E   ........           CALL    OS_Error
   \                     ??AD7715_20:
   \   00000352   94F8               CLI
   \   00000354   9100....           LDS     R16, (OS_Counters + 1)
   \   00000358   9503               INC     R16
   \   0000035A   9300....           STS     (OS_Counters + 1), R16
   \   0000035E   B10E               IN      R16, 0x0E
   \   00000360   6F00               ORI     R16, 0xF0
   \   00000362   B90E               OUT     0x0E, R16
   \   00000364   9100....           LDS     R16, (OS_Counters + 1)
   \   00000368   7F00               ANDI    R16, 0xF0
   \   0000036A   2300               TST     R16
   \   0000036C   F021               BREQ    ??AD7715_21
   \   0000036E   E909               LDI     R16, 153
   \   00000370   E010               LDI     R17, 0
   \   00000372   ........           CALL    OS_Error
   \                     ??AD7715_21:
   \   00000376   9100....           LDS     R16, (OS_Counters + 1)
   \   0000037A   950A               DEC     R16
   \   0000037C   9300....           STS     (OS_Counters + 1), R16
   \   00000380   9100....           LDS     R16, (OS_Counters + 1)
   \   00000384   2300               TST     R16
   \   00000386   F409               BRNE    ??AD7715_22
   \   00000388   9478               SEI
     82                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_22:
   \   0000038A   E100               LDI     R16, 16
   \   0000038C   ....               RCALL   WriteAdByte
     83                      WriteAdByte(0x8e) ;             //  AStark test zero scale calibrate
   \   0000038E   E80E               LDI     R16, 142
   \   00000390   ....               RCALL   WriteAdByte
     84                      OS_Delay(250);
   \   00000392   EF0A               LDI     R16, 250
   \   00000394   E010               LDI     R17, 0
   \   00000396   ........           CALL    OS_Delay
     85                      OS_ClearEvents(&TCB_AD7715);
   \   0000039A   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000039C   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000039E   ........           CALL    OS_ClearEvents
     86                      OS_WaitEventTimed(1, 1000);
   \   000003A2   EE28               LDI     R18, 232
   \   000003A4   E033               LDI     R19, 3
   \   000003A6   E001               LDI     R16, 1
   \   000003A8   ........           CALL    OS_WaitEventTimed
     87                      
     88                      ClrBit(PORTE,0xf0); 
   \   000003AC   9100....           LDS     R16, (OS_Counters + 1)
   \   000003B0   7F00               ANDI    R16, 0xF0
   \   000003B2   2300               TST     R16
   \   000003B4   F021               BREQ    ??AD7715_23
   \   000003B6   E909               LDI     R16, 153
   \   000003B8   E010               LDI     R17, 0
   \   000003BA   ........           CALL    OS_Error
   \                     ??AD7715_23:
   \   000003BE   94F8               CLI
   \   000003C0   9100....           LDS     R16, (OS_Counters + 1)
   \   000003C4   9503               INC     R16
   \   000003C6   9300....           STS     (OS_Counters + 1), R16
   \   000003CA   B10E               IN      R16, 0x0E
   \   000003CC   700F               ANDI    R16, 0x0F
   \   000003CE   B90E               OUT     0x0E, R16
   \   000003D0   9100....           LDS     R16, (OS_Counters + 1)
   \   000003D4   7F00               ANDI    R16, 0xF0
   \   000003D6   2300               TST     R16
   \   000003D8   F021               BREQ    ??AD7715_24
   \   000003DA   E909               LDI     R16, 153
   \   000003DC   E010               LDI     R17, 0
   \   000003DE   ........           CALL    OS_Error
   \                     ??AD7715_24:
   \   000003E2   9100....           LDS     R16, (OS_Counters + 1)
   \   000003E6   950A               DEC     R16
   \   000003E8   9300....           STS     (OS_Counters + 1), R16
   \   000003EC   9100....           LDS     R16, (OS_Counters + 1)
   \   000003F0   2300               TST     R16
   \   000003F2   F409               BRNE    ??AD7715_25
   \   000003F4   9478               SEI
     89                      SetBit(PORTE, (14 << 4) & 0xf0); // 2.5V at ch 15
   \                     ??AD7715_25:
   \   000003F6   9100....           LDS     R16, (OS_Counters + 1)
   \   000003FA   7F00               ANDI    R16, 0xF0
   \   000003FC   2300               TST     R16
   \   000003FE   F021               BREQ    ??AD7715_26
   \   00000400   E909               LDI     R16, 153
   \   00000402   E010               LDI     R17, 0
   \   00000404   ........           CALL    OS_Error
   \                     ??AD7715_26:
   \   00000408   94F8               CLI
   \   0000040A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000040E   9503               INC     R16
   \   00000410   9300....           STS     (OS_Counters + 1), R16
   \   00000414   B10E               IN      R16, 0x0E
   \   00000416   6E00               ORI     R16, 0xE0
   \   00000418   B90E               OUT     0x0E, R16
   \   0000041A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000041E   7F00               ANDI    R16, 0xF0
   \   00000420   2300               TST     R16
   \   00000422   F021               BREQ    ??AD7715_27
   \   00000424   E909               LDI     R16, 153
   \   00000426   E010               LDI     R17, 0
   \   00000428   ........           CALL    OS_Error
   \                     ??AD7715_27:
   \   0000042C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000430   950A               DEC     R16
   \   00000432   9300....           STS     (OS_Counters + 1), R16
   \   00000436   9100....           LDS     R16, (OS_Counters + 1)
   \   0000043A   2300               TST     R16
   \   0000043C   F409               BRNE    ??AD7715_28
   \   0000043E   9478               SEI
     90                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_28:
   \   00000440   E100               LDI     R16, 16
   \   00000442   ....               RCALL   WriteAdByte
     91                      WriteAdByte(0xce) ;             //  AStark test full scale calibrate
   \   00000444   EC0E               LDI     R16, 206
   \   00000446   ....               RCALL   WriteAdByte
     92                      OS_Delay(250);
   \   00000448   EF0A               LDI     R16, 250
   \   0000044A   E010               LDI     R17, 0
   \   0000044C   ........           CALL    OS_Delay
     93                      OS_ClearEvents(&TCB_AD7715);
   \   00000450   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000452   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000454   ........           CALL    OS_ClearEvents
     94                      OS_WaitEventTimed(1, 1000);
   \   00000458   EE28               LDI     R18, 232
   \   0000045A   E033               LDI     R19, 3
   \   0000045C   E001               LDI     R16, 1
   \   0000045E   ........           CALL    OS_WaitEventTimed
   \   00000462   C011               RJMP    ??AD7715_29
     95           
     96                  } else {
     97                      WriteAdByte(0x10) ;             // Next write setup reg 
   \                     ??AD7715_16:
   \   00000464   E100               LDI     R16, 16
   \   00000466   ....               RCALL   WriteAdByte
     98                      WriteAdByte(0x4e) ;             //  Internal calibration calibrate
   \   00000468   E40E               LDI     R16, 78
   \   0000046A   ....               RCALL   WriteAdByte
     99                      OS_Delay(250);
   \   0000046C   EF0A               LDI     R16, 250
   \   0000046E   E010               LDI     R17, 0
   \   00000470   ........           CALL    OS_Delay
    100                      OS_ClearEvents(&TCB_AD7715);
   \   00000474   ....               LDI     R16, LOW(TCB_AD7715)
   \   00000476   ....               LDI     R17, (TCB_AD7715) >> 8
   \   00000478   ........           CALL    OS_ClearEvents
    101                      OS_WaitEventTimed(1, 1000);
   \   0000047C   EE28               LDI     R18, 232
   \   0000047E   E033               LDI     R19, 3
   \   00000480   E001               LDI     R16, 1
   \   00000482   ........           CALL    OS_WaitEventTimed
    102                  }
    103          
    104                  for (ch = 0 ; ch < 12 ; ch++) {
   \                     ??AD7715_29:
   \   00000486   E080               LDI     R24, 0
   \                     ??AD7715_30:
   \   00000488   308C               CPI     R24, 12
   \   0000048A   F008               BRCS    $+2+2
   \   0000048C   CF31               RJMP    ??AD7715_13
    105                      ClrBit(PORTE,0xf0); 
   \   0000048E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000492   7F00               ANDI    R16, 0xF0
   \   00000494   2300               TST     R16
   \   00000496   F021               BREQ    ??AD7715_31
   \   00000498   E909               LDI     R16, 153
   \   0000049A   E010               LDI     R17, 0
   \   0000049C   ........           CALL    OS_Error
   \                     ??AD7715_31:
   \   000004A0   94F8               CLI
   \   000004A2   9100....           LDS     R16, (OS_Counters + 1)
   \   000004A6   9503               INC     R16
   \   000004A8   9300....           STS     (OS_Counters + 1), R16
   \   000004AC   B10E               IN      R16, 0x0E
   \   000004AE   700F               ANDI    R16, 0x0F
   \   000004B0   B90E               OUT     0x0E, R16
   \   000004B2   9100....           LDS     R16, (OS_Counters + 1)
   \   000004B6   7F00               ANDI    R16, 0xF0
   \   000004B8   2300               TST     R16
   \   000004BA   F021               BREQ    ??AD7715_32
   \   000004BC   E909               LDI     R16, 153
   \   000004BE   E010               LDI     R17, 0
   \   000004C0   ........           CALL    OS_Error
   \                     ??AD7715_32:
   \   000004C4   9100....           LDS     R16, (OS_Counters + 1)
   \   000004C8   950A               DEC     R16
   \   000004CA   9300....           STS     (OS_Counters + 1), R16
   \   000004CE   9100....           LDS     R16, (OS_Counters + 1)
   \   000004D2   2300               TST     R16
   \   000004D4   F409               BRNE    ??AD7715_33
   \   000004D6   9478               SEI
    106                      SetBit(PORTE, (ch << 4) & 0xf0);
   \                     ??AD7715_33:
   \   000004D8   9100....           LDS     R16, (OS_Counters + 1)
   \   000004DC   7F00               ANDI    R16, 0xF0
   \   000004DE   2300               TST     R16
   \   000004E0   F021               BREQ    ??AD7715_34
   \   000004E2   E909               LDI     R16, 153
   \   000004E4   E010               LDI     R17, 0
   \   000004E6   ........           CALL    OS_Error
   \                     ??AD7715_34:
   \   000004EA   94F8               CLI
   \   000004EC   9100....           LDS     R16, (OS_Counters + 1)
   \   000004F0   9503               INC     R16
   \   000004F2   9300....           STS     (OS_Counters + 1), R16
   \   000004F6   2F08               MOV     R16, R24
   \   000004F8   9502               SWAP    R16
   \   000004FA   7F00               ANDI    R16, 0xF0
   \   000004FC   B11E               IN      R17, 0x0E
   \   000004FE   2B10               OR      R17, R16
   \   00000500   B91E               OUT     0x0E, R17
   \   00000502   9100....           LDS     R16, (OS_Counters + 1)
   \   00000506   7F00               ANDI    R16, 0xF0
   \   00000508   2300               TST     R16
   \   0000050A   F021               BREQ    ??AD7715_35
   \   0000050C   E909               LDI     R16, 153
   \   0000050E   E010               LDI     R17, 0
   \   00000510   ........           CALL    OS_Error
   \                     ??AD7715_35:
   \   00000514   9100....           LDS     R16, (OS_Counters + 1)
   \   00000518   950A               DEC     R16
   \   0000051A   9300....           STS     (OS_Counters + 1), R16
   \   0000051E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000522   2300               TST     R16
   \   00000524   F409               BRNE    ??AD7715_36
   \   00000526   9478               SEI
    107                      WriteAdByte(0x10) ;                 // Next write data 
   \                     ??AD7715_36:
   \   00000528   E100               LDI     R16, 16
   \   0000052A   ....               RCALL   WriteAdByte
    108                      WriteAdByte(0x0e) ;                          // Ad setup data, unipolar
   \   0000052C   E00E               LDI     R16, 14
   \   0000052E   ....               RCALL   WriteAdByte
    109                      OS_Delay(85);
   \   00000530   E505               LDI     R16, 85
   \   00000532   E010               LDI     R17, 0
   \   00000534   ........           CALL    OS_Delay
    110                      OS_ClearEvents(&TCB_AD7715);
   \   00000538   ....               LDI     R16, LOW(TCB_AD7715)
   \   0000053A   ....               LDI     R17, (TCB_AD7715) >> 8
   \   0000053C   ........           CALL    OS_ClearEvents
    111                      OS_WaitEventTimed(1, 250);
   \   00000540   EF2A               LDI     R18, 250
   \   00000542   E030               LDI     R19, 0
   \   00000544   E001               LDI     R16, 1
   \   00000546   ........           CALL    OS_WaitEventTimed
    112                      WriteAdByte(0x38) ;             // Next read data 
   \   0000054A   E308               LDI     R16, 56
   \   0000054C   ....               RCALL   WriteAdByte
    113                      addata = ReadAdByte()* 256 ;        // read data 16 bit data from ad 
   \   0000054E   ....               RCALL   ReadAdByte
   \   00000550   E010               LDI     R17, 0
   \   00000552   2F10               MOV     R17, R16
   \   00000554   E000               LDI     R16, 0
   \   00000556   01D8               MOVW    R27:R26, R17:R16
    114                      addata += ReadAdByte() ;
   \   00000558   ....               RCALL   ReadAdByte
   \   0000055A   E010               LDI     R17, 0
   \   0000055C   0FA0               ADD     R26, R16
   \   0000055E   1FB1               ADC     R27, R17
    115                      TData.Ana.Status[ch] = 0;                   // Result ok
   \   00000560   E020               LDI     R18, 0
   \   00000562   2F08               MOV     R16, R24
   \   00000564   E010               LDI     R17, 0
   \   00000566   01F8               MOVW    R31:R30, R17:R16
   \   00000568   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000056A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000056C   8726               STD     Z+14, R18
    116                      TData.Ana.Result[ch] += ((((((float)addata / 65535.0) * 25.0) * TData.Ana.Gain[ch])-TData.Ana.Offset[ch] - TData.Ana.Result[ch])
    117                                               / (TData.Ana.Filter[ch]+1.0))  ;             // readed value / 16bit * 2.5 volt range
   \   0000056E   018D               MOVW    R17:R16, R27:R26
   \   00000570   E020               LDI     R18, 0
   \   00000572   E030               LDI     R19, 0
   \   00000574   ........           CALL    ?UL2F_L04
   \   00000578   E040               LDI     R20, 0
   \   0000057A   EF5F               LDI     R21, 255
   \   0000057C   E76F               LDI     R22, 127
   \   0000057E   E477               LDI     R23, 71
   \   00000580   ........           CALL    ?F_DIV_L04
   \   00000584   E040               LDI     R20, 0
   \   00000586   E050               LDI     R21, 0
   \   00000588   EC68               LDI     R22, 200
   \   0000058A   E471               LDI     R23, 65
   \   0000058C   ........           CALL    ?F_MUL_L04
   \   00000590   2F48               MOV     R20, R24
   \   00000592   E050               LDI     R21, 0
   \   00000594   0F44               LSL     R20
   \   00000596   1F55               ROL     R21
   \   00000598   0F44               LSL     R20
   \   0000059A   1F55               ROL     R21
   \   0000059C   01FA               MOVW    R31:R30, R21:R20
   \   0000059E   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   000005A0   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   000005A2   8140               LD      R20, Z
   \   000005A4   8151               LDD     R21, Z+1
   \   000005A6   8162               LDD     R22, Z+2
   \   000005A8   8173               LDD     R23, Z+3
   \   000005AA   ........           CALL    ?F_MUL_L04
   \   000005AE   2F48               MOV     R20, R24
   \   000005B0   E050               LDI     R21, 0
   \   000005B2   0F44               LSL     R20
   \   000005B4   1F55               ROL     R21
   \   000005B6   0F44               LSL     R20
   \   000005B8   1F55               ROL     R21
   \   000005BA   01FA               MOVW    R31:R30, R21:R20
   \   000005BC   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   000005BE   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   000005C0   8140               LD      R20, Z
   \   000005C2   8151               LDD     R21, Z+1
   \   000005C4   8162               LDD     R22, Z+2
   \   000005C6   8173               LDD     R23, Z+3
   \   000005C8   ........           CALL    ?F_SUB_L04
   \   000005CC   2F48               MOV     R20, R24
   \   000005CE   E050               LDI     R21, 0
   \   000005D0   0F44               LSL     R20
   \   000005D2   1F55               ROL     R21
   \   000005D4   0F44               LSL     R20
   \   000005D6   1F55               ROL     R21
   \   000005D8   01FA               MOVW    R31:R30, R21:R20
   \   000005DA   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000005DC   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000005DE   8D42               LDD     R20, Z+26
   \   000005E0   8D53               LDD     R21, Z+27
   \   000005E2   8D64               LDD     R22, Z+28
   \   000005E4   8D75               LDD     R23, Z+29
   \   000005E6   ........           CALL    ?F_SUB_L04
   \   000005EA   0128               MOVW    R5:R4, R17:R16
   \   000005EC   0139               MOVW    R7:R6, R19:R18
   \   000005EE   2F08               MOV     R16, R24
   \   000005F0   E010               LDI     R17, 0
   \   000005F2   01F8               MOVW    R31:R30, R17:R16
   \   000005F4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000005F6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000005F8   8102               LDD     R16, Z+2
   \   000005FA   E010               LDI     R17, 0
   \   000005FC   E020               LDI     R18, 0
   \   000005FE   E030               LDI     R19, 0
   \   00000600   ........           CALL    ?UL2F_L04
   \   00000604   E040               LDI     R20, 0
   \   00000606   E050               LDI     R21, 0
   \   00000608   E860               LDI     R22, 128
   \   0000060A   E37F               LDI     R23, 63
   \   0000060C   ........           CALL    ?F_ADD_L04
   \   00000610   01A8               MOVW    R21:R20, R17:R16
   \   00000612   01B9               MOVW    R23:R22, R19:R18
   \   00000614   0182               MOVW    R17:R16, R5:R4
   \   00000616   0193               MOVW    R19:R18, R7:R6
   \   00000618   ........           CALL    ?F_DIV_L04
   \   0000061C   2F48               MOV     R20, R24
   \   0000061E   E050               LDI     R21, 0
   \   00000620   0F44               LSL     R20
   \   00000622   1F55               ROL     R21
   \   00000624   0F44               LSL     R20
   \   00000626   1F55               ROL     R21
   \   00000628   01FA               MOVW    R31:R30, R21:R20
   \   0000062A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000062C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000062E   8D42               LDD     R20, Z+26
   \   00000630   8D53               LDD     R21, Z+27
   \   00000632   8D64               LDD     R22, Z+28
   \   00000634   8D75               LDD     R23, Z+29
   \   00000636   ........           CALL    ?F_ADD_L04
   \   0000063A   2F48               MOV     R20, R24
   \   0000063C   E050               LDI     R21, 0
   \   0000063E   0F44               LSL     R20
   \   00000640   1F55               ROL     R21
   \   00000642   0F44               LSL     R20
   \   00000644   1F55               ROL     R21
   \   00000646   01FA               MOVW    R31:R30, R21:R20
   \   00000648   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000064A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000064C   8F02               STD     Z+26, R16
   \   0000064E   8F13               STD     Z+27, R17
   \   00000650   8F24               STD     Z+28, R18
   \   00000652   8F35               STD     Z+29, R19
    118                  } 
   \   00000654   9583               INC     R24
   \   00000656   CF18               RJMP    ??AD7715_30
   \   00000658                      REQUIRE _A_PORTE
    119              }
    120          }
    121          
    122          /*************************************************************************
    123          *
    124          *  Set ports on or off
    125          *
    126          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    127          void SetAnaPort(void) {
   \                     SetAnaPort:
    128          
    129              PORTC = (TData.Ana.PortUsed & 0xff) ;         // Set power on ports 0-7
   \   00000000   9100....           LDS     R16, TData
   \   00000004   9110....           LDS     R17, (TData + 1)
   \   00000008   B908               OUT     0x08, R16
    130              ClrBit(PORTB, 0xe1);                            // Set power on ports 8-11 off
   \   0000000A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??SetAnaPort_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??SetAnaPort_0:
   \   0000001C   94F8               CLI
   \   0000001E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000022   9503               INC     R16
   \   00000024   9300....           STS     (OS_Counters + 1), R16
   \   00000028   B105               IN      R16, 0x05
   \   0000002A   710E               ANDI    R16, 0x1E
   \   0000002C   B905               OUT     0x05, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   7F00               ANDI    R16, 0xF0
   \   00000034   2300               TST     R16
   \   00000036   F021               BREQ    ??SetAnaPort_1
   \   00000038   E909               LDI     R16, 153
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    OS_Error
   \                     ??SetAnaPort_1:
   \   00000040   9100....           LDS     R16, (OS_Counters + 1)
   \   00000044   950A               DEC     R16
   \   00000046   9300....           STS     (OS_Counters + 1), R16
   \   0000004A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004E   2300               TST     R16
   \   00000050   F409               BRNE    ??SetAnaPort_2
   \   00000052   9478               SEI
    131              SetBit(PORTB, TData.Ana.PortUsed>>8 & 0x01);    // Set power on port 8
   \                     ??SetAnaPort_2:
   \   00000054   9100....           LDS     R16, (OS_Counters + 1)
   \   00000058   7F00               ANDI    R16, 0xF0
   \   0000005A   2300               TST     R16
   \   0000005C   F021               BREQ    ??SetAnaPort_3
   \   0000005E   E909               LDI     R16, 153
   \   00000060   E010               LDI     R17, 0
   \   00000062   ........           CALL    OS_Error
   \                     ??SetAnaPort_3:
   \   00000066   94F8               CLI
   \   00000068   9100....           LDS     R16, (OS_Counters + 1)
   \   0000006C   9503               INC     R16
   \   0000006E   9300....           STS     (OS_Counters + 1), R16
   \   00000072   ....               LDI     R30, LOW(TData)
   \   00000074   ....               LDI     R31, (TData) >> 8
   \   00000076   8101               LDD     R16, Z+1
   \   00000078   7001               ANDI    R16, 0x01
   \   0000007A   7001               ANDI    R16, 0x01
   \   0000007C   B115               IN      R17, 0x05
   \   0000007E   2B10               OR      R17, R16
   \   00000080   B915               OUT     0x05, R17
   \   00000082   9100....           LDS     R16, (OS_Counters + 1)
   \   00000086   7F00               ANDI    R16, 0xF0
   \   00000088   2300               TST     R16
   \   0000008A   F021               BREQ    ??SetAnaPort_4
   \   0000008C   E909               LDI     R16, 153
   \   0000008E   E010               LDI     R17, 0
   \   00000090   ........           CALL    OS_Error
   \                     ??SetAnaPort_4:
   \   00000094   9100....           LDS     R16, (OS_Counters + 1)
   \   00000098   950A               DEC     R16
   \   0000009A   9300....           STS     (OS_Counters + 1), R16
   \   0000009E   9100....           LDS     R16, (OS_Counters + 1)
   \   000000A2   2300               TST     R16
   \   000000A4   F409               BRNE    ??SetAnaPort_5
   \   000000A6   9478               SEI
    132              SetBit(PORTB, TData.Ana.PortUsed>>4 & 0xe0);      // Set power on ports 9-11
   \                     ??SetAnaPort_5:
   \   000000A8   9100....           LDS     R16, (OS_Counters + 1)
   \   000000AC   7F00               ANDI    R16, 0xF0
   \   000000AE   2300               TST     R16
   \   000000B0   F021               BREQ    ??SetAnaPort_6
   \   000000B2   E909               LDI     R16, 153
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   ........           CALL    OS_Error
   \                     ??SetAnaPort_6:
   \   000000BA   94F8               CLI
   \   000000BC   9100....           LDS     R16, (OS_Counters + 1)
   \   000000C0   9503               INC     R16
   \   000000C2   9300....           STS     (OS_Counters + 1), R16
   \   000000C6   E044               LDI     R20, 4
   \   000000C8   9100....           LDS     R16, TData
   \   000000CC   9110....           LDS     R17, (TData + 1)
   \   000000D0   ........           CALL    ?US_SHR_L02
   \   000000D4   7E00               ANDI    R16, 0xE0
   \   000000D6   B115               IN      R17, 0x05
   \   000000D8   2B10               OR      R17, R16
   \   000000DA   B915               OUT     0x05, R17
   \   000000DC   9100....           LDS     R16, (OS_Counters + 1)
   \   000000E0   7F00               ANDI    R16, 0xF0
   \   000000E2   2300               TST     R16
   \   000000E4   F021               BREQ    ??SetAnaPort_7
   \   000000E6   E909               LDI     R16, 153
   \   000000E8   E010               LDI     R17, 0
   \   000000EA   ........           CALL    OS_Error
   \                     ??SetAnaPort_7:
   \   000000EE   9100....           LDS     R16, (OS_Counters + 1)
   \   000000F2   950A               DEC     R16
   \   000000F4   9300....           STS     (OS_Counters + 1), R16
   \   000000F8   9100....           LDS     R16, (OS_Counters + 1)
   \   000000FC   2300               TST     R16
   \   000000FE   F409               BRNE    ??SetAnaPort_8
   \   00000100   9478               SEI
    133          
    134          }
   \                     ??SetAnaPort_8:
   \   00000102   9508               RET
   \   00000104                      REQUIRE _A_PORTC
   \   00000104                      REQUIRE _A_PORTB
    135          
    136          /*************************************************************************
    137          *
    138          *  Read from AD-converter
    139          *
    140          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    141          char ReadAdByte(void) {
   \                     ReadAdByte:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    142          
    143              char i, readbyte;
    144          
    145              for (i = 0; i <  8; i++) {
   \   00000004   E080               LDI     R24, 0
   \                     ??ReadAdByte_0:
   \   00000006   3088               CPI     R24, 8
   \   00000008   F008               BRCS    $+2+2
   \   0000000A   C050               RJMP    ??ReadAdByte_1
    146                  readbyte <<= 1 ;                    // shift to next bit 
   \   0000000C   0F99               LSL     R25
    147                  ClrBit(PORTD, ADCLK) ;
   \   0000000E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000012   7F00               ANDI    R16, 0xF0
   \   00000014   2300               TST     R16
   \   00000016   F021               BREQ    ??ReadAdByte_2
   \   00000018   E909               LDI     R16, 153
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ........           CALL    OS_Error
   \                     ??ReadAdByte_2:
   \   00000020   94F8               CLI
   \   00000022   9100....           LDS     R16, (OS_Counters + 1)
   \   00000026   9503               INC     R16
   \   00000028   9300....           STS     (OS_Counters + 1), R16
   \   0000002C   9859               CBI     0x0B, 0x01
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   7F00               ANDI    R16, 0xF0
   \   00000034   2300               TST     R16
   \   00000036   F021               BREQ    ??ReadAdByte_3
   \   00000038   E909               LDI     R16, 153
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    OS_Error
   \                     ??ReadAdByte_3:
   \   00000040   9100....           LDS     R16, (OS_Counters + 1)
   \   00000044   950A               DEC     R16
   \   00000046   9300....           STS     (OS_Counters + 1), R16
   \   0000004A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004E   2300               TST     R16
   \   00000050   F409               BRNE    ??ReadAdByte_4
   \   00000052   9478               SEI
    148                  SetBit(PORTD, ADCLK) ;                  // set clock line high 
   \                     ??ReadAdByte_4:
   \   00000054   9100....           LDS     R16, (OS_Counters + 1)
   \   00000058   7F00               ANDI    R16, 0xF0
   \   0000005A   2300               TST     R16
   \   0000005C   F021               BREQ    ??ReadAdByte_5
   \   0000005E   E909               LDI     R16, 153
   \   00000060   E010               LDI     R17, 0
   \   00000062   ........           CALL    OS_Error
   \                     ??ReadAdByte_5:
   \   00000066   94F8               CLI
   \   00000068   9100....           LDS     R16, (OS_Counters + 1)
   \   0000006C   9503               INC     R16
   \   0000006E   9300....           STS     (OS_Counters + 1), R16
   \   00000072   9A59               SBI     0x0B, 0x01
   \   00000074   9100....           LDS     R16, (OS_Counters + 1)
   \   00000078   7F00               ANDI    R16, 0xF0
   \   0000007A   2300               TST     R16
   \   0000007C   F021               BREQ    ??ReadAdByte_6
   \   0000007E   E909               LDI     R16, 153
   \   00000080   E010               LDI     R17, 0
   \   00000082   ........           CALL    OS_Error
   \                     ??ReadAdByte_6:
   \   00000086   9100....           LDS     R16, (OS_Counters + 1)
   \   0000008A   950A               DEC     R16
   \   0000008C   9300....           STS     (OS_Counters + 1), R16
   \   00000090   9100....           LDS     R16, (OS_Counters + 1)
   \   00000094   2300               TST     R16
   \   00000096   F409               BRNE    ??ReadAdByte_7
   \   00000098   9478               SEI
    149                  if (PING & ADDO) {                  // data  = 1?
   \                     ??ReadAdByte_7:
   \   0000009A   9B93               SBIS    0x12, 0x03
   \   0000009C   C003               RJMP    ??ReadAdByte_8
    150                      readbyte |= 0x01 ;                    // set bit high 
   \   0000009E   6091               ORI     R25, 0x01
   \   000000A0   E001               LDI     R16, 1
   \   000000A2   C002               RJMP    ??ReadAdByte_9
    151                  } else {
    152                      readbyte &= ~0x01 ;                   // set bit low 
   \                     ??ReadAdByte_8:
   \   000000A4   7F9E               ANDI    R25, 0xFE
   \   000000A6   E000               LDI     R16, 0
    153                  }
    154              }
   \                     ??ReadAdByte_9:
   \   000000A8   9583               INC     R24
   \   000000AA   CFAD               RJMP    ??ReadAdByte_0
    155              return readbyte ;
   \                     ??ReadAdByte_1:
   \   000000AC   2F09               MOV     R16, R25
   \   000000AE   9189               LD      R24, Y+
   \   000000B0   9199               LD      R25, Y+
   \   000000B2   9508               RET
   \   000000B4                      REQUIRE _A_PORTD
   \   000000B4                      REQUIRE _A_PING
    156          }
    157          
    158          /*************************************************************************
    159          *
    160          *  Write to AD-converter
    161          *
    162          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    163          void WriteAdByte(char data) {
   \                     WriteAdByte:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F90               MOV     R25, R16
    164          
    165              char i;
    166          
    167              for (i = 0; i <  8; i++) {
   \   00000006   E080               LDI     R24, 0
   \                     ??WriteAdByte_0:
   \   00000008   3088               CPI     R24, 8
   \   0000000A   F008               BRCS    $+2+2
   \   0000000C   C092               RJMP    ??WriteAdByte_1
    168                  ClrBit(PORTD, ADCLK) ;                  // set clock line low
   \   0000000E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000012   7F00               ANDI    R16, 0xF0
   \   00000014   2300               TST     R16
   \   00000016   F021               BREQ    ??WriteAdByte_2
   \   00000018   E909               LDI     R16, 153
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ........           CALL    OS_Error
   \                     ??WriteAdByte_2:
   \   00000020   94F8               CLI
   \   00000022   9100....           LDS     R16, (OS_Counters + 1)
   \   00000026   9503               INC     R16
   \   00000028   9300....           STS     (OS_Counters + 1), R16
   \   0000002C   9859               CBI     0x0B, 0x01
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   7F00               ANDI    R16, 0xF0
   \   00000034   2300               TST     R16
   \   00000036   F021               BREQ    ??WriteAdByte_3
   \   00000038   E909               LDI     R16, 153
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    OS_Error
   \                     ??WriteAdByte_3:
   \   00000040   9100....           LDS     R16, (OS_Counters + 1)
   \   00000044   950A               DEC     R16
   \   00000046   9300....           STS     (OS_Counters + 1), R16
   \   0000004A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004E   2300               TST     R16
   \   00000050   F409               BRNE    ??WriteAdByte_4
   \   00000052   9478               SEI
    169                  if (data & 0x80) {                  // data bit = 1? 
   \                     ??WriteAdByte_4:
   \   00000054   FB97               BST     R25, 7
   \   00000056   F526               BRTC    ??WriteAdByte_5
    170                      SetBit(PORTG,ADDI) ;                  // set data high 
   \   00000058   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005C   7F00               ANDI    R16, 0xF0
   \   0000005E   2300               TST     R16
   \   00000060   F021               BREQ    ??WriteAdByte_6
   \   00000062   E909               LDI     R16, 153
   \   00000064   E010               LDI     R17, 0
   \   00000066   ........           CALL    OS_Error
   \                     ??WriteAdByte_6:
   \   0000006A   94F8               CLI
   \   0000006C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000070   9503               INC     R16
   \   00000072   9300....           STS     (OS_Counters + 1), R16
   \   00000076   9AA4               SBI     0x14, 0x04
   \   00000078   9100....           LDS     R16, (OS_Counters + 1)
   \   0000007C   7F00               ANDI    R16, 0xF0
   \   0000007E   2300               TST     R16
   \   00000080   F021               BREQ    ??WriteAdByte_7
   \   00000082   E909               LDI     R16, 153
   \   00000084   E010               LDI     R17, 0
   \   00000086   ........           CALL    OS_Error
   \                     ??WriteAdByte_7:
   \   0000008A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000008E   950A               DEC     R16
   \   00000090   9300....           STS     (OS_Counters + 1), R16
   \   00000094   9100....           LDS     R16, (OS_Counters + 1)
   \   00000098   2300               TST     R16
   \   0000009A   F529               BRNE    ??WriteAdByte_8
   \   0000009C   9478               SEI
   \   0000009E   C023               RJMP    ??WriteAdByte_8
    171                  } else {
    172                      ClrBit(PORTG, ADDI) ;                 // set data low 
   \                     ??WriteAdByte_5:
   \   000000A0   9100....           LDS     R16, (OS_Counters + 1)
   \   000000A4   7F00               ANDI    R16, 0xF0
   \   000000A6   2300               TST     R16
   \   000000A8   F021               BREQ    ??WriteAdByte_9
   \   000000AA   E909               LDI     R16, 153
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   ........           CALL    OS_Error
   \                     ??WriteAdByte_9:
   \   000000B2   94F8               CLI
   \   000000B4   9100....           LDS     R16, (OS_Counters + 1)
   \   000000B8   9503               INC     R16
   \   000000BA   9300....           STS     (OS_Counters + 1), R16
   \   000000BE   98A4               CBI     0x14, 0x04
   \   000000C0   9100....           LDS     R16, (OS_Counters + 1)
   \   000000C4   7F00               ANDI    R16, 0xF0
   \   000000C6   2300               TST     R16
   \   000000C8   F021               BREQ    ??WriteAdByte_10
   \   000000CA   E909               LDI     R16, 153
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   ........           CALL    OS_Error
   \                     ??WriteAdByte_10:
   \   000000D2   9100....           LDS     R16, (OS_Counters + 1)
   \   000000D6   950A               DEC     R16
   \   000000D8   9300....           STS     (OS_Counters + 1), R16
   \   000000DC   9100....           LDS     R16, (OS_Counters + 1)
   \   000000E0   2300               TST     R16
   \   000000E2   F409               BRNE    ??WriteAdByte_8
   \   000000E4   9478               SEI
    173                  }
    174                  data <<= 1 ;                        // shift to next bit 
   \                     ??WriteAdByte_8:
   \   000000E6   0F99               LSL     R25
    175                  SetBit(PORTD, ADCLK) ;                  // set clock line high 
   \   000000E8   9100....           LDS     R16, (OS_Counters + 1)
   \   000000EC   7F00               ANDI    R16, 0xF0
   \   000000EE   2300               TST     R16
   \   000000F0   F021               BREQ    ??WriteAdByte_11
   \   000000F2   E909               LDI     R16, 153
   \   000000F4   E010               LDI     R17, 0
   \   000000F6   ........           CALL    OS_Error
   \                     ??WriteAdByte_11:
   \   000000FA   94F8               CLI
   \   000000FC   9100....           LDS     R16, (OS_Counters + 1)
   \   00000100   9503               INC     R16
   \   00000102   9300....           STS     (OS_Counters + 1), R16
   \   00000106   9A59               SBI     0x0B, 0x01
   \   00000108   9100....           LDS     R16, (OS_Counters + 1)
   \   0000010C   7F00               ANDI    R16, 0xF0
   \   0000010E   2300               TST     R16
   \   00000110   F021               BREQ    ??WriteAdByte_12
   \   00000112   E909               LDI     R16, 153
   \   00000114   E010               LDI     R17, 0
   \   00000116   ........           CALL    OS_Error
   \                     ??WriteAdByte_12:
   \   0000011A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000011E   950A               DEC     R16
   \   00000120   9300....           STS     (OS_Counters + 1), R16
   \   00000124   9100....           LDS     R16, (OS_Counters + 1)
   \   00000128   2300               TST     R16
   \   0000012A   F409               BRNE    ??WriteAdByte_13
   \   0000012C   9478               SEI
    176              }           
   \                     ??WriteAdByte_13:
   \   0000012E   9583               INC     R24
   \   00000130   CF6B               RJMP    ??WriteAdByte_0
    177          }       
   \                     ??WriteAdByte_1:
   \   00000132   9189               LD      R24, Y+
   \   00000134   9199               LD      R25, Y+
   \   00000136   9508               RET
   \   00000138                      REQUIRE _A_PORTD
   \   00000138                      REQUIRE _A_PORTG
    178          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     12      2   AD7715
       12      2   -> IsFloat
       12      2   -> OS_ClearEvents
       12      2   -> OS_Delay
       12      2   -> OS_Error
       12      2   -> OS_WaitEventTimed
       12      2   -> ReadAdByte
       12      2   -> ReadEEPROMBuffer
       12      2   -> ReadEEPROMByte
       12      2   -> SetRS4Port
       12      2   -> WriteAdByte
       12      2 ?F_ADD_L04
       12      2 ?F_CMP_GE_L04
       12      2 ?F_CMP_LT_L04
       12      2 ?F_DIV_L04
       12      2 ?F_MUL_L04
       12      2 ?F_SUB_L04
       12      2 ?S_EC_MUL_L02
       12      2 ?UL2F_L04
      2      2   ReadAdByte
        2      2   -> OS_Error
      0      2   SetAnaPort
        0      2   -> OS_Error
        0      2 ?US_SHR_L02
      2      2   WriteAdByte
        2      2   -> OS_Error


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
    1624  AD7715
     180  ReadAdByte
     260  SetAnaPort
     312  WriteAdByte
       1  _A_PING
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTG

 
     6 bytes in segment ABSOLUTE
 2 376 bytes in segment CODE
 
 2 376 bytes of CODE memory
     0 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
