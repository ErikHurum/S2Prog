###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            08/Feb/2017  15:43:32
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1281\Src\Misc.c
#    Command line =  
#        "D:\S2Prog\IO\ANZB – ATmega1281\Src\Misc.c" --cpu=m1280 -ms -o
#        "D:\S2Prog\IO\ANZB – ATmega1281\Debug\Obj" -D OS_LIBMODE_D -D
#        OS_UART=-1 -lCN "D:\S2Prog\IO\ANZB – ATmega1281\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB – ATmega1281\INC\"
#        -I "D:\S2Prog\IO\ANZB – ATmega1281\..\..\SHARED\INC\" --eeprom_size
#        4096 --clib -On
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1281\Debug\List\Misc.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1281\Debug\Obj\Misc.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1281\Src\Misc.c
      1          /****************************************************************************************
      2          /  Misc. routines
      3          /
      4          ***************************************************************************************/
      5          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*************************************************************************
     14          *   (This is a task)
     15          *  Watchdog handler
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void WatchDogHandler(void) {
   \                     WatchDogHandler:
     19          
     20              OS_Delay(100);                         // wait 1 seconds for other tasks to start and set TaskStatus
   \   00000000   E604               LDI     R16, 100
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    OS_Delay
     21              asm("WDR");                             // kick the dog!!
   \   00000008   95A8               WDR
     22              WDTCSR = 0x1f;
   \   0000000A   E10F               LDI     R16, 31
   \   0000000C   9300....           STS     _A_WDTCSR, R16
     23              WDTCSR = 0x0f;
   \   00000010   E00F               LDI     R16, 15
   \   00000012   9300....           STS     _A_WDTCSR, R16
     24              asm("WDR");                             // kick the dog!!
   \   00000016   95A8               WDR
     25              while (1) {
     26                  OS_Delay(500);
   \                     ??WatchDogHandler_0:
   \   00000018   EF04               LDI     R16, 244
   \   0000001A   E011               LDI     R17, 1
   \   0000001C   ........           CALL    OS_Delay
     27                  __watchdog_reset();               //kick the dog
   \   00000020   95A8               WDR
   \   00000022   CFFA               RJMP    ??WatchDogHandler_0
   \   00000024                      REQUIRE _A_WDTCSR
     28              }
     29          }
     30          
     31          
     32          /*************************************************************************
     33          *
     34          *  Get my address
     35          *
     36          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     37          char MyAddress(void) {
   \                     MyAddress:
     38          
     39          #if (OS_UART == 0)
     40              return 0;                   // Debug only
     41          #else
     42              return(~(PIND>>4) & 0x0f) ;
   \   00000000   B109               IN      R16, 0x09
   \   00000002   9502               SWAP    R16
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   9500               COM     R16
   \   00000008   700F               ANDI    R16, 0x0F
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_PIND
     43          #endif
     44          }
     45          
     46          /*************************************************************************
     47          *
     48          *  Check for legal float
     49          *
     50          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     51          char IsFloat(float A){
   \                     IsFloat:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01A8               MOVW    R21:R20, R17:R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
     52            long exp;
     53          	// A NAN has an exponent of 255 (shifted left 23 positions) and
     54          	// Denormalized has an exponent set to 0
     55          	exp = *(long*)&A & 0x7F800000L;
   \   00000008   018A               MOVW    R17:R16, R21:R20
   \   0000000A   019B               MOVW    R19:R18, R23:R22
   \   0000000C   7000               ANDI    R16, 0x00
   \   0000000E   7010               ANDI    R17, 0x00
   \   00000010   7820               ANDI    R18, 0x80
   \   00000012   773F               ANDI    R19, 0x7F
   \   00000014   01C8               MOVW    R25:R24, R17:R16
   \   00000016   01D9               MOVW    R27:R26, R19:R18
     56          	//int mantissa = *(int*)&A & 0x007FFFFF;
     57          	if ( exp && (exp != 0x7F800000L)  ) {
   \   00000018   2F08               MOV     R16, R24
   \   0000001A   2B09               OR      R16, R25
   \   0000001C   2B0A               OR      R16, R26
   \   0000001E   2B0B               OR      R16, R27
   \   00000020   F051               BREQ    ??IsFloat_0
   \   00000022   3080               CPI     R24, 0
   \   00000024   E000               LDI     R16, 0
   \   00000026   0790               CPC     R25, R16
   \   00000028   E800               LDI     R16, 128
   \   0000002A   07A0               CPC     R26, R16
   \   0000002C   E70F               LDI     R16, 127
   \   0000002E   07B0               CPC     R27, R16
   \   00000030   F011               BREQ    ??IsFloat_0
     58          		return(true);
   \   00000032   E001               LDI     R16, 1
   \   00000034   C001               RJMP    ??IsFloat_1
     59            }
     60          	return(false);
   \                     ??IsFloat_0:
   \   00000036   E000               LDI     R16, 0
   \                     ??IsFloat_1:
   \   00000038   E0E4               LDI     R30, 4
   \   0000003A   ........           JMP     ?EPILOGUE_B4_L09
     61          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   IsFloat
      0      2   MyAddress
      0      2   WatchDogHandler
        0      2   -> OS_Delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      62  IsFloat
      12  MyAddress
      36  WatchDogHandler
       1  _A_PIND
       1  _A_WDTCSR

 
   2 bytes in segment ABSOLUTE
 110 bytes in segment CODE
 
 110 bytes of CODE memory
   0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
