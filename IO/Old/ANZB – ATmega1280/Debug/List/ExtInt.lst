###############################################################################
#
# IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR           30/Jul/2018  09:24:40
# Copyright 1996-2018 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1280\Src\ExtInt.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW56A1.tmp ("D:\S2Prog\IO\ANZB –
#        ATmega1280\Src\ExtInt.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\ANZB –
#        ATmega1280\Debug\Obj" -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\ANZB – ATmega1280\Debug\List" -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB –
#        ATmega1280\INC\" -I "D:\S2Prog\IO\ANZB – ATmega1280\..\..\SHARED\INC\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1280\Debug\List\ExtInt.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1280\Debug\Obj\ExtInt.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1280\Src\ExtInt.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1280.h"
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          
     11          /*************************************************************************
     12          *
     13          *  External int 0 (UART PC16554 on AN-ZB485 or ADready on AN-ZBANA)
     14          *
     15          *************************************************************************/
     16          #pragma vector=INT0_vect

   \                                 In  segment CODE, align 2, keep-with-next
     17          __interrupt void IntHandler_INT0( void ){               //Int handler for ext int 0
   \                     IntHandler_INT0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     18          
     19              // OBS!!!
     20              // Uses UART16552[].TxStatus as intreason and
     21              // UART16552[].TxSeqCnt as counter because these needs to be globale 
     22              // by using OS_EnterIntStack()
     23          
     24              
     25              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
     26              OS_EnterIntStack();
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   2300               TST     R16
   \   00000050   F021               BREQ    ??IntHandler_INT0_0
   \   00000052   E909               LDI     R16, 153
   \   00000054   E010               LDI     R17, 0
   \   00000056   ........           CALL    OS_Error
   \                     ??IntHandler_INT0_0:
   \   0000005A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005E   2300               TST     R16
   \   00000060   F409               BRNE    ??IntHandler_INT0_1
   \   00000062   9478               SEI
     27          
     28              switch (UnitID) {
   \                     ??IntHandler_INT0_1:
   \   00000064   9100....           LDS     R16, UnitID
   \   00000068   5000               SUBI    R16, 0
   \   0000006A   F021               BREQ    ??IntHandler_INT0_2
   \   0000006C   950A               DEC     R16
   \   0000006E   F409               BRNE    $+2+2
   \   00000070   C0D9               RJMP    ??IntHandler_INT0_3
   \   00000072   C0DD               RJMP    ??IntHandler_INT0_4
     29              case 0x00:                  // AN-ZB485  
     30                    UART16552[0].TxStatus = (U0_IIR & 0x0f);          // reason for interrupt
   \                     ??IntHandler_INT0_2:
   \   00000074   9100220A           LDS     R16, 8714
   \   00000078   700F               ANDI    R16, 0x0F
   \   0000007A   9300....           STS     (UART16552 + 8), R16
     31                  do {
     32                      switch (UART16552[0].TxStatus) {
   \                     ??IntHandler_INT0_5:
   \   0000007E   9100....           LDS     R16, (UART16552 + 8)
   \   00000082   5000               SUBI    R16, 0
   \   00000084   F409               BRNE    $+2+2
   \   00000086   C0C1               RJMP    ??IntHandler_INT0_6
   \   00000088   5002               SUBI    R16, 2
   \   0000008A   F051               BREQ    ??IntHandler_INT0_7
   \   0000008C   5002               SUBI    R16, 2
   \   0000008E   F409               BRNE    $+2+2
   \   00000090   C048               RJMP    ??IntHandler_INT0_8
   \   00000092   5002               SUBI    R16, 2
   \   00000094   F409               BRNE    $+2+2
   \   00000096   C0B6               RJMP    ??IntHandler_INT0_9
   \   00000098   5006               SUBI    R16, 6
   \   0000009A   F409               BRNE    $+2+2
   \   0000009C   C042               RJMP    ??IntHandler_INT0_8
   \   0000009E   C0B7               RJMP    ??IntHandler_INT0_10
     33                      case 0x02 :             // transmit holding reg emty
     34                          if (UART16552[0].TxCount == 0) {
   \                     ??IntHandler_INT0_7:
   \   000000A0   9100....           LDS     R16, (UART16552 + 6)
   \   000000A4   9110....           LDS     R17, (UART16552 + 7)
   \   000000A8   2B01               OR      R16, R17
   \   000000AA   F451               BRNE    ??IntHandler_INT0_11
     35                              U0_MCR &= ~RTS;        // set RTS off
   \   000000AC   E0EC               LDI     R30, LOW(8716)
   \   000000AE   E2F2               LDI     R31, (8716) >> 8
   \   000000B0   8100               LD      R16, Z
   \   000000B2   7F0D               ANDI    R16, 0xFD
   \   000000B4   8300               ST      Z, R16
     36                              OS_StopTimer(&TimerUART0);                    // and stop timer
   \   000000B6   ....               LDI     R16, LOW(TimerUART0)
   \   000000B8   ....               LDI     R17, (TimerUART0) >> 8
   \   000000BA   ........           CALL    OS_StopTimer
   \   000000BE   C0A7               RJMP    ??IntHandler_INT0_10
     37                          } else {
     38                              for (UART16552[0].TxSeqCnt = 0;( UART16552[0].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[0].TxCount > 0 ); UART16552[0].TxSeqCnt++, --UART16552[0].TxCount) {
   \                     ??IntHandler_INT0_11:
   \   000000C0   E000               LDI     R16, 0
   \   000000C2   9300....           STS     (UART16552 + 9), R16
   \                     ??IntHandler_INT0_12:
   \   000000C6   9100....           LDS     R16, (UART16552 + 9)
   \   000000CA   3100               CPI     R16, 16
   \   000000CC   F548               BRCC    ??IntHandler_INT0_13
   \   000000CE   9100....           LDS     R16, (UART16552 + 6)
   \   000000D2   9110....           LDS     R17, (UART16552 + 7)
   \   000000D6   2B01               OR      R16, R17
   \   000000D8   F119               BREQ    ??IntHandler_INT0_13
     39                                  U0_THR = UART16552[0].pTxBuffer[UART16552[0].TxLast++];
   \   000000DA   9100....           LDS     R16, (UART16552 + 4)
   \   000000DE   9110....           LDS     R17, (UART16552 + 5)
   \   000000E2   91E0....           LDS     R30, UART16552
   \   000000E6   91F0....           LDS     R31, (UART16552 + 1)
   \   000000EA   0FE0               ADD     R30, R16
   \   000000EC   1FF1               ADC     R31, R17
   \   000000EE   8100               LD      R16, Z
   \   000000F0   93002208           STS     8712, R16
   \   000000F4   ....               LDI     R30, LOW(UART16552)
   \   000000F6   ....               LDI     R31, (UART16552) >> 8
   \   000000F8   8104               LDD     R16, Z+4
   \   000000FA   8115               LDD     R17, Z+5
   \   000000FC   5F0F               SUBI    R16, 255
   \   000000FE   4F1F               SBCI    R17, 255
   \   00000100   8304               STD     Z+4, R16
   \   00000102   8315               STD     Z+5, R17
     40                              }
   \   00000104   9100....           LDS     R16, (UART16552 + 9)
   \   00000108   9503               INC     R16
   \   0000010A   9300....           STS     (UART16552 + 9), R16
   \   0000010E   ....               LDI     R30, LOW(UART16552)
   \   00000110   ....               LDI     R31, (UART16552) >> 8
   \   00000112   8106               LDD     R16, Z+6
   \   00000114   8117               LDD     R17, Z+7
   \   00000116   5001               SUBI    R16, 1
   \   00000118   4010               SBCI    R17, 0
   \   0000011A   8306               STD     Z+6, R16
   \   0000011C   8317               STD     Z+7, R17
   \   0000011E   CFD3               RJMP    ??IntHandler_INT0_12
     41                          }
     42                          break;
   \                     ??IntHandler_INT0_13:
   \   00000120   C076               RJMP    ??IntHandler_INT0_10
     43                      case 0x04 :             // Receive data available    
     44                      case 0x0C :             // or caracter timeout (FIFO)
     45                          while (U0_LSR & DATA_READY) {
   \                     ??IntHandler_INT0_8:
   \   00000122   E0ED               LDI     R30, LOW(8717)
   \   00000124   E2F2               LDI     R31, (8717) >> 8
   \   00000126   8100               LD      R16, Z
   \   00000128   FF00               SBRS    R16, 0
   \   0000012A   C071               RJMP    ??IntHandler_INT0_10
     46          
     47                              UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] = U0_RBR;             // Read the character 
   \   0000012C   91002208           LDS     R16, 8712
   \   00000130   91E0....           LDS     R30, (UART16552 + 10)
   \   00000134   91F0....           LDS     R31, (UART16552 + 11)
   \   00000138   9120....           LDS     R18, (UART16552 + 12)
   \   0000013C   9130....           LDS     R19, (UART16552 + 13)
   \   00000140   0FE2               ADD     R30, R18
   \   00000142   1FF3               ADC     R31, R19
   \   00000144   8300               ST      Z, R16
     48          
     49                              if (UART16552[0].RxState != HANDLE) {                 // ok to receive? 
   \   00000146   9100....           LDS     R16, (UART16552 + 18)
   \   0000014A   300A               CPI     R16, 10
   \   0000014C   F351               BREQ    ??IntHandler_INT0_8
     50                                  switch (UART16552[0].RxState) {                   // Yes, check state
   \   0000014E   9100....           LDS     R16, (UART16552 + 18)
   \   00000152   2300               TST     R16
   \   00000154   F5F9               BRNE    ??IntHandler_INT0_14
     51                                  case SYNC :
     52                                      if ( UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] == ANPRO1_SYN) {
   \   00000156   91E0....           LDS     R30, (UART16552 + 10)
   \   0000015A   91F0....           LDS     R31, (UART16552 + 11)
   \   0000015E   9100....           LDS     R16, (UART16552 + 12)
   \   00000162   9110....           LDS     R17, (UART16552 + 13)
   \   00000166   0FE0               ADD     R30, R16
   \   00000168   1FF1               ADC     R31, R17
   \   0000016A   8100               LD      R16, Z
   \   0000016C   3002               CPI     R16, 2
   \   0000016E   F461               BRNE    ??IntHandler_INT0_15
     53                                          UART16552[0].SyncCnt ++ ;                 // count sync
   \   00000170   9100....           LDS     R16, (UART16552 + 19)
   \   00000174   9503               INC     R16
   \   00000176   9300....           STS     (UART16552 + 19), R16
     54                                          UART16552[0].RxFirst = 0;                 // start at start of buff
   \   0000017A   E000               LDI     R16, 0
   \   0000017C   9300....           STS     (UART16552 + 12), R16
   \   00000180   E000               LDI     R16, 0
   \   00000182   9300....           STS     (UART16552 + 13), R16
   \   00000186   CFCD               RJMP    ??IntHandler_INT0_8
     55                                      } else if (UART16552[0].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??IntHandler_INT0_15:
   \   00000188   9100....           LDS     R16, (UART16552 + 19)
   \   0000018C   3002               CPI     R16, 2
   \   0000018E   F0F0               BRCS    ??IntHandler_INT0_16
     56                                          UART16552[0].SyncCnt = 0 ;                // reset counter
   \   00000190   E000               LDI     R16, 0
   \   00000192   9300....           STS     (UART16552 + 19), R16
     57                                          UART16552[0].RxState = HEADER ;
   \   00000196   E001               LDI     R16, 1
   \   00000198   9300....           STS     (UART16552 + 18), R16
     58                                          UART16552[0].RxLast = 0 ;
   \   0000019C   E000               LDI     R16, 0
   \   0000019E   9300....           STS     (UART16552 + 14), R16
   \   000001A2   E000               LDI     R16, 0
   \   000001A4   9300....           STS     (UART16552 + 15), R16
     59                                          UART16552[0].RxTimeout = RX_TO_TIME ;   // reset timeout
   \   000001A8   EF0A               LDI     R16, 250
   \   000001AA   9300....           STS     (UART16552 + 20), R16
   \   000001AE   E000               LDI     R16, 0
   \   000001B0   9300....           STS     (UART16552 + 21), R16
     60                                          UART16552[0].RxFirst++ ;                 //  1. char OK, start on next
   \   000001B4   ....               LDI     R30, LOW(UART16552)
   \   000001B6   ....               LDI     R31, (UART16552) >> 8
   \   000001B8   8504               LDD     R16, Z+12
   \   000001BA   8515               LDD     R17, Z+13
   \   000001BC   5F0F               SUBI    R16, 255
   \   000001BE   4F1F               SBCI    R17, 255
   \   000001C0   8704               STD     Z+12, R16
   \   000001C2   8715               STD     Z+13, R17
     61                                          ReceivePacketUart16552(0) ;              // Check package
   \   000001C4   E000               LDI     R16, 0
   \   000001C6   ........           CALL    ReceivePacketUart16552
   \   000001CA   CFAB               RJMP    ??IntHandler_INT0_8
     62                                      } else {
     63                                          UART16552[0].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_INT0_16:
   \   000001CC   E000               LDI     R16, 0
   \   000001CE   9300....           STS     (UART16552 + 19), R16
     64                                      }
     65                                      break;
   \   000001D2   CFA7               RJMP    ??IntHandler_INT0_8
     66                                  default :
     67                                      if ((++UART16552[0].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??IntHandler_INT0_14:
   \   000001D4   ....               LDI     R30, LOW(UART16552)
   \   000001D6   ....               LDI     R31, (UART16552) >> 8
   \   000001D8   8504               LDD     R16, Z+12
   \   000001DA   8515               LDD     R17, Z+13
   \   000001DC   5F0F               SUBI    R16, 255
   \   000001DE   4F1F               SBCI    R17, 255
   \   000001E0   8704               STD     Z+12, R16
   \   000001E2   8715               STD     Z+13, R17
   \   000001E4   9100....           LDS     R16, (UART16552 + 12)
   \   000001E8   9110....           LDS     R17, (UART16552 + 13)
   \   000001EC   3709               CPI     R16, 121
   \   000001EE   E020               LDI     R18, 0
   \   000001F0   0712               CPC     R17, R18
   \   000001F2   F020               BRCS    ??IntHandler_INT0_17
     68                                          GoToSyncUART16552(0) ;                       // go to sync mode
   \   000001F4   E000               LDI     R16, 0
   \   000001F6   ........           CALL    GoToSyncUART16552
   \   000001FA   CF93               RJMP    ??IntHandler_INT0_8
     69                                      } else {
     70                                          ReceivePacketUart16552(0) ;              // Check package
   \                     ??IntHandler_INT0_17:
   \   000001FC   E000               LDI     R16, 0
   \   000001FE   ........           CALL    ReceivePacketUart16552
     71                                      }
     72                                      break ;   
   \   00000202   CF8F               RJMP    ??IntHandler_INT0_8
     73                                  }
     74                              }
     75                          } 
     76                          break;
     77                      case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
     78                          U0_LSR;      // Dummy read to empty register        
   \                     ??IntHandler_INT0_9:
   \   00000204   9100220D           LDS     R16, 8717
     79                          break;
   \   00000208   C002               RJMP    ??IntHandler_INT0_10
     80                      case 0x00 :                 // Modem status.
     81                          U0_MSR;      // Dummy read to empty register           
   \                     ??IntHandler_INT0_6:
   \   0000020A   9100220E           LDS     R16, 8718
     82                          break;
     83                      }
     84                      UART16552[0].TxStatus = (U0_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??IntHandler_INT0_10:
   \   0000020E   9100220A           LDS     R16, 8714
   \   00000212   700F               ANDI    R16, 0x0F
   \   00000214   9300....           STS     (UART16552 + 8), R16
     85                                                                                // check again before exit to avoid lost int. and hang
     86                  } while ((UART16552[0].TxStatus & 0x01) != 0x01) ;  
   \   00000218   ....               LDI     R30, LOW(UART16552)
   \   0000021A   ....               LDI     R31, (UART16552) >> 8
   \   0000021C   8500               LDD     R16, Z+8
   \   0000021E   FF00               SBRS    R16, 0
   \   00000220   CF2E               RJMP    ??IntHandler_INT0_5
     87                  break;
   \   00000222   C005               RJMP    ??IntHandler_INT0_4
     88              case 0x01:                  // AN-ZBANA ADready
     89                  OS_SignalEvent(1, &TCB_AD7715);
   \                     ??IntHandler_INT0_3:
   \   00000224   ....               LDI     R18, LOW(TCB_AD7715)
   \   00000226   ....               LDI     R19, (TCB_AD7715) >> 8
   \   00000228   E001               LDI     R16, 1
   \   0000022A   ........           CALL    OS_SignalEvent
     90                  break;
     91              }
     92              OS_LeaveIntStack();
   \                     ??IntHandler_INT0_4:
   \   0000022E   94F8               CLI
   \   00000230   ........           CALL    OS__LeaveIntStack
     93              OS_LeaveInterruptNoSwitch();
   \   00000234   9100....           LDS     R16, OS_InInt
   \   00000238   2F10               MOV     R17, R16
   \   0000023A   951A               DEC     R17
   \   0000023C   9310....           STS     OS_InInt, R17
   \   00000240   2300               TST     R16
   \   00000242   F421               BRNE    ??IntHandler_INT0_18
   \   00000244   E908               LDI     R16, 152
   \   00000246   E010               LDI     R17, 0
   \   00000248   ........           CALL    OS_Error
   \                     ??IntHandler_INT0_18:
   \   0000024C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000250   950A               DEC     R16
   \   00000252   9300....           STS     (OS_Counters + 1), R16
   \   00000256   9100....           LDS     R16, OS_Counters
   \   0000025A   950A               DEC     R16
   \   0000025C   9300....           STS     OS_Counters, R16
     94          
     95          }
   \   00000260   BF9B               OUT     0x3B, R25
   \   00000262   BF8F               OUT     0x3F, R24
   \   00000264   9109               LD      R16, Y+
   \   00000266   9119               LD      R17, Y+
   \   00000268   9129               LD      R18, Y+
   \   0000026A   9139               LD      R19, Y+
   \   0000026C   9149               LD      R20, Y+
   \   0000026E   9159               LD      R21, Y+
   \   00000270   9169               LD      R22, Y+
   \   00000272   9179               LD      R23, Y+
   \   00000274   9009               LD      R0, Y+
   \   00000276   9019               LD      R1, Y+
   \   00000278   9029               LD      R2, Y+
   \   0000027A   9039               LD      R3, Y+
   \   0000027C   91E9               LD      R30, Y+
   \   0000027E   91F9               LD      R31, Y+
   \   00000280   9189               LD      R24, Y+
   \   00000282   9199               LD      R25, Y+
   \   00000284   9518               RETI
     96          
     97          
     98          /*************************************************************************
     99          *
    100          *  External int 1 (UART PC16554 on AN-ZB485)
    101          *
    102          *************************************************************************/
    103          #pragma vector=INT1_vect

   \                                 In  segment CODE, align 2, keep-with-next
    104          __interrupt void IntHandler_INT1( void ){               //Int handler for Ext int 1
   \                     IntHandler_INT1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    105          
    106              // OBS!!!
    107              // Uses UART16552[].TxStatus as intreason and
    108              // UART16552[].TxSeqCnt as counter because these needs to be globale 
    109              // by using OS_EnterIntStack()
    110              
    111            
    112              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
    113              OS_EnterIntStack();
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   2300               TST     R16
   \   00000050   F021               BREQ    ??IntHandler_INT1_0
   \   00000052   E909               LDI     R16, 153
   \   00000054   E010               LDI     R17, 0
   \   00000056   ........           CALL    OS_Error
   \                     ??IntHandler_INT1_0:
   \   0000005A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005E   2300               TST     R16
   \   00000060   F409               BRNE    ??IntHandler_INT1_1
   \   00000062   9478               SEI
    114          
    115              switch (UnitID) {
   \                     ??IntHandler_INT1_1:
   \   00000064   9100....           LDS     R16, UnitID
   \   00000068   5000               SUBI    R16, 0
   \   0000006A   F021               BREQ    ??IntHandler_INT1_2
   \   0000006C   950A               DEC     R16
   \   0000006E   F409               BRNE    $+2+2
   \   00000070   C0D8               RJMP    ??IntHandler_INT1_3
   \   00000072   C0D7               RJMP    ??IntHandler_INT1_3
    116              case 0x00:               // AN-ZB485 
    117                  UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt
   \                     ??IntHandler_INT1_2:
   \   00000074   91002202           LDS     R16, 8706
   \   00000078   700F               ANDI    R16, 0x0F
   \   0000007A   9300....           STS     (UART16552 + 34), R16
    118                  do {
    119                      switch (UART16552[1].TxStatus) {
   \                     ??IntHandler_INT1_4:
   \   0000007E   9100....           LDS     R16, (UART16552 + 34)
   \   00000082   5000               SUBI    R16, 0
   \   00000084   F409               BRNE    $+2+2
   \   00000086   C0C1               RJMP    ??IntHandler_INT1_5
   \   00000088   5002               SUBI    R16, 2
   \   0000008A   F051               BREQ    ??IntHandler_INT1_6
   \   0000008C   5002               SUBI    R16, 2
   \   0000008E   F409               BRNE    $+2+2
   \   00000090   C048               RJMP    ??IntHandler_INT1_7
   \   00000092   5002               SUBI    R16, 2
   \   00000094   F409               BRNE    $+2+2
   \   00000096   C0B6               RJMP    ??IntHandler_INT1_8
   \   00000098   5006               SUBI    R16, 6
   \   0000009A   F409               BRNE    $+2+2
   \   0000009C   C042               RJMP    ??IntHandler_INT1_7
   \   0000009E   C0B7               RJMP    ??IntHandler_INT1_9
    120                      case 0x02 :             // transmit holding reg emty
    121                          if (UART16552[1].TxCount == 0) {
   \                     ??IntHandler_INT1_6:
   \   000000A0   9100....           LDS     R16, (UART16552 + 32)
   \   000000A4   9110....           LDS     R17, (UART16552 + 33)
   \   000000A8   2B01               OR      R16, R17
   \   000000AA   F451               BRNE    ??IntHandler_INT1_10
    122                              U1_MCR &= ~RTS;        // set RTS off
   \   000000AC   E0E4               LDI     R30, LOW(8708)
   \   000000AE   E2F2               LDI     R31, (8708) >> 8
   \   000000B0   8100               LD      R16, Z
   \   000000B2   7F0D               ANDI    R16, 0xFD
   \   000000B4   8300               ST      Z, R16
    123                              OS_StopTimer(&TimerUART1);                    // and stop timer
   \   000000B6   ....               LDI     R16, LOW(TimerUART1)
   \   000000B8   ....               LDI     R17, (TimerUART1) >> 8
   \   000000BA   ........           CALL    OS_StopTimer
   \   000000BE   C0A7               RJMP    ??IntHandler_INT1_9
    124                          } else {
    125                              for (UART16552[1].TxSeqCnt = 0;( UART16552[1].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[1].TxCount > 0 ); UART16552[1].TxSeqCnt++, UART16552[1].TxCount--) {
   \                     ??IntHandler_INT1_10:
   \   000000C0   E000               LDI     R16, 0
   \   000000C2   9300....           STS     (UART16552 + 35), R16
   \                     ??IntHandler_INT1_11:
   \   000000C6   9100....           LDS     R16, (UART16552 + 35)
   \   000000CA   3100               CPI     R16, 16
   \   000000CC   F548               BRCC    ??IntHandler_INT1_12
   \   000000CE   9100....           LDS     R16, (UART16552 + 32)
   \   000000D2   9110....           LDS     R17, (UART16552 + 33)
   \   000000D6   2B01               OR      R16, R17
   \   000000D8   F119               BREQ    ??IntHandler_INT1_12
    126                                 U1_THR = UART16552[1].pTxBuffer[UART16552[1].TxLast++] ;
   \   000000DA   91E0....           LDS     R30, (UART16552 + 26)
   \   000000DE   91F0....           LDS     R31, (UART16552 + 27)
   \   000000E2   9100....           LDS     R16, (UART16552 + 30)
   \   000000E6   9110....           LDS     R17, (UART16552 + 31)
   \   000000EA   0FE0               ADD     R30, R16
   \   000000EC   1FF1               ADC     R31, R17
   \   000000EE   8100               LD      R16, Z
   \   000000F0   93002200           STS     8704, R16
   \   000000F4   ....               LDI     R30, LOW(UART16552)
   \   000000F6   ....               LDI     R31, (UART16552) >> 8
   \   000000F8   8D06               LDD     R16, Z+30
   \   000000FA   8D17               LDD     R17, Z+31
   \   000000FC   5F0F               SUBI    R16, 255
   \   000000FE   4F1F               SBCI    R17, 255
   \   00000100   8F06               STD     Z+30, R16
   \   00000102   8F17               STD     Z+31, R17
    127                              }
   \   00000104   9100....           LDS     R16, (UART16552 + 35)
   \   00000108   9503               INC     R16
   \   0000010A   9300....           STS     (UART16552 + 35), R16
   \   0000010E   ....               LDI     R30, LOW(UART16552)
   \   00000110   ....               LDI     R31, (UART16552) >> 8
   \   00000112   A100               LDD     R16, Z+32
   \   00000114   A111               LDD     R17, Z+33
   \   00000116   5001               SUBI    R16, 1
   \   00000118   4010               SBCI    R17, 0
   \   0000011A   A300               STD     Z+32, R16
   \   0000011C   A311               STD     Z+33, R17
   \   0000011E   CFD3               RJMP    ??IntHandler_INT1_11
    128                          }
    129                          break;
   \                     ??IntHandler_INT1_12:
   \   00000120   C076               RJMP    ??IntHandler_INT1_9
    130                      case 0x04 :             // Receive data available    
    131                      case 0x0C :             // or caracter timeout (FIFO)
    132                          while (U1_LSR & DATA_READY) {
   \                     ??IntHandler_INT1_7:
   \   00000122   E0E5               LDI     R30, LOW(8709)
   \   00000124   E2F2               LDI     R31, (8709) >> 8
   \   00000126   8100               LD      R16, Z
   \   00000128   FF00               SBRS    R16, 0
   \   0000012A   C071               RJMP    ??IntHandler_INT1_9
    133          
    134                              UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] = U1_RBR;          // Read the character 
   \   0000012C   91002200           LDS     R16, 8704
   \   00000130   91E0....           LDS     R30, (UART16552 + 36)
   \   00000134   91F0....           LDS     R31, (UART16552 + 37)
   \   00000138   9120....           LDS     R18, (UART16552 + 38)
   \   0000013C   9130....           LDS     R19, (UART16552 + 39)
   \   00000140   0FE2               ADD     R30, R18
   \   00000142   1FF3               ADC     R31, R19
   \   00000144   8300               ST      Z, R16
    135          
    136                              if (UART16552[1].RxState != HANDLE) {        // ok to receive? 
   \   00000146   9100....           LDS     R16, (UART16552 + 44)
   \   0000014A   300A               CPI     R16, 10
   \   0000014C   F351               BREQ    ??IntHandler_INT1_7
    137                                  switch (UART16552[1].RxState) {                   // Yes, check state
   \   0000014E   9100....           LDS     R16, (UART16552 + 44)
   \   00000152   2300               TST     R16
   \   00000154   F5F9               BRNE    ??IntHandler_INT1_13
    138                                  case SYNC :
    139                                      if ( UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] == ANPRO1_SYN) {
   \   00000156   91E0....           LDS     R30, (UART16552 + 36)
   \   0000015A   91F0....           LDS     R31, (UART16552 + 37)
   \   0000015E   9100....           LDS     R16, (UART16552 + 38)
   \   00000162   9110....           LDS     R17, (UART16552 + 39)
   \   00000166   0FE0               ADD     R30, R16
   \   00000168   1FF1               ADC     R31, R17
   \   0000016A   8100               LD      R16, Z
   \   0000016C   3002               CPI     R16, 2
   \   0000016E   F461               BRNE    ??IntHandler_INT1_14
    140                                          UART16552[1].SyncCnt ++ ;                 // count sync
   \   00000170   9100....           LDS     R16, (UART16552 + 45)
   \   00000174   9503               INC     R16
   \   00000176   9300....           STS     (UART16552 + 45), R16
    141                                          UART16552[1].RxFirst = 0;                 // start at start of buff
   \   0000017A   E000               LDI     R16, 0
   \   0000017C   9300....           STS     (UART16552 + 38), R16
   \   00000180   E000               LDI     R16, 0
   \   00000182   9300....           STS     (UART16552 + 39), R16
   \   00000186   CFCD               RJMP    ??IntHandler_INT1_7
    142                                      } else if (UART16552[1].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??IntHandler_INT1_14:
   \   00000188   9100....           LDS     R16, (UART16552 + 45)
   \   0000018C   3002               CPI     R16, 2
   \   0000018E   F0F0               BRCS    ??IntHandler_INT1_15
    143                                          UART16552[1].SyncCnt = 0 ;                // reset counter
   \   00000190   E000               LDI     R16, 0
   \   00000192   9300....           STS     (UART16552 + 45), R16
    144                                          UART16552[1].RxState = HEADER ;
   \   00000196   E001               LDI     R16, 1
   \   00000198   9300....           STS     (UART16552 + 44), R16
    145                                          UART16552[1].RxLast = 0 ;
   \   0000019C   E000               LDI     R16, 0
   \   0000019E   9300....           STS     (UART16552 + 40), R16
   \   000001A2   E000               LDI     R16, 0
   \   000001A4   9300....           STS     (UART16552 + 41), R16
    146                                          UART16552[1].RxTimeout = RX_TO_TIME ;     // reset timeout
   \   000001A8   EF0A               LDI     R16, 250
   \   000001AA   9300....           STS     (UART16552 + 46), R16
   \   000001AE   E000               LDI     R16, 0
   \   000001B0   9300....           STS     (UART16552 + 47), R16
    147                                          UART16552[1].RxFirst++ ;                  //  1. char OK, start on next
   \   000001B4   ....               LDI     R30, LOW(UART16552)
   \   000001B6   ....               LDI     R31, (UART16552) >> 8
   \   000001B8   A106               LDD     R16, Z+38
   \   000001BA   A117               LDD     R17, Z+39
   \   000001BC   5F0F               SUBI    R16, 255
   \   000001BE   4F1F               SBCI    R17, 255
   \   000001C0   A306               STD     Z+38, R16
   \   000001C2   A317               STD     Z+39, R17
    148                                          ReceivePacketUart16552(1) ;               // Check package
   \   000001C4   E001               LDI     R16, 1
   \   000001C6   ........           CALL    ReceivePacketUart16552
   \   000001CA   CFAB               RJMP    ??IntHandler_INT1_7
    149                                      } else {
    150                                          UART16552[1].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_INT1_15:
   \   000001CC   E000               LDI     R16, 0
   \   000001CE   9300....           STS     (UART16552 + 45), R16
    151                                      }
    152                                      break;
   \   000001D2   CFA7               RJMP    ??IntHandler_INT1_7
    153                                  default :
    154                                      if ((++UART16552[1].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??IntHandler_INT1_13:
   \   000001D4   ....               LDI     R30, LOW(UART16552)
   \   000001D6   ....               LDI     R31, (UART16552) >> 8
   \   000001D8   A106               LDD     R16, Z+38
   \   000001DA   A117               LDD     R17, Z+39
   \   000001DC   5F0F               SUBI    R16, 255
   \   000001DE   4F1F               SBCI    R17, 255
   \   000001E0   A306               STD     Z+38, R16
   \   000001E2   A317               STD     Z+39, R17
   \   000001E4   9100....           LDS     R16, (UART16552 + 38)
   \   000001E8   9110....           LDS     R17, (UART16552 + 39)
   \   000001EC   3709               CPI     R16, 121
   \   000001EE   E020               LDI     R18, 0
   \   000001F0   0712               CPC     R17, R18
   \   000001F2   F020               BRCS    ??IntHandler_INT1_16
    155                                          GoToSyncUART16552(1) ;                       // go to sync mode
   \   000001F4   E001               LDI     R16, 1
   \   000001F6   ........           CALL    GoToSyncUART16552
   \   000001FA   CF93               RJMP    ??IntHandler_INT1_7
    156                                      } else {
    157                                          ReceivePacketUart16552(1) ;              // Check package
   \                     ??IntHandler_INT1_16:
   \   000001FC   E001               LDI     R16, 1
   \   000001FE   ........           CALL    ReceivePacketUart16552
    158                                      }
    159                                      break ;   
   \   00000202   CF8F               RJMP    ??IntHandler_INT1_7
    160                                  }
    161                              }
    162                          }
    163                          break;
    164                      case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    165                          U1_LSR;      // Dummy read to empty register        
   \                     ??IntHandler_INT1_8:
   \   00000204   91002205           LDS     R16, 8709
    166                          break;
   \   00000208   C002               RJMP    ??IntHandler_INT1_9
    167                      case 0x00 :                 // Modem status.
    168                          U1_MSR;      // Dummy read to empty register           
   \                     ??IntHandler_INT1_5:
   \   0000020A   91002206           LDS     R16, 8710
    169                          break;
    170                      }
    171                      UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??IntHandler_INT1_9:
   \   0000020E   91002202           LDS     R16, 8706
   \   00000212   700F               ANDI    R16, 0x0F
   \   00000214   9300....           STS     (UART16552 + 34), R16
    172                                                                                // check again before exit to avoid lost int. and hang
    173                 } while ((UART16552[1].TxStatus & 0x01) != 0x01);  
   \   00000218   ....               LDI     R30, LOW(UART16552)
   \   0000021A   ....               LDI     R31, (UART16552) >> 8
   \   0000021C   A102               LDD     R16, Z+34
   \   0000021E   FF00               SBRS    R16, 0
   \   00000220   CF2E               RJMP    ??IntHandler_INT1_4
    174                  break;
    175              case 0x01:                  // AN-ZBANA Not connected!
    176                  break;
    177              }
    178              OS_LeaveIntStack();
   \                     ??IntHandler_INT1_3:
   \   00000222   94F8               CLI
   \   00000224   ........           CALL    OS__LeaveIntStack
    179              OS_LeaveInterruptNoSwitch();
   \   00000228   9100....           LDS     R16, OS_InInt
   \   0000022C   2F10               MOV     R17, R16
   \   0000022E   951A               DEC     R17
   \   00000230   9310....           STS     OS_InInt, R17
   \   00000234   2300               TST     R16
   \   00000236   F421               BRNE    ??IntHandler_INT1_17
   \   00000238   E908               LDI     R16, 152
   \   0000023A   E010               LDI     R17, 0
   \   0000023C   ........           CALL    OS_Error
   \                     ??IntHandler_INT1_17:
   \   00000240   9100....           LDS     R16, (OS_Counters + 1)
   \   00000244   950A               DEC     R16
   \   00000246   9300....           STS     (OS_Counters + 1), R16
   \   0000024A   9100....           LDS     R16, OS_Counters
   \   0000024E   950A               DEC     R16
   \   00000250   9300....           STS     OS_Counters, R16
    180          }
   \   00000254   BF9B               OUT     0x3B, R25
   \   00000256   BF8F               OUT     0x3F, R24
   \   00000258   9109               LD      R16, Y+
   \   0000025A   9119               LD      R17, Y+
   \   0000025C   9129               LD      R18, Y+
   \   0000025E   9139               LD      R19, Y+
   \   00000260   9149               LD      R20, Y+
   \   00000262   9159               LD      R21, Y+
   \   00000264   9169               LD      R22, Y+
   \   00000266   9179               LD      R23, Y+
   \   00000268   9009               LD      R0, Y+
   \   0000026A   9019               LD      R1, Y+
   \   0000026C   9029               LD      R2, Y+
   \   0000026E   9039               LD      R3, Y+
   \   00000270   91E9               LD      R30, Y+
   \   00000272   91F9               LD      R31, Y+
   \   00000274   9189               LD      R24, Y+
   \   00000276   9199               LD      R25, Y+
   \   00000278   9518               RETI

   \                                 In  segment INTVEC, offset 0x4, root
   \                     `??IntHandler_INT0::??INTVEC 4`:
   \   00000004   ........           JMP     IntHandler_INT0

   \                                 In  segment INTVEC, offset 0x8, root
   \                     `??IntHandler_INT1::??INTVEC 8`:
   \   00000008   ........           JMP     IntHandler_INT1

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_INT0
       16      2   -> GoToSyncUART16552
       16      2   -> OS_Error
       16      2   -> OS_SignalEvent
       16      2   -> OS_StopTimer
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> ReceivePacketUart16552
     16      2   IntHandler_INT1
       16      2   -> GoToSyncUART16552
       16      2   -> OS_Error
       16      2   -> OS_StopTimer
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> ReceivePacketUart16552


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     646  IntHandler_INT0
       4  IntHandler_INT0::??INTVEC 4
     634  IntHandler_INT1
       4  IntHandler_INT1::??INTVEC 8

 
 1 280 bytes in segment CODE
     8 bytes in segment INTVEC
 
 1 280 bytes of CODE memory (+ 8 bytes shared)

Errors: none
Warnings: none
