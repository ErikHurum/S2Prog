###############################################################################
#
# IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR           30/Jul/2018  09:24:41
# Copyright 1996-2018 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1280\Src\UsartPro.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW5968.tmp ("D:\S2Prog\IO\ANZB –
#        ATmega1280\Src\UsartPro.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\ANZB –
#        ATmega1280\Debug\Obj" -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\ANZB – ATmega1280\Debug\List" -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB –
#        ATmega1280\INC\" -I "D:\S2Prog\IO\ANZB – ATmega1280\..\..\SHARED\INC\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1280\Debug\List\UsartPro.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1280\Debug\Obj\UsartPro.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1280\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "string.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          /*************************************************************************
     14          *   (This is a timer calback)
     15          *  Timout timer USART 0
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void TimoutUSART0(void) {
   \                     TimoutUSART0:
     19          
     20              UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C1           STS     193, R16
     21              ClrBit(PORTE, 0x04) ;                              // TXE0 off
   \   0000000A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??TimoutUSART0_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??TimoutUSART0_0:
   \   0000001C   94F8               CLI
   \   0000001E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000022   9503               INC     R16
   \   00000024   9300....           STS     (OS_Counters + 1), R16
   \   00000028   9872               CBI     0x0E, 0x02
   \   0000002A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000002E   7F00               ANDI    R16, 0xF0
   \   00000030   2300               TST     R16
   \   00000032   F021               BREQ    ??TimoutUSART0_1
   \   00000034   E909               LDI     R16, 153
   \   00000036   E010               LDI     R17, 0
   \   00000038   ........           CALL    OS_Error
   \                     ??TimoutUSART0_1:
   \   0000003C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000040   950A               DEC     R16
   \   00000042   9300....           STS     (OS_Counters + 1), R16
   \   00000046   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004A   2300               TST     R16
   \   0000004C   F409               BRNE    ??TimoutUSART0_2
   \   0000004E   9478               SEI
     22              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \                     ??TimoutUSART0_2:
   \   00000050   ....               LDI     R16, LOW(TimerUSART0)
   \   00000052   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000054   ........           CALL    OS_StopTimer
     23              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000058   E000               LDI     R16, 0
   \   0000005A   ....               RCALL   GoToSyncUART
     24          }
   \   0000005C   9508               RET
   \   0000005E                      REQUIRE _A_UCSR0B
   \   0000005E                      REQUIRE _A_PORTE
     25          
     26          /*************************************************************************
     27          *   (This is a timer calback)
     28          *  Timer USART 0 on before TX
     29          *
     30          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     31          void TimoutUSART0On(void) {
   \                     TimoutUSART0On:
     32          
     33              UCSR0B |= __BIT_MASK( UDRIE0) ;                     // start sending by enableing interrupt
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C1           STS     193, R16
     34              OS_StopTimer(&TimerUSART0On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000000C   ....               LDI     R17, (TimerUSART0On) >> 8
   \   0000000E   ........           CALL    OS_StopTimer
     35          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_UCSR0B
     36          
     37          /*************************************************************************
     38          *   (This is a timer calback)
     39          *  Timout timer USART 1
     40          *
     41          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     42          void TimoutUSART1(void) {
   \                     TimoutUSART1:
     43          
     44              UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C9           STS     201, R16
     45              ClrBit(PORTE, 0x08) ;                              // TXE1 off
   \   0000000A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000E   7F00               ANDI    R16, 0xF0
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??TimoutUSART1_0
   \   00000014   E909               LDI     R16, 153
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    OS_Error
   \                     ??TimoutUSART1_0:
   \   0000001C   94F8               CLI
   \   0000001E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000022   9503               INC     R16
   \   00000024   9300....           STS     (OS_Counters + 1), R16
   \   00000028   9873               CBI     0x0E, 0x03
   \   0000002A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000002E   7F00               ANDI    R16, 0xF0
   \   00000030   2300               TST     R16
   \   00000032   F021               BREQ    ??TimoutUSART1_1
   \   00000034   E909               LDI     R16, 153
   \   00000036   E010               LDI     R17, 0
   \   00000038   ........           CALL    OS_Error
   \                     ??TimoutUSART1_1:
   \   0000003C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000040   950A               DEC     R16
   \   00000042   9300....           STS     (OS_Counters + 1), R16
   \   00000046   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004A   2300               TST     R16
   \   0000004C   F409               BRNE    ??TimoutUSART1_2
   \   0000004E   9478               SEI
     46              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \                     ??TimoutUSART1_2:
   \   00000050   ....               LDI     R16, LOW(TimerUSART1)
   \   00000052   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000054   ........           CALL    OS_StopTimer
     47              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000058   E001               LDI     R16, 1
   \   0000005A   ....               RCALL   GoToSyncUART
     48          }
   \   0000005C   9508               RET
   \   0000005E                      REQUIRE _A_UCSR1B
   \   0000005E                      REQUIRE _A_PORTE
     49          
     50          
     51          /*************************************************************************
     52          *   (This is a timer calback)
     53          *  Timer USART 1 on before TX
     54          *
     55          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     56          void TimoutUSART1On(void) {
   \                     TimoutUSART1On:
     57          
     58              UCSR1B |= __BIT_MASK( UDRIE1) ;                     // start sending by enableing interrupt
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C9           STS     201, R16
     59              OS_StopTimer(&TimerUSART1On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000000C   ....               LDI     R17, (TimerUSART1On) >> 8
   \   0000000E   ........           CALL    OS_StopTimer
     60          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_UCSR1B
     61          
     62          
     63          /*************************************************************************
     64          *   (This is a task)
     65          *  Usart0 handler
     66          *
     67          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     68          void Usart0Handler(void) {
   \                     Usart0Handler:
   \   00000000   938A               ST      -Y, R24
     69              char stat;
     70          
     71              while (1) {
     72                  stat = OS_WaitEventTimed(1,500);
   \                     ??Usart0Handler_0:
   \   00000002   EF24               LDI     R18, 244
   \   00000004   E031               LDI     R19, 1
   \   00000006   E001               LDI     R16, 1
   \   00000008   ........           CALL    OS_WaitEventTimed
   \   0000000C   2F80               MOV     R24, R16
     73                  if (stat) {
   \   0000000E   2388               TST     R24
   \   00000010   F3C1               BREQ    ??Usart0Handler_0
     74                      OS_Use(&UARTSEND);
   \   00000012   ....               LDI     R16, LOW(UARTSEND)
   \   00000014   ....               LDI     R17, (UARTSEND) >> 8
   \   00000016   ........           CALL    OS_Use
     75                      UsartCheckPackage(0) ;
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   ....               RCALL   UsartCheckPackage
     76                      OS_Unuse(&UARTSEND);
   \   0000001E   ....               LDI     R16, LOW(UARTSEND)
   \   00000020   ....               LDI     R17, (UARTSEND) >> 8
   \   00000022   ........           CALL    OS_Unuse
   \   00000026   CFED               RJMP    ??Usart0Handler_0
     77                  }
     78              }
     79          }
     80          
     81          /*************************************************************************
     82          *   (This is a task)
     83          *  Usart1 handler
     84          *
     85          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     86          void Usart1Handler(void) {
   \                     Usart1Handler:
   \   00000000   938A               ST      -Y, R24
     87              char stat;
     88          
     89              while (1) {
     90                  stat = OS_WaitEventTimed(1,500);
   \                     ??Usart1Handler_0:
   \   00000002   EF24               LDI     R18, 244
   \   00000004   E031               LDI     R19, 1
   \   00000006   E001               LDI     R16, 1
   \   00000008   ........           CALL    OS_WaitEventTimed
   \   0000000C   2F80               MOV     R24, R16
     91                  if (stat) {
   \   0000000E   2388               TST     R24
   \   00000010   F3C1               BREQ    ??Usart1Handler_0
     92                      OS_Use(&UARTSEND);
   \   00000012   ....               LDI     R16, LOW(UARTSEND)
   \   00000014   ....               LDI     R17, (UARTSEND) >> 8
   \   00000016   ........           CALL    OS_Use
     93                      UsartCheckPackage(1) ;
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   ....               RCALL   UsartCheckPackage
     94                      OS_Unuse(&UARTSEND);
   \   0000001E   ....               LDI     R16, LOW(UARTSEND)
   \   00000020   ....               LDI     R17, (UARTSEND) >> 8
   \   00000022   ........           CALL    OS_Unuse
   \   00000026   CFED               RJMP    ??Usart1Handler_0
     95                  }
     96              }
     97          }
     98          
     99          /*************************************************************************
    100          *
    101          *  Check the incoming packages
    102          *
    103          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    104          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
    105          
    106              unsigned short pointer;
    107              char    retval ;
    108          
    109              UART[ch].RxSendReply = false ;                              // flag for answering set to fault
   \   00000006   2F0A               MOV     R16, R26
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   E000               LDI     R16, 0
   \   0000001A   8F01               STD     Z+25, R16
    110              UART[ch].TxFirst = 11 ;                                     // Start pos for first TX command
   \   0000001C   2F0A               MOV     R16, R26
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E14A               LDI     R20, 26
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   E00B               LDI     R16, 11
   \   00000030   E010               LDI     R17, 0
   \   00000032   8302               STD     Z+2, R16
   \   00000034   8313               STD     Z+3, R17
    111              pointer = 7 ;
   \   00000036   E087               LDI     R24, 7
   \   00000038   E090               LDI     R25, 0
    112              do {
    113                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   0000003A   019C               MOVW    R19:R18, R25:R24
   \   0000003C   2F0A               MOV     R16, R26
   \   0000003E   ....               RCALL   CheckActionUart
   \   00000040   2FB0               MOV     R27, R16
    114                  pointer = pointer + UART[ch].pRxBuffer[pointer+2]
    115                            + (UART[ch].pRxBuffer[pointer+3]*256) + 4;      // Point to a command cmd hb/lb
   \   00000042   2F0A               MOV     R16, R26
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14A               LDI     R20, 26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000054   8502               LDD     R16, Z+10
   \   00000056   8513               LDD     R17, Z+11
   \   00000058   0F08               ADD     R16, R24
   \   0000005A   1F19               ADC     R17, R25
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   8122               LDD     R18, Z+2
   \   00000060   E030               LDI     R19, 0
   \   00000062   2F0A               MOV     R16, R26
   \   00000064   E010               LDI     R17, 0
   \   00000066   E14A               LDI     R20, 26
   \   00000068   E050               LDI     R21, 0
   \   0000006A   ........           CALL    ?S_EC_MUL_L02
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000072   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000074   8502               LDD     R16, Z+10
   \   00000076   8513               LDD     R17, Z+11
   \   00000078   0F08               ADD     R16, R24
   \   0000007A   1F19               ADC     R17, R25
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   8103               LDD     R16, Z+3
   \   00000080   E010               LDI     R17, 0
   \   00000082   2F10               MOV     R17, R16
   \   00000084   E000               LDI     R16, 0
   \   00000086   0F20               ADD     R18, R16
   \   00000088   1F31               ADC     R19, R17
   \   0000008A   5F2C               SUBI    R18, 252
   \   0000008C   4F3F               SBCI    R19, 255
   \   0000008E   0F82               ADD     R24, R18
   \   00000090   1F93               ADC     R25, R19
    116              } while (retval && (pointer < (UART[ch].RxPacklen - 4 )));
   \   00000092   23BB               TST     R27
   \   00000094   F081               BREQ    ??UsartCheckPackage_1
   \   00000096   2F0A               MOV     R16, R26
   \   00000098   E010               LDI     R17, 0
   \   0000009A   E14A               LDI     R20, 26
   \   0000009C   E050               LDI     R21, 0
   \   0000009E   ........           CALL    ?S_EC_MUL_L02
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A8   8906               LDD     R16, Z+22
   \   000000AA   8917               LDD     R17, Z+23
   \   000000AC   5004               SUBI    R16, 4
   \   000000AE   4010               SBCI    R17, 0
   \   000000B0   1780               CP      R24, R16
   \   000000B2   0791               CPC     R25, R17
   \   000000B4   F210               BRCS    ??UsartCheckPackage_0
    117              if (UART[ch].RxSendReply) {                                   //send answer?
   \                     ??UsartCheckPackage_1:
   \   000000B6   2F0A               MOV     R16, R26
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   E14A               LDI     R20, 26
   \   000000BC   E050               LDI     R21, 0
   \   000000BE   ........           CALL    ?S_EC_MUL_L02
   \   000000C2   01F8               MOVW    R31:R30, R17:R16
   \   000000C4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C8   8D01               LDD     R16, Z+25
   \   000000CA   2300               TST     R16
   \   000000CC   F021               BREQ    ??UsartCheckPackage_2
    118                  Uart_BuildTail(ch);                                       // yes, build tail (and header) and start sending
   \   000000CE   2F0A               MOV     R16, R26
   \   000000D0   ........           CALL    Uart_BuildTail
   \   000000D4   C003               RJMP    ??UsartCheckPackage_3
    119              } else {
    120                  GoToSyncUART(ch) ;                                        // go to sync modus here if not reply
   \                     ??UsartCheckPackage_2:
   \   000000D6   2F0A               MOV     R16, R26
   \   000000D8   ........           CALL    GoToSyncUART
    121              }
    122          }
   \                     ??UsartCheckPackage_3:
   \   000000DC   E0E4               LDI     R30, 4
   \   000000DE   ........           JMP     ?EPILOGUE_B4_L09
    123          
    124          
    125          /*************************************************************************
    126          *
    127          *  Check action on received data
    128          *
    129          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    130          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    131          
    132              unsigned short   command;
    133              char    retval = true;
   \   00000008   E0B1               LDI     R27, 1
    134          
    135              command = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer+1] << 8);
   \   0000000A   2F0A               MOV     R16, R26
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8502               LDD     R16, Z+10
   \   0000001E   8513               LDD     R17, Z+11
   \   00000020   0F08               ADD     R16, R24
   \   00000022   1F19               ADC     R17, R25
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8120               LD      R18, Z
   \   00000028   2F0A               MOV     R16, R26
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   E14A               LDI     R20, 26
   \   0000002E   E050               LDI     R21, 0
   \   00000030   ........           CALL    ?S_EC_MUL_L02
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000038   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000003A   8502               LDD     R16, Z+10
   \   0000003C   8513               LDD     R17, Z+11
   \   0000003E   0F08               ADD     R16, R24
   \   00000040   1F19               ADC     R17, R25
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   8131               LDD     R19, Z+1
   \   00000046   0129               MOVW    R5:R4, R19:R18
    136              switch (command) {                                  // check action EHSMark
   \   00000048   0182               MOVW    R17:R16, R5:R4
   \   0000004A   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   0000004C   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   0000004E   BFFB               OUT     0x3B, R31
   \   00000050   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000052   ........           JMP     ?SV_SWITCH_L06
    137              case CMD_REQ_STATUS :                           // Regusest status for target
    138                  BuildStatusData(ch) ;                         // make package
   \                     ??CheckActionUart_0:
   \   00000056   2F0A               MOV     R16, R26
   \   00000058   ....               RCALL   BuildStatusData
    139                  break;
   \   0000005A   C0DF               RJMP    ??CheckActionUart_1
    140          
    141              case CMD_GET_STACKSTATUS :                        // Request stck status
    142                  BuildStackStatus(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_2:
   \   0000005C   019C               MOVW    R19:R18, R25:R24
   \   0000005E   5F2C               SUBI    R18, 252
   \   00000060   4F3F               SBCI    R19, 255
   \   00000062   2F0A               MOV     R16, R26
   \   00000064   ....               RCALL   BuildStackStatus
    143                  break ;
   \   00000066   C0D9               RJMP    ??CheckActionUart_1
    144          
    145              case CMD_EEPROM_RESET :                        // Reset EEPROM??
    146                  GetResetEEPROM(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_3:
   \   00000068   019C               MOVW    R19:R18, R25:R24
   \   0000006A   5F2C               SUBI    R18, 252
   \   0000006C   4F3F               SBCI    R19, 255
   \   0000006E   2F0A               MOV     R16, R26
   \   00000070   ....               RCALL   GetResetEEPROM
    147                  break ;
   \   00000072   C0D3               RJMP    ??CheckActionUart_1
    148          
    149              case CMD_GOTO_BOOTLOADER :                        // Goto bootlaoder??
    150                  GetGotoBootloader(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_4:
   \   00000074   019C               MOVW    R19:R18, R25:R24
   \   00000076   5F2C               SUBI    R18, 252
   \   00000078   4F3F               SBCI    R19, 255
   \   0000007A   2F0A               MOV     R16, R26
   \   0000007C   ....               RCALL   GetGotoBootloader
    151                  break ;
   \   0000007E   C0CD               RJMP    ??CheckActionUart_1
    152          
    153              case CMD_SND_EEPROM_DATA :                              // Receive EEPROM data
    154                  GetEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_5:
   \   00000080   019C               MOVW    R19:R18, R25:R24
   \   00000082   5F2C               SUBI    R18, 252
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   2F0A               MOV     R16, R26
   \   00000088   ....               RCALL   GetEEPROMData
    155                  break ;
   \   0000008A   C0C7               RJMP    ??CheckActionUart_1
    156          
    157              case CMD_REQ_EEPROM_DATA :                              // Request to send EEPROM data
    158                  BuildEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_6:
   \   0000008C   019C               MOVW    R19:R18, R25:R24
   \   0000008E   5F2C               SUBI    R18, 252
   \   00000090   4F3F               SBCI    R19, 255
   \   00000092   2F0A               MOV     R16, R26
   \   00000094   ........           CALL    BuildEEPROMData
    159                  break ;
   \   00000098   C0C0               RJMP    ??CheckActionUart_1
    160          
    161              case CMD_REQ_INT_DATA :                              // Request external data
    162                  BuildADInt(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_7:
   \   0000009A   019C               MOVW    R19:R18, R25:R24
   \   0000009C   5F2C               SUBI    R18, 252
   \   0000009E   4F3F               SBCI    R19, 255
   \   000000A0   2F0A               MOV     R16, R26
   \   000000A2   ........           CALL    BuildADInt
    163                  break ;
   \   000000A6   C0B9               RJMP    ??CheckActionUart_1
    164          
    165              case CMD_SND_RS4_SETUP :                              // Receive sertup of AN-RS485
    166                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_8:
   \   000000A8   9100....           LDS     R16, UnitID
   \   000000AC   2300               TST     R16
   \   000000AE   F431               BRNE    ??CheckActionUart_9
    167                      GetRS4Setup(ch, pointer+4) ;                     // receive package
   \   000000B0   019C               MOVW    R19:R18, R25:R24
   \   000000B2   5F2C               SUBI    R18, 252
   \   000000B4   4F3F               SBCI    R19, 255
   \   000000B6   2F0A               MOV     R16, R26
   \   000000B8   ........           CALL    GetRS4Setup
    168                  }
    169                  break ;
   \                     ??CheckActionUart_9:
   \   000000BC   C0AE               RJMP    ??CheckActionUart_1
    170          
    171              case CMD_REQ_RS4_SETUP :                              // Request for sertup of AN-RS485
    172                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_10:
   \   000000BE   9100....           LDS     R16, UnitID
   \   000000C2   2300               TST     R16
   \   000000C4   F431               BRNE    ??CheckActionUart_11
    173                      BuildRS4Setup(ch, pointer+4) ;                     // receive package
   \   000000C6   019C               MOVW    R19:R18, R25:R24
   \   000000C8   5F2C               SUBI    R18, 252
   \   000000CA   4F3F               SBCI    R19, 255
   \   000000CC   2F0A               MOV     R16, R26
   \   000000CE   ........           CALL    BuildRS4Setup
    174                  }
    175                  break ;
   \                     ??CheckActionUart_11:
   \   000000D2   C0A3               RJMP    ??CheckActionUart_1
    176          
    177              case CMD_SND_RS4_ADBUF :                              // Request external AD data
    178                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_12:
   \   000000D4   9100....           LDS     R16, UnitID
   \   000000D8   2300               TST     R16
   \   000000DA   F431               BRNE    ??CheckActionUart_13
    179                      GetADData(ch, pointer+4) ;                     // receive package
   \   000000DC   019C               MOVW    R19:R18, R25:R24
   \   000000DE   5F2C               SUBI    R18, 252
   \   000000E0   4F3F               SBCI    R19, 255
   \   000000E2   2F0A               MOV     R16, R26
   \   000000E4   ........           CALL    GetADData
    180                  }
    181                  break;
   \                     ??CheckActionUart_13:
   \   000000E8   C098               RJMP    ??CheckActionUart_1
    182          
    183              case CMD_REQ_RS4_DATA :                              // Request external AD eeprom data
    184                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_14:
   \   000000EA   9100....           LDS     R16, UnitID
   \   000000EE   2300               TST     R16
   \   000000F0   F009               BREQ    $+2+2
   \   000000F2   C093               RJMP    ??CheckActionUart_1
    185                      switch (UART[ch].pRxBuffer[pointer+4]) {
   \   000000F4   2F0A               MOV     R16, R26
   \   000000F6   E010               LDI     R17, 0
   \   000000F8   E14A               LDI     R20, 26
   \   000000FA   E050               LDI     R21, 0
   \   000000FC   ........           CALL    ?S_EC_MUL_L02
   \   00000100   01F8               MOVW    R31:R30, R17:R16
   \   00000102   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000104   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000106   8502               LDD     R16, Z+10
   \   00000108   8513               LDD     R17, Z+11
   \   0000010A   0F08               ADD     R16, R24
   \   0000010C   1F19               ADC     R17, R25
   \   0000010E   01F8               MOVW    R31:R30, R17:R16
   \   00000110   8104               LDD     R16, Z+4
   \   00000112   5000               SUBI    R16, 0
   \   00000114   F019               BREQ    ??CheckActionUart_15
   \   00000116   950A               DEC     R16
   \   00000118   F1E1               BREQ    ??CheckActionUart_16
   \   0000011A   C07F               RJMP    ??CheckActionUart_1
    186                      case 0:                                         // Measure data
    187                          BuildMData485(ch, pointer+5) ;              // receive package
   \                     ??CheckActionUart_15:
   \   0000011C   019C               MOVW    R19:R18, R25:R24
   \   0000011E   5F2B               SUBI    R18, 251
   \   00000120   4F3F               SBCI    R19, 255
   \   00000122   2F0A               MOV     R16, R26
   \   00000124   ........           CALL    BuildMData485
    188                          if (TData.RS4.FromTargetBuffer[0][0] == true) {     // send eepromdata ch 0?
   \   00000128   9100....           LDS     R16, (TData + 1428)
   \   0000012C   3001               CPI     R16, 1
   \   0000012E   F439               BRNE    ??CheckActionUart_17
    189                            BuildADEpromdata(ch, 0);
   \   00000130   E010               LDI     R17, 0
   \   00000132   2F0A               MOV     R16, R26
   \   00000134   ........           CALL    BuildADEpromdata
    190                            TData.RS4.FromTargetBuffer[0][0] = false ;  // Marked as sent
   \   00000138   E000               LDI     R16, 0
   \   0000013A   9300....           STS     (TData + 1428), R16
    191                          }
    192                          if (TData.RS4.FromTargetBuffer[1][0] == true) {     // send eepromdata ch 1?
   \                     ??CheckActionUart_17:
   \   0000013E   9100....           LDS     R16, (TData + 1478)
   \   00000142   3001               CPI     R16, 1
   \   00000144   F439               BRNE    ??CheckActionUart_18
    193                            BuildADEpromdata(ch, 1);                  // channel 1
   \   00000146   E011               LDI     R17, 1
   \   00000148   2F0A               MOV     R16, R26
   \   0000014A   ........           CALL    BuildADEpromdata
    194                            TData.RS4.FromTargetBuffer[1][0] = false ;  // Marked as sent
   \   0000014E   E000               LDI     R16, 0
   \   00000150   9300....           STS     (TData + 1478), R16
    195                          }
    196                          if ((TData.RS4.WHDataAvailable >> UART[ch].pRxBuffer[pointer+5]) & 0x01) {
   \                     ??CheckActionUart_18:
   \   00000154   9120....           LDS     R18, (TData + 1267)
   \   00000158   E030               LDI     R19, 0
   \   0000015A   2F0A               MOV     R16, R26
   \   0000015C   E010               LDI     R17, 0
   \   0000015E   E14A               LDI     R20, 26
   \   00000160   E050               LDI     R21, 0
   \   00000162   ........           CALL    ?S_EC_MUL_L02
   \   00000166   01F8               MOVW    R31:R30, R17:R16
   \   00000168   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000016A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000016C   8502               LDD     R16, Z+10
   \   0000016E   8513               LDD     R17, Z+11
   \   00000170   0F08               ADD     R16, R24
   \   00000172   1F19               ADC     R17, R25
   \   00000174   01F8               MOVW    R31:R30, R17:R16
   \   00000176   8145               LDD     R20, Z+5
   \   00000178   0189               MOVW    R17:R16, R19:R18
   \   0000017A   ........           CALL    ?SS_SHR_L02
   \   0000017E   7001               ANDI    R16, 0x01
   \   00000180   2300               TST     R16
   \   00000182   F069               BREQ    ??CheckActionUart_19
    197                              BuildWHdata(ch, pointer + 5);
   \   00000184   019C               MOVW    R19:R18, R25:R24
   \   00000186   5F2B               SUBI    R18, 251
   \   00000188   4F3F               SBCI    R19, 255
   \   0000018A   2F0A               MOV     R16, R26
   \   0000018C   ........           CALL    BuildWHdata
    198                              //TData.RS4.WHDataAvailable &= ~(0x01 << UART[ch].pRxBuffer[pointer+5]);
    199                          }
    200                          break;
   \   00000190   C044               RJMP    ??CheckActionUart_1
    201                      case 1:                                         // Raw and cal data
    202                          BuildRData485(ch, pointer+5) ;                     // receive package
   \                     ??CheckActionUart_16:
   \   00000192   019C               MOVW    R19:R18, R25:R24
   \   00000194   5F2B               SUBI    R18, 251
   \   00000196   4F3F               SBCI    R19, 255
   \   00000198   2F0A               MOV     R16, R26
   \   0000019A   ........           CALL    BuildRData485
    203                          break;
    204                      }
    205                  }
    206                  break;
   \                     ??CheckActionUart_19:
   \   0000019E   C03D               RJMP    ??CheckActionUart_1
    207          
    208              case CMD_SND_ANA_SETUP :                              // Receive sertup of AN-RSANA
    209                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_20:
   \   000001A0   9100....           LDS     R16, UnitID
   \   000001A4   3001               CPI     R16, 1
   \   000001A6   F5C9               BRNE    ??CheckActionUart_1
    210                      GetANASetup(ch, pointer+4) ;                     // receive package
   \   000001A8   019C               MOVW    R19:R18, R25:R24
   \   000001AA   5F2C               SUBI    R18, 252
   \   000001AC   4F3F               SBCI    R19, 255
   \   000001AE   2F0A               MOV     R16, R26
   \   000001B0   ........           CALL    GetANASetup
    211                  }
    212                  break ;
   \   000001B4   C032               RJMP    ??CheckActionUart_1
    213          
    214              case CMD_REQ_ANA_SETUP :                              // Request for sertup of AN-RSANA
    215                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_21:
   \   000001B6   9100....           LDS     R16, UnitID
   \   000001BA   3001               CPI     R16, 1
   \   000001BC   F571               BRNE    ??CheckActionUart_1
    216                      BuildANASetup(ch, pointer+4) ;                     // receive package
   \   000001BE   019C               MOVW    R19:R18, R25:R24
   \   000001C0   5F2C               SUBI    R18, 252
   \   000001C2   4F3F               SBCI    R19, 255
   \   000001C4   2F0A               MOV     R16, R26
   \   000001C6   ........           CALL    BuildANASetup
    217                  }
    218                  break ;
   \   000001CA   C027               RJMP    ??CheckActionUart_1
    219          
    220              case CMD_SND_ANA_FILTER :                              // Receive filter of AN-RSANA
    221                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_22:
   \   000001CC   9100....           LDS     R16, UnitID
   \   000001D0   3001               CPI     R16, 1
   \   000001D2   F519               BRNE    ??CheckActionUart_1
    222                      GetANAFilter(ch, pointer+4) ;                     // receive package
   \   000001D4   019C               MOVW    R19:R18, R25:R24
   \   000001D6   5F2C               SUBI    R18, 252
   \   000001D8   4F3F               SBCI    R19, 255
   \   000001DA   2F0A               MOV     R16, R26
   \   000001DC   ........           CALL    GetANAFilter
    223                  }
    224                  break ;
   \   000001E0   C01C               RJMP    ??CheckActionUart_1
    225          
    226              case CMD_REQ_ANA_FILTER :                              // Request filter of AN-RSANA
    227                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_23:
   \   000001E2   9100....           LDS     R16, UnitID
   \   000001E6   3001               CPI     R16, 1
   \   000001E8   F4C1               BRNE    ??CheckActionUart_1
    228                      BuildANAFilter(ch, pointer+4) ;                     // receive package
   \   000001EA   019C               MOVW    R19:R18, R25:R24
   \   000001EC   5F2C               SUBI    R18, 252
   \   000001EE   4F3F               SBCI    R19, 255
   \   000001F0   2F0A               MOV     R16, R26
   \   000001F2   ........           CALL    BuildANAFilter
    229                  }
    230                  break ;
   \   000001F6   C011               RJMP    ??CheckActionUart_1
    231          
    232              case CMD_REQ_ANA_DATA :                              // Request ANA data(4-20ma)
    233                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_24:
   \   000001F8   9100....           LDS     R16, UnitID
   \   000001FC   3001               CPI     R16, 1
   \   000001FE   F469               BRNE    ??CheckActionUart_1
    234                      BuildMDataANA(ch, pointer+4) ;                     // receive
   \   00000200   019C               MOVW    R19:R18, R25:R24
   \   00000202   5F2C               SUBI    R18, 252
   \   00000204   4F3F               SBCI    R19, 255
   \   00000206   2F0A               MOV     R16, R26
   \   00000208   ........           CALL    BuildMDataANA
    235                  }
    236                  break ;
   \   0000020C   C006               RJMP    ??CheckActionUart_1
    237          
    238              default:
    239                  if (command < MAX_ECMD) {                   // handle end commands
   \                     ??CheckActionUart_25:
   \   0000020E   E604               LDI     R16, 100
   \   00000210   1640               CP      R4, R16
   \   00000212   E000               LDI     R16, 0
   \   00000214   0650               CPC     R5, R16
   \   00000216   F408               BRCC    ??CheckActionUart_1
    240                      retval = false ;
   \   00000218   E0B0               LDI     R27, 0
    241                  }
    242                  break;
    243          
    244              }
    245              return retval;
   \                     ??CheckActionUart_1:
   \   0000021A   2F0B               MOV     R16, R27
   \   0000021C   E0E6               LDI     R30, 6
   \   0000021E   ........           JMP     ?EPILOGUE_B6_L09
    246          }
    247          
    248          /*************************************************************************
    249          *
    250          * Build send packet header
    251          *
    252          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    253          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    254          
    255              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000004   2F08               MOV     R16, R24
   \   00000006   E010               LDI     R17, 0
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   ........           CALL    ?S_EC_MUL_L02
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000016   E000               LDI     R16, 0
   \   00000018   8704               STD     Z+12, R16
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   8705               STD     Z+13, R16
    256              UART[ch].RxLast  = 0;
   \   0000001E   2F08               MOV     R16, R24
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   E000               LDI     R16, 0
   \   00000032   8706               STD     Z+14, R16
   \   00000034   E000               LDI     R16, 0
   \   00000036   8707               STD     Z+15, R16
    257              UART[ch].TxLast  = 0;
   \   00000038   2F08               MOV     R16, R24
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   8304               STD     Z+4, R16
   \   0000004E   E000               LDI     R16, 0
   \   00000050   8305               STD     Z+5, R16
    258          
    259              UART[ch].pTxBuffer[0] = ANPRO10_SYN ;                        /* Sync */
   \   00000052   2F08               MOV     R16, R24
   \   00000054   E010               LDI     R17, 0
   \   00000056   E14A               LDI     R20, 26
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000064   8100               LD      R16, Z
   \   00000066   8111               LDD     R17, Z+1
   \   00000068   01F8               MOVW    R31:R30, R17:R16
   \   0000006A   E106               LDI     R16, 22
   \   0000006C   8300               ST      Z, R16
    260              UART[ch].pTxBuffer[1] = ANPRO10_SYN ;                        /* Sync */
   \   0000006E   2F08               MOV     R16, R24
   \   00000070   E010               LDI     R17, 0
   \   00000072   E14A               LDI     R20, 26
   \   00000074   E050               LDI     R21, 0
   \   00000076   ........           CALL    ?S_EC_MUL_L02
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000080   8100               LD      R16, Z
   \   00000082   8111               LDD     R17, Z+1
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   E106               LDI     R16, 22
   \   00000088   8301               STD     Z+1, R16
    261              UART[ch].pTxBuffer[2] = ANPRO10_SYN ;                        /* Sync */
   \   0000008A   2F08               MOV     R16, R24
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   E14A               LDI     R20, 26
   \   00000090   E050               LDI     R21, 0
   \   00000092   ........           CALL    ?S_EC_MUL_L02
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009C   8100               LD      R16, Z
   \   0000009E   8111               LDD     R17, Z+1
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   E106               LDI     R16, 22
   \   000000A4   8302               STD     Z+2, R16
    262              UART[ch].pTxBuffer[3] = ANPRO10_SOH ;                        /* Start of header */
   \   000000A6   2F08               MOV     R16, R24
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   E14A               LDI     R20, 26
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   ........           CALL    ?S_EC_MUL_L02
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B8   8100               LD      R16, Z
   \   000000BA   8111               LDD     R17, Z+1
   \   000000BC   01F8               MOVW    R31:R30, R17:R16
   \   000000BE   E001               LDI     R16, 1
   \   000000C0   8303               STD     Z+3, R16
    263              UART[ch].pTxBuffer[4] = UART[ch].pRxBuffer[2] ;      /* RXID */
   \   000000C2   2F08               MOV     R16, R24
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   E14A               LDI     R20, 26
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   ........           CALL    ?S_EC_MUL_L02
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D4   8502               LDD     R16, Z+10
   \   000000D6   8513               LDD     R17, Z+11
   \   000000D8   01F8               MOVW    R31:R30, R17:R16
   \   000000DA   8122               LDD     R18, Z+2
   \   000000DC   2F08               MOV     R16, R24
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E14A               LDI     R20, 26
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EE   8100               LD      R16, Z
   \   000000F0   8111               LDD     R17, Z+1
   \   000000F2   01F8               MOVW    R31:R30, R17:R16
   \   000000F4   8324               STD     Z+4, R18
    264              UART[ch].pTxBuffer[5] = UART[ch].pRxBuffer[3] ;      /* Rx address */
   \   000000F6   2F08               MOV     R16, R24
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   E14A               LDI     R20, 26
   \   000000FC   E050               LDI     R21, 0
   \   000000FE   ........           CALL    ?S_EC_MUL_L02
   \   00000102   01F8               MOVW    R31:R30, R17:R16
   \   00000104   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000106   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000108   8502               LDD     R16, Z+10
   \   0000010A   8513               LDD     R17, Z+11
   \   0000010C   01F8               MOVW    R31:R30, R17:R16
   \   0000010E   8123               LDD     R18, Z+3
   \   00000110   2F08               MOV     R16, R24
   \   00000112   E010               LDI     R17, 0
   \   00000114   E14A               LDI     R20, 26
   \   00000116   E050               LDI     R21, 0
   \   00000118   ........           CALL    ?S_EC_MUL_L02
   \   0000011C   01F8               MOVW    R31:R30, R17:R16
   \   0000011E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000120   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000122   8100               LD      R16, Z
   \   00000124   8111               LDD     R17, Z+1
   \   00000126   01F8               MOVW    R31:R30, R17:R16
   \   00000128   8325               STD     Z+5, R18
    265              UART[ch].pTxBuffer[6] = 0x10 + UnitID ;              /* Unit ID */
   \   0000012A   9120....           LDS     R18, UnitID
   \   0000012E   5F20               SUBI    R18, 240
   \   00000130   2F08               MOV     R16, R24
   \   00000132   E010               LDI     R17, 0
   \   00000134   E14A               LDI     R20, 26
   \   00000136   E050               LDI     R21, 0
   \   00000138   ........           CALL    ?S_EC_MUL_L02
   \   0000013C   01F8               MOVW    R31:R30, R17:R16
   \   0000013E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000140   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000142   8100               LD      R16, Z
   \   00000144   8111               LDD     R17, Z+1
   \   00000146   01F8               MOVW    R31:R30, R17:R16
   \   00000148   8326               STD     Z+6, R18
    266              UART[ch].pTxBuffer[7] = MyAddress();                 /* Tx address */
   \   0000014A   ........           CALL    MyAddress
   \   0000014E   2F20               MOV     R18, R16
   \   00000150   2F08               MOV     R16, R24
   \   00000152   E010               LDI     R17, 0
   \   00000154   E14A               LDI     R20, 26
   \   00000156   E050               LDI     R21, 0
   \   00000158   ........           CALL    ?S_EC_MUL_L02
   \   0000015C   01F8               MOVW    R31:R30, R17:R16
   \   0000015E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000160   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000162   8100               LD      R16, Z
   \   00000164   8111               LDD     R17, Z+1
   \   00000166   01F8               MOVW    R31:R30, R17:R16
   \   00000168   8327               STD     Z+7, R18
    267              UART[ch].pTxBuffer[8] = 0 ;                          /* packlen HB, don't know yet */
   \   0000016A   2F08               MOV     R16, R24
   \   0000016C   E010               LDI     R17, 0
   \   0000016E   E14A               LDI     R20, 26
   \   00000170   E050               LDI     R21, 0
   \   00000172   ........           CALL    ?S_EC_MUL_L02
   \   00000176   01F8               MOVW    R31:R30, R17:R16
   \   00000178   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000017A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017C   8100               LD      R16, Z
   \   0000017E   8111               LDD     R17, Z+1
   \   00000180   01F8               MOVW    R31:R30, R17:R16
   \   00000182   E000               LDI     R16, 0
   \   00000184   8700               STD     Z+8, R16
    268              UART[ch].pTxBuffer[9] = 0 ;                          /* packlen LB, don't know yet */
   \   00000186   2F08               MOV     R16, R24
   \   00000188   E010               LDI     R17, 0
   \   0000018A   E14A               LDI     R20, 26
   \   0000018C   E050               LDI     R21, 0
   \   0000018E   ........           CALL    ?S_EC_MUL_L02
   \   00000192   01F8               MOVW    R31:R30, R17:R16
   \   00000194   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000196   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000198   8100               LD      R16, Z
   \   0000019A   8111               LDD     R17, Z+1
   \   0000019C   01F8               MOVW    R31:R30, R17:R16
   \   0000019E   E000               LDI     R16, 0
   \   000001A0   8701               STD     Z+9, R16
    269              UART[ch].pTxBuffer[10] = 0 ;                         /* Header checksum, don't know yet */
   \   000001A2   2F08               MOV     R16, R24
   \   000001A4   E010               LDI     R17, 0
   \   000001A6   E14A               LDI     R20, 26
   \   000001A8   E050               LDI     R21, 0
   \   000001AA   ........           CALL    ?S_EC_MUL_L02
   \   000001AE   01F8               MOVW    R31:R30, R17:R16
   \   000001B0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B4   8100               LD      R16, Z
   \   000001B6   8111               LDD     R17, Z+1
   \   000001B8   01F8               MOVW    R31:R30, R17:R16
   \   000001BA   E000               LDI     R16, 0
   \   000001BC   8702               STD     Z+10, R16
    270          }
   \   000001BE   9189               LD      R24, Y+
   \   000001C0   9508               RET
    271          
    272          /*************************************************************************
    273          *
    274          * Build  packet tail
    275          *
    276          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    277          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    278          
    279              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000006   2F08               MOV     R16, R24
   \   00000008   ....               RCALL   Uart_BuildHeader
    280          
    281              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK & 0xff ;  // End command lb
   \   0000000A   2F08               MOV     R16, R24
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8120               LD      R18, Z
   \   0000001E   8131               LDD     R19, Z+1
   \   00000020   2F08               MOV     R16, R24
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14A               LDI     R20, 26
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   8102               LDD     R16, Z+2
   \   00000034   8113               LDD     R17, Z+3
   \   00000036   0F20               ADD     R18, R16
   \   00000038   1F31               ADC     R19, R17
   \   0000003A   01F9               MOVW    R31:R30, R19:R18
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   8300               ST      Z, R16
   \   00000040   2F08               MOV     R16, R24
   \   00000042   E010               LDI     R17, 0
   \   00000044   E14A               LDI     R20, 26
   \   00000046   E050               LDI     R21, 0
   \   00000048   ........           CALL    ?S_EC_MUL_L02
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000052   8102               LDD     R16, Z+2
   \   00000054   8113               LDD     R17, Z+3
   \   00000056   5F0F               SUBI    R16, 255
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   8302               STD     Z+2, R16
   \   0000005C   8313               STD     Z+3, R17
    282              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK >> 8 ;    // End command hb
   \   0000005E   2F08               MOV     R16, R24
   \   00000060   E010               LDI     R17, 0
   \   00000062   E14A               LDI     R20, 26
   \   00000064   E050               LDI     R21, 0
   \   00000066   ........           CALL    ?S_EC_MUL_L02
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000070   8120               LD      R18, Z
   \   00000072   8131               LDD     R19, Z+1
   \   00000074   2F08               MOV     R16, R24
   \   00000076   E010               LDI     R17, 0
   \   00000078   E14A               LDI     R20, 26
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000084   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000086   8102               LDD     R16, Z+2
   \   00000088   8113               LDD     R17, Z+3
   \   0000008A   0F20               ADD     R18, R16
   \   0000008C   1F31               ADC     R19, R17
   \   0000008E   01F9               MOVW    R31:R30, R19:R18
   \   00000090   E000               LDI     R16, 0
   \   00000092   8300               ST      Z, R16
   \   00000094   2F08               MOV     R16, R24
   \   00000096   E010               LDI     R17, 0
   \   00000098   E14A               LDI     R20, 26
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   ........           CALL    ?S_EC_MUL_L02
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A6   8102               LDD     R16, Z+2
   \   000000A8   8113               LDD     R17, Z+3
   \   000000AA   5F0F               SUBI    R16, 255
   \   000000AC   4F1F               SBCI    R17, 255
   \   000000AE   8302               STD     Z+2, R16
   \   000000B0   8313               STD     Z+3, R17
    283              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;                  // End data
   \   000000B2   2F08               MOV     R16, R24
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   E14A               LDI     R20, 26
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   ........           CALL    ?S_EC_MUL_L02
   \   000000BE   01F8               MOVW    R31:R30, R17:R16
   \   000000C0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C4   8120               LD      R18, Z
   \   000000C6   8131               LDD     R19, Z+1
   \   000000C8   2F08               MOV     R16, R24
   \   000000CA   E010               LDI     R17, 0
   \   000000CC   E14A               LDI     R20, 26
   \   000000CE   E050               LDI     R21, 0
   \   000000D0   ........           CALL    ?S_EC_MUL_L02
   \   000000D4   01F8               MOVW    R31:R30, R17:R16
   \   000000D6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000DA   8102               LDD     R16, Z+2
   \   000000DC   8113               LDD     R17, Z+3
   \   000000DE   0F20               ADD     R18, R16
   \   000000E0   1F31               ADC     R19, R17
   \   000000E2   01F9               MOVW    R31:R30, R19:R18
   \   000000E4   E000               LDI     R16, 0
   \   000000E6   8300               ST      Z, R16
   \   000000E8   2F08               MOV     R16, R24
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   E14A               LDI     R20, 26
   \   000000EE   E050               LDI     R21, 0
   \   000000F0   ........           CALL    ?S_EC_MUL_L02
   \   000000F4   01F8               MOVW    R31:R30, R17:R16
   \   000000F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000FA   8102               LDD     R16, Z+2
   \   000000FC   8113               LDD     R17, Z+3
   \   000000FE   5F0F               SUBI    R16, 255
   \   00000100   4F1F               SBCI    R17, 255
   \   00000102   8302               STD     Z+2, R16
   \   00000104   8313               STD     Z+3, R17
    284          
    285              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].TxSeqCnt++ ;   // Sequence counter
   \   00000106   2F08               MOV     R16, R24
   \   00000108   E010               LDI     R17, 0
   \   0000010A   E14A               LDI     R20, 26
   \   0000010C   E050               LDI     R21, 0
   \   0000010E   ........           CALL    ?S_EC_MUL_L02
   \   00000112   01F8               MOVW    R31:R30, R17:R16
   \   00000114   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000116   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000118   8561               LDD     R22, Z+9
   \   0000011A   2F26               MOV     R18, R22
   \   0000011C   9523               INC     R18
   \   0000011E   2F08               MOV     R16, R24
   \   00000120   E010               LDI     R17, 0
   \   00000122   E14A               LDI     R20, 26
   \   00000124   E050               LDI     R21, 0
   \   00000126   ........           CALL    ?S_EC_MUL_L02
   \   0000012A   01F8               MOVW    R31:R30, R17:R16
   \   0000012C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000130   8721               STD     Z+9, R18
   \   00000132   2F08               MOV     R16, R24
   \   00000134   E010               LDI     R17, 0
   \   00000136   E14A               LDI     R20, 26
   \   00000138   E050               LDI     R21, 0
   \   0000013A   ........           CALL    ?S_EC_MUL_L02
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000144   8120               LD      R18, Z
   \   00000146   8131               LDD     R19, Z+1
   \   00000148   2F08               MOV     R16, R24
   \   0000014A   E010               LDI     R17, 0
   \   0000014C   E14A               LDI     R20, 26
   \   0000014E   E050               LDI     R21, 0
   \   00000150   ........           CALL    ?S_EC_MUL_L02
   \   00000154   01F8               MOVW    R31:R30, R17:R16
   \   00000156   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000158   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015A   8102               LDD     R16, Z+2
   \   0000015C   8113               LDD     R17, Z+3
   \   0000015E   0F20               ADD     R18, R16
   \   00000160   1F31               ADC     R19, R17
   \   00000162   01F9               MOVW    R31:R30, R19:R18
   \   00000164   8360               ST      Z, R22
   \   00000166   2F08               MOV     R16, R24
   \   00000168   E010               LDI     R17, 0
   \   0000016A   E14A               LDI     R20, 26
   \   0000016C   E050               LDI     R21, 0
   \   0000016E   ........           CALL    ?S_EC_MUL_L02
   \   00000172   01F8               MOVW    R31:R30, R17:R16
   \   00000174   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000176   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000178   8102               LDD     R16, Z+2
   \   0000017A   8113               LDD     R17, Z+3
   \   0000017C   5F0F               SUBI    R16, 255
   \   0000017E   4F1F               SBCI    R17, 255
   \   00000180   8302               STD     Z+2, R16
   \   00000182   8313               STD     Z+3, R17
    286          
    287              UART[ch].pTxBuffer[8] = UART[ch].TxFirst -2;                    // correct length because stx's
   \   00000184   2F08               MOV     R16, R24
   \   00000186   E010               LDI     R17, 0
   \   00000188   E14A               LDI     R20, 26
   \   0000018A   E050               LDI     R21, 0
   \   0000018C   ........           CALL    ?S_EC_MUL_L02
   \   00000190   01F8               MOVW    R31:R30, R17:R16
   \   00000192   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000194   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000196   8122               LDD     R18, Z+2
   \   00000198   8133               LDD     R19, Z+3
   \   0000019A   5022               SUBI    R18, 2
   \   0000019C   2F08               MOV     R16, R24
   \   0000019E   E010               LDI     R17, 0
   \   000001A0   E14A               LDI     R20, 26
   \   000001A2   E050               LDI     R21, 0
   \   000001A4   ........           CALL    ?S_EC_MUL_L02
   \   000001A8   01F8               MOVW    R31:R30, R17:R16
   \   000001AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AE   8100               LD      R16, Z
   \   000001B0   8111               LDD     R17, Z+1
   \   000001B2   01F8               MOVW    R31:R30, R17:R16
   \   000001B4   8720               STD     Z+8, R18
    288              UART[ch].pTxBuffer[9] = (UART[ch].TxFirst-2) >> 8 ;             // packet len high
   \   000001B6   2F08               MOV     R16, R24
   \   000001B8   E010               LDI     R17, 0
   \   000001BA   E14A               LDI     R20, 26
   \   000001BC   E050               LDI     R21, 0
   \   000001BE   ........           CALL    ?S_EC_MUL_L02
   \   000001C2   01F8               MOVW    R31:R30, R17:R16
   \   000001C4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001C8   81A2               LDD     R26, Z+2
   \   000001CA   81B3               LDD     R27, Z+3
   \   000001CC   9712               SBIW    R27:R26, 2
   \   000001CE   2FAB               MOV     R26, R27
   \   000001D0   E0B0               LDI     R27, 0
   \   000001D2   2F08               MOV     R16, R24
   \   000001D4   E010               LDI     R17, 0
   \   000001D6   E14A               LDI     R20, 26
   \   000001D8   E050               LDI     R21, 0
   \   000001DA   ........           CALL    ?S_EC_MUL_L02
   \   000001DE   01F8               MOVW    R31:R30, R17:R16
   \   000001E0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E4   8100               LD      R16, Z
   \   000001E6   8111               LDD     R17, Z+1
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   87A1               STD     Z+9, R26
    289          
    290              UART[ch].pTxBuffer[10] = CalcDSTxChecksum(ch, 10) ;         // Get header checksum
   \   000001EC   E02A               LDI     R18, 10
   \   000001EE   E030               LDI     R19, 0
   \   000001F0   2F08               MOV     R16, R24
   \   000001F2   ....               RCALL   CalcDSTxChecksum
   \   000001F4   2F20               MOV     R18, R16
   \   000001F6   2F08               MOV     R16, R24
   \   000001F8   E010               LDI     R17, 0
   \   000001FA   E14A               LDI     R20, 26
   \   000001FC   E050               LDI     R21, 0
   \   000001FE   ........           CALL    ?S_EC_MUL_L02
   \   00000202   01F8               MOVW    R31:R30, R17:R16
   \   00000204   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000206   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000208   8100               LD      R16, Z
   \   0000020A   8111               LDD     R17, Z+1
   \   0000020C   01F8               MOVW    R31:R30, R17:R16
   \   0000020E   8722               STD     Z+10, R18
    291          
    292              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst) ; // Get checksum
   \   00000210   2F08               MOV     R16, R24
   \   00000212   E010               LDI     R17, 0
   \   00000214   E14A               LDI     R20, 26
   \   00000216   E050               LDI     R21, 0
   \   00000218   ........           CALL    ?S_EC_MUL_L02
   \   0000021C   01F8               MOVW    R31:R30, R17:R16
   \   0000021E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000220   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000222   8122               LDD     R18, Z+2
   \   00000224   8133               LDD     R19, Z+3
   \   00000226   2F08               MOV     R16, R24
   \   00000228   ....               RCALL   CalcDSTxChecksum
   \   0000022A   2F60               MOV     R22, R16
   \   0000022C   2F08               MOV     R16, R24
   \   0000022E   E010               LDI     R17, 0
   \   00000230   E14A               LDI     R20, 26
   \   00000232   E050               LDI     R21, 0
   \   00000234   ........           CALL    ?S_EC_MUL_L02
   \   00000238   01F8               MOVW    R31:R30, R17:R16
   \   0000023A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000023C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000023E   8120               LD      R18, Z
   \   00000240   8131               LDD     R19, Z+1
   \   00000242   2F08               MOV     R16, R24
   \   00000244   E010               LDI     R17, 0
   \   00000246   E14A               LDI     R20, 26
   \   00000248   E050               LDI     R21, 0
   \   0000024A   ........           CALL    ?S_EC_MUL_L02
   \   0000024E   01F8               MOVW    R31:R30, R17:R16
   \   00000250   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000252   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000254   8102               LDD     R16, Z+2
   \   00000256   8113               LDD     R17, Z+3
   \   00000258   0F20               ADD     R18, R16
   \   0000025A   1F31               ADC     R19, R17
   \   0000025C   01F9               MOVW    R31:R30, R19:R18
   \   0000025E   8360               ST      Z, R22
    293              UART[ch].TxFirst++ ;                                        // OBS!! must be inc here due to ANSI standard !!!!
   \   00000260   2F08               MOV     R16, R24
   \   00000262   E010               LDI     R17, 0
   \   00000264   E14A               LDI     R20, 26
   \   00000266   E050               LDI     R21, 0
   \   00000268   ........           CALL    ?S_EC_MUL_L02
   \   0000026C   01F8               MOVW    R31:R30, R17:R16
   \   0000026E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000270   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000272   8102               LDD     R16, Z+2
   \   00000274   8113               LDD     R17, Z+3
   \   00000276   5F0F               SUBI    R16, 255
   \   00000278   4F1F               SBCI    R17, 255
   \   0000027A   8302               STD     Z+2, R16
   \   0000027C   8313               STD     Z+3, R17
    294          
    295              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO10_EOT ;            // End of transmission
   \   0000027E   2F08               MOV     R16, R24
   \   00000280   E010               LDI     R17, 0
   \   00000282   E14A               LDI     R20, 26
   \   00000284   E050               LDI     R21, 0
   \   00000286   ........           CALL    ?S_EC_MUL_L02
   \   0000028A   01F8               MOVW    R31:R30, R17:R16
   \   0000028C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000028E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000290   8120               LD      R18, Z
   \   00000292   8131               LDD     R19, Z+1
   \   00000294   2F08               MOV     R16, R24
   \   00000296   E010               LDI     R17, 0
   \   00000298   E14A               LDI     R20, 26
   \   0000029A   E050               LDI     R21, 0
   \   0000029C   ........           CALL    ?S_EC_MUL_L02
   \   000002A0   01F8               MOVW    R31:R30, R17:R16
   \   000002A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002A6   8102               LDD     R16, Z+2
   \   000002A8   8113               LDD     R17, Z+3
   \   000002AA   0F20               ADD     R18, R16
   \   000002AC   1F31               ADC     R19, R17
   \   000002AE   01F9               MOVW    R31:R30, R19:R18
   \   000002B0   E004               LDI     R16, 4
   \   000002B2   8300               ST      Z, R16
   \   000002B4   2F08               MOV     R16, R24
   \   000002B6   E010               LDI     R17, 0
   \   000002B8   E14A               LDI     R20, 26
   \   000002BA   E050               LDI     R21, 0
   \   000002BC   ........           CALL    ?S_EC_MUL_L02
   \   000002C0   01F8               MOVW    R31:R30, R17:R16
   \   000002C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002C6   8102               LDD     R16, Z+2
   \   000002C8   8113               LDD     R17, Z+3
   \   000002CA   5F0F               SUBI    R16, 255
   \   000002CC   4F1F               SBCI    R17, 255
   \   000002CE   8302               STD     Z+2, R16
   \   000002D0   8313               STD     Z+3, R17
    296              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send
   \   000002D2   2F08               MOV     R16, R24
   \   000002D4   E010               LDI     R17, 0
   \   000002D6   E14A               LDI     R20, 26
   \   000002D8   E050               LDI     R21, 0
   \   000002DA   ........           CALL    ?S_EC_MUL_L02
   \   000002DE   01F8               MOVW    R31:R30, R17:R16
   \   000002E0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002E2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002E4   8122               LDD     R18, Z+2
   \   000002E6   8133               LDD     R19, Z+3
   \   000002E8   2F08               MOV     R16, R24
   \   000002EA   E010               LDI     R17, 0
   \   000002EC   E14A               LDI     R20, 26
   \   000002EE   E050               LDI     R21, 0
   \   000002F0   ........           CALL    ?S_EC_MUL_L02
   \   000002F4   01F8               MOVW    R31:R30, R17:R16
   \   000002F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002FA   8326               STD     Z+6, R18
   \   000002FC   8337               STD     Z+7, R19
    297              UART[ch].TxLast = 0;                                     // reset cunter
   \   000002FE   2F08               MOV     R16, R24
   \   00000300   E010               LDI     R17, 0
   \   00000302   E14A               LDI     R20, 26
   \   00000304   E050               LDI     R21, 0
   \   00000306   ........           CALL    ?S_EC_MUL_L02
   \   0000030A   01F8               MOVW    R31:R30, R17:R16
   \   0000030C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000030E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000310   E000               LDI     R16, 0
   \   00000312   8304               STD     Z+4, R16
   \   00000314   E000               LDI     R16, 0
   \   00000316   8305               STD     Z+5, R16
    298              if (ch == 0) {                                           // Turn on TXE for channel
   \   00000318   2388               TST     R24
   \   0000031A   F561               BRNE    ??Uart_BuildTail_0
    299                  OS_RetriggerTimer(&TimerUSART0);                     // and start timeout TX timer
   \   0000031C   ....               LDI     R16, LOW(TimerUSART0)
   \   0000031E   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000320   ........           CALL    OS_RetriggerTimer
    300                  SetBit(PORTE, 0x04) ;                                // TXE0 on
   \   00000324   9100....           LDS     R16, (OS_Counters + 1)
   \   00000328   7F00               ANDI    R16, 0xF0
   \   0000032A   2300               TST     R16
   \   0000032C   F021               BREQ    ??Uart_BuildTail_1
   \   0000032E   E909               LDI     R16, 153
   \   00000330   E010               LDI     R17, 0
   \   00000332   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_1:
   \   00000336   94F8               CLI
   \   00000338   9100....           LDS     R16, (OS_Counters + 1)
   \   0000033C   9503               INC     R16
   \   0000033E   9300....           STS     (OS_Counters + 1), R16
   \   00000342   9A72               SBI     0x0E, 0x02
   \   00000344   9100....           LDS     R16, (OS_Counters + 1)
   \   00000348   7F00               ANDI    R16, 0xF0
   \   0000034A   2300               TST     R16
   \   0000034C   F021               BREQ    ??Uart_BuildTail_2
   \   0000034E   E909               LDI     R16, 153
   \   00000350   E010               LDI     R17, 0
   \   00000352   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_2:
   \   00000356   9100....           LDS     R16, (OS_Counters + 1)
   \   0000035A   950A               DEC     R16
   \   0000035C   9300....           STS     (OS_Counters + 1), R16
   \   00000360   9100....           LDS     R16, (OS_Counters + 1)
   \   00000364   2300               TST     R16
   \   00000366   F409               BRNE    ??Uart_BuildTail_3
   \   00000368   9478               SEI
    301                  OS_RetriggerTimer(&TimerUSART0On);                   // and start timer for on before TX
   \                     ??Uart_BuildTail_3:
   \   0000036A   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000036C   ....               LDI     R17, (TimerUSART0On) >> 8
   \   0000036E   ........           CALL    OS_RetriggerTimer
   \   00000372   C02D               RJMP    ??Uart_BuildTail_4
    302              } else if (ch ==1) {
   \                     ??Uart_BuildTail_0:
   \   00000374   3081               CPI     R24, 1
   \   00000376   F559               BRNE    ??Uart_BuildTail_4
    303                  OS_RetriggerTimer(&TimerUSART1);                     // and start timeout TX timer
   \   00000378   ....               LDI     R16, LOW(TimerUSART1)
   \   0000037A   ....               LDI     R17, (TimerUSART1) >> 8
   \   0000037C   ........           CALL    OS_RetriggerTimer
    304                  SetBit(PORTE, 0x08) ;                                // TXE1 on
   \   00000380   9100....           LDS     R16, (OS_Counters + 1)
   \   00000384   7F00               ANDI    R16, 0xF0
   \   00000386   2300               TST     R16
   \   00000388   F021               BREQ    ??Uart_BuildTail_5
   \   0000038A   E909               LDI     R16, 153
   \   0000038C   E010               LDI     R17, 0
   \   0000038E   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_5:
   \   00000392   94F8               CLI
   \   00000394   9100....           LDS     R16, (OS_Counters + 1)
   \   00000398   9503               INC     R16
   \   0000039A   9300....           STS     (OS_Counters + 1), R16
   \   0000039E   9A73               SBI     0x0E, 0x03
   \   000003A0   9100....           LDS     R16, (OS_Counters + 1)
   \   000003A4   7F00               ANDI    R16, 0xF0
   \   000003A6   2300               TST     R16
   \   000003A8   F021               BREQ    ??Uart_BuildTail_6
   \   000003AA   E909               LDI     R16, 153
   \   000003AC   E010               LDI     R17, 0
   \   000003AE   ........           CALL    OS_Error
   \                     ??Uart_BuildTail_6:
   \   000003B2   9100....           LDS     R16, (OS_Counters + 1)
   \   000003B6   950A               DEC     R16
   \   000003B8   9300....           STS     (OS_Counters + 1), R16
   \   000003BC   9100....           LDS     R16, (OS_Counters + 1)
   \   000003C0   2300               TST     R16
   \   000003C2   F409               BRNE    ??Uart_BuildTail_7
   \   000003C4   9478               SEI
    305                  OS_RetriggerTimer(&TimerUSART1On);                   // and start timer for on before TX
   \                     ??Uart_BuildTail_7:
   \   000003C6   ....               LDI     R16, LOW(TimerUSART1On)
   \   000003C8   ....               LDI     R17, (TimerUSART1On) >> 8
   \   000003CA   ........           CALL    OS_RetriggerTimer
    306              }
    307          }
   \                     ??Uart_BuildTail_4:
   \   000003CE   E0E4               LDI     R30, 4
   \   000003D0   ........           JMP     ?EPILOGUE_B4_L09
   \   000003D4                      REQUIRE _A_PORTE
    308          
    309          /*************************************************************************
    310          *
    311          * Build datablock for card status
    312          *
    313          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    314          void BuildStatusData(char ch){
   \                     BuildStatusData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
    315          
    316              short ntna ;
    317              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   2F0A               MOV     R16, R26
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   E001               LDI     R16, 1
   \   0000001A   8F01               STD     Z+25, R16
    318          
    319              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS & 0xff;
   \   0000001C   2F0A               MOV     R16, R26
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E14A               LDI     R20, 26
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   8120               LD      R18, Z
   \   00000030   8131               LDD     R19, Z+1
   \   00000032   2F0A               MOV     R16, R26
   \   00000034   E010               LDI     R17, 0
   \   00000036   E14A               LDI     R20, 26
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   8102               LDD     R16, Z+2
   \   00000046   8113               LDD     R17, Z+3
   \   00000048   0F20               ADD     R18, R16
   \   0000004A   1F31               ADC     R19, R17
   \   0000004C   01F9               MOVW    R31:R30, R19:R18
   \   0000004E   EE09               LDI     R16, 233
   \   00000050   8300               ST      Z, R16
   \   00000052   2F0A               MOV     R16, R26
   \   00000054   E010               LDI     R17, 0
   \   00000056   E14A               LDI     R20, 26
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000064   8102               LDD     R16, Z+2
   \   00000066   8113               LDD     R17, Z+3
   \   00000068   5F0F               SUBI    R16, 255
   \   0000006A   4F1F               SBCI    R17, 255
   \   0000006C   8302               STD     Z+2, R16
   \   0000006E   8313               STD     Z+3, R17
    320              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS >> 8;
   \   00000070   2F0A               MOV     R16, R26
   \   00000072   E010               LDI     R17, 0
   \   00000074   E14A               LDI     R20, 26
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000082   8120               LD      R18, Z
   \   00000084   8131               LDD     R19, Z+1
   \   00000086   2F0A               MOV     R16, R26
   \   00000088   E010               LDI     R17, 0
   \   0000008A   E14A               LDI     R20, 26
   \   0000008C   E050               LDI     R21, 0
   \   0000008E   ........           CALL    ?S_EC_MUL_L02
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000098   8102               LDD     R16, Z+2
   \   0000009A   8113               LDD     R17, Z+3
   \   0000009C   0F20               ADD     R18, R16
   \   0000009E   1F31               ADC     R19, R17
   \   000000A0   01F9               MOVW    R31:R30, R19:R18
   \   000000A2   E003               LDI     R16, 3
   \   000000A4   8300               ST      Z, R16
   \   000000A6   2F0A               MOV     R16, R26
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   E14A               LDI     R20, 26
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   ........           CALL    ?S_EC_MUL_L02
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B8   8102               LDD     R16, Z+2
   \   000000BA   8113               LDD     R17, Z+3
   \   000000BC   5F0F               SUBI    R16, 255
   \   000000BE   4F1F               SBCI    R17, 255
   \   000000C0   8302               STD     Z+2, R16
   \   000000C2   8313               STD     Z+3, R17
    321              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000C4   2F0A               MOV     R16, R26
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E14A               LDI     R20, 26
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D6   8102               LDD     R16, Z+2
   \   000000D8   8113               LDD     R17, Z+3
   \   000000DA   0128               MOVW    R5:R4, R17:R16
    322              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DC   2F0A               MOV     R16, R26
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E14A               LDI     R20, 26
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EE   8102               LDD     R16, Z+2
   \   000000F0   8113               LDD     R17, Z+3
   \   000000F2   5F0E               SUBI    R16, 254
   \   000000F4   4F1F               SBCI    R17, 255
   \   000000F6   8302               STD     Z+2, R16
   \   000000F8   8313               STD     Z+3, R17
    323              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ch ;               // channel
   \   000000FA   2F0A               MOV     R16, R26
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   E14A               LDI     R20, 26
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   01F8               MOVW    R31:R30, R17:R16
   \   00000108   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010C   8120               LD      R18, Z
   \   0000010E   8131               LDD     R19, Z+1
   \   00000110   2F0A               MOV     R16, R26
   \   00000112   E010               LDI     R17, 0
   \   00000114   E14A               LDI     R20, 26
   \   00000116   E050               LDI     R21, 0
   \   00000118   ........           CALL    ?S_EC_MUL_L02
   \   0000011C   01F8               MOVW    R31:R30, R17:R16
   \   0000011E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000120   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000122   8102               LDD     R16, Z+2
   \   00000124   8113               LDD     R17, Z+3
   \   00000126   0F20               ADD     R18, R16
   \   00000128   1F31               ADC     R19, R17
   \   0000012A   01F9               MOVW    R31:R30, R19:R18
   \   0000012C   83A0               ST      Z, R26
   \   0000012E   2F0A               MOV     R16, R26
   \   00000130   E010               LDI     R17, 0
   \   00000132   E14A               LDI     R20, 26
   \   00000134   E050               LDI     R21, 0
   \   00000136   ........           CALL    ?S_EC_MUL_L02
   \   0000013A   01F8               MOVW    R31:R30, R17:R16
   \   0000013C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000140   8102               LDD     R16, Z+2
   \   00000142   8113               LDD     R17, Z+3
   \   00000144   5F0F               SUBI    R16, 255
   \   00000146   4F1F               SBCI    R17, 255
   \   00000148   8302               STD     Z+2, R16
   \   0000014A   8313               STD     Z+3, R17
    324              UART[ch].pTxBuffer[UART[ch].TxFirst++] = DEVICE_IO + UnitID ;   // Product ID
   \   0000014C   9160....           LDS     R22, UnitID
   \   00000150   5F60               SUBI    R22, 240
   \   00000152   2F0A               MOV     R16, R26
   \   00000154   E010               LDI     R17, 0
   \   00000156   E14A               LDI     R20, 26
   \   00000158   E050               LDI     R21, 0
   \   0000015A   ........           CALL    ?S_EC_MUL_L02
   \   0000015E   01F8               MOVW    R31:R30, R17:R16
   \   00000160   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000164   8120               LD      R18, Z
   \   00000166   8131               LDD     R19, Z+1
   \   00000168   2F0A               MOV     R16, R26
   \   0000016A   E010               LDI     R17, 0
   \   0000016C   E14A               LDI     R20, 26
   \   0000016E   E050               LDI     R21, 0
   \   00000170   ........           CALL    ?S_EC_MUL_L02
   \   00000174   01F8               MOVW    R31:R30, R17:R16
   \   00000176   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000178   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017A   8102               LDD     R16, Z+2
   \   0000017C   8113               LDD     R17, Z+3
   \   0000017E   0F20               ADD     R18, R16
   \   00000180   1F31               ADC     R19, R17
   \   00000182   01F9               MOVW    R31:R30, R19:R18
   \   00000184   8360               ST      Z, R22
   \   00000186   2F0A               MOV     R16, R26
   \   00000188   E010               LDI     R17, 0
   \   0000018A   E14A               LDI     R20, 26
   \   0000018C   E050               LDI     R21, 0
   \   0000018E   ........           CALL    ?S_EC_MUL_L02
   \   00000192   01F8               MOVW    R31:R30, R17:R16
   \   00000194   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000196   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000198   8102               LDD     R16, Z+2
   \   0000019A   8113               LDD     R17, Z+3
   \   0000019C   5F0F               SUBI    R16, 255
   \   0000019E   4F1F               SBCI    R17, 255
   \   000001A0   8302               STD     Z+2, R16
   \   000001A2   8313               STD     Z+3, R17
    325              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MyAddress();           // unit adddress
   \   000001A4   2F0A               MOV     R16, R26
   \   000001A6   E010               LDI     R17, 0
   \   000001A8   E14A               LDI     R20, 26
   \   000001AA   E050               LDI     R21, 0
   \   000001AC   ........           CALL    ?S_EC_MUL_L02
   \   000001B0   01F8               MOVW    R31:R30, R17:R16
   \   000001B2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B6   8182               LDD     R24, Z+2
   \   000001B8   8193               LDD     R25, Z+3
   \   000001BA   019C               MOVW    R19:R18, R25:R24
   \   000001BC   5F2F               SUBI    R18, 255
   \   000001BE   4F3F               SBCI    R19, 255
   \   000001C0   2F0A               MOV     R16, R26
   \   000001C2   E010               LDI     R17, 0
   \   000001C4   E14A               LDI     R20, 26
   \   000001C6   E050               LDI     R21, 0
   \   000001C8   ........           CALL    ?S_EC_MUL_L02
   \   000001CC   01F8               MOVW    R31:R30, R17:R16
   \   000001CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D2   8322               STD     Z+2, R18
   \   000001D4   8333               STD     Z+3, R19
   \   000001D6   ........           CALL    MyAddress
   \   000001DA   2F20               MOV     R18, R16
   \   000001DC   2F0A               MOV     R16, R26
   \   000001DE   E010               LDI     R17, 0
   \   000001E0   E14A               LDI     R20, 26
   \   000001E2   E050               LDI     R21, 0
   \   000001E4   ........           CALL    ?S_EC_MUL_L02
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001EE   8100               LD      R16, Z
   \   000001F0   8111               LDD     R17, Z+1
   \   000001F2   0F08               ADD     R16, R24
   \   000001F4   1F19               ADC     R17, R25
   \   000001F6   01F8               MOVW    R31:R30, R17:R16
   \   000001F8   8320               ST      Z, R18
    326              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION ;       // software version */
   \   000001FA   2F0A               MOV     R16, R26
   \   000001FC   E010               LDI     R17, 0
   \   000001FE   E14A               LDI     R20, 26
   \   00000200   E050               LDI     R21, 0
   \   00000202   ........           CALL    ?S_EC_MUL_L02
   \   00000206   01F8               MOVW    R31:R30, R17:R16
   \   00000208   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000020A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000020C   8120               LD      R18, Z
   \   0000020E   8131               LDD     R19, Z+1
   \   00000210   2F0A               MOV     R16, R26
   \   00000212   E010               LDI     R17, 0
   \   00000214   E14A               LDI     R20, 26
   \   00000216   E050               LDI     R21, 0
   \   00000218   ........           CALL    ?S_EC_MUL_L02
   \   0000021C   01F8               MOVW    R31:R30, R17:R16
   \   0000021E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000220   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000222   8102               LDD     R16, Z+2
   \   00000224   8113               LDD     R17, Z+3
   \   00000226   0F20               ADD     R18, R16
   \   00000228   1F31               ADC     R19, R17
   \   0000022A   01F9               MOVW    R31:R30, R19:R18
   \   0000022C   E208               LDI     R16, 40
   \   0000022E   8300               ST      Z, R16
   \   00000230   2F0A               MOV     R16, R26
   \   00000232   E010               LDI     R17, 0
   \   00000234   E14A               LDI     R20, 26
   \   00000236   E050               LDI     R21, 0
   \   00000238   ........           CALL    ?S_EC_MUL_L02
   \   0000023C   01F8               MOVW    R31:R30, R17:R16
   \   0000023E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000240   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000242   8102               LDD     R16, Z+2
   \   00000244   8113               LDD     R17, Z+3
   \   00000246   5F0F               SUBI    R16, 255
   \   00000248   4F1F               SBCI    R17, 255
   \   0000024A   8302               STD     Z+2, R16
   \   0000024C   8313               STD     Z+3, R17
    327              UART[ch].pTxBuffer[UART[ch].TxFirst++] = COMP_VERSION;        // cpmpability version
   \   0000024E   2F0A               MOV     R16, R26
   \   00000250   E010               LDI     R17, 0
   \   00000252   E14A               LDI     R20, 26
   \   00000254   E050               LDI     R21, 0
   \   00000256   ........           CALL    ?S_EC_MUL_L02
   \   0000025A   01F8               MOVW    R31:R30, R17:R16
   \   0000025C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000025E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000260   8120               LD      R18, Z
   \   00000262   8131               LDD     R19, Z+1
   \   00000264   2F0A               MOV     R16, R26
   \   00000266   E010               LDI     R17, 0
   \   00000268   E14A               LDI     R20, 26
   \   0000026A   E050               LDI     R21, 0
   \   0000026C   ........           CALL    ?S_EC_MUL_L02
   \   00000270   01F8               MOVW    R31:R30, R17:R16
   \   00000272   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000274   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000276   8102               LDD     R16, Z+2
   \   00000278   8113               LDD     R17, Z+3
   \   0000027A   0F20               ADD     R18, R16
   \   0000027C   1F31               ADC     R19, R17
   \   0000027E   01F9               MOVW    R31:R30, R19:R18
   \   00000280   E001               LDI     R16, 1
   \   00000282   8300               ST      Z, R16
   \   00000284   2F0A               MOV     R16, R26
   \   00000286   E010               LDI     R17, 0
   \   00000288   E14A               LDI     R20, 26
   \   0000028A   E050               LDI     R21, 0
   \   0000028C   ........           CALL    ?S_EC_MUL_L02
   \   00000290   01F8               MOVW    R31:R30, R17:R16
   \   00000292   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000294   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000296   8102               LDD     R16, Z+2
   \   00000298   8113               LDD     R17, Z+3
   \   0000029A   5F0F               SUBI    R16, 255
   \   0000029C   4F1F               SBCI    R17, 255
   \   0000029E   8302               STD     Z+2, R16
   \   000002A0   8313               STD     Z+3, R17
    328              UART[ch].pTxBuffer[UART[ch].TxFirst++] = STORE_VERSION;        // cpmpability version
   \   000002A2   2F0A               MOV     R16, R26
   \   000002A4   E010               LDI     R17, 0
   \   000002A6   E14A               LDI     R20, 26
   \   000002A8   E050               LDI     R21, 0
   \   000002AA   ........           CALL    ?S_EC_MUL_L02
   \   000002AE   01F8               MOVW    R31:R30, R17:R16
   \   000002B0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002B2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002B4   8120               LD      R18, Z
   \   000002B6   8131               LDD     R19, Z+1
   \   000002B8   2F0A               MOV     R16, R26
   \   000002BA   E010               LDI     R17, 0
   \   000002BC   E14A               LDI     R20, 26
   \   000002BE   E050               LDI     R21, 0
   \   000002C0   ........           CALL    ?S_EC_MUL_L02
   \   000002C4   01F8               MOVW    R31:R30, R17:R16
   \   000002C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002CA   8102               LDD     R16, Z+2
   \   000002CC   8113               LDD     R17, Z+3
   \   000002CE   0F20               ADD     R18, R16
   \   000002D0   1F31               ADC     R19, R17
   \   000002D2   01F9               MOVW    R31:R30, R19:R18
   \   000002D4   E002               LDI     R16, 2
   \   000002D6   8300               ST      Z, R16
   \   000002D8   2F0A               MOV     R16, R26
   \   000002DA   E010               LDI     R17, 0
   \   000002DC   E14A               LDI     R20, 26
   \   000002DE   E050               LDI     R21, 0
   \   000002E0   ........           CALL    ?S_EC_MUL_L02
   \   000002E4   01F8               MOVW    R31:R30, R17:R16
   \   000002E6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002E8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002EA   8102               LDD     R16, Z+2
   \   000002EC   8113               LDD     R17, Z+3
   \   000002EE   5F0F               SUBI    R16, 255
   \   000002F0   4F1F               SBCI    R17, 255
   \   000002F2   8302               STD     Z+2, R16
   \   000002F4   8313               STD     Z+3, R17
    329              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \   000002F6   2F0A               MOV     R16, R26
   \   000002F8   E010               LDI     R17, 0
   \   000002FA   E14A               LDI     R20, 26
   \   000002FC   E050               LDI     R21, 0
   \   000002FE   ........           CALL    ?S_EC_MUL_L02
   \   00000302   01F8               MOVW    R31:R30, R17:R16
   \   00000304   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000306   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000308   8120               LD      R18, Z
   \   0000030A   8131               LDD     R19, Z+1
   \   0000030C   2F0A               MOV     R16, R26
   \   0000030E   E010               LDI     R17, 0
   \   00000310   E14A               LDI     R20, 26
   \   00000312   E050               LDI     R21, 0
   \   00000314   ........           CALL    ?S_EC_MUL_L02
   \   00000318   01F8               MOVW    R31:R30, R17:R16
   \   0000031A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000031C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000031E   8102               LDD     R16, Z+2
   \   00000320   8113               LDD     R17, Z+3
   \   00000322   0F20               ADD     R18, R16
   \   00000324   1F31               ADC     R19, R17
   \   00000326   01F9               MOVW    R31:R30, R19:R18
   \   00000328   E906               LDI     R16, 150
   \   0000032A   8300               ST      Z, R16
   \   0000032C   2F0A               MOV     R16, R26
   \   0000032E   E010               LDI     R17, 0
   \   00000330   E14A               LDI     R20, 26
   \   00000332   E050               LDI     R21, 0
   \   00000334   ........           CALL    ?S_EC_MUL_L02
   \   00000338   01F8               MOVW    R31:R30, R17:R16
   \   0000033A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000033C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000033E   8102               LDD     R16, Z+2
   \   00000340   8113               LDD     R17, Z+3
   \   00000342   5F0F               SUBI    R16, 255
   \   00000344   4F1F               SBCI    R17, 255
   \   00000346   8302               STD     Z+2, R16
   \   00000348   8313               STD     Z+3, R17
    330              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (( RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   0000034A   2F0A               MOV     R16, R26
   \   0000034C   E010               LDI     R17, 0
   \   0000034E   E14A               LDI     R20, 26
   \   00000350   E050               LDI     R21, 0
   \   00000352   ........           CALL    ?S_EC_MUL_L02
   \   00000356   01F8               MOVW    R31:R30, R17:R16
   \   00000358   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000035A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000035C   8120               LD      R18, Z
   \   0000035E   8131               LDD     R19, Z+1
   \   00000360   2F0A               MOV     R16, R26
   \   00000362   E010               LDI     R17, 0
   \   00000364   E14A               LDI     R20, 26
   \   00000366   E050               LDI     R21, 0
   \   00000368   ........           CALL    ?S_EC_MUL_L02
   \   0000036C   01F8               MOVW    R31:R30, R17:R16
   \   0000036E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000370   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000372   8102               LDD     R16, Z+2
   \   00000374   8113               LDD     R17, Z+3
   \   00000376   0F20               ADD     R18, R16
   \   00000378   1F31               ADC     R19, R17
   \   0000037A   01F9               MOVW    R31:R30, R19:R18
   \   0000037C   E000               LDI     R16, 0
   \   0000037E   8300               ST      Z, R16
   \   00000380   2F0A               MOV     R16, R26
   \   00000382   E010               LDI     R17, 0
   \   00000384   E14A               LDI     R20, 26
   \   00000386   E050               LDI     R21, 0
   \   00000388   ........           CALL    ?S_EC_MUL_L02
   \   0000038C   01F8               MOVW    R31:R30, R17:R16
   \   0000038E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000390   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000392   8102               LDD     R16, Z+2
   \   00000394   8113               LDD     R17, Z+3
   \   00000396   5F0F               SUBI    R16, 255
   \   00000398   4F1F               SBCI    R17, 255
   \   0000039A   8302               STD     Z+2, R16
   \   0000039C   8313               STD     Z+3, R17
    331              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \   0000039E   2F0A               MOV     R16, R26
   \   000003A0   E010               LDI     R17, 0
   \   000003A2   E14A               LDI     R20, 26
   \   000003A4   E050               LDI     R21, 0
   \   000003A6   ........           CALL    ?S_EC_MUL_L02
   \   000003AA   01F8               MOVW    R31:R30, R17:R16
   \   000003AC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003AE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003B0   8120               LD      R18, Z
   \   000003B2   8131               LDD     R19, Z+1
   \   000003B4   2F0A               MOV     R16, R26
   \   000003B6   E010               LDI     R17, 0
   \   000003B8   E14A               LDI     R20, 26
   \   000003BA   E050               LDI     R21, 0
   \   000003BC   ........           CALL    ?S_EC_MUL_L02
   \   000003C0   01F8               MOVW    R31:R30, R17:R16
   \   000003C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003C6   8102               LDD     R16, Z+2
   \   000003C8   8113               LDD     R17, Z+3
   \   000003CA   0F20               ADD     R18, R16
   \   000003CC   1F31               ADC     R19, R17
   \   000003CE   01F9               MOVW    R31:R30, R19:R18
   \   000003D0   E103               LDI     R16, 19
   \   000003D2   8300               ST      Z, R16
   \   000003D4   2F0A               MOV     R16, R26
   \   000003D6   E010               LDI     R17, 0
   \   000003D8   E14A               LDI     R20, 26
   \   000003DA   E050               LDI     R21, 0
   \   000003DC   ........           CALL    ?S_EC_MUL_L02
   \   000003E0   01F8               MOVW    R31:R30, R17:R16
   \   000003E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003E6   8102               LDD     R16, Z+2
   \   000003E8   8113               LDD     R17, Z+3
   \   000003EA   5F0F               SUBI    R16, 255
   \   000003EC   4F1F               SBCI    R17, 255
   \   000003EE   8302               STD     Z+2, R16
   \   000003F0   8313               STD     Z+3, R17
    332              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
   \   000003F2   2F0A               MOV     R16, R26
   \   000003F4   E010               LDI     R17, 0
   \   000003F6   E14A               LDI     R20, 26
   \   000003F8   E050               LDI     R21, 0
   \   000003FA   ........           CALL    ?S_EC_MUL_L02
   \   000003FE   01F8               MOVW    R31:R30, R17:R16
   \   00000400   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000402   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000404   8120               LD      R18, Z
   \   00000406   8131               LDD     R19, Z+1
   \   00000408   2F0A               MOV     R16, R26
   \   0000040A   E010               LDI     R17, 0
   \   0000040C   E14A               LDI     R20, 26
   \   0000040E   E050               LDI     R21, 0
   \   00000410   ........           CALL    ?S_EC_MUL_L02
   \   00000414   01F8               MOVW    R31:R30, R17:R16
   \   00000416   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000418   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000041A   8102               LDD     R16, Z+2
   \   0000041C   8113               LDD     R17, Z+3
   \   0000041E   0F20               ADD     R18, R16
   \   00000420   1F31               ADC     R19, R17
   \   00000422   01F9               MOVW    R31:R30, R19:R18
   \   00000424   E001               LDI     R16, 1
   \   00000426   8300               ST      Z, R16
   \   00000428   2F0A               MOV     R16, R26
   \   0000042A   E010               LDI     R17, 0
   \   0000042C   E14A               LDI     R20, 26
   \   0000042E   E050               LDI     R21, 0
   \   00000430   ........           CALL    ?S_EC_MUL_L02
   \   00000434   01F8               MOVW    R31:R30, R17:R16
   \   00000436   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000438   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000043A   8102               LDD     R16, Z+2
   \   0000043C   8113               LDD     R17, Z+3
   \   0000043E   5F0F               SUBI    R16, 255
   \   00000440   4F1F               SBCI    R17, 255
   \   00000442   8302               STD     Z+2, R16
   \   00000444   8313               STD     Z+3, R17
    333              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus ;                  // restart flag
   \   00000446   9160....           LDS     R22, RestartStatus
   \   0000044A   2F0A               MOV     R16, R26
   \   0000044C   E010               LDI     R17, 0
   \   0000044E   E14A               LDI     R20, 26
   \   00000450   E050               LDI     R21, 0
   \   00000452   ........           CALL    ?S_EC_MUL_L02
   \   00000456   01F8               MOVW    R31:R30, R17:R16
   \   00000458   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000045A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000045C   8120               LD      R18, Z
   \   0000045E   8131               LDD     R19, Z+1
   \   00000460   2F0A               MOV     R16, R26
   \   00000462   E010               LDI     R17, 0
   \   00000464   E14A               LDI     R20, 26
   \   00000466   E050               LDI     R21, 0
   \   00000468   ........           CALL    ?S_EC_MUL_L02
   \   0000046C   01F8               MOVW    R31:R30, R17:R16
   \   0000046E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000470   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000472   8102               LDD     R16, Z+2
   \   00000474   8113               LDD     R17, Z+3
   \   00000476   0F20               ADD     R18, R16
   \   00000478   1F31               ADC     R19, R17
   \   0000047A   01F9               MOVW    R31:R30, R19:R18
   \   0000047C   8360               ST      Z, R22
   \   0000047E   2F0A               MOV     R16, R26
   \   00000480   E010               LDI     R17, 0
   \   00000482   E14A               LDI     R20, 26
   \   00000484   E050               LDI     R21, 0
   \   00000486   ........           CALL    ?S_EC_MUL_L02
   \   0000048A   01F8               MOVW    R31:R30, R17:R16
   \   0000048C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000048E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000490   8102               LDD     R16, Z+2
   \   00000492   8113               LDD     R17, Z+3
   \   00000494   5F0F               SUBI    R16, 255
   \   00000496   4F1F               SBCI    R17, 255
   \   00000498   8302               STD     Z+2, R16
   \   0000049A   8313               STD     Z+3, R17
    334              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROGTYPE_APP ;                // Application program
   \   0000049C   2F0A               MOV     R16, R26
   \   0000049E   E010               LDI     R17, 0
   \   000004A0   E14A               LDI     R20, 26
   \   000004A2   E050               LDI     R21, 0
   \   000004A4   ........           CALL    ?S_EC_MUL_L02
   \   000004A8   01F8               MOVW    R31:R30, R17:R16
   \   000004AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004AE   8120               LD      R18, Z
   \   000004B0   8131               LDD     R19, Z+1
   \   000004B2   2F0A               MOV     R16, R26
   \   000004B4   E010               LDI     R17, 0
   \   000004B6   E14A               LDI     R20, 26
   \   000004B8   E050               LDI     R21, 0
   \   000004BA   ........           CALL    ?S_EC_MUL_L02
   \   000004BE   01F8               MOVW    R31:R30, R17:R16
   \   000004C0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004C2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004C4   8102               LDD     R16, Z+2
   \   000004C6   8113               LDD     R17, Z+3
   \   000004C8   0F20               ADD     R18, R16
   \   000004CA   1F31               ADC     R19, R17
   \   000004CC   01F9               MOVW    R31:R30, R19:R18
   \   000004CE   E001               LDI     R16, 1
   \   000004D0   8300               ST      Z, R16
   \   000004D2   2F0A               MOV     R16, R26
   \   000004D4   E010               LDI     R17, 0
   \   000004D6   E14A               LDI     R20, 26
   \   000004D8   E050               LDI     R21, 0
   \   000004DA   ........           CALL    ?S_EC_MUL_L02
   \   000004DE   01F8               MOVW    R31:R30, R17:R16
   \   000004E0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004E2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004E4   8102               LDD     R16, Z+2
   \   000004E6   8113               LDD     R17, Z+3
   \   000004E8   5F0F               SUBI    R16, 255
   \   000004EA   4F1F               SBCI    R17, 255
   \   000004EC   8302               STD     Z+2, R16
   \   000004EE   8313               STD     Z+3, R17
    335          
    336              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000004F0   2F0A               MOV     R16, R26
   \   000004F2   E010               LDI     R17, 0
   \   000004F4   E14A               LDI     R20, 26
   \   000004F6   E050               LDI     R21, 0
   \   000004F8   ........           CALL    ?S_EC_MUL_L02
   \   000004FC   01F8               MOVW    R31:R30, R17:R16
   \   000004FE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000500   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000502   8122               LDD     R18, Z+2
   \   00000504   8133               LDD     R19, Z+3
   \   00000506   2D04               MOV     R16, R4
   \   00000508   1B20               SUB     R18, R16
   \   0000050A   5022               SUBI    R18, 2
   \   0000050C   2F0A               MOV     R16, R26
   \   0000050E   E010               LDI     R17, 0
   \   00000510   E14A               LDI     R20, 26
   \   00000512   E050               LDI     R21, 0
   \   00000514   ........           CALL    ?S_EC_MUL_L02
   \   00000518   01F8               MOVW    R31:R30, R17:R16
   \   0000051A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000051C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000051E   8100               LD      R16, Z
   \   00000520   8111               LDD     R17, Z+1
   \   00000522   0D04               ADD     R16, R4
   \   00000524   1D15               ADC     R17, R5
   \   00000526   01F8               MOVW    R31:R30, R17:R16
   \   00000528   8320               ST      Z, R18
    337              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000052A   2F0A               MOV     R16, R26
   \   0000052C   E010               LDI     R17, 0
   \   0000052E   E14A               LDI     R20, 26
   \   00000530   E050               LDI     R21, 0
   \   00000532   ........           CALL    ?S_EC_MUL_L02
   \   00000536   01F8               MOVW    R31:R30, R17:R16
   \   00000538   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000053A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000053C   8182               LDD     R24, Z+2
   \   0000053E   8193               LDD     R25, Z+3
   \   00000540   1984               SUB     R24, R4
   \   00000542   0995               SBC     R25, R5
   \   00000544   9702               SBIW    R25:R24, 2
   \   00000546   2F89               MOV     R24, R25
   \   00000548   E090               LDI     R25, 0
   \   0000054A   2F0A               MOV     R16, R26
   \   0000054C   E010               LDI     R17, 0
   \   0000054E   E14A               LDI     R20, 26
   \   00000550   E050               LDI     R21, 0
   \   00000552   ........           CALL    ?S_EC_MUL_L02
   \   00000556   01F8               MOVW    R31:R30, R17:R16
   \   00000558   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000055A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000055C   8100               LD      R16, Z
   \   0000055E   8111               LDD     R17, Z+1
   \   00000560   0D04               ADD     R16, R4
   \   00000562   1D15               ADC     R17, R5
   \   00000564   01F8               MOVW    R31:R30, R17:R16
   \   00000566   8381               STD     Z+1, R24
    338          
    339              RestartStatus = 0 ;                                                       // set reset stat to 0 = read
   \   00000568   E000               LDI     R16, 0
   \   0000056A   9300....           STS     RestartStatus, R16
    340          }
   \   0000056E   E0E6               LDI     R30, 6
   \   00000570   ........           JMP     ?EPILOGUE_B6_L09
    341          
    342          /*************************************************************************
    343          *
    344          * Build EEPROM data package
    345          *
    346          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    347          void BuildEEPROMData(char ch, short pointer) {
   \                     BuildEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    348          
    349              short ntna ;
    350              char channel;
    351              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F01               STD     Z+25, R16
    352          
    353              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA & 0xff;
   \   0000001E   2F08               MOV     R16, R24
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8120               LD      R18, Z
   \   00000032   8131               LDD     R19, Z+1
   \   00000034   2F08               MOV     R16, R24
   \   00000036   E010               LDI     R17, 0
   \   00000038   E14A               LDI     R20, 26
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F20               ADD     R18, R16
   \   0000004C   1F31               ADC     R19, R17
   \   0000004E   01F9               MOVW    R31:R30, R19:R18
   \   00000050   E309               LDI     R16, 57
   \   00000052   8300               ST      Z, R16
   \   00000054   2F08               MOV     R16, R24
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14A               LDI     R20, 26
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    354              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA >> 8;
   \   00000072   2F08               MOV     R16, R24
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8120               LD      R18, Z
   \   00000086   8131               LDD     R19, Z+1
   \   00000088   2F08               MOV     R16, R24
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F20               ADD     R18, R16
   \   000000A0   1F31               ADC     R19, R17
   \   000000A2   01F9               MOVW    R31:R30, R19:R18
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F08               MOV     R16, R24
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E14A               LDI     R20, 26
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    355              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000C6   2F08               MOV     R16, R24
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E14A               LDI     R20, 26
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0128               MOVW    R5:R4, R17:R16
    356              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DE   2F08               MOV     R16, R24
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E14A               LDI     R20, 26
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    357          
    358              channel = UART[ch].pRxBuffer[pointer];
   \   000000FC   2F08               MOV     R16, R24
   \   000000FE   E010               LDI     R17, 0
   \   00000100   E14A               LDI     R20, 26
   \   00000102   E050               LDI     R21, 0
   \   00000104   ........           CALL    ?S_EC_MUL_L02
   \   00000108   01F8               MOVW    R31:R30, R17:R16
   \   0000010A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000010C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010E   8502               LDD     R16, Z+10
   \   00000110   8513               LDD     R17, Z+11
   \   00000112   0F0A               ADD     R16, R26
   \   00000114   1F1B               ADC     R17, R27
   \   00000116   01F8               MOVW    R31:R30, R17:R16
   \   00000118   8100               LD      R16, Z
   \   0000011A   2E60               MOV     R6, R16
    359              UART[ch].pTxBuffer[UART[ch].TxFirst++] = channel; //channel
   \   0000011C   2F08               MOV     R16, R24
   \   0000011E   E010               LDI     R17, 0
   \   00000120   E14A               LDI     R20, 26
   \   00000122   E050               LDI     R21, 0
   \   00000124   ........           CALL    ?S_EC_MUL_L02
   \   00000128   01F8               MOVW    R31:R30, R17:R16
   \   0000012A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012E   8120               LD      R18, Z
   \   00000130   8131               LDD     R19, Z+1
   \   00000132   2F08               MOV     R16, R24
   \   00000134   E010               LDI     R17, 0
   \   00000136   E14A               LDI     R20, 26
   \   00000138   E050               LDI     R21, 0
   \   0000013A   ........           CALL    ?S_EC_MUL_L02
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000144   8102               LDD     R16, Z+2
   \   00000146   8113               LDD     R17, Z+3
   \   00000148   0F20               ADD     R18, R16
   \   0000014A   1F31               ADC     R19, R17
   \   0000014C   01F9               MOVW    R31:R30, R19:R18
   \   0000014E   8260               ST      Z, R6
   \   00000150   2F08               MOV     R16, R24
   \   00000152   E010               LDI     R17, 0
   \   00000154   E14A               LDI     R20, 26
   \   00000156   E050               LDI     R21, 0
   \   00000158   ........           CALL    ?S_EC_MUL_L02
   \   0000015C   01F8               MOVW    R31:R30, R17:R16
   \   0000015E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000160   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000162   8102               LDD     R16, Z+2
   \   00000164   8113               LDD     R17, Z+3
   \   00000166   5F0F               SUBI    R16, 255
   \   00000168   4F1F               SBCI    R17, 255
   \   0000016A   8302               STD     Z+2, R16
   \   0000016C   8313               STD     Z+3, R17
    360          
    361              ReadEEPROMBuffer( (channel * sizeof(float)* 2) , sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \   0000016E   2F08               MOV     R16, R24
   \   00000170   E010               LDI     R17, 0
   \   00000172   E14A               LDI     R20, 26
   \   00000174   E050               LDI     R21, 0
   \   00000176   ........           CALL    ?S_EC_MUL_L02
   \   0000017A   01F8               MOVW    R31:R30, R17:R16
   \   0000017C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000017E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000180   8120               LD      R18, Z
   \   00000182   8131               LDD     R19, Z+1
   \   00000184   2F08               MOV     R16, R24
   \   00000186   E010               LDI     R17, 0
   \   00000188   E14A               LDI     R20, 26
   \   0000018A   E050               LDI     R21, 0
   \   0000018C   ........           CALL    ?S_EC_MUL_L02
   \   00000190   01F8               MOVW    R31:R30, R17:R16
   \   00000192   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000194   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000196   8102               LDD     R16, Z+2
   \   00000198   8113               LDD     R17, Z+3
   \   0000019A   0F20               ADD     R18, R16
   \   0000019C   1F31               ADC     R19, R17
   \   0000019E   01A9               MOVW    R21:R20, R19:R18
   \   000001A0   E024               LDI     R18, 4
   \   000001A2   01BA               MOVW    R23:R22, R21:R20
   \   000001A4   2D06               MOV     R16, R6
   \   000001A6   E010               LDI     R17, 0
   \   000001A8   E048               LDI     R20, 8
   \   000001AA   E050               LDI     R21, 0
   \   000001AC   ........           CALL    ?S_EC_MUL_L02
   \   000001B0   01AB               MOVW    R21:R20, R23:R22
   \   000001B2   ........           CALL    ReadEEPROMBuffer
    362              UART[ch].TxFirst += sizeof(float) ;
   \   000001B6   2F08               MOV     R16, R24
   \   000001B8   E010               LDI     R17, 0
   \   000001BA   E14A               LDI     R20, 26
   \   000001BC   E050               LDI     R21, 0
   \   000001BE   ........           CALL    ?S_EC_MUL_L02
   \   000001C2   01F8               MOVW    R31:R30, R17:R16
   \   000001C4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001C8   8102               LDD     R16, Z+2
   \   000001CA   8113               LDD     R17, Z+3
   \   000001CC   5F0C               SUBI    R16, 252
   \   000001CE   4F1F               SBCI    R17, 255
   \   000001D0   8302               STD     Z+2, R16
   \   000001D2   8313               STD     Z+3, R17
    363              ReadEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \   000001D4   2F08               MOV     R16, R24
   \   000001D6   E010               LDI     R17, 0
   \   000001D8   E14A               LDI     R20, 26
   \   000001DA   E050               LDI     R21, 0
   \   000001DC   ........           CALL    ?S_EC_MUL_L02
   \   000001E0   01F8               MOVW    R31:R30, R17:R16
   \   000001E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E6   8120               LD      R18, Z
   \   000001E8   8131               LDD     R19, Z+1
   \   000001EA   2F08               MOV     R16, R24
   \   000001EC   E010               LDI     R17, 0
   \   000001EE   E14A               LDI     R20, 26
   \   000001F0   E050               LDI     R21, 0
   \   000001F2   ........           CALL    ?S_EC_MUL_L02
   \   000001F6   01F8               MOVW    R31:R30, R17:R16
   \   000001F8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001FA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001FC   8102               LDD     R16, Z+2
   \   000001FE   8113               LDD     R17, Z+3
   \   00000200   0F20               ADD     R18, R16
   \   00000202   1F31               ADC     R19, R17
   \   00000204   01A9               MOVW    R21:R20, R19:R18
   \   00000206   E024               LDI     R18, 4
   \   00000208   01BA               MOVW    R23:R22, R21:R20
   \   0000020A   2D06               MOV     R16, R6
   \   0000020C   E010               LDI     R17, 0
   \   0000020E   E048               LDI     R20, 8
   \   00000210   E050               LDI     R21, 0
   \   00000212   ........           CALL    ?S_EC_MUL_L02
   \   00000216   5F0C               SUBI    R16, 252
   \   00000218   4F1F               SBCI    R17, 255
   \   0000021A   01AB               MOVW    R21:R20, R23:R22
   \   0000021C   ........           CALL    ReadEEPROMBuffer
    364              UART[ch].TxFirst += sizeof(float) ;
   \   00000220   2F08               MOV     R16, R24
   \   00000222   E010               LDI     R17, 0
   \   00000224   E14A               LDI     R20, 26
   \   00000226   E050               LDI     R21, 0
   \   00000228   ........           CALL    ?S_EC_MUL_L02
   \   0000022C   01F8               MOVW    R31:R30, R17:R16
   \   0000022E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000230   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000232   8102               LDD     R16, Z+2
   \   00000234   8113               LDD     R17, Z+3
   \   00000236   5F0C               SUBI    R16, 252
   \   00000238   4F1F               SBCI    R17, 255
   \   0000023A   8302               STD     Z+2, R16
   \   0000023C   8313               STD     Z+3, R17
    365          
    366              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000023E   2F08               MOV     R16, R24
   \   00000240   E010               LDI     R17, 0
   \   00000242   E14A               LDI     R20, 26
   \   00000244   E050               LDI     R21, 0
   \   00000246   ........           CALL    ?S_EC_MUL_L02
   \   0000024A   01F8               MOVW    R31:R30, R17:R16
   \   0000024C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000024E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000250   8122               LDD     R18, Z+2
   \   00000252   8133               LDD     R19, Z+3
   \   00000254   2D04               MOV     R16, R4
   \   00000256   1B20               SUB     R18, R16
   \   00000258   5022               SUBI    R18, 2
   \   0000025A   2F08               MOV     R16, R24
   \   0000025C   E010               LDI     R17, 0
   \   0000025E   E14A               LDI     R20, 26
   \   00000260   E050               LDI     R21, 0
   \   00000262   ........           CALL    ?S_EC_MUL_L02
   \   00000266   01F8               MOVW    R31:R30, R17:R16
   \   00000268   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000026A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000026C   8100               LD      R16, Z
   \   0000026E   8111               LDD     R17, Z+1
   \   00000270   0D04               ADD     R16, R4
   \   00000272   1D15               ADC     R17, R5
   \   00000274   01F8               MOVW    R31:R30, R17:R16
   \   00000276   8320               ST      Z, R18
    367              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000278   2F08               MOV     R16, R24
   \   0000027A   E010               LDI     R17, 0
   \   0000027C   E14A               LDI     R20, 26
   \   0000027E   E050               LDI     R21, 0
   \   00000280   ........           CALL    ?S_EC_MUL_L02
   \   00000284   01F8               MOVW    R31:R30, R17:R16
   \   00000286   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000288   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000028A   8102               LDD     R16, Z+2
   \   0000028C   8113               LDD     R17, Z+3
   \   0000028E   1904               SUB     R16, R4
   \   00000290   0915               SBC     R17, R5
   \   00000292   5002               SUBI    R16, 2
   \   00000294   4010               SBCI    R17, 0
   \   00000296   2F01               MOV     R16, R17
   \   00000298   E010               LDI     R17, 0
   \   0000029A   2F20               MOV     R18, R16
   \   0000029C   2F08               MOV     R16, R24
   \   0000029E   E010               LDI     R17, 0
   \   000002A0   E14A               LDI     R20, 26
   \   000002A2   E050               LDI     R21, 0
   \   000002A4   ........           CALL    ?S_EC_MUL_L02
   \   000002A8   01F8               MOVW    R31:R30, R17:R16
   \   000002AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002AE   8100               LD      R16, Z
   \   000002B0   8111               LDD     R17, Z+1
   \   000002B2   0D04               ADD     R16, R4
   \   000002B4   1D15               ADC     R17, R5
   \   000002B6   01F8               MOVW    R31:R30, R17:R16
   \   000002B8   8321               STD     Z+1, R18
    368          }
   \   000002BA   E0E7               LDI     R30, 7
   \   000002BC   ........           JMP     ?EPILOGUE_B7_L09
    369          
    370          
    371          /*************************************************************************
    372          *
    373          * Build datablock for Internal AD
    374          *
    375          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    376          void BuildADInt(char ch, short pointer) {
   \                     BuildADInt:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
    377          
    378              short ntna, i ;
    379              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01D8               MOVW    R27:R26, R17:R16
   \   00000016   ....               SUBI    R26, LOW((-(UART + 25) & 0xFFFF))
   \   00000018   ....               SBCI    R27, HIGH((-(UART + 25) & 0xFFFF))
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   930C               ST      X, R16
    380          
    381              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA & 0xff;
   \   0000001E   2F06               MOV     R16, R22
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01D8               MOVW    R27:R26, R17:R16
   \   0000002C   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000030   918D               LD      R24, X+
   \   00000032   919C               LD      R25, X
   \   00000034   9711               SBIW    R27:R26, 1
   \   00000036   2F06               MOV     R16, R22
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14A               LDI     R20, 26
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01D8               MOVW    R27:R26, R17:R16
   \   00000044   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   00000046   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000048   910D               LD      R16, X+
   \   0000004A   911C               LD      R17, X
   \   0000004C   9711               SBIW    R27:R26, 1
   \   0000004E   0F80               ADD     R24, R16
   \   00000050   1F91               ADC     R25, R17
   \   00000052   01DC               MOVW    R27:R26, R25:R24
   \   00000054   E403               LDI     R16, 67
   \   00000056   930C               ST      X, R16
   \   00000058   2F06               MOV     R16, R22
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E14A               LDI     R20, 26
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01D8               MOVW    R27:R26, R17:R16
   \   00000066   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   00000068   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   0000006A   910D               LD      R16, X+
   \   0000006C   911C               LD      R17, X
   \   0000006E   5F0F               SUBI    R16, 255
   \   00000070   4F1F               SBCI    R17, 255
   \   00000072   931C               ST      X, R17
   \   00000074   930E               ST      -X, R16
    382              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA >> 8;
   \   00000076   2F06               MOV     R16, R22
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E14A               LDI     R20, 26
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   01D8               MOVW    R27:R26, R17:R16
   \   00000084   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000086   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000088   918D               LD      R24, X+
   \   0000008A   919C               LD      R25, X
   \   0000008C   9711               SBIW    R27:R26, 1
   \   0000008E   2F06               MOV     R16, R22
   \   00000090   E010               LDI     R17, 0
   \   00000092   E14A               LDI     R20, 26
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01D8               MOVW    R27:R26, R17:R16
   \   0000009C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000009E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000000A0   910D               LD      R16, X+
   \   000000A2   911C               LD      R17, X
   \   000000A4   9711               SBIW    R27:R26, 1
   \   000000A6   0F80               ADD     R24, R16
   \   000000A8   1F91               ADC     R25, R17
   \   000000AA   01DC               MOVW    R27:R26, R25:R24
   \   000000AC   E004               LDI     R16, 4
   \   000000AE   930C               ST      X, R16
   \   000000B0   2F06               MOV     R16, R22
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   E14A               LDI     R20, 26
   \   000000B6   E050               LDI     R21, 0
   \   000000B8   ........           CALL    ?S_EC_MUL_L02
   \   000000BC   01D8               MOVW    R27:R26, R17:R16
   \   000000BE   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000000C0   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000000C2   910D               LD      R16, X+
   \   000000C4   911C               LD      R17, X
   \   000000C6   5F0F               SUBI    R16, 255
   \   000000C8   4F1F               SBCI    R17, 255
   \   000000CA   931C               ST      X, R17
   \   000000CC   930E               ST      -X, R16
    383              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000CE   2F06               MOV     R16, R22
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   E14A               LDI     R20, 26
   \   000000D4   E050               LDI     R21, 0
   \   000000D6   ........           CALL    ?S_EC_MUL_L02
   \   000000DA   01D8               MOVW    R27:R26, R17:R16
   \   000000DC   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000000DE   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000000E0   910D               LD      R16, X+
   \   000000E2   911C               LD      R17, X
   \   000000E4   9711               SBIW    R27:R26, 1
   \   000000E6   0198               MOVW    R19:R18, R17:R16
    384              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000E8   2F06               MOV     R16, R22
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   E14A               LDI     R20, 26
   \   000000EE   E050               LDI     R21, 0
   \   000000F0   ........           CALL    ?S_EC_MUL_L02
   \   000000F4   01D8               MOVW    R27:R26, R17:R16
   \   000000F6   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000000F8   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000000FA   910D               LD      R16, X+
   \   000000FC   911C               LD      R17, X
   \   000000FE   5F0E               SUBI    R16, 254
   \   00000100   4F1F               SBCI    R17, 255
   \   00000102   931C               ST      X, R17
   \   00000104   930E               ST      -X, R16
    385          
    386              for (i = 0; i<3; i++) {
   \   00000106   E0E0               LDI     R30, 0
   \   00000108   E0F0               LDI     R31, 0
   \                     ??BuildADInt_0:
   \   0000010A   30E3               CPI     R30, 3
   \   0000010C   E000               LDI     R16, 0
   \   0000010E   07F0               CPC     R31, R16
   \   00000110   F00C               BRLT    $+2+2
   \   00000112   C06D               RJMP    ??BuildADInt_1
    387                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] ;
   \   00000114   018F               MOVW    R17:R16, R31:R30
   \   00000116   0F00               LSL     R16
   \   00000118   1F11               ROL     R17
   \   0000011A   01D8               MOVW    R27:R26, R17:R16
   \   0000011C   ....               SUBI    R26, LOW((-(ADInt) & 0xFFFF))
   \   0000011E   ....               SBCI    R27, (-(ADInt) & 0xFFFF) >> 8
   \   00000120   904D               LD      R4, X+
   \   00000122   905C               LD      R5, X
   \   00000124   9711               SBIW    R27:R26, 1
   \   00000126   2F06               MOV     R16, R22
   \   00000128   E010               LDI     R17, 0
   \   0000012A   E14A               LDI     R20, 26
   \   0000012C   E050               LDI     R21, 0
   \   0000012E   ........           CALL    ?S_EC_MUL_L02
   \   00000132   01D8               MOVW    R27:R26, R17:R16
   \   00000134   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000136   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000138   918D               LD      R24, X+
   \   0000013A   919C               LD      R25, X
   \   0000013C   9711               SBIW    R27:R26, 1
   \   0000013E   2F06               MOV     R16, R22
   \   00000140   E010               LDI     R17, 0
   \   00000142   E14A               LDI     R20, 26
   \   00000144   E050               LDI     R21, 0
   \   00000146   ........           CALL    ?S_EC_MUL_L02
   \   0000014A   01D8               MOVW    R27:R26, R17:R16
   \   0000014C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000014E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000150   910D               LD      R16, X+
   \   00000152   911C               LD      R17, X
   \   00000154   9711               SBIW    R27:R26, 1
   \   00000156   0F80               ADD     R24, R16
   \   00000158   1F91               ADC     R25, R17
   \   0000015A   01DC               MOVW    R27:R26, R25:R24
   \   0000015C   924C               ST      X, R4
   \   0000015E   2F06               MOV     R16, R22
   \   00000160   E010               LDI     R17, 0
   \   00000162   E14A               LDI     R20, 26
   \   00000164   E050               LDI     R21, 0
   \   00000166   ........           CALL    ?S_EC_MUL_L02
   \   0000016A   01D8               MOVW    R27:R26, R17:R16
   \   0000016C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000016E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000170   910D               LD      R16, X+
   \   00000172   911C               LD      R17, X
   \   00000174   5F0F               SUBI    R16, 255
   \   00000176   4F1F               SBCI    R17, 255
   \   00000178   931C               ST      X, R17
   \   0000017A   930E               ST      -X, R16
    388                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] >> 8 ;   // ADresult
   \   0000017C   018F               MOVW    R17:R16, R31:R30
   \   0000017E   0F00               LSL     R16
   \   00000180   1F11               ROL     R17
   \   00000182   01D8               MOVW    R27:R26, R17:R16
   \   00000184   ....               SUBI    R26, LOW((-(ADInt) & 0xFFFF))
   \   00000186   ....               SBCI    R27, (-(ADInt) & 0xFFFF) >> 8
   \   00000188   904D               LD      R4, X+
   \   0000018A   905C               LD      R5, X
   \   0000018C   9711               SBIW    R27:R26, 1
   \   0000018E   2C45               MOV     R4, R5
   \   00000190   0C55               LSL     R5
   \   00000192   0855               SBC     R5, R5
   \   00000194   2F06               MOV     R16, R22
   \   00000196   E010               LDI     R17, 0
   \   00000198   E14A               LDI     R20, 26
   \   0000019A   E050               LDI     R21, 0
   \   0000019C   ........           CALL    ?S_EC_MUL_L02
   \   000001A0   01D8               MOVW    R27:R26, R17:R16
   \   000001A2   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   000001A4   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   000001A6   918D               LD      R24, X+
   \   000001A8   919C               LD      R25, X
   \   000001AA   9711               SBIW    R27:R26, 1
   \   000001AC   2F06               MOV     R16, R22
   \   000001AE   E010               LDI     R17, 0
   \   000001B0   E14A               LDI     R20, 26
   \   000001B2   E050               LDI     R21, 0
   \   000001B4   ........           CALL    ?S_EC_MUL_L02
   \   000001B8   01D8               MOVW    R27:R26, R17:R16
   \   000001BA   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000001BC   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000001BE   910D               LD      R16, X+
   \   000001C0   911C               LD      R17, X
   \   000001C2   9711               SBIW    R27:R26, 1
   \   000001C4   0F80               ADD     R24, R16
   \   000001C6   1F91               ADC     R25, R17
   \   000001C8   01DC               MOVW    R27:R26, R25:R24
   \   000001CA   924C               ST      X, R4
   \   000001CC   2F06               MOV     R16, R22
   \   000001CE   E010               LDI     R17, 0
   \   000001D0   E14A               LDI     R20, 26
   \   000001D2   E050               LDI     R21, 0
   \   000001D4   ........           CALL    ?S_EC_MUL_L02
   \   000001D8   01D8               MOVW    R27:R26, R17:R16
   \   000001DA   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000001DC   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000001DE   910D               LD      R16, X+
   \   000001E0   911C               LD      R17, X
   \   000001E2   5F0F               SUBI    R16, 255
   \   000001E4   4F1F               SBCI    R17, 255
   \   000001E6   931C               ST      X, R17
   \   000001E8   930E               ST      -X, R16
    389              }
   \   000001EA   9631               ADIW    R31:R30, 1
   \   000001EC   CF8E               RJMP    ??BuildADInt_0
    390          
    391              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildADInt_1:
   \   000001EE   2F06               MOV     R16, R22
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E14A               LDI     R20, 26
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   01D8               MOVW    R27:R26, R17:R16
   \   000001FC   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   000001FE   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000200   918D               LD      R24, X+
   \   00000202   919C               LD      R25, X
   \   00000204   9711               SBIW    R27:R26, 1
   \   00000206   2F02               MOV     R16, R18
   \   00000208   1B80               SUB     R24, R16
   \   0000020A   5082               SUBI    R24, 2
   \   0000020C   2F06               MOV     R16, R22
   \   0000020E   E010               LDI     R17, 0
   \   00000210   E14A               LDI     R20, 26
   \   00000212   E050               LDI     R21, 0
   \   00000214   ........           CALL    ?S_EC_MUL_L02
   \   00000218   01D8               MOVW    R27:R26, R17:R16
   \   0000021A   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000021C   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   0000021E   910D               LD      R16, X+
   \   00000220   911C               LD      R17, X
   \   00000222   9711               SBIW    R27:R26, 1
   \   00000224   0F02               ADD     R16, R18
   \   00000226   1F13               ADC     R17, R19
   \   00000228   01D8               MOVW    R27:R26, R17:R16
   \   0000022A   938C               ST      X, R24
    392              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000022C   2F06               MOV     R16, R22
   \   0000022E   E010               LDI     R17, 0
   \   00000230   E14A               LDI     R20, 26
   \   00000232   E050               LDI     R21, 0
   \   00000234   ........           CALL    ?S_EC_MUL_L02
   \   00000238   01D8               MOVW    R27:R26, R17:R16
   \   0000023A   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000023C   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   0000023E   918D               LD      R24, X+
   \   00000240   919C               LD      R25, X
   \   00000242   9711               SBIW    R27:R26, 1
   \   00000244   1B82               SUB     R24, R18
   \   00000246   0B93               SBC     R25, R19
   \   00000248   9702               SBIW    R25:R24, 2
   \   0000024A   2F89               MOV     R24, R25
   \   0000024C   E090               LDI     R25, 0
   \   0000024E   2F06               MOV     R16, R22
   \   00000250   E010               LDI     R17, 0
   \   00000252   E14A               LDI     R20, 26
   \   00000254   E050               LDI     R21, 0
   \   00000256   ........           CALL    ?S_EC_MUL_L02
   \   0000025A   01D8               MOVW    R27:R26, R17:R16
   \   0000025C   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000025E   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000260   910D               LD      R16, X+
   \   00000262   911C               LD      R17, X
   \   00000264   9711               SBIW    R27:R26, 1
   \   00000266   0F02               ADD     R16, R18
   \   00000268   1F13               ADC     R17, R19
   \   0000026A   01D8               MOVW    R27:R26, R17:R16
   \   0000026C   9611               ADIW    R27:R26, 1
   \   0000026E   938C               ST      X, R24
   \   00000270   9711               SBIW    R27:R26, 1
    393          
    394          }
   \   00000272   E0E6               LDI     R30, 6
   \   00000274   ........           JMP     ?EPILOGUE_B6_L09
    395          
    396          
    397          /*************************************************************************
    398          *
    399          * Build datablock for eeprom on ADcard
    400          *
    401          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    402          void BuildADEpromdata(char ch, char portch) {
   \                     BuildADEpromdata:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F20               MOV     R18, R16
   \   00000006   2E21               MOV     R2, R17
    403          
    404              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   2F02               MOV     R16, R18
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F01               STD     Z+25, R16
    405          
    406              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF & 0xff;
   \   0000001E   2F02               MOV     R16, R18
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8160               LD      R22, Z
   \   00000032   8171               LDD     R23, Z+1
   \   00000034   2F02               MOV     R16, R18
   \   00000036   E010               LDI     R17, 0
   \   00000038   E14A               LDI     R20, 26
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F60               ADD     R22, R16
   \   0000004C   1F71               ADC     R23, R17
   \   0000004E   01FB               MOVW    R31:R30, R23:R22
   \   00000050   E809               LDI     R16, 137
   \   00000052   8300               ST      Z, R16
   \   00000054   2F02               MOV     R16, R18
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14A               LDI     R20, 26
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    407              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF >> 8;
   \   00000072   2F02               MOV     R16, R18
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8160               LD      R22, Z
   \   00000086   8171               LDD     R23, Z+1
   \   00000088   2F02               MOV     R16, R18
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F60               ADD     R22, R16
   \   000000A0   1F71               ADC     R23, R17
   \   000000A2   01FB               MOVW    R31:R30, R23:R22
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F02               MOV     R16, R18
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E14A               LDI     R20, 26
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    408              short ntna = UART[ch].TxFirst ;                                    // remember index
   \   000000C6   2F02               MOV     R16, R18
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E14A               LDI     R20, 26
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8162               LDD     R22, Z+2
   \   000000DA   8173               LDD     R23, Z+3
    409              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DC   2F02               MOV     R16, R18
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E14A               LDI     R20, 26
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EE   8102               LDD     R16, Z+2
   \   000000F0   8113               LDD     R17, Z+3
   \   000000F2   5F0E               SUBI    R16, 254
   \   000000F4   4F1F               SBCI    R17, 255
   \   000000F6   8302               STD     Z+2, R16
   \   000000F8   8313               STD     Z+3, R17
    410          
    411              for (short i = 0; i < 44; i++) {
   \   000000FA   E080               LDI     R24, 0
   \   000000FC   E090               LDI     R25, 0
   \                     ??BuildADEpromdata_0:
   \   000000FE   328C               CPI     R24, 44
   \   00000100   E000               LDI     R16, 0
   \   00000102   0790               CPC     R25, R16
   \   00000104   F5C4               BRGE    ??BuildADEpromdata_1
    412                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FromTargetBuffer[portch][i] ;
   \   00000106   ....               LDI     R30, LOW((TData + 1428))
   \   00000108   ....               LDI     R31, HIGH((TData + 1428))
   \   0000010A   0FE8               ADD     R30, R24
   \   0000010C   1FF9               ADC     R31, R25
   \   0000010E   2D02               MOV     R16, R2
   \   00000110   E010               LDI     R17, 0
   \   00000112   E342               LDI     R20, 50
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   0FE0               ADD     R30, R16
   \   0000011C   1FF1               ADC     R31, R17
   \   0000011E   8130               LD      R19, Z
   \   00000120   2F02               MOV     R16, R18
   \   00000122   E010               LDI     R17, 0
   \   00000124   E14A               LDI     R20, 26
   \   00000126   E050               LDI     R21, 0
   \   00000128   ........           CALL    ?S_EC_MUL_L02
   \   0000012C   01F8               MOVW    R31:R30, R17:R16
   \   0000012E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000130   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000132   81A0               LD      R26, Z
   \   00000134   81B1               LDD     R27, Z+1
   \   00000136   2F02               MOV     R16, R18
   \   00000138   E010               LDI     R17, 0
   \   0000013A   E14A               LDI     R20, 26
   \   0000013C   E050               LDI     R21, 0
   \   0000013E   ........           CALL    ?S_EC_MUL_L02
   \   00000142   01F8               MOVW    R31:R30, R17:R16
   \   00000144   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000146   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000148   8102               LDD     R16, Z+2
   \   0000014A   8113               LDD     R17, Z+3
   \   0000014C   0FA0               ADD     R26, R16
   \   0000014E   1FB1               ADC     R27, R17
   \   00000150   01FD               MOVW    R31:R30, R27:R26
   \   00000152   8330               ST      Z, R19
   \   00000154   2F02               MOV     R16, R18
   \   00000156   E010               LDI     R17, 0
   \   00000158   E14A               LDI     R20, 26
   \   0000015A   E050               LDI     R21, 0
   \   0000015C   ........           CALL    ?S_EC_MUL_L02
   \   00000160   01F8               MOVW    R31:R30, R17:R16
   \   00000162   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000164   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000166   8102               LDD     R16, Z+2
   \   00000168   8113               LDD     R17, Z+3
   \   0000016A   5F0F               SUBI    R16, 255
   \   0000016C   4F1F               SBCI    R17, 255
   \   0000016E   8302               STD     Z+2, R16
   \   00000170   8313               STD     Z+3, R17
    413              }
   \   00000172   9601               ADIW    R25:R24, 1
   \   00000174   CFC4               RJMP    ??BuildADEpromdata_0
    414              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \                     ??BuildADEpromdata_1:
   \   00000176   2F02               MOV     R16, R18
   \   00000178   E010               LDI     R17, 0
   \   0000017A   E14A               LDI     R20, 26
   \   0000017C   E050               LDI     R21, 0
   \   0000017E   ........           CALL    ?S_EC_MUL_L02
   \   00000182   01F8               MOVW    R31:R30, R17:R16
   \   00000184   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000186   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000188   8182               LDD     R24, Z+2
   \   0000018A   8193               LDD     R25, Z+3
   \   0000018C   2F06               MOV     R16, R22
   \   0000018E   1B80               SUB     R24, R16
   \   00000190   5082               SUBI    R24, 2
   \   00000192   2F02               MOV     R16, R18
   \   00000194   E010               LDI     R17, 0
   \   00000196   E14A               LDI     R20, 26
   \   00000198   E050               LDI     R21, 0
   \   0000019A   ........           CALL    ?S_EC_MUL_L02
   \   0000019E   01F8               MOVW    R31:R30, R17:R16
   \   000001A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A4   8100               LD      R16, Z
   \   000001A6   8111               LDD     R17, Z+1
   \   000001A8   0F06               ADD     R16, R22
   \   000001AA   1F17               ADC     R17, R23
   \   000001AC   01F8               MOVW    R31:R30, R17:R16
   \   000001AE   8380               ST      Z, R24
    415              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000001B0   2F02               MOV     R16, R18
   \   000001B2   E010               LDI     R17, 0
   \   000001B4   E14A               LDI     R20, 26
   \   000001B6   E050               LDI     R21, 0
   \   000001B8   ........           CALL    ?S_EC_MUL_L02
   \   000001BC   01F8               MOVW    R31:R30, R17:R16
   \   000001BE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001C2   8182               LDD     R24, Z+2
   \   000001C4   8193               LDD     R25, Z+3
   \   000001C6   1B86               SUB     R24, R22
   \   000001C8   0B97               SBC     R25, R23
   \   000001CA   9702               SBIW    R25:R24, 2
   \   000001CC   2F89               MOV     R24, R25
   \   000001CE   E090               LDI     R25, 0
   \   000001D0   2F02               MOV     R16, R18
   \   000001D2   E010               LDI     R17, 0
   \   000001D4   E14A               LDI     R20, 26
   \   000001D6   E050               LDI     R21, 0
   \   000001D8   ........           CALL    ?S_EC_MUL_L02
   \   000001DC   01F8               MOVW    R31:R30, R17:R16
   \   000001DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E2   8100               LD      R16, Z
   \   000001E4   8111               LDD     R17, Z+1
   \   000001E6   0F06               ADD     R16, R22
   \   000001E8   1F17               ADC     R17, R23
   \   000001EA   01F8               MOVW    R31:R30, R17:R16
   \   000001EC   8381               STD     Z+1, R24
    416          
    417          }
   \   000001EE   E0E4               LDI     R30, 4
   \   000001F0   ........           JMP     ?EPILOGUE_B4_L09
    418          
    419          /*************************************************************************
    420          *
    421          * Build datablock for WHData on ADcard
    422          *
    423          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    424          void BuildWHdata(char ch, short pointer) {
   \                     BuildWHdata:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    425          
    426              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F01               STD     Z+25, R16
    427          
    428              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF & 0xff;
   \   0000001E   2F08               MOV     R16, R24
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8120               LD      R18, Z
   \   00000032   8131               LDD     R19, Z+1
   \   00000034   2F08               MOV     R16, R24
   \   00000036   E010               LDI     R17, 0
   \   00000038   E14A               LDI     R20, 26
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F20               ADD     R18, R16
   \   0000004C   1F31               ADC     R19, R17
   \   0000004E   01F9               MOVW    R31:R30, R19:R18
   \   00000050   E90C               LDI     R16, 156
   \   00000052   8300               ST      Z, R16
   \   00000054   2F08               MOV     R16, R24
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14A               LDI     R20, 26
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    429              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF >> 8;
   \   00000072   2F08               MOV     R16, R24
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8120               LD      R18, Z
   \   00000086   8131               LDD     R19, Z+1
   \   00000088   2F08               MOV     R16, R24
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F20               ADD     R18, R16
   \   000000A0   1F31               ADC     R19, R17
   \   000000A2   01F9               MOVW    R31:R30, R19:R18
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F08               MOV     R16, R24
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E14A               LDI     R20, 26
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    430              short ntna = UART[ch].TxFirst;                          // remember index
   \   000000C6   2F08               MOV     R16, R24
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E14A               LDI     R20, 26
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8062               LDD     R6, Z+2
   \   000000DA   8073               LDD     R7, Z+3
    431              UART[ch].TxFirst += 2;                                  // two byte length
   \   000000DC   2F08               MOV     R16, R24
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E14A               LDI     R20, 26
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EE   8102               LDD     R16, Z+2
   \   000000F0   8113               LDD     R17, Z+3
   \   000000F2   5F0E               SUBI    R16, 254
   \   000000F4   4F1F               SBCI    R17, 255
   \   000000F6   8302               STD     Z+2, R16
   \   000000F8   8313               STD     Z+3, R17
    432          
    433              OS_EnterRegion();
   \   000000FA   9100....           LDS     R16, OS_Counters
   \   000000FE   9503               INC     R16
   \   00000100   9300....           STS     OS_Counters, R16
    434              for (short i = 0; i < 4; i++) {
   \   00000104   E0E0               LDI     R30, 0
   \   00000106   E0F0               LDI     R31, 0
   \                     ??BuildWHdata_0:
   \   00000108   30E4               CPI     R30, 4
   \   0000010A   E000               LDI     R16, 0
   \   0000010C   07F0               CPC     R31, R16
   \   0000010E   F00C               BRLT    $+2+2
   \   00000110   C09E               RJMP    ??BuildWHdata_1
    435                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] & 0xff; // WashTrackcnt
   \   00000112   ....               LDI     R18, LOW((TData + 1179))
   \   00000114   ....               LDI     R19, HIGH((TData + 1179))
   \   00000116   018F               MOVW    R17:R16, R31:R30
   \   00000118   0F00               LSL     R16
   \   0000011A   1F11               ROL     R17
   \   0000011C   0F20               ADD     R18, R16
   \   0000011E   1F31               ADC     R19, R17
   \   00000120   2F08               MOV     R16, R24
   \   00000122   E010               LDI     R17, 0
   \   00000124   E14A               LDI     R20, 26
   \   00000126   E050               LDI     R21, 0
   \   00000128   ........           CALL    ?S_EC_MUL_L02
   \   0000012C   01D8               MOVW    R27:R26, R17:R16
   \   0000012E   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   00000130   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   00000132   910D               LD      R16, X+
   \   00000134   911C               LD      R17, X
   \   00000136   9711               SBIW    R27:R26, 1
   \   00000138   0D04               ADD     R16, R4
   \   0000013A   1D15               ADC     R17, R5
   \   0000013C   01D8               MOVW    R27:R26, R17:R16
   \   0000013E   910C               LD      R16, X
   \   00000140   E010               LDI     R17, 0
   \   00000142   E048               LDI     R20, 8
   \   00000144   E050               LDI     R21, 0
   \   00000146   ........           CALL    ?S_EC_MUL_L02
   \   0000014A   0F20               ADD     R18, R16
   \   0000014C   1F31               ADC     R19, R17
   \   0000014E   01D9               MOVW    R27:R26, R19:R18
   \   00000150   916D               LD      R22, X+
   \   00000152   917C               LD      R23, X
   \   00000154   9711               SBIW    R27:R26, 1
   \   00000156   2F08               MOV     R16, R24
   \   00000158   E010               LDI     R17, 0
   \   0000015A   E14A               LDI     R20, 26
   \   0000015C   E050               LDI     R21, 0
   \   0000015E   ........           CALL    ?S_EC_MUL_L02
   \   00000162   01D8               MOVW    R27:R26, R17:R16
   \   00000164   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000166   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000168   912D               LD      R18, X+
   \   0000016A   913C               LD      R19, X
   \   0000016C   9711               SBIW    R27:R26, 1
   \   0000016E   2F08               MOV     R16, R24
   \   00000170   E010               LDI     R17, 0
   \   00000172   E14A               LDI     R20, 26
   \   00000174   E050               LDI     R21, 0
   \   00000176   ........           CALL    ?S_EC_MUL_L02
   \   0000017A   01D8               MOVW    R27:R26, R17:R16
   \   0000017C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000017E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000180   910D               LD      R16, X+
   \   00000182   911C               LD      R17, X
   \   00000184   9711               SBIW    R27:R26, 1
   \   00000186   0F20               ADD     R18, R16
   \   00000188   1F31               ADC     R19, R17
   \   0000018A   01D9               MOVW    R27:R26, R19:R18
   \   0000018C   936C               ST      X, R22
   \   0000018E   2F08               MOV     R16, R24
   \   00000190   E010               LDI     R17, 0
   \   00000192   E14A               LDI     R20, 26
   \   00000194   E050               LDI     R21, 0
   \   00000196   ........           CALL    ?S_EC_MUL_L02
   \   0000019A   01D8               MOVW    R27:R26, R17:R16
   \   0000019C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000019E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   000001A0   910D               LD      R16, X+
   \   000001A2   911C               LD      R17, X
   \   000001A4   5F0F               SUBI    R16, 255
   \   000001A6   4F1F               SBCI    R17, 255
   \   000001A8   931C               ST      X, R17
   \   000001AA   930E               ST      -X, R16
    436                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] >> 8) & 0xff; // WashTrackcnt
   \   000001AC   ....               LDI     R18, LOW((TData + 1179))
   \   000001AE   ....               LDI     R19, HIGH((TData + 1179))
   \   000001B0   018F               MOVW    R17:R16, R31:R30
   \   000001B2   0F00               LSL     R16
   \   000001B4   1F11               ROL     R17
   \   000001B6   0F20               ADD     R18, R16
   \   000001B8   1F31               ADC     R19, R17
   \   000001BA   2F08               MOV     R16, R24
   \   000001BC   E010               LDI     R17, 0
   \   000001BE   E14A               LDI     R20, 26
   \   000001C0   E050               LDI     R21, 0
   \   000001C2   ........           CALL    ?S_EC_MUL_L02
   \   000001C6   01D8               MOVW    R27:R26, R17:R16
   \   000001C8   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   000001CA   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   000001CC   910D               LD      R16, X+
   \   000001CE   911C               LD      R17, X
   \   000001D0   9711               SBIW    R27:R26, 1
   \   000001D2   0D04               ADD     R16, R4
   \   000001D4   1D15               ADC     R17, R5
   \   000001D6   01D8               MOVW    R27:R26, R17:R16
   \   000001D8   910C               LD      R16, X
   \   000001DA   E010               LDI     R17, 0
   \   000001DC   E048               LDI     R20, 8
   \   000001DE   E050               LDI     R21, 0
   \   000001E0   ........           CALL    ?S_EC_MUL_L02
   \   000001E4   0F20               ADD     R18, R16
   \   000001E6   1F31               ADC     R19, R17
   \   000001E8   01D9               MOVW    R27:R26, R19:R18
   \   000001EA   916D               LD      R22, X+
   \   000001EC   917C               LD      R23, X
   \   000001EE   9711               SBIW    R27:R26, 1
   \   000001F0   2F67               MOV     R22, R23
   \   000001F2   E070               LDI     R23, 0
   \   000001F4   2F08               MOV     R16, R24
   \   000001F6   E010               LDI     R17, 0
   \   000001F8   E14A               LDI     R20, 26
   \   000001FA   E050               LDI     R21, 0
   \   000001FC   ........           CALL    ?S_EC_MUL_L02
   \   00000200   01D8               MOVW    R27:R26, R17:R16
   \   00000202   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000204   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000206   912D               LD      R18, X+
   \   00000208   913C               LD      R19, X
   \   0000020A   9711               SBIW    R27:R26, 1
   \   0000020C   2F08               MOV     R16, R24
   \   0000020E   E010               LDI     R17, 0
   \   00000210   E14A               LDI     R20, 26
   \   00000212   E050               LDI     R21, 0
   \   00000214   ........           CALL    ?S_EC_MUL_L02
   \   00000218   01D8               MOVW    R27:R26, R17:R16
   \   0000021A   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000021C   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   0000021E   910D               LD      R16, X+
   \   00000220   911C               LD      R17, X
   \   00000222   9711               SBIW    R27:R26, 1
   \   00000224   0F20               ADD     R18, R16
   \   00000226   1F31               ADC     R19, R17
   \   00000228   01D9               MOVW    R27:R26, R19:R18
   \   0000022A   936C               ST      X, R22
   \   0000022C   2F08               MOV     R16, R24
   \   0000022E   E010               LDI     R17, 0
   \   00000230   E14A               LDI     R20, 26
   \   00000232   E050               LDI     R21, 0
   \   00000234   ........           CALL    ?S_EC_MUL_L02
   \   00000238   01D8               MOVW    R27:R26, R17:R16
   \   0000023A   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000023C   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   0000023E   910D               LD      R16, X+
   \   00000240   911C               LD      R17, X
   \   00000242   5F0F               SUBI    R16, 255
   \   00000244   4F1F               SBCI    R17, 255
   \   00000246   931C               ST      X, R17
   \   00000248   930E               ST      -X, R16
    437              }
   \   0000024A   9631               ADIW    R31:R30, 1
   \   0000024C   CF5D               RJMP    ??BuildWHdata_0
    438              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.LevelSwitch[UART[ch].pRxBuffer[pointer]];
   \                     ??BuildWHdata_1:
   \   0000024E   2F08               MOV     R16, R24
   \   00000250   E010               LDI     R17, 0
   \   00000252   E14A               LDI     R20, 26
   \   00000254   E050               LDI     R21, 0
   \   00000256   ........           CALL    ?S_EC_MUL_L02
   \   0000025A   01F8               MOVW    R31:R30, R17:R16
   \   0000025C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000025E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000260   8502               LDD     R16, Z+10
   \   00000262   8513               LDD     R17, Z+11
   \   00000264   0D04               ADD     R16, R4
   \   00000266   1D15               ADC     R17, R5
   \   00000268   01F8               MOVW    R31:R30, R17:R16
   \   0000026A   8100               LD      R16, Z
   \   0000026C   E010               LDI     R17, 0
   \   0000026E   01F8               MOVW    R31:R30, R17:R16
   \   00000270   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   00000272   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000274   8160               LD      R22, Z
   \   00000276   2F08               MOV     R16, R24
   \   00000278   E010               LDI     R17, 0
   \   0000027A   E14A               LDI     R20, 26
   \   0000027C   E050               LDI     R21, 0
   \   0000027E   ........           CALL    ?S_EC_MUL_L02
   \   00000282   01F8               MOVW    R31:R30, R17:R16
   \   00000284   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000286   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000288   8120               LD      R18, Z
   \   0000028A   8131               LDD     R19, Z+1
   \   0000028C   2F08               MOV     R16, R24
   \   0000028E   E010               LDI     R17, 0
   \   00000290   E14A               LDI     R20, 26
   \   00000292   E050               LDI     R21, 0
   \   00000294   ........           CALL    ?S_EC_MUL_L02
   \   00000298   01F8               MOVW    R31:R30, R17:R16
   \   0000029A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000029C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000029E   8102               LDD     R16, Z+2
   \   000002A0   8113               LDD     R17, Z+3
   \   000002A2   0F20               ADD     R18, R16
   \   000002A4   1F31               ADC     R19, R17
   \   000002A6   01F9               MOVW    R31:R30, R19:R18
   \   000002A8   8360               ST      Z, R22
   \   000002AA   2F08               MOV     R16, R24
   \   000002AC   E010               LDI     R17, 0
   \   000002AE   E14A               LDI     R20, 26
   \   000002B0   E050               LDI     R21, 0
   \   000002B2   ........           CALL    ?S_EC_MUL_L02
   \   000002B6   01F8               MOVW    R31:R30, R17:R16
   \   000002B8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002BA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002BC   8102               LDD     R16, Z+2
   \   000002BE   8113               LDD     R17, Z+3
   \   000002C0   5F0F               SUBI    R16, 255
   \   000002C2   4F1F               SBCI    R17, 255
   \   000002C4   8302               STD     Z+2, R16
   \   000002C6   8313               STD     Z+3, R17
    439              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] & 0xff; // WashTrackcnt
   \   000002C8   2F08               MOV     R16, R24
   \   000002CA   E010               LDI     R17, 0
   \   000002CC   E14A               LDI     R20, 26
   \   000002CE   E050               LDI     R21, 0
   \   000002D0   ........           CALL    ?S_EC_MUL_L02
   \   000002D4   01F8               MOVW    R31:R30, R17:R16
   \   000002D6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002D8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002DA   8502               LDD     R16, Z+10
   \   000002DC   8513               LDD     R17, Z+11
   \   000002DE   0D04               ADD     R16, R4
   \   000002E0   1D15               ADC     R17, R5
   \   000002E2   01F8               MOVW    R31:R30, R17:R16
   \   000002E4   8100               LD      R16, Z
   \   000002E6   E010               LDI     R17, 0
   \   000002E8   0F00               LSL     R16
   \   000002EA   1F11               ROL     R17
   \   000002EC   01F8               MOVW    R31:R30, R17:R16
   \   000002EE   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000002F0   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000002F2   8160               LD      R22, Z
   \   000002F4   8171               LDD     R23, Z+1
   \   000002F6   2F08               MOV     R16, R24
   \   000002F8   E010               LDI     R17, 0
   \   000002FA   E14A               LDI     R20, 26
   \   000002FC   E050               LDI     R21, 0
   \   000002FE   ........           CALL    ?S_EC_MUL_L02
   \   00000302   01F8               MOVW    R31:R30, R17:R16
   \   00000304   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000306   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000308   8120               LD      R18, Z
   \   0000030A   8131               LDD     R19, Z+1
   \   0000030C   2F08               MOV     R16, R24
   \   0000030E   E010               LDI     R17, 0
   \   00000310   E14A               LDI     R20, 26
   \   00000312   E050               LDI     R21, 0
   \   00000314   ........           CALL    ?S_EC_MUL_L02
   \   00000318   01F8               MOVW    R31:R30, R17:R16
   \   0000031A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000031C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000031E   8102               LDD     R16, Z+2
   \   00000320   8113               LDD     R17, Z+3
   \   00000322   0F20               ADD     R18, R16
   \   00000324   1F31               ADC     R19, R17
   \   00000326   01F9               MOVW    R31:R30, R19:R18
   \   00000328   8360               ST      Z, R22
   \   0000032A   2F08               MOV     R16, R24
   \   0000032C   E010               LDI     R17, 0
   \   0000032E   E14A               LDI     R20, 26
   \   00000330   E050               LDI     R21, 0
   \   00000332   ........           CALL    ?S_EC_MUL_L02
   \   00000336   01F8               MOVW    R31:R30, R17:R16
   \   00000338   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000033A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000033C   8102               LDD     R16, Z+2
   \   0000033E   8113               LDD     R17, Z+3
   \   00000340   5F0F               SUBI    R16, 255
   \   00000342   4F1F               SBCI    R17, 255
   \   00000344   8302               STD     Z+2, R16
   \   00000346   8313               STD     Z+3, R17
    440              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] >> 8) & 0xff; // WashTrackcnt
   \   00000348   2F08               MOV     R16, R24
   \   0000034A   E010               LDI     R17, 0
   \   0000034C   E14A               LDI     R20, 26
   \   0000034E   E050               LDI     R21, 0
   \   00000350   ........           CALL    ?S_EC_MUL_L02
   \   00000354   01F8               MOVW    R31:R30, R17:R16
   \   00000356   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000358   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000035A   8502               LDD     R16, Z+10
   \   0000035C   8513               LDD     R17, Z+11
   \   0000035E   0D04               ADD     R16, R4
   \   00000360   1D15               ADC     R17, R5
   \   00000362   01F8               MOVW    R31:R30, R17:R16
   \   00000364   8100               LD      R16, Z
   \   00000366   E010               LDI     R17, 0
   \   00000368   0F00               LSL     R16
   \   0000036A   1F11               ROL     R17
   \   0000036C   01F8               MOVW    R31:R30, R17:R16
   \   0000036E   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   00000370   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   00000372   8160               LD      R22, Z
   \   00000374   8171               LDD     R23, Z+1
   \   00000376   2F67               MOV     R22, R23
   \   00000378   E070               LDI     R23, 0
   \   0000037A   2F08               MOV     R16, R24
   \   0000037C   E010               LDI     R17, 0
   \   0000037E   E14A               LDI     R20, 26
   \   00000380   E050               LDI     R21, 0
   \   00000382   ........           CALL    ?S_EC_MUL_L02
   \   00000386   01F8               MOVW    R31:R30, R17:R16
   \   00000388   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000038A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000038C   8120               LD      R18, Z
   \   0000038E   8131               LDD     R19, Z+1
   \   00000390   2F08               MOV     R16, R24
   \   00000392   E010               LDI     R17, 0
   \   00000394   E14A               LDI     R20, 26
   \   00000396   E050               LDI     R21, 0
   \   00000398   ........           CALL    ?S_EC_MUL_L02
   \   0000039C   01F8               MOVW    R31:R30, R17:R16
   \   0000039E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003A0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003A2   8102               LDD     R16, Z+2
   \   000003A4   8113               LDD     R17, Z+3
   \   000003A6   0F20               ADD     R18, R16
   \   000003A8   1F31               ADC     R19, R17
   \   000003AA   01F9               MOVW    R31:R30, R19:R18
   \   000003AC   8360               ST      Z, R22
   \   000003AE   2F08               MOV     R16, R24
   \   000003B0   E010               LDI     R17, 0
   \   000003B2   E14A               LDI     R20, 26
   \   000003B4   E050               LDI     R21, 0
   \   000003B6   ........           CALL    ?S_EC_MUL_L02
   \   000003BA   01F8               MOVW    R31:R30, R17:R16
   \   000003BC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003BE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003C0   8102               LDD     R16, Z+2
   \   000003C2   8113               LDD     R17, Z+3
   \   000003C4   5F0F               SUBI    R16, 255
   \   000003C6   4F1F               SBCI    R17, 255
   \   000003C8   8302               STD     Z+2, R16
   \   000003CA   8313               STD     Z+3, R17
    441              UART[ch].pTxBuffer[ntna]     = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000003CC   2F08               MOV     R16, R24
   \   000003CE   E010               LDI     R17, 0
   \   000003D0   E14A               LDI     R20, 26
   \   000003D2   E050               LDI     R21, 0
   \   000003D4   ........           CALL    ?S_EC_MUL_L02
   \   000003D8   01F8               MOVW    R31:R30, R17:R16
   \   000003DA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003DC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003DE   8122               LDD     R18, Z+2
   \   000003E0   8133               LDD     R19, Z+3
   \   000003E2   2D06               MOV     R16, R6
   \   000003E4   1B20               SUB     R18, R16
   \   000003E6   5022               SUBI    R18, 2
   \   000003E8   2F08               MOV     R16, R24
   \   000003EA   E010               LDI     R17, 0
   \   000003EC   E14A               LDI     R20, 26
   \   000003EE   E050               LDI     R21, 0
   \   000003F0   ........           CALL    ?S_EC_MUL_L02
   \   000003F4   01F8               MOVW    R31:R30, R17:R16
   \   000003F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003FA   8100               LD      R16, Z
   \   000003FC   8111               LDD     R17, Z+1
   \   000003FE   0D06               ADD     R16, R6
   \   00000400   1D17               ADC     R17, R7
   \   00000402   01F8               MOVW    R31:R30, R17:R16
   \   00000404   8320               ST      Z, R18
    442              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000406   2F08               MOV     R16, R24
   \   00000408   E010               LDI     R17, 0
   \   0000040A   E14A               LDI     R20, 26
   \   0000040C   E050               LDI     R21, 0
   \   0000040E   ........           CALL    ?S_EC_MUL_L02
   \   00000412   01F8               MOVW    R31:R30, R17:R16
   \   00000414   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000416   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000418   81A2               LDD     R26, Z+2
   \   0000041A   81B3               LDD     R27, Z+3
   \   0000041C   19A6               SUB     R26, R6
   \   0000041E   09B7               SBC     R27, R7
   \   00000420   9712               SBIW    R27:R26, 2
   \   00000422   2FAB               MOV     R26, R27
   \   00000424   E0B0               LDI     R27, 0
   \   00000426   2F08               MOV     R16, R24
   \   00000428   E010               LDI     R17, 0
   \   0000042A   E14A               LDI     R20, 26
   \   0000042C   E050               LDI     R21, 0
   \   0000042E   ........           CALL    ?S_EC_MUL_L02
   \   00000432   01F8               MOVW    R31:R30, R17:R16
   \   00000434   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000436   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000438   8100               LD      R16, Z
   \   0000043A   8111               LDD     R17, Z+1
   \   0000043C   0D06               ADD     R16, R6
   \   0000043E   1D17               ADC     R17, R7
   \   00000440   01F8               MOVW    R31:R30, R17:R16
   \   00000442   83A1               STD     Z+1, R26
    443              OS_LeaveRegion();
   \   00000444   ........           CALL    OS_LeaveRegion
    444          }
   \   00000448   E0E8               LDI     R30, 8
   \   0000044A   ........           JMP     ?EPILOGUE_B8_L09
    445          
    446          
    447          
    448          /*************************************************************************
    449          *
    450          * Build setup dat package for AN-ZB485
    451          *
    452          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    453          void BuildRS4Setup(char ch, short pointer) {
   \                     BuildRS4Setup:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
    454          
    455              short ntna ;
    456              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F01               STD     Z+25, R16
    457          
    458              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP & 0xff;
   \   0000001E   2F06               MOV     R16, R22
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8180               LD      R24, Z
   \   00000032   8191               LDD     R25, Z+1
   \   00000034   2F06               MOV     R16, R22
   \   00000036   E010               LDI     R17, 0
   \   00000038   E14A               LDI     R20, 26
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F80               ADD     R24, R16
   \   0000004C   1F91               ADC     R25, R17
   \   0000004E   01FC               MOVW    R31:R30, R25:R24
   \   00000050   E507               LDI     R16, 87
   \   00000052   8300               ST      Z, R16
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14A               LDI     R20, 26
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    459              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP >> 8;
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8180               LD      R24, Z
   \   00000086   8191               LDD     R25, Z+1
   \   00000088   2F06               MOV     R16, R22
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F80               ADD     R24, R16
   \   000000A0   1F91               ADC     R25, R17
   \   000000A2   01FC               MOVW    R31:R30, R25:R24
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F06               MOV     R16, R22
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E14A               LDI     R20, 26
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    460              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000C6   2F06               MOV     R16, R22
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E14A               LDI     R20, 26
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0198               MOVW    R19:R18, R17:R16
    461              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DE   2F06               MOV     R16, R22
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E14A               LDI     R20, 26
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    462          
    463              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.PortUsed;  // send the setup
   \   000000FC   9170....           LDS     R23, TData
   \   00000100   2F06               MOV     R16, R22
   \   00000102   E010               LDI     R17, 0
   \   00000104   E14A               LDI     R20, 26
   \   00000106   E050               LDI     R21, 0
   \   00000108   ........           CALL    ?S_EC_MUL_L02
   \   0000010C   01F8               MOVW    R31:R30, R17:R16
   \   0000010E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000110   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000112   8180               LD      R24, Z
   \   00000114   8191               LDD     R25, Z+1
   \   00000116   2F06               MOV     R16, R22
   \   00000118   E010               LDI     R17, 0
   \   0000011A   E14A               LDI     R20, 26
   \   0000011C   E050               LDI     R21, 0
   \   0000011E   ........           CALL    ?S_EC_MUL_L02
   \   00000122   01F8               MOVW    R31:R30, R17:R16
   \   00000124   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000126   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000128   8102               LDD     R16, Z+2
   \   0000012A   8113               LDD     R17, Z+3
   \   0000012C   0F80               ADD     R24, R16
   \   0000012E   1F91               ADC     R25, R17
   \   00000130   01FC               MOVW    R31:R30, R25:R24
   \   00000132   8370               ST      Z, R23
   \   00000134   2F06               MOV     R16, R22
   \   00000136   E010               LDI     R17, 0
   \   00000138   E14A               LDI     R20, 26
   \   0000013A   E050               LDI     R21, 0
   \   0000013C   ........           CALL    ?S_EC_MUL_L02
   \   00000140   01F8               MOVW    R31:R30, R17:R16
   \   00000142   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000144   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000146   8102               LDD     R16, Z+2
   \   00000148   8113               LDD     R17, Z+3
   \   0000014A   5F0F               SUBI    R16, 255
   \   0000014C   4F1F               SBCI    R17, 255
   \   0000014E   8302               STD     Z+2, R16
   \   00000150   8313               STD     Z+3, R17
    464              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[0];  // send the sensor type
   \   00000152   9170....           LDS     R23, (TData + 1)
   \   00000156   2F06               MOV     R16, R22
   \   00000158   E010               LDI     R17, 0
   \   0000015A   E14A               LDI     R20, 26
   \   0000015C   E050               LDI     R21, 0
   \   0000015E   ........           CALL    ?S_EC_MUL_L02
   \   00000162   01F8               MOVW    R31:R30, R17:R16
   \   00000164   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000166   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000168   8180               LD      R24, Z
   \   0000016A   8191               LDD     R25, Z+1
   \   0000016C   2F06               MOV     R16, R22
   \   0000016E   E010               LDI     R17, 0
   \   00000170   E14A               LDI     R20, 26
   \   00000172   E050               LDI     R21, 0
   \   00000174   ........           CALL    ?S_EC_MUL_L02
   \   00000178   01F8               MOVW    R31:R30, R17:R16
   \   0000017A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000017C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017E   8102               LDD     R16, Z+2
   \   00000180   8113               LDD     R17, Z+3
   \   00000182   0F80               ADD     R24, R16
   \   00000184   1F91               ADC     R25, R17
   \   00000186   01FC               MOVW    R31:R30, R25:R24
   \   00000188   8370               ST      Z, R23
   \   0000018A   2F06               MOV     R16, R22
   \   0000018C   E010               LDI     R17, 0
   \   0000018E   E14A               LDI     R20, 26
   \   00000190   E050               LDI     R21, 0
   \   00000192   ........           CALL    ?S_EC_MUL_L02
   \   00000196   01F8               MOVW    R31:R30, R17:R16
   \   00000198   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000019A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000019C   8102               LDD     R16, Z+2
   \   0000019E   8113               LDD     R17, Z+3
   \   000001A0   5F0F               SUBI    R16, 255
   \   000001A2   4F1F               SBCI    R17, 255
   \   000001A4   8302               STD     Z+2, R16
   \   000001A6   8313               STD     Z+3, R17
    465              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[1];  // send the sensor type
   \   000001A8   9170....           LDS     R23, (TData + 2)
   \   000001AC   2F06               MOV     R16, R22
   \   000001AE   E010               LDI     R17, 0
   \   000001B0   E14A               LDI     R20, 26
   \   000001B2   E050               LDI     R21, 0
   \   000001B4   ........           CALL    ?S_EC_MUL_L02
   \   000001B8   01F8               MOVW    R31:R30, R17:R16
   \   000001BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001BE   8180               LD      R24, Z
   \   000001C0   8191               LDD     R25, Z+1
   \   000001C2   2F06               MOV     R16, R22
   \   000001C4   E010               LDI     R17, 0
   \   000001C6   E14A               LDI     R20, 26
   \   000001C8   E050               LDI     R21, 0
   \   000001CA   ........           CALL    ?S_EC_MUL_L02
   \   000001CE   01F8               MOVW    R31:R30, R17:R16
   \   000001D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D4   8102               LDD     R16, Z+2
   \   000001D6   8113               LDD     R17, Z+3
   \   000001D8   0F80               ADD     R24, R16
   \   000001DA   1F91               ADC     R25, R17
   \   000001DC   01FC               MOVW    R31:R30, R25:R24
   \   000001DE   8370               ST      Z, R23
   \   000001E0   2F06               MOV     R16, R22
   \   000001E2   E010               LDI     R17, 0
   \   000001E4   E14A               LDI     R20, 26
   \   000001E6   E050               LDI     R21, 0
   \   000001E8   ........           CALL    ?S_EC_MUL_L02
   \   000001EC   01F8               MOVW    R31:R30, R17:R16
   \   000001EE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001F0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001F2   8102               LDD     R16, Z+2
   \   000001F4   8113               LDD     R17, Z+3
   \   000001F6   5F0F               SUBI    R16, 255
   \   000001F8   4F1F               SBCI    R17, 255
   \   000001FA   8302               STD     Z+2, R16
   \   000001FC   8313               STD     Z+3, R17
    466          
    467              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000001FE   2F06               MOV     R16, R22
   \   00000200   E010               LDI     R17, 0
   \   00000202   E14A               LDI     R20, 26
   \   00000204   E050               LDI     R21, 0
   \   00000206   ........           CALL    ?S_EC_MUL_L02
   \   0000020A   01F8               MOVW    R31:R30, R17:R16
   \   0000020C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000020E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000210   8182               LDD     R24, Z+2
   \   00000212   8193               LDD     R25, Z+3
   \   00000214   2F02               MOV     R16, R18
   \   00000216   1B80               SUB     R24, R16
   \   00000218   5082               SUBI    R24, 2
   \   0000021A   2F06               MOV     R16, R22
   \   0000021C   E010               LDI     R17, 0
   \   0000021E   E14A               LDI     R20, 26
   \   00000220   E050               LDI     R21, 0
   \   00000222   ........           CALL    ?S_EC_MUL_L02
   \   00000226   01F8               MOVW    R31:R30, R17:R16
   \   00000228   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000022A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000022C   8100               LD      R16, Z
   \   0000022E   8111               LDD     R17, Z+1
   \   00000230   0F02               ADD     R16, R18
   \   00000232   1F13               ADC     R17, R19
   \   00000234   01F8               MOVW    R31:R30, R17:R16
   \   00000236   8380               ST      Z, R24
    468              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000238   2F06               MOV     R16, R22
   \   0000023A   E010               LDI     R17, 0
   \   0000023C   E14A               LDI     R20, 26
   \   0000023E   E050               LDI     R21, 0
   \   00000240   ........           CALL    ?S_EC_MUL_L02
   \   00000244   01F8               MOVW    R31:R30, R17:R16
   \   00000246   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000248   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000024A   8182               LDD     R24, Z+2
   \   0000024C   8193               LDD     R25, Z+3
   \   0000024E   1B82               SUB     R24, R18
   \   00000250   0B93               SBC     R25, R19
   \   00000252   9702               SBIW    R25:R24, 2
   \   00000254   2F89               MOV     R24, R25
   \   00000256   E090               LDI     R25, 0
   \   00000258   2F06               MOV     R16, R22
   \   0000025A   E010               LDI     R17, 0
   \   0000025C   E14A               LDI     R20, 26
   \   0000025E   E050               LDI     R21, 0
   \   00000260   ........           CALL    ?S_EC_MUL_L02
   \   00000264   01F8               MOVW    R31:R30, R17:R16
   \   00000266   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000268   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000026A   8100               LD      R16, Z
   \   0000026C   8111               LDD     R17, Z+1
   \   0000026E   0F02               ADD     R16, R18
   \   00000270   1F13               ADC     R17, R19
   \   00000272   01F8               MOVW    R31:R30, R17:R16
   \   00000274   8381               STD     Z+1, R24
    469          }
   \   00000276   9189               LD      R24, Y+
   \   00000278   9199               LD      R25, Y+
   \   0000027A   9508               RET
    470          
    471          /*************************************************************************
    472          *
    473          * Build datablock of measured data for ADcard
    474          *
    475          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    476          void BuildMData485(char ch, short pointer) {
   \                     BuildMData485:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2F60               MOV     R22, R16
    477          
    478              short ntna, i ;
    479              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   2F06               MOV     R16, R22
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   E001               LDI     R16, 1
   \   0000001A   8F01               STD     Z+25, R16
    480          
    481              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA & 0xff;
   \   0000001C   2F06               MOV     R16, R22
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E14A               LDI     R20, 26
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   8180               LD      R24, Z
   \   00000030   8191               LDD     R25, Z+1
   \   00000032   2F06               MOV     R16, R22
   \   00000034   E010               LDI     R17, 0
   \   00000036   E14A               LDI     R20, 26
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   8102               LDD     R16, Z+2
   \   00000046   8113               LDD     R17, Z+3
   \   00000048   0F80               ADD     R24, R16
   \   0000004A   1F91               ADC     R25, R17
   \   0000004C   01FC               MOVW    R31:R30, R25:R24
   \   0000004E   E705               LDI     R16, 117
   \   00000050   8300               ST      Z, R16
   \   00000052   2F06               MOV     R16, R22
   \   00000054   E010               LDI     R17, 0
   \   00000056   E14A               LDI     R20, 26
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000064   8102               LDD     R16, Z+2
   \   00000066   8113               LDD     R17, Z+3
   \   00000068   5F0F               SUBI    R16, 255
   \   0000006A   4F1F               SBCI    R17, 255
   \   0000006C   8302               STD     Z+2, R16
   \   0000006E   8313               STD     Z+3, R17
    482              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA >> 8;
   \   00000070   2F06               MOV     R16, R22
   \   00000072   E010               LDI     R17, 0
   \   00000074   E14A               LDI     R20, 26
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000082   8180               LD      R24, Z
   \   00000084   8191               LDD     R25, Z+1
   \   00000086   2F06               MOV     R16, R22
   \   00000088   E010               LDI     R17, 0
   \   0000008A   E14A               LDI     R20, 26
   \   0000008C   E050               LDI     R21, 0
   \   0000008E   ........           CALL    ?S_EC_MUL_L02
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000098   8102               LDD     R16, Z+2
   \   0000009A   8113               LDD     R17, Z+3
   \   0000009C   0F80               ADD     R24, R16
   \   0000009E   1F91               ADC     R25, R17
   \   000000A0   01FC               MOVW    R31:R30, R25:R24
   \   000000A2   E004               LDI     R16, 4
   \   000000A4   8300               ST      Z, R16
   \   000000A6   2F06               MOV     R16, R22
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   E14A               LDI     R20, 26
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   ........           CALL    ?S_EC_MUL_L02
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B8   8102               LDD     R16, Z+2
   \   000000BA   8113               LDD     R17, Z+3
   \   000000BC   5F0F               SUBI    R16, 255
   \   000000BE   4F1F               SBCI    R17, 255
   \   000000C0   8302               STD     Z+2, R16
   \   000000C2   8313               STD     Z+3, R17
    483              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000C4   2F06               MOV     R16, R22
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E14A               LDI     R20, 26
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D6   8102               LDD     R16, Z+2
   \   000000D8   8113               LDD     R17, Z+3
   \   000000DA   0128               MOVW    R5:R4, R17:R16
    484              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DC   2F06               MOV     R16, R22
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E14A               LDI     R20, 26
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EE   8102               LDD     R16, Z+2
   \   000000F0   8113               LDD     R17, Z+3
   \   000000F2   5F0E               SUBI    R16, 254
   \   000000F4   4F1F               SBCI    R17, 255
   \   000000F6   8302               STD     Z+2, R16
   \   000000F8   8313               STD     Z+3, R17
    485          
    486              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \   000000FA   2F06               MOV     R16, R22
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   E14A               LDI     R20, 26
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   01F8               MOVW    R31:R30, R17:R16
   \   00000108   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010C   8502               LDD     R16, Z+10
   \   0000010E   8513               LDD     R17, Z+11
   \   00000110   0F02               ADD     R16, R18
   \   00000112   1F13               ADC     R17, R19
   \   00000114   01F8               MOVW    R31:R30, R17:R16
   \   00000116   8170               LD      R23, Z
   \   00000118   2F06               MOV     R16, R22
   \   0000011A   E010               LDI     R17, 0
   \   0000011C   E14A               LDI     R20, 26
   \   0000011E   E050               LDI     R21, 0
   \   00000120   ........           CALL    ?S_EC_MUL_L02
   \   00000124   01F8               MOVW    R31:R30, R17:R16
   \   00000126   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000128   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012A   8180               LD      R24, Z
   \   0000012C   8191               LDD     R25, Z+1
   \   0000012E   2F06               MOV     R16, R22
   \   00000130   E010               LDI     R17, 0
   \   00000132   E14A               LDI     R20, 26
   \   00000134   E050               LDI     R21, 0
   \   00000136   ........           CALL    ?S_EC_MUL_L02
   \   0000013A   01F8               MOVW    R31:R30, R17:R16
   \   0000013C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000140   8102               LDD     R16, Z+2
   \   00000142   8113               LDD     R17, Z+3
   \   00000144   0F80               ADD     R24, R16
   \   00000146   1F91               ADC     R25, R17
   \   00000148   01FC               MOVW    R31:R30, R25:R24
   \   0000014A   8370               ST      Z, R23
   \   0000014C   2F06               MOV     R16, R22
   \   0000014E   E010               LDI     R17, 0
   \   00000150   E14A               LDI     R20, 26
   \   00000152   E050               LDI     R21, 0
   \   00000154   ........           CALL    ?S_EC_MUL_L02
   \   00000158   01F8               MOVW    R31:R30, R17:R16
   \   0000015A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000015C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015E   8102               LDD     R16, Z+2
   \   00000160   8113               LDD     R17, Z+3
   \   00000162   5F0F               SUBI    R16, 255
   \   00000164   4F1F               SBCI    R17, 255
   \   00000166   8302               STD     Z+2, R16
   \   00000168   8313               STD     Z+3, R17
    487              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.IOUnitStatus[UART[ch].pRxBuffer[pointer]] | (RestartStatus <<4); // IOUnit status +  restart status
   \   0000016A   2F06               MOV     R16, R22
   \   0000016C   E010               LDI     R17, 0
   \   0000016E   E14A               LDI     R20, 26
   \   00000170   E050               LDI     R21, 0
   \   00000172   ........           CALL    ?S_EC_MUL_L02
   \   00000176   01F8               MOVW    R31:R30, R17:R16
   \   00000178   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000017A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017C   8502               LDD     R16, Z+10
   \   0000017E   8513               LDD     R17, Z+11
   \   00000180   0F02               ADD     R16, R18
   \   00000182   1F13               ADC     R17, R19
   \   00000184   01F8               MOVW    R31:R30, R17:R16
   \   00000186   8100               LD      R16, Z
   \   00000188   E010               LDI     R17, 0
   \   0000018A   01F8               MOVW    R31:R30, R17:R16
   \   0000018C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000190   8173               LDD     R23, Z+3
   \   00000192   9100....           LDS     R16, RestartStatus
   \   00000196   9502               SWAP    R16
   \   00000198   7F00               ANDI    R16, 0xF0
   \   0000019A   2B70               OR      R23, R16
   \   0000019C   2F06               MOV     R16, R22
   \   0000019E   E010               LDI     R17, 0
   \   000001A0   E14A               LDI     R20, 26
   \   000001A2   E050               LDI     R21, 0
   \   000001A4   ........           CALL    ?S_EC_MUL_L02
   \   000001A8   01F8               MOVW    R31:R30, R17:R16
   \   000001AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AE   8180               LD      R24, Z
   \   000001B0   8191               LDD     R25, Z+1
   \   000001B2   2F06               MOV     R16, R22
   \   000001B4   E010               LDI     R17, 0
   \   000001B6   E14A               LDI     R20, 26
   \   000001B8   E050               LDI     R21, 0
   \   000001BA   ........           CALL    ?S_EC_MUL_L02
   \   000001BE   01F8               MOVW    R31:R30, R17:R16
   \   000001C0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001C4   8102               LDD     R16, Z+2
   \   000001C6   8113               LDD     R17, Z+3
   \   000001C8   0F80               ADD     R24, R16
   \   000001CA   1F91               ADC     R25, R17
   \   000001CC   01FC               MOVW    R31:R30, R25:R24
   \   000001CE   8370               ST      Z, R23
   \   000001D0   2F06               MOV     R16, R22
   \   000001D2   E010               LDI     R17, 0
   \   000001D4   E14A               LDI     R20, 26
   \   000001D6   E050               LDI     R21, 0
   \   000001D8   ........           CALL    ?S_EC_MUL_L02
   \   000001DC   01F8               MOVW    R31:R30, R17:R16
   \   000001DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E2   8102               LDD     R16, Z+2
   \   000001E4   8113               LDD     R17, Z+3
   \   000001E6   5F0F               SUBI    R16, 255
   \   000001E8   4F1F               SBCI    R17, 255
   \   000001EA   8302               STD     Z+2, R16
   \   000001EC   8313               STD     Z+3, R17
    488              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] & 0xff; // Failcnt error
   \   000001EE   2F06               MOV     R16, R22
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E14A               LDI     R20, 26
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   01F8               MOVW    R31:R30, R17:R16
   \   000001FC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001FE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000200   8502               LDD     R16, Z+10
   \   00000202   8513               LDD     R17, Z+11
   \   00000204   0F02               ADD     R16, R18
   \   00000206   1F13               ADC     R17, R19
   \   00000208   01F8               MOVW    R31:R30, R17:R16
   \   0000020A   8100               LD      R16, Z
   \   0000020C   E010               LDI     R17, 0
   \   0000020E   0F00               LSL     R16
   \   00000210   1F11               ROL     R17
   \   00000212   0F00               LSL     R16
   \   00000214   1F11               ROL     R17
   \   00000216   01F8               MOVW    R31:R30, R17:R16
   \   00000218   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000021A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000021C   85A3               LDD     R26, Z+11
   \   0000021E   85B4               LDD     R27, Z+12
   \   00000220   2F06               MOV     R16, R22
   \   00000222   E010               LDI     R17, 0
   \   00000224   E14A               LDI     R20, 26
   \   00000226   E050               LDI     R21, 0
   \   00000228   ........           CALL    ?S_EC_MUL_L02
   \   0000022C   01F8               MOVW    R31:R30, R17:R16
   \   0000022E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000230   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000232   8180               LD      R24, Z
   \   00000234   8191               LDD     R25, Z+1
   \   00000236   2F06               MOV     R16, R22
   \   00000238   E010               LDI     R17, 0
   \   0000023A   E14A               LDI     R20, 26
   \   0000023C   E050               LDI     R21, 0
   \   0000023E   ........           CALL    ?S_EC_MUL_L02
   \   00000242   01F8               MOVW    R31:R30, R17:R16
   \   00000244   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000246   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000248   8102               LDD     R16, Z+2
   \   0000024A   8113               LDD     R17, Z+3
   \   0000024C   0F80               ADD     R24, R16
   \   0000024E   1F91               ADC     R25, R17
   \   00000250   01FC               MOVW    R31:R30, R25:R24
   \   00000252   83A0               ST      Z, R26
   \   00000254   2F06               MOV     R16, R22
   \   00000256   E010               LDI     R17, 0
   \   00000258   E14A               LDI     R20, 26
   \   0000025A   E050               LDI     R21, 0
   \   0000025C   ........           CALL    ?S_EC_MUL_L02
   \   00000260   01F8               MOVW    R31:R30, R17:R16
   \   00000262   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000264   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000266   8102               LDD     R16, Z+2
   \   00000268   8113               LDD     R17, Z+3
   \   0000026A   5F0F               SUBI    R16, 255
   \   0000026C   4F1F               SBCI    R17, 255
   \   0000026E   8302               STD     Z+2, R16
   \   00000270   8313               STD     Z+3, R17
    489              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] >> 8) & 0xff; // Failcnt error
   \   00000272   2F06               MOV     R16, R22
   \   00000274   E010               LDI     R17, 0
   \   00000276   E14A               LDI     R20, 26
   \   00000278   E050               LDI     R21, 0
   \   0000027A   ........           CALL    ?S_EC_MUL_L02
   \   0000027E   01F8               MOVW    R31:R30, R17:R16
   \   00000280   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000282   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000284   8502               LDD     R16, Z+10
   \   00000286   8513               LDD     R17, Z+11
   \   00000288   0F02               ADD     R16, R18
   \   0000028A   1F13               ADC     R17, R19
   \   0000028C   01F8               MOVW    R31:R30, R17:R16
   \   0000028E   8100               LD      R16, Z
   \   00000290   E010               LDI     R17, 0
   \   00000292   0F00               LSL     R16
   \   00000294   1F11               ROL     R17
   \   00000296   0F00               LSL     R16
   \   00000298   1F11               ROL     R17
   \   0000029A   01F8               MOVW    R31:R30, R17:R16
   \   0000029C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000029E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000002A0   85A3               LDD     R26, Z+11
   \   000002A2   85B4               LDD     R27, Z+12
   \   000002A4   2FAB               MOV     R26, R27
   \   000002A6   E0B0               LDI     R27, 0
   \   000002A8   2F06               MOV     R16, R22
   \   000002AA   E010               LDI     R17, 0
   \   000002AC   E14A               LDI     R20, 26
   \   000002AE   E050               LDI     R21, 0
   \   000002B0   ........           CALL    ?S_EC_MUL_L02
   \   000002B4   01F8               MOVW    R31:R30, R17:R16
   \   000002B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002BA   8180               LD      R24, Z
   \   000002BC   8191               LDD     R25, Z+1
   \   000002BE   2F06               MOV     R16, R22
   \   000002C0   E010               LDI     R17, 0
   \   000002C2   E14A               LDI     R20, 26
   \   000002C4   E050               LDI     R21, 0
   \   000002C6   ........           CALL    ?S_EC_MUL_L02
   \   000002CA   01F8               MOVW    R31:R30, R17:R16
   \   000002CC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002CE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002D0   8102               LDD     R16, Z+2
   \   000002D2   8113               LDD     R17, Z+3
   \   000002D4   0F80               ADD     R24, R16
   \   000002D6   1F91               ADC     R25, R17
   \   000002D8   01FC               MOVW    R31:R30, R25:R24
   \   000002DA   83A0               ST      Z, R26
   \   000002DC   2F06               MOV     R16, R22
   \   000002DE   E010               LDI     R17, 0
   \   000002E0   E14A               LDI     R20, 26
   \   000002E2   E050               LDI     R21, 0
   \   000002E4   ........           CALL    ?S_EC_MUL_L02
   \   000002E8   01F8               MOVW    R31:R30, R17:R16
   \   000002EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002EE   8102               LDD     R16, Z+2
   \   000002F0   8113               LDD     R17, Z+3
   \   000002F2   5F0F               SUBI    R16, 255
   \   000002F4   4F1F               SBCI    R17, 255
   \   000002F6   8302               STD     Z+2, R16
   \   000002F8   8313               STD     Z+3, R17
    490              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] & 0xff; // Failcnt total
   \   000002FA   2F06               MOV     R16, R22
   \   000002FC   E010               LDI     R17, 0
   \   000002FE   E14A               LDI     R20, 26
   \   00000300   E050               LDI     R21, 0
   \   00000302   ........           CALL    ?S_EC_MUL_L02
   \   00000306   01F8               MOVW    R31:R30, R17:R16
   \   00000308   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000030A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000030C   8502               LDD     R16, Z+10
   \   0000030E   8513               LDD     R17, Z+11
   \   00000310   0F02               ADD     R16, R18
   \   00000312   1F13               ADC     R17, R19
   \   00000314   01F8               MOVW    R31:R30, R17:R16
   \   00000316   8100               LD      R16, Z
   \   00000318   E010               LDI     R17, 0
   \   0000031A   0F00               LSL     R16
   \   0000031C   1F11               ROL     R17
   \   0000031E   0F00               LSL     R16
   \   00000320   1F11               ROL     R17
   \   00000322   01F8               MOVW    R31:R30, R17:R16
   \   00000324   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000326   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000328   85A5               LDD     R26, Z+13
   \   0000032A   85B6               LDD     R27, Z+14
   \   0000032C   2F06               MOV     R16, R22
   \   0000032E   E010               LDI     R17, 0
   \   00000330   E14A               LDI     R20, 26
   \   00000332   E050               LDI     R21, 0
   \   00000334   ........           CALL    ?S_EC_MUL_L02
   \   00000338   01F8               MOVW    R31:R30, R17:R16
   \   0000033A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000033C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000033E   8180               LD      R24, Z
   \   00000340   8191               LDD     R25, Z+1
   \   00000342   2F06               MOV     R16, R22
   \   00000344   E010               LDI     R17, 0
   \   00000346   E14A               LDI     R20, 26
   \   00000348   E050               LDI     R21, 0
   \   0000034A   ........           CALL    ?S_EC_MUL_L02
   \   0000034E   01F8               MOVW    R31:R30, R17:R16
   \   00000350   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000352   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000354   8102               LDD     R16, Z+2
   \   00000356   8113               LDD     R17, Z+3
   \   00000358   0F80               ADD     R24, R16
   \   0000035A   1F91               ADC     R25, R17
   \   0000035C   01FC               MOVW    R31:R30, R25:R24
   \   0000035E   83A0               ST      Z, R26
   \   00000360   2F06               MOV     R16, R22
   \   00000362   E010               LDI     R17, 0
   \   00000364   E14A               LDI     R20, 26
   \   00000366   E050               LDI     R21, 0
   \   00000368   ........           CALL    ?S_EC_MUL_L02
   \   0000036C   01F8               MOVW    R31:R30, R17:R16
   \   0000036E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000370   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000372   8102               LDD     R16, Z+2
   \   00000374   8113               LDD     R17, Z+3
   \   00000376   5F0F               SUBI    R16, 255
   \   00000378   4F1F               SBCI    R17, 255
   \   0000037A   8302               STD     Z+2, R16
   \   0000037C   8313               STD     Z+3, R17
    491              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] >> 8) & 0xff; // Failcnt total
   \   0000037E   2F06               MOV     R16, R22
   \   00000380   E010               LDI     R17, 0
   \   00000382   E14A               LDI     R20, 26
   \   00000384   E050               LDI     R21, 0
   \   00000386   ........           CALL    ?S_EC_MUL_L02
   \   0000038A   01F8               MOVW    R31:R30, R17:R16
   \   0000038C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000038E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000390   8502               LDD     R16, Z+10
   \   00000392   8513               LDD     R17, Z+11
   \   00000394   0F02               ADD     R16, R18
   \   00000396   1F13               ADC     R17, R19
   \   00000398   01F8               MOVW    R31:R30, R17:R16
   \   0000039A   8100               LD      R16, Z
   \   0000039C   E010               LDI     R17, 0
   \   0000039E   0F00               LSL     R16
   \   000003A0   1F11               ROL     R17
   \   000003A2   0F00               LSL     R16
   \   000003A4   1F11               ROL     R17
   \   000003A6   01F8               MOVW    R31:R30, R17:R16
   \   000003A8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000003AA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000003AC   85A5               LDD     R26, Z+13
   \   000003AE   85B6               LDD     R27, Z+14
   \   000003B0   2FAB               MOV     R26, R27
   \   000003B2   E0B0               LDI     R27, 0
   \   000003B4   2F06               MOV     R16, R22
   \   000003B6   E010               LDI     R17, 0
   \   000003B8   E14A               LDI     R20, 26
   \   000003BA   E050               LDI     R21, 0
   \   000003BC   ........           CALL    ?S_EC_MUL_L02
   \   000003C0   01F8               MOVW    R31:R30, R17:R16
   \   000003C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003C6   8180               LD      R24, Z
   \   000003C8   8191               LDD     R25, Z+1
   \   000003CA   2F06               MOV     R16, R22
   \   000003CC   E010               LDI     R17, 0
   \   000003CE   E14A               LDI     R20, 26
   \   000003D0   E050               LDI     R21, 0
   \   000003D2   ........           CALL    ?S_EC_MUL_L02
   \   000003D6   01F8               MOVW    R31:R30, R17:R16
   \   000003D8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003DA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003DC   8102               LDD     R16, Z+2
   \   000003DE   8113               LDD     R17, Z+3
   \   000003E0   0F80               ADD     R24, R16
   \   000003E2   1F91               ADC     R25, R17
   \   000003E4   01FC               MOVW    R31:R30, R25:R24
   \   000003E6   83A0               ST      Z, R26
   \   000003E8   2F06               MOV     R16, R22
   \   000003EA   E010               LDI     R17, 0
   \   000003EC   E14A               LDI     R20, 26
   \   000003EE   E050               LDI     R21, 0
   \   000003F0   ........           CALL    ?S_EC_MUL_L02
   \   000003F4   01F8               MOVW    R31:R30, R17:R16
   \   000003F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003FA   8102               LDD     R16, Z+2
   \   000003FC   8113               LDD     R17, Z+3
   \   000003FE   5F0F               SUBI    R16, 255
   \   00000400   4F1F               SBCI    R17, 255
   \   00000402   8302               STD     Z+2, R16
   \   00000404   8313               STD     Z+3, R17
    492              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusSWVer[UART[ch].pRxBuffer[pointer]] ; // Target status byte 1
   \   00000406   2F06               MOV     R16, R22
   \   00000408   E010               LDI     R17, 0
   \   0000040A   E14A               LDI     R20, 26
   \   0000040C   E050               LDI     R21, 0
   \   0000040E   ........           CALL    ?S_EC_MUL_L02
   \   00000412   01F8               MOVW    R31:R30, R17:R16
   \   00000414   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000416   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000418   8502               LDD     R16, Z+10
   \   0000041A   8513               LDD     R17, Z+11
   \   0000041C   0F02               ADD     R16, R18
   \   0000041E   1F13               ADC     R17, R19
   \   00000420   01F8               MOVW    R31:R30, R17:R16
   \   00000422   8100               LD      R16, Z
   \   00000424   E010               LDI     R17, 0
   \   00000426   01F8               MOVW    R31:R30, R17:R16
   \   00000428   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000042A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000042C   A573               LDD     R23, Z+43
   \   0000042E   2F06               MOV     R16, R22
   \   00000430   E010               LDI     R17, 0
   \   00000432   E14A               LDI     R20, 26
   \   00000434   E050               LDI     R21, 0
   \   00000436   ........           CALL    ?S_EC_MUL_L02
   \   0000043A   01F8               MOVW    R31:R30, R17:R16
   \   0000043C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000043E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000440   8180               LD      R24, Z
   \   00000442   8191               LDD     R25, Z+1
   \   00000444   2F06               MOV     R16, R22
   \   00000446   E010               LDI     R17, 0
   \   00000448   E14A               LDI     R20, 26
   \   0000044A   E050               LDI     R21, 0
   \   0000044C   ........           CALL    ?S_EC_MUL_L02
   \   00000450   01F8               MOVW    R31:R30, R17:R16
   \   00000452   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000454   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000456   8102               LDD     R16, Z+2
   \   00000458   8113               LDD     R17, Z+3
   \   0000045A   0F80               ADD     R24, R16
   \   0000045C   1F91               ADC     R25, R17
   \   0000045E   01FC               MOVW    R31:R30, R25:R24
   \   00000460   8370               ST      Z, R23
   \   00000462   2F06               MOV     R16, R22
   \   00000464   E010               LDI     R17, 0
   \   00000466   E14A               LDI     R20, 26
   \   00000468   E050               LDI     R21, 0
   \   0000046A   ........           CALL    ?S_EC_MUL_L02
   \   0000046E   01F8               MOVW    R31:R30, R17:R16
   \   00000470   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000472   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000474   8102               LDD     R16, Z+2
   \   00000476   8113               LDD     R17, Z+3
   \   00000478   5F0F               SUBI    R16, 255
   \   0000047A   4F1F               SBCI    R17, 255
   \   0000047C   8302               STD     Z+2, R16
   \   0000047E   8313               STD     Z+3, R17
    493              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] ; // Target status byte 2
   \   00000480   2F06               MOV     R16, R22
   \   00000482   E010               LDI     R17, 0
   \   00000484   E14A               LDI     R20, 26
   \   00000486   E050               LDI     R21, 0
   \   00000488   ........           CALL    ?S_EC_MUL_L02
   \   0000048C   01F8               MOVW    R31:R30, R17:R16
   \   0000048E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000490   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000492   8502               LDD     R16, Z+10
   \   00000494   8513               LDD     R17, Z+11
   \   00000496   0F02               ADD     R16, R18
   \   00000498   1F13               ADC     R17, R19
   \   0000049A   01F8               MOVW    R31:R30, R17:R16
   \   0000049C   8100               LD      R16, Z
   \   0000049E   E010               LDI     R17, 0
   \   000004A0   01F8               MOVW    R31:R30, R17:R16
   \   000004A2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000004A4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000004A6   A973               LDD     R23, Z+51
   \   000004A8   2F06               MOV     R16, R22
   \   000004AA   E010               LDI     R17, 0
   \   000004AC   E14A               LDI     R20, 26
   \   000004AE   E050               LDI     R21, 0
   \   000004B0   ........           CALL    ?S_EC_MUL_L02
   \   000004B4   01F8               MOVW    R31:R30, R17:R16
   \   000004B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004BA   8180               LD      R24, Z
   \   000004BC   8191               LDD     R25, Z+1
   \   000004BE   2F06               MOV     R16, R22
   \   000004C0   E010               LDI     R17, 0
   \   000004C2   E14A               LDI     R20, 26
   \   000004C4   E050               LDI     R21, 0
   \   000004C6   ........           CALL    ?S_EC_MUL_L02
   \   000004CA   01F8               MOVW    R31:R30, R17:R16
   \   000004CC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004CE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004D0   8102               LDD     R16, Z+2
   \   000004D2   8113               LDD     R17, Z+3
   \   000004D4   0F80               ADD     R24, R16
   \   000004D6   1F91               ADC     R25, R17
   \   000004D8   01FC               MOVW    R31:R30, R25:R24
   \   000004DA   8370               ST      Z, R23
   \   000004DC   2F06               MOV     R16, R22
   \   000004DE   E010               LDI     R17, 0
   \   000004E0   E14A               LDI     R20, 26
   \   000004E2   E050               LDI     R21, 0
   \   000004E4   ........           CALL    ?S_EC_MUL_L02
   \   000004E8   01F8               MOVW    R31:R30, R17:R16
   \   000004EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004EE   8102               LDD     R16, Z+2
   \   000004F0   8113               LDD     R17, Z+3
   \   000004F2   5F0F               SUBI    R16, 255
   \   000004F4   4F1F               SBCI    R17, 255
   \   000004F6   8302               STD     Z+2, R16
   \   000004F8   8313               STD     Z+3, R17
    494          
    495              TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] &= ~0x80;                                  //reset restart flag for adcard
   \   000004FA   2F06               MOV     R16, R22
   \   000004FC   E010               LDI     R17, 0
   \   000004FE   E14A               LDI     R20, 26
   \   00000500   E050               LDI     R21, 0
   \   00000502   ........           CALL    ?S_EC_MUL_L02
   \   00000506   01F8               MOVW    R31:R30, R17:R16
   \   00000508   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000050A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000050C   8502               LDD     R16, Z+10
   \   0000050E   8513               LDD     R17, Z+11
   \   00000510   0F02               ADD     R16, R18
   \   00000512   1F13               ADC     R17, R19
   \   00000514   01F8               MOVW    R31:R30, R17:R16
   \   00000516   8100               LD      R16, Z
   \   00000518   E010               LDI     R17, 0
   \   0000051A   01F8               MOVW    R31:R30, R17:R16
   \   0000051C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000051E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000520   A903               LDD     R16, Z+51
   \   00000522   770F               ANDI    R16, 0x7F
   \   00000524   AB03               STD     Z+51, R16
    496          
    497              for (i = 0; i < 14; i++) {
   \   00000526   2422               CLR     R2
   \   00000528   2433               CLR     R3
   \                     ??BuildMData485_0:
   \   0000052A   E00E               LDI     R16, 14
   \   0000052C   1620               CP      R2, R16
   \   0000052E   E000               LDI     R16, 0
   \   00000530   0630               CPC     R3, R16
   \   00000532   F00C               BRLT    $+2+2
   \   00000534   C0DF               RJMP    ??BuildMData485_1
    498                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup1[UART[ch].pRxBuffer[pointer]][i] ;
   \   00000536   ....               LDI     R24, LOW((TData + 59))
   \   00000538   ....               LDI     R25, HIGH((TData + 59))
   \   0000053A   0D82               ADD     R24, R2
   \   0000053C   1D93               ADC     R25, R3
   \   0000053E   2F06               MOV     R16, R22
   \   00000540   E010               LDI     R17, 0
   \   00000542   E14A               LDI     R20, 26
   \   00000544   E050               LDI     R21, 0
   \   00000546   ........           CALL    ?S_EC_MUL_L02
   \   0000054A   01F8               MOVW    R31:R30, R17:R16
   \   0000054C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000054E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000550   8502               LDD     R16, Z+10
   \   00000552   8513               LDD     R17, Z+11
   \   00000554   0F02               ADD     R16, R18
   \   00000556   1F13               ADC     R17, R19
   \   00000558   01F8               MOVW    R31:R30, R17:R16
   \   0000055A   8100               LD      R16, Z
   \   0000055C   E010               LDI     R17, 0
   \   0000055E   E04E               LDI     R20, 14
   \   00000560   E050               LDI     R21, 0
   \   00000562   ........           CALL    ?S_EC_MUL_L02
   \   00000566   0F80               ADD     R24, R16
   \   00000568   1F91               ADC     R25, R17
   \   0000056A   01FC               MOVW    R31:R30, R25:R24
   \   0000056C   8170               LD      R23, Z
   \   0000056E   2F06               MOV     R16, R22
   \   00000570   E010               LDI     R17, 0
   \   00000572   E14A               LDI     R20, 26
   \   00000574   E050               LDI     R21, 0
   \   00000576   ........           CALL    ?S_EC_MUL_L02
   \   0000057A   01F8               MOVW    R31:R30, R17:R16
   \   0000057C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000057E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000580   8180               LD      R24, Z
   \   00000582   8191               LDD     R25, Z+1
   \   00000584   2F06               MOV     R16, R22
   \   00000586   E010               LDI     R17, 0
   \   00000588   E14A               LDI     R20, 26
   \   0000058A   E050               LDI     R21, 0
   \   0000058C   ........           CALL    ?S_EC_MUL_L02
   \   00000590   01F8               MOVW    R31:R30, R17:R16
   \   00000592   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000594   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000596   8102               LDD     R16, Z+2
   \   00000598   8113               LDD     R17, Z+3
   \   0000059A   0F80               ADD     R24, R16
   \   0000059C   1F91               ADC     R25, R17
   \   0000059E   01FC               MOVW    R31:R30, R25:R24
   \   000005A0   8370               ST      Z, R23
   \   000005A2   2F06               MOV     R16, R22
   \   000005A4   E010               LDI     R17, 0
   \   000005A6   E14A               LDI     R20, 26
   \   000005A8   E050               LDI     R21, 0
   \   000005AA   ........           CALL    ?S_EC_MUL_L02
   \   000005AE   01F8               MOVW    R31:R30, R17:R16
   \   000005B0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000005B2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000005B4   8102               LDD     R16, Z+2
   \   000005B6   8113               LDD     R17, Z+3
   \   000005B8   5F0F               SUBI    R16, 255
   \   000005BA   4F1F               SBCI    R17, 255
   \   000005BC   8302               STD     Z+2, R16
   \   000005BE   8313               STD     Z+3, R17
    499                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup2[UART[ch].pRxBuffer[pointer]][i] ;
   \   000005C0   ....               LDI     R24, LOW((TData + 171))
   \   000005C2   ....               LDI     R25, HIGH((TData + 171))
   \   000005C4   0D82               ADD     R24, R2
   \   000005C6   1D93               ADC     R25, R3
   \   000005C8   2F06               MOV     R16, R22
   \   000005CA   E010               LDI     R17, 0
   \   000005CC   E14A               LDI     R20, 26
   \   000005CE   E050               LDI     R21, 0
   \   000005D0   ........           CALL    ?S_EC_MUL_L02
   \   000005D4   01F8               MOVW    R31:R30, R17:R16
   \   000005D6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000005D8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000005DA   8502               LDD     R16, Z+10
   \   000005DC   8513               LDD     R17, Z+11
   \   000005DE   0F02               ADD     R16, R18
   \   000005E0   1F13               ADC     R17, R19
   \   000005E2   01F8               MOVW    R31:R30, R17:R16
   \   000005E4   8100               LD      R16, Z
   \   000005E6   E010               LDI     R17, 0
   \   000005E8   E04E               LDI     R20, 14
   \   000005EA   E050               LDI     R21, 0
   \   000005EC   ........           CALL    ?S_EC_MUL_L02
   \   000005F0   0F80               ADD     R24, R16
   \   000005F2   1F91               ADC     R25, R17
   \   000005F4   01FC               MOVW    R31:R30, R25:R24
   \   000005F6   8170               LD      R23, Z
   \   000005F8   2F06               MOV     R16, R22
   \   000005FA   E010               LDI     R17, 0
   \   000005FC   E14A               LDI     R20, 26
   \   000005FE   E050               LDI     R21, 0
   \   00000600   ........           CALL    ?S_EC_MUL_L02
   \   00000604   01F8               MOVW    R31:R30, R17:R16
   \   00000606   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000608   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000060A   8180               LD      R24, Z
   \   0000060C   8191               LDD     R25, Z+1
   \   0000060E   2F06               MOV     R16, R22
   \   00000610   E010               LDI     R17, 0
   \   00000612   E14A               LDI     R20, 26
   \   00000614   E050               LDI     R21, 0
   \   00000616   ........           CALL    ?S_EC_MUL_L02
   \   0000061A   01F8               MOVW    R31:R30, R17:R16
   \   0000061C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000061E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000620   8102               LDD     R16, Z+2
   \   00000622   8113               LDD     R17, Z+3
   \   00000624   0F80               ADD     R24, R16
   \   00000626   1F91               ADC     R25, R17
   \   00000628   01FC               MOVW    R31:R30, R25:R24
   \   0000062A   8370               ST      Z, R23
   \   0000062C   2F06               MOV     R16, R22
   \   0000062E   E010               LDI     R17, 0
   \   00000630   E14A               LDI     R20, 26
   \   00000632   E050               LDI     R21, 0
   \   00000634   ........           CALL    ?S_EC_MUL_L02
   \   00000638   01F8               MOVW    R31:R30, R17:R16
   \   0000063A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000063C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000063E   8102               LDD     R16, Z+2
   \   00000640   8113               LDD     R17, Z+3
   \   00000642   5F0F               SUBI    R16, 255
   \   00000644   4F1F               SBCI    R17, 255
   \   00000646   8302               STD     Z+2, R16
   \   00000648   8313               STD     Z+3, R17
    500                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.RS4.Result[UART[ch].pRxBuffer[pointer]][i]) ;   // ADresult
   \   0000064A   ....               LDI     R24, LOW((TData + 731))
   \   0000064C   ....               LDI     R25, HIGH((TData + 731))
   \   0000064E   0181               MOVW    R17:R16, R3:R2
   \   00000650   0F00               LSL     R16
   \   00000652   1F11               ROL     R17
   \   00000654   0F00               LSL     R16
   \   00000656   1F11               ROL     R17
   \   00000658   0F80               ADD     R24, R16
   \   0000065A   1F91               ADC     R25, R17
   \   0000065C   2F06               MOV     R16, R22
   \   0000065E   E010               LDI     R17, 0
   \   00000660   E14A               LDI     R20, 26
   \   00000662   E050               LDI     R21, 0
   \   00000664   ........           CALL    ?S_EC_MUL_L02
   \   00000668   01F8               MOVW    R31:R30, R17:R16
   \   0000066A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000066C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000066E   8502               LDD     R16, Z+10
   \   00000670   8513               LDD     R17, Z+11
   \   00000672   0F02               ADD     R16, R18
   \   00000674   1F13               ADC     R17, R19
   \   00000676   01F8               MOVW    R31:R30, R17:R16
   \   00000678   8100               LD      R16, Z
   \   0000067A   E010               LDI     R17, 0
   \   0000067C   E348               LDI     R20, 56
   \   0000067E   E050               LDI     R21, 0
   \   00000680   ........           CALL    ?S_EC_MUL_L02
   \   00000684   0F80               ADD     R24, R16
   \   00000686   1F91               ADC     R25, R17
   \   00000688   01FC               MOVW    R31:R30, R25:R24
   \   0000068A   8180               LD      R24, Z
   \   0000068C   8191               LDD     R25, Z+1
   \   0000068E   81A2               LDD     R26, Z+2
   \   00000690   81B3               LDD     R27, Z+3
   \   00000692   2F06               MOV     R16, R22
   \   00000694   E010               LDI     R17, 0
   \   00000696   E14A               LDI     R20, 26
   \   00000698   E050               LDI     R21, 0
   \   0000069A   ........           CALL    ?S_EC_MUL_L02
   \   0000069E   01F8               MOVW    R31:R30, R17:R16
   \   000006A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000006A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000006A4   8060               LD      R6, Z
   \   000006A6   8071               LDD     R7, Z+1
   \   000006A8   2F06               MOV     R16, R22
   \   000006AA   E010               LDI     R17, 0
   \   000006AC   E14A               LDI     R20, 26
   \   000006AE   E050               LDI     R21, 0
   \   000006B0   ........           CALL    ?S_EC_MUL_L02
   \   000006B4   01F8               MOVW    R31:R30, R17:R16
   \   000006B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000006B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000006BA   8102               LDD     R16, Z+2
   \   000006BC   8113               LDD     R17, Z+3
   \   000006BE   0E60               ADD     R6, R16
   \   000006C0   1E71               ADC     R7, R17
   \   000006C2   01F3               MOVW    R31:R30, R7:R6
   \   000006C4   8380               ST      Z, R24
   \   000006C6   8391               STD     Z+1, R25
   \   000006C8   83A2               STD     Z+2, R26
   \   000006CA   83B3               STD     Z+3, R27
    501                  UART[ch].TxFirst += sizeof(float) ;
   \   000006CC   2F06               MOV     R16, R22
   \   000006CE   E010               LDI     R17, 0
   \   000006D0   E14A               LDI     R20, 26
   \   000006D2   E050               LDI     R21, 0
   \   000006D4   ........           CALL    ?S_EC_MUL_L02
   \   000006D8   01F8               MOVW    R31:R30, R17:R16
   \   000006DA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000006DC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000006DE   8102               LDD     R16, Z+2
   \   000006E0   8113               LDD     R17, Z+3
   \   000006E2   5F0C               SUBI    R16, 252
   \   000006E4   4F1F               SBCI    R17, 255
   \   000006E6   8302               STD     Z+2, R16
   \   000006E8   8313               STD     Z+3, R17
    502              }
   \   000006EA   E001               LDI     R16, 1
   \   000006EC   0E20               ADD     R2, R16
   \   000006EE   E000               LDI     R16, 0
   \   000006F0   1E30               ADC     R3, R16
   \   000006F2   CF1B               RJMP    ??BuildMData485_0
    503          
    504              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildMData485_1:
   \   000006F4   2F06               MOV     R16, R22
   \   000006F6   E010               LDI     R17, 0
   \   000006F8   E14A               LDI     R20, 26
   \   000006FA   E050               LDI     R21, 0
   \   000006FC   ........           CALL    ?S_EC_MUL_L02
   \   00000700   01F8               MOVW    R31:R30, R17:R16
   \   00000702   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000704   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000706   8182               LDD     R24, Z+2
   \   00000708   8193               LDD     R25, Z+3
   \   0000070A   2D04               MOV     R16, R4
   \   0000070C   1B80               SUB     R24, R16
   \   0000070E   5082               SUBI    R24, 2
   \   00000710   2F06               MOV     R16, R22
   \   00000712   E010               LDI     R17, 0
   \   00000714   E14A               LDI     R20, 26
   \   00000716   E050               LDI     R21, 0
   \   00000718   ........           CALL    ?S_EC_MUL_L02
   \   0000071C   01F8               MOVW    R31:R30, R17:R16
   \   0000071E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000720   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000722   8100               LD      R16, Z
   \   00000724   8111               LDD     R17, Z+1
   \   00000726   0D04               ADD     R16, R4
   \   00000728   1D15               ADC     R17, R5
   \   0000072A   01F8               MOVW    R31:R30, R17:R16
   \   0000072C   8380               ST      Z, R24
    505              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000072E   2F06               MOV     R16, R22
   \   00000730   E010               LDI     R17, 0
   \   00000732   E14A               LDI     R20, 26
   \   00000734   E050               LDI     R21, 0
   \   00000736   ........           CALL    ?S_EC_MUL_L02
   \   0000073A   01F8               MOVW    R31:R30, R17:R16
   \   0000073C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000073E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000740   8182               LDD     R24, Z+2
   \   00000742   8193               LDD     R25, Z+3
   \   00000744   1984               SUB     R24, R4
   \   00000746   0995               SBC     R25, R5
   \   00000748   9702               SBIW    R25:R24, 2
   \   0000074A   2F89               MOV     R24, R25
   \   0000074C   E090               LDI     R25, 0
   \   0000074E   2F06               MOV     R16, R22
   \   00000750   E010               LDI     R17, 0
   \   00000752   E14A               LDI     R20, 26
   \   00000754   E050               LDI     R21, 0
   \   00000756   ........           CALL    ?S_EC_MUL_L02
   \   0000075A   01F8               MOVW    R31:R30, R17:R16
   \   0000075C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000075E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000760   8100               LD      R16, Z
   \   00000762   8111               LDD     R17, Z+1
   \   00000764   0D04               ADD     R16, R4
   \   00000766   1D15               ADC     R17, R5
   \   00000768   01F8               MOVW    R31:R30, R17:R16
   \   0000076A   8381               STD     Z+1, R24
    506          
    507          }
   \   0000076C   E0E8               LDI     R30, 8
   \   0000076E   ........           JMP     ?EPILOGUE_B8_L09
    508          
    509          /*************************************************************************
    510          *
    511          * Build datablock of raw and cal data for ADcard
    512          *
    513          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    514          void BuildRData485(char ch, short pointer) {
   \                     BuildRData485:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2F60               MOV     R22, R16
    515          
    516              short ntna, i ;
    517              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   2F06               MOV     R16, R22
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   E001               LDI     R16, 1
   \   0000001A   8F01               STD     Z+25, R16
    518          
    519              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA & 0xff;
   \   0000001C   2F06               MOV     R16, R22
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E14A               LDI     R20, 26
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002E   81A0               LD      R26, Z
   \   00000030   81B1               LDD     R27, Z+1
   \   00000032   2F06               MOV     R16, R22
   \   00000034   E010               LDI     R17, 0
   \   00000036   E14A               LDI     R20, 26
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   8102               LDD     R16, Z+2
   \   00000046   8113               LDD     R17, Z+3
   \   00000048   0FA0               ADD     R26, R16
   \   0000004A   1FB1               ADC     R27, R17
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   E706               LDI     R16, 118
   \   00000050   8300               ST      Z, R16
   \   00000052   2F06               MOV     R16, R22
   \   00000054   E010               LDI     R17, 0
   \   00000056   E14A               LDI     R20, 26
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000064   8102               LDD     R16, Z+2
   \   00000066   8113               LDD     R17, Z+3
   \   00000068   5F0F               SUBI    R16, 255
   \   0000006A   4F1F               SBCI    R17, 255
   \   0000006C   8302               STD     Z+2, R16
   \   0000006E   8313               STD     Z+3, R17
    520              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA >> 8;
   \   00000070   2F06               MOV     R16, R22
   \   00000072   E010               LDI     R17, 0
   \   00000074   E14A               LDI     R20, 26
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000082   81A0               LD      R26, Z
   \   00000084   81B1               LDD     R27, Z+1
   \   00000086   2F06               MOV     R16, R22
   \   00000088   E010               LDI     R17, 0
   \   0000008A   E14A               LDI     R20, 26
   \   0000008C   E050               LDI     R21, 0
   \   0000008E   ........           CALL    ?S_EC_MUL_L02
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000096   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000098   8102               LDD     R16, Z+2
   \   0000009A   8113               LDD     R17, Z+3
   \   0000009C   0FA0               ADD     R26, R16
   \   0000009E   1FB1               ADC     R27, R17
   \   000000A0   01FD               MOVW    R31:R30, R27:R26
   \   000000A2   E004               LDI     R16, 4
   \   000000A4   8300               ST      Z, R16
   \   000000A6   2F06               MOV     R16, R22
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   E14A               LDI     R20, 26
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   ........           CALL    ?S_EC_MUL_L02
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B8   8102               LDD     R16, Z+2
   \   000000BA   8113               LDD     R17, Z+3
   \   000000BC   5F0F               SUBI    R16, 255
   \   000000BE   4F1F               SBCI    R17, 255
   \   000000C0   8302               STD     Z+2, R16
   \   000000C2   8313               STD     Z+3, R17
    521              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000C4   2F06               MOV     R16, R22
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E14A               LDI     R20, 26
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D6   8102               LDD     R16, Z+2
   \   000000D8   8113               LDD     R17, Z+3
   \   000000DA   0118               MOVW    R3:R2, R17:R16
    522              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DC   2F06               MOV     R16, R22
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E14A               LDI     R20, 26
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EE   8102               LDD     R16, Z+2
   \   000000F0   8113               LDD     R17, Z+3
   \   000000F2   5F0E               SUBI    R16, 254
   \   000000F4   4F1F               SBCI    R17, 255
   \   000000F6   8302               STD     Z+2, R16
   \   000000F8   8313               STD     Z+3, R17
    523          
    524              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \   000000FA   2F06               MOV     R16, R22
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   E14A               LDI     R20, 26
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   01F8               MOVW    R31:R30, R17:R16
   \   00000108   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010C   8502               LDD     R16, Z+10
   \   0000010E   8513               LDD     R17, Z+11
   \   00000110   0F02               ADD     R16, R18
   \   00000112   1F13               ADC     R17, R19
   \   00000114   01F8               MOVW    R31:R30, R17:R16
   \   00000116   8170               LD      R23, Z
   \   00000118   2F06               MOV     R16, R22
   \   0000011A   E010               LDI     R17, 0
   \   0000011C   E14A               LDI     R20, 26
   \   0000011E   E050               LDI     R21, 0
   \   00000120   ........           CALL    ?S_EC_MUL_L02
   \   00000124   01F8               MOVW    R31:R30, R17:R16
   \   00000126   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000128   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012A   81A0               LD      R26, Z
   \   0000012C   81B1               LDD     R27, Z+1
   \   0000012E   2F06               MOV     R16, R22
   \   00000130   E010               LDI     R17, 0
   \   00000132   E14A               LDI     R20, 26
   \   00000134   E050               LDI     R21, 0
   \   00000136   ........           CALL    ?S_EC_MUL_L02
   \   0000013A   01F8               MOVW    R31:R30, R17:R16
   \   0000013C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000140   8102               LDD     R16, Z+2
   \   00000142   8113               LDD     R17, Z+3
   \   00000144   0FA0               ADD     R26, R16
   \   00000146   1FB1               ADC     R27, R17
   \   00000148   01FD               MOVW    R31:R30, R27:R26
   \   0000014A   8370               ST      Z, R23
   \   0000014C   2F06               MOV     R16, R22
   \   0000014E   E010               LDI     R17, 0
   \   00000150   E14A               LDI     R20, 26
   \   00000152   E050               LDI     R21, 0
   \   00000154   ........           CALL    ?S_EC_MUL_L02
   \   00000158   01F8               MOVW    R31:R30, R17:R16
   \   0000015A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000015C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015E   8102               LDD     R16, Z+2
   \   00000160   8113               LDD     R17, Z+3
   \   00000162   5F0F               SUBI    R16, 255
   \   00000164   4F1F               SBCI    R17, 255
   \   00000166   8302               STD     Z+2, R16
   \   00000168   8313               STD     Z+3, R17
    525              for (i = 0; i < 14; i++) {
   \   0000016A   E080               LDI     R24, 0
   \   0000016C   E090               LDI     R25, 0
   \                     ??BuildRData485_0:
   \   0000016E   308E               CPI     R24, 14
   \   00000170   E000               LDI     R16, 0
   \   00000172   0790               CPC     R25, R16
   \   00000174   F00C               BRLT    $+2+2
   \   00000176   C096               RJMP    ??BuildRData485_1
    526                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Raw[UART[ch].pRxBuffer[pointer]][i]) ;   // Raw data
   \   00000178   ....               LDI     R26, LOW((TData + 283))
   \   0000017A   ....               LDI     R27, HIGH((TData + 283))
   \   0000017C   018C               MOVW    R17:R16, R25:R24
   \   0000017E   0F00               LSL     R16
   \   00000180   1F11               ROL     R17
   \   00000182   0FA0               ADD     R26, R16
   \   00000184   1FB1               ADC     R27, R17
   \   00000186   2F06               MOV     R16, R22
   \   00000188   E010               LDI     R17, 0
   \   0000018A   E14A               LDI     R20, 26
   \   0000018C   E050               LDI     R21, 0
   \   0000018E   ........           CALL    ?S_EC_MUL_L02
   \   00000192   01F8               MOVW    R31:R30, R17:R16
   \   00000194   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000196   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000198   8502               LDD     R16, Z+10
   \   0000019A   8513               LDD     R17, Z+11
   \   0000019C   0F02               ADD     R16, R18
   \   0000019E   1F13               ADC     R17, R19
   \   000001A0   01F8               MOVW    R31:R30, R17:R16
   \   000001A2   8100               LD      R16, Z
   \   000001A4   E010               LDI     R17, 0
   \   000001A6   E14C               LDI     R20, 28
   \   000001A8   E050               LDI     R21, 0
   \   000001AA   ........           CALL    ?S_EC_MUL_L02
   \   000001AE   0FA0               ADD     R26, R16
   \   000001B0   1FB1               ADC     R27, R17
   \   000001B2   01FD               MOVW    R31:R30, R27:R26
   \   000001B4   81A0               LD      R26, Z
   \   000001B6   81B1               LDD     R27, Z+1
   \   000001B8   2F06               MOV     R16, R22
   \   000001BA   E010               LDI     R17, 0
   \   000001BC   E14A               LDI     R20, 26
   \   000001BE   E050               LDI     R21, 0
   \   000001C0   ........           CALL    ?S_EC_MUL_L02
   \   000001C4   01F8               MOVW    R31:R30, R17:R16
   \   000001C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CA   8040               LD      R4, Z
   \   000001CC   8051               LDD     R5, Z+1
   \   000001CE   2F06               MOV     R16, R22
   \   000001D0   E010               LDI     R17, 0
   \   000001D2   E14A               LDI     R20, 26
   \   000001D4   E050               LDI     R21, 0
   \   000001D6   ........           CALL    ?S_EC_MUL_L02
   \   000001DA   01F8               MOVW    R31:R30, R17:R16
   \   000001DC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001DE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E0   8102               LDD     R16, Z+2
   \   000001E2   8113               LDD     R17, Z+3
   \   000001E4   0E40               ADD     R4, R16
   \   000001E6   1E51               ADC     R5, R17
   \   000001E8   01F2               MOVW    R31:R30, R5:R4
   \   000001EA   83A0               ST      Z, R26
   \   000001EC   83B1               STD     Z+1, R27
    527                  UART[ch].TxFirst += sizeof(short) ;
   \   000001EE   2F06               MOV     R16, R22
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E14A               LDI     R20, 26
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   01F8               MOVW    R31:R30, R17:R16
   \   000001FC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001FE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000200   8102               LDD     R16, Z+2
   \   00000202   8113               LDD     R17, Z+3
   \   00000204   5F0E               SUBI    R16, 254
   \   00000206   4F1F               SBCI    R17, 255
   \   00000208   8302               STD     Z+2, R16
   \   0000020A   8313               STD     Z+3, R17
    528                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Cal[UART[ch].pRxBuffer[pointer]][i]) ;   // Cal data
   \   0000020C   ....               LDI     R26, LOW((TData + 507))
   \   0000020E   ....               LDI     R27, HIGH((TData + 507))
   \   00000210   018C               MOVW    R17:R16, R25:R24
   \   00000212   0F00               LSL     R16
   \   00000214   1F11               ROL     R17
   \   00000216   0FA0               ADD     R26, R16
   \   00000218   1FB1               ADC     R27, R17
   \   0000021A   2F06               MOV     R16, R22
   \   0000021C   E010               LDI     R17, 0
   \   0000021E   E14A               LDI     R20, 26
   \   00000220   E050               LDI     R21, 0
   \   00000222   ........           CALL    ?S_EC_MUL_L02
   \   00000226   01F8               MOVW    R31:R30, R17:R16
   \   00000228   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000022A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000022C   8502               LDD     R16, Z+10
   \   0000022E   8513               LDD     R17, Z+11
   \   00000230   0F02               ADD     R16, R18
   \   00000232   1F13               ADC     R17, R19
   \   00000234   01F8               MOVW    R31:R30, R17:R16
   \   00000236   8100               LD      R16, Z
   \   00000238   E010               LDI     R17, 0
   \   0000023A   E14C               LDI     R20, 28
   \   0000023C   E050               LDI     R21, 0
   \   0000023E   ........           CALL    ?S_EC_MUL_L02
   \   00000242   0FA0               ADD     R26, R16
   \   00000244   1FB1               ADC     R27, R17
   \   00000246   01FD               MOVW    R31:R30, R27:R26
   \   00000248   81A0               LD      R26, Z
   \   0000024A   81B1               LDD     R27, Z+1
   \   0000024C   2F06               MOV     R16, R22
   \   0000024E   E010               LDI     R17, 0
   \   00000250   E14A               LDI     R20, 26
   \   00000252   E050               LDI     R21, 0
   \   00000254   ........           CALL    ?S_EC_MUL_L02
   \   00000258   01F8               MOVW    R31:R30, R17:R16
   \   0000025A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000025C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000025E   8040               LD      R4, Z
   \   00000260   8051               LDD     R5, Z+1
   \   00000262   2F06               MOV     R16, R22
   \   00000264   E010               LDI     R17, 0
   \   00000266   E14A               LDI     R20, 26
   \   00000268   E050               LDI     R21, 0
   \   0000026A   ........           CALL    ?S_EC_MUL_L02
   \   0000026E   01F8               MOVW    R31:R30, R17:R16
   \   00000270   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000272   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000274   8102               LDD     R16, Z+2
   \   00000276   8113               LDD     R17, Z+3
   \   00000278   0E40               ADD     R4, R16
   \   0000027A   1E51               ADC     R5, R17
   \   0000027C   01F2               MOVW    R31:R30, R5:R4
   \   0000027E   83A0               ST      Z, R26
   \   00000280   83B1               STD     Z+1, R27
    529                  UART[ch].TxFirst += sizeof(short) ;
   \   00000282   2F06               MOV     R16, R22
   \   00000284   E010               LDI     R17, 0
   \   00000286   E14A               LDI     R20, 26
   \   00000288   E050               LDI     R21, 0
   \   0000028A   ........           CALL    ?S_EC_MUL_L02
   \   0000028E   01F8               MOVW    R31:R30, R17:R16
   \   00000290   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000292   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000294   8102               LDD     R16, Z+2
   \   00000296   8113               LDD     R17, Z+3
   \   00000298   5F0E               SUBI    R16, 254
   \   0000029A   4F1F               SBCI    R17, 255
   \   0000029C   8302               STD     Z+2, R16
   \   0000029E   8313               STD     Z+3, R17
    530              }
   \   000002A0   9601               ADIW    R25:R24, 1
   \   000002A2   CF65               RJMP    ??BuildRData485_0
    531          
    532              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildRData485_1:
   \   000002A4   2F06               MOV     R16, R22
   \   000002A6   E010               LDI     R17, 0
   \   000002A8   E14A               LDI     R20, 26
   \   000002AA   E050               LDI     R21, 0
   \   000002AC   ........           CALL    ?S_EC_MUL_L02
   \   000002B0   01F8               MOVW    R31:R30, R17:R16
   \   000002B2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002B4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002B6   81A2               LDD     R26, Z+2
   \   000002B8   81B3               LDD     R27, Z+3
   \   000002BA   2D02               MOV     R16, R2
   \   000002BC   1BA0               SUB     R26, R16
   \   000002BE   50A2               SUBI    R26, 2
   \   000002C0   2F06               MOV     R16, R22
   \   000002C2   E010               LDI     R17, 0
   \   000002C4   E14A               LDI     R20, 26
   \   000002C6   E050               LDI     R21, 0
   \   000002C8   ........           CALL    ?S_EC_MUL_L02
   \   000002CC   01F8               MOVW    R31:R30, R17:R16
   \   000002CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002D2   8100               LD      R16, Z
   \   000002D4   8111               LDD     R17, Z+1
   \   000002D6   0D02               ADD     R16, R2
   \   000002D8   1D13               ADC     R17, R3
   \   000002DA   01F8               MOVW    R31:R30, R17:R16
   \   000002DC   83A0               ST      Z, R26
    533              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000002DE   2F06               MOV     R16, R22
   \   000002E0   E010               LDI     R17, 0
   \   000002E2   E14A               LDI     R20, 26
   \   000002E4   E050               LDI     R21, 0
   \   000002E6   ........           CALL    ?S_EC_MUL_L02
   \   000002EA   01F8               MOVW    R31:R30, R17:R16
   \   000002EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002F0   81A2               LDD     R26, Z+2
   \   000002F2   81B3               LDD     R27, Z+3
   \   000002F4   19A2               SUB     R26, R2
   \   000002F6   09B3               SBC     R27, R3
   \   000002F8   9712               SBIW    R27:R26, 2
   \   000002FA   2FAB               MOV     R26, R27
   \   000002FC   E0B0               LDI     R27, 0
   \   000002FE   2F06               MOV     R16, R22
   \   00000300   E010               LDI     R17, 0
   \   00000302   E14A               LDI     R20, 26
   \   00000304   E050               LDI     R21, 0
   \   00000306   ........           CALL    ?S_EC_MUL_L02
   \   0000030A   01F8               MOVW    R31:R30, R17:R16
   \   0000030C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000030E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000310   8100               LD      R16, Z
   \   00000312   8111               LDD     R17, Z+1
   \   00000314   0D02               ADD     R16, R2
   \   00000316   1D13               ADC     R17, R3
   \   00000318   01F8               MOVW    R31:R30, R17:R16
   \   0000031A   83A1               STD     Z+1, R26
    534          
    535          }
   \   0000031C   E0E6               LDI     R30, 6
   \   0000031E   ........           JMP     ?EPILOGUE_B6_L09
    536          
    537          /*************************************************************************
    538          *
    539          * Build setup data package for AN-ZBANA
    540          *
    541          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    542          void BuildANASetup(char ch, short pointer) {
   \                     BuildANASetup:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
    543          
    544              short ntna ;
    545              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F01               STD     Z+25, R16
    546          
    547              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP & 0xff;
   \   0000001E   2F06               MOV     R16, R22
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8180               LD      R24, Z
   \   00000032   8191               LDD     R25, Z+1
   \   00000034   2F06               MOV     R16, R22
   \   00000036   E010               LDI     R17, 0
   \   00000038   E14A               LDI     R20, 26
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F80               ADD     R24, R16
   \   0000004C   1F91               ADC     R25, R17
   \   0000004E   01FC               MOVW    R31:R30, R25:R24
   \   00000050   EB0B               LDI     R16, 187
   \   00000052   8300               ST      Z, R16
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14A               LDI     R20, 26
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    548              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP >> 8;
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8180               LD      R24, Z
   \   00000086   8191               LDD     R25, Z+1
   \   00000088   2F06               MOV     R16, R22
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F80               ADD     R24, R16
   \   000000A0   1F91               ADC     R25, R17
   \   000000A2   01FC               MOVW    R31:R30, R25:R24
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F06               MOV     R16, R22
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E14A               LDI     R20, 26
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    549              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000C6   2F06               MOV     R16, R22
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E14A               LDI     R20, 26
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0198               MOVW    R19:R18, R17:R16
    550              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DE   2F06               MOV     R16, R22
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E14A               LDI     R20, 26
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    551          
    552              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.PortUsed & 0xff;
   \   000000FC   ....               LDI     R30, LOW(TData)
   \   000000FE   ....               LDI     R31, (TData) >> 8
   \   00000100   81A0               LD      R26, Z
   \   00000102   81B1               LDD     R27, Z+1
   \   00000104   2F06               MOV     R16, R22
   \   00000106   E010               LDI     R17, 0
   \   00000108   E14A               LDI     R20, 26
   \   0000010A   E050               LDI     R21, 0
   \   0000010C   ........           CALL    ?S_EC_MUL_L02
   \   00000110   01F8               MOVW    R31:R30, R17:R16
   \   00000112   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000114   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000116   8180               LD      R24, Z
   \   00000118   8191               LDD     R25, Z+1
   \   0000011A   2F06               MOV     R16, R22
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   E14A               LDI     R20, 26
   \   00000120   E050               LDI     R21, 0
   \   00000122   ........           CALL    ?S_EC_MUL_L02
   \   00000126   01F8               MOVW    R31:R30, R17:R16
   \   00000128   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012C   8102               LDD     R16, Z+2
   \   0000012E   8113               LDD     R17, Z+3
   \   00000130   0F80               ADD     R24, R16
   \   00000132   1F91               ADC     R25, R17
   \   00000134   01FC               MOVW    R31:R30, R25:R24
   \   00000136   83A0               ST      Z, R26
   \   00000138   2F06               MOV     R16, R22
   \   0000013A   E010               LDI     R17, 0
   \   0000013C   E14A               LDI     R20, 26
   \   0000013E   E050               LDI     R21, 0
   \   00000140   ........           CALL    ?S_EC_MUL_L02
   \   00000144   01F8               MOVW    R31:R30, R17:R16
   \   00000146   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000148   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014A   8102               LDD     R16, Z+2
   \   0000014C   8113               LDD     R17, Z+3
   \   0000014E   5F0F               SUBI    R16, 255
   \   00000150   4F1F               SBCI    R17, 255
   \   00000152   8302               STD     Z+2, R16
   \   00000154   8313               STD     Z+3, R17
    553              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.Ana.PortUsed >> 8) & 0xff;
   \   00000156   ....               LDI     R30, LOW(TData)
   \   00000158   ....               LDI     R31, (TData) >> 8
   \   0000015A   81A0               LD      R26, Z
   \   0000015C   81B1               LDD     R27, Z+1
   \   0000015E   2FAB               MOV     R26, R27
   \   00000160   E0B0               LDI     R27, 0
   \   00000162   2F06               MOV     R16, R22
   \   00000164   E010               LDI     R17, 0
   \   00000166   E14A               LDI     R20, 26
   \   00000168   E050               LDI     R21, 0
   \   0000016A   ........           CALL    ?S_EC_MUL_L02
   \   0000016E   01F8               MOVW    R31:R30, R17:R16
   \   00000170   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000174   8180               LD      R24, Z
   \   00000176   8191               LDD     R25, Z+1
   \   00000178   2F06               MOV     R16, R22
   \   0000017A   E010               LDI     R17, 0
   \   0000017C   E14A               LDI     R20, 26
   \   0000017E   E050               LDI     R21, 0
   \   00000180   ........           CALL    ?S_EC_MUL_L02
   \   00000184   01F8               MOVW    R31:R30, R17:R16
   \   00000186   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000188   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000018A   8102               LDD     R16, Z+2
   \   0000018C   8113               LDD     R17, Z+3
   \   0000018E   0F80               ADD     R24, R16
   \   00000190   1F91               ADC     R25, R17
   \   00000192   01FC               MOVW    R31:R30, R25:R24
   \   00000194   83A0               ST      Z, R26
   \   00000196   2F06               MOV     R16, R22
   \   00000198   E010               LDI     R17, 0
   \   0000019A   E14A               LDI     R20, 26
   \   0000019C   E050               LDI     R21, 0
   \   0000019E   ........           CALL    ?S_EC_MUL_L02
   \   000001A2   01F8               MOVW    R31:R30, R17:R16
   \   000001A4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A8   8102               LDD     R16, Z+2
   \   000001AA   8113               LDD     R17, Z+3
   \   000001AC   5F0F               SUBI    R16, 255
   \   000001AE   4F1F               SBCI    R17, 255
   \   000001B0   8302               STD     Z+2, R16
   \   000001B2   8313               STD     Z+3, R17
    554          
    555              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000001B4   2F06               MOV     R16, R22
   \   000001B6   E010               LDI     R17, 0
   \   000001B8   E14A               LDI     R20, 26
   \   000001BA   E050               LDI     R21, 0
   \   000001BC   ........           CALL    ?S_EC_MUL_L02
   \   000001C0   01F8               MOVW    R31:R30, R17:R16
   \   000001C2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001C6   8182               LDD     R24, Z+2
   \   000001C8   8193               LDD     R25, Z+3
   \   000001CA   2F02               MOV     R16, R18
   \   000001CC   1B80               SUB     R24, R16
   \   000001CE   5082               SUBI    R24, 2
   \   000001D0   2F06               MOV     R16, R22
   \   000001D2   E010               LDI     R17, 0
   \   000001D4   E14A               LDI     R20, 26
   \   000001D6   E050               LDI     R21, 0
   \   000001D8   ........           CALL    ?S_EC_MUL_L02
   \   000001DC   01F8               MOVW    R31:R30, R17:R16
   \   000001DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E2   8100               LD      R16, Z
   \   000001E4   8111               LDD     R17, Z+1
   \   000001E6   0F02               ADD     R16, R18
   \   000001E8   1F13               ADC     R17, R19
   \   000001EA   01F8               MOVW    R31:R30, R17:R16
   \   000001EC   8380               ST      Z, R24
    556              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000001EE   2F06               MOV     R16, R22
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E14A               LDI     R20, 26
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   01F8               MOVW    R31:R30, R17:R16
   \   000001FC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001FE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000200   8182               LDD     R24, Z+2
   \   00000202   8193               LDD     R25, Z+3
   \   00000204   1B82               SUB     R24, R18
   \   00000206   0B93               SBC     R25, R19
   \   00000208   9702               SBIW    R25:R24, 2
   \   0000020A   2F89               MOV     R24, R25
   \   0000020C   E090               LDI     R25, 0
   \   0000020E   2F06               MOV     R16, R22
   \   00000210   E010               LDI     R17, 0
   \   00000212   E14A               LDI     R20, 26
   \   00000214   E050               LDI     R21, 0
   \   00000216   ........           CALL    ?S_EC_MUL_L02
   \   0000021A   01F8               MOVW    R31:R30, R17:R16
   \   0000021C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000021E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000220   8100               LD      R16, Z
   \   00000222   8111               LDD     R17, Z+1
   \   00000224   0F02               ADD     R16, R18
   \   00000226   1F13               ADC     R17, R19
   \   00000228   01F8               MOVW    R31:R30, R17:R16
   \   0000022A   8381               STD     Z+1, R24
    557          }
   \   0000022C   E0E4               LDI     R30, 4
   \   0000022E   ........           JMP     ?EPILOGUE_B4_L09
    558          
    559          /*************************************************************************
    560          *
    561          * Build filter data package for AN-ZBANA
    562          *
    563          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    564          void BuildANAFilter(char ch, short pointer) {
   \                     BuildANAFilter:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    565          
    566              char port;
    567              short ntna ;
    568              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F01               STD     Z+25, R16
    569          
    570              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER & 0xff;
   \   0000001E   2F06               MOV     R16, R22
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   81A0               LD      R26, Z
   \   00000032   81B1               LDD     R27, Z+1
   \   00000034   2F06               MOV     R16, R22
   \   00000036   E010               LDI     R17, 0
   \   00000038   E14A               LDI     R20, 26
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0FA0               ADD     R26, R16
   \   0000004C   1FB1               ADC     R27, R17
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   EC0F               LDI     R16, 207
   \   00000052   8300               ST      Z, R16
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14A               LDI     R20, 26
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    571              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER >> 8;
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   81A0               LD      R26, Z
   \   00000086   81B1               LDD     R27, Z+1
   \   00000088   2F06               MOV     R16, R22
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0FA0               ADD     R26, R16
   \   000000A0   1FB1               ADC     R27, R17
   \   000000A2   01FD               MOVW    R31:R30, R27:R26
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F06               MOV     R16, R22
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E14A               LDI     R20, 26
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    572              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000C6   2F06               MOV     R16, R22
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E14A               LDI     R20, 26
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0118               MOVW    R3:R2, R17:R16
    573              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DE   2F06               MOV     R16, R22
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E14A               LDI     R20, 26
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    574          
    575              for (port = 0; port < 12; port++) {
   \   000000FC   E020               LDI     R18, 0
   \                     ??BuildANAFilter_0:
   \   000000FE   302C               CPI     R18, 12
   \   00000100   F580               BRCC    ??BuildANAFilter_1
    576                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Filter[port];
   \   00000102   E030               LDI     R19, 0
   \   00000104   01F9               MOVW    R31:R30, R19:R18
   \   00000106   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000010A   8132               LDD     R19, Z+2
   \   0000010C   2F06               MOV     R16, R22
   \   0000010E   E010               LDI     R17, 0
   \   00000110   E14A               LDI     R20, 26
   \   00000112   E050               LDI     R21, 0
   \   00000114   ........           CALL    ?S_EC_MUL_L02
   \   00000118   01F8               MOVW    R31:R30, R17:R16
   \   0000011A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011E   81A0               LD      R26, Z
   \   00000120   81B1               LDD     R27, Z+1
   \   00000122   2F06               MOV     R16, R22
   \   00000124   E010               LDI     R17, 0
   \   00000126   E14A               LDI     R20, 26
   \   00000128   E050               LDI     R21, 0
   \   0000012A   ........           CALL    ?S_EC_MUL_L02
   \   0000012E   01F8               MOVW    R31:R30, R17:R16
   \   00000130   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000132   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000134   8102               LDD     R16, Z+2
   \   00000136   8113               LDD     R17, Z+3
   \   00000138   0FA0               ADD     R26, R16
   \   0000013A   1FB1               ADC     R27, R17
   \   0000013C   01FD               MOVW    R31:R30, R27:R26
   \   0000013E   8330               ST      Z, R19
   \   00000140   2F06               MOV     R16, R22
   \   00000142   E010               LDI     R17, 0
   \   00000144   E14A               LDI     R20, 26
   \   00000146   E050               LDI     R21, 0
   \   00000148   ........           CALL    ?S_EC_MUL_L02
   \   0000014C   01F8               MOVW    R31:R30, R17:R16
   \   0000014E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000150   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000152   8102               LDD     R16, Z+2
   \   00000154   8113               LDD     R17, Z+3
   \   00000156   5F0F               SUBI    R16, 255
   \   00000158   4F1F               SBCI    R17, 255
   \   0000015A   8302               STD     Z+2, R16
   \   0000015C   8313               STD     Z+3, R17
    577              }
   \   0000015E   9523               INC     R18
   \   00000160   CFCE               RJMP    ??BuildANAFilter_0
    578          
    579              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildANAFilter_1:
   \   00000162   2F06               MOV     R16, R22
   \   00000164   E010               LDI     R17, 0
   \   00000166   E14A               LDI     R20, 26
   \   00000168   E050               LDI     R21, 0
   \   0000016A   ........           CALL    ?S_EC_MUL_L02
   \   0000016E   01F8               MOVW    R31:R30, R17:R16
   \   00000170   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000174   81A2               LDD     R26, Z+2
   \   00000176   81B3               LDD     R27, Z+3
   \   00000178   2D02               MOV     R16, R2
   \   0000017A   1BA0               SUB     R26, R16
   \   0000017C   50A2               SUBI    R26, 2
   \   0000017E   2F06               MOV     R16, R22
   \   00000180   E010               LDI     R17, 0
   \   00000182   E14A               LDI     R20, 26
   \   00000184   E050               LDI     R21, 0
   \   00000186   ........           CALL    ?S_EC_MUL_L02
   \   0000018A   01F8               MOVW    R31:R30, R17:R16
   \   0000018C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000190   8100               LD      R16, Z
   \   00000192   8111               LDD     R17, Z+1
   \   00000194   0D02               ADD     R16, R2
   \   00000196   1D13               ADC     R17, R3
   \   00000198   01F8               MOVW    R31:R30, R17:R16
   \   0000019A   83A0               ST      Z, R26
    580              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000019C   2F06               MOV     R16, R22
   \   0000019E   E010               LDI     R17, 0
   \   000001A0   E14A               LDI     R20, 26
   \   000001A2   E050               LDI     R21, 0
   \   000001A4   ........           CALL    ?S_EC_MUL_L02
   \   000001A8   01F8               MOVW    R31:R30, R17:R16
   \   000001AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AE   81A2               LDD     R26, Z+2
   \   000001B0   81B3               LDD     R27, Z+3
   \   000001B2   19A2               SUB     R26, R2
   \   000001B4   09B3               SBC     R27, R3
   \   000001B6   9712               SBIW    R27:R26, 2
   \   000001B8   2FAB               MOV     R26, R27
   \   000001BA   E0B0               LDI     R27, 0
   \   000001BC   2F06               MOV     R16, R22
   \   000001BE   E010               LDI     R17, 0
   \   000001C0   E14A               LDI     R20, 26
   \   000001C2   E050               LDI     R21, 0
   \   000001C4   ........           CALL    ?S_EC_MUL_L02
   \   000001C8   01F8               MOVW    R31:R30, R17:R16
   \   000001CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CE   8100               LD      R16, Z
   \   000001D0   8111               LDD     R17, Z+1
   \   000001D2   0D02               ADD     R16, R2
   \   000001D4   1D13               ADC     R17, R3
   \   000001D6   01F8               MOVW    R31:R30, R17:R16
   \   000001D8   83A1               STD     Z+1, R26
    581          }
   \   000001DA   E0E4               LDI     R30, 4
   \   000001DC   ........           JMP     ?EPILOGUE_B4_L09
    582          
    583          /*************************************************************************
    584          *
    585          * Build datablock for External AD (ANA)
    586          *
    587          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    588          void BuildMDataANA(char ch, short pointer) {
   \                     BuildMDataANA:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    589          
    590              short ntna, i ;
    591              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F01               STD     Z+25, R16
    592          
    593              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA & 0xff;
   \   0000001E   2F06               MOV     R16, R22
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8180               LD      R24, Z
   \   00000032   8191               LDD     R25, Z+1
   \   00000034   2F06               MOV     R16, R22
   \   00000036   E010               LDI     R17, 0
   \   00000038   E14A               LDI     R20, 26
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F80               ADD     R24, R16
   \   0000004C   1F91               ADC     R25, R17
   \   0000004E   01FC               MOVW    R31:R30, R25:R24
   \   00000050   ED09               LDI     R16, 217
   \   00000052   8300               ST      Z, R16
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14A               LDI     R20, 26
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    594              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA >> 8;
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8180               LD      R24, Z
   \   00000086   8191               LDD     R25, Z+1
   \   00000088   2F06               MOV     R16, R22
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F80               ADD     R24, R16
   \   000000A0   1F91               ADC     R25, R17
   \   000000A2   01FC               MOVW    R31:R30, R25:R24
   \   000000A4   E004               LDI     R16, 4
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F06               MOV     R16, R22
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E14A               LDI     R20, 26
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    595              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000C6   2F06               MOV     R16, R22
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E14A               LDI     R20, 26
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0118               MOVW    R3:R2, R17:R16
    596              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DE   2F06               MOV     R16, R22
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E14A               LDI     R20, 26
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    597          
    598              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RestartStatus << 4) ;    // Add restart status
   \   000000FC   9170....           LDS     R23, RestartStatus
   \   00000100   9572               SWAP    R23
   \   00000102   7F70               ANDI    R23, 0xF0
   \   00000104   2F06               MOV     R16, R22
   \   00000106   E010               LDI     R17, 0
   \   00000108   E14A               LDI     R20, 26
   \   0000010A   E050               LDI     R21, 0
   \   0000010C   ........           CALL    ?S_EC_MUL_L02
   \   00000110   01F8               MOVW    R31:R30, R17:R16
   \   00000112   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000114   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000116   8180               LD      R24, Z
   \   00000118   8191               LDD     R25, Z+1
   \   0000011A   2F06               MOV     R16, R22
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   E14A               LDI     R20, 26
   \   00000120   E050               LDI     R21, 0
   \   00000122   ........           CALL    ?S_EC_MUL_L02
   \   00000126   01F8               MOVW    R31:R30, R17:R16
   \   00000128   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012C   8102               LDD     R16, Z+2
   \   0000012E   8113               LDD     R17, Z+3
   \   00000130   0F80               ADD     R24, R16
   \   00000132   1F91               ADC     R25, R17
   \   00000134   01FC               MOVW    R31:R30, R25:R24
   \   00000136   8370               ST      Z, R23
   \   00000138   2F06               MOV     R16, R22
   \   0000013A   E010               LDI     R17, 0
   \   0000013C   E14A               LDI     R20, 26
   \   0000013E   E050               LDI     R21, 0
   \   00000140   ........           CALL    ?S_EC_MUL_L02
   \   00000144   01F8               MOVW    R31:R30, R17:R16
   \   00000146   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000148   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014A   8102               LDD     R16, Z+2
   \   0000014C   8113               LDD     R17, Z+3
   \   0000014E   5F0F               SUBI    R16, 255
   \   00000150   4F1F               SBCI    R17, 255
   \   00000152   8302               STD     Z+2, R16
   \   00000154   8313               STD     Z+3, R17
    599              for (i = 0; i<12; i++) {
   \   00000156   E020               LDI     R18, 0
   \   00000158   E030               LDI     R19, 0
   \                     ??BuildMDataANA_0:
   \   0000015A   302C               CPI     R18, 12
   \   0000015C   E000               LDI     R16, 0
   \   0000015E   0730               CPC     R19, R16
   \   00000160   F00C               BRLT    $+2+2
   \   00000162   C068               RJMP    ??BuildMDataANA_1
    600                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Status[i] ;
   \   00000164   01F9               MOVW    R31:R30, R19:R18
   \   00000166   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000168   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000016A   8576               LDD     R23, Z+14
   \   0000016C   2F06               MOV     R16, R22
   \   0000016E   E010               LDI     R17, 0
   \   00000170   E14A               LDI     R20, 26
   \   00000172   E050               LDI     R21, 0
   \   00000174   ........           CALL    ?S_EC_MUL_L02
   \   00000178   01F8               MOVW    R31:R30, R17:R16
   \   0000017A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000017C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017E   8180               LD      R24, Z
   \   00000180   8191               LDD     R25, Z+1
   \   00000182   2F06               MOV     R16, R22
   \   00000184   E010               LDI     R17, 0
   \   00000186   E14A               LDI     R20, 26
   \   00000188   E050               LDI     R21, 0
   \   0000018A   ........           CALL    ?S_EC_MUL_L02
   \   0000018E   01F8               MOVW    R31:R30, R17:R16
   \   00000190   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000192   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000194   8102               LDD     R16, Z+2
   \   00000196   8113               LDD     R17, Z+3
   \   00000198   0F80               ADD     R24, R16
   \   0000019A   1F91               ADC     R25, R17
   \   0000019C   01FC               MOVW    R31:R30, R25:R24
   \   0000019E   8370               ST      Z, R23
   \   000001A0   2F06               MOV     R16, R22
   \   000001A2   E010               LDI     R17, 0
   \   000001A4   E14A               LDI     R20, 26
   \   000001A6   E050               LDI     R21, 0
   \   000001A8   ........           CALL    ?S_EC_MUL_L02
   \   000001AC   01F8               MOVW    R31:R30, R17:R16
   \   000001AE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B2   8102               LDD     R16, Z+2
   \   000001B4   8113               LDD     R17, Z+3
   \   000001B6   5F0F               SUBI    R16, 255
   \   000001B8   4F1F               SBCI    R17, 255
   \   000001BA   8302               STD     Z+2, R16
   \   000001BC   8313               STD     Z+3, R17
    601                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.Ana.Result[i]) ;   // ADresult
   \   000001BE   0189               MOVW    R17:R16, R19:R18
   \   000001C0   0F00               LSL     R16
   \   000001C2   1F11               ROL     R17
   \   000001C4   0F00               LSL     R16
   \   000001C6   1F11               ROL     R17
   \   000001C8   01F8               MOVW    R31:R30, R17:R16
   \   000001CA   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001CC   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001CE   8D82               LDD     R24, Z+26
   \   000001D0   8D93               LDD     R25, Z+27
   \   000001D2   8DA4               LDD     R26, Z+28
   \   000001D4   8DB5               LDD     R27, Z+29
   \   000001D6   2F06               MOV     R16, R22
   \   000001D8   E010               LDI     R17, 0
   \   000001DA   E14A               LDI     R20, 26
   \   000001DC   E050               LDI     R21, 0
   \   000001DE   ........           CALL    ?S_EC_MUL_L02
   \   000001E2   01F8               MOVW    R31:R30, R17:R16
   \   000001E4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E8   8060               LD      R6, Z
   \   000001EA   8071               LDD     R7, Z+1
   \   000001EC   2F06               MOV     R16, R22
   \   000001EE   E010               LDI     R17, 0
   \   000001F0   E14A               LDI     R20, 26
   \   000001F2   E050               LDI     R21, 0
   \   000001F4   ........           CALL    ?S_EC_MUL_L02
   \   000001F8   01F8               MOVW    R31:R30, R17:R16
   \   000001FA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001FC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001FE   8102               LDD     R16, Z+2
   \   00000200   8113               LDD     R17, Z+3
   \   00000202   0E60               ADD     R6, R16
   \   00000204   1E71               ADC     R7, R17
   \   00000206   01F3               MOVW    R31:R30, R7:R6
   \   00000208   8380               ST      Z, R24
   \   0000020A   8391               STD     Z+1, R25
   \   0000020C   83A2               STD     Z+2, R26
   \   0000020E   83B3               STD     Z+3, R27
    602                  UART[ch].TxFirst += sizeof(float) ;
   \   00000210   2F06               MOV     R16, R22
   \   00000212   E010               LDI     R17, 0
   \   00000214   E14A               LDI     R20, 26
   \   00000216   E050               LDI     R21, 0
   \   00000218   ........           CALL    ?S_EC_MUL_L02
   \   0000021C   01F8               MOVW    R31:R30, R17:R16
   \   0000021E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000220   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000222   8102               LDD     R16, Z+2
   \   00000224   8113               LDD     R17, Z+3
   \   00000226   5F0C               SUBI    R16, 252
   \   00000228   4F1F               SBCI    R17, 255
   \   0000022A   8302               STD     Z+2, R16
   \   0000022C   8313               STD     Z+3, R17
    603              }
   \   0000022E   5F2F               SUBI    R18, 255
   \   00000230   4F3F               SBCI    R19, 255
   \   00000232   CF93               RJMP    ??BuildMDataANA_0
    604          
    605              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildMDataANA_1:
   \   00000234   2F06               MOV     R16, R22
   \   00000236   E010               LDI     R17, 0
   \   00000238   E14A               LDI     R20, 26
   \   0000023A   E050               LDI     R21, 0
   \   0000023C   ........           CALL    ?S_EC_MUL_L02
   \   00000240   01F8               MOVW    R31:R30, R17:R16
   \   00000242   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000244   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000246   8182               LDD     R24, Z+2
   \   00000248   8193               LDD     R25, Z+3
   \   0000024A   2D02               MOV     R16, R2
   \   0000024C   1B80               SUB     R24, R16
   \   0000024E   5082               SUBI    R24, 2
   \   00000250   2F06               MOV     R16, R22
   \   00000252   E010               LDI     R17, 0
   \   00000254   E14A               LDI     R20, 26
   \   00000256   E050               LDI     R21, 0
   \   00000258   ........           CALL    ?S_EC_MUL_L02
   \   0000025C   01F8               MOVW    R31:R30, R17:R16
   \   0000025E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000260   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000262   8100               LD      R16, Z
   \   00000264   8111               LDD     R17, Z+1
   \   00000266   0D02               ADD     R16, R2
   \   00000268   1D13               ADC     R17, R3
   \   0000026A   01F8               MOVW    R31:R30, R17:R16
   \   0000026C   8380               ST      Z, R24
    606              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000026E   2F06               MOV     R16, R22
   \   00000270   E010               LDI     R17, 0
   \   00000272   E14A               LDI     R20, 26
   \   00000274   E050               LDI     R21, 0
   \   00000276   ........           CALL    ?S_EC_MUL_L02
   \   0000027A   01F8               MOVW    R31:R30, R17:R16
   \   0000027C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000027E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000280   8182               LDD     R24, Z+2
   \   00000282   8193               LDD     R25, Z+3
   \   00000284   1982               SUB     R24, R2
   \   00000286   0993               SBC     R25, R3
   \   00000288   9702               SBIW    R25:R24, 2
   \   0000028A   2F89               MOV     R24, R25
   \   0000028C   E090               LDI     R25, 0
   \   0000028E   2F06               MOV     R16, R22
   \   00000290   E010               LDI     R17, 0
   \   00000292   E14A               LDI     R20, 26
   \   00000294   E050               LDI     R21, 0
   \   00000296   ........           CALL    ?S_EC_MUL_L02
   \   0000029A   01F8               MOVW    R31:R30, R17:R16
   \   0000029C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000029E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002A0   8100               LD      R16, Z
   \   000002A2   8111               LDD     R17, Z+1
   \   000002A4   0D02               ADD     R16, R2
   \   000002A6   1D13               ADC     R17, R3
   \   000002A8   01F8               MOVW    R31:R30, R17:R16
   \   000002AA   8381               STD     Z+1, R24
    607          
    608          }
   \   000002AC   E0E8               LDI     R30, 8
   \   000002AE   ........           JMP     ?EPILOGUE_B8_L09
    609          
    610          /*************************************************************************
    611          *
    612          * Build datablock for Stack status
    613          *
    614          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    615          void BuildStackStatus(char ch, short pointer) {
   \                     BuildStackStatus:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
    616          
    617              short ntna, stack ;
    618              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8F01               STD     Z+25, R16
    619          
    620              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS & 0xff;
   \   0000001E   2F08               MOV     R16, R24
   \   00000020   E010               LDI     R17, 0
   \   00000022   E14A               LDI     R20, 26
   \   00000024   E050               LDI     R21, 0
   \   00000026   ........           CALL    ?S_EC_MUL_L02
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000030   8120               LD      R18, Z
   \   00000032   8131               LDD     R19, Z+1
   \   00000034   2F08               MOV     R16, R24
   \   00000036   E010               LDI     R17, 0
   \   00000038   E14A               LDI     R20, 26
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   0F20               ADD     R18, R16
   \   0000004C   1F31               ADC     R19, R17
   \   0000004E   01F9               MOVW    R31:R30, R19:R18
   \   00000050   E707               LDI     R16, 119
   \   00000052   8300               ST      Z, R16
   \   00000054   2F08               MOV     R16, R24
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14A               LDI     R20, 26
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    621              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS >> 8;
   \   00000072   2F08               MOV     R16, R24
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8120               LD      R18, Z
   \   00000086   8131               LDD     R19, Z+1
   \   00000088   2F08               MOV     R16, R24
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8102               LDD     R16, Z+2
   \   0000009C   8113               LDD     R17, Z+3
   \   0000009E   0F20               ADD     R18, R16
   \   000000A0   1F31               ADC     R19, R17
   \   000000A2   01F9               MOVW    R31:R30, R19:R18
   \   000000A4   E007               LDI     R16, 7
   \   000000A6   8300               ST      Z, R16
   \   000000A8   2F08               MOV     R16, R24
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   E14A               LDI     R20, 26
   \   000000AE   E050               LDI     R21, 0
   \   000000B0   ........           CALL    ?S_EC_MUL_L02
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BA   8102               LDD     R16, Z+2
   \   000000BC   8113               LDD     R17, Z+3
   \   000000BE   5F0F               SUBI    R16, 255
   \   000000C0   4F1F               SBCI    R17, 255
   \   000000C2   8302               STD     Z+2, R16
   \   000000C4   8313               STD     Z+3, R17
    622              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   000000C6   2F08               MOV     R16, R24
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E14A               LDI     R20, 26
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8102               LDD     R16, Z+2
   \   000000DA   8113               LDD     R17, Z+3
   \   000000DC   0128               MOVW    R5:R4, R17:R16
    623              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   000000DE   2F08               MOV     R16, R24
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E14A               LDI     R20, 26
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8102               LDD     R16, Z+2
   \   000000F2   8113               LDD     R17, Z+3
   \   000000F4   5F0E               SUBI    R16, 254
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8302               STD     Z+2, R16
   \   000000FA   8313               STD     Z+3, R17
    624          
    625              stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
   \   000000FC   ....               LDI     R16, LOW(TCB_USART0)
   \   000000FE   ....               LDI     R17, (TCB_USART0) >> 8
   \   00000100   ........           CALL    OS_GetStackSpace
   \   00000104   01D8               MOVW    R27:R26, R17:R16
    626              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   00000106   2F6A               MOV     R22, R26
   \   00000108   2F08               MOV     R16, R24
   \   0000010A   E010               LDI     R17, 0
   \   0000010C   E14A               LDI     R20, 26
   \   0000010E   E050               LDI     R21, 0
   \   00000110   ........           CALL    ?S_EC_MUL_L02
   \   00000114   01F8               MOVW    R31:R30, R17:R16
   \   00000116   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000118   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011A   8120               LD      R18, Z
   \   0000011C   8131               LDD     R19, Z+1
   \   0000011E   2F08               MOV     R16, R24
   \   00000120   E010               LDI     R17, 0
   \   00000122   E14A               LDI     R20, 26
   \   00000124   E050               LDI     R21, 0
   \   00000126   ........           CALL    ?S_EC_MUL_L02
   \   0000012A   01F8               MOVW    R31:R30, R17:R16
   \   0000012C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000012E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000130   8102               LDD     R16, Z+2
   \   00000132   8113               LDD     R17, Z+3
   \   00000134   0F20               ADD     R18, R16
   \   00000136   1F31               ADC     R19, R17
   \   00000138   01F9               MOVW    R31:R30, R19:R18
   \   0000013A   8360               ST      Z, R22
   \   0000013C   2F08               MOV     R16, R24
   \   0000013E   E010               LDI     R17, 0
   \   00000140   E14A               LDI     R20, 26
   \   00000142   E050               LDI     R21, 0
   \   00000144   ........           CALL    ?S_EC_MUL_L02
   \   00000148   01F8               MOVW    R31:R30, R17:R16
   \   0000014A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014E   8102               LDD     R16, Z+2
   \   00000150   8113               LDD     R17, Z+3
   \   00000152   5F0F               SUBI    R16, 255
   \   00000154   4F1F               SBCI    R17, 255
   \   00000156   8302               STD     Z+2, R16
   \   00000158   8313               STD     Z+3, R17
    627              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000015A   01BD               MOVW    R23:R22, R27:R26
   \   0000015C   2F67               MOV     R22, R23
   \   0000015E   0F77               LSL     R23
   \   00000160   0B77               SBC     R23, R23
   \   00000162   2F08               MOV     R16, R24
   \   00000164   E010               LDI     R17, 0
   \   00000166   E14A               LDI     R20, 26
   \   00000168   E050               LDI     R21, 0
   \   0000016A   ........           CALL    ?S_EC_MUL_L02
   \   0000016E   01F8               MOVW    R31:R30, R17:R16
   \   00000170   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000174   8120               LD      R18, Z
   \   00000176   8131               LDD     R19, Z+1
   \   00000178   2F08               MOV     R16, R24
   \   0000017A   E010               LDI     R17, 0
   \   0000017C   E14A               LDI     R20, 26
   \   0000017E   E050               LDI     R21, 0
   \   00000180   ........           CALL    ?S_EC_MUL_L02
   \   00000184   01F8               MOVW    R31:R30, R17:R16
   \   00000186   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000188   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000018A   8102               LDD     R16, Z+2
   \   0000018C   8113               LDD     R17, Z+3
   \   0000018E   0F20               ADD     R18, R16
   \   00000190   1F31               ADC     R19, R17
   \   00000192   01F9               MOVW    R31:R30, R19:R18
   \   00000194   8360               ST      Z, R22
   \   00000196   2F08               MOV     R16, R24
   \   00000198   E010               LDI     R17, 0
   \   0000019A   E14A               LDI     R20, 26
   \   0000019C   E050               LDI     R21, 0
   \   0000019E   ........           CALL    ?S_EC_MUL_L02
   \   000001A2   01F8               MOVW    R31:R30, R17:R16
   \   000001A4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001A8   8102               LDD     R16, Z+2
   \   000001AA   8113               LDD     R17, Z+3
   \   000001AC   5F0F               SUBI    R16, 255
   \   000001AE   4F1F               SBCI    R17, 255
   \   000001B0   8302               STD     Z+2, R16
   \   000001B2   8313               STD     Z+3, R17
    628              stack = OS_GetStackSpace(&TCB_USART1);                            // USART 1
   \   000001B4   ....               LDI     R16, LOW(TCB_USART1)
   \   000001B6   ....               LDI     R17, (TCB_USART1) >> 8
   \   000001B8   ........           CALL    OS_GetStackSpace
   \   000001BC   01D8               MOVW    R27:R26, R17:R16
    629              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000001BE   2F6A               MOV     R22, R26
   \   000001C0   2F08               MOV     R16, R24
   \   000001C2   E010               LDI     R17, 0
   \   000001C4   E14A               LDI     R20, 26
   \   000001C6   E050               LDI     R21, 0
   \   000001C8   ........           CALL    ?S_EC_MUL_L02
   \   000001CC   01F8               MOVW    R31:R30, R17:R16
   \   000001CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D2   8120               LD      R18, Z
   \   000001D4   8131               LDD     R19, Z+1
   \   000001D6   2F08               MOV     R16, R24
   \   000001D8   E010               LDI     R17, 0
   \   000001DA   E14A               LDI     R20, 26
   \   000001DC   E050               LDI     R21, 0
   \   000001DE   ........           CALL    ?S_EC_MUL_L02
   \   000001E2   01F8               MOVW    R31:R30, R17:R16
   \   000001E4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E8   8102               LDD     R16, Z+2
   \   000001EA   8113               LDD     R17, Z+3
   \   000001EC   0F20               ADD     R18, R16
   \   000001EE   1F31               ADC     R19, R17
   \   000001F0   01F9               MOVW    R31:R30, R19:R18
   \   000001F2   8360               ST      Z, R22
   \   000001F4   2F08               MOV     R16, R24
   \   000001F6   E010               LDI     R17, 0
   \   000001F8   E14A               LDI     R20, 26
   \   000001FA   E050               LDI     R21, 0
   \   000001FC   ........           CALL    ?S_EC_MUL_L02
   \   00000200   01F8               MOVW    R31:R30, R17:R16
   \   00000202   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000204   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000206   8102               LDD     R16, Z+2
   \   00000208   8113               LDD     R17, Z+3
   \   0000020A   5F0F               SUBI    R16, 255
   \   0000020C   4F1F               SBCI    R17, 255
   \   0000020E   8302               STD     Z+2, R16
   \   00000210   8313               STD     Z+3, R17
    630              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000212   01BD               MOVW    R23:R22, R27:R26
   \   00000214   2F67               MOV     R22, R23
   \   00000216   0F77               LSL     R23
   \   00000218   0B77               SBC     R23, R23
   \   0000021A   2F08               MOV     R16, R24
   \   0000021C   E010               LDI     R17, 0
   \   0000021E   E14A               LDI     R20, 26
   \   00000220   E050               LDI     R21, 0
   \   00000222   ........           CALL    ?S_EC_MUL_L02
   \   00000226   01F8               MOVW    R31:R30, R17:R16
   \   00000228   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000022A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000022C   8120               LD      R18, Z
   \   0000022E   8131               LDD     R19, Z+1
   \   00000230   2F08               MOV     R16, R24
   \   00000232   E010               LDI     R17, 0
   \   00000234   E14A               LDI     R20, 26
   \   00000236   E050               LDI     R21, 0
   \   00000238   ........           CALL    ?S_EC_MUL_L02
   \   0000023C   01F8               MOVW    R31:R30, R17:R16
   \   0000023E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000240   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000242   8102               LDD     R16, Z+2
   \   00000244   8113               LDD     R17, Z+3
   \   00000246   0F20               ADD     R18, R16
   \   00000248   1F31               ADC     R19, R17
   \   0000024A   01F9               MOVW    R31:R30, R19:R18
   \   0000024C   8360               ST      Z, R22
   \   0000024E   2F08               MOV     R16, R24
   \   00000250   E010               LDI     R17, 0
   \   00000252   E14A               LDI     R20, 26
   \   00000254   E050               LDI     R21, 0
   \   00000256   ........           CALL    ?S_EC_MUL_L02
   \   0000025A   01F8               MOVW    R31:R30, R17:R16
   \   0000025C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000025E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000260   8102               LDD     R16, Z+2
   \   00000262   8113               LDD     R17, Z+3
   \   00000264   5F0F               SUBI    R16, 255
   \   00000266   4F1F               SBCI    R17, 255
   \   00000268   8302               STD     Z+2, R16
   \   0000026A   8313               STD     Z+3, R17
    631              stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \   0000026C   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   0000026E   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   00000270   ........           CALL    OS_GetStackSpace
   \   00000274   01D8               MOVW    R27:R26, R17:R16
    632              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   00000276   2F6A               MOV     R22, R26
   \   00000278   2F08               MOV     R16, R24
   \   0000027A   E010               LDI     R17, 0
   \   0000027C   E14A               LDI     R20, 26
   \   0000027E   E050               LDI     R21, 0
   \   00000280   ........           CALL    ?S_EC_MUL_L02
   \   00000284   01F8               MOVW    R31:R30, R17:R16
   \   00000286   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000288   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000028A   8120               LD      R18, Z
   \   0000028C   8131               LDD     R19, Z+1
   \   0000028E   2F08               MOV     R16, R24
   \   00000290   E010               LDI     R17, 0
   \   00000292   E14A               LDI     R20, 26
   \   00000294   E050               LDI     R21, 0
   \   00000296   ........           CALL    ?S_EC_MUL_L02
   \   0000029A   01F8               MOVW    R31:R30, R17:R16
   \   0000029C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000029E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002A0   8102               LDD     R16, Z+2
   \   000002A2   8113               LDD     R17, Z+3
   \   000002A4   0F20               ADD     R18, R16
   \   000002A6   1F31               ADC     R19, R17
   \   000002A8   01F9               MOVW    R31:R30, R19:R18
   \   000002AA   8360               ST      Z, R22
   \   000002AC   2F08               MOV     R16, R24
   \   000002AE   E010               LDI     R17, 0
   \   000002B0   E14A               LDI     R20, 26
   \   000002B2   E050               LDI     R21, 0
   \   000002B4   ........           CALL    ?S_EC_MUL_L02
   \   000002B8   01F8               MOVW    R31:R30, R17:R16
   \   000002BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002BE   8102               LDD     R16, Z+2
   \   000002C0   8113               LDD     R17, Z+3
   \   000002C2   5F0F               SUBI    R16, 255
   \   000002C4   4F1F               SBCI    R17, 255
   \   000002C6   8302               STD     Z+2, R16
   \   000002C8   8313               STD     Z+3, R17
    633              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   000002CA   01BD               MOVW    R23:R22, R27:R26
   \   000002CC   2F67               MOV     R22, R23
   \   000002CE   0F77               LSL     R23
   \   000002D0   0B77               SBC     R23, R23
   \   000002D2   2F08               MOV     R16, R24
   \   000002D4   E010               LDI     R17, 0
   \   000002D6   E14A               LDI     R20, 26
   \   000002D8   E050               LDI     R21, 0
   \   000002DA   ........           CALL    ?S_EC_MUL_L02
   \   000002DE   01F8               MOVW    R31:R30, R17:R16
   \   000002E0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002E2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002E4   8120               LD      R18, Z
   \   000002E6   8131               LDD     R19, Z+1
   \   000002E8   2F08               MOV     R16, R24
   \   000002EA   E010               LDI     R17, 0
   \   000002EC   E14A               LDI     R20, 26
   \   000002EE   E050               LDI     R21, 0
   \   000002F0   ........           CALL    ?S_EC_MUL_L02
   \   000002F4   01F8               MOVW    R31:R30, R17:R16
   \   000002F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002FA   8102               LDD     R16, Z+2
   \   000002FC   8113               LDD     R17, Z+3
   \   000002FE   0F20               ADD     R18, R16
   \   00000300   1F31               ADC     R19, R17
   \   00000302   01F9               MOVW    R31:R30, R19:R18
   \   00000304   8360               ST      Z, R22
   \   00000306   2F08               MOV     R16, R24
   \   00000308   E010               LDI     R17, 0
   \   0000030A   E14A               LDI     R20, 26
   \   0000030C   E050               LDI     R21, 0
   \   0000030E   ........           CALL    ?S_EC_MUL_L02
   \   00000312   01F8               MOVW    R31:R30, R17:R16
   \   00000314   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000316   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000318   8102               LDD     R16, Z+2
   \   0000031A   8113               LDD     R17, Z+3
   \   0000031C   5F0F               SUBI    R16, 255
   \   0000031E   4F1F               SBCI    R17, 255
   \   00000320   8302               STD     Z+2, R16
   \   00000322   8313               STD     Z+3, R17
    634              switch (UnitID) {
   \   00000324   9100....           LDS     R16, UnitID
   \   00000328   5000               SUBI    R16, 0
   \   0000032A   F021               BREQ    ??BuildStackStatus_0
   \   0000032C   950A               DEC     R16
   \   0000032E   F409               BRNE    $+2+2
   \   00000330   C0BA               RJMP    ??BuildStackStatus_1
   \   00000332   C169               RJMP    ??BuildStackStatus_2
    635              case AN_ZB485 :
    636                  stack = OS_GetStackSpace(&TCB_RS485Ctl);                            // RS485 Control
   \                     ??BuildStackStatus_0:
   \   00000334   ....               LDI     R16, LOW(TCB_RS485Ctl)
   \   00000336   ....               LDI     R17, (TCB_RS485Ctl) >> 8
   \   00000338   ........           CALL    OS_GetStackSpace
   \   0000033C   01D8               MOVW    R27:R26, R17:R16
    637                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   0000033E   2F6A               MOV     R22, R26
   \   00000340   2F08               MOV     R16, R24
   \   00000342   E010               LDI     R17, 0
   \   00000344   E14A               LDI     R20, 26
   \   00000346   E050               LDI     R21, 0
   \   00000348   ........           CALL    ?S_EC_MUL_L02
   \   0000034C   01F8               MOVW    R31:R30, R17:R16
   \   0000034E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000350   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000352   8120               LD      R18, Z
   \   00000354   8131               LDD     R19, Z+1
   \   00000356   2F08               MOV     R16, R24
   \   00000358   E010               LDI     R17, 0
   \   0000035A   E14A               LDI     R20, 26
   \   0000035C   E050               LDI     R21, 0
   \   0000035E   ........           CALL    ?S_EC_MUL_L02
   \   00000362   01F8               MOVW    R31:R30, R17:R16
   \   00000364   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000366   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000368   8102               LDD     R16, Z+2
   \   0000036A   8113               LDD     R17, Z+3
   \   0000036C   0F20               ADD     R18, R16
   \   0000036E   1F31               ADC     R19, R17
   \   00000370   01F9               MOVW    R31:R30, R19:R18
   \   00000372   8360               ST      Z, R22
   \   00000374   2F08               MOV     R16, R24
   \   00000376   E010               LDI     R17, 0
   \   00000378   E14A               LDI     R20, 26
   \   0000037A   E050               LDI     R21, 0
   \   0000037C   ........           CALL    ?S_EC_MUL_L02
   \   00000380   01F8               MOVW    R31:R30, R17:R16
   \   00000382   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000384   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000386   8102               LDD     R16, Z+2
   \   00000388   8113               LDD     R17, Z+3
   \   0000038A   5F0F               SUBI    R16, 255
   \   0000038C   4F1F               SBCI    R17, 255
   \   0000038E   8302               STD     Z+2, R16
   \   00000390   8313               STD     Z+3, R17
    638                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000392   01BD               MOVW    R23:R22, R27:R26
   \   00000394   2F67               MOV     R22, R23
   \   00000396   0F77               LSL     R23
   \   00000398   0B77               SBC     R23, R23
   \   0000039A   2F08               MOV     R16, R24
   \   0000039C   E010               LDI     R17, 0
   \   0000039E   E14A               LDI     R20, 26
   \   000003A0   E050               LDI     R21, 0
   \   000003A2   ........           CALL    ?S_EC_MUL_L02
   \   000003A6   01F8               MOVW    R31:R30, R17:R16
   \   000003A8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003AA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003AC   8120               LD      R18, Z
   \   000003AE   8131               LDD     R19, Z+1
   \   000003B0   2F08               MOV     R16, R24
   \   000003B2   E010               LDI     R17, 0
   \   000003B4   E14A               LDI     R20, 26
   \   000003B6   E050               LDI     R21, 0
   \   000003B8   ........           CALL    ?S_EC_MUL_L02
   \   000003BC   01F8               MOVW    R31:R30, R17:R16
   \   000003BE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003C0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003C2   8102               LDD     R16, Z+2
   \   000003C4   8113               LDD     R17, Z+3
   \   000003C6   0F20               ADD     R18, R16
   \   000003C8   1F31               ADC     R19, R17
   \   000003CA   01F9               MOVW    R31:R30, R19:R18
   \   000003CC   8360               ST      Z, R22
   \   000003CE   2F08               MOV     R16, R24
   \   000003D0   E010               LDI     R17, 0
   \   000003D2   E14A               LDI     R20, 26
   \   000003D4   E050               LDI     R21, 0
   \   000003D6   ........           CALL    ?S_EC_MUL_L02
   \   000003DA   01F8               MOVW    R31:R30, R17:R16
   \   000003DC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003DE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003E0   8102               LDD     R16, Z+2
   \   000003E2   8113               LDD     R17, Z+3
   \   000003E4   5F0F               SUBI    R16, 255
   \   000003E6   4F1F               SBCI    R17, 255
   \   000003E8   8302               STD     Z+2, R16
   \   000003EA   8313               STD     Z+3, R17
    639                  stack = OS_GetStackSpace(&TCB_RS485Rec);                            // RS485 receive
   \   000003EC   ....               LDI     R16, LOW(TCB_RS485Rec)
   \   000003EE   ....               LDI     R17, (TCB_RS485Rec) >> 8
   \   000003F0   ........           CALL    OS_GetStackSpace
   \   000003F4   01D8               MOVW    R27:R26, R17:R16
    640                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000003F6   2F6A               MOV     R22, R26
   \   000003F8   2F08               MOV     R16, R24
   \   000003FA   E010               LDI     R17, 0
   \   000003FC   E14A               LDI     R20, 26
   \   000003FE   E050               LDI     R21, 0
   \   00000400   ........           CALL    ?S_EC_MUL_L02
   \   00000404   01F8               MOVW    R31:R30, R17:R16
   \   00000406   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000408   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000040A   8120               LD      R18, Z
   \   0000040C   8131               LDD     R19, Z+1
   \   0000040E   2F08               MOV     R16, R24
   \   00000410   E010               LDI     R17, 0
   \   00000412   E14A               LDI     R20, 26
   \   00000414   E050               LDI     R21, 0
   \   00000416   ........           CALL    ?S_EC_MUL_L02
   \   0000041A   01F8               MOVW    R31:R30, R17:R16
   \   0000041C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000041E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000420   8102               LDD     R16, Z+2
   \   00000422   8113               LDD     R17, Z+3
   \   00000424   0F20               ADD     R18, R16
   \   00000426   1F31               ADC     R19, R17
   \   00000428   01F9               MOVW    R31:R30, R19:R18
   \   0000042A   8360               ST      Z, R22
   \   0000042C   2F08               MOV     R16, R24
   \   0000042E   E010               LDI     R17, 0
   \   00000430   E14A               LDI     R20, 26
   \   00000432   E050               LDI     R21, 0
   \   00000434   ........           CALL    ?S_EC_MUL_L02
   \   00000438   01F8               MOVW    R31:R30, R17:R16
   \   0000043A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000043C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000043E   8102               LDD     R16, Z+2
   \   00000440   8113               LDD     R17, Z+3
   \   00000442   5F0F               SUBI    R16, 255
   \   00000444   4F1F               SBCI    R17, 255
   \   00000446   8302               STD     Z+2, R16
   \   00000448   8313               STD     Z+3, R17
    641                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000044A   01BD               MOVW    R23:R22, R27:R26
   \   0000044C   2F67               MOV     R22, R23
   \   0000044E   0F77               LSL     R23
   \   00000450   0B77               SBC     R23, R23
   \   00000452   2F08               MOV     R16, R24
   \   00000454   E010               LDI     R17, 0
   \   00000456   E14A               LDI     R20, 26
   \   00000458   E050               LDI     R21, 0
   \   0000045A   ........           CALL    ?S_EC_MUL_L02
   \   0000045E   01F8               MOVW    R31:R30, R17:R16
   \   00000460   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000462   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000464   8120               LD      R18, Z
   \   00000466   8131               LDD     R19, Z+1
   \   00000468   2F08               MOV     R16, R24
   \   0000046A   E010               LDI     R17, 0
   \   0000046C   E14A               LDI     R20, 26
   \   0000046E   E050               LDI     R21, 0
   \   00000470   ........           CALL    ?S_EC_MUL_L02
   \   00000474   01F8               MOVW    R31:R30, R17:R16
   \   00000476   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000478   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000047A   8102               LDD     R16, Z+2
   \   0000047C   8113               LDD     R17, Z+3
   \   0000047E   0F20               ADD     R18, R16
   \   00000480   1F31               ADC     R19, R17
   \   00000482   01F9               MOVW    R31:R30, R19:R18
   \   00000484   8360               ST      Z, R22
   \   00000486   2F08               MOV     R16, R24
   \   00000488   E010               LDI     R17, 0
   \   0000048A   E14A               LDI     R20, 26
   \   0000048C   E050               LDI     R21, 0
   \   0000048E   ........           CALL    ?S_EC_MUL_L02
   \   00000492   01F8               MOVW    R31:R30, R17:R16
   \   00000494   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000496   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000498   8102               LDD     R16, Z+2
   \   0000049A   8113               LDD     R17, Z+3
   \   0000049C   5F0F               SUBI    R16, 255
   \   0000049E   4F1F               SBCI    R17, 255
   \   000004A0   8302               STD     Z+2, R16
   \   000004A2   8313               STD     Z+3, R17
    642                  break;
   \   000004A4   C0B0               RJMP    ??BuildStackStatus_2
    643              case AN_ZBANA :
    644                  stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
   \                     ??BuildStackStatus_1:
   \   000004A6   ....               LDI     R16, LOW(TCB_AD7715)
   \   000004A8   ....               LDI     R17, (TCB_AD7715) >> 8
   \   000004AA   ........           CALL    OS_GetStackSpace
   \   000004AE   01D8               MOVW    R27:R26, R17:R16
    645                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000004B0   2F6A               MOV     R22, R26
   \   000004B2   2F08               MOV     R16, R24
   \   000004B4   E010               LDI     R17, 0
   \   000004B6   E14A               LDI     R20, 26
   \   000004B8   E050               LDI     R21, 0
   \   000004BA   ........           CALL    ?S_EC_MUL_L02
   \   000004BE   01F8               MOVW    R31:R30, R17:R16
   \   000004C0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004C2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004C4   8120               LD      R18, Z
   \   000004C6   8131               LDD     R19, Z+1
   \   000004C8   2F08               MOV     R16, R24
   \   000004CA   E010               LDI     R17, 0
   \   000004CC   E14A               LDI     R20, 26
   \   000004CE   E050               LDI     R21, 0
   \   000004D0   ........           CALL    ?S_EC_MUL_L02
   \   000004D4   01F8               MOVW    R31:R30, R17:R16
   \   000004D6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004D8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004DA   8102               LDD     R16, Z+2
   \   000004DC   8113               LDD     R17, Z+3
   \   000004DE   0F20               ADD     R18, R16
   \   000004E0   1F31               ADC     R19, R17
   \   000004E2   01F9               MOVW    R31:R30, R19:R18
   \   000004E4   8360               ST      Z, R22
   \   000004E6   2F08               MOV     R16, R24
   \   000004E8   E010               LDI     R17, 0
   \   000004EA   E14A               LDI     R20, 26
   \   000004EC   E050               LDI     R21, 0
   \   000004EE   ........           CALL    ?S_EC_MUL_L02
   \   000004F2   01F8               MOVW    R31:R30, R17:R16
   \   000004F4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004F6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004F8   8102               LDD     R16, Z+2
   \   000004FA   8113               LDD     R17, Z+3
   \   000004FC   5F0F               SUBI    R16, 255
   \   000004FE   4F1F               SBCI    R17, 255
   \   00000500   8302               STD     Z+2, R16
   \   00000502   8313               STD     Z+3, R17
    646                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000504   01BD               MOVW    R23:R22, R27:R26
   \   00000506   2F67               MOV     R22, R23
   \   00000508   0F77               LSL     R23
   \   0000050A   0B77               SBC     R23, R23
   \   0000050C   2F08               MOV     R16, R24
   \   0000050E   E010               LDI     R17, 0
   \   00000510   E14A               LDI     R20, 26
   \   00000512   E050               LDI     R21, 0
   \   00000514   ........           CALL    ?S_EC_MUL_L02
   \   00000518   01F8               MOVW    R31:R30, R17:R16
   \   0000051A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000051C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000051E   8120               LD      R18, Z
   \   00000520   8131               LDD     R19, Z+1
   \   00000522   2F08               MOV     R16, R24
   \   00000524   E010               LDI     R17, 0
   \   00000526   E14A               LDI     R20, 26
   \   00000528   E050               LDI     R21, 0
   \   0000052A   ........           CALL    ?S_EC_MUL_L02
   \   0000052E   01F8               MOVW    R31:R30, R17:R16
   \   00000530   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000532   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000534   8102               LDD     R16, Z+2
   \   00000536   8113               LDD     R17, Z+3
   \   00000538   0F20               ADD     R18, R16
   \   0000053A   1F31               ADC     R19, R17
   \   0000053C   01F9               MOVW    R31:R30, R19:R18
   \   0000053E   8360               ST      Z, R22
   \   00000540   2F08               MOV     R16, R24
   \   00000542   E010               LDI     R17, 0
   \   00000544   E14A               LDI     R20, 26
   \   00000546   E050               LDI     R21, 0
   \   00000548   ........           CALL    ?S_EC_MUL_L02
   \   0000054C   01F8               MOVW    R31:R30, R17:R16
   \   0000054E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000550   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000552   8102               LDD     R16, Z+2
   \   00000554   8113               LDD     R17, Z+3
   \   00000556   5F0F               SUBI    R16, 255
   \   00000558   4F1F               SBCI    R17, 255
   \   0000055A   8302               STD     Z+2, R16
   \   0000055C   8313               STD     Z+3, R17
    647                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \   0000055E   2F08               MOV     R16, R24
   \   00000560   E010               LDI     R17, 0
   \   00000562   E14A               LDI     R20, 26
   \   00000564   E050               LDI     R21, 0
   \   00000566   ........           CALL    ?S_EC_MUL_L02
   \   0000056A   01F8               MOVW    R31:R30, R17:R16
   \   0000056C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000056E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000570   8120               LD      R18, Z
   \   00000572   8131               LDD     R19, Z+1
   \   00000574   2F08               MOV     R16, R24
   \   00000576   E010               LDI     R17, 0
   \   00000578   E14A               LDI     R20, 26
   \   0000057A   E050               LDI     R21, 0
   \   0000057C   ........           CALL    ?S_EC_MUL_L02
   \   00000580   01F8               MOVW    R31:R30, R17:R16
   \   00000582   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000584   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000586   8102               LDD     R16, Z+2
   \   00000588   8113               LDD     R17, Z+3
   \   0000058A   0F20               ADD     R18, R16
   \   0000058C   1F31               ADC     R19, R17
   \   0000058E   01F9               MOVW    R31:R30, R19:R18
   \   00000590   E000               LDI     R16, 0
   \   00000592   8300               ST      Z, R16
   \   00000594   2F08               MOV     R16, R24
   \   00000596   E010               LDI     R17, 0
   \   00000598   E14A               LDI     R20, 26
   \   0000059A   E050               LDI     R21, 0
   \   0000059C   ........           CALL    ?S_EC_MUL_L02
   \   000005A0   01F8               MOVW    R31:R30, R17:R16
   \   000005A2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000005A4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000005A6   8102               LDD     R16, Z+2
   \   000005A8   8113               LDD     R17, Z+3
   \   000005AA   5F0F               SUBI    R16, 255
   \   000005AC   4F1F               SBCI    R17, 255
   \   000005AE   8302               STD     Z+2, R16
   \   000005B0   8313               STD     Z+3, R17
    648                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \   000005B2   2F08               MOV     R16, R24
   \   000005B4   E010               LDI     R17, 0
   \   000005B6   E14A               LDI     R20, 26
   \   000005B8   E050               LDI     R21, 0
   \   000005BA   ........           CALL    ?S_EC_MUL_L02
   \   000005BE   01F8               MOVW    R31:R30, R17:R16
   \   000005C0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000005C2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000005C4   8120               LD      R18, Z
   \   000005C6   8131               LDD     R19, Z+1
   \   000005C8   2F08               MOV     R16, R24
   \   000005CA   E010               LDI     R17, 0
   \   000005CC   E14A               LDI     R20, 26
   \   000005CE   E050               LDI     R21, 0
   \   000005D0   ........           CALL    ?S_EC_MUL_L02
   \   000005D4   01F8               MOVW    R31:R30, R17:R16
   \   000005D6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000005D8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000005DA   8102               LDD     R16, Z+2
   \   000005DC   8113               LDD     R17, Z+3
   \   000005DE   0F20               ADD     R18, R16
   \   000005E0   1F31               ADC     R19, R17
   \   000005E2   01F9               MOVW    R31:R30, R19:R18
   \   000005E4   E000               LDI     R16, 0
   \   000005E6   8300               ST      Z, R16
   \   000005E8   2F08               MOV     R16, R24
   \   000005EA   E010               LDI     R17, 0
   \   000005EC   E14A               LDI     R20, 26
   \   000005EE   E050               LDI     R21, 0
   \   000005F0   ........           CALL    ?S_EC_MUL_L02
   \   000005F4   01F8               MOVW    R31:R30, R17:R16
   \   000005F6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000005F8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000005FA   8102               LDD     R16, Z+2
   \   000005FC   8113               LDD     R17, Z+3
   \   000005FE   5F0F               SUBI    R16, 255
   \   00000600   4F1F               SBCI    R17, 255
   \   00000602   8302               STD     Z+2, R16
   \   00000604   8313               STD     Z+3, R17
    649                  break;
    650              }
    651          
    652              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildStackStatus_2:
   \   00000606   2F08               MOV     R16, R24
   \   00000608   E010               LDI     R17, 0
   \   0000060A   E14A               LDI     R20, 26
   \   0000060C   E050               LDI     R21, 0
   \   0000060E   ........           CALL    ?S_EC_MUL_L02
   \   00000612   01F8               MOVW    R31:R30, R17:R16
   \   00000614   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000616   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000618   8122               LDD     R18, Z+2
   \   0000061A   8133               LDD     R19, Z+3
   \   0000061C   2D04               MOV     R16, R4
   \   0000061E   1B20               SUB     R18, R16
   \   00000620   5022               SUBI    R18, 2
   \   00000622   2F08               MOV     R16, R24
   \   00000624   E010               LDI     R17, 0
   \   00000626   E14A               LDI     R20, 26
   \   00000628   E050               LDI     R21, 0
   \   0000062A   ........           CALL    ?S_EC_MUL_L02
   \   0000062E   01F8               MOVW    R31:R30, R17:R16
   \   00000630   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000632   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000634   8100               LD      R16, Z
   \   00000636   8111               LDD     R17, Z+1
   \   00000638   0D04               ADD     R16, R4
   \   0000063A   1D15               ADC     R17, R5
   \   0000063C   01F8               MOVW    R31:R30, R17:R16
   \   0000063E   8320               ST      Z, R18
    653              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000640   2F08               MOV     R16, R24
   \   00000642   E010               LDI     R17, 0
   \   00000644   E14A               LDI     R20, 26
   \   00000646   E050               LDI     R21, 0
   \   00000648   ........           CALL    ?S_EC_MUL_L02
   \   0000064C   01F8               MOVW    R31:R30, R17:R16
   \   0000064E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000650   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000652   8102               LDD     R16, Z+2
   \   00000654   8113               LDD     R17, Z+3
   \   00000656   1904               SUB     R16, R4
   \   00000658   0915               SBC     R17, R5
   \   0000065A   5002               SUBI    R16, 2
   \   0000065C   4010               SBCI    R17, 0
   \   0000065E   2F01               MOV     R16, R17
   \   00000660   E010               LDI     R17, 0
   \   00000662   2F20               MOV     R18, R16
   \   00000664   2F08               MOV     R16, R24
   \   00000666   E010               LDI     R17, 0
   \   00000668   E14A               LDI     R20, 26
   \   0000066A   E050               LDI     R21, 0
   \   0000066C   ........           CALL    ?S_EC_MUL_L02
   \   00000670   01F8               MOVW    R31:R30, R17:R16
   \   00000672   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000674   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000676   8100               LD      R16, Z
   \   00000678   8111               LDD     R17, Z+1
   \   0000067A   0D04               ADD     R16, R4
   \   0000067C   1D15               ADC     R17, R5
   \   0000067E   01F8               MOVW    R31:R30, R17:R16
   \   00000680   8321               STD     Z+1, R18
    654          
    655          }
   \   00000682   E0E8               LDI     R30, 8
   \   00000684   ........           JMP     ?EPILOGUE_B8_L09
    656          
    657          //////////////////////////////////////////////////////////////////////////////
    658          // Receiving data to IO module here
    659          /////////////////////////////////////////////////////////////////////////////
    660          
    661          /*************************************************************************
    662          *
    663          * Receive Command to Reset the EEPROM
    664          *
    665          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    666          void GetResetEEPROM(char ch, short pointer) {
   \                     GetResetEEPROM:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    667          
    668              EEPROMReset();
   \   00000008   ........           CALL    EEPROMReset
    669          }
   \   0000000C   E0E3               LDI     R30, 3
   \   0000000E   ........           JMP     ?EPILOGUE_B3_L09
    670          
    671          
    672          /*************************************************************************
    673          *
    674          * Receive Command to go to the bootloader program
    675          *
    676          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    677          void GetGotoBootloader(char ch, short pointer) {
   \                     GetGotoBootloader:
   \                     ??GetGotoBootloader_0:
    678          
    679          //    void (*BootApp)(void) = (void(*)())0xF000;
    680          
    681              while ( (EECR & 1<<EEPE) != 0 ) //chech if EEPROM is ready
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    682                  ;
    683              EEARL = (0x0fff & 0xff);
   \   00000004   EF1F               LDI     R17, 255
   \   00000006   BD11               OUT     0x21, R17
    684              EEARH = (0x0fff >> 8);
   \   00000008   E01F               LDI     R17, 15
   \   0000000A   BD12               OUT     0x22, R17
    685              EEDR = 0xff;
   \   0000000C   EF1F               LDI     R17, 255
   \   0000000E   BD10               OUT     0x20, R17
    686              EECR |= (1<<EEMPE);
   \   00000010   9AFA               SBI     0x1F, 0x02
    687              EECR |= (1<<EEPE);
   \   00000012   9AF9               SBI     0x1F, 0x01
    688              while (EECR & (1<<EEPE))
   \                     ??GetGotoBootloader_1:
   \   00000014   99F9               SBIC    0x1F, 0x01
   \   00000016   CFFE               RJMP    ??GetGotoBootloader_1
    689                  ;
    690          
    691              WDTCSR = 0x18;               //Start watchdog to genetate restart
   \   00000018   E118               LDI     R17, 24
   \   0000001A   9310....           STS     _A_WDTCSR, R17
    692              WDTCSR = 0x08;               //Start watchdog to genetate restart
   \   0000001E   E018               LDI     R17, 8
   \   00000020   9310....           STS     _A_WDTCSR, R17
    693          }
   \   00000024   9508               RET
   \   00000026                      REQUIRE _A_EECR
   \   00000026                      REQUIRE _A_EEAR
   \   00000026                      REQUIRE _A_EEDR
   \   00000026                      REQUIRE _A_WDTCSR
    694          
    695          /*************************************************************************
    696          *
    697          * Receive EEPROM data
    698          *
    699          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    700          void GetEEPROMData(char ch, short pointer) {
   \                     GetEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    701          
    702            char channel;
    703            int t0;
    704          
    705              channel = UART[ch].pRxBuffer[pointer] ;
   \   00000008   2D04               MOV     R16, R4
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8502               LDD     R16, Z+10
   \   0000001C   8513               LDD     R17, Z+11
   \   0000001E   0F0A               ADD     R16, R26
   \   00000020   1F1B               ADC     R17, R27
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   2E60               MOV     R6, R16
    706              if ((channel >= 0x80) && (UnitID == 0x01)) { // AN-ZBANA
   \   00000028   E800               LDI     R16, 128
   \   0000002A   1660               CP      R6, R16
   \   0000002C   F408               BRCC    $+2+2
   \   0000002E   C047               RJMP    ??GetEEPROMData_0
   \   00000030   9100....           LDS     R16, UnitID
   \   00000034   3001               CPI     R16, 1
   \   00000036   F009               BREQ    $+2+2
   \   00000038   C042               RJMP    ??GetEEPROMData_0
    707                *((float*)&TData.Ana.Offset[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+1]) ;  //offset
   \   0000003A   2D04               MOV     R16, R4
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   E14A               LDI     R20, 26
   \   00000040   E050               LDI     R21, 0
   \   00000042   ........           CALL    ?S_EC_MUL_L02
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004C   8502               LDD     R16, Z+10
   \   0000004E   8513               LDD     R17, Z+11
   \   00000050   0F0A               ADD     R16, R26
   \   00000052   1F1B               ADC     R17, R27
   \   00000054   01F8               MOVW    R31:R30, R17:R16
   \   00000056   8101               LDD     R16, Z+1
   \   00000058   8112               LDD     R17, Z+2
   \   0000005A   8123               LDD     R18, Z+3
   \   0000005C   8134               LDD     R19, Z+4
   \   0000005E   2D46               MOV     R20, R6
   \   00000060   E050               LDI     R21, 0
   \   00000062   704F               ANDI    R20, 0x0F
   \   00000064   7050               ANDI    R21, 0x00
   \   00000066   0F44               LSL     R20
   \   00000068   1F55               ROL     R21
   \   0000006A   0F44               LSL     R20
   \   0000006C   1F55               ROL     R21
   \   0000006E   01FA               MOVW    R31:R30, R21:R20
   \   00000070   ....               SUBI    R30, LOW((-(TData + 98) & 0xFFFF))
   \   00000072   ....               SBCI    R31, HIGH((-(TData + 98) & 0xFFFF))
   \   00000074   8300               ST      Z, R16
   \   00000076   8311               STD     Z+1, R17
   \   00000078   8322               STD     Z+2, R18
   \   0000007A   8333               STD     Z+3, R19
    708                *((float*)&TData.Ana.Gain[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+5]) ;  //gain
   \   0000007C   2D04               MOV     R16, R4
   \   0000007E   E010               LDI     R17, 0
   \   00000080   E14A               LDI     R20, 26
   \   00000082   E050               LDI     R21, 0
   \   00000084   ........           CALL    ?S_EC_MUL_L02
   \   00000088   01F8               MOVW    R31:R30, R17:R16
   \   0000008A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000008E   8502               LDD     R16, Z+10
   \   00000090   8513               LDD     R17, Z+11
   \   00000092   0F0A               ADD     R16, R26
   \   00000094   1F1B               ADC     R17, R27
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   8105               LDD     R16, Z+5
   \   0000009A   8116               LDD     R17, Z+6
   \   0000009C   8127               LDD     R18, Z+7
   \   0000009E   8530               LDD     R19, Z+8
   \   000000A0   2D46               MOV     R20, R6
   \   000000A2   E050               LDI     R21, 0
   \   000000A4   704F               ANDI    R20, 0x0F
   \   000000A6   7050               ANDI    R21, 0x00
   \   000000A8   0F44               LSL     R20
   \   000000AA   1F55               ROL     R21
   \   000000AC   0F44               LSL     R20
   \   000000AE   1F55               ROL     R21
   \   000000B0   01FA               MOVW    R31:R30, R21:R20
   \   000000B2   ....               SUBI    R30, LOW((-(TData + 146) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(TData + 146) & 0xFFFF))
   \   000000B6   8300               ST      Z, R16
   \   000000B8   8311               STD     Z+1, R17
   \   000000BA   8322               STD     Z+2, R18
   \   000000BC   8333               STD     Z+3, R19
    709              }
    710              WriteEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+1]);
   \                     ??GetEEPROMData_0:
   \   000000BE   2D04               MOV     R16, R4
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   E14A               LDI     R20, 26
   \   000000C4   E050               LDI     R21, 0
   \   000000C6   ........           CALL    ?S_EC_MUL_L02
   \   000000CA   01F8               MOVW    R31:R30, R17:R16
   \   000000CC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D0   8542               LDD     R20, Z+10
   \   000000D2   8553               LDD     R21, Z+11
   \   000000D4   0F4A               ADD     R20, R26
   \   000000D6   1F5B               ADC     R21, R27
   \   000000D8   5F4F               SUBI    R20, 255
   \   000000DA   4F5F               SBCI    R21, 255
   \   000000DC   E024               LDI     R18, 4
   \   000000DE   01BA               MOVW    R23:R22, R21:R20
   \   000000E0   2D06               MOV     R16, R6
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E048               LDI     R20, 8
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01AB               MOVW    R21:R20, R23:R22
   \   000000EE   ........           CALL    WriteEEPROMBuffer
    711              t0 = OS_GetTime();
   \   000000F2   ........           CALL    OS__Gettime
   \   000000F6   01C8               MOVW    R25:R24, R17:R16
    712              do {
    713                OS_Delay(1);
   \                     ??GetEEPROMData_1:
   \   000000F8   E001               LDI     R16, 1
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   ........           CALL    OS_Delay
    714              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);  //8.5 ms programming time
   \   00000100   ........           CALL    OS__Gettime
   \   00000104   1B08               SUB     R16, R24
   \   00000106   0B19               SBC     R17, R25
   \   00000108   3204               CPI     R16, 36
   \   0000010A   4010               SBCI    R17, 0
   \   0000010C   F420               BRCC    ??GetEEPROMData_2
   \   0000010E   9100....           LDS     R16, EEPWriteOK
   \   00000112   2300               TST     R16
   \   00000114   F389               BREQ    ??GetEEPROMData_1
    715              WriteEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+5]);
   \                     ??GetEEPROMData_2:
   \   00000116   2D04               MOV     R16, R4
   \   00000118   E010               LDI     R17, 0
   \   0000011A   E14A               LDI     R20, 26
   \   0000011C   E050               LDI     R21, 0
   \   0000011E   ........           CALL    ?S_EC_MUL_L02
   \   00000122   01F8               MOVW    R31:R30, R17:R16
   \   00000124   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000126   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000128   8542               LDD     R20, Z+10
   \   0000012A   8553               LDD     R21, Z+11
   \   0000012C   0F4A               ADD     R20, R26
   \   0000012E   1F5B               ADC     R21, R27
   \   00000130   5F4B               SUBI    R20, 251
   \   00000132   4F5F               SBCI    R21, 255
   \   00000134   E024               LDI     R18, 4
   \   00000136   01BA               MOVW    R23:R22, R21:R20
   \   00000138   2D06               MOV     R16, R6
   \   0000013A   E010               LDI     R17, 0
   \   0000013C   E048               LDI     R20, 8
   \   0000013E   E050               LDI     R21, 0
   \   00000140   ........           CALL    ?S_EC_MUL_L02
   \   00000144   5F0C               SUBI    R16, 252
   \   00000146   4F1F               SBCI    R17, 255
   \   00000148   01AB               MOVW    R21:R20, R23:R22
   \   0000014A   ........           CALL    WriteEEPROMBuffer
    716              t0 = OS_GetTime();
   \   0000014E   ........           CALL    OS__Gettime
   \   00000152   01C8               MOVW    R25:R24, R17:R16
    717              do {
    718                OS_Delay(1);
   \                     ??GetEEPROMData_3:
   \   00000154   E001               LDI     R16, 1
   \   00000156   E010               LDI     R17, 0
   \   00000158   ........           CALL    OS_Delay
    719              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);
   \   0000015C   ........           CALL    OS__Gettime
   \   00000160   1B08               SUB     R16, R24
   \   00000162   0B19               SBC     R17, R25
   \   00000164   3204               CPI     R16, 36
   \   00000166   4010               SBCI    R17, 0
   \   00000168   F420               BRCC    ??GetEEPROMData_4
   \   0000016A   9100....           LDS     R16, EEPWriteOK
   \   0000016E   2300               TST     R16
   \   00000170   F389               BREQ    ??GetEEPROMData_3
    720          }
   \                     ??GetEEPROMData_4:
   \   00000172   E0E7               LDI     R30, 7
   \   00000174   ........           JMP     ?EPILOGUE_B7_L09
    721          
    722          /*************************************************************************
    723          *
    724          * Receive AN-ZB485 setup
    725          *
    726          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    727          void GetRS4Setup(char ch, short pointer) {
   \                     GetRS4Setup:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    728          
    729              TData.RS4.PortUsed = UART[ch].pRxBuffer[pointer];           // Get the setup
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8502               LDD     R16, Z+10
   \   0000001C   8513               LDD     R17, Z+11
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   9300....           STS     TData, R16
    730              TData.RS4.SensorType[0] = UART[ch].pRxBuffer[pointer+1];       // Get the sensor type
   \   0000002A   2F0A               MOV     R16, R26
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E14A               LDI     R20, 26
   \   00000030   E050               LDI     R21, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000003C   8502               LDD     R16, Z+10
   \   0000003E   8513               LDD     R17, Z+11
   \   00000040   0F08               ADD     R16, R24
   \   00000042   1F19               ADC     R17, R25
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   8101               LDD     R16, Z+1
   \   00000048   9300....           STS     (TData + 1), R16
    731              TData.RS4.SensorType[1] = UART[ch].pRxBuffer[pointer+2];       // Get the sensor type
   \   0000004C   2F0A               MOV     R16, R26
   \   0000004E   E010               LDI     R17, 0
   \   00000050   E14A               LDI     R20, 26
   \   00000052   E050               LDI     R21, 0
   \   00000054   ........           CALL    ?S_EC_MUL_L02
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005E   8502               LDD     R16, Z+10
   \   00000060   8513               LDD     R17, Z+11
   \   00000062   0F08               ADD     R16, R24
   \   00000064   1F19               ADC     R17, R25
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   8102               LDD     R16, Z+2
   \   0000006A   9300....           STS     (TData + 2), R16
    732              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);      // store in EEPROM
   \   0000006E   9120....           LDS     R18, TData
   \   00000072   E002               LDI     R16, 2
   \   00000074   E010               LDI     R17, 0
   \   00000076   ........           CALL    WriteEEPROMByte
    733              WriteEEPROMByte(EEPROM_PORTSETUP+1, TData.RS4.SensorType[0]);
   \   0000007A   9120....           LDS     R18, (TData + 1)
   \   0000007E   E003               LDI     R16, 3
   \   00000080   E010               LDI     R17, 0
   \   00000082   ........           CALL    WriteEEPROMByte
    734              WriteEEPROMByte(EEPROM_PORTSETUP+2, TData.RS4.SensorType[1]);
   \   00000086   9120....           LDS     R18, (TData + 2)
   \   0000008A   E004               LDI     R16, 4
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   ........           CALL    WriteEEPROMByte
    735              SetRS4Port();                                               // Set power on ports
   \   00000092   ........           CALL    SetRS4Port
    736          }
   \   00000096   E0E3               LDI     R30, 3
   \   00000098   ........           JMP     ?EPILOGUE_B3_L09
    737          
    738          /*************************************************************************
    739          *
    740          * Rceive data fo AD card
    741          *
    742          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    743          void GetADData(char ch, short pointer) {
   \                     GetADData:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01F9               MOVW    R31:R30, R19:R18
    744          
    745             char i, pair;
    746          
    747             if (UART[ch].pRxBuffer[pointer] <=3) {
   \   00000008   2D02               MOV     R16, R2
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01D8               MOVW    R27:R26, R17:R16
   \   00000016   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   00000018   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   0000001A   910D               LD      R16, X+
   \   0000001C   911C               LD      R17, X
   \   0000001E   9711               SBIW    R27:R26, 1
   \   00000020   0F0E               ADD     R16, R30
   \   00000022   1F1F               ADC     R17, R31
   \   00000024   01D8               MOVW    R27:R26, R17:R16
   \   00000026   910C               LD      R16, X
   \   00000028   3004               CPI     R16, 4
   \   0000002A   F410               BRCC    ??GetADData_0
    748               pair = 0;
   \   0000002C   E060               LDI     R22, 0
   \   0000002E   C001               RJMP    ??GetADData_1
    749             } else {
    750               pair = 1;
   \                     ??GetADData_0:
   \   00000030   E061               LDI     R22, 1
    751             }
    752             if (!TData.RS4.ToTargetBuffer[pair][0]) {                                // buffer empty?
   \                     ??GetADData_1:
   \   00000032   2F06               MOV     R16, R22
   \   00000034   E010               LDI     R17, 0
   \   00000036   E540               LDI     R20, 80
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01D8               MOVW    R27:R26, R17:R16
   \   00000040   ....               SUBI    R26, LOW((-(TData + 1268) & 0xFFFF))
   \   00000042   ....               SBCI    R27, HIGH((-(TData + 1268) & 0xFFFF))
   \   00000044   910C               LD      R16, X
   \   00000046   2300               TST     R16
   \   00000048   F009               BREQ    $+2+2
   \   0000004A   C073               RJMP    ??GetADData_2
    753                TData.RS4.ToTargetBuffer[pair][0] = true;                            //  Availible data for AD card
   \   0000004C   2F06               MOV     R16, R22
   \   0000004E   E010               LDI     R17, 0
   \   00000050   E540               LDI     R20, 80
   \   00000052   E050               LDI     R21, 0
   \   00000054   ........           CALL    ?S_EC_MUL_L02
   \   00000058   01D8               MOVW    R27:R26, R17:R16
   \   0000005A   ....               SUBI    R26, LOW((-(TData + 1268) & 0xFFFF))
   \   0000005C   ....               SBCI    R27, HIGH((-(TData + 1268) & 0xFFFF))
   \   0000005E   E001               LDI     R16, 1
   \   00000060   930C               ST      X, R16
    754                TData.RS4.ToTargetBuffer[pair][1] = UART[ch].pRxBuffer[pointer++];   //  Channel to AD card
   \   00000062   2D02               MOV     R16, R2
   \   00000064   E010               LDI     R17, 0
   \   00000066   E14A               LDI     R20, 26
   \   00000068   E050               LDI     R21, 0
   \   0000006A   ........           CALL    ?S_EC_MUL_L02
   \   0000006E   01D8               MOVW    R27:R26, R17:R16
   \   00000070   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   00000072   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   00000074   910D               LD      R16, X+
   \   00000076   911C               LD      R17, X
   \   00000078   9711               SBIW    R27:R26, 1
   \   0000007A   0F0E               ADD     R16, R30
   \   0000007C   1F1F               ADC     R17, R31
   \   0000007E   01D8               MOVW    R27:R26, R17:R16
   \   00000080   913C               LD      R19, X
   \   00000082   2F06               MOV     R16, R22
   \   00000084   E010               LDI     R17, 0
   \   00000086   E540               LDI     R20, 80
   \   00000088   E050               LDI     R21, 0
   \   0000008A   ........           CALL    ?S_EC_MUL_L02
   \   0000008E   01D8               MOVW    R27:R26, R17:R16
   \   00000090   ....               SUBI    R26, LOW((-(TData + 1269) & 0xFFFF))
   \   00000092   ....               SBCI    R27, HIGH((-(TData + 1269) & 0xFFFF))
   \   00000094   933C               ST      X, R19
   \   00000096   9631               ADIW    R31:R30, 1
    755                TData.RS4.ToTargetBuffer[pair][2] = UART[ch].pRxBuffer[pointer++];   // nob in datablock
   \   00000098   2D02               MOV     R16, R2
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   E14A               LDI     R20, 26
   \   0000009E   E050               LDI     R21, 0
   \   000000A0   ........           CALL    ?S_EC_MUL_L02
   \   000000A4   01D8               MOVW    R27:R26, R17:R16
   \   000000A6   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   000000A8   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   000000AA   910D               LD      R16, X+
   \   000000AC   911C               LD      R17, X
   \   000000AE   9711               SBIW    R27:R26, 1
   \   000000B0   0F0E               ADD     R16, R30
   \   000000B2   1F1F               ADC     R17, R31
   \   000000B4   01D8               MOVW    R27:R26, R17:R16
   \   000000B6   913C               LD      R19, X
   \   000000B8   2F06               MOV     R16, R22
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   E540               LDI     R20, 80
   \   000000BE   E050               LDI     R21, 0
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
   \   000000C4   01D8               MOVW    R27:R26, R17:R16
   \   000000C6   ....               SUBI    R26, LOW((-(TData + 1270) & 0xFFFF))
   \   000000C8   ....               SBCI    R27, HIGH((-(TData + 1270) & 0xFFFF))
   \   000000CA   933C               ST      X, R19
   \   000000CC   9631               ADIW    R31:R30, 1
    756                for (i = 3; i < TData.RS4.ToTargetBuffer[pair][2] + 3; i++) {
   \   000000CE   E023               LDI     R18, 3
   \                     ??GetADData_3:
   \   000000D0   E030               LDI     R19, 0
   \   000000D2   2F06               MOV     R16, R22
   \   000000D4   E010               LDI     R17, 0
   \   000000D6   E540               LDI     R20, 80
   \   000000D8   E050               LDI     R21, 0
   \   000000DA   ........           CALL    ?S_EC_MUL_L02
   \   000000DE   01D8               MOVW    R27:R26, R17:R16
   \   000000E0   ....               SUBI    R26, LOW((-(TData + 1270) & 0xFFFF))
   \   000000E2   ....               SBCI    R27, HIGH((-(TData + 1270) & 0xFFFF))
   \   000000E4   918C               LD      R24, X
   \   000000E6   E090               LDI     R25, 0
   \   000000E8   9603               ADIW    R25:R24, 3
   \   000000EA   1728               CP      R18, R24
   \   000000EC   0739               CPC     R19, R25
   \   000000EE   F50C               BRGE    ??GetADData_2
    757                    TData.RS4.ToTargetBuffer[pair][i] = UART[ch].pRxBuffer[pointer++];  //Get the buffer
   \   000000F0   2D02               MOV     R16, R2
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   E14A               LDI     R20, 26
   \   000000F6   E050               LDI     R21, 0
   \   000000F8   ........           CALL    ?S_EC_MUL_L02
   \   000000FC   01D8               MOVW    R27:R26, R17:R16
   \   000000FE   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   00000100   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   00000102   910D               LD      R16, X+
   \   00000104   911C               LD      R17, X
   \   00000106   9711               SBIW    R27:R26, 1
   \   00000108   0F0E               ADD     R16, R30
   \   0000010A   1F1F               ADC     R17, R31
   \   0000010C   01D8               MOVW    R27:R26, R17:R16
   \   0000010E   917C               LD      R23, X
   \   00000110   ....               LDI     R26, LOW((TData + 1268))
   \   00000112   ....               LDI     R27, HIGH((TData + 1268))
   \   00000114   E030               LDI     R19, 0
   \   00000116   0FA2               ADD     R26, R18
   \   00000118   1FB3               ADC     R27, R19
   \   0000011A   2F06               MOV     R16, R22
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   E540               LDI     R20, 80
   \   00000120   E050               LDI     R21, 0
   \   00000122   ........           CALL    ?S_EC_MUL_L02
   \   00000126   0FA0               ADD     R26, R16
   \   00000128   1FB1               ADC     R27, R17
   \   0000012A   937C               ST      X, R23
   \   0000012C   9631               ADIW    R31:R30, 1
    758                }
   \   0000012E   9523               INC     R18
   \   00000130   CFCF               RJMP    ??GetADData_3
    759             }
    760          }
   \                     ??GetADData_2:
   \   00000132   E0E4               LDI     R30, 4
   \   00000134   ........           JMP     ?EPILOGUE_B4_L09
    761          
    762          /*************************************************************************
    763          *
    764          * Receive AN-ZBANA setup
    765          *
    766          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    767          void GetANASetup(char ch, short pointer) {
   \                     GetANASetup:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    768          
    769              TData.Ana.PortUsed = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer+1] << 8);  //Get the setup
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8502               LDD     R16, Z+10
   \   0000001C   8513               LDD     R17, Z+11
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8120               LD      R18, Z
   \   00000026   2F0A               MOV     R16, R26
   \   00000028   E010               LDI     R17, 0
   \   0000002A   E14A               LDI     R20, 26
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   ........           CALL    ?S_EC_MUL_L02
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000038   8502               LDD     R16, Z+10
   \   0000003A   8513               LDD     R17, Z+11
   \   0000003C   0F08               ADD     R16, R24
   \   0000003E   1F19               ADC     R17, R25
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   8131               LDD     R19, Z+1
   \   00000044   ....               LDI     R30, LOW(TData)
   \   00000046   ....               LDI     R31, (TData) >> 8
   \   00000048   8320               ST      Z, R18
   \   0000004A   8331               STD     Z+1, R19
    770              WriteEEPROMByte(EEPROM_PORTSETUP,UART[ch].pRxBuffer[pointer]);   // store in EEPROM
   \   0000004C   2F0A               MOV     R16, R26
   \   0000004E   E010               LDI     R17, 0
   \   00000050   E14A               LDI     R20, 26
   \   00000052   E050               LDI     R21, 0
   \   00000054   ........           CALL    ?S_EC_MUL_L02
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005E   8502               LDD     R16, Z+10
   \   00000060   8513               LDD     R17, Z+11
   \   00000062   0F08               ADD     R16, R24
   \   00000064   1F19               ADC     R17, R25
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   8120               LD      R18, Z
   \   0000006A   E002               LDI     R16, 2
   \   0000006C   E010               LDI     R17, 0
   \   0000006E   ........           CALL    WriteEEPROMByte
    771              WriteEEPROMByte(EEPROM_PORTSETUP+1,UART[ch].pRxBuffer[pointer+1]);
   \   00000072   2F0A               MOV     R16, R26
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8502               LDD     R16, Z+10
   \   00000086   8513               LDD     R17, Z+11
   \   00000088   0F08               ADD     R16, R24
   \   0000008A   1F19               ADC     R17, R25
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   8121               LDD     R18, Z+1
   \   00000090   E003               LDI     R16, 3
   \   00000092   E010               LDI     R17, 0
   \   00000094   ........           CALL    WriteEEPROMByte
    772              SetAnaPort();                           // set the port on or off
   \   00000098   ........           CALL    SetAnaPort
    773          }
   \   0000009C   E0E3               LDI     R30, 3
   \   0000009E   ........           JMP     ?EPILOGUE_B3_L09
    774          
    775          /*************************************************************************
    776          *
    777          * Receive AN-ZBANA filter
    778          *
    779          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    780          void GetANAFilter(char ch, short pointer) {
   \                     GetANAFilter:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    781              char port;
    782          
    783              for (port = 0; port <12; port++) {
   \   00000008   E020               LDI     R18, 0
   \                     ??GetANAFilter_0:
   \   0000000A   302C               CPI     R18, 12
   \   0000000C   F4B8               BRCC    ??GetANAFilter_1
    784                  TData.Ana.Filter[port] = UART[ch].pRxBuffer[pointer++];  //Get the filter
   \   0000000E   2F06               MOV     R16, R22
   \   00000010   E010               LDI     R17, 0
   \   00000012   E14A               LDI     R20, 26
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   01D8               MOVW    R27:R26, R17:R16
   \   0000001C   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   0000001E   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   00000020   91ED               LD      R30, X+
   \   00000022   91FC               LD      R31, X
   \   00000024   9711               SBIW    R27:R26, 1
   \   00000026   0FE8               ADD     R30, R24
   \   00000028   1FF9               ADC     R31, R25
   \   0000002A   8100               LD      R16, Z
   \   0000002C   E030               LDI     R19, 0
   \   0000002E   01F9               MOVW    R31:R30, R19:R18
   \   00000030   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000034   8302               STD     Z+2, R16
   \   00000036   9601               ADIW    R25:R24, 1
    785              }
   \   00000038   9523               INC     R18
   \   0000003A   CFE7               RJMP    ??GetANAFilter_0
    786          }
   \                     ??GetANAFilter_1:
   \   0000003C   E0E4               LDI     R30, 4
   \   0000003E   ........           JMP     ?EPILOGUE_B4_L09
    787          
    788          /*************************************************************************
    789          *
    790          *  Receive data on USARTs
    791          *
    792          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    793          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    794          
    795              switch (UART[ch].RxState) {                  // check status
   \   00000006   2F08               MOV     R16, R24
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   8902               LDD     R16, Z+18
   \   0000001A   5000               SUBI    R16, 0
   \   0000001C   F049               BREQ    ??ReceivePacketUart_0
   \   0000001E   950A               DEC     R16
   \   00000020   F041               BREQ    ??ReceivePacketUart_1
   \   00000022   950A               DEC     R16
   \   00000024   F409               BRNE    $+2+2
   \   00000026   C0B0               RJMP    ??ReceivePacketUart_2
   \   00000028   5008               SUBI    R16, 8
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C161               RJMP    ??ReceivePacketUart_3
   \   0000002E   C15D               RJMP    ??ReceivePacketUart_4
    796              case SYNC :
    797                  // all functionallity in inerrupt routine
    798                  break ;
   \                     ??ReceivePacketUart_0:
   \   00000030   C15F               RJMP    ??ReceivePacketUart_3
    799              case HEADER :
    800                  if (UART[ch].RxLast >= 6) {             // receive header
   \                     ??ReceivePacketUart_1:
   \   00000032   2F08               MOV     R16, R24
   \   00000034   E010               LDI     R17, 0
   \   00000036   E14A               LDI     R20, 26
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   85A6               LDD     R26, Z+14
   \   00000046   85B7               LDD     R27, Z+15
   \   00000048   9716               SBIW    R27:R26, 6
   \   0000004A   F408               BRCC    $+2+2
   \   0000004C   C151               RJMP    ??ReceivePacketUart_3
    801                      UART[ch].RxPacklen = (UART[ch].pRxBuffer[4] + (UART[ch].pRxBuffer[5] * 256)) ; // Find length of package
   \   0000004E   2F08               MOV     R16, R24
   \   00000050   E010               LDI     R17, 0
   \   00000052   E14A               LDI     R20, 26
   \   00000054   E050               LDI     R21, 0
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000060   8502               LDD     R16, Z+10
   \   00000062   8513               LDD     R17, Z+11
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8124               LDD     R18, Z+4
   \   00000068   E030               LDI     R19, 0
   \   0000006A   2F08               MOV     R16, R24
   \   0000006C   E010               LDI     R17, 0
   \   0000006E   E14A               LDI     R20, 26
   \   00000070   E050               LDI     R21, 0
   \   00000072   ........           CALL    ?S_EC_MUL_L02
   \   00000076   01F8               MOVW    R31:R30, R17:R16
   \   00000078   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000007C   8502               LDD     R16, Z+10
   \   0000007E   8513               LDD     R17, Z+11
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   8105               LDD     R16, Z+5
   \   00000084   E010               LDI     R17, 0
   \   00000086   2F10               MOV     R17, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   0F20               ADD     R18, R16
   \   0000008C   1F31               ADC     R19, R17
   \   0000008E   2F08               MOV     R16, R24
   \   00000090   E010               LDI     R17, 0
   \   00000092   E14A               LDI     R20, 26
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A0   8B26               STD     Z+22, R18
   \   000000A2   8B37               STD     Z+23, R19
    802                      if (CalcDSRxChecksum(ch, 6) && (UART[ch].pRxBuffer[0] == (DEVICE_IO + UnitID))) {
   \   000000A4   E026               LDI     R18, 6
   \   000000A6   E030               LDI     R19, 0
   \   000000A8   2F08               MOV     R16, R24
   \   000000AA   ....               RCALL   CalcDSRxChecksum
   \   000000AC   2B01               OR      R16, R17
   \   000000AE   F409               BRNE    $+2+2
   \   000000B0   C067               RJMP    ??ReceivePacketUart_5
   \   000000B2   2F08               MOV     R16, R24
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   E14A               LDI     R20, 26
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   ........           CALL    ?S_EC_MUL_L02
   \   000000BE   01F8               MOVW    R31:R30, R17:R16
   \   000000C0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C4   8502               LDD     R16, Z+10
   \   000000C6   8513               LDD     R17, Z+11
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   8100               LD      R16, Z
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   91E0....           LDS     R30, UnitID
   \   000000D2   E0F0               LDI     R31, 0
   \   000000D4   9670               ADIW    R31:R30, 16
   \   000000D6   170E               CP      R16, R30
   \   000000D8   071F               CPC     R17, R31
   \   000000DA   F009               BREQ    $+2+2
   \   000000DC   C051               RJMP    ??ReceivePacketUart_5
    803                          // header checksum OK and to me
    804                          if ((UART[ch].RxPacklen < ((short) RXSIZE_UART-UART[ch].RxLast)) &&    /* chk. header */
    805                              (UART[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   000000DE   2F08               MOV     R16, R24
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E14A               LDI     R20, 26
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F0   8966               LDD     R22, Z+22
   \   000000F2   8977               LDD     R23, Z+23
   \   000000F4   E926               LDI     R18, 150
   \   000000F6   E030               LDI     R19, 0
   \   000000F8   2F08               MOV     R16, R24
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   E14A               LDI     R20, 26
   \   000000FE   E050               LDI     R21, 0
   \   00000100   ........           CALL    ?S_EC_MUL_L02
   \   00000104   01F8               MOVW    R31:R30, R17:R16
   \   00000106   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010A   8506               LDD     R16, Z+14
   \   0000010C   8517               LDD     R17, Z+15
   \   0000010E   1B20               SUB     R18, R16
   \   00000110   0B31               SBC     R19, R17
   \   00000112   1762               CP      R22, R18
   \   00000114   0773               CPC     R23, R19
   \   00000116   F580               BRCC    ??ReceivePacketUart_6
   \   00000118   2F08               MOV     R16, R24
   \   0000011A   E010               LDI     R17, 0
   \   0000011C   E14A               LDI     R20, 26
   \   0000011E   E050               LDI     R21, 0
   \   00000120   ........           CALL    ?S_EC_MUL_L02
   \   00000124   01F8               MOVW    R31:R30, R17:R16
   \   00000126   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000128   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012A   89A6               LDD     R26, Z+22
   \   0000012C   89B7               LDD     R27, Z+23
   \   0000012E   9717               SBIW    R27:R26, 7
   \   00000130   F118               BRCS    ??ReceivePacketUart_6
    806                              UART[ch].RxState = RECEIVE ;       // Header ok go to data receive state
   \   00000132   2F08               MOV     R16, R24
   \   00000134   E010               LDI     R17, 0
   \   00000136   E14A               LDI     R20, 26
   \   00000138   E050               LDI     R21, 0
   \   0000013A   ........           CALL    ?S_EC_MUL_L02
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000144   E002               LDI     R16, 2
   \   00000146   8B02               STD     Z+18, R16
    807                              UART[ch].RxCount = UART[ch].RxLast + 1 ;    // Set receive counter
   \   00000148   2F08               MOV     R16, R24
   \   0000014A   E010               LDI     R17, 0
   \   0000014C   E14A               LDI     R20, 26
   \   0000014E   E050               LDI     R21, 0
   \   00000150   ........           CALL    ?S_EC_MUL_L02
   \   00000154   01F8               MOVW    R31:R30, R17:R16
   \   00000156   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000158   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015A   85A6               LDD     R26, Z+14
   \   0000015C   85B7               LDD     R27, Z+15
   \   0000015E   9611               ADIW    R27:R26, 1
   \   00000160   2F08               MOV     R16, R24
   \   00000162   E010               LDI     R17, 0
   \   00000164   E14A               LDI     R20, 26
   \   00000166   E050               LDI     R21, 0
   \   00000168   ........           CALL    ?S_EC_MUL_L02
   \   0000016C   01F8               MOVW    R31:R30, R17:R16
   \   0000016E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000170   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000172   8BA0               STD     Z+16, R26
   \   00000174   8BB1               STD     Z+17, R27
   \   00000176   C0BC               RJMP    ??ReceivePacketUart_3
    808                          } else {
    809                              GoToSyncUART(ch) ;                        // go to sync modus for recive
   \                     ??ReceivePacketUart_6:
   \   00000178   2F08               MOV     R16, R24
   \   0000017A   ........           CALL    GoToSyncUART
   \   0000017E   C0B8               RJMP    ??ReceivePacketUart_3
    810                          }
    811                      } else {
    812                          GoToSyncUART(ch) ;                            // go to sync modus for recive
   \                     ??ReceivePacketUart_5:
   \   00000180   2F08               MOV     R16, R24
   \   00000182   ........           CALL    GoToSyncUART
    813                      }
    814                  }
    815                  break ;
   \   00000186   C0B4               RJMP    ??ReceivePacketUart_3
    816              case RECEIVE :
    817                  if (++UART[ch].RxCount >= UART[ch].RxPacklen) {
   \                     ??ReceivePacketUart_2:
   \   00000188   2F08               MOV     R16, R24
   \   0000018A   E010               LDI     R17, 0
   \   0000018C   E14A               LDI     R20, 26
   \   0000018E   E050               LDI     R21, 0
   \   00000190   ........           CALL    ?S_EC_MUL_L02
   \   00000194   01F8               MOVW    R31:R30, R17:R16
   \   00000196   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000198   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000019A   8900               LDD     R16, Z+16
   \   0000019C   8911               LDD     R17, Z+17
   \   0000019E   5F0F               SUBI    R16, 255
   \   000001A0   4F1F               SBCI    R17, 255
   \   000001A2   8B00               STD     Z+16, R16
   \   000001A4   8B11               STD     Z+17, R17
   \   000001A6   2F08               MOV     R16, R24
   \   000001A8   E010               LDI     R17, 0
   \   000001AA   E14A               LDI     R20, 26
   \   000001AC   E050               LDI     R21, 0
   \   000001AE   ........           CALL    ?S_EC_MUL_L02
   \   000001B2   01F8               MOVW    R31:R30, R17:R16
   \   000001B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B8   8920               LDD     R18, Z+16
   \   000001BA   8931               LDD     R19, Z+17
   \   000001BC   2F08               MOV     R16, R24
   \   000001BE   E010               LDI     R17, 0
   \   000001C0   E14A               LDI     R20, 26
   \   000001C2   E050               LDI     R21, 0
   \   000001C4   ........           CALL    ?S_EC_MUL_L02
   \   000001C8   01F8               MOVW    R31:R30, R17:R16
   \   000001CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CE   8906               LDD     R16, Z+22
   \   000001D0   8917               LDD     R17, Z+23
   \   000001D2   1720               CP      R18, R16
   \   000001D4   0731               CPC     R19, R17
   \   000001D6   F408               BRCC    $+2+2
   \   000001D8   C08B               RJMP    ??ReceivePacketUart_3
    818                      if ((UART[ch].pRxBuffer[UART[ch].RxPacklen -1]) == ANPRO10_EOT) {
   \   000001DA   2F08               MOV     R16, R24
   \   000001DC   E010               LDI     R17, 0
   \   000001DE   E14A               LDI     R20, 26
   \   000001E0   E050               LDI     R21, 0
   \   000001E2   ........           CALL    ?S_EC_MUL_L02
   \   000001E6   01F8               MOVW    R31:R30, R17:R16
   \   000001E8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001EA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001EC   8522               LDD     R18, Z+10
   \   000001EE   8533               LDD     R19, Z+11
   \   000001F0   2F08               MOV     R16, R24
   \   000001F2   E010               LDI     R17, 0
   \   000001F4   E14A               LDI     R20, 26
   \   000001F6   E050               LDI     R21, 0
   \   000001F8   ........           CALL    ?S_EC_MUL_L02
   \   000001FC   01F8               MOVW    R31:R30, R17:R16
   \   000001FE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000200   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000202   8906               LDD     R16, Z+22
   \   00000204   8917               LDD     R17, Z+23
   \   00000206   0F20               ADD     R18, R16
   \   00000208   1F31               ADC     R19, R17
   \   0000020A   5021               SUBI    R18, 1
   \   0000020C   4030               SBCI    R19, 0
   \   0000020E   01F9               MOVW    R31:R30, R19:R18
   \   00000210   8100               LD      R16, Z
   \   00000212   3004               CPI     R16, 4
   \   00000214   F009               BREQ    $+2+2
   \   00000216   C065               RJMP    ??ReceivePacketUart_7
    819                          if (CalcDSRxChecksum(ch, UART[ch].RxPacklen-2)) {
   \   00000218   2F08               MOV     R16, R24
   \   0000021A   E010               LDI     R17, 0
   \   0000021C   E14A               LDI     R20, 26
   \   0000021E   E050               LDI     R21, 0
   \   00000220   ........           CALL    ?S_EC_MUL_L02
   \   00000224   01F8               MOVW    R31:R30, R17:R16
   \   00000226   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000228   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000022A   8926               LDD     R18, Z+22
   \   0000022C   8937               LDD     R19, Z+23
   \   0000022E   5022               SUBI    R18, 2
   \   00000230   4030               SBCI    R19, 0
   \   00000232   2F08               MOV     R16, R24
   \   00000234   ....               RCALL   CalcDSRxChecksum
   \   00000236   2B01               OR      R16, R17
   \   00000238   F409               BRNE    $+2+2
   \   0000023A   C04F               RJMP    ??ReceivePacketUart_8
    820                              if ((UART[ch].pRxBuffer[1] == MyAddress())||      // message to me? or
    821                                  (UART[ch].pRxBuffer[1] == 0xff)) {            // broadcast
   \   0000023C   ........           CALL    MyAddress
   \   00000240   2F20               MOV     R18, R16
   \   00000242   2F08               MOV     R16, R24
   \   00000244   E010               LDI     R17, 0
   \   00000246   E14A               LDI     R20, 26
   \   00000248   E050               LDI     R21, 0
   \   0000024A   ........           CALL    ?S_EC_MUL_L02
   \   0000024E   01F8               MOVW    R31:R30, R17:R16
   \   00000250   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000252   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000254   8502               LDD     R16, Z+10
   \   00000256   8513               LDD     R17, Z+11
   \   00000258   01F8               MOVW    R31:R30, R17:R16
   \   0000025A   8101               LDD     R16, Z+1
   \   0000025C   1702               CP      R16, R18
   \   0000025E   F079               BREQ    ??ReceivePacketUart_9
   \   00000260   2F08               MOV     R16, R24
   \   00000262   E010               LDI     R17, 0
   \   00000264   E14A               LDI     R20, 26
   \   00000266   E050               LDI     R21, 0
   \   00000268   ........           CALL    ?S_EC_MUL_L02
   \   0000026C   01F8               MOVW    R31:R30, R17:R16
   \   0000026E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000270   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000272   8502               LDD     R16, Z+10
   \   00000274   8513               LDD     R17, Z+11
   \   00000276   01F8               MOVW    R31:R30, R17:R16
   \   00000278   8101               LDD     R16, Z+1
   \   0000027A   3F0F               CPI     R16, 255
   \   0000027C   F551               BRNE    ??ReceivePacketUart_10
    822                                  hostAddress = UART[ch].pRxBuffer[3];            // address to sender (host)
   \                     ??ReceivePacketUart_9:
   \   0000027E   2F08               MOV     R16, R24
   \   00000280   E010               LDI     R17, 0
   \   00000282   E14A               LDI     R20, 26
   \   00000284   E050               LDI     R21, 0
   \   00000286   ........           CALL    ?S_EC_MUL_L02
   \   0000028A   01F8               MOVW    R31:R30, R17:R16
   \   0000028C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000028E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000290   8502               LDD     R16, Z+10
   \   00000292   8513               LDD     R17, Z+11
   \   00000294   01F8               MOVW    R31:R30, R17:R16
   \   00000296   8103               LDD     R16, Z+3
   \   00000298   9300....           STS     hostAddress, R16
    823                                  UART[ch].RxState = HANDLE ;                     // Package OK
   \   0000029C   2F08               MOV     R16, R24
   \   0000029E   E010               LDI     R17, 0
   \   000002A0   E14A               LDI     R20, 26
   \   000002A2   E050               LDI     R21, 0
   \   000002A4   ........           CALL    ?S_EC_MUL_L02
   \   000002A8   01F8               MOVW    R31:R30, R17:R16
   \   000002AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002AE   E00A               LDI     R16, 10
   \   000002B0   8B02               STD     Z+18, R16
    824                                  if (ch == 0) {
   \   000002B2   2388               TST     R24
   \   000002B4   F431               BRNE    ??ReceivePacketUart_11
    825                                      OS_SignalEvent(1, &TCB_USART0);
   \   000002B6   ....               LDI     R18, LOW(TCB_USART0)
   \   000002B8   ....               LDI     R19, (TCB_USART0) >> 8
   \   000002BA   E001               LDI     R16, 1
   \   000002BC   ........           CALL    OS_SignalEvent
   \   000002C0   C017               RJMP    ??ReceivePacketUart_3
    826                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart_11:
   \   000002C2   3081               CPI     R24, 1
   \   000002C4   F4A9               BRNE    ??ReceivePacketUart_3
    827                                      OS_SignalEvent(1, &TCB_USART1);
   \   000002C6   ....               LDI     R18, LOW(TCB_USART1)
   \   000002C8   ....               LDI     R19, (TCB_USART1) >> 8
   \   000002CA   E001               LDI     R16, 1
   \   000002CC   ........           CALL    OS_SignalEvent
   \   000002D0   C00F               RJMP    ??ReceivePacketUart_3
    828                                  }
    829                              } else {
    830                                  GoToSyncUART(ch) ;                             // go to sync modus for recive
   \                     ??ReceivePacketUart_10:
   \   000002D2   2F08               MOV     R16, R24
   \   000002D4   ........           CALL    GoToSyncUART
   \   000002D8   C00B               RJMP    ??ReceivePacketUart_3
    831                              }
    832                          } else {
    833                              GoToSyncUART(ch) ;                                // go to sync modus for recive
   \                     ??ReceivePacketUart_8:
   \   000002DA   2F08               MOV     R16, R24
   \   000002DC   ........           CALL    GoToSyncUART
   \   000002E0   C007               RJMP    ??ReceivePacketUart_3
    834                          }
    835                      } else {
    836                          GoToSyncUART(ch) ;                                    // go to sync modus for recive
   \                     ??ReceivePacketUart_7:
   \   000002E2   2F08               MOV     R16, R24
   \   000002E4   ........           CALL    GoToSyncUART
    837                      }
    838                  }
    839                  break ;
   \   000002E8   C003               RJMP    ??ReceivePacketUart_3
    840              case HANDLE :
    841                  break;
    842              default :
    843                  GoToSyncUART(ch) ;                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_4:
   \   000002EA   2F08               MOV     R16, R24
   \   000002EC   ........           CALL    GoToSyncUART
    844                  break ;
    845              }                                                           // end switch
    846              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer
   \                     ??ReceivePacketUart_3:
   \   000002F0   2F08               MOV     R16, R24
   \   000002F2   E010               LDI     R17, 0
   \   000002F4   E14A               LDI     R20, 26
   \   000002F6   E050               LDI     R21, 0
   \   000002F8   ........           CALL    ?S_EC_MUL_L02
   \   000002FC   01F8               MOVW    R31:R30, R17:R16
   \   000002FE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000300   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000302   8506               LDD     R16, Z+14
   \   00000304   8517               LDD     R17, Z+15
   \   00000306   5F0F               SUBI    R16, 255
   \   00000308   4F1F               SBCI    R17, 255
   \   0000030A   8706               STD     Z+14, R16
   \   0000030C   8717               STD     Z+15, R17
   \   0000030E   2F08               MOV     R16, R24
   \   00000310   E010               LDI     R17, 0
   \   00000312   E14A               LDI     R20, 26
   \   00000314   E050               LDI     R21, 0
   \   00000316   ........           CALL    ?S_EC_MUL_L02
   \   0000031A   01F8               MOVW    R31:R30, R17:R16
   \   0000031C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000031E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000320   8506               LDD     R16, Z+14
   \   00000322   8517               LDD     R17, Z+15
   \   00000324   3906               CPI     R16, 150
   \   00000326   E020               LDI     R18, 0
   \   00000328   0712               CPC     R17, R18
   \   0000032A   F068               BRCS    ??ReceivePacketUart_12
    847                  UART[ch].RxLast = 0;                                     // reset pointer
   \   0000032C   2F08               MOV     R16, R24
   \   0000032E   E010               LDI     R17, 0
   \   00000330   E14A               LDI     R20, 26
   \   00000332   E050               LDI     R21, 0
   \   00000334   ........           CALL    ?S_EC_MUL_L02
   \   00000338   01F8               MOVW    R31:R30, R17:R16
   \   0000033A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000033C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000033E   E000               LDI     R16, 0
   \   00000340   8706               STD     Z+14, R16
   \   00000342   E000               LDI     R16, 0
   \   00000344   8707               STD     Z+15, R16
    848              }
    849          }
   \                     ??ReceivePacketUart_12:
   \   00000346   E0E4               LDI     R30, 4
   \   00000348   ........           JMP     ?EPILOGUE_B4_L09
    850          
    851          
    852          /*************************************************************************
    853          *
    854          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    855          *
    856          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    857          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    858          
    859              unsigned short  cnt ;
    860              unsigned char   csum ;
    861          
    862              csum = 0 ;
   \   00000008   E060               LDI     R22, 0
    863              for (cnt = 4 ; cnt < len ; cnt++) {
   \   0000000A   E084               LDI     R24, 4
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSTxChecksum_0:
   \   0000000E   1584               CP      R24, R4
   \   00000010   0595               CPC     R25, R5
   \   00000012   F4D8               BRCC    ??CalcDSTxChecksum_1
    864                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]] ;
   \   00000014   E070               LDI     R23, 0
   \   00000016   2D02               MOV     R16, R2
   \   00000018   E010               LDI     R17, 0
   \   0000001A   E14A               LDI     R20, 26
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   ........           CALL    ?S_EC_MUL_L02
   \   00000022   01D8               MOVW    R27:R26, R17:R16
   \   00000024   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000026   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9711               SBIW    R27:R26, 1
   \   0000002E   0FE8               ADD     R30, R24
   \   00000030   1FF9               ADC     R31, R25
   \   00000032   8100               LD      R16, Z
   \   00000034   E010               LDI     R17, 0
   \   00000036   2760               EOR     R22, R16
   \   00000038   2771               EOR     R23, R17
   \   0000003A   01FB               MOVW    R31:R30, R23:R22
   \   0000003C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000040   ....               LDI     R19, (crc) >> 16
   \   00000042   BF3B               OUT     0x3B, R19
   \   00000044   9166               ELPM    R22, Z
    865              }
   \   00000046   9601               ADIW    R25:R24, 1
   \   00000048   CFE2               RJMP    ??CalcDSTxChecksum_0
    866              return csum ;
   \                     ??CalcDSTxChecksum_1:
   \   0000004A   2F06               MOV     R16, R22
   \   0000004C   E0E6               LDI     R30, 6
   \   0000004E   ........           JMP     ?EPILOGUE_B6_L09
    867          }
    868          
    869          /*************************************************************************
    870          *
    871          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    872          *
    873          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    874          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    875          
    876              unsigned short  cnt ;
    877              unsigned char   csum ;
    878          
    879              csum = 0 ;
   \   00000008   E0A0               LDI     R26, 0
    880              for (cnt=0 ; cnt < len ; cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSRxChecksum_0:
   \   0000000E   1786               CP      R24, R22
   \   00000010   0797               CPC     R25, R23
   \   00000012   F4D8               BRCC    ??CalcDSRxChecksum_1
    881                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]] ;
   \   00000014   E0B0               LDI     R27, 0
   \   00000016   2D02               MOV     R16, R2
   \   00000018   E010               LDI     R17, 0
   \   0000001A   E14A               LDI     R20, 26
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   ........           CALL    ?S_EC_MUL_L02
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000028   8502               LDD     R16, Z+10
   \   0000002A   8513               LDD     R17, Z+11
   \   0000002C   0F08               ADD     R16, R24
   \   0000002E   1F19               ADC     R17, R25
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   8100               LD      R16, Z
   \   00000034   E010               LDI     R17, 0
   \   00000036   27A0               EOR     R26, R16
   \   00000038   27B1               EOR     R27, R17
   \   0000003A   01FD               MOVW    R31:R30, R27:R26
   \   0000003C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000040   ....               LDI     R19, (crc) >> 16
   \   00000042   BF3B               OUT     0x3B, R19
   \   00000044   91A6               ELPM    R26, Z
    882              }
   \   00000046   9601               ADIW    R25:R24, 1
   \   00000048   CFE2               RJMP    ??CalcDSRxChecksum_0
    883              if (csum == UART[ch].pRxBuffer[len]) {
   \                     ??CalcDSRxChecksum_1:
   \   0000004A   2D02               MOV     R16, R2
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   E14A               LDI     R20, 26
   \   00000050   E050               LDI     R21, 0
   \   00000052   ........           CALL    ?S_EC_MUL_L02
   \   00000056   01F8               MOVW    R31:R30, R17:R16
   \   00000058   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005C   8502               LDD     R16, Z+10
   \   0000005E   8513               LDD     R17, Z+11
   \   00000060   0F06               ADD     R16, R22
   \   00000062   1F17               ADC     R17, R23
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8100               LD      R16, Z
   \   00000068   17A0               CP      R26, R16
   \   0000006A   F419               BRNE    ??CalcDSRxChecksum_2
    884                  return true ;
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   E010               LDI     R17, 0
   \   00000070   C002               RJMP    ??CalcDSRxChecksum_3
    885              } else {
    886                  return false ;
   \                     ??CalcDSRxChecksum_2:
   \   00000072   E000               LDI     R16, 0
   \   00000074   E010               LDI     R17, 0
   \                     ??CalcDSRxChecksum_3:
   \   00000076   E0E4               LDI     R30, 4
   \   00000078   ........           JMP     ?EPILOGUE_B4_L09
    887              }
    888          }
    889          
    890          /*************************************************************************
    891          *
    892          * Goes to sync mode
    893          *
    894          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    895          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B73F               IN      R19, 0x3F
   \   00000002   94F8               CLI
   \   00000004   2F20               MOV     R18, R16
    896          
    897              if (ch < 2) {
   \   00000006   3022               CPI     R18, 2
   \   00000008   F518               BRCC    ??GoToSyncUART_0
    898                  UART[ch].SyncCnt = 0 ;                        // ready for sync
   \   0000000A   2F02               MOV     R16, R18
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8B03               STD     Z+19, R16
    899                  UART[ch].RxState = SYNC ;
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14A               LDI     R20, 26
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   E000               LDI     R16, 0
   \   00000034   8B02               STD     Z+18, R16
    900                  UART[ch].RxFirst = 0 ;
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14A               LDI     R20, 26
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8704               STD     Z+12, R16
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   8705               STD     Z+13, R16
    901              }
    902          }
   \                     ??GoToSyncUART_0:
   \   00000050   BF3F               OUT     0x3F, R19
   \   00000052   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_25) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   0A                 DB      0xa
   \   00000008   ....               DW      (??CheckActionUart_3) /2
   \   0000000A   0A                 DB      0xa
   \   0000000B   ....               DW      (??CheckActionUart_4) /2
   \   0000000D   32                 DB      0x32
   \   0000000E   ....               DW      (??CheckActionUart_5) /2
   \   00000010   0A                 DB      0xa
   \   00000011   ....               DW      (??CheckActionUart_6) /2
   \   00000013   0A                 DB      0xa
   \   00000014   ....               DW      (??CheckActionUart_7) /2
   \   00000016   0A                 DB      0xa
   \   00000017   ....               DW      (??CheckActionUart_8) /2
   \   00000019   0A                 DB      0xa
   \   0000001A   ....               DW      (??CheckActionUart_10) /2
   \   0000001C   1E                 DB      0x1e
   \   0000001D   ....               DW      (??CheckActionUart_14) /2
   \   0000001F   14                 DB      0x14
   \   00000020   ....               DW      (??CheckActionUart_12) /2
   \   00000022   28                 DB      0x28
   \   00000023   ....               DW      (??CheckActionUart_20) /2
   \   00000025   0A                 DB      0xa
   \   00000026   ....               DW      (??CheckActionUart_21) /2
   \   00000028   0A                 DB      0xa
   \   00000029   ....               DW      (??CheckActionUart_22) /2
   \   0000002B   0A                 DB      0xa
   \   0000002C   ....               DW      (??CheckActionUart_23) /2
   \   0000002E   0A                 DB      0xa
   \   0000002F   ....               DW      (??CheckActionUart_24) /2
   \   00000031   02FE9E             DB      254,0x2,0x9e
   \   00000034   ....               DW      (??CheckActionUart_2) /2
   \   00000036   FB                 DB      251
   \   00000037   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   BuildADEpromdata
        4      2 ?S_EC_MUL_L02
      6      2   BuildADInt
        6      2 ?S_EC_MUL_L02
      4      2   BuildANAFilter
        4      2 ?S_EC_MUL_L02
      4      2   BuildANASetup
        4      2 ?S_EC_MUL_L02
      7      2   BuildEEPROMData
        7      2   -> ReadEEPROMBuffer
        7      2 ?S_EC_MUL_L02
      8      2   BuildMData485
        8      2 ?S_EC_MUL_L02
      8      2   BuildMDataANA
        8      2 ?S_EC_MUL_L02
      6      2   BuildRData485
        6      2 ?S_EC_MUL_L02
      2      2   BuildRS4Setup
        2      2 ?S_EC_MUL_L02
      8      2   BuildStackStatus
        8      2   -> OS_GetStackSpace
        8      2 ?S_EC_MUL_L02
      6      2   BuildStatusData
        6      2   -> MyAddress
        6      2 ?S_EC_MUL_L02
      8      2   BuildWHdata
        8      2   -> OS_LeaveRegion
        8      2 ?S_EC_MUL_L02
      4      2   CalcDSRxChecksum
        4      2 ?S_EC_MUL_L02
      6      2   CalcDSTxChecksum
        6      2 ?S_EC_MUL_L02
      6      2   CheckActionUart
        6      2   -> BuildADEpromdata
        6      2   -> BuildADInt
        6      2   -> BuildANAFilter
        6      2   -> BuildANASetup
        6      2   -> BuildEEPROMData
        6      2   -> BuildMData485
        6      2   -> BuildMDataANA
        6      2   -> BuildRData485
        6      2   -> BuildRS4Setup
        6      2   -> BuildStackStatus
        6      2   -> BuildStatusData
        6      2   -> BuildWHdata
        6      2   -> GetADData
        6      2   -> GetANAFilter
        6      2   -> GetANASetup
        6      2   -> GetEEPROMData
        6      2   -> GetGotoBootloader
        6      2   -> GetRS4Setup
        6      2   -> GetResetEEPROM
        6      2 ?SS_SHR_L02
        6      2 ?SV_SWITCH_L06
        6      2 ?S_EC_MUL_L02
      4      2   GetADData
        4      2 ?S_EC_MUL_L02
      4      2   GetANAFilter
        4      2 ?S_EC_MUL_L02
      3      2   GetANASetup
        3      2   -> SetAnaPort
        3      2   -> WriteEEPROMByte
        3      2 ?S_EC_MUL_L02
      7      2   GetEEPROMData
        7      2   -> OS_Delay
        7      2   -> OS__Gettime
        7      2   -> WriteEEPROMBuffer
        7      2 ?S_EC_MUL_L02
      0      2   GetGotoBootloader
      3      2   GetRS4Setup
        3      2   -> SetRS4Port
        3      2   -> WriteEEPROMByte
        3      2 ?S_EC_MUL_L02
      3      2   GetResetEEPROM
        3      2   -> EEPROMReset
      0      2   GoToSyncUART
        0      2 ?S_EC_MUL_L02
      4      2   ReceivePacketUart
        4      2   -> CalcDSRxChecksum
        4      2   -> GoToSyncUART
        4      2   -> MyAddress
        4      2   -> OS_SignalEvent
        4      2 ?S_EC_MUL_L02
      0      2   TimoutUSART0
        0      2   -> GoToSyncUART
        0      2   -> OS_Error
        0      2   -> OS_StopTimer
      0      2   TimoutUSART0On
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1
        0      2   -> GoToSyncUART
        0      2   -> OS_Error
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1On
        0      2   -> OS_StopTimer
      1      2   Uart_BuildHeader
        1      2   -> MyAddress
        1      2 ?S_EC_MUL_L02
      4      2   Uart_BuildTail
        4      2   -> CalcDSTxChecksum
        4      2   -> OS_Error
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader
        4      2 ?S_EC_MUL_L02
      1      2   Usart0Handler
        1      2   -> OS_Unuse
        1      2   -> OS_Use
        1      2   -> OS_WaitEventTimed
        1      2   -> UsartCheckPackage
      1      2   Usart1Handler
        1      2   -> OS_Unuse
        1      2   -> OS_Use
        1      2   -> OS_WaitEventTimed
        1      2   -> UsartCheckPackage
      4      2   UsartCheckPackage
        4      2   -> CheckActionUart
        4      2   -> GoToSyncUART
        4      2   -> Uart_BuildTail
        4      2 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Jumptable for CheckActionUart>_0
     500  BuildADEpromdata
     632  BuildADInt
     480  BuildANAFilter
     562  BuildANASetup
     704  BuildEEPROMData
    1906  BuildMData485
     690  BuildMDataANA
     802  BuildRData485
     636  BuildRS4Setup
    1672  BuildStackStatus
    1396  BuildStatusData
    1102  BuildWHdata
     124  CalcDSRxChecksum
      82  CalcDSTxChecksum
     546  CheckActionUart
     312  GetADData
      66  GetANAFilter
     162  GetANASetup
     376  GetEEPROMData
      38  GetGotoBootloader
     156  GetRS4Setup
      18  GetResetEEPROM
      84  GoToSyncUART
     844  ReceivePacketUart
      94  TimoutUSART0
      20  TimoutUSART0On
      94  TimoutUSART1
      20  TimoutUSART1On
     450  Uart_BuildHeader
     980  Uart_BuildTail
      40  Usart0Handler
      40  Usart1Handler
     226  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_UCSR1B
       1  _A_WDTCSR

 
      8 bytes in segment ABSOLUTE
 15 854 bytes in segment CODE
     56 bytes in segment SWITCH
 
 15 910 bytes of CODE memory
      0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
