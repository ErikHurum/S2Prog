###############################################################################
#
# IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR           30/Jul/2018  09:24:40
# Copyright 1996-2018 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1280\Src\RS485.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW58D8.tmp ("D:\S2Prog\IO\ANZB –
#        ATmega1280\Src\RS485.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\ANZB –
#        ATmega1280\Debug\Obj" -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\ANZB – ATmega1280\Debug\List" -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB –
#        ATmega1280\INC\" -I "D:\S2Prog\IO\ANZB – ATmega1280\..\..\SHARED\INC\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1280\Debug\List\RS485.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1280\Debug\Obj\RS485.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1280\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          #include "stdlib.h"
     13          //#include "string.h"
     14          
     15          
     16          
     17          /************************************************ *************************
     18          *   (This is a timer calback)
     19          *  Timout timer UART 0
     20          *
     21          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     22          void TimoutUART0(void) {
   \                     TimoutUART0:
     23          
     24              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   E0EC               LDI     R30, LOW(8716)
   \   00000002   E2F2               LDI     R31, (8716) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   7F0D               ANDI    R16, 0xFD
   \   00000008   8300               ST      Z, R16
     25          }
   \   0000000A   9508               RET
     26          
     27          /*************************************************************************
     28          *   (This is a timer calback)
     29          *  Timout timer UART 1
     30          *
     31          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     32          void TimoutUART1(void) {
   \                     TimoutUART1:
     33          
     34              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   E0E4               LDI     R30, LOW(8708)
   \   00000002   E2F2               LDI     R31, (8708) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   7F0D               ANDI    R16, 0xFD
   \   00000008   8300               ST      Z, R16
     35          }
   \   0000000A   9508               RET
     36          
     37          
     38          /*************************************************************************
     39          *   (This is a task)
     40          *  Usart handler UART send request
     41          *
     42          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     43          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
     44              char SeqCnt = 0;
   \   00000004   E0A0               LDI     R26, 0
     45              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   00000006   E0B5               LDI     R27, 5
     46              char EventStatus;
     47              char AskMD[2];
     48          
     49              
     50              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000008   E840               LDI     R20, 128
   \   0000000A   E255               LDI     R21, 37
   \   0000000C   E060               LDI     R22, 0
   \   0000000E   E070               LDI     R23, 0
   \   00000010   E000               LDI     R16, 0
   \   00000012   ....               RCALL   Init16552
     51              Init16552(1, 9600);                                      // Init UART channel 1
   \   00000014   E840               LDI     R20, 128
   \   00000016   E255               LDI     R21, 37
   \   00000018   E060               LDI     R22, 0
   \   0000001A   E070               LDI     R23, 0
   \   0000001C   E001               LDI     R16, 1
   \   0000001E   ....               RCALL   Init16552
     52              
     53              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   00000020   E002               LDI     R16, 2
   \   00000022   E010               LDI     R17, 0
   \   00000024   ........           CALL    ReadEEPROMByte
   \   00000028   9300....           STS     TData, R16
     54              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   0000002C   E003               LDI     R16, 3
   \   0000002E   E010               LDI     R17, 0
   \   00000030   ........           CALL    ReadEEPROMByte
   \   00000034   9300....           STS     (TData + 1), R16
     55              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   00000038   E004               LDI     R16, 4
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    ReadEEPROMByte
   \   00000040   9300....           STS     (TData + 2), R16
     56          
     57              TData.RS4.ToTargetBuffer[0][0] = false;
   \   00000044   E000               LDI     R16, 0
   \   00000046   9300....           STS     (TData + 1268), R16
     58              TData.RS4.ToTargetBuffer[1][0] = false;
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   9300....           STS     (TData + 1348), R16
     59              TData.RS4.FromTargetBuffer[0][0] = false;
   \   00000050   E000               LDI     R16, 0
   \   00000052   9300....           STS     (TData + 1428), R16
     60              TData.RS4.FromTargetBuffer[1][0] = false;
   \   00000056   E000               LDI     R16, 0
   \   00000058   9300....           STS     (TData + 1478), R16
     61              
     62              
     63              for (char i = 0; i < 8; i++) {
   \   0000005C   2455               CLR     R5
   \                     ??ExtRS485Ctl_0:
   \   0000005E   E008               LDI     R16, 8
   \   00000060   1650               CP      R5, R16
   \   00000062   F598               BRCC    ??ExtRS485Ctl_1
     64                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \   00000064   9100....           LDS     R16, (OS_Counters + 1)
   \   00000068   7F00               ANDI    R16, 0xF0
   \   0000006A   2300               TST     R16
   \   0000006C   F021               BREQ    ??ExtRS485Ctl_2
   \   0000006E   E909               LDI     R16, 153
   \   00000070   E010               LDI     R17, 0
   \   00000072   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_2:
   \   00000076   94F8               CLI
   \   00000078   9100....           LDS     R16, (OS_Counters + 1)
   \   0000007C   9503               INC     R16
   \   0000007E   9300....           STS     (OS_Counters + 1), R16
   \   00000082   9120....           LDS     R18, TData
   \   00000086   E001               LDI     R16, 1
   \   00000088   E010               LDI     R17, 0
   \   0000008A   2D45               MOV     R20, R5
   \   0000008C   ........           CALL    ?S_SHL_L02
   \   00000090   2320               AND     R18, R16
   \   00000092   B108               IN      R16, 0x08
   \   00000094   2B02               OR      R16, R18
   \   00000096   B908               OUT     0x08, R16
   \   00000098   9100....           LDS     R16, (OS_Counters + 1)
   \   0000009C   7F00               ANDI    R16, 0xF0
   \   0000009E   2300               TST     R16
   \   000000A0   F021               BREQ    ??ExtRS485Ctl_3
   \   000000A2   E909               LDI     R16, 153
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_3:
   \   000000AA   9100....           LDS     R16, (OS_Counters + 1)
   \   000000AE   950A               DEC     R16
   \   000000B0   9300....           STS     (OS_Counters + 1), R16
   \   000000B4   9100....           LDS     R16, (OS_Counters + 1)
   \   000000B8   2300               TST     R16
   \   000000BA   F409               BRNE    ??ExtRS485Ctl_4
   \   000000BC   9478               SEI
     65                  OS_Delay(100);
   \                     ??ExtRS485Ctl_4:
   \   000000BE   E604               LDI     R16, 100
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   ........           CALL    OS_Delay
     66              }
   \   000000C6   9453               INC     R5
   \   000000C8   CFCA               RJMP    ??ExtRS485Ctl_0
     67              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \                     ??ExtRS485Ctl_1:
   \   000000CA   E700               LDI     R16, 112
   \   000000CC   E117               LDI     R17, 23
   \   000000CE   ........           CALL    OS_Delay
     68              
     69              while (1) {
     70                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
   \                     ??ExtRS485Ctl_5:
   \   000000D2   E000               LDI     R16, 0
   \   000000D4   9300....           STS     PortPair, R16
   \                     ??ExtRS485Ctl_6:
   \   000000D8   9100....           LDS     R16, PortPair
   \   000000DC   3004               CPI     R16, 4
   \   000000DE   F008               BRCS    $+2+2
   \   000000E0   C23B               RJMP    ??ExtRS485Ctl_7
     71                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
   \   000000E2   9100....           LDS     R16, (UART16552 + 24)
   \   000000E6   3009               CPI     R16, 9
   \   000000E8   F010               BRCS    ??ExtRS485Ctl_8
     72                          EmptyRxBuf16552(0);                            // Empty UART channel 0
   \   000000EA   E000               LDI     R16, 0
   \   000000EC   ....               RCALL   EmptyRxBuf16552
     73                      }
     74                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
   \                     ??ExtRS485Ctl_8:
   \   000000EE   9100....           LDS     R16, (UART16552 + 50)
   \   000000F2   3009               CPI     R16, 9
   \   000000F4   F010               BRCS    ??ExtRS485Ctl_9
     75                          EmptyRxBuf16552(1);                            // Empty UART channel 1
   \   000000F6   E001               LDI     R16, 1
   \   000000F8   ....               RCALL   EmptyRxBuf16552
     76                      }
     77                      if (PowerOnTimer < POWER_ON_CNT) {
   \                     ??ExtRS485Ctl_9:
   \   000000FA   30B5               CPI     R27, 5
   \   000000FC   F420               BRCC    ??ExtRS485Ctl_10
     78                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
   \   000000FE   95B3               INC     R27
   \   00000100   30B5               CPI     R27, 5
   \   00000102   F008               BRCS    ??ExtRS485Ctl_10
     79                              SetRS4Port();                                // and set power on ports
   \   00000104   ....               RCALL   SetRS4Port
     80                          }
     81                      }
     82                      SetBit(PORTE, 0xf0);
   \                     ??ExtRS485Ctl_10:
   \   00000106   9100....           LDS     R16, (OS_Counters + 1)
   \   0000010A   7F00               ANDI    R16, 0xF0
   \   0000010C   2300               TST     R16
   \   0000010E   F021               BREQ    ??ExtRS485Ctl_11
   \   00000110   E909               LDI     R16, 153
   \   00000112   E010               LDI     R17, 0
   \   00000114   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_11:
   \   00000118   94F8               CLI
   \   0000011A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000011E   9503               INC     R16
   \   00000120   9300....           STS     (OS_Counters + 1), R16
   \   00000124   B10E               IN      R16, 0x0E
   \   00000126   6F00               ORI     R16, 0xF0
   \   00000128   B90E               OUT     0x0E, R16
   \   0000012A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000012E   7F00               ANDI    R16, 0xF0
   \   00000130   2300               TST     R16
   \   00000132   F021               BREQ    ??ExtRS485Ctl_12
   \   00000134   E909               LDI     R16, 153
   \   00000136   E010               LDI     R17, 0
   \   00000138   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_12:
   \   0000013C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000140   950A               DEC     R16
   \   00000142   9300....           STS     (OS_Counters + 1), R16
   \   00000146   9100....           LDS     R16, (OS_Counters + 1)
   \   0000014A   2300               TST     R16
   \   0000014C   F409               BRNE    ??ExtRS485Ctl_13
   \   0000014E   9478               SEI
     83                      ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
   \                     ??ExtRS485Ctl_13:
   \   00000150   9100....           LDS     R16, (OS_Counters + 1)
   \   00000154   7F00               ANDI    R16, 0xF0
   \   00000156   2300               TST     R16
   \   00000158   F021               BREQ    ??ExtRS485Ctl_14
   \   0000015A   E909               LDI     R16, 153
   \   0000015C   E010               LDI     R17, 0
   \   0000015E   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_14:
   \   00000162   94F8               CLI
   \   00000164   9100....           LDS     R16, (OS_Counters + 1)
   \   00000168   9503               INC     R16
   \   0000016A   9300....           STS     (OS_Counters + 1), R16
   \   0000016E   9140....           LDS     R20, PortPair
   \   00000172   E100               LDI     R16, 16
   \   00000174   E010               LDI     R17, 0
   \   00000176   ........           CALL    ?S_SHL_L02
   \   0000017A   7F00               ANDI    R16, 0xF0
   \   0000017C   9500               COM     R16
   \   0000017E   B11E               IN      R17, 0x0E
   \   00000180   2310               AND     R17, R16
   \   00000182   B91E               OUT     0x0E, R17
   \   00000184   9100....           LDS     R16, (OS_Counters + 1)
   \   00000188   7F00               ANDI    R16, 0xF0
   \   0000018A   2300               TST     R16
   \   0000018C   F021               BREQ    ??ExtRS485Ctl_15
   \   0000018E   E909               LDI     R16, 153
   \   00000190   E010               LDI     R17, 0
   \   00000192   ........           CALL    OS_Error
   \                     ??ExtRS485Ctl_15:
   \   00000196   9100....           LDS     R16, (OS_Counters + 1)
   \   0000019A   950A               DEC     R16
   \   0000019C   9300....           STS     (OS_Counters + 1), R16
   \   000001A0   9100....           LDS     R16, (OS_Counters + 1)
   \   000001A4   2300               TST     R16
   \   000001A6   F409               BRNE    ??ExtRS485Ctl_16
   \   000001A8   9478               SEI
     84                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
   \                     ??ExtRS485Ctl_16:
   \   000001AA   9100....           LDS     R16, TData
   \   000001AE   E010               LDI     R17, 0
   \   000001B0   9140....           LDS     R20, PortPair
   \   000001B4   ........           CALL    ?SS_SHR_L02
   \   000001B8   7001               ANDI    R16, 0x01
   \   000001BA   2300               TST     R16
   \   000001BC   F409               BRNE    $+2+2
   \   000001BE   C0C3               RJMP    ??ExtRS485Ctl_17
     85                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
   \   000001C0   ....               LDI     R30, LOW(UART16552)
   \   000001C2   ....               LDI     R31, (UART16552) >> 8
   \   000001C4   E006               LDI     R16, 6
   \   000001C6   E010               LDI     R17, 0
   \   000001C8   8302               STD     Z+2, R16
   \   000001CA   8313               STD     Z+3, R17
     86                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
   \   000001CC   9100....           LDS     R16, (TData + 1)
   \   000001D0   E010               LDI     R17, 0
   \   000001D2   9130....           LDS     R19, PortPair
   \   000001D6   E022               LDI     R18, 2
   \   000001D8   9F32               MUL     R19, R18
   \   000001DA   2D40               MOV     R20, R0
   \   000001DC   ........           CALL    ?SS_SHR_L02
   \   000001E0   2E50               MOV     R5, R16
   \   000001E2   E003               LDI     R16, 3
   \   000001E4   2250               AND     R5, R16
     87                          switch (SnsType) {
   \   000001E6   2D05               MOV     R16, R5
   \   000001E8   5000               SUBI    R16, 0
   \   000001EA   F409               BRNE    $+2+2
   \   000001EC   C04F               RJMP    ??ExtRS485Ctl_18
   \   000001EE   950A               DEC     R16
   \   000001F0   F019               BREQ    ??ExtRS485Ctl_19
   \   000001F2   950A               DEC     R16
   \   000001F4   F151               BREQ    ??ExtRS485Ctl_20
   \   000001F6   C0A3               RJMP    ??ExtRS485Ctl_21
     88                          case 0x01:    //Water ingress??
     89                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_19:
   \   000001F8   2F0A               MOV     R16, R26
   \   000001FA   5000               SUBI    R16, 0
   \   000001FC   F019               BREQ    ??ExtRS485Ctl_22
   \   000001FE   5104               SUBI    R16, 20
   \   00000200   F021               BREQ    ??ExtRS485Ctl_23
   \   00000202   C020               RJMP    ??ExtRS485Ctl_24
     90                              case 0:
     91                                  Uart_BuildReqWISCardStatus(0);          //Card status
   \                     ??ExtRS485Ctl_22:
   \   00000204   E000               LDI     R16, 0
   \   00000206   ....               RCALL   Uart_BuildReqWISCardStatus
     92                                  break;
   \   00000208   C09A               RJMP    ??ExtRS485Ctl_21
     93                              case 20:
     94                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \                     ??ExtRS485Ctl_23:
   \   0000020A   9100....           LDS     R16, (TData + 1428)
   \   0000020E   2300               TST     R16
   \   00000210   F4B1               BRNE    ??ExtRS485Ctl_25
   \   00000212   9100....           LDS     R16, (TData + 1530)
   \   00000216   9110....           LDS     R17, PortPair
   \   0000021A   1701               CP      R16, R17
   \   0000021C   F481               BRNE    ??ExtRS485Ctl_25
     95                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
   \   0000021E   E713               LDI     R17, 115
   \   00000220   E000               LDI     R16, 0
   \   00000222   ....               RCALL   Uart_BuildReqWISXData
     96                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   00000224   9100....           LDS     R16, (TData + 1530)
   \   00000228   9503               INC     R16
   \   0000022A   9300....           STS     (TData + 1530), R16
   \   0000022E   9100....           LDS     R16, (TData + 1530)
   \   00000232   3004               CPI     R16, 4
   \   00000234   F048               BRCS    ??ExtRS485Ctl_26
     97                                          TData.RS4.EEPROMPortpair[0] = 0;
   \   00000236   E000               LDI     R16, 0
   \   00000238   9300....           STS     (TData + 1530), R16
   \   0000023C   C080               RJMP    ??ExtRS485Ctl_21
     98                                      }
     99                                  } else {
    100                                      Uart_BuildReqWISData(0);                //WIS data
   \                     ??ExtRS485Ctl_25:
   \   0000023E   E000               LDI     R16, 0
   \   00000240   ....               RCALL   Uart_BuildReqWISData
    101                                  }
    102                                  break;
   \   00000242   C07D               RJMP    ??ExtRS485Ctl_21
    103                              default:
    104                                  Uart_BuildReqWISData(0);                //WIS data
   \                     ??ExtRS485Ctl_24:
   \   00000244   E000               LDI     R16, 0
   \   00000246   ....               RCALL   Uart_BuildReqWISData
    105                                  break;
    106                              }
    107                              break;
   \                     ??ExtRS485Ctl_26:
   \   00000248   C07A               RJMP    ??ExtRS485Ctl_21
    108                          case 0x02: // Radar??
    109                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_20:
   \   0000024A   2F0A               MOV     R16, R26
   \   0000024C   5000               SUBI    R16, 0
   \   0000024E   F0D9               BREQ    ??ExtRS485Ctl_27
   \   00000250   5104               SUBI    R16, 20
   \   00000252   F4B1               BRNE    ??ExtRS485Ctl_28
    110                              case 20:
    111                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \   00000254   9100....           LDS     R16, (TData + 1428)
   \   00000258   2300               TST     R16
   \   0000025A   F491               BRNE    ??ExtRS485Ctl_28
   \   0000025C   9100....           LDS     R16, (TData + 1530)
   \   00000260   9110....           LDS     R17, PortPair
   \   00000264   1701               CP      R16, R17
   \   00000266   F461               BRNE    ??ExtRS485Ctl_28
    112                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   00000268   9100....           LDS     R16, (TData + 1530)
   \   0000026C   9503               INC     R16
   \   0000026E   9300....           STS     (TData + 1530), R16
   \   00000272   9100....           LDS     R16, (TData + 1530)
   \   00000276   3004               CPI     R16, 4
   \   00000278   F018               BRCS    ??ExtRS485Ctl_28
    113                                          TData.RS4.EEPROMPortpair[0] = 0;
   \   0000027A   E000               LDI     R16, 0
   \   0000027C   9300....           STS     (TData + 1530), R16
    114                                      }
    115                                  }
    116                                  // Fall through and send the request
    117                              default:
    118                                  Uart_BuildReqRadarData(0);          // Radar data
   \                     ??ExtRS485Ctl_28:
   \   00000280   E000               LDI     R16, 0
   \   00000282   ....               RCALL   Uart_BuildReqRadarData
    119                                  break;
   \   00000284   C05C               RJMP    ??ExtRS485Ctl_21
    120                              case 0:
    121                                  Uart_BuildReqRadarInfo(0);          //Radar Information
   \                     ??ExtRS485Ctl_27:
   \   00000286   E000               LDI     R16, 0
   \   00000288   ....               RCALL   Uart_BuildReqRadarInfo
    122                                  break;
    123                              }
    124                              break;
   \   0000028A   C059               RJMP    ??ExtRS485Ctl_21
    125                          case 0x00:  // AN-SGCNV
    126                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    127                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
   \                     ??ExtRS485Ctl_18:
   \   0000028C   9100....           LDS     R16, (TData + 1268)
   \   00000290   3001               CPI     R16, 1
   \   00000292   F469               BRNE    ??ExtRS485Ctl_29
   \   00000294   9100....           LDS     R16, (TData + 1269)
   \   00000298   9110....           LDS     R17, PortPair
   \   0000029C   1701               CP      R16, R17
   \   0000029E   F439               BRNE    ??ExtRS485Ctl_29
    128                                  Uart_BuildSndData(0);                       // add data to AD card package
   \   000002A0   E000               LDI     R16, 0
   \   000002A2   ....               RCALL   Uart_BuildSndData
    129                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
   \   000002A4   E000               LDI     R16, 0
   \   000002A6   ....               RCALL   Uart_BuildReqConfig
    130                                  AskMD[0] = false;
   \   000002A8   E000               LDI     R16, 0
   \   000002AA   2F80               MOV     R24, R16
   \   000002AC   C002               RJMP    ??ExtRS485Ctl_30
    131                              } else {
    132                                  AskMD[0] = true;
   \                     ??ExtRS485Ctl_29:
   \   000002AE   E001               LDI     R16, 1
   \   000002B0   2F80               MOV     R24, R16
    133                              }
    134                              if (SeqCnt == 0) {
   \                     ??ExtRS485Ctl_30:
   \   000002B2   23AA               TST     R26
   \   000002B4   F419               BRNE    ??ExtRS485Ctl_31
    135                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
   \   000002B6   E000               LDI     R16, 0
   \   000002B8   ....               RCALL   Uart_BuildReqCardStatus
   \   000002BA   C041               RJMP    ??ExtRS485Ctl_21
    136                              } else if (SeqCnt == 5) {
   \                     ??ExtRS485Ctl_31:
   \   000002BC   30A5               CPI     R26, 5
   \   000002BE   F419               BRNE    ??ExtRS485Ctl_32
    137                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
   \   000002C0   E000               LDI     R16, 0
   \   000002C2   ....               RCALL   Uart_BuildReqR16552
   \   000002C4   C03C               RJMP    ??ExtRS485Ctl_21
    138                              } else if (SeqCnt == 10) {
   \                     ??ExtRS485Ctl_32:
   \   000002C6   30AA               CPI     R26, 10
   \   000002C8   F419               BRNE    ??ExtRS485Ctl_33
    139                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
   \   000002CA   E000               LDI     R16, 0
   \   000002CC   ....               RCALL   Uart_BuildReqConfig
   \   000002CE   C037               RJMP    ??ExtRS485Ctl_21
    140                              } else if (SeqCnt == 15) {
   \                     ??ExtRS485Ctl_33:
   \   000002D0   30AF               CPI     R26, 15
   \   000002D2   F419               BRNE    ??ExtRS485Ctl_34
    141                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
   \   000002D4   E000               LDI     R16, 0
   \   000002D6   ....               RCALL   Uart_BuildReqC16552
   \   000002D8   C032               RJMP    ??ExtRS485Ctl_21
    142                              } else if (SeqCnt == 20) {
   \                     ??ExtRS485Ctl_34:
   \   000002DA   31A4               CPI     R26, 20
   \   000002DC   F559               BRNE    ??ExtRS485Ctl_35
    143                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \   000002DE   9100....           LDS     R16, (TData + 1428)
   \   000002E2   2300               TST     R16
   \   000002E4   F509               BRNE    ??ExtRS485Ctl_36
   \   000002E6   9100....           LDS     R16, (TData + 1530)
   \   000002EA   9110....           LDS     R17, PortPair
   \   000002EE   1701               CP      R16, R17
   \   000002F0   F4D9               BRNE    ??ExtRS485Ctl_36
    144                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
   \   000002F2   E000               LDI     R16, 0
   \   000002F4   ....               RCALL   Uart_BuildReqEEPROMData
    145                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
   \   000002F6   9100....           LDS     R16, (TData + 1528)
   \   000002FA   5F0E               SUBI    R16, 254
   \   000002FC   9300....           STS     (TData + 1528), R16
   \   00000300   9100....           LDS     R16, (TData + 1528)
   \   00000304   300F               CPI     R16, 15
   \   00000306   F0D8               BRCS    ??ExtRS485Ctl_21
    146                                          TData.RS4.EEPROMADChannel[0] = 0;
   \   00000308   E000               LDI     R16, 0
   \   0000030A   9300....           STS     (TData + 1528), R16
    147                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   0000030E   9100....           LDS     R16, (TData + 1530)
   \   00000312   9503               INC     R16
   \   00000314   9300....           STS     (TData + 1530), R16
   \   00000318   9100....           LDS     R16, (TData + 1530)
   \   0000031C   3004               CPI     R16, 4
   \   0000031E   F078               BRCS    ??ExtRS485Ctl_21
    148                                              TData.RS4.EEPROMPortpair[0] = 0;
   \   00000320   E000               LDI     R16, 0
   \   00000322   9300....           STS     (TData + 1530), R16
   \   00000326   C00B               RJMP    ??ExtRS485Ctl_21
    149                                          }
    150                                      }
    151                                  } else if (AskMD[0] == true) {
   \                     ??ExtRS485Ctl_36:
   \   00000328   3081               CPI     R24, 1
   \   0000032A   F449               BRNE    ??ExtRS485Ctl_21
    152                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
   \   0000032C   E000               LDI     R16, 0
   \   0000032E   ........           CALL    Uart_BuildReqM16552
   \   00000332   C005               RJMP    ??ExtRS485Ctl_21
    153                                  }
    154                              } else if (AskMD[0] == true) {
   \                     ??ExtRS485Ctl_35:
   \   00000334   3081               CPI     R24, 1
   \   00000336   F419               BRNE    ??ExtRS485Ctl_21
    155                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
   \   00000338   E000               LDI     R16, 0
   \   0000033A   ........           CALL    Uart_BuildReqM16552
    156                              }
    157                              break;
    158                          }
    159                          Uart_BuildTail16552(0);
   \                     ??ExtRS485Ctl_21:
   \   0000033E   E000               LDI     R16, 0
   \   00000340   ........           CALL    Uart_BuildTail16552
   \   00000344   C012               RJMP    ??ExtRS485Ctl_37
    160                      } else {
    161                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
   \                     ??ExtRS485Ctl_17:
   \   00000346   9100....           LDS     R16, (TData + 1530)
   \   0000034A   9110....           LDS     R17, PortPair
   \   0000034E   1701               CP      R16, R17
   \   00000350   F461               BRNE    ??ExtRS485Ctl_37
    162                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
   \   00000352   9100....           LDS     R16, (TData + 1530)
   \   00000356   9503               INC     R16
   \   00000358   9300....           STS     (TData + 1530), R16
   \   0000035C   9100....           LDS     R16, (TData + 1530)
   \   00000360   3004               CPI     R16, 4
   \   00000362   F018               BRCS    ??ExtRS485Ctl_37
    163                                  TData.RS4.EEPROMPortpair[0] = 0;
   \   00000364   E000               LDI     R16, 0
   \   00000366   9300....           STS     (TData + 1530), R16
    164                              }
    165                          }
    166                      }
    167                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Ctl_37:
   \   0000036A   9100....           LDS     R16, TData
   \   0000036E   E010               LDI     R17, 0
   \   00000370   9140....           LDS     R20, PortPair
   \   00000374   5F4C               SUBI    R20, 252
   \   00000376   ........           CALL    ?SS_SHR_L02
   \   0000037A   7001               ANDI    R16, 0x01
   \   0000037C   2300               TST     R16
   \   0000037E   F409               BRNE    $+2+2
   \   00000380   C0C8               RJMP    ??ExtRS485Ctl_38
    168                          UART16552[1].TxFirst = 6;                       // Start at
   \   00000382   ....               LDI     R30, LOW(UART16552)
   \   00000384   ....               LDI     R31, (UART16552) >> 8
   \   00000386   E006               LDI     R16, 6
   \   00000388   E010               LDI     R17, 0
   \   0000038A   8F04               STD     Z+28, R16
   \   0000038C   8F15               STD     Z+29, R17
    169                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
   \   0000038E   9100....           LDS     R16, (TData + 2)
   \   00000392   E010               LDI     R17, 0
   \   00000394   9130....           LDS     R19, PortPair
   \   00000398   E022               LDI     R18, 2
   \   0000039A   9F32               MUL     R19, R18
   \   0000039C   2D40               MOV     R20, R0
   \   0000039E   ........           CALL    ?SS_SHR_L02
   \   000003A2   2E50               MOV     R5, R16
   \   000003A4   E003               LDI     R16, 3
   \   000003A6   2250               AND     R5, R16
    170                          switch (SnsType) {
   \   000003A8   2D05               MOV     R16, R5
   \   000003AA   5000               SUBI    R16, 0
   \   000003AC   F409               BRNE    $+2+2
   \   000003AE   C04F               RJMP    ??ExtRS485Ctl_39
   \   000003B0   950A               DEC     R16
   \   000003B2   F019               BREQ    ??ExtRS485Ctl_40
   \   000003B4   950A               DEC     R16
   \   000003B6   F151               BREQ    ??ExtRS485Ctl_41
   \   000003B8   C0A8               RJMP    ??ExtRS485Ctl_42
    171                          case 0x01:    //Water ingress??
    172                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_40:
   \   000003BA   2F0A               MOV     R16, R26
   \   000003BC   5000               SUBI    R16, 0
   \   000003BE   F019               BREQ    ??ExtRS485Ctl_43
   \   000003C0   5104               SUBI    R16, 20
   \   000003C2   F021               BREQ    ??ExtRS485Ctl_44
   \   000003C4   C020               RJMP    ??ExtRS485Ctl_45
    173                              case 0:
    174                                  Uart_BuildReqWISCardStatus(1);          //Card status
   \                     ??ExtRS485Ctl_43:
   \   000003C6   E001               LDI     R16, 1
   \   000003C8   ....               RCALL   Uart_BuildReqWISCardStatus
    175                                  break;
   \   000003CA   C09F               RJMP    ??ExtRS485Ctl_42
    176                              case 20:
    177                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \                     ??ExtRS485Ctl_44:
   \   000003CC   9100....           LDS     R16, (TData + 1478)
   \   000003D0   2300               TST     R16
   \   000003D2   F4B1               BRNE    ??ExtRS485Ctl_46
   \   000003D4   9100....           LDS     R16, (TData + 1531)
   \   000003D8   9110....           LDS     R17, PortPair
   \   000003DC   1701               CP      R16, R17
   \   000003DE   F481               BRNE    ??ExtRS485Ctl_46
    178                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
   \   000003E0   E713               LDI     R17, 115
   \   000003E2   E001               LDI     R16, 1
   \   000003E4   ....               RCALL   Uart_BuildReqWISXData
    179                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   000003E6   9100....           LDS     R16, (TData + 1531)
   \   000003EA   9503               INC     R16
   \   000003EC   9300....           STS     (TData + 1531), R16
   \   000003F0   9100....           LDS     R16, (TData + 1531)
   \   000003F4   3004               CPI     R16, 4
   \   000003F6   F048               BRCS    ??ExtRS485Ctl_47
    180                                          TData.RS4.EEPROMPortpair[1] = 0;
   \   000003F8   E000               LDI     R16, 0
   \   000003FA   9300....           STS     (TData + 1531), R16
   \   000003FE   C085               RJMP    ??ExtRS485Ctl_42
    181                                      }
    182                                  } else {
    183                                      Uart_BuildReqWISData(1);                //WIS data
   \                     ??ExtRS485Ctl_46:
   \   00000400   E001               LDI     R16, 1
   \   00000402   ....               RCALL   Uart_BuildReqWISData
    184                                  }
    185                                  break;
   \   00000404   C082               RJMP    ??ExtRS485Ctl_42
    186                              default:
    187                                  Uart_BuildReqWISData(1);                //WIS data
   \                     ??ExtRS485Ctl_45:
   \   00000406   E001               LDI     R16, 1
   \   00000408   ....               RCALL   Uart_BuildReqWISData
    188                                  break;
    189                              }
    190                              break;
   \                     ??ExtRS485Ctl_47:
   \   0000040A   C07F               RJMP    ??ExtRS485Ctl_42
    191                          case 0x02:    // Radar??
    192                              switch (SeqCnt) {
   \                     ??ExtRS485Ctl_41:
   \   0000040C   2F0A               MOV     R16, R26
   \   0000040E   5000               SUBI    R16, 0
   \   00000410   F0D9               BREQ    ??ExtRS485Ctl_48
   \   00000412   5104               SUBI    R16, 20
   \   00000414   F4B1               BRNE    ??ExtRS485Ctl_49
    193                              case 20:
    194                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \   00000416   9100....           LDS     R16, (TData + 1478)
   \   0000041A   2300               TST     R16
   \   0000041C   F491               BRNE    ??ExtRS485Ctl_49
   \   0000041E   9100....           LDS     R16, (TData + 1531)
   \   00000422   9110....           LDS     R17, PortPair
   \   00000426   1701               CP      R16, R17
   \   00000428   F461               BRNE    ??ExtRS485Ctl_49
    195                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   0000042A   9100....           LDS     R16, (TData + 1531)
   \   0000042E   9503               INC     R16
   \   00000430   9300....           STS     (TData + 1531), R16
   \   00000434   9100....           LDS     R16, (TData + 1531)
   \   00000438   3004               CPI     R16, 4
   \   0000043A   F018               BRCS    ??ExtRS485Ctl_49
    196                                          TData.RS4.EEPROMPortpair[1] = 0;
   \   0000043C   E000               LDI     R16, 0
   \   0000043E   9300....           STS     (TData + 1531), R16
    197                                      }
    198                                  }
    199                                  // Fall through and send the request
    200                              default:
    201                                  Uart_BuildReqRadarData(1);          // Radar data
   \                     ??ExtRS485Ctl_49:
   \   00000442   E001               LDI     R16, 1
   \   00000444   ....               RCALL   Uart_BuildReqRadarData
    202                                  break;
   \   00000446   C061               RJMP    ??ExtRS485Ctl_42
    203                              case 0:
    204                                  Uart_BuildReqRadarInfo(1);          //Radar Information
   \                     ??ExtRS485Ctl_48:
   \   00000448   E001               LDI     R16, 1
   \   0000044A   ....               RCALL   Uart_BuildReqRadarInfo
    205                                  break;
    206                              }
    207                              break;
   \   0000044C   C05E               RJMP    ??ExtRS485Ctl_42
    208                          case 0x00:  // AN-SGCNV
    209                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    210                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
   \                     ??ExtRS485Ctl_39:
   \   0000044E   9100....           LDS     R16, (TData + 1348)
   \   00000452   3001               CPI     R16, 1
   \   00000454   F489               BRNE    ??ExtRS485Ctl_50
   \   00000456   9100....           LDS     R16, (TData + 1349)
   \   0000045A   E010               LDI     R17, 0
   \   0000045C   91E0....           LDS     R30, PortPair
   \   00000460   E0F0               LDI     R31, 0
   \   00000462   9634               ADIW    R31:R30, 4
   \   00000464   170E               CP      R16, R30
   \   00000466   071F               CPC     R17, R31
   \   00000468   F439               BRNE    ??ExtRS485Ctl_50
    211                                  Uart_BuildSndData(1);                       // add data to AD card package
   \   0000046A   E001               LDI     R16, 1
   \   0000046C   ....               RCALL   Uart_BuildSndData
    212                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
   \   0000046E   E001               LDI     R16, 1
   \   00000470   ....               RCALL   Uart_BuildReqConfig
    213                                  AskMD[1] = false;
   \   00000472   E000               LDI     R16, 0
   \   00000474   2F90               MOV     R25, R16
   \   00000476   C002               RJMP    ??ExtRS485Ctl_51
    214                              } else {
    215                                  AskMD[1] = true;
   \                     ??ExtRS485Ctl_50:
   \   00000478   E001               LDI     R16, 1
   \   0000047A   2F90               MOV     R25, R16
    216                              }
    217                              if (SeqCnt == 0) {
   \                     ??ExtRS485Ctl_51:
   \   0000047C   23AA               TST     R26
   \   0000047E   F419               BRNE    ??ExtRS485Ctl_52
    218                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
   \   00000480   E001               LDI     R16, 1
   \   00000482   ....               RCALL   Uart_BuildReqCardStatus
   \   00000484   C042               RJMP    ??ExtRS485Ctl_42
    219                              } else if (SeqCnt == 5) {
   \                     ??ExtRS485Ctl_52:
   \   00000486   30A5               CPI     R26, 5
   \   00000488   F419               BRNE    ??ExtRS485Ctl_53
    220                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
   \   0000048A   E001               LDI     R16, 1
   \   0000048C   ....               RCALL   Uart_BuildReqR16552
   \   0000048E   C03D               RJMP    ??ExtRS485Ctl_42
    221                              } else if (SeqCnt == 10) {
   \                     ??ExtRS485Ctl_53:
   \   00000490   30AA               CPI     R26, 10
   \   00000492   F419               BRNE    ??ExtRS485Ctl_54
    222                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
   \   00000494   E001               LDI     R16, 1
   \   00000496   ....               RCALL   Uart_BuildReqConfig
   \   00000498   C038               RJMP    ??ExtRS485Ctl_42
    223                              } else if (SeqCnt == 15) {
   \                     ??ExtRS485Ctl_54:
   \   0000049A   30AF               CPI     R26, 15
   \   0000049C   F419               BRNE    ??ExtRS485Ctl_55
    224                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
   \   0000049E   E001               LDI     R16, 1
   \   000004A0   ....               RCALL   Uart_BuildReqC16552
   \   000004A2   C033               RJMP    ??ExtRS485Ctl_42
    225                              } else if (SeqCnt == 20) {
   \                     ??ExtRS485Ctl_55:
   \   000004A4   31A4               CPI     R26, 20
   \   000004A6   F561               BRNE    ??ExtRS485Ctl_56
    226                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \   000004A8   9100....           LDS     R16, (TData + 1478)
   \   000004AC   2300               TST     R16
   \   000004AE   F511               BRNE    ??ExtRS485Ctl_57
   \   000004B0   9100....           LDS     R16, (TData + 1531)
   \   000004B4   9110....           LDS     R17, PortPair
   \   000004B8   1701               CP      R16, R17
   \   000004BA   F4E1               BRNE    ??ExtRS485Ctl_57
    227                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
   \   000004BC   E001               LDI     R16, 1
   \   000004BE   ........           CALL    Uart_BuildReqEEPROMData
    228                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
   \   000004C2   9100....           LDS     R16, (TData + 1529)
   \   000004C6   5F0E               SUBI    R16, 254
   \   000004C8   9300....           STS     (TData + 1529), R16
   \   000004CC   9100....           LDS     R16, (TData + 1529)
   \   000004D0   300F               CPI     R16, 15
   \   000004D2   F0D8               BRCS    ??ExtRS485Ctl_42
    229                                          TData.RS4.EEPROMADChannel[1] = 0;
   \   000004D4   E000               LDI     R16, 0
   \   000004D6   9300....           STS     (TData + 1529), R16
    230                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   000004DA   9100....           LDS     R16, (TData + 1531)
   \   000004DE   9503               INC     R16
   \   000004E0   9300....           STS     (TData + 1531), R16
   \   000004E4   9100....           LDS     R16, (TData + 1531)
   \   000004E8   3004               CPI     R16, 4
   \   000004EA   F078               BRCS    ??ExtRS485Ctl_42
    231                                              TData.RS4.EEPROMPortpair[1] = 0;
   \   000004EC   E000               LDI     R16, 0
   \   000004EE   9300....           STS     (TData + 1531), R16
   \   000004F2   C00B               RJMP    ??ExtRS485Ctl_42
    232                                          }
    233                                      }
    234                                  } else if (AskMD[1] == true) {
   \                     ??ExtRS485Ctl_57:
   \   000004F4   3091               CPI     R25, 1
   \   000004F6   F449               BRNE    ??ExtRS485Ctl_42
    235                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
   \   000004F8   E001               LDI     R16, 1
   \   000004FA   ........           CALL    Uart_BuildReqM16552
   \   000004FE   C005               RJMP    ??ExtRS485Ctl_42
    236                                  }
    237                              } else if (AskMD[1] == true) {
   \                     ??ExtRS485Ctl_56:
   \   00000500   3091               CPI     R25, 1
   \   00000502   F419               BRNE    ??ExtRS485Ctl_42
    238                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
   \   00000504   E001               LDI     R16, 1
   \   00000506   ........           CALL    Uart_BuildReqM16552
    239                              }
    240                              break;
    241                          }
    242                          Uart_BuildTail16552(1);
   \                     ??ExtRS485Ctl_42:
   \   0000050A   E001               LDI     R16, 1
   \   0000050C   ........           CALL    Uart_BuildTail16552
   \   00000510   C012               RJMP    ??ExtRS485Ctl_58
    243                      } else {
    244                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
   \                     ??ExtRS485Ctl_38:
   \   00000512   9100....           LDS     R16, (TData + 1531)
   \   00000516   9110....           LDS     R17, PortPair
   \   0000051A   1701               CP      R16, R17
   \   0000051C   F461               BRNE    ??ExtRS485Ctl_58
    245                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
   \   0000051E   9100....           LDS     R16, (TData + 1531)
   \   00000522   9503               INC     R16
   \   00000524   9300....           STS     (TData + 1531), R16
   \   00000528   9100....           LDS     R16, (TData + 1531)
   \   0000052C   3004               CPI     R16, 4
   \   0000052E   F018               BRCS    ??ExtRS485Ctl_58
    246                                  TData.RS4.EEPROMPortpair[1] = 0;
   \   00000530   E000               LDI     R16, 0
   \   00000532   9300....           STS     (TData + 1531), R16
    247                              }
    248                          }
    249                      }
    250                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
   \                     ??ExtRS485Ctl_58:
   \   00000536   EE28               LDI     R18, 232
   \   00000538   E033               LDI     R19, 3
   \   0000053A   E001               LDI     R16, 1
   \   0000053C   ........           CALL    OS_WaitEventTimed
   \   00000540   2E40               MOV     R4, R16
    251                      if (EventStatus & 0x02) {
   \   00000542   FA41               BST     R4, 1
   \   00000544   F41E               BRTC    ??ExtRS485Ctl_59
    252                          if (PowerOnTimer >= POWER_ON_CNT) {
   \   00000546   30B5               CPI     R27, 5
   \   00000548   F008               BRCS    ??ExtRS485Ctl_59
    253                              PowerOnTimer = 0;                              // and start over again
   \   0000054A   E0B0               LDI     R27, 0
    254                          }
    255                      }
    256                  }
   \                     ??ExtRS485Ctl_59:
   \   0000054C   9100....           LDS     R16, PortPair
   \   00000550   9503               INC     R16
   \   00000552   9300....           STS     PortPair, R16
   \   00000556   CDC0               RJMP    ??ExtRS485Ctl_6
    257                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_7:
   \   00000558   95A3               INC     R26
   \   0000055A   31A5               CPI     R26, 21
   \   0000055C   F408               BRCC    $+2+2
   \   0000055E   CDB9               RJMP    ??ExtRS485Ctl_5
    258                      SeqCnt = 0;
   \   00000560   E0A0               LDI     R26, 0
   \   00000562   CDB7               RJMP    ??ExtRS485Ctl_5
   \   00000564                      REQUIRE _A_PORTC
   \   00000564                      REQUIRE _A_PORTE
    259                  }
    260              }
    261          }
    262          
    263          
    264          /*************************************************************************
    265          *   (This is a task)
    266          *  Usart handler UART receive data
    267          *
    268          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    269          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    270          
    271              char portresp;
    272          
    273              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   00000004   E900               LDI     R16, 144
   \   00000006   E11A               LDI     R17, 26
   \   00000008   ........           CALL    OS_Delay
    274          
    275              while (1) {
    276                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
   \                     ??ExtRS485Rec_0:
   \   0000000C   EF03               LDI     R16, 243
   \   0000000E   E011               LDI     R17, 1
   \   00000010   ........           CALL    OS_Delay
    277                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
   \   00000014   E021               LDI     R18, 1
   \   00000016   E030               LDI     R19, 0
   \   00000018   E003               LDI     R16, 3
   \   0000001A   ........           CALL    OS_WaitEventTimed
   \   0000001E   2F80               MOV     R24, R16
    278                  if (portresp & 0x01) {                  // answer on ch 0
   \   00000020   FB80               BST     R24, 0
   \   00000022   F4EE               BRTC    ??ExtRS485Rec_1
    279                      Usart16552CheckPackage(0);         // handle incomming package
   \   00000024   E000               LDI     R16, 0
   \   00000026   ....               RCALL   Usart16552CheckPackage
    280                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
   \   00000028   9100....           LDS     R16, PortPair
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   0F00               LSL     R16
   \   00000030   1F11               ROL     R17
   \   00000032   0F00               LSL     R16
   \   00000034   1F11               ROL     R17
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   8703               STD     Z+11, R16
   \   00000040   E000               LDI     R16, 0
   \   00000042   8704               STD     Z+12, R16
    281                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
   \   00000044   9100....           LDS     R16, PortPair
   \   00000048   E010               LDI     R17, 0
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000050   8103               LDD     R16, Z+3
   \   00000052   7F0E               ANDI    R16, 0xFE
   \   00000054   8303               STD     Z+3, R16
    282                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
   \   00000056   E000               LDI     R16, 0
   \   00000058   9300....           STS     (UART16552 + 24), R16
   \   0000005C   C085               RJMP    ??ExtRS485Rec_2
    283                  } else {
    284                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   0000005E   9100....           LDS     R16, (UART16552 + 24)
   \   00000062   9503               INC     R16
   \   00000064   9300....           STS     (UART16552 + 24), R16
    285                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
   \   00000068   9100....           LDS     R16, PortPair
   \   0000006C   E010               LDI     R17, 0
   \   0000006E   0F00               LSL     R16
   \   00000070   1F11               ROL     R17
   \   00000072   0F00               LSL     R16
   \   00000074   1F11               ROL     R17
   \   00000076   01F8               MOVW    R31:R30, R17:R16
   \   00000078   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007C   8505               LDD     R16, Z+13
   \   0000007E   8516               LDD     R17, Z+14
   \   00000080   5F0F               SUBI    R16, 255
   \   00000082   4F1F               SBCI    R17, 255
   \   00000084   8705               STD     Z+13, R16
   \   00000086   8716               STD     Z+14, R17
    286                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
   \   00000088   9100....           LDS     R16, PortPair
   \   0000008C   2F20               MOV     R18, R16
   \   0000008E   E030               LDI     R19, 0
   \   00000090   0F22               LSL     R18
   \   00000092   1F33               ROL     R19
   \   00000094   0F22               LSL     R18
   \   00000096   1F33               ROL     R19
   \   00000098   01F9               MOVW    R31:R30, R19:R18
   \   0000009A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000009E   85A3               LDD     R26, Z+11
   \   000000A0   85B4               LDD     R27, Z+12
   \   000000A2   019D               MOVW    R19:R18, R27:R26
   \   000000A4   5F2F               SUBI    R18, 255
   \   000000A6   4F3F               SBCI    R19, 255
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   0F00               LSL     R16
   \   000000AC   1F11               ROL     R17
   \   000000AE   0F00               LSL     R16
   \   000000B0   1F11               ROL     R17
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B8   8723               STD     Z+11, R18
   \   000000BA   8734               STD     Z+12, R19
   \   000000BC   9716               SBIW    R27:R26, 6
   \   000000BE   F048               BRCS    ??ExtRS485Rec_3
    287                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
   \   000000C0   9100....           LDS     R16, PortPair
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000CC   8103               LDD     R16, Z+3
   \   000000CE   6001               ORI     R16, 0x01
   \   000000D0   8303               STD     Z+3, R16
    288                      }
    289                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
   \                     ??ExtRS485Rec_3:
   \   000000D2   9100....           LDS     R16, TData
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   9140....           LDS     R20, PortPair
   \   000000DC   ........           CALL    ?SS_SHR_L02
   \   000000E0   7001               ANDI    R16, 0x01
   \   000000E2   2300               TST     R16
   \   000000E4   F409               BRNE    $+2+2
   \   000000E6   C040               RJMP    ??ExtRS485Rec_2
    290                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   000000E8   9100....           LDS     R16, PortPair
   \   000000EC   E010               LDI     R17, 0
   \   000000EE   0F00               LSL     R16
   \   000000F0   1F11               ROL     R17
   \   000000F2   0F00               LSL     R16
   \   000000F4   1F11               ROL     R17
   \   000000F6   01F8               MOVW    R31:R30, R17:R16
   \   000000F8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000FA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000FC   8503               LDD     R16, Z+11
   \   000000FE   8514               LDD     R17, Z+12
   \   00000100   7007               ANDI    R16, 0x07
   \   00000102   3004               CPI     R16, 4
   \   00000104   F589               BRNE    ??ExtRS485Rec_2
    291                              ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
   \   00000106   9100....           LDS     R16, (OS_Counters + 1)
   \   0000010A   7F00               ANDI    R16, 0xF0
   \   0000010C   2300               TST     R16
   \   0000010E   F021               BREQ    ??ExtRS485Rec_4
   \   00000110   E909               LDI     R16, 153
   \   00000112   E010               LDI     R17, 0
   \   00000114   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_4:
   \   00000118   94F8               CLI
   \   0000011A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000011E   9503               INC     R16
   \   00000120   9300....           STS     (OS_Counters + 1), R16
   \   00000124   9140....           LDS     R20, PortPair
   \   00000128   E001               LDI     R16, 1
   \   0000012A   E010               LDI     R17, 0
   \   0000012C   ........           CALL    ?S_SHL_L02
   \   00000130   9500               COM     R16
   \   00000132   B118               IN      R17, 0x08
   \   00000134   2310               AND     R17, R16
   \   00000136   B918               OUT     0x08, R17
   \   00000138   9100....           LDS     R16, (OS_Counters + 1)
   \   0000013C   7F00               ANDI    R16, 0xF0
   \   0000013E   2300               TST     R16
   \   00000140   F021               BREQ    ??ExtRS485Rec_5
   \   00000142   E909               LDI     R16, 153
   \   00000144   E010               LDI     R17, 0
   \   00000146   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_5:
   \   0000014A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000014E   950A               DEC     R16
   \   00000150   9300....           STS     (OS_Counters + 1), R16
   \   00000154   9100....           LDS     R16, (OS_Counters + 1)
   \   00000158   2300               TST     R16
   \   0000015A   F409               BRNE    ??ExtRS485Rec_6
   \   0000015C   9478               SEI
    292                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_6:
   \   0000015E   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000160   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000162   E002               LDI     R16, 2
   \   00000164   ........           CALL    OS_SignalEvent
    293                          }
    294                      }
    295                  }
    296                  if (portresp & 0x02) {                  // answer on ch 1
   \                     ??ExtRS485Rec_2:
   \   00000168   FB81               BST     R24, 1
   \   0000016A   F4EE               BRTC    ??ExtRS485Rec_7
    297                      Usart16552CheckPackage(1);         // handle incomming package
   \   0000016C   E001               LDI     R16, 1
   \   0000016E   ....               RCALL   Usart16552CheckPackage
    298                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
   \   00000170   9100....           LDS     R16, PortPair
   \   00000174   E010               LDI     R17, 0
   \   00000176   0F00               LSL     R16
   \   00000178   1F11               ROL     R17
   \   0000017A   0F00               LSL     R16
   \   0000017C   1F11               ROL     R17
   \   0000017E   01F8               MOVW    R31:R30, R17:R16
   \   00000180   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000182   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000184   E000               LDI     R16, 0
   \   00000186   8F03               STD     Z+27, R16
   \   00000188   E000               LDI     R16, 0
   \   0000018A   8F04               STD     Z+28, R16
    299                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
   \   0000018C   9100....           LDS     R16, PortPair
   \   00000190   E010               LDI     R17, 0
   \   00000192   01F8               MOVW    R31:R30, R17:R16
   \   00000194   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000196   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000198   8107               LDD     R16, Z+7
   \   0000019A   7F0E               ANDI    R16, 0xFE
   \   0000019C   8307               STD     Z+7, R16
    300                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
   \   0000019E   E000               LDI     R16, 0
   \   000001A0   9300....           STS     (UART16552 + 50), R16
   \   000001A4   C087               RJMP    ??ExtRS485Rec_8
    301                  } else {
    302                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_7:
   \   000001A6   9100....           LDS     R16, (UART16552 + 50)
   \   000001AA   9503               INC     R16
   \   000001AC   9300....           STS     (UART16552 + 50), R16
    303                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   000001B0   9100....           LDS     R16, PortPair
   \   000001B4   E010               LDI     R17, 0
   \   000001B6   0F00               LSL     R16
   \   000001B8   1F11               ROL     R17
   \   000001BA   0F00               LSL     R16
   \   000001BC   1F11               ROL     R17
   \   000001BE   01F8               MOVW    R31:R30, R17:R16
   \   000001C0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001C2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001C4   8D05               LDD     R16, Z+29
   \   000001C6   8D16               LDD     R17, Z+30
   \   000001C8   5F0F               SUBI    R16, 255
   \   000001CA   4F1F               SBCI    R17, 255
   \   000001CC   8F05               STD     Z+29, R16
   \   000001CE   8F16               STD     Z+30, R17
    304                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   000001D0   9100....           LDS     R16, PortPair
   \   000001D4   2F20               MOV     R18, R16
   \   000001D6   E030               LDI     R19, 0
   \   000001D8   0F22               LSL     R18
   \   000001DA   1F33               ROL     R19
   \   000001DC   0F22               LSL     R18
   \   000001DE   1F33               ROL     R19
   \   000001E0   01F9               MOVW    R31:R30, R19:R18
   \   000001E2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001E4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001E6   8DA3               LDD     R26, Z+27
   \   000001E8   8DB4               LDD     R27, Z+28
   \   000001EA   019D               MOVW    R19:R18, R27:R26
   \   000001EC   5F2F               SUBI    R18, 255
   \   000001EE   4F3F               SBCI    R19, 255
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   0F00               LSL     R16
   \   000001F4   1F11               ROL     R17
   \   000001F6   0F00               LSL     R16
   \   000001F8   1F11               ROL     R17
   \   000001FA   01F8               MOVW    R31:R30, R17:R16
   \   000001FC   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001FE   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000200   8F23               STD     Z+27, R18
   \   00000202   8F34               STD     Z+28, R19
   \   00000204   9716               SBIW    R27:R26, 6
   \   00000206   F048               BRCS    ??ExtRS485Rec_9
    305                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   00000208   9100....           LDS     R16, PortPair
   \   0000020C   E010               LDI     R17, 0
   \   0000020E   01F8               MOVW    R31:R30, R17:R16
   \   00000210   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000212   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000214   8107               LDD     R16, Z+7
   \   00000216   6001               ORI     R16, 0x01
   \   00000218   8307               STD     Z+7, R16
    306                      }
    307                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_9:
   \   0000021A   9100....           LDS     R16, TData
   \   0000021E   E010               LDI     R17, 0
   \   00000220   9140....           LDS     R20, PortPair
   \   00000224   5F4C               SUBI    R20, 252
   \   00000226   ........           CALL    ?SS_SHR_L02
   \   0000022A   7001               ANDI    R16, 0x01
   \   0000022C   2300               TST     R16
   \   0000022E   F409               BRNE    $+2+2
   \   00000230   C041               RJMP    ??ExtRS485Rec_8
    308                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   00000232   9100....           LDS     R16, PortPair
   \   00000236   E010               LDI     R17, 0
   \   00000238   0F00               LSL     R16
   \   0000023A   1F11               ROL     R17
   \   0000023C   0F00               LSL     R16
   \   0000023E   1F11               ROL     R17
   \   00000240   01F8               MOVW    R31:R30, R17:R16
   \   00000242   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000244   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000246   8D03               LDD     R16, Z+27
   \   00000248   8D14               LDD     R17, Z+28
   \   0000024A   7007               ANDI    R16, 0x07
   \   0000024C   3004               CPI     R16, 4
   \   0000024E   F591               BRNE    ??ExtRS485Rec_8
    309                              ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
   \   00000250   9100....           LDS     R16, (OS_Counters + 1)
   \   00000254   7F00               ANDI    R16, 0xF0
   \   00000256   2300               TST     R16
   \   00000258   F021               BREQ    ??ExtRS485Rec_10
   \   0000025A   E909               LDI     R16, 153
   \   0000025C   E010               LDI     R17, 0
   \   0000025E   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_10:
   \   00000262   94F8               CLI
   \   00000264   9100....           LDS     R16, (OS_Counters + 1)
   \   00000268   9503               INC     R16
   \   0000026A   9300....           STS     (OS_Counters + 1), R16
   \   0000026E   9140....           LDS     R20, PortPair
   \   00000272   5F4C               SUBI    R20, 252
   \   00000274   E001               LDI     R16, 1
   \   00000276   E010               LDI     R17, 0
   \   00000278   ........           CALL    ?S_SHL_L02
   \   0000027C   9500               COM     R16
   \   0000027E   B118               IN      R17, 0x08
   \   00000280   2310               AND     R17, R16
   \   00000282   B918               OUT     0x08, R17
   \   00000284   9100....           LDS     R16, (OS_Counters + 1)
   \   00000288   7F00               ANDI    R16, 0xF0
   \   0000028A   2300               TST     R16
   \   0000028C   F021               BREQ    ??ExtRS485Rec_11
   \   0000028E   E909               LDI     R16, 153
   \   00000290   E010               LDI     R17, 0
   \   00000292   ........           CALL    OS_Error
   \                     ??ExtRS485Rec_11:
   \   00000296   9100....           LDS     R16, (OS_Counters + 1)
   \   0000029A   950A               DEC     R16
   \   0000029C   9300....           STS     (OS_Counters + 1), R16
   \   000002A0   9100....           LDS     R16, (OS_Counters + 1)
   \   000002A4   2300               TST     R16
   \   000002A6   F409               BRNE    ??ExtRS485Rec_12
   \   000002A8   9478               SEI
    310                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_12:
   \   000002AA   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000002AC   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000002AE   E002               LDI     R16, 2
   \   000002B0   ........           CALL    OS_SignalEvent
    311                          }
    312                      }
    313                  }
    314                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_8:
   \   000002B4   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000002B6   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000002B8   E001               LDI     R16, 1
   \   000002BA   ........           CALL    OS_SignalEvent
   \   000002BE   CEA6               RJMP    ??ExtRS485Rec_0
   \   000002C0                      REQUIRE _A_PORTC
    315              }
    316          }
    317          
    318          /*************************************************************************
    319          *
    320          *  Set ports on or off
    321          *
    322          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    323          void SetRS4Port(void) {
   \                     SetRS4Port:
    324          
    325              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   B908               OUT     0x08, R16
    326          
    327          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    328          
    329          /*************************************************************************
    330          *
    331          *  Check the incoming packages from AN_SGCNV / WIS
    332          *
    333          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    334          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    335          
    336              unsigned short pointer;
    337              char count_out, more;
    338          
    339              count_out = MAX_PROT_CMD;                  // max command
   \   00000006   EFBF               LDI     R27, 255
    340              more = true;
   \   00000008   E0A1               LDI     R26, 1
    341              pointer = 4;
   \   0000000A   E084               LDI     R24, 4
   \   0000000C   E090               LDI     R25, 0
    342              do {
    343                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   0000000E   019C               MOVW    R19:R18, R25:R24
   \   00000010   2D04               MOV     R16, R4
   \   00000012   ....               RCALL   CheckActionUart16552
   \   00000014   2300               TST     R16
   \   00000016   F409               BRNE    ??Usart16552CheckPackage_1
    344                      more = false;                          // terminate while loop
   \   00000018   E0A0               LDI     R26, 0
    345                  }
    346                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   0000001A   2D04               MOV     R16, R4
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   E14A               LDI     R20, 26
   \   00000020   E050               LDI     R21, 0
   \   00000022   ........           CALL    ?S_EC_MUL_L02
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002C   8502               LDD     R16, Z+10
   \   0000002E   8513               LDD     R17, Z+11
   \   00000030   0F08               ADD     R16, R24
   \   00000032   1F19               ADC     R17, R25
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   8101               LDD     R16, Z+1
   \   00000038   2FE0               MOV     R30, R16
   \   0000003A   E0F0               LDI     R31, 0
   \   0000003C   9632               ADIW    R31:R30, 2
   \   0000003E   0F8E               ADD     R24, R30
   \   00000040   1F9F               ADC     R25, R31
    347                  if (!--count_out) {
   \   00000042   95BA               DEC     R27
   \   00000044   23BB               TST     R27
   \   00000046   F409               BRNE    ??Usart16552CheckPackage_2
    348                      more = false;
   \   00000048   E0A0               LDI     R26, 0
    349                  }
    350              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \                     ??Usart16552CheckPackage_2:
   \   0000004A   23AA               TST     R26
   \   0000004C   F081               BREQ    ??Usart16552CheckPackage_3
   \   0000004E   2D04               MOV     R16, R4
   \   00000050   E010               LDI     R17, 0
   \   00000052   E14A               LDI     R20, 26
   \   00000054   E050               LDI     R21, 0
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000060   8906               LDD     R16, Z+22
   \   00000062   8917               LDD     R17, Z+23
   \   00000064   5003               SUBI    R16, 3
   \   00000066   4010               SBCI    R17, 0
   \   00000068   1780               CP      R24, R16
   \   0000006A   0791               CPC     R25, R17
   \   0000006C   F280               BRCS    ??Usart16552CheckPackage_0
    351              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_3:
   \   0000006E   2D04               MOV     R16, R4
   \   00000070   ........           CALL    GoToSyncUART16552
    352          }
   \   00000074   E0E5               LDI     R30, 5
   \   00000076   ........           JMP     ?EPILOGUE_B5_L09
    353          
    354          /*************************************************************************
    355          *
    356          *  Check action on received data from AN_SGCNV
    357          *
    358          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    359          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    360          
    361              char retval = true;
   \   00000008   E0B1               LDI     R27, 1
    362          
    363              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   0000000A   2F0A               MOV     R16, R26
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8502               LDD     R16, Z+10
   \   0000001E   8513               LDD     R17, Z+11
   \   00000020   0F08               ADD     R16, R24
   \   00000022   1F19               ADC     R17, R25
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8100               LD      R16, Z
   \   00000028   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart16552>_0`)
   \   0000002A   ....               LDI     R31, (`?<Jumptable for CheckActionUart16552>_0`) >> 16
   \   0000002C   BFFB               OUT     0x3B, R31
   \   0000002E   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000030   ........           JMP     ?CV_SWITCH_L06
    364          
    365              case ANP1_REP_MP_DATA :                              // Measured pressure data
    366              case ANP1_REP_MT_DATA :                              // Measured temperature data
    367              case ANP1_REP_MO_DATA :                              // Measured "other" data
    368                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_0:
   \   00000034   019C               MOVW    R19:R18, R25:R24
   \   00000036   5F2E               SUBI    R18, 254
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   2F0A               MOV     R16, R26
   \   0000003C   ....               RCALL   ReceivePTOData
    369                  break;
   \   0000003E   C043               RJMP    ??CheckActionUart16552_1
    370              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    371                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_2:
   \   00000040   019C               MOVW    R19:R18, R25:R24
   \   00000042   5F2E               SUBI    R18, 254
   \   00000044   4F3F               SBCI    R19, 255
   \   00000046   2F0A               MOV     R16, R26
   \   00000048   ....               RCALL   ReceiveWHData
    372                  break;
   \   0000004A   C03D               RJMP    ??CheckActionUart16552_1
    373              case ANP1_REP_RP_DATA :                              // Raw pressure data
    374              case ANP1_REP_RT_DATA :                              // Raw temp. data
    375              case ANP1_REP_RO_DATA :                              // Raw "other" data
    376                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_3:
   \   0000004C   019C               MOVW    R19:R18, R25:R24
   \   0000004E   5F2E               SUBI    R18, 254
   \   00000050   4F3F               SBCI    R19, 255
   \   00000052   2F0A               MOV     R16, R26
   \   00000054   ....               RCALL   ReceiveRData
    377                  break;
   \   00000056   C037               RJMP    ??CheckActionUart16552_1
    378              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    379                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_4:
   \   00000058   019C               MOVW    R19:R18, R25:R24
   \   0000005A   5F2E               SUBI    R18, 254
   \   0000005C   4F3F               SBCI    R19, 255
   \   0000005E   2F0A               MOV     R16, R26
   \   00000060   ....               RCALL   ReceiveCData
    380                  break;
   \   00000062   C031               RJMP    ??CheckActionUart16552_1
    381          
    382              case ANP1_REP_CARD_STAT :                             // card status package
    383                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_5:
   \   00000064   019C               MOVW    R19:R18, R25:R24
   \   00000066   5F2E               SUBI    R18, 254
   \   00000068   4F3F               SBCI    R19, 255
   \   0000006A   2F0A               MOV     R16, R26
   \   0000006C   ....               RCALL   ReceiveCardStatus
    384                  break;
   \   0000006E   C02B               RJMP    ??CheckActionUart16552_1
    385          
    386              case ANP1_REP_CONFIG :                             // config data
    387                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_6:
   \   00000070   019C               MOVW    R19:R18, R25:R24
   \   00000072   5F2E               SUBI    R18, 254
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   2F0A               MOV     R16, R26
   \   00000078   ....               RCALL   ReceiveConfigData
    388                  break;
   \   0000007A   C025               RJMP    ??CheckActionUart16552_1
    389          
    390              case ANP1_REP_EEP_DATA :                             // card eeprome
    391                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_7:
   \   0000007C   019C               MOVW    R19:R18, R25:R24
   \   0000007E   5F2E               SUBI    R18, 254
   \   00000080   4F3F               SBCI    R19, 255
   \   00000082   2F0A               MOV     R16, R26
   \   00000084   ....               RCALL   ReceiveCardEEPROMData
    392                  break;
   \   00000086   C01F               RJMP    ??CheckActionUart16552_1
    393          
    394              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    395                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_8:
   \   00000088   019C               MOVW    R19:R18, R25:R24
   \   0000008A   5F2E               SUBI    R18, 254
   \   0000008C   4F3F               SBCI    R19, 255
   \   0000008E   2F0A               MOV     R16, R26
   \   00000090   ....               RCALL   ReceiveWISStatus
    396                  break;
   \   00000092   C019               RJMP    ??CheckActionUart16552_1
    397          
    398              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    399                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_9:
   \   00000094   019C               MOVW    R19:R18, R25:R24
   \   00000096   5F2E               SUBI    R18, 254
   \   00000098   4F3F               SBCI    R19, 255
   \   0000009A   2F0A               MOV     R16, R26
   \   0000009C   ....               RCALL   ReceiveWISXData
    400                  break;
   \   0000009E   C013               RJMP    ??CheckActionUart16552_1
    401          
    402              case ANP1_REP_WIS_DATA :                             // Data from WIS
    403                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_10:
   \   000000A0   019C               MOVW    R19:R18, R25:R24
   \   000000A2   5F2E               SUBI    R18, 254
   \   000000A4   4F3F               SBCI    R19, 255
   \   000000A6   2F0A               MOV     R16, R26
   \   000000A8   ....               RCALL   ReceiveWISData
    404                  break;
   \   000000AA   C00D               RJMP    ??CheckActionUart16552_1
    405              case ANP1_REP_GODA_DATA:
    406                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_11:
   \   000000AC   019C               MOVW    R19:R18, R25:R24
   \   000000AE   5F2E               SUBI    R18, 254
   \   000000B0   4F3F               SBCI    R19, 255
   \   000000B2   2F0A               MOV     R16, R26
   \   000000B4   ....               RCALL   ReceiveRadarData
    407                  break;
   \   000000B6   C007               RJMP    ??CheckActionUart16552_1
    408              case ANP1_REP_GODA_INFO:
    409                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_12:
   \   000000B8   019C               MOVW    R19:R18, R25:R24
   \   000000BA   5F2E               SUBI    R18, 254
   \   000000BC   4F3F               SBCI    R19, 255
   \   000000BE   2F0A               MOV     R16, R26
   \   000000C0   ....               RCALL   ReceiveRadarInfo
    410                  break;
   \   000000C2   C001               RJMP    ??CheckActionUart16552_1
    411              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    412              case ANP1_ECMD_NMDWOACK :                         // No more data
    413                  retval = false;
   \                     ??CheckActionUart16552_13:
   \   000000C4   E0B0               LDI     R27, 0
    414                  break;
    415              }
    416              return retval;
   \                     ??CheckActionUart16552_1:
   \   000000C6   2F0B               MOV     R16, R27
   \   000000C8   E0E4               LDI     R30, 4
   \   000000CA   ........           JMP     ?EPILOGUE_B4_L09
    417          }
    418          
    419          /*************************************************************************
    420          *
    421          *  Receive card status from WIS
    422          *
    423          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    424          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   2F60               MOV     R22, R16
    425          
    426              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000002   9020....           LDS     R2, PortPair
   \   00000006   2F06               MOV     R16, R22
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8502               LDD     R16, Z+10
   \   0000001A   8513               LDD     R17, Z+11
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   8140               LD      R20, Z
   \   00000024   2F06               MOV     R16, R22
   \   00000026   E010               LDI     R17, 0
   \   00000028   0F00               LSL     R16
   \   0000002A   1F11               ROL     R17
   \   0000002C   0F00               LSL     R16
   \   0000002E   1F11               ROL     R17
   \   00000030   2433               CLR     R3
   \   00000032   0D02               ADD     R16, R2
   \   00000034   1D13               ADC     R17, R3
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003C   A503               LDD     R16, Z+43
   \   0000003E   2B04               OR      R16, R20
   \   00000040   A703               STD     Z+43, R16
    427              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000042   2F06               MOV     R16, R22
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14A               LDI     R20, 26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000054   8502               LDD     R16, Z+10
   \   00000056   8513               LDD     R17, Z+11
   \   00000058   0F02               ADD     R16, R18
   \   0000005A   1F13               ADC     R17, R19
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   8171               LDD     R23, Z+1
   \   00000060   2F06               MOV     R16, R22
   \   00000062   E010               LDI     R17, 0
   \   00000064   0F00               LSL     R16
   \   00000066   1F11               ROL     R17
   \   00000068   0F00               LSL     R16
   \   0000006A   1F11               ROL     R17
   \   0000006C   9140....           LDS     R20, PortPair
   \   00000070   E050               LDI     R21, 0
   \   00000072   0F04               ADD     R16, R20
   \   00000074   1F15               ADC     R17, R21
   \   00000076   01F8               MOVW    R31:R30, R17:R16
   \   00000078   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007C   AB73               STD     Z+51, R23
    428              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   0000007E   2F06               MOV     R16, R22
   \   00000080   E010               LDI     R17, 0
   \   00000082   E14A               LDI     R20, 26
   \   00000084   E050               LDI     R21, 0
   \   00000086   ........           CALL    ?S_EC_MUL_L02
   \   0000008A   01F8               MOVW    R31:R30, R17:R16
   \   0000008C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000090   8502               LDD     R16, Z+10
   \   00000092   8513               LDD     R17, Z+11
   \   00000094   0F02               ADD     R16, R18
   \   00000096   1F13               ADC     R17, R19
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   8104               LDD     R16, Z+4
   \   0000009C   2300               TST     R16
   \   0000009E   F089               BREQ    ??ReceiveWISStatus_0
    429                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   000000A0   9140....           LDS     R20, PortPair
   \   000000A4   2F06               MOV     R16, R22
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   0F00               LSL     R16
   \   000000AA   1F11               ROL     R17
   \   000000AC   0F00               LSL     R16
   \   000000AE   1F11               ROL     R17
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   0F04               ADD     R16, R20
   \   000000B4   1F15               ADC     R17, R21
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000BC   A903               LDD     R16, Z+51
   \   000000BE   6800               ORI     R16, 0x80
   \   000000C0   AB03               STD     Z+51, R16
    430              }
    431          }
   \                     ??ReceiveWISStatus_0:
   \   000000C2   9508               RET
    432          
    433          /*************************************************************************
    434          *
    435          *  Receive WIS protocol data
    436          *
    437          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    438          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    439          
    440              char i;
    441          
    442              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000008   011C               MOVW    R3:R2, R25:R24
   \   0000000A   01C1               MOVW    R25:R24, R3:R2
   \   0000000C   9601               ADIW    R25:R24, 1
   \   0000000E   2F06               MOV     R16, R22
   \   00000010   E010               LDI     R17, 0
   \   00000012   E14A               LDI     R20, 26
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000020   8502               LDD     R16, Z+10
   \   00000022   8513               LDD     R17, Z+11
   \   00000024   0D02               ADD     R16, R2
   \   00000026   1D13               ADC     R17, R3
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   8100               LD      R16, Z
   \   0000002C   3703               CPI     R16, 115
   \   0000002E   F5F1               BRNE    ??ReceiveWISXData_0
    443              case 115:                                     // Serial number
    444                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000030   2F06               MOV     R16, R22
   \   00000032   E010               LDI     R17, 0
   \   00000034   E342               LDI     R20, 50
   \   00000036   E050               LDI     R21, 0
   \   00000038   ........           CALL    ?S_EC_MUL_L02
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   ....               SUBI    R30, LOW((-(TData + 1428) & 0xFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(TData + 1428) & 0xFFFF))
   \   00000042   E001               LDI     R16, 1
   \   00000044   8300               ST      Z, R16
    445                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000046   E004               LDI     R16, 4
   \   00000048   9F60               MUL     R22, R16
   \   0000004A   2D30               MOV     R19, R0
   \   0000004C   9100....           LDS     R16, PortPair
   \   00000050   0F30               ADD     R19, R16
   \   00000052   2F06               MOV     R16, R22
   \   00000054   E010               LDI     R17, 0
   \   00000056   E342               LDI     R20, 50
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(TData + 1429) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(TData + 1429) & 0xFFFF))
   \   00000064   8330               ST      Z, R19
    446                  for (i = 2; i < (4 + 2); i++) {
   \   00000066   E022               LDI     R18, 2
   \                     ??ReceiveWISXData_1:
   \   00000068   3026               CPI     R18, 6
   \   0000006A   F500               BRCC    ??ReceiveWISXData_0
    447                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \   0000006C   2F06               MOV     R16, R22
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8502               LDD     R16, Z+10
   \   00000080   8513               LDD     R17, Z+11
   \   00000082   0F08               ADD     R16, R24
   \   00000084   1F19               ADC     R17, R25
   \   00000086   01F8               MOVW    R31:R30, R17:R16
   \   00000088   8170               LD      R23, Z
   \   0000008A   ....               LDI     R30, LOW((TData + 1428))
   \   0000008C   ....               LDI     R31, HIGH((TData + 1428))
   \   0000008E   E030               LDI     R19, 0
   \   00000090   0FE2               ADD     R30, R18
   \   00000092   1FF3               ADC     R31, R19
   \   00000094   2F06               MOV     R16, R22
   \   00000096   E010               LDI     R17, 0
   \   00000098   E342               LDI     R20, 50
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   ........           CALL    ?S_EC_MUL_L02
   \   000000A0   0FE0               ADD     R30, R16
   \   000000A2   1FF1               ADC     R31, R17
   \   000000A4   8370               ST      Z, R23
   \   000000A6   9601               ADIW    R25:R24, 1
    448                  }
   \   000000A8   9523               INC     R18
   \   000000AA   CFDE               RJMP    ??ReceiveWISXData_1
    449                  break;
    450              default:
    451                  break;
    452              }
    453          }
   \                     ??ReceiveWISXData_0:
   \   000000AC   9189               LD      R24, Y+
   \   000000AE   9199               LD      R25, Y+
   \   000000B0   9508               RET
    454          
    455          /*************************************************************************
    456          *
    457          *  Receive measured data from WIS
    458          *
    459          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    460          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    461          
    462              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   8502               LDD     R16, Z+10
   \   0000001C   8513               LDD     R17, Z+11
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   E010               LDI     R17, 0
   \   00000028   E020               LDI     R18, 0
   \   0000002A   E030               LDI     R19, 0
   \   0000002C   ........           CALL    ?UL2F_L04
   \   00000030   0128               MOVW    R5:R4, R17:R16
   \   00000032   0139               MOVW    R7:R6, R19:R18
   \   00000034   2F0A               MOV     R16, R26
   \   00000036   E010               LDI     R17, 0
   \   00000038   0F00               LSL     R16
   \   0000003A   1F11               ROL     R17
   \   0000003C   0F00               LSL     R16
   \   0000003E   1F11               ROL     R17
   \   00000040   9120....           LDS     R18, PortPair
   \   00000044   E030               LDI     R19, 0
   \   00000046   0F02               ADD     R16, R18
   \   00000048   1F13               ADC     R17, R19
   \   0000004A   E348               LDI     R20, 56
   \   0000004C   E050               LDI     R21, 0
   \   0000004E   ........           CALL    ?S_EC_MUL_L02
   \   00000052   01F8               MOVW    R31:R30, R17:R16
   \   00000054   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000056   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   00000058   8240               ST      Z, R4
   \   0000005A   8251               STD     Z+1, R5
   \   0000005C   8262               STD     Z+2, R6
   \   0000005E   8273               STD     Z+3, R7
    463              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    464                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   00000060   2F0A               MOV     R16, R26
   \   00000062   E010               LDI     R17, 0
   \   00000064   E14A               LDI     R20, 26
   \   00000066   E050               LDI     R21, 0
   \   00000068   ........           CALL    ?S_EC_MUL_L02
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000070   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000072   8502               LDD     R16, Z+10
   \   00000074   8513               LDD     R17, Z+11
   \   00000076   0F08               ADD     R16, R24
   \   00000078   1F19               ADC     R17, R25
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   8131               LDD     R19, Z+1
   \   0000007E   E020               LDI     R18, 0
   \   00000080   2F0A               MOV     R16, R26
   \   00000082   E010               LDI     R17, 0
   \   00000084   E14A               LDI     R20, 26
   \   00000086   E050               LDI     R21, 0
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8502               LDD     R16, Z+10
   \   00000094   8513               LDD     R17, Z+11
   \   00000096   0F08               ADD     R16, R24
   \   00000098   1F19               ADC     R17, R25
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   8102               LDD     R16, Z+2
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   0F20               ADD     R18, R16
   \   000000A2   1F31               ADC     R19, R17
   \   000000A4   0189               MOVW    R17:R16, R19:R18
   \   000000A6   2F21               MOV     R18, R17
   \   000000A8   0F22               LSL     R18
   \   000000AA   0B22               SBC     R18, R18
   \   000000AC   2F32               MOV     R19, R18
   \   000000AE   ........           CALL    ?SL2F_L04
   \   000000B2   E040               LDI     R20, 0
   \   000000B4   E050               LDI     R21, 0
   \   000000B6   E260               LDI     R22, 32
   \   000000B8   E471               LDI     R23, 65
   \   000000BA   ........           CALL    ?F_DIV_L04
   \   000000BE   0128               MOVW    R5:R4, R17:R16
   \   000000C0   0139               MOVW    R7:R6, R19:R18
   \   000000C2   2F0A               MOV     R16, R26
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   0F00               LSL     R16
   \   000000C8   1F11               ROL     R17
   \   000000CA   0F00               LSL     R16
   \   000000CC   1F11               ROL     R17
   \   000000CE   9120....           LDS     R18, PortPair
   \   000000D2   E030               LDI     R19, 0
   \   000000D4   0F02               ADD     R16, R18
   \   000000D6   1F13               ADC     R17, R19
   \   000000D8   E348               LDI     R20, 56
   \   000000DA   E050               LDI     R21, 0
   \   000000DC   ........           CALL    ?S_EC_MUL_L02
   \   000000E0   01F8               MOVW    R31:R30, R17:R16
   \   000000E2   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   000000E6   8240               ST      Z, R4
   \   000000E8   8251               STD     Z+1, R5
   \   000000EA   8262               STD     Z+2, R6
   \   000000EC   8273               STD     Z+3, R7
    465              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   000000EE   2F0A               MOV     R16, R26
   \   000000F0   E010               LDI     R17, 0
   \   000000F2   E14A               LDI     R20, 26
   \   000000F4   E050               LDI     R21, 0
   \   000000F6   ........           CALL    ?S_EC_MUL_L02
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000100   8502               LDD     R16, Z+10
   \   00000102   8513               LDD     R17, Z+11
   \   00000104   0F08               ADD     R16, R24
   \   00000106   1F19               ADC     R17, R25
   \   00000108   01F8               MOVW    R31:R30, R17:R16
   \   0000010A   8163               LDD     R22, Z+3
   \   0000010C   2F0A               MOV     R16, R26
   \   0000010E   E010               LDI     R17, 0
   \   00000110   0F00               LSL     R16
   \   00000112   1F11               ROL     R17
   \   00000114   0F00               LSL     R16
   \   00000116   1F11               ROL     R17
   \   00000118   9120....           LDS     R18, PortPair
   \   0000011C   E030               LDI     R19, 0
   \   0000011E   0F02               ADD     R16, R18
   \   00000120   1F13               ADC     R17, R19
   \   00000122   E04E               LDI     R20, 14
   \   00000124   E050               LDI     R21, 0
   \   00000126   ........           CALL    ?S_EC_MUL_L02
   \   0000012A   01F8               MOVW    R31:R30, R17:R16
   \   0000012C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000012E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000130   AF63               STD     Z+59, R22
    466              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   00000132   2F0A               MOV     R16, R26
   \   00000134   E010               LDI     R17, 0
   \   00000136   0F00               LSL     R16
   \   00000138   1F11               ROL     R17
   \   0000013A   0F00               LSL     R16
   \   0000013C   1F11               ROL     R17
   \   0000013E   9120....           LDS     R18, PortPair
   \   00000142   E030               LDI     R19, 0
   \   00000144   0F02               ADD     R16, R18
   \   00000146   1F13               ADC     R17, R19
   \   00000148   E04E               LDI     R20, 14
   \   0000014A   E050               LDI     R21, 0
   \   0000014C   ........           CALL    ?S_EC_MUL_L02
   \   00000150   01F8               MOVW    R31:R30, R17:R16
   \   00000152   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   00000154   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   00000156   E000               LDI     R16, 0
   \   00000158   8300               ST      Z, R16
    467          }
   \   0000015A   E0E8               LDI     R30, 8
   \   0000015C   ........           JMP     ?EPILOGUE_B8_L09
    468          
    469          
    470          /*************************************************************************
    471          *
    472          *  Receive measured data from Radar
    473          *
    474          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    475          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    476              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
   \   00000008   2D02               MOV     R16, R2
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   8522               LDD     R18, Z+10
   \   0000001C   8533               LDD     R19, Z+11
   \   0000001E   0F26               ADD     R18, R22
   \   00000020   1F37               ADC     R19, R23
    477              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
   \   00000022   2D02               MOV     R16, R2
   \   00000024   E010               LDI     R17, 0
   \   00000026   E14A               LDI     R20, 26
   \   00000028   E050               LDI     R21, 0
   \   0000002A   ........           CALL    ?S_EC_MUL_L02
   \   0000002E   01F8               MOVW    R31:R30, R17:R16
   \   00000030   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000034   8502               LDD     R16, Z+10
   \   00000036   8513               LDD     R17, Z+11
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   0FE6               ADD     R30, R22
   \   0000003C   1FF7               ADC     R31, R23
   \   0000003E   9634               ADIW    R31:R30, 4
    478          
    479              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
   \   00000040   01D9               MOVW    R27:R26, R19:R18
   \   00000042   904D               LD      R4, X+
   \   00000044   905D               LD      R5, X+
   \   00000046   906D               LD      R6, X+
   \   00000048   907C               LD      R7, X
   \   0000004A   9713               SBIW    R27:R26, 3
   \   0000004C   2D02               MOV     R16, R2
   \   0000004E   E010               LDI     R17, 0
   \   00000050   0F00               LSL     R16
   \   00000052   1F11               ROL     R17
   \   00000054   0F00               LSL     R16
   \   00000056   1F11               ROL     R17
   \   00000058   9140....           LDS     R20, PortPair
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   0F04               ADD     R16, R20
   \   00000060   1F15               ADC     R17, R21
   \   00000062   E348               LDI     R20, 56
   \   00000064   E050               LDI     R21, 0
   \   00000066   ........           CALL    ?S_EC_MUL_L02
   \   0000006A   01D8               MOVW    R27:R26, R17:R16
   \   0000006C   ....               SUBI    R26, LOW((-(TData + 731) & 0xFFFF))
   \   0000006E   ....               SBCI    R27, HIGH((-(TData + 731) & 0xFFFF))
   \   00000070   924D               ST      X+, R4
   \   00000072   925D               ST      X+, R5
   \   00000074   926D               ST      X+, R6
   \   00000076   927C               ST      X, R7
   \   00000078   9713               SBIW    R27:R26, 3
    480              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   0000007A   8040               LD      R4, Z
   \   0000007C   8051               LDD     R5, Z+1
   \   0000007E   8062               LDD     R6, Z+2
   \   00000080   8073               LDD     R7, Z+3
   \   00000082   2D02               MOV     R16, R2
   \   00000084   E010               LDI     R17, 0
   \   00000086   0F00               LSL     R16
   \   00000088   1F11               ROL     R17
   \   0000008A   0F00               LSL     R16
   \   0000008C   1F11               ROL     R17
   \   0000008E   9140....           LDS     R20, PortPair
   \   00000092   E050               LDI     R21, 0
   \   00000094   0F04               ADD     R16, R20
   \   00000096   1F15               ADC     R17, R21
   \   00000098   E348               LDI     R20, 56
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   ........           CALL    ?S_EC_MUL_L02
   \   000000A0   01D8               MOVW    R27:R26, R17:R16
   \   000000A2   ....               SUBI    R26, LOW((-(TData + 735) & 0xFFFF))
   \   000000A4   ....               SBCI    R27, HIGH((-(TData + 735) & 0xFFFF))
   \   000000A6   924D               ST      X+, R4
   \   000000A8   925D               ST      X+, R5
   \   000000AA   926D               ST      X+, R6
   \   000000AC   927C               ST      X, R7
   \   000000AE   9713               SBIW    R27:R26, 3
    481              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   000000B0   2D02               MOV     R16, R2
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   E14A               LDI     R20, 26
   \   000000B6   E050               LDI     R21, 0
   \   000000B8   ........           CALL    ?S_EC_MUL_L02
   \   000000BC   01D8               MOVW    R27:R26, R17:R16
   \   000000BE   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   000000C0   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   000000C2   910D               LD      R16, X+
   \   000000C4   911C               LD      R17, X
   \   000000C6   9711               SBIW    R27:R26, 1
   \   000000C8   0F06               ADD     R16, R22
   \   000000CA   1F17               ADC     R17, R23
   \   000000CC   01D8               MOVW    R27:R26, R17:R16
   \   000000CE   9618               ADIW    R27:R26, 8
   \   000000D0   903C               LD      R3, X
   \   000000D2   9718               SBIW    R27:R26, 8
   \   000000D4   2D02               MOV     R16, R2
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   0F00               LSL     R16
   \   000000DA   1F11               ROL     R17
   \   000000DC   0F00               LSL     R16
   \   000000DE   1F11               ROL     R17
   \   000000E0   9140....           LDS     R20, PortPair
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   0F04               ADD     R16, R20
   \   000000E8   1F15               ADC     R17, R21
   \   000000EA   E04E               LDI     R20, 14
   \   000000EC   E050               LDI     R21, 0
   \   000000EE   ........           CALL    ?S_EC_MUL_L02
   \   000000F2   01D8               MOVW    R27:R26, R17:R16
   \   000000F4   ....               SUBI    R26, LOW((-(TData + 59) & 0xFFFF))
   \   000000F6   ....               SBCI    R27, HIGH((-(TData + 59) & 0xFFFF))
   \   000000F8   923C               ST      X, R3
    482              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   000000FA   2D02               MOV     R16, R2
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   E14A               LDI     R20, 26
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   01D8               MOVW    R27:R26, R17:R16
   \   00000108   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   0000010A   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   0000010C   910D               LD      R16, X+
   \   0000010E   911C               LD      R17, X
   \   00000110   9711               SBIW    R27:R26, 1
   \   00000112   0F06               ADD     R16, R22
   \   00000114   1F17               ADC     R17, R23
   \   00000116   01D8               MOVW    R27:R26, R17:R16
   \   00000118   9619               ADIW    R27:R26, 9
   \   0000011A   903C               LD      R3, X
   \   0000011C   9719               SBIW    R27:R26, 9
   \   0000011E   2D02               MOV     R16, R2
   \   00000120   E010               LDI     R17, 0
   \   00000122   0F00               LSL     R16
   \   00000124   1F11               ROL     R17
   \   00000126   0F00               LSL     R16
   \   00000128   1F11               ROL     R17
   \   0000012A   9140....           LDS     R20, PortPair
   \   0000012E   E050               LDI     R21, 0
   \   00000130   0F04               ADD     R16, R20
   \   00000132   1F15               ADC     R17, R21
   \   00000134   E04E               LDI     R20, 14
   \   00000136   E050               LDI     R21, 0
   \   00000138   ........           CALL    ?S_EC_MUL_L02
   \   0000013C   01D8               MOVW    R27:R26, R17:R16
   \   0000013E   ....               SUBI    R26, LOW((-(TData + 171) & 0xFFFF))
   \   00000140   ....               SBCI    R27, HIGH((-(TData + 171) & 0xFFFF))
   \   00000142   923C               ST      X, R3
    483          }
   \   00000144   E0E8               LDI     R30, 8
   \   00000146   ........           JMP     ?EPILOGUE_B8_L09
    484          
    485          
    486          /*************************************************************************
    487          *
    488          *  Receive Serial number and version information from Radar
    489          *
    490          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    491          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    492              TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((char*)&UART16552[ch].pRxBuffer[pointer + 0]);
   \   00000008   91A0....           LDS     R26, PortPair
   \   0000000C   2D04               MOV     R16, R4
   \   0000000E   E010               LDI     R17, 0
   \   00000010   E14A               LDI     R20, 26
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?S_EC_MUL_L02
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001E   8502               LDD     R16, Z+10
   \   00000020   8513               LDD     R17, Z+11
   \   00000022   0F08               ADD     R16, R24
   \   00000024   1F19               ADC     R17, R25
   \   00000026   ........           CALL    atol
   \   0000002A   2D44               MOV     R20, R4
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   0F44               LSL     R20
   \   00000030   1F55               ROL     R21
   \   00000032   0F44               LSL     R20
   \   00000034   1F55               ROL     R21
   \   00000036   E0B0               LDI     R27, 0
   \   00000038   0F4A               ADD     R20, R26
   \   0000003A   1F5B               ADC     R21, R27
   \   0000003C   0F44               LSL     R20
   \   0000003E   1F55               ROL     R21
   \   00000040   0F44               LSL     R20
   \   00000042   1F55               ROL     R21
   \   00000044   01FA               MOVW    R31:R30, R21:R20
   \   00000046   ....               SUBI    R30, LOW((-(TData + 1532) & 0xFFFF))
   \   00000048   ....               SBCI    R31, HIGH((-(TData + 1532) & 0xFFFF))
   \   0000004A   8300               ST      Z, R16
   \   0000004C   8311               STD     Z+1, R17
   \   0000004E   8322               STD     Z+2, R18
   \   00000050   8333               STD     Z+3, R19
    493              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000052   2D04               MOV     R16, R4
   \   00000054   E010               LDI     R17, 0
   \   00000056   E14A               LDI     R20, 26
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000064   8502               LDD     R16, Z+10
   \   00000066   8513               LDD     R17, Z+11
   \   00000068   0F08               ADD     R16, R24
   \   0000006A   1F19               ADC     R17, R25
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   8502               LDD     R16, Z+10
   \   00000070   8513               LDD     R17, Z+11
   \   00000072   8524               LDD     R18, Z+12
   \   00000074   8535               LDD     R19, Z+13
   \   00000076   2F20               MOV     R18, R16
   \   00000078   2D04               MOV     R16, R4
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   0F00               LSL     R16
   \   0000007E   1F11               ROL     R17
   \   00000080   0F00               LSL     R16
   \   00000082   1F11               ROL     R17
   \   00000084   9140....           LDS     R20, PortPair
   \   00000088   E050               LDI     R21, 0
   \   0000008A   0F04               ADD     R16, R20
   \   0000008C   1F15               ADC     R17, R21
   \   0000008E   01F8               MOVW    R31:R30, R17:R16
   \   00000090   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000092   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000094   A723               STD     Z+43, R18
    494          }
   \   00000096   E0E5               LDI     R30, 5
   \   00000098   ........           JMP     ?EPILOGUE_B5_L09
    495          
    496          /*************************************************************************
    497          *
    498          *  Receive pressure measured data from AN_SGCNV
    499          *
    500          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    501          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   2EA0               MOV     R10, R16
   \   00000006   0149               MOVW    R9:R8, R19:R18
    502          
    503              unsigned short pnt, ADCh;
    504              short packlen;
    505          
    506              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000008   2D0A               MOV     R16, R10
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   8502               LDD     R16, Z+10
   \   0000001C   8513               LDD     R17, Z+11
   \   0000001E   0D08               ADD     R16, R8
   \   00000020   1D19               ADC     R17, R9
   \   00000022   5001               SUBI    R16, 1
   \   00000024   4010               SBCI    R17, 0
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   8100               LD      R16, Z
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   0168               MOVW    R13:R12, R17:R16
    507          
    508              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   0000002E   ....               LDI     R16, LOW(UARTSEND)
   \   00000030   ....               LDI     R17, (UARTSEND) >> 8
   \   00000032   ........           CALL    OS_Use
    509          
    510              if (packlen > 0) {
   \   00000036   E001               LDI     R16, 1
   \   00000038   16C0               CP      R12, R16
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   06D0               CPC     R13, R16
   \   0000003E   F40C               BRGE    $+2+2
   \   00000040   C07C               RJMP    ??ReceivePTOData_0
    511                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   00000042   E080               LDI     R24, 0
   \   00000044   E090               LDI     R25, 0
   \                     ??ReceivePTOData_1:
   \   00000046   158C               CP      R24, R12
   \   00000048   059D               CPC     R25, R13
   \   0000004A   F008               BRCS    $+2+2
   \   0000004C   C076               RJMP    ??ReceivePTOData_0
    512                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   0000004E   2D0A               MOV     R16, R10
   \   00000050   E010               LDI     R17, 0
   \   00000052   E14A               LDI     R20, 26
   \   00000054   E050               LDI     R21, 0
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000060   8502               LDD     R16, Z+10
   \   00000062   8513               LDD     R17, Z+11
   \   00000064   0194               MOVW    R19:R18, R9:R8
   \   00000066   0F28               ADD     R18, R24
   \   00000068   1F39               ADC     R19, R25
   \   0000006A   0F02               ADD     R16, R18
   \   0000006C   1F13               ADC     R17, R19
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   8100               LD      R16, Z
   \   00000072   E010               LDI     R17, 0
   \   00000074   01D8               MOVW    R27:R26, R17:R16
    513                      if (ADCh < 14) {
   \   00000076   30AE               CPI     R26, 14
   \   00000078   E000               LDI     R16, 0
   \   0000007A   07B0               CPC     R27, R16
   \   0000007C   F008               BRCS    $+2+2
   \   0000007E   C05B               RJMP    ??ReceivePTOData_2
    514                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000080   2D0A               MOV     R16, R10
   \   00000082   E010               LDI     R17, 0
   \   00000084   E14A               LDI     R20, 26
   \   00000086   E050               LDI     R21, 0
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8502               LDD     R16, Z+10
   \   00000094   8513               LDD     R17, Z+11
   \   00000096   0194               MOVW    R19:R18, R9:R8
   \   00000098   0F28               ADD     R18, R24
   \   0000009A   1F39               ADC     R19, R25
   \   0000009C   0F02               ADD     R16, R18
   \   0000009E   1F13               ADC     R17, R19
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   8121               LDD     R18, Z+1
   \   000000A4   ....               LDI     R30, LOW((TData + 59))
   \   000000A6   ....               LDI     R31, HIGH((TData + 59))
   \   000000A8   0FEA               ADD     R30, R26
   \   000000AA   1FFB               ADC     R31, R27
   \   000000AC   2D0A               MOV     R16, R10
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   0F00               LSL     R16
   \   000000B2   1F11               ROL     R17
   \   000000B4   0F00               LSL     R16
   \   000000B6   1F11               ROL     R17
   \   000000B8   9140....           LDS     R20, PortPair
   \   000000BC   E050               LDI     R21, 0
   \   000000BE   0F04               ADD     R16, R20
   \   000000C0   1F15               ADC     R17, R21
   \   000000C2   E04E               LDI     R20, 14
   \   000000C4   E050               LDI     R21, 0
   \   000000C6   ........           CALL    ?S_EC_MUL_L02
   \   000000CA   0FE0               ADD     R30, R16
   \   000000CC   1FF1               ADC     R31, R17
   \   000000CE   8320               ST      Z, R18
    515                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000D0   2D0A               MOV     R16, R10
   \   000000D2   E010               LDI     R17, 0
   \   000000D4   E14A               LDI     R20, 26
   \   000000D6   E050               LDI     R21, 0
   \   000000D8   ........           CALL    ?S_EC_MUL_L02
   \   000000DC   01F8               MOVW    R31:R30, R17:R16
   \   000000DE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000E0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000E2   8502               LDD     R16, Z+10
   \   000000E4   8513               LDD     R17, Z+11
   \   000000E6   0194               MOVW    R19:R18, R9:R8
   \   000000E8   0F28               ADD     R18, R24
   \   000000EA   1F39               ADC     R19, R25
   \   000000EC   0F02               ADD     R16, R18
   \   000000EE   1F13               ADC     R17, R19
   \   000000F0   01F8               MOVW    R31:R30, R17:R16
   \   000000F2   8042               LDD     R4, Z+2
   \   000000F4   8053               LDD     R5, Z+3
   \   000000F6   8064               LDD     R6, Z+4
   \   000000F8   8075               LDD     R7, Z+5
   \   000000FA   ....               LDI     R30, LOW((TData + 731))
   \   000000FC   ....               LDI     R31, HIGH((TData + 731))
   \   000000FE   018D               MOVW    R17:R16, R27:R26
   \   00000100   0F00               LSL     R16
   \   00000102   1F11               ROL     R17
   \   00000104   0F00               LSL     R16
   \   00000106   1F11               ROL     R17
   \   00000108   0FE0               ADD     R30, R16
   \   0000010A   1FF1               ADC     R31, R17
   \   0000010C   2D0A               MOV     R16, R10
   \   0000010E   E010               LDI     R17, 0
   \   00000110   0F00               LSL     R16
   \   00000112   1F11               ROL     R17
   \   00000114   0F00               LSL     R16
   \   00000116   1F11               ROL     R17
   \   00000118   9120....           LDS     R18, PortPair
   \   0000011C   E030               LDI     R19, 0
   \   0000011E   0F02               ADD     R16, R18
   \   00000120   1F13               ADC     R17, R19
   \   00000122   E348               LDI     R20, 56
   \   00000124   E050               LDI     R21, 0
   \   00000126   ........           CALL    ?S_EC_MUL_L02
   \   0000012A   0FE0               ADD     R30, R16
   \   0000012C   1FF1               ADC     R31, R17
   \   0000012E   8240               ST      Z, R4
   \   00000130   8251               STD     Z+1, R5
   \   00000132   8262               STD     Z+2, R6
   \   00000134   8273               STD     Z+3, R7
    516                      }
    517                  }
   \                     ??ReceivePTOData_2:
   \   00000136   9606               ADIW    R25:R24, 6
   \   00000138   CF86               RJMP    ??ReceivePTOData_1
    518              }
    519              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   0000013A   ....               LDI     R16, LOW(UARTSEND)
   \   0000013C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000013E   ........           CALL    OS_Unuse
    520          }
   \   00000142   E0EE               LDI     R30, 14
   \   00000144   ........           JMP     ?EPILOGUE_B14_L09
    521          /*************************************************************************
    522          *
    523          *  Receive Wash Track and High Level data from AN_SGCNV
    524          *
    525          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    526          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    527          
    528              // Fixed packet length
    529              //short packlen;
    530          
    531              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    532          
    533              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000008   ....               LDI     R16, LOW(UARTSEND)
   \   0000000A   ....               LDI     R17, (UARTSEND) >> 8
   \   0000000C   ........           CALL    OS_Use
    534              short Index = (ch * 4) + PortPair;
   \   00000010   2D84               MOV     R24, R4
   \   00000012   E090               LDI     R25, 0
   \   00000014   0F88               LSL     R24
   \   00000016   1F99               ROL     R25
   \   00000018   0F88               LSL     R24
   \   0000001A   1F99               ROL     R25
   \   0000001C   9100....           LDS     R16, PortPair
   \   00000020   E010               LDI     R17, 0
   \   00000022   0F80               ADD     R24, R16
   \   00000024   1F91               ADC     R25, R17
    535              // Check if we have time information included
    536              if (UART16552[ch].pRxBuffer[pointer -1] == 4 ) {
   \   00000026   2D04               MOV     R16, R4
   \   00000028   E010               LDI     R17, 0
   \   0000002A   E14A               LDI     R20, 26
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   ........           CALL    ?S_EC_MUL_L02
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000036   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000038   8502               LDD     R16, Z+10
   \   0000003A   8513               LDD     R17, Z+11
   \   0000003C   0F0A               ADD     R16, R26
   \   0000003E   1F1B               ADC     R17, R27
   \   00000040   5001               SUBI    R16, 1
   \   00000042   4010               SBCI    R17, 0
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   8100               LD      R16, Z
   \   00000048   3004               CPI     R16, 4
   \   0000004A   F009               BREQ    $+2+2
   \   0000004C   C056               RJMP    ??ReceiveWHData_0
    537                  for (short pnt = 0; pnt < 3; pnt++) {
   \   0000004E   E020               LDI     R18, 0
   \   00000050   E030               LDI     R19, 0
   \                     ??ReceiveWHData_1:
   \   00000052   3023               CPI     R18, 3
   \   00000054   E000               LDI     R16, 0
   \   00000056   0730               CPC     R19, R16
   \   00000058   F534               BRGE    ??ReceiveWHData_2
    538                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer+pnt];  // 4 x Wash track
   \   0000005A   2D04               MOV     R16, R4
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   E14A               LDI     R20, 26
   \   00000060   E050               LDI     R21, 0
   \   00000062   ........           CALL    ?S_EC_MUL_L02
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006C   8502               LDD     R16, Z+10
   \   0000006E   8513               LDD     R17, Z+11
   \   00000070   01AD               MOVW    R21:R20, R27:R26
   \   00000072   0F42               ADD     R20, R18
   \   00000074   1F53               ADC     R21, R19
   \   00000076   0F04               ADD     R16, R20
   \   00000078   1F15               ADC     R17, R21
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   8160               LD      R22, Z
   \   0000007E   E070               LDI     R23, 0
   \   00000080   ....               LDI     R30, LOW((TData + 1179))
   \   00000082   ....               LDI     R31, HIGH((TData + 1179))
   \   00000084   0189               MOVW    R17:R16, R19:R18
   \   00000086   0F00               LSL     R16
   \   00000088   1F11               ROL     R17
   \   0000008A   0FE0               ADD     R30, R16
   \   0000008C   1FF1               ADC     R31, R17
   \   0000008E   018C               MOVW    R17:R16, R25:R24
   \   00000090   E048               LDI     R20, 8
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   0FE0               ADD     R30, R16
   \   0000009A   1FF1               ADC     R31, R17
   \   0000009C   8360               ST      Z, R22
   \   0000009E   8371               STD     Z+1, R23
    539                  }
   \   000000A0   5F2F               SUBI    R18, 255
   \   000000A2   4F3F               SBCI    R19, 255
   \   000000A4   CFD6               RJMP    ??ReceiveWHData_1
    540                  // 4th WashTrack dont come
    541                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \                     ??ReceiveWHData_2:
   \   000000A6   018C               MOVW    R17:R16, R25:R24
   \   000000A8   E048               LDI     R20, 8
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   ........           CALL    ?S_EC_MUL_L02
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(TData + 1185) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(TData + 1185) & 0xFFFF))
   \   000000B6   E000               LDI     R16, 0
   \   000000B8   8300               ST      Z, R16
   \   000000BA   E000               LDI     R16, 0
   \   000000BC   8301               STD     Z+1, R16
    542                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer +3]; // Hgh levels in 5th byte
   \   000000BE   2D04               MOV     R16, R4
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   E14A               LDI     R20, 26
   \   000000C4   E050               LDI     R21, 0
   \   000000C6   ........           CALL    ?S_EC_MUL_L02
   \   000000CA   01F8               MOVW    R31:R30, R17:R16
   \   000000CC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D0   8502               LDD     R16, Z+10
   \   000000D2   8513               LDD     R17, Z+11
   \   000000D4   0F0A               ADD     R16, R26
   \   000000D6   1F1B               ADC     R17, R27
   \   000000D8   01F8               MOVW    R31:R30, R17:R16
   \   000000DA   8103               LDD     R16, Z+3
   \   000000DC   01FC               MOVW    R31:R30, R25:R24
   \   000000DE   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000000E0   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000E2   8300               ST      Z, R16
    543                  TData.RS4.WTTime[Index] = 0;
   \   000000E4   018C               MOVW    R17:R16, R25:R24
   \   000000E6   0F00               LSL     R16
   \   000000E8   1F11               ROL     R17
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000F0   E000               LDI     R16, 0
   \   000000F2   8300               ST      Z, R16
   \   000000F4   E000               LDI     R16, 0
   \   000000F6   8301               STD     Z+1, R16
   \   000000F8   C059               RJMP    ??ReceiveWHData_3
    544              }else{
    545                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   000000FA   E020               LDI     R18, 0
   \   000000FC   E030               LDI     R19, 0
   \                     ??ReceiveWHData_4:
   \   000000FE   3024               CPI     R18, 4
   \   00000100   E000               LDI     R16, 0
   \   00000102   0730               CPC     R19, R16
   \   00000104   F544               BRGE    ??ReceiveWHData_5
    546                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \   00000106   2D04               MOV     R16, R4
   \   00000108   E010               LDI     R17, 0
   \   0000010A   E14A               LDI     R20, 26
   \   0000010C   E050               LDI     R21, 0
   \   0000010E   ........           CALL    ?S_EC_MUL_L02
   \   00000112   01F8               MOVW    R31:R30, R17:R16
   \   00000114   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000116   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000118   8502               LDD     R16, Z+10
   \   0000011A   8513               LDD     R17, Z+11
   \   0000011C   0F0A               ADD     R16, R26
   \   0000011E   1F1B               ADC     R17, R27
   \   00000120   01A9               MOVW    R21:R20, R19:R18
   \   00000122   0F44               LSL     R20
   \   00000124   1F55               ROL     R21
   \   00000126   0F04               ADD     R16, R20
   \   00000128   1F15               ADC     R17, R21
   \   0000012A   01F8               MOVW    R31:R30, R17:R16
   \   0000012C   8160               LD      R22, Z
   \   0000012E   8171               LDD     R23, Z+1
   \   00000130   ....               LDI     R30, LOW((TData + 1179))
   \   00000132   ....               LDI     R31, HIGH((TData + 1179))
   \   00000134   0189               MOVW    R17:R16, R19:R18
   \   00000136   0F00               LSL     R16
   \   00000138   1F11               ROL     R17
   \   0000013A   0FE0               ADD     R30, R16
   \   0000013C   1FF1               ADC     R31, R17
   \   0000013E   018C               MOVW    R17:R16, R25:R24
   \   00000140   E048               LDI     R20, 8
   \   00000142   E050               LDI     R21, 0
   \   00000144   ........           CALL    ?S_EC_MUL_L02
   \   00000148   0FE0               ADD     R30, R16
   \   0000014A   1FF1               ADC     R31, R17
   \   0000014C   8360               ST      Z, R22
   \   0000014E   8371               STD     Z+1, R23
    547                  }
   \   00000150   5F2F               SUBI    R18, 255
   \   00000152   4F3F               SBCI    R19, 255
   \   00000154   CFD4               RJMP    ??ReceiveWHData_4
    548                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \                     ??ReceiveWHData_5:
   \   00000156   2D04               MOV     R16, R4
   \   00000158   E010               LDI     R17, 0
   \   0000015A   E14A               LDI     R20, 26
   \   0000015C   E050               LDI     R21, 0
   \   0000015E   ........           CALL    ?S_EC_MUL_L02
   \   00000162   01F8               MOVW    R31:R30, R17:R16
   \   00000164   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000166   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000168   8502               LDD     R16, Z+10
   \   0000016A   8513               LDD     R17, Z+11
   \   0000016C   0F0A               ADD     R16, R26
   \   0000016E   1F1B               ADC     R17, R27
   \   00000170   01F8               MOVW    R31:R30, R17:R16
   \   00000172   8500               LDD     R16, Z+8
   \   00000174   01FC               MOVW    R31:R30, R25:R24
   \   00000176   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   00000178   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   0000017A   8300               ST      Z, R16
    549                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   0000017C   2D04               MOV     R16, R4
   \   0000017E   E010               LDI     R17, 0
   \   00000180   E14A               LDI     R20, 26
   \   00000182   E050               LDI     R21, 0
   \   00000184   ........           CALL    ?S_EC_MUL_L02
   \   00000188   01F8               MOVW    R31:R30, R17:R16
   \   0000018A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000018C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000018E   8502               LDD     R16, Z+10
   \   00000190   8513               LDD     R17, Z+11
   \   00000192   0F0A               ADD     R16, R26
   \   00000194   1F1B               ADC     R17, R27
   \   00000196   01F8               MOVW    R31:R30, R17:R16
   \   00000198   8521               LDD     R18, Z+9
   \   0000019A   8532               LDD     R19, Z+10
   \   0000019C   018C               MOVW    R17:R16, R25:R24
   \   0000019E   0F00               LSL     R16
   \   000001A0   1F11               ROL     R17
   \   000001A2   01F8               MOVW    R31:R30, R17:R16
   \   000001A4   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000001A6   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000001A8   8320               ST      Z, R18
   \   000001AA   8331               STD     Z+1, R19
    550              }
    551              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_3:
   \   000001AC   E004               LDI     R16, 4
   \   000001AE   9E40               MUL     R4, R16
   \   000001B0   2D40               MOV     R20, R0
   \   000001B2   9100....           LDS     R16, PortPair
   \   000001B6   0F40               ADD     R20, R16
   \   000001B8   E001               LDI     R16, 1
   \   000001BA   E010               LDI     R17, 0
   \   000001BC   ........           CALL    ?S_SHL_L02
   \   000001C0   9110....           LDS     R17, (TData + 1267)
   \   000001C4   2B10               OR      R17, R16
   \   000001C6   9310....           STS     (TData + 1267), R17
    552              OS_Unuse(&UARTSEND);
   \   000001CA   ....               LDI     R16, LOW(UARTSEND)
   \   000001CC   ....               LDI     R17, (UARTSEND) >> 8
   \   000001CE   ........           CALL    OS_Unuse
    553          }
   \   000001D2   E0E5               LDI     R30, 5
   \   000001D4   ........           JMP     ?EPILOGUE_B5_L09
    554          
    555          
    556          /************************************************************************
    557          *
    558          *  Receive raw data for pressure, temp and other from AN_SGCNV
    559          *
    560          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    561          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
    562          
    563              char pnt, ADCh;
    564              short packlen;
    565          
    566              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000006   2D02               MOV     R16, R2
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8502               LDD     R16, Z+10
   \   0000001A   8513               LDD     R17, Z+11
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   5001               SUBI    R16, 1
   \   00000022   4010               SBCI    R17, 0
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8100               LD      R16, Z
   \   00000028   E010               LDI     R17, 0
   \   0000002A   01D8               MOVW    R27:R26, R17:R16
    567          
    568              if (packlen > 0) {
   \   0000002C   30A1               CPI     R26, 1
   \   0000002E   E000               LDI     R16, 0
   \   00000030   07B0               CPC     R27, R16
   \   00000032   F40C               BRGE    $+2+2
   \   00000034   C078               RJMP    ??ReceiveRData_0
    569                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000036   E060               LDI     R22, 0
   \                     ??ReceiveRData_1:
   \   00000038   E070               LDI     R23, 0
   \   0000003A   176A               CP      R22, R26
   \   0000003C   077B               CPC     R23, R27
   \   0000003E   F00C               BRLT    $+2+2
   \   00000040   C072               RJMP    ??ReceiveRData_0
    570                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   00000042   2D02               MOV     R16, R2
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14A               LDI     R20, 26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000054   8502               LDD     R16, Z+10
   \   00000056   8513               LDD     R17, Z+11
   \   00000058   E070               LDI     R23, 0
   \   0000005A   01A9               MOVW    R21:R20, R19:R18
   \   0000005C   0F46               ADD     R20, R22
   \   0000005E   1F57               ADC     R21, R23
   \   00000060   0F04               ADD     R16, R20
   \   00000062   1F15               ADC     R17, R21
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8100               LD      R16, Z
   \   00000068   2F80               MOV     R24, R16
    571                      if (ADCh < 14) {
   \   0000006A   308E               CPI     R24, 14
   \   0000006C   F008               BRCS    $+2+2
   \   0000006E   C059               RJMP    ??ReceiveRData_2
    572                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000070   2D02               MOV     R16, R2
   \   00000072   E010               LDI     R17, 0
   \   00000074   E14A               LDI     R20, 26
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000082   8502               LDD     R16, Z+10
   \   00000084   8513               LDD     R17, Z+11
   \   00000086   E070               LDI     R23, 0
   \   00000088   01A9               MOVW    R21:R20, R19:R18
   \   0000008A   0F46               ADD     R20, R22
   \   0000008C   1F57               ADC     R21, R23
   \   0000008E   0F04               ADD     R16, R20
   \   00000090   1F15               ADC     R17, R21
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   8171               LDD     R23, Z+1
   \   00000096   ....               LDI     R30, LOW((TData + 59))
   \   00000098   ....               LDI     R31, HIGH((TData + 59))
   \   0000009A   E090               LDI     R25, 0
   \   0000009C   0FE8               ADD     R30, R24
   \   0000009E   1FF9               ADC     R31, R25
   \   000000A0   2D02               MOV     R16, R2
   \   000000A2   E010               LDI     R17, 0
   \   000000A4   0F00               LSL     R16
   \   000000A6   1F11               ROL     R17
   \   000000A8   0F00               LSL     R16
   \   000000AA   1F11               ROL     R17
   \   000000AC   9140....           LDS     R20, PortPair
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   0F04               ADD     R16, R20
   \   000000B4   1F15               ADC     R17, R21
   \   000000B6   E04E               LDI     R20, 14
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   ........           CALL    ?S_EC_MUL_L02
   \   000000BE   0FE0               ADD     R30, R16
   \   000000C0   1FF1               ADC     R31, R17
   \   000000C2   8370               ST      Z, R23
    573                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000C4   2D02               MOV     R16, R2
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E14A               LDI     R20, 26
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D6   8502               LDD     R16, Z+10
   \   000000D8   8513               LDD     R17, Z+11
   \   000000DA   E070               LDI     R23, 0
   \   000000DC   01A9               MOVW    R21:R20, R19:R18
   \   000000DE   0F46               ADD     R20, R22
   \   000000E0   1F57               ADC     R21, R23
   \   000000E2   0F04               ADD     R16, R20
   \   000000E4   1F15               ADC     R17, R21
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   8042               LDD     R4, Z+2
   \   000000EA   8053               LDD     R5, Z+3
   \   000000EC   ....               LDI     R30, LOW((TData + 283))
   \   000000EE   ....               LDI     R31, HIGH((TData + 283))
   \   000000F0   2F08               MOV     R16, R24
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   0F00               LSL     R16
   \   000000F6   1F11               ROL     R17
   \   000000F8   0FE0               ADD     R30, R16
   \   000000FA   1FF1               ADC     R31, R17
   \   000000FC   2D02               MOV     R16, R2
   \   000000FE   E010               LDI     R17, 0
   \   00000100   0F00               LSL     R16
   \   00000102   1F11               ROL     R17
   \   00000104   0F00               LSL     R16
   \   00000106   1F11               ROL     R17
   \   00000108   9140....           LDS     R20, PortPair
   \   0000010C   E050               LDI     R21, 0
   \   0000010E   0F04               ADD     R16, R20
   \   00000110   1F15               ADC     R17, R21
   \   00000112   E14C               LDI     R20, 28
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   0FE0               ADD     R30, R16
   \   0000011C   1FF1               ADC     R31, R17
   \   0000011E   8240               ST      Z, R4
   \   00000120   8251               STD     Z+1, R5
    574                      }
    575                  }
   \                     ??ReceiveRData_2:
   \   00000122   5F6C               SUBI    R22, 252
   \   00000124   CF89               RJMP    ??ReceiveRData_1
    576              }
    577          }
   \                     ??ReceiveRData_0:
   \   00000126   E0E6               LDI     R30, 6
   \   00000128   ........           JMP     ?EPILOGUE_B6_L09
    578          
    579          /*************************************************************************
    580          *
    581          *  Receive cal data  from AN_SGCNV
    582          *
    583          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    584          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
    585          
    586              char pnt, ADCh;
    587              short packlen;
    588          
    589              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000006   2D02               MOV     R16, R2
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8502               LDD     R16, Z+10
   \   0000001A   8513               LDD     R17, Z+11
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   5001               SUBI    R16, 1
   \   00000022   4010               SBCI    R17, 0
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8100               LD      R16, Z
   \   00000028   E010               LDI     R17, 0
   \   0000002A   01D8               MOVW    R27:R26, R17:R16
    590          
    591              if (packlen > 0) {
   \   0000002C   30A1               CPI     R26, 1
   \   0000002E   E000               LDI     R16, 0
   \   00000030   07B0               CPC     R27, R16
   \   00000032   F40C               BRGE    $+2+2
   \   00000034   C078               RJMP    ??ReceiveCData_0
    592                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000036   E060               LDI     R22, 0
   \                     ??ReceiveCData_1:
   \   00000038   E070               LDI     R23, 0
   \   0000003A   176A               CP      R22, R26
   \   0000003C   077B               CPC     R23, R27
   \   0000003E   F00C               BRLT    $+2+2
   \   00000040   C072               RJMP    ??ReceiveCData_0
    593                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   00000042   2D02               MOV     R16, R2
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14A               LDI     R20, 26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000054   8502               LDD     R16, Z+10
   \   00000056   8513               LDD     R17, Z+11
   \   00000058   E070               LDI     R23, 0
   \   0000005A   01A9               MOVW    R21:R20, R19:R18
   \   0000005C   0F46               ADD     R20, R22
   \   0000005E   1F57               ADC     R21, R23
   \   00000060   0F04               ADD     R16, R20
   \   00000062   1F15               ADC     R17, R21
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8100               LD      R16, Z
   \   00000068   2F80               MOV     R24, R16
    594                      if (ADCh < 14) {
   \   0000006A   308E               CPI     R24, 14
   \   0000006C   F008               BRCS    $+2+2
   \   0000006E   C059               RJMP    ??ReceiveCData_2
    595                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000070   2D02               MOV     R16, R2
   \   00000072   E010               LDI     R17, 0
   \   00000074   E14A               LDI     R20, 26
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000082   8502               LDD     R16, Z+10
   \   00000084   8513               LDD     R17, Z+11
   \   00000086   E070               LDI     R23, 0
   \   00000088   01A9               MOVW    R21:R20, R19:R18
   \   0000008A   0F46               ADD     R20, R22
   \   0000008C   1F57               ADC     R21, R23
   \   0000008E   0F04               ADD     R16, R20
   \   00000090   1F15               ADC     R17, R21
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   8171               LDD     R23, Z+1
   \   00000096   ....               LDI     R30, LOW((TData + 59))
   \   00000098   ....               LDI     R31, HIGH((TData + 59))
   \   0000009A   E090               LDI     R25, 0
   \   0000009C   0FE8               ADD     R30, R24
   \   0000009E   1FF9               ADC     R31, R25
   \   000000A0   2D02               MOV     R16, R2
   \   000000A2   E010               LDI     R17, 0
   \   000000A4   0F00               LSL     R16
   \   000000A6   1F11               ROL     R17
   \   000000A8   0F00               LSL     R16
   \   000000AA   1F11               ROL     R17
   \   000000AC   9140....           LDS     R20, PortPair
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   0F04               ADD     R16, R20
   \   000000B4   1F15               ADC     R17, R21
   \   000000B6   E04E               LDI     R20, 14
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   ........           CALL    ?S_EC_MUL_L02
   \   000000BE   0FE0               ADD     R30, R16
   \   000000C0   1FF1               ADC     R31, R17
   \   000000C2   8370               ST      Z, R23
    596                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000C4   2D02               MOV     R16, R2
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E14A               LDI     R20, 26
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D6   8502               LDD     R16, Z+10
   \   000000D8   8513               LDD     R17, Z+11
   \   000000DA   E070               LDI     R23, 0
   \   000000DC   01A9               MOVW    R21:R20, R19:R18
   \   000000DE   0F46               ADD     R20, R22
   \   000000E0   1F57               ADC     R21, R23
   \   000000E2   0F04               ADD     R16, R20
   \   000000E4   1F15               ADC     R17, R21
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   8042               LDD     R4, Z+2
   \   000000EA   8053               LDD     R5, Z+3
   \   000000EC   ....               LDI     R30, LOW((TData + 507))
   \   000000EE   ....               LDI     R31, HIGH((TData + 507))
   \   000000F0   2F08               MOV     R16, R24
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   0F00               LSL     R16
   \   000000F6   1F11               ROL     R17
   \   000000F8   0FE0               ADD     R30, R16
   \   000000FA   1FF1               ADC     R31, R17
   \   000000FC   2D02               MOV     R16, R2
   \   000000FE   E010               LDI     R17, 0
   \   00000100   0F00               LSL     R16
   \   00000102   1F11               ROL     R17
   \   00000104   0F00               LSL     R16
   \   00000106   1F11               ROL     R17
   \   00000108   9140....           LDS     R20, PortPair
   \   0000010C   E050               LDI     R21, 0
   \   0000010E   0F04               ADD     R16, R20
   \   00000110   1F15               ADC     R17, R21
   \   00000112   E14C               LDI     R20, 28
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   0FE0               ADD     R30, R16
   \   0000011C   1FF1               ADC     R31, R17
   \   0000011E   8240               ST      Z, R4
   \   00000120   8251               STD     Z+1, R5
    597                      }
    598                  }
   \                     ??ReceiveCData_2:
   \   00000122   5F6C               SUBI    R22, 252
   \   00000124   CF89               RJMP    ??ReceiveCData_1
    599              }
    600          }
   \                     ??ReceiveCData_0:
   \   00000126   E0E6               LDI     R30, 6
   \   00000128   ........           JMP     ?EPILOGUE_B6_L09
    601          
    602          /*************************************************************************
    603          *
    604          *  Receive card status  from AN_SGCNV
    605          *
    606          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    607          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002   2F60               MOV     R22, R16
    608          
    609              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
   \   00000004   2F06               MOV     R16, R22
   \   00000006   E010               LDI     R17, 0
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   ........           CALL    ?S_EC_MUL_L02
   \   00000010   01D8               MOVW    R27:R26, R17:R16
   \   00000012   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   00000014   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   00000016   91ED               LD      R30, X+
   \   00000018   91FC               LD      R31, X
   \   0000001A   9711               SBIW    R27:R26, 1
   \   0000001C   0FE2               ADD     R30, R18
   \   0000001E   1FF3               ADC     R31, R19
   \   00000020   8170               LD      R23, Z
   \   00000022   2F06               MOV     R16, R22
   \   00000024   E010               LDI     R17, 0
   \   00000026   0F00               LSL     R16
   \   00000028   1F11               ROL     R17
   \   0000002A   0F00               LSL     R16
   \   0000002C   1F11               ROL     R17
   \   0000002E   9140....           LDS     R20, PortPair
   \   00000032   E050               LDI     R21, 0
   \   00000034   0F04               ADD     R16, R20
   \   00000036   1F15               ADC     R17, R21
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003E   A773               STD     Z+43, R23
    610              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000040   2F06               MOV     R16, R22
   \   00000042   E010               LDI     R17, 0
   \   00000044   E14A               LDI     R20, 26
   \   00000046   E050               LDI     R21, 0
   \   00000048   ........           CALL    ?S_EC_MUL_L02
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000052   8502               LDD     R16, Z+10
   \   00000054   8513               LDD     R17, Z+11
   \   00000056   0F02               ADD     R16, R18
   \   00000058   1F13               ADC     R17, R19
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   8171               LDD     R23, Z+1
   \   0000005E   2F06               MOV     R16, R22
   \   00000060   E010               LDI     R17, 0
   \   00000062   0F00               LSL     R16
   \   00000064   1F11               ROL     R17
   \   00000066   0F00               LSL     R16
   \   00000068   1F11               ROL     R17
   \   0000006A   9140....           LDS     R20, PortPair
   \   0000006E   E050               LDI     R21, 0
   \   00000070   0F04               ADD     R16, R20
   \   00000072   1F15               ADC     R17, R21
   \   00000074   01F8               MOVW    R31:R30, R17:R16
   \   00000076   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000078   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007A   AB73               STD     Z+51, R23
    611          }
   \   0000007C   01D1               MOVW    R27:R26, R3:R2
   \   0000007E   9508               RET
    612          
    613          /*************************************************************************
    614          *
    615          *  Receive config data from AN_SGCNV
    616          *
    617          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    618          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   2F60               MOV     R22, R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
    619          
    620              char i, ADCh;
    621          
    622              for (i = 0; i < 14; i++) {
   \   00000006   E030               LDI     R19, 0
   \                     ??ReceiveConfigData_0:
   \   00000008   303E               CPI     R19, 14
   \   0000000A   F008               BRCS    $+2+2
   \   0000000C   C065               RJMP    ??ReceiveConfigData_1
    623                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \   0000000E   2F06               MOV     R16, R22
   \   00000010   E010               LDI     R17, 0
   \   00000012   E14A               LDI     R20, 26
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000020   8502               LDD     R16, Z+10
   \   00000022   8513               LDD     R17, Z+11
   \   00000024   0F08               ADD     R16, R24
   \   00000026   1F19               ADC     R17, R25
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   8100               LD      R16, Z
   \   0000002C   2F20               MOV     R18, R16
   \   0000002E   9601               ADIW    R25:R24, 1
    624                  if (ADCh < 14) {
   \   00000030   302E               CPI     R18, 14
   \   00000032   F008               BRCS    $+2+2
   \   00000034   C04E               RJMP    ??ReceiveConfigData_2
    625                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000036   2F06               MOV     R16, R22
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14A               LDI     R20, 26
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   8502               LDD     R16, Z+10
   \   0000004A   8513               LDD     R17, Z+11
   \   0000004C   0F08               ADD     R16, R24
   \   0000004E   1F19               ADC     R17, R25
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   8170               LD      R23, Z
   \   00000054   ....               LDI     R30, LOW((TData + 59))
   \   00000056   ....               LDI     R31, HIGH((TData + 59))
   \   00000058   2F02               MOV     R16, R18
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   0FE0               ADD     R30, R16
   \   0000005E   1FF1               ADC     R31, R17
   \   00000060   2F06               MOV     R16, R22
   \   00000062   E010               LDI     R17, 0
   \   00000064   0F00               LSL     R16
   \   00000066   1F11               ROL     R17
   \   00000068   0F00               LSL     R16
   \   0000006A   1F11               ROL     R17
   \   0000006C   9140....           LDS     R20, PortPair
   \   00000070   E050               LDI     R21, 0
   \   00000072   0F04               ADD     R16, R20
   \   00000074   1F15               ADC     R17, R21
   \   00000076   E04E               LDI     R20, 14
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   0FE0               ADD     R30, R16
   \   00000080   1FF1               ADC     R31, R17
   \   00000082   8370               ST      Z, R23
    626                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000084   2F06               MOV     R16, R22
   \   00000086   E010               LDI     R17, 0
   \   00000088   E14A               LDI     R20, 26
   \   0000008A   E050               LDI     R21, 0
   \   0000008C   ........           CALL    ?S_EC_MUL_L02
   \   00000090   01F8               MOVW    R31:R30, R17:R16
   \   00000092   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000094   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000096   8502               LDD     R16, Z+10
   \   00000098   8513               LDD     R17, Z+11
   \   0000009A   0F08               ADD     R16, R24
   \   0000009C   1F19               ADC     R17, R25
   \   0000009E   01F8               MOVW    R31:R30, R17:R16
   \   000000A0   8171               LDD     R23, Z+1
   \   000000A2   ....               LDI     R30, LOW((TData + 171))
   \   000000A4   ....               LDI     R31, HIGH((TData + 171))
   \   000000A6   2F02               MOV     R16, R18
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   0FE0               ADD     R30, R16
   \   000000AC   1FF1               ADC     R31, R17
   \   000000AE   2F06               MOV     R16, R22
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   0F00               LSL     R16
   \   000000B4   1F11               ROL     R17
   \   000000B6   0F00               LSL     R16
   \   000000B8   1F11               ROL     R17
   \   000000BA   9140....           LDS     R20, PortPair
   \   000000BE   E050               LDI     R21, 0
   \   000000C0   0F04               ADD     R16, R20
   \   000000C2   1F15               ADC     R17, R21
   \   000000C4   E04E               LDI     R20, 14
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   0FE0               ADD     R30, R16
   \   000000CE   1FF1               ADC     R31, R17
   \   000000D0   8370               ST      Z, R23
    627                  }
    628                  pointer += 2;
   \                     ??ReceiveConfigData_2:
   \   000000D2   9602               ADIW    R25:R24, 2
    629              }
   \   000000D4   9533               INC     R19
   \   000000D6   CF98               RJMP    ??ReceiveConfigData_0
    630          }
   \                     ??ReceiveConfigData_1:
   \   000000D8   01C1               MOVW    R25:R24, R3:R2
   \   000000DA   9508               RET
    631          
    632          /*************************************************************************
    633          *
    634          *  Receive eeprom data from AN_SGCNV
    635          *
    636          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    637          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    638          
    639              short i;
    640          
    641              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E342               LDI     R20, 50
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(TData + 1428) & 0xFFFF))
   \   00000018   ....               SBCI    R31, HIGH((-(TData + 1428) & 0xFFFF))
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8300               ST      Z, R16
    642              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   0000001E   E004               LDI     R16, 4
   \   00000020   9F60               MUL     R22, R16
   \   00000022   2D20               MOV     R18, R0
   \   00000024   9100....           LDS     R16, PortPair
   \   00000028   0F20               ADD     R18, R16
   \   0000002A   2F06               MOV     R16, R22
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E342               LDI     R20, 50
   \   00000030   E050               LDI     R21, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(TData + 1429) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(TData + 1429) & 0xFFFF))
   \   0000003C   8320               ST      Z, R18
    643              for (i = 2; i < (41 + 2); i++) {
   \   0000003E   E0A2               LDI     R26, 2
   \   00000040   E0B0               LDI     R27, 0
   \                     ??ReceiveCardEEPROMData_0:
   \   00000042   32AB               CPI     R26, 43
   \   00000044   E000               LDI     R16, 0
   \   00000046   07B0               CPC     R27, R16
   \   00000048   F4FC               BRGE    ??ReceiveCardEEPROMData_1
    644                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \   0000004A   2F06               MOV     R16, R22
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   E14A               LDI     R20, 26
   \   00000050   E050               LDI     R21, 0
   \   00000052   ........           CALL    ?S_EC_MUL_L02
   \   00000056   01F8               MOVW    R31:R30, R17:R16
   \   00000058   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000005C   8502               LDD     R16, Z+10
   \   0000005E   8513               LDD     R17, Z+11
   \   00000060   0F08               ADD     R16, R24
   \   00000062   1F19               ADC     R17, R25
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8120               LD      R18, Z
   \   00000068   ....               LDI     R30, LOW((TData + 1428))
   \   0000006A   ....               LDI     R31, HIGH((TData + 1428))
   \   0000006C   0FEA               ADD     R30, R26
   \   0000006E   1FFB               ADC     R31, R27
   \   00000070   2F06               MOV     R16, R22
   \   00000072   E010               LDI     R17, 0
   \   00000074   E342               LDI     R20, 50
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   0FE0               ADD     R30, R16
   \   0000007E   1FF1               ADC     R31, R17
   \   00000080   8320               ST      Z, R18
   \   00000082   9601               ADIW    R25:R24, 1
    645              }
   \   00000084   9611               ADIW    R27:R26, 1
   \   00000086   CFDD               RJMP    ??ReceiveCardEEPROMData_0
    646          }
   \                     ??ReceiveCardEEPROMData_1:
   \   00000088   E0E4               LDI     R30, 4
   \   0000008A   ........           JMP     ?EPILOGUE_B4_L09
    647          
    648          /*************************************************************************
    649          *
    650          * Build send packet header for AN-SGCNV
    651          *
    652          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    653          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   2F20               MOV     R18, R16
    654          
    655              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   E000               LDI     R16, 0
   \   00000016   8704               STD     Z+12, R16
   \   00000018   E000               LDI     R16, 0
   \   0000001A   8705               STD     Z+13, R16
    656              UART16552[ch].RxLast = 0;
   \   0000001C   2F02               MOV     R16, R18
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E14A               LDI     R20, 26
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002E   E000               LDI     R16, 0
   \   00000030   8706               STD     Z+14, R16
   \   00000032   E000               LDI     R16, 0
   \   00000034   8707               STD     Z+15, R16
    657              UART16552[ch].TxLast = 0;
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14A               LDI     R20, 26
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8304               STD     Z+4, R16
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   8305               STD     Z+5, R16
    658          
    659              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   00000050   2F02               MOV     R16, R18
   \   00000052   E010               LDI     R17, 0
   \   00000054   E14A               LDI     R20, 26
   \   00000056   E050               LDI     R21, 0
   \   00000058   ........           CALL    ?S_EC_MUL_L02
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000060   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000062   8100               LD      R16, Z
   \   00000064   8111               LDD     R17, Z+1
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   E002               LDI     R16, 2
   \   0000006A   8300               ST      Z, R16
    660              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8100               LD      R16, Z
   \   00000080   8111               LDD     R17, Z+1
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   E002               LDI     R16, 2
   \   00000086   8301               STD     Z+1, R16
    661              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   00000088   2F02               MOV     R16, R18
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009A   8100               LD      R16, Z
   \   0000009C   8111               LDD     R17, Z+1
   \   0000009E   01F8               MOVW    R31:R30, R17:R16
   \   000000A0   E000               LDI     R16, 0
   \   000000A2   8302               STD     Z+2, R16
    662              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   000000A4   2F02               MOV     R16, R18
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   E14A               LDI     R20, 26
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   ........           CALL    ?S_EC_MUL_L02
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B6   8100               LD      R16, Z
   \   000000B8   8111               LDD     R17, Z+1
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   EF0D               LDI     R16, 253
   \   000000BE   8303               STD     Z+3, R16
    663              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8100               LD      R16, Z
   \   000000D4   8111               LDD     R17, Z+1
   \   000000D6   01F8               MOVW    R31:R30, R17:R16
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   8304               STD     Z+4, R16
    664              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   000000DC   2F02               MOV     R16, R18
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E14A               LDI     R20, 26
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000EE   8100               LD      R16, Z
   \   000000F0   8111               LDD     R17, Z+1
   \   000000F2   01F8               MOVW    R31:R30, R17:R16
   \   000000F4   E000               LDI     R16, 0
   \   000000F6   8305               STD     Z+5, R16
    665          }
   \   000000F8   9508               RET
    666          
    667          /*************************************************************************
    668          *
    669          * Build  packet tail
    670          *
    671          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    672          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    673          
    674              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000006   2F08               MOV     R16, R24
   \   00000008   ....               RCALL   Uart_BuildHeader16552
    675          
    676              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   0000000A   2F08               MOV     R16, R24
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8120               LD      R18, Z
   \   0000001E   8131               LDD     R19, Z+1
   \   00000020   2F08               MOV     R16, R24
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14A               LDI     R20, 26
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8102               LDD     R16, Z+2
   \   00000034   8113               LDD     R17, Z+3
   \   00000036   0F20               ADD     R18, R16
   \   00000038   1F31               ADC     R19, R17
   \   0000003A   01F9               MOVW    R31:R30, R19:R18
   \   0000003C   E001               LDI     R16, 1
   \   0000003E   8300               ST      Z, R16
   \   00000040   2F08               MOV     R16, R24
   \   00000042   E010               LDI     R17, 0
   \   00000044   E14A               LDI     R20, 26
   \   00000046   E050               LDI     R21, 0
   \   00000048   ........           CALL    ?S_EC_MUL_L02
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000052   8102               LDD     R16, Z+2
   \   00000054   8113               LDD     R17, Z+3
   \   00000056   5F0F               SUBI    R16, 255
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   8302               STD     Z+2, R16
   \   0000005C   8313               STD     Z+3, R17
    677              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   0000005E   2F08               MOV     R16, R24
   \   00000060   E010               LDI     R17, 0
   \   00000062   E14A               LDI     R20, 26
   \   00000064   E050               LDI     R21, 0
   \   00000066   ........           CALL    ?S_EC_MUL_L02
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000070   8120               LD      R18, Z
   \   00000072   8131               LDD     R19, Z+1
   \   00000074   2F08               MOV     R16, R24
   \   00000076   E010               LDI     R17, 0
   \   00000078   E14A               LDI     R20, 26
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000084   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000086   8102               LDD     R16, Z+2
   \   00000088   8113               LDD     R17, Z+3
   \   0000008A   0F20               ADD     R18, R16
   \   0000008C   1F31               ADC     R19, R17
   \   0000008E   01F9               MOVW    R31:R30, R19:R18
   \   00000090   E000               LDI     R16, 0
   \   00000092   8300               ST      Z, R16
   \   00000094   2F08               MOV     R16, R24
   \   00000096   E010               LDI     R17, 0
   \   00000098   E14A               LDI     R20, 26
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   ........           CALL    ?S_EC_MUL_L02
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A6   8102               LDD     R16, Z+2
   \   000000A8   8113               LDD     R17, Z+3
   \   000000AA   5F0F               SUBI    R16, 255
   \   000000AC   4F1F               SBCI    R17, 255
   \   000000AE   8302               STD     Z+2, R16
   \   000000B0   8313               STD     Z+3, R17
    678          
    679              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   000000B2   2F08               MOV     R16, R24
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   E14A               LDI     R20, 26
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   ........           CALL    ?S_EC_MUL_L02
   \   000000BE   01F8               MOVW    R31:R30, R17:R16
   \   000000C0   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000C2   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000C4   8122               LDD     R18, Z+2
   \   000000C6   8133               LDD     R19, Z+3
   \   000000C8   2F23               MOV     R18, R19
   \   000000CA   E030               LDI     R19, 0
   \   000000CC   2F08               MOV     R16, R24
   \   000000CE   E010               LDI     R17, 0
   \   000000D0   E14A               LDI     R20, 26
   \   000000D2   E050               LDI     R21, 0
   \   000000D4   ........           CALL    ?S_EC_MUL_L02
   \   000000D8   01F8               MOVW    R31:R30, R17:R16
   \   000000DA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000DE   8100               LD      R16, Z
   \   000000E0   8111               LDD     R17, Z+1
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   8324               STD     Z+4, R18
    680              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   000000E6   2F08               MOV     R16, R24
   \   000000E8   E010               LDI     R17, 0
   \   000000EA   E14A               LDI     R20, 26
   \   000000EC   E050               LDI     R21, 0
   \   000000EE   ........           CALL    ?S_EC_MUL_L02
   \   000000F2   01F8               MOVW    R31:R30, R17:R16
   \   000000F4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F8   8122               LDD     R18, Z+2
   \   000000FA   8133               LDD     R19, Z+3
   \   000000FC   2F08               MOV     R16, R24
   \   000000FE   E010               LDI     R17, 0
   \   00000100   E14A               LDI     R20, 26
   \   00000102   E050               LDI     R21, 0
   \   00000104   ........           CALL    ?S_EC_MUL_L02
   \   00000108   01F8               MOVW    R31:R30, R17:R16
   \   0000010A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000010C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000010E   8100               LD      R16, Z
   \   00000110   8111               LDD     R17, Z+1
   \   00000112   01F8               MOVW    R31:R30, R17:R16
   \   00000114   8325               STD     Z+5, R18
    681          
    682          
    683              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   00000116   2F08               MOV     R16, R24
   \   00000118   E010               LDI     R17, 0
   \   0000011A   E14A               LDI     R20, 26
   \   0000011C   E050               LDI     R21, 0
   \   0000011E   ........           CALL    ?S_EC_MUL_L02
   \   00000122   01F8               MOVW    R31:R30, R17:R16
   \   00000124   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000126   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000128   8122               LDD     R18, Z+2
   \   0000012A   8133               LDD     R19, Z+3
   \   0000012C   2F08               MOV     R16, R24
   \   0000012E   ....               RCALL   CalcDSTxChecksumUART16552
   \   00000130   2F60               MOV     R22, R16
   \   00000132   2F08               MOV     R16, R24
   \   00000134   E010               LDI     R17, 0
   \   00000136   E14A               LDI     R20, 26
   \   00000138   E050               LDI     R21, 0
   \   0000013A   ........           CALL    ?S_EC_MUL_L02
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000144   8120               LD      R18, Z
   \   00000146   8131               LDD     R19, Z+1
   \   00000148   2F08               MOV     R16, R24
   \   0000014A   E010               LDI     R17, 0
   \   0000014C   E14A               LDI     R20, 26
   \   0000014E   E050               LDI     R21, 0
   \   00000150   ........           CALL    ?S_EC_MUL_L02
   \   00000154   01F8               MOVW    R31:R30, R17:R16
   \   00000156   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000158   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000015A   8102               LDD     R16, Z+2
   \   0000015C   8113               LDD     R17, Z+3
   \   0000015E   0F20               ADD     R18, R16
   \   00000160   1F31               ADC     R19, R17
   \   00000162   01F9               MOVW    R31:R30, R19:R18
   \   00000164   8360               ST      Z, R22
    684              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   00000166   2F08               MOV     R16, R24
   \   00000168   E010               LDI     R17, 0
   \   0000016A   E14A               LDI     R20, 26
   \   0000016C   E050               LDI     R21, 0
   \   0000016E   ........           CALL    ?S_EC_MUL_L02
   \   00000172   01F8               MOVW    R31:R30, R17:R16
   \   00000174   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000176   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000178   8102               LDD     R16, Z+2
   \   0000017A   8113               LDD     R17, Z+3
   \   0000017C   5F0F               SUBI    R16, 255
   \   0000017E   4F1F               SBCI    R17, 255
   \   00000180   8302               STD     Z+2, R16
   \   00000182   8313               STD     Z+3, R17
    685                                                                           // to ANSI standard !!!!
    686          
    687              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   00000184   2F08               MOV     R16, R24
   \   00000186   E010               LDI     R17, 0
   \   00000188   E14A               LDI     R20, 26
   \   0000018A   E050               LDI     R21, 0
   \   0000018C   ........           CALL    ?S_EC_MUL_L02
   \   00000190   01F8               MOVW    R31:R30, R17:R16
   \   00000192   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000194   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000196   8120               LD      R18, Z
   \   00000198   8131               LDD     R19, Z+1
   \   0000019A   2F08               MOV     R16, R24
   \   0000019C   E010               LDI     R17, 0
   \   0000019E   E14A               LDI     R20, 26
   \   000001A0   E050               LDI     R21, 0
   \   000001A2   ........           CALL    ?S_EC_MUL_L02
   \   000001A6   01F8               MOVW    R31:R30, R17:R16
   \   000001A8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001AA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001AC   8102               LDD     R16, Z+2
   \   000001AE   8113               LDD     R17, Z+3
   \   000001B0   0F20               ADD     R18, R16
   \   000001B2   1F31               ADC     R19, R17
   \   000001B4   01F9               MOVW    R31:R30, R19:R18
   \   000001B6   E003               LDI     R16, 3
   \   000001B8   8300               ST      Z, R16
   \   000001BA   2F08               MOV     R16, R24
   \   000001BC   E010               LDI     R17, 0
   \   000001BE   E14A               LDI     R20, 26
   \   000001C0   E050               LDI     R21, 0
   \   000001C2   ........           CALL    ?S_EC_MUL_L02
   \   000001C6   01F8               MOVW    R31:R30, R17:R16
   \   000001C8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001CA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001CC   8102               LDD     R16, Z+2
   \   000001CE   8113               LDD     R17, Z+3
   \   000001D0   5F0F               SUBI    R16, 255
   \   000001D2   4F1F               SBCI    R17, 255
   \   000001D4   8302               STD     Z+2, R16
   \   000001D6   8313               STD     Z+3, R17
    688              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   000001D8   2F08               MOV     R16, R24
   \   000001DA   E010               LDI     R17, 0
   \   000001DC   E14A               LDI     R20, 26
   \   000001DE   E050               LDI     R21, 0
   \   000001E0   ........           CALL    ?S_EC_MUL_L02
   \   000001E4   01F8               MOVW    R31:R30, R17:R16
   \   000001E6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001E8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001EA   8120               LD      R18, Z
   \   000001EC   8131               LDD     R19, Z+1
   \   000001EE   2F08               MOV     R16, R24
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E14A               LDI     R20, 26
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   01F8               MOVW    R31:R30, R17:R16
   \   000001FC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001FE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000200   8102               LDD     R16, Z+2
   \   00000202   8113               LDD     R17, Z+3
   \   00000204   0F20               ADD     R18, R16
   \   00000206   1F31               ADC     R19, R17
   \   00000208   01F9               MOVW    R31:R30, R19:R18
   \   0000020A   E000               LDI     R16, 0
   \   0000020C   8300               ST      Z, R16
   \   0000020E   2F08               MOV     R16, R24
   \   00000210   E010               LDI     R17, 0
   \   00000212   E14A               LDI     R20, 26
   \   00000214   E050               LDI     R21, 0
   \   00000216   ........           CALL    ?S_EC_MUL_L02
   \   0000021A   01F8               MOVW    R31:R30, R17:R16
   \   0000021C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000021E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000220   8102               LDD     R16, Z+2
   \   00000222   8113               LDD     R17, Z+3
   \   00000224   5F0F               SUBI    R16, 255
   \   00000226   4F1F               SBCI    R17, 255
   \   00000228   8302               STD     Z+2, R16
   \   0000022A   8313               STD     Z+3, R17
    689          
    690              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   0000022C   2F08               MOV     R16, R24
   \   0000022E   E010               LDI     R17, 0
   \   00000230   E14A               LDI     R20, 26
   \   00000232   E050               LDI     R21, 0
   \   00000234   ........           CALL    ?S_EC_MUL_L02
   \   00000238   01F8               MOVW    R31:R30, R17:R16
   \   0000023A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000023C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000023E   81A2               LDD     R26, Z+2
   \   00000240   81B3               LDD     R27, Z+3
   \   00000242   9711               SBIW    R27:R26, 1
   \   00000244   2F08               MOV     R16, R24
   \   00000246   E010               LDI     R17, 0
   \   00000248   E14A               LDI     R20, 26
   \   0000024A   E050               LDI     R21, 0
   \   0000024C   ........           CALL    ?S_EC_MUL_L02
   \   00000250   01F8               MOVW    R31:R30, R17:R16
   \   00000252   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000254   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000256   83A6               STD     Z+6, R26
   \   00000258   83B7               STD     Z+7, R27
    691              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   0000025A   2F08               MOV     R16, R24
   \   0000025C   E010               LDI     R17, 0
   \   0000025E   E14A               LDI     R20, 26
   \   00000260   E050               LDI     R21, 0
   \   00000262   ........           CALL    ?S_EC_MUL_L02
   \   00000266   01F8               MOVW    R31:R30, R17:R16
   \   00000268   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000026A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000026C   E001               LDI     R16, 1
   \   0000026E   E010               LDI     R17, 0
   \   00000270   8304               STD     Z+4, R16
   \   00000272   8315               STD     Z+5, R17
    692              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   00000274   2F08               MOV     R16, R24
   \   00000276   ....               RCALL   GoToSyncUART16552
    693              if (ch == 0) {                                           // Turn on TXE for channel
   \   00000278   2388               TST     R24
   \   0000027A   F4E9               BRNE    ??Uart_BuildTail16552_0
    694                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   0000027C   ....               LDI     R16, LOW(TimerUART0)
   \   0000027E   ....               LDI     R17, (TimerUART0) >> 8
   \   00000280   ........           CALL    OS_RetriggerTimer
    695                  U0_MCR |= RTS;                                    // set RTS on
   \   00000284   E0EC               LDI     R30, LOW(8716)
   \   00000286   E2F2               LDI     R31, (8716) >> 8
   \   00000288   8100               LD      R16, Z
   \   0000028A   6002               ORI     R16, 0x02
   \   0000028C   8300               ST      Z, R16
    696                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   0000028E   E104               LDI     R16, 20
   \   00000290   E010               LDI     R17, 0
   \   00000292   ........           CALL    OS_Delay
    697                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   00000296   2F08               MOV     R16, R24
   \   00000298   E010               LDI     R17, 0
   \   0000029A   E14A               LDI     R20, 26
   \   0000029C   E050               LDI     R21, 0
   \   0000029E   ........           CALL    ?S_EC_MUL_L02
   \   000002A2   01F8               MOVW    R31:R30, R17:R16
   \   000002A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000002A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000002A8   8100               LD      R16, Z
   \   000002AA   8111               LDD     R17, Z+1
   \   000002AC   01F8               MOVW    R31:R30, R17:R16
   \   000002AE   8100               LD      R16, Z
   \   000002B0   93002208           STS     8712, R16
   \   000002B4   C01E               RJMP    ??Uart_BuildTail16552_1
    698              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   000002B6   3081               CPI     R24, 1
   \   000002B8   F4E1               BRNE    ??Uart_BuildTail16552_1
    699                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   000002BA   ....               LDI     R16, LOW(TimerUART1)
   \   000002BC   ....               LDI     R17, (TimerUART1) >> 8
   \   000002BE   ........           CALL    OS_RetriggerTimer
    700                  U1_MCR |= RTS;                                      // set RTS on
   \   000002C2   E0E4               LDI     R30, LOW(8708)
   \   000002C4   E2F2               LDI     R31, (8708) >> 8
   \   000002C6   8100               LD      R16, Z
   \   000002C8   6002               ORI     R16, 0x02
   \   000002CA   8300               ST      Z, R16
    701                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   000002CC   E104               LDI     R16, 20
   \   000002CE   E010               LDI     R17, 0
   \   000002D0   ........           CALL    OS_Delay
    702                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   000002D4   2F08               MOV     R16, R24
   \   000002D6   E010               LDI     R17, 0
   \   000002D8   E14A               LDI     R20, 26
   \   000002DA   E050               LDI     R21, 0
   \   000002DC   ........           CALL    ?S_EC_MUL_L02
   \   000002E0   01F8               MOVW    R31:R30, R17:R16
   \   000002E2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000002E4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000002E6   8100               LD      R16, Z
   \   000002E8   8111               LDD     R17, Z+1
   \   000002EA   01F8               MOVW    R31:R30, R17:R16
   \   000002EC   8100               LD      R16, Z
   \   000002EE   93002200           STS     8704, R16
    703              }
    704          }
   \                     ??Uart_BuildTail16552_1:
   \   000002F2   E0E4               LDI     R30, 4
   \   000002F4   ........           JMP     ?EPILOGUE_B4_L09
    705          
    706          /*************************************************************************
    707          *
    708          * Build send request for system status on WIS
    709          *
    710          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    711          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   2F20               MOV     R18, R16
    712          
    713              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E604               LDI     R16, 100
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    714              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    715          
    716          }
   \   000000AA   9508               RET
    717          
    718          /*************************************************************************
    719          *
    720          * Build send request for WIS protocoler on WIS
    721          *
    722          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    723          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   2F20               MOV     R18, R16
   \   00000002   2F31               MOV     R19, R17
    724          
    725              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000004   2F02               MOV     R16, R18
   \   00000006   E010               LDI     R17, 0
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   ........           CALL    ?S_EC_MUL_L02
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000016   8160               LD      R22, Z
   \   00000018   8171               LDD     R23, Z+1
   \   0000001A   2F02               MOV     R16, R18
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   E14A               LDI     R20, 26
   \   00000020   E050               LDI     R21, 0
   \   00000022   ........           CALL    ?S_EC_MUL_L02
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   8113               LDD     R17, Z+3
   \   00000030   0F60               ADD     R22, R16
   \   00000032   1F71               ADC     R23, R17
   \   00000034   01FB               MOVW    R31:R30, R23:R22
   \   00000036   E606               LDI     R16, 102
   \   00000038   8300               ST      Z, R16
   \   0000003A   2F02               MOV     R16, R18
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   E14A               LDI     R20, 26
   \   00000040   E050               LDI     R21, 0
   \   00000042   ........           CALL    ?S_EC_MUL_L02
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    726              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   00000058   2F02               MOV     R16, R18
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E14A               LDI     R20, 26
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   8160               LD      R22, Z
   \   0000006C   8171               LDD     R23, Z+1
   \   0000006E   2F02               MOV     R16, R18
   \   00000070   E010               LDI     R17, 0
   \   00000072   E14A               LDI     R20, 26
   \   00000074   E050               LDI     R21, 0
   \   00000076   ........           CALL    ?S_EC_MUL_L02
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000080   8102               LDD     R16, Z+2
   \   00000082   8113               LDD     R17, Z+3
   \   00000084   0F60               ADD     R22, R16
   \   00000086   1F71               ADC     R23, R17
   \   00000088   01FB               MOVW    R31:R30, R23:R22
   \   0000008A   E001               LDI     R16, 1
   \   0000008C   8300               ST      Z, R16
   \   0000008E   2F02               MOV     R16, R18
   \   00000090   E010               LDI     R17, 0
   \   00000092   E14A               LDI     R20, 26
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A0   8102               LDD     R16, Z+2
   \   000000A2   8113               LDD     R17, Z+3
   \   000000A4   5F0F               SUBI    R16, 255
   \   000000A6   4F1F               SBCI    R17, 255
   \   000000A8   8302               STD     Z+2, R16
   \   000000AA   8313               STD     Z+3, R17
    727              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   000000AC   2F02               MOV     R16, R18
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   E14A               LDI     R20, 26
   \   000000B2   E050               LDI     R21, 0
   \   000000B4   ........           CALL    ?S_EC_MUL_L02
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BE   8160               LD      R22, Z
   \   000000C0   8171               LDD     R23, Z+1
   \   000000C2   2F02               MOV     R16, R18
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   E14A               LDI     R20, 26
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   ........           CALL    ?S_EC_MUL_L02
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D4   8102               LDD     R16, Z+2
   \   000000D6   8113               LDD     R17, Z+3
   \   000000D8   0F60               ADD     R22, R16
   \   000000DA   1F71               ADC     R23, R17
   \   000000DC   01FB               MOVW    R31:R30, R23:R22
   \   000000DE   8330               ST      Z, R19
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    728          
    729          }
   \   000000FE   9508               RET
    730          
    731          /*************************************************************************
    732          *
    733          * Build send request for measure data to Water ingress
    734          *
    735          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    736          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   2F20               MOV     R18, R16
    737          
    738              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E605               LDI     R16, 101
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    739              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    740              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    741          
    742          }
   \   000000FE   9508               RET
    743          
    744          
    745          /*************************************************************************
    746          *
    747          * Build send request for GODA measurement
    748          *
    749          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    750          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   2F20               MOV     R18, R16
    751          
    752              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   EA00               LDI     R16, 160
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    753              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    754              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    755          
    756          }
   \   000000FE   9508               RET
    757          
    758          /*************************************************************************
    759          *
    760          * Build send request for GODA device information
    761          *
    762          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    763          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   2F20               MOV     R18, R16
    764          
    765              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   EA01               LDI     R16, 161
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    766              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    767          }
   \   000000AA   9508               RET
    768          
    769          /*************************************************************************
    770          *
    771          * Build datablock to AN-SGCNV
    772          *
    773          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    774          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   2F20               MOV     R18, R16
    775          
    776              char i;
    777          
    778              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000002   E063               LDI     R22, 3
   \                     ??Uart_BuildSndData_0:
   \   00000004   E070               LDI     R23, 0
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E540               LDI     R20, 80
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(TData + 1270) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(TData + 1270) & 0xFFFF))
   \   00000018   8100               LD      R16, Z
   \   0000001A   2FE0               MOV     R30, R16
   \   0000001C   E0F0               LDI     R31, 0
   \   0000001E   9633               ADIW    R31:R30, 3
   \   00000020   176E               CP      R22, R30
   \   00000022   077F               CPC     R23, R31
   \   00000024   F5CC               BRGE    ??Uart_BuildSndData_1
    779                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \   00000026   ....               LDI     R30, LOW((TData + 1268))
   \   00000028   ....               LDI     R31, HIGH((TData + 1268))
   \   0000002A   E070               LDI     R23, 0
   \   0000002C   0FE6               ADD     R30, R22
   \   0000002E   1FF7               ADC     R31, R23
   \   00000030   2F02               MOV     R16, R18
   \   00000032   E010               LDI     R17, 0
   \   00000034   E540               LDI     R20, 80
   \   00000036   E050               LDI     R21, 0
   \   00000038   ........           CALL    ?S_EC_MUL_L02
   \   0000003C   0FE0               ADD     R30, R16
   \   0000003E   1FF1               ADC     R31, R17
   \   00000040   8130               LD      R19, Z
   \   00000042   2F02               MOV     R16, R18
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14A               LDI     R20, 26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000054   8020               LD      R2, Z
   \   00000056   8031               LDD     R3, Z+1
   \   00000058   2F02               MOV     R16, R18
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E14A               LDI     R20, 26
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   8102               LDD     R16, Z+2
   \   0000006C   8113               LDD     R17, Z+3
   \   0000006E   0E20               ADD     R2, R16
   \   00000070   1E31               ADC     R3, R17
   \   00000072   01F1               MOVW    R31:R30, R3:R2
   \   00000074   8330               ST      Z, R19
   \   00000076   2F02               MOV     R16, R18
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E14A               LDI     R20, 26
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000086   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000088   8102               LDD     R16, Z+2
   \   0000008A   8113               LDD     R17, Z+3
   \   0000008C   5F0F               SUBI    R16, 255
   \   0000008E   4F1F               SBCI    R17, 255
   \   00000090   8302               STD     Z+2, R16
   \   00000092   8313               STD     Z+3, R17
    780              }
   \   00000094   9563               INC     R22
   \   00000096   CFB6               RJMP    ??Uart_BuildSndData_0
    781              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \                     ??Uart_BuildSndData_1:
   \   00000098   2F02               MOV     R16, R18
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   E540               LDI     R20, 80
   \   0000009E   E050               LDI     R21, 0
   \   000000A0   ........           CALL    ?S_EC_MUL_L02
   \   000000A4   01F8               MOVW    R31:R30, R17:R16
   \   000000A6   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   000000A8   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   000000AA   E000               LDI     R16, 0
   \   000000AC   8300               ST      Z, R16
    782          }
   \   000000AE   9508               RET
    783          
    784          /*************************************************************************
    785          *
    786          * Build send request for measure data to AN-SGCNV
    787          *
    788          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    789          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   2F20               MOV     R18, R16
    790          
    791              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E00A               LDI     R16, 10
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    792              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    793              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    794          
    795          }
   \   000000FE   9508               RET
    796          
    797          /*************************************************************************
    798          *
    799          * Build send request for raw data to AN-SGCNV
    800          *
    801          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    802          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   2F20               MOV     R18, R16
    803          
    804              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E00D               LDI     R16, 13
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    805              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    806              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    807          
    808          }
   \   000000FE   9508               RET
    809          
    810          /*************************************************************************
    811          *
    812          * Build send request for cal data to AN-SGCNV
    813          *
    814          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    815          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   2F20               MOV     R18, R16
    816          
    817              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E100               LDI     R16, 16
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    818              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    819              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    820          
    821          }
   \   000000FE   9508               RET
    822          
    823          /*************************************************************************
    824          *
    825          * Build send request for system status on AN_SGCNV
    826          *
    827          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    828          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   2F20               MOV     R18, R16
    829          
    830              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E10B               LDI     R16, 27
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    831              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    832              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    833          
    834          }
   \   000000FE   9508               RET
    835          
    836          /*************************************************************************
    837          *
    838          * Build send request for card config on AN_SGCNV
    839          *
    840          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    841          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   2F20               MOV     R18, R16
    842          
    843              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E101               LDI     R16, 17
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    844              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    845          
    846          }
   \   000000AA   9508               RET
    847          
    848          /*************************************************************************
    849          *
    850          * Build send request for EEPROM data on AN_SGCNV
    851          *
    852          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    853          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   2F20               MOV     R18, R16
    854          
    855              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E108               LDI     R16, 24
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    856              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    857              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   000000AA   E030               LDI     R19, 0
   \   000000AC   01F9               MOVW    R31:R30, R19:R18
   \   000000AE   ....               SUBI    R30, LOW((-(TData + 1528) & 0xFFFF))
   \   000000B0   ....               SBCI    R31, HIGH((-(TData + 1528) & 0xFFFF))
   \   000000B2   8130               LD      R19, Z
   \   000000B4   2F02               MOV     R16, R18
   \   000000B6   E010               LDI     R17, 0
   \   000000B8   E14A               LDI     R20, 26
   \   000000BA   E050               LDI     R21, 0
   \   000000BC   ........           CALL    ?S_EC_MUL_L02
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000C4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000C6   8160               LD      R22, Z
   \   000000C8   8171               LDD     R23, Z+1
   \   000000CA   2F02               MOV     R16, R18
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   E14A               LDI     R20, 26
   \   000000D0   E050               LDI     R21, 0
   \   000000D2   ........           CALL    ?S_EC_MUL_L02
   \   000000D6   01F8               MOVW    R31:R30, R17:R16
   \   000000D8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000DA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000DC   8102               LDD     R16, Z+2
   \   000000DE   8113               LDD     R17, Z+3
   \   000000E0   0F60               ADD     R22, R16
   \   000000E2   1F71               ADC     R23, R17
   \   000000E4   01FB               MOVW    R31:R30, R23:R22
   \   000000E6   8330               ST      Z, R19
   \   000000E8   2F02               MOV     R16, R18
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   E14A               LDI     R20, 26
   \   000000EE   E050               LDI     R21, 0
   \   000000F0   ........           CALL    ?S_EC_MUL_L02
   \   000000F4   01F8               MOVW    R31:R30, R17:R16
   \   000000F6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000FA   8102               LDD     R16, Z+2
   \   000000FC   8113               LDD     R17, Z+3
   \   000000FE   5F0F               SUBI    R16, 255
   \   00000100   4F1F               SBCI    R17, 255
   \   00000102   8302               STD     Z+2, R16
   \   00000104   8313               STD     Z+3, R17
    858          
    859          }
   \   00000106   9508               RET
    860          /*************************************************************************
    861          *
    862          *  Receive data on USARTs
    863          *
    864          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    865          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    866          
    867              switch (UART16552[ch].RxState) {                  // check status
   \   00000006   2F08               MOV     R16, R24
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8902               LDD     R16, Z+18
   \   0000001A   5000               SUBI    R16, 0
   \   0000001C   F049               BREQ    ??ReceivePacketUart16552_0
   \   0000001E   950A               DEC     R16
   \   00000020   F041               BREQ    ??ReceivePacketUart16552_1
   \   00000022   950A               DEC     R16
   \   00000024   F409               BRNE    $+2+2
   \   00000026   C08F               RJMP    ??ReceivePacketUart16552_2
   \   00000028   5008               SUBI    R16, 8
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C110               RJMP    ??ReceivePacketUart16552_3
   \   0000002E   C10C               RJMP    ??ReceivePacketUart16552_4
    868              case SYNC :
    869                  // all functionallity in inerrupt routine
    870                  break;
   \                     ??ReceivePacketUart16552_0:
   \   00000030   C10E               RJMP    ??ReceivePacketUart16552_3
    871              case HEADER :
    872                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   00000032   2F08               MOV     R16, R24
   \   00000034   E010               LDI     R17, 0
   \   00000036   E14A               LDI     R20, 26
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000044   85A6               LDD     R26, Z+14
   \   00000046   85B7               LDD     R27, Z+15
   \   00000048   9713               SBIW    R27:R26, 3
   \   0000004A   F408               BRCC    $+2+2
   \   0000004C   C100               RJMP    ??ReceivePacketUart16552_3
    873                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    874                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000004E   2F08               MOV     R16, R24
   \   00000050   E010               LDI     R17, 0
   \   00000052   E14A               LDI     R20, 26
   \   00000054   E050               LDI     R21, 0
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000060   8502               LDD     R16, Z+10
   \   00000062   8513               LDD     R17, Z+11
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8122               LDD     R18, Z+2
   \   00000068   E030               LDI     R19, 0
   \   0000006A   2F32               MOV     R19, R18
   \   0000006C   E020               LDI     R18, 0
   \   0000006E   2F08               MOV     R16, R24
   \   00000070   E010               LDI     R17, 0
   \   00000072   E14A               LDI     R20, 26
   \   00000074   E050               LDI     R21, 0
   \   00000076   ........           CALL    ?S_EC_MUL_L02
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000080   8502               LDD     R16, Z+10
   \   00000082   8513               LDD     R17, Z+11
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   8103               LDD     R16, Z+3
   \   00000088   E010               LDI     R17, 0
   \   0000008A   0F20               ADD     R18, R16
   \   0000008C   1F31               ADC     R19, R17
   \   0000008E   2F08               MOV     R16, R24
   \   00000090   E010               LDI     R17, 0
   \   00000092   E14A               LDI     R20, 26
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A0   8B26               STD     Z+22, R18
   \   000000A2   8B37               STD     Z+23, R19
    875                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    876                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   000000A4   2F08               MOV     R16, R24
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   E14A               LDI     R20, 26
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   ........           CALL    ?S_EC_MUL_L02
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B6   8966               LDD     R22, Z+22
   \   000000B8   8977               LDD     R23, Z+23
   \   000000BA   E728               LDI     R18, 120
   \   000000BC   E030               LDI     R19, 0
   \   000000BE   2F08               MOV     R16, R24
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   E14A               LDI     R20, 26
   \   000000C4   E050               LDI     R21, 0
   \   000000C6   ........           CALL    ?S_EC_MUL_L02
   \   000000CA   01F8               MOVW    R31:R30, R17:R16
   \   000000CC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D0   8506               LDD     R16, Z+14
   \   000000D2   8517               LDD     R17, Z+15
   \   000000D4   1B20               SUB     R18, R16
   \   000000D6   0B31               SBC     R19, R17
   \   000000D8   1762               CP      R22, R18
   \   000000DA   0773               CPC     R23, R19
   \   000000DC   F580               BRCC    ??ReceivePacketUart16552_5
   \   000000DE   2F08               MOV     R16, R24
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E14A               LDI     R20, 26
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F0   89A6               LDD     R26, Z+22
   \   000000F2   89B7               LDD     R27, Z+23
   \   000000F4   9717               SBIW    R27:R26, 7
   \   000000F6   F118               BRCS    ??ReceivePacketUart16552_5
    877                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   000000F8   2F08               MOV     R16, R24
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   E14A               LDI     R20, 26
   \   000000FE   E050               LDI     R21, 0
   \   00000100   ........           CALL    ?S_EC_MUL_L02
   \   00000104   01F8               MOVW    R31:R30, R17:R16
   \   00000106   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000010A   E002               LDI     R16, 2
   \   0000010C   8B02               STD     Z+18, R16
    878                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   0000010E   2F08               MOV     R16, R24
   \   00000110   E010               LDI     R17, 0
   \   00000112   E14A               LDI     R20, 26
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   01F8               MOVW    R31:R30, R17:R16
   \   0000011C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000120   85A6               LDD     R26, Z+14
   \   00000122   85B7               LDD     R27, Z+15
   \   00000124   9611               ADIW    R27:R26, 1
   \   00000126   2F08               MOV     R16, R24
   \   00000128   E010               LDI     R17, 0
   \   0000012A   E14A               LDI     R20, 26
   \   0000012C   E050               LDI     R21, 0
   \   0000012E   ........           CALL    ?S_EC_MUL_L02
   \   00000132   01F8               MOVW    R31:R30, R17:R16
   \   00000134   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000136   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000138   8BA0               STD     Z+16, R26
   \   0000013A   8BB1               STD     Z+17, R27
   \   0000013C   C088               RJMP    ??ReceivePacketUart16552_3
    879                      } else {
    880                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
   \                     ??ReceivePacketUart16552_5:
   \   0000013E   2F08               MOV     R16, R24
   \   00000140   ........           CALL    GoToSyncUART16552
    881                      }
    882                  }
    883                  break;
   \   00000144   C084               RJMP    ??ReceivePacketUart16552_3
    884              case RECEIVE :
    885                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   00000146   2F08               MOV     R16, R24
   \   00000148   E010               LDI     R17, 0
   \   0000014A   E14A               LDI     R20, 26
   \   0000014C   E050               LDI     R21, 0
   \   0000014E   ........           CALL    ?S_EC_MUL_L02
   \   00000152   01F8               MOVW    R31:R30, R17:R16
   \   00000154   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000156   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000158   8900               LDD     R16, Z+16
   \   0000015A   8911               LDD     R17, Z+17
   \   0000015C   5F0F               SUBI    R16, 255
   \   0000015E   4F1F               SBCI    R17, 255
   \   00000160   8B00               STD     Z+16, R16
   \   00000162   8B11               STD     Z+17, R17
   \   00000164   2F08               MOV     R16, R24
   \   00000166   E010               LDI     R17, 0
   \   00000168   E14A               LDI     R20, 26
   \   0000016A   E050               LDI     R21, 0
   \   0000016C   ........           CALL    ?S_EC_MUL_L02
   \   00000170   01F8               MOVW    R31:R30, R17:R16
   \   00000172   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000174   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000176   8920               LDD     R18, Z+16
   \   00000178   8931               LDD     R19, Z+17
   \   0000017A   2F08               MOV     R16, R24
   \   0000017C   E010               LDI     R17, 0
   \   0000017E   E14A               LDI     R20, 26
   \   00000180   E050               LDI     R21, 0
   \   00000182   ........           CALL    ?S_EC_MUL_L02
   \   00000186   01F8               MOVW    R31:R30, R17:R16
   \   00000188   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000018A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000018C   8906               LDD     R16, Z+22
   \   0000018E   8917               LDD     R17, Z+23
   \   00000190   1720               CP      R18, R16
   \   00000192   0731               CPC     R19, R17
   \   00000194   F408               BRCC    $+2+2
   \   00000196   C05B               RJMP    ??ReceivePacketUart16552_3
    886                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000198   2F08               MOV     R16, R24
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   E14A               LDI     R20, 26
   \   0000019E   E050               LDI     R21, 0
   \   000001A0   ........           CALL    ?S_EC_MUL_L02
   \   000001A4   01F8               MOVW    R31:R30, R17:R16
   \   000001A6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001A8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001AA   8522               LDD     R18, Z+10
   \   000001AC   8533               LDD     R19, Z+11
   \   000001AE   2F08               MOV     R16, R24
   \   000001B0   E010               LDI     R17, 0
   \   000001B2   E14A               LDI     R20, 26
   \   000001B4   E050               LDI     R21, 0
   \   000001B6   ........           CALL    ?S_EC_MUL_L02
   \   000001BA   01F8               MOVW    R31:R30, R17:R16
   \   000001BC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001BE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001C0   8906               LDD     R16, Z+22
   \   000001C2   8917               LDD     R17, Z+23
   \   000001C4   0F20               ADD     R18, R16
   \   000001C6   1F31               ADC     R19, R17
   \   000001C8   5021               SUBI    R18, 1
   \   000001CA   4030               SBCI    R19, 0
   \   000001CC   01F9               MOVW    R31:R30, R19:R18
   \   000001CE   8100               LD      R16, Z
   \   000001D0   3003               CPI     R16, 3
   \   000001D2   F5B1               BRNE    ??ReceivePacketUart16552_6
    887                          if (CalcDSRxChecksum16552(ch)) {
   \   000001D4   2F08               MOV     R16, R24
   \   000001D6   ....               RCALL   CalcDSRxChecksum16552
   \   000001D8   2B01               OR      R16, R17
   \   000001DA   F171               BREQ    ??ReceivePacketUart16552_7
    888                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   000001DC   2F08               MOV     R16, R24
   \   000001DE   E010               LDI     R17, 0
   \   000001E0   E14A               LDI     R20, 26
   \   000001E2   E050               LDI     R21, 0
   \   000001E4   ........           CALL    ?S_EC_MUL_L02
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001EE   8502               LDD     R16, Z+10
   \   000001F0   8513               LDD     R17, Z+11
   \   000001F2   01F8               MOVW    R31:R30, R17:R16
   \   000001F4   8100               LD      R16, Z
   \   000001F6   3F0D               CPI     R16, 253
   \   000001F8   F4D9               BRNE    ??ReceivePacketUart16552_8
    889                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   000001FA   2F08               MOV     R16, R24
   \   000001FC   E010               LDI     R17, 0
   \   000001FE   E14A               LDI     R20, 26
   \   00000200   E050               LDI     R21, 0
   \   00000202   ........           CALL    ?S_EC_MUL_L02
   \   00000206   01F8               MOVW    R31:R30, R17:R16
   \   00000208   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000020A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000020C   E00A               LDI     R16, 10
   \   0000020E   8B02               STD     Z+18, R16
    890                                  if (ch == 0) {
   \   00000210   2388               TST     R24
   \   00000212   F431               BRNE    ??ReceivePacketUart16552_9
    891                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   00000214   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000216   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000218   E001               LDI     R16, 1
   \   0000021A   ........           CALL    OS_SignalEvent
   \   0000021E   C017               RJMP    ??ReceivePacketUart16552_3
    892                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_9:
   \   00000220   3081               CPI     R24, 1
   \   00000222   F4A9               BRNE    ??ReceivePacketUart16552_3
    893                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   00000224   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000226   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000228   E002               LDI     R16, 2
   \   0000022A   ........           CALL    OS_SignalEvent
   \   0000022E   C00F               RJMP    ??ReceivePacketUart16552_3
    894                                  }
    895                              } else {
    896                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
   \                     ??ReceivePacketUart16552_8:
   \   00000230   2F08               MOV     R16, R24
   \   00000232   ........           CALL    GoToSyncUART16552
   \   00000236   C00B               RJMP    ??ReceivePacketUart16552_3
    897                              }
    898                          } else {
    899                              GoToSyncUART16552(ch);                                // go to sync modus for recive
   \                     ??ReceivePacketUart16552_7:
   \   00000238   2F08               MOV     R16, R24
   \   0000023A   ........           CALL    GoToSyncUART16552
   \   0000023E   C007               RJMP    ??ReceivePacketUart16552_3
    900                          }
    901                      } else {
    902                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
   \                     ??ReceivePacketUart16552_6:
   \   00000240   2F08               MOV     R16, R24
   \   00000242   ........           CALL    GoToSyncUART16552
    903                      }
    904                  }
    905                  break;
   \   00000246   C003               RJMP    ??ReceivePacketUart16552_3
    906              case HANDLE :
    907                  break;
    908              default :
    909                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_4:
   \   00000248   2F08               MOV     R16, R24
   \   0000024A   ........           CALL    GoToSyncUART16552
    910                  break;
    911              }                                                           // end switch
    912              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_3:
   \   0000024E   2F08               MOV     R16, R24
   \   00000250   E010               LDI     R17, 0
   \   00000252   E14A               LDI     R20, 26
   \   00000254   E050               LDI     R21, 0
   \   00000256   ........           CALL    ?S_EC_MUL_L02
   \   0000025A   01F8               MOVW    R31:R30, R17:R16
   \   0000025C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000025E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000260   8506               LDD     R16, Z+14
   \   00000262   8517               LDD     R17, Z+15
   \   00000264   5F0F               SUBI    R16, 255
   \   00000266   4F1F               SBCI    R17, 255
   \   00000268   8706               STD     Z+14, R16
   \   0000026A   8717               STD     Z+15, R17
   \   0000026C   2F08               MOV     R16, R24
   \   0000026E   E010               LDI     R17, 0
   \   00000270   E14A               LDI     R20, 26
   \   00000272   E050               LDI     R21, 0
   \   00000274   ........           CALL    ?S_EC_MUL_L02
   \   00000278   01F8               MOVW    R31:R30, R17:R16
   \   0000027A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000027C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000027E   8506               LDD     R16, Z+14
   \   00000280   8517               LDD     R17, Z+15
   \   00000282   3708               CPI     R16, 120
   \   00000284   E020               LDI     R18, 0
   \   00000286   0712               CPC     R17, R18
   \   00000288   F068               BRCS    ??ReceivePacketUart16552_10
    913                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   0000028A   2F08               MOV     R16, R24
   \   0000028C   E010               LDI     R17, 0
   \   0000028E   E14A               LDI     R20, 26
   \   00000290   E050               LDI     R21, 0
   \   00000292   ........           CALL    ?S_EC_MUL_L02
   \   00000296   01F8               MOVW    R31:R30, R17:R16
   \   00000298   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000029A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000029C   E000               LDI     R16, 0
   \   0000029E   8706               STD     Z+14, R16
   \   000002A0   E000               LDI     R16, 0
   \   000002A2   8707               STD     Z+15, R16
    914              }
    915          }
   \                     ??ReceivePacketUart16552_10:
   \   000002A4   E0E4               LDI     R30, 4
   \   000002A6   ........           JMP     ?EPILOGUE_B4_L09
    916          
    917          
    918          /*************************************************************************
    919          *
    920          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    921          *
    922          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    923          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    924          
    925              unsigned short cnt;
    926              unsigned char csum;
    927          
    928              csum = 0;
   \   00000008   E060               LDI     R22, 0
    929              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   E082               LDI     R24, 2
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSTxChecksumUART16552_0:
   \   0000000E   1584               CP      R24, R4
   \   00000010   0595               CPC     R25, R5
   \   00000012   F4D8               BRCC    ??CalcDSTxChecksumUART16552_1
    930                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \   00000014   E070               LDI     R23, 0
   \   00000016   2D02               MOV     R16, R2
   \   00000018   E010               LDI     R17, 0
   \   0000001A   E14A               LDI     R20, 26
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   ........           CALL    ?S_EC_MUL_L02
   \   00000022   01D8               MOVW    R27:R26, R17:R16
   \   00000024   ....               SUBI    R26, LOW((-(UART16552) & 0xFFFF))
   \   00000026   ....               SBCI    R27, (-(UART16552) & 0xFFFF) >> 8
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9711               SBIW    R27:R26, 1
   \   0000002E   0FE8               ADD     R30, R24
   \   00000030   1FF9               ADC     R31, R25
   \   00000032   8100               LD      R16, Z
   \   00000034   E010               LDI     R17, 0
   \   00000036   2760               EOR     R22, R16
   \   00000038   2771               EOR     R23, R17
   \   0000003A   01FB               MOVW    R31:R30, R23:R22
   \   0000003C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000040   ....               LDI     R19, (crc) >> 16
   \   00000042   BF3B               OUT     0x3B, R19
   \   00000044   9166               ELPM    R22, Z
    931              }
   \   00000046   9601               ADIW    R25:R24, 1
   \   00000048   CFE2               RJMP    ??CalcDSTxChecksumUART16552_0
    932              return csum;
   \                     ??CalcDSTxChecksumUART16552_1:
   \   0000004A   2F06               MOV     R16, R22
   \   0000004C   E0E6               LDI     R30, 6
   \   0000004E   ........           JMP     ?EPILOGUE_B6_L09
    933          }
    934          
    935          /*************************************************************************
    936          *
    937          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    938          *
    939          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    940          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F20               MOV     R18, R16
    941          
    942              short cnt;
    943              unsigned char csum;
    944          
    945              csum = 0;
   \   00000006   E060               LDI     R22, 0
    946              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
   \                     ??CalcDSRxChecksum16552_0:
   \   0000000C   2F02               MOV     R16, R18
   \   0000000E   E010               LDI     R17, 0
   \   00000010   E14A               LDI     R20, 26
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?S_EC_MUL_L02
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001E   89A6               LDD     R26, Z+22
   \   00000020   89B7               LDD     R27, Z+23
   \   00000022   9712               SBIW    R27:R26, 2
   \   00000024   178A               CP      R24, R26
   \   00000026   079B               CPC     R25, R27
   \   00000028   F4D8               BRCC    ??CalcDSRxChecksum16552_1
    947                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \   0000002A   E070               LDI     R23, 0
   \   0000002C   2F02               MOV     R16, R18
   \   0000002E   E010               LDI     R17, 0
   \   00000030   E14A               LDI     R20, 26
   \   00000032   E050               LDI     R21, 0
   \   00000034   ........           CALL    ?S_EC_MUL_L02
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000003E   8502               LDD     R16, Z+10
   \   00000040   8513               LDD     R17, Z+11
   \   00000042   0F08               ADD     R16, R24
   \   00000044   1F19               ADC     R17, R25
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   8100               LD      R16, Z
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   2760               EOR     R22, R16
   \   0000004E   2771               EOR     R23, R17
   \   00000050   01FB               MOVW    R31:R30, R23:R22
   \   00000052   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000054   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000056   ....               LDI     R19, (crc) >> 16
   \   00000058   BF3B               OUT     0x3B, R19
   \   0000005A   9166               ELPM    R22, Z
    948              }
   \   0000005C   9601               ADIW    R25:R24, 1
   \   0000005E   CFD6               RJMP    ??CalcDSRxChecksum16552_0
    949              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \                     ??CalcDSRxChecksum16552_1:
   \   00000060   2F02               MOV     R16, R18
   \   00000062   E010               LDI     R17, 0
   \   00000064   E14A               LDI     R20, 26
   \   00000066   E050               LDI     R21, 0
   \   00000068   ........           CALL    ?S_EC_MUL_L02
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000070   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000072   85A2               LDD     R26, Z+10
   \   00000074   85B3               LDD     R27, Z+11
   \   00000076   2F02               MOV     R16, R18
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E14A               LDI     R20, 26
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000086   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000088   8906               LDD     R16, Z+22
   \   0000008A   8917               LDD     R17, Z+23
   \   0000008C   0FA0               ADD     R26, R16
   \   0000008E   1FB1               ADC     R27, R17
   \   00000090   9712               SBIW    R27:R26, 2
   \   00000092   01FD               MOVW    R31:R30, R27:R26
   \   00000094   8100               LD      R16, Z
   \   00000096   1760               CP      R22, R16
   \   00000098   F419               BRNE    ??CalcDSRxChecksum16552_2
    950                  return true;
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   C002               RJMP    ??CalcDSRxChecksum16552_3
    951              } else {
    952                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   000000A0   E000               LDI     R16, 0
   \   000000A2   E010               LDI     R17, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   000000A4   E0E4               LDI     R30, 4
   \   000000A6   ........           JMP     ?EPILOGUE_B4_L09
    953              }
    954          }
    955          
    956          /*************************************************************************
    957          *
    958          * Goes to sync mode
    959          *
    960          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    961          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   \   00000000   2F20               MOV     R18, R16
    962          
    963              if (ch < 2) {
   \   00000002   3022               CPI     R18, 2
   \   00000004   F580               BRCC    ??GoToSyncUART16552_0
    964                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   E000               LDI     R16, 0
   \   0000001A   8B03               STD     Z+19, R16
    965                  UART16552[ch].RxState = SYNC;
   \   0000001C   2F02               MOV     R16, R18
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E14A               LDI     R20, 26
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002E   E000               LDI     R16, 0
   \   00000030   8B02               STD     Z+18, R16
    966                  UART16552[ch].RxFirst = 0;
   \   00000032   2F02               MOV     R16, R18
   \   00000034   E010               LDI     R17, 0
   \   00000036   E14A               LDI     R20, 26
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000044   E000               LDI     R16, 0
   \   00000046   8704               STD     Z+12, R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8705               STD     Z+13, R16
    967                  UART16552[ch].RxPacklen = 0;
   \   0000004C   2F02               MOV     R16, R18
   \   0000004E   E010               LDI     R17, 0
   \   00000050   E14A               LDI     R20, 26
   \   00000052   E050               LDI     R21, 0
   \   00000054   ........           CALL    ?S_EC_MUL_L02
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000005E   E000               LDI     R16, 0
   \   00000060   8B06               STD     Z+22, R16
   \   00000062   E000               LDI     R16, 0
   \   00000064   8B07               STD     Z+23, R16
    968              }
    969          }
   \                     ??GoToSyncUART16552_0:
   \   00000066   9508               RET
    970          
    971          /*************************************************************************
    972          *
    973          *  Empty rx buffer on PC16552 UART
    974          *
    975          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    976          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
    977          
    978              switch (uartno) {
   \   00000000   2F10               MOV     R17, R16
   \   00000002   5010               SUBI    R17, 0
   \   00000004   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000006   951A               DEC     R17
   \   00000008   F049               BREQ    ??EmptyRxBuf16552_1
   \   0000000A   9508               RET
    979              case 0:
    980                  do {
    981                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000C   91102208           LDS     R17, 8712
    982                  } while (U0_LSR & DATA_READY);
   \   00000010   E0ED               LDI     R30, LOW(8717)
   \   00000012   E2F2               LDI     R31, (8717) >> 8
   \   00000014   8120               LD      R18, Z
   \   00000016   FD20               SBRC    R18, 0
   \   00000018   CFF9               RJMP    ??EmptyRxBuf16552_0
    983                  break;
   \   0000001A   9508               RET
    984              case 1:
    985                  do {
    986                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   0000001C   91102200           LDS     R17, 8704
    987                  } while (U1_LSR & DATA_READY);
   \   00000020   E0E5               LDI     R30, LOW(8709)
   \   00000022   E2F2               LDI     R31, (8709) >> 8
   \   00000024   8120               LD      R18, Z
   \   00000026   FD20               SBRC    R18, 0
   \   00000028   CFF9               RJMP    ??EmptyRxBuf16552_1
    988                  break;
    989              }
    990          }
   \   0000002A   9508               RET
    991          
    992          /*************************************************************************
    993          *
    994          *  Init the PC16552 UART
    995          *
    996          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    997          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
    998          
    999              /*--- Configure UART data block ---*/
   1000              UART16552[channel].TxFirst = 0x00;
   \   0000000A   2D04               MOV     R16, R4
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8302               STD     Z+2, R16
   \   00000020   E000               LDI     R16, 0
   \   00000022   8303               STD     Z+3, R16
   1001              UART16552[channel].TxLast = 0x00;
   \   00000024   2D04               MOV     R16, R4
   \   00000026   E010               LDI     R17, 0
   \   00000028   E14A               LDI     R20, 26
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   ........           CALL    ?S_EC_MUL_L02
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000036   E000               LDI     R16, 0
   \   00000038   8304               STD     Z+4, R16
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   8305               STD     Z+5, R16
   1002              UART16552[channel].TxCount = 0x00;
   \   0000003E   2D04               MOV     R16, R4
   \   00000040   E010               LDI     R17, 0
   \   00000042   E14A               LDI     R20, 26
   \   00000044   E050               LDI     R21, 0
   \   00000046   ........           CALL    ?S_EC_MUL_L02
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000050   E000               LDI     R16, 0
   \   00000052   8306               STD     Z+6, R16
   \   00000054   E000               LDI     R16, 0
   \   00000056   8307               STD     Z+7, R16
   1003              UART16552[channel].RxFirst = 0x00;
   \   00000058   2D04               MOV     R16, R4
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E14A               LDI     R20, 26
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   8704               STD     Z+12, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   8705               STD     Z+13, R16
   1004              UART16552[channel].RxLast = 0x00;
   \   00000072   2D04               MOV     R16, R4
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000084   E000               LDI     R16, 0
   \   00000086   8706               STD     Z+14, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8707               STD     Z+15, R16
   1005              UART16552[channel].RxCount = 0x00;
   \   0000008C   2D04               MOV     R16, R4
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   E000               LDI     R16, 0
   \   000000A0   8B00               STD     Z+16, R16
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   8B01               STD     Z+17, R16
   1006              UART16552[channel].RxState = SYNC;
   \   000000A6   2D04               MOV     R16, R4
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   E14A               LDI     R20, 26
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   ........           CALL    ?S_EC_MUL_L02
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B8   E000               LDI     R16, 0
   \   000000BA   8B02               STD     Z+18, R16
   1007              UART16552[channel].SyncCnt = 0;
   \   000000BC   2D04               MOV     R16, R4
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   E14A               LDI     R20, 26
   \   000000C2   E050               LDI     R21, 0
   \   000000C4   ........           CALL    ?S_EC_MUL_L02
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000CE   E000               LDI     R16, 0
   \   000000D0   8B03               STD     Z+19, R16
   1008              UART16552[channel].TxStatus = 0x00;
   \   000000D2   2D04               MOV     R16, R4
   \   000000D4   E010               LDI     R17, 0
   \   000000D6   E14A               LDI     R20, 26
   \   000000D8   E050               LDI     R21, 0
   \   000000DA   ........           CALL    ?S_EC_MUL_L02
   \   000000DE   01F8               MOVW    R31:R30, R17:R16
   \   000000E0   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000E2   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000E4   E000               LDI     R16, 0
   \   000000E6   8700               STD     Z+8, R16
   1009          
   1010              switch (channel) {
   \   000000E8   2D04               MOV     R16, R4
   \   000000EA   5000               SUBI    R16, 0
   \   000000EC   F021               BREQ    ??Init16552_0
   \   000000EE   950A               DEC     R16
   \   000000F0   F409               BRNE    $+2+2
   \   000000F2   C051               RJMP    ??Init16552_1
   \   000000F4   C09F               RJMP    ??Init16552_2
   1011              case 0x00 :
   1012                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   000000F6   2D04               MOV     R16, R4
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   E14A               LDI     R20, 26
   \   000000FC   E050               LDI     R21, 0
   \   000000FE   ........           CALL    ?S_EC_MUL_L02
   \   00000102   01F8               MOVW    R31:R30, R17:R16
   \   00000104   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000106   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000108   EF0A               LDI     R16, 250
   \   0000010A   E010               LDI     R17, 0
   \   0000010C   8B04               STD     Z+20, R16
   \   0000010E   8B15               STD     Z+21, R17
   1013                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   00000110   ....               LDI     R18, LOW(TxBuf16552Ch0)
   \   00000112   ....               LDI     R19, (TxBuf16552Ch0) >> 8
   \   00000114   2D04               MOV     R16, R4
   \   00000116   E010               LDI     R17, 0
   \   00000118   E14A               LDI     R20, 26
   \   0000011A   E050               LDI     R21, 0
   \   0000011C   ........           CALL    ?S_EC_MUL_L02
   \   00000120   01F8               MOVW    R31:R30, R17:R16
   \   00000122   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000124   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000126   8320               ST      Z, R18
   \   00000128   8331               STD     Z+1, R19
   1014                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   0000012A   ....               LDI     R18, LOW(RxBuf16552Ch0)
   \   0000012C   ....               LDI     R19, (RxBuf16552Ch0) >> 8
   \   0000012E   2D04               MOV     R16, R4
   \   00000130   E010               LDI     R17, 0
   \   00000132   E14A               LDI     R20, 26
   \   00000134   E050               LDI     R21, 0
   \   00000136   ........           CALL    ?S_EC_MUL_L02
   \   0000013A   01F8               MOVW    R31:R30, R17:R16
   \   0000013C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000140   8722               STD     Z+10, R18
   \   00000142   8733               STD     Z+11, R19
   1015                  U0_LCR = 0x80;          // set DLAB
   \   00000144   E800               LDI     R16, 128
   \   00000146   9300220B           STS     8715, R16
   1016                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000014A   E408               LDI     R16, 72
   \   0000014C   EE18               LDI     R17, 232
   \   0000014E   E021               LDI     R18, 1
   \   00000150   E030               LDI     R19, 0
   \   00000152   01AC               MOVW    R21:R20, R25:R24
   \   00000154   01BD               MOVW    R23:R22, R27:R26
   \   00000156   ........           CALL    ?UL_DIVMOD_L03
   \   0000015A   93002208           STS     8712, R16
   1017                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   0000015E   E408               LDI     R16, 72
   \   00000160   EE18               LDI     R17, 232
   \   00000162   E021               LDI     R18, 1
   \   00000164   E030               LDI     R19, 0
   \   00000166   01AC               MOVW    R21:R20, R25:R24
   \   00000168   01BD               MOVW    R23:R22, R27:R26
   \   0000016A   ........           CALL    ?UL_DIVMOD_L03
   \   0000016E   2F01               MOV     R16, R17
   \   00000170   E010               LDI     R17, 0
   \   00000172   93002209           STS     8713, R16
   1018                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000176   E003               LDI     R16, 3
   \   00000178   9300220B           STS     8715, R16
   1019                  U0_FCR = 0x01;          // enable FIFO ..
   \   0000017C   E001               LDI     R16, 1
   \   0000017E   9300220A           STS     8714, R16
   1020                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   00000182   EC01               LDI     R16, 193
   \   00000184   9300220A           STS     8714, R16
   1021                  U0_IER = 0x03;          // enable TX and RX int.
   \   00000188   E003               LDI     R16, 3
   \   0000018A   93002209           STS     8713, R16
   1022                  U0_MCR = 0x00;          // RTS off
   \   0000018E   E000               LDI     R16, 0
   \   00000190   9300220C           STS     8716, R16
   1023                  break;
   \   00000194   C04F               RJMP    ??Init16552_2
   1024              case 0x01 :
   1025                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   00000196   2D04               MOV     R16, R4
   \   00000198   E010               LDI     R17, 0
   \   0000019A   E14A               LDI     R20, 26
   \   0000019C   E050               LDI     R21, 0
   \   0000019E   ........           CALL    ?S_EC_MUL_L02
   \   000001A2   01F8               MOVW    R31:R30, R17:R16
   \   000001A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001A8   EF0A               LDI     R16, 250
   \   000001AA   E010               LDI     R17, 0
   \   000001AC   8B04               STD     Z+20, R16
   \   000001AE   8B15               STD     Z+21, R17
   1026                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   000001B0   ....               LDI     R18, LOW(TxBuf16552Ch1)
   \   000001B2   ....               LDI     R19, (TxBuf16552Ch1) >> 8
   \   000001B4   2D04               MOV     R16, R4
   \   000001B6   E010               LDI     R17, 0
   \   000001B8   E14A               LDI     R20, 26
   \   000001BA   E050               LDI     R21, 0
   \   000001BC   ........           CALL    ?S_EC_MUL_L02
   \   000001C0   01F8               MOVW    R31:R30, R17:R16
   \   000001C2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001C4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001C6   8320               ST      Z, R18
   \   000001C8   8331               STD     Z+1, R19
   1027                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   000001CA   ....               LDI     R18, LOW(RxBuf16552Ch1)
   \   000001CC   ....               LDI     R19, (RxBuf16552Ch1) >> 8
   \   000001CE   2D04               MOV     R16, R4
   \   000001D0   E010               LDI     R17, 0
   \   000001D2   E14A               LDI     R20, 26
   \   000001D4   E050               LDI     R21, 0
   \   000001D6   ........           CALL    ?S_EC_MUL_L02
   \   000001DA   01F8               MOVW    R31:R30, R17:R16
   \   000001DC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001DE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001E0   8722               STD     Z+10, R18
   \   000001E2   8733               STD     Z+11, R19
   1028                  U1_LCR = 0x80;          // set DLAB
   \   000001E4   E800               LDI     R16, 128
   \   000001E6   93002203           STS     8707, R16
   1029                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000001EA   E408               LDI     R16, 72
   \   000001EC   EE18               LDI     R17, 232
   \   000001EE   E021               LDI     R18, 1
   \   000001F0   E030               LDI     R19, 0
   \   000001F2   01AC               MOVW    R21:R20, R25:R24
   \   000001F4   01BD               MOVW    R23:R22, R27:R26
   \   000001F6   ........           CALL    ?UL_DIVMOD_L03
   \   000001FA   93002200           STS     8704, R16
   1030                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000001FE   E408               LDI     R16, 72
   \   00000200   EE18               LDI     R17, 232
   \   00000202   E021               LDI     R18, 1
   \   00000204   E030               LDI     R19, 0
   \   00000206   01AC               MOVW    R21:R20, R25:R24
   \   00000208   01BD               MOVW    R23:R22, R27:R26
   \   0000020A   ........           CALL    ?UL_DIVMOD_L03
   \   0000020E   2F01               MOV     R16, R17
   \   00000210   E010               LDI     R17, 0
   \   00000212   93002201           STS     8705, R16
   1031                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000216   E003               LDI     R16, 3
   \   00000218   93002203           STS     8707, R16
   1032                  U1_FCR = 0x01;          // enable FIFO ..
   \   0000021C   E001               LDI     R16, 1
   \   0000021E   93002202           STS     8706, R16
   1033                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   00000222   EC01               LDI     R16, 193
   \   00000224   93002202           STS     8706, R16
   1034                  U1_IER = 0x03;          // enable TX and RX int.
   \   00000228   E003               LDI     R16, 3
   \   0000022A   93002201           STS     8705, R16
   1035                  U1_MCR = 0x00;          // RTS off
   \   0000022E   E000               LDI     R16, 0
   \   00000230   93002204           STS     8708, R16
   1036                  break;
   1037              default:
   1038                  break;
   1039              }
   1040          }
   \                     ??Init16552_2:
   \   00000234   E0E5               LDI     R30, 5
   \   00000236   ........           JMP     ?EPILOGUE_B5_L09

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart16552>_0`:
   \   00000000   00                 DB      0
   \   00000001   01                 DB      1
   \   00000002   ....               DW      (??CheckActionUart16552_1) /2
   \   00000004   ....               DW      (??CheckActionUart16552_13) /2
   \   00000006   01                 DB      0x1
   \   00000007   ....               DW      (??CheckActionUart16552_13) /2
   \   00000009   1D                 DB      0x1d
   \   0000000A   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000C   01                 DB      0x1
   \   0000000D   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000F   01                 DB      0x1
   \   00000010   ....               DW      (??CheckActionUart16552_0) /2
   \   00000012   01                 DB      0x1
   \   00000013   ....               DW      (??CheckActionUart16552_3) /2
   \   00000015   01                 DB      0x1
   \   00000016   ....               DW      (??CheckActionUart16552_3) /2
   \   00000018   01                 DB      0x1
   \   00000019   ....               DW      (??CheckActionUart16552_3) /2
   \   0000001B   01                 DB      0x1
   \   0000001C   ....               DW      (??CheckActionUart16552_4) /2
   \   0000001E   01                 DB      0x1
   \   0000001F   ....               DW      (??CheckActionUart16552_6) /2
   \   00000021   07                 DB      0x7
   \   00000022   ....               DW      (??CheckActionUart16552_7) /2
   \   00000024   03                 DB      0x3
   \   00000025   ....               DW      (??CheckActionUart16552_5) /2
   \   00000027   02                 DB      0x2
   \   00000028   ....               DW      (??CheckActionUart16552_2) /2
   \   0000002A   4D                 DB      0x4d
   \   0000002B   ....               DW      (??CheckActionUart16552_8) /2
   \   0000002D   01                 DB      0x1
   \   0000002E   ....               DW      (??CheckActionUart16552_10) /2
   \   00000030   01                 DB      0x1
   \   00000031   ....               DW      (??CheckActionUart16552_9) /2
   \   00000033   34                 DB      0x34
   \   00000034   ....               DW      (??CheckActionUart16552_11) /2
   \   00000036   01                 DB      0x1
   \   00000037   ....               DW      (??CheckActionUart16552_12) /2
   \   00000039   FB                 DB      251

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   CalcDSRxChecksum16552
        4      2 ?S_EC_MUL_L02
      6      2   CalcDSTxChecksumUART16552
        6      2 ?S_EC_MUL_L02
      4      2   CheckActionUart16552
        4      2   -> ReceiveCData
        4      2   -> ReceiveCardEEPROMData
        4      2   -> ReceiveCardStatus
        4      2   -> ReceiveConfigData
        4      2   -> ReceivePTOData
        4      2   -> ReceiveRData
        4      2   -> ReceiveRadarData
        4      2   -> ReceiveRadarInfo
        4      2   -> ReceiveWHData
        4      2   -> ReceiveWISData
        4      2   -> ReceiveWISStatus
        4      2   -> ReceiveWISXData
        4      2 ?CV_SWITCH_L06
        4      2 ?S_EC_MUL_L02
      0      2   EmptyRxBuf16552
      6      2   ExtRS485Ctl
        6      2   -> EmptyRxBuf16552
        6      2   -> Init16552
        6      2   -> OS_Delay
        6      2   -> OS_Error
        6      2   -> OS_WaitEventTimed
        6      2   -> ReadEEPROMByte
        6      2   -> SetRS4Port
        6      2   -> Uart_BuildReqC16552
        6      2   -> Uart_BuildReqCardStatus
        6      2   -> Uart_BuildReqConfig
        6      2   -> Uart_BuildReqEEPROMData
        6      2   -> Uart_BuildReqM16552
        6      2   -> Uart_BuildReqR16552
        6      2   -> Uart_BuildReqRadarData
        6      2   -> Uart_BuildReqRadarInfo
        6      2   -> Uart_BuildReqWISCardStatus
        6      2   -> Uart_BuildReqWISData
        6      2   -> Uart_BuildReqWISXData
        6      2   -> Uart_BuildSndData
        6      2   -> Uart_BuildTail16552
        6      2 ?SS_SHR_L02
        6      2 ?S_SHL_L02
      4      2   ExtRS485Rec
        4      2   -> OS_Delay
        4      2   -> OS_Error
        4      2   -> OS_SignalEvent
        4      2   -> OS_WaitEventTimed
        4      2   -> Usart16552CheckPackage
        4      2 ?SS_SHR_L02
        4      2 ?S_SHL_L02
      0      2   GoToSyncUART16552
        0      2 ?S_EC_MUL_L02
      5      2   Init16552
        5      2 ?S_EC_MUL_L02
        5      2 ?UL_DIVMOD_L03
      6      2   ReceiveCData
        6      2 ?S_EC_MUL_L02
      4      2   ReceiveCardEEPROMData
        4      2 ?S_EC_MUL_L02
      0      2   ReceiveCardStatus
        0      2 ?S_EC_MUL_L02
      0      2   ReceiveConfigData
        0      2 ?S_EC_MUL_L02
     14      2   ReceivePTOData
       14      2   -> OS_Unuse
       14      2   -> OS_Use
       14      2 ?S_EC_MUL_L02
      4      2   ReceivePacketUart16552
        4      2   -> CalcDSRxChecksum16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_SignalEvent
        4      2 ?S_EC_MUL_L02
      6      2   ReceiveRData
        6      2 ?S_EC_MUL_L02
      8      2   ReceiveRadarData
        8      2 ?S_EC_MUL_L02
      5      2   ReceiveRadarInfo
        5      2   -> atol
        5      2 ?S_EC_MUL_L02
      5      2   ReceiveWHData
        5      2   -> OS_Unuse
        5      2   -> OS_Use
        5      2 ?S_EC_MUL_L02
        5      2 ?S_SHL_L02
      8      2   ReceiveWISData
        8      2 ?F_DIV_L04
        8      2 ?SL2F_L04
        8      2 ?S_EC_MUL_L02
        8      2 ?UL2F_L04
      0      2   ReceiveWISStatus
        0      2 ?S_EC_MUL_L02
      2      2   ReceiveWISXData
        2      2 ?S_EC_MUL_L02
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqC16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqCardStatus
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqConfig
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqEEPROMData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqM16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqR16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarInfo
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISCardStatus
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISXData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildSndData
        0      2 ?S_EC_MUL_L02
      4      2   Uart_BuildTail16552
        4      2   -> CalcDSTxChecksumUART16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_Delay
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader16552
        4      2 ?S_EC_MUL_L02
      5      2   Usart16552CheckPackage
        5      2   -> CheckActionUart16552
        5      2   -> GoToSyncUART16552
        5      2 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      58  ?<Jumptable for CheckActionUart16552>_0
     170  CalcDSRxChecksum16552
      82  CalcDSTxChecksumUART16552
     206  CheckActionUart16552
      44  EmptyRxBuf16552
    1380  ExtRS485Ctl
     704  ExtRS485Rec
     104  GoToSyncUART16552
     570  Init16552
     300  ReceiveCData
     142  ReceiveCardEEPROMData
     128  ReceiveCardStatus
     220  ReceiveConfigData
     328  ReceivePTOData
     682  ReceivePacketUart16552
     300  ReceiveRData
     330  ReceiveRadarData
     156  ReceiveRadarInfo
     472  ReceiveWHData
     352  ReceiveWISData
     196  ReceiveWISStatus
     178  ReceiveWISXData
       8  SetRS4Port
      12  TimoutUART0
      12  TimoutUART1
     250  Uart_BuildHeader16552
     256  Uart_BuildReqC16552
     256  Uart_BuildReqCardStatus
     172  Uart_BuildReqConfig
     264  Uart_BuildReqEEPROMData
     256  Uart_BuildReqM16552
     256  Uart_BuildReqR16552
     256  Uart_BuildReqRadarData
     172  Uart_BuildReqRadarInfo
     172  Uart_BuildReqWISCardStatus
     256  Uart_BuildReqWISData
     256  Uart_BuildReqWISXData
     176  Uart_BuildSndData
     760  Uart_BuildTail16552
     122  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
      2 bytes in segment ABSOLUTE
 10 956 bytes in segment CODE
     58 bytes in segment SWITCH
 
 11 014 bytes of CODE memory
      0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 3
