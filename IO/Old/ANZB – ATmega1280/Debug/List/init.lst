###############################################################################
#
# IAR C/C++ Compiler V7.10.6.1378 for Atmel AVR           30/Jul/2018  09:24:40
# Copyright 1996-2018 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 7.10
#
#    Source file  =  D:\S2Prog\IO\ANZB – ATmega1280\Src\init.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EW56A2.tmp ("D:\S2Prog\IO\ANZB –
#        ATmega1280\Src\init.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\ANZB –
#        ATmega1280\Debug\Obj" -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\ANZB – ATmega1280\Debug\List" -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB –
#        ATmega1280\INC\" -I "D:\S2Prog\IO\ANZB – ATmega1280\..\..\SHARED\INC\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB – ATmega1280\Debug\List\init.lst
#    Object file  =  D:\S2Prog\IO\ANZB – ATmega1280\Debug\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\ANZB – ATmega1280\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7c
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x75
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x47
   \   union <unnamed> volatile __io _A_OCR0A
   \                     _A_OCR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x44
   \   union <unnamed> volatile __io _A_TCCR0A
   \                     _A_TCCR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*
     14          **===========================================================================
     15          ** Init the system according to board type
     16          **===========================================================================
     17          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     18          void InitSystem(void) {
   \                     InitSystem:
     19          
     20              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   B904               OUT     0x04, R16
     21          //    PORTB   =  0xc;
     22              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000004   B103               IN      R16, 0x03
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     23              UnitID = AN_ZBANA;
   \   00000010   E001               LDI     R16, 1
   \   00000012   9300....           STS     UnitID, R16
     24          #if (OS_UART == 0)
     25              UnitID = 0x00; //AStmark  for test
     26          #endif
     27          
     28              Init_CPU();                         // init all processes
   \   00000016   ....               RCALL   Init_CPU
     29              Init_IO();
   \   00000018   ....               RCALL   Init_IO
     30              Init_TMR() ;
   \   0000001A   ....               RCALL   Init_TMR
     31          #if (OS_UART != 0)
     32              Init_USART(0, 38400) ;              // 
   \   0000001C   E040               LDI     R20, 0
   \   0000001E   E956               LDI     R21, 150
   \   00000020   E060               LDI     R22, 0
   \   00000022   E070               LDI     R23, 0
   \   00000024   E000               LDI     R16, 0
   \   00000026   ....               RCALL   Init_USART
     33          #endif
     34              Init_USART(1, 38400) ;              //    
   \   00000028   E040               LDI     R20, 0
   \   0000002A   E956               LDI     R21, 150
   \   0000002C   E060               LDI     R22, 0
   \   0000002E   E070               LDI     R23, 0
   \   00000030   E001               LDI     R16, 1
   \   00000032   ....               RCALL   Init_USART
     35              Init_AD();
   \   00000034   ....               RCALL   Init_AD
     36              Init_Values();                      // init the values in the system
   \   00000036   ....               RCALL   Init_Values
     37          
     38              ADCSRA |= 0x40 ;                     //start the AD convertion
   \   00000038   9100007A           LDS     R16, 122
   \   0000003C   6400               ORI     R16, 0x40
   \   0000003E   9300007A           STS     122, R16
     39          }
   \   00000042   9508               RET
   \   00000044                      REQUIRE _A_DDRB
   \   00000044                      REQUIRE _A_PINB
   \   00000044                      REQUIRE _A_ADCSRA
     40          
     41          /*
     42          **===========================================================================
     43          ** Init the CPU related registers
     44          **===========================================================================
     45          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     46          void Init_CPU( void ) {
   \                     Init_CPU:
     47          
     48              __disable_interrupt();
   \   00000000   94F8               CLI
     49          
     50              /*--- Configure CPU and interrupts ---*/
     51              switch (UnitID) {
   \   00000002   9100....           LDS     R16, UnitID
   \   00000006   5000               SUBI    R16, 0
   \   00000008   F019               BREQ    ??Init_CPU_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F071               BREQ    ??Init_CPU_1
   \   0000000E   C019               RJMP    ??Init_CPU_2
     52              case AN_ZB485:                  // AN-ZB485 
     53                  MCUCR = 0xc0 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_0:
   \   00000010   EC00               LDI     R16, 192
   \   00000012   BF05               OUT     0x35, R16
     54                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB0D               OUT     0x1D, R16
     55                  EICRA = 0xAf ;        // External interrupt control register, 0,1 raising, rest faling
   \   00000018   EA0F               LDI     R16, 175
   \   0000001A   9300....           STS     _A_EICRA, R16
     56                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000001E   EA0A               LDI     R16, 170
   \   00000020   9300....           STS     _A_EICRB, R16
     57                  EIMSK = 0x03 ;        // External interrupt mask register, int 0 and 1 on 
   \   00000024   E003               LDI     R16, 3
   \   00000026   BB0D               OUT     0x1D, R16
     58                  break;
   \   00000028   C00C               RJMP    ??Init_CPU_2
     59              case AN_ZBANA:                  // AN-ZBANA
     60                  MCUCR = 0x00 ;        // MCU control register wait state
   \                     ??Init_CPU_1:
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   BF05               OUT     0x35, R16
     61                  EIMSK = 0x00 ;        // External interrupt mask register , all off
   \   0000002E   E000               LDI     R16, 0
   \   00000030   BB0D               OUT     0x1D, R16
     62                  EICRA = 0xAA ;        // External interrupt control register, o on faling edge
   \   00000032   EA0A               LDI     R16, 170
   \   00000034   9300....           STS     _A_EICRA, R16
     63                  EICRB = 0xAA ;        // External interrupt control register 
   \   00000038   EA0A               LDI     R16, 170
   \   0000003A   9300....           STS     _A_EICRB, R16
     64                  EIMSK = 0x01 ;        // External interrupt mask register, int 0 on 
   \   0000003E   E001               LDI     R16, 1
   \   00000040   BB0D               OUT     0x1D, R16
     65                  break;
     66              }
     67              XMCRA = 0x00 ;       // maximum wait states
   \                     ??Init_CPU_2:
   \   00000042   E000               LDI     R16, 0
   \   00000044   9300....           STS     _A_XMCRA, R16
     68              XMCRB = 0x07 ;       // Full portC + bus keeper
   \   00000048   E007               LDI     R16, 7
   \   0000004A   9300....           STS     _A_XMCRB, R16
     69              SREG  = 0x80 ;        // global interrupt
   \   0000004E   E800               LDI     R16, 128
   \   00000050   BF0F               OUT     0x3F, R16
     70              //XDIV  = 0x00 ;     // Init valuse used 0x00v XXX
     71          
     72              RestartStatus = MCUCR;       // Remember reset source
   \   00000052   B705               IN      R16, 0x35
   \   00000054   9300....           STS     RestartStatus, R16
     73              MCUCR = 0x00;              // and reset
   \   00000058   E000               LDI     R16, 0
   \   0000005A   BF05               OUT     0x35, R16
     74              /*--- Initialize buffer ---*/
     75              WriteCount = 0;
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   9300....           STS     WriteCount, R16
     76          
     77          }
   \   00000062   9508               RET
   \   00000064                      REQUIRE _A_MCUCR
   \   00000064                      REQUIRE _A_EIMSK
   \   00000064                      REQUIRE _A_EICRA
   \   00000064                      REQUIRE _A_EICRB
   \   00000064                      REQUIRE _A_XMCRA
   \   00000064                      REQUIRE _A_XMCRB
   \   00000064                      REQUIRE _A_SREG
     78          
     79          /*
     80          **===========================================================================
     81          ** Init the watchdog registers
     82          **===========================================================================
     83          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     84          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
     85          
     86              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
     87              WDTCSR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   9300....           STS     _A_WDTCSR, R16
     88              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
     89          
     90          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCSR
     91          
     92          /*
     93          **===========================================================================
     94          ** Init the IO related registers
     95          **===========================================================================
     96          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     97          void Init_IO( void ) {
   \                     Init_IO:
     98          
     99              /*--- Initialize the data registers, output value and input pullup ---*/
    100              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F019               BREQ    ??Init_IO_0
   \   00000008   950A               DEC     R16
   \   0000000A   F0F1               BREQ    ??Init_IO_1
   \   0000000C   9508               RET
    101              case AN_ZB485:                  // AN-ZB485  
    102                  DDRA   =  0xff ;      // Port A data direction (out), external bus
   \                     ??Init_IO_0:
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   B901               OUT     0x01, R16
    103                  PORTA  =  0x00 ;      // Port A data
   \   00000012   E000               LDI     R16, 0
   \   00000014   B902               OUT     0x02, R16
    104                  DDRB   =  0x10 ;      // Port B data direction, bit 0, 4-7 out
   \   00000016   E100               LDI     R16, 16
   \   00000018   B904               OUT     0x04, R16
    105                  PORTB  =  0x00 ;      // Port B data   
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   B905               OUT     0x05, R16
    106                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   B907               OUT     0x07, R16
    107                  PORTC  =  0x00 ;      // Port C data
   \   00000022   E000               LDI     R16, 0
   \   00000024   B908               OUT     0x08, R16
    108                  DDRD   =  0x00 ;      // Port D data direction, all in except output to osc and txd
   \   00000026   E000               LDI     R16, 0
   \   00000028   B90A               OUT     0x0A, R16
    109                  PORTD  =  0xff ;      // Port D data pullup on int fro AD
   \   0000002A   EF0F               LDI     R16, 255
   \   0000002C   B90B               OUT     0x0B, R16
    110                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   0000002E   EF0E               LDI     R16, 254
   \   00000030   B90D               OUT     0x0D, R16
    111                  PORTE  =  0xf0 ;      // Port E data 
   \   00000032   EF00               LDI     R16, 240
   \   00000034   B90E               OUT     0x0E, R16
    112                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000036   E000               LDI     R16, 0
   \   00000038   BB00               OUT     0x10, R16
    113                  PORTF  =  0x00 ;      // Port F data 
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   BB01               OUT     0x11, R16
    114                  DDRG   =  0x07 ;      // Port G data direction, port 1,2,3 out
   \   0000003E   E007               LDI     R16, 7
   \   00000040   BB03               OUT     0x13, R16
    115                  PORTG  =  0x03 ;      // Port G data 
   \   00000042   E003               LDI     R16, 3
   \   00000044   BB04               OUT     0x14, R16
    116                  break;
   \   00000046   9508               RET
    117              case AN_ZBANA:                  // AN-ZBANA
    118                  DDRA   =  0x00 ;      // Port A data direction in (not used)
   \                     ??Init_IO_1:
   \   00000048   E000               LDI     R16, 0
   \   0000004A   B901               OUT     0x01, R16
    119                  PORTA  =  0x00 ;      // Port A data
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   B902               OUT     0x02, R16
    120                  DDRB   =  0xF1 ;      // Port B data direction, bit 0, 4-7 out
   \   00000050   EF01               LDI     R16, 241
   \   00000052   B904               OUT     0x04, R16
    121                  PORTB  =  0x00 ;      // Port B data   
   \   00000054   E000               LDI     R16, 0
   \   00000056   B905               OUT     0x05, R16
    122                  DDRC   =  0xFF ;      // Port C data direction, all out
   \   00000058   EF0F               LDI     R16, 255
   \   0000005A   B907               OUT     0x07, R16
    123                  PORTC  =  0x00 ;      // Port C data
   \   0000005C   E000               LDI     R16, 0
   \   0000005E   B908               OUT     0x08, R16
    124                  DDRD   =  0x02 ;      // Port D data direction, all in except output to osc and txd
   \   00000060   E002               LDI     R16, 2
   \   00000062   B90A               OUT     0x0A, R16
    125                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD
   \   00000064   EF01               LDI     R16, 241
   \   00000066   B90B               OUT     0x0B, R16
    126                  DDRE   =  0x0E ;      // Port E data direction, all out except rxd(bit 0) and bit 4,5,6,7 ( for address dial)
   \   00000068   E00E               LDI     R16, 14
   \   0000006A   B90D               OUT     0x0D, R16
    127                  PORTE  =  0x00 ;      // Port E data 
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   B90E               OUT     0x0E, R16
    128                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000070   E000               LDI     R16, 0
   \   00000072   BB00               OUT     0x10, R16
    129                  PORTF  =  0x00 ;      // Port F data 
   \   00000074   E000               LDI     R16, 0
   \   00000076   BB01               OUT     0x11, R16
    130                  DDRG   =  0x10 ;      // Port G data direction, bit 5 out
   \   00000078   E100               LDI     R16, 16
   \   0000007A   BB03               OUT     0x13, R16
    131                  PORTG  =  0x00 ;      // Port G data 
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   BB04               OUT     0x14, R16
    132                  break;
    133              default:
    134                  break;
    135              }    
    136          }
   \   00000080   9508               RET
   \   00000082                      REQUIRE _A_DDRA
   \   00000082                      REQUIRE _A_PORTA
   \   00000082                      REQUIRE _A_DDRB
   \   00000082                      REQUIRE _A_PORTB
   \   00000082                      REQUIRE _A_DDRC
   \   00000082                      REQUIRE _A_PORTC
   \   00000082                      REQUIRE _A_DDRD
   \   00000082                      REQUIRE _A_PORTD
   \   00000082                      REQUIRE _A_DDRE
   \   00000082                      REQUIRE _A_PORTE
   \   00000082                      REQUIRE _A_DDRF
   \   00000082                      REQUIRE _A_PORTF
   \   00000082                      REQUIRE _A_DDRG
   \   00000082                      REQUIRE _A_PORTG
    137          
    138          /*
    139          **===========================================================================
    140          ** Init the timer related registers
    141          **===========================================================================
    142          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    143          void Init_TMR( void ) {
   \                     Init_TMR:
    144              /*--- Timer control (disable clock inputs) ---*/
    145          
    146              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F019               BREQ    ??Init_TMR_0
   \   00000008   950A               DEC     R16
   \   0000000A   F031               BREQ    ??Init_TMR_1
   \   0000000C   9508               RET
    147              case AN_ZB485:                  // AN-ZB485
    148                  TCCR0A   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_0:
   \   0000000E   E909               LDI     R16, 153
   \   00000010   BD04               OUT     0x24, R16
    149                  OCR0A    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
   \   00000012   E003               LDI     R16, 3
   \   00000014   BD07               OUT     0x27, R16
    150                  break;
   \   00000016   9508               RET
    151              case AN_ZBANA:                  // AN-ZBANA
    152                  TCCR0A   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_1:
   \   00000018   E909               LDI     R16, 153
   \   0000001A   BD04               OUT     0x24, R16
    153                  OCR0A    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
   \   0000001C   E007               LDI     R16, 7
   \   0000001E   BD07               OUT     0x27, R16
    154                  break;
    155              default:
    156                  break;
    157              }
    158          
    159          } 
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_TCCR0A
   \   00000022                      REQUIRE _A_OCR0A
    160          
    161          /*
    162          **===========================================================================
    163          ** Init the USARTs registers
    164          **===========================================================================
    165          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    166          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
    167          
    168          
    169              /*--- Configure UART data block ---*/
    170              UART[channel].TxFirst   = 0x00;
   \   0000000A   2D04               MOV     R16, R4
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8302               STD     Z+2, R16
   \   00000020   E000               LDI     R16, 0
   \   00000022   8303               STD     Z+3, R16
    171              UART[channel].TxLast    = 0x00;
   \   00000024   2D04               MOV     R16, R4
   \   00000026   E010               LDI     R17, 0
   \   00000028   E14A               LDI     R20, 26
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   ........           CALL    ?S_EC_MUL_L02
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000036   E000               LDI     R16, 0
   \   00000038   8304               STD     Z+4, R16
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   8305               STD     Z+5, R16
    172              UART[channel].TxCount   = 0x00;
   \   0000003E   2D04               MOV     R16, R4
   \   00000040   E010               LDI     R17, 0
   \   00000042   E14A               LDI     R20, 26
   \   00000044   E050               LDI     R21, 0
   \   00000046   ........           CALL    ?S_EC_MUL_L02
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000050   E000               LDI     R16, 0
   \   00000052   8306               STD     Z+6, R16
   \   00000054   E000               LDI     R16, 0
   \   00000056   8307               STD     Z+7, R16
    173              UART[channel].RxFirst   = 0x00;
   \   00000058   2D04               MOV     R16, R4
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E14A               LDI     R20, 26
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   8704               STD     Z+12, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   8705               STD     Z+13, R16
    174              UART[channel].RxLast    = 0x00;
   \   00000072   2D04               MOV     R16, R4
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   E000               LDI     R16, 0
   \   00000086   8706               STD     Z+14, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8707               STD     Z+15, R16
    175              UART[channel].RxCount   = 0x00;
   \   0000008C   2D04               MOV     R16, R4
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009E   E000               LDI     R16, 0
   \   000000A0   8B00               STD     Z+16, R16
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   8B01               STD     Z+17, R16
    176              UART[channel].RxState   = SYNC;
   \   000000A6   2D04               MOV     R16, R4
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   E14A               LDI     R20, 26
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   ........           CALL    ?S_EC_MUL_L02
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B8   E000               LDI     R16, 0
   \   000000BA   8B02               STD     Z+18, R16
    177              UART[channel].SyncCnt   = 0 ;
   \   000000BC   2D04               MOV     R16, R4
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   E14A               LDI     R20, 26
   \   000000C2   E050               LDI     R21, 0
   \   000000C4   ........           CALL    ?S_EC_MUL_L02
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000CE   E000               LDI     R16, 0
   \   000000D0   8B03               STD     Z+19, R16
    178              UART[channel].TxStatus  = 0x00;
   \   000000D2   2D04               MOV     R16, R4
   \   000000D4   E010               LDI     R17, 0
   \   000000D6   E14A               LDI     R20, 26
   \   000000D8   E050               LDI     R21, 0
   \   000000DA   ........           CALL    ?S_EC_MUL_L02
   \   000000DE   01F8               MOVW    R31:R30, R17:R16
   \   000000E0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E4   E000               LDI     R16, 0
   \   000000E6   8700               STD     Z+8, R16
    179          
    180              switch (channel) {
   \   000000E8   2D04               MOV     R16, R4
   \   000000EA   5000               SUBI    R16, 0
   \   000000EC   F021               BREQ    ??Init_USART_0
   \   000000EE   950A               DEC     R16
   \   000000F0   F409               BRNE    $+2+2
   \   000000F2   C04B               RJMP    ??Init_USART_1
   \   000000F4   C093               RJMP    ??Init_USART_2
    181              case 0x00 :          
    182                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   000000F6   2D04               MOV     R16, R4
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   E14A               LDI     R20, 26
   \   000000FC   E050               LDI     R21, 0
   \   000000FE   ........           CALL    ?S_EC_MUL_L02
   \   00000102   01F8               MOVW    R31:R30, R17:R16
   \   00000104   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000106   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000108   EF0A               LDI     R16, 250
   \   0000010A   E010               LDI     R17, 0
   \   0000010C   8B04               STD     Z+20, R16
   \   0000010E   8B15               STD     Z+21, R17
    183                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   00000110   ....               LDI     R18, LOW(TxBufferCh0)
   \   00000112   ....               LDI     R19, (TxBufferCh0) >> 8
   \   00000114   2D04               MOV     R16, R4
   \   00000116   E010               LDI     R17, 0
   \   00000118   E14A               LDI     R20, 26
   \   0000011A   E050               LDI     R21, 0
   \   0000011C   ........           CALL    ?S_EC_MUL_L02
   \   00000120   01F8               MOVW    R31:R30, R17:R16
   \   00000122   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000124   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000126   8320               ST      Z, R18
   \   00000128   8331               STD     Z+1, R19
    184                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   0000012A   ....               LDI     R18, LOW(RxBufferCh0)
   \   0000012C   ....               LDI     R19, (RxBufferCh0) >> 8
   \   0000012E   2D04               MOV     R16, R4
   \   00000130   E010               LDI     R17, 0
   \   00000132   E14A               LDI     R20, 26
   \   00000134   E050               LDI     R21, 0
   \   00000136   ........           CALL    ?S_EC_MUL_L02
   \   0000013A   01F8               MOVW    R31:R30, R17:R16
   \   0000013C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000140   8722               STD     Z+10, R18
   \   00000142   8733               STD     Z+11, R19
    185                  UCSR0A  = 0x00; 
   \   00000144   E000               LDI     R16, 0
   \   00000146   9300....           STS     _A_UCSR0A, R16
    186                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000014A   E400               LDI     R16, 64
   \   0000014C   E412               LDI     R17, 66
   \   0000014E   E02F               LDI     R18, 15
   \   00000150   E030               LDI     R19, 0
   \   00000152   01AC               MOVW    R21:R20, R25:R24
   \   00000154   01BD               MOVW    R23:R22, R27:R26
   \   00000156   ........           CALL    ?UL_DIVMOD_L03
   \   0000015A   950A               DEC     R16
   \   0000015C   9300....           STS     _A_UBRR0, R16
    187                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   00000160   E400               LDI     R16, 64
   \   00000162   E412               LDI     R17, 66
   \   00000164   E02F               LDI     R18, 15
   \   00000166   E030               LDI     R19, 0
   \   00000168   01AC               MOVW    R21:R20, R25:R24
   \   0000016A   01BD               MOVW    R23:R22, R27:R26
   \   0000016C   ........           CALL    ?UL_DIVMOD_L03
   \   00000170   5001               SUBI    R16, 1
   \   00000172   4010               SBCI    R17, 0
   \   00000174   2F01               MOV     R16, R17
   \   00000176   E010               LDI     R17, 0
   \   00000178   930000C5           STS     197, R16
    188                  UCSR0B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   0000017C   EB08               LDI     R16, 184
   \   0000017E   9300....           STS     _A_UCSR0B, R16
    189                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000182   E006               LDI     R16, 6
   \   00000184   9300....           STS     _A_UCSR0C, R16
    190                  break;
   \   00000188   C049               RJMP    ??Init_USART_2
    191              case 0x01 :
    192                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   0000018A   2D04               MOV     R16, R4
   \   0000018C   E010               LDI     R17, 0
   \   0000018E   E14A               LDI     R20, 26
   \   00000190   E050               LDI     R21, 0
   \   00000192   ........           CALL    ?S_EC_MUL_L02
   \   00000196   01F8               MOVW    R31:R30, R17:R16
   \   00000198   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000019A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000019C   EF0A               LDI     R16, 250
   \   0000019E   E010               LDI     R17, 0
   \   000001A0   8B04               STD     Z+20, R16
   \   000001A2   8B15               STD     Z+21, R17
    193                  UART[channel].pTxBuffer = TxBufferCh1;
   \   000001A4   ....               LDI     R18, LOW(TxBufferCh1)
   \   000001A6   ....               LDI     R19, (TxBufferCh1) >> 8
   \   000001A8   2D04               MOV     R16, R4
   \   000001AA   E010               LDI     R17, 0
   \   000001AC   E14A               LDI     R20, 26
   \   000001AE   E050               LDI     R21, 0
   \   000001B0   ........           CALL    ?S_EC_MUL_L02
   \   000001B4   01F8               MOVW    R31:R30, R17:R16
   \   000001B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001BA   8320               ST      Z, R18
   \   000001BC   8331               STD     Z+1, R19
    194                  UART[channel].pRxBuffer = RxBufferCh1;
   \   000001BE   ....               LDI     R18, LOW(RxBufferCh1)
   \   000001C0   ....               LDI     R19, (RxBufferCh1) >> 8
   \   000001C2   2D04               MOV     R16, R4
   \   000001C4   E010               LDI     R17, 0
   \   000001C6   E14A               LDI     R20, 26
   \   000001C8   E050               LDI     R21, 0
   \   000001CA   ........           CALL    ?S_EC_MUL_L02
   \   000001CE   01F8               MOVW    R31:R30, R17:R16
   \   000001D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D4   8722               STD     Z+10, R18
   \   000001D6   8733               STD     Z+11, R19
    195                  UCSR1A  = 0x00; 
   \   000001D8   E000               LDI     R16, 0
   \   000001DA   9300....           STS     _A_UCSR1A, R16
    196                  UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   000001DE   E400               LDI     R16, 64
   \   000001E0   E412               LDI     R17, 66
   \   000001E2   E02F               LDI     R18, 15
   \   000001E4   E030               LDI     R19, 0
   \   000001E6   01AC               MOVW    R21:R20, R25:R24
   \   000001E8   01BD               MOVW    R23:R22, R27:R26
   \   000001EA   ........           CALL    ?UL_DIVMOD_L03
   \   000001EE   950A               DEC     R16
   \   000001F0   9300....           STS     _A_UBRR1, R16
    197                  UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   000001F4   E400               LDI     R16, 64
   \   000001F6   E412               LDI     R17, 66
   \   000001F8   E02F               LDI     R18, 15
   \   000001FA   E030               LDI     R19, 0
   \   000001FC   01AC               MOVW    R21:R20, R25:R24
   \   000001FE   01BD               MOVW    R23:R22, R27:R26
   \   00000200   ........           CALL    ?UL_DIVMOD_L03
   \   00000204   5001               SUBI    R16, 1
   \   00000206   4010               SBCI    R17, 0
   \   00000208   2F01               MOV     R16, R17
   \   0000020A   E010               LDI     R17, 0
   \   0000020C   930000CD           STS     205, R16
    198                  UCSR1B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   00000210   EB08               LDI     R16, 184
   \   00000212   9300....           STS     _A_UCSR1B, R16
    199                  UCSR1C  = 0x06;       /* n,8,1 */
   \   00000216   E006               LDI     R16, 6
   \   00000218   9300....           STS     _A_UCSR1C, R16
    200                  break;
    201              default:
    202                  break ;
    203              }    
    204          }
   \                     ??Init_USART_2:
   \   0000021C   E0E5               LDI     R30, 5
   \   0000021E   ........           JMP     ?EPILOGUE_B5_L09
   \   00000222                      REQUIRE _A_UCSR0A
   \   00000222                      REQUIRE _A_UBRR0
   \   00000222                      REQUIRE _A_UCSR0B
   \   00000222                      REQUIRE _A_UCSR0C
   \   00000222                      REQUIRE _A_UCSR1A
   \   00000222                      REQUIRE _A_UBRR1
   \   00000222                      REQUIRE _A_UCSR1B
   \   00000222                      REQUIRE _A_UCSR1C
    205          
    206          
    207          /*
    208          **===========================================================================
    209          ** Init the AD converter registers
    210          **===========================================================================
    211          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    212          void Init_AD( void ) {
   \                     Init_AD:
    213          
    214              char i;     
    215              for (i = 0; i<8; i++) {                 // Init variables
   \   00000000   E000               LDI     R16, 0
   \                     ??Init_AD_0:
   \   00000002   3008               CPI     R16, 8
   \   00000004   F468               BRCC    ??Init_AD_1
    216                  ADInt.Result[i] = 0;                   // convertion resluts
   \   00000006   2F20               MOV     R18, R16
   \   00000008   E030               LDI     R19, 0
   \   0000000A   0F22               LSL     R18
   \   0000000C   1F33               ROL     R19
   \   0000000E   01F9               MOVW    R31:R30, R19:R18
   \   00000010   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   00000014   E010               LDI     R17, 0
   \   00000016   8310               ST      Z, R17
   \   00000018   E010               LDI     R17, 0
   \   0000001A   8311               STD     Z+1, R17
    217              }
   \   0000001C   9503               INC     R16
   \   0000001E   CFF1               RJMP    ??Init_AD_0
    218              ADChannel = 0x00 ;                      // AD channel to be converted
   \                     ??Init_AD_1:
   \   00000020   E010               LDI     R17, 0
   \   00000022   9310....           STS     ADChannel, R17
    219              ADMUX   = 0xc0 ;                        // Ref = 2,56V, right adjust
   \   00000026   EC10               LDI     R17, 192
   \   00000028   9310....           STS     _A_ADMUX, R17
    220              ADCSRA   = 0x8f ;                        // AD enabled, int enabled, xtal / 128
   \   0000002C   E81F               LDI     R17, 143
   \   0000002E   9310....           STS     _A_ADCSRA, R17
    221          }
   \   00000032   9508               RET
   \   00000034                      REQUIRE _A_ADMUX
   \   00000034                      REQUIRE _A_ADCSRA
    222          
    223          /*
    224          **===========================================================================
    225          ** Init values  in the system
    226          **===========================================================================
    227          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    228          void Init_Values(void) {
   \                     Init_Values:
    229          
    230          
    231          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   InitSystem
        0      2   -> Init_AD
        0      2   -> Init_CPU
        0      2   -> Init_IO
        0      2   -> Init_TMR
        0      2   -> Init_USART
        0      2   -> Init_Values
      0      2   Init_AD
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      5      2   Init_USART
        5      2 ?S_EC_MUL_L02
        5      2 ?UL_DIVMOD_L03
      0      2   Init_Values
      0      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      68  InitSystem
      52  Init_AD
     100  Init_CPU
     130  Init_IO
      34  Init_TMR
     546  Init_USART
       2  Init_Values
      18  Init_Watchdog
       1  _A_ADCSRA
       1  _A_ADMUX
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_OCR0A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR0A
       2  _A_UBRR0
       2  _A_UBRR1
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_WDTCSR
       1  _A_XMCRA
       1  _A_XMCRB

 
  37 bytes in segment ABSOLUTE
 950 bytes in segment CODE
 
 950 bytes of CODE memory
   0 bytes of DATA memory (+ 37 bytes shared)

Errors: none
Warnings: none
