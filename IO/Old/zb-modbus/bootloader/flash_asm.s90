	NAME	assembly(16)
	PUBLIC	fill_temp_buffer
	PUBLIC	do_spm
	PUBLIC	write_lock_bits
	PUBLIC  read_program_memory
	RSEG	CODE


#ifdef __ATMEGA_1280__
#include	"iom1280.h"
#endif

#ifdef __ATMEGA_1281__
#include	"iom1281.h"
#endif

do_spm:
        RCALL   WAIT_SPMEN  ;Wait for SPMEN flag cleared
        MOV     R31,R17         
        MOV     R30,R16     ;move adress to z pointer (R31=ZH R30=ZL)
        OUT SPMCSR, R18     ; argument 2 decides function (r18)
        SPM
        RJMP    WAIT_SPMEN ;Wait for SPMEN flag cleared


fill_temp_buffer:
        RCALL   WAIT_SPMEN  ;Wait for SPMEN flag cleared
        MOV     R31,R19     ;move adress to z pointer (R31=ZH R30=ZL)   
        MOV     R30,R18     
        MOV     R1,R17      ;move data to reg 0 and 1      
        MOV     R0,R16
        
        LDI     R18,(1<<SPMEN)
        OUT SPMCSR, R18    ; r18 decides function
        SPM
        RJMP   WAIT_SPMEN  ;Wait for SPMEN flag cleared


read_program_memory:
        RCALL    WAIT_SPMEN
        MOV     R31,R17     ;R31=ZH R30=ZL
        MOV     R30,R16     ;move adress to z pointer
        SBRC    R18,0       ;read lockbits? (second argument=0x09)
                            ;if so, place second argument in SPMEN register
        OUT SPMCSR, R18     ; r18 decides function
        
        ELPM                ;read LSB        

        MOV     R16,R0      ;read LSB           
        INC     R30

        ELPM                ;read LSB        

        MOV     R17,R0      ;read MSB (ignored when reading lockbits)
        RET


write_lock_bits:
        RCALL   WAIT_SPMEN  ;Wait for SPMEN flag cleared
        MOV     R0,R16   
        LDI     R18,((1<<BLBSET)|(1<<SPMEN))

        OUT SPMCSR, R18    ; r18 decides function
        SPM                ;write lockbits
        RJMP   WAIT_SPMEN  ;Wait for SPMEN flag cleared
        

WAIT_SPMEN:
	MOV		R0, R18
        IN R18, SPMCSR      ; get SPMCR into r18
        SBRC    R18,SPMEN
        RJMP    WAIT_SPMEN  ;Wait for SPMEN flag cleared
        MOV		R18, R0

        RET


END
