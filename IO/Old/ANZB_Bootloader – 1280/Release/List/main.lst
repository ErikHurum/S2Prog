###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       12/Dec/2022  12:54:01
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\main.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWDD40.tmp
#        ("D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\main.c" --cpu=m1280 -ms -o
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\Release\Obj" -D SPEED=38400 -lC
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\Release\List" -y
#        --initializers_in_flash --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\INC\\" -I
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\..\..\SHARED\INC\\" --eeprom_size
#        4096 --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Release\List\main.lst
#    Object file  =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Release\Obj\main.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\main.c
      1          /*****************************************************************************
      2          *
      3          * Copyright (C) 2004 Scanjet Ariston AS
      4          *
      5          * File          : main.c
      6          * Compiler      : IAR EWAAVR 2.28a
      7          * Output size   : 
      8          * Created       : 8-oct-03
      9          *              
     10          ****************************************************************************/
     11          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x9c
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1
     12          #include "stdio.h"
     13          #include "math.h"
     14          #include "defines.h"
     15          #include "assembly.h"
     16          #include "variables.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   void (*__near AppStart)(void)
   \                     AppStart:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char UnitID
   \                     UnitID:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char ResetStatus
   \                     ResetStatus:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   UARTDataType UART[2]
   \                     UART:
   \   00000000                      DS8 58

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char TxBufferCh0[350]
   \                     TxBufferCh0:
   \   00000000                      DS8 350

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RxBufferCh0[350]
   \                     RxBufferCh0:
   \   00000000                      DS8 350

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char TxBufferCh1[350]
   \                     TxBufferCh1:
   \   00000000                      DS8 350

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RxBufferCh1[350]
   \                     RxBufferCh1:
   \   00000000                      DS8 350

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char WriteCount
   \                     WriteCount:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char *__near pWriteBuffer
   \                     pWriteBuffer:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RestoreStat
   \                     RestoreStat:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char hostAddress
   \                     hostAddress:
   \   00000000                      DS8 1

   \                                 In  segment FAR_F, align 1, keep-with-next
   \   char const __farflash crc[256]
   \                     crc:
   \   00000000   5E00E2BC3F61       DC8 0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31
   \              83DD9CC2207E
   \              FDA31F      
   \   0000000F   9D4121C3FC7F       DC8 65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96
   \              40A25F1EE301
   \              3EBD60      
   \   0000001E   DC827D23C19F       DC8 130, 220, 35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128
   \              1C42A0FEBFE1
   \              035D80      
   \   0000002D   3CDEBE6202E0       DC8 222, 60, 98, 190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158
   \              DF5C63817C3D
   \              C0229E      
   \   0000003C   431DFFA11846       DC8 29, 67, 161, 255, 70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56
   \              A4FA7927C59B
   \              DA8438      
   \   0000004B   E56659BBDB07       DC8 102, 229, 187, 89, 7, 219, 133, 103, 57, 186, 228, 6, 88, 25, 71
   \              6785BA3906E4
   \              195847      
   \   0000005A   FBA526789AC4       DC8 165, 251, 120, 38, 196, 154, 101, 59, 217, 135, 4, 90, 184, 230
   \              3B6587D95A04
   \              E6B8        
   \   00000068   F9A7451B98C6       DC8 167, 249, 27, 69, 198, 152, 122, 36, 248, 166, 68, 26, 153, 199, 37
   \              247AA6F81A44
   \              C79925      
   \   00000077   3A7B86645BD8       DC8 123, 58, 100, 134, 216, 91, 5, 231, 185, 140, 210, 48, 110, 237
   \              E7058CB930D2
   \              ED6E        
   \   00000085   51B34E0FF210       DC8 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205, 17, 79, 173, 243
   \              2FAC937111CD
   \              AD4FF3      
   \   00000094   2E7092CC8DD3       DC8 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80, 175, 241
   \              316FECB2500E
   \              F1AF        
   \   000000A2   4D1390CE2C72       DC8 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238, 50
   \              336D8FD1520C
   \              EEB032      
   \   000000B1   8E6C53D0EF0D       DC8 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45
   \              F0B14CAE9112
   \              2DCF        
   \   000000BF   CA737694AB28       DC8 115, 202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55
   \              17F50849B456
   \              69EA37      
   \   000000CE   8BD50957B5EB       DC8 213, 139, 87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119
   \              6836D48ACB95
   \              7729        
   \   000000DC   AAF41648B7E9       DC8 244, 170, 72, 22, 233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151
   \              0B55D6886A34
   \              752B97      
   \   000000EB   4AC9F61474A8       DC8 201, 74, 20, 246, 168, 116, 42, 200, 150, 21, 75, 169, 247, 182
   \              C82A1596A94B
   \              B6F7        
   \   000000F9   0AE8D7546B89       DC8 232, 10, 84, 215, 137, 107, 53
   \              35          
     17          
     18          

   \                                 In  segment CODE, align 2, keep-with-next
     19          __C_task void main(void){
   \                     main:
     20          
     21              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
   \                     ??main_0:
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??main_0
     22                  ;
     23              EEARL = (0x0fff & 0xff);                // check high byte of eeprom 
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB0E               OUT     0x1E, R16
     24              EEARH = (0x0fff >> 8);                  // if date = 0xaa enter uploader mode
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   BB0F               OUT     0x1F, R16
     25              EECR |= (1<<EERE);                      // else jump to program
   \   0000000C   9AE0               SBI     0x1C, 0x00
     26              if (EEDR != 0xaa ) {
   \   0000000E   B30D               IN      R16, 0x1D
   \   00000010   3A0A               CPI     R16, 170
   \   00000012   F0E1               BREQ    ??main_1
     27                  InitSystem();                       // Init the system
   \   00000014   ........           CALL    InitSystem
     28                  GoToSyncUART(0) ;                   // go to sync modus for recive
   \   00000018   E000               LDI     R16, 0
   \   0000001A   ........           CALL    GoToSyncUART
     29                  UART_DATA_REG0 ;                    // read dummy byte
   \   0000001E   B10C               IN      R16, 0x0C
     30                  GoToSyncUART(1) ;                   // go to sync modus for recive
   \   00000020   E001               LDI     R16, 1
   \   00000022   ........           CALL    GoToSyncUART
     31                  UART_DATA_REG1 ;                    // read dummy byte
   \   00000026   9100....           LDS     R16, _A_UDR1
     32                  for(;;) {                           // suuuuuuperloooop here!!
     33                      recchar();
   \                     ??main_2:
   \   0000002A   ........           CALL    recchar
     34                       if(UART[0].RxState == HANDLE){ // Package OK ch 0
   \   0000002E   9100....           LDS     R16, (UART + 20)
   \   00000032   300A               CPI     R16, 10
   \   00000034   F419               BRNE    ??main_3
     35                           UsartCheckPackage(0);
   \   00000036   E000               LDI     R16, 0
   \   00000038   ........           CALL    UsartCheckPackage
     36                       }
     37                       if(UART[1].RxState == HANDLE){ // Package OK ch 1
   \                     ??main_3:
   \   0000003C   9100....           LDS     R16, (UART + 49)
   \   00000040   300A               CPI     R16, 10
   \   00000042   F799               BRNE    ??main_2
     38                           UsartCheckPackage(1);
   \   00000044   E001               LDI     R16, 1
   \   00000046   ........           CALL    UsartCheckPackage
   \   0000004A   CFEF               RJMP    ??main_2
     39                       }
     40                  }                            
     41              } else {
     42                  AppStart();        					// Jump to Reset vector 0x0000 in Application Section
   \                     ??main_1:
   \   0000004C   91E0....           LDS     R30, AppStart
   \   00000050   91F0....           LDS     R31, (AppStart + 1)
   \   00000054   9409               IJMP
   \   00000056                      REQUIRE _A_EECR
   \   00000056                      REQUIRE _A_EEAR
   \   00000056                      REQUIRE _A_EEDR
   \   00000056                      REQUIRE _A_UDR0
   \   00000056                      REQUIRE _A_UDR1
     43              }
     44          }
     45          
     46          
     47          

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   main
        2   -- Indirect call
        2   -> GoToSyncUART
        2   -> InitSystem
        2   -> UsartCheckPackage
        2   -> recchar


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  AppStart
       1  ResetStatus
       1  RestoreStat
     350  RxBufferCh0
     350  RxBufferCh1
     350  TxBufferCh0
     350  TxBufferCh1
      58  UART
       1  UnitID
       1  WriteCount
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_UDR0
       1  _A_UDR1
     256  crc
       1  hostAddress
      86  main
       2  pWriteBuffer
       7  -- Other

 
     6 bytes in segment ABSOLUTE
    86 bytes in segment CODE
   256 bytes in segment FAR_F
     7 bytes in segment INITTAB
 1 467 bytes in segment NEAR_Z
 
   342 bytes of CODE memory (+ 7 bytes shared)
 1 467 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
