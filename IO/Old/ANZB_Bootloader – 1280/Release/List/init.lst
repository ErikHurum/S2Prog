###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       12/Dec/2022  12:54:01
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\init.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWDD42.tmp
#        ("D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\init.c" --cpu=m1280 -ms -o
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\Release\Obj" -D SPEED=38400 -lC
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\Release\List" -y
#        --initializers_in_flash --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\INC\\" -I
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\..\..\SHARED\INC\\" --eeprom_size
#        4096 --clib -Oh)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Release\List\init.lst
#    Object file  =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Release\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x43
   \   union <unnamed> volatile __io _A_OCR2
   \                     _A_OCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x45
   \   union <unnamed> volatile __io _A_TCCR2
   \                     _A_TCCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x50
   \   union <unnamed> volatile __io _A_ASSR
   \                     _A_ASSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x51
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x57
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x64
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6c
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6d
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_TCCR1C
   \                     _A_TCCR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7d
   \   union <unnamed> volatile __io _A_ETIMSK
   \                     _A_ETIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x86
   \   union <unnamed> volatile __io _A_OCR3A
   \                     _A_OCR3A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x8a
   \   union <unnamed> volatile __io _A_TCCR3B
   \                     _A_TCCR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8b
   \   union <unnamed> volatile __io _A_TCCR3A
   \                     _A_TCCR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8c
   \   union <unnamed> volatile __io _A_TCCR3C
   \                     _A_TCCR3C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x95
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x98
   \   union <unnamed> volatile __io _A_UBRR1H
   \                     _A_UBRR1H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x99
   \   union <unnamed> volatile __io _A_UBRR1L
   \                     _A_UBRR1L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9d
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "inavr.h"
     10          #include "string.h"
     11          
     12          /*
     13          **===========================================================================
     14          ** Init the system according to board type
     15          **===========================================================================
     16          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     17          void InitSystem(void) {
   \                     InitSystem:
     18          
     19              DDRB   =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB07               OUT     0x17, R16
     20              UnitID = (PINB & 0x0c) >> 2;       //get the unit ID
   \   00000004   B306               IN      R16, 0x16
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     21             
     22              Init_CPU();                         // init all processes
   \   00000010   ....               RCALL   Init_CPU
     23              Init_IO();
   \   00000012   ....               RCALL   Init_IO
     24              Init_TMR() ;
   \   00000014   ....               RCALL   Init_TMR
     25              Init_USART(0, SPEED) ;              // Init uarts
   \   00000016   E040               LDI     R20, 0
   \   00000018   E956               LDI     R21, 150
   \   0000001A   E060               LDI     R22, 0
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   E000               LDI     R16, 0
   \   00000020   ....               RCALL   Init_USART
     26              Init_USART(1, SPEED) ;              
   \   00000022   E040               LDI     R20, 0
   \   00000024   E956               LDI     R21, 150
   \   00000026   E060               LDI     R22, 0
   \   00000028   E070               LDI     R23, 0
   \   0000002A   E001               LDI     R16, 1
   \   0000002C   ....               RJMP    Init_USART
   \   0000002E                      REQUIRE _A_DDRB
   \   0000002E                      REQUIRE _A_PINB
     27          
     28          }
     29          
     30          /*
     31          **===========================================================================
     32          ** Init the CPU related registers
     33          **===========================================================================
     34          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     35          void Init_CPU( void ) {
   \                     Init_CPU:
     36          
     37              __disable_interrupt();
   \   00000000   94F8               CLI
     38          
     39              EIMSK = 0x00 ;        // External interrupt mask register 
   \   00000002   E000               LDI     R16, 0
   \   00000004   BF09               OUT     0x39, R16
     40              EICRA = 0x00 ;       // External interrupt control register Int 0/1 on low level
   \   00000006   9300....           STS     _A_EICRA, R16
     41              EICRB = 0x00 ;        // External interrupt control register Int 0/1 enabled
   \   0000000A   BF0A               OUT     0x3A, R16
     42              EIMSK = 0x00 ;        // External interrupt mask register 
   \   0000000C   BF09               OUT     0x39, R16
     43              MCUCR = 0x00 ;        // MCU control register  External Ram + wait state
   \   0000000E   BF05               OUT     0x35, R16
     44              XMCRA = 0x00 ;       // maximum wait states
   \   00000010   9300....           STS     _A_XMCRA, R16
     45              XMCRB = 0x00 ;       // Full 16 bit bus + bus keeper
   \   00000014   9300....           STS     _A_XMCRB, R16
     46              SREG  = 0x00 ;        // glabal interrupt
   \   00000018   BF0F               OUT     0x3F, R16
     47          
     48              ResetStatus = MCUCSR;       // Remember reset source
   \   0000001A   B704               IN      R16, 0x34
   \   0000001C   9300....           STS     ResetStatus, R16
     49              MCUCSR = 0x00;              // and reset
   \   00000020   E000               LDI     R16, 0
   \   00000022   BF04               OUT     0x34, R16
     50              /*--- Initialize buffer ---*/
     51          
     52          }
   \   00000024   9508               RET
   \   00000026                      REQUIRE _A_EIMSK
   \   00000026                      REQUIRE _A_EICRA
   \   00000026                      REQUIRE _A_EICRB
   \   00000026                      REQUIRE _A_MCUCR
   \   00000026                      REQUIRE _A_XMCRA
   \   00000026                      REQUIRE _A_XMCRB
   \   00000026                      REQUIRE _A_SREG
   \   00000026                      REQUIRE _A_MCUCSR
     53          
     54          /*
     55          **===========================================================================
     56          ** Init the watchdog registers
     57          **===========================================================================
     58          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     59          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
     60          
     61              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
     62              WDTCR = 0x1f;
   \   00000006   E10F               LDI     R16, 31
   \   00000008   BD01               OUT     0x21, R16
     63              WDTCR = 0x1f;
   \   0000000A   BD01               OUT     0x21, R16
     64              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
     65          
     66          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCR
     67          
     68          /*
     69          **===========================================================================
     70          ** Init the IO related registers
     71          **===========================================================================
     72          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     73          void Init_IO( void ) {
   \                     Init_IO:
     74          
     75              DDRA   =  0x00 ;      // Port A data 
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB0A               OUT     0x1A, R16
     76              PORTA  =  0x00 ;      // Port A data
   \   00000004   BB0B               OUT     0x1B, R16
     77              DDRB   =  0x00 ;      // Port B data 
   \   00000006   BB07               OUT     0x17, R16
     78              PORTB  =  0x00 ;      // Port B data   
   \   00000008   BB08               OUT     0x18, R16
     79              DDRC   =  0x00 ;      // Port C data 
   \   0000000A   BB04               OUT     0x14, R16
     80              PORTC  =  0x00 ;      // Port C data
   \   0000000C   BB05               OUT     0x15, R16
     81              DDRD   =  0x00 ;      // Port D data   
   \   0000000E   BB01               OUT     0x11, R16
     82              PORTD  =  0xf0 ;      // Port D data  //pullup addr
   \   00000010   EF00               LDI     R16, 240
   \   00000012   BB02               OUT     0x12, R16
     83              DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000014   EF0E               LDI     R16, 254
   \   00000016   B902               OUT     0x02, R16
     84              PORTE  =  0x00 ;      // Port E data 
   \   00000018   E000               LDI     R16, 0
   \   0000001A   B903               OUT     0x03, R16
     85              DDRF   =  0x00 ;      // Port F data 
   \   0000001C   9300....           STS     _A_DDRF, R16
     86              PORTF  =  0x00 ;      // Port F data 
   \   00000020   9300....           STS     _A_PORTF, R16
     87              DDRG   =  0x00 ;      // Port G data 
   \   00000024   9300....           STS     _A_DDRG, R16
     88              PORTG  =  0x00 ;      // Port G data 
   \   00000028   9300....           STS     _A_PORTG, R16
     89          }
   \   0000002C   9508               RET
   \   0000002E                      REQUIRE _A_DDRA
   \   0000002E                      REQUIRE _A_PORTA
   \   0000002E                      REQUIRE _A_DDRB
   \   0000002E                      REQUIRE _A_PORTB
   \   0000002E                      REQUIRE _A_DDRC
   \   0000002E                      REQUIRE _A_PORTC
   \   0000002E                      REQUIRE _A_DDRD
   \   0000002E                      REQUIRE _A_PORTD
   \   0000002E                      REQUIRE _A_DDRE
   \   0000002E                      REQUIRE _A_PORTE
   \   0000002E                      REQUIRE _A_DDRF
   \   0000002E                      REQUIRE _A_PORTF
   \   0000002E                      REQUIRE _A_DDRG
   \   0000002E                      REQUIRE _A_PORTG
     90          
     91          /*
     92          **===========================================================================
     93          ** Init the timer related registers
     94          **===========================================================================
     95          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     96          void Init_TMR( void ) {
   \                     Init_TMR:
     97              /*--- Timer control (disable clock inputs) ---*/
     98              
     99              TCCR0   =  0x00 ;      // Timer control register 0 
   \   00000000   E000               LDI     R16, 0
   \   00000002   BF03               OUT     0x33, R16
    100              OCR0    =  57 ;        // Timer output compare register 0, 1000HZ //7.37MHz xtal
   \   00000004   E309               LDI     R16, 57
   \   00000006   BF01               OUT     0x31, R16
    101              TCCR1A  =  0x00 ;      // Timer control register 1A 
   \   00000008   E000               LDI     R16, 0
   \   0000000A   BD0F               OUT     0x2F, R16
    102              TCCR1B  =  0x00 ;      // Timer control register 1B , divide by 256
   \   0000000C   BD0E               OUT     0x2E, R16
    103              TCCR1C  =  0x00 ;      // Timer control register 1c , force outp. comp
   \   0000000E   9300....           STS     _A_TCCR1C, R16
    104              OCR1A   =  288 ;       // Timer output compare register 1A, 100 Hz //7.37MHz xtal
   \   00000012   E200               LDI     R16, 32
   \   00000014   E011               LDI     R17, 1
   \   00000016   BD1B               OUT     0x2B, R17
   \   00000018   BD0A               OUT     0x2A, R16
    105              TCCR2   =  0x00 ;      // Timer control register 2 
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   BD05               OUT     0x25, R16
    106              OCR2    =  0x00 ;      // Timer output compare register 2 
   \   0000001E   BD03               OUT     0x23, R16
    107              TCCR3A  =  0x00 ;      // Timer control register 3A 
   \   00000020   9300....           STS     _A_TCCR3A, R16
    108              TCCR3B  =  0x00 ;      // Timer control register 3B , divide by 256
   \   00000024   9300....           STS     _A_TCCR3B, R16
    109              TCCR3C  =  0x00 ;      // Timer control register 3c , force outp. comp
   \   00000028   9300....           STS     _A_TCCR3C, R16
    110              OCR3AH  =  0x00 ;      // Timer output compare register 3C, 1 Hz //7.37MHz xtal
   \   0000002C   93000087           STS     135, R16
    111              OCR3AL  =  0x00 ;      // Timer output compare register 3C, 1 Hz
   \   00000030   9300....           STS     _A_OCR3A, R16
    112              ASSR    =  0x00 ;      // Asynchronous status register 
   \   00000034   BF00               OUT     0x30, R16
    113              TIMSK   =  0x00 ;      // Timer interrupt mask register, enable 16 bit 1A, 8Bit73
   \   00000036   BF07               OUT     0x37, R16
    114              ETIMSK  =  0x00 ;      // Timer interrupt mask register, enable 16 bit 3A
   \   00000038   9300....           STS     _A_ETIMSK, R16
    115          } 
   \   0000003C   9508               RET
   \   0000003E                      REQUIRE _A_TCCR0
   \   0000003E                      REQUIRE _A_OCR0
   \   0000003E                      REQUIRE _A_TCCR1A
   \   0000003E                      REQUIRE _A_TCCR1B
   \   0000003E                      REQUIRE _A_TCCR1C
   \   0000003E                      REQUIRE _A_OCR1A
   \   0000003E                      REQUIRE _A_TCCR2
   \   0000003E                      REQUIRE _A_OCR2
   \   0000003E                      REQUIRE _A_TCCR3A
   \   0000003E                      REQUIRE _A_TCCR3B
   \   0000003E                      REQUIRE _A_TCCR3C
   \   0000003E                      REQUIRE _A_OCR3A
   \   0000003E                      REQUIRE _A_ASSR
   \   0000003E                      REQUIRE _A_TIMSK
   \   0000003E                      REQUIRE _A_ETIMSK
    116          
    117          /*
    118          **===========================================================================
    119          ** Init the USARTs registers
    120          **===========================================================================
    121          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    122          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
    123          
    124              /*--- Configure UART data block ---*/
    125              UART[channel].TxFirst   = 0x00;
   \   00000000   E11D               LDI     R17, 29
   \   00000002   9F01               MUL     R16, R17
   \   00000004   ....               LDI     R30, LOW(UART)
   \   00000006   ....               LDI     R31, (UART) >> 8
   \   00000008   0DE0               ADD     R30, R0
   \   0000000A   1DF1               ADC     R31, R1
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   8312               STD     Z+2, R17
   \   00000010   8313               STD     Z+3, R17
    126              UART[channel].TxLast    = 0x00;
   \   00000012   8314               STD     Z+4, R17
   \   00000014   8315               STD     Z+5, R17
    127              UART[channel].TxCount   = 0x00;
   \   00000016   8316               STD     Z+6, R17
   \   00000018   8317               STD     Z+7, R17
    128              UART[channel].RxFirst   = 0x00;
   \   0000001A   8716               STD     Z+14, R17
   \   0000001C   8717               STD     Z+15, R17
    129              UART[channel].RxLast    = 0x00;
   \   0000001E   8B10               STD     Z+16, R17
   \   00000020   8B11               STD     Z+17, R17
    130              UART[channel].RxCount   = 0x00;
   \   00000022   8B12               STD     Z+18, R17
   \   00000024   8B13               STD     Z+19, R17
    131              UART[channel].RxState   = SYNC;
   \   00000026   8B14               STD     Z+20, R17
    132              UART[channel].SyncCnt   = 0 ;
   \   00000028   8B15               STD     Z+21, R17
    133              UART[channel].TxStatus  = 0x00;
   \   0000002A   8712               STD     Z+10, R17
    134          
    135              switch (channel) {
   \   0000002C   2300               TST     R16
   \   0000002E   F019               BREQ    ??Init_USART_0
   \   00000030   950A               DEC     R16
   \   00000032   F139               BREQ    ??Init_USART_1
   \   00000034   9508               RET
    136              case 0x00 :          
    137                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   00000036   EF0A               LDI     R16, 250
   \   00000038   9300....           STS     (UART + 22), R16
   \   0000003C   9310....           STS     (UART + 23), R17
    138                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   00000040   ....               LDI     R16, LOW(TxBufferCh0)
   \   00000042   ....               LDI     R17, (TxBufferCh0) >> 8
   \   00000044   9300....           STS     UART, R16
   \   00000048   9310....           STS     (UART + 1), R17
    139                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   0000004C   ....               LDI     R16, LOW(RxBufferCh0)
   \   0000004E   ....               LDI     R17, (RxBufferCh0) >> 8
   \   00000050   9300....           STS     (UART + 12), R16
   \   00000054   9310....           STS     (UART + 13), R17
    140                  UCSR0A  = 0x00; 
   \   00000058   E000               LDI     R16, 0
   \   0000005A   B90B               OUT     0x0B, R16
    141                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000005C   E400               LDI     R16, 64
   \   0000005E   E412               LDI     R17, 66
   \   00000060   E02F               LDI     R18, 15
   \   00000062   E030               LDI     R19, 0
   \   00000064   ........           CALL    ?UL_DIVMOD_S_L03
   \   00000068   2F40               MOV     R20, R16
   \   0000006A   954A               DEC     R20
   \   0000006C   B949               OUT     0x09, R20
    142                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   0000006E   5001               SUBI    R16, 1
   \   00000070   4010               SBCI    R17, 0
   \   00000072   9310....           STS     _A_UBRR0H, R17
    143                  UCSR0B  = (1<<RXEN0) | (1<<TXEN0);        // Enable recieve and transmit
   \   00000076   E108               LDI     R16, 24
   \   00000078   B90A               OUT     0x0A, R16
    144                  UCSR0C  = 0x06;       /* n,8,1 */
   \   0000007A   E006               LDI     R16, 6
   \   0000007C   9300....           STS     _A_UCSR0C, R16
    145                  break;
   \   00000080   9508               RET
    146              case 0x01 :
    147                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   00000082   EF0A               LDI     R16, 250
   \   00000084   9300....           STS     (UART + 51), R16
   \   00000088   9310....           STS     (UART + 52), R17
    148                  UART[channel].pTxBuffer = TxBufferCh1;
   \   0000008C   ....               LDI     R16, LOW(TxBufferCh1)
   \   0000008E   ....               LDI     R17, (TxBufferCh1) >> 8
   \   00000090   9300....           STS     (UART + 29), R16
   \   00000094   9310....           STS     (UART + 30), R17
    149                  UART[channel].pRxBuffer = RxBufferCh1;
   \   00000098   ....               LDI     R16, LOW(RxBufferCh1)
   \   0000009A   ....               LDI     R17, (RxBufferCh1) >> 8
   \   0000009C   9300....           STS     (UART + 41), R16
   \   000000A0   9310....           STS     (UART + 42), R17
    150                  UCSR1A  = 0x00; 
   \   000000A4   E000               LDI     R16, 0
   \   000000A6   9300....           STS     _A_UCSR1A, R16
    151                  UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   000000AA   E400               LDI     R16, 64
   \   000000AC   E412               LDI     R17, 66
   \   000000AE   E02F               LDI     R18, 15
   \   000000B0   E030               LDI     R19, 0
   \   000000B2   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000B6   2F40               MOV     R20, R16
   \   000000B8   954A               DEC     R20
   \   000000BA   9340....           STS     _A_UBRR1L, R20
    152                  UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   000000BE   5001               SUBI    R16, 1
   \   000000C0   4010               SBCI    R17, 0
   \   000000C2   9310....           STS     _A_UBRR1H, R17
    153                  UCSR1B  = (1<<RXEN1) | (1<<TXEN1);        // Enable recieve and transmit
   \   000000C6   E108               LDI     R16, 24
   \   000000C8   9300....           STS     _A_UCSR1B, R16
    154                  UCSR1C  = 0x06;       /* n,8,1 */
   \   000000CC   E006               LDI     R16, 6
   \   000000CE   9300....           STS     _A_UCSR1C, R16
    155                  break;
    156              default:
    157                  break ;
    158              }    
    159          }
   \   000000D2   9508               RET
   \   000000D4                      REQUIRE _A_UCSR0A
   \   000000D4                      REQUIRE _A_UBRR0L
   \   000000D4                      REQUIRE _A_UBRR0H
   \   000000D4                      REQUIRE _A_UCSR0B
   \   000000D4                      REQUIRE _A_UCSR0C
   \   000000D4                      REQUIRE _A_UCSR1A
   \   000000D4                      REQUIRE _A_UBRR1L
   \   000000D4                      REQUIRE _A_UBRR1H
   \   000000D4                      REQUIRE _A_UCSR1B
   \   000000D4                      REQUIRE _A_UCSR1C
    160          

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   InitSystem
        2   -> Init_CPU
        2   -> Init_IO
        2   -> Init_TMR
        2   -> Init_USART
      2   Init_CPU
      2   Init_IO
      2   Init_TMR
      2   Init_USART
        2 ?UL_DIVMOD_S_L03
      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      46  InitSystem
      38  Init_CPU
      46  Init_IO
      62  Init_TMR
     212  Init_USART
      18  Init_Watchdog
       1  _A_ASSR
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_ETIMSK
       1  _A_MCUCR
       1  _A_MCUCSR
       1  _A_OCR0
       2  _A_OCR1A
       1  _A_OCR2
       2  _A_OCR3A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR0
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TCCR1C
       1  _A_TCCR2
       1  _A_TCCR3A
       1  _A_TCCR3B
       1  _A_TCCR3C
       1  _A_TIMSK
       1  _A_UBRR0H
       1  _A_UBRR0L
       1  _A_UBRR1H
       1  _A_UBRR1L
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_WDTCR
       1  _A_XMCRA
       1  _A_XMCRB

 
  51 bytes in segment ABSOLUTE
 422 bytes in segment CODE
 
 422 bytes of CODE memory
   0 bytes of DATA memory (+ 51 bytes shared)

Errors: none
Warnings: none
