###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       23/Jan/2023  12:55:33
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\init.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWE567.tmp
#        ("D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\init.c" --cpu=m1280 -ms -o
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\Obj" -D SPEED=38400 -lCN
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB_Bootloader –
#        1280\INC\\" -I "D:\S2Prog\IO\ANZB_Bootloader –
#        1280\..\..\SHARED\INC\\" --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\List\init.lst
#    Object file  =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          //#include "iom1280.h"
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x64
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6c
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6d
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x86
   \   union <unnamed> volatile __io _A_OCR3A
   \                     _A_OCR3A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x8a
   \   union <unnamed> volatile __io _A_TCCR3B
   \                     _A_TCCR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8b
   \   union <unnamed> volatile __io _A_TCCR3A
   \                     _A_TCCR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x95
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1
      9          #include "inavr.h"
     10          #include "string.h"
     11          
     12          /*
     13          **===========================================================================
     14          ** Init the system according to board type
     15          **===========================================================================
     16          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     17          void InitSystem(void) {
   \                     InitSystem:
     18          
     19              DDRB   =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB07               OUT     0x17, R16
     20              UnitID  = (PINB >> 2) & 0x03;          //get the unit ID
   \   00000004   B306               IN      R16, 0x16
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     21             
     22              Init_CPU();                         // init all processes
   \   00000010   ....               RCALL   Init_CPU
     23              Init_IO();
   \   00000012   ....               RCALL   Init_IO
     24              Init_TMR() ;
   \   00000014   ....               RCALL   Init_TMR
     25              Init_USART(38400) ;              // Init uarts
   \   00000016   E000               LDI     R16, 0
   \   00000018   E916               LDI     R17, 150
   \   0000001A   E020               LDI     R18, 0
   \   0000001C   E030               LDI     R19, 0
   \   0000001E   ....               RCALL   Init_USART
     26              //Init_USART(1, SPEED) ;              
     27          
     28          }
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_DDRB
   \   00000022                      REQUIRE _A_PINB
     29          
     30          /*
     31          **===========================================================================
     32          ** Init the CPU related registers
     33          **===========================================================================
     34          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     35          static void Init_CPU( void ) {
   \                     Init_CPU:
     36            unsigned char temp;
     37            __disable_interrupt();
   \   00000000   94F8               CLI
     38          
     39              EIMSK = 0x00 ;        // External interrupt mask register 
   \   00000002   E000               LDI     R16, 0
   \   00000004   BF09               OUT     0x39, R16
     40              EICRA = 0x00 ;       // External interrupt control register Int 0/1 on low level
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     _A_EICRA, R16
     41              EICRB = 0x00 ;        // External interrupt control register Int 0/1 enabled
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   BF0A               OUT     0x3A, R16
     42              EIMSK = 0x00 ;        // External interrupt mask register 
   \   00000010   E000               LDI     R16, 0
   \   00000012   BF09               OUT     0x39, R16
     43              MCUCR = 0x00 ;        // MCU control register  External Ram + wait state
   \   00000014   E000               LDI     R16, 0
   \   00000016   BF05               OUT     0x35, R16
     44              XMCRA = 0x00 ;       // maximum wait states
   \   00000018   E000               LDI     R16, 0
   \   0000001A   9300....           STS     _A_XMCRA, R16
     45              XMCRB = 0x00 ;       // Full 16 bit bus + bus keeper
   \   0000001E   E000               LDI     R16, 0
   \   00000020   9300....           STS     _A_XMCRB, R16
     46              SREG  = 0x00 ;        // glabal interrupt
   \   00000024   E000               LDI     R16, 0
   \   00000026   BF0F               OUT     0x3F, R16
     47          
     48            // ResetStatus = MCUCR;       // Remember reset source
     49            MCUCR = 0x00;              // and reset
   \   00000028   E000               LDI     R16, 0
   \   0000002A   BF05               OUT     0x35, R16
     50              /*--- Initialize buffer ---*/
     51          
     52            // enable bootloader interrupt
     53            temp = MCUCR;
   \   0000002C   B705               IN      R16, 0x35
   \   0000002E   2F10               MOV     R17, R16
     54            MCUCR = temp | (1 << IVCE);       // enable change of interrupt vectors
   \   00000030   2F01               MOV     R16, R17
   \   00000032   6001               ORI     R16, 0x01
   \   00000034   BF05               OUT     0x35, R16
     55            MCUCR = temp | (1 << IVSEL);                             // move inerrupt vectors to boot flash section 
   \   00000036   2F01               MOV     R16, R17
   \   00000038   6002               ORI     R16, 0x02
   \   0000003A   BF05               OUT     0x35, R16
     56          }
   \   0000003C   9508               RET
   \   0000003E                      REQUIRE _A_EIMSK
   \   0000003E                      REQUIRE _A_EICRA
   \   0000003E                      REQUIRE _A_EICRB
   \   0000003E                      REQUIRE _A_MCUCR
   \   0000003E                      REQUIRE _A_XMCRA
   \   0000003E                      REQUIRE _A_XMCRB
   \   0000003E                      REQUIRE _A_SREG
     57          
     58          /*
     59          **===========================================================================
     60          ** Init the watchdog registers
     61          **===========================================================================
     62          */ 
     63          /*
     64          __monitor void
     65          Init_Watchdog( void )
     66          {
     67            asm("WDR");                             // kick the dog!!
     68            WDTCSR = 0x1f;
     69            WDTCSR = 0x1f;
     70            asm("WDR");                             // kick the dog!!
     71          
     72          }
     73          */
     74          
     75          /*
     76          **===========================================================================
     77          ** Init the IO related registers
     78          **===========================================================================
     79          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     80          static void Init_IO( void ) {
   \                     Init_IO:
     81          
     82              DDRA   =  0x00 ;      // Port A data 
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB0A               OUT     0x1A, R16
     83              PORTA  =  0x00 ;      // Port A data
   \   00000004   E000               LDI     R16, 0
   \   00000006   BB0B               OUT     0x1B, R16
     84              DDRB   =  0x00 ;      // Port B data 
   \   00000008   E000               LDI     R16, 0
   \   0000000A   BB07               OUT     0x17, R16
     85              PORTB  =  0x00 ;      // Port B data   
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   BB08               OUT     0x18, R16
     86              DDRC   =  0x00 ;      // Port C data 
   \   00000010   E000               LDI     R16, 0
   \   00000012   BB04               OUT     0x14, R16
     87              PORTC  =  0x00 ;      // Port C data
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB05               OUT     0x15, R16
     88              DDRD   =  0x00 ;      // Port D data   
   \   00000018   E000               LDI     R16, 0
   \   0000001A   BB01               OUT     0x11, R16
     89              PORTD  =  0xf0 ;      // Port D data  //pullup addr
   \   0000001C   EF00               LDI     R16, 240
   \   0000001E   BB02               OUT     0x12, R16
     90              DDRE   =  0x0E ;      // Port E data direction, all out except rxd
   \   00000020   E00E               LDI     R16, 14
   \   00000022   B902               OUT     0x02, R16
     91              PORTE  =  0x00 ;      // Port E data 
   \   00000024   E000               LDI     R16, 0
   \   00000026   B903               OUT     0x03, R16
     92              DDRF   =  0x00 ;      // Port F data 
   \   00000028   E000               LDI     R16, 0
   \   0000002A   9300....           STS     _A_DDRF, R16
     93              PORTF  =  0x00 ;      // Port F data 
   \   0000002E   E000               LDI     R16, 0
   \   00000030   9300....           STS     _A_PORTF, R16
     94              DDRG   =  0x00 ;      // Port G data 
   \   00000034   E000               LDI     R16, 0
   \   00000036   9300....           STS     _A_DDRG, R16
     95              PORTG  =  0x00 ;      // Port G data 
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   9300....           STS     _A_PORTG, R16
     96          }
   \   00000040   9508               RET
   \   00000042                      REQUIRE _A_DDRA
   \   00000042                      REQUIRE _A_PORTA
   \   00000042                      REQUIRE _A_DDRB
   \   00000042                      REQUIRE _A_PORTB
   \   00000042                      REQUIRE _A_DDRC
   \   00000042                      REQUIRE _A_PORTC
   \   00000042                      REQUIRE _A_DDRD
   \   00000042                      REQUIRE _A_PORTD
   \   00000042                      REQUIRE _A_DDRE
   \   00000042                      REQUIRE _A_PORTE
   \   00000042                      REQUIRE _A_DDRF
   \   00000042                      REQUIRE _A_PORTF
   \   00000042                      REQUIRE _A_DDRG
   \   00000042                      REQUIRE _A_PORTG
     97          
     98          /*
     99          **===========================================================================
    100          ** Init the timer related registers
    101          **===========================================================================
    102          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    103          void Init_TMR( void ) {
   \                     Init_TMR:
    104              /*--- Timer control (disable clock inputs) ---*/
    105              
    106              //TCCR0A  =  0x99;             // Timer control register 0
    107              //OCR0A    =  7;               // Timer output compare register 0, 1MHZ //16MHz xtal
    108              //
    109              // to provide ADC with 1 Mhz clock, OC3A (PE3) is connected to ADC clock
    110              //
    111              // we will use TC3 to generate 1 Mhz clock by setting
    112              //
    113              // 1) TCCR3A    : 01000000   = 0x40
    114              //    a) Bit 7:6,     COM3A1/COM3A0   :   01  - Toggle OC3A(PE3) on compare match
    115              //    b) Bit 5:2,     don't care. all zero
    116              //    c) Bit 1:0,     WGM31/WGM30     :   00 for CTC mode
    117              //
    118              // 2) TCCR3B    : 00001001 = 0x09
    119              //    a) Bit 7,       noise canceler. don't care. 0
    120              //    b) Bit 6,       edge select for input. don't care. 0
    121              //    c) Bit 5,       reserved, 0
    122              //    d) Bit 4:3,     WGM33/WGM32     : 01 for CTC mode with OCR3A as TOP
    123              //    e) Bit 2:0,     CS32/CS31/CS30  : Clock Select, 001 : 16 Mhz with no divider
    124              //
    125              // 3) OCR3A     : 7, compare match at 8 tick at 16 Mhz will generate 1 MHz Clock
    126              //
    127              //
    128              TCCR3A    = 0x40;
   \   00000000   E400               LDI     R16, 64
   \   00000002   9300....           STS     _A_TCCR3A, R16
    129              TCCR3B    = 0x09;
   \   00000006   E009               LDI     R16, 9
   \   00000008   9300....           STS     _A_TCCR3B, R16
    130              OCR3A     = 7;
   \   0000000C   E007               LDI     R16, 7
   \   0000000E   E010               LDI     R17, 0
   \   00000010   9310....           STS     (_A_OCR3A + 1), R17
   \   00000014   9300....           STS     _A_OCR3A, R16
    131          
    132          
    133          
    134          } 
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_TCCR3A
   \   0000001A                      REQUIRE _A_TCCR3B
   \   0000001A                      REQUIRE _A_OCR3A
    135          
    136          /*
    137          **===========================================================================
    138          ** Init the USARTs registers
    139          **===========================================================================
    140          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    141          void Init_USART(  unsigned long baud ) {
   \                     Init_USART:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    142              UCSR0A  = 0x00; 
   \   00000008   E000               LDI     R16, 0
   \   0000000A   B90B               OUT     0x0B, R16
    143              UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000000C   E400               LDI     R16, 64
   \   0000000E   E412               LDI     R17, 66
   \   00000010   E02F               LDI     R18, 15
   \   00000012   E030               LDI     R19, 0
   \   00000014   01AC               MOVW    R21:R20, R25:R24
   \   00000016   01BD               MOVW    R23:R22, R27:R26
   \   00000018   ........           CALL    ?UL_DIVMOD_L03
   \   0000001C   950A               DEC     R16
   \   0000001E   B909               OUT     0x09, R16
    144              UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   00000020   E400               LDI     R16, 64
   \   00000022   E412               LDI     R17, 66
   \   00000024   E02F               LDI     R18, 15
   \   00000026   E030               LDI     R19, 0
   \   00000028   01AC               MOVW    R21:R20, R25:R24
   \   0000002A   01BD               MOVW    R23:R22, R27:R26
   \   0000002C   ........           CALL    ?UL_DIVMOD_L03
   \   00000030   5001               SUBI    R16, 1
   \   00000032   4010               SBCI    R17, 0
   \   00000034   2F01               MOV     R16, R17
   \   00000036   E010               LDI     R17, 0
   \   00000038   9300....           STS     _A_UBRR0H, R16
    145              UCSR0B  = (1<<RXEN0) | (1<<TXEN0);        // Enable recieve and transmit
   \   0000003C   E108               LDI     R16, 24
   \   0000003E   B90A               OUT     0x0A, R16
    146              UCSR0C  = 0x06;       /* n,8,1 */
   \   00000040   E006               LDI     R16, 6
   \   00000042   9300....           STS     _A_UCSR0C, R16
    147          
    148          
    149          }
   \   00000046   E0E4               LDI     R30, 4
   \   00000048   ........           JMP     ?EPILOGUE_B4_L09
   \   0000004C                      REQUIRE _A_UCSR0A
   \   0000004C                      REQUIRE _A_UBRR0L
   \   0000004C                      REQUIRE _A_UBRR0H
   \   0000004C                      REQUIRE _A_UCSR0B
   \   0000004C                      REQUIRE _A_UCSR0C
    150          
    151          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   InitSystem
        0      2   -> Init_CPU
        0      2   -> Init_IO
        0      2   -> Init_TMR
        0      2   -> Init_USART
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      4      2   Init_USART
        4      2 ?UL_DIVMOD_L03


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      34  InitSystem
      62  Init_CPU
      66  Init_IO
      26  Init_TMR
      76  Init_USART
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       2  _A_OCR3A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR3A
       1  _A_TCCR3B
       1  _A_UBRR0H
       1  _A_UBRR0L
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_XMCRA
       1  _A_XMCRB

 
  31 bytes in segment ABSOLUTE
 264 bytes in segment CODE
 
 264 bytes of CODE memory
   0 bytes of DATA memory (+ 31 bytes shared)

Errors: none
Warnings: none
