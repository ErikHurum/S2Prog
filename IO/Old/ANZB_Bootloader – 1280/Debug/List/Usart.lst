###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       23/Jan/2023  12:55:33
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\Usart.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWFC5E.tmp
#        ("D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\Usart.c" --cpu=m1280 -ms -o
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\Obj" -D SPEED=38400 -lCN
#        "D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\ANZB_Bootloader –
#        1280\INC\\" -I "D:\S2Prog\IO\ANZB_Bootloader –
#        1280\..\..\SHARED\INC\\" --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\List\Usart.lst
#    Object file  =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\Obj\Usart.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_Bootloader – 1280\Src\Usart.c
      1          /****************************************************************************************
      2          / Com protocol for USART0 
      3          /
      4          ***************************************************************************************/
      5          
      6          //#include "iom1280.h"
      7          #include "stdio.h"
      8          //#include "math.h"
      9          #include "externals.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5b
   \   union <unnamed> volatile __io _A_RAMPZ
   \                     _A_RAMPZ:
   \   00000000                      DS8 1
     10          #include "assembly.h"
     11          
     12           
     13           /*************************************************************************
     14          *
     15          *  Check the incoming packages
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void UsartCheckPackage(void) {
   \                     UsartCheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
     19          
     20              unsigned short pointer;
     21              char retval ;
     22              
     23              My485UART.RxSendReply = false ;                           // flag for answering set to fault
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     (My485UART + 28), R16
     24              My485UART.TxFirst = 11 ;                        // Startpos for fist TX command
   \   0000000A   ....               LDI     R30, LOW(My485UART)
   \   0000000C   ....               LDI     R31, (My485UART) >> 8
   \   0000000E   E00B               LDI     R16, 11
   \   00000010   E010               LDI     R17, 0
   \   00000012   8302               STD     Z+2, R16
   \   00000014   8313               STD     Z+3, R17
     25              pointer = 7 ;
   \   00000016   E087               LDI     R24, 7
   \   00000018   E090               LDI     R25, 0
     26              do {
     27                  retval = CheckActionUart( pointer);
   \                     ??UsartCheckPackage_0:
   \   0000001A   018C               MOVW    R17:R16, R25:R24
   \   0000001C   ....               RCALL   CheckActionUart
   \   0000001E   2FA0               MOV     R26, R16
     28                  pointer = pointer + My485UART.pRxBuffer[pointer+2] 
     29                                    + (My485UART.pRxBuffer[pointer+3]*256) + 4;            // Point to a command cmd hb/lb
   \   00000020   ....               LDI     R30, LOW(My485UART)
   \   00000022   ....               LDI     R31, (My485UART) >> 8
   \   00000024   8504               LDD     R16, Z+12
   \   00000026   8515               LDD     R17, Z+13
   \   00000028   0F08               ADD     R16, R24
   \   0000002A   1F19               ADC     R17, R25
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   8122               LDD     R18, Z+2
   \   00000030   E030               LDI     R19, 0
   \   00000032   ....               LDI     R30, LOW(My485UART)
   \   00000034   ....               LDI     R31, (My485UART) >> 8
   \   00000036   8504               LDD     R16, Z+12
   \   00000038   8515               LDD     R17, Z+13
   \   0000003A   0F08               ADD     R16, R24
   \   0000003C   1F19               ADC     R17, R25
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   8103               LDD     R16, Z+3
   \   00000042   E010               LDI     R17, 0
   \   00000044   2F10               MOV     R17, R16
   \   00000046   E000               LDI     R16, 0
   \   00000048   0F20               ADD     R18, R16
   \   0000004A   1F31               ADC     R19, R17
   \   0000004C   5F2C               SUBI    R18, 252
   \   0000004E   4F3F               SBCI    R19, 255
   \   00000050   0F82               ADD     R24, R18
   \   00000052   1F93               ADC     R25, R19
     30              } while (retval && (pointer < (My485UART.RxPacklen - 4 )));
   \   00000054   23AA               TST     R26
   \   00000056   F049               BREQ    ??UsartCheckPackage_1
   \   00000058   ....               LDI     R30, LOW(My485UART)
   \   0000005A   ....               LDI     R31, (My485UART) >> 8
   \   0000005C   8D00               LDD     R16, Z+24
   \   0000005E   8D11               LDD     R17, Z+25
   \   00000060   5004               SUBI    R16, 4
   \   00000062   4010               SBCI    R17, 0
   \   00000064   1780               CP      R24, R16
   \   00000066   0791               CPC     R25, R17
   \   00000068   F2C0               BRCS    ??UsartCheckPackage_0
     31              if(My485UART.RxSendReply){                              //send answer
   \                     ??UsartCheckPackage_1:
   \   0000006A   9100....           LDS     R16, (My485UART + 28)
   \   0000006E   2300               TST     R16
   \   00000070   F009               BREQ    ??UsartCheckPackage_2
     32                  Uart_BuildTail();
   \   00000072   ....               RCALL   Uart_BuildTail
     33              }
     34              GoToSyncUART() ;                                    // go to sync modus for recive
   \                     ??UsartCheckPackage_2:
   \   00000074   ....               RCALL   GoToSyncUART
     35          }
   \   00000076   E0E3               LDI     R30, 3
   \   00000078   ........           JMP     ?EPILOGUE_B3_L09
     36          
     37          /*************************************************************************
     38          *
     39          *  Check action on received data
     40          *
     41          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     42          char CheckActionUart( unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     43          
     44              unsigned short   command;
     45              char    retval = true;
   \   00000006   2444               CLR     R4
   \   00000008   9443               INC     R4
     46          
     47              command = My485UART.pRxBuffer[pointer] | (My485UART.pRxBuffer[pointer+1] <<8);
   \   0000000A   ....               LDI     R30, LOW(My485UART)
   \   0000000C   ....               LDI     R31, (My485UART) >> 8
   \   0000000E   8504               LDD     R16, Z+12
   \   00000010   8515               LDD     R17, Z+13
   \   00000012   0F08               ADD     R16, R24
   \   00000014   1F19               ADC     R17, R25
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   8120               LD      R18, Z
   \   0000001A   ....               LDI     R30, LOW(My485UART)
   \   0000001C   ....               LDI     R31, (My485UART) >> 8
   \   0000001E   8504               LDD     R16, Z+12
   \   00000020   8515               LDD     R17, Z+13
   \   00000022   0F08               ADD     R16, R24
   \   00000024   1F19               ADC     R17, R25
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   8111               LDD     R17, Z+1
   \   0000002A   2F02               MOV     R16, R18
   \   0000002C   01D8               MOVW    R27:R26, R17:R16
     48              switch (command) {                                      // check action 
   \   0000002E   018D               MOVW    R17:R16, R27:R26
   \   00000030   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   00000032   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   00000034   BFFB               OUT     0x3B, R31
   \   00000036   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000038   ........           JMP     ?SV_SWITCH_L06
     49             case CMD_REQ_STATUS :                                    // Regusest status for target
     50                  BuildStatusData() ;                       
   \                     ??CheckActionUart_0:
   \   0000003C   ....               RCALL   BuildStatusData
     51                  break;
   \   0000003E   C015               RJMP    ??CheckActionUart_1
     52                  
     53              case CMD_FLASH_ID :                                     // Send flash ID
     54                  BuildFlashID() ;
   \                     ??CheckActionUart_2:
   \   00000040   ....               RCALL   BuildFlashID
     55                  break ;
   \   00000042   C013               RJMP    ??CheckActionUart_1
     56                  
     57              case CMD_FLASH_ERASE :                                 // Erase flash
     58                  EraseFlash() ;
   \                     ??CheckActionUart_3:
   \   00000044   ....               RCALL   EraseFlash
     59                  break ;
   \   00000046   C011               RJMP    ??CheckActionUart_1
     60                  
     61              case CMD_FLASH_PROG :                                   // Prog flash
     62                  ProgramFlash( pointer+4) ;
   \                     ??CheckActionUart_4:
   \   00000048   018C               MOVW    R17:R16, R25:R24
   \   0000004A   5F0C               SUBI    R16, 252
   \   0000004C   4F1F               SBCI    R17, 255
   \   0000004E   ....               RCALL   ProgramFlash
     63                  break ;
   \   00000050   C00C               RJMP    ??CheckActionUart_1
     64                  
     65              case CMD_FLASH_READ :                                   // Read flash
     66                  ReadFlash( pointer+4) ;
   \                     ??CheckActionUart_5:
   \   00000052   018C               MOVW    R17:R16, R25:R24
   \   00000054   5F0C               SUBI    R16, 252
   \   00000056   4F1F               SBCI    R17, 255
   \   00000058   ....               RCALL   ReadFlash
     67                  break ;
   \   0000005A   C007               RJMP    ??CheckActionUart_1
     68                  
     69              case CMD_EXIT_BOOTLOADER :                                // Leave bootlaoder
     70                  ExitBootloader() ; 
   \                     ??CheckActionUart_6:
   \   0000005C   ....               RCALL   ExitBootloader
     71                  break ;
   \   0000005E   C005               RJMP    ??CheckActionUart_1
     72                  
     73              default:
     74                  if (command < MAX_ECMD) {                           // handle end commands
   \                     ??CheckActionUart_7:
   \   00000060   36A4               CPI     R26, 100
   \   00000062   E000               LDI     R16, 0
   \   00000064   07B0               CPC     R27, R16
   \   00000066   F408               BRCC    ??CheckActionUart_1
     75                      retval = false ;
   \   00000068   2444               CLR     R4
     76                  }
     77                  break;
     78                  
     79              }
     80              return retval;
   \                     ??CheckActionUart_1:
   \   0000006A   2D04               MOV     R16, R4
   \   0000006C   E0E5               LDI     R30, 5
   \   0000006E   ........           JMP     ?EPILOGUE_B5_L09
     81          }
     82          
     83          /*************************************************************************
     84          *
     85          * Build send packet header
     86          *
     87          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     88          void Uart_BuildHeader(void) {
   \                     Uart_BuildHeader:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
     89          
     90              My485UART.RxFirst = 0;                                // Reset pointers
   \   00000004   ....               LDI     R30, LOW(My485UART)
   \   00000006   ....               LDI     R31, (My485UART) >> 8
   \   00000008   E000               LDI     R16, 0
   \   0000000A   8706               STD     Z+14, R16
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   8707               STD     Z+15, R16
     91              My485UART.RxLast  = 0;
   \   00000010   ....               LDI     R30, LOW(My485UART)
   \   00000012   ....               LDI     R31, (My485UART) >> 8
   \   00000014   E000               LDI     R16, 0
   \   00000016   8B00               STD     Z+16, R16
   \   00000018   E000               LDI     R16, 0
   \   0000001A   8B01               STD     Z+17, R16
     92              My485UART.TxLast  = 0;
   \   0000001C   ....               LDI     R30, LOW(My485UART)
   \   0000001E   ....               LDI     R31, (My485UART) >> 8
   \   00000020   E000               LDI     R16, 0
   \   00000022   8304               STD     Z+4, R16
   \   00000024   E000               LDI     R16, 0
   \   00000026   8305               STD     Z+5, R16
     93          
     94              My485UART.pTxBuffer[0] = ANPRO10_SYN ;                        /* Sync */
   \   00000028   ....               LDI     R26, LOW(My485UART)
   \   0000002A   ....               LDI     R27, (My485UART) >> 8
   \   0000002C   91ED               LD      R30, X+
   \   0000002E   91FC               LD      R31, X
   \   00000030   9711               SBIW    R27:R26, 1
   \   00000032   E106               LDI     R16, 22
   \   00000034   8300               ST      Z, R16
     95              My485UART.pTxBuffer[1] = ANPRO10_SYN ;                        /* Sync */
   \   00000036   ....               LDI     R26, LOW(My485UART)
   \   00000038   ....               LDI     R27, (My485UART) >> 8
   \   0000003A   91ED               LD      R30, X+
   \   0000003C   91FC               LD      R31, X
   \   0000003E   9711               SBIW    R27:R26, 1
   \   00000040   E106               LDI     R16, 22
   \   00000042   8301               STD     Z+1, R16
     96              My485UART.pTxBuffer[2] = ANPRO10_SYN ;                        /* Sync */
   \   00000044   ....               LDI     R26, LOW(My485UART)
   \   00000046   ....               LDI     R27, (My485UART) >> 8
   \   00000048   91ED               LD      R30, X+
   \   0000004A   91FC               LD      R31, X
   \   0000004C   9711               SBIW    R27:R26, 1
   \   0000004E   E106               LDI     R16, 22
   \   00000050   8302               STD     Z+2, R16
     97              My485UART.pTxBuffer[3] = ANPRO10_SOH ;                        /* Start of header */
   \   00000052   ....               LDI     R26, LOW(My485UART)
   \   00000054   ....               LDI     R27, (My485UART) >> 8
   \   00000056   91ED               LD      R30, X+
   \   00000058   91FC               LD      R31, X
   \   0000005A   9711               SBIW    R27:R26, 1
   \   0000005C   E001               LDI     R16, 1
   \   0000005E   8303               STD     Z+3, R16
     98              My485UART.pTxBuffer[4] = My485UART.pRxBuffer[2] ;      /* RXID */
   \   00000060   ....               LDI     R26, LOW((My485UART + 12))
   \   00000062   ....               LDI     R27, HIGH((My485UART + 12))
   \   00000064   91ED               LD      R30, X+
   \   00000066   91FC               LD      R31, X
   \   00000068   9711               SBIW    R27:R26, 1
   \   0000006A   8102               LDD     R16, Z+2
   \   0000006C   ....               LDI     R26, LOW(My485UART)
   \   0000006E   ....               LDI     R27, (My485UART) >> 8
   \   00000070   91ED               LD      R30, X+
   \   00000072   91FC               LD      R31, X
   \   00000074   9711               SBIW    R27:R26, 1
   \   00000076   8304               STD     Z+4, R16
     99              My485UART.pTxBuffer[5] = My485UART.pRxBuffer[3] ;      /* Rx address */
   \   00000078   ....               LDI     R26, LOW((My485UART + 12))
   \   0000007A   ....               LDI     R27, HIGH((My485UART + 12))
   \   0000007C   91ED               LD      R30, X+
   \   0000007E   91FC               LD      R31, X
   \   00000080   9711               SBIW    R27:R26, 1
   \   00000082   8103               LDD     R16, Z+3
   \   00000084   ....               LDI     R26, LOW(My485UART)
   \   00000086   ....               LDI     R27, (My485UART) >> 8
   \   00000088   91ED               LD      R30, X+
   \   0000008A   91FC               LD      R31, X
   \   0000008C   9711               SBIW    R27:R26, 1
   \   0000008E   8305               STD     Z+5, R16
    100              My485UART.pTxBuffer[6] = 0x10 + UnitID ;              /* Unit ID */
   \   00000090   9100....           LDS     R16, UnitID
   \   00000094   5F00               SUBI    R16, 240
   \   00000096   ....               LDI     R26, LOW(My485UART)
   \   00000098   ....               LDI     R27, (My485UART) >> 8
   \   0000009A   91ED               LD      R30, X+
   \   0000009C   91FC               LD      R31, X
   \   0000009E   9711               SBIW    R27:R26, 1
   \   000000A0   8306               STD     Z+6, R16
    101              My485UART.pTxBuffer[7] = MyAddress();                /* Tx address */
   \   000000A2   ........           CALL    MyAddress
   \   000000A6   ....               LDI     R26, LOW(My485UART)
   \   000000A8   ....               LDI     R27, (My485UART) >> 8
   \   000000AA   91ED               LD      R30, X+
   \   000000AC   91FC               LD      R31, X
   \   000000AE   9711               SBIW    R27:R26, 1
   \   000000B0   8307               STD     Z+7, R16
    102              My485UART.pTxBuffer[8] = 0 ;                         /* packlen HB, don't know yet */
   \   000000B2   ....               LDI     R26, LOW(My485UART)
   \   000000B4   ....               LDI     R27, (My485UART) >> 8
   \   000000B6   91ED               LD      R30, X+
   \   000000B8   91FC               LD      R31, X
   \   000000BA   9711               SBIW    R27:R26, 1
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   8700               STD     Z+8, R16
    103              My485UART.pTxBuffer[9] = 0 ;                         /* packlen LB, don't know yet */
   \   000000C0   ....               LDI     R26, LOW(My485UART)
   \   000000C2   ....               LDI     R27, (My485UART) >> 8
   \   000000C4   91ED               LD      R30, X+
   \   000000C6   91FC               LD      R31, X
   \   000000C8   9711               SBIW    R27:R26, 1
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   8701               STD     Z+9, R16
    104              My485UART.pTxBuffer[10] = 0 ;                        /* header checksum, don't know yet */
   \   000000CE   ....               LDI     R26, LOW(My485UART)
   \   000000D0   ....               LDI     R27, (My485UART) >> 8
   \   000000D2   91ED               LD      R30, X+
   \   000000D4   91FC               LD      R31, X
   \   000000D6   9711               SBIW    R27:R26, 1
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   8702               STD     Z+10, R16
    105          }
   \   000000DC   91A9               LD      R26, Y+
   \   000000DE   91B9               LD      R27, Y+
   \   000000E0   9508               RET
    106          
    107          /*************************************************************************
    108          *
    109          * Build  packet tail
    110          *
    111          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    112          void Uart_BuildTail(void) {
   \                     Uart_BuildTail:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    113          
    114              Uart_BuildHeader();                                    // fist build the header
   \   00000004   ....               RCALL   Uart_BuildHeader
    115          
    116              My485UART.pTxBuffer[My485UART.TxFirst++] = ECMD_NMDWOACK & 0xff ;  // End command lb
   \   00000006   ....               LDI     R30, LOW(My485UART)
   \   00000008   ....               LDI     R31, (My485UART) >> 8
   \   0000000A   8102               LDD     R16, Z+2
   \   0000000C   8113               LDD     R17, Z+3
   \   0000000E   ....               LDI     R26, LOW(My485UART)
   \   00000010   ....               LDI     R27, (My485UART) >> 8
   \   00000012   91ED               LD      R30, X+
   \   00000014   91FC               LD      R31, X
   \   00000016   9711               SBIW    R27:R26, 1
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8300               ST      Z, R16
   \   00000020   ....               LDI     R30, LOW(My485UART)
   \   00000022   ....               LDI     R31, (My485UART) >> 8
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    117              My485UART.pTxBuffer[My485UART.TxFirst++] = ECMD_NMDWOACK >> 8 ;    // End command hb 
   \   00000030   ....               LDI     R30, LOW(My485UART)
   \   00000032   ....               LDI     R31, (My485UART) >> 8
   \   00000034   8102               LDD     R16, Z+2
   \   00000036   8113               LDD     R17, Z+3
   \   00000038   ....               LDI     R26, LOW(My485UART)
   \   0000003A   ....               LDI     R27, (My485UART) >> 8
   \   0000003C   91ED               LD      R30, X+
   \   0000003E   91FC               LD      R31, X
   \   00000040   9711               SBIW    R27:R26, 1
   \   00000042   0FE0               ADD     R30, R16
   \   00000044   1FF1               ADC     R31, R17
   \   00000046   E000               LDI     R16, 0
   \   00000048   8300               ST      Z, R16
   \   0000004A   ....               LDI     R30, LOW(My485UART)
   \   0000004C   ....               LDI     R31, (My485UART) >> 8
   \   0000004E   8102               LDD     R16, Z+2
   \   00000050   8113               LDD     R17, Z+3
   \   00000052   5F0F               SUBI    R16, 255
   \   00000054   4F1F               SBCI    R17, 255
   \   00000056   8302               STD     Z+2, R16
   \   00000058   8313               STD     Z+3, R17
    118              My485UART.pTxBuffer[My485UART.TxFirst++] = 0x00 ;                  // End data 
   \   0000005A   ....               LDI     R30, LOW(My485UART)
   \   0000005C   ....               LDI     R31, (My485UART) >> 8
   \   0000005E   8102               LDD     R16, Z+2
   \   00000060   8113               LDD     R17, Z+3
   \   00000062   ....               LDI     R26, LOW(My485UART)
   \   00000064   ....               LDI     R27, (My485UART) >> 8
   \   00000066   91ED               LD      R30, X+
   \   00000068   91FC               LD      R31, X
   \   0000006A   9711               SBIW    R27:R26, 1
   \   0000006C   0FE0               ADD     R30, R16
   \   0000006E   1FF1               ADC     R31, R17
   \   00000070   E000               LDI     R16, 0
   \   00000072   8300               ST      Z, R16
   \   00000074   ....               LDI     R30, LOW(My485UART)
   \   00000076   ....               LDI     R31, (My485UART) >> 8
   \   00000078   8102               LDD     R16, Z+2
   \   0000007A   8113               LDD     R17, Z+3
   \   0000007C   5F0F               SUBI    R16, 255
   \   0000007E   4F1F               SBCI    R17, 255
   \   00000080   8302               STD     Z+2, R16
   \   00000082   8313               STD     Z+3, R17
    119              
    120              My485UART.pTxBuffer[My485UART.TxFirst++] = My485UART.TxSeqCnt++ ;   // Sequence counter 
   \   00000084   9100....           LDS     R16, (My485UART + 11)
   \   00000088   2F10               MOV     R17, R16
   \   0000008A   9513               INC     R17
   \   0000008C   9310....           STS     (My485UART + 11), R17
   \   00000090   ....               LDI     R30, LOW(My485UART)
   \   00000092   ....               LDI     R31, (My485UART) >> 8
   \   00000094   8122               LDD     R18, Z+2
   \   00000096   8133               LDD     R19, Z+3
   \   00000098   ....               LDI     R26, LOW(My485UART)
   \   0000009A   ....               LDI     R27, (My485UART) >> 8
   \   0000009C   91ED               LD      R30, X+
   \   0000009E   91FC               LD      R31, X
   \   000000A0   9711               SBIW    R27:R26, 1
   \   000000A2   0FE2               ADD     R30, R18
   \   000000A4   1FF3               ADC     R31, R19
   \   000000A6   8300               ST      Z, R16
   \   000000A8   ....               LDI     R30, LOW(My485UART)
   \   000000AA   ....               LDI     R31, (My485UART) >> 8
   \   000000AC   8102               LDD     R16, Z+2
   \   000000AE   8113               LDD     R17, Z+3
   \   000000B0   5F0F               SUBI    R16, 255
   \   000000B2   4F1F               SBCI    R17, 255
   \   000000B4   8302               STD     Z+2, R16
   \   000000B6   8313               STD     Z+3, R17
    121          
    122              My485UART.pTxBuffer[8] = My485UART.TxFirst -2;                // correct length because stx's
   \   000000B8   ....               LDI     R30, LOW(My485UART)
   \   000000BA   ....               LDI     R31, (My485UART) >> 8
   \   000000BC   8102               LDD     R16, Z+2
   \   000000BE   8113               LDD     R17, Z+3
   \   000000C0   5002               SUBI    R16, 2
   \   000000C2   ....               LDI     R26, LOW(My485UART)
   \   000000C4   ....               LDI     R27, (My485UART) >> 8
   \   000000C6   91ED               LD      R30, X+
   \   000000C8   91FC               LD      R31, X
   \   000000CA   9711               SBIW    R27:R26, 1
   \   000000CC   8700               STD     Z+8, R16
    123              My485UART.pTxBuffer[9] = (My485UART.TxFirst-2) >> 8 ;           // packet len high 
   \   000000CE   ....               LDI     R30, LOW(My485UART)
   \   000000D0   ....               LDI     R31, (My485UART) >> 8
   \   000000D2   8182               LDD     R24, Z+2
   \   000000D4   8193               LDD     R25, Z+3
   \   000000D6   9702               SBIW    R25:R24, 2
   \   000000D8   2F89               MOV     R24, R25
   \   000000DA   E090               LDI     R25, 0
   \   000000DC   ....               LDI     R26, LOW(My485UART)
   \   000000DE   ....               LDI     R27, (My485UART) >> 8
   \   000000E0   91ED               LD      R30, X+
   \   000000E2   91FC               LD      R31, X
   \   000000E4   9711               SBIW    R27:R26, 1
   \   000000E6   8781               STD     Z+9, R24
    124          
    125              My485UART.pTxBuffer[10] = CalcDSTxChecksum( 10) ;         // Get header checksum 
   \   000000E8   E00A               LDI     R16, 10
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   ....               RCALL   CalcDSTxChecksum
   \   000000EE   ....               LDI     R26, LOW(My485UART)
   \   000000F0   ....               LDI     R27, (My485UART) >> 8
   \   000000F2   91ED               LD      R30, X+
   \   000000F4   91FC               LD      R31, X
   \   000000F6   9711               SBIW    R27:R26, 1
   \   000000F8   8702               STD     Z+10, R16
    126          
    127              My485UART.pTxBuffer[My485UART.TxFirst] = CalcDSTxChecksum( My485UART.TxFirst) ; // Get checksum 
   \   000000FA   ....               LDI     R30, LOW(My485UART)
   \   000000FC   ....               LDI     R31, (My485UART) >> 8
   \   000000FE   8102               LDD     R16, Z+2
   \   00000100   8113               LDD     R17, Z+3
   \   00000102   ....               RCALL   CalcDSTxChecksum
   \   00000104   ....               LDI     R30, LOW(My485UART)
   \   00000106   ....               LDI     R31, (My485UART) >> 8
   \   00000108   8122               LDD     R18, Z+2
   \   0000010A   8133               LDD     R19, Z+3
   \   0000010C   ....               LDI     R26, LOW(My485UART)
   \   0000010E   ....               LDI     R27, (My485UART) >> 8
   \   00000110   91ED               LD      R30, X+
   \   00000112   91FC               LD      R31, X
   \   00000114   9711               SBIW    R27:R26, 1
   \   00000116   0FE2               ADD     R30, R18
   \   00000118   1FF3               ADC     R31, R19
   \   0000011A   8300               ST      Z, R16
    128              My485UART.TxFirst++ ;                                       // OBS!! must be inc here
   \   0000011C   ....               LDI     R30, LOW(My485UART)
   \   0000011E   ....               LDI     R31, (My485UART) >> 8
   \   00000120   8102               LDD     R16, Z+2
   \   00000122   8113               LDD     R17, Z+3
   \   00000124   5F0F               SUBI    R16, 255
   \   00000126   4F1F               SBCI    R17, 255
   \   00000128   8302               STD     Z+2, R16
   \   0000012A   8313               STD     Z+3, R17
    129          
    130              My485UART.pTxBuffer[My485UART.TxFirst++] = ANPRO10_EOT ;            // End of transmission 
   \   0000012C   ....               LDI     R30, LOW(My485UART)
   \   0000012E   ....               LDI     R31, (My485UART) >> 8
   \   00000130   8102               LDD     R16, Z+2
   \   00000132   8113               LDD     R17, Z+3
   \   00000134   ....               LDI     R26, LOW(My485UART)
   \   00000136   ....               LDI     R27, (My485UART) >> 8
   \   00000138   91ED               LD      R30, X+
   \   0000013A   91FC               LD      R31, X
   \   0000013C   9711               SBIW    R27:R26, 1
   \   0000013E   0FE0               ADD     R30, R16
   \   00000140   1FF1               ADC     R31, R17
   \   00000142   E004               LDI     R16, 4
   \   00000144   8300               ST      Z, R16
   \   00000146   ....               LDI     R30, LOW(My485UART)
   \   00000148   ....               LDI     R31, (My485UART) >> 8
   \   0000014A   8102               LDD     R16, Z+2
   \   0000014C   8113               LDD     R17, Z+3
   \   0000014E   5F0F               SUBI    R16, 255
   \   00000150   4F1F               SBCI    R17, 255
   \   00000152   8302               STD     Z+2, R16
   \   00000154   8313               STD     Z+3, R17
    131              My485UART.pTxBuffer[My485UART.TxFirst++] = 0x00 ;            //switch off transmitter delay 
   \   00000156   ....               LDI     R30, LOW(My485UART)
   \   00000158   ....               LDI     R31, (My485UART) >> 8
   \   0000015A   8102               LDD     R16, Z+2
   \   0000015C   8113               LDD     R17, Z+3
   \   0000015E   ....               LDI     R26, LOW(My485UART)
   \   00000160   ....               LDI     R27, (My485UART) >> 8
   \   00000162   91ED               LD      R30, X+
   \   00000164   91FC               LD      R31, X
   \   00000166   9711               SBIW    R27:R26, 1
   \   00000168   0FE0               ADD     R30, R16
   \   0000016A   1FF1               ADC     R31, R17
   \   0000016C   E000               LDI     R16, 0
   \   0000016E   8300               ST      Z, R16
   \   00000170   ....               LDI     R30, LOW(My485UART)
   \   00000172   ....               LDI     R31, (My485UART) >> 8
   \   00000174   8102               LDD     R16, Z+2
   \   00000176   8113               LDD     R17, Z+3
   \   00000178   5F0F               SUBI    R16, 255
   \   0000017A   4F1F               SBCI    R17, 255
   \   0000017C   8302               STD     Z+2, R16
   \   0000017E   8313               STD     Z+3, R17
    132          
    133              My485UART.TxCount = My485UART.TxFirst;                      //bytes to send 
   \   00000180   ....               LDI     R30, LOW(My485UART)
   \   00000182   ....               LDI     R31, (My485UART) >> 8
   \   00000184   8102               LDD     R16, Z+2
   \   00000186   8113               LDD     R17, Z+3
   \   00000188   ....               LDI     R30, LOW(My485UART)
   \   0000018A   ....               LDI     R31, (My485UART) >> 8
   \   0000018C   8306               STD     Z+6, R16
   \   0000018E   8317               STD     Z+7, R17
    134              My485UART.TxLast = 0;                                     // reset cunter
   \   00000190   ....               LDI     R30, LOW(My485UART)
   \   00000192   ....               LDI     R31, (My485UART) >> 8
   \   00000194   E000               LDI     R16, 0
   \   00000196   8304               STD     Z+4, R16
   \   00000198   E000               LDI     R16, 0
   \   0000019A   8305               STD     Z+5, R16
    135              My485UART.TxPkCnt++ ;                                     // Count sent packages
   \   0000019C   ....               LDI     R30, LOW(My485UART)
   \   0000019E   ....               LDI     R31, (My485UART) >> 8
   \   000001A0   8500               LDD     R16, Z+8
   \   000001A2   8511               LDD     R17, Z+9
   \   000001A4   5F0F               SUBI    R16, 255
   \   000001A6   4F1F               SBCI    R17, 255
   \   000001A8   8700               STD     Z+8, R16
   \   000001AA   8711               STD     Z+9, R17
    136              PORTE |= 0x04 ;                                     // TXE0 on
   \   000001AC   9A1A               SBI     0x03, 0x02
    137              SendPacketUart() ;                                     // send answer
   \   000001AE   ....               RCALL   SendPacketUart
    138          }
   \   000001B0   E0E4               LDI     R30, 4
   \   000001B2   ........           JMP     ?EPILOGUE_B4_L09
   \   000001B6                      REQUIRE _A_PORTE
    139          
    140          
    141          /*************************************************************************
    142          *
    143          * Build datablock for card status
    144          *
    145          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    146          void BuildStatusData(void){
   \                     BuildStatusData:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    147          
    148              short ntna ;
    149              My485UART.RxSendReply = true ;                               // flag for answering 
   \   00000004   E001               LDI     R16, 1
   \   00000006   9300....           STS     (My485UART + 28), R16
    150              
    151              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_STATUS & 0xff;     
   \   0000000A   ....               LDI     R30, LOW(My485UART)
   \   0000000C   ....               LDI     R31, (My485UART) >> 8
   \   0000000E   8122               LDD     R18, Z+2
   \   00000010   8133               LDD     R19, Z+3
   \   00000012   ....               LDI     R30, LOW(My485UART)
   \   00000014   ....               LDI     R31, (My485UART) >> 8
   \   00000016   8100               LD      R16, Z
   \   00000018   8111               LDD     R17, Z+1
   \   0000001A   0F02               ADD     R16, R18
   \   0000001C   1F13               ADC     R17, R19
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   EE09               LDI     R16, 233
   \   00000022   8300               ST      Z, R16
   \   00000024   ....               LDI     R30, LOW(My485UART)
   \   00000026   ....               LDI     R31, (My485UART) >> 8
   \   00000028   8102               LDD     R16, Z+2
   \   0000002A   8113               LDD     R17, Z+3
   \   0000002C   5F0F               SUBI    R16, 255
   \   0000002E   4F1F               SBCI    R17, 255
   \   00000030   8302               STD     Z+2, R16
   \   00000032   8313               STD     Z+3, R17
    152              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_STATUS >> 8;     
   \   00000034   ....               LDI     R30, LOW(My485UART)
   \   00000036   ....               LDI     R31, (My485UART) >> 8
   \   00000038   8122               LDD     R18, Z+2
   \   0000003A   8133               LDD     R19, Z+3
   \   0000003C   ....               LDI     R30, LOW(My485UART)
   \   0000003E   ....               LDI     R31, (My485UART) >> 8
   \   00000040   8100               LD      R16, Z
   \   00000042   8111               LDD     R17, Z+1
   \   00000044   0F02               ADD     R16, R18
   \   00000046   1F13               ADC     R17, R19
   \   00000048   01F8               MOVW    R31:R30, R17:R16
   \   0000004A   E003               LDI     R16, 3
   \   0000004C   8300               ST      Z, R16
   \   0000004E   ....               LDI     R30, LOW(My485UART)
   \   00000050   ....               LDI     R31, (My485UART) >> 8
   \   00000052   8102               LDD     R16, Z+2
   \   00000054   8113               LDD     R17, Z+3
   \   00000056   5F0F               SUBI    R16, 255
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   8302               STD     Z+2, R16
   \   0000005C   8313               STD     Z+3, R17
    153              ntna = My485UART.TxFirst ;                                    /* remember index */
   \   0000005E   ....               LDI     R30, LOW(My485UART)
   \   00000060   ....               LDI     R31, (My485UART) >> 8
   \   00000062   8102               LDD     R16, Z+2
   \   00000064   8113               LDD     R17, Z+3
   \   00000066   01D8               MOVW    R27:R26, R17:R16
    154              My485UART.TxFirst += 2 ;                                      // two byte length
   \   00000068   ....               LDI     R30, LOW(My485UART)
   \   0000006A   ....               LDI     R31, (My485UART) >> 8
   \   0000006C   8102               LDD     R16, Z+2
   \   0000006E   8113               LDD     R17, Z+3
   \   00000070   5F0E               SUBI    R16, 254
   \   00000072   4F1F               SBCI    R17, 255
   \   00000074   8302               STD     Z+2, R16
   \   00000076   8313               STD     Z+3, R17
    155              My485UART.pTxBuffer[My485UART.TxFirst++] = 0 ;                // channel
   \   00000078   ....               LDI     R30, LOW(My485UART)
   \   0000007A   ....               LDI     R31, (My485UART) >> 8
   \   0000007C   8122               LDD     R18, Z+2
   \   0000007E   8133               LDD     R19, Z+3
   \   00000080   ....               LDI     R30, LOW(My485UART)
   \   00000082   ....               LDI     R31, (My485UART) >> 8
   \   00000084   8100               LD      R16, Z
   \   00000086   8111               LDD     R17, Z+1
   \   00000088   0F02               ADD     R16, R18
   \   0000008A   1F13               ADC     R17, R19
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   E000               LDI     R16, 0
   \   00000090   8300               ST      Z, R16
   \   00000092   ....               LDI     R30, LOW(My485UART)
   \   00000094   ....               LDI     R31, (My485UART) >> 8
   \   00000096   8102               LDD     R16, Z+2
   \   00000098   8113               LDD     R17, Z+3
   \   0000009A   5F0F               SUBI    R16, 255
   \   0000009C   4F1F               SBCI    R17, 255
   \   0000009E   8302               STD     Z+2, R16
   \   000000A0   8313               STD     Z+3, R17
    156              My485UART.pTxBuffer[My485UART.TxFirst++] = 0x10 +UnitID ;               // Product ID
   \   000000A2   9120....           LDS     R18, UnitID
   \   000000A6   5F20               SUBI    R18, 240
   \   000000A8   ....               LDI     R30, LOW(My485UART)
   \   000000AA   ....               LDI     R31, (My485UART) >> 8
   \   000000AC   8142               LDD     R20, Z+2
   \   000000AE   8153               LDD     R21, Z+3
   \   000000B0   ....               LDI     R30, LOW(My485UART)
   \   000000B2   ....               LDI     R31, (My485UART) >> 8
   \   000000B4   8100               LD      R16, Z
   \   000000B6   8111               LDD     R17, Z+1
   \   000000B8   0F04               ADD     R16, R20
   \   000000BA   1F15               ADC     R17, R21
   \   000000BC   01F8               MOVW    R31:R30, R17:R16
   \   000000BE   8320               ST      Z, R18
   \   000000C0   ....               LDI     R30, LOW(My485UART)
   \   000000C2   ....               LDI     R31, (My485UART) >> 8
   \   000000C4   8102               LDD     R16, Z+2
   \   000000C6   8113               LDD     R17, Z+3
   \   000000C8   5F0F               SUBI    R16, 255
   \   000000CA   4F1F               SBCI    R17, 255
   \   000000CC   8302               STD     Z+2, R16
   \   000000CE   8313               STD     Z+3, R17
    157              My485UART.pTxBuffer[My485UART.TxFirst++] = MyAddress();           // unit address				/* get the address */
   \   000000D0   ....               LDI     R30, LOW(My485UART)
   \   000000D2   ....               LDI     R31, (My485UART) >> 8
   \   000000D4   8182               LDD     R24, Z+2
   \   000000D6   8193               LDD     R25, Z+3
   \   000000D8   018C               MOVW    R17:R16, R25:R24
   \   000000DA   5F0F               SUBI    R16, 255
   \   000000DC   4F1F               SBCI    R17, 255
   \   000000DE   ....               LDI     R30, LOW(My485UART)
   \   000000E0   ....               LDI     R31, (My485UART) >> 8
   \   000000E2   8302               STD     Z+2, R16
   \   000000E4   8313               STD     Z+3, R17
   \   000000E6   ........           CALL    MyAddress
   \   000000EA   2F20               MOV     R18, R16
   \   000000EC   ....               LDI     R30, LOW(My485UART)
   \   000000EE   ....               LDI     R31, (My485UART) >> 8
   \   000000F0   8100               LD      R16, Z
   \   000000F2   8111               LDD     R17, Z+1
   \   000000F4   0F08               ADD     R16, R24
   \   000000F6   1F19               ADC     R17, R25
   \   000000F8   01F8               MOVW    R31:R30, R17:R16
   \   000000FA   8320               ST      Z, R18
    158              My485UART.pTxBuffer[My485UART.TxFirst++] = PROG_VERSION ;       // software version */
   \   000000FC   ....               LDI     R30, LOW(My485UART)
   \   000000FE   ....               LDI     R31, (My485UART) >> 8
   \   00000100   8122               LDD     R18, Z+2
   \   00000102   8133               LDD     R19, Z+3
   \   00000104   ....               LDI     R30, LOW(My485UART)
   \   00000106   ....               LDI     R31, (My485UART) >> 8
   \   00000108   8100               LD      R16, Z
   \   0000010A   8111               LDD     R17, Z+1
   \   0000010C   0F02               ADD     R16, R18
   \   0000010E   1F13               ADC     R17, R19
   \   00000110   01F8               MOVW    R31:R30, R17:R16
   \   00000112   E007               LDI     R16, 7
   \   00000114   8300               ST      Z, R16
   \   00000116   ....               LDI     R30, LOW(My485UART)
   \   00000118   ....               LDI     R31, (My485UART) >> 8
   \   0000011A   8102               LDD     R16, Z+2
   \   0000011C   8113               LDD     R17, Z+3
   \   0000011E   5F0F               SUBI    R16, 255
   \   00000120   4F1F               SBCI    R17, 255
   \   00000122   8302               STD     Z+2, R16
   \   00000124   8313               STD     Z+3, R17
    159              My485UART.pTxBuffer[My485UART.TxFirst++] = COMP_VERSION;        // cpmpability version
   \   00000126   ....               LDI     R30, LOW(My485UART)
   \   00000128   ....               LDI     R31, (My485UART) >> 8
   \   0000012A   8122               LDD     R18, Z+2
   \   0000012C   8133               LDD     R19, Z+3
   \   0000012E   ....               LDI     R30, LOW(My485UART)
   \   00000130   ....               LDI     R31, (My485UART) >> 8
   \   00000132   8100               LD      R16, Z
   \   00000134   8111               LDD     R17, Z+1
   \   00000136   0F02               ADD     R16, R18
   \   00000138   1F13               ADC     R17, R19
   \   0000013A   01F8               MOVW    R31:R30, R17:R16
   \   0000013C   E001               LDI     R16, 1
   \   0000013E   8300               ST      Z, R16
   \   00000140   ....               LDI     R30, LOW(My485UART)
   \   00000142   ....               LDI     R31, (My485UART) >> 8
   \   00000144   8102               LDD     R16, Z+2
   \   00000146   8113               LDD     R17, Z+3
   \   00000148   5F0F               SUBI    R16, 255
   \   0000014A   4F1F               SBCI    R17, 255
   \   0000014C   8302               STD     Z+2, R16
   \   0000014E   8313               STD     Z+3, R17
    160              My485UART.pTxBuffer[My485UART.TxFirst++] = STORE_VERSION;        // cpmpability version
   \   00000150   ....               LDI     R30, LOW(My485UART)
   \   00000152   ....               LDI     R31, (My485UART) >> 8
   \   00000154   8122               LDD     R18, Z+2
   \   00000156   8133               LDD     R19, Z+3
   \   00000158   ....               LDI     R30, LOW(My485UART)
   \   0000015A   ....               LDI     R31, (My485UART) >> 8
   \   0000015C   8100               LD      R16, Z
   \   0000015E   8111               LDD     R17, Z+1
   \   00000160   0F02               ADD     R16, R18
   \   00000162   1F13               ADC     R17, R19
   \   00000164   01F8               MOVW    R31:R30, R17:R16
   \   00000166   E002               LDI     R16, 2
   \   00000168   8300               ST      Z, R16
   \   0000016A   ....               LDI     R30, LOW(My485UART)
   \   0000016C   ....               LDI     R31, (My485UART) >> 8
   \   0000016E   8102               LDD     R16, Z+2
   \   00000170   8113               LDD     R17, Z+3
   \   00000172   5F0F               SUBI    R16, 255
   \   00000174   4F1F               SBCI    R17, 255
   \   00000176   8302               STD     Z+2, R16
   \   00000178   8313               STD     Z+3, R17
    161              My485UART.pTxBuffer[My485UART.TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \   0000017A   ....               LDI     R30, LOW(My485UART)
   \   0000017C   ....               LDI     R31, (My485UART) >> 8
   \   0000017E   8122               LDD     R18, Z+2
   \   00000180   8133               LDD     R19, Z+3
   \   00000182   ....               LDI     R30, LOW(My485UART)
   \   00000184   ....               LDI     R31, (My485UART) >> 8
   \   00000186   8100               LD      R16, Z
   \   00000188   8111               LDD     R17, Z+1
   \   0000018A   0F02               ADD     R16, R18
   \   0000018C   1F13               ADC     R17, R19
   \   0000018E   01F8               MOVW    R31:R30, R17:R16
   \   00000190   E50E               LDI     R16, 94
   \   00000192   8300               ST      Z, R16
   \   00000194   ....               LDI     R30, LOW(My485UART)
   \   00000196   ....               LDI     R31, (My485UART) >> 8
   \   00000198   8102               LDD     R16, Z+2
   \   0000019A   8113               LDD     R17, Z+3
   \   0000019C   5F0F               SUBI    R16, 255
   \   0000019E   4F1F               SBCI    R17, 255
   \   000001A0   8302               STD     Z+2, R16
   \   000001A2   8313               STD     Z+3, R17
    162              My485UART.pTxBuffer[My485UART.TxFirst++] = (( RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   000001A4   ....               LDI     R30, LOW(My485UART)
   \   000001A6   ....               LDI     R31, (My485UART) >> 8
   \   000001A8   8122               LDD     R18, Z+2
   \   000001AA   8133               LDD     R19, Z+3
   \   000001AC   ....               LDI     R30, LOW(My485UART)
   \   000001AE   ....               LDI     R31, (My485UART) >> 8
   \   000001B0   8100               LD      R16, Z
   \   000001B2   8111               LDD     R17, Z+1
   \   000001B4   0F02               ADD     R16, R18
   \   000001B6   1F13               ADC     R17, R19
   \   000001B8   01F8               MOVW    R31:R30, R17:R16
   \   000001BA   E001               LDI     R16, 1
   \   000001BC   8300               ST      Z, R16
   \   000001BE   ....               LDI     R30, LOW(My485UART)
   \   000001C0   ....               LDI     R31, (My485UART) >> 8
   \   000001C2   8102               LDD     R16, Z+2
   \   000001C4   8113               LDD     R17, Z+3
   \   000001C6   5F0F               SUBI    R16, 255
   \   000001C8   4F1F               SBCI    R17, 255
   \   000001CA   8302               STD     Z+2, R16
   \   000001CC   8313               STD     Z+3, R17
    163              My485UART.pTxBuffer[My485UART.TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \   000001CE   ....               LDI     R30, LOW(My485UART)
   \   000001D0   ....               LDI     R31, (My485UART) >> 8
   \   000001D2   8122               LDD     R18, Z+2
   \   000001D4   8133               LDD     R19, Z+3
   \   000001D6   ....               LDI     R30, LOW(My485UART)
   \   000001D8   ....               LDI     R31, (My485UART) >> 8
   \   000001DA   8100               LD      R16, Z
   \   000001DC   8111               LDD     R17, Z+1
   \   000001DE   0F02               ADD     R16, R18
   \   000001E0   1F13               ADC     R17, R19
   \   000001E2   01F8               MOVW    R31:R30, R17:R16
   \   000001E4   E50E               LDI     R16, 94
   \   000001E6   8300               ST      Z, R16
   \   000001E8   ....               LDI     R30, LOW(My485UART)
   \   000001EA   ....               LDI     R31, (My485UART) >> 8
   \   000001EC   8102               LDD     R16, Z+2
   \   000001EE   8113               LDD     R17, Z+3
   \   000001F0   5F0F               SUBI    R16, 255
   \   000001F2   4F1F               SBCI    R17, 255
   \   000001F4   8302               STD     Z+2, R16
   \   000001F6   8313               STD     Z+3, R17
    164              My485UART.pTxBuffer[My485UART.TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
   \   000001F8   ....               LDI     R30, LOW(My485UART)
   \   000001FA   ....               LDI     R31, (My485UART) >> 8
   \   000001FC   8122               LDD     R18, Z+2
   \   000001FE   8133               LDD     R19, Z+3
   \   00000200   ....               LDI     R30, LOW(My485UART)
   \   00000202   ....               LDI     R31, (My485UART) >> 8
   \   00000204   8100               LD      R16, Z
   \   00000206   8111               LDD     R17, Z+1
   \   00000208   0F02               ADD     R16, R18
   \   0000020A   1F13               ADC     R17, R19
   \   0000020C   01F8               MOVW    R31:R30, R17:R16
   \   0000020E   E001               LDI     R16, 1
   \   00000210   8300               ST      Z, R16
   \   00000212   ....               LDI     R30, LOW(My485UART)
   \   00000214   ....               LDI     R31, (My485UART) >> 8
   \   00000216   8102               LDD     R16, Z+2
   \   00000218   8113               LDD     R17, Z+3
   \   0000021A   5F0F               SUBI    R16, 255
   \   0000021C   4F1F               SBCI    R17, 255
   \   0000021E   8302               STD     Z+2, R16
   \   00000220   8313               STD     Z+3, R17
    165              My485UART.pTxBuffer[My485UART.TxFirst++] = ResetStatus ;                  // restart flag
   \   00000222   9120....           LDS     R18, ResetStatus
   \   00000226   ....               LDI     R30, LOW(My485UART)
   \   00000228   ....               LDI     R31, (My485UART) >> 8
   \   0000022A   8142               LDD     R20, Z+2
   \   0000022C   8153               LDD     R21, Z+3
   \   0000022E   ....               LDI     R30, LOW(My485UART)
   \   00000230   ....               LDI     R31, (My485UART) >> 8
   \   00000232   8100               LD      R16, Z
   \   00000234   8111               LDD     R17, Z+1
   \   00000236   0F04               ADD     R16, R20
   \   00000238   1F15               ADC     R17, R21
   \   0000023A   01F8               MOVW    R31:R30, R17:R16
   \   0000023C   8320               ST      Z, R18
   \   0000023E   ....               LDI     R30, LOW(My485UART)
   \   00000240   ....               LDI     R31, (My485UART) >> 8
   \   00000242   8102               LDD     R16, Z+2
   \   00000244   8113               LDD     R17, Z+3
   \   00000246   5F0F               SUBI    R16, 255
   \   00000248   4F1F               SBCI    R17, 255
   \   0000024A   8302               STD     Z+2, R16
   \   0000024C   8313               STD     Z+3, R17
    166              My485UART.pTxBuffer[My485UART.TxFirst++] = PROGTYPE_BOOT ;                // Boot program
   \   0000024E   ....               LDI     R30, LOW(My485UART)
   \   00000250   ....               LDI     R31, (My485UART) >> 8
   \   00000252   8122               LDD     R18, Z+2
   \   00000254   8133               LDD     R19, Z+3
   \   00000256   ....               LDI     R30, LOW(My485UART)
   \   00000258   ....               LDI     R31, (My485UART) >> 8
   \   0000025A   8100               LD      R16, Z
   \   0000025C   8111               LDD     R17, Z+1
   \   0000025E   0F02               ADD     R16, R18
   \   00000260   1F13               ADC     R17, R19
   \   00000262   01F8               MOVW    R31:R30, R17:R16
   \   00000264   E000               LDI     R16, 0
   \   00000266   8300               ST      Z, R16
   \   00000268   ....               LDI     R30, LOW(My485UART)
   \   0000026A   ....               LDI     R31, (My485UART) >> 8
   \   0000026C   8102               LDD     R16, Z+2
   \   0000026E   8113               LDD     R17, Z+3
   \   00000270   5F0F               SUBI    R16, 255
   \   00000272   4F1F               SBCI    R17, 255
   \   00000274   8302               STD     Z+2, R16
   \   00000276   8313               STD     Z+3, R17
    167          
    168              My485UART.pTxBuffer[ntna] = (My485UART.TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000278   ....               LDI     R30, LOW(My485UART)
   \   0000027A   ....               LDI     R31, (My485UART) >> 8
   \   0000027C   8122               LDD     R18, Z+2
   \   0000027E   8133               LDD     R19, Z+3
   \   00000280   2F0A               MOV     R16, R26
   \   00000282   1B20               SUB     R18, R16
   \   00000284   5022               SUBI    R18, 2
   \   00000286   ....               LDI     R30, LOW(My485UART)
   \   00000288   ....               LDI     R31, (My485UART) >> 8
   \   0000028A   8100               LD      R16, Z
   \   0000028C   8111               LDD     R17, Z+1
   \   0000028E   0F0A               ADD     R16, R26
   \   00000290   1F1B               ADC     R17, R27
   \   00000292   01F8               MOVW    R31:R30, R17:R16
   \   00000294   8320               ST      Z, R18
    169              My485UART.pTxBuffer[ntna+1]   = ((My485UART.TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000296   ....               LDI     R30, LOW(My485UART)
   \   00000298   ....               LDI     R31, (My485UART) >> 8
   \   0000029A   8182               LDD     R24, Z+2
   \   0000029C   8193               LDD     R25, Z+3
   \   0000029E   1B8A               SUB     R24, R26
   \   000002A0   0B9B               SBC     R25, R27
   \   000002A2   9702               SBIW    R25:R24, 2
   \   000002A4   2F89               MOV     R24, R25
   \   000002A6   E090               LDI     R25, 0
   \   000002A8   ....               LDI     R30, LOW(My485UART)
   \   000002AA   ....               LDI     R31, (My485UART) >> 8
   \   000002AC   8100               LD      R16, Z
   \   000002AE   8111               LDD     R17, Z+1
   \   000002B0   0F0A               ADD     R16, R26
   \   000002B2   1F1B               ADC     R17, R27
   \   000002B4   01F8               MOVW    R31:R30, R17:R16
   \   000002B6   8381               STD     Z+1, R24
    170              
    171              ResetStatus = 0 ;                                                       // set reset stat to 0 = read
   \   000002B8   E000               LDI     R16, 0
   \   000002BA   9300....           STS     ResetStatus, R16
    172          }
   \   000002BE   E0E4               LDI     R30, 4
   \   000002C0   ........           JMP     ?EPILOGUE_B4_L09
    173          
    174          /*************************************************************************
    175          *
    176          * Build datablock for Flash ID
    177          *
    178          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    179          void BuildFlashID(void) {
   \                     BuildFlashID:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    180          
    181              short ntna;
    182              My485UART.RxSendReply = true ;                               // flag for answering 
   \   00000004   E021               LDI     R18, 1
   \   00000006   9320....           STS     (My485UART + 28), R18
    183              
    184              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_FLASH_ID & 0xff;     
   \   0000000A   ....               LDI     R30, LOW(My485UART)
   \   0000000C   ....               LDI     R31, (My485UART) >> 8
   \   0000000E   8142               LDD     R20, Z+2
   \   00000010   8153               LDD     R21, Z+3
   \   00000012   ....               LDI     R30, LOW(My485UART)
   \   00000014   ....               LDI     R31, (My485UART) >> 8
   \   00000016   8120               LD      R18, Z
   \   00000018   8131               LDD     R19, Z+1
   \   0000001A   0F24               ADD     R18, R20
   \   0000001C   1F35               ADC     R19, R21
   \   0000001E   01F9               MOVW    R31:R30, R19:R18
   \   00000020   E925               LDI     R18, 149
   \   00000022   8320               ST      Z, R18
   \   00000024   ....               LDI     R30, LOW(My485UART)
   \   00000026   ....               LDI     R31, (My485UART) >> 8
   \   00000028   8122               LDD     R18, Z+2
   \   0000002A   8133               LDD     R19, Z+3
   \   0000002C   5F2F               SUBI    R18, 255
   \   0000002E   4F3F               SBCI    R19, 255
   \   00000030   8322               STD     Z+2, R18
   \   00000032   8333               STD     Z+3, R19
    185              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_FLASH_ID >> 8;     
   \   00000034   ....               LDI     R30, LOW(My485UART)
   \   00000036   ....               LDI     R31, (My485UART) >> 8
   \   00000038   8142               LDD     R20, Z+2
   \   0000003A   8153               LDD     R21, Z+3
   \   0000003C   ....               LDI     R30, LOW(My485UART)
   \   0000003E   ....               LDI     R31, (My485UART) >> 8
   \   00000040   8120               LD      R18, Z
   \   00000042   8131               LDD     R19, Z+1
   \   00000044   0F24               ADD     R18, R20
   \   00000046   1F35               ADC     R19, R21
   \   00000048   01F9               MOVW    R31:R30, R19:R18
   \   0000004A   E027               LDI     R18, 7
   \   0000004C   8320               ST      Z, R18
   \   0000004E   ....               LDI     R30, LOW(My485UART)
   \   00000050   ....               LDI     R31, (My485UART) >> 8
   \   00000052   8122               LDD     R18, Z+2
   \   00000054   8133               LDD     R19, Z+3
   \   00000056   5F2F               SUBI    R18, 255
   \   00000058   4F3F               SBCI    R19, 255
   \   0000005A   8322               STD     Z+2, R18
   \   0000005C   8333               STD     Z+3, R19
    186              ntna = My485UART.TxFirst ;                                    // remember index 
   \   0000005E   ....               LDI     R30, LOW(My485UART)
   \   00000060   ....               LDI     R31, (My485UART) >> 8
   \   00000062   8122               LDD     R18, Z+2
   \   00000064   8133               LDD     R19, Z+3
   \   00000066   0189               MOVW    R17:R16, R19:R18
    187              My485UART.TxFirst += 2 ;                                      // two byte length
   \   00000068   ....               LDI     R30, LOW(My485UART)
   \   0000006A   ....               LDI     R31, (My485UART) >> 8
   \   0000006C   8122               LDD     R18, Z+2
   \   0000006E   8133               LDD     R19, Z+3
   \   00000070   5F2E               SUBI    R18, 254
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   8322               STD     Z+2, R18
   \   00000076   8333               STD     Z+3, R19
    188              
    189              My485UART.pTxBuffer[My485UART.TxFirst++] = PARTCODE ;
   \   00000078   ....               LDI     R30, LOW(My485UART)
   \   0000007A   ....               LDI     R31, (My485UART) >> 8
   \   0000007C   8142               LDD     R20, Z+2
   \   0000007E   8153               LDD     R21, Z+3
   \   00000080   ....               LDI     R30, LOW(My485UART)
   \   00000082   ....               LDI     R31, (My485UART) >> 8
   \   00000084   8120               LD      R18, Z
   \   00000086   8131               LDD     R19, Z+1
   \   00000088   0F24               ADD     R18, R20
   \   0000008A   1F35               ADC     R19, R21
   \   0000008C   01F9               MOVW    R31:R30, R19:R18
   \   0000008E   E424               LDI     R18, 68
   \   00000090   8320               ST      Z, R18
   \   00000092   ....               LDI     R30, LOW(My485UART)
   \   00000094   ....               LDI     R31, (My485UART) >> 8
   \   00000096   8122               LDD     R18, Z+2
   \   00000098   8133               LDD     R19, Z+3
   \   0000009A   5F2F               SUBI    R18, 255
   \   0000009C   4F3F               SBCI    R19, 255
   \   0000009E   8322               STD     Z+2, R18
   \   000000A0   8333               STD     Z+3, R19
    190              My485UART.pTxBuffer[My485UART.TxFirst++] = SIGNATURE_BYTE_1 ;
   \   000000A2   ....               LDI     R30, LOW(My485UART)
   \   000000A4   ....               LDI     R31, (My485UART) >> 8
   \   000000A6   8122               LDD     R18, Z+2
   \   000000A8   8133               LDD     R19, Z+3
   \   000000AA   ....               LDI     R26, LOW(My485UART)
   \   000000AC   ....               LDI     R27, (My485UART) >> 8
   \   000000AE   91ED               LD      R30, X+
   \   000000B0   91FC               LD      R31, X
   \   000000B2   9711               SBIW    R27:R26, 1
   \   000000B4   0FE2               ADD     R30, R18
   \   000000B6   1FF3               ADC     R31, R19
   \   000000B8   E12E               LDI     R18, 30
   \   000000BA   8320               ST      Z, R18
   \   000000BC   ....               LDI     R30, LOW(My485UART)
   \   000000BE   ....               LDI     R31, (My485UART) >> 8
   \   000000C0   8122               LDD     R18, Z+2
   \   000000C2   8133               LDD     R19, Z+3
   \   000000C4   5F2F               SUBI    R18, 255
   \   000000C6   4F3F               SBCI    R19, 255
   \   000000C8   8322               STD     Z+2, R18
   \   000000CA   8333               STD     Z+3, R19
    191              My485UART.pTxBuffer[My485UART.TxFirst++] = SIGNATURE_BYTE_2 ;
   \   000000CC   ....               LDI     R30, LOW(My485UART)
   \   000000CE   ....               LDI     R31, (My485UART) >> 8
   \   000000D0   8122               LDD     R18, Z+2
   \   000000D2   8133               LDD     R19, Z+3
   \   000000D4   ....               LDI     R26, LOW(My485UART)
   \   000000D6   ....               LDI     R27, (My485UART) >> 8
   \   000000D8   91ED               LD      R30, X+
   \   000000DA   91FC               LD      R31, X
   \   000000DC   9711               SBIW    R27:R26, 1
   \   000000DE   0FE2               ADD     R30, R18
   \   000000E0   1FF3               ADC     R31, R19
   \   000000E2   E927               LDI     R18, 151
   \   000000E4   8320               ST      Z, R18
   \   000000E6   ....               LDI     R30, LOW(My485UART)
   \   000000E8   ....               LDI     R31, (My485UART) >> 8
   \   000000EA   8122               LDD     R18, Z+2
   \   000000EC   8133               LDD     R19, Z+3
   \   000000EE   5F2F               SUBI    R18, 255
   \   000000F0   4F3F               SBCI    R19, 255
   \   000000F2   8322               STD     Z+2, R18
   \   000000F4   8333               STD     Z+3, R19
    192              My485UART.pTxBuffer[My485UART.TxFirst++] = SIGNATURE_BYTE_3 ;
   \   000000F6   ....               LDI     R30, LOW(My485UART)
   \   000000F8   ....               LDI     R31, (My485UART) >> 8
   \   000000FA   8122               LDD     R18, Z+2
   \   000000FC   8133               LDD     R19, Z+3
   \   000000FE   ....               LDI     R26, LOW(My485UART)
   \   00000100   ....               LDI     R27, (My485UART) >> 8
   \   00000102   91ED               LD      R30, X+
   \   00000104   91FC               LD      R31, X
   \   00000106   9711               SBIW    R27:R26, 1
   \   00000108   0FE2               ADD     R30, R18
   \   0000010A   1FF3               ADC     R31, R19
   \   0000010C   E022               LDI     R18, 2
   \   0000010E   8320               ST      Z, R18
   \   00000110   ....               LDI     R30, LOW(My485UART)
   \   00000112   ....               LDI     R31, (My485UART) >> 8
   \   00000114   8122               LDD     R18, Z+2
   \   00000116   8133               LDD     R19, Z+3
   \   00000118   5F2F               SUBI    R18, 255
   \   0000011A   4F3F               SBCI    R19, 255
   \   0000011C   8322               STD     Z+2, R18
   \   0000011E   8333               STD     Z+3, R19
    193          
    194                  
    195              My485UART.pTxBuffer[ntna] = (My485UART.TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000120   ....               LDI     R30, LOW(My485UART)
   \   00000122   ....               LDI     R31, (My485UART) >> 8
   \   00000124   8122               LDD     R18, Z+2
   \   00000126   8133               LDD     R19, Z+3
   \   00000128   2F30               MOV     R19, R16
   \   0000012A   1B23               SUB     R18, R19
   \   0000012C   5022               SUBI    R18, 2
   \   0000012E   ....               LDI     R26, LOW(My485UART)
   \   00000130   ....               LDI     R27, (My485UART) >> 8
   \   00000132   91ED               LD      R30, X+
   \   00000134   91FC               LD      R31, X
   \   00000136   9711               SBIW    R27:R26, 1
   \   00000138   0FE0               ADD     R30, R16
   \   0000013A   1FF1               ADC     R31, R17
   \   0000013C   8320               ST      Z, R18
    196              My485UART.pTxBuffer[ntna+1] = ((My485UART.TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000013E   ....               LDI     R30, LOW(My485UART)
   \   00000140   ....               LDI     R31, (My485UART) >> 8
   \   00000142   8182               LDD     R24, Z+2
   \   00000144   8193               LDD     R25, Z+3
   \   00000146   1B80               SUB     R24, R16
   \   00000148   0B91               SBC     R25, R17
   \   0000014A   9702               SBIW    R25:R24, 2
   \   0000014C   2F89               MOV     R24, R25
   \   0000014E   E090               LDI     R25, 0
   \   00000150   ....               LDI     R30, LOW(My485UART)
   \   00000152   ....               LDI     R31, (My485UART) >> 8
   \   00000154   8120               LD      R18, Z
   \   00000156   8131               LDD     R19, Z+1
   \   00000158   0F20               ADD     R18, R16
   \   0000015A   1F31               ADC     R19, R17
   \   0000015C   01F9               MOVW    R31:R30, R19:R18
   \   0000015E   8381               STD     Z+1, R24
    197          
    198          }
   \   00000160   E0E4               LDI     R30, 4
   \   00000162   ........           JMP     ?EPILOGUE_B4_L09
    199          
    200          /*************************************************************************
    201          *
    202          * Erase Flash 
    203          *
    204          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    205          void EraseFlash(void) {
   \                     EraseFlash:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    206          
    207              unsigned short ntna, address;
    208              My485UART.RxSendReply = true ;                               // flag for answering 
   \   00000004   E001               LDI     R16, 1
   \   00000006   9300....           STS     (My485UART + 28), R16
    209              
    210              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_FLASH_ERASE & 0xff;     
   \   0000000A   ....               LDI     R30, LOW(My485UART)
   \   0000000C   ....               LDI     R31, (My485UART) >> 8
   \   0000000E   8122               LDD     R18, Z+2
   \   00000010   8133               LDD     R19, Z+3
   \   00000012   ....               LDI     R30, LOW(My485UART)
   \   00000014   ....               LDI     R31, (My485UART) >> 8
   \   00000016   8100               LD      R16, Z
   \   00000018   8111               LDD     R17, Z+1
   \   0000001A   0F02               ADD     R16, R18
   \   0000001C   1F13               ADC     R17, R19
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   E90F               LDI     R16, 159
   \   00000022   8300               ST      Z, R16
   \   00000024   ....               LDI     R30, LOW(My485UART)
   \   00000026   ....               LDI     R31, (My485UART) >> 8
   \   00000028   8102               LDD     R16, Z+2
   \   0000002A   8113               LDD     R17, Z+3
   \   0000002C   5F0F               SUBI    R16, 255
   \   0000002E   4F1F               SBCI    R17, 255
   \   00000030   8302               STD     Z+2, R16
   \   00000032   8313               STD     Z+3, R17
    211              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_FLASH_ERASE >> 8;     
   \   00000034   ....               LDI     R30, LOW(My485UART)
   \   00000036   ....               LDI     R31, (My485UART) >> 8
   \   00000038   8122               LDD     R18, Z+2
   \   0000003A   8133               LDD     R19, Z+3
   \   0000003C   ....               LDI     R30, LOW(My485UART)
   \   0000003E   ....               LDI     R31, (My485UART) >> 8
   \   00000040   8100               LD      R16, Z
   \   00000042   8111               LDD     R17, Z+1
   \   00000044   0F02               ADD     R16, R18
   \   00000046   1F13               ADC     R17, R19
   \   00000048   01F8               MOVW    R31:R30, R17:R16
   \   0000004A   E007               LDI     R16, 7
   \   0000004C   8300               ST      Z, R16
   \   0000004E   ....               LDI     R30, LOW(My485UART)
   \   00000050   ....               LDI     R31, (My485UART) >> 8
   \   00000052   8102               LDD     R16, Z+2
   \   00000054   8113               LDD     R17, Z+3
   \   00000056   5F0F               SUBI    R16, 255
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   8302               STD     Z+2, R16
   \   0000005C   8313               STD     Z+3, R17
    212              ntna = My485UART.TxFirst ;                                    // remember index 
   \   0000005E   ....               LDI     R30, LOW(My485UART)
   \   00000060   ....               LDI     R31, (My485UART) >> 8
   \   00000062   8102               LDD     R16, Z+2
   \   00000064   8113               LDD     R17, Z+3
   \   00000066   01D8               MOVW    R27:R26, R17:R16
    213              My485UART.TxFirst += 2 ;                                      // two byte length
   \   00000068   ....               LDI     R30, LOW(My485UART)
   \   0000006A   ....               LDI     R31, (My485UART) >> 8
   \   0000006C   8102               LDD     R16, Z+2
   \   0000006E   8113               LDD     R17, Z+3
   \   00000070   5F0E               SUBI    R16, 254
   \   00000072   4F1F               SBCI    R17, 255
   \   00000074   8302               STD     Z+2, R16
   \   00000076   8313               STD     Z+3, R17
    214              
    215              #ifdef LARGE_MEMORY               //SPM uses Z pointer but the pointer is only 16bit and
    216              RAMPZ = 0x00;                     //can only address up to 64Kbytes FLASH to adresse higher 
   \   00000078   E000               LDI     R16, 0
   \   0000007A   BF0B               OUT     0x3B, R16
    217                                              //location it require the use of RAMPZ
    218              
    219              for(address=0;((address < (unsigned int)(APP_END&0xFFFF))|(RAMPZ == 0x00));address += PAGESIZE) {
   \   0000007C   E080               LDI     R24, 0
   \   0000007E   E090               LDI     R25, 0
   \                     ??EraseFlash_0:
   \   00000080   3080               CPI     R24, 0
   \   00000082   EE00               LDI     R16, 224
   \   00000084   0790               CPC     R25, R16
   \   00000086   F410               BRCC    ??EraseFlash_1
   \   00000088   E011               LDI     R17, 1
   \   0000008A   C001               RJMP    ??EraseFlash_2
   \                     ??EraseFlash_1:
   \   0000008C   E010               LDI     R17, 0
   \                     ??EraseFlash_2:
   \   0000008E   B70B               IN      R16, 0x3B
   \   00000090   2300               TST     R16
   \   00000092   F411               BRNE    ??EraseFlash_3
   \   00000094   E001               LDI     R16, 1
   \   00000096   C001               RJMP    ??EraseFlash_4
   \                     ??EraseFlash_3:
   \   00000098   E000               LDI     R16, 0
   \                     ??EraseFlash_4:
   \   0000009A   2B10               OR      R17, R16
   \   0000009C   2311               TST     R17
   \   0000009E   F089               BREQ    ??EraseFlash_5
    220                  write_page(address,(1<<PGERS) + (1<<SPMEN));              //Perform page erase
   \   000000A0   E023               LDI     R18, 3
   \   000000A2   018C               MOVW    R17:R16, R25:R24
   \   000000A4   ........           CALL    write_page
    221                  write_page(address, (1<<REENABLE_RWW_BIT) + (1<<SPMEN));  //Re-enable the RWW section
   \   000000A8   E121               LDI     R18, 17
   \   000000AA   018C               MOVW    R17:R16, R25:R24
   \   000000AC   ........           CALL    write_page
    222              
    223                  if(address >=(0xFFFF-PAGESIZE)) //Last section on lower 64k segment is erased
   \   000000B0   3F8F               CPI     R24, 255
   \   000000B2   EF0E               LDI     R16, 254
   \   000000B4   0790               CPC     R25, R16
   \   000000B6   F010               BRCS    ??EraseFlash_6
    224                     RAMPZ = (1<<RAMPZ0);         //RAMPZ has to incremented into upper 64k segment
   \   000000B8   E001               LDI     R16, 1
   \   000000BA   BF0B               OUT     0x3B, R16
    225              }
   \                     ??EraseFlash_6:
   \   000000BC   5080               SUBI    R24, 0
   \   000000BE   4F9F               SBCI    R25, 255
   \   000000C0   CFDF               RJMP    ??EraseFlash_0
    226              RAMPZ = 0x00;                     //Clear RAMPZ pointer
   \                     ??EraseFlash_5:
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   BF0B               OUT     0x3B, R16
    227              
    228              #else
    229              
    230              for(address=0;address < APP_END;address += PAGESIZE){  //Application section = 60 pages
    231                  write_page(address,(1<<PGERS) + (1<<SPMEN));       //Perform page erase
    232                  write_page(address, (1<<REENABLE_RWW_BIT) + (1<<SPMEN));  //Re-enable the RWW section
    233              }
    234              
    235              #endif          
    236          
    237              My485UART.pTxBuffer[My485UART.TxFirst++] = FLASH_ERASE_OK ;                 // Answer that the erase is OK
   \   000000C6   ....               LDI     R30, LOW(My485UART)
   \   000000C8   ....               LDI     R31, (My485UART) >> 8
   \   000000CA   8122               LDD     R18, Z+2
   \   000000CC   8133               LDD     R19, Z+3
   \   000000CE   ....               LDI     R30, LOW(My485UART)
   \   000000D0   ....               LDI     R31, (My485UART) >> 8
   \   000000D2   8100               LD      R16, Z
   \   000000D4   8111               LDD     R17, Z+1
   \   000000D6   0F02               ADD     R16, R18
   \   000000D8   1F13               ADC     R17, R19
   \   000000DA   01F8               MOVW    R31:R30, R17:R16
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   ....               LDI     R30, LOW(My485UART)
   \   000000E2   ....               LDI     R31, (My485UART) >> 8
   \   000000E4   8102               LDD     R16, Z+2
   \   000000E6   8113               LDD     R17, Z+3
   \   000000E8   5F0F               SUBI    R16, 255
   \   000000EA   4F1F               SBCI    R17, 255
   \   000000EC   8302               STD     Z+2, R16
   \   000000EE   8313               STD     Z+3, R17
    238          
    239              My485UART.pTxBuffer[ntna] = (My485UART.TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000000F0   ....               LDI     R30, LOW(My485UART)
   \   000000F2   ....               LDI     R31, (My485UART) >> 8
   \   000000F4   8122               LDD     R18, Z+2
   \   000000F6   8133               LDD     R19, Z+3
   \   000000F8   2F0A               MOV     R16, R26
   \   000000FA   1B20               SUB     R18, R16
   \   000000FC   5022               SUBI    R18, 2
   \   000000FE   ....               LDI     R30, LOW(My485UART)
   \   00000100   ....               LDI     R31, (My485UART) >> 8
   \   00000102   8100               LD      R16, Z
   \   00000104   8111               LDD     R17, Z+1
   \   00000106   0F0A               ADD     R16, R26
   \   00000108   1F1B               ADC     R17, R27
   \   0000010A   01F8               MOVW    R31:R30, R17:R16
   \   0000010C   8320               ST      Z, R18
    240              My485UART.pTxBuffer[ntna+1] = ((My485UART.TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000010E   ....               LDI     R30, LOW(My485UART)
   \   00000110   ....               LDI     R31, (My485UART) >> 8
   \   00000112   8102               LDD     R16, Z+2
   \   00000114   8113               LDD     R17, Z+3
   \   00000116   1B0A               SUB     R16, R26
   \   00000118   0B1B               SBC     R17, R27
   \   0000011A   5002               SUBI    R16, 2
   \   0000011C   4010               SBCI    R17, 0
   \   0000011E   2F01               MOV     R16, R17
   \   00000120   E010               LDI     R17, 0
   \   00000122   2F20               MOV     R18, R16
   \   00000124   ....               LDI     R30, LOW(My485UART)
   \   00000126   ....               LDI     R31, (My485UART) >> 8
   \   00000128   8100               LD      R16, Z
   \   0000012A   8111               LDD     R17, Z+1
   \   0000012C   0F0A               ADD     R16, R26
   \   0000012E   1F1B               ADC     R17, R27
   \   00000130   01F8               MOVW    R31:R30, R17:R16
   \   00000132   8321               STD     Z+1, R18
    241          
    242          }
   \   00000134   E0E4               LDI     R30, 4
   \   00000136   ........           JMP     ?EPILOGUE_B4_L09
   \   0000013A                      REQUIRE _A_RAMPZ
    243          
    244          /*************************************************************************
    245          *
    246          * Program Flash 
    247          *
    248          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    249          void ProgramFlash(unsigned short pointer) {
   \                     ProgramFlash:
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    250          
    251              unsigned short ntna, address, Nobytes, i, Addr, intval, Ptr;
    252              My485UART.RxSendReply = true ;                               // flag for answering 
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     (My485UART + 28), R16
    253              
    254              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_FLASH_PROG & 0xff;     
   \   0000000C   ....               LDI     R30, LOW(My485UART)
   \   0000000E   ....               LDI     R31, (My485UART) >> 8
   \   00000010   8122               LDD     R18, Z+2
   \   00000012   8133               LDD     R19, Z+3
   \   00000014   ....               LDI     R30, LOW(My485UART)
   \   00000016   ....               LDI     R31, (My485UART) >> 8
   \   00000018   8100               LD      R16, Z
   \   0000001A   8111               LDD     R17, Z+1
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   EA09               LDI     R16, 169
   \   00000024   8300               ST      Z, R16
   \   00000026   ....               LDI     R30, LOW(My485UART)
   \   00000028   ....               LDI     R31, (My485UART) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   8302               STD     Z+2, R16
   \   00000034   8313               STD     Z+3, R17
    255              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_FLASH_PROG >> 8;     
   \   00000036   ....               LDI     R30, LOW(My485UART)
   \   00000038   ....               LDI     R31, (My485UART) >> 8
   \   0000003A   8122               LDD     R18, Z+2
   \   0000003C   8133               LDD     R19, Z+3
   \   0000003E   ....               LDI     R30, LOW(My485UART)
   \   00000040   ....               LDI     R31, (My485UART) >> 8
   \   00000042   8100               LD      R16, Z
   \   00000044   8111               LDD     R17, Z+1
   \   00000046   0F02               ADD     R16, R18
   \   00000048   1F13               ADC     R17, R19
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   E007               LDI     R16, 7
   \   0000004E   8300               ST      Z, R16
   \   00000050   ....               LDI     R30, LOW(My485UART)
   \   00000052   ....               LDI     R31, (My485UART) >> 8
   \   00000054   8102               LDD     R16, Z+2
   \   00000056   8113               LDD     R17, Z+3
   \   00000058   5F0F               SUBI    R16, 255
   \   0000005A   4F1F               SBCI    R17, 255
   \   0000005C   8302               STD     Z+2, R16
   \   0000005E   8313               STD     Z+3, R17
    256              ntna = My485UART.TxFirst ;                                    // remember index 
   \   00000060   ....               LDI     R30, LOW(My485UART)
   \   00000062   ....               LDI     R31, (My485UART) >> 8
   \   00000064   8102               LDD     R16, Z+2
   \   00000066   8113               LDD     R17, Z+3
   \   00000068   0178               MOVW    R15:R14, R17:R16
    257              My485UART.TxFirst += 2 ;                                      // two byte length
   \   0000006A   ....               LDI     R30, LOW(My485UART)
   \   0000006C   ....               LDI     R31, (My485UART) >> 8
   \   0000006E   8102               LDD     R16, Z+2
   \   00000070   8113               LDD     R17, Z+3
   \   00000072   5F0E               SUBI    R16, 254
   \   00000074   4F1F               SBCI    R17, 255
   \   00000076   8302               STD     Z+2, R16
   \   00000078   8313               STD     Z+3, R17
    258              
    259              address = My485UART.pRxBuffer[pointer] + (My485UART.pRxBuffer[pointer+1]<<8); // save address
   \   0000007A   ....               LDI     R30, LOW(My485UART)
   \   0000007C   ....               LDI     R31, (My485UART) >> 8
   \   0000007E   8504               LDD     R16, Z+12
   \   00000080   8515               LDD     R17, Z+13
   \   00000082   0F0A               ADD     R16, R26
   \   00000084   1F1B               ADC     R17, R27
   \   00000086   01F8               MOVW    R31:R30, R17:R16
   \   00000088   8120               LD      R18, Z
   \   0000008A   ....               LDI     R30, LOW(My485UART)
   \   0000008C   ....               LDI     R31, (My485UART) >> 8
   \   0000008E   8504               LDD     R16, Z+12
   \   00000090   8515               LDD     R17, Z+13
   \   00000092   0F0A               ADD     R16, R26
   \   00000094   1F1B               ADC     R17, R27
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   8131               LDD     R19, Z+1
   \   0000009A   0129               MOVW    R5:R4, R19:R18
    260              pointer += 2;
   \   0000009C   9612               ADIW    R27:R26, 2
    261              Nobytes = My485UART.pRxBuffer[pointer] + (My485UART.pRxBuffer[pointer+1]<<8); // save address
   \   0000009E   ....               LDI     R30, LOW(My485UART)
   \   000000A0   ....               LDI     R31, (My485UART) >> 8
   \   000000A2   8504               LDD     R16, Z+12
   \   000000A4   8515               LDD     R17, Z+13
   \   000000A6   0F0A               ADD     R16, R26
   \   000000A8   1F1B               ADC     R17, R27
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   8120               LD      R18, Z
   \   000000AE   ....               LDI     R30, LOW(My485UART)
   \   000000B0   ....               LDI     R31, (My485UART) >> 8
   \   000000B2   8504               LDD     R16, Z+12
   \   000000B4   8515               LDD     R17, Z+13
   \   000000B6   0F0A               ADD     R16, R26
   \   000000B8   1F1B               ADC     R17, R27
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   8131               LDD     R19, Z+1
   \   000000BE   0169               MOVW    R13:R12, R19:R18
    262              pointer += 2;
   \   000000C0   9612               ADIW    R27:R26, 2
    263              Ptr = pointer;
   \   000000C2   01CD               MOVW    R25:R24, R27:R26
    264              if (Nobytes > PAGESIZE) {
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   16C0               CP      R12, R16
   \   000000C8   E001               LDI     R16, 1
   \   000000CA   06D0               CPC     R13, R16
   \   000000CC   F0B0               BRCS    ??ProgramFlash_0
    265                  My485UART.pTxBuffer[My485UART.TxFirst++] = FLASH_PROG_PAGEF ;               // Answer with Page fault
   \   000000CE   ....               LDI     R30, LOW(My485UART)
   \   000000D0   ....               LDI     R31, (My485UART) >> 8
   \   000000D2   8122               LDD     R18, Z+2
   \   000000D4   8133               LDD     R19, Z+3
   \   000000D6   ....               LDI     R30, LOW(My485UART)
   \   000000D8   ....               LDI     R31, (My485UART) >> 8
   \   000000DA   8100               LD      R16, Z
   \   000000DC   8111               LDD     R17, Z+1
   \   000000DE   0F02               ADD     R16, R18
   \   000000E0   1F13               ADC     R17, R19
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   E001               LDI     R16, 1
   \   000000E6   8300               ST      Z, R16
   \   000000E8   ....               LDI     R30, LOW(My485UART)
   \   000000EA   ....               LDI     R31, (My485UART) >> 8
   \   000000EC   8102               LDD     R16, Z+2
   \   000000EE   8113               LDD     R17, Z+3
   \   000000F0   5F0F               SUBI    R16, 255
   \   000000F2   4F1F               SBCI    R17, 255
   \   000000F4   8302               STD     Z+2, R16
   \   000000F6   8313               STD     Z+3, R17
   \   000000F8   C0A2               RJMP    ??ProgramFlash_1
    266              } else {
    267                  #ifdef LARGE_MEMORY
    268                  if(address >= 0x7FFF){
   \                     ??ProgramFlash_0:
   \   000000FA   EF0F               LDI     R16, 255
   \   000000FC   1640               CP      R4, R16
   \   000000FE   E70F               LDI     R16, 127
   \   00000100   0650               CPC     R5, R16
   \   00000102   F018               BRCS    ??ProgramFlash_2
    269                      RAMPZ = (1<<RAMPZ0);
   \   00000104   E001               LDI     R16, 1
   \   00000106   BF0B               OUT     0x3B, R16
   \   00000108   C002               RJMP    ??ProgramFlash_3
    270                  } else {
    271                      RAMPZ = 0;
   \                     ??ProgramFlash_2:
   \   0000010A   E000               LDI     R16, 0
   \   0000010C   BF0B               OUT     0x3B, R16
    272                  }
    273                  #endif            
    274                  address = address << 1;                                     // convert from byte address to word address
   \                     ??ProgramFlash_3:
   \   0000010E   0C44               LSL     R4
   \   00000110   1C55               ROL     R5
    275                  Addr = address;                                             // mirror the address
   \   00000112   0152               MOVW    R11:R10, R5:R4
    276                  for (i = 0; i < Nobytes; i+=2, address+=2, pointer+=2) {              // write data to flash
   \   00000114   2466               CLR     R6
   \   00000116   2477               CLR     R7
   \                     ??ProgramFlash_4:
   \   00000118   146C               CP      R6, R12
   \   0000011A   047D               CPC     R7, R13
   \   0000011C   F4E8               BRCC    ??ProgramFlash_5
    277                      fill_temp_buffer(My485UART.pRxBuffer[pointer] + (My485UART.pRxBuffer[pointer+1]<< 8),(address)); //call asm routine. 
   \   0000011E   0192               MOVW    R19:R18, R5:R4
   \   00000120   ....               LDI     R30, LOW(My485UART)
   \   00000122   ....               LDI     R31, (My485UART) >> 8
   \   00000124   8504               LDD     R16, Z+12
   \   00000126   8515               LDD     R17, Z+13
   \   00000128   0F0A               ADD     R16, R26
   \   0000012A   1F1B               ADC     R17, R27
   \   0000012C   01F8               MOVW    R31:R30, R17:R16
   \   0000012E   8100               LD      R16, Z
   \   00000130   ....               LDI     R30, LOW(My485UART)
   \   00000132   ....               LDI     R31, (My485UART) >> 8
   \   00000134   8544               LDD     R20, Z+12
   \   00000136   8555               LDD     R21, Z+13
   \   00000138   0F4A               ADD     R20, R26
   \   0000013A   1F5B               ADC     R21, R27
   \   0000013C   01FA               MOVW    R31:R30, R21:R20
   \   0000013E   8111               LDD     R17, Z+1
   \   00000140   ........           CALL    fill_temp_buffer
    278                  }
   \   00000144   E002               LDI     R16, 2
   \   00000146   0E60               ADD     R6, R16
   \   00000148   E000               LDI     R16, 0
   \   0000014A   1E70               ADC     R7, R16
   \   0000014C   E002               LDI     R16, 2
   \   0000014E   0E40               ADD     R4, R16
   \   00000150   E000               LDI     R16, 0
   \   00000152   1E50               ADC     R5, R16
   \   00000154   9612               ADIW    R27:R26, 2
   \   00000156   CFE0               RJMP    ??ProgramFlash_4
    279                  write_page(Addr, (1<<PGWRT) + (1<<SPMEN));                  //Perform page write
   \                     ??ProgramFlash_5:
   \   00000158   E025               LDI     R18, 5
   \   0000015A   0185               MOVW    R17:R16, R11:R10
   \   0000015C   ........           CALL    write_page
    280                  write_page(Addr, (1<<REENABLE_RWW_BIT) + (1<<SPMEN));       //Re-enable the RWW section
   \   00000160   E121               LDI     R18, 17
   \   00000162   0185               MOVW    R17:R16, R11:R10
   \   00000164   ........           CALL    write_page
    281                  My485UART.pTxBuffer[My485UART.TxFirst++] = FLASH_PROG_OK;       // OK
   \   00000168   ....               LDI     R30, LOW(My485UART)
   \   0000016A   ....               LDI     R31, (My485UART) >> 8
   \   0000016C   8122               LDD     R18, Z+2
   \   0000016E   8133               LDD     R19, Z+3
   \   00000170   ....               LDI     R30, LOW(My485UART)
   \   00000172   ....               LDI     R31, (My485UART) >> 8
   \   00000174   8100               LD      R16, Z
   \   00000176   8111               LDD     R17, Z+1
   \   00000178   0F02               ADD     R16, R18
   \   0000017A   1F13               ADC     R17, R19
   \   0000017C   01F8               MOVW    R31:R30, R17:R16
   \   0000017E   E000               LDI     R16, 0
   \   00000180   8300               ST      Z, R16
   \   00000182   ....               LDI     R30, LOW(My485UART)
   \   00000184   ....               LDI     R31, (My485UART) >> 8
   \   00000186   8102               LDD     R16, Z+2
   \   00000188   8113               LDD     R17, Z+3
   \   0000018A   5F0F               SUBI    R16, 255
   \   0000018C   4F1F               SBCI    R17, 255
   \   0000018E   8302               STD     Z+2, R16
   \   00000190   8313               STD     Z+3, R17
    282                  
    283                  for (i = 0; i < Nobytes; i+=2, Addr+=2) {         // check the whole buffer
   \   00000192   2466               CLR     R6
   \   00000194   2477               CLR     R7
   \                     ??ProgramFlash_6:
   \   00000196   146C               CP      R6, R12
   \   00000198   047D               CPC     R7, R13
   \   0000019A   F008               BRCS    $+2+2
   \   0000019C   C050               RJMP    ??ProgramFlash_1
    284                    intval = read_program_memory(Addr,0x00);
   \   0000019E   E020               LDI     R18, 0
   \   000001A0   0185               MOVW    R17:R16, R11:R10
   \   000001A2   ........           CALL    read_program_memory
   \   000001A6   0148               MOVW    R9:R8, R17:R16
    285                    if (My485UART.pRxBuffer[Ptr++] != (intval & 0xff)) {
   \   000001A8   019C               MOVW    R19:R18, R25:R24
   \   000001AA   01C9               MOVW    R25:R24, R19:R18
   \   000001AC   9601               ADIW    R25:R24, 1
   \   000001AE   ....               LDI     R30, LOW(My485UART)
   \   000001B0   ....               LDI     R31, (My485UART) >> 8
   \   000001B2   8504               LDD     R16, Z+12
   \   000001B4   8515               LDD     R17, Z+13
   \   000001B6   0F02               ADD     R16, R18
   \   000001B8   1F13               ADC     R17, R19
   \   000001BA   01F8               MOVW    R31:R30, R17:R16
   \   000001BC   8120               LD      R18, Z
   \   000001BE   E030               LDI     R19, 0
   \   000001C0   0184               MOVW    R17:R16, R9:R8
   \   000001C2   7F0F               ANDI    R16, 0xFF
   \   000001C4   7010               ANDI    R17, 0x00
   \   000001C6   1720               CP      R18, R16
   \   000001C8   0731               CPC     R19, R17
   \   000001CA   F079               BREQ    ??ProgramFlash_7
    286                        My485UART.pTxBuffer[My485UART.TxFirst-1] = FLASH_PROG_ERROR;       // compare error
   \   000001CC   ....               LDI     R30, LOW(My485UART)
   \   000001CE   ....               LDI     R31, (My485UART) >> 8
   \   000001D0   8122               LDD     R18, Z+2
   \   000001D2   8133               LDD     R19, Z+3
   \   000001D4   ....               LDI     R30, LOW(My485UART)
   \   000001D6   ....               LDI     R31, (My485UART) >> 8
   \   000001D8   8100               LD      R16, Z
   \   000001DA   8111               LDD     R17, Z+1
   \   000001DC   0F02               ADD     R16, R18
   \   000001DE   1F13               ADC     R17, R19
   \   000001E0   5001               SUBI    R16, 1
   \   000001E2   4010               SBCI    R17, 0
   \   000001E4   01F8               MOVW    R31:R30, R17:R16
   \   000001E6   E002               LDI     R16, 2
   \   000001E8   8300               ST      Z, R16
    287                    }
    288                    if (My485UART.pRxBuffer[Ptr++] != ((intval>>8) & 0xff)) {
   \                     ??ProgramFlash_7:
   \   000001EA   019C               MOVW    R19:R18, R25:R24
   \   000001EC   01C9               MOVW    R25:R24, R19:R18
   \   000001EE   9601               ADIW    R25:R24, 1
   \   000001F0   ....               LDI     R30, LOW(My485UART)
   \   000001F2   ....               LDI     R31, (My485UART) >> 8
   \   000001F4   8504               LDD     R16, Z+12
   \   000001F6   8515               LDD     R17, Z+13
   \   000001F8   0F02               ADD     R16, R18
   \   000001FA   1F13               ADC     R17, R19
   \   000001FC   01F8               MOVW    R31:R30, R17:R16
   \   000001FE   8100               LD      R16, Z
   \   00000200   E010               LDI     R17, 0
   \   00000202   0194               MOVW    R19:R18, R9:R8
   \   00000204   2F23               MOV     R18, R19
   \   00000206   E030               LDI     R19, 0
   \   00000208   1702               CP      R16, R18
   \   0000020A   0713               CPC     R17, R19
   \   0000020C   F079               BREQ    ??ProgramFlash_8
    289                        My485UART.pTxBuffer[My485UART.TxFirst-1] = FLASH_PROG_ERROR;       // compare error
   \   0000020E   ....               LDI     R30, LOW(My485UART)
   \   00000210   ....               LDI     R31, (My485UART) >> 8
   \   00000212   8122               LDD     R18, Z+2
   \   00000214   8133               LDD     R19, Z+3
   \   00000216   ....               LDI     R30, LOW(My485UART)
   \   00000218   ....               LDI     R31, (My485UART) >> 8
   \   0000021A   8100               LD      R16, Z
   \   0000021C   8111               LDD     R17, Z+1
   \   0000021E   0F02               ADD     R16, R18
   \   00000220   1F13               ADC     R17, R19
   \   00000222   5001               SUBI    R16, 1
   \   00000224   4010               SBCI    R17, 0
   \   00000226   01F8               MOVW    R31:R30, R17:R16
   \   00000228   E002               LDI     R16, 2
   \   0000022A   8300               ST      Z, R16
    290                    }
    291                  }
   \                     ??ProgramFlash_8:
   \   0000022C   E002               LDI     R16, 2
   \   0000022E   0E60               ADD     R6, R16
   \   00000230   E000               LDI     R16, 0
   \   00000232   1E70               ADC     R7, R16
   \   00000234   E002               LDI     R16, 2
   \   00000236   0EA0               ADD     R10, R16
   \   00000238   E000               LDI     R16, 0
   \   0000023A   1EB0               ADC     R11, R16
   \   0000023C   CFAC               RJMP    ??ProgramFlash_6
    292              }  
    293                  
    294              My485UART.pTxBuffer[ntna] = (My485UART.TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??ProgramFlash_1:
   \   0000023E   ....               LDI     R30, LOW(My485UART)
   \   00000240   ....               LDI     R31, (My485UART) >> 8
   \   00000242   8122               LDD     R18, Z+2
   \   00000244   8133               LDD     R19, Z+3
   \   00000246   2D0E               MOV     R16, R14
   \   00000248   1B20               SUB     R18, R16
   \   0000024A   5022               SUBI    R18, 2
   \   0000024C   ....               LDI     R30, LOW(My485UART)
   \   0000024E   ....               LDI     R31, (My485UART) >> 8
   \   00000250   8100               LD      R16, Z
   \   00000252   8111               LDD     R17, Z+1
   \   00000254   0D0E               ADD     R16, R14
   \   00000256   1D1F               ADC     R17, R15
   \   00000258   01F8               MOVW    R31:R30, R17:R16
   \   0000025A   8320               ST      Z, R18
    295              My485UART.pTxBuffer[ntna+1] = ((My485UART.TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000025C   ....               LDI     R30, LOW(My485UART)
   \   0000025E   ....               LDI     R31, (My485UART) >> 8
   \   00000260   8102               LDD     R16, Z+2
   \   00000262   8113               LDD     R17, Z+3
   \   00000264   190E               SUB     R16, R14
   \   00000266   091F               SBC     R17, R15
   \   00000268   5002               SUBI    R16, 2
   \   0000026A   4010               SBCI    R17, 0
   \   0000026C   2F01               MOV     R16, R17
   \   0000026E   E010               LDI     R17, 0
   \   00000270   2F20               MOV     R18, R16
   \   00000272   ....               LDI     R30, LOW(My485UART)
   \   00000274   ....               LDI     R31, (My485UART) >> 8
   \   00000276   8100               LD      R16, Z
   \   00000278   8111               LDD     R17, Z+1
   \   0000027A   0D0E               ADD     R16, R14
   \   0000027C   1D1F               ADC     R17, R15
   \   0000027E   01F8               MOVW    R31:R30, R17:R16
   \   00000280   8321               STD     Z+1, R18
    296          
    297          }
   \   00000282   E1E0               LDI     R30, 16
   \   00000284   ........           JMP     ?EPILOGUE_B16_L09
   \   00000288                      REQUIRE _A_RAMPZ
    298          
    299          /*************************************************************************
    300          *
    301          * Read Flash 
    302          *
    303          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    304          void ReadFlash(unsigned short pointer) {
   \                     ReadFlash:
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
    305          
    306              unsigned short ntna, address, Nobytes, i, intval;
    307              My485UART.RxSendReply = true ;                               // flag for answering 
   \   00000006   E001               LDI     R16, 1
   \   00000008   9300....           STS     (My485UART + 28), R16
    308              
    309              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_FLASH_READ & 0xff;     
   \   0000000C   ....               LDI     R30, LOW(My485UART)
   \   0000000E   ....               LDI     R31, (My485UART) >> 8
   \   00000010   8122               LDD     R18, Z+2
   \   00000012   8133               LDD     R19, Z+3
   \   00000014   ....               LDI     R30, LOW(My485UART)
   \   00000016   ....               LDI     R31, (My485UART) >> 8
   \   00000018   8100               LD      R16, Z
   \   0000001A   8111               LDD     R17, Z+1
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   EB03               LDI     R16, 179
   \   00000024   8300               ST      Z, R16
   \   00000026   ....               LDI     R30, LOW(My485UART)
   \   00000028   ....               LDI     R31, (My485UART) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   8302               STD     Z+2, R16
   \   00000034   8313               STD     Z+3, R17
    310              My485UART.pTxBuffer[My485UART.TxFirst++] = CMD_REP_FLASH_READ >> 8;     
   \   00000036   ....               LDI     R30, LOW(My485UART)
   \   00000038   ....               LDI     R31, (My485UART) >> 8
   \   0000003A   8122               LDD     R18, Z+2
   \   0000003C   8133               LDD     R19, Z+3
   \   0000003E   ....               LDI     R30, LOW(My485UART)
   \   00000040   ....               LDI     R31, (My485UART) >> 8
   \   00000042   8100               LD      R16, Z
   \   00000044   8111               LDD     R17, Z+1
   \   00000046   0F02               ADD     R16, R18
   \   00000048   1F13               ADC     R17, R19
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   E007               LDI     R16, 7
   \   0000004E   8300               ST      Z, R16
   \   00000050   ....               LDI     R30, LOW(My485UART)
   \   00000052   ....               LDI     R31, (My485UART) >> 8
   \   00000054   8102               LDD     R16, Z+2
   \   00000056   8113               LDD     R17, Z+3
   \   00000058   5F0F               SUBI    R16, 255
   \   0000005A   4F1F               SBCI    R17, 255
   \   0000005C   8302               STD     Z+2, R16
   \   0000005E   8313               STD     Z+3, R17
    311              ntna = My485UART.TxFirst ;                                    // remember index 
   \   00000060   ....               LDI     R30, LOW(My485UART)
   \   00000062   ....               LDI     R31, (My485UART) >> 8
   \   00000064   8102               LDD     R16, Z+2
   \   00000066   8113               LDD     R17, Z+3
   \   00000068   0158               MOVW    R11:R10, R17:R16
    312              My485UART.TxFirst += 2 ;                                      // two byte length
   \   0000006A   ....               LDI     R30, LOW(My485UART)
   \   0000006C   ....               LDI     R31, (My485UART) >> 8
   \   0000006E   8102               LDD     R16, Z+2
   \   00000070   8113               LDD     R17, Z+3
   \   00000072   5F0E               SUBI    R16, 254
   \   00000074   4F1F               SBCI    R17, 255
   \   00000076   8302               STD     Z+2, R16
   \   00000078   8313               STD     Z+3, R17
    313              
    314              for (i = 0; i<4; i++) {
   \   0000007A   E080               LDI     R24, 0
   \   0000007C   E090               LDI     R25, 0
   \                     ??ReadFlash_0:
   \   0000007E   3084               CPI     R24, 4
   \   00000080   E000               LDI     R16, 0
   \   00000082   0790               CPC     R25, R16
   \   00000084   F508               BRCC    ??ReadFlash_1
    315                  My485UART.pTxBuffer[My485UART.TxFirst++] = My485UART.pRxBuffer[pointer+i] ; // ansver with address and nob
   \   00000086   ....               LDI     R30, LOW(My485UART)
   \   00000088   ....               LDI     R31, (My485UART) >> 8
   \   0000008A   8504               LDD     R16, Z+12
   \   0000008C   8515               LDD     R17, Z+13
   \   0000008E   0192               MOVW    R19:R18, R5:R4
   \   00000090   0F28               ADD     R18, R24
   \   00000092   1F39               ADC     R19, R25
   \   00000094   0F02               ADD     R16, R18
   \   00000096   1F13               ADC     R17, R19
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   8120               LD      R18, Z
   \   0000009C   ....               LDI     R30, LOW(My485UART)
   \   0000009E   ....               LDI     R31, (My485UART) >> 8
   \   000000A0   8142               LDD     R20, Z+2
   \   000000A2   8153               LDD     R21, Z+3
   \   000000A4   ....               LDI     R30, LOW(My485UART)
   \   000000A6   ....               LDI     R31, (My485UART) >> 8
   \   000000A8   8100               LD      R16, Z
   \   000000AA   8111               LDD     R17, Z+1
   \   000000AC   0F04               ADD     R16, R20
   \   000000AE   1F15               ADC     R17, R21
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   8320               ST      Z, R18
   \   000000B4   ....               LDI     R30, LOW(My485UART)
   \   000000B6   ....               LDI     R31, (My485UART) >> 8
   \   000000B8   8102               LDD     R16, Z+2
   \   000000BA   8113               LDD     R17, Z+3
   \   000000BC   5F0F               SUBI    R16, 255
   \   000000BE   4F1F               SBCI    R17, 255
   \   000000C0   8302               STD     Z+2, R16
   \   000000C2   8313               STD     Z+3, R17
    316              }
   \   000000C4   9601               ADIW    R25:R24, 1
   \   000000C6   CFDB               RJMP    ??ReadFlash_0
    317            
    318              address = My485UART.pRxBuffer[pointer] | (My485UART.pRxBuffer[pointer+1]<<8); // save address
   \                     ??ReadFlash_1:
   \   000000C8   ....               LDI     R30, LOW(My485UART)
   \   000000CA   ....               LDI     R31, (My485UART) >> 8
   \   000000CC   8504               LDD     R16, Z+12
   \   000000CE   8515               LDD     R17, Z+13
   \   000000D0   0D04               ADD     R16, R4
   \   000000D2   1D15               ADC     R17, R5
   \   000000D4   01F8               MOVW    R31:R30, R17:R16
   \   000000D6   8120               LD      R18, Z
   \   000000D8   ....               LDI     R30, LOW(My485UART)
   \   000000DA   ....               LDI     R31, (My485UART) >> 8
   \   000000DC   8504               LDD     R16, Z+12
   \   000000DE   8515               LDD     R17, Z+13
   \   000000E0   0D04               ADD     R16, R4
   \   000000E2   1D15               ADC     R17, R5
   \   000000E4   01F8               MOVW    R31:R30, R17:R16
   \   000000E6   8111               LDD     R17, Z+1
   \   000000E8   2F02               MOV     R16, R18
   \   000000EA   01D8               MOVW    R27:R26, R17:R16
    319              pointer += 2;
   \   000000EC   E002               LDI     R16, 2
   \   000000EE   0E40               ADD     R4, R16
   \   000000F0   E000               LDI     R16, 0
   \   000000F2   1E50               ADC     R5, R16
    320              Nobytes = My485UART.pRxBuffer[pointer] | (My485UART.pRxBuffer[pointer+1]<<8); // save address
   \   000000F4   ....               LDI     R30, LOW(My485UART)
   \   000000F6   ....               LDI     R31, (My485UART) >> 8
   \   000000F8   8504               LDD     R16, Z+12
   \   000000FA   8515               LDD     R17, Z+13
   \   000000FC   0D04               ADD     R16, R4
   \   000000FE   1D15               ADC     R17, R5
   \   00000100   01F8               MOVW    R31:R30, R17:R16
   \   00000102   8120               LD      R18, Z
   \   00000104   ....               LDI     R30, LOW(My485UART)
   \   00000106   ....               LDI     R31, (My485UART) >> 8
   \   00000108   8504               LDD     R16, Z+12
   \   0000010A   8515               LDD     R17, Z+13
   \   0000010C   0D04               ADD     R16, R4
   \   0000010E   1D15               ADC     R17, R5
   \   00000110   01F8               MOVW    R31:R30, R17:R16
   \   00000112   8111               LDD     R17, Z+1
   \   00000114   2F02               MOV     R16, R18
   \   00000116   0148               MOVW    R9:R8, R17:R16
    321              pointer += 2;
   \   00000118   E002               LDI     R16, 2
   \   0000011A   0E40               ADD     R4, R16
   \   0000011C   E000               LDI     R16, 0
   \   0000011E   1E50               ADC     R5, R16
    322              if (Nobytes > PAGESIZE) {
   \   00000120   E001               LDI     R16, 1
   \   00000122   1680               CP      R8, R16
   \   00000124   E001               LDI     R16, 1
   \   00000126   0690               CPC     R9, R16
   \   00000128   F0B0               BRCS    ??ReadFlash_2
    323                  My485UART.pTxBuffer[My485UART.TxFirst++] = FLASH_PROG_PAGEF ;               // Answer with Page fault
   \   0000012A   ....               LDI     R30, LOW(My485UART)
   \   0000012C   ....               LDI     R31, (My485UART) >> 8
   \   0000012E   8122               LDD     R18, Z+2
   \   00000130   8133               LDD     R19, Z+3
   \   00000132   ....               LDI     R30, LOW(My485UART)
   \   00000134   ....               LDI     R31, (My485UART) >> 8
   \   00000136   8100               LD      R16, Z
   \   00000138   8111               LDD     R17, Z+1
   \   0000013A   0F02               ADD     R16, R18
   \   0000013C   1F13               ADC     R17, R19
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   E001               LDI     R16, 1
   \   00000142   8300               ST      Z, R16
   \   00000144   ....               LDI     R30, LOW(My485UART)
   \   00000146   ....               LDI     R31, (My485UART) >> 8
   \   00000148   8102               LDD     R16, Z+2
   \   0000014A   8113               LDD     R17, Z+3
   \   0000014C   5F0F               SUBI    R16, 255
   \   0000014E   4F1F               SBCI    R17, 255
   \   00000150   8302               STD     Z+2, R16
   \   00000152   8313               STD     Z+3, R17
   \   00000154   C045               RJMP    ??ReadFlash_3
    324              } else {
    325                #ifdef LARGE_MEMORY
    326                if(address >= 0x7FFF){
   \                     ??ReadFlash_2:
   \   00000156   3FAF               CPI     R26, 255
   \   00000158   E70F               LDI     R16, 127
   \   0000015A   07B0               CPC     R27, R16
   \   0000015C   F018               BRCS    ??ReadFlash_4
    327                  RAMPZ = (1<<RAMPZ0);
   \   0000015E   E001               LDI     R16, 1
   \   00000160   BF0B               OUT     0x3B, R16
   \   00000162   C002               RJMP    ??ReadFlash_5
    328                } else {
    329                  RAMPZ = 0;
   \                     ??ReadFlash_4:
   \   00000164   E000               LDI     R16, 0
   \   00000166   BF0B               OUT     0x3B, R16
    330                }
    331                #endif            
    332                address = address<<1;             // convert from byte address to word address
   \                     ??ReadFlash_5:
   \   00000168   0FAA               LSL     R26
   \   0000016A   1FBB               ROL     R27
    333                for (i = 0; i < Nobytes; i+=2, address+=2) {   // receive the whole buffer
   \   0000016C   E080               LDI     R24, 0
   \   0000016E   E090               LDI     R25, 0
   \                     ??ReadFlash_6:
   \   00000170   1588               CP      R24, R8
   \   00000172   0599               CPC     R25, R9
   \   00000174   F5A8               BRCC    ??ReadFlash_3
    334                   intval = read_program_memory(address,0x00);
   \   00000176   E020               LDI     R18, 0
   \   00000178   018D               MOVW    R17:R16, R27:R26
   \   0000017A   ........           CALL    read_program_memory
   \   0000017E   0138               MOVW    R7:R6, R17:R16
    335                   My485UART.pTxBuffer[My485UART.TxFirst++] = intval & 0xff;
   \   00000180   2D26               MOV     R18, R6
   \   00000182   ....               LDI     R30, LOW(My485UART)
   \   00000184   ....               LDI     R31, (My485UART) >> 8
   \   00000186   8142               LDD     R20, Z+2
   \   00000188   8153               LDD     R21, Z+3
   \   0000018A   ....               LDI     R30, LOW(My485UART)
   \   0000018C   ....               LDI     R31, (My485UART) >> 8
   \   0000018E   8100               LD      R16, Z
   \   00000190   8111               LDD     R17, Z+1
   \   00000192   0F04               ADD     R16, R20
   \   00000194   1F15               ADC     R17, R21
   \   00000196   01F8               MOVW    R31:R30, R17:R16
   \   00000198   8320               ST      Z, R18
   \   0000019A   ....               LDI     R30, LOW(My485UART)
   \   0000019C   ....               LDI     R31, (My485UART) >> 8
   \   0000019E   8102               LDD     R16, Z+2
   \   000001A0   8113               LDD     R17, Z+3
   \   000001A2   5F0F               SUBI    R16, 255
   \   000001A4   4F1F               SBCI    R17, 255
   \   000001A6   8302               STD     Z+2, R16
   \   000001A8   8313               STD     Z+3, R17
    336                   My485UART.pTxBuffer[My485UART.TxFirst++] = (intval>>8) & 0xff;
   \   000001AA   0183               MOVW    R17:R16, R7:R6
   \   000001AC   2F01               MOV     R16, R17
   \   000001AE   E010               LDI     R17, 0
   \   000001B0   2F20               MOV     R18, R16
   \   000001B2   ....               LDI     R30, LOW(My485UART)
   \   000001B4   ....               LDI     R31, (My485UART) >> 8
   \   000001B6   8142               LDD     R20, Z+2
   \   000001B8   8153               LDD     R21, Z+3
   \   000001BA   ....               LDI     R30, LOW(My485UART)
   \   000001BC   ....               LDI     R31, (My485UART) >> 8
   \   000001BE   8100               LD      R16, Z
   \   000001C0   8111               LDD     R17, Z+1
   \   000001C2   0F04               ADD     R16, R20
   \   000001C4   1F15               ADC     R17, R21
   \   000001C6   01F8               MOVW    R31:R30, R17:R16
   \   000001C8   8320               ST      Z, R18
   \   000001CA   ....               LDI     R30, LOW(My485UART)
   \   000001CC   ....               LDI     R31, (My485UART) >> 8
   \   000001CE   8102               LDD     R16, Z+2
   \   000001D0   8113               LDD     R17, Z+3
   \   000001D2   5F0F               SUBI    R16, 255
   \   000001D4   4F1F               SBCI    R17, 255
   \   000001D6   8302               STD     Z+2, R16
   \   000001D8   8313               STD     Z+3, R17
    337                }
   \   000001DA   9602               ADIW    R25:R24, 2
   \   000001DC   9612               ADIW    R27:R26, 2
   \   000001DE   CFC8               RJMP    ??ReadFlash_6
    338              }
    339          
    340              My485UART.pTxBuffer[ntna] = (My485UART.TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??ReadFlash_3:
   \   000001E0   ....               LDI     R30, LOW(My485UART)
   \   000001E2   ....               LDI     R31, (My485UART) >> 8
   \   000001E4   8122               LDD     R18, Z+2
   \   000001E6   8133               LDD     R19, Z+3
   \   000001E8   2D0A               MOV     R16, R10
   \   000001EA   1B20               SUB     R18, R16
   \   000001EC   5022               SUBI    R18, 2
   \   000001EE   ....               LDI     R30, LOW(My485UART)
   \   000001F0   ....               LDI     R31, (My485UART) >> 8
   \   000001F2   8100               LD      R16, Z
   \   000001F4   8111               LDD     R17, Z+1
   \   000001F6   0D0A               ADD     R16, R10
   \   000001F8   1D1B               ADC     R17, R11
   \   000001FA   01F8               MOVW    R31:R30, R17:R16
   \   000001FC   8320               ST      Z, R18
    341              My485UART.pTxBuffer[ntna+1] = ((My485UART.TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000001FE   ....               LDI     R30, LOW(My485UART)
   \   00000200   ....               LDI     R31, (My485UART) >> 8
   \   00000202   8102               LDD     R16, Z+2
   \   00000204   8113               LDD     R17, Z+3
   \   00000206   190A               SUB     R16, R10
   \   00000208   091B               SBC     R17, R11
   \   0000020A   5002               SUBI    R16, 2
   \   0000020C   4010               SBCI    R17, 0
   \   0000020E   2F01               MOV     R16, R17
   \   00000210   E010               LDI     R17, 0
   \   00000212   2F20               MOV     R18, R16
   \   00000214   ....               LDI     R30, LOW(My485UART)
   \   00000216   ....               LDI     R31, (My485UART) >> 8
   \   00000218   8100               LD      R16, Z
   \   0000021A   8111               LDD     R17, Z+1
   \   0000021C   0D0A               ADD     R16, R10
   \   0000021E   1D1B               ADC     R17, R11
   \   00000220   01F8               MOVW    R31:R30, R17:R16
   \   00000222   8321               STD     Z+1, R18
    342          
    343          }
   \   00000224   E0EC               LDI     R30, 12
   \   00000226   ........           JMP     ?EPILOGUE_B12_L09
   \   0000022A                      REQUIRE _A_RAMPZ
    344          
    345          /*************************************************************************
    346          *
    347          *  Exit bootloader program
    348          *
    349          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    350          void ExitBootloader(void) {   
   \                     ExitBootloader:
    351          
    352          
    353              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
   \                     ??ExitBootloader_0:
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??ExitBootloader_0
    354                  ;
    355              EEARL = (0x0fff & 0xff);
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB0E               OUT     0x1E, R16
    356              EEARH = (0x0fff >> 8);
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   BB0F               OUT     0x1F, R16
    357              EEDR = 0xaa;
   \   0000000C   EA0A               LDI     R16, 170
   \   0000000E   BB0D               OUT     0x1D, R16
    358              EECR |= (1<<EEMWE);
   \   00000010   9AE2               SBI     0x1C, 0x02
    359              EECR |= (1<<EEWE);
   \   00000012   9AE1               SBI     0x1C, 0x01
    360              while (EECR & (1<<EEWE))
   \                     ??ExitBootloader_1:
   \   00000014   99E1               SBIC    0x1C, 0x01
   \   00000016   CFFE               RJMP    ??ExitBootloader_1
    361                ;
    362                
    363              WDTCR = 0x08;               //Start watchdog to genetate restart
   \   00000018   E008               LDI     R16, 8
   \   0000001A   BD01               OUT     0x21, R16
    364          }
   \   0000001C   9508               RET
   \   0000001E                      REQUIRE _A_EECR
   \   0000001E                      REQUIRE _A_EEAR
   \   0000001E                      REQUIRE _A_EEDR
   \   0000001E                      REQUIRE _A_WDTCR
    365          
    366          
    367          /*************************************************************************
    368          *
    369          *  Transmitting data on USARTs
    370          *
    371          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    372          void SendPacketUart(void) {
   \                     SendPacketUart:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    373              unsigned short delay, cnt;
    374              
    375              for (delay = 0; delay < 0xffff; delay++) {
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
   \                     ??SendPacketUart_0:
   \   00000008   3F8F               CPI     R24, 255
   \   0000000A   EF0F               LDI     R16, 255
   \   0000000C   0790               CPC     R25, R16
   \   0000000E   F021               BREQ    ??SendPacketUart_1
    376                  asm("nop") ;
   \   00000010   0000               nop
    377                  cnt++;
   \   00000012   9611               ADIW    R27:R26, 1
    378              }
   \   00000014   9601               ADIW    R25:R24, 1
   \   00000016   CFF8               RJMP    ??SendPacketUart_0
    379          
    380              while ( My485UART.TxCount > 0 ) {               // Any characters to send?
   \                     ??SendPacketUart_1:
   \   00000018   ....               LDI     R30, LOW(My485UART)
   \   0000001A   ....               LDI     R31, (My485UART) >> 8
   \   0000001C   8106               LDD     R16, Z+6
   \   0000001E   8117               LDD     R17, Z+7
   \   00000020   2B01               OR      R16, R17
   \   00000022   F169               BREQ    ??SendPacketUart_2
    381                  sendchar( My485UART.pTxBuffer[ My485UART.TxLast ]);  // Send a character
   \   00000024   ....               LDI     R30, LOW(My485UART)
   \   00000026   ....               LDI     R31, (My485UART) >> 8
   \   00000028   8124               LDD     R18, Z+4
   \   0000002A   8135               LDD     R19, Z+5
   \   0000002C   ....               LDI     R30, LOW(My485UART)
   \   0000002E   ....               LDI     R31, (My485UART) >> 8
   \   00000030   8100               LD      R16, Z
   \   00000032   8111               LDD     R17, Z+1
   \   00000034   0F02               ADD     R16, R18
   \   00000036   1F13               ADC     R17, R19
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   8100               LD      R16, Z
   \   0000003C   ........           CALL    sendchar
    382          
    383                  if ((++My485UART.TxLast)> TXSIZE_UART ) {     // End of buffer?
   \   00000040   ....               LDI     R30, LOW(My485UART)
   \   00000042   ....               LDI     R31, (My485UART) >> 8
   \   00000044   8104               LDD     R16, Z+4
   \   00000046   8115               LDD     R17, Z+5
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8304               STD     Z+4, R16
   \   0000004E   8315               STD     Z+5, R17
   \   00000050   ....               LDI     R30, LOW(My485UART)
   \   00000052   ....               LDI     R31, (My485UART) >> 8
   \   00000054   8104               LDD     R16, Z+4
   \   00000056   8115               LDD     R17, Z+5
   \   00000058   350F               CPI     R16, 95
   \   0000005A   E021               LDI     R18, 1
   \   0000005C   0712               CPC     R17, R18
   \   0000005E   F030               BRCS    ??SendPacketUart_3
    384                      My485UART.TxLast = 0 ;                     // yes, reset pointer
   \   00000060   ....               LDI     R30, LOW(My485UART)
   \   00000062   ....               LDI     R31, (My485UART) >> 8
   \   00000064   E000               LDI     R16, 0
   \   00000066   8304               STD     Z+4, R16
   \   00000068   E000               LDI     R16, 0
   \   0000006A   8305               STD     Z+5, R16
    385                  }
    386                  My485UART.TxCount--; 
   \                     ??SendPacketUart_3:
   \   0000006C   ....               LDI     R30, LOW(My485UART)
   \   0000006E   ....               LDI     R31, (My485UART) >> 8
   \   00000070   8106               LDD     R16, Z+6
   \   00000072   8117               LDD     R17, Z+7
   \   00000074   5001               SUBI    R16, 1
   \   00000076   4010               SBCI    R17, 0
   \   00000078   8306               STD     Z+6, R16
   \   0000007A   8317               STD     Z+7, R17
   \   0000007C   CFCD               RJMP    ??SendPacketUart_1
    387              } 
    388              PORTE &= ~0x04 ;                                     // TXE0 off
   \                     ??SendPacketUart_2:
   \   0000007E   981A               CBI     0x03, 0x02
    389              cnt = 0;
   \   00000080   E0A0               LDI     R26, 0
   \   00000082   E0B0               LDI     R27, 0
    390          }
   \   00000084   E0E4               LDI     R30, 4
   \   00000086   ........           JMP     ?EPILOGUE_B4_L09
   \   0000008A                      REQUIRE _A_PORTE
    391          
    392          /*************************************************************************
    393          *
    394          *  Receive data on USARTs
    395          *
    396          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    397          void ReceivePacketUart(void) {
   \                     ReceivePacketUart:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    398          
    399              switch (My485UART.RxState) {                  // check status 
   \   00000004   9100....           LDS     R16, (My485UART + 20)
   \   00000008   5000               SUBI    R16, 0
   \   0000000A   F049               BREQ    ??ReceivePacketUart_0
   \   0000000C   950A               DEC     R16
   \   0000000E   F041               BREQ    ??ReceivePacketUart_1
   \   00000010   950A               DEC     R16
   \   00000012   F409               BRNE    $+2+2
   \   00000014   C05D               RJMP    ??ReceivePacketUart_2
   \   00000016   5008               SUBI    R16, 8
   \   00000018   F409               BRNE    $+2+2
   \   0000001A   C0B0               RJMP    ??ReceivePacketUart_3
   \   0000001C   C0AD               RJMP    ??ReceivePacketUart_4
    400              case SYNC :
    401                  // all functionallity in inerrupt routine 
    402                  break ;
   \                     ??ReceivePacketUart_0:
   \   0000001E   C0AE               RJMP    ??ReceivePacketUart_3
    403              case HEADER :
    404                  if (My485UART.RxLast >= 6) {             // receive header 
   \                     ??ReceivePacketUart_1:
   \   00000020   ....               LDI     R26, LOW((My485UART + 16))
   \   00000022   ....               LDI     R27, HIGH((My485UART + 16))
   \   00000024   91ED               LD      R30, X+
   \   00000026   91FC               LD      R31, X
   \   00000028   9711               SBIW    R27:R26, 1
   \   0000002A   9736               SBIW    R31:R30, 6
   \   0000002C   F408               BRCC    $+2+2
   \   0000002E   C0A6               RJMP    ??ReceivePacketUart_3
    405                      My485UART.RxPacklen = (My485UART.pRxBuffer[4] +
    406                                           (My485UART.pRxBuffer[5] * 256) ) ;    // Find length of package
   \   00000030   ....               LDI     R26, LOW((My485UART + 12))
   \   00000032   ....               LDI     R27, HIGH((My485UART + 12))
   \   00000034   91ED               LD      R30, X+
   \   00000036   91FC               LD      R31, X
   \   00000038   9711               SBIW    R27:R26, 1
   \   0000003A   8124               LDD     R18, Z+4
   \   0000003C   E030               LDI     R19, 0
   \   0000003E   ....               LDI     R26, LOW((My485UART + 12))
   \   00000040   ....               LDI     R27, HIGH((My485UART + 12))
   \   00000042   91ED               LD      R30, X+
   \   00000044   91FC               LD      R31, X
   \   00000046   9711               SBIW    R27:R26, 1
   \   00000048   8105               LDD     R16, Z+5
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   2F10               MOV     R17, R16
   \   0000004E   E000               LDI     R16, 0
   \   00000050   0F20               ADD     R18, R16
   \   00000052   1F31               ADC     R19, R17
   \   00000054   ....               LDI     R30, LOW(My485UART)
   \   00000056   ....               LDI     R31, (My485UART) >> 8
   \   00000058   8F20               STD     Z+24, R18
   \   0000005A   8F31               STD     Z+25, R19
    407                      if (CalcDSRxChecksum(6) && (My485UART.pRxBuffer[0] == (0x10 + UnitID))) { 
   \   0000005C   E006               LDI     R16, 6
   \   0000005E   E010               LDI     R17, 0
   \   00000060   ....               RCALL   CalcDSRxChecksum
   \   00000062   2B01               OR      R16, R17
   \   00000064   F199               BREQ    ??ReceivePacketUart_5
   \   00000066   ....               LDI     R26, LOW((My485UART + 12))
   \   00000068   ....               LDI     R27, HIGH((My485UART + 12))
   \   0000006A   91ED               LD      R30, X+
   \   0000006C   91FC               LD      R31, X
   \   0000006E   9711               SBIW    R27:R26, 1
   \   00000070   8100               LD      R16, Z
   \   00000072   E010               LDI     R17, 0
   \   00000074   91E0....           LDS     R30, UnitID
   \   00000078   E0F0               LDI     R31, 0
   \   0000007A   9670               ADIW    R31:R30, 16
   \   0000007C   170E               CP      R16, R30
   \   0000007E   071F               CPC     R17, R31
   \   00000080   F529               BRNE    ??ReceivePacketUart_5
    408                                                           // header checksum OK and to me
    409                          if ((My485UART.RxPacklen < ((short) RXSIZE_UART-My485UART.RxLast)) &&    /* chk. header */
    410                              (My485UART.RxPacklen >= MIN_PACK_LEN)) {
   \   00000082   ....               LDI     R30, LOW(My485UART)
   \   00000084   ....               LDI     R31, (My485UART) >> 8
   \   00000086   8D20               LDD     R18, Z+24
   \   00000088   8D31               LDD     R19, Z+25
   \   0000008A   E50E               LDI     R16, 94
   \   0000008C   E011               LDI     R17, 1
   \   0000008E   ....               LDI     R30, LOW(My485UART)
   \   00000090   ....               LDI     R31, (My485UART) >> 8
   \   00000092   8940               LDD     R20, Z+16
   \   00000094   8951               LDD     R21, Z+17
   \   00000096   1B04               SUB     R16, R20
   \   00000098   0B15               SBC     R17, R21
   \   0000009A   1720               CP      R18, R16
   \   0000009C   0731               CPC     R19, R17
   \   0000009E   F4A0               BRCC    ??ReceivePacketUart_6
   \   000000A0   ....               LDI     R26, LOW((My485UART + 24))
   \   000000A2   ....               LDI     R27, HIGH((My485UART + 24))
   \   000000A4   91ED               LD      R30, X+
   \   000000A6   91FC               LD      R31, X
   \   000000A8   9711               SBIW    R27:R26, 1
   \   000000AA   9737               SBIW    R31:R30, 7
   \   000000AC   F068               BRCS    ??ReceivePacketUart_6
    411                              My485UART.RxState = RECEIVE ;       // Header ok og to data receive state
   \   000000AE   E002               LDI     R16, 2
   \   000000B0   9300....           STS     (My485UART + 20), R16
    412                              My485UART.RxCount = My485UART.RxLast + 1 ;    // Set receive counter
   \   000000B4   ....               LDI     R30, LOW(My485UART)
   \   000000B6   ....               LDI     R31, (My485UART) >> 8
   \   000000B8   8980               LDD     R24, Z+16
   \   000000BA   8991               LDD     R25, Z+17
   \   000000BC   9601               ADIW    R25:R24, 1
   \   000000BE   ....               LDI     R30, LOW(My485UART)
   \   000000C0   ....               LDI     R31, (My485UART) >> 8
   \   000000C2   8B82               STD     Z+18, R24
   \   000000C4   8B93               STD     Z+19, R25
   \   000000C6   C05A               RJMP    ??ReceivePacketUart_3
    413                          } else {
    414                              GoToSyncUART() ;                        // go to sync modus for recive
   \                     ??ReceivePacketUart_6:
   \   000000C8   ....               RCALL   GoToSyncUART
   \   000000CA   C058               RJMP    ??ReceivePacketUart_3
    415                          }
    416                      } else {
    417                          GoToSyncUART() ;                            // go to sync modus for recive
   \                     ??ReceivePacketUart_5:
   \   000000CC   ....               RCALL   GoToSyncUART
    418                      }
    419                  }
    420                  break ;
   \   000000CE   C056               RJMP    ??ReceivePacketUart_3
    421              case RECEIVE :
    422                  if (++My485UART.RxCount >= My485UART.RxPacklen) {
   \                     ??ReceivePacketUart_2:
   \   000000D0   ....               LDI     R30, LOW(My485UART)
   \   000000D2   ....               LDI     R31, (My485UART) >> 8
   \   000000D4   8902               LDD     R16, Z+18
   \   000000D6   8913               LDD     R17, Z+19
   \   000000D8   5F0F               SUBI    R16, 255
   \   000000DA   4F1F               SBCI    R17, 255
   \   000000DC   8B02               STD     Z+18, R16
   \   000000DE   8B13               STD     Z+19, R17
   \   000000E0   ....               LDI     R30, LOW(My485UART)
   \   000000E2   ....               LDI     R31, (My485UART) >> 8
   \   000000E4   8902               LDD     R16, Z+18
   \   000000E6   8913               LDD     R17, Z+19
   \   000000E8   ....               LDI     R30, LOW(My485UART)
   \   000000EA   ....               LDI     R31, (My485UART) >> 8
   \   000000EC   8D20               LDD     R18, Z+24
   \   000000EE   8D31               LDD     R19, Z+25
   \   000000F0   1702               CP      R16, R18
   \   000000F2   0713               CPC     R17, R19
   \   000000F4   F408               BRCC    $+2+2
   \   000000F6   C042               RJMP    ??ReceivePacketUart_3
    423                      if ((My485UART.pRxBuffer[My485UART.RxPacklen -1]) == ANPRO10_EOT) {
   \   000000F8   ....               LDI     R26, LOW((My485UART + 12))
   \   000000FA   ....               LDI     R27, HIGH((My485UART + 12))
   \   000000FC   91ED               LD      R30, X+
   \   000000FE   91FC               LD      R31, X
   \   00000100   9711               SBIW    R27:R26, 1
   \   00000102   ....               LDI     R26, LOW((My485UART + 24))
   \   00000104   ....               LDI     R27, HIGH((My485UART + 24))
   \   00000106   910D               LD      R16, X+
   \   00000108   911C               LD      R17, X
   \   0000010A   9711               SBIW    R27:R26, 1
   \   0000010C   0FE0               ADD     R30, R16
   \   0000010E   1FF1               ADC     R31, R17
   \   00000110   9731               SBIW    R31:R30, 1
   \   00000112   8100               LD      R16, Z
   \   00000114   3004               CPI     R16, 4
   \   00000116   F569               BRNE    ??ReceivePacketUart_7
    424                          if (CalcDSRxChecksum(My485UART.RxPacklen-2)) {
   \   00000118   ....               LDI     R30, LOW(My485UART)
   \   0000011A   ....               LDI     R31, (My485UART) >> 8
   \   0000011C   8D00               LDD     R16, Z+24
   \   0000011E   8D11               LDD     R17, Z+25
   \   00000120   5002               SUBI    R16, 2
   \   00000122   4010               SBCI    R17, 0
   \   00000124   ....               RCALL   CalcDSRxChecksum
   \   00000126   2B01               OR      R16, R17
   \   00000128   F109               BREQ    ??ReceivePacketUart_8
    425                              if ((My485UART.pRxBuffer[1] == MyAddress())||       // message to me? or
    426                                   (My485UART.pRxBuffer[1] == 0xff)) {            // broadcast
   \   0000012A   ........           CALL    MyAddress
   \   0000012E   ....               LDI     R26, LOW((My485UART + 12))
   \   00000130   ....               LDI     R27, HIGH((My485UART + 12))
   \   00000132   91ED               LD      R30, X+
   \   00000134   91FC               LD      R31, X
   \   00000136   9711               SBIW    R27:R26, 1
   \   00000138   8111               LDD     R17, Z+1
   \   0000013A   1710               CP      R17, R16
   \   0000013C   F041               BREQ    ??ReceivePacketUart_9
   \   0000013E   ....               LDI     R26, LOW((My485UART + 12))
   \   00000140   ....               LDI     R27, HIGH((My485UART + 12))
   \   00000142   91ED               LD      R30, X+
   \   00000144   91FC               LD      R31, X
   \   00000146   9711               SBIW    R27:R26, 1
   \   00000148   8101               LDD     R16, Z+1
   \   0000014A   3F0F               CPI     R16, 255
   \   0000014C   F461               BRNE    ??ReceivePacketUart_10
    427                                  hostAddress = My485UART.pRxBuffer[3];            // address to sender (host)
   \                     ??ReceivePacketUart_9:
   \   0000014E   ....               LDI     R26, LOW((My485UART + 12))
   \   00000150   ....               LDI     R27, HIGH((My485UART + 12))
   \   00000152   91ED               LD      R30, X+
   \   00000154   91FC               LD      R31, X
   \   00000156   9711               SBIW    R27:R26, 1
   \   00000158   8103               LDD     R16, Z+3
   \   0000015A   9300....           STS     hostAddress, R16
    428                                  My485UART.RxState = HANDLE ;                     // Package OK
   \   0000015E   E00A               LDI     R16, 10
   \   00000160   9300....           STS     (My485UART + 20), R16
   \   00000164   C00B               RJMP    ??ReceivePacketUart_3
    429                              } else {
    430                                  GoToSyncUART() ;                             // go to sync modus for recive
   \                     ??ReceivePacketUart_10:
   \   00000166   ........           CALL    GoToSyncUART
   \   0000016A   C008               RJMP    ??ReceivePacketUart_3
    431                              }
    432                          } else {
    433                              GoToSyncUART() ;                                // go to sync modus for recive
   \                     ??ReceivePacketUart_8:
   \   0000016C   ........           CALL    GoToSyncUART
   \   00000170   C005               RJMP    ??ReceivePacketUart_3
    434                          }
    435                      } else {
    436                          GoToSyncUART() ;                                    // go to sync modus for recive
   \                     ??ReceivePacketUart_7:
   \   00000172   ........           CALL    GoToSyncUART
    437                      }
    438                  }
    439                  break ;
   \   00000176   C002               RJMP    ??ReceivePacketUart_3
    440              case HANDLE :
    441                  break;
    442              default :
    443                  GoToSyncUART() ;                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_4:
   \   00000178   ........           CALL    GoToSyncUART
    444                  break ;
    445              }                                                           // end switch 
    446              if (++My485UART.RxLast >= RXSIZE_UART) {                     // check pointer 
   \                     ??ReceivePacketUart_3:
   \   0000017C   ....               LDI     R30, LOW(My485UART)
   \   0000017E   ....               LDI     R31, (My485UART) >> 8
   \   00000180   8900               LDD     R16, Z+16
   \   00000182   8911               LDD     R17, Z+17
   \   00000184   5F0F               SUBI    R16, 255
   \   00000186   4F1F               SBCI    R17, 255
   \   00000188   8B00               STD     Z+16, R16
   \   0000018A   8B11               STD     Z+17, R17
   \   0000018C   ....               LDI     R30, LOW(My485UART)
   \   0000018E   ....               LDI     R31, (My485UART) >> 8
   \   00000190   8900               LDD     R16, Z+16
   \   00000192   8911               LDD     R17, Z+17
   \   00000194   350E               CPI     R16, 94
   \   00000196   E021               LDI     R18, 1
   \   00000198   0712               CPC     R17, R18
   \   0000019A   F030               BRCS    ??ReceivePacketUart_11
    447                  My485UART.RxLast = 0;                                     // reset pointer
   \   0000019C   ....               LDI     R30, LOW(My485UART)
   \   0000019E   ....               LDI     R31, (My485UART) >> 8
   \   000001A0   E000               LDI     R16, 0
   \   000001A2   8B00               STD     Z+16, R16
   \   000001A4   E000               LDI     R16, 0
   \   000001A6   8B01               STD     Z+17, R16
    448              }
    449          }
   \                     ??ReceivePacketUart_11:
   \   000001A8   E0E4               LDI     R30, 4
   \   000001AA   ........           JMP     ?EPILOGUE_B4_L09
    450          /*************************************************************************
    451          *
    452          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    453          *
    454          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    455          char CalcDSTxChecksum(unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01A8               MOVW    R21:R20, R17:R16
    456          
    457              unsigned short  cnt ;
    458              unsigned char   csum ;
    459          
    460              csum = 0 ;
   \   00000006   E000               LDI     R16, 0
    461              for (cnt = 4 ; cnt < len ; cnt++) {
   \   00000008   E084               LDI     R24, 4
   \   0000000A   E090               LDI     R25, 0
   \                     ??CalcDSTxChecksum_0:
   \   0000000C   1784               CP      R24, R20
   \   0000000E   0795               CPC     R25, R21
   \   00000010   F4A0               BRCC    ??CalcDSTxChecksum_1
    462                  csum = crc[csum ^ My485UART.pTxBuffer[cnt]] ;
   \   00000012   E010               LDI     R17, 0
   \   00000014   ....               LDI     R26, LOW(My485UART)
   \   00000016   ....               LDI     R27, (My485UART) >> 8
   \   00000018   91ED               LD      R30, X+
   \   0000001A   91FC               LD      R31, X
   \   0000001C   9711               SBIW    R27:R26, 1
   \   0000001E   0FE8               ADD     R30, R24
   \   00000020   1FF9               ADC     R31, R25
   \   00000022   8120               LD      R18, Z
   \   00000024   E030               LDI     R19, 0
   \   00000026   2702               EOR     R16, R18
   \   00000028   2713               EOR     R17, R19
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000030   ....               LDI     R19, (crc) >> 16
   \   00000032   BF3B               OUT     0x3B, R19
   \   00000034   9106               ELPM    R16, Z
    463              }
   \   00000036   9601               ADIW    R25:R24, 1
   \   00000038   CFE9               RJMP    ??CalcDSTxChecksum_0
    464              return csum ;
   \                     ??CalcDSTxChecksum_1:
   \   0000003A   E0E4               LDI     R30, 4
   \   0000003C   ........           JMP     ?EPILOGUE_B4_L09
    465          }
    466          
    467          /*************************************************************************
    468          *
    469          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    470          *
    471          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    472          short CalcDSRxChecksum( unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01A8               MOVW    R21:R20, R17:R16
    473          
    474              unsigned short  cnt ;
    475              unsigned char   csum ;
    476          
    477              csum = 0 ;
   \   00000006   E020               LDI     R18, 0
    478              for (cnt=0 ; cnt < len ; cnt++) {
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
   \                     ??CalcDSRxChecksum_0:
   \   0000000C   1784               CP      R24, R20
   \   0000000E   0795               CPC     R25, R21
   \   00000010   F4A8               BRCC    ??CalcDSRxChecksum_1
    479                  csum = crc[csum ^ My485UART.pRxBuffer[cnt]] ;
   \   00000012   2F02               MOV     R16, R18
   \   00000014   E010               LDI     R17, 0
   \   00000016   ....               LDI     R26, LOW((My485UART + 12))
   \   00000018   ....               LDI     R27, HIGH((My485UART + 12))
   \   0000001A   91ED               LD      R30, X+
   \   0000001C   91FC               LD      R31, X
   \   0000001E   9711               SBIW    R27:R26, 1
   \   00000020   0FE8               ADD     R30, R24
   \   00000022   1FF9               ADC     R31, R25
   \   00000024   8120               LD      R18, Z
   \   00000026   E030               LDI     R19, 0
   \   00000028   2702               EOR     R16, R18
   \   0000002A   2713               EOR     R17, R19
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000032   ....               LDI     R19, (crc) >> 16
   \   00000034   BF3B               OUT     0x3B, R19
   \   00000036   9126               ELPM    R18, Z
    480              }
   \   00000038   9601               ADIW    R25:R24, 1
   \   0000003A   CFE8               RJMP    ??CalcDSRxChecksum_0
    481              if (csum == My485UART.pRxBuffer[len]) {
   \                     ??CalcDSRxChecksum_1:
   \   0000003C   ....               LDI     R26, LOW((My485UART + 12))
   \   0000003E   ....               LDI     R27, HIGH((My485UART + 12))
   \   00000040   91ED               LD      R30, X+
   \   00000042   91FC               LD      R31, X
   \   00000044   9711               SBIW    R27:R26, 1
   \   00000046   0FE4               ADD     R30, R20
   \   00000048   1FF5               ADC     R31, R21
   \   0000004A   8100               LD      R16, Z
   \   0000004C   1720               CP      R18, R16
   \   0000004E   F419               BRNE    ??CalcDSRxChecksum_2
    482                  return true ;
   \   00000050   E001               LDI     R16, 1
   \   00000052   E010               LDI     R17, 0
   \   00000054   C002               RJMP    ??CalcDSRxChecksum_3
    483              } else {
    484                  return false ;
   \                     ??CalcDSRxChecksum_2:
   \   00000056   E000               LDI     R16, 0
   \   00000058   E010               LDI     R17, 0
   \                     ??CalcDSRxChecksum_3:
   \   0000005A   E0E4               LDI     R30, 4
   \   0000005C   ........           JMP     ?EPILOGUE_B4_L09
    485              }
    486          }
    487          
    488          /*************************************************************************
    489          *
    490          * Goes to sync mode
    491          *
    492          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    493          __monitor void GoToSyncUART(void) {
   \                     GoToSyncUART:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
    494          
    495                  My485UART.SyncCnt = 0 ;                        // ready for sync
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     (My485UART + 21), R16
    496                  My485UART.RxState = SYNC ;
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   9300....           STS     (My485UART + 20), R16
    497                  My485UART.RxFirst = 0 ;
   \   00000010   ....               LDI     R30, LOW(My485UART)
   \   00000012   ....               LDI     R31, (My485UART) >> 8
   \   00000014   E000               LDI     R16, 0
   \   00000016   8706               STD     Z+14, R16
   \   00000018   E000               LDI     R16, 0
   \   0000001A   8707               STD     Z+15, R16
    498          }
   \   0000001C   BF1F               OUT     0x3F, R17
   \   0000001E   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_7) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   03FEAC             DB      254,0x3,0xac
   \   0000000A   ....               DW      (??CheckActionUart_2) /2
   \   0000000C   0A                 DB      0xa
   \   0000000D   ....               DW      (??CheckActionUart_3) /2
   \   0000000F   0A                 DB      0xa
   \   00000010   ....               DW      (??CheckActionUart_4) /2
   \   00000012   0A                 DB      0xa
   \   00000013   ....               DW      (??CheckActionUart_5) /2
   \   00000015   14                 DB      0x14
   \   00000016   ....               DW      (??CheckActionUart_6) /2
   \   00000018   FB                 DB      251
   \   00000019   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   BuildFlashID
      4      2   BuildStatusData
        4      2   -> MyAddress
      4      2   CalcDSRxChecksum
      4      2   CalcDSTxChecksum
      5      2   CheckActionUart
        5      2   -> BuildFlashID
        5      2   -> BuildStatusData
        5      2   -> EraseFlash
        5      2   -> ExitBootloader
        5      2   -> ProgramFlash
        5      2   -> ReadFlash
        5      2 ?SV_SWITCH_L06
      4      2   EraseFlash
        4      2   -> write_page
      0      2   ExitBootloader
      0      2   GoToSyncUART
     16      2   ProgramFlash
       16      2   -> fill_temp_buffer
       16      2   -> read_program_memory
       16      2   -> write_page
     12      2   ReadFlash
       12      2   -> read_program_memory
      4      2   ReceivePacketUart
        4      2   -> CalcDSRxChecksum
        4      2   -> GoToSyncUART
        4      2   -> MyAddress
      4      2   SendPacketUart
        4      2   -> sendchar
      2      2   Uart_BuildHeader
        2      2   -> MyAddress
      4      2   Uart_BuildTail
        4      2   -> CalcDSTxChecksum
        4      2   -> SendPacketUart
        4      2   -> Uart_BuildHeader
      3      2   UsartCheckPackage
        3      2   -> CheckActionUart
        3      2   -> GoToSyncUART
        3      2   -> Uart_BuildTail


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      26  ?<Jumptable for CheckActionUart>_0
     358  BuildFlashID
     708  BuildStatusData
      96  CalcDSRxChecksum
      64  CalcDSTxChecksum
     114  CheckActionUart
     314  EraseFlash
      30  ExitBootloader
      32  GoToSyncUART
     648  ProgramFlash
     554  ReadFlash
     430  ReceivePacketUart
     138  SendPacketUart
     226  Uart_BuildHeader
     438  Uart_BuildTail
     124  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_RAMPZ
       1  _A_WDTCR

 
     7 bytes in segment ABSOLUTE
 4 274 bytes in segment CODE
    26 bytes in segment SWITCH
 
 4 300 bytes of CODE memory
     0 bytes of DATA memory (+ 7 bytes shared)

Errors: none
Warnings: none
