###############################################################################
#                                                                             #
#     IAR Assembler V7.30.5.1680/W32 for Microchip AVR 23/Jan/2023  12:47:44  #
#     Copyright 2022 IAR Systems AB.                                          #
#                                                                             #
#           Target option =  Relative jumps do not wrap                       #
#           Source file   =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Asm\assembly.s90#
#           List file     =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\List\assembly.lst#
#           Object file   =  D:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\Obj\assembly.r90#
#           Command line  =  -f C:\Users\ESY\AppData\Local\Temp\EWD489.tmp    #
#                            (D:\S2Prog\IO\ANZB_Bootloader – 1280\Asm\assembly.s90 #
#                            -v3                                              #
#                            -OD:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\Obj  #
#                            -s+ -w+ -r -DENABLE_BIT_DEFINITIONS -M<>         #
#                            -LD:\S2Prog\IO\ANZB_Bootloader – 1280\Debug\List #
#                            -t8 -u_enhancedCore -D__HAS_ENHANCED_CORE__=1    #
#                            -D__HAS_MUL__=1                                  #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 8.4\avr\INC\\ #
#                            -ID:\S2Prog\IO\ANZB_Bootloader – 1280\INC\\      #
#                            -D__MEMORY_MODEL__=2 -D__ATmega1280__=1          #
#                            -D__HAS_ELPM__=1)                                #
#                                                                             #
###############################################################################

      1    00000000                      NAME    assembly(16)
      2    00000000                      PUBLIC  fill_temp_buffer
      3    00000000                      PUBLIC  write_page
      4    00000000                      PUBLIC  write_lock_bits
      5    00000000                      PUBLIC  read_program_memory
      6    00000000                      RSEG    CODE
      7    00000000              
      8    00000000              
      9    00000000                #include "defines.h"
     10    00000000                #define _SPM    DW 0x95E8 ;Workaround for
                                  not having enhanced core Assembler in EWAAVR
                                  2.25
     11    00000000              
     12    00000000              
     13    00000000              write_page:
     14    00000000 D029                 RCALL   WAIT_SPMEN  ;Wait for SPMEN
                                                              flag cleared
     15    00000002 2FF1                 MOV     R31,R17         
     16    00000004 2FE0                 MOV     R30,R16     ;move adress to z
                                                              pointer (R31=ZH
                                                              R30=ZL)
     17    00000006 93200068             LOAD_SPM_CONTROL_REGISTER_MACRO   ;
  argument 2 decides function (r18)
     18    0000000A 95E8                 _SPM                ;Store program
                                                              memory
     19    0000000C FFFF                 DW      0xFFFF      ;For future part
                                                              compatibility,
                                                              instruction
                                                              alignment
     20    0000000E 0000                 NOP
     21    00000010 C021                 RJMP    WAIT_SPMEN ;Wait for SPMEN
                                                             flag cleared
     22    00000012              
     23    00000012              
     24    00000012              fill_temp_buffer:
     25    00000012 D020                 RCALL   WAIT_SPMEN  ;Wait for SPMEN
                                                              flag cleared
     26    00000014 2FF3                 MOV     R31,R19     ;move adress to z
                                                              pointer (R31=ZH
                                                              R30=ZL)  
                                                              
     27    00000016 2FE2                 MOV     R30,R18     
     28    00000018 2E11                 MOV     R1,R17      ;move data to reg
                                                              0 and 1     
                                                              
     29    0000001A 2E00                 MOV     R0,R16
     30    0000001C                      
     31    0000001C E021                 LDI     R18,(1<<SPMEN)
     32    0000001E 93200068             LOAD_SPM_CONTROL_REGISTER_MACRO   ;
  r18 decides function
     33    00000022 95E8                 _SPM                ;Store program
                                                              memory
     34    00000024 FFFF                 DW      0xFFFF      ;For future part
                                                              compatibility,
                                                              instruction
                                                              alignment
     35    00000026 0000                 NOP
     36    00000028 C015                 RJMP   WAIT_SPMEN  ;Wait for SPMEN
                                                             flag cleared
     37    0000002A              
     38    0000002A              
     39    0000002A              read_program_memory:
     40    0000002A D014                 RCALL    WAIT_SPMEN
     41    0000002C 2FF1                 MOV     R31,R17     ;R31=ZH R30=ZL
     42    0000002E 2FE0                 MOV     R30,R16     ;move adress to z
                                                              pointer
     43    00000030 FD20                 SBRC    R18,0       ;read lockbits?
                                                              (second
                                                              argument=0x09)
     44    00000032                                          ;if so, place
                                  second argument in SPMEN register
     45    00000032 93200068             LOAD_SPM_CONTROL_REGISTER_MACRO   ;
  r18 decides function
     46    00000036                      
     47    00000036                      #ifdef LARGE_MEMORY ;If large memory
                                  (>64K) ELPM is needed to use RAMPZ       
                                  
     48    00000036 95D8                 ELPM                ;read LSB       
                                                              
     49    00000038                      #else
     51    00000038                      #endif
     52    00000038              
     53    00000038 2D00                 MOV     R16,R0      ;read LSB         
                                                               
     54    0000003A 95E3                 INC     R30
     55    0000003C              
     56    0000003C                      #ifdef LARGE_MEMORY ;If large memory
                                  (>64K) ELPM is needed to use RAMPZ       
                                  
     57    0000003C 95D8                 ELPM                ;read LSB       
                                                              
     58    0000003E                      #else
     60    0000003E                      #endif
     61    0000003E              
     62    0000003E 2D10                 MOV     R17,R0      ;read MSB (ignored
                                                              when reading
                                                              lockbits)
     63    00000040 9508                 RET
     64    00000042              
     65    00000042              
     66    00000042              write_lock_bits:
     67    00000042 D008                 RCALL   WAIT_SPMEN  ;Wait for SPMEN
                                                              flag cleared
     68    00000044 2E00                 MOV     R0,R16   
     69    00000046 E029                 LDI     R18,((1<<BLBSET)|(1<<SPMEN))
     70    00000048              
     71    00000048 93200068             LOAD_SPM_CONTROL_REGISTER_MACRO   ;
  r18 decides function
     72    0000004C 95E8                 _SPM                ;write lockbits
     73    0000004E FFFF                 DW      0xFFFF      ;For future part
                                                              compatibility,
                                                              instruction
                                                              alignment
     74    00000050 0000                 NOP
     75    00000052                      
     76    00000052 C000                 RJMP   WAIT_SPMEN  ;Wait for SPMEN
                                                             flag cleared
     77    00000054                      
     78    00000054              
     79    00000054              WAIT_SPMEN:
     80    00000054 2E02                 MOV             R0, R18
     81    00000056 91200068             GET_SPM_CONTROL_REGISTER_MACRO  ; get
                                                                          SPMCR
                                                                          into
                                                                          r18
     82    0000005A FD20                 SBRC    R18,SPMEN
     83    0000005C CFFB                 RJMP    WAIT_SPMEN  ;Wait for SPMEN
                                                              flag cleared
     84    0000005E 2D20                 MOV             R18, R0
     85    00000060              
     86    00000060 9508                 RET
     87    00000062              
     88    00000062              
     89    00000062              END
##############################
#          CRC:2348          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 98          #
##############################



