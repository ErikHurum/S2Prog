###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            07/Feb/2017  14:17:40
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\Misc.c
#    Command line =  
#        D:\S2Prog\IO\ANZB\Src\Misc.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB\Release_debug\Obj -D OS_LIBMODE_S -D OS_UART=0 -lCN
#        D:\S2Prog\IO\ANZB\Release_debug\List -y --initializers_in_flash
#        --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB\INC\ -I
#        D:\S2Prog\IO\ANZB\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohz
#    List file    =  D:\S2Prog\IO\ANZB\Release_debug\List\Misc.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release_debug\Obj\Misc.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\Misc.c
      1          /****************************************************************************************
      2          /  Misc. routines
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*************************************************************************
     14          *   (This is a task)
     15          *  Watchdog handler
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void WatchDogHandler(void) {
   \                     WatchDogHandler:
     19          
     20              OS_Delay(100);                         // wait 1 seconds for other tasks to start and set TaskStatus
   \   00000000   E604               LDI     R16, 100
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    OS_Delay
     21              asm("WDR");                             // kick the dog!!
   \   00000008   95A8               WDR
     22              WDTCR = 0x1f;
   \   0000000A   E10F               LDI     R16, 31
   \   0000000C   BD01               OUT     0x21, R16
     23              WDTCR = 0x0f;
   \   0000000E   E00F               LDI     R16, 15
   \   00000010   BD01               OUT     0x21, R16
     24              asm("WDR");                             // kick the dog!!
   \   00000012   95A8               WDR
     25              while (1) {
     26                  OS_Delay(500);
   \                     ??WatchDogHandler_0:
   \   00000014   EF04               LDI     R16, 244
   \   00000016   E011               LDI     R17, 1
   \   00000018   ........           CALL    OS_Delay
     27                  __watchdog_reset();               //kick the dog
   \   0000001C   95A8               WDR
   \   0000001E   CFFA               RJMP    ??WatchDogHandler_0
   \   00000020                      REQUIRE _A_WDTCR
     28              }
     29          }
     30          
     31          
     32          /*************************************************************************
     33          *
     34          *  Get my address
     35          *
     36          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     37          char MyAddress(void) {
   \                     MyAddress:
     38          
     39          #if (OS_UART == 0)
     40              return 0;                   // Debug only
   \   00000000   E000               LDI     R16, 0
   \   00000002   9508               RET
     41          #else
     42              return(~(PIND>>4) & 0x0f) ;
     43          #endif
     44          }
     45          
     46          /*************************************************************************
     47          *
     48          *  Check for legal float
     49          *
     50          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     51          char IsFloat(float A){
   \                     IsFloat:
     52            long exp;
     53          	// A NAN has an exponent of 255 (shifted left 23 positions) and
     54          	// Denormalized has an exponent set to 0
     55          	exp = *(long*)&A & 0x7F800000L;
   \   00000000   E000               LDI     R16, 0
   \   00000002   7820               ANDI    R18, 0x80
   \   00000004   773F               ANDI    R19, 0x7F
     56          	//int mantissa = *(int*)&A & 0x007FFFFF;
     57          	if ( exp && (exp != 0x7F800000L)  ) {
   \   00000006   2F42               MOV     R20, R18
   \   00000008   2B43               OR      R20, R19
   \   0000000A   F029               BREQ    ??IsFloat_0
   \   0000000C   3000               CPI     R16, 0
   \   0000000E   4820               SBCI    R18, 128
   \   00000010   473F               SBCI    R19, 127
   \   00000012   F009               BREQ    ??IsFloat_0
     58          		return(true);
   \   00000014   E001               LDI     R16, 1
     59            }
     60          	return(false);
   \                     ??IsFloat_0:
   \   00000016   9508               RET
     61          }

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   IsFloat
      2   MyAddress
      2   WatchDogHandler
        2   -> OS_Delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  IsFloat
       4  MyAddress
      32  WatchDogHandler
       1  _A_WDTCR

 
  1 byte  in segment ABSOLUTE
 60 bytes in segment CODE
 
 60 bytes of CODE memory
  0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
