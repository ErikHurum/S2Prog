###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            07/Feb/2017  14:17:41
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\RS485.c
#    Command line =  
#        D:\S2Prog\IO\ANZB\Src\RS485.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\ANZB\Release_debug\Obj -D OS_LIBMODE_S -D OS_UART=0 -lCN
#        D:\S2Prog\IO\ANZB\Release_debug\List -y --initializers_in_flash
#        --no_tbaa -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB\INC\ -I
#        D:\S2Prog\IO\ANZB\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohz
#    List file    =  D:\S2Prog\IO\ANZB\Release_debug\List\RS485.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release_debug\Obj\RS485.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          //#include "stdlib.h"
     13          //#include "string.h"
     14          
     15          
     16          
     17          /************************************************ *************************
     18          *   (This is a timer calback)
     19          *  Timout timer UART 0
     20          *
     21          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     22          void TimoutUART0(void) {
   \                     TimoutUART0:
     23          
     24              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   E0EC               LDI     R30, LOW(4364)
   \   00000002   ....               RJMP    ?Subroutine5
     25          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   E1F1               LDI     R31, (4364) >> 8
   \   00000002   8100               LD      R16, Z
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006                      REQUIRE ?Subroutine115
   \   00000006                      ;               // Fall through to label ?Subroutine115

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine115:
   \   00000000   8300               ST      Z, R16
   \   00000002   9508               RET
     26          
     27          /*************************************************************************
     28          *   (This is a timer calback)
     29          *  Timout timer UART 1
     30          *
     31          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     32          void TimoutUART1(void) {
   \                     TimoutUART1:
     33          
     34              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   E0E4               LDI     R30, LOW(4356)
   \   00000002                      REQUIRE ?Subroutine5
   \   00000002                      ;               // Fall through to label ?Subroutine5
     35          }
     36          
     37          
     38          /*************************************************************************
     39          *   (This is a task)
     40          *  Usart handler UART send request
     41          *
     42          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     43          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_64:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
     44              char SeqCnt = 0;
   \   00000002   2444               CLR     R4
     45              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   00000004   E005               LDI     R16, 5
   \   00000006   2E50               MOV     R5, R16
     46              char EventStatus;
     47              char AskMD[2];
     48          
     49              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000008   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_67:
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   ....               RCALL   Init16552
     50              Init16552(1, 9600);                                      // Init UART channel 1
   \   0000000E   ....               RCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_68:
   \   00000010   E001               LDI     R16, 1
   \   00000012   ....               RCALL   Init16552
     51          
     52              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   00000014   E002               LDI     R16, 2
   \   00000016   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_29:
   \   00000018   9300....           STS     TData, R16
     53              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   0000001C   E003               LDI     R16, 3
   \   0000001E   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_28:
   \   00000020   9300....           STS     (TData + 1), R16
     54              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   00000024   E004               LDI     R16, 4
   \   00000026   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_27:
   \   00000028   9300....           STS     (TData + 2), R16
     55          
     56              TData.RS4.ToTargetBuffer[0][0] = false;
   \   0000002C   9240....           STS     (TData + 1268), R4
     57              TData.RS4.ToTargetBuffer[1][0] = false;
   \   00000030   9240....           STS     (TData + 1348), R4
     58              TData.RS4.FromTargetBuffer[0][0] = false;
   \   00000034   9240....           STS     (TData + 1428), R4
     59              TData.RS4.FromTargetBuffer[1][0] = false;
   \   00000038   9240....           STS     (TData + 1478), R4
     60          
     61              for (char i = 0; i < 8; i++) {
   \   0000003C   E0A0               LDI     R26, 0
     62                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \                     ??ExtRS485Ctl_0:
   \   0000003E   94F8               CLI
   \   00000040   9120....           LDS     R18, TData
   \   00000044   2F4A               MOV     R20, R26
   \   00000046   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_115:
   \   00000048   2320               AND     R18, R16
   \   0000004A   B305               IN      R16, 0x15
   \   0000004C   2B02               OR      R16, R18
   \   0000004E   BB05               OUT     0x15, R16
   \   00000050   ....               RCALL   ?Subroutine94
     63                  OS_Delay(100);
   \                     ??CrossCallReturnLabel_128:
   \   00000052   E604               LDI     R16, 100
   \   00000054   E010               LDI     R17, 0
   \   00000056   ....               RCALL   ?Subroutine49
     64              }
   \                     ??CrossCallReturnLabel_60:
   \   00000058   95A3               INC     R26
   \   0000005A   30A8               CPI     R26, 8
   \   0000005C   F380               BRCS    ??ExtRS485Ctl_0
     65              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \   0000005E   E700               LDI     R16, 112
   \   00000060   E117               LDI     R17, 23
   \   00000062   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_59:
   \   00000064   C005               RJMP    ??ExtRS485Ctl_1
     66          
     67              while (1) {
     68                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
     69                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
     70                          EmptyRxBuf16552(0);                            // Empty UART channel 0
     71                      }
     72                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
     73                          EmptyRxBuf16552(1);                            // Empty UART channel 1
     74                      }
     75                      if (PowerOnTimer < POWER_ON_CNT) {
     76                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
     77                              SetRS4Port();                                // and set power on ports
     78                          }
     79                      }
     80                      SetBit(PORTE, 0xf0);
     81                      ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
     82                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
     83                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
     84                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
     85                          switch (SnsType) {
     86                          case 0x01:    //Water ingress??
     87                              switch (SeqCnt) {
     88                              case 0:
     89                                  Uart_BuildReqWISCardStatus(0);          //Card status
     90                                  break;
     91                              case 20:
     92                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
     93                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
     94                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
     95                                          TData.RS4.EEPROMPortpair[0] = 0;
     96                                      }
     97                                  } else {
     98                                      Uart_BuildReqWISData(0);                //WIS data
     99                                  }
    100                                  break;
    101                              default:
    102                                  Uart_BuildReqWISData(0);                //WIS data
    103                                  break;
    104                              }
    105                              break;
    106                          case 0x02: // Radar??
    107                              switch (SeqCnt) {
    108                              case 20:
    109                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    110                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    111                                          TData.RS4.EEPROMPortpair[0] = 0;
    112                                      }
    113                                  }
    114                                  // Fall through and send the request
    115                              default:
    116                                  Uart_BuildReqRadarData(0);          // Radar data
    117                                  break;
    118                              case 0:
    119                                  Uart_BuildReqRadarInfo(0);          //Radar Information
    120                                  break;
    121                              }
    122                              break;
    123                          case 0x00:  // AN-SGCNV
    124                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    125                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
    126                                  Uart_BuildSndData(0);                       // add data to AD card package
    127                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    128                                  AskMD[0] = false;
    129                              } else {
    130                                  AskMD[0] = true;
    131                              }
    132                              if (SeqCnt == 0) {
    133                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
    134                              } else if (SeqCnt == 5) {
    135                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
    136                              } else if (SeqCnt == 10) {
    137                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    138                              } else if (SeqCnt == 15) {
    139                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
    140                              } else if (SeqCnt == 20) {
    141                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    142                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
    143                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
    144                                          TData.RS4.EEPROMADChannel[0] = 0;
    145                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    146                                              TData.RS4.EEPROMPortpair[0] = 0;
    147                                          }
    148                                      }
    149                                  } else if (AskMD[0] == true) {
    150                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    151                                  }
    152                              } else if (AskMD[0] == true) {
    153                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    154                              }
    155                              break;
    156                          }
    157                          Uart_BuildTail16552(0);
    158                      } else {
    159                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
    160                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
    161                                  TData.RS4.EEPROMPortpair[0] = 0;
    162                              }
    163                          }
    164                      }
    165                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
    166                          UART16552[1].TxFirst = 6;                       // Start at
    167                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
    168                          switch (SnsType) {
    169                          case 0x01:    //Water ingress??
    170                              switch (SeqCnt) {
    171                              case 0:
    172                                  Uart_BuildReqWISCardStatus(1);          //Card status
    173                                  break;
    174                              case 20:
    175                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    176                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
    177                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    178                                          TData.RS4.EEPROMPortpair[1] = 0;
    179                                      }
    180                                  } else {
    181                                      Uart_BuildReqWISData(1);                //WIS data
    182                                  }
    183                                  break;
    184                              default:
    185                                  Uart_BuildReqWISData(1);                //WIS data
    186                                  break;
    187                              }
    188                              break;
    189                          case 0x02:    // Radar??
    190                              switch (SeqCnt) {
    191                              case 20:
    192                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    193                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    194                                          TData.RS4.EEPROMPortpair[1] = 0;
    195                                      }
    196                                  }
    197                                  // Fall through and send the request
    198                              default:
    199                                  Uart_BuildReqRadarData(1);          // Radar data
    200                                  break;
    201                              case 0:
    202                                  Uart_BuildReqRadarInfo(1);          //Radar Information
    203                                  break;
    204                              }
    205                              break;
    206                          case 0x00:  // AN-SGCNV
    207                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    208                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
    209                                  Uart_BuildSndData(1);                       // add data to AD card package
    210                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    211                                  AskMD[1] = false;
    212                              } else {
    213                                  AskMD[1] = true;
    214                              }
    215                              if (SeqCnt == 0) {
    216                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
    217                              } else if (SeqCnt == 5) {
    218                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
    219                              } else if (SeqCnt == 10) {
    220                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    221                              } else if (SeqCnt == 15) {
    222                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
    223                              } else if (SeqCnt == 20) {
    224                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    225                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
    226                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
    227                                          TData.RS4.EEPROMADChannel[1] = 0;
    228                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    229                                              TData.RS4.EEPROMPortpair[1] = 0;
    230                                          }
    231                                      }
    232                                  } else if (AskMD[1] == true) {
    233                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    234                                  }
    235                              } else if (AskMD[1] == true) {
    236                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    237                              }
    238                              break;
    239                          }
    240                          Uart_BuildTail16552(1);
    241                      } else {
    242                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
    243                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
    244                                  TData.RS4.EEPROMPortpair[1] = 0;
    245                              }
    246                          }
    247                      }
    248                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
    249                      if (EventStatus & 0x02) {
    250                          if (PowerOnTimer >= POWER_ON_CNT) {
    251                              PowerOnTimer = 0;                              // and start over again
    252                          }
    253                      }
    254                  }
    255                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_2:
   \   00000066   9443               INC     R4
   \   00000068   E105               LDI     R16, 21
   \   0000006A   1640               CP      R4, R16
   \   0000006C   F008               BRCS    ??ExtRS485Ctl_1
    256                      SeqCnt = 0;
   \   0000006E   2444               CLR     R4
    257                  }
   \                     ??ExtRS485Ctl_1:
   \   00000070   E000               LDI     R16, 0
   \   00000072   9300....           STS     PortPair, R16
   \   00000076   C013               RJMP    ??ExtRS485Ctl_3
   \                     ??ExtRS485Ctl_4:
   \   00000078   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_250:
   \   0000007A   F409               BRNE    ??CrossCallReturnLabel_0
   \   0000007C   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_0:
   \   0000007E   EE28               LDI     R18, 232
   \   00000080   E033               LDI     R19, 3
   \   00000082   E001               LDI     R16, 1
   \   00000084   ........           CALL    OS_WaitEventTimed
   \   00000088   FB01               BST     R16, 1
   \   0000008A   F426               BRTC    ??ExtRS485Ctl_5
   \   0000008C   E005               LDI     R16, 5
   \   0000008E   1650               CP      R5, R16
   \   00000090   F008               BRCS    ??ExtRS485Ctl_5
   \   00000092   2455               CLR     R5
   \                     ??ExtRS485Ctl_5:
   \   00000094   ....               LDI     R30, LOW(PortPair)
   \   00000096   ....               LDI     R31, (PortPair) >> 8
   \   00000098   8100               LD      R16, Z
   \   0000009A   9503               INC     R16
   \   0000009C   8300               ST      Z, R16
   \                     ??ExtRS485Ctl_3:
   \   0000009E   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_155:
   \   000000A0   3004               CPI     R16, 4
   \   000000A2   F708               BRCC    ??ExtRS485Ctl_2
   \   000000A4   9100....           LDS     R16, (UART16552 + 24)
   \   000000A8   3009               CPI     R16, 9
   \   000000AA   F010               BRCS    ??ExtRS485Ctl_6
   \   000000AC   E000               LDI     R16, 0
   \   000000AE   ....               RCALL   EmptyRxBuf16552
   \                     ??ExtRS485Ctl_6:
   \   000000B0   9100....           LDS     R16, (UART16552 + 50)
   \   000000B4   3009               CPI     R16, 9
   \   000000B6   F010               BRCS    ??ExtRS485Ctl_7
   \   000000B8   E001               LDI     R16, 1
   \   000000BA   ....               RCALL   EmptyRxBuf16552
   \                     ??ExtRS485Ctl_7:
   \   000000BC   E005               LDI     R16, 5
   \   000000BE   1650               CP      R5, R16
   \   000000C0   F430               BRCC    ??ExtRS485Ctl_8
   \   000000C2   9453               INC     R5
   \   000000C4   1650               CP      R5, R16
   \   000000C6   F018               BRCS    ??ExtRS485Ctl_8
   \   000000C8   9100....           LDS     R16, TData
   \   000000CC   BB05               OUT     0x15, R16
   \                     ??ExtRS485Ctl_8:
   \   000000CE   94F8               CLI
   \   000000D0   B103               IN      R16, 0x03
   \   000000D2   6F00               ORI     R16, 0xF0
   \   000000D4   B903               OUT     0x03, R16
   \   000000D6   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_129:
   \   000000D8   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_189:
   \   000000DA   E100               LDI     R16, 16
   \   000000DC   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_113:
   \   000000DE   7F00               ANDI    R16, 0xF0
   \   000000E0   9500               COM     R16
   \   000000E2   B113               IN      R17, 0x03
   \   000000E4   2310               AND     R17, R16
   \   000000E6   B913               OUT     0x03, R17
   \   000000E8   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_130:
   \   000000EA   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_170:
   \   000000EC   F409               BRNE    $+2+2
   \   000000EE   C07B               RJMP    ??ExtRS485Ctl_9
   \   000000F0   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_260:
   \   000000F2   8302               STD     Z+2, R16
   \   000000F4   8313               STD     Z+3, R17
   \   000000F6   9120....           LDS     R18, (TData + 1428)
   \   000000FA   9100....           LDS     R16, (TData + 1)
   \   000000FE   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_80:
   \   00000100   F181               BREQ    ??ExtRS485Ctl_10
   \   00000102   950A               DEC     R16
   \   00000104   F019               BREQ    ??ExtRS485Ctl_11
   \   00000106   950A               DEC     R16
   \   00000108   F0C9               BREQ    ??ExtRS485Ctl_12
   \   0000010A   C06A               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_11:
   \   0000010C   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_82:
   \   0000010E   F019               BREQ    ??ExtRS485Ctl_14
   \   00000110   5104               SUBI    R16, 20
   \   00000112   F021               BREQ    ??ExtRS485Ctl_15
   \   00000114   C010               RJMP    ??ExtRS485Ctl_16
   \                     ??ExtRS485Ctl_14:
   \   00000116   E000               LDI     R16, 0
   \   00000118   ....               RCALL   Uart_BuildReqWISCardStatus
   \   0000011A   C062               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_15:
   \   0000011C   2322               TST     R18
   \   0000011E   F459               BRNE    ??ExtRS485Ctl_16
   \   00000120   9100....           LDS     R16, (TData + 1530)
   \   00000124   ....               RCALL   ??Subroutine130_0
   \                     ??CrossCallReturnLabel_246:
   \   00000126   F439               BRNE    ??ExtRS485Ctl_16
   \   00000128   E713               LDI     R17, 115
   \   0000012A   E000               LDI     R16, 0
   \   0000012C   ....               RCALL   Uart_BuildReqWISXData
   \   0000012E   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_255:
   \   00000130   F408               BRCC    $+2+2
   \   00000132   C056               RJMP    ??ExtRS485Ctl_13
   \   00000134   C04F               RJMP    ??ExtRS485Ctl_17
   \                     ??ExtRS485Ctl_16:
   \   00000136   E000               LDI     R16, 0
   \   00000138   ....               RCALL   Uart_BuildReqWISData
   \   0000013A   C052               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_12:
   \   0000013C   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_83:
   \   0000013E   F071               BREQ    ??ExtRS485Ctl_18
   \   00000140   5104               SUBI    R16, 20
   \   00000142   F449               BRNE    ??CrossCallReturnLabel_2
   \   00000144   2322               TST     R18
   \   00000146   F439               BRNE    ??CrossCallReturnLabel_2
   \   00000148   9100....           LDS     R16, (TData + 1530)
   \   0000014C   ....               RCALL   ??Subroutine130_0
   \                     ??CrossCallReturnLabel_247:
   \   0000014E   F419               BRNE    ??CrossCallReturnLabel_2
   \   00000150   ....               LDI     R30, ((TData + 250) & 0xff) & 0xFF
   \   00000152   ....               LDI     R31, (((TData + 1530) >> 8) & 0xff) & 0xFF
   \   00000154   ....               RCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_2:
   \   00000156   E000               LDI     R16, 0
   \   00000158   ....               RCALL   Uart_BuildReqRadarData
   \   0000015A   C042               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_18:
   \   0000015C   E000               LDI     R16, 0
   \   0000015E   ....               RCALL   Uart_BuildReqRadarInfo
   \   00000160   C03F               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_10:
   \   00000162   9100....           LDS     R16, (TData + 1268)
   \   00000166   3001               CPI     R16, 1
   \   00000168   F449               BRNE    ??ExtRS485Ctl_19
   \   0000016A   9100....           LDS     R16, (TData + 1269)
   \   0000016E   ....               RCALL   ??Subroutine130_0
   \                     ??CrossCallReturnLabel_248:
   \   00000170   F429               BRNE    ??ExtRS485Ctl_19
   \   00000172   E000               LDI     R16, 0
   \   00000174   ....               RCALL   Uart_BuildSndData
   \   00000176   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_212:
   \   00000178   E000               LDI     R16, 0
   \   0000017A   C001               RJMP    ??ExtRS485Ctl_20
   \                     ??ExtRS485Ctl_19:
   \   0000017C   E001               LDI     R16, 1
   \                     ??ExtRS485Ctl_20:
   \   0000017E   2044               TST     R4
   \   00000180   F419               BRNE    ??ExtRS485Ctl_21
   \   00000182   E000               LDI     R16, 0
   \   00000184   ....               RCALL   Uart_BuildReqCardStatus
   \   00000186   C02C               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_21:
   \   00000188   E015               LDI     R17, 5
   \   0000018A   1641               CP      R4, R17
   \   0000018C   F419               BRNE    ??ExtRS485Ctl_22
   \   0000018E   E000               LDI     R16, 0
   \   00000190   ....               RCALL   Uart_BuildReqR16552
   \   00000192   C026               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_22:
   \   00000194   E01A               LDI     R17, 10
   \   00000196   1641               CP      R4, R17
   \   00000198   F411               BRNE    ??ExtRS485Ctl_23
   \   0000019A   ....               RCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_211:
   \   0000019C   C021               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_23:
   \   0000019E   E01F               LDI     R17, 15
   \   000001A0   1641               CP      R4, R17
   \   000001A2   F419               BRNE    ??ExtRS485Ctl_24
   \   000001A4   E000               LDI     R16, 0
   \   000001A6   ....               RCALL   Uart_BuildReqC16552
   \   000001A8   C01B               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_24:
   \   000001AA   E114               LDI     R17, 20
   \   000001AC   1641               CP      R4, R17
   \   000001AE   F4A1               BRNE    ??ExtRS485Ctl_25
   \   000001B0   9110....           LDS     R17, (TData + 1428)
   \   000001B4   2311               TST     R17
   \   000001B6   F481               BRNE    ??ExtRS485Ctl_25
   \   000001B8   9110....           LDS     R17, (TData + 1530)
   \   000001BC   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_123:
   \   000001BE   1712               CP      R17, R18
   \   000001C0   F459               BRNE    ??ExtRS485Ctl_25
   \   000001C2   E000               LDI     R16, 0
   \   000001C4   ....               RCALL   Uart_BuildReqEEPROMData
   \   000001C6   ....               LDI     R30, ((TData + 248) & 0xff) & 0xFF
   \   000001C8   ....               LDI     R31, (((TData + 1528) >> 8) & 0xff) & 0xFF
   \   000001CA   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_6:
   \   000001CC   F048               BRCS    ??ExtRS485Ctl_13
   \   000001CE   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_194:
   \   000001D0   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_256:
   \   000001D2   F030               BRCS    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_17:
   \   000001D4   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_195:
   \   000001D6   C004               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_25:
   \   000001D8   FB00               BST     R16, 0
   \   000001DA   F416               BRTC    ??ExtRS485Ctl_13
   \   000001DC   E000               LDI     R16, 0
   \   000001DE   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_13:
   \   000001E0   E000               LDI     R16, 0
   \   000001E2   ....               RCALL   Uart_BuildTail16552
   \   000001E4   C007               RJMP    ??CrossCallReturnLabel_3
   \                     ??ExtRS485Ctl_9:
   \   000001E6   9100....           LDS     R16, (TData + 1530)
   \   000001EA   ....               RCALL   ??Subroutine130_0
   \                     ??CrossCallReturnLabel_249:
   \   000001EC   F419               BRNE    ??CrossCallReturnLabel_3
   \   000001EE   ....               LDI     R30, ((TData + 250) & 0xff) & 0xFF
   \   000001F0   ....               LDI     R31, (((TData + 1530) >> 8) & 0xff) & 0xFF
   \   000001F2   ....               RCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_3:
   \   000001F4   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_168:
   \   000001F6   F409               BRNE    $+2+2
   \   000001F8   CF3F               RJMP    ??ExtRS485Ctl_4
   \   000001FA   ....               RCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_261:
   \   000001FC   8F04               STD     Z+28, R16
   \   000001FE   8F15               STD     Z+29, R17
   \   00000200   9120....           LDS     R18, (TData + 1478)
   \   00000204   9100....           LDS     R16, (TData + 2)
   \   00000208   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_81:
   \   0000020A   F161               BREQ    ??ExtRS485Ctl_26
   \   0000020C   950A               DEC     R16
   \   0000020E   F019               BREQ    ??ExtRS485Ctl_27
   \   00000210   950A               DEC     R16
   \   00000212   F0C9               BREQ    ??ExtRS485Ctl_28
   \   00000214   C06E               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_27:
   \   00000216   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_84:
   \   00000218   F019               BREQ    ??ExtRS485Ctl_30
   \   0000021A   5104               SUBI    R16, 20
   \   0000021C   F021               BREQ    ??ExtRS485Ctl_31
   \   0000021E   C010               RJMP    ??ExtRS485Ctl_32
   \                     ??ExtRS485Ctl_30:
   \   00000220   E001               LDI     R16, 1
   \   00000222   ....               RCALL   Uart_BuildReqWISCardStatus
   \   00000224   C066               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_31:
   \   00000226   2322               TST     R18
   \   00000228   F459               BRNE    ??ExtRS485Ctl_32
   \   0000022A   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_251:
   \   0000022C   F449               BRNE    ??ExtRS485Ctl_32
   \   0000022E   E713               LDI     R17, 115
   \   00000230   E001               LDI     R16, 1
   \   00000232   ....               RCALL   Uart_BuildReqWISXData
   \   00000234   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   00000236   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \   00000238   ....               RCALL   ??Subroutine131_0
   \                     ??CrossCallReturnLabel_253:
   \   0000023A   F408               BRCC    $+2+2
   \   0000023C   C05A               RJMP    ??ExtRS485Ctl_29
   \   0000023E   C053               RJMP    ??ExtRS485Ctl_33
   \                     ??ExtRS485Ctl_32:
   \   00000240   E001               LDI     R16, 1
   \   00000242   ....               RCALL   Uart_BuildReqWISData
   \   00000244   C056               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_28:
   \   00000246   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_85:
   \   00000248   F051               BREQ    ??ExtRS485Ctl_34
   \   0000024A   5104               SUBI    R16, 20
   \   0000024C   F429               BRNE    ??CrossCallReturnLabel_1
   \   0000024E   2322               TST     R18
   \   00000250   F419               BRNE    ??CrossCallReturnLabel_1
   \   00000252   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_252:
   \   00000254   F409               BRNE    ??CrossCallReturnLabel_1
   \   00000256   ....               RCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_1:
   \   00000258   E001               LDI     R16, 1
   \   0000025A   ....               RCALL   Uart_BuildReqRadarData
   \   0000025C   C04A               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_34:
   \   0000025E   E001               LDI     R16, 1
   \   00000260   ....               RCALL   Uart_BuildReqRadarInfo
   \   00000262   C047               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_26:
   \   00000264   9100....           LDS     R16, (TData + 1348)
   \   00000268   3001               CPI     R16, 1
   \   0000026A   F479               BRNE    ??ExtRS485Ctl_35
   \   0000026C   9100....           LDS     R16, (TData + 1349)
   \   00000270   E010               LDI     R17, 0
   \   00000272   91E0....           LDS     R30, PortPair
   \   00000276   E0F0               LDI     R31, 0
   \   00000278   9634               ADIW    R31:R30, 4
   \   0000027A   170E               CP      R16, R30
   \   0000027C   071F               CPC     R17, R31
   \   0000027E   F429               BRNE    ??ExtRS485Ctl_35
   \   00000280   E001               LDI     R16, 1
   \   00000282   ....               RCALL   Uart_BuildSndData
   \   00000284   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_214:
   \   00000286   E000               LDI     R16, 0
   \   00000288   C001               RJMP    ??ExtRS485Ctl_36
   \                     ??ExtRS485Ctl_35:
   \   0000028A   E001               LDI     R16, 1
   \                     ??ExtRS485Ctl_36:
   \   0000028C   2044               TST     R4
   \   0000028E   F419               BRNE    ??ExtRS485Ctl_37
   \   00000290   E001               LDI     R16, 1
   \   00000292   ....               RCALL   Uart_BuildReqCardStatus
   \   00000294   C02E               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_37:
   \   00000296   E015               LDI     R17, 5
   \   00000298   1641               CP      R4, R17
   \   0000029A   F419               BRNE    ??ExtRS485Ctl_38
   \   0000029C   E001               LDI     R16, 1
   \   0000029E   ....               RCALL   Uart_BuildReqR16552
   \   000002A0   C028               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_38:
   \   000002A2   E01A               LDI     R17, 10
   \   000002A4   1641               CP      R4, R17
   \   000002A6   F411               BRNE    ??ExtRS485Ctl_39
   \   000002A8   ....               RCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_213:
   \   000002AA   C023               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_39:
   \   000002AC   E01F               LDI     R17, 15
   \   000002AE   1641               CP      R4, R17
   \   000002B0   F419               BRNE    ??ExtRS485Ctl_40
   \   000002B2   E001               LDI     R16, 1
   \   000002B4   ....               RCALL   Uart_BuildReqC16552
   \   000002B6   C01D               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_40:
   \   000002B8   E114               LDI     R17, 20
   \   000002BA   1641               CP      R4, R17
   \   000002BC   F4B1               BRNE    ??ExtRS485Ctl_41
   \   000002BE   9110....           LDS     R17, (TData + 1478)
   \   000002C2   2311               TST     R17
   \   000002C4   F491               BRNE    ??ExtRS485Ctl_41
   \   000002C6   9110....           LDS     R17, (TData + 1531)
   \   000002CA   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_124:
   \   000002CC   1712               CP      R17, R18
   \   000002CE   F469               BRNE    ??ExtRS485Ctl_41
   \   000002D0   E001               LDI     R16, 1
   \   000002D2   ....               RCALL   Uart_BuildReqEEPROMData
   \   000002D4   ....               LDI     R30, ((TData + 249) & 0xff) & 0xFF
   \   000002D6   ....               LDI     R31, (((TData + 1529) >> 8) & 0xff) & 0xFF
   \   000002D8   ....               RCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_7:
   \   000002DA   F058               BRCS    ??ExtRS485Ctl_29
   \   000002DC   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_196:
   \   000002DE   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   000002E0   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \   000002E2   ....               RCALL   ??Subroutine131_0
   \                     ??CrossCallReturnLabel_254:
   \   000002E4   F030               BRCS    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_33:
   \   000002E6   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_197:
   \   000002E8   C004               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_41:
   \   000002EA   FB00               BST     R16, 0
   \   000002EC   F416               BRTC    ??ExtRS485Ctl_29
   \   000002EE   E001               LDI     R16, 1
   \   000002F0   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_29:
   \   000002F2   E001               LDI     R16, 1
   \   000002F4   ....               RCALL   Uart_BuildTail16552
   \   000002F6   CEC3               RJMP    ??CrossCallReturnLabel_0
   \   000002F8                      REQUIRE _A_PORTC
   \   000002F8                      REQUIRE _A_PORTE
    258              }
    259          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine64:
   \   00000000   2D04               MOV     R16, R4
   \   00000002   2044               TST     R4
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   9140....           LDS     R20, PortPair
   \   00000004   0F44               LSL     R20
   \   00000006   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_172:
   \   00000008   7003               ANDI    R16, 0x03
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   9100....           LDS     R16, (TData + 1531)
   \   00000004                      REQUIRE ??Subroutine130_0
   \   00000004                      ;               // Fall through to label ??Subroutine130_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine130_0:
   \   00000000   9110....           LDS     R17, PortPair
   \   00000004   1701               CP      R16, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   E840               LDI     R20, 128
   \   00000002   E255               LDI     R21, 37
   \   00000004   E060               LDI     R22, 0
   \   00000006   E070               LDI     R23, 0
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine94:
   \   00000000   9100....           LDS     R16, (OS_Counters + 1)
   \   00000004   2300               TST     R16
   \   00000006   F409               BRNE    ??Subroutine94_0
   \   00000008   9478               SEI
   \                     ??Subroutine94_0:
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   E001               LDI     R16, 1
   \   00000002                      REQUIRE ?Subroutine120
   \   00000002                      ;               // Fall through to label ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine120:
   \   00000000   ....               RJMP    Uart_BuildReqConfig

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RJMP    ?Subroutine115

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RJMP    ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           JMP     ReadEEPROMByte

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   8100               LD      R16, Z
   \   00000002   5F0E               SUBI    R16, 254
   \   00000004   8300               ST      Z, R16
   \   00000006   300F               CPI     R16, 15
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   ....               LDI     R30, ((TData + 250) & 0xff) & 0xFF
   \   00000002   ....               LDI     R31, (((TData + 1530) >> 8) & 0xff) & 0xFF
   \   00000004                      REQUIRE ??Subroutine131_0
   \   00000004                      ;               // Fall through to label ??Subroutine131_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine131_0:
   \   00000000   8100               LD      R16, Z
   \   00000002   9503               INC     R16
   \   00000004   8300               ST      Z, R16
   \   00000006   3004               CPI     R16, 4
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   00000002   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \                     ??Subroutine2_0:
   \   00000004   9503               INC     R16
   \   00000006   8300               ST      Z, R16
   \   00000008   3004               CPI     R16, 4
   \   0000000A   F010               BRCS    ??Subroutine2_1
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   8300               ST      Z, R16
   \                     ??Subroutine2_1:
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   94F8               CLI
   \   00000002                      REQUIRE ?Subroutine114
   \   00000002                      ;               // Fall through to label ?Subroutine114

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine114:
   \   00000000   9140....           LDS     R20, PortPair
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   ........           JMP     OS_Delay

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   E006               LDI     R16, 6
   \   00000002   E010               LDI     R17, 0
   \   00000004                      REQUIRE ??Subroutine132_0
   \   00000004                      ;               // Fall through to label ??Subroutine132_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine132_0:
   \   00000000   ....               LDI     R30, LOW(UART16552)
   \   00000002   ....               LDI     R31, (UART16552) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_193:
   \   00000002                      REQUIRE ?Subroutine110
   \   00000002                      ;               // Fall through to label ?Subroutine110

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine110:
   \   00000000   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_173:
   \   00000002   7001               ANDI    R16, 0x01
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   ........           JMP     ?SS_SHR_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_192:
   \   00000002   5F4C               SUBI    R20, 252
   \   00000004   ....               RJMP    ?Subroutine110

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine90:
   \   00000000   9100....           LDS     R16, TData
   \   00000004   E010               LDI     R17, 0
   \   00000006   ....               RJMP    ?Subroutine114

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine91:
   \   00000000   9120....           LDS     R18, PortPair
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   ........           JMP     ?PROLOGUE6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine107:
   \   00000000   9100....           LDS     R16, PortPair
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   E001               LDI     R16, 1
   \   00000002                      REQUIRE ?Subroutine79
   \   00000002                      ;               // Fall through to label ?Subroutine79

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine79:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           JMP     ?S_SHL_L02
    260          
    261          
    262          /*************************************************************************
    263          *   (This is a task)
    264          *  Usart handler UART receive data
    265          *
    266          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    267          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   ....               RCALL   ?Subroutine43
    268          
    269              char portresp;
    270          
    271              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \                     ??CrossCallReturnLabel_43:
   \   00000002   E900               LDI     R16, 144
   \   00000004   E11A               LDI     R17, 26
   \   00000006   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_58:
   \   00000008   C026               RJMP    ??CrossCallReturnLabel_135
    272          
    273              while (1) {
    274                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
    275                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
    276                  if (portresp & 0x01) {                  // answer on ch 0
    277                      Usart16552CheckPackage(0);         // handle incomming package
    278                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
    279                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
    280                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
    281                  } else {
    282                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
    283                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
    284                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
    285                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
    286                      }
    287                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
    288                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
    289                              ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    290                              OS_SignalEvent(2, &TCB_RS485Ctl);
    291                          }
    292                      }
    293                  }
    294                  if (portresp & 0x02) {                  // answer on ch 1
    295                      Usart16552CheckPackage(1);         // handle incomming package
    296                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
    297                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
    298                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
    299                  } else {
    300                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_0:
   \   0000000A   ....               RCALL   ??Subroutine132_0
   \                     ??CrossCallReturnLabel_258:
   \   0000000C   A902               LDD     R16, Z+50
   \   0000000E   9503               INC     R16
   \   00000010   AB02               STD     Z+50, R16
    301                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   00000012   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_71:
   \   00000014   8D05               LDD     R16, Z+29
   \   00000016   8D16               LDD     R17, Z+30
   \   00000018   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_51:
   \   0000001A   8F05               STD     Z+29, R16
   \   0000001C   8F16               STD     Z+30, R17
    302                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   0000001E   ....               RCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_141:
   \   00000020   8D03               LDD     R16, Z+27
   \   00000022   8D14               LDD     R17, Z+28
   \   00000024   01C8               MOVW    R25:R24, R17:R16
   \   00000026   9601               ADIW    R25:R24, 1
   \   00000028   8F83               STD     Z+27, R24
   \   0000002A   8F94               STD     Z+28, R25
   \   0000002C   3006               CPI     R16, 6
   \   0000002E   4010               SBCI    R17, 0
   \   00000030   F020               BRCS    ??ExtRS485Rec_1
    303                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   00000032   ....               RCALL   ?Subroutine37
    304                      }
   \                     ??CrossCallReturnLabel_36:
   \   00000034   8107               LDD     R16, Z+7
   \   00000036   6001               ORI     R16, 0x01
   \   00000038   8307               STD     Z+7, R16
    305                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_1:
   \   0000003A   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_169:
   \   0000003C   F041               BREQ    ??CrossCallReturnLabel_133
    306                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   0000003E   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_72:
   \   00000040   8D03               LDD     R16, Z+27
   \   00000042   7007               ANDI    R16, 0x07
   \   00000044   3004               CPI     R16, 4
   \   00000046   F419               BRNE    ??CrossCallReturnLabel_133
    307                              ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
   \   00000048   ....               RCALL   ?Subroutine56
    308                              OS_SignalEvent(2, &TCB_RS485Ctl);
    309                          }
    310                      }
    311                  }
   \                     ??CrossCallReturnLabel_190:
   \   0000004A   5F4C               SUBI    R20, 252
   \   0000004C   ....               RCALL   ?Subroutine15
    312                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??CrossCallReturnLabel_133:
   \   0000004E   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000050   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000052   E001               LDI     R16, 1
   \   00000054   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_135:
   \   00000056   EF03               LDI     R16, 243
   \   00000058   E011               LDI     R17, 1
   \   0000005A   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_57:
   \   0000005C   E021               LDI     R18, 1
   \   0000005E   E030               LDI     R19, 0
   \   00000060   E003               LDI     R16, 3
   \   00000062   ........           CALL    OS_WaitEventTimed
   \   00000066   2F80               MOV     R24, R16
   \   00000068   FB00               BST     R16, 0
   \   0000006A   F466               BRTC    ??ExtRS485Rec_2
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_22:
   \   00000070   8703               STD     Z+11, R16
   \   00000072   8704               STD     Z+12, R16
   \   00000074   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_156:
   \   00000076   ....               RCALL   ??Subroutine136_0
   \                     ??CrossCallReturnLabel_290:
   \   00000078   8103               LDD     R16, Z+3
   \   0000007A   7F0E               ANDI    R16, 0xFE
   \   0000007C   8303               STD     Z+3, R16
   \   0000007E   9310....           STS     (UART16552 + 24), R17
   \   00000082   C021               RJMP    ??CrossCallReturnLabel_134
   \                     ??ExtRS485Rec_2:
   \   00000084   ....               RCALL   ??Subroutine132_0
   \                     ??CrossCallReturnLabel_259:
   \   00000086   8D00               LDD     R16, Z+24
   \   00000088   9503               INC     R16
   \   0000008A   8F00               STD     Z+24, R16
   \   0000008C   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_73:
   \   0000008E   8505               LDD     R16, Z+13
   \   00000090   8516               LDD     R17, Z+14
   \   00000092   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_52:
   \   00000094   8705               STD     Z+13, R16
   \   00000096   8716               STD     Z+14, R17
   \   00000098   ....               RCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_142:
   \   0000009A   8503               LDD     R16, Z+11
   \   0000009C   8514               LDD     R17, Z+12
   \   0000009E   01D8               MOVW    R27:R26, R17:R16
   \   000000A0   9611               ADIW    R27:R26, 1
   \   000000A2   87A3               STD     Z+11, R26
   \   000000A4   87B4               STD     Z+12, R27
   \   000000A6   3006               CPI     R16, 6
   \   000000A8   4010               SBCI    R17, 0
   \   000000AA   F020               BRCS    ??ExtRS485Rec_3
   \   000000AC   ....               RCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_37:
   \   000000AE   8103               LDD     R16, Z+3
   \   000000B0   6001               ORI     R16, 0x01
   \   000000B2   8303               STD     Z+3, R16
   \                     ??ExtRS485Rec_3:
   \   000000B4   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_171:
   \   000000B6   F039               BREQ    ??CrossCallReturnLabel_134
   \   000000B8   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_74:
   \   000000BA   8503               LDD     R16, Z+11
   \   000000BC   7007               ANDI    R16, 0x07
   \   000000BE   3004               CPI     R16, 4
   \   000000C0   F411               BRNE    ??CrossCallReturnLabel_134
   \   000000C2   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_191:
   \   000000C4   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_134:
   \   000000C6   FB81               BST     R24, 1
   \   000000C8   F00E               BRTS    $+2+2
   \   000000CA   CF9F               RJMP    ??ExtRS485Rec_0
   \   000000CC   E001               LDI     R16, 1
   \   000000CE   ....               RCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_21:
   \   000000D0   8F03               STD     Z+27, R16
   \   000000D2   8F04               STD     Z+28, R16
   \   000000D4   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_157:
   \   000000D6   ....               RCALL   ??Subroutine136_0
   \                     ??CrossCallReturnLabel_291:
   \   000000D8   8107               LDD     R16, Z+7
   \   000000DA   7F0E               ANDI    R16, 0xFE
   \   000000DC   8307               STD     Z+7, R16
   \   000000DE   9310....           STS     (UART16552 + 50), R17
   \   000000E2   CFB5               RJMP    ??CrossCallReturnLabel_133
   \   000000E4                      REQUIRE _A_PORTC
    313              }
    314          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine60:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_137:
   \   00000002   ....               LDI     R30, LOW(TData)
   \   00000004   ....               LDI     R31, (TData) >> 8
   \   00000006                      REQUIRE ?Subroutine98
   \   00000006                      ;               // Fall through to label ?Subroutine98

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine98:
   \   00000000   0DE0               ADD     R30, R0
   \   00000002   1DF1               ADC     R31, R1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine58:
   \   00000000   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_136:
   \   00000002   ....               RJMP    ??Subroutine138_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_167:
   \   00000002   E014               LDI     R17, 4
   \   00000004   9F01               MUL     R16, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   5F0F               SUBI    R16, 255
   \   00000002   4F1F               SBCI    R17, 255
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_162:
   \   00000002   E0F0               LDI     R31, 0
   \   00000004   2FE0               MOV     R30, R16
   \   00000006   ....               RJMP    ?Subroutine108

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   ....               RCALL   Usart16552CheckPackage
   \   00000002   E000               LDI     R16, 0
   \   00000004   E010               LDI     R17, 0
   \   00000006   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_126:
   \   00000008   E034               LDI     R19, 4
   \   0000000A   9F23               MUL     R18, R19
   \   0000000C   ....               RJMP    ??Subroutine138_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_114:
   \   00000004   9500               COM     R16
   \   00000006   B315               IN      R17, 0x15
   \   00000008   2310               AND     R17, R16
   \   0000000A   BB15               OUT     0x15, R17
   \   0000000C   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_131:
   \   0000000E   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000010   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000012   E002               LDI     R16, 2
   \   00000014                      REQUIRE ?Subroutine95
   \   00000014                      ;               // Fall through to label ?Subroutine95

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   ........           JMP     OS_SignalEvent

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine136_0:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002                      REQUIRE ?Subroutine108
   \   00000002                      ;               // Fall through to label ?Subroutine108

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine108:
   \   00000000   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000002   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   ........           JMP     ?PROLOGUE4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine138_0:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002   ....               RJMP    ?Subroutine108
    315          
    316          /*************************************************************************
    317          *
    318          *  Set ports on or off
    319          *
    320          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    321          void SetRS4Port(void) {
   \                     SetRS4Port:
    322          
    323              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   BB05               OUT     0x15, R16
    324          
    325          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    326          
    327          /*************************************************************************
    328          *
    329          *  Check the incoming packages from AN_SGCNV / WIS
    330          *
    331          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E14A               LDI     R20, 26
   \   00000004                      REQUIRE ??Subroutine125_0
   \   00000004                      ;               // Fall through to label ??Subroutine125_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine125_0:
   \   00000000   E050               LDI     R21, 0
   \   00000002   ....               RJMP    ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
    332          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_86:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   2E40               MOV     R4, R16
    333          
    334              unsigned short pointer;
    335              char count_out, more;
    336          
    337              count_out = MAX_PROT_CMD;                  // max command
   \   00000004   2466               CLR     R6
   \   00000006   946A               DEC     R6
    338              more = true;
   \   00000008   2455               CLR     R5
   \   0000000A   9453               INC     R5
    339              pointer = 4;
   \   0000000C   E084               LDI     R24, 4
   \   0000000E   E090               LDI     R25, 0
   \   00000010   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_220:
   \   00000012   ....               RCALL   ?Subroutine44
    340              do {
    341                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??CrossCallReturnLabel_300:
   \   00000014   019C               MOVW    R19:R18, R25:R24
   \   00000016   2D04               MOV     R16, R4
   \   00000018   ....               RCALL   CheckActionUart16552
   \   0000001A   2300               TST     R16
   \   0000001C   F409               BRNE    ??Usart16552CheckPackage_0
    342                      more = false;                          // terminate while loop
   \   0000001E   2455               CLR     R5
    343                  }
    344                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_0:
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   8502               LDD     R16, Z+10
   \   00000024   8513               LDD     R17, Z+11
   \   00000026   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_33:
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   81E1               LDD     R30, Z+1
   \   0000002C   E0F0               LDI     R31, 0
   \   0000002E   9632               ADIW    R31:R30, 2
   \   00000030   0F8E               ADD     R24, R30
   \   00000032   1F9F               ADC     R25, R31
    345                  if (!--count_out) {
   \   00000034   946A               DEC     R6
   \   00000036   F051               BREQ    ??Usart16552CheckPackage_1
    346                      more = false;
    347                  }
    348              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \   00000038   2055               TST     R5
   \   0000003A   F041               BREQ    ??Usart16552CheckPackage_1
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   8906               LDD     R16, Z+22
   \   00000040   8917               LDD     R17, Z+23
   \   00000042   5003               SUBI    R16, 3
   \   00000044   4010               SBCI    R17, 0
   \   00000046   1780               CP      R24, R16
   \   00000048   0791               CPC     R25, R17
   \   0000004A   F320               BRCS    ??CrossCallReturnLabel_300
    349              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_1:
   \   0000004C   2D04               MOV     R16, R4
   \   0000004E   ....               RCALL   ?Subroutine51
    350          }
   \                     ??CrossCallReturnLabel_62:
   \   00000050                      REQUIRE ?Subroutine121
   \   00000050                      ;               // Fall through to label ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine121:
   \   00000000   E0E7               LDI     R30, 7
   \   00000002   ........           JMP     ?EPILOGUE_B7_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   ....               RJMP    GoToSyncUART16552

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   0F08               ADD     R16, R24
   \   00000002   1F19               ADC     R17, R25
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine65:
   \   00000000   ........           JMP     ?PROLOGUE7_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   ....               LDI     R26, LOW(UART16552)
   \   00000002   ....               LDI     R27, (UART16552) >> 8
   \   00000004                      REQUIRE ??Subroutine139_0
   \   00000004                      ;               // Fall through to label ??Subroutine139_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine139_0:
   \   00000000   0FA0               ADD     R26, R16
   \   00000002   1FB1               ADC     R27, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   ........           JMP     ?S_EC_MUL_L02
    351          
    352          /*************************************************************************
    353          *
    354          *  Check action on received data from AN_SGCNV
    355          *
    356          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    357          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_45:
   \   00000002   2FA0               MOV     R26, R16
    358          
    359              char retval = true;
   \   00000004   E0B1               LDI     R27, 1
    360          
    361              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   9602               ADIW    R25:R24, 2
   \   0000000A   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_201:
   \   0000000C   8100               LD      R16, Z
   \   0000000E   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000010   ....               LDI     R31, (`?<Jumptable for CheckActionUart16552>_0`) >> 16
   \   00000012   BFFB               OUT     0x3B, R31
   \   00000014   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000016   ........           JMP     ?CV_SWITCH_L06
    362          
    363              case ANP1_REP_MP_DATA :                              // Measured pressure data
    364              case ANP1_REP_MT_DATA :                              // Measured temperature data
    365              case ANP1_REP_MO_DATA :                              // Measured "other" data
    366                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_0:
   \   0000001A   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_89:
   \   0000001C   ....               RCALL   ReceivePTOData
    367                  break;
   \   0000001E   C022               RJMP    ??CheckActionUart16552_1
    368              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    369                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_2:
   \   00000020   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_90:
   \   00000022   ....               RCALL   ReceiveWHData
    370                  break;
   \   00000024   C01F               RJMP    ??CheckActionUart16552_1
    371              case ANP1_REP_RP_DATA :                              // Raw pressure data
    372              case ANP1_REP_RT_DATA :                              // Raw temp. data
    373              case ANP1_REP_RO_DATA :                              // Raw "other" data
    374                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_3:
   \   00000026   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_91:
   \   00000028   ....               RCALL   ReceiveRData
    375                  break;
   \   0000002A   C01C               RJMP    ??CheckActionUart16552_1
    376              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    377                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_4:
   \   0000002C   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_92:
   \   0000002E   ....               RCALL   ReceiveCData
    378                  break;
   \   00000030   C019               RJMP    ??CheckActionUart16552_1
    379          
    380              case ANP1_REP_CARD_STAT :                             // card status package
    381                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_5:
   \   00000032   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_93:
   \   00000034   ....               RCALL   ReceiveCardStatus
    382                  break;
   \   00000036   C016               RJMP    ??CheckActionUart16552_1
    383          
    384              case ANP1_REP_CONFIG :                             // config data
    385                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_6:
   \   00000038   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_94:
   \   0000003A   ....               RCALL   ReceiveConfigData
    386                  break;
   \   0000003C   C013               RJMP    ??CheckActionUart16552_1
    387          
    388              case ANP1_REP_EEP_DATA :                             // card eeprome
    389                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_7:
   \   0000003E   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_95:
   \   00000040   ....               RCALL   ReceiveCardEEPROMData
    390                  break;
   \   00000042   C010               RJMP    ??CheckActionUart16552_1
    391          
    392              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    393                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_8:
   \   00000044   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_96:
   \   00000046   ....               RCALL   ReceiveWISStatus
    394                  break;
   \   00000048   C00D               RJMP    ??CheckActionUart16552_1
    395          
    396              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    397                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_9:
   \   0000004A   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_97:
   \   0000004C   ....               RCALL   ReceiveWISXData
    398                  break;
   \   0000004E   C00A               RJMP    ??CheckActionUart16552_1
    399          
    400              case ANP1_REP_WIS_DATA :                             // Data from WIS
    401                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_10:
   \   00000050   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_98:
   \   00000052   ....               RCALL   ReceiveWISData
    402                  break;
   \   00000054   C007               RJMP    ??CheckActionUart16552_1
    403              case ANP1_REP_GODA_DATA:
    404                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_11:
   \   00000056   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_99:
   \   00000058   ....               RCALL   ReceiveRadarData
    405                  break;
   \   0000005A   C004               RJMP    ??CheckActionUart16552_1
    406              case ANP1_REP_GODA_INFO:
    407                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_12:
   \   0000005C   ....               RCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_100:
   \   0000005E   ....               RCALL   ReceiveRadarInfo
    408                  break;
   \   00000060   C001               RJMP    ??CheckActionUart16552_1
    409              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    410              case ANP1_ECMD_NMDWOACK :                         // No more data
    411                  retval = false;
   \                     ??CheckActionUart16552_13:
   \   00000062   E0B0               LDI     R27, 0
    412                  break;
    413              }
    414              return retval;
   \                     ??CheckActionUart16552_1:
   \   00000064   2F0B               MOV     R16, R27
   \   00000066                      REQUIRE ?Subroutine118
   \   00000066                      ;               // Fall through to label ?Subroutine118
    415          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine66:
   \   00000000   019C               MOVW    R19:R18, R25:R24
   \   00000002   2F0A               MOV     R16, R26
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_282:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_154:
   \   00000006   ....               RJMP    ?Subroutine117

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000002   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000004                      REQUIRE ?Subroutine105
   \   00000004                      ;               // Fall through to label ?Subroutine105

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine105:
   \   00000000   8502               LDD     R16, Z+10
   \   00000002   8513               LDD     R17, Z+11
   \   00000004   0F02               ADD     R16, R18
   \   00000006   1F13               ADC     R17, R19
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   E010               LDI     R17, 0
   \   00000002                      REQUIRE ?Subroutine100
   \   00000002                      ;               // Fall through to label ?Subroutine100

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine100:
   \   00000000   E14A               LDI     R20, 26
   \   00000002   E050               LDI     R21, 0
   \   00000004                      REQUIRE ?Subroutine124
   \   00000004                      ;               // Fall through to label ?Subroutine124
    416          
    417          /*************************************************************************
    418          *
    419          *  Receive card status from WIS
    420          *
    421          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine128_0:
   \   00000000   0FA2               ADD     R26, R18
   \   00000002   1FB3               ADC     R27, R19
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine133_0:
   \   00000000   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_276:
   \   00000002   85A2               LDD     R26, Z+10
   \   00000004   85B3               LDD     R27, Z+11
   \   00000006   ....               RCALL   ??Subroutine128_0
   \                     ??CrossCallReturnLabel_268:
   \   00000008   E004               LDI     R16, 4
   \   0000000A   9F60               MUL     R22, R16
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine74:
   \   00000000   E010               LDI     R17, 0
   \   00000002                      REQUIRE ?Subroutine104
   \   00000002                      REQUIRE ??Subroutine134_0
   \   00000002                      ;               // Fall through to label ??Subroutine134_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine134_0:
   \   00000000   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_284:
   \   00000002                      REQUIRE ?Subroutine104
   \   00000002                      ;               // Fall through to label ?Subroutine104

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine104:
   \   00000000   ....               LDI     R30, LOW(UART16552)
   \   00000002   ....               LDI     R31, (UART16552) >> 8
   \   00000004                      REQUIRE ?Subroutine113
   \   00000004                      ;               // Fall through to label ?Subroutine113

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    422          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   2E3B               MOV     R3, R27
   \   00000002   2F7A               MOV     R23, R26
   \   00000004   2F60               MOV     R22, R16
    423          
    424              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000006   9020....           LDS     R2, PortPair
   \   0000000A   ....               RCALL   ??Subroutine133_0
   \                     ??CrossCallReturnLabel_262:
   \   0000000C   912C               LD      R18, X
   \   0000000E   0180               MOVW    R17:R16, R1:R0
   \   00000010   0D02               ADD     R16, R2
   \   00000012   ....               RCALL   ??Subroutine135_0
   \                     ??CrossCallReturnLabel_293:
   \   00000014   A503               LDD     R16, Z+43
   \   00000016   2B02               OR      R16, R18
   \   00000018   A703               STD     Z+43, R16
    425              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8141               LDD     R20, Z+1
   \   0000001E   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_294:
   \   00000020   AB43               STD     Z+51, R20
    426              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   8104               LDD     R16, Z+4
   \   00000026   2300               TST     R16
   \   00000028   F021               BREQ    ??ReceiveWISStatus_0
    427                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   0000002A   ....               RCALL   ?Subroutine61
    428              }
   \                     ??CrossCallReturnLabel_287:
   \   0000002C   A903               LDD     R16, Z+51
   \   0000002E   6800               ORI     R16, 0x80
   \   00000030   AB03               STD     Z+51, R16
    429          }
   \                     ??ReceiveWISStatus_0:
   \   00000032   2FA7               MOV     R26, R23
   \   00000034   2DB3               MOV     R27, R3
   \   00000036   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_127:
   \   00000002   0180               MOVW    R17:R16, R1:R0
   \   00000004   0F02               ADD     R16, R18
   \   00000006                      REQUIRE ?Subroutine108
   \   00000006                      REQUIRE ??Subroutine135_0
   \   00000006                      ;               // Fall through to label ??Subroutine135_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine135_0:
   \   00000000   1F15               ADC     R17, R21
   \   00000002                      REQUIRE ?Subroutine108
   \   00000002                      REQUIRE ??Subroutine136_0
   \   00000002                      ;               // Fall through to label ??Subroutine136_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine61:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_164:
   \   00000002   0E00               ADD     R0, R16
   \   00000004                      REQUIRE ?Subroutine93
   \   00000004                      ;               // Fall through to label ?Subroutine93

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine93:
   \   00000000   1E15               ADC     R1, R21
   \   00000002                      REQUIRE ??Subroutine138_0
   \   00000002                      ;               // Fall through to label ??Subroutine138_0
    430          
    431          /*************************************************************************
    432          *
    433          *  Receive WIS protocol data
    434          *
    435          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine116:
   \   00000000   9199               LD      R25, Y+
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   0F40               ADD     R20, R16
   \   00000002   1F51               ADC     R21, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    436          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   939A               ST      -Y, R25
   \   00000002   2E38               MOV     R3, R24
   \   00000004   2E20               MOV     R2, R16
    437          
    438              char i;
    439          
    440              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000006   01B9               MOVW    R23:R22, R19:R18
   \   00000008   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_103:
   \   0000000A   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_11:
   \   0000000C   8582               LDD     R24, Z+10
   \   0000000E   8593               LDD     R25, Z+11
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   0FE6               ADD     R30, R22
   \   00000014   1FF7               ADC     R31, R23
   \   00000016   8100               LD      R16, Z
   \   00000018   3703               CPI     R16, 115
   \   0000001A   F4E9               BRNE    ??ReceiveWISXData_0
    441              case 115:                                     // Serial number
    442                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   0000001C   2D02               MOV     R16, R2
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E342               LDI     R20, 50
   \   00000022   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_280:
   \   00000024   ....               LDI     R20, LOW(TData)
   \   00000026   ....               LDI     R21, (TData) >> 8
   \   00000028   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_181:
   \   0000002A   01FA               MOVW    R31:R30, R21:R20
   \   0000002C   ....               RCALL   ?Subroutine71
    443                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \                     ??CrossCallReturnLabel_198:
   \   0000002E   0C22               LSL     R2
   \   00000030   0C22               LSL     R2
   \   00000032   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_158:
   \   00000034   0E20               ADD     R2, R16
   \   00000036   8221               STD     Z+1, R2
    444                  for (i = 2; i < (4 + 2); i++) {
   \   00000038   E002               LDI     R16, 2
   \   0000003A   E010               LDI     R17, 0
    445                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveWISXData_1:
   \   0000003C   01FC               MOVW    R31:R30, R25:R24
   \   0000003E   0FE2               ADD     R30, R18
   \   00000040   1FF3               ADC     R31, R19
   \   00000042   8160               LD      R22, Z
   \   00000044   01FA               MOVW    R31:R30, R21:R20
   \   00000046   ....               RCALL   ?Subroutine113
    446                  }
   \                     ??CrossCallReturnLabel_271:
   \   00000048   56EC               SUBI    R30, 108
   \   0000004A   4FFA               SBCI    R31, 250
   \   0000004C   8360               ST      Z, R22
   \   0000004E   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_104:
   \   00000050   9503               INC     R16
   \   00000052   3006               CPI     R16, 6
   \   00000054   F398               BRCS    ??ReceiveWISXData_1
    447                  break;
    448              default:
    449                  break;
    450              }
    451          }
   \                     ??ReceiveWISXData_0:
   \   00000056   2D83               MOV     R24, R3
   \   00000058   ....               RJMP    ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ....               RJMP    ??Subroutine134_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine71:
   \   00000000   56EC               SUBI    R30, 108
   \   00000002   4FFA               SBCI    R31, 250
   \   00000004   E001               LDI     R16, 1
   \   00000006   ....               RJMP    ?Subroutine115

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine69:
   \   00000000   5F2F               SUBI    R18, 255
   \   00000002   4F3F               SBCI    R19, 255
   \   00000004   9508               RET
    452          
    453          /*************************************************************************
    454          *
    455          *  Receive measured data from WIS
    456          *
    457          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    458          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_65:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_264:
   \   00000004   01C0               MOVW    R25:R24, R1:R0
   \   00000006   910C               LD      R16, X
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   E030               LDI     R19, 0
   \   0000000E   ........           CALL    ?UL2F_L04
   \   00000012   0128               MOVW    R5:R4, R17:R16
   \   00000014   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_77:
   \   00000016   2F48               MOV     R20, R24
   \   00000018   0F40               ADD     R20, R16
   \   0000001A   1D51               ADC     R21, R1
   \   0000001C   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_177:
   \   0000001E   8322               STD     Z+2, R18
   \   00000020   8333               STD     Z+3, R19
    459          
    460              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
    461              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    462                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   8111               LDD     R17, Z+1
   \   00000026   8102               LDD     R16, Z+2
   \   00000028   2F21               MOV     R18, R17
   \   0000002A   0F22               LSL     R18
   \   0000002C   0B22               SBC     R18, R18
   \   0000002E   2F32               MOV     R19, R18
   \   00000030   ........           CALL    ?SL2F_L04
   \   00000034   E040               LDI     R20, 0
   \   00000036   E050               LDI     R21, 0
   \   00000038   E260               LDI     R22, 32
   \   0000003A   E471               LDI     R23, 65
   \   0000003C   ........           CALL    ?F_DIV_L04
   \   00000040   0128               MOVW    R5:R4, R17:R16
   \   00000042   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_182:
   \   00000044   E308               LDI     R16, 56
   \   00000046   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_202:
   \   00000048   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_179:
   \   0000004A   8322               STD     Z+2, R18
   \   0000004C   8333               STD     Z+3, R19
    463              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   8123               LDD     R18, Z+3
   \   00000052   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_183:
   \   00000054   E00E               LDI     R16, 14
   \   00000056   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_203:
   \   00000058   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_289:
   \   0000005A   AF23               STD     Z+59, R18
    464              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   0000005C   E020               LDI     R18, 0
   \   0000005E   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_78:
   \   00000060   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_34:
   \   00000062   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_16:
   \   00000064   8320               ST      Z, R18
    465          }
   \   00000066                      REQUIRE ?Subroutine123
   \   00000066                      ;               // Fall through to label ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine123:
   \   00000000   E0E6               LDI     R30, 6
   \   00000002   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine68:
   \   00000000   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   00000002   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   00000004                      REQUIRE ?Subroutine111
   \   00000004                      ;               // Fall through to label ?Subroutine111

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine111:
   \   00000000   8240               ST      Z, R4
   \   00000002   8251               STD     Z+1, R5
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine59:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_163:
   \   00000002   E010               LDI     R17, 0
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   E308               LDI     R16, 56
   \   00000002   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_206:
   \   00000004   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000006   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   00000008   ....               RJMP    ?Subroutine111

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_165:
   \   00000002   E010               LDI     R17, 0
   \   00000004   01AC               MOVW    R21:R20, R25:R24
   \   00000006                      REQUIRE ?Subroutine112
   \   00000006                      ;               // Fall through to label ?Subroutine112

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   E04E               LDI     R20, 14
   \   00000002   E050               LDI     R21, 0
   \   00000004   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_205:
   \   00000006   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   00000008   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   2F60               MOV     R22, R16
   \   00000002                      REQUIRE ??Subroutine133_0
   \   00000002                      ;               // Fall through to label ??Subroutine133_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine87:
   \   00000000   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_281:
   \   00000002                      REQUIRE ?Subroutine117
   \   00000002                      ;               // Fall through to label ?Subroutine117
    466          
    467          
    468          /*************************************************************************
    469          *
    470          *  Receive measured data from Radar
    471          *
    472          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    473          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_263:
   \   00000006   0190               MOVW    R19:R18, R1:R0
   \   00000008   904D               LD      R4, X+
   \   0000000A   905D               LD      R5, X+
   \   0000000C   906D               LD      R6, X+
   \   0000000E   907C               LD      R7, X
   \   00000010   9713               SBIW    R27:R26, 3
   \   00000012   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_75:
   \   00000014   01A0               MOVW    R21:R20, R1:R0
   \   00000016   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_180:
   \   00000018   ....               RCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_176:
   \   0000001A   8262               STD     Z+2, R6
   \   0000001C   8273               STD     Z+3, R7
    474              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
    475              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
    476          
    477              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
    478              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8044               LDD     R4, Z+4
   \   00000022   8055               LDD     R5, Z+5
   \   00000024   8066               LDD     R6, Z+6
   \   00000026   8077               LDD     R7, Z+7
   \   00000028   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_23:
   \   0000002A   01F8               MOVW    R31:R30, R17:R16
   \   0000002C   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_178:
   \   0000002E   8262               STD     Z+2, R6
   \   00000030   8273               STD     Z+3, R7
    479              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   00000032   01FD               MOVW    R31:R30, R27:R26
   \   00000034   8560               LDD     R22, Z+8
   \   00000036   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_25:
   \   00000038   ....               RCALL   ??Subroutine136_0
   \                     ??CrossCallReturnLabel_292:
   \   0000003A   AF63               STD     Z+59, R22
    480              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   8561               LDD     R22, Z+9
   \   00000040   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_76:
   \   00000042   0F02               ADD     R16, R18
   \   00000044   1F13               ADC     R17, R19
   \   00000046   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_15:
   \   00000048   8360               ST      Z, R22
    481          }
   \   0000004A                      REQUIRE ?Subroutine122
   \   0000004A                      ;               // Fall through to label ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   E0E8               LDI     R30, 8
   \   00000002   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_186:
   \   00000002   E00E               LDI     R16, 14
   \   00000004   ....               RJMP    ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   ....               RCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_185:
   \   00000002   E308               LDI     R16, 56
   \   00000004   ....               RJMP    ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine81:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_166:
   \   00000002   E010               LDI     R17, 0
   \   00000004   01A9               MOVW    R21:R20, R19:R18
   \   00000006   ....               RJMP    ?Subroutine112
    482          
    483          
    484          /*************************************************************************
    485          *
    486          *  Receive Serial number and version information from Radar
    487          *
    488          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    489          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   2F60               MOV     R22, R16
    490              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    491              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000002   ....               RCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_200:
   \   00000004   8502               LDD     R16, Z+10
   \   00000006   E014               LDI     R17, 4
   \   00000008   9F61               MUL     R22, R17
   \   0000000A   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_125:
   \   0000000C   0E02               ADD     R0, R18
   \   0000000E   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_286:
   \   00000010   A703               STD     Z+43, R16
    492          }
   \   00000012   9508               RET
    493          
    494          /*************************************************************************
    495          *
    496          *  Receive pressure measured data from AN_SGCNV
    497          *
    498          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    499          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   2E80               MOV     R8, R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
    500          
    501              unsigned short pnt, ADCh;
    502              short packlen;
    503          
    504              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000008   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_13:
   \   0000000A   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_101:
   \   0000000C   4010               SBCI    R17, 0
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   8040               LD      R4, Z
   \   00000012   2455               CLR     R5
    505          
    506              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000014   ....               RCALL   ?Subroutine72
    507          
    508              if (packlen > 0) {
   \                     ??CrossCallReturnLabel_109:
   \   00000016   E001               LDI     R16, 1
   \   00000018   1640               CP      R4, R16
   \   0000001A   0455               CPC     R5, R5
   \   0000001C   F18C               BRLT    ??ReceivePTOData_0
    509                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   0000001E   E080               LDI     R24, 0
   \   00000020   E090               LDI     R25, 0
   \   00000022   E004               LDI     R16, 4
   \   00000024   9E80               MUL     R8, R16
   \   00000026   0190               MOVW    R19:R18, R1:R0
    510                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceivePTOData_1:
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8562               LDD     R22, Z+10
   \   0000002C   8573               LDD     R23, Z+11
   \   0000002E   0183               MOVW    R17:R16, R7:R6
   \   00000030   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_35:
   \   00000032   0F60               ADD     R22, R16
   \   00000034   1F71               ADC     R23, R17
   \   00000036   01FB               MOVW    R31:R30, R23:R22
   \   00000038   8020               LD      R2, Z
   \   0000003A   2433               CLR     R3
    511                      if (ADCh < 14) {
   \   0000003C   E00E               LDI     R16, 14
   \   0000003E   1620               CP      R2, R16
   \   00000040   F4D8               BRCC    ??ReceivePTOData_2
    512                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000042   8081               LDD     R8, Z+1
   \   00000044   ....               LDI     R30, LOW((TData + 59))
   \   00000046   ....               LDI     R31, HIGH((TData + 59))
   \   00000048   0DE2               ADD     R30, R2
   \   0000004A   1DF5               ADC     R31, R5
   \   0000004C   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_26:
   \   0000004E   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_272:
   \   00000050   8280               ST      Z, R8
    513                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000052   01FB               MOVW    R31:R30, R23:R22
   \   00000054   8082               LDD     R8, Z+2
   \   00000056   8093               LDD     R9, Z+3
   \   00000058   80A4               LDD     R10, Z+4
   \   0000005A   80B5               LDD     R11, Z+5
   \   0000005C   ....               LDI     R30, LOW((TData + 731))
   \   0000005E   ....               LDI     R31, HIGH((TData + 731))
   \   00000060   0C22               LSL     R2
   \   00000062   1C33               ROL     R3
   \   00000064   0C22               LSL     R2
   \   00000066   1C33               ROL     R3
   \   00000068   0DE2               ADD     R30, R2
   \   0000006A   1DF3               ADC     R31, R3
   \   0000006C   ....               RCALL   ?Subroutine20
    514                      }
    515                  }
   \                     ??CrossCallReturnLabel_24:
   \   0000006E   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_273:
   \   00000070   8280               ST      Z, R8
   \   00000072   8291               STD     Z+1, R9
   \   00000074   82A2               STD     Z+2, R10
   \   00000076   82B3               STD     Z+3, R11
   \                     ??ReceivePTOData_2:
   \   00000078   9606               ADIW    R25:R24, 6
   \   0000007A   1584               CP      R24, R4
   \   0000007C   0595               CPC     R25, R5
   \   0000007E   F2A0               BRCS    ??ReceivePTOData_1
    516              }
    517              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   00000080   ....               RCALL   ?Subroutine73
    518          }
   \                     ??CrossCallReturnLabel_111:
   \   00000082   E0EC               LDI     R30, 12
   \   00000084   ........           JMP     ?EPILOGUE_B12_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   ....               LDI     R16, LOW(UARTSEND)
   \   00000002   ....               LDI     R17, (UARTSEND) >> 8
   \   00000004   ........           JMP     OS_Unuse

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine72:
   \   00000000   ....               LDI     R16, LOW(UARTSEND)
   \   00000002   ....               LDI     R17, (UARTSEND) >> 8
   \   00000004   ........           JMP     OS_Use

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine67:
   \   00000000   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_152:
   \   00000002   5001               SUBI    R16, 1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   ....               RCALL   ?Subroutine75
   \                     ??CrossCallReturnLabel_283:
   \   00000002   ....               LDI     R26, LOW(UART16552)
   \   00000004   ....               LDI     R27, (UART16552) >> 8
   \   00000006   0FA0               ADD     R26, R16
   \   00000008   1FB1               ADC     R27, R17
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   9508               RET
    519          /*************************************************************************
    520          *
    521          *  Receive Wash Track and High Level data from AN_SGCNV
    522          *
    523          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    524          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    525          
    526              // Fixed packet length
    527              //short packlen;
    528          
    529              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    530          
    531              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000008   ....               RCALL   ?Subroutine72
    532              short Index = (ch * 4) + PortPair;
   \                     ??CrossCallReturnLabel_110:
   \   0000000A   E004               LDI     R16, 4
   \   0000000C   9F80               MUL     R24, R16
   \   0000000E   0110               MOVW    R3:R2, R1:R0
   \   00000010   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_79:
   \   00000012   0E20               ADD     R2, R16
   \   00000014   1E31               ADC     R3, R17
   \   00000016   2F08               MOV     R16, R24
   \   00000018   ....               RCALL   ??Subroutine134_0
   \                     ??CrossCallReturnLabel_274:
   \   0000001A   8402               LDD     R0, Z+10
   \   0000001C   8413               LDD     R1, Z+11
   \   0000001E   01B0               MOVW    R23:R22, R1:R0
   \   00000020   0D64               ADD     R22, R4
   \   00000022   1D75               ADC     R23, R5
   \   00000024   ....               LDI     R26, LOW((TData + 1251))
   \   00000026   ....               LDI     R27, HIGH((TData + 1251))
   \   00000028   0181               MOVW    R17:R16, R3:R2
   \   0000002A   0F00               LSL     R16
   \   0000002C   1F11               ROL     R17
   \   0000002E   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_299:
   \   00000030   ....               LDI     R18, LOW((TData + 1243))
   \   00000032   ....               LDI     R19, HIGH((TData + 1243))
   \   00000034   0D22               ADD     R18, R2
   \   00000036   1D33               ADC     R19, R3
   \   00000038   E043               LDI     R20, 3
   \   0000003A   0181               MOVW    R17:R16, R3:R2
   \   0000003C   ........           CALL    ?S_SHL_L02
   \   00000040   01A8               MOVW    R21:R20, R17:R16
   \   00000042   ....               LDI     R16, LOW(TData)
   \   00000044   ....               LDI     R17, (TData) >> 8
   \   00000046   0F04               ADD     R16, R20
   \   00000048   1F15               ADC     R17, R21
   \   0000004A   01FB               MOVW    R31:R30, R23:R22
   \   0000004C   9142               LD      R20, -Z
   \   0000004E   3044               CPI     R20, 4
   \   00000050   F539               BRNE    ??ReceiveWHData_0
    533              // Check if we have time information included
    534              if (UART16552[ch].pRxBuffer[pointer -1] == 4 ) {
    535                  for (short pnt = 0; pnt < 3; pnt++) {
   \   00000052   2422               CLR     R2
   \   00000054   2433               CLR     R3
    536                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer+pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_1:
   \   00000056   01A2               MOVW    R21:R20, R5:R4
   \   00000058   0D42               ADD     R20, R2
   \   0000005A   1D53               ADC     R21, R3
   \   0000005C   01F0               MOVW    R31:R30, R1:R0
   \   0000005E   0FE4               ADD     R30, R20
   \   00000060   1FF5               ADC     R31, R21
   \   00000062   8060               LD      R6, Z
   \   00000064   2477               CLR     R7
   \   00000066   01A1               MOVW    R21:R20, R3:R2
   \   00000068   0F44               LSL     R20
   \   0000006A   1F55               ROL     R21
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   0FE4               ADD     R30, R20
   \   00000070   1FF5               ADC     R31, R21
   \   00000072   56E5               SUBI    R30, 101
   \   00000074   4FFB               SBCI    R31, 251
   \   00000076   8260               ST      Z, R6
   \   00000078   8271               STD     Z+1, R7
    537                  }
   \   0000007A   E041               LDI     R20, 1
   \   0000007C   0E24               ADD     R2, R20
   \   0000007E   1C37               ADC     R3, R7
   \   00000080   E043               LDI     R20, 3
   \   00000082   1624               CP      R2, R20
   \   00000084   0437               CPC     R3, R7
   \   00000086   F33C               BRLT    ??ReceiveWHData_1
    538                  // 4th WashTrack dont come
    539                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \   00000088   550F               SUBI    R16, 95
   \   0000008A   4F1B               SBCI    R17, 251
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   8270               ST      Z, R7
   \   00000090   8271               STD     Z+1, R7
    540                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer +3]; // Hgh levels in 5th byte
   \   00000092   01FB               MOVW    R31:R30, R23:R22
   \   00000094   8103               LDD     R16, Z+3
   \   00000096   01F9               MOVW    R31:R30, R19:R18
   \   00000098   8300               ST      Z, R16
    541                  TData.RS4.WTTime[Index] = 0;
   \   0000009A   927D               ST      X+, R7
   \   0000009C   927C               ST      X, R7
   \   0000009E   C020               RJMP    ??ReceiveWHData_2
    542              }else{
    543                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   000000A0   E040               LDI     R20, 0
   \   000000A2   E050               LDI     R21, 0
    544                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_3:
   \   000000A4   010A               MOVW    R1:R0, R21:R20
   \   000000A6   0C00               LSL     R0
   \   000000A8   1C11               ROL     R1
   \   000000AA   01FB               MOVW    R31:R30, R23:R22
   \   000000AC   ....               RCALL   ?Subroutine98
    545                  }
   \                     ??CrossCallReturnLabel_138:
   \   000000AE   8020               LD      R2, Z
   \   000000B0   8031               LDD     R3, Z+1
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_139:
   \   000000B6   56E5               SUBI    R30, 101
   \   000000B8   4FFB               SBCI    R31, 251
   \   000000BA   8220               ST      Z, R2
   \   000000BC   8231               STD     Z+1, R3
   \   000000BE   5F4F               SUBI    R20, 255
   \   000000C0   4F5F               SBCI    R21, 255
   \   000000C2   3044               CPI     R20, 4
   \   000000C4   E0E0               LDI     R30, 0
   \   000000C6   075E               CPC     R21, R30
   \   000000C8   F36C               BRLT    ??ReceiveWHData_3
    546                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \   000000CA   5F6D               SUBI    R22, 253
   \   000000CC   4F7F               SBCI    R23, 255
   \   000000CE   01FB               MOVW    R31:R30, R23:R22
   \   000000D0   8105               LDD     R16, Z+5
   \   000000D2   01F9               MOVW    R31:R30, R19:R18
   \   000000D4   8300               ST      Z, R16
    547                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   000000D6   01FB               MOVW    R31:R30, R23:R22
   \   000000D8   8106               LDD     R16, Z+6
   \   000000DA   8117               LDD     R17, Z+7
   \   000000DC   930D               ST      X+, R16
   \   000000DE   931C               ST      X, R17
    548              }
    549              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_2:
   \   000000E0   0F88               LSL     R24
   \   000000E2   0F88               LSL     R24
   \   000000E4   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_159:
   \   000000E6   0F80               ADD     R24, R16
   \   000000E8   2F48               MOV     R20, R24
   \   000000EA   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_116:
   \   000000EC   ....               LDI     R30, LOW((TData + 1267))
   \   000000EE   ....               LDI     R31, HIGH((TData + 1267))
   \   000000F0   8110               LD      R17, Z
   \   000000F2   2B10               OR      R17, R16
   \   000000F4   8310               ST      Z, R17
    550              OS_Unuse(&UARTSEND);
   \   000000F6   ....               RCALL   ?Subroutine73
    551          }
   \                     ??CrossCallReturnLabel_112:
   \   000000F8   ....               RJMP    ?Subroutine122
    552          
    553          
    554          /************************************************************************
    555          *
    556          *  Receive raw data for pressure, temp and other from AN_SGCNV
    557          *
    558          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine86:
   \   00000000   E00E               LDI     R16, 14
   \   00000002                      REQUIRE ??Subroutine137_0
   \   00000002                      ;               // Fall through to label ??Subroutine137_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine137_0:
   \   00000000   ....               RCALL   ?Subroutine124
   \                     ??CrossCallReturnLabel_285:
   \   00000002   ....               RJMP    ?Subroutine113

   \                                 In  segment CODE, align 2, keep-with-next
    559          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_88:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine8
    560          
    561              char pnt, ADCh;
    562              short packlen;
    563          
    564              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    565          
    566              if (packlen > 0) {
   \                     ??CrossCallReturnLabel_9:
   \   00000004   F064               BRLT    ??ReceiveRData_0
    567                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000006   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_70:
   \   00000008   C007               RJMP    ??ReceiveRData_1
    568                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceiveRData_2:
   \   0000000A   ....               RCALL   ?Subroutine70
    569                      if (ADCh < 14) {
   \                     ??CrossCallReturnLabel_108:
   \   0000000C   F420               BRCC    ??CrossCallReturnLabel_175
    570                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000000E   ....               RCALL   ?Subroutine16
    571                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
    572                      }
    573                  }
   \                     ??CrossCallReturnLabel_18:
   \   00000010   ....               LDI     R30, LOW((TData + 283))
   \   00000012   ....               LDI     R31, HIGH((TData + 283))
   \   00000014   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_175:
   \   00000016   5FAC               SUBI    R26, 252
   \                     ??ReceiveRData_1:
   \   00000018   17A6               CP      R26, R22
   \   0000001A   0777               CPC     R23, R23
   \   0000001C   F3B4               BRLT    ??ReceiveRData_2
    574              }
    575          }
   \                     ??ReceiveRData_0:
   \   0000001E   ....               RJMP    ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine70:
   \   00000000   018C               MOVW    R17:R16, R25:R24
   \   00000002   0F0A               ADD     R16, R26
   \   00000004   1F17               ADC     R17, R23
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   0E40               ADD     R4, R16
   \   0000000A   1E51               ADC     R5, R17
   \   0000000C   01F2               MOVW    R31:R30, R5:R4
   \   0000000E   81B0               LD      R27, Z
   \   00000010   30BE               CPI     R27, 14
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   E0A0               LDI     R26, 0
   \   00000002   E004               LDI     R16, 4
   \   00000004   9E20               MUL     R2, R16
   \   00000006   0110               MOVW    R3:R2, R1:R0
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   E002               LDI     R16, 2
   \   00000002   9FB0               MUL     R27, R16
   \   00000004   ....               RCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_140:
   \   00000006   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_161:
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_188:
   \   0000000C   E10C               LDI     R16, 28
   \   0000000E   ....               RCALL   ??Subroutine137_0
   \                     ??CrossCallReturnLabel_277:
   \   00000010   ....               RJMP    ?Subroutine111

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine99:
   \   00000000   01A1               MOVW    R21:R20, R3:R2
   \   00000002   ....               RJMP    ?Subroutine112

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   8061               LDD     R6, Z+1
   \   00000002   ....               LDI     R30, LOW((TData + 59))
   \   00000004   ....               LDI     R31, HIGH((TData + 59))
   \   00000006   E010               LDI     R17, 0
   \   00000008   0FEB               ADD     R30, R27
   \   0000000A   1FF1               ADC     R31, R17
   \   0000000C   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_160:
   \   0000000E   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_187:
   \   00000010   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_278:
   \   00000012   8260               ST      Z, R6
   \   00000014   01F2               MOVW    R31:R30, R5:R4
   \   00000016   8042               LDD     R4, Z+2
   \   00000018   8053               LDD     R5, Z+3
   \   0000001A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   2E20               MOV     R2, R16
   \   00000002   01C9               MOVW    R25:R24, R19:R18
   \   00000004   ....               RCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_275:
   \   00000006   8522               LDD     R18, Z+10
   \   00000008   8533               LDD     R19, Z+11
   \   0000000A   01F9               MOVW    R31:R30, R19:R18
   \   0000000C   0FE8               ADD     R30, R24
   \   0000000E   1FF9               ADC     R31, R25
   \   00000010   9162               LD      R22, -Z
   \   00000012   E070               LDI     R23, 0
   \   00000014   3061               CPI     R22, 1
   \   00000016   4050               SBCI    R21, 0
   \   00000018   9508               RET
    576          
    577          /*************************************************************************
    578          *
    579          *  Receive cal data  from AN_SGCNV
    580          *
    581          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    582          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_87:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine8
    583          
    584              char pnt, ADCh;
    585              short packlen;
    586          
    587              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    588          
    589              if (packlen > 0) {
   \                     ??CrossCallReturnLabel_8:
   \   00000004   F064               BRLT    ??ReceiveCData_0
    590                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000006   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_69:
   \   00000008   C007               RJMP    ??ReceiveCData_1
    591                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceiveCData_2:
   \   0000000A   ....               RCALL   ?Subroutine70
    592                      if (ADCh < 14) {
   \                     ??CrossCallReturnLabel_107:
   \   0000000C   F420               BRCC    ??CrossCallReturnLabel_174
    593                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000000E   ....               RCALL   ?Subroutine16
    594                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
    595                      }
    596                  }
   \                     ??CrossCallReturnLabel_17:
   \   00000010   ....               LDI     R30, LOW((TData + 507))
   \   00000012   ....               LDI     R31, HIGH((TData + 507))
   \   00000014   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_174:
   \   00000016   5FAC               SUBI    R26, 252
   \                     ??ReceiveCData_1:
   \   00000018   17A6               CP      R26, R22
   \   0000001A   0777               CPC     R23, R23
   \   0000001C   F3B4               BRLT    ??ReceiveCData_2
    597              }
    598          }
   \                     ??ReceiveCData_0:
   \   0000001E   ....               RJMP    ?Subroutine121
    599          
    600          /*************************************************************************
    601          *
    602          *  Receive card status  from AN_SGCNV
    603          *
    604          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    605          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004   ....               RCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_265:
   \   00000006   914C               LD      R20, X
   \   00000008   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_295:
   \   0000000A   A743               STD     Z+43, R20
    606          
    607              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
    608              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8121               LDD     R18, Z+1
   \   00000010   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_288:
   \   00000012   AB23               STD     Z+51, R18
    609          }
   \   00000014   2DA2               MOV     R26, R2
   \   00000016   2FB7               MOV     R27, R23
   \   00000018   9508               RET
    610          
    611          /*************************************************************************
    612          *
    613          *  Receive config data from AN_SGCNV
    614          *
    615          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine102:
   \   00000000   01D1               MOVW    R27:R26, R3:R2
   \   00000002                      REQUIRE ??Subroutine128_0
   \   00000002                      ;               // Fall through to label ??Subroutine128_0

   \                                 In  segment CODE, align 2, keep-with-next
    616          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_66:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002   2F70               MOV     R23, R16
    617          
    618              char i, ADCh;
    619          
    620              for (i = 0; i < 14; i++) {
   \   00000004   E06E               LDI     R22, 14
   \   00000006   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_12:
   \   00000008   8422               LDD     R2, Z+10
   \   0000000A   8433               LDD     R3, Z+11
   \   0000000C   E004               LDI     R16, 4
   \   0000000E   9F70               MUL     R23, R16
   \   00000010   01C0               MOVW    R25:R24, R1:R0
    621                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveConfigData_0:
   \   00000012   01F1               MOVW    R31:R30, R3:R2
   \   00000014   0FE2               ADD     R30, R18
   \   00000016   1FF3               ADC     R31, R19
   \   00000018   8040               LD      R4, Z
   \   0000001A   ....               RCALL   ?Subroutine69
    622                  if (ADCh < 14) {
   \                     ??CrossCallReturnLabel_106:
   \   0000001C   E00E               LDI     R16, 14
   \   0000001E   1640               CP      R4, R16
   \   00000020   F460               BRCC    ??CrossCallReturnLabel_20
    623                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000022   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_267:
   \   00000024   01FD               MOVW    R31:R30, R27:R26
   \   00000026   8170               LD      R23, Z
   \   00000028   ....               LDI     R30, LOW((TData + 59))
   \   0000002A   ....               LDI     R31, HIGH((TData + 59))
   \   0000002C   2455               CLR     R5
   \   0000002E   ....               RCALL   ?Subroutine18
    624                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \                     ??CrossCallReturnLabel_19:
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8171               LDD     R23, Z+1
   \   00000034   ....               LDI     R30, LOW((TData + 171))
   \   00000036   ....               LDI     R31, HIGH((TData + 171))
   \   00000038   ....               RCALL   ?Subroutine18
    625                  }
    626                  pointer += 2;
   \                     ??CrossCallReturnLabel_20:
   \   0000003A   5F2E               SUBI    R18, 254
   \   0000003C   4F3F               SBCI    R19, 255
    627              }
   \   0000003E   956A               DEC     R22
   \   00000040   F741               BRNE    ??ReceiveConfigData_0
    628          }
   \   00000042   ....               RJMP    ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0DE4               ADD     R30, R4
   \   00000002   1DF5               ADC     R31, R5
   \   00000004   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_184:
   \   00000006   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_279:
   \   00000008   8370               ST      Z, R23
   \   0000000A   9508               RET
    629          
    630          /*************************************************************************
    631          *
    632          *  Receive eeprom data from AN_SGCNV
    633          *
    634          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    635          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_44:
   \   00000002   2F60               MOV     R22, R16
    636          
    637              short i;
    638          
    639              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000004   E010               LDI     R17, 0
   \   00000006   E342               LDI     R20, 50
   \   00000008   ....               RCALL   ??Subroutine125_0
   \                     ??CrossCallReturnLabel_217:
   \   0000000A   ....               LDI     R26, LOW(TData)
   \   0000000C   ....               LDI     R27, (TData) >> 8
   \   0000000E   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_298:
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   ....               RCALL   ?Subroutine71
    640              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \                     ??CrossCallReturnLabel_199:
   \   00000014   2F06               MOV     R16, R22
   \   00000016   0F00               LSL     R16
   \   00000018   0F00               LSL     R16
   \   0000001A   9110....           LDS     R17, PortPair
   \   0000001E   0F01               ADD     R16, R17
   \   00000020   8301               STD     Z+1, R16
    641              for (i = 2; i < (41 + 2); i++) {
   \   00000022   E082               LDI     R24, 2
   \   00000024   E090               LDI     R25, 0
   \   00000026   E14A               LDI     R20, 26
    642                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveCardEEPROMData_0:
   \   00000028   2F06               MOV     R16, R22
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   ....               RCALL   ?Subroutine87
    643              }
   \                     ??CrossCallReturnLabel_204:
   \   0000002E   ....               RCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_153:
   \   00000030   ....               RCALL   ??Subroutine140_0
   \                     ??CrossCallReturnLabel_303:
   \   00000032   01FD               MOVW    R31:R30, R27:R26
   \   00000034   0FE8               ADD     R30, R24
   \   00000036   1FF9               ADC     R31, R25
   \   00000038   56EC               SUBI    R30, 108
   \   0000003A   4FFA               SBCI    R31, 250
   \   0000003C   8300               ST      Z, R16
   \   0000003E   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_105:
   \   00000040   9601               ADIW    R25:R24, 1
   \   00000042   328B               CPI     R24, 43
   \   00000044   0795               CPC     R25, R21
   \   00000046   F384               BRLT    ??ReceiveCardEEPROMData_0
    644          }
   \   00000048   ....               RJMP    ?Subroutine118

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine140_0:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8100               LD      R16, Z
   \   00000004   9508               RET
    645          
    646          /*************************************************************************
    647          *
    648          * Build send packet header for AN-SGCNV
    649          *
    650          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    651          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
    652          
    653              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   ....               RCALL   ??Subroutine127_0
   \                     ??CrossCallReturnLabel_238:
   \   00000004   ....               RCALL   ?Subroutine31
    654              UART16552[ch].RxLast = 0;
    655              UART16552[ch].TxLast = 0;
   \                     ??CrossCallReturnLabel_30:
   \   00000006   8354               STD     Z+4, R21
   \   00000008   8355               STD     Z+5, R21
    656          
    657              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   0000000A   E002               LDI     R16, 2
   \   0000000C   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_143:
   \   0000000E   ....               RCALL   ?Subroutine41
    658              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \                     ??CrossCallReturnLabel_40:
   \   00000010   9611               ADIW    R27:R26, 1
   \   00000012   ....               RCALL   ?Subroutine41
    659              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \                     ??CrossCallReturnLabel_39:
   \   00000014   9612               ADIW    R27:R26, 2
   \   00000016   935C               ST      X, R21
    660              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   00000018   EF0D               LDI     R16, 253
   \   0000001A   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_144:
   \   0000001C   9613               ADIW    R27:R26, 3
   \   0000001E   ....               RCALL   ?Subroutine41
    661              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \                     ??CrossCallReturnLabel_38:
   \   00000020   9614               ADIW    R27:R26, 4
   \   00000022   935C               ST      X, R21
    662              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   00000024   01DF               MOVW    R27:R26, R31:R30
   \   00000026   91ED               LD      R30, X+
   \   00000028   91FC               LD      R31, X
   \   0000002A   8355               STD     Z+5, R21
    663          }
   \   0000002C   01D9               MOVW    R27:R26, R19:R18
   \   0000002E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   930C               ST      X, R16
   \   00000002   ....               RJMP    ?Subroutine103

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine127_0:
   \   00000000   2F40               MOV     R20, R16
   \   00000002   E050               LDI     R21, 0
   \   00000004   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_242:
   \   00000006   ....               RJMP    ?Subroutine104

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   8754               STD     Z+12, R21
   \   00000002   8755               STD     Z+13, R21
   \   00000004   8756               STD     Z+14, R21
   \   00000006   8757               STD     Z+15, R21
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   E10A               LDI     R16, 26
   \   00000002   E010               LDI     R17, 0
   \   00000004   ....               RJMP    ?Subroutine124
    664          
    665          /*************************************************************************
    666          *
    667          * Build  packet tail
    668          *
    669          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    670          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_41:
   \   00000002   2F60               MOV     R22, R16
    671          
    672              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000004   ....               RCALL   Uart_BuildHeader16552
    673          
    674              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   00000006   ....               LDI     R24, LOW(UART16552)
   \   00000008   ....               LDI     R25, (UART16552) >> 8
   \   0000000A   2F06               MOV     R16, R22
   \   0000000C   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_218:
   \   0000000E   01DC               MOVW    R27:R26, R25:R24
   \   00000010   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_296:
   \   00000012   E021               LDI     R18, 1
   \   00000014   910D               LD      R16, X+
   \   00000016   911C               LD      R17, X
   \   00000018   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_48:
   \   0000001A   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_226:
   \   0000001C   ....               RCALL   ?Subroutine83
    675              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \                     ??CrossCallReturnLabel_224:
   \   0000001E   ....               RCALL   ?Subroutine1
    676          
    677              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \                     ??CrossCallReturnLabel_222:
   \   00000020   91ED               LD      R30, X+
   \   00000022   91FC               LD      R31, X
   \   00000024   9711               SBIW    R27:R26, 1
   \   00000026   8314               STD     Z+4, R17
    678              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   91ED               LD      R30, X+
   \   0000002E   91FC               LD      R31, X
   \   00000030   9711               SBIW    R27:R26, 1
   \   00000032   8305               STD     Z+5, R16
    679          
    680          
    681              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8122               LDD     R18, Z+2
   \   00000038   8133               LDD     R19, Z+3
   \   0000003A   2F06               MOV     R16, R22
   \   0000003C   ....               RCALL   CalcDSTxChecksumUART16552
   \   0000003E   912D               LD      R18, X+
   \   00000040   913C               LD      R19, X
   \   00000042   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_49:
   \   00000044   0F24               ADD     R18, R20
   \   00000046   1F35               ADC     R19, R21
   \   00000048   01F9               MOVW    R31:R30, R19:R18
   \   0000004A   8300               ST      Z, R16
    682              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   0000004C   ....               RCALL   ?Subroutine83
    683                                                                           // to ANSI standard !!!!
    684          
    685              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \                     ??CrossCallReturnLabel_225:
   \   0000004E   E023               LDI     R18, 3
   \   00000050   ....               RCALL   ??Subroutine126_0
    686              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \                     ??CrossCallReturnLabel_221:
   \   00000052   ....               RCALL   ?Subroutine1
    687          
    688              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \                     ??CrossCallReturnLabel_223:
   \   00000054   5001               SUBI    R16, 1
   \   00000056   4010               SBCI    R17, 0
   \   00000058   8306               STD     Z+6, R16
   \   0000005A   8317               STD     Z+7, R17
    689              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   0000005C   E001               LDI     R16, 1
   \   0000005E   8304               STD     Z+4, R16
   \   00000060   8325               STD     Z+5, R18
    690              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   00000062   2F06               MOV     R16, R22
   \   00000064   ....               RCALL   ?Subroutine51
    691              if (ch == 0) {                                           // Turn on TXE for channel
   \                     ??CrossCallReturnLabel_63:
   \   00000066   2366               TST     R22
   \   00000068   F459               BRNE    ??Uart_BuildTail16552_0
    692                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   0000006A   ....               LDI     R16, LOW(TimerUART0)
   \   0000006C   ....               LDI     R17, (TimerUART0) >> 8
   \   0000006E   ........           CALL    OS_RetriggerTimer
    693                  U0_MCR |= RTS;                                    // set RTS on
   \   00000072   E0EC               LDI     R30, LOW(4364)
   \   00000074   ....               RCALL   ?Subroutine4
    694                  OS_Delay(20);                                           // Wait (ms) for tx stable
    695                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
    696              } else if (ch == 1) {
   \                     ??CrossCallReturnLabel_4:
   \   00000076   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_145:
   \   00000078   910C               LD      R16, X
   \   0000007A   93001108           STS     4360, R16
   \   0000007E   C00D               RJMP    ??Uart_BuildTail16552_1
   \                     ??Uart_BuildTail16552_0:
   \   00000080   3061               CPI     R22, 1
   \   00000082   F459               BRNE    ??Uart_BuildTail16552_1
    697                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   00000084   ....               LDI     R16, LOW(TimerUART1)
   \   00000086   ....               LDI     R17, (TimerUART1) >> 8
   \   00000088   ........           CALL    OS_RetriggerTimer
    698                  U1_MCR |= RTS;                                      // set RTS on
   \   0000008C   E0E4               LDI     R30, LOW(4356)
   \   0000008E   ....               RCALL   ?Subroutine4
    699                  OS_Delay(20);                                           // Wait (ms) for tx stable
    700                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
    701              }
   \                     ??CrossCallReturnLabel_5:
   \   00000090   8DA2               LDD     R26, Z+26
   \   00000092   8DB3               LDD     R27, Z+27
   \   00000094   910C               LD      R16, X
   \   00000096   93001100           STS     4352, R16
    702          }
   \                     ??Uart_BuildTail16552_1:
   \   0000009A   ....               RJMP    ?Subroutine118

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   9711               SBIW    R27:R26, 1
   \   00000002   01FD               MOVW    R31:R30, R27:R26
   \   00000004   8142               LDD     R20, Z+2
   \   00000006   8153               LDD     R21, Z+3
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   E1F1               LDI     R31, (4364) >> 8
   \   00000002   8100               LD      R16, Z
   \   00000004   6002               ORI     R16, 0x02
   \   00000006   8300               ST      Z, R16
   \   00000008   E104               LDI     R16, 20
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   ........           CALL    OS_Delay
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   E020               LDI     R18, 0
   \   00000002                      REQUIRE ??Subroutine126_0
   \   00000002                      ;               // Fall through to label ??Subroutine126_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine126_0:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   8142               LDD     R20, Z+2
   \   00000006   8153               LDD     R21, Z+3
   \   00000008   ....               RCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_227:
   \   0000000A   ....               RJMP    ?Subroutine83

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine84:
   \   00000000   0F04               ADD     R16, R20
   \   00000002   1F15               ADC     R17, R21
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8320               ST      Z, R18
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine83:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   ....               RJMP    ??Subroutine129_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine129_0:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   5F0F               SUBI    R16, 255
   \   00000006   4F1F               SBCI    R17, 255
   \   00000008   8302               STD     Z+2, R16
   \   0000000A   8313               STD     Z+3, R17
   \   0000000C   9508               RET
    703          
    704          /*************************************************************************
    705          *
    706          * Build send request for system status on WIS
    707          *
    708          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE ??Subroutine127_0
   \   00000002                      ;               // Fall through to label ??Subroutine127_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_120:
   \   00000002   ....               RJMP    ?Subroutine76

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine85:
   \   00000000   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_151:
   \   00000002   8122               LDD     R18, Z+2
   \   00000004   8133               LDD     R19, Z+3
   \   00000006   ....               RJMP    ??Subroutine128_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_244:
   \   00000002   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_150:
   \   00000004   0FA0               ADD     R26, R16
   \   00000006   1FB1               ADC     R27, R17
   \   00000008   935C               ST      X, R21
   \   0000000A   ....               RCALL   ??Subroutine129_0
   \                     ??CrossCallReturnLabel_243:
   \   0000000C   01DB               MOVW    R27:R26, R23:R22
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine101:
   \   00000000   930C               ST      X, R16
   \   00000002                      REQUIRE ??Subroutine129_0
   \   00000002                      ;               // Fall through to label ??Subroutine129_0

   \                                 In  segment CODE, align 2, keep-with-next
    709          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   ....               RCALL   ?Subroutine0
    710          
    711              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \                     ??CrossCallReturnLabel_228:
   \   00000002   E604               LDI     R16, 100
   \   00000004   ....               RJMP    ?Subroutine39
    712              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    713          
    714          }
    715          
    716          /*************************************************************************
    717          *
    718          * Build send request for WIS protocoler on WIS
    719          *
    720          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine109:
   \   00000000   2FA6               MOV     R26, R22
   \   00000002   2FB3               MOV     R27, R19
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine119:
   \   00000000   930C               ST      X, R16
   \   00000002   ....               RJMP    ??Subroutine129_0

   \                                 In  segment CODE, align 2, keep-with-next
    721          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004   2F21               MOV     R18, R17
    722          
    723              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000006   ....               RCALL   ??Subroutine127_0
   \                     ??CrossCallReturnLabel_239:
   \   00000008   E606               LDI     R16, 102
   \   0000000A   ....               RCALL   ?Subroutine40
    724              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    725              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \                     ??CrossCallReturnLabel_207:
   \   0000000C   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_148:
   \   0000000E   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_297:
   \   00000010   932C               ST      X, R18
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_50:
   \   00000018   8302               STD     Z+2, R16
   \   0000001A   8313               STD     Z+3, R17
    726          
    727          }
   \   0000001C   ....               RJMP    ?Subroutine109

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_149:
   \   00000002   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_122:
   \   00000004   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_117:
   \   00000006   8142               LDD     R20, Z+2
   \   00000008   0FA4               ADD     R26, R20
   \   0000000A   1FB1               ADC     R27, R17
   \   0000000C   ....               RJMP    ?Subroutine119

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine89:
   \   00000000   8142               LDD     R20, Z+2
   \   00000002   8153               LDD     R21, Z+3
   \   00000004   0FA4               ADD     R26, R20
   \   00000006   1FB5               ADC     R27, R21
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine82:
   \   00000000   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_245:
   \   00000002   E001               LDI     R16, 1
   \   00000004                      REQUIRE ?Subroutine103
   \   00000004                      ;               // Fall through to label ?Subroutine103
    728          
    729          /*************************************************************************
    730          *
    731          * Build send request for measure data to Water ingress
    732          *
    733          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_119:
   \   00000002   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_118:
   \   00000004   8122               LDD     R18, Z+2
   \   00000006   0FA2               ADD     R26, R18
   \   00000008   1FB1               ADC     R27, R17
   \   0000000A   ....               RJMP    ?Subroutine76

   \                                 In  segment CODE, align 2, keep-with-next
    734          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   ....               RCALL   ?Subroutine0
    735          
    736              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_229:
   \   00000002   E605               LDI     R16, 101
   \   00000004   ....               RJMP    ?Subroutine38
    737              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    738              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    739          
    740          }
    741          
    742          
    743          /*************************************************************************
    744          *
    745          * Build send request for GODA measurement
    746          *
    747          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    748          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   ....               RCALL   ?Subroutine0
    749          
    750              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_230:
   \   00000002   EA00               LDI     R16, 160
   \   00000004   ....               RJMP    ?Subroutine38
    751              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    752              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
    753          
    754          }
    755          
    756          /*************************************************************************
    757          *
    758          * Build send request for GODA device information
    759          *
    760          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    761          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   ....               RCALL   ?Subroutine0
    762          
    763              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \                     ??CrossCallReturnLabel_231:
   \   00000002   EA01               LDI     R16, 161
   \   00000004                      REQUIRE ?Subroutine39
   \   00000004                      ;               // Fall through to label ?Subroutine39
    764              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
    765          }
    766          
    767          /*************************************************************************
    768          *
    769          * Build datablock to AN-SGCNV
    770          *
    771          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    772          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_42:
   \   00000002   2F30               MOV     R19, R16
    773          
    774              char i;
    775          
    776              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000004   E023               LDI     R18, 3
   \   00000006   E010               LDI     R17, 0
   \   00000008   E540               LDI     R20, 80
   \   0000000A   ....               RCALL   ??Subroutine125_0
   \                     ??CrossCallReturnLabel_216:
   \   0000000C   ....               LDI     R20, LOW(TData)
   \   0000000E   2E24               MOV     R2, R20
   \   00000010   ....               LDI     R20, (TData) >> 8
   \   00000012   0E20               ADD     R2, R16
   \   00000014   1F41               ADC     R20, R17
   \   00000016   2E34               MOV     R3, R20
   \   00000018   2D62               MOV     R22, R2
   \   0000001A   506C               SUBI    R22, 12
   \   0000001C   4F4B               SBCI    R20, 251
   \   0000001E   2F74               MOV     R23, R20
   \   00000020   2F43               MOV     R20, R19
   \   00000022   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_240:
   \   00000024   ....               RCALL   ??Subroutine132_0
   \                     ??CrossCallReturnLabel_257:
   \   00000026   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_269:
   \   00000028   E030               LDI     R19, 0
   \   0000002A   C008               RJMP    ??Uart_BuildSndData_0
    777                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \                     ??Uart_BuildSndData_1:
   \   0000002C   ....               RCALL   ?Subroutine102
    778              }
   \                     ??CrossCallReturnLabel_266:
   \   0000002E   50AC               SUBI    R26, 12
   \   00000030   4FBB               SBCI    R27, 251
   \   00000032   910C               LD      R16, X
   \   00000034   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_147:
   \   00000036   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_121:
   \   00000038   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_210:
   \   0000003A   9523               INC     R18
   \                     ??Uart_BuildSndData_0:
   \   0000003C   01DB               MOVW    R27:R26, R23:R22
   \   0000003E   9612               ADIW    R27:R26, 2
   \   00000040   918C               LD      R24, X
   \   00000042   E090               LDI     R25, 0
   \   00000044   9603               ADIW    R25:R24, 3
   \   00000046   1728               CP      R18, R24
   \   00000048   0739               CPC     R19, R25
   \   0000004A   F384               BRLT    ??Uart_BuildSndData_1
    779              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \   0000004C   01FB               MOVW    R31:R30, R23:R22
   \   0000004E   8330               ST      Z, R19
    780          }
   \   00000050   ....               RJMP    ?Subroutine118
    781          
    782          /*************************************************************************
    783          *
    784          * Build send request for measure data to AN-SGCNV
    785          *
    786          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    787          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   ....               RCALL   ?Subroutine0
    788          
    789              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_236:
   \   00000002   E00A               LDI     R16, 10
   \   00000004   ....               RJMP    ?Subroutine38
    790              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    791              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    792          
    793          }
    794          
    795          /*************************************************************************
    796          *
    797          * Build send request for raw data to AN-SGCNV
    798          *
    799          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    800          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   ....               RCALL   ?Subroutine0
    801          
    802              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_234:
   \   00000002   E00D               LDI     R16, 13
   \   00000004   ....               RJMP    ?Subroutine38
    803              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    804              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    805          
    806          }
    807          
    808          /*************************************************************************
    809          *
    810          * Build send request for cal data to AN-SGCNV
    811          *
    812          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    813          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   ....               RCALL   ?Subroutine0
    814          
    815              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_235:
   \   00000002   E100               LDI     R16, 16
   \   00000004   ....               RJMP    ?Subroutine38
    816              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    817              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    818          
    819          }
    820          
    821          /*************************************************************************
    822          *
    823          * Build send request for system status on AN_SGCNV
    824          *
    825          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    826          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   ....               RCALL   ?Subroutine0
    827          
    828              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \                     ??CrossCallReturnLabel_233:
   \   00000002   E10B               LDI     R16, 27
   \   00000004                      REQUIRE ?Subroutine38
   \   00000004                      ;               // Fall through to label ?Subroutine38
    829              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    830              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    831          
    832          }
    833          
    834          /*************************************************************************
    835          *
    836          * Build send request for card config on AN_SGCNV
    837          *
    838          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    839          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   ....               RCALL   ?Subroutine0
    840          
    841              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \                     ??CrossCallReturnLabel_232:
   \   00000002   E101               LDI     R16, 17
   \   00000004   ....               RJMP    ?Subroutine39
    842              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    843          
    844          }
    845          
    846          /*************************************************************************
    847          *
    848          * Build send request for EEPROM data on AN_SGCNV
    849          *
    850          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    851          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004   2F20               MOV     R18, R16
    852          
    853              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000006   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_10:
   \   00000008   E108               LDI     R16, 24
   \   0000000A   ....               RCALL   ?Subroutine40
    854              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    855              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \                     ??CrossCallReturnLabel_208:
   \   0000000C   E0B0               LDI     R27, 0
   \   0000000E   ....               SUBI    R18, LOW((-(TData + 1528) & 0xFFFF))
   \   00000010   2FA2               MOV     R26, R18
   \   00000012   ....               SBCI    R27, HIGH((-(TData + 1528) & 0xFFFF))
   \   00000014   910C               LD      R16, X
   \   00000016   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_146:
   \   00000018   8122               LDD     R18, Z+2
   \   0000001A   0FA2               ADD     R26, R18
   \   0000001C   1FB1               ADC     R27, R17
   \   0000001E   ....               RCALL   ?Subroutine119
    856          
    857          }
   \                     ??CrossCallReturnLabel_209:
   \   00000020                      REQUIRE ?Subroutine109
   \   00000020                      ;               // Fall through to label ?Subroutine109
    858          /*************************************************************************
    859          *
    860          *  Receive data on USARTs
    861          *
    862          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    863          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   ....               RCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_46:
   \   00000002   2F80               MOV     R24, R16
    864          
    865              switch (UART16552[ch].RxState) {                  // check status
   \   00000004   ....               RCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_14:
   \   00000006   8902               LDD     R16, Z+18
   \   00000008   2300               TST     R16
   \   0000000A   F409               BRNE    $+2+2
   \   0000000C   C056               RJMP    ??CrossCallReturnLabel_61
   \   0000000E   950A               DEC     R16
   \   00000010   F031               BREQ    ??ReceivePacketUart16552_0
   \   00000012   950A               DEC     R16
   \   00000014   F139               BREQ    ??ReceivePacketUart16552_1
   \   00000016   5008               SUBI    R16, 8
   \   00000018   F409               BRNE    $+2+2
   \   0000001A   C04F               RJMP    ??CrossCallReturnLabel_61
   \   0000001C   C04C               RJMP    ??ReceivePacketUart16552_2
    866              case SYNC :
    867                  // all functionallity in inerrupt routine
    868                  break;
    869              case HEADER :
    870                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_0:
   \   0000001E   8506               LDD     R16, Z+14
   \   00000020   8517               LDD     R17, Z+15
   \   00000022   3003               CPI     R16, 3
   \   00000024   4010               SBCI    R17, 0
   \   00000026   F408               BRCC    $+2+2
   \   00000028   C048               RJMP    ??CrossCallReturnLabel_61
    871                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    872                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000002A   8502               LDD     R16, Z+10
   \   0000002C   85F3               LDD     R31, Z+11
   \   0000002E   2FE0               MOV     R30, R16
   \   00000030   8132               LDD     R19, Z+2
   \   00000032   8103               LDD     R16, Z+3
   \   00000034   E010               LDI     R17, 0
   \   00000036   2F20               MOV     R18, R16
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8B06               STD     Z+22, R16
   \   0000003C   8B37               STD     Z+23, R19
    873                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    874                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   0000003E   E708               LDI     R16, 120
   \   00000040   8546               LDD     R20, Z+14
   \   00000042   8557               LDD     R21, Z+15
   \   00000044   1B04               SUB     R16, R20
   \   00000046   0B15               SBC     R17, R21
   \   00000048   1720               CP      R18, R16
   \   0000004A   0731               CPC     R19, R17
   \   0000004C   F5A0               BRCC    ??ReceivePacketUart16552_2
   \   0000004E   3027               CPI     R18, 7
   \   00000050   4030               SBCI    R19, 0
   \   00000052   F188               BRCS    ??ReceivePacketUart16552_2
    875                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   00000054   E002               LDI     R16, 2
   \   00000056   8B02               STD     Z+18, R16
    876                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   00000058   8586               LDD     R24, Z+14
   \   0000005A   8597               LDD     R25, Z+15
   \   0000005C   9601               ADIW    R25:R24, 1
   \   0000005E   8B80               STD     Z+16, R24
   \   00000060   8B91               STD     Z+17, R25
   \   00000062   C02B               RJMP    ??CrossCallReturnLabel_61
    877                      } else {
    878                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    879                      }
    880                  }
    881                  break;
    882              case RECEIVE :
    883                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_1:
   \   00000064   8900               LDD     R16, Z+16
   \   00000066   8911               LDD     R17, Z+17
   \   00000068   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_53:
   \   0000006A   8B00               STD     Z+16, R16
   \   0000006C   8B11               STD     Z+17, R17
   \   0000006E   8926               LDD     R18, Z+22
   \   00000070   8937               LDD     R19, Z+23
   \   00000072   1702               CP      R16, R18
   \   00000074   0713               CPC     R17, R19
   \   00000076   F108               BRCS    ??CrossCallReturnLabel_61
    884                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000078   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_102:
   \   0000007A   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_304:
   \   0000007C   3003               CPI     R16, 3
   \   0000007E   F4D9               BRNE    ??ReceivePacketUart16552_2
    885                          if (CalcDSRxChecksum16552(ch)) {
   \   00000080   2F08               MOV     R16, R24
   \   00000082   ....               RCALL   CalcDSRxChecksum16552
   \   00000084   2B01               OR      R16, R17
   \   00000086   F0B9               BREQ    ??ReceivePacketUart16552_2
    886                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   00000088   01FD               MOVW    R31:R30, R27:R26
   \   0000008A   8502               LDD     R16, Z+10
   \   0000008C   85F3               LDD     R31, Z+11
   \   0000008E   2FE0               MOV     R30, R16
   \   00000090   8100               LD      R16, Z
   \   00000092   3F0D               CPI     R16, 253
   \   00000094   F481               BRNE    ??ReceivePacketUart16552_2
    887                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   00000096   E00A               LDI     R16, 10
   \   00000098   01FD               MOVW    R31:R30, R27:R26
   \   0000009A   8B02               STD     Z+18, R16
    888                                  if (ch == 0) {
   \   0000009C   2388               TST     R24
   \   0000009E   F421               BRNE    ??ReceivePacketUart16552_3
    889                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   000000A0   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000A2   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000A4   E001               LDI     R16, 1
   \   000000A6   C005               RJMP    ??ReceivePacketUart16552_4
    890                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_3:
   \   000000A8   3081               CPI     R24, 1
   \   000000AA   F439               BRNE    ??CrossCallReturnLabel_61
    891                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   000000AC   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000AE   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000B0   E002               LDI     R16, 2
    892                                  }
    893                              } else {
    894                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
    895                              }
    896                          } else {
    897                              GoToSyncUART16552(ch);                                // go to sync modus for recive
    898                          }
    899                      } else {
    900                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    901                      }
    902                  }
   \                     ??ReceivePacketUart16552_4:
   \   000000B2   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_132:
   \   000000B4   C002               RJMP    ??CrossCallReturnLabel_61
    903                  break;
    904              case HANDLE :
    905                  break;
    906              default :
    907                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_2:
   \   000000B6   2F08               MOV     R16, R24
   \   000000B8   ....               RCALL   ?Subroutine51
    908                  break;
    909              }                                                           // end switch
    910              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??CrossCallReturnLabel_61:
   \   000000BA   01FD               MOVW    R31:R30, R27:R26
   \   000000BC   8506               LDD     R16, Z+14
   \   000000BE   8517               LDD     R17, Z+15
   \   000000C0   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_54:
   \   000000C2   8706               STD     Z+14, R16
   \   000000C4   8717               STD     Z+15, R17
   \   000000C6   3708               CPI     R16, 120
   \   000000C8   E020               LDI     R18, 0
   \   000000CA   4010               SBCI    R17, 0
   \   000000CC   F010               BRCS    ??ReceivePacketUart16552_5
    911                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   000000CE   8726               STD     Z+14, R18
   \   000000D0   8727               STD     Z+15, R18
    912              }
    913          }
   \                     ??ReceivePacketUart16552_5:
   \   000000D2   ....               RJMP    ?Subroutine118

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   4010               SBCI    R17, 0
   \   00000002                      REQUIRE ??Subroutine140_0
   \   00000002                      ;               // Fall through to label ??Subroutine140_0
    914          
    915          
    916          /*************************************************************************
    917          *
    918          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    919          *
    920          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    921          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2E20               MOV     R2, R16
   \   00000006   2F73               MOV     R23, R19
    922          
    923              unsigned short cnt;
    924              unsigned char csum;
    925          
    926              csum = 0;
   \   00000008   E000               LDI     R16, 0
    927              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   E082               LDI     R24, 2
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   ....               LDI     R19, (crc) >> 16
   \   00000012   C013               RJMP    ??CalcDSTxChecksumUART16552_0
    928                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000014   2FA0               MOV     R26, R16
   \   00000016   2D02               MOV     R16, R2
   \   00000018   E010               LDI     R17, 0
   \   0000001A   ....               RCALL   ??Subroutine125_0
    929              }
   \                     ??CrossCallReturnLabel_215:
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000022   8100               LD      R16, Z
   \   00000024   8111               LDD     R17, Z+1
   \   00000026   ....               RCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_32:
   \   00000028   ....               RCALL   ??Subroutine140_0
   \                     ??CrossCallReturnLabel_302:
   \   0000002A   27A0               EOR     R26, R16
   \   0000002C   2FEA               MOV     R30, R26
   \   0000002E   E0F0               LDI     R31, 0
   \   00000030   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000032   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000034   BF3B               OUT     0x3B, R19
   \   00000036   9106               ELPM    R16, Z
   \   00000038   9601               ADIW    R25:R24, 1
   \                     ??CalcDSTxChecksumUART16552_0:
   \   0000003A   1782               CP      R24, R18
   \   0000003C   0797               CPC     R25, R23
   \   0000003E   F350               BRCS    ??CalcDSTxChecksumUART16552_1
    930              return csum;
   \   00000040   E0E3               LDI     R30, 3
   \   00000042   ........           JMP     ?EPILOGUE_B3_L09
    931          }
    932          
    933          /*************************************************************************
    934          *
    935          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    936          *
    937          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    938          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   ....               RCALL   ?Subroutine43
    939          
    940              short cnt;
    941              unsigned char csum;
    942          
    943              csum = 0;
   \                     ??CrossCallReturnLabel_47:
   \   00000002   E020               LDI     R18, 0
    944              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   00000004   E060               LDI     R22, 0
   \   00000006   E070               LDI     R23, 0
   \   00000008   2F40               MOV     R20, R16
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_241:
   \   0000000E   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_301:
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   8502               LDD     R16, Z+10
   \   00000014   8513               LDD     R17, Z+11
   \   00000016   ....               LDI     R19, (crc) >> 16
   \   00000018   C00D               RJMP    ??CalcDSRxChecksum16552_0
    945                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum16552_1:
   \   0000001A   2F42               MOV     R20, R18
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   0FE6               ADD     R30, R22
   \   00000020   1FF7               ADC     R31, R23
   \   00000022   8120               LD      R18, Z
   \   00000024   2742               EOR     R20, R18
   \   00000026   01FA               MOVW    R31:R30, R21:R20
   \   00000028   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002A   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000002C   BF3B               OUT     0x3B, R19
   \   0000002E   9126               ELPM    R18, Z
    946              }
   \   00000030   5F6F               SUBI    R22, 255
   \   00000032   4F7F               SBCI    R23, 255
   \                     ??CalcDSRxChecksum16552_0:
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8986               LDD     R24, Z+22
   \   00000038   8997               LDD     R25, Z+23
   \   0000003A   9702               SBIW    R25:R24, 2
   \   0000003C   1768               CP      R22, R24
   \   0000003E   0779               CPC     R23, R25
   \   00000040   F360               BRCS    ??CalcDSRxChecksum16552_1
    947              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \   00000042   8946               LDD     R20, Z+22
   \   00000044   8957               LDD     R21, Z+23
   \   00000046   0F04               ADD     R16, R20
   \   00000048   1F15               ADC     R17, R21
   \   0000004A   5002               SUBI    R16, 2
   \   0000004C   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_305:
   \   0000004E   1720               CP      R18, R16
   \   00000050   F411               BRNE    ??CalcDSRxChecksum16552_2
    948                  return true;
   \   00000052   E001               LDI     R16, 1
   \   00000054   C001               RJMP    ??CalcDSRxChecksum16552_3
    949              } else {
    950                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   00000056   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   00000058   E010               LDI     R17, 0
    951              }
   \   0000005A   ....               RJMP    ?Subroutine118
    952          }
    953          
    954          /*************************************************************************
    955          *
    956          * Goes to sync mode
    957          *
    958          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    959          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
    960          
    961              if (ch < 2) {
   \   00000000   3002               CPI     R16, 2
   \   00000002   F438               BRCC    ??GoToSyncUART16552_0
    962                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000004   ....               RCALL   ??Subroutine127_0
   \                     ??CrossCallReturnLabel_237:
   \   00000006   8B53               STD     Z+19, R21
    963                  UART16552[ch].RxState = SYNC;
   \   00000008   8B52               STD     Z+18, R21
    964                  UART16552[ch].RxFirst = 0;
   \   0000000A   8754               STD     Z+12, R21
   \   0000000C   8755               STD     Z+13, R21
    965                  UART16552[ch].RxPacklen = 0;
   \   0000000E   8B56               STD     Z+22, R21
   \   00000010   8B57               STD     Z+23, R21
    966              }
    967          }
   \                     ??GoToSyncUART16552_0:
   \   00000012   9508               RET
    968          
    969          /*************************************************************************
    970          *
    971          *  Empty rx buffer on PC16552 UART
    972          *
    973          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    974          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
    975          
    976              switch (uartno) {
   \   00000000   2300               TST     R16
   \   00000002   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000004   950A               DEC     R16
   \   00000006   F041               BREQ    ??EmptyRxBuf16552_1
   \   00000008   9508               RET
    977              case 0:
    978                  do {
    979                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000A   91001108           LDS     R16, 4360
    980                  } while (U0_LSR & DATA_READY);
   \   0000000E   9100110D           LDS     R16, 4365
   \   00000012   FD00               SBRC    R16, 0
   \   00000014   CFFA               RJMP    ??EmptyRxBuf16552_0
   \   00000016   9508               RET
    981                  break;
    982              case 1:
    983                  do {
    984                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   00000018   91001100           LDS     R16, 4352
    985                  } while (U1_LSR & DATA_READY);
   \   0000001C   91001105           LDS     R16, 4357
   \   00000020   FD00               SBRC    R16, 0
   \   00000022   CFFA               RJMP    ??EmptyRxBuf16552_1
    986                  break;
    987              }
    988          }
   \   00000024   9508               RET
    989          
    990          /*************************************************************************
    991          *
    992          *  Init the PC16552 UART
    993          *
    994          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    995          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
    996          
    997              /*--- Configure UART data block ---*/
    998              UART16552[channel].TxFirst = 0x00;
   \   00000008   ....               LDI     R18, LOW(UART16552)
   \   0000000A   ....               LDI     R19, (UART16552) >> 8
   \   0000000C   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_219:
   \   0000000E   01F9               MOVW    R31:R30, R19:R18
   \   00000010   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_270:
   \   00000012   8352               STD     Z+2, R21
   \   00000014   8353               STD     Z+3, R21
    999              UART16552[channel].TxLast = 0x00;
   \   00000016   8354               STD     Z+4, R21
   \   00000018   8355               STD     Z+5, R21
   1000              UART16552[channel].TxCount = 0x00;
   \   0000001A   8356               STD     Z+6, R21
   \   0000001C   8357               STD     Z+7, R21
   1001              UART16552[channel].RxFirst = 0x00;
   \   0000001E   ....               RCALL   ?Subroutine31
   1002              UART16552[channel].RxLast = 0x00;
   1003              UART16552[channel].RxCount = 0x00;
   \                     ??CrossCallReturnLabel_31:
   \   00000020   8B50               STD     Z+16, R21
   \   00000022   8B51               STD     Z+17, R21
   1004              UART16552[channel].RxState = SYNC;
   \   00000024   8B52               STD     Z+18, R21
   1005              UART16552[channel].SyncCnt = 0;
   \   00000026   8B53               STD     Z+19, R21
   1006              UART16552[channel].TxStatus = 0x00;
   \   00000028   8750               STD     Z+8, R21
   1007          
   1008              switch (channel) {
   \   0000002A   2022               TST     R2
   \   0000002C   F019               BREQ    ??Init16552_0
   \   0000002E   942A               DEC     R2
   \   00000030   F129               BREQ    ??Init16552_1
   \   00000032   C047               RJMP    ??Init16552_2
   1009              case 0x00 :
   1010                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   00000034   EF0A               LDI     R16, 250
   \   00000036   01F9               MOVW    R31:R30, R19:R18
   \   00000038   8B04               STD     Z+20, R16
   \   0000003A   8B55               STD     Z+21, R21
   1011                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   0000003C   ....               LDI     R16, LOW(TxBuf16552Ch0)
   \   0000003E   ....               LDI     R17, (TxBuf16552Ch0) >> 8
   \   00000040   8300               ST      Z, R16
   \   00000042   8311               STD     Z+1, R17
   1012                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   00000044   ....               LDI     R16, LOW(RxBuf16552Ch0)
   \   00000046   ....               LDI     R17, (RxBuf16552Ch0) >> 8
   \   00000048   8702               STD     Z+10, R16
   \   0000004A   8713               STD     Z+11, R17
   1013                  U0_LCR = 0x80;          // set DLAB
   \   0000004C   E800               LDI     R16, 128
   \   0000004E   9300110B           STS     4363, R16
   1014                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   00000052   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_55:
   \   00000054   93001108           STS     4360, R16
   1015                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   00000058   93101109           STS     4361, R17
   1016                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   0000005C   E003               LDI     R16, 3
   \   0000005E   9300110B           STS     4363, R16
   1017                  U0_FCR = 0x01;          // enable FIFO ..
   \   00000062   E001               LDI     R16, 1
   \   00000064   9300110A           STS     4362, R16
   1018                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   00000068   EC01               LDI     R16, 193
   \   0000006A   9300110A           STS     4362, R16
   1019                  U0_IER = 0x03;          // enable TX and RX int.
   \   0000006E   E003               LDI     R16, 3
   \   00000070   93001109           STS     4361, R16
   1020                  U0_MCR = 0x00;          // RTS off
   \   00000074   E000               LDI     R16, 0
   \   00000076   9300110C           STS     4364, R16
   1021                  break;
   \   0000007A   C023               RJMP    ??Init16552_2
   1022              case 0x01 :
   1023                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   0000007C   EF0A               LDI     R16, 250
   \   0000007E   01F9               MOVW    R31:R30, R19:R18
   \   00000080   A706               STD     Z+46, R16
   \   00000082   A757               STD     Z+47, R21
   1024                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   00000084   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   00000086   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   00000088   8F02               STD     Z+26, R16
   \   0000008A   8F13               STD     Z+27, R17
   1025                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   0000008C   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   0000008E   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   00000090   A304               STD     Z+36, R16
   \   00000092   A315               STD     Z+37, R17
   1026                  U1_LCR = 0x80;          // set DLAB
   \   00000094   E800               LDI     R16, 128
   \   00000096   93001103           STS     4355, R16
   1027                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000009A   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_56:
   \   0000009C   93001100           STS     4352, R16
   1028                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000A0   93101101           STS     4353, R17
   1029                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000A4   E003               LDI     R16, 3
   \   000000A6   93001103           STS     4355, R16
   1030                  U1_FCR = 0x01;          // enable FIFO ..
   \   000000AA   E001               LDI     R16, 1
   \   000000AC   93001102           STS     4354, R16
   1031                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000000B0   EC01               LDI     R16, 193
   \   000000B2   93001102           STS     4354, R16
   1032                  U1_IER = 0x03;          // enable TX and RX int.
   \   000000B6   E003               LDI     R16, 3
   \   000000B8   93001101           STS     4353, R16
   1033                  U1_MCR = 0x00;          // RTS off
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   93001104           STS     4356, R16
   1034                  break;
   1035              default:
   1036                  break;
   1037              }
   1038          }
   \                     ??Init16552_2:
   \   000000C2   9189               LD      R24, Y+
   \   000000C4                      REQUIRE ?Subroutine116
   \   000000C4                      ;               // Fall through to label ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   E710               LDI     R17, 112
   \   00000002   E020               LDI     R18, 0
   \   00000004   E030               LDI     R19, 0
   \   00000006   01AC               MOVW    R21:R20, R25:R24
   \   00000008   ........           JMP     ?UL_DIVMOD_L03

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart16552>_0`:
   \   00000000   00                 DB      0
   \   00000001   01                 DB      1
   \   00000002   ....               DW      (??CheckActionUart16552_1) /2
   \   00000004   ....               DW      (??CheckActionUart16552_13) /2
   \   00000006   01                 DB      0x1
   \   00000007   ....               DW      (??CheckActionUart16552_13) /2
   \   00000009   1D                 DB      0x1d
   \   0000000A   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000C   01                 DB      0x1
   \   0000000D   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000F   01                 DB      0x1
   \   00000010   ....               DW      (??CheckActionUart16552_0) /2
   \   00000012   01                 DB      0x1
   \   00000013   ....               DW      (??CheckActionUart16552_3) /2
   \   00000015   01                 DB      0x1
   \   00000016   ....               DW      (??CheckActionUart16552_3) /2
   \   00000018   01                 DB      0x1
   \   00000019   ....               DW      (??CheckActionUart16552_3) /2
   \   0000001B   01                 DB      0x1
   \   0000001C   ....               DW      (??CheckActionUart16552_4) /2
   \   0000001E   01                 DB      0x1
   \   0000001F   ....               DW      (??CheckActionUart16552_6) /2
   \   00000021   07                 DB      0x7
   \   00000022   ....               DW      (??CheckActionUart16552_7) /2
   \   00000024   03                 DB      0x3
   \   00000025   ....               DW      (??CheckActionUart16552_5) /2
   \   00000027   02                 DB      0x2
   \   00000028   ....               DW      (??CheckActionUart16552_2) /2
   \   0000002A   4D                 DB      0x4d
   \   0000002B   ....               DW      (??CheckActionUart16552_8) /2
   \   0000002D   01                 DB      0x1
   \   0000002E   ....               DW      (??CheckActionUart16552_10) /2
   \   00000030   01                 DB      0x1
   \   00000031   ....               DW      (??CheckActionUart16552_9) /2
   \   00000033   34                 DB      0x34
   \   00000034   ....               DW      (??CheckActionUart16552_11) /2
   \   00000036   01                 DB      0x1
   \   00000037   ....               DW      (??CheckActionUart16552_12) /2
   \   00000039   FB                 DB      251

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   CalcDSRxChecksum16552
        4      2 ?S_EC_MUL_L02
      3      2   CalcDSTxChecksumUART16552
        3      2 ?S_EC_MUL_L02
      4      2   CheckActionUart16552
        4      2   -> ReceiveCData
        4      2   -> ReceiveCardEEPROMData
        4      2   -> ReceiveCardStatus
        4      2   -> ReceiveConfigData
        4      2   -> ReceivePTOData
        4      2   -> ReceiveRData
        4      2   -> ReceiveRadarData
        4      2   -> ReceiveRadarInfo
        4      2   -> ReceiveWHData
        4      2   -> ReceiveWISData
        4      2   -> ReceiveWISStatus
        4      2   -> ReceiveWISXData
        4      2 ?CV_SWITCH_L06
        4      4 ?S_EC_MUL_L02
      0      2   EmptyRxBuf16552
      6      2   ExtRS485Ctl
        6      2   -> EmptyRxBuf16552
        6      2   -> Init16552
        6      2   -> OS_Delay
        6      2   -> OS_WaitEventTimed
        6      2   -> ReadEEPROMByte
        6      2   -> Uart_BuildReqC16552
        6      2   -> Uart_BuildReqCardStatus
        6      2   -> Uart_BuildReqConfig
        6      2   -> Uart_BuildReqEEPROMData
        6      2   -> Uart_BuildReqM16552
        6      2   -> Uart_BuildReqR16552
        6      2   -> Uart_BuildReqRadarData
        6      2   -> Uart_BuildReqRadarInfo
        6      2   -> Uart_BuildReqWISCardStatus
        6      2   -> Uart_BuildReqWISData
        6      2   -> Uart_BuildReqWISXData
        6      2   -> Uart_BuildSndData
        6      2   -> Uart_BuildTail16552
        6      4 ?SS_SHR_L02
        6      2 ?S_SHL_L02
      4      2   ExtRS485Rec
        4      2   -> OS_Delay
        4      2   -> OS_SignalEvent
        4      2   -> OS_WaitEventTimed
        4      4   -> Usart16552CheckPackage
        4      4 ?SS_SHR_L02
        4      4 ?S_SHL_L02
      0      2   GoToSyncUART16552
        0      4 ?S_EC_MUL_L02
      2      2   Init16552
        2      2 ?S_EC_MUL_L02
        2      2 ?UL_DIVMOD_L03
      7      2   ReceiveCData
        7      6 ?S_EC_MUL_L02
      4      2   ReceiveCardEEPROMData
        4      2 ?S_EC_MUL_L02
        4      4 ?S_EC_MUL_L02
      0      2   ReceiveCardStatus
        0      6 ?S_EC_MUL_L02
      6      2   ReceiveConfigData
        6      4 ?S_EC_MUL_L02
        6      6 ?S_EC_MUL_L02
     12      2   ReceivePTOData
       12      2   -> OS_Unuse
       12      2   -> OS_Use
       12      2 ?S_EC_MUL_L02
       12      4 ?S_EC_MUL_L02
      4      2   ReceivePacketUart16552
        4      2   -> CalcDSRxChecksum16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_SignalEvent
        4      4 ?S_EC_MUL_L02
      7      2   ReceiveRData
        7      6 ?S_EC_MUL_L02
      8      2   ReceiveRadarData
        8      2 ?S_EC_MUL_L02
        8      6 ?S_EC_MUL_L02
      0      2   ReceiveRadarInfo
        0      4 ?S_EC_MUL_L02
      8      2   ReceiveWHData
        8      2   -> OS_Unuse
        8      2   -> OS_Use
        8      4 ?S_EC_MUL_L02
        8      2 ?S_SHL_L02
      6      2   ReceiveWISData
        6      2 ?F_DIV_L04
        6      2 ?SL2F_L04
        6      4 ?S_EC_MUL_L02
        6      6 ?S_EC_MUL_L02
        6      2 ?UL2F_L04
      0      2   ReceiveWISStatus
        0      6 ?S_EC_MUL_L02
      1      2   ReceiveWISXData
        1      2 ?S_EC_MUL_L02
        1      4 ?S_EC_MUL_L02
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqC16552
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqCardStatus
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqConfig
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqEEPROMData
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqM16552
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqR16552
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarData
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarInfo
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISCardStatus
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISData
        0      4 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISXData
        0      4 ?S_EC_MUL_L02
      4      2   Uart_BuildSndData
        4      2 ?S_EC_MUL_L02
      4      2   Uart_BuildTail16552
        4      2   -> CalcDSTxChecksumUART16552
        4      2   -> GoToSyncUART16552
        4      4   -> OS_Delay
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader16552
        4      2 ?S_EC_MUL_L02
      7      2   Usart16552CheckPackage
        7      2   -> CheckActionUart16552
        7      2   -> GoToSyncUART16552
        7      2 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      58  ?<Jumptable for CheckActionUart16552>_0
       4  ??Subroutine125_0
      12  ??Subroutine126_0
       8  ??Subroutine127_0
       6  ??Subroutine128_0
      14  ??Subroutine129_0
       8  ??Subroutine130_0
      10  ??Subroutine131_0
       6  ??Subroutine132_0
      14  ??Subroutine133_0
       2  ??Subroutine134_0
       2  ??Subroutine135_0
       2  ??Subroutine136_0
       4  ??Subroutine137_0
       4  ??Subroutine138_0
       6  ??Subroutine139_0
       6  ??Subroutine140_0
       2  ?Subroutine0
       2  ?Subroutine1
       8  ?Subroutine10
       4  ?Subroutine100
       2  ?Subroutine101
       2  ?Subroutine102
       6  ?Subroutine103
       4  ?Subroutine104
      10  ?Subroutine105
       6  ?Subroutine107
       6  ?Subroutine108
       6  ?Subroutine109
      14  ?Subroutine11
       6  ?Subroutine110
       6  ?Subroutine111
       6  ?Subroutine112
       6  ?Subroutine113
       6  ?Subroutine114
       4  ?Subroutine115
       4  ?Subroutine116
       4  ?Subroutine117
       6  ?Subroutine118
       4  ?Subroutine119
      12  ?Subroutine12
       2  ?Subroutine120
       6  ?Subroutine121
       6  ?Subroutine122
       6  ?Subroutine123
       4  ?Subroutine124
       4  ?Subroutine13
      20  ?Subroutine15
      28  ?Subroutine16
      18  ?Subroutine17
      12  ?Subroutine18
      14  ?Subroutine19
      18  ?Subroutine2
       6  ?Subroutine20
       6  ?Subroutine21
       6  ?Subroutine22
       6  ?Subroutine23
       2  ?Subroutine24
       2  ?Subroutine25
      10  ?Subroutine27
       4  ?Subroutine29
       4  ?Subroutine3
      10  ?Subroutine31
       4  ?Subroutine32
       4  ?Subroutine33
       6  ?Subroutine34
       2  ?Subroutine35
       6  ?Subroutine36
       8  ?Subroutine37
      12  ?Subroutine38
       4  ?Subroutine39
      20  ?Subroutine4
      14  ?Subroutine40
       4  ?Subroutine41
       4  ?Subroutine43
       4  ?Subroutine44
      10  ?Subroutine45
       6  ?Subroutine47
      12  ?Subroutine48
       4  ?Subroutine49
       6  ?Subroutine5
       2  ?Subroutine50
       2  ?Subroutine51
       4  ?Subroutine53
      10  ?Subroutine54
       4  ?Subroutine55
       2  ?Subroutine56
      10  ?Subroutine57
       4  ?Subroutine58
       6  ?Subroutine59
      10  ?Subroutine6
       6  ?Subroutine60
       4  ?Subroutine61
      12  ?Subroutine62
       6  ?Subroutine64
       4  ?Subroutine65
       6  ?Subroutine66
       6  ?Subroutine67
       4  ?Subroutine68
       6  ?Subroutine69
       2  ?Subroutine7
      20  ?Subroutine70
       8  ?Subroutine71
       8  ?Subroutine72
       8  ?Subroutine73
       2  ?Subroutine74
       2  ?Subroutine75
      16  ?Subroutine76
       4  ?Subroutine77
       6  ?Subroutine78
       6  ?Subroutine79
      26  ?Subroutine8
       6  ?Subroutine80
       8  ?Subroutine81
       4  ?Subroutine82
       4  ?Subroutine83
      10  ?Subroutine84
       8  ?Subroutine85
       2  ?Subroutine86
       2  ?Subroutine87
      10  ?Subroutine89
       4  ?Subroutine9
       8  ?Subroutine90
       6  ?Subroutine91
       4  ?Subroutine92
       2  ?Subroutine93
      12  ?Subroutine94
       4  ?Subroutine95
       8  ?Subroutine96
       6  ?Subroutine98
       4  ?Subroutine99
      92  CalcDSRxChecksum16552
      70  CalcDSTxChecksumUART16552
     102  CheckActionUart16552
      38  EmptyRxBuf16552
     760  ExtRS485Ctl
     228  ExtRS485Rec
      20  GoToSyncUART16552
     196  Init16552
      32  ReceiveCData
      74  ReceiveCardEEPROMData
      26  ReceiveCardStatus
      68  ReceiveConfigData
     136  ReceivePTOData
     212  ReceivePacketUart16552
      32  ReceiveRData
      74  ReceiveRadarData
      20  ReceiveRadarInfo
     250  ReceiveWHData
     102  ReceiveWISData
      56  ReceiveWISStatus
      90  ReceiveWISXData
       8  SetRS4Port
       4  TimoutUART0
       2  TimoutUART1
      48  Uart_BuildHeader16552
       6  Uart_BuildReqC16552
       4  Uart_BuildReqCardStatus
       6  Uart_BuildReqConfig
      32  Uart_BuildReqEEPROMData
       6  Uart_BuildReqM16552
       6  Uart_BuildReqR16552
       6  Uart_BuildReqRadarData
       4  Uart_BuildReqRadarInfo
       6  Uart_BuildReqWISCardStatus
       6  Uart_BuildReqWISData
      30  Uart_BuildReqWISXData
      82  Uart_BuildSndData
     156  Uart_BuildTail16552
      80  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 4 066 bytes in segment CODE
    58 bytes in segment SWITCH
 
 4 124 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 3
