###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            07/Feb/2017  12:16:23
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\RS485.c
#    Command line =  
#        D:\S2Prog\IO\ANZB\Src\RS485.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB\Release\Obj -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\ANZB\Release\List -y --initializers_in_flash --no_tbaa
#        --enable_external_bus -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB\INC\ -I D:\S2Prog\IO\ANZB\..\..\SHARED\INC\
#        --eeprom_size 4096 --clib -Oh
#    List file    =  D:\S2Prog\IO\ANZB\Release\List\RS485.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release\Obj\RS485.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          //#include "stdlib.h"
     13          //#include "string.h"
     14          
     15          
     16          
     17          /************************************************ *************************
     18          *   (This is a timer calback)
     19          *  Timout timer UART 0
     20          *
     21          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     22          void TimoutUART0(void) {
   \                     TimoutUART0:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     23          
     24              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   E0EC               LDI     R30, LOW(4364)
   \   00000002                      REQUIRE ?Subroutine2
   \   00000002                      ;               // Fall through to label ?Subroutine2
     25          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   E1F1               LDI     R31, (4364) >> 8
   \   00000002   8100               LD      R16, Z
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   8300               ST      Z, R16
   \   00000008   9508               RET
     26          
     27          /*************************************************************************
     28          *   (This is a timer calback)
     29          *  Timout timer UART 1
     30          *
     31          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     32          void TimoutUART1(void) {
   \                     TimoutUART1:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     33          
     34              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   E0E4               LDI     R30, LOW(4356)
   \   00000002   ....               RJMP    ?Subroutine2
     35          }
     36          
     37          
     38          /*************************************************************************
     39          *   (This is a task)
     40          *  Usart handler UART send request
     41          *
     42          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     43          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000A                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000A                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000A                      REQUIRE __RSTACK_in_external_ram_new_way
     44              char SeqCnt = 0;
   \   0000000A   2444               CLR     R4
     45              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   0000000C   E005               LDI     R16, 5
   \   0000000E   2E50               MOV     R5, R16
     46              char EventStatus;
     47              char AskMD[2];
     48          
     49              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000010   E840               LDI     R20, 128
   \   00000012   E255               LDI     R21, 37
   \   00000014   E060               LDI     R22, 0
   \   00000016   E070               LDI     R23, 0
   \   00000018   E000               LDI     R16, 0
   \   0000001A   ....               RCALL   Init16552
     50              Init16552(1, 9600);                                      // Init UART channel 1
   \   0000001C   ....               LDI     R26, LOW(UART16552)
   \   0000001E   ....               LDI     R27, (UART16552) >> 8
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   8E44               STD     Z+28, R4
   \   00000024   8E45               STD     Z+29, R4
   \   00000026   8E46               STD     Z+30, R4
   \   00000028   8E47               STD     Z+31, R4
   \   0000002A   A240               STD     Z+32, R4
   \   0000002C   A241               STD     Z+33, R4
   \   0000002E   A246               STD     Z+38, R4
   \   00000030   A247               STD     Z+39, R4
   \   00000032   A640               STD     Z+40, R4
   \   00000034   A641               STD     Z+41, R4
   \   00000036   A642               STD     Z+42, R4
   \   00000038   A643               STD     Z+43, R4
   \   0000003A   A644               STD     Z+44, R4
   \   0000003C   A645               STD     Z+45, R4
   \   0000003E   A242               STD     Z+34, R4
   \   00000040   EF0A               LDI     R16, 250
   \   00000042   A706               STD     Z+46, R16
   \   00000044   A647               STD     Z+47, R4
   \   00000046   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   00000048   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   0000004A   8F02               STD     Z+26, R16
   \   0000004C   8F13               STD     Z+27, R17
   \   0000004E   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   00000050   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   00000052   A304               STD     Z+36, R16
   \   00000054   A315               STD     Z+37, R17
   \   00000056   E800               LDI     R16, 128
   \   00000058   93001103           STS     4355, R16
   \   0000005C   E00D               LDI     R16, 13
   \   0000005E   93001100           STS     4352, R16
   \   00000062   92401101           STS     4353, R4
   \   00000066   E003               LDI     R16, 3
   \   00000068   93001103           STS     4355, R16
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   93001102           STS     4354, R16
   \   00000072   EC01               LDI     R16, 193
   \   00000074   93001102           STS     4354, R16
   \   00000078   E003               LDI     R16, 3
   \   0000007A   93001101           STS     4353, R16
   \   0000007E   92401104           STS     4356, R4
     51          
     52              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   00000082   E002               LDI     R16, 2
   \   00000084   E010               LDI     R17, 0
   \   00000086   ........           CALL    ReadEEPROMByte
   \   0000008A   9300....           STS     TData, R16
     53              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   0000008E   E003               LDI     R16, 3
   \   00000090   E010               LDI     R17, 0
   \   00000092   ........           CALL    ReadEEPROMByte
   \   00000096   9300....           STS     (TData + 1), R16
     54              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   0000009A   E004               LDI     R16, 4
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   ........           CALL    ReadEEPROMByte
   \   000000A2   9300....           STS     (TData + 2), R16
     55          
     56              TData.RS4.ToTargetBuffer[0][0] = false;
   \   000000A6   9240....           STS     (TData + 1268), R4
     57              TData.RS4.ToTargetBuffer[1][0] = false;
   \   000000AA   9240....           STS     (TData + 1348), R4
     58              TData.RS4.FromTargetBuffer[0][0] = false;
   \   000000AE   9240....           STS     (TData + 1428), R4
     59              TData.RS4.FromTargetBuffer[1][0] = false;
   \   000000B2   9240....           STS     (TData + 1478), R4
     60          
     61              for (char i = 0; i < 8; i++) {
   \   000000B6   2466               CLR     R6
     62                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \                     ??ExtRS485Ctl_0:
   \   000000B8   94F8               CLI
   \   000000BA   9120....           LDS     R18, TData
   \   000000BE   2D46               MOV     R20, R6
   \   000000C0   E001               LDI     R16, 1
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   ........           CALL    ?S_SHL_L02
   \   000000C8   2320               AND     R18, R16
   \   000000CA   B305               IN      R16, 0x15
   \   000000CC   2B02               OR      R16, R18
   \   000000CE   BB05               OUT     0x15, R16
   \   000000D0   9100....           LDS     R16, (OS_Counters + 1)
   \   000000D4   2300               TST     R16
   \   000000D6   F409               BRNE    ??ExtRS485Ctl_1
   \   000000D8   9478               SEI
     63                  OS_Delay(100);
   \                     ??ExtRS485Ctl_1:
   \   000000DA   E604               LDI     R16, 100
   \   000000DC   E010               LDI     R17, 0
   \   000000DE   ........           CALL    OS_Delay
     64              }
   \   000000E2   9463               INC     R6
   \   000000E4   E008               LDI     R16, 8
   \   000000E6   1660               CP      R6, R16
   \   000000E8   F338               BRCS    ??ExtRS485Ctl_0
     65              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \   000000EA   E700               LDI     R16, 112
   \   000000EC   E117               LDI     R17, 23
   \   000000EE   ........           CALL    OS_Delay
   \   000000F2   C005               RJMP    ??ExtRS485Ctl_2
     66          
     67              while (1) {
     68                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
     69                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
     70                          EmptyRxBuf16552(0);                            // Empty UART channel 0
     71                      }
     72                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
     73                          EmptyRxBuf16552(1);                            // Empty UART channel 1
     74                      }
     75                      if (PowerOnTimer < POWER_ON_CNT) {
     76                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
     77                              SetRS4Port();                                // and set power on ports
     78                          }
     79                      }
     80                      SetBit(PORTE, 0xf0);
     81                      ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
     82                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
     83                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
     84                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
     85                          switch (SnsType) {
     86                          case 0x01:    //Water ingress??
     87                              switch (SeqCnt) {
     88                              case 0:
     89                                  Uart_BuildReqWISCardStatus(0);          //Card status
     90                                  break;
     91                              case 20:
     92                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
     93                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
     94                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
     95                                          TData.RS4.EEPROMPortpair[0] = 0;
     96                                      }
     97                                  } else {
     98                                      Uart_BuildReqWISData(0);                //WIS data
     99                                  }
    100                                  break;
    101                              default:
    102                                  Uart_BuildReqWISData(0);                //WIS data
    103                                  break;
    104                              }
    105                              break;
    106                          case 0x02: // Radar??
    107                              switch (SeqCnt) {
    108                              case 20:
    109                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    110                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    111                                          TData.RS4.EEPROMPortpair[0] = 0;
    112                                      }
    113                                  }
    114                                  // Fall through and send the request
    115                              default:
    116                                  Uart_BuildReqRadarData(0);          // Radar data
    117                                  break;
    118                              case 0:
    119                                  Uart_BuildReqRadarInfo(0);          //Radar Information
    120                                  break;
    121                              }
    122                              break;
    123                          case 0x00:  // AN-SGCNV
    124                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    125                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
    126                                  Uart_BuildSndData(0);                       // add data to AD card package
    127                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    128                                  AskMD[0] = false;
    129                              } else {
    130                                  AskMD[0] = true;
    131                              }
    132                              if (SeqCnt == 0) {
    133                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
    134                              } else if (SeqCnt == 5) {
    135                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
    136                              } else if (SeqCnt == 10) {
    137                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    138                              } else if (SeqCnt == 15) {
    139                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
    140                              } else if (SeqCnt == 20) {
    141                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    142                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
    143                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
    144                                          TData.RS4.EEPROMADChannel[0] = 0;
    145                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    146                                              TData.RS4.EEPROMPortpair[0] = 0;
    147                                          }
    148                                      }
    149                                  } else if (AskMD[0] == true) {
    150                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    151                                  }
    152                              } else if (AskMD[0] == true) {
    153                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    154                              }
    155                              break;
    156                          }
    157                          Uart_BuildTail16552(0);
    158                      } else {
    159                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
    160                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
    161                                  TData.RS4.EEPROMPortpair[0] = 0;
    162                              }
    163                          }
    164                      }
    165                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
    166                          UART16552[1].TxFirst = 6;                       // Start at
    167                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
    168                          switch (SnsType) {
    169                          case 0x01:    //Water ingress??
    170                              switch (SeqCnt) {
    171                              case 0:
    172                                  Uart_BuildReqWISCardStatus(1);          //Card status
    173                                  break;
    174                              case 20:
    175                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    176                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
    177                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    178                                          TData.RS4.EEPROMPortpair[1] = 0;
    179                                      }
    180                                  } else {
    181                                      Uart_BuildReqWISData(1);                //WIS data
    182                                  }
    183                                  break;
    184                              default:
    185                                  Uart_BuildReqWISData(1);                //WIS data
    186                                  break;
    187                              }
    188                              break;
    189                          case 0x02:    // Radar??
    190                              switch (SeqCnt) {
    191                              case 20:
    192                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    193                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    194                                          TData.RS4.EEPROMPortpair[1] = 0;
    195                                      }
    196                                  }
    197                                  // Fall through and send the request
    198                              default:
    199                                  Uart_BuildReqRadarData(1);          // Radar data
    200                                  break;
    201                              case 0:
    202                                  Uart_BuildReqRadarInfo(1);          //Radar Information
    203                                  break;
    204                              }
    205                              break;
    206                          case 0x00:  // AN-SGCNV
    207                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    208                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
    209                                  Uart_BuildSndData(1);                       // add data to AD card package
    210                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    211                                  AskMD[1] = false;
    212                              } else {
    213                                  AskMD[1] = true;
    214                              }
    215                              if (SeqCnt == 0) {
    216                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
    217                              } else if (SeqCnt == 5) {
    218                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
    219                              } else if (SeqCnt == 10) {
    220                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    221                              } else if (SeqCnt == 15) {
    222                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
    223                              } else if (SeqCnt == 20) {
    224                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    225                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
    226                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
    227                                          TData.RS4.EEPROMADChannel[1] = 0;
    228                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    229                                              TData.RS4.EEPROMPortpair[1] = 0;
    230                                          }
    231                                      }
    232                                  } else if (AskMD[1] == true) {
    233                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    234                                  }
    235                              } else if (AskMD[1] == true) {
    236                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    237                              }
    238                              break;
    239                          }
    240                          Uart_BuildTail16552(1);
    241                      } else {
    242                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
    243                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
    244                                  TData.RS4.EEPROMPortpair[1] = 0;
    245                              }
    246                          }
    247                      }
    248                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
    249                      if (EventStatus & 0x02) {
    250                          if (PowerOnTimer >= POWER_ON_CNT) {
    251                              PowerOnTimer = 0;                              // and start over again
    252                          }
    253                      }
    254                  }
    255                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_3:
   \   000000F4   9443               INC     R4
   \   000000F6   E105               LDI     R16, 21
   \   000000F8   1640               CP      R4, R16
   \   000000FA   F008               BRCS    ??ExtRS485Ctl_2
    256                      SeqCnt = 0;
   \   000000FC   2444               CLR     R4
    257                  }
   \                     ??ExtRS485Ctl_2:
   \   000000FE   E000               LDI     R16, 0
   \   00000100   C01C               RJMP    ??ExtRS485Ctl_4
   \                     ??ExtRS485Ctl_5:
   \   00000102   9100....           LDS     R16, (TData + 1531)
   \   00000106   9110....           LDS     R17, PortPair
   \   0000010A   1701               CP      R16, R17
   \   0000010C   F441               BRNE    ??ExtRS485Ctl_6
   \   0000010E   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   00000110   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \   00000112   9503               INC     R16
   \   00000114   8300               ST      Z, R16
   \   00000116   3004               CPI     R16, 4
   \   00000118   F010               BRCS    ??ExtRS485Ctl_6
   \   0000011A   E000               LDI     R16, 0
   \   0000011C   8300               ST      Z, R16
   \                     ??ExtRS485Ctl_6:
   \   0000011E   EE28               LDI     R18, 232
   \   00000120   E033               LDI     R19, 3
   \   00000122   E001               LDI     R16, 1
   \   00000124   ........           CALL    OS_WaitEventTimed
   \   00000128   FB01               BST     R16, 1
   \   0000012A   F426               BRTC    ??ExtRS485Ctl_7
   \   0000012C   E005               LDI     R16, 5
   \   0000012E   1650               CP      R5, R16
   \   00000130   F008               BRCS    ??ExtRS485Ctl_7
   \   00000132   2455               CLR     R5
   \                     ??ExtRS485Ctl_7:
   \   00000134   9100....           LDS     R16, PortPair
   \   00000138   9503               INC     R16
   \                     ??ExtRS485Ctl_4:
   \   0000013A   9300....           STS     PortPair, R16
   \   0000013E   9100....           LDS     R16, PortPair
   \   00000142   3004               CPI     R16, 4
   \   00000144   F6B8               BRCC    ??ExtRS485Ctl_3
   \   00000146   9100....           LDS     R16, (UART16552 + 24)
   \   0000014A   3009               CPI     R16, 9
   \   0000014C   F030               BRCS    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_9:
   \   0000014E   91001108           LDS     R16, 4360
   \   00000152   9100110D           LDS     R16, 4365
   \   00000156   FD00               SBRC    R16, 0
   \   00000158   CFFA               RJMP    ??ExtRS485Ctl_9
   \                     ??ExtRS485Ctl_8:
   \   0000015A   9100....           LDS     R16, (UART16552 + 50)
   \   0000015E   3009               CPI     R16, 9
   \   00000160   F030               BRCS    ??ExtRS485Ctl_10
   \                     ??ExtRS485Ctl_11:
   \   00000162   91001100           LDS     R16, 4352
   \   00000166   91001105           LDS     R16, 4357
   \   0000016A   FD00               SBRC    R16, 0
   \   0000016C   CFFA               RJMP    ??ExtRS485Ctl_11
   \                     ??ExtRS485Ctl_10:
   \   0000016E   E005               LDI     R16, 5
   \   00000170   1650               CP      R5, R16
   \   00000172   F430               BRCC    ??ExtRS485Ctl_12
   \   00000174   9453               INC     R5
   \   00000176   1650               CP      R5, R16
   \   00000178   F018               BRCS    ??ExtRS485Ctl_12
   \   0000017A   9100....           LDS     R16, TData
   \   0000017E   BB05               OUT     0x15, R16
   \                     ??ExtRS485Ctl_12:
   \   00000180   94F8               CLI
   \   00000182   B103               IN      R16, 0x03
   \   00000184   6F00               ORI     R16, 0xF0
   \   00000186   B903               OUT     0x03, R16
   \   00000188   9100....           LDS     R16, (OS_Counters + 1)
   \   0000018C   2300               TST     R16
   \   0000018E   F409               BRNE    ??ExtRS485Ctl_13
   \   00000190   9478               SEI
   \                     ??ExtRS485Ctl_13:
   \   00000192   94F8               CLI
   \   00000194   9140....           LDS     R20, PortPair
   \   00000198   E100               LDI     R16, 16
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   ........           CALL    ?S_SHL_L02
   \   000001A0   7F00               ANDI    R16, 0xF0
   \   000001A2   9500               COM     R16
   \   000001A4   B113               IN      R17, 0x03
   \   000001A6   2310               AND     R17, R16
   \   000001A8   B913               OUT     0x03, R17
   \   000001AA   9100....           LDS     R16, (OS_Counters + 1)
   \   000001AE   2300               TST     R16
   \   000001B0   F409               BRNE    ??ExtRS485Ctl_14
   \   000001B2   9478               SEI
   \                     ??ExtRS485Ctl_14:
   \   000001B4   9100....           LDS     R16, TData
   \   000001B8   E010               LDI     R17, 0
   \   000001BA   9140....           LDS     R20, PortPair
   \   000001BE   ........           CALL    ?SS_SHR_L02
   \   000001C2   7001               ANDI    R16, 0x01
   \   000001C4   F409               BRNE    $+2+2
   \   000001C6   C0FE               RJMP    ??ExtRS485Ctl_15
   \   000001C8   E006               LDI     R16, 6
   \   000001CA   E010               LDI     R17, 0
   \   000001CC   01FD               MOVW    R31:R30, R27:R26
   \   000001CE   8302               STD     Z+2, R16
   \   000001D0   8313               STD     Z+3, R17
   \   000001D2   9100....           LDS     R16, (TData + 1)
   \   000001D6   9140....           LDS     R20, PortPair
   \   000001DA   0F44               LSL     R20
   \   000001DC   ........           CALL    ?SS_SHR_L02
   \   000001E0   7003               ANDI    R16, 0x03
   \   000001E2   F409               BRNE    $+2+2
   \   000001E4   C046               RJMP    ??ExtRS485Ctl_16
   \   000001E6   950A               DEC     R16
   \   000001E8   F019               BREQ    ??ExtRS485Ctl_17
   \   000001EA   950A               DEC     R16
   \   000001EC   F111               BREQ    ??ExtRS485Ctl_18
   \   000001EE   C0E7               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_17:
   \   000001F0   2D04               MOV     R16, R4
   \   000001F2   2044               TST     R4
   \   000001F4   F019               BREQ    ??ExtRS485Ctl_20
   \   000001F6   5104               SUBI    R16, 20
   \   000001F8   F019               BREQ    ??ExtRS485Ctl_21
   \   000001FA   C018               RJMP    ??ExtRS485Ctl_22
   \                     ??ExtRS485Ctl_20:
   \   000001FC   E604               LDI     R16, 100
   \   000001FE   C034               RJMP    ??ExtRS485Ctl_23
   \                     ??ExtRS485Ctl_21:
   \   00000200   9100....           LDS     R16, (TData + 1428)
   \   00000204   2300               TST     R16
   \   00000206   F491               BRNE    ??ExtRS485Ctl_22
   \   00000208   9100....           LDS     R16, (TData + 1530)
   \   0000020C   9110....           LDS     R17, PortPair
   \   00000210   1701               CP      R16, R17
   \   00000212   F461               BRNE    ??ExtRS485Ctl_22
   \   00000214   E713               LDI     R17, 115
   \   00000216   E000               LDI     R16, 0
   \   00000218   ....               RCALL   Uart_BuildReqWISXData
   \   0000021A   ....               LDI     R30, ((TData + 250) & 0xff) & 0xFF
   \   0000021C   ....               LDI     R31, (((TData + 1530) >> 8) & 0xff) & 0xFF
   \   0000021E   8100               LD      R16, Z
   \   00000220   9503               INC     R16
   \   00000222   8300               ST      Z, R16
   \   00000224   3004               CPI     R16, 4
   \   00000226   F408               BRCC    $+2+2
   \   00000228   C0CA               RJMP    ??ExtRS485Ctl_19
   \   0000022A   C0C2               RJMP    ??ExtRS485Ctl_24
   \                     ??ExtRS485Ctl_22:
   \   0000022C   E000               LDI     R16, 0
   \   0000022E   ....               RCALL   Uart_BuildReqWISData
   \   00000230   C0C6               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_18:
   \   00000232   2D04               MOV     R16, R4
   \   00000234   2044               TST     R4
   \   00000236   F0B9               BREQ    ??ExtRS485Ctl_25
   \   00000238   5104               SUBI    R16, 20
   \   0000023A   F491               BRNE    ??ExtRS485Ctl_26
   \   0000023C   9100....           LDS     R16, (TData + 1428)
   \   00000240   2300               TST     R16
   \   00000242   F471               BRNE    ??ExtRS485Ctl_26
   \   00000244   9100....           LDS     R16, (TData + 1530)
   \   00000248   9110....           LDS     R17, PortPair
   \   0000024C   1701               CP      R16, R17
   \   0000024E   F441               BRNE    ??ExtRS485Ctl_26
   \   00000250   ....               LDI     R30, ((TData + 250) & 0xff) & 0xFF
   \   00000252   ....               LDI     R31, (((TData + 1530) >> 8) & 0xff) & 0xFF
   \   00000254   9503               INC     R16
   \   00000256   8300               ST      Z, R16
   \   00000258   3004               CPI     R16, 4
   \   0000025A   F010               BRCS    ??ExtRS485Ctl_26
   \   0000025C   E000               LDI     R16, 0
   \   0000025E   8300               ST      Z, R16
   \                     ??ExtRS485Ctl_26:
   \   00000260   E000               LDI     R16, 0
   \   00000262   ....               RCALL   Uart_BuildReqRadarData
   \   00000264   C0AC               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_25:
   \   00000266   EA01               LDI     R16, 161
   \                     ??ExtRS485Ctl_23:
   \   00000268   91ED               LD      R30, X+
   \   0000026A   91FC               LD      R31, X
   \   0000026C   9711               SBIW    R27:R26, 1
   \   0000026E   8306               STD     Z+6, R16
   \   00000270   C062               RJMP    ??ExtRS485Ctl_27
   \                     ??ExtRS485Ctl_16:
   \   00000272   9100....           LDS     R16, (TData + 1268)
   \   00000276   3001               CPI     R16, 1
   \   00000278   F009               BREQ    $+2+2
   \   0000027A   C045               RJMP    ??ExtRS485Ctl_28
   \   0000027C   9100....           LDS     R16, (TData + 1269)
   \   00000280   9110....           LDS     R17, PortPair
   \   00000284   1701               CP      R16, R17
   \   00000286   F5F9               BRNE    ??ExtRS485Ctl_28
   \   00000288   E023               LDI     R18, 3
   \   0000028A   C011               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_30:
   \   0000028C   ....               LDI     R30, LOW(TData)
   \   0000028E   ....               LDI     R31, (TData) >> 8
   \   00000290   0FE2               ADD     R30, R18
   \   00000292   1FF5               ADC     R31, R21
   \   00000294   50EC               SUBI    R30, 12
   \   00000296   4FFB               SBCI    R31, 251
   \   00000298   8130               LD      R19, Z
   \   0000029A   01F8               MOVW    R31:R30, R17:R16
   \   0000029C   8330               ST      Z, R19
   \   0000029E   01FD               MOVW    R31:R30, R27:R26
   \   000002A0   8102               LDD     R16, Z+2
   \   000002A2   8113               LDD     R17, Z+3
   \   000002A4   5F0F               SUBI    R16, 255
   \   000002A6   4F1F               SBCI    R17, 255
   \   000002A8   8302               STD     Z+2, R16
   \   000002AA   8313               STD     Z+3, R17
   \   000002AC   9523               INC     R18
   \                     ??ExtRS485Ctl_29:
   \   000002AE   8100               LD      R16, Z
   \   000002B0   8111               LDD     R17, Z+1
   \   000002B2   8142               LDD     R20, Z+2
   \   000002B4   8153               LDD     R21, Z+3
   \   000002B6   0F04               ADD     R16, R20
   \   000002B8   1F15               ADC     R17, R21
   \   000002BA   E050               LDI     R21, 0
   \   000002BC   91E0....           LDS     R30, (TData + 1270)
   \   000002C0   E0F0               LDI     R31, 0
   \   000002C2   9633               ADIW    R31:R30, 3
   \   000002C4   172E               CP      R18, R30
   \   000002C6   075F               CPC     R21, R31
   \   000002C8   F30C               BRLT    ??ExtRS485Ctl_30
   \   000002CA   9350....           STS     (TData + 1268), R21
   \   000002CE   E121               LDI     R18, 17
   \   000002D0   01F8               MOVW    R31:R30, R17:R16
   \   000002D2   8320               ST      Z, R18
   \   000002D4   01FD               MOVW    R31:R30, R27:R26
   \   000002D6   8102               LDD     R16, Z+2
   \   000002D8   8113               LDD     R17, Z+3
   \   000002DA   5F0F               SUBI    R16, 255
   \   000002DC   4F1F               SBCI    R17, 255
   \   000002DE   8302               STD     Z+2, R16
   \   000002E0   8313               STD     Z+3, R17
   \   000002E2   E020               LDI     R18, 0
   \   000002E4   8100               LD      R16, Z
   \   000002E6   8111               LDD     R17, Z+1
   \   000002E8   8142               LDD     R20, Z+2
   \   000002EA   8153               LDD     R21, Z+3
   \   000002EC   0F04               ADD     R16, R20
   \   000002EE   1F15               ADC     R17, R21
   \   000002F0   01F8               MOVW    R31:R30, R17:R16
   \   000002F2   8320               ST      Z, R18
   \   000002F4   01FD               MOVW    R31:R30, R27:R26
   \   000002F6   8102               LDD     R16, Z+2
   \   000002F8   8113               LDD     R17, Z+3
   \   000002FA   5F0F               SUBI    R16, 255
   \   000002FC   4F1F               SBCI    R17, 255
   \   000002FE   8302               STD     Z+2, R16
   \   00000300   8313               STD     Z+3, R17
   \   00000302   E000               LDI     R16, 0
   \   00000304   C001               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_28:
   \   00000306   E001               LDI     R16, 1
   \                     ??ExtRS485Ctl_31:
   \   00000308   2044               TST     R4
   \   0000030A   F419               BRNE    ??ExtRS485Ctl_32
   \   0000030C   E000               LDI     R16, 0
   \   0000030E   ....               RCALL   Uart_BuildReqCardStatus
   \   00000310   C056               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_32:
   \   00000312   E015               LDI     R17, 5
   \   00000314   1641               CP      R4, R17
   \   00000316   F419               BRNE    ??ExtRS485Ctl_33
   \   00000318   E000               LDI     R16, 0
   \   0000031A   ....               RCALL   Uart_BuildReqR16552
   \   0000031C   C050               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_33:
   \   0000031E   E01A               LDI     R17, 10
   \   00000320   1641               CP      R4, R17
   \   00000322   F509               BRNE    ??ExtRS485Ctl_34
   \   00000324   E121               LDI     R18, 17
   \   00000326   8100               LD      R16, Z
   \   00000328   8111               LDD     R17, Z+1
   \   0000032A   8142               LDD     R20, Z+2
   \   0000032C   8153               LDD     R21, Z+3
   \   0000032E   0F04               ADD     R16, R20
   \   00000330   1F15               ADC     R17, R21
   \   00000332   01F8               MOVW    R31:R30, R17:R16
   \   00000334   8320               ST      Z, R18
   \                     ??ExtRS485Ctl_27:
   \   00000336   01FD               MOVW    R31:R30, R27:R26
   \   00000338   8102               LDD     R16, Z+2
   \   0000033A   8113               LDD     R17, Z+3
   \   0000033C   5F0F               SUBI    R16, 255
   \   0000033E   4F1F               SBCI    R17, 255
   \   00000340   8302               STD     Z+2, R16
   \   00000342   8313               STD     Z+3, R17
   \   00000344   E020               LDI     R18, 0
   \   00000346   8100               LD      R16, Z
   \   00000348   8111               LDD     R17, Z+1
   \   0000034A   8142               LDD     R20, Z+2
   \   0000034C   8153               LDD     R21, Z+3
   \   0000034E   0F04               ADD     R16, R20
   \   00000350   1F15               ADC     R17, R21
   \   00000352   01F8               MOVW    R31:R30, R17:R16
   \   00000354   8320               ST      Z, R18
   \   00000356   01FD               MOVW    R31:R30, R27:R26
   \   00000358   8102               LDD     R16, Z+2
   \   0000035A   8113               LDD     R17, Z+3
   \   0000035C   5F0F               SUBI    R16, 255
   \   0000035E   4F1F               SBCI    R17, 255
   \   00000360   8302               STD     Z+2, R16
   \   00000362   8313               STD     Z+3, R17
   \   00000364   C02C               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_34:
   \   00000366   E01F               LDI     R17, 15
   \   00000368   1641               CP      R4, R17
   \   0000036A   F419               BRNE    ??ExtRS485Ctl_35
   \   0000036C   E000               LDI     R16, 0
   \   0000036E   ....               RCALL   Uart_BuildReqC16552
   \   00000370   C026               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_35:
   \   00000372   E114               LDI     R17, 20
   \   00000374   1641               CP      R4, R17
   \   00000376   F4F9               BRNE    ??ExtRS485Ctl_36
   \   00000378   9110....           LDS     R17, (TData + 1428)
   \   0000037C   2311               TST     R17
   \   0000037E   F4D9               BRNE    ??ExtRS485Ctl_36
   \   00000380   9110....           LDS     R17, (TData + 1530)
   \   00000384   9120....           LDS     R18, PortPair
   \   00000388   1712               CP      R17, R18
   \   0000038A   F4A9               BRNE    ??ExtRS485Ctl_36
   \   0000038C   E000               LDI     R16, 0
   \   0000038E   ....               RCALL   Uart_BuildReqEEPROMData
   \   00000390   ....               LDI     R30, ((TData + 248) & 0xff) & 0xFF
   \   00000392   ....               LDI     R31, (((TData + 1528) >> 8) & 0xff) & 0xFF
   \   00000394   8100               LD      R16, Z
   \   00000396   5F0E               SUBI    R16, 254
   \   00000398   8300               ST      Z, R16
   \   0000039A   300F               CPI     R16, 15
   \   0000039C   F080               BRCS    ??ExtRS485Ctl_19
   \   0000039E   E000               LDI     R16, 0
   \   000003A0   8300               ST      Z, R16
   \   000003A2   ....               LDI     R30, ((TData + 250) & 0xff) & 0xFF
   \   000003A4   ....               LDI     R31, (((TData + 1530) >> 8) & 0xff) & 0xFF
   \   000003A6   8100               LD      R16, Z
   \   000003A8   9503               INC     R16
   \   000003AA   8300               ST      Z, R16
   \   000003AC   3004               CPI     R16, 4
   \   000003AE   F038               BRCS    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_24:
   \   000003B0   E000               LDI     R16, 0
   \   000003B2   8300               ST      Z, R16
   \   000003B4   C004               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_36:
   \   000003B6   FB00               BST     R16, 0
   \   000003B8   F416               BRTC    ??ExtRS485Ctl_19
   \   000003BA   E000               LDI     R16, 0
   \   000003BC   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_19:
   \   000003BE   E000               LDI     R16, 0
   \   000003C0   ....               RCALL   Uart_BuildTail16552
   \   000003C2   C00E               RJMP    ??ExtRS485Ctl_37
   \                     ??ExtRS485Ctl_15:
   \   000003C4   9100....           LDS     R16, (TData + 1530)
   \   000003C8   9110....           LDS     R17, PortPair
   \   000003CC   1701               CP      R16, R17
   \   000003CE   F441               BRNE    ??ExtRS485Ctl_37
   \   000003D0   ....               LDI     R30, ((TData + 250) & 0xff) & 0xFF
   \   000003D2   ....               LDI     R31, (((TData + 1530) >> 8) & 0xff) & 0xFF
   \   000003D4   9503               INC     R16
   \   000003D6   8300               ST      Z, R16
   \   000003D8   3004               CPI     R16, 4
   \   000003DA   F010               BRCS    ??ExtRS485Ctl_37
   \   000003DC   E000               LDI     R16, 0
   \   000003DE   8300               ST      Z, R16
   \                     ??ExtRS485Ctl_37:
   \   000003E0   9100....           LDS     R16, TData
   \   000003E4   E010               LDI     R17, 0
   \   000003E6   9140....           LDS     R20, PortPair
   \   000003EA   5F4C               SUBI    R20, 252
   \   000003EC   ........           CALL    ?SS_SHR_L02
   \   000003F0   7001               ANDI    R16, 0x01
   \   000003F2   F409               BRNE    $+2+2
   \   000003F4   CE86               RJMP    ??ExtRS485Ctl_5
   \   000003F6   E006               LDI     R16, 6
   \   000003F8   E010               LDI     R17, 0
   \   000003FA   01FD               MOVW    R31:R30, R27:R26
   \   000003FC   8F04               STD     Z+28, R16
   \   000003FE   8F15               STD     Z+29, R17
   \   00000400   9100....           LDS     R16, (TData + 2)
   \   00000404   9140....           LDS     R20, PortPair
   \   00000408   0F44               LSL     R20
   \   0000040A   ........           CALL    ?SS_SHR_L02
   \   0000040E   7003               ANDI    R16, 0x03
   \   00000410   F409               BRNE    $+2+2
   \   00000412   C046               RJMP    ??ExtRS485Ctl_38
   \   00000414   950A               DEC     R16
   \   00000416   F019               BREQ    ??ExtRS485Ctl_39
   \   00000418   950A               DEC     R16
   \   0000041A   F111               BREQ    ??ExtRS485Ctl_40
   \   0000041C   C0EE               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_39:
   \   0000041E   2D04               MOV     R16, R4
   \   00000420   2044               TST     R4
   \   00000422   F019               BREQ    ??ExtRS485Ctl_42
   \   00000424   5104               SUBI    R16, 20
   \   00000426   F019               BREQ    ??ExtRS485Ctl_43
   \   00000428   C018               RJMP    ??ExtRS485Ctl_44
   \                     ??ExtRS485Ctl_42:
   \   0000042A   E624               LDI     R18, 100
   \   0000042C   C034               RJMP    ??ExtRS485Ctl_45
   \                     ??ExtRS485Ctl_43:
   \   0000042E   9100....           LDS     R16, (TData + 1478)
   \   00000432   2300               TST     R16
   \   00000434   F491               BRNE    ??ExtRS485Ctl_44
   \   00000436   9100....           LDS     R16, (TData + 1531)
   \   0000043A   9110....           LDS     R17, PortPair
   \   0000043E   1701               CP      R16, R17
   \   00000440   F461               BRNE    ??ExtRS485Ctl_44
   \   00000442   E713               LDI     R17, 115
   \   00000444   E001               LDI     R16, 1
   \   00000446   ....               RCALL   Uart_BuildReqWISXData
   \   00000448   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   0000044A   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \   0000044C   8100               LD      R16, Z
   \   0000044E   9503               INC     R16
   \   00000450   8300               ST      Z, R16
   \   00000452   3004               CPI     R16, 4
   \   00000454   F408               BRCC    $+2+2
   \   00000456   C0D1               RJMP    ??ExtRS485Ctl_41
   \   00000458   C0C9               RJMP    ??ExtRS485Ctl_46
   \                     ??ExtRS485Ctl_44:
   \   0000045A   E001               LDI     R16, 1
   \   0000045C   ....               RCALL   Uart_BuildReqWISData
   \   0000045E   C0CD               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_40:
   \   00000460   2D04               MOV     R16, R4
   \   00000462   2044               TST     R4
   \   00000464   F0B9               BREQ    ??ExtRS485Ctl_47
   \   00000466   5104               SUBI    R16, 20
   \   00000468   F491               BRNE    ??ExtRS485Ctl_48
   \   0000046A   9100....           LDS     R16, (TData + 1478)
   \   0000046E   2300               TST     R16
   \   00000470   F471               BRNE    ??ExtRS485Ctl_48
   \   00000472   9100....           LDS     R16, (TData + 1531)
   \   00000476   9110....           LDS     R17, PortPair
   \   0000047A   1701               CP      R16, R17
   \   0000047C   F441               BRNE    ??ExtRS485Ctl_48
   \   0000047E   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   00000480   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \   00000482   9503               INC     R16
   \   00000484   8300               ST      Z, R16
   \   00000486   3004               CPI     R16, 4
   \   00000488   F010               BRCS    ??ExtRS485Ctl_48
   \   0000048A   E000               LDI     R16, 0
   \   0000048C   8300               ST      Z, R16
   \                     ??ExtRS485Ctl_48:
   \   0000048E   E001               LDI     R16, 1
   \   00000490   ....               RCALL   Uart_BuildReqRadarData
   \   00000492   C0B3               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_47:
   \   00000494   EA21               LDI     R18, 161
   \                     ??ExtRS485Ctl_45:
   \   00000496   8D02               LDD     R16, Z+26
   \   00000498   8DF3               LDD     R31, Z+27
   \   0000049A   2FE0               MOV     R30, R16
   \   0000049C   8326               STD     Z+6, R18
   \   0000049E   C069               RJMP    ??ExtRS485Ctl_49
   \                     ??ExtRS485Ctl_38:
   \   000004A0   9100....           LDS     R16, (TData + 1348)
   \   000004A4   3001               CPI     R16, 1
   \   000004A6   F009               BREQ    $+2+2
   \   000004A8   C04B               RJMP    ??ExtRS485Ctl_50
   \   000004AA   9100....           LDS     R16, (TData + 1349)
   \   000004AE   E010               LDI     R17, 0
   \   000004B0   91E0....           LDS     R30, PortPair
   \   000004B4   E0F0               LDI     R31, 0
   \   000004B6   9634               ADIW    R31:R30, 4
   \   000004B8   170E               CP      R16, R30
   \   000004BA   071F               CPC     R17, R31
   \   000004BC   F009               BREQ    $+2+2
   \   000004BE   C040               RJMP    ??ExtRS485Ctl_50
   \   000004C0   E023               LDI     R18, 3
   \   000004C2   C011               RJMP    ??ExtRS485Ctl_51
   \                     ??ExtRS485Ctl_52:
   \   000004C4   ....               LDI     R30, LOW(TData)
   \   000004C6   ....               LDI     R31, (TData) >> 8
   \   000004C8   0FE2               ADD     R30, R18
   \   000004CA   1FF5               ADC     R31, R21
   \   000004CC   5BEC               SUBI    R30, 188
   \   000004CE   4FFA               SBCI    R31, 250
   \   000004D0   8130               LD      R19, Z
   \   000004D2   01F8               MOVW    R31:R30, R17:R16
   \   000004D4   8330               ST      Z, R19
   \   000004D6   01FD               MOVW    R31:R30, R27:R26
   \   000004D8   8D04               LDD     R16, Z+28
   \   000004DA   8D15               LDD     R17, Z+29
   \   000004DC   5F0F               SUBI    R16, 255
   \   000004DE   4F1F               SBCI    R17, 255
   \   000004E0   8F04               STD     Z+28, R16
   \   000004E2   8F15               STD     Z+29, R17
   \   000004E4   9523               INC     R18
   \                     ??ExtRS485Ctl_51:
   \   000004E6   01FD               MOVW    R31:R30, R27:R26
   \   000004E8   8D02               LDD     R16, Z+26
   \   000004EA   8D13               LDD     R17, Z+27
   \   000004EC   8D44               LDD     R20, Z+28
   \   000004EE   8D55               LDD     R21, Z+29
   \   000004F0   0F04               ADD     R16, R20
   \   000004F2   1F15               ADC     R17, R21
   \   000004F4   E050               LDI     R21, 0
   \   000004F6   91E0....           LDS     R30, (TData + 1350)
   \   000004FA   E0F0               LDI     R31, 0
   \   000004FC   9633               ADIW    R31:R30, 3
   \   000004FE   172E               CP      R18, R30
   \   00000500   075F               CPC     R21, R31
   \   00000502   F304               BRLT    ??ExtRS485Ctl_52
   \   00000504   9350....           STS     (TData + 1348), R21
   \   00000508   E121               LDI     R18, 17
   \   0000050A   01F8               MOVW    R31:R30, R17:R16
   \   0000050C   8320               ST      Z, R18
   \   0000050E   01FD               MOVW    R31:R30, R27:R26
   \   00000510   8D04               LDD     R16, Z+28
   \   00000512   8D15               LDD     R17, Z+29
   \   00000514   5F0F               SUBI    R16, 255
   \   00000516   4F1F               SBCI    R17, 255
   \   00000518   8F04               STD     Z+28, R16
   \   0000051A   8F15               STD     Z+29, R17
   \   0000051C   E020               LDI     R18, 0
   \   0000051E   8D02               LDD     R16, Z+26
   \   00000520   8D13               LDD     R17, Z+27
   \   00000522   8D44               LDD     R20, Z+28
   \   00000524   8D55               LDD     R21, Z+29
   \   00000526   0F04               ADD     R16, R20
   \   00000528   1F15               ADC     R17, R21
   \   0000052A   01F8               MOVW    R31:R30, R17:R16
   \   0000052C   8320               ST      Z, R18
   \   0000052E   01FD               MOVW    R31:R30, R27:R26
   \   00000530   8D04               LDD     R16, Z+28
   \   00000532   8D15               LDD     R17, Z+29
   \   00000534   5F0F               SUBI    R16, 255
   \   00000536   4F1F               SBCI    R17, 255
   \   00000538   8F04               STD     Z+28, R16
   \   0000053A   8F15               STD     Z+29, R17
   \   0000053C   E000               LDI     R16, 0
   \   0000053E   C001               RJMP    ??ExtRS485Ctl_53
   \                     ??ExtRS485Ctl_50:
   \   00000540   E001               LDI     R16, 1
   \                     ??ExtRS485Ctl_53:
   \   00000542   2044               TST     R4
   \   00000544   F419               BRNE    ??ExtRS485Ctl_54
   \   00000546   E001               LDI     R16, 1
   \   00000548   ....               RCALL   Uart_BuildReqCardStatus
   \   0000054A   C057               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_54:
   \   0000054C   E015               LDI     R17, 5
   \   0000054E   1641               CP      R4, R17
   \   00000550   F419               BRNE    ??ExtRS485Ctl_55
   \   00000552   E001               LDI     R16, 1
   \   00000554   ....               RCALL   Uart_BuildReqR16552
   \   00000556   C051               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_55:
   \   00000558   E01A               LDI     R17, 10
   \   0000055A   1641               CP      R4, R17
   \   0000055C   F511               BRNE    ??ExtRS485Ctl_56
   \   0000055E   E121               LDI     R18, 17
   \   00000560   01FD               MOVW    R31:R30, R27:R26
   \   00000562   8D02               LDD     R16, Z+26
   \   00000564   8D13               LDD     R17, Z+27
   \   00000566   8D44               LDD     R20, Z+28
   \   00000568   8D55               LDD     R21, Z+29
   \   0000056A   0F04               ADD     R16, R20
   \   0000056C   1F15               ADC     R17, R21
   \   0000056E   01F8               MOVW    R31:R30, R17:R16
   \   00000570   8320               ST      Z, R18
   \                     ??ExtRS485Ctl_49:
   \   00000572   01FD               MOVW    R31:R30, R27:R26
   \   00000574   8D04               LDD     R16, Z+28
   \   00000576   8D15               LDD     R17, Z+29
   \   00000578   5F0F               SUBI    R16, 255
   \   0000057A   4F1F               SBCI    R17, 255
   \   0000057C   8F04               STD     Z+28, R16
   \   0000057E   8F15               STD     Z+29, R17
   \   00000580   E020               LDI     R18, 0
   \   00000582   8D02               LDD     R16, Z+26
   \   00000584   8D13               LDD     R17, Z+27
   \   00000586   8D44               LDD     R20, Z+28
   \   00000588   8D55               LDD     R21, Z+29
   \   0000058A   0F04               ADD     R16, R20
   \   0000058C   1F15               ADC     R17, R21
   \   0000058E   01F8               MOVW    R31:R30, R17:R16
   \   00000590   8320               ST      Z, R18
   \   00000592   01FD               MOVW    R31:R30, R27:R26
   \   00000594   8D04               LDD     R16, Z+28
   \   00000596   8D15               LDD     R17, Z+29
   \   00000598   5F0F               SUBI    R16, 255
   \   0000059A   4F1F               SBCI    R17, 255
   \   0000059C   8F04               STD     Z+28, R16
   \   0000059E   8F15               STD     Z+29, R17
   \   000005A0   C02C               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_56:
   \   000005A2   E01F               LDI     R17, 15
   \   000005A4   1641               CP      R4, R17
   \   000005A6   F419               BRNE    ??ExtRS485Ctl_57
   \   000005A8   E001               LDI     R16, 1
   \   000005AA   ....               RCALL   Uart_BuildReqC16552
   \   000005AC   C026               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_57:
   \   000005AE   E114               LDI     R17, 20
   \   000005B0   1641               CP      R4, R17
   \   000005B2   F4F9               BRNE    ??ExtRS485Ctl_58
   \   000005B4   9110....           LDS     R17, (TData + 1478)
   \   000005B8   2311               TST     R17
   \   000005BA   F4D9               BRNE    ??ExtRS485Ctl_58
   \   000005BC   9110....           LDS     R17, (TData + 1531)
   \   000005C0   9120....           LDS     R18, PortPair
   \   000005C4   1712               CP      R17, R18
   \   000005C6   F4A9               BRNE    ??ExtRS485Ctl_58
   \   000005C8   E001               LDI     R16, 1
   \   000005CA   ....               RCALL   Uart_BuildReqEEPROMData
   \   000005CC   ....               LDI     R30, ((TData + 249) & 0xff) & 0xFF
   \   000005CE   ....               LDI     R31, (((TData + 1529) >> 8) & 0xff) & 0xFF
   \   000005D0   8100               LD      R16, Z
   \   000005D2   5F0E               SUBI    R16, 254
   \   000005D4   8300               ST      Z, R16
   \   000005D6   300F               CPI     R16, 15
   \   000005D8   F080               BRCS    ??ExtRS485Ctl_41
   \   000005DA   E000               LDI     R16, 0
   \   000005DC   8300               ST      Z, R16
   \   000005DE   ....               LDI     R30, ((TData + 251) & 0xff) & 0xFF
   \   000005E0   ....               LDI     R31, (((TData + 1531) >> 8) & 0xff) & 0xFF
   \   000005E2   8100               LD      R16, Z
   \   000005E4   9503               INC     R16
   \   000005E6   8300               ST      Z, R16
   \   000005E8   3004               CPI     R16, 4
   \   000005EA   F038               BRCS    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_46:
   \   000005EC   E000               LDI     R16, 0
   \   000005EE   8300               ST      Z, R16
   \   000005F0   C004               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_58:
   \   000005F2   FB00               BST     R16, 0
   \   000005F4   F416               BRTC    ??ExtRS485Ctl_41
   \   000005F6   E001               LDI     R16, 1
   \   000005F8   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_41:
   \   000005FA   E001               LDI     R16, 1
   \   000005FC   ....               RCALL   Uart_BuildTail16552
   \   000005FE   CD8F               RJMP    ??ExtRS485Ctl_6
   \   00000600                      REQUIRE _A_PORTC
   \   00000600                      REQUIRE _A_PORTE
    258              }
    259          }
    260          
    261          
    262          /*************************************************************************
    263          *   (This is a task)
    264          *  Usart handler UART receive data
    265          *
    266          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    267          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    268          
    269              char portresp;
    270          
    271              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   00000008   E900               LDI     R16, 144
   \   0000000A   E11A               LDI     R17, 26
   \   0000000C   ........           CALL    OS_Delay
   \   00000010   C05C               RJMP    ??ExtRS485Rec_0
    272          
    273              while (1) {
    274                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
    275                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
    276                  if (portresp & 0x01) {                  // answer on ch 0
    277                      Usart16552CheckPackage(0);         // handle incomming package
    278                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
    279                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
    280                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
    281                  } else {
    282                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
    283                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
    284                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
    285                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
    286                      }
    287                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
    288                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
    289                              ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    290                              OS_SignalEvent(2, &TCB_RS485Ctl);
    291                          }
    292                      }
    293                  }
    294                  if (portresp & 0x02) {                  // answer on ch 1
    295                      Usart16552CheckPackage(1);         // handle incomming package
    296                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
    297                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
    298                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
    299                  } else {
    300                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   00000012   9100....           LDS     R16, (UART16552 + 50)
   \   00000016   9503               INC     R16
   \   00000018   9300....           STS     (UART16552 + 50), R16
    301                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   0000001C   9100....           LDS     R16, PortPair
   \   00000020   E014               LDI     R17, 4
   \   00000022   9F01               MUL     R16, R17
   \   00000024   01F0               MOVW    R31:R30, R1:R0
   \   00000026   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000002A   8D05               LDD     R16, Z+29
   \   0000002C   8D16               LDD     R17, Z+30
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   8F05               STD     Z+29, R16
   \   00000034   8F16               STD     Z+30, R17
    302                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   00000036   9100....           LDS     R16, PortPair
   \   0000003A   E014               LDI     R17, 4
   \   0000003C   9F01               MUL     R16, R17
   \   0000003E   ....               LDI     R30, LOW(TData)
   \   00000040   ....               LDI     R31, (TData) >> 8
   \   00000042   0DE0               ADD     R30, R0
   \   00000044   1DF1               ADC     R31, R1
   \   00000046   8D03               LDD     R16, Z+27
   \   00000048   8D14               LDD     R17, Z+28
   \   0000004A   01C8               MOVW    R25:R24, R17:R16
   \   0000004C   9601               ADIW    R25:R24, 1
   \   0000004E   8F83               STD     Z+27, R24
   \   00000050   8F94               STD     Z+28, R25
   \   00000052   3006               CPI     R16, 6
   \   00000054   4010               SBCI    R17, 0
   \   00000056   F048               BRCS    ??ExtRS485Rec_2
    303                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   00000058   9100....           LDS     R16, PortPair
   \   0000005C   E0F0               LDI     R31, 0
   \   0000005E   2FE0               MOV     R30, R16
   \   00000060   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000064   8107               LDD     R16, Z+7
   \   00000066   6001               ORI     R16, 0x01
   \   00000068   8307               STD     Z+7, R16
    304                      }
    305                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_2:
   \   0000006A   9100....           LDS     R16, TData
   \   0000006E   E010               LDI     R17, 0
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   5F4C               SUBI    R20, 252
   \   00000076   ........           CALL    ?SS_SHR_L02
   \   0000007A   7001               ANDI    R16, 0x01
   \   0000007C   F109               BREQ    ??ExtRS485Rec_3
    306                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   0000007E   9100....           LDS     R16, PortPair
   \   00000082   E014               LDI     R17, 4
   \   00000084   9F01               MUL     R16, R17
   \   00000086   01F0               MOVW    R31:R30, R1:R0
   \   00000088   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000008A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000008C   8D03               LDD     R16, Z+27
   \   0000008E   7007               ANDI    R16, 0x07
   \   00000090   3004               CPI     R16, 4
   \   00000092   F4B1               BRNE    ??ExtRS485Rec_3
    307                              ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
   \   00000094   94F8               CLI
   \   00000096   9140....           LDS     R20, PortPair
   \   0000009A   5F4C               SUBI    R20, 252
   \   0000009C   E001               LDI     R16, 1
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   ........           CALL    ?S_SHL_L02
   \   000000A4   9500               COM     R16
   \   000000A6   B315               IN      R17, 0x15
   \   000000A8   2310               AND     R17, R16
   \   000000AA   BB15               OUT     0x15, R17
   \   000000AC   9100....           LDS     R16, (OS_Counters + 1)
   \   000000B0   2300               TST     R16
   \   000000B2   F409               BRNE    ??ExtRS485Rec_4
   \   000000B4   9478               SEI
    308                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_4:
   \   000000B6   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000B8   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000BA   E002               LDI     R16, 2
   \   000000BC   ........           CALL    OS_SignalEvent
    309                          }
    310                      }
    311                  }
    312                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_3:
   \   000000C0   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000C2   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_0:
   \   000000CA   EF03               LDI     R16, 243
   \   000000CC   E011               LDI     R17, 1
   \   000000CE   ........           CALL    OS_Delay
   \   000000D2   E021               LDI     R18, 1
   \   000000D4   E030               LDI     R19, 0
   \   000000D6   E003               LDI     R16, 3
   \   000000D8   ........           CALL    OS_WaitEventTimed
   \   000000DC   2F80               MOV     R24, R16
   \   000000DE   FB00               BST     R16, 0
   \   000000E0   F4C6               BRTC    ??ExtRS485Rec_5
   \   000000E2   E000               LDI     R16, 0
   \   000000E4   ....               RCALL   Usart16552CheckPackage
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   E010               LDI     R17, 0
   \   000000EA   9120....           LDS     R18, PortPair
   \   000000EE   E034               LDI     R19, 4
   \   000000F0   9F23               MUL     R18, R19
   \   000000F2   01F0               MOVW    R31:R30, R1:R0
   \   000000F4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000F6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000F8   8703               STD     Z+11, R16
   \   000000FA   8704               STD     Z+12, R16
   \   000000FC   9100....           LDS     R16, PortPair
   \   00000100   01F8               MOVW    R31:R30, R17:R16
   \   00000102   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000104   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000106   8103               LDD     R16, Z+3
   \   00000108   7F0E               ANDI    R16, 0xFE
   \   0000010A   8303               STD     Z+3, R16
   \   0000010C   9310....           STS     (UART16552 + 24), R17
   \   00000110   C055               RJMP    ??ExtRS485Rec_6
   \                     ??ExtRS485Rec_5:
   \   00000112   9100....           LDS     R16, (UART16552 + 24)
   \   00000116   9503               INC     R16
   \   00000118   9300....           STS     (UART16552 + 24), R16
   \   0000011C   9100....           LDS     R16, PortPair
   \   00000120   E014               LDI     R17, 4
   \   00000122   9F01               MUL     R16, R17
   \   00000124   01F0               MOVW    R31:R30, R1:R0
   \   00000126   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000128   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000012A   8505               LDD     R16, Z+13
   \   0000012C   8516               LDD     R17, Z+14
   \   0000012E   5F0F               SUBI    R16, 255
   \   00000130   4F1F               SBCI    R17, 255
   \   00000132   8705               STD     Z+13, R16
   \   00000134   8716               STD     Z+14, R17
   \   00000136   9100....           LDS     R16, PortPair
   \   0000013A   E014               LDI     R17, 4
   \   0000013C   9F01               MUL     R16, R17
   \   0000013E   ....               LDI     R30, LOW(TData)
   \   00000140   ....               LDI     R31, (TData) >> 8
   \   00000142   0DE0               ADD     R30, R0
   \   00000144   1DF1               ADC     R31, R1
   \   00000146   8503               LDD     R16, Z+11
   \   00000148   8514               LDD     R17, Z+12
   \   0000014A   01D8               MOVW    R27:R26, R17:R16
   \   0000014C   9611               ADIW    R27:R26, 1
   \   0000014E   87A3               STD     Z+11, R26
   \   00000150   87B4               STD     Z+12, R27
   \   00000152   3006               CPI     R16, 6
   \   00000154   4010               SBCI    R17, 0
   \   00000156   F048               BRCS    ??ExtRS485Rec_7
   \   00000158   9100....           LDS     R16, PortPair
   \   0000015C   E0F0               LDI     R31, 0
   \   0000015E   2FE0               MOV     R30, R16
   \   00000160   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000164   8103               LDD     R16, Z+3
   \   00000166   6001               ORI     R16, 0x01
   \   00000168   8303               STD     Z+3, R16
   \                     ??ExtRS485Rec_7:
   \   0000016A   9100....           LDS     R16, TData
   \   0000016E   E010               LDI     R17, 0
   \   00000170   9140....           LDS     R20, PortPair
   \   00000174   ........           CALL    ?SS_SHR_L02
   \   00000178   7001               ANDI    R16, 0x01
   \   0000017A   F101               BREQ    ??ExtRS485Rec_6
   \   0000017C   9100....           LDS     R16, PortPair
   \   00000180   E014               LDI     R17, 4
   \   00000182   9F01               MUL     R16, R17
   \   00000184   01F0               MOVW    R31:R30, R1:R0
   \   00000186   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000188   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000018A   8503               LDD     R16, Z+11
   \   0000018C   7007               ANDI    R16, 0x07
   \   0000018E   3004               CPI     R16, 4
   \   00000190   F4A9               BRNE    ??ExtRS485Rec_6
   \   00000192   94F8               CLI
   \   00000194   9140....           LDS     R20, PortPair
   \   00000198   E001               LDI     R16, 1
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   ........           CALL    ?S_SHL_L02
   \   000001A0   9500               COM     R16
   \   000001A2   B315               IN      R17, 0x15
   \   000001A4   2310               AND     R17, R16
   \   000001A6   BB15               OUT     0x15, R17
   \   000001A8   9100....           LDS     R16, (OS_Counters + 1)
   \   000001AC   2300               TST     R16
   \   000001AE   F409               BRNE    ??ExtRS485Rec_8
   \   000001B0   9478               SEI
   \                     ??ExtRS485Rec_8:
   \   000001B2   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000001B4   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000001B6   E002               LDI     R16, 2
   \   000001B8   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_6:
   \   000001BC   FB81               BST     R24, 1
   \   000001BE   F00E               BRTS    $+2+2
   \   000001C0   CF28               RJMP    ??ExtRS485Rec_1
   \   000001C2   E001               LDI     R16, 1
   \   000001C4   ....               RCALL   Usart16552CheckPackage
   \   000001C6   E000               LDI     R16, 0
   \   000001C8   E010               LDI     R17, 0
   \   000001CA   9120....           LDS     R18, PortPair
   \   000001CE   E034               LDI     R19, 4
   \   000001D0   9F23               MUL     R18, R19
   \   000001D2   01F0               MOVW    R31:R30, R1:R0
   \   000001D4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001D6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001D8   8F03               STD     Z+27, R16
   \   000001DA   8F04               STD     Z+28, R16
   \   000001DC   9100....           LDS     R16, PortPair
   \   000001E0   01F8               MOVW    R31:R30, R17:R16
   \   000001E2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001E4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001E6   8107               LDD     R16, Z+7
   \   000001E8   7F0E               ANDI    R16, 0xFE
   \   000001EA   8307               STD     Z+7, R16
   \   000001EC   9310....           STS     (UART16552 + 50), R17
   \   000001F0   CF67               RJMP    ??ExtRS485Rec_3
   \   000001F2                      REQUIRE _A_PORTC
    313              }
    314          }
    315          
    316          /*************************************************************************
    317          *
    318          *  Set ports on or off
    319          *
    320          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    321          void SetRS4Port(void) {
   \                     SetRS4Port:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    322          
    323              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   BB05               OUT     0x15, R16
    324          
    325          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    326          
    327          /*************************************************************************
    328          *
    329          *  Check the incoming packages from AN_SGCNV / WIS
    330          *
    331          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    332          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000E   2E60               MOV     R6, R16
    333          
    334              unsigned short pointer;
    335              char count_out, more;
    336          
    337              count_out = MAX_PROT_CMD;                  // max command
   \   00000010   2444               CLR     R4
   \   00000012   944A               DEC     R4
    338              more = true;
   \   00000014   2455               CLR     R5
   \   00000016   9453               INC     R5
    339              pointer = 4;
   \   00000018   E084               LDI     R24, 4
   \   0000001A   E090               LDI     R25, 0
   \   0000001C   E10A               LDI     R16, 26
   \   0000001E   9E60               MUL     R6, R16
   \   00000020   ....               LDI     R26, LOW(UART16552)
   \   00000022   ....               LDI     R27, (UART16552) >> 8
   \   00000024   0DA0               ADD     R26, R0
   \   00000026   1DB1               ADC     R27, R1
    340              do {
    341                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   00000028   019C               MOVW    R19:R18, R25:R24
   \   0000002A   2D06               MOV     R16, R6
   \   0000002C   ....               RCALL   CheckActionUart16552
   \   0000002E   2300               TST     R16
   \   00000030   F409               BRNE    ??Usart16552CheckPackage_1
    342                      more = false;                          // terminate while loop
   \   00000032   2455               CLR     R5
    343                  }
    344                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8502               LDD     R16, Z+10
   \   00000038   8513               LDD     R17, Z+11
   \   0000003A   0F08               ADD     R16, R24
   \   0000003C   1F19               ADC     R17, R25
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   81E1               LDD     R30, Z+1
   \   00000042   E0F0               LDI     R31, 0
   \   00000044   9632               ADIW    R31:R30, 2
   \   00000046   0F8E               ADD     R24, R30
   \   00000048   1F9F               ADC     R25, R31
    345                  if (!--count_out) {
   \   0000004A   944A               DEC     R4
   \   0000004C   F051               BREQ    ??Usart16552CheckPackage_2
    346                      more = false;
    347                  }
    348              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \   0000004E   2055               TST     R5
   \   00000050   F041               BREQ    ??Usart16552CheckPackage_2
   \   00000052   01FD               MOVW    R31:R30, R27:R26
   \   00000054   8906               LDD     R16, Z+22
   \   00000056   8917               LDD     R17, Z+23
   \   00000058   5003               SUBI    R16, 3
   \   0000005A   4010               SBCI    R17, 0
   \   0000005C   1780               CP      R24, R16
   \   0000005E   0791               CPC     R25, R17
   \   00000060   F318               BRCS    ??Usart16552CheckPackage_0
    349              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_2:
   \   00000062   2D06               MOV     R16, R6
   \   00000064   ....               RCALL   GoToSyncUART16552
    350          }
   \   00000066   9189               LD      R24, Y+
   \   00000068   9199               LD      R25, Y+
   \   0000006A   91A9               LD      R26, Y+
   \   0000006C   91B9               LD      R27, Y+
   \   0000006E   9049               LD      R4, Y+
   \   00000070   9059               LD      R5, Y+
   \   00000072   9069               LD      R6, Y+
   \   00000074   9508               RET
    351          
    352          /*************************************************************************
    353          *
    354          *  Check action on received data from AN_SGCNV
    355          *
    356          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    357          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   938A               ST      -Y, R24
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    358          
    359              char retval = true;
   \   00000002   E081               LDI     R24, 1
    360          
    361              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   00000004   2F60               MOV     R22, R16
   \   00000006   E070               LDI     R23, 0
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   2E20               MOV     R2, R16
   \   0000000C   9E24               MUL     R2, R20
   \   0000000E   ....               LDI     R30, LOW(UART16552)
   \   00000010   ....               LDI     R31, (UART16552) >> 8
   \   00000012   0DE0               ADD     R30, R0
   \   00000014   1DF1               ADC     R31, R1
   \   00000016   8542               LDD     R20, Z+10
   \   00000018   8553               LDD     R21, Z+11
   \   0000001A   0F42               ADD     R20, R18
   \   0000001C   1F53               ADC     R21, R19
   \   0000001E   01FA               MOVW    R31:R30, R21:R20
   \   00000020   8110               LD      R17, Z
   \   00000022   5810               SUBI    R17, 128
   \   00000024   F409               BRNE    $+2+2
   \   00000026   C040               RJMP    ??CheckActionUart16552_0
   \   00000028   5314               SUBI    R17, 52
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C045               RJMP    ??CheckActionUart16552_1
   \   0000002E   951A               DEC     R17
   \   00000030   F409               BRNE    $+2+2
   \   00000032   C046               RJMP    ??CheckActionUart16552_2
   \   00000034   541B               SUBI    R17, 75
   \   00000036   F409               BRNE    $+2+2
   \   00000038   C052               RJMP    ??CheckActionUart16552_3
   \   0000003A   951A               DEC     R17
   \   0000003C   F409               BRNE    $+2+2
   \   0000003E   C04F               RJMP    ??CheckActionUart16552_3
   \   00000040   511D               SUBI    R17, 29
   \   00000042   F088               BRCS    ??CheckActionUart16552_4
   \   00000044   5013               SUBI    R17, 3
   \   00000046   F080               BRCS    ??CheckActionUart16552_5
   \   00000048   5013               SUBI    R17, 3
   \   0000004A   F0B0               BRCS    ??CheckActionUart16552_6
   \   0000004C   F0C9               BREQ    ??CheckActionUart16552_7
   \   0000004E   951A               DEC     R17
   \   00000050   F0F9               BREQ    ??CheckActionUart16552_8
   \   00000052   5017               SUBI    R17, 7
   \   00000054   F109               BREQ    ??CheckActionUart16552_9
   \   00000056   5013               SUBI    R17, 3
   \   00000058   F0B9               BREQ    ??CheckActionUart16552_10
   \   0000005A   5012               SUBI    R17, 2
   \   0000005C   F049               BREQ    ??CheckActionUart16552_11
   \   0000005E   541D               SUBI    R17, 77
   \   00000060   F0F9               BREQ    ??CheckActionUart16552_12
   \   00000062   951A               DEC     R17
   \   00000064   F129               BREQ    ??CheckActionUart16552_13
   \                     ??CheckActionUart16552_4:
   \   00000066   C03C               RJMP    ??CheckActionUart16552_14
    362          
    363              case ANP1_REP_MP_DATA :                              // Measured pressure data
    364              case ANP1_REP_MT_DATA :                              // Measured temperature data
    365              case ANP1_REP_MO_DATA :                              // Measured "other" data
    366                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_5:
   \   00000068   5F2E               SUBI    R18, 254
   \   0000006A   4F3F               SBCI    R19, 255
   \   0000006C   ....               RCALL   ReceivePTOData
    367                  break;
   \   0000006E   C038               RJMP    ??CheckActionUart16552_14
    368              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    369                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_11:
   \   00000070   5F2E               SUBI    R18, 254
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   ....               RCALL   ReceiveWHData
    370                  break;
   \   00000076   C034               RJMP    ??CheckActionUart16552_14
    371              case ANP1_REP_RP_DATA :                              // Raw pressure data
    372              case ANP1_REP_RT_DATA :                              // Raw temp. data
    373              case ANP1_REP_RO_DATA :                              // Raw "other" data
    374                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_6:
   \   00000078   5F2E               SUBI    R18, 254
   \   0000007A   4F3F               SBCI    R19, 255
   \   0000007C   ....               RCALL   ReceiveRData
    375                  break;
   \   0000007E   C030               RJMP    ??CheckActionUart16552_14
    376              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    377                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_7:
   \   00000080   5F2E               SUBI    R18, 254
   \   00000082   4F3F               SBCI    R19, 255
   \   00000084   ....               RCALL   ReceiveCData
    378                  break;
   \   00000086   C02C               RJMP    ??CheckActionUart16552_14
    379          
    380              case ANP1_REP_CARD_STAT :                             // card status package
    381                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_10:
   \   00000088   5F2E               SUBI    R18, 254
   \   0000008A   4F3F               SBCI    R19, 255
   \   0000008C   ....               RCALL   ReceiveCardStatus
    382                  break;
   \   0000008E   C028               RJMP    ??CheckActionUart16552_14
    383          
    384              case ANP1_REP_CONFIG :                             // config data
    385                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_8:
   \   00000090   5F2E               SUBI    R18, 254
   \   00000092   4F3F               SBCI    R19, 255
   \   00000094   ....               RCALL   ReceiveConfigData
    386                  break;
   \   00000096   C024               RJMP    ??CheckActionUart16552_14
    387          
    388              case ANP1_REP_EEP_DATA :                             // card eeprome
    389                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_9:
   \   00000098   5F2E               SUBI    R18, 254
   \   0000009A   4F3F               SBCI    R19, 255
   \   0000009C   ....               RCALL   ReceiveCardEEPROMData
    390                  break;
   \   0000009E   C020               RJMP    ??CheckActionUart16552_14
    391          
    392              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    393                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_12:
   \   000000A0   5F2E               SUBI    R18, 254
   \   000000A2   4F3F               SBCI    R19, 255
   \   000000A4   ....               RCALL   ReceiveWISStatus
    394                  break;
   \   000000A6   C01C               RJMP    ??CheckActionUart16552_14
    395          
    396              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    397                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_0:
   \   000000A8   5F2E               SUBI    R18, 254
   \   000000AA   4F3F               SBCI    R19, 255
   \   000000AC   ....               RCALL   ReceiveWISXData
    398                  break;
   \   000000AE   C018               RJMP    ??CheckActionUart16552_14
    399          
    400              case ANP1_REP_WIS_DATA :                             // Data from WIS
    401                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_13:
   \   000000B0   5F2E               SUBI    R18, 254
   \   000000B2   4F3F               SBCI    R19, 255
   \   000000B4   ....               RCALL   ReceiveWISData
    402                  break;
   \   000000B6   C014               RJMP    ??CheckActionUart16552_14
    403              case ANP1_REP_GODA_DATA:
    404                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_1:
   \   000000B8   5F2E               SUBI    R18, 254
   \   000000BA   4F3F               SBCI    R19, 255
   \   000000BC   ....               RCALL   ReceiveRadarData
    405                  break;
   \   000000BE   C010               RJMP    ??CheckActionUart16552_14
    406              case ANP1_REP_GODA_INFO:
    407                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_2:
   \   000000C0   8504               LDD     R16, Z+12
   \   000000C2   0F66               LSL     R22
   \   000000C4   1F77               ROL     R23
   \   000000C6   0F66               LSL     R22
   \   000000C8   1F77               ROL     R23
   \   000000CA   9120....           LDS     R18, PortPair
   \   000000CE   E030               LDI     R19, 0
   \   000000D0   0F62               ADD     R22, R18
   \   000000D2   1F73               ADC     R23, R19
   \   000000D4   01FB               MOVW    R31:R30, R23:R22
   \   000000D6   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000D8   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000DA   A703               STD     Z+43, R16
    408                  break;
   \   000000DC   C001               RJMP    ??CheckActionUart16552_14
    409              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    410              case ANP1_ECMD_NMDWOACK :                         // No more data
    411                  retval = false;
   \                     ??CheckActionUart16552_3:
   \   000000DE   E080               LDI     R24, 0
    412                  break;
    413              }
    414              return retval;
   \                     ??CheckActionUart16552_14:
   \   000000E0   2F08               MOV     R16, R24
   \   000000E2   9189               LD      R24, Y+
   \   000000E4   9508               RET
    415          }
    416          
    417          /*************************************************************************
    418          *
    419          *  Receive card status from WIS
    420          *
    421          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    422          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2E3A               MOV     R3, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    423          
    424              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000004   9160....           LDS     R22, PortPair
   \   00000008   2F40               MOV     R20, R16
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   E10A               LDI     R16, 26
   \   0000000E   2E24               MOV     R2, R20
   \   00000010   9E20               MUL     R2, R16
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1DF1               ADC     R31, R1
   \   0000001A   85A2               LDD     R26, Z+10
   \   0000001C   85B3               LDD     R27, Z+11
   \   0000001E   0FA2               ADD     R26, R18
   \   00000020   1FB3               ADC     R27, R19
   \   00000022   0F44               LSL     R20
   \   00000024   1F55               ROL     R21
   \   00000026   0F44               LSL     R20
   \   00000028   1F55               ROL     R21
   \   0000002A   917C               LD      R23, X
   \   0000002C   E030               LDI     R19, 0
   \   0000002E   018A               MOVW    R17:R16, R21:R20
   \   00000030   0F06               ADD     R16, R22
   \   00000032   1F13               ADC     R17, R19
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000038   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003A   A503               LDD     R16, Z+43
   \   0000003C   2B07               OR      R16, R23
   \   0000003E   A703               STD     Z+43, R16
    425              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8161               LDD     R22, Z+1
   \   00000044   9120....           LDS     R18, PortPair
   \   00000048   018A               MOVW    R17:R16, R21:R20
   \   0000004A   0F02               ADD     R16, R18
   \   0000004C   1F13               ADC     R17, R19
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000054   AB63               STD     Z+51, R22
    426              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   00000056   01FD               MOVW    R31:R30, R27:R26
   \   00000058   8104               LDD     R16, Z+4
   \   0000005A   2300               TST     R16
   \   0000005C   F051               BREQ    ??ReceiveWISStatus_0
    427                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   0000005E   9100....           LDS     R16, PortPair
   \   00000062   0F40               ADD     R20, R16
   \   00000064   1F53               ADC     R21, R19
   \   00000066   01FA               MOVW    R31:R30, R21:R20
   \   00000068   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000006C   A903               LDD     R16, Z+51
   \   0000006E   6800               ORI     R16, 0x80
   \   00000070   AB03               STD     Z+51, R16
    428              }
    429          }
   \                     ??ReceiveWISStatus_0:
   \   00000072   2DA3               MOV     R26, R3
   \   00000074   91B9               LD      R27, Y+
   \   00000076   9508               RET
    430          
    431          /*************************************************************************
    432          *
    433          *  Receive WIS protocol data
    434          *
    435          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    436          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2F5A               MOV     R21, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F40               MOV     R20, R16
    437          
    438              char i;
    439          
    440              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000006   2E22               MOV     R2, R18
   \   00000008   2F60               MOV     R22, R16
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   2F26               MOV     R18, R22
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   ....               LDI     R30, LOW(UART16552)
   \   00000012   ....               LDI     R31, (UART16552) >> 8
   \   00000014   0DE0               ADD     R30, R0
   \   00000016   1DF1               ADC     R31, R1
   \   00000018   8502               LDD     R16, Z+10
   \   0000001A   8513               LDD     R17, Z+11
   \   0000001C   0D02               ADD     R16, R2
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   8120               LD      R18, Z
   \   00000024   3723               CPI     R18, 115
   \   00000026   F4E1               BRNE    ??ReceiveWISXData_0
    441              case 115:                                     // Serial number
    442                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000028   E322               LDI     R18, 50
   \   0000002A   9F62               MUL     R22, R18
   \   0000002C   ....               LDI     R26, LOW(TData)
   \   0000002E   ....               LDI     R27, (TData) >> 8
   \   00000030   0DA0               ADD     R26, R0
   \   00000032   1DB1               ADC     R27, R1
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   56EC               SUBI    R30, 108
   \   00000038   4FFA               SBCI    R31, 250
   \   0000003A   E021               LDI     R18, 1
   \   0000003C   8320               ST      Z, R18
    443                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   0000003E   0F44               LSL     R20
   \   00000040   0F44               LSL     R20
   \   00000042   9120....           LDS     R18, PortPair
   \   00000046   0F42               ADD     R20, R18
   \   00000048   8341               STD     Z+1, R20
    444                  for (i = 2; i < (4 + 2); i++) {
   \   0000004A   5F0F               SUBI    R16, 255
   \   0000004C   4F1F               SBCI    R17, 255
   \   0000004E   56AA               SUBI    R26, 106
   \   00000050   4FBA               SBCI    R27, 250
   \   00000052   E024               LDI     R18, 4
    445                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveWISXData_1:
   \   00000054   01F8               MOVW    R31:R30, R17:R16
   \   00000056   9131               LD      R19, Z+
   \   00000058   018F               MOVW    R17:R16, R31:R30
   \   0000005A   933D               ST      X+, R19
    446                  }
   \   0000005C   952A               DEC     R18
   \   0000005E   F7D1               BRNE    ??ReceiveWISXData_1
    447                  break;
    448              default:
    449                  break;
    450              }
    451          }
   \                     ??ReceiveWISXData_0:
   \   00000060   2FA5               MOV     R26, R21
   \   00000062   2FB7               MOV     R27, R23
   \   00000064   9508               RET
    452          
    453          /*************************************************************************
    454          *
    455          *  Receive measured data from WIS
    456          *
    457          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    458          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    459          
    460              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
   \   00000008   2F80               MOV     R24, R16
   \   0000000A   E090               LDI     R25, 0
   \   0000000C   E10A               LDI     R16, 26
   \   0000000E   E010               LDI     R17, 0
   \   00000010   2F48               MOV     R20, R24
   \   00000012   9F40               MUL     R20, R16
   \   00000014   ....               LDI     R30, LOW(UART16552)
   \   00000016   ....               LDI     R31, (UART16552) >> 8
   \   00000018   0DE0               ADD     R30, R0
   \   0000001A   1DF1               ADC     R31, R1
   \   0000001C   85A2               LDD     R26, Z+10
   \   0000001E   85B3               LDD     R27, Z+11
   \   00000020   0FA2               ADD     R26, R18
   \   00000022   1FB3               ADC     R27, R19
   \   00000024   0F88               LSL     R24
   \   00000026   1F99               ROL     R25
   \   00000028   0F88               LSL     R24
   \   0000002A   1F99               ROL     R25
   \   0000002C   910C               LD      R16, X
   \   0000002E   E020               LDI     R18, 0
   \   00000030   E030               LDI     R19, 0
   \   00000032   ........           CALL    ?UL2F_S_L04
   \   00000036   9140....           LDS     R20, PortPair
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   01BC               MOVW    R23:R22, R25:R24
   \   0000003E   0F64               ADD     R22, R20
   \   00000040   1F75               ADC     R23, R21
   \   00000042   E348               LDI     R20, 56
   \   00000044   9F74               MUL     R23, R20
   \   00000046   2D70               MOV     R23, R0
   \   00000048   9F64               MUL     R22, R20
   \   0000004A   0D71               ADD     R23, R1
   \   0000004C   2DE0               MOV     R30, R0
   \   0000004E   2FF7               MOV     R31, R23
   \   00000050   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   00000054   8300               ST      Z, R16
   \   00000056   8311               STD     Z+1, R17
   \   00000058   8322               STD     Z+2, R18
   \   0000005A   8333               STD     Z+3, R19
    461              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    462                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   8111               LDD     R17, Z+1
   \   00000060   8102               LDD     R16, Z+2
   \   00000062   2F21               MOV     R18, R17
   \   00000064   0F22               LSL     R18
   \   00000066   0B22               SBC     R18, R18
   \   00000068   2F32               MOV     R19, R18
   \   0000006A   ........           CALL    ?SL2F_S_L04
   \   0000006E   E040               LDI     R20, 0
   \   00000070   E260               LDI     R22, 32
   \   00000072   E471               LDI     R23, 65
   \   00000074   ........           CALL    ?F_DIV_S_L04
   \   00000078   9140....           LDS     R20, PortPair
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   01BC               MOVW    R23:R22, R25:R24
   \   00000080   0F64               ADD     R22, R20
   \   00000082   1F75               ADC     R23, R21
   \   00000084   E348               LDI     R20, 56
   \   00000086   9F74               MUL     R23, R20
   \   00000088   2D70               MOV     R23, R0
   \   0000008A   9F64               MUL     R22, R20
   \   0000008C   0D71               ADD     R23, R1
   \   0000008E   2DE0               MOV     R30, R0
   \   00000090   2FF7               MOV     R31, R23
   \   00000092   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   00000094   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   00000096   8300               ST      Z, R16
   \   00000098   8311               STD     Z+1, R17
   \   0000009A   8322               STD     Z+2, R18
   \   0000009C   8333               STD     Z+3, R19
    463              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   0000009E   01FD               MOVW    R31:R30, R27:R26
   \   000000A0   8123               LDD     R18, Z+3
   \   000000A2   9100....           LDS     R16, PortPair
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   01AC               MOVW    R21:R20, R25:R24
   \   000000AA   0F40               ADD     R20, R16
   \   000000AC   1F51               ADC     R21, R17
   \   000000AE   E00E               LDI     R16, 14
   \   000000B0   9F50               MUL     R21, R16
   \   000000B2   2D50               MOV     R21, R0
   \   000000B4   9F40               MUL     R20, R16
   \   000000B6   0D51               ADD     R21, R1
   \   000000B8   2DE0               MOV     R30, R0
   \   000000BA   2FF5               MOV     R31, R21
   \   000000BC   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000C0   AF23               STD     Z+59, R18
    464              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   000000C2   9100....           LDS     R16, PortPair
   \   000000C6   0F80               ADD     R24, R16
   \   000000C8   1F91               ADC     R25, R17
   \   000000CA   E00E               LDI     R16, 14
   \   000000CC   9F90               MUL     R25, R16
   \   000000CE   2D90               MOV     R25, R0
   \   000000D0   9F80               MUL     R24, R16
   \   000000D2   0D91               ADD     R25, R1
   \   000000D4   2DE0               MOV     R30, R0
   \   000000D6   2FF9               MOV     R31, R25
   \   000000D8   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000DA   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000DC   8310               ST      Z, R17
    465          }
   \   000000DE   ....               RJMP    ?Subroutine3

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9189               LD      R24, Y+
   \   00000002                      REQUIRE ??Subroutine7_0
   \   00000002                      ;               // Fall through to label ??Subroutine7_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine7_0:
   \   00000000   9199               LD      R25, Y+
   \   00000002   91A9               LD      R26, Y+
   \   00000004   91B9               LD      R27, Y+
   \   00000006   9508               RET
    466          
    467          
    468          /*************************************************************************
    469          *
    470          *  Receive measured data from Radar
    471          *
    472          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    473          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    474              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
    475              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
    476          
    477              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   2F60               MOV     R22, R16
   \   0000000A   9F64               MUL     R22, R20
   \   0000000C   ....               LDI     R30, LOW(UART16552)
   \   0000000E   ....               LDI     R31, (UART16552) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   85A2               LDD     R26, Z+10
   \   00000016   85B3               LDD     R27, Z+11
   \   00000018   0FA2               ADD     R26, R18
   \   0000001A   1FB3               ADC     R27, R19
   \   0000001C   0F00               LSL     R16
   \   0000001E   1F11               ROL     R17
   \   00000020   0F00               LSL     R16
   \   00000022   1F11               ROL     R17
   \   00000024   914D               LD      R20, X+
   \   00000026   915D               LD      R21, X+
   \   00000028   916D               LD      R22, X+
   \   0000002A   917C               LD      R23, X
   \   0000002C   9713               SBIW    R27:R26, 3
   \   0000002E   9120....           LDS     R18, PortPair
   \   00000032   E030               LDI     R19, 0
   \   00000034   0118               MOVW    R3:R2, R17:R16
   \   00000036   0E22               ADD     R2, R18
   \   00000038   1E33               ADC     R3, R19
   \   0000003A   E328               LDI     R18, 56
   \   0000003C   9E32               MUL     R3, R18
   \   0000003E   2C30               MOV     R3, R0
   \   00000040   9E22               MUL     R2, R18
   \   00000042   0C31               ADD     R3, R1
   \   00000044   2DE0               MOV     R30, R0
   \   00000046   2DF3               MOV     R31, R3
   \   00000048   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   0000004C   8340               ST      Z, R20
   \   0000004E   8351               STD     Z+1, R21
   \   00000050   8362               STD     Z+2, R22
   \   00000052   8373               STD     Z+3, R23
    478              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   8144               LDD     R20, Z+4
   \   00000058   8155               LDD     R21, Z+5
   \   0000005A   8166               LDD     R22, Z+6
   \   0000005C   8177               LDD     R23, Z+7
   \   0000005E   9120....           LDS     R18, PortPair
   \   00000062   0118               MOVW    R3:R2, R17:R16
   \   00000064   0E22               ADD     R2, R18
   \   00000066   1E33               ADC     R3, R19
   \   00000068   E328               LDI     R18, 56
   \   0000006A   9E32               MUL     R3, R18
   \   0000006C   2C30               MOV     R3, R0
   \   0000006E   9E22               MUL     R2, R18
   \   00000070   0C31               ADD     R3, R1
   \   00000072   2DE0               MOV     R30, R0
   \   00000074   2DF3               MOV     R31, R3
   \   00000076   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   00000078   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   0000007A   8340               ST      Z, R20
   \   0000007C   8351               STD     Z+1, R21
   \   0000007E   8362               STD     Z+2, R22
   \   00000080   8373               STD     Z+3, R23
    479              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   00000082   01FD               MOVW    R31:R30, R27:R26
   \   00000084   8540               LDD     R20, Z+8
   \   00000086   9120....           LDS     R18, PortPair
   \   0000008A   01B8               MOVW    R23:R22, R17:R16
   \   0000008C   0F62               ADD     R22, R18
   \   0000008E   1F73               ADC     R23, R19
   \   00000090   E02E               LDI     R18, 14
   \   00000092   9F72               MUL     R23, R18
   \   00000094   2D70               MOV     R23, R0
   \   00000096   9F62               MUL     R22, R18
   \   00000098   0D71               ADD     R23, R1
   \   0000009A   2DE0               MOV     R30, R0
   \   0000009C   2FF7               MOV     R31, R23
   \   0000009E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000A0   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000A2   AF43               STD     Z+59, R20
    480              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   000000A4   01FD               MOVW    R31:R30, R27:R26
   \   000000A6   8541               LDD     R20, Z+9
   \   000000A8   9120....           LDS     R18, PortPair
   \   000000AC   0F02               ADD     R16, R18
   \   000000AE   1F13               ADC     R17, R19
   \   000000B0   E02E               LDI     R18, 14
   \   000000B2   9F12               MUL     R17, R18
   \   000000B4   2D10               MOV     R17, R0
   \   000000B6   9F02               MUL     R16, R18
   \   000000B8   0D11               ADD     R17, R1
   \   000000BA   2DE0               MOV     R30, R0
   \   000000BC   2FF1               MOV     R31, R17
   \   000000BE   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000C0   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000C2   8340               ST      Z, R20
    481          }
   \   000000C4   91A9               LD      R26, Y+
   \   000000C6   91B9               LD      R27, Y+
   \   000000C8   9508               RET
    482          
    483          
    484          /*************************************************************************
    485          *
    486          *  Receive Serial number and version information from Radar
    487          *
    488          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    489          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    490              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    491              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000000   2F60               MOV     R22, R16
   \   00000002   E070               LDI     R23, 0
   \   00000004   E14A               LDI     R20, 26
   \   00000006   9F04               MUL     R16, R20
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8502               LDD     R16, Z+10
   \   00000010   8513               LDD     R17, Z+11
   \   00000012   0F02               ADD     R16, R18
   \   00000014   1F13               ADC     R17, R19
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   8502               LDD     R16, Z+10
   \   0000001A   0F66               LSL     R22
   \   0000001C   1F77               ROL     R23
   \   0000001E   0F66               LSL     R22
   \   00000020   1F77               ROL     R23
   \   00000022   9120....           LDS     R18, PortPair
   \   00000026   E030               LDI     R19, 0
   \   00000028   0F62               ADD     R22, R18
   \   0000002A   1F73               ADC     R23, R19
   \   0000002C   01FB               MOVW    R31:R30, R23:R22
   \   0000002E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000032   A703               STD     Z+43, R16
    492          }
   \   00000034   9508               RET
    493          
    494          /*************************************************************************
    495          *
    496          *  Receive pressure measured data from AN_SGCNV
    497          *
    498          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    499          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   0139               MOVW    R7:R6, R19:R18
    500          
    501              unsigned short pnt, ADCh;
    502              short packlen;
    503          
    504              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000012   2F80               MOV     R24, R16
   \   00000014   E090               LDI     R25, 0
   \   00000016   E10A               LDI     R16, 26
   \   00000018   2F28               MOV     R18, R24
   \   0000001A   9F20               MUL     R18, R16
   \   0000001C   ....               LDI     R26, LOW(UART16552)
   \   0000001E   ....               LDI     R27, (UART16552) >> 8
   \   00000020   0DA0               ADD     R26, R0
   \   00000022   1DB1               ADC     R27, R1
   \   00000024   01FD               MOVW    R31:R30, R27:R26
   \   00000026   8502               LDD     R16, Z+10
   \   00000028   8513               LDD     R17, Z+11
   \   0000002A   0D06               ADD     R16, R6
   \   0000002C   1F13               ADC     R17, R19
   \   0000002E   5001               SUBI    R16, 1
   \   00000030   4010               SBCI    R17, 0
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   8040               LD      R4, Z
   \   00000036   2455               CLR     R5
    505          
    506              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000038   ....               LDI     R16, LOW(UARTSEND)
   \   0000003A   ....               LDI     R17, (UARTSEND) >> 8
   \   0000003C   ........           CALL    OS_Use
    507          
    508              if (packlen > 0) {
   \   00000040   E001               LDI     R16, 1
   \   00000042   1640               CP      R4, R16
   \   00000044   0659               CPC     R5, R25
   \   00000046   F40C               BRGE    $+2+2
   \   00000048   C04B               RJMP    ??ReceivePTOData_0
    509                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   0000004A   E020               LDI     R18, 0
   \   0000004C   E030               LDI     R19, 0
   \   0000004E   2044               TST     R4
   \   00000050   F409               BRNE    $+2+2
   \   00000052   C046               RJMP    ??ReceivePTOData_0
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   85A2               LDD     R26, Z+10
   \   00000058   85B3               LDD     R27, Z+11
   \   0000005A   0DA6               ADD     R26, R6
   \   0000005C   1DB7               ADC     R27, R7
   \   0000005E   0F88               LSL     R24
   \   00000060   1F99               ROL     R25
   \   00000062   0F88               LSL     R24
   \   00000064   1F99               ROL     R25
   \   00000066   018C               MOVW    R17:R16, R25:R24
    510                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceivePTOData_1:
   \   00000068   902C               LD      R2, X
   \   0000006A   2433               CLR     R3
    511                      if (ADCh < 14) {
   \   0000006C   E04E               LDI     R20, 14
   \   0000006E   1624               CP      R2, R20
   \   00000070   F588               BRCC    ??ReceivePTOData_2
    512                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000072   01FD               MOVW    R31:R30, R27:R26
   \   00000074   8161               LDD     R22, Z+1
   \   00000076   ....               LDI     R30, LOW((TData + 59))
   \   00000078   ....               LDI     R31, HIGH((TData + 59))
   \   0000007A   0DE2               ADD     R30, R2
   \   0000007C   1DF5               ADC     R31, R5
   \   0000007E   9140....           LDS     R20, PortPair
   \   00000082   01C8               MOVW    R25:R24, R17:R16
   \   00000084   0F84               ADD     R24, R20
   \   00000086   1D95               ADC     R25, R5
   \   00000088   E04E               LDI     R20, 14
   \   0000008A   9F94               MUL     R25, R20
   \   0000008C   2D90               MOV     R25, R0
   \   0000008E   9F84               MUL     R24, R20
   \   00000090   0D91               ADD     R25, R1
   \   00000092   0DE0               ADD     R30, R0
   \   00000094   1FF9               ADC     R31, R25
   \   00000096   8360               ST      Z, R22
    513                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000098   01FD               MOVW    R31:R30, R27:R26
   \   0000009A   8142               LDD     R20, Z+2
   \   0000009C   8153               LDD     R21, Z+3
   \   0000009E   8164               LDD     R22, Z+4
   \   000000A0   8175               LDD     R23, Z+5
   \   000000A2   ....               LDI     R24, LOW((TData + 731))
   \   000000A4   ....               LDI     R25, HIGH((TData + 731))
   \   000000A6   0C22               LSL     R2
   \   000000A8   1C33               ROL     R3
   \   000000AA   0C22               LSL     R2
   \   000000AC   1C33               ROL     R3
   \   000000AE   0D82               ADD     R24, R2
   \   000000B0   1D93               ADC     R25, R3
   \   000000B2   9000....           LDS     R0, PortPair
   \   000000B6   0118               MOVW    R3:R2, R17:R16
   \   000000B8   0C20               ADD     R2, R0
   \   000000BA   1C35               ADC     R3, R5
   \   000000BC   E3E8               LDI     R30, 56
   \   000000BE   9E3E               MUL     R3, R30
   \   000000C0   2C30               MOV     R3, R0
   \   000000C2   9E2E               MUL     R2, R30
   \   000000C4   0C31               ADD     R3, R1
   \   000000C6   0D80               ADD     R24, R0
   \   000000C8   1D93               ADC     R25, R3
   \   000000CA   01FC               MOVW    R31:R30, R25:R24
   \   000000CC   8340               ST      Z, R20
   \   000000CE   8351               STD     Z+1, R21
   \   000000D0   8362               STD     Z+2, R22
   \   000000D2   8373               STD     Z+3, R23
    514                      }
    515                  }
   \                     ??ReceivePTOData_2:
   \   000000D4   5F2A               SUBI    R18, 250
   \   000000D6   4F3F               SBCI    R19, 255
   \   000000D8   9616               ADIW    R27:R26, 6
   \   000000DA   1524               CP      R18, R4
   \   000000DC   0535               CPC     R19, R5
   \   000000DE   F220               BRCS    ??ReceivePTOData_1
    516              }
    517              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   000000E0   ....               LDI     R16, LOW(UARTSEND)
   \   000000E2   ....               LDI     R17, (UARTSEND) >> 8
   \   000000E4   ........           CALL    OS_Unuse
    518          }
   \   000000E8   ....               RJMP    ?Subroutine1
    519          /*************************************************************************
    520          *
    521          *  Receive Wash Track and High Level data from AN_SGCNV
    522          *
    523          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    524          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   2F80               MOV     R24, R16
   \   0000000A   01D9               MOVW    R27:R26, R19:R18
    525          
    526              // Fixed packet length
    527              //short packlen;
    528          
    529              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    530          
    531              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   0000000C   ....               LDI     R16, LOW(UARTSEND)
   \   0000000E   ....               LDI     R17, (UARTSEND) >> 8
   \   00000010   ........           CALL    OS_Use
    532              short Index = (ch * 4) + PortPair;
   \   00000014   2F48               MOV     R20, R24
   \   00000016   E050               LDI     R21, 0
   \   00000018   2F08               MOV     R16, R24
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   0F00               LSL     R16
   \   0000001E   1F11               ROL     R17
   \   00000020   0F00               LSL     R16
   \   00000022   1F11               ROL     R17
   \   00000024   9120....           LDS     R18, PortPair
   \   00000028   0F02               ADD     R16, R18
   \   0000002A   1F15               ADC     R17, R21
   \   0000002C   E12A               LDI     R18, 26
   \   0000002E   9F42               MUL     R20, R18
   \   00000030   ....               LDI     R30, LOW(UART16552)
   \   00000032   ....               LDI     R31, (UART16552) >> 8
   \   00000034   0DE0               ADD     R30, R0
   \   00000036   1DF1               ADC     R31, R1
   \   00000038   8522               LDD     R18, Z+10
   \   0000003A   8533               LDD     R19, Z+11
   \   0000003C   0F2A               ADD     R18, R26
   \   0000003E   1F3B               ADC     R19, R27
   \   00000040   01B8               MOVW    R23:R22, R17:R16
   \   00000042   0F66               LSL     R22
   \   00000044   1F77               ROL     R23
   \   00000046   0F66               LSL     R22
   \   00000048   1F77               ROL     R23
   \   0000004A   0F66               LSL     R22
   \   0000004C   1F77               ROL     R23
   \   0000004E   ....               LDI     R20, LOW(TData)
   \   00000050   ....               LDI     R21, (TData) >> 8
   \   00000052   0F46               ADD     R20, R22
   \   00000054   1F57               ADC     R21, R23
   \   00000056   01DA               MOVW    R27:R26, R21:R20
   \   00000058   56A5               SUBI    R26, 101
   \   0000005A   4FBB               SBCI    R27, 251
   \   0000005C   01F9               MOVW    R31:R30, R19:R18
   \   0000005E   9162               LD      R22, -Z
   \   00000060   3064               CPI     R22, 4
   \   00000062   F501               BRNE    ??ReceiveWHData_0
    533              // Check if we have time information included
    534              if (UART16552[ch].pRxBuffer[pointer -1] == 4 ) {
    535                  for (short pnt = 0; pnt < 3; pnt++) {
   \   00000064   0109               MOVW    R1:R0, R19:R18
   \   00000066   01BD               MOVW    R23:R22, R27:R26
   \   00000068   E093               LDI     R25, 3
    536                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer+pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_1:
   \   0000006A   01F0               MOVW    R31:R30, R1:R0
   \   0000006C   9021               LD      R2, Z+
   \   0000006E   010F               MOVW    R1:R0, R31:R30
   \   00000070   2433               CLR     R3
   \   00000072   01FB               MOVW    R31:R30, R23:R22
   \   00000074   9221               ST      Z+, R2
   \   00000076   9231               ST      Z+, R3
   \   00000078   01BF               MOVW    R23:R22, R31:R30
    537                  }
   \   0000007A   959A               DEC     R25
   \   0000007C   F7B1               BRNE    ??ReceiveWHData_1
    538                  // 4th WashTrack dont come
    539                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \   0000007E   554F               SUBI    R20, 95
   \   00000080   4F5B               SBCI    R21, 251
   \   00000082   01FA               MOVW    R31:R30, R21:R20
   \   00000084   8230               ST      Z, R3
   \   00000086   8231               STD     Z+1, R3
    540                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer +3]; // Hgh levels in 5th byte
   \   00000088   01F9               MOVW    R31:R30, R19:R18
   \   0000008A   8123               LDD     R18, Z+3
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   00000090   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000092   8320               ST      Z, R18
    541                  TData.RS4.WTTime[Index] = 0;
   \   00000094   0F00               LSL     R16
   \   00000096   1F11               ROL     R17
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   0000009E   8230               ST      Z, R3
   \   000000A0   8231               STD     Z+1, R3
   \   000000A2   C01F               RJMP    ??ReceiveWHData_2
    542              }else{
    543                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   000000A4   01BD               MOVW    R23:R22, R27:R26
   \   000000A6   01A9               MOVW    R21:R20, R19:R18
   \   000000A8   E094               LDI     R25, 4
    544                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_3:
   \   000000AA   01FA               MOVW    R31:R30, R21:R20
   \   000000AC   9001               LD      R0, Z+
   \   000000AE   9011               LD      R1, Z+
   \   000000B0   01AF               MOVW    R21:R20, R31:R30
   \   000000B2   01FB               MOVW    R31:R30, R23:R22
   \   000000B4   9201               ST      Z+, R0
   \   000000B6   9211               ST      Z+, R1
   \   000000B8   01BF               MOVW    R23:R22, R31:R30
    545                  }
   \   000000BA   959A               DEC     R25
   \   000000BC   F7B1               BRNE    ??ReceiveWHData_3
    546                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \   000000BE   5F2D               SUBI    R18, 253
   \   000000C0   4F3F               SBCI    R19, 255
   \   000000C2   01F9               MOVW    R31:R30, R19:R18
   \   000000C4   8145               LDD     R20, Z+5
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000CC   8340               ST      Z, R20
    547                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   000000CE   01F9               MOVW    R31:R30, R19:R18
   \   000000D0   8126               LDD     R18, Z+6
   \   000000D2   8137               LDD     R19, Z+7
   \   000000D4   0F00               LSL     R16
   \   000000D6   1F11               ROL     R17
   \   000000D8   01F8               MOVW    R31:R30, R17:R16
   \   000000DA   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000DE   8320               ST      Z, R18
   \   000000E0   8331               STD     Z+1, R19
    548              }
    549              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_2:
   \   000000E2   0F88               LSL     R24
   \   000000E4   0F88               LSL     R24
   \   000000E6   9100....           LDS     R16, PortPair
   \   000000EA   0F80               ADD     R24, R16
   \   000000EC   2F48               MOV     R20, R24
   \   000000EE   E001               LDI     R16, 1
   \   000000F0   E010               LDI     R17, 0
   \   000000F2   ........           CALL    ?S_SHL_L02
   \   000000F6   9110....           LDS     R17, (TData + 1267)
   \   000000FA   2B10               OR      R17, R16
   \   000000FC   9310....           STS     (TData + 1267), R17
    550              OS_Unuse(&UARTSEND);
   \   00000100   ....               LDI     R16, LOW(UARTSEND)
   \   00000102   ....               LDI     R17, (UARTSEND) >> 8
   \   00000104   ........           CALL    OS_Unuse
    551          }
   \   00000108                      REQUIRE ?Subroutine3
   \   00000108                      ;               // Fall through to label ?Subroutine3
    552          
    553          
    554          /************************************************************************
    555          *
    556          *  Receive raw data for pressure, temp and other from AN_SGCNV
    557          *
    558          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    559          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
    560          
    561              char pnt, ADCh;
    562              short packlen;
    563          
    564              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000010   2F80               MOV     R24, R16
   \   00000012   E090               LDI     R25, 0
   \   00000014   E10A               LDI     R16, 26
   \   00000016   2F48               MOV     R20, R24
   \   00000018   9F40               MUL     R20, R16
   \   0000001A   ....               LDI     R30, LOW(UART16552)
   \   0000001C   ....               LDI     R31, (UART16552) >> 8
   \   0000001E   0DE0               ADD     R30, R0
   \   00000020   1DF1               ADC     R31, R1
   \   00000022   8562               LDD     R22, Z+10
   \   00000024   8573               LDD     R23, Z+11
   \   00000026   01FB               MOVW    R31:R30, R23:R22
   \   00000028   0FE2               ADD     R30, R18
   \   0000002A   1FF3               ADC     R31, R19
   \   0000002C   9022               LD      R2, -Z
   \   0000002E   2433               CLR     R3
    565          
    566              if (packlen > 0) {
   \   00000030   E001               LDI     R16, 1
   \   00000032   1620               CP      R2, R16
   \   00000034   0639               CPC     R3, R25
   \   00000036   F1EC               BRLT    ??ReceiveRData_0
    567                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000038   E040               LDI     R20, 0
   \   0000003A   0F88               LSL     R24
   \   0000003C   1F99               ROL     R25
   \   0000003E   0F88               LSL     R24
   \   00000040   1F99               ROL     R25
   \   00000042   C034               RJMP    ??ReceiveRData_1
    568                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceiveRData_2:
   \   00000044   0189               MOVW    R17:R16, R19:R18
   \   00000046   0F04               ADD     R16, R20
   \   00000048   1D13               ADC     R17, R3
   \   0000004A   01FB               MOVW    R31:R30, R23:R22
   \   0000004C   0FE0               ADD     R30, R16
   \   0000004E   1FF1               ADC     R31, R17
   \   00000050   8100               LD      R16, Z
    569                      if (ADCh < 14) {
   \   00000052   300E               CPI     R16, 14
   \   00000054   F550               BRCC    ??ReceiveRData_3
    570                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000056   2E40               MOV     R4, R16
   \   00000058   2455               CLR     R5
   \   0000005A   8151               LDD     R21, Z+1
   \   0000005C   ....               LDI     R26, LOW((TData + 59))
   \   0000005E   ....               LDI     R27, HIGH((TData + 59))
   \   00000060   0FA0               ADD     R26, R16
   \   00000062   1DB3               ADC     R27, R3
   \   00000064   9100....           LDS     R16, PortPair
   \   00000068   013C               MOVW    R7:R6, R25:R24
   \   0000006A   0E60               ADD     R6, R16
   \   0000006C   1C73               ADC     R7, R3
   \   0000006E   E00E               LDI     R16, 14
   \   00000070   9E70               MUL     R7, R16
   \   00000072   2C70               MOV     R7, R0
   \   00000074   9E60               MUL     R6, R16
   \   00000076   0C71               ADD     R7, R1
   \   00000078   0DA0               ADD     R26, R0
   \   0000007A   1DB7               ADC     R27, R7
   \   0000007C   935C               ST      X, R21
    571                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000007E   81A2               LDD     R26, Z+2
   \   00000080   81B3               LDD     R27, Z+3
   \   00000082   ....               LDI     R30, LOW((TData + 283))
   \   00000084   ....               LDI     R31, HIGH((TData + 283))
   \   00000086   0C44               LSL     R4
   \   00000088   1C55               ROL     R5
   \   0000008A   0DE4               ADD     R30, R4
   \   0000008C   1DF5               ADC     R31, R5
   \   0000008E   9100....           LDS     R16, PortPair
   \   00000092   012C               MOVW    R5:R4, R25:R24
   \   00000094   0E40               ADD     R4, R16
   \   00000096   1C53               ADC     R5, R3
   \   00000098   E10C               LDI     R16, 28
   \   0000009A   9E50               MUL     R5, R16
   \   0000009C   2C50               MOV     R5, R0
   \   0000009E   9E40               MUL     R4, R16
   \   000000A0   0C51               ADD     R5, R1
   \   000000A2   0DE0               ADD     R30, R0
   \   000000A4   1DF5               ADC     R31, R5
   \   000000A6   83A0               ST      Z, R26
   \   000000A8   83B1               STD     Z+1, R27
    572                      }
    573                  }
   \                     ??ReceiveRData_3:
   \   000000AA   5F4C               SUBI    R20, 252
   \                     ??ReceiveRData_1:
   \   000000AC   1542               CP      R20, R2
   \   000000AE   0433               CPC     R3, R3
   \   000000B0   F24C               BRLT    ??ReceiveRData_2
    574              }
    575          }
   \                     ??ReceiveRData_0:
   \   000000B2   ....               RJMP    ?Subroutine1
    576          
    577          /*************************************************************************
    578          *
    579          *  Receive cal data  from AN_SGCNV
    580          *
    581          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    582          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
    583          
    584              char pnt, ADCh;
    585              short packlen;
    586          
    587              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000010   2F80               MOV     R24, R16
   \   00000012   E090               LDI     R25, 0
   \   00000014   E10A               LDI     R16, 26
   \   00000016   2F48               MOV     R20, R24
   \   00000018   9F40               MUL     R20, R16
   \   0000001A   ....               LDI     R30, LOW(UART16552)
   \   0000001C   ....               LDI     R31, (UART16552) >> 8
   \   0000001E   0DE0               ADD     R30, R0
   \   00000020   1DF1               ADC     R31, R1
   \   00000022   8562               LDD     R22, Z+10
   \   00000024   8573               LDD     R23, Z+11
   \   00000026   01FB               MOVW    R31:R30, R23:R22
   \   00000028   0FE2               ADD     R30, R18
   \   0000002A   1FF3               ADC     R31, R19
   \   0000002C   9022               LD      R2, -Z
   \   0000002E   2433               CLR     R3
    588          
    589              if (packlen > 0) {
   \   00000030   E001               LDI     R16, 1
   \   00000032   1620               CP      R2, R16
   \   00000034   0639               CPC     R3, R25
   \   00000036   F1EC               BRLT    ??ReceiveCData_0
    590                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000038   E040               LDI     R20, 0
   \   0000003A   0F88               LSL     R24
   \   0000003C   1F99               ROL     R25
   \   0000003E   0F88               LSL     R24
   \   00000040   1F99               ROL     R25
   \   00000042   C034               RJMP    ??ReceiveCData_1
    591                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceiveCData_2:
   \   00000044   0189               MOVW    R17:R16, R19:R18
   \   00000046   0F04               ADD     R16, R20
   \   00000048   1D13               ADC     R17, R3
   \   0000004A   01FB               MOVW    R31:R30, R23:R22
   \   0000004C   0FE0               ADD     R30, R16
   \   0000004E   1FF1               ADC     R31, R17
   \   00000050   8100               LD      R16, Z
    592                      if (ADCh < 14) {
   \   00000052   300E               CPI     R16, 14
   \   00000054   F550               BRCC    ??ReceiveCData_3
    593                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000056   2E40               MOV     R4, R16
   \   00000058   2455               CLR     R5
   \   0000005A   8151               LDD     R21, Z+1
   \   0000005C   ....               LDI     R26, LOW((TData + 59))
   \   0000005E   ....               LDI     R27, HIGH((TData + 59))
   \   00000060   0FA0               ADD     R26, R16
   \   00000062   1DB3               ADC     R27, R3
   \   00000064   9100....           LDS     R16, PortPair
   \   00000068   013C               MOVW    R7:R6, R25:R24
   \   0000006A   0E60               ADD     R6, R16
   \   0000006C   1C73               ADC     R7, R3
   \   0000006E   E00E               LDI     R16, 14
   \   00000070   9E70               MUL     R7, R16
   \   00000072   2C70               MOV     R7, R0
   \   00000074   9E60               MUL     R6, R16
   \   00000076   0C71               ADD     R7, R1
   \   00000078   0DA0               ADD     R26, R0
   \   0000007A   1DB7               ADC     R27, R7
   \   0000007C   935C               ST      X, R21
    594                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000007E   81A2               LDD     R26, Z+2
   \   00000080   81B3               LDD     R27, Z+3
   \   00000082   ....               LDI     R30, LOW((TData + 507))
   \   00000084   ....               LDI     R31, HIGH((TData + 507))
   \   00000086   0C44               LSL     R4
   \   00000088   1C55               ROL     R5
   \   0000008A   0DE4               ADD     R30, R4
   \   0000008C   1DF5               ADC     R31, R5
   \   0000008E   9100....           LDS     R16, PortPair
   \   00000092   012C               MOVW    R5:R4, R25:R24
   \   00000094   0E40               ADD     R4, R16
   \   00000096   1C53               ADC     R5, R3
   \   00000098   E10C               LDI     R16, 28
   \   0000009A   9E50               MUL     R5, R16
   \   0000009C   2C50               MOV     R5, R0
   \   0000009E   9E40               MUL     R4, R16
   \   000000A0   0C51               ADD     R5, R1
   \   000000A2   0DE0               ADD     R30, R0
   \   000000A4   1DF5               ADC     R31, R5
   \   000000A6   83A0               ST      Z, R26
   \   000000A8   83B1               STD     Z+1, R27
    595                      }
    596                  }
   \                     ??ReceiveCData_3:
   \   000000AA   5F4C               SUBI    R20, 252
   \                     ??ReceiveCData_1:
   \   000000AC   1542               CP      R20, R2
   \   000000AE   0433               CPC     R3, R3
   \   000000B0   F24C               BRLT    ??ReceiveCData_2
    597              }
    598          }
   \                     ??ReceiveCData_0:
   \   000000B2                      REQUIRE ?Subroutine1
   \   000000B2                      ;               // Fall through to label ?Subroutine1
    599          
    600          /*************************************************************************
    601          *
    602          *  Receive card status  from AN_SGCNV
    603          *
    604          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    605          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    606          
    607              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
   \   00000004   2F40               MOV     R20, R16
   \   00000006   E050               LDI     R21, 0
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   2F64               MOV     R22, R20
   \   0000000C   9F60               MUL     R22, R16
   \   0000000E   ....               LDI     R30, LOW(UART16552)
   \   00000010   ....               LDI     R31, (UART16552) >> 8
   \   00000012   0DE0               ADD     R30, R0
   \   00000014   1DF1               ADC     R31, R1
   \   00000016   85A2               LDD     R26, Z+10
   \   00000018   85B3               LDD     R27, Z+11
   \   0000001A   0FA2               ADD     R26, R18
   \   0000001C   1FB3               ADC     R27, R19
   \   0000001E   0F44               LSL     R20
   \   00000020   1F55               ROL     R21
   \   00000022   0F44               LSL     R20
   \   00000024   1F55               ROL     R21
   \   00000026   916C               LD      R22, X
   \   00000028   9120....           LDS     R18, PortPair
   \   0000002C   E030               LDI     R19, 0
   \   0000002E   018A               MOVW    R17:R16, R21:R20
   \   00000030   0F02               ADD     R16, R18
   \   00000032   1F13               ADC     R17, R19
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000038   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003A   A763               STD     Z+43, R22
    608              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   8121               LDD     R18, Z+1
   \   00000040   9100....           LDS     R16, PortPair
   \   00000044   0F40               ADD     R20, R16
   \   00000046   1F53               ADC     R21, R19
   \   00000048   01FA               MOVW    R31:R30, R21:R20
   \   0000004A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000004E   AB23               STD     Z+51, R18
    609          }
   \   00000050   2DA2               MOV     R26, R2
   \   00000052   2FB7               MOV     R27, R23
   \   00000054   9508               RET
    610          
    611          /*************************************************************************
    612          *
    613          *  Receive config data from AN_SGCNV
    614          *
    615          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    616          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    617          
    618              char i, ADCh;
    619          
    620              for (i = 0; i < 14; i++) {
   \   00000004   E050               LDI     R21, 0
   \   00000006   E16A               LDI     R22, 26
   \   00000008   9F06               MUL     R16, R22
   \   0000000A   2D11               MOV     R17, R1
   \   0000000C   2DA0               MOV     R26, R0
   \   0000000E   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   00000010   ....               SBCI    R17, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   00000012   2FB1               MOV     R27, R17
   \   00000014   91ED               LD      R30, X+
   \   00000016   91FC               LD      R31, X
   \   00000018   0FE2               ADD     R30, R18
   \   0000001A   1FF3               ADC     R31, R19
   \   0000001C   E02E               LDI     R18, 14
   \   0000001E   0F00               LSL     R16
   \   00000020   1F55               ROL     R21
   \   00000022   0F00               LSL     R16
   \   00000024   2F40               MOV     R20, R16
   \   00000026   1F55               ROL     R21
    621                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveConfigData_0:
   \   00000028   8100               LD      R16, Z
    622                  if (ADCh < 14) {
   \   0000002A   300E               CPI     R16, 14
   \   0000002C   F538               BRCC    ??ReceiveConfigData_1
    623                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   0000002E   2F60               MOV     R22, R16
   \   00000030   E070               LDI     R23, 0
   \   00000032   8131               LDD     R19, Z+1
   \   00000034   ....               LDI     R26, LOW((TData + 59))
   \   00000036   ....               LDI     R27, HIGH((TData + 59))
   \   00000038   0FA0               ADD     R26, R16
   \   0000003A   1FB7               ADC     R27, R23
   \   0000003C   9100....           LDS     R16, PortPair
   \   00000040   E010               LDI     R17, 0
   \   00000042   011A               MOVW    R3:R2, R21:R20
   \   00000044   0E20               ADD     R2, R16
   \   00000046   1E37               ADC     R3, R23
   \   00000048   E00E               LDI     R16, 14
   \   0000004A   9E30               MUL     R3, R16
   \   0000004C   2C30               MOV     R3, R0
   \   0000004E   9E20               MUL     R2, R16
   \   00000050   0C31               ADD     R3, R1
   \   00000052   0DA0               ADD     R26, R0
   \   00000054   1DB3               ADC     R27, R3
   \   00000056   933C               ST      X, R19
    624                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000058   8132               LDD     R19, Z+2
   \   0000005A   ....               LDI     R26, LOW((TData + 171))
   \   0000005C   ....               LDI     R27, HIGH((TData + 171))
   \   0000005E   0FA6               ADD     R26, R22
   \   00000060   1FB7               ADC     R27, R23
   \   00000062   9100....           LDS     R16, PortPair
   \   00000066   01BA               MOVW    R23:R22, R21:R20
   \   00000068   0F60               ADD     R22, R16
   \   0000006A   1F71               ADC     R23, R17
   \   0000006C   E00E               LDI     R16, 14
   \   0000006E   9F70               MUL     R23, R16
   \   00000070   2D70               MOV     R23, R0
   \   00000072   9F60               MUL     R22, R16
   \   00000074   0D71               ADD     R23, R1
   \   00000076   0DA0               ADD     R26, R0
   \   00000078   1FB7               ADC     R27, R23
   \   0000007A   933C               ST      X, R19
    625                  }
    626                  pointer += 2;
    627              }
   \                     ??ReceiveConfigData_1:
   \   0000007C   9633               ADIW    R31:R30, 3
   \   0000007E   952A               DEC     R18
   \   00000080   F699               BRNE    ??ReceiveConfigData_0
    628          }
   \   00000082   91A9               LD      R26, Y+
   \   00000084   91B9               LD      R27, Y+
   \   00000086   9508               RET
    629          
    630          /*************************************************************************
    631          *
    632          *  Receive eeprom data from AN_SGCNV
    633          *
    634          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    635          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2F5A               MOV     R21, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F40               MOV     R20, R16
    636          
    637              short i;
    638          
    639              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000006   2F60               MOV     R22, R16
   \   00000008   E302               LDI     R16, 50
   \   0000000A   2E26               MOV     R2, R22
   \   0000000C   9E20               MUL     R2, R16
   \   0000000E   ....               LDI     R26, LOW(TData)
   \   00000010   ....               LDI     R27, (TData) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   56EC               SUBI    R30, 108
   \   0000001A   4FFA               SBCI    R31, 250
   \   0000001C   E001               LDI     R16, 1
   \   0000001E   8300               ST      Z, R16
    640              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000020   0F44               LSL     R20
   \   00000022   0F44               LSL     R20
   \   00000024   9100....           LDS     R16, PortPair
   \   00000028   0F40               ADD     R20, R16
   \   0000002A   8341               STD     Z+1, R20
    641              for (i = 2; i < (41 + 2); i++) {
   \   0000002C   E10A               LDI     R16, 26
   \   0000002E   9F60               MUL     R22, R16
   \   00000030   01F0               MOVW    R31:R30, R1:R0
   \   00000032   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000036   8502               LDD     R16, Z+10
   \   00000038   8513               LDD     R17, Z+11
   \   0000003A   0F02               ADD     R16, R18
   \   0000003C   1F13               ADC     R17, R19
   \   0000003E   56AA               SUBI    R26, 106
   \   00000040   4FBA               SBCI    R27, 250
   \   00000042   E229               LDI     R18, 41
    642                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveCardEEPROMData_0:
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   9131               LD      R19, Z+
   \   00000048   018F               MOVW    R17:R16, R31:R30
   \   0000004A   933D               ST      X+, R19
    643              }
   \   0000004C   952A               DEC     R18
   \   0000004E   F7D1               BRNE    ??ReceiveCardEEPROMData_0
    644          }
   \   00000050   2FA5               MOV     R26, R21
   \   00000052   2FB7               MOV     R27, R23
   \   00000054   9508               RET
    645          
    646          /*************************************************************************
    647          *
    648          * Build send packet header for AN-SGCNV
    649          *
    650          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    651          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    652          
    653              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E000               LDI     R16, 0
   \   00000010   E010               LDI     R17, 0
   \   00000012   8704               STD     Z+12, R16
   \   00000014   8705               STD     Z+13, R16
    654              UART16552[ch].RxLast = 0;
   \   00000016   8706               STD     Z+14, R16
   \   00000018   8707               STD     Z+15, R16
    655              UART16552[ch].TxLast = 0;
   \   0000001A   8304               STD     Z+4, R16
   \   0000001C   8305               STD     Z+5, R16
    656          
    657              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   0000001E   E002               LDI     R16, 2
   \   00000020   81A0               LD      R26, Z
   \   00000022   81B1               LDD     R27, Z+1
   \   00000024   930C               ST      X, R16
    658              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   00000026   81A0               LD      R26, Z
   \   00000028   81B1               LDD     R27, Z+1
   \   0000002A   9611               ADIW    R27:R26, 1
   \   0000002C   930C               ST      X, R16
    659              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   0000002E   81A0               LD      R26, Z
   \   00000030   81B1               LDD     R27, Z+1
   \   00000032   9612               ADIW    R27:R26, 2
   \   00000034   931C               ST      X, R17
    660              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   00000036   EF0D               LDI     R16, 253
   \   00000038   81A0               LD      R26, Z
   \   0000003A   81B1               LDD     R27, Z+1
   \   0000003C   9613               ADIW    R27:R26, 3
   \   0000003E   930C               ST      X, R16
    661              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   00000040   81A0               LD      R26, Z
   \   00000042   81B1               LDD     R27, Z+1
   \   00000044   9614               ADIW    R27:R26, 4
   \   00000046   931C               ST      X, R17
    662              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   00000048   01DF               MOVW    R27:R26, R31:R30
   \   0000004A   91ED               LD      R30, X+
   \   0000004C   91FC               LD      R31, X
   \   0000004E   8315               STD     Z+5, R17
    663          }
   \   00000050   01D9               MOVW    R27:R26, R19:R18
   \   00000052   9508               RET
    664          
    665          /*************************************************************************
    666          *
    667          * Build  packet tail
    668          *
    669          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    670          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   2E20               MOV     R2, R16
    671          
    672              Uart_BuildHeader16552(ch);                                // fist build the header
   \   0000000A   ....               RCALL   Uart_BuildHeader16552
    673          
    674              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   0000000C   ....               LDI     R24, LOW(UART16552)
   \   0000000E   ....               LDI     R25, (UART16552) >> 8
   \   00000010   E10A               LDI     R16, 26
   \   00000012   9E20               MUL     R2, R16
   \   00000014   01DC               MOVW    R27:R26, R25:R24
   \   00000016   0DA0               ADD     R26, R0
   \   00000018   1DB1               ADC     R27, R1
   \   0000001A   E021               LDI     R18, 1
   \   0000001C   910D               LD      R16, X+
   \   0000001E   911C               LD      R17, X
   \   00000020   9711               SBIW    R27:R26, 1
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   8142               LDD     R20, Z+2
   \   00000026   8153               LDD     R21, Z+3
   \   00000028   0F04               ADD     R16, R20
   \   0000002A   1F15               ADC     R17, R21
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   8320               ST      Z, R18
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8102               LDD     R16, Z+2
   \   00000034   8113               LDD     R17, Z+3
   \   00000036   5F0F               SUBI    R16, 255
   \   00000038   4F1F               SBCI    R17, 255
   \   0000003A   8302               STD     Z+2, R16
   \   0000003C   8313               STD     Z+3, R17
    675              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   0000003E   E020               LDI     R18, 0
   \   00000040   8100               LD      R16, Z
   \   00000042   8111               LDD     R17, Z+1
   \   00000044   8142               LDD     R20, Z+2
   \   00000046   8153               LDD     R21, Z+3
   \   00000048   0F04               ADD     R16, R20
   \   0000004A   1F15               ADC     R17, R21
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   8320               ST      Z, R18
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   8102               LDD     R16, Z+2
   \   00000054   8113               LDD     R17, Z+3
   \   00000056   5F0F               SUBI    R16, 255
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   8302               STD     Z+2, R16
   \   0000005C   8313               STD     Z+3, R17
    676          
    677              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   0000005E   91ED               LD      R30, X+
   \   00000060   91FC               LD      R31, X
   \   00000062   9711               SBIW    R27:R26, 1
   \   00000064   8314               STD     Z+4, R17
    678              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   00000066   01FD               MOVW    R31:R30, R27:R26
   \   00000068   8102               LDD     R16, Z+2
   \   0000006A   91ED               LD      R30, X+
   \   0000006C   91FC               LD      R31, X
   \   0000006E   9711               SBIW    R27:R26, 1
   \   00000070   8305               STD     Z+5, R16
    679          
    680          
    681              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   00000072   01FD               MOVW    R31:R30, R27:R26
   \   00000074   8122               LDD     R18, Z+2
   \   00000076   8133               LDD     R19, Z+3
   \   00000078   2D02               MOV     R16, R2
   \   0000007A   ....               RCALL   CalcDSTxChecksumUART16552
   \   0000007C   912D               LD      R18, X+
   \   0000007E   913C               LD      R19, X
   \   00000080   9711               SBIW    R27:R26, 1
   \   00000082   01FD               MOVW    R31:R30, R27:R26
   \   00000084   8142               LDD     R20, Z+2
   \   00000086   8153               LDD     R21, Z+3
   \   00000088   0F24               ADD     R18, R20
   \   0000008A   1F35               ADC     R19, R21
   \   0000008C   01F9               MOVW    R31:R30, R19:R18
   \   0000008E   8300               ST      Z, R16
    682              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   00000090   01FD               MOVW    R31:R30, R27:R26
   \   00000092   8102               LDD     R16, Z+2
   \   00000094   8113               LDD     R17, Z+3
   \   00000096   5F0F               SUBI    R16, 255
   \   00000098   4F1F               SBCI    R17, 255
   \   0000009A   8302               STD     Z+2, R16
   \   0000009C   8313               STD     Z+3, R17
    683                                                                           // to ANSI standard !!!!
    684          
    685              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   0000009E   E023               LDI     R18, 3
   \   000000A0   8100               LD      R16, Z
   \   000000A2   8111               LDD     R17, Z+1
   \   000000A4   8142               LDD     R20, Z+2
   \   000000A6   8153               LDD     R21, Z+3
   \   000000A8   0F04               ADD     R16, R20
   \   000000AA   1F15               ADC     R17, R21
   \   000000AC   01F8               MOVW    R31:R30, R17:R16
   \   000000AE   8320               ST      Z, R18
   \   000000B0   01FD               MOVW    R31:R30, R27:R26
   \   000000B2   8102               LDD     R16, Z+2
   \   000000B4   8113               LDD     R17, Z+3
   \   000000B6   5F0F               SUBI    R16, 255
   \   000000B8   4F1F               SBCI    R17, 255
   \   000000BA   8302               STD     Z+2, R16
   \   000000BC   8313               STD     Z+3, R17
    686              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   000000BE   E020               LDI     R18, 0
   \   000000C0   8100               LD      R16, Z
   \   000000C2   8111               LDD     R17, Z+1
   \   000000C4   8142               LDD     R20, Z+2
   \   000000C6   8153               LDD     R21, Z+3
   \   000000C8   0F04               ADD     R16, R20
   \   000000CA   1F15               ADC     R17, R21
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   8320               ST      Z, R18
   \   000000D0   01FD               MOVW    R31:R30, R27:R26
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   5F0F               SUBI    R16, 255
   \   000000D8   4F1F               SBCI    R17, 255
   \   000000DA   8302               STD     Z+2, R16
   \   000000DC   8313               STD     Z+3, R17
    687          
    688              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   000000DE   5001               SUBI    R16, 1
   \   000000E0   4010               SBCI    R17, 0
   \   000000E2   8306               STD     Z+6, R16
   \   000000E4   8317               STD     Z+7, R17
    689              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   000000E6   E001               LDI     R16, 1
   \   000000E8   8304               STD     Z+4, R16
   \   000000EA   8325               STD     Z+5, R18
    690              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   000000EC   2D02               MOV     R16, R2
   \   000000EE   ....               RCALL   GoToSyncUART16552
    691              if (ch == 0) {                                           // Turn on TXE for channel
   \   000000F0   2022               TST     R2
   \   000000F2   F4A1               BRNE    ??Uart_BuildTail16552_0
    692                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   000000F4   ....               LDI     R16, LOW(TimerUART0)
   \   000000F6   ....               LDI     R17, (TimerUART0) >> 8
   \   000000F8   ........           CALL    OS_RetriggerTimer
    693                  U0_MCR |= RTS;                                    // set RTS on
   \   000000FC   E0EC               LDI     R30, LOW(4364)
   \   000000FE   E1F1               LDI     R31, (4364) >> 8
   \   00000100   8100               LD      R16, Z
   \   00000102   6002               ORI     R16, 0x02
   \   00000104   8300               ST      Z, R16
    694                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000106   E104               LDI     R16, 20
   \   00000108   E010               LDI     R17, 0
   \   0000010A   ........           CALL    OS_Delay
    695                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   0000010E   01FC               MOVW    R31:R30, R25:R24
   \   00000110   81A0               LD      R26, Z
   \   00000112   81B1               LDD     R27, Z+1
   \   00000114   910C               LD      R16, X
   \   00000116   93001108           STS     4360, R16
   \   0000011A   C016               RJMP    ??Uart_BuildTail16552_1
    696              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   0000011C   E001               LDI     R16, 1
   \   0000011E   1620               CP      R2, R16
   \   00000120   F499               BRNE    ??Uart_BuildTail16552_1
    697                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   00000122   ....               LDI     R16, LOW(TimerUART1)
   \   00000124   ....               LDI     R17, (TimerUART1) >> 8
   \   00000126   ........           CALL    OS_RetriggerTimer
    698                  U1_MCR |= RTS;                                      // set RTS on
   \   0000012A   E0E4               LDI     R30, LOW(4356)
   \   0000012C   E1F1               LDI     R31, (4356) >> 8
   \   0000012E   8100               LD      R16, Z
   \   00000130   6002               ORI     R16, 0x02
   \   00000132   8300               ST      Z, R16
    699                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000134   E104               LDI     R16, 20
   \   00000136   E010               LDI     R17, 0
   \   00000138   ........           CALL    OS_Delay
    700                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   0000013C   01FC               MOVW    R31:R30, R25:R24
   \   0000013E   8DA2               LDD     R26, Z+26
   \   00000140   8DB3               LDD     R27, Z+27
   \   00000142   910C               LD      R16, X
   \   00000144   93001100           STS     4352, R16
    701              }
    702          }
   \                     ??Uart_BuildTail16552_1:
   \   00000148   ........           JMP     ?Subroutine3
    703          
    704          /*************************************************************************
    705          *
    706          * Build send request for system status on WIS
    707          *
    708          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine5_0:
   \   00000000   930C               ST      X, R16
   \   00000002   8102               LDD     R16, Z+2
   \   00000004   8113               LDD     R17, Z+3
   \   00000006   5F0F               SUBI    R16, 255
   \   00000008   4F1F               SBCI    R17, 255
   \   0000000A   8302               STD     Z+2, R16
   \   0000000C   8313               STD     Z+3, R17
   \   0000000E   E000               LDI     R16, 0
   \   00000010   81A0               LD      R26, Z
   \   00000012   81B1               LDD     R27, Z+1
   \   00000014   8122               LDD     R18, Z+2
   \   00000016   0FA2               ADD     R26, R18
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   930C               ST      X, R16
   \   0000001C                      REQUIRE ??Subroutine6_0
   \   0000001C                      ;               // Fall through to label ??Subroutine6_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine6_0:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   5F0F               SUBI    R16, 255
   \   00000006   4F1F               SBCI    R17, 255
   \   00000008   8302               STD     Z+2, R16
   \   0000000A   8313               STD     Z+3, R17
   \   0000000C   01DA               MOVW    R27:R26, R21:R20
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    709          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    710          
    711              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E604               LDI     R16, 100
   \   00000010                      REQUIRE ?Subroutine4
   \   00000010                      ;               // Fall through to label ?Subroutine4
    712              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    713          
    714          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   8122               LDD     R18, Z+2
   \   00000006   8133               LDD     R19, Z+3
   \   00000008   0FA2               ADD     R26, R18
   \   0000000A   1FB3               ADC     R27, R19
   \   0000000C   ........           JMP     ??Subroutine5_0
    715          
    716          /*************************************************************************
    717          *
    718          * Build send request for WIS protocoler on WIS
    719          *
    720          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    721          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    722          
    723              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000002   E12A               LDI     R18, 26
   \   00000004   9F02               MUL     R16, R18
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E606               LDI     R16, 102
   \   00000010   81A0               LD      R26, Z
   \   00000012   81B1               LDD     R27, Z+1
   \   00000014   8122               LDD     R18, Z+2
   \   00000016   8133               LDD     R19, Z+3
   \   00000018   0FA2               ADD     R26, R18
   \   0000001A   1FB3               ADC     R27, R19
   \   0000001C   930C               ST      X, R16
   \   0000001E   8122               LDD     R18, Z+2
   \   00000020   8133               LDD     R19, Z+3
   \   00000022   5F2F               SUBI    R18, 255
   \   00000024   4F3F               SBCI    R19, 255
   \   00000026   8322               STD     Z+2, R18
   \   00000028   8333               STD     Z+3, R19
    724              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   0000002A   E001               LDI     R16, 1
   \   0000002C   81A0               LD      R26, Z
   \   0000002E   81B1               LDD     R27, Z+1
   \   00000030   8122               LDD     R18, Z+2
   \   00000032   0FA2               ADD     R26, R18
   \   00000034   1FB3               ADC     R27, R19
   \   00000036   930C               ST      X, R16
   \   00000038   8122               LDD     R18, Z+2
   \   0000003A   8133               LDD     R19, Z+3
   \   0000003C   5F2F               SUBI    R18, 255
   \   0000003E   4F3F               SBCI    R19, 255
   \   00000040   8322               STD     Z+2, R18
   \   00000042   8333               STD     Z+3, R19
    725              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   00000044   81A0               LD      R26, Z
   \   00000046   81B1               LDD     R27, Z+1
   \   00000048   0FA2               ADD     R26, R18
   \   0000004A   1FB3               ADC     R27, R19
   \   0000004C   931C               ST      X, R17
   \   0000004E   ....               RJMP    ??Subroutine6_0
    726          
    727          }
    728          
    729          /*************************************************************************
    730          *
    731          * Build send request for measure data to Water ingress
    732          *
    733          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    734          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    735          
    736              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E605               LDI     R16, 101
   \   00000010                      REQUIRE ?Subroutine0
   \   00000010                      ;               // Fall through to label ?Subroutine0
    737              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    738              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    739          
    740          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   8122               LDD     R18, Z+2
   \   00000006   8133               LDD     R19, Z+3
   \   00000008   0FA2               ADD     R26, R18
   \   0000000A   1FB3               ADC     R27, R19
   \   0000000C   930C               ST      X, R16
   \   0000000E   8102               LDD     R16, Z+2
   \   00000010   8113               LDD     R17, Z+3
   \   00000012   5F0F               SUBI    R16, 255
   \   00000014   4F1F               SBCI    R17, 255
   \   00000016   8302               STD     Z+2, R16
   \   00000018   8313               STD     Z+3, R17
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   81A0               LD      R26, Z
   \   0000001E   81B1               LDD     R27, Z+1
   \   00000020   8122               LDD     R18, Z+2
   \   00000022   0FA2               ADD     R26, R18
   \   00000024   1FB1               ADC     R27, R17
   \   00000026                      REQUIRE ??Subroutine5_0
   \   00000026                      ;               // Fall through to label ??Subroutine5_0
    741          
    742          
    743          /*************************************************************************
    744          *
    745          * Build send request for GODA measurement
    746          *
    747          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    748          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    749          
    750              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   EA00               LDI     R16, 160
   \   00000010   ....               RJMP    ?Subroutine0
    751              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    752              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
    753          
    754          }
    755          
    756          /*************************************************************************
    757          *
    758          * Build send request for GODA device information
    759          *
    760          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    761          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    762          
    763              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   EA01               LDI     R16, 161
   \   00000010   ....               RJMP    ?Subroutine4
    764              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
    765          }
    766          
    767          /*************************************************************************
    768          *
    769          * Build datablock to AN-SGCNV
    770          *
    771          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    772          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   2E38               MOV     R3, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    773          
    774              char i;
    775          
    776              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000008   E023               LDI     R18, 3
   \   0000000A   2E20               MOV     R2, R16
   \   0000000C   E500               LDI     R16, 80
   \   0000000E   2D62               MOV     R22, R2
   \   00000010   9F60               MUL     R22, R16
   \   00000012   ....               LDI     R20, LOW(TData)
   \   00000014   ....               LDI     R21, (TData) >> 8
   \   00000016   0D40               ADD     R20, R0
   \   00000018   1D51               ADC     R21, R1
   \   0000001A   018A               MOVW    R17:R16, R21:R20
   \   0000001C   500C               SUBI    R16, 12
   \   0000001E   4F1B               SBCI    R17, 251
   \   00000020   E16A               LDI     R22, 26
   \   00000022   9E26               MUL     R2, R22
   \   00000024   ....               LDI     R30, LOW(UART16552)
   \   00000026   ....               LDI     R31, (UART16552) >> 8
   \   00000028   0DE0               ADD     R30, R0
   \   0000002A   1DF1               ADC     R31, R1
   \   0000002C   C014               RJMP    ??Uart_BuildSndData_0
    777                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \                     ??Uart_BuildSndData_1:
   \   0000002E   01DA               MOVW    R27:R26, R21:R20
   \   00000030   0FA2               ADD     R26, R18
   \   00000032   1FB7               ADC     R27, R23
   \   00000034   50AC               SUBI    R26, 12
   \   00000036   4FBB               SBCI    R27, 251
   \   00000038   913C               LD      R19, X
   \   0000003A   81A0               LD      R26, Z
   \   0000003C   81B1               LDD     R27, Z+1
   \   0000003E   8162               LDD     R22, Z+2
   \   00000040   8173               LDD     R23, Z+3
   \   00000042   0FA6               ADD     R26, R22
   \   00000044   1FB7               ADC     R27, R23
   \   00000046   933C               ST      X, R19
   \   00000048   8162               LDD     R22, Z+2
   \   0000004A   8173               LDD     R23, Z+3
   \   0000004C   5F6F               SUBI    R22, 255
   \   0000004E   4F7F               SBCI    R23, 255
   \   00000050   8362               STD     Z+2, R22
   \   00000052   8373               STD     Z+3, R23
    778              }
   \   00000054   9523               INC     R18
   \                     ??Uart_BuildSndData_0:
   \   00000056   E070               LDI     R23, 0
   \   00000058   01D8               MOVW    R27:R26, R17:R16
   \   0000005A   9612               ADIW    R27:R26, 2
   \   0000005C   918C               LD      R24, X
   \   0000005E   E090               LDI     R25, 0
   \   00000060   9603               ADIW    R25:R24, 3
   \   00000062   1728               CP      R18, R24
   \   00000064   0779               CPC     R23, R25
   \   00000066   F31C               BRLT    ??Uart_BuildSndData_1
    779              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \   00000068   01F8               MOVW    R31:R30, R17:R16
   \   0000006A   8370               ST      Z, R23
    780          }
   \   0000006C   2D83               MOV     R24, R3
   \   0000006E   ....               RJMP    ??Subroutine7_0
    781          
    782          /*************************************************************************
    783          *
    784          * Build send request for measure data to AN-SGCNV
    785          *
    786          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    787          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    788          
    789              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E00A               LDI     R16, 10
   \   00000010   ....               RJMP    ?Subroutine0
    790              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    791              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    792          
    793          }
    794          
    795          /*************************************************************************
    796          *
    797          * Build send request for raw data to AN-SGCNV
    798          *
    799          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    800          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    801          
    802              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E00D               LDI     R16, 13
   \   00000010   ....               RJMP    ?Subroutine0
    803              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    804              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    805          
    806          }
    807          
    808          /*************************************************************************
    809          *
    810          * Build send request for cal data to AN-SGCNV
    811          *
    812          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    813          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    814          
    815              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E100               LDI     R16, 16
   \   00000010   ....               RJMP    ?Subroutine0
    816              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    817              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    818          
    819          }
    820          
    821          /*************************************************************************
    822          *
    823          * Build send request for system status on AN_SGCNV
    824          *
    825          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    826          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    827          
    828              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E10B               LDI     R16, 27
   \   00000010   ....               RJMP    ?Subroutine0
    829              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    830              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    831          
    832          }
    833          
    834          /*************************************************************************
    835          *
    836          * Build send request for card config on AN_SGCNV
    837          *
    838          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    839          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    840          
    841              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E101               LDI     R16, 17
   \   00000010   ....               RJMP    ?Subroutine4
    842              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    843          
    844          }
    845          
    846          /*************************************************************************
    847          *
    848          * Build send request for EEPROM data on AN_SGCNV
    849          *
    850          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    851          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    852          
    853              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E10A               LDI     R16, 26
   \   00000008   2F42               MOV     R20, R18
   \   0000000A   9F40               MUL     R20, R16
   \   0000000C   ....               LDI     R30, LOW(UART16552)
   \   0000000E   ....               LDI     R31, (UART16552) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   E108               LDI     R16, 24
   \   00000016   81A0               LD      R26, Z
   \   00000018   81B1               LDD     R27, Z+1
   \   0000001A   8142               LDD     R20, Z+2
   \   0000001C   8153               LDD     R21, Z+3
   \   0000001E   0FA4               ADD     R26, R20
   \   00000020   1FB5               ADC     R27, R21
   \   00000022   930C               ST      X, R16
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    854              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000030   E001               LDI     R16, 1
   \   00000032   81A0               LD      R26, Z
   \   00000034   81B1               LDD     R27, Z+1
   \   00000036   8142               LDD     R20, Z+2
   \   00000038   0FA4               ADD     R26, R20
   \   0000003A   1FB1               ADC     R27, R17
   \   0000003C   930C               ST      X, R16
   \   0000003E   8102               LDD     R16, Z+2
   \   00000040   8113               LDD     R17, Z+3
   \   00000042   5F0F               SUBI    R16, 255
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   8302               STD     Z+2, R16
   \   00000048   8313               STD     Z+3, R17
    855              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   0000004A   E0B0               LDI     R27, 0
   \   0000004C   ....               SUBI    R18, LOW((-(TData + 1528) & 0xFFFF))
   \   0000004E   2FA2               MOV     R26, R18
   \   00000050   ....               SBCI    R27, HIGH((-(TData + 1528) & 0xFFFF))
   \   00000052   910C               LD      R16, X
   \   00000054   81A0               LD      R26, Z
   \   00000056   81B1               LDD     R27, Z+1
   \   00000058   8122               LDD     R18, Z+2
   \   0000005A   0FA2               ADD     R26, R18
   \   0000005C   1FB1               ADC     R27, R17
   \   0000005E   930C               ST      X, R16
   \   00000060   8102               LDD     R16, Z+2
   \   00000062   8113               LDD     R17, Z+3
   \   00000064   5F0F               SUBI    R16, 255
   \   00000066   4F1F               SBCI    R17, 255
   \   00000068   8302               STD     Z+2, R16
   \   0000006A   8313               STD     Z+3, R17
    856          
    857          }
   \   0000006C   2FA6               MOV     R26, R22
   \   0000006E   2FB3               MOV     R27, R19
   \   00000070   9508               RET
    858          /*************************************************************************
    859          *
    860          *  Receive data on USARTs
    861          *
    862          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    863          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    864          
    865              switch (UART16552[ch].RxState) {                  // check status
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R26, LOW(UART16552)
   \   0000000E   ....               LDI     R27, (UART16552) >> 8
   \   00000010   0DA0               ADD     R26, R0
   \   00000012   1DB1               ADC     R27, R1
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   8912               LDD     R17, Z+18
   \   00000018   2311               TST     R17
   \   0000001A   F409               BRNE    $+2+2
   \   0000001C   C087               RJMP    ??ReceivePacketUart16552_0
   \   0000001E   951A               DEC     R17
   \   00000020   F031               BREQ    ??ReceivePacketUart16552_1
   \   00000022   951A               DEC     R17
   \   00000024   F149               BREQ    ??ReceivePacketUart16552_2
   \   00000026   5018               SUBI    R17, 8
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C080               RJMP    ??ReceivePacketUart16552_0
   \   0000002C   C07D               RJMP    ??ReceivePacketUart16552_3
    866              case SYNC :
    867                  // all functionallity in inerrupt routine
    868                  break;
    869              case HEADER :
    870                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   0000002E   8586               LDD     R24, Z+14
   \   00000030   8597               LDD     R25, Z+15
   \   00000032   3083               CPI     R24, 3
   \   00000034   4090               SBCI    R25, 0
   \   00000036   F408               BRCC    $+2+2
   \   00000038   C079               RJMP    ??ReceivePacketUart16552_0
    871                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    872                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000003A   8522               LDD     R18, Z+10
   \   0000003C   85F3               LDD     R31, Z+11
   \   0000003E   2FE2               MOV     R30, R18
   \   00000040   8152               LDD     R21, Z+2
   \   00000042   E030               LDI     R19, 0
   \   00000044   8123               LDD     R18, Z+3
   \   00000046   2F42               MOV     R20, R18
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8B26               STD     Z+22, R18
   \   0000004C   8B57               STD     Z+23, R21
    873                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    874                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   0000004E   E728               LDI     R18, 120
   \   00000050   8566               LDD     R22, Z+14
   \   00000052   8577               LDD     R23, Z+15
   \   00000054   1B26               SUB     R18, R22
   \   00000056   0B37               SBC     R19, R23
   \   00000058   1742               CP      R20, R18
   \   0000005A   0753               CPC     R21, R19
   \   0000005C   F008               BRCS    $+2+2
   \   0000005E   C064               RJMP    ??ReceivePacketUart16552_3
   \   00000060   3047               CPI     R20, 7
   \   00000062   4050               SBCI    R21, 0
   \   00000064   F408               BRCC    $+2+2
   \   00000066   C060               RJMP    ??ReceivePacketUart16552_3
    875                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   00000068   E002               LDI     R16, 2
   \   0000006A   8B02               STD     Z+18, R16
    876                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   0000006C   8586               LDD     R24, Z+14
   \   0000006E   8597               LDD     R25, Z+15
   \   00000070   9601               ADIW    R25:R24, 1
   \   00000072   8B80               STD     Z+16, R24
   \   00000074   8B91               STD     Z+17, R25
   \   00000076   C05A               RJMP    ??ReceivePacketUart16552_0
    877                      } else {
    878                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    879                      }
    880                  }
    881                  break;
    882              case RECEIVE :
    883                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   00000078   8920               LDD     R18, Z+16
   \   0000007A   8931               LDD     R19, Z+17
   \   0000007C   5F2F               SUBI    R18, 255
   \   0000007E   4F3F               SBCI    R19, 255
   \   00000080   8B20               STD     Z+16, R18
   \   00000082   8B31               STD     Z+17, R19
   \   00000084   8946               LDD     R20, Z+22
   \   00000086   8957               LDD     R21, Z+23
   \   00000088   1724               CP      R18, R20
   \   0000008A   0735               CPC     R19, R21
   \   0000008C   F408               BRCC    $+2+2
   \   0000008E   C04E               RJMP    ??ReceivePacketUart16552_0
    884                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000090   8522               LDD     R18, Z+10
   \   00000092   8533               LDD     R19, Z+11
   \   00000094   0F24               ADD     R18, R20
   \   00000096   1F35               ADC     R19, R21
   \   00000098   5021               SUBI    R18, 1
   \   0000009A   4030               SBCI    R19, 0
   \   0000009C   01F9               MOVW    R31:R30, R19:R18
   \   0000009E   8110               LD      R17, Z
   \   000000A0   3013               CPI     R17, 3
   \   000000A2   F009               BREQ    $+2+2
   \   000000A4   C041               RJMP    ??ReceivePacketUart16552_3
    885                          if (CalcDSRxChecksum16552(ch)) {
   \   000000A6   2422               CLR     R2
   \   000000A8   2400               CLR     R0
   \   000000AA   2411               CLR     R1
   \   000000AC   01FD               MOVW    R31:R30, R27:R26
   \   000000AE   8542               LDD     R20, Z+10
   \   000000B0   8553               LDD     R21, Z+11
   \   000000B2   8966               LDD     R22, Z+22
   \   000000B4   8977               LDD     R23, Z+23
   \   000000B6   5062               SUBI    R22, 2
   \   000000B8   4070               SBCI    R23, 0
   \   000000BA   ....               LDI     R19, (crc) >> 16
   \   000000BC   E011               LDI     R17, 1
   \   000000BE   C00C               RJMP    ??ReceivePacketUart16552_4
   \                     ??ReceivePacketUart16552_5:
   \   000000C0   2433               CLR     R3
   \   000000C2   01FA               MOVW    R31:R30, R21:R20
   \   000000C4   9121               LD      R18, Z+
   \   000000C6   01AF               MOVW    R21:R20, R31:R30
   \   000000C8   2622               EOR     R2, R18
   \   000000CA   01F1               MOVW    R31:R30, R3:R2
   \   000000CC   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   000000CE   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   000000D0   BF3B               OUT     0x3B, R19
   \   000000D2   9026               ELPM    R2, Z
   \   000000D4   0E01               ADD     R0, R17
   \   000000D6   1C13               ADC     R1, R3
   \                     ??ReceivePacketUart16552_4:
   \   000000D8   1606               CP      R0, R22
   \   000000DA   0617               CPC     R1, R23
   \   000000DC   F388               BRCS    ??ReceivePacketUart16552_5
   \   000000DE   01FD               MOVW    R31:R30, R27:R26
   \   000000E0   8522               LDD     R18, Z+10
   \   000000E2   8533               LDD     R19, Z+11
   \   000000E4   8946               LDD     R20, Z+22
   \   000000E6   8957               LDD     R21, Z+23
   \   000000E8   0F24               ADD     R18, R20
   \   000000EA   1F35               ADC     R19, R21
   \   000000EC   5022               SUBI    R18, 2
   \   000000EE   4030               SBCI    R19, 0
   \   000000F0   01F9               MOVW    R31:R30, R19:R18
   \   000000F2   8110               LD      R17, Z
   \   000000F4   1621               CP      R2, R17
   \   000000F6   F4C1               BRNE    ??ReceivePacketUart16552_3
    886                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   000000F8   01FD               MOVW    R31:R30, R27:R26
   \   000000FA   8522               LDD     R18, Z+10
   \   000000FC   85F3               LDD     R31, Z+11
   \   000000FE   2FE2               MOV     R30, R18
   \   00000100   8110               LD      R17, Z
   \   00000102   3F1D               CPI     R17, 253
   \   00000104   F489               BRNE    ??ReceivePacketUart16552_3
    887                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   00000106   E01A               LDI     R17, 10
   \   00000108   01FD               MOVW    R31:R30, R27:R26
   \   0000010A   8B12               STD     Z+18, R17
    888                                  if (ch == 0) {
   \   0000010C   2300               TST     R16
   \   0000010E   F421               BRNE    ??ReceivePacketUart16552_6
    889                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   00000110   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000112   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000114   E001               LDI     R16, 1
   \   00000116   C005               RJMP    ??ReceivePacketUart16552_7
    890                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_6:
   \   00000118   3001               CPI     R16, 1
   \   0000011A   F441               BRNE    ??ReceivePacketUart16552_0
    891                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   0000011C   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   0000011E   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000120   E002               LDI     R16, 2
   \                     ??ReceivePacketUart16552_7:
   \   00000122   ........           CALL    OS_SignalEvent
   \   00000126   C002               RJMP    ??ReceivePacketUart16552_0
    892                                  }
    893                              } else {
    894                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
    895                              }
    896                          } else {
    897                              GoToSyncUART16552(ch);                                // go to sync modus for recive
    898                          }
    899                      } else {
    900                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    901                      }
    902                  }
    903                  break;
    904              case HANDLE :
    905                  break;
    906              default :
    907                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_3:
   \   00000128   ........           CALL    GoToSyncUART16552
    908                  break;
    909              }                                                           // end switch
    910              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_0:
   \   0000012C   01FD               MOVW    R31:R30, R27:R26
   \   0000012E   8506               LDD     R16, Z+14
   \   00000130   8517               LDD     R17, Z+15
   \   00000132   5F0F               SUBI    R16, 255
   \   00000134   4F1F               SBCI    R17, 255
   \   00000136   8706               STD     Z+14, R16
   \   00000138   8717               STD     Z+15, R17
   \   0000013A   3708               CPI     R16, 120
   \   0000013C   E020               LDI     R18, 0
   \   0000013E   4010               SBCI    R17, 0
   \   00000140   F010               BRCS    ??ReceivePacketUart16552_8
    911                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   00000142   8726               STD     Z+14, R18
   \   00000144   8727               STD     Z+15, R18
    912              }
    913          }
   \                     ??ReceivePacketUart16552_8:
   \   00000146   ....               RJMP    ?Subroutine3
    914          
    915          
    916          /*************************************************************************
    917          *
    918          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    919          *
    920          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    921          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F10               MOV     R17, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    922          
    923              unsigned short cnt;
    924              unsigned char csum;
    925          
    926              csum = 0;
   \   00000008   E000               LDI     R16, 0
    927              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   3023               CPI     R18, 3
   \   0000000C   4030               SBCI    R19, 0
   \   0000000E   F0A0               BRCS    ??CalcDSTxChecksumUART16552_0
   \   00000010   E12A               LDI     R18, 26
   \   00000012   9F12               MUL     R17, R18
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   81A0               LD      R26, Z
   \   0000001C   81B1               LDD     R27, Z+1
   \   0000001E   9612               ADIW    R27:R26, 2
   \   00000020   9702               SBIW    R25:R24, 2
   \   00000022   ....               LDI     R19, (crc) >> 16
    928                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000024   E0F0               LDI     R31, 0
   \   00000026   912D               LD      R18, X+
   \   00000028   2702               EOR     R16, R18
   \   0000002A   2FE0               MOV     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000030   BF3B               OUT     0x3B, R19
   \   00000032   9106               ELPM    R16, Z
    929              }
   \   00000034   9701               SBIW    R25:R24, 1
   \   00000036   F7B1               BRNE    ??CalcDSTxChecksumUART16552_1
    930              return csum;
   \                     ??CalcDSTxChecksumUART16552_0:
   \   00000038   01CA               MOVW    R25:R24, R21:R20
   \   0000003A   01DB               MOVW    R27:R26, R23:R22
   \   0000003C   9508               RET
    931          }
    932          
    933          /*************************************************************************
    934          *
    935          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    936          *
    937          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    938          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2E3A               MOV     R3, R26
   \   00000004   2F79               MOV     R23, R25
   \   00000006   2E28               MOV     R2, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   2F10               MOV     R17, R16
    939          
    940              short cnt;
    941              unsigned char csum;
    942          
    943              csum = 0;
   \   0000000A   E020               LDI     R18, 0
    944              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   0000000C   E080               LDI     R24, 0
   \   0000000E   E090               LDI     R25, 0
   \   00000010   E10A               LDI     R16, 26
   \   00000012   9F10               MUL     R17, R16
   \   00000014   ....               LDI     R26, LOW(UART16552)
   \   00000016   ....               LDI     R27, (UART16552) >> 8
   \   00000018   0DA0               ADD     R26, R0
   \   0000001A   1DB1               ADC     R27, R1
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8502               LDD     R16, Z+10
   \   00000020   8513               LDD     R17, Z+11
   \   00000022   8946               LDD     R20, Z+22
   \   00000024   8957               LDD     R21, Z+23
   \   00000026   5042               SUBI    R20, 2
   \   00000028   4050               SBCI    R21, 0
   \   0000002A   ....               LDI     R19, (crc) >> 16
   \   0000002C   C00C               RJMP    ??CalcDSRxChecksum16552_0
    945                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum16552_1:
   \   0000002E   2F62               MOV     R22, R18
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   9121               LD      R18, Z+
   \   00000034   018F               MOVW    R17:R16, R31:R30
   \   00000036   2762               EOR     R22, R18
   \   00000038   2FE6               MOV     R30, R22
   \   0000003A   E0F0               LDI     R31, 0
   \   0000003C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000040   BF3B               OUT     0x3B, R19
   \   00000042   9126               ELPM    R18, Z
    946              }
   \   00000044   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum16552_0:
   \   00000046   1784               CP      R24, R20
   \   00000048   0795               CPC     R25, R21
   \   0000004A   F388               BRCS    ??CalcDSRxChecksum16552_1
    947              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8502               LDD     R16, Z+10
   \   00000050   8513               LDD     R17, Z+11
   \   00000052   8946               LDD     R20, Z+22
   \   00000054   8957               LDD     R21, Z+23
   \   00000056   0F04               ADD     R16, R20
   \   00000058   1F15               ADC     R17, R21
   \   0000005A   5002               SUBI    R16, 2
   \   0000005C   4010               SBCI    R17, 0
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   8100               LD      R16, Z
   \   00000062   1720               CP      R18, R16
   \   00000064   F411               BRNE    ??CalcDSRxChecksum16552_2
    948                  return true;
   \   00000066   E001               LDI     R16, 1
   \   00000068   C001               RJMP    ??CalcDSRxChecksum16552_3
    949              } else {
    950                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   0000006A   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   0000006C   E010               LDI     R17, 0
   \   0000006E   2D82               MOV     R24, R2
   \   00000070   2F97               MOV     R25, R23
   \   00000072   2DA3               MOV     R26, R3
   \   00000074   91B9               LD      R27, Y+
   \   00000076   9508               RET
    951              }
    952          }
    953          
    954          /*************************************************************************
    955          *
    956          * Goes to sync mode
    957          *
    958          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    959          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    960          
    961              if (ch < 2) {
   \   00000000   3002               CPI     R16, 2
   \   00000002   F468               BRCC    ??GoToSyncUART16552_0
    962                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART16552)
   \   0000000A   ....               LDI     R31, (UART16552) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E000               LDI     R16, 0
   \   00000012   8B03               STD     Z+19, R16
    963                  UART16552[ch].RxState = SYNC;
   \   00000014   8B02               STD     Z+18, R16
    964                  UART16552[ch].RxFirst = 0;
   \   00000016   8704               STD     Z+12, R16
   \   00000018   8705               STD     Z+13, R16
    965                  UART16552[ch].RxPacklen = 0;
   \   0000001A   8B06               STD     Z+22, R16
   \   0000001C   8B07               STD     Z+23, R16
    966              }
    967          }
   \                     ??GoToSyncUART16552_0:
   \   0000001E   9508               RET
    968          
    969          /*************************************************************************
    970          *
    971          *  Empty rx buffer on PC16552 UART
    972          *
    973          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    974          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    975          
    976              switch (uartno) {
   \   00000000   2300               TST     R16
   \   00000002   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000004   950A               DEC     R16
   \   00000006   F041               BREQ    ??EmptyRxBuf16552_1
   \   00000008   9508               RET
    977              case 0:
    978                  do {
    979                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000A   91001108           LDS     R16, 4360
    980                  } while (U0_LSR & DATA_READY);
   \   0000000E   9100110D           LDS     R16, 4365
   \   00000012   FD00               SBRC    R16, 0
   \   00000014   CFFA               RJMP    ??EmptyRxBuf16552_0
   \   00000016   9508               RET
    981                  break;
    982              case 1:
    983                  do {
    984                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   00000018   91001100           LDS     R16, 4352
    985                  } while (U1_LSR & DATA_READY);
   \   0000001C   91001105           LDS     R16, 4357
   \   00000020   FD00               SBRC    R16, 0
   \   00000022   CFFA               RJMP    ??EmptyRxBuf16552_1
    986                  break;
    987              }
    988          }
   \   00000024   9508               RET
    989          
    990          /*************************************************************************
    991          *
    992          *  Init the PC16552 UART
    993          *
    994          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    995          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    996          
    997              /*--- Configure UART data block ---*/
    998              UART16552[channel].TxFirst = 0x00;
   \   00000004   ....               LDI     R26, LOW(UART16552)
   \   00000006   ....               LDI     R27, (UART16552) >> 8
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   0DE0               ADD     R30, R0
   \   00000010   1DF1               ADC     R31, R1
   \   00000012   E030               LDI     R19, 0
   \   00000014   8332               STD     Z+2, R19
   \   00000016   8333               STD     Z+3, R19
    999              UART16552[channel].TxLast = 0x00;
   \   00000018   8334               STD     Z+4, R19
   \   0000001A   8335               STD     Z+5, R19
   1000              UART16552[channel].TxCount = 0x00;
   \   0000001C   8336               STD     Z+6, R19
   \   0000001E   8337               STD     Z+7, R19
   1001              UART16552[channel].RxFirst = 0x00;
   \   00000020   8734               STD     Z+12, R19
   \   00000022   8735               STD     Z+13, R19
   1002              UART16552[channel].RxLast = 0x00;
   \   00000024   8736               STD     Z+14, R19
   \   00000026   8737               STD     Z+15, R19
   1003              UART16552[channel].RxCount = 0x00;
   \   00000028   8B30               STD     Z+16, R19
   \   0000002A   8B31               STD     Z+17, R19
   1004              UART16552[channel].RxState = SYNC;
   \   0000002C   8B32               STD     Z+18, R19
   1005              UART16552[channel].SyncCnt = 0;
   \   0000002E   8B33               STD     Z+19, R19
   1006              UART16552[channel].TxStatus = 0x00;
   \   00000030   8730               STD     Z+8, R19
   1007          
   1008              switch (channel) {
   \   00000032   2300               TST     R16
   \   00000034   F019               BREQ    ??Init16552_0
   \   00000036   950A               DEC     R16
   \   00000038   F149               BREQ    ??Init16552_1
   \   0000003A   C04F               RJMP    ??Init16552_2
   1009              case 0x00 :
   1010                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   0000003C   EF0A               LDI     R16, 250
   \   0000003E   01FD               MOVW    R31:R30, R27:R26
   \   00000040   8B04               STD     Z+20, R16
   \   00000042   8B35               STD     Z+21, R19
   1011                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   00000044   ....               LDI     R16, LOW(TxBuf16552Ch0)
   \   00000046   ....               LDI     R17, (TxBuf16552Ch0) >> 8
   \   00000048   930D               ST      X+, R16
   \   0000004A   931C               ST      X, R17
   1012                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   0000004C   ....               LDI     R16, LOW(RxBuf16552Ch0)
   \   0000004E   ....               LDI     R17, (RxBuf16552Ch0) >> 8
   \   00000050   8702               STD     Z+10, R16
   \   00000052   8713               STD     Z+11, R17
   1013                  U0_LCR = 0x80;          // set DLAB
   \   00000054   E800               LDI     R16, 128
   \   00000056   9300110B           STS     4363, R16
   1014                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000005A   E408               LDI     R16, 72
   \   0000005C   EE18               LDI     R17, 232
   \   0000005E   E021               LDI     R18, 1
   \   00000060   ........           CALL    ?UL_DIVMOD_S_L03
   \   00000064   93001108           STS     4360, R16
   1015                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   00000068   93101109           STS     4361, R17
   1016                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   0000006C   E003               LDI     R16, 3
   \   0000006E   9300110B           STS     4363, R16
   1017                  U0_FCR = 0x01;          // enable FIFO ..
   \   00000072   E001               LDI     R16, 1
   \   00000074   9300110A           STS     4362, R16
   1018                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   00000078   EC01               LDI     R16, 193
   \   0000007A   9300110A           STS     4362, R16
   1019                  U0_IER = 0x03;          // enable TX and RX int.
   \   0000007E   E003               LDI     R16, 3
   \   00000080   93001109           STS     4361, R16
   1020                  U0_MCR = 0x00;          // RTS off
   \   00000084   E000               LDI     R16, 0
   \   00000086   9300110C           STS     4364, R16
   1021                  break;
   \   0000008A   C027               RJMP    ??Init16552_2
   1022              case 0x01 :
   1023                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   0000008C   EF0A               LDI     R16, 250
   \   0000008E   01FD               MOVW    R31:R30, R27:R26
   \   00000090   A706               STD     Z+46, R16
   \   00000092   A737               STD     Z+47, R19
   1024                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   00000094   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   00000096   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   00000098   8F02               STD     Z+26, R16
   \   0000009A   8F13               STD     Z+27, R17
   1025                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   0000009C   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   0000009E   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   000000A0   A304               STD     Z+36, R16
   \   000000A2   A315               STD     Z+37, R17
   1026                  U1_LCR = 0x80;          // set DLAB
   \   000000A4   E800               LDI     R16, 128
   \   000000A6   93001103           STS     4355, R16
   1027                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000000AA   E408               LDI     R16, 72
   \   000000AC   EE18               LDI     R17, 232
   \   000000AE   E021               LDI     R18, 1
   \   000000B0   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000B4   93001100           STS     4352, R16
   1028                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000B8   93101101           STS     4353, R17
   1029                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000BC   E003               LDI     R16, 3
   \   000000BE   93001103           STS     4355, R16
   1030                  U1_FCR = 0x01;          // enable FIFO ..
   \   000000C2   E001               LDI     R16, 1
   \   000000C4   93001102           STS     4354, R16
   1031                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000000C8   EC01               LDI     R16, 193
   \   000000CA   93001102           STS     4354, R16
   1032                  U1_IER = 0x03;          // enable TX and RX int.
   \   000000CE   E003               LDI     R16, 3
   \   000000D0   93001101           STS     4353, R16
   1033                  U1_MCR = 0x00;          // RTS off
   \   000000D4   E000               LDI     R16, 0
   \   000000D6   93001104           STS     4356, R16
   1034                  break;
   1035              default:
   1036                  break;
   1037              }
   1038          }
   \                     ??Init16552_2:
   \   000000DA   91A9               LD      R26, Y+
   \   000000DC   91B9               LD      R27, Y+
   \   000000DE   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   CalcDSRxChecksum16552
      0      2   CalcDSTxChecksumUART16552
      1      2   CheckActionUart16552
        1      2   -> ReceiveCData
        1      2   -> ReceiveCardEEPROMData
        1      2   -> ReceiveCardStatus
        1      2   -> ReceiveConfigData
        1      2   -> ReceivePTOData
        1      2   -> ReceiveRData
        1      2   -> ReceiveRadarData
        1      2   -> ReceiveWHData
        1      2   -> ReceiveWISData
        1      2   -> ReceiveWISStatus
        1      2   -> ReceiveWISXData
      0      2   EmptyRxBuf16552
      5      2   ExtRS485Ctl
        5      2   -> Init16552
        5      2   -> OS_Delay
        5      2   -> OS_WaitEventTimed
        5      2   -> ReadEEPROMByte
        5      2   -> Uart_BuildReqC16552
        5      2   -> Uart_BuildReqCardStatus
        5      2   -> Uart_BuildReqEEPROMData
        5      2   -> Uart_BuildReqM16552
        5      2   -> Uart_BuildReqR16552
        5      2   -> Uart_BuildReqRadarData
        5      2   -> Uart_BuildReqWISData
        5      2   -> Uart_BuildReqWISXData
        5      2   -> Uart_BuildTail16552
        5      2 ?SS_SHR_L02
        5      2 ?S_SHL_L02
      4      2   ExtRS485Rec
        4      2   -> OS_Delay
        4      2   -> OS_SignalEvent
        4      2   -> OS_WaitEventTimed
        4      2   -> Usart16552CheckPackage
        4      2 ?SS_SHR_L02
        4      2 ?S_SHL_L02
      0      2   GoToSyncUART16552
      2      2   Init16552
        2      2 ?UL_DIVMOD_S_L03
      8      2   ReceiveCData
      0      2   ReceiveCardEEPROMData
      0      2   ReceiveCardStatus
      2      2   ReceiveConfigData
      8      2   ReceivePTOData
        8      2   -> OS_Unuse
        8      2   -> OS_Use
      4      2   ReceivePacketUart16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_SignalEvent
      8      2   ReceiveRData
      2      2   ReceiveRadarData
      0      2   ReceiveRadarInfo
      4      2   ReceiveWHData
        4      2   -> OS_Unuse
        4      2   -> OS_Use
        4      2 ?S_SHL_L02
      4      2   ReceiveWISData
        4      2 ?F_DIV_S_L04
        4      2 ?SL2F_S_L04
        4      2 ?UL2F_S_L04
      1      2   ReceiveWISStatus
      0      2   ReceiveWISXData
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
      0      2   Uart_BuildReqC16552
      0      2   Uart_BuildReqCardStatus
      0      2   Uart_BuildReqConfig
      0      2   Uart_BuildReqEEPROMData
      0      2   Uart_BuildReqM16552
      0      2   Uart_BuildReqR16552
      0      2   Uart_BuildReqRadarData
      0      2   Uart_BuildReqRadarInfo
      0      2   Uart_BuildReqWISCardStatus
      0      2   Uart_BuildReqWISData
      0      2   Uart_BuildReqWISXData
      3      2   Uart_BuildSndData
      4      2   Uart_BuildTail16552
        4      2   -> CalcDSTxChecksumUART16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_Delay
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader16552
      7      2   Usart16552CheckPackage
        7      2   -> CheckActionUart16552
        7      2   -> GoToSyncUART16552


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      28  ??Subroutine5_0
      16  ??Subroutine6_0
       8  ??Subroutine7_0
      38  ?Subroutine0
      18  ?Subroutine1
      10  ?Subroutine2
       2  ?Subroutine3
      16  ?Subroutine4
     120  CalcDSRxChecksum16552
      62  CalcDSTxChecksumUART16552
     230  CheckActionUart16552
      38  EmptyRxBuf16552
    1536  ExtRS485Ctl
     498  ExtRS485Rec
      32  GoToSyncUART16552
     224  Init16552
     178  ReceiveCData
      86  ReceiveCardEEPROMData
      86  ReceiveCardStatus
     136  ReceiveConfigData
     234  ReceivePTOData
     328  ReceivePacketUart16552
     180  ReceiveRData
     202  ReceiveRadarData
      54  ReceiveRadarInfo
     264  ReceiveWHData
     224  ReceiveWISData
     120  ReceiveWISStatus
     102  ReceiveWISXData
       8  SetRS4Port
       2  TimoutUART0
       4  TimoutUART1
      84  Uart_BuildHeader16552
      18  Uart_BuildReqC16552
      18  Uart_BuildReqCardStatus
      18  Uart_BuildReqConfig
     114  Uart_BuildReqEEPROMData
      18  Uart_BuildReqM16552
      18  Uart_BuildReqR16552
      18  Uart_BuildReqRadarData
      18  Uart_BuildReqRadarInfo
      16  Uart_BuildReqWISCardStatus
      16  Uart_BuildReqWISData
      80  Uart_BuildReqWISXData
     112  Uart_BuildSndData
     332  Uart_BuildTail16552
     118  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 6 082 bytes in segment CODE
 
 6 082 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 3
