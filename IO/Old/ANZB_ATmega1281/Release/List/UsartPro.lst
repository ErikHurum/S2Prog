###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            07/Feb/2017  12:16:23
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\UsartPro.c
#    Command line =  
#        D:\S2Prog\IO\ANZB\Src\UsartPro.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB\Release\Obj -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\ANZB\Release\List -y --initializers_in_flash --no_tbaa
#        --enable_external_bus -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB\INC\ -I D:\S2Prog\IO\ANZB\..\..\SHARED\INC\
#        --eeprom_size 4096 --clib -Oh
#    List file    =  D:\S2Prog\IO\ANZB\Release\List\UsartPro.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release\Obj\UsartPro.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "string.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          /*************************************************************************
     14          *   (This is a timer calback)
     15          *  Timout timer USART 0
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void TimoutUSART0(void) {
   \                     TimoutUSART0:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     19          
     20              UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000000   9855               CBI     0x0A, 0x05
     21              ClrBit(PORTE, 0x04) ;                              // TXE0 off
   \   00000002   94F8               CLI
   \   00000004   981A               CBI     0x03, 0x02
   \   00000006   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000A   2300               TST     R16
   \   0000000C   F409               BRNE    ??TimoutUSART0_0
   \   0000000E   9478               SEI
     22              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \                     ??TimoutUSART0_0:
   \   00000010   ....               LDI     R16, LOW(TimerUSART0)
   \   00000012   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000014   ........           CALL    OS_StopTimer
     23              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000018   E000               LDI     R16, 0
   \   0000001A   ....               RJMP    GoToSyncUART
   \   0000001C                      REQUIRE _A_UCSR0B
   \   0000001C                      REQUIRE _A_PORTE
     24          }
     25          
     26          /*************************************************************************
     27          *   (This is a timer calback)
     28          *  Timer USART 0 on before TX
     29          *
     30          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     31          void TimoutUSART0On(void) {
   \                     TimoutUSART0On:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     32          
     33              UCSR0B |= __BIT_MASK( UDRIE0) ;                     // start sending by enableing interrupt
   \   00000000   9A55               SBI     0x0A, 0x05
     34              OS_StopTimer(&TimerUSART0On);                    // and stop timer
   \   00000002   ....               LDI     R16, LOW(TimerUSART0On)
   \   00000004   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000006   ........           JMP     OS_StopTimer
   \   0000000A                      REQUIRE _A_UCSR0B
     35          }
     36          
     37          /*************************************************************************
     38          *   (This is a timer calback)
     39          *  Timout timer USART 1
     40          *
     41          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     42          void TimoutUSART1(void) {
   \                     TimoutUSART1:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     43          
     44              UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \   00000000   9100009A           LDS     R16, 154
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   9300009A           STS     154, R16
     45              ClrBit(PORTE, 0x08) ;                              // TXE1 off
   \   0000000A   94F8               CLI
   \   0000000C   981B               CBI     0x03, 0x03
   \   0000000E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000012   2300               TST     R16
   \   00000014   F409               BRNE    ??TimoutUSART1_0
   \   00000016   9478               SEI
     46              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \                     ??TimoutUSART1_0:
   \   00000018   ....               LDI     R16, LOW(TimerUSART1)
   \   0000001A   ....               LDI     R17, (TimerUSART1) >> 8
   \   0000001C   ........           CALL    OS_StopTimer
     47              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000020   E001               LDI     R16, 1
   \   00000022   ....               RJMP    GoToSyncUART
   \   00000024                      REQUIRE _A_UCSR1B
   \   00000024                      REQUIRE _A_PORTE
     48          }
     49          
     50          
     51          /*************************************************************************
     52          *   (This is a timer calback)
     53          *  Timer USART 1 on before TX
     54          *
     55          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     56          void TimoutUSART1On(void) {
   \                     TimoutUSART1On:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     57          
     58              UCSR1B |= __BIT_MASK( UDRIE1) ;                     // start sending by enableing interrupt
   \   00000000   9100009A           LDS     R16, 154
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   9300009A           STS     154, R16
     59              OS_StopTimer(&TimerUSART1On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000000C   ....               LDI     R17, (TimerUSART1On) >> 8
   \   0000000E   ........           JMP     OS_StopTimer
   \   00000012                      REQUIRE _A_UCSR1B
     60          }
     61          
     62          
     63          /*************************************************************************
     64          *   (This is a task)
     65          *  Usart0 handler
     66          *
     67          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     68          void Usart0Handler(void) {
   \                     Usart0Handler:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     69              char stat;
     70          
     71              while (1) {
     72                  stat = OS_WaitEventTimed(1,500);
     73                  if (stat) {
   \                     ??Usart0Handler_0:
   \   00000000   EF24               LDI     R18, 244
   \   00000002   E031               LDI     R19, 1
   \   00000004   E001               LDI     R16, 1
   \   00000006   ........           CALL    OS_WaitEventTimed
   \   0000000A   2300               TST     R16
   \   0000000C   F3C9               BREQ    ??Usart0Handler_0
     74                      OS_Use(&UARTSEND);
   \   0000000E   ....               LDI     R16, LOW(UARTSEND)
   \   00000010   ....               LDI     R17, (UARTSEND) >> 8
   \   00000012   ........           CALL    OS_Use
     75                      UsartCheckPackage(0) ;
   \   00000016   E000               LDI     R16, 0
   \   00000018   ....               RCALL   UsartCheckPackage
     76                      OS_Unuse(&UARTSEND);
   \   0000001A   ....               LDI     R16, LOW(UARTSEND)
   \   0000001C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000001E   ........           CALL    OS_Unuse
   \   00000022   CFEE               RJMP    ??Usart0Handler_0
     77                  }
     78              }
     79          }
     80          
     81          /*************************************************************************
     82          *   (This is a task)
     83          *  Usart1 handler
     84          *
     85          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     86          void Usart1Handler(void) {
   \                     Usart1Handler:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     87              char stat;
     88          
     89              while (1) {
     90                  stat = OS_WaitEventTimed(1,500);
     91                  if (stat) {
   \                     ??Usart1Handler_0:
   \   00000000   EF24               LDI     R18, 244
   \   00000002   E031               LDI     R19, 1
   \   00000004   E001               LDI     R16, 1
   \   00000006   ........           CALL    OS_WaitEventTimed
   \   0000000A   2300               TST     R16
   \   0000000C   F3C9               BREQ    ??Usart1Handler_0
     92                      OS_Use(&UARTSEND);
   \   0000000E   ....               LDI     R16, LOW(UARTSEND)
   \   00000010   ....               LDI     R17, (UARTSEND) >> 8
   \   00000012   ........           CALL    OS_Use
     93                      UsartCheckPackage(1) ;
   \   00000016   E001               LDI     R16, 1
   \   00000018   ....               RCALL   UsartCheckPackage
     94                      OS_Unuse(&UARTSEND);
   \   0000001A   ....               LDI     R16, LOW(UARTSEND)
   \   0000001C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000001E   ........           CALL    OS_Unuse
   \   00000022   CFEE               RJMP    ??Usart1Handler_0
     95                  }
     96              }
     97          }
     98          
     99          /*************************************************************************
    100          *
    101          *  Check the incoming packages
    102          *
    103          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    104          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000A                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000A   2E40               MOV     R4, R16
    105          
    106              unsigned short pointer;
    107              char    retval ;
    108          
    109              UART[ch].RxSendReply = false ;                              // flag for answering set to fault
   \   0000000C   E10A               LDI     R16, 26
   \   0000000E   9E40               MUL     R4, R16
   \   00000010   ....               LDI     R26, LOW(UART)
   \   00000012   ....               LDI     R27, (UART) >> 8
   \   00000014   0DA0               ADD     R26, R0
   \   00000016   1DB1               ADC     R27, R1
   \   00000018   E000               LDI     R16, 0
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8F01               STD     Z+25, R16
    110              UART[ch].TxFirst = 11 ;                                     // Start pos for first TX command
   \   0000001E   E00B               LDI     R16, 11
   \   00000020   E010               LDI     R17, 0
   \   00000022   8302               STD     Z+2, R16
   \   00000024   8313               STD     Z+3, R17
    111              pointer = 7 ;
   \   00000026   E087               LDI     R24, 7
   \   00000028   E090               LDI     R25, 0
    112              do {
    113                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   0000002A   019C               MOVW    R19:R18, R25:R24
   \   0000002C   2D04               MOV     R16, R4
   \   0000002E   ....               RCALL   CheckActionUart
    114                  pointer = pointer + UART[ch].pRxBuffer[pointer+2]
    115                            + (UART[ch].pRxBuffer[pointer+3]*256) + 4;      // Point to a command cmd hb/lb
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8522               LDD     R18, Z+10
   \   00000034   8533               LDD     R19, Z+11
   \   00000036   0F28               ADD     R18, R24
   \   00000038   1F39               ADC     R19, R25
   \   0000003A   01F9               MOVW    R31:R30, R19:R18
   \   0000003C   8112               LDD     R17, Z+2
   \   0000003E   81F3               LDD     R31, Z+3
   \   00000040   2FE1               MOV     R30, R17
   \   00000042   9634               ADIW    R31:R30, 4
   \   00000044   0F8E               ADD     R24, R30
   \   00000046   1F9F               ADC     R25, R31
    116              } while (retval && (pointer < (UART[ch].RxPacklen - 4 )));
   \   00000048   2300               TST     R16
   \   0000004A   F041               BREQ    ??UsartCheckPackage_1
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8906               LDD     R16, Z+22
   \   00000050   8917               LDD     R17, Z+23
   \   00000052   5004               SUBI    R16, 4
   \   00000054   4010               SBCI    R17, 0
   \   00000056   1780               CP      R24, R16
   \   00000058   0791               CPC     R25, R17
   \   0000005A   F338               BRCS    ??UsartCheckPackage_0
    117              if (UART[ch].RxSendReply) {                                   //send answer?
   \                     ??UsartCheckPackage_1:
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   8D01               LDD     R16, Z+25
   \   00000060   2300               TST     R16
   \   00000062   2D04               MOV     R16, R4
   \   00000064   F019               BREQ    ??UsartCheckPackage_2
    118                  Uart_BuildTail(ch);                                       // yes, build tail (and header) and start sending
   \   00000066   ........           CALL    Uart_BuildTail
   \   0000006A   C002               RJMP    ??UsartCheckPackage_3
    119              } else {
    120                  GoToSyncUART(ch) ;                                        // go to sync modus here if not reply
   \                     ??UsartCheckPackage_2:
   \   0000006C   ........           CALL    GoToSyncUART
    121              }
    122          }
   \                     ??UsartCheckPackage_3:
   \   00000070   9189               LD      R24, Y+
   \   00000072   9199               LD      R25, Y+
   \   00000074   91A9               LD      R26, Y+
   \   00000076   91B9               LD      R27, Y+
   \   00000078   9049               LD      R4, Y+
   \   0000007A   9508               RET
    123          
    124          
    125          /*************************************************************************
    126          *
    127          *  Check action on received data
    128          *
    129          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    130          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   927A               ST      -Y, R7
   \   00000006   926A               ST      -Y, R6
   \   00000008   925A               ST      -Y, R5
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   939A               ST      -Y, R25
   \   00000012   938A               ST      -Y, R24
   \   00000014                      REQUIRE ?Register_R4_is_cg_reg
   \   00000014                      REQUIRE ?Register_R5_is_cg_reg
   \   00000014                      REQUIRE ?Register_R6_is_cg_reg
   \   00000014                      REQUIRE ?Register_R7_is_cg_reg
   \   00000014                      REQUIRE ?Register_R8_is_cg_reg
   \   00000014                      REQUIRE ?Register_R9_is_cg_reg
   \   00000014                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000014   2E60               MOV     R6, R16
   \   00000016   01C9               MOVW    R25:R24, R19:R18
    131          
    132              unsigned short   command;
    133              char    retval = true;
   \   00000018   2477               CLR     R7
   \   0000001A   9473               INC     R7
    134          
    135              command = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer+1] << 8);
   \   0000001C   E10A               LDI     R16, 26
   \   0000001E   9E60               MUL     R6, R16
   \   00000020   ....               LDI     R16, LOW(UART)
   \   00000022   2E40               MOV     R4, R16
   \   00000024   ....               LDI     R16, (UART) >> 8
   \   00000026   0C40               ADD     R4, R0
   \   00000028   1D01               ADC     R16, R1
   \   0000002A   2E50               MOV     R5, R16
   \   0000002C   2DE4               MOV     R30, R4
   \   0000002E   2FF0               MOV     R31, R16
   \   00000030   85A2               LDD     R26, Z+10
   \   00000032   85B3               LDD     R27, Z+11
   \   00000034   0FA2               ADD     R26, R18
   \   00000036   1FB3               ADC     R27, R19
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8080               LD      R8, Z
   \   0000003C   8091               LDD     R9, Z+1
    136              switch (command) {                                  // check action
   \   0000003E   0184               MOVW    R17:R16, R9:R8
   \   00000040   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   00000042   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   00000044   BFFB               OUT     0x3B, R31
   \   00000046   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000048   ........           JMP     ?SV_SWITCH_L06
    137              case CMD_REQ_STATUS :                           // Regusest status for target
    138                  BuildStatusData(ch) ;                         // make package
   \                     ??CheckActionUart_0:
   \   0000004C   2D06               MOV     R16, R6
   \   0000004E   ....               RCALL   BuildStatusData
    139                  break;
   \   00000050   C0AF               RJMP    ??CheckActionUart_1
    140          
    141              case CMD_GET_STACKSTATUS :                        // Request stck status
    142                  BuildStackStatus(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_2:
   \   00000052   9604               ADIW    R25:R24, 4
   \   00000054   019C               MOVW    R19:R18, R25:R24
   \   00000056   2D06               MOV     R16, R6
   \   00000058   ....               RCALL   BuildStackStatus
    143                  break ;
   \   0000005A   C0AA               RJMP    ??CheckActionUart_1
    144          
    145              case CMD_EEPROM_RESET :                        // Reset EEPROM??
    146                  GetResetEEPROM(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_3:
   \   0000005C   ........           CALL    EEPROMReset
    147                  break ;
   \   00000060   C0A7               RJMP    ??CheckActionUart_1
    148          
    149              case CMD_GOTO_BOOTLOADER :                        // Goto bootlaoder??
    150                  GetGotoBootloader(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_4:
   \   00000062   9604               ADIW    R25:R24, 4
   \   00000064   019C               MOVW    R19:R18, R25:R24
   \   00000066   2D06               MOV     R16, R6
   \   00000068   ....               RCALL   GetGotoBootloader
    151                  break ;
   \   0000006A   C0A2               RJMP    ??CheckActionUart_1
    152          
    153              case CMD_SND_EEPROM_DATA :                              // Receive EEPROM data
    154                  GetEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_5:
   \   0000006C   9604               ADIW    R25:R24, 4
   \   0000006E   019C               MOVW    R19:R18, R25:R24
   \   00000070   2D06               MOV     R16, R6
   \   00000072   ....               RCALL   GetEEPROMData
    155                  break ;
   \   00000074   C09D               RJMP    ??CheckActionUart_1
    156          
    157              case CMD_REQ_EEPROM_DATA :                              // Request to send EEPROM data
    158                  BuildEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_6:
   \   00000076   9604               ADIW    R25:R24, 4
   \   00000078   019C               MOVW    R19:R18, R25:R24
   \   0000007A   2D06               MOV     R16, R6
   \   0000007C   ....               RCALL   BuildEEPROMData
    159                  break ;
   \   0000007E   C098               RJMP    ??CheckActionUart_1
    160          
    161              case CMD_REQ_INT_DATA :                              // Request external data
    162                  BuildADInt(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_7:
   \   00000080   9604               ADIW    R25:R24, 4
   \   00000082   019C               MOVW    R19:R18, R25:R24
   \   00000084   2D06               MOV     R16, R6
   \   00000086   ....               RCALL   BuildADInt
    163                  break ;
   \   00000088   C093               RJMP    ??CheckActionUart_1
    164          
    165              case CMD_SND_RS4_SETUP :                              // Receive sertup of AN-RS485
    166                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_8:
   \   0000008A   9100....           LDS     R16, UnitID
   \   0000008E   2300               TST     R16
   \   00000090   F009               BREQ    $+2+2
   \   00000092   C08E               RJMP    ??CheckActionUart_1
    167                      GetRS4Setup(ch, pointer+4) ;                     // receive package
   \   00000094   9604               ADIW    R25:R24, 4
   \   00000096   019C               MOVW    R19:R18, R25:R24
   \   00000098   2D06               MOV     R16, R6
   \   0000009A   ....               RCALL   GetRS4Setup
   \   0000009C   C089               RJMP    ??CheckActionUart_1
    168                  }
    169                  break ;
    170          
    171              case CMD_REQ_RS4_SETUP :                              // Request for sertup of AN-RS485
    172                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_9:
   \   0000009E   9100....           LDS     R16, UnitID
   \   000000A2   2300               TST     R16
   \   000000A4   F009               BREQ    $+2+2
   \   000000A6   C084               RJMP    ??CheckActionUart_1
    173                      BuildRS4Setup(ch, pointer+4) ;                     // receive package
   \   000000A8   9604               ADIW    R25:R24, 4
   \   000000AA   019C               MOVW    R19:R18, R25:R24
   \   000000AC   2D06               MOV     R16, R6
   \   000000AE   ....               RCALL   BuildRS4Setup
   \   000000B0   C07F               RJMP    ??CheckActionUart_1
    174                  }
    175                  break ;
    176          
    177              case CMD_SND_RS4_ADBUF :                              // Request external AD data
    178                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_10:
   \   000000B2   9100....           LDS     R16, UnitID
   \   000000B6   2300               TST     R16
   \   000000B8   F009               BREQ    $+2+2
   \   000000BA   C07A               RJMP    ??CheckActionUart_1
    179                      GetADData(ch, pointer+4) ;                     // receive package
   \   000000BC   9604               ADIW    R25:R24, 4
   \   000000BE   019C               MOVW    R19:R18, R25:R24
   \   000000C0   2D06               MOV     R16, R6
   \   000000C2   ....               RCALL   GetADData
   \   000000C4   C075               RJMP    ??CheckActionUart_1
    180                  }
    181                  break;
    182          
    183              case CMD_REQ_RS4_DATA :                              // Request external AD eeprom data
    184                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_11:
   \   000000C6   9100....           LDS     R16, UnitID
   \   000000CA   2300               TST     R16
   \   000000CC   F009               BREQ    $+2+2
   \   000000CE   C070               RJMP    ??CheckActionUart_1
    185                      switch (UART[ch].pRxBuffer[pointer+4]) {
   \   000000D0   01FD               MOVW    R31:R30, R27:R26
   \   000000D2   8104               LDD     R16, Z+4
   \   000000D4   2300               TST     R16
   \   000000D6   F019               BREQ    ??CheckActionUart_12
   \   000000D8   950A               DEC     R16
   \   000000DA   F161               BREQ    ??CheckActionUart_13
   \   000000DC   C069               RJMP    ??CheckActionUart_1
   \                     ??CheckActionUart_12:
   \   000000DE   01DC               MOVW    R27:R26, R25:R24
   \   000000E0   9615               ADIW    R27:R26, 5
   \   000000E2   019D               MOVW    R19:R18, R27:R26
   \   000000E4   2D06               MOV     R16, R6
    186                      case 0:                                         // Measure data
    187                          BuildMData485(ch, pointer+5) ;              // receive package
   \   000000E6   ....               RCALL   BuildMData485
    188                          if (TData.RS4.FromTargetBuffer[0][0] == true) {     // send eepromdata ch 0?
   \   000000E8   9100....           LDS     R16, (TData + 1428)
   \   000000EC   3001               CPI     R16, 1
   \   000000EE   F431               BRNE    ??CheckActionUart_14
    189                            BuildADEpromdata(ch, 0);
   \   000000F0   E010               LDI     R17, 0
   \   000000F2   2D06               MOV     R16, R6
   \   000000F4   ....               RCALL   BuildADEpromdata
    190                            TData.RS4.FromTargetBuffer[0][0] = false ;  // Marked as sent
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   9300....           STS     (TData + 1428), R16
    191                          }
    192                          if (TData.RS4.FromTargetBuffer[1][0] == true) {     // send eepromdata ch 1?
   \                     ??CheckActionUart_14:
   \   000000FC   9100....           LDS     R16, (TData + 1478)
   \   00000100   3001               CPI     R16, 1
   \   00000102   F429               BRNE    ??CheckActionUart_15
    193                            BuildADEpromdata(ch, 1);                  // channel 1
   \   00000104   0183               MOVW    R17:R16, R7:R6
   \   00000106   ....               RCALL   BuildADEpromdata
    194                            TData.RS4.FromTargetBuffer[1][0] = false ;  // Marked as sent
   \   00000108   E000               LDI     R16, 0
   \   0000010A   9300....           STS     (TData + 1478), R16
    195                          }
    196                          if ((TData.RS4.WHDataAvailable >> UART[ch].pRxBuffer[pointer+5]) & 0x01) {
   \                     ??CheckActionUart_15:
   \   0000010E   9100....           LDS     R16, (TData + 1267)
   \   00000112   E010               LDI     R17, 0
   \   00000114   01F2               MOVW    R31:R30, R5:R4
   \   00000116   8522               LDD     R18, Z+10
   \   00000118   8533               LDD     R19, Z+11
   \   0000011A   0F28               ADD     R18, R24
   \   0000011C   1F39               ADC     R19, R25
   \   0000011E   01F9               MOVW    R31:R30, R19:R18
   \   00000120   8145               LDD     R20, Z+5
   \   00000122   ........           CALL    ?SS_SHR_L02
   \   00000126   7001               ANDI    R16, 0x01
   \   00000128   F409               BRNE    $+2+2
   \   0000012A   C042               RJMP    ??CheckActionUart_1
    197                              BuildWHdata(ch, pointer + 5);
   \   0000012C   019D               MOVW    R19:R18, R27:R26
   \   0000012E   2D06               MOV     R16, R6
   \   00000130   ....               RCALL   BuildWHdata
   \   00000132   C03E               RJMP    ??CheckActionUart_1
    198                              //TData.RS4.WHDataAvailable &= ~(0x01 << UART[ch].pRxBuffer[pointer+5]);
    199                          }
    200                          break;
    201                      case 1:                                         // Raw and cal data
    202                          BuildRData485(ch, pointer+5) ;                     // receive package
   \                     ??CheckActionUart_13:
   \   00000134   9605               ADIW    R25:R24, 5
   \   00000136   019C               MOVW    R19:R18, R25:R24
   \   00000138   2D06               MOV     R16, R6
   \   0000013A   ........           CALL    BuildRData485
    203                          break;
   \   0000013E   C038               RJMP    ??CheckActionUart_1
    204                      }
    205                  }
    206                  break;
    207          
    208              case CMD_SND_ANA_SETUP :                              // Receive sertup of AN-RSANA
    209                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_16:
   \   00000140   9100....           LDS     R16, UnitID
   \   00000144   3001               CPI     R16, 1
   \   00000146   F5A1               BRNE    ??CheckActionUart_1
    210                      GetANASetup(ch, pointer+4) ;                     // receive package
   \   00000148   9604               ADIW    R25:R24, 4
   \   0000014A   019C               MOVW    R19:R18, R25:R24
   \   0000014C   2D06               MOV     R16, R6
   \   0000014E   ........           CALL    GetANASetup
   \   00000152   C02E               RJMP    ??CheckActionUart_1
    211                  }
    212                  break ;
    213          
    214              case CMD_REQ_ANA_SETUP :                              // Request for sertup of AN-RSANA
    215                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_17:
   \   00000154   9100....           LDS     R16, UnitID
   \   00000158   3001               CPI     R16, 1
   \   0000015A   F551               BRNE    ??CheckActionUart_1
    216                      BuildANASetup(ch, pointer+4) ;                     // receive package
   \   0000015C   9604               ADIW    R25:R24, 4
   \   0000015E   019C               MOVW    R19:R18, R25:R24
   \   00000160   2D06               MOV     R16, R6
   \   00000162   ........           CALL    BuildANASetup
   \   00000166   C024               RJMP    ??CheckActionUart_1
    217                  }
    218                  break ;
    219          
    220              case CMD_SND_ANA_FILTER :                              // Receive filter of AN-RSANA
    221                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_18:
   \   00000168   9100....           LDS     R16, UnitID
   \   0000016C   3001               CPI     R16, 1
   \   0000016E   F501               BRNE    ??CheckActionUart_1
    222                      GetANAFilter(ch, pointer+4) ;                     // receive package
   \   00000170   9604               ADIW    R25:R24, 4
   \   00000172   019C               MOVW    R19:R18, R25:R24
   \   00000174   2D06               MOV     R16, R6
   \   00000176   ........           CALL    GetANAFilter
   \   0000017A   C01A               RJMP    ??CheckActionUart_1
    223                  }
    224                  break ;
    225          
    226              case CMD_REQ_ANA_FILTER :                              // Request filter of AN-RSANA
    227                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_19:
   \   0000017C   9100....           LDS     R16, UnitID
   \   00000180   3001               CPI     R16, 1
   \   00000182   F4B1               BRNE    ??CheckActionUart_1
    228                      BuildANAFilter(ch, pointer+4) ;                     // receive package
   \   00000184   9604               ADIW    R25:R24, 4
   \   00000186   019C               MOVW    R19:R18, R25:R24
   \   00000188   2D06               MOV     R16, R6
   \   0000018A   ........           CALL    BuildANAFilter
   \   0000018E   C010               RJMP    ??CheckActionUart_1
    229                  }
    230                  break ;
    231          
    232              case CMD_REQ_ANA_DATA :                              // Request ANA data(4-20ma)
    233                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_20:
   \   00000190   9100....           LDS     R16, UnitID
   \   00000194   3001               CPI     R16, 1
   \   00000196   F461               BRNE    ??CheckActionUart_1
    234                      BuildMDataANA(ch, pointer+4) ;                     // receive
   \   00000198   9604               ADIW    R25:R24, 4
   \   0000019A   019C               MOVW    R19:R18, R25:R24
   \   0000019C   2D06               MOV     R16, R6
   \   0000019E   ........           CALL    BuildMDataANA
   \   000001A2   C006               RJMP    ??CheckActionUart_1
    235                  }
    236                  break ;
    237          
    238              default:
    239                  if (command < MAX_ECMD) {                   // handle end commands
   \                     ??CheckActionUart_21:
   \   000001A4   E604               LDI     R16, 100
   \   000001A6   1680               CP      R8, R16
   \   000001A8   E000               LDI     R16, 0
   \   000001AA   0690               CPC     R9, R16
   \   000001AC   F408               BRCC    ??CheckActionUart_1
    240                      retval = false ;
   \   000001AE   2477               CLR     R7
    241                  }
    242                  break;
    243          
    244              }
    245              return retval;
   \                     ??CheckActionUart_1:
   \   000001B0   2D07               MOV     R16, R7
   \   000001B2   9189               LD      R24, Y+
   \   000001B4   9199               LD      R25, Y+
   \   000001B6   91A9               LD      R26, Y+
   \   000001B8   91B9               LD      R27, Y+
   \   000001BA   9049               LD      R4, Y+
   \   000001BC   9059               LD      R5, Y+
   \   000001BE   9069               LD      R6, Y+
   \   000001C0   9079               LD      R7, Y+
   \   000001C2   9089               LD      R8, Y+
   \   000001C4   9099               LD      R9, Y+
   \   000001C6   9508               RET
    246          }
    247          
    248          /*************************************************************************
    249          *
    250          * Build send packet header
    251          *
    252          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    253          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    254          
    255              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R26, LOW(UART)
   \   0000000A   ....               LDI     R27, (UART) >> 8
   \   0000000C   0DA0               ADD     R26, R0
   \   0000000E   1DB1               ADC     R27, R1
   \   00000010   E000               LDI     R16, 0
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   8704               STD     Z+12, R16
   \   00000016   8705               STD     Z+13, R16
    256              UART[ch].RxLast  = 0;
   \   00000018   8706               STD     Z+14, R16
   \   0000001A   8707               STD     Z+15, R16
    257              UART[ch].TxLast  = 0;
   \   0000001C   8304               STD     Z+4, R16
   \   0000001E   8305               STD     Z+5, R16
    258          
    259              UART[ch].pTxBuffer[0] = ANPRO10_SYN ;                        /* Sync */
   \   00000020   E106               LDI     R16, 22
   \   00000022   91ED               LD      R30, X+
   \   00000024   91FC               LD      R31, X
   \   00000026   9711               SBIW    R27:R26, 1
   \   00000028   8300               ST      Z, R16
    260              UART[ch].pTxBuffer[1] = ANPRO10_SYN ;                        /* Sync */
   \   0000002A   91ED               LD      R30, X+
   \   0000002C   91FC               LD      R31, X
   \   0000002E   9711               SBIW    R27:R26, 1
   \   00000030   8301               STD     Z+1, R16
    261              UART[ch].pTxBuffer[2] = ANPRO10_SYN ;                        /* Sync */
   \   00000032   91ED               LD      R30, X+
   \   00000034   91FC               LD      R31, X
   \   00000036   9711               SBIW    R27:R26, 1
   \   00000038   8302               STD     Z+2, R16
    262              UART[ch].pTxBuffer[3] = ANPRO10_SOH ;                        /* Start of header */
   \   0000003A   E001               LDI     R16, 1
   \   0000003C   91ED               LD      R30, X+
   \   0000003E   91FC               LD      R31, X
   \   00000040   9619               ADIW    R27:R26, 9
   \   00000042   8303               STD     Z+3, R16
    263              UART[ch].pTxBuffer[4] = UART[ch].pRxBuffer[2] ;      /* RXID */
   \   00000044   91ED               LD      R30, X+
   \   00000046   91FC               LD      R31, X
   \   00000048   971B               SBIW    R27:R26, 11
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   91ED               LD      R30, X+
   \   0000004E   91FC               LD      R31, X
   \   00000050   9619               ADIW    R27:R26, 9
   \   00000052   8304               STD     Z+4, R16
    264              UART[ch].pTxBuffer[5] = UART[ch].pRxBuffer[3] ;      /* Rx address */
   \   00000054   91ED               LD      R30, X+
   \   00000056   91FC               LD      R31, X
   \   00000058   971B               SBIW    R27:R26, 11
   \   0000005A   8103               LDD     R16, Z+3
   \   0000005C   91ED               LD      R30, X+
   \   0000005E   91FC               LD      R31, X
   \   00000060   9711               SBIW    R27:R26, 1
   \   00000062   8305               STD     Z+5, R16
    265              UART[ch].pTxBuffer[6] = 0x10 + UnitID ;              /* Unit ID */
   \   00000064   9100....           LDS     R16, UnitID
   \   00000068   5F00               SUBI    R16, 240
   \   0000006A   91ED               LD      R30, X+
   \   0000006C   91FC               LD      R31, X
   \   0000006E   9711               SBIW    R27:R26, 1
   \   00000070   8306               STD     Z+6, R16
    266              UART[ch].pTxBuffer[7] = MyAddress();                 /* Tx address */
   \   00000072   ........           CALL    MyAddress
   \   00000076   91ED               LD      R30, X+
   \   00000078   91FC               LD      R31, X
   \   0000007A   9711               SBIW    R27:R26, 1
   \   0000007C   8307               STD     Z+7, R16
    267              UART[ch].pTxBuffer[8] = 0 ;                          /* packlen HB, don't know yet */
   \   0000007E   E000               LDI     R16, 0
   \   00000080   91ED               LD      R30, X+
   \   00000082   91FC               LD      R31, X
   \   00000084   9711               SBIW    R27:R26, 1
   \   00000086   8700               STD     Z+8, R16
    268              UART[ch].pTxBuffer[9] = 0 ;                          /* packlen LB, don't know yet */
   \   00000088   91ED               LD      R30, X+
   \   0000008A   91FC               LD      R31, X
   \   0000008C   9711               SBIW    R27:R26, 1
   \   0000008E   8701               STD     Z+9, R16
    269              UART[ch].pTxBuffer[10] = 0 ;                         /* Header checksum, don't know yet */
   \   00000090   91ED               LD      R30, X+
   \   00000092   91FC               LD      R31, X
   \   00000094   8702               STD     Z+10, R16
    270          }
   \   00000096   91A9               LD      R26, Y+
   \   00000098   91B9               LD      R27, Y+
   \   0000009A   9508               RET
    271          
    272          /*************************************************************************
    273          *
    274          * Build  packet tail
    275          *
    276          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    277          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F80               MOV     R24, R16
    278          
    279              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000008   ....               RCALL   Uart_BuildHeader
    280          
    281              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK & 0xff ;  // End command lb
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F80               MUL     R24, R16
   \   0000000E   ....               LDI     R26, LOW(UART)
   \   00000010   ....               LDI     R27, (UART) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   E020               LDI     R18, 0
   \   00000018   910D               LD      R16, X+
   \   0000001A   911C               LD      R17, X
   \   0000001C   9711               SBIW    R27:R26, 1
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8142               LDD     R20, Z+2
   \   00000022   8153               LDD     R21, Z+3
   \   00000024   0F04               ADD     R16, R20
   \   00000026   1F15               ADC     R17, R21
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   8320               ST      Z, R18
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8102               LDD     R16, Z+2
   \   00000030   8113               LDD     R17, Z+3
   \   00000032   5F0F               SUBI    R16, 255
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   8302               STD     Z+2, R16
   \   00000038   8313               STD     Z+3, R17
    282              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK >> 8 ;    // End command hb
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   8142               LDD     R20, Z+2
   \   00000040   8153               LDD     R21, Z+3
   \   00000042   0F04               ADD     R16, R20
   \   00000044   1F15               ADC     R17, R21
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   8320               ST      Z, R18
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    283              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;                  // End data
   \   00000058   8100               LD      R16, Z
   \   0000005A   8111               LDD     R17, Z+1
   \   0000005C   8142               LDD     R20, Z+2
   \   0000005E   8153               LDD     R21, Z+3
   \   00000060   0F04               ADD     R16, R20
   \   00000062   1F15               ADC     R17, R21
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8320               ST      Z, R18
   \   00000068   01FD               MOVW    R31:R30, R27:R26
   \   0000006A   8102               LDD     R16, Z+2
   \   0000006C   8113               LDD     R17, Z+3
   \   0000006E   5F0F               SUBI    R16, 255
   \   00000070   4F1F               SBCI    R17, 255
   \   00000072   8302               STD     Z+2, R16
   \   00000074   8313               STD     Z+3, R17
    284          
    285              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].TxSeqCnt++ ;   // Sequence counter
   \   00000076   8521               LDD     R18, Z+9
   \   00000078   2F02               MOV     R16, R18
   \   0000007A   9503               INC     R16
   \   0000007C   8701               STD     Z+9, R16
   \   0000007E   8100               LD      R16, Z
   \   00000080   8111               LDD     R17, Z+1
   \   00000082   8142               LDD     R20, Z+2
   \   00000084   8153               LDD     R21, Z+3
   \   00000086   0F04               ADD     R16, R20
   \   00000088   1F15               ADC     R17, R21
   \   0000008A   01F8               MOVW    R31:R30, R17:R16
   \   0000008C   8320               ST      Z, R18
   \   0000008E   01FD               MOVW    R31:R30, R27:R26
   \   00000090   8102               LDD     R16, Z+2
   \   00000092   8113               LDD     R17, Z+3
   \   00000094   5F0F               SUBI    R16, 255
   \   00000096   4F1F               SBCI    R17, 255
   \   00000098   8302               STD     Z+2, R16
   \   0000009A   8313               STD     Z+3, R17
    286          
    287              UART[ch].pTxBuffer[8] = UART[ch].TxFirst -2;                    // correct length because stx's
   \   0000009C   5002               SUBI    R16, 2
   \   0000009E   91ED               LD      R30, X+
   \   000000A0   91FC               LD      R31, X
   \   000000A2   9711               SBIW    R27:R26, 1
   \   000000A4   8700               STD     Z+8, R16
    288              UART[ch].pTxBuffer[9] = (UART[ch].TxFirst-2) >> 8 ;             // packet len high
   \   000000A6   01FD               MOVW    R31:R30, R27:R26
   \   000000A8   8102               LDD     R16, Z+2
   \   000000AA   8113               LDD     R17, Z+3
   \   000000AC   5002               SUBI    R16, 2
   \   000000AE   4010               SBCI    R17, 0
   \   000000B0   91ED               LD      R30, X+
   \   000000B2   91FC               LD      R31, X
   \   000000B4   9711               SBIW    R27:R26, 1
   \   000000B6   8711               STD     Z+9, R17
    289          
    290              UART[ch].pTxBuffer[10] = CalcDSTxChecksum(ch, 10) ;         // Get header checksum
   \   000000B8   E02A               LDI     R18, 10
   \   000000BA   E030               LDI     R19, 0
   \   000000BC   2F08               MOV     R16, R24
   \   000000BE   ....               RCALL   CalcDSTxChecksum
   \   000000C0   91ED               LD      R30, X+
   \   000000C2   91FC               LD      R31, X
   \   000000C4   9711               SBIW    R27:R26, 1
   \   000000C6   8702               STD     Z+10, R16
    291          
    292              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst) ; // Get checksum
   \   000000C8   01FD               MOVW    R31:R30, R27:R26
   \   000000CA   8122               LDD     R18, Z+2
   \   000000CC   8133               LDD     R19, Z+3
   \   000000CE   2F08               MOV     R16, R24
   \   000000D0   ....               RCALL   CalcDSTxChecksum
   \   000000D2   2F20               MOV     R18, R16
   \   000000D4   910D               LD      R16, X+
   \   000000D6   911C               LD      R17, X
   \   000000D8   9711               SBIW    R27:R26, 1
   \   000000DA   01FD               MOVW    R31:R30, R27:R26
   \   000000DC   8142               LDD     R20, Z+2
   \   000000DE   8153               LDD     R21, Z+3
   \   000000E0   0F04               ADD     R16, R20
   \   000000E2   1F15               ADC     R17, R21
   \   000000E4   01F8               MOVW    R31:R30, R17:R16
   \   000000E6   8320               ST      Z, R18
    293              UART[ch].TxFirst++ ;                                        // OBS!! must be inc here due to ANSI standard !!!!
   \   000000E8   01FD               MOVW    R31:R30, R27:R26
   \   000000EA   8102               LDD     R16, Z+2
   \   000000EC   8113               LDD     R17, Z+3
   \   000000EE   5F0F               SUBI    R16, 255
   \   000000F0   4F1F               SBCI    R17, 255
   \   000000F2   8302               STD     Z+2, R16
   \   000000F4   8313               STD     Z+3, R17
    294          
    295              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO10_EOT ;            // End of transmission
   \   000000F6   E024               LDI     R18, 4
   \   000000F8   8100               LD      R16, Z
   \   000000FA   8111               LDD     R17, Z+1
   \   000000FC   8142               LDD     R20, Z+2
   \   000000FE   8153               LDD     R21, Z+3
   \   00000100   0F04               ADD     R16, R20
   \   00000102   1F15               ADC     R17, R21
   \   00000104   01F8               MOVW    R31:R30, R17:R16
   \   00000106   8320               ST      Z, R18
   \   00000108   01FD               MOVW    R31:R30, R27:R26
   \   0000010A   8102               LDD     R16, Z+2
   \   0000010C   8113               LDD     R17, Z+3
   \   0000010E   5F0F               SUBI    R16, 255
   \   00000110   4F1F               SBCI    R17, 255
   \   00000112   8302               STD     Z+2, R16
   \   00000114   8313               STD     Z+3, R17
    296              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send
   \   00000116   8306               STD     Z+6, R16
   \   00000118   8317               STD     Z+7, R17
    297              UART[ch].TxLast = 0;                                     // reset cunter
   \   0000011A   E000               LDI     R16, 0
   \   0000011C   8304               STD     Z+4, R16
   \   0000011E   8305               STD     Z+5, R16
    298              if (ch == 0) {                                           // Turn on TXE for channel
   \   00000120   2388               TST     R24
   \   00000122   F471               BRNE    ??Uart_BuildTail_0
    299                  OS_RetriggerTimer(&TimerUSART0);                     // and start timeout TX timer
   \   00000124   ....               LDI     R16, LOW(TimerUSART0)
   \   00000126   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000128   ........           CALL    OS_RetriggerTimer
    300                  SetBit(PORTE, 0x04) ;                                // TXE0 on
   \   0000012C   94F8               CLI
   \   0000012E   9A1A               SBI     0x03, 0x02
   \   00000130   9100....           LDS     R16, (OS_Counters + 1)
   \   00000134   2300               TST     R16
   \   00000136   F409               BRNE    ??Uart_BuildTail_1
   \   00000138   9478               SEI
    301                  OS_RetriggerTimer(&TimerUSART0On);                   // and start timer for on before TX
   \                     ??Uart_BuildTail_1:
   \   0000013A   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000013C   ....               LDI     R17, (TimerUSART0On) >> 8
   \   0000013E   C00F               RJMP    ??Uart_BuildTail_2
    302              } else if (ch ==1) {
   \                     ??Uart_BuildTail_0:
   \   00000140   3081               CPI     R24, 1
   \   00000142   F479               BRNE    ??Uart_BuildTail_3
    303                  OS_RetriggerTimer(&TimerUSART1);                     // and start timeout TX timer
   \   00000144   ....               LDI     R16, LOW(TimerUSART1)
   \   00000146   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000148   ........           CALL    OS_RetriggerTimer
    304                  SetBit(PORTE, 0x08) ;                                // TXE1 on
   \   0000014C   94F8               CLI
   \   0000014E   9A1B               SBI     0x03, 0x03
   \   00000150   9100....           LDS     R16, (OS_Counters + 1)
   \   00000154   2300               TST     R16
   \   00000156   F409               BRNE    ??Uart_BuildTail_4
   \   00000158   9478               SEI
    305                  OS_RetriggerTimer(&TimerUSART1On);                   // and start timer for on before TX
   \                     ??Uart_BuildTail_4:
   \   0000015A   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000015C   ....               LDI     R17, (TimerUSART1On) >> 8
   \                     ??Uart_BuildTail_2:
   \   0000015E   ........           CALL    OS_RetriggerTimer
    306              }
    307          }
   \                     ??Uart_BuildTail_3:
   \   00000162   9189               LD      R24, Y+
   \   00000164   91A9               LD      R26, Y+
   \   00000166   91B9               LD      R27, Y+
   \   00000168   9508               RET
   \   0000016A                      REQUIRE _A_PORTE
    308          
    309          /*************************************************************************
    310          *
    311          * Build datablock for card status
    312          *
    313          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    314          void BuildStatusData(char ch){
   \                     BuildStatusData:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    315          
    316              short ntna ;
    317              UART[ch].RxSendReply = true ;                               // flag for answering
   \   0000000C   E11A               LDI     R17, 26
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   ....               LDI     R26, LOW(UART)
   \   00000012   ....               LDI     R27, (UART) >> 8
   \   00000014   0DA0               ADD     R26, R0
   \   00000016   1DB1               ADC     R27, R1
   \   00000018   E011               LDI     R17, 1
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8F11               STD     Z+25, R17
    318          
    319              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS & 0xff;
   \   0000001E   EE19               LDI     R17, 233
   \   00000020   8120               LD      R18, Z
   \   00000022   8131               LDD     R19, Z+1
   \   00000024   8142               LDD     R20, Z+2
   \   00000026   8153               LDD     R21, Z+3
   \   00000028   0F24               ADD     R18, R20
   \   0000002A   1F35               ADC     R19, R21
   \   0000002C   01F9               MOVW    R31:R30, R19:R18
   \   0000002E   8310               ST      Z, R17
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   8133               LDD     R19, Z+3
   \   00000036   5F2F               SUBI    R18, 255
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   8322               STD     Z+2, R18
   \   0000003C   8333               STD     Z+3, R19
    320              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS >> 8;
   \   0000003E   E013               LDI     R17, 3
   \   00000040   8120               LD      R18, Z
   \   00000042   8131               LDD     R19, Z+1
   \   00000044   8142               LDD     R20, Z+2
   \   00000046   8153               LDD     R21, Z+3
   \   00000048   0F24               ADD     R18, R20
   \   0000004A   1F35               ADC     R19, R21
   \   0000004C   01F9               MOVW    R31:R30, R19:R18
   \   0000004E   8310               ST      Z, R17
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   8122               LDD     R18, Z+2
   \   00000054   8133               LDD     R19, Z+3
   \   00000056   5F2F               SUBI    R18, 255
   \   00000058   4F3F               SBCI    R19, 255
   \   0000005A   8322               STD     Z+2, R18
   \   0000005C   8333               STD     Z+3, R19
    321              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000005E   0129               MOVW    R5:R4, R19:R18
    322              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000060   5F2E               SUBI    R18, 254
   \   00000062   4F3F               SBCI    R19, 255
   \   00000064   8322               STD     Z+2, R18
   \   00000066   8333               STD     Z+3, R19
    323              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ch ;               // channel
   \   00000068   8120               LD      R18, Z
   \   0000006A   8131               LDD     R19, Z+1
   \   0000006C   8142               LDD     R20, Z+2
   \   0000006E   8153               LDD     R21, Z+3
   \   00000070   0F24               ADD     R18, R20
   \   00000072   1F35               ADC     R19, R21
   \   00000074   01F9               MOVW    R31:R30, R19:R18
   \   00000076   8300               ST      Z, R16
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   8102               LDD     R16, Z+2
   \   0000007C   8113               LDD     R17, Z+3
   \   0000007E   5F0F               SUBI    R16, 255
   \   00000080   4F1F               SBCI    R17, 255
   \   00000082   8302               STD     Z+2, R16
   \   00000084   8313               STD     Z+3, R17
    324              UART[ch].pTxBuffer[UART[ch].TxFirst++] = DEVICE_IO + UnitID ;   // Product ID
   \   00000086   9120....           LDS     R18, UnitID
   \   0000008A   5F20               SUBI    R18, 240
   \   0000008C   8100               LD      R16, Z
   \   0000008E   8111               LDD     R17, Z+1
   \   00000090   8142               LDD     R20, Z+2
   \   00000092   8153               LDD     R21, Z+3
   \   00000094   0F04               ADD     R16, R20
   \   00000096   1F15               ADC     R17, R21
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   8320               ST      Z, R18
   \   0000009C   01FD               MOVW    R31:R30, R27:R26
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    325              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MyAddress();           // unit adddress
   \   000000AA   01C8               MOVW    R25:R24, R17:R16
   \   000000AC   5F0F               SUBI    R16, 255
   \   000000AE   4F1F               SBCI    R17, 255
   \   000000B0   8302               STD     Z+2, R16
   \   000000B2   8313               STD     Z+3, R17
   \   000000B4   ........           CALL    MyAddress
   \   000000B8   91ED               LD      R30, X+
   \   000000BA   91FC               LD      R31, X
   \   000000BC   9711               SBIW    R27:R26, 1
   \   000000BE   0FE8               ADD     R30, R24
   \   000000C0   1FF9               ADC     R31, R25
   \   000000C2   8300               ST      Z, R16
    326              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION ;       // software version */
   \   000000C4   E228               LDI     R18, 40
   \   000000C6   910D               LD      R16, X+
   \   000000C8   911C               LD      R17, X
   \   000000CA   9711               SBIW    R27:R26, 1
   \   000000CC   01FD               MOVW    R31:R30, R27:R26
   \   000000CE   8142               LDD     R20, Z+2
   \   000000D0   8153               LDD     R21, Z+3
   \   000000D2   0F04               ADD     R16, R20
   \   000000D4   1F15               ADC     R17, R21
   \   000000D6   01F8               MOVW    R31:R30, R17:R16
   \   000000D8   8320               ST      Z, R18
   \   000000DA   01FD               MOVW    R31:R30, R27:R26
   \   000000DC   8102               LDD     R16, Z+2
   \   000000DE   8113               LDD     R17, Z+3
   \   000000E0   5F0F               SUBI    R16, 255
   \   000000E2   4F1F               SBCI    R17, 255
   \   000000E4   8302               STD     Z+2, R16
   \   000000E6   8313               STD     Z+3, R17
    327              UART[ch].pTxBuffer[UART[ch].TxFirst++] = COMP_VERSION;        // cpmpability version
   \   000000E8   E021               LDI     R18, 1
   \   000000EA   8100               LD      R16, Z
   \   000000EC   8111               LDD     R17, Z+1
   \   000000EE   8142               LDD     R20, Z+2
   \   000000F0   8153               LDD     R21, Z+3
   \   000000F2   0F04               ADD     R16, R20
   \   000000F4   1F15               ADC     R17, R21
   \   000000F6   01F8               MOVW    R31:R30, R17:R16
   \   000000F8   8320               ST      Z, R18
   \   000000FA   01FD               MOVW    R31:R30, R27:R26
   \   000000FC   8102               LDD     R16, Z+2
   \   000000FE   8113               LDD     R17, Z+3
   \   00000100   5F0F               SUBI    R16, 255
   \   00000102   4F1F               SBCI    R17, 255
   \   00000104   8302               STD     Z+2, R16
   \   00000106   8313               STD     Z+3, R17
    328              UART[ch].pTxBuffer[UART[ch].TxFirst++] = STORE_VERSION;        // cpmpability version
   \   00000108   E022               LDI     R18, 2
   \   0000010A   8100               LD      R16, Z
   \   0000010C   8111               LDD     R17, Z+1
   \   0000010E   8142               LDD     R20, Z+2
   \   00000110   8153               LDD     R21, Z+3
   \   00000112   0F04               ADD     R16, R20
   \   00000114   1F15               ADC     R17, R21
   \   00000116   01F8               MOVW    R31:R30, R17:R16
   \   00000118   8320               ST      Z, R18
   \   0000011A   01FD               MOVW    R31:R30, R27:R26
   \   0000011C   8102               LDD     R16, Z+2
   \   0000011E   8113               LDD     R17, Z+3
   \   00000120   5F0F               SUBI    R16, 255
   \   00000122   4F1F               SBCI    R17, 255
   \   00000124   8302               STD     Z+2, R16
   \   00000126   8313               STD     Z+3, R17
    329              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \   00000128   E926               LDI     R18, 150
   \   0000012A   8100               LD      R16, Z
   \   0000012C   8111               LDD     R17, Z+1
   \   0000012E   8142               LDD     R20, Z+2
   \   00000130   8153               LDD     R21, Z+3
   \   00000132   0F04               ADD     R16, R20
   \   00000134   1F15               ADC     R17, R21
   \   00000136   01F8               MOVW    R31:R30, R17:R16
   \   00000138   8320               ST      Z, R18
   \   0000013A   01FD               MOVW    R31:R30, R27:R26
   \   0000013C   8102               LDD     R16, Z+2
   \   0000013E   8113               LDD     R17, Z+3
   \   00000140   5F0F               SUBI    R16, 255
   \   00000142   4F1F               SBCI    R17, 255
   \   00000144   8302               STD     Z+2, R16
   \   00000146   8313               STD     Z+3, R17
    330              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (( RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   00000148   E020               LDI     R18, 0
   \   0000014A   8100               LD      R16, Z
   \   0000014C   8111               LDD     R17, Z+1
   \   0000014E   8142               LDD     R20, Z+2
   \   00000150   8153               LDD     R21, Z+3
   \   00000152   0F04               ADD     R16, R20
   \   00000154   1F15               ADC     R17, R21
   \   00000156   01F8               MOVW    R31:R30, R17:R16
   \   00000158   8320               ST      Z, R18
   \   0000015A   01FD               MOVW    R31:R30, R27:R26
   \   0000015C   8102               LDD     R16, Z+2
   \   0000015E   8113               LDD     R17, Z+3
   \   00000160   5F0F               SUBI    R16, 255
   \   00000162   4F1F               SBCI    R17, 255
   \   00000164   8302               STD     Z+2, R16
   \   00000166   8313               STD     Z+3, R17
    331              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \   00000168   E123               LDI     R18, 19
   \   0000016A   8100               LD      R16, Z
   \   0000016C   8111               LDD     R17, Z+1
   \   0000016E   8142               LDD     R20, Z+2
   \   00000170   8153               LDD     R21, Z+3
   \   00000172   0F04               ADD     R16, R20
   \   00000174   1F15               ADC     R17, R21
   \   00000176   01F8               MOVW    R31:R30, R17:R16
   \   00000178   8320               ST      Z, R18
   \   0000017A   01FD               MOVW    R31:R30, R27:R26
   \   0000017C   8102               LDD     R16, Z+2
   \   0000017E   8113               LDD     R17, Z+3
   \   00000180   5F0F               SUBI    R16, 255
   \   00000182   4F1F               SBCI    R17, 255
   \   00000184   8302               STD     Z+2, R16
   \   00000186   8313               STD     Z+3, R17
    332              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
   \   00000188   E021               LDI     R18, 1
   \   0000018A   8100               LD      R16, Z
   \   0000018C   8111               LDD     R17, Z+1
   \   0000018E   8142               LDD     R20, Z+2
   \   00000190   8153               LDD     R21, Z+3
   \   00000192   0F04               ADD     R16, R20
   \   00000194   1F15               ADC     R17, R21
   \   00000196   01F8               MOVW    R31:R30, R17:R16
   \   00000198   8320               ST      Z, R18
   \   0000019A   01FD               MOVW    R31:R30, R27:R26
   \   0000019C   8102               LDD     R16, Z+2
   \   0000019E   8113               LDD     R17, Z+3
   \   000001A0   5F0F               SUBI    R16, 255
   \   000001A2   4F1F               SBCI    R17, 255
   \   000001A4   8302               STD     Z+2, R16
   \   000001A6   8313               STD     Z+3, R17
    333              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus ;                  // restart flag
   \   000001A8   9120....           LDS     R18, RestartStatus
   \   000001AC   8100               LD      R16, Z
   \   000001AE   8111               LDD     R17, Z+1
   \   000001B0   8142               LDD     R20, Z+2
   \   000001B2   8153               LDD     R21, Z+3
   \   000001B4   0F04               ADD     R16, R20
   \   000001B6   1F15               ADC     R17, R21
   \   000001B8   01F8               MOVW    R31:R30, R17:R16
   \   000001BA   8320               ST      Z, R18
   \   000001BC   01FD               MOVW    R31:R30, R27:R26
   \   000001BE   8102               LDD     R16, Z+2
   \   000001C0   8113               LDD     R17, Z+3
   \   000001C2   5F0F               SUBI    R16, 255
   \   000001C4   4F1F               SBCI    R17, 255
   \   000001C6   8302               STD     Z+2, R16
   \   000001C8   8313               STD     Z+3, R17
    334              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROGTYPE_APP ;                // Application program
   \   000001CA   E021               LDI     R18, 1
   \   000001CC   8100               LD      R16, Z
   \   000001CE   8111               LDD     R17, Z+1
   \   000001D0   8142               LDD     R20, Z+2
   \   000001D2   8153               LDD     R21, Z+3
   \   000001D4   0F04               ADD     R16, R20
   \   000001D6   1F15               ADC     R17, R21
   \   000001D8   01F8               MOVW    R31:R30, R17:R16
   \   000001DA   8320               ST      Z, R18
   \   000001DC   01FD               MOVW    R31:R30, R27:R26
   \   000001DE   8102               LDD     R16, Z+2
   \   000001E0   8113               LDD     R17, Z+3
   \   000001E2   5F0F               SUBI    R16, 255
   \   000001E4   4F1F               SBCI    R17, 255
   \   000001E6   8302               STD     Z+2, R16
   \   000001E8   8313               STD     Z+3, R17
    335          
    336              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000001EA   1904               SUB     R16, R4
   \   000001EC   5002               SUBI    R16, 2
   \   000001EE   91ED               LD      R30, X+
   \   000001F0   91FC               LD      R31, X
   \   000001F2   9711               SBIW    R27:R26, 1
   \   000001F4   0DE4               ADD     R30, R4
   \   000001F6   1DF5               ADC     R31, R5
   \   000001F8   8300               ST      Z, R16
    337              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000001FA   01FD               MOVW    R31:R30, R27:R26
   \   000001FC   8102               LDD     R16, Z+2
   \   000001FE   8113               LDD     R17, Z+3
   \   00000200   1904               SUB     R16, R4
   \   00000202   0915               SBC     R17, R5
   \   00000204   5002               SUBI    R16, 2
   \   00000206   4010               SBCI    R17, 0
   \   00000208   91ED               LD      R30, X+
   \   0000020A   91FC               LD      R31, X
   \   0000020C   0DE4               ADD     R30, R4
   \   0000020E   1DF5               ADC     R31, R5
   \   00000210   8311               STD     Z+1, R17
    338          
    339              RestartStatus = 0 ;                                                       // set reset stat to 0 = read
   \   00000212   E000               LDI     R16, 0
   \   00000214   9300....           STS     RestartStatus, R16
    340          }
   \   00000218   ........           JMP     ?Subroutine1
    341          
    342          /*************************************************************************
    343          *
    344          * Build EEPROM data package
    345          *
    346          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    347          void BuildEEPROMData(char ch, short pointer) {
   \                     BuildEEPROMData:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    348          
    349              short ntna ;
    350              char channel;
    351              UART[ch].RxSendReply = true ;                               // flag for answering
   \   0000000C   E11A               LDI     R17, 26
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   ....               LDI     R26, LOW(UART)
   \   00000012   ....               LDI     R27, (UART) >> 8
   \   00000014   0DA0               ADD     R26, R0
   \   00000016   1DB1               ADC     R27, R1
   \   00000018   E001               LDI     R16, 1
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8F01               STD     Z+25, R16
    352          
    353              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA & 0xff;
   \   0000001E   E349               LDI     R20, 57
   \   00000020   8100               LD      R16, Z
   \   00000022   8111               LDD     R17, Z+1
   \   00000024   8162               LDD     R22, Z+2
   \   00000026   8173               LDD     R23, Z+3
   \   00000028   0F06               ADD     R16, R22
   \   0000002A   1F17               ADC     R17, R23
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   8340               ST      Z, R20
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8102               LDD     R16, Z+2
   \   00000034   8113               LDD     R17, Z+3
   \   00000036   5F0F               SUBI    R16, 255
   \   00000038   4F1F               SBCI    R17, 255
   \   0000003A   8302               STD     Z+2, R16
   \   0000003C   8313               STD     Z+3, R17
    354              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA >> 8;
   \   0000003E   E044               LDI     R20, 4
   \   00000040   8100               LD      R16, Z
   \   00000042   8111               LDD     R17, Z+1
   \   00000044   8162               LDD     R22, Z+2
   \   00000046   8173               LDD     R23, Z+3
   \   00000048   0F06               ADD     R16, R22
   \   0000004A   1F17               ADC     R17, R23
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   8340               ST      Z, R20
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   8102               LDD     R16, Z+2
   \   00000054   8113               LDD     R17, Z+3
   \   00000056   5F0F               SUBI    R16, 255
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   8302               STD     Z+2, R16
   \   0000005C   8313               STD     Z+3, R17
    355              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000005E   0128               MOVW    R5:R4, R17:R16
    356              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000060   5F0E               SUBI    R16, 254
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   8302               STD     Z+2, R16
   \   00000066   8313               STD     Z+3, R17
    357          
    358              channel = UART[ch].pRxBuffer[pointer];
   \   00000068   8502               LDD     R16, Z+10
   \   0000006A   8513               LDD     R17, Z+11
   \   0000006C   0F02               ADD     R16, R18
   \   0000006E   1F13               ADC     R17, R19
   \   00000070   01F8               MOVW    R31:R30, R17:R16
   \   00000072   8120               LD      R18, Z
    359              UART[ch].pTxBuffer[UART[ch].TxFirst++] = channel; //channel
   \   00000074   910D               LD      R16, X+
   \   00000076   911C               LD      R17, X
   \   00000078   9711               SBIW    R27:R26, 1
   \   0000007A   01FD               MOVW    R31:R30, R27:R26
   \   0000007C   8142               LDD     R20, Z+2
   \   0000007E   8153               LDD     R21, Z+3
   \   00000080   0F04               ADD     R16, R20
   \   00000082   1F15               ADC     R17, R21
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   8320               ST      Z, R18
   \   00000088   01FD               MOVW    R31:R30, R27:R26
   \   0000008A   8102               LDD     R16, Z+2
   \   0000008C   8113               LDD     R17, Z+3
   \   0000008E   5F0F               SUBI    R16, 255
   \   00000090   4F1F               SBCI    R17, 255
   \   00000092   8302               STD     Z+2, R16
   \   00000094   8313               STD     Z+3, R17
    360          
    361              ReadEEPROMBuffer( (channel * sizeof(float)* 2) , sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \   00000096   E008               LDI     R16, 8
   \   00000098   9F20               MUL     R18, R16
   \   0000009A   01C0               MOVW    R25:R24, R1:R0
   \   0000009C   8140               LD      R20, Z
   \   0000009E   8151               LDD     R21, Z+1
   \   000000A0   8102               LDD     R16, Z+2
   \   000000A2   0F40               ADD     R20, R16
   \   000000A4   1F51               ADC     R21, R17
   \   000000A6   E024               LDI     R18, 4
   \   000000A8   0180               MOVW    R17:R16, R1:R0
   \   000000AA   ........           CALL    ReadEEPROMBuffer
    362              UART[ch].TxFirst += sizeof(float) ;
   \   000000AE   01FD               MOVW    R31:R30, R27:R26
   \   000000B0   8102               LDD     R16, Z+2
   \   000000B2   8113               LDD     R17, Z+3
   \   000000B4   5F0C               SUBI    R16, 252
   \   000000B6   4F1F               SBCI    R17, 255
   \   000000B8   8302               STD     Z+2, R16
   \   000000BA   8313               STD     Z+3, R17
    363              ReadEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \   000000BC   8140               LD      R20, Z
   \   000000BE   8151               LDD     R21, Z+1
   \   000000C0   0F40               ADD     R20, R16
   \   000000C2   1F51               ADC     R21, R17
   \   000000C4   E024               LDI     R18, 4
   \   000000C6   9604               ADIW    R25:R24, 4
   \   000000C8   018C               MOVW    R17:R16, R25:R24
   \   000000CA   ........           CALL    ReadEEPROMBuffer
    364              UART[ch].TxFirst += sizeof(float) ;
   \   000000CE   01FD               MOVW    R31:R30, R27:R26
   \   000000D0   8102               LDD     R16, Z+2
   \   000000D2   8113               LDD     R17, Z+3
   \   000000D4   5F0C               SUBI    R16, 252
   \   000000D6   4F1F               SBCI    R17, 255
   \   000000D8   8302               STD     Z+2, R16
   \   000000DA   8313               STD     Z+3, R17
    365          
    366              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000000DC   1904               SUB     R16, R4
   \   000000DE   5002               SUBI    R16, 2
   \   000000E0   91ED               LD      R30, X+
   \   000000E2   91FC               LD      R31, X
   \   000000E4   9711               SBIW    R27:R26, 1
   \   000000E6   0DE4               ADD     R30, R4
   \   000000E8   1DF5               ADC     R31, R5
   \   000000EA   8300               ST      Z, R16
    367              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000000EC   01FD               MOVW    R31:R30, R27:R26
   \   000000EE   8102               LDD     R16, Z+2
   \   000000F0   8113               LDD     R17, Z+3
   \   000000F2   1904               SUB     R16, R4
   \   000000F4   0915               SBC     R17, R5
   \   000000F6   5002               SUBI    R16, 2
   \   000000F8   4010               SBCI    R17, 0
   \   000000FA   91ED               LD      R30, X+
   \   000000FC   91FC               LD      R31, X
   \   000000FE   0DE4               ADD     R30, R4
   \   00000100   1DF5               ADC     R31, R5
   \   00000102   8311               STD     Z+1, R17
    368          }
   \   00000104   ....               RJMP    ?Subroutine1
    369          
    370          
    371          /*************************************************************************
    372          *
    373          * Build datablock for Internal AD
    374          *
    375          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    376          void BuildADInt(char ch, short pointer) {
   \                     BuildADInt:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    377          
    378              short ntna, i ;
    379              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART)
   \   0000000A   ....               LDI     R31, (UART) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E001               LDI     R16, 1
   \   00000012   8F01               STD     Z+25, R16
    380          
    381              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA & 0xff;
   \   00000014   E403               LDI     R16, 67
   \   00000016   81A0               LD      R26, Z
   \   00000018   81B1               LDD     R27, Z+1
   \   0000001A   8122               LDD     R18, Z+2
   \   0000001C   8133               LDD     R19, Z+3
   \   0000001E   0FA2               ADD     R26, R18
   \   00000020   1FB3               ADC     R27, R19
   \   00000022   930C               ST      X, R16
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    382              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA >> 8;
   \   00000030   E004               LDI     R16, 4
   \   00000032   81A0               LD      R26, Z
   \   00000034   81B1               LDD     R27, Z+1
   \   00000036   8122               LDD     R18, Z+2
   \   00000038   0FA2               ADD     R26, R18
   \   0000003A   1FB1               ADC     R27, R17
   \   0000003C   930C               ST      X, R16
   \   0000003E   8102               LDD     R16, Z+2
   \   00000040   8113               LDD     R17, Z+3
   \   00000042   5F0F               SUBI    R16, 255
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   8302               STD     Z+2, R16
   \   00000048   8313               STD     Z+3, R17
    383              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000004A   0198               MOVW    R19:R18, R17:R16
    384              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000004C   5F0E               SUBI    R16, 254
   \   0000004E   4F1F               SBCI    R17, 255
   \   00000050   8302               STD     Z+2, R16
   \   00000052   8313               STD     Z+3, R17
    385          
    386              for (i = 0; i<3; i++) {
   \   00000054   ....               LDI     R16, LOW(ADInt)
   \   00000056   ....               LDI     R17, (ADInt) >> 8
   \   00000058   E043               LDI     R20, 3
    387                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] ;
   \                     ??BuildADInt_0:
   \   0000005A   01D8               MOVW    R27:R26, R17:R16
   \   0000005C   916D               LD      R22, X+
   \   0000005E   81A0               LD      R26, Z
   \   00000060   81B1               LDD     R27, Z+1
   \   00000062   8002               LDD     R0, Z+2
   \   00000064   8013               LDD     R1, Z+3
   \   00000066   0DA0               ADD     R26, R0
   \   00000068   1DB1               ADC     R27, R1
   \   0000006A   936C               ST      X, R22
   \   0000006C   8162               LDD     R22, Z+2
   \   0000006E   8173               LDD     R23, Z+3
   \   00000070   5F6F               SUBI    R22, 255
   \   00000072   4F7F               SBCI    R23, 255
   \   00000074   8362               STD     Z+2, R22
   \   00000076   8373               STD     Z+3, R23
    388                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] >> 8 ;   // ADresult
   \   00000078   01D8               MOVW    R27:R26, R17:R16
   \   0000007A   9611               ADIW    R27:R26, 1
   \   0000007C   917D               LD      R23, X+
   \   0000007E   018D               MOVW    R17:R16, R27:R26
   \   00000080   81A0               LD      R26, Z
   \   00000082   81B1               LDD     R27, Z+1
   \   00000084   8002               LDD     R0, Z+2
   \   00000086   8013               LDD     R1, Z+3
   \   00000088   0DA0               ADD     R26, R0
   \   0000008A   1DB1               ADC     R27, R1
   \   0000008C   937C               ST      X, R23
   \   0000008E   8162               LDD     R22, Z+2
   \   00000090   8173               LDD     R23, Z+3
   \   00000092   5F6F               SUBI    R22, 255
   \   00000094   4F7F               SBCI    R23, 255
   \   00000096   8362               STD     Z+2, R22
   \   00000098   8373               STD     Z+3, R23
    389              }
   \   0000009A   954A               DEC     R20
   \   0000009C   F6F1               BRNE    ??BuildADInt_0
    390          
    391              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   1B02               SUB     R16, R18
   \   000000A2   5002               SUBI    R16, 2
   \   000000A4   81A0               LD      R26, Z
   \   000000A6   81B1               LDD     R27, Z+1
   \   000000A8   0FA2               ADD     R26, R18
   \   000000AA   1FB3               ADC     R27, R19
   \   000000AC   930C               ST      X, R16
    392              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000000AE   8102               LDD     R16, Z+2
   \   000000B0   8113               LDD     R17, Z+3
   \   000000B2   1B02               SUB     R16, R18
   \   000000B4   0B13               SBC     R17, R19
   \   000000B6   5002               SUBI    R16, 2
   \   000000B8   4010               SBCI    R17, 0
   \   000000BA   2F41               MOV     R20, R17
   \   000000BC   8100               LD      R16, Z
   \   000000BE   8111               LDD     R17, Z+1
   \   000000C0   0F02               ADD     R16, R18
   \   000000C2   1F13               ADC     R17, R19
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   8341               STD     Z+1, R20
    393          
    394          }
   \   000000C8   2DA2               MOV     R26, R2
   \   000000CA   2FB5               MOV     R27, R21
   \   000000CC   9508               RET
    395          
    396          
    397          /*************************************************************************
    398          *
    399          * Build datablock for eeprom on ADcard
    400          *
    401          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    402          void BuildADEpromdata(char ch, char portch) {
   \                     BuildADEpromdata:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   2F21               MOV     R18, R17
    403          
    404              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART)
   \   0000000A   ....               LDI     R31, (UART) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E001               LDI     R16, 1
   \   00000012   8F01               STD     Z+25, R16
    405          
    406              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF & 0xff;
   \   00000014   E809               LDI     R16, 137
   \   00000016   81A0               LD      R26, Z
   \   00000018   81B1               LDD     R27, Z+1
   \   0000001A   8142               LDD     R20, Z+2
   \   0000001C   8153               LDD     R21, Z+3
   \   0000001E   0FA4               ADD     R26, R20
   \   00000020   1FB5               ADC     R27, R21
   \   00000022   930C               ST      X, R16
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    407              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF >> 8;
   \   00000030   E004               LDI     R16, 4
   \   00000032   81A0               LD      R26, Z
   \   00000034   81B1               LDD     R27, Z+1
   \   00000036   8142               LDD     R20, Z+2
   \   00000038   0FA4               ADD     R26, R20
   \   0000003A   1FB1               ADC     R27, R17
   \   0000003C   930C               ST      X, R16
   \   0000003E   8102               LDD     R16, Z+2
   \   00000040   8113               LDD     R17, Z+3
   \   00000042   5F0F               SUBI    R16, 255
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   8302               STD     Z+2, R16
   \   00000048   8313               STD     Z+3, R17
    408              short ntna = UART[ch].TxFirst ;                                    // remember index
   \   0000004A   01A8               MOVW    R21:R20, R17:R16
    409              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000004C   5F0E               SUBI    R16, 254
   \   0000004E   4F1F               SBCI    R17, 255
   \   00000050   8302               STD     Z+2, R16
   \   00000052   8313               STD     Z+3, R17
    410          
    411              for (short i = 0; i < 44; i++) {
   \   00000054   ....               LDI     R16, LOW((TData + 1428))
   \   00000056   ....               LDI     R17, HIGH((TData + 1428))
   \   00000058   E332               LDI     R19, 50
   \   0000005A   9F23               MUL     R18, R19
   \   0000005C   0D00               ADD     R16, R0
   \   0000005E   1D11               ADC     R17, R1
   \   00000060   E22C               LDI     R18, 44
    412                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FromTargetBuffer[portch][i] ;
   \                     ??BuildADEpromdata_0:
   \   00000062   01D8               MOVW    R27:R26, R17:R16
   \   00000064   913D               LD      R19, X+
   \   00000066   018D               MOVW    R17:R16, R27:R26
   \   00000068   81A0               LD      R26, Z
   \   0000006A   81B1               LDD     R27, Z+1
   \   0000006C   8162               LDD     R22, Z+2
   \   0000006E   8173               LDD     R23, Z+3
   \   00000070   0FA6               ADD     R26, R22
   \   00000072   1FB7               ADC     R27, R23
   \   00000074   933C               ST      X, R19
   \   00000076   8162               LDD     R22, Z+2
   \   00000078   8173               LDD     R23, Z+3
   \   0000007A   5F6F               SUBI    R22, 255
   \   0000007C   4F7F               SBCI    R23, 255
   \   0000007E   8362               STD     Z+2, R22
   \   00000080   8373               STD     Z+3, R23
    413              }
   \   00000082   952A               DEC     R18
   \   00000084   F771               BRNE    ??BuildADEpromdata_0
    414              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000086   8102               LDD     R16, Z+2
   \   00000088   1B04               SUB     R16, R20
   \   0000008A   5002               SUBI    R16, 2
   \   0000008C   81A0               LD      R26, Z
   \   0000008E   81B1               LDD     R27, Z+1
   \   00000090   0FA4               ADD     R26, R20
   \   00000092   1FB5               ADC     R27, R21
   \   00000094   930C               ST      X, R16
    415              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000096   8102               LDD     R16, Z+2
   \   00000098   8113               LDD     R17, Z+3
   \   0000009A   1B04               SUB     R16, R20
   \   0000009C   0B15               SBC     R17, R21
   \   0000009E   5002               SUBI    R16, 2
   \   000000A0   4010               SBCI    R17, 0
   \   000000A2   2F21               MOV     R18, R17
   \   000000A4   8100               LD      R16, Z
   \   000000A6   8111               LDD     R17, Z+1
   \   000000A8   0F04               ADD     R16, R20
   \   000000AA   1F15               ADC     R17, R21
   \   000000AC   01F8               MOVW    R31:R30, R17:R16
   \   000000AE   8321               STD     Z+1, R18
    416          
    417          }
   \   000000B0   01D1               MOVW    R27:R26, R3:R2
   \   000000B2   9508               RET
    418          
    419          /*************************************************************************
    420          *
    421          * Build datablock for WHData on ADcard
    422          *
    423          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    424          void BuildWHdata(char ch, short pointer) {
   \                     BuildWHdata:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    425          
    426              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R30, LOW(UART)
   \   0000000E   ....               LDI     R31, (UART) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   E001               LDI     R16, 1
   \   00000016   8F01               STD     Z+25, R16
    427          
    428              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF & 0xff;
   \   00000018   E90C               LDI     R16, 156
   \   0000001A   81A0               LD      R26, Z
   \   0000001C   81B1               LDD     R27, Z+1
   \   0000001E   8142               LDD     R20, Z+2
   \   00000020   8153               LDD     R21, Z+3
   \   00000022   0FA4               ADD     R26, R20
   \   00000024   1FB5               ADC     R27, R21
   \   00000026   930C               ST      X, R16
   \   00000028   8102               LDD     R16, Z+2
   \   0000002A   8113               LDD     R17, Z+3
   \   0000002C   5F0F               SUBI    R16, 255
   \   0000002E   4F1F               SBCI    R17, 255
   \   00000030   8302               STD     Z+2, R16
   \   00000032   8313               STD     Z+3, R17
    429              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF >> 8;
   \   00000034   E004               LDI     R16, 4
   \   00000036   81A0               LD      R26, Z
   \   00000038   81B1               LDD     R27, Z+1
   \   0000003A   8142               LDD     R20, Z+2
   \   0000003C   0FA4               ADD     R26, R20
   \   0000003E   1FB1               ADC     R27, R17
   \   00000040   930C               ST      X, R16
   \   00000042   8102               LDD     R16, Z+2
   \   00000044   8113               LDD     R17, Z+3
   \   00000046   5F0F               SUBI    R16, 255
   \   00000048   4F1F               SBCI    R17, 255
   \   0000004A   8302               STD     Z+2, R16
   \   0000004C   8313               STD     Z+3, R17
    430              short ntna = UART[ch].TxFirst;                          // remember index
    431              UART[ch].TxFirst += 2;                                  // two byte length
   \   0000004E   01A8               MOVW    R21:R20, R17:R16
   \   00000050   5F4E               SUBI    R20, 254
   \   00000052   4F5F               SBCI    R21, 255
   \   00000054   8342               STD     Z+2, R20
   \   00000056   8353               STD     Z+3, R21
    432          
    433              OS_EnterRegion();
   \   00000058   9140....           LDS     R20, OS_Counters
   \   0000005C   9543               INC     R20
   \   0000005E   9340....           STS     OS_Counters, R20
    434              for (short i = 0; i < 4; i++) {
   \   00000062   E080               LDI     R24, 0
   \   00000064   E090               LDI     R25, 0
    435                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] & 0xff; // WashTrackcnt
   \                     ??BuildWHdata_0:
   \   00000066   01BC               MOVW    R23:R22, R25:R24
   \   00000068   0F66               LSL     R22
   \   0000006A   1F77               ROL     R23
   \   0000006C   ....               LDI     R20, LOW((TData + 1179))
   \   0000006E   ....               LDI     R21, HIGH((TData + 1179))
   \   00000070   0F46               ADD     R20, R22
   \   00000072   1F57               ADC     R21, R23
   \   00000074   85A2               LDD     R26, Z+10
   \   00000076   85B3               LDD     R27, Z+11
   \   00000078   0FA2               ADD     R26, R18
   \   0000007A   1FB3               ADC     R27, R19
   \   0000007C   902C               LD      R2, X
   \   0000007E   E0A8               LDI     R26, 8
   \   00000080   9E2A               MUL     R2, R26
   \   00000082   0D40               ADD     R20, R0
   \   00000084   1D51               ADC     R21, R1
   \   00000086   01DA               MOVW    R27:R26, R21:R20
   \   00000088   914D               LD      R20, X+
   \   0000008A   81A0               LD      R26, Z
   \   0000008C   81B1               LDD     R27, Z+1
   \   0000008E   8002               LDD     R0, Z+2
   \   00000090   8013               LDD     R1, Z+3
   \   00000092   0DA0               ADD     R26, R0
   \   00000094   1DB1               ADC     R27, R1
   \   00000096   934C               ST      X, R20
   \   00000098   8142               LDD     R20, Z+2
   \   0000009A   8153               LDD     R21, Z+3
   \   0000009C   5F4F               SUBI    R20, 255
   \   0000009E   4F5F               SBCI    R21, 255
   \   000000A0   8342               STD     Z+2, R20
   \   000000A2   8353               STD     Z+3, R21
    436                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] >> 8) & 0xff; // WashTrackcnt
   \   000000A4   ....               LDI     R20, LOW((TData + 1179))
   \   000000A6   ....               LDI     R21, HIGH((TData + 1179))
   \   000000A8   0F46               ADD     R20, R22
   \   000000AA   1F57               ADC     R21, R23
   \   000000AC   85A2               LDD     R26, Z+10
   \   000000AE   85B3               LDD     R27, Z+11
   \   000000B0   0FA2               ADD     R26, R18
   \   000000B2   1FB3               ADC     R27, R19
   \   000000B4   916C               LD      R22, X
   \   000000B6   E078               LDI     R23, 8
   \   000000B8   9F67               MUL     R22, R23
   \   000000BA   0D40               ADD     R20, R0
   \   000000BC   1D51               ADC     R21, R1
   \   000000BE   01DA               MOVW    R27:R26, R21:R20
   \   000000C0   9611               ADIW    R27:R26, 1
   \   000000C2   914C               LD      R20, X
   \   000000C4   81A0               LD      R26, Z
   \   000000C6   81B1               LDD     R27, Z+1
   \   000000C8   8162               LDD     R22, Z+2
   \   000000CA   8173               LDD     R23, Z+3
   \   000000CC   0FA6               ADD     R26, R22
   \   000000CE   1FB7               ADC     R27, R23
   \   000000D0   934C               ST      X, R20
   \   000000D2   8142               LDD     R20, Z+2
   \   000000D4   8153               LDD     R21, Z+3
   \   000000D6   5F4F               SUBI    R20, 255
   \   000000D8   4F5F               SBCI    R21, 255
   \   000000DA   8342               STD     Z+2, R20
   \   000000DC   8353               STD     Z+3, R21
    437              }
   \   000000DE   9601               ADIW    R25:R24, 1
   \   000000E0   3084               CPI     R24, 4
   \   000000E2   E040               LDI     R20, 0
   \   000000E4   0794               CPC     R25, R20
   \   000000E6   F40C               BRGE    $+2+2
   \   000000E8   CFBE               RJMP    ??BuildWHdata_0
    438              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.LevelSwitch[UART[ch].pRxBuffer[pointer]];
   \   000000EA   85A2               LDD     R26, Z+10
   \   000000EC   85B3               LDD     R27, Z+11
   \   000000EE   0FA2               ADD     R26, R18
   \   000000F0   1FB3               ADC     R27, R19
   \   000000F2   91AC               LD      R26, X
   \   000000F4   ....               SUBI    R26, LOW((-(TData + 1243) & 0xFFFF))
   \   000000F6   ....               SBCI    R20, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000F8   2FB4               MOV     R27, R20
   \   000000FA   914C               LD      R20, X
   \   000000FC   81A0               LD      R26, Z
   \   000000FE   81B1               LDD     R27, Z+1
   \   00000100   8162               LDD     R22, Z+2
   \   00000102   0FA6               ADD     R26, R22
   \   00000104   1FB5               ADC     R27, R21
   \   00000106   934C               ST      X, R20
   \   00000108   8142               LDD     R20, Z+2
   \   0000010A   8153               LDD     R21, Z+3
   \   0000010C   5F4F               SUBI    R20, 255
   \   0000010E   4F5F               SBCI    R21, 255
   \   00000110   8342               STD     Z+2, R20
   \   00000112   8353               STD     Z+3, R21
    439              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] & 0xff; // WashTrackcnt
   \   00000114   85A2               LDD     R26, Z+10
   \   00000116   85B3               LDD     R27, Z+11
   \   00000118   0FA2               ADD     R26, R18
   \   0000011A   1FB3               ADC     R27, R19
   \   0000011C   914C               LD      R20, X
   \   0000011E   E052               LDI     R21, 2
   \   00000120   9F45               MUL     R20, R21
   \   00000122   01D0               MOVW    R27:R26, R1:R0
   \   00000124   ....               SUBI    R26, LOW((-(TData + 1251) & 0xFFFF))
   \   00000126   ....               SBCI    R27, HIGH((-(TData + 1251) & 0xFFFF))
   \   00000128   914D               LD      R20, X+
   \   0000012A   81A0               LD      R26, Z
   \   0000012C   81B1               LDD     R27, Z+1
   \   0000012E   8162               LDD     R22, Z+2
   \   00000130   8173               LDD     R23, Z+3
   \   00000132   0FA6               ADD     R26, R22
   \   00000134   1FB7               ADC     R27, R23
   \   00000136   934C               ST      X, R20
   \   00000138   8142               LDD     R20, Z+2
   \   0000013A   8153               LDD     R21, Z+3
   \   0000013C   5F4F               SUBI    R20, 255
   \   0000013E   4F5F               SBCI    R21, 255
   \   00000140   8342               STD     Z+2, R20
   \   00000142   8353               STD     Z+3, R21
    440              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] >> 8) & 0xff; // WashTrackcnt
   \   00000144   85A2               LDD     R26, Z+10
   \   00000146   85B3               LDD     R27, Z+11
   \   00000148   0FA2               ADD     R26, R18
   \   0000014A   1FB3               ADC     R27, R19
   \   0000014C   912C               LD      R18, X
   \   0000014E   E032               LDI     R19, 2
   \   00000150   9F23               MUL     R18, R19
   \   00000152   01D0               MOVW    R27:R26, R1:R0
   \   00000154   ....               SUBI    R26, LOW((-(TData + 1251) & 0xFFFF))
   \   00000156   ....               SBCI    R27, HIGH((-(TData + 1251) & 0xFFFF))
   \   00000158   9611               ADIW    R27:R26, 1
   \   0000015A   912C               LD      R18, X
   \   0000015C   81A0               LD      R26, Z
   \   0000015E   81B1               LDD     R27, Z+1
   \   00000160   8142               LDD     R20, Z+2
   \   00000162   0FA4               ADD     R26, R20
   \   00000164   1FB5               ADC     R27, R21
   \   00000166   932C               ST      X, R18
   \   00000168   8122               LDD     R18, Z+2
   \   0000016A   8133               LDD     R19, Z+3
   \   0000016C   5F2F               SUBI    R18, 255
   \   0000016E   4F3F               SBCI    R19, 255
   \   00000170   8322               STD     Z+2, R18
   \   00000172   8333               STD     Z+3, R19
    441              UART[ch].pTxBuffer[ntna]     = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000174   1B20               SUB     R18, R16
   \   00000176   5022               SUBI    R18, 2
   \   00000178   81A0               LD      R26, Z
   \   0000017A   81B1               LDD     R27, Z+1
   \   0000017C   0FA0               ADD     R26, R16
   \   0000017E   1FB1               ADC     R27, R17
   \   00000180   932C               ST      X, R18
    442              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000182   8122               LDD     R18, Z+2
   \   00000184   8133               LDD     R19, Z+3
   \   00000186   1B20               SUB     R18, R16
   \   00000188   0B31               SBC     R19, R17
   \   0000018A   5022               SUBI    R18, 2
   \   0000018C   4030               SBCI    R19, 0
   \   0000018E   2F43               MOV     R20, R19
   \   00000190   8120               LD      R18, Z
   \   00000192   8131               LDD     R19, Z+1
   \   00000194   0F20               ADD     R18, R16
   \   00000196   1F31               ADC     R19, R17
   \   00000198   01F9               MOVW    R31:R30, R19:R18
   \   0000019A   8341               STD     Z+1, R20
    443              OS_LeaveRegion();
   \   0000019C   ........           CALL    OS_LeaveRegion
    444          }
   \   000001A0                      REQUIRE ?Subroutine2
   \   000001A0                      ;               // Fall through to label ?Subroutine2

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9508               RET
    445          
    446          
    447          
    448          /*************************************************************************
    449          *
    450          * Build setup dat package for AN-ZB485
    451          *
    452          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   81A0               LD      R26, Z
   \   00000002   81B1               LDD     R27, Z+1
   \   00000004   8142               LDD     R20, Z+2
   \   00000006   0FA4               ADD     R26, R20
   \   00000008   1FB3               ADC     R27, R19
   \   0000000A   932C               ST      X, R18
   \   0000000C   8122               LDD     R18, Z+2
   \   0000000E   8133               LDD     R19, Z+3
   \   00000010   5F2F               SUBI    R18, 255
   \   00000012   4F3F               SBCI    R19, 255
   \   00000014   8322               STD     Z+2, R18
   \   00000016   8333               STD     Z+3, R19
   \   00000018   1B20               SUB     R18, R16
   \   0000001A   5022               SUBI    R18, 2
   \   0000001C   81A0               LD      R26, Z
   \   0000001E   81B1               LDD     R27, Z+1
   \   00000020   0FA0               ADD     R26, R16
   \   00000022   1FB1               ADC     R27, R17
   \   00000024   932C               ST      X, R18
   \   00000026   8122               LDD     R18, Z+2
   \   00000028   8133               LDD     R19, Z+3
   \   0000002A   1B20               SUB     R18, R16
   \   0000002C   0B31               SBC     R19, R17
   \   0000002E   5022               SUBI    R18, 2
   \   00000030   4030               SBCI    R19, 0
   \   00000032   2F43               MOV     R20, R19
   \   00000034   8120               LD      R18, Z
   \   00000036   8131               LDD     R19, Z+1
   \   00000038   0F20               ADD     R18, R16
   \   0000003A   1F31               ADC     R19, R17
   \   0000003C   01F9               MOVW    R31:R30, R19:R18
   \   0000003E   8341               STD     Z+1, R20
   \   00000040   2FA6               MOV     R26, R22
   \   00000042   2FB5               MOV     R27, R21
   \   00000044   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    453          void BuildRS4Setup(char ch, short pointer) {
   \                     BuildRS4Setup:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    454          
    455              short ntna ;
    456              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART)
   \   0000000A   ....               LDI     R31, (UART) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E001               LDI     R16, 1
   \   00000012   8F01               STD     Z+25, R16
    457          
    458              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP & 0xff;
   \   00000014   E507               LDI     R16, 87
   \   00000016   81A0               LD      R26, Z
   \   00000018   81B1               LDD     R27, Z+1
   \   0000001A   8122               LDD     R18, Z+2
   \   0000001C   8133               LDD     R19, Z+3
   \   0000001E   0FA2               ADD     R26, R18
   \   00000020   1FB3               ADC     R27, R19
   \   00000022   930C               ST      X, R16
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    459              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP >> 8;
   \   00000030   E004               LDI     R16, 4
   \   00000032   81A0               LD      R26, Z
   \   00000034   81B1               LDD     R27, Z+1
   \   00000036   8122               LDD     R18, Z+2
   \   00000038   0FA2               ADD     R26, R18
   \   0000003A   1FB1               ADC     R27, R17
   \   0000003C   930C               ST      X, R16
   \   0000003E   8102               LDD     R16, Z+2
   \   00000040   8113               LDD     R17, Z+3
   \   00000042   5F0F               SUBI    R16, 255
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   8302               STD     Z+2, R16
   \   00000048   8313               STD     Z+3, R17
    460              ntna = UART[ch].TxFirst ;                                    /* remember index */
    461              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000004A   0198               MOVW    R19:R18, R17:R16
   \   0000004C   5F2E               SUBI    R18, 254
   \   0000004E   4F3F               SBCI    R19, 255
   \   00000050   8322               STD     Z+2, R18
   \   00000052   8333               STD     Z+3, R19
   \   00000054   9120....           LDS     R18, TData
   \   00000058   81A0               LD      R26, Z
   \   0000005A   81B1               LDD     R27, Z+1
   \   0000005C   8142               LDD     R20, Z+2
   \   0000005E   0FA4               ADD     R26, R20
   \   00000060   1FB3               ADC     R27, R19
   \   00000062   932C               ST      X, R18
   \   00000064   8122               LDD     R18, Z+2
   \   00000066   8133               LDD     R19, Z+3
   \   00000068   5F2F               SUBI    R18, 255
   \   0000006A   4F3F               SBCI    R19, 255
   \   0000006C   8322               STD     Z+2, R18
   \   0000006E   8333               STD     Z+3, R19
    462          
    463              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.PortUsed;  // send the setup
    464              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[0];  // send the sensor type
   \   00000070   9120....           LDS     R18, (TData + 1)
   \   00000074   81A0               LD      R26, Z
   \   00000076   81B1               LDD     R27, Z+1
   \   00000078   8142               LDD     R20, Z+2
   \   0000007A   0FA4               ADD     R26, R20
   \   0000007C   1FB3               ADC     R27, R19
   \   0000007E   932C               ST      X, R18
   \   00000080   8122               LDD     R18, Z+2
   \   00000082   8133               LDD     R19, Z+3
   \   00000084   5F2F               SUBI    R18, 255
   \   00000086   4F3F               SBCI    R19, 255
   \   00000088   8322               STD     Z+2, R18
   \   0000008A   8333               STD     Z+3, R19
    465              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[1];  // send the sensor type
   \   0000008C   9120....           LDS     R18, (TData + 2)
   \   00000090   ....               RJMP    ?Subroutine0
    466          
    467              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
    468              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    469          }
    470          
    471          /*************************************************************************
    472          *
    473          * Build datablock of measured data for ADcard
    474          *
    475          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    476          void BuildMData485(char ch, short pointer) {
   \                     BuildMData485:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   011C               MOVW    R3:R2, R25:R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
    477          
    478              short ntna, i ;
    479              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   E11A               LDI     R17, 26
   \   00000008   9F01               MUL     R16, R17
   \   0000000A   ....               LDI     R30, LOW(UART)
   \   0000000C   ....               LDI     R31, (UART) >> 8
   \   0000000E   0DE0               ADD     R30, R0
   \   00000010   1DF1               ADC     R31, R1
   \   00000012   E001               LDI     R16, 1
   \   00000014   8F01               STD     Z+25, R16
    480          
    481              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA & 0xff;
   \   00000016   E705               LDI     R16, 117
   \   00000018   81A0               LD      R26, Z
   \   0000001A   81B1               LDD     R27, Z+1
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   0FA4               ADD     R26, R20
   \   00000022   1FB5               ADC     R27, R21
   \   00000024   930C               ST      X, R16
   \   00000026   8102               LDD     R16, Z+2
   \   00000028   8113               LDD     R17, Z+3
   \   0000002A   5F0F               SUBI    R16, 255
   \   0000002C   4F1F               SBCI    R17, 255
   \   0000002E   8302               STD     Z+2, R16
   \   00000030   8313               STD     Z+3, R17
    482              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA >> 8;
   \   00000032   E004               LDI     R16, 4
   \   00000034   81A0               LD      R26, Z
   \   00000036   81B1               LDD     R27, Z+1
   \   00000038   8142               LDD     R20, Z+2
   \   0000003A   0FA4               ADD     R26, R20
   \   0000003C   1FB1               ADC     R27, R17
   \   0000003E   930C               ST      X, R16
   \   00000040   8102               LDD     R16, Z+2
   \   00000042   8113               LDD     R17, Z+3
   \   00000044   5F0F               SUBI    R16, 255
   \   00000046   4F1F               SBCI    R17, 255
   \   00000048   8302               STD     Z+2, R16
   \   0000004A   8313               STD     Z+3, R17
    483              ntna = UART[ch].TxFirst ;                                    /* remember index */
    484              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000004C   01A8               MOVW    R21:R20, R17:R16
   \   0000004E   5F4E               SUBI    R20, 254
   \   00000050   4F5F               SBCI    R21, 255
   \   00000052   8342               STD     Z+2, R20
   \   00000054   8353               STD     Z+3, R21
    485          
    486              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \   00000056   85A2               LDD     R26, Z+10
   \   00000058   85B3               LDD     R27, Z+11
   \   0000005A   0FA2               ADD     R26, R18
   \   0000005C   1FB3               ADC     R27, R19
   \   0000005E   914C               LD      R20, X
   \   00000060   81A0               LD      R26, Z
   \   00000062   81B1               LDD     R27, Z+1
   \   00000064   8162               LDD     R22, Z+2
   \   00000066   0FA6               ADD     R26, R22
   \   00000068   1FB5               ADC     R27, R21
   \   0000006A   934C               ST      X, R20
   \   0000006C   8142               LDD     R20, Z+2
   \   0000006E   8153               LDD     R21, Z+3
   \   00000070   5F4F               SUBI    R20, 255
   \   00000072   4F5F               SBCI    R21, 255
   \   00000074   8342               STD     Z+2, R20
   \   00000076   8353               STD     Z+3, R21
    487              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.IOUnitStatus[UART[ch].pRxBuffer[pointer]] | (RestartStatus <<4); // IOUnit status +  restart status
   \   00000078   85A2               LDD     R26, Z+10
   \   0000007A   85B3               LDD     R27, Z+11
   \   0000007C   0FA2               ADD     R26, R18
   \   0000007E   1FB3               ADC     R27, R19
   \   00000080   91AC               LD      R26, X
   \   00000082   E0B0               LDI     R27, 0
   \   00000084   ....               SUBI    R26, LOW((-(TData + 3) & 0xFFFF))
   \   00000086   ....               SBCI    R27, HIGH((-(TData + 3) & 0xFFFF))
   \   00000088   915C               LD      R21, X
   \   0000008A   9140....           LDS     R20, RestartStatus
   \   0000008E   9542               SWAP    R20
   \   00000090   7F40               ANDI    R20, 0xF0
   \   00000092   2B54               OR      R21, R20
   \   00000094   81A0               LD      R26, Z
   \   00000096   81B1               LDD     R27, Z+1
   \   00000098   8162               LDD     R22, Z+2
   \   0000009A   8173               LDD     R23, Z+3
   \   0000009C   0FA6               ADD     R26, R22
   \   0000009E   1FB7               ADC     R27, R23
   \   000000A0   935C               ST      X, R21
   \   000000A2   8142               LDD     R20, Z+2
   \   000000A4   8153               LDD     R21, Z+3
   \   000000A6   5F4F               SUBI    R20, 255
   \   000000A8   4F5F               SBCI    R21, 255
   \   000000AA   8342               STD     Z+2, R20
   \   000000AC   8353               STD     Z+3, R21
    488              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] & 0xff; // Failcnt error
   \   000000AE   85A2               LDD     R26, Z+10
   \   000000B0   85B3               LDD     R27, Z+11
   \   000000B2   0FA2               ADD     R26, R18
   \   000000B4   1FB3               ADC     R27, R19
   \   000000B6   914C               LD      R20, X
   \   000000B8   E054               LDI     R21, 4
   \   000000BA   9F45               MUL     R20, R21
   \   000000BC   01D0               MOVW    R27:R26, R1:R0
   \   000000BE   ....               SUBI    R26, LOW((-(TData + 11) & 0xFFFF))
   \   000000C0   ....               SBCI    R27, HIGH((-(TData + 11) & 0xFFFF))
   \   000000C2   914D               LD      R20, X+
   \   000000C4   81A0               LD      R26, Z
   \   000000C6   81B1               LDD     R27, Z+1
   \   000000C8   8162               LDD     R22, Z+2
   \   000000CA   8173               LDD     R23, Z+3
   \   000000CC   0FA6               ADD     R26, R22
   \   000000CE   1FB7               ADC     R27, R23
   \   000000D0   934C               ST      X, R20
   \   000000D2   8142               LDD     R20, Z+2
   \   000000D4   8153               LDD     R21, Z+3
   \   000000D6   5F4F               SUBI    R20, 255
   \   000000D8   4F5F               SBCI    R21, 255
   \   000000DA   8342               STD     Z+2, R20
   \   000000DC   8353               STD     Z+3, R21
    489              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] >> 8) & 0xff; // Failcnt error
   \   000000DE   85A2               LDD     R26, Z+10
   \   000000E0   85B3               LDD     R27, Z+11
   \   000000E2   0FA2               ADD     R26, R18
   \   000000E4   1FB3               ADC     R27, R19
   \   000000E6   914C               LD      R20, X
   \   000000E8   E054               LDI     R21, 4
   \   000000EA   9F45               MUL     R20, R21
   \   000000EC   01D0               MOVW    R27:R26, R1:R0
   \   000000EE   ....               SUBI    R26, LOW((-(TData + 11) & 0xFFFF))
   \   000000F0   ....               SBCI    R27, HIGH((-(TData + 11) & 0xFFFF))
   \   000000F2   9611               ADIW    R27:R26, 1
   \   000000F4   914C               LD      R20, X
   \   000000F6   81A0               LD      R26, Z
   \   000000F8   81B1               LDD     R27, Z+1
   \   000000FA   8162               LDD     R22, Z+2
   \   000000FC   8173               LDD     R23, Z+3
   \   000000FE   0FA6               ADD     R26, R22
   \   00000100   1FB7               ADC     R27, R23
   \   00000102   934C               ST      X, R20
   \   00000104   8142               LDD     R20, Z+2
   \   00000106   8153               LDD     R21, Z+3
   \   00000108   5F4F               SUBI    R20, 255
   \   0000010A   4F5F               SBCI    R21, 255
   \   0000010C   8342               STD     Z+2, R20
   \   0000010E   8353               STD     Z+3, R21
    490              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] & 0xff; // Failcnt total
   \   00000110   85A2               LDD     R26, Z+10
   \   00000112   85B3               LDD     R27, Z+11
   \   00000114   0FA2               ADD     R26, R18
   \   00000116   1FB3               ADC     R27, R19
   \   00000118   914C               LD      R20, X
   \   0000011A   E054               LDI     R21, 4
   \   0000011C   9F45               MUL     R20, R21
   \   0000011E   01D0               MOVW    R27:R26, R1:R0
   \   00000120   ....               SUBI    R26, LOW((-(TData + 13) & 0xFFFF))
   \   00000122   ....               SBCI    R27, HIGH((-(TData + 13) & 0xFFFF))
   \   00000124   914D               LD      R20, X+
   \   00000126   81A0               LD      R26, Z
   \   00000128   81B1               LDD     R27, Z+1
   \   0000012A   8162               LDD     R22, Z+2
   \   0000012C   8173               LDD     R23, Z+3
   \   0000012E   0FA6               ADD     R26, R22
   \   00000130   1FB7               ADC     R27, R23
   \   00000132   934C               ST      X, R20
   \   00000134   8142               LDD     R20, Z+2
   \   00000136   8153               LDD     R21, Z+3
   \   00000138   5F4F               SUBI    R20, 255
   \   0000013A   4F5F               SBCI    R21, 255
   \   0000013C   8342               STD     Z+2, R20
   \   0000013E   8353               STD     Z+3, R21
    491              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] >> 8) & 0xff; // Failcnt total
   \   00000140   85A2               LDD     R26, Z+10
   \   00000142   85B3               LDD     R27, Z+11
   \   00000144   0FA2               ADD     R26, R18
   \   00000146   1FB3               ADC     R27, R19
   \   00000148   914C               LD      R20, X
   \   0000014A   E054               LDI     R21, 4
   \   0000014C   9F45               MUL     R20, R21
   \   0000014E   01D0               MOVW    R27:R26, R1:R0
   \   00000150   ....               SUBI    R26, LOW((-(TData + 13) & 0xFFFF))
   \   00000152   ....               SBCI    R27, HIGH((-(TData + 13) & 0xFFFF))
   \   00000154   9611               ADIW    R27:R26, 1
   \   00000156   914C               LD      R20, X
   \   00000158   81A0               LD      R26, Z
   \   0000015A   81B1               LDD     R27, Z+1
   \   0000015C   8162               LDD     R22, Z+2
   \   0000015E   8173               LDD     R23, Z+3
   \   00000160   0FA6               ADD     R26, R22
   \   00000162   1FB7               ADC     R27, R23
   \   00000164   934C               ST      X, R20
   \   00000166   8142               LDD     R20, Z+2
   \   00000168   8153               LDD     R21, Z+3
   \   0000016A   5F4F               SUBI    R20, 255
   \   0000016C   4F5F               SBCI    R21, 255
   \   0000016E   8342               STD     Z+2, R20
   \   00000170   8353               STD     Z+3, R21
    492              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusSWVer[UART[ch].pRxBuffer[pointer]] ; // Target status byte 1
   \   00000172   85A2               LDD     R26, Z+10
   \   00000174   85B3               LDD     R27, Z+11
   \   00000176   0FA2               ADD     R26, R18
   \   00000178   1FB3               ADC     R27, R19
   \   0000017A   91AC               LD      R26, X
   \   0000017C   E0B0               LDI     R27, 0
   \   0000017E   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   00000180   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000182   914C               LD      R20, X
   \   00000184   81A0               LD      R26, Z
   \   00000186   81B1               LDD     R27, Z+1
   \   00000188   8162               LDD     R22, Z+2
   \   0000018A   0FA6               ADD     R26, R22
   \   0000018C   1FB5               ADC     R27, R21
   \   0000018E   934C               ST      X, R20
   \   00000190   8142               LDD     R20, Z+2
   \   00000192   8153               LDD     R21, Z+3
   \   00000194   5F4F               SUBI    R20, 255
   \   00000196   4F5F               SBCI    R21, 255
   \   00000198   8342               STD     Z+2, R20
   \   0000019A   8353               STD     Z+3, R21
    493              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] ; // Target status byte 2
   \   0000019C   85A2               LDD     R26, Z+10
   \   0000019E   85B3               LDD     R27, Z+11
   \   000001A0   0FA2               ADD     R26, R18
   \   000001A2   1FB3               ADC     R27, R19
   \   000001A4   91AC               LD      R26, X
   \   000001A6   E0B0               LDI     R27, 0
   \   000001A8   ....               SUBI    R26, LOW((-(TData + 51) & 0xFFFF))
   \   000001AA   ....               SBCI    R27, HIGH((-(TData + 51) & 0xFFFF))
   \   000001AC   914C               LD      R20, X
   \   000001AE   81A0               LD      R26, Z
   \   000001B0   81B1               LDD     R27, Z+1
   \   000001B2   8162               LDD     R22, Z+2
   \   000001B4   0FA6               ADD     R26, R22
   \   000001B6   1FB5               ADC     R27, R21
   \   000001B8   934C               ST      X, R20
   \   000001BA   8142               LDD     R20, Z+2
   \   000001BC   8153               LDD     R21, Z+3
   \   000001BE   5F4F               SUBI    R20, 255
   \   000001C0   4F5F               SBCI    R21, 255
   \   000001C2   8342               STD     Z+2, R20
   \   000001C4   8353               STD     Z+3, R21
    494          
    495              TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] &= ~0x80;                                  //reset restart flag for adcard
   \   000001C6   85A2               LDD     R26, Z+10
   \   000001C8   85B3               LDD     R27, Z+11
   \   000001CA   0FA2               ADD     R26, R18
   \   000001CC   1FB3               ADC     R27, R19
   \   000001CE   91AC               LD      R26, X
   \   000001D0   E0B0               LDI     R27, 0
   \   000001D2   ....               SUBI    R26, LOW((-(TData + 51) & 0xFFFF))
   \   000001D4   ....               SBCI    R27, HIGH((-(TData + 51) & 0xFFFF))
   \   000001D6   914C               LD      R20, X
   \   000001D8   774F               ANDI    R20, 0x7F
   \   000001DA   934C               ST      X, R20
    496          
    497              for (i = 0; i < 14; i++) {
   \   000001DC   E080               LDI     R24, 0
   \   000001DE   E090               LDI     R25, 0
    498                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup1[UART[ch].pRxBuffer[pointer]][i] ;
   \                     ??BuildMData485_0:
   \   000001E0   ....               LDI     R20, LOW((TData + 59))
   \   000001E2   ....               LDI     R21, HIGH((TData + 59))
   \   000001E4   0F48               ADD     R20, R24
   \   000001E6   1F59               ADC     R21, R25
   \   000001E8   85A2               LDD     R26, Z+10
   \   000001EA   85B3               LDD     R27, Z+11
   \   000001EC   0FA2               ADD     R26, R18
   \   000001EE   1FB3               ADC     R27, R19
   \   000001F0   917C               LD      R23, X
   \   000001F2   E06E               LDI     R22, 14
   \   000001F4   9F76               MUL     R23, R22
   \   000001F6   0D40               ADD     R20, R0
   \   000001F8   1D51               ADC     R21, R1
   \   000001FA   01DA               MOVW    R27:R26, R21:R20
   \   000001FC   914C               LD      R20, X
   \   000001FE   81A0               LD      R26, Z
   \   00000200   81B1               LDD     R27, Z+1
   \   00000202   8162               LDD     R22, Z+2
   \   00000204   8173               LDD     R23, Z+3
   \   00000206   0FA6               ADD     R26, R22
   \   00000208   1FB7               ADC     R27, R23
   \   0000020A   934C               ST      X, R20
   \   0000020C   8142               LDD     R20, Z+2
   \   0000020E   8153               LDD     R21, Z+3
   \   00000210   5F4F               SUBI    R20, 255
   \   00000212   4F5F               SBCI    R21, 255
   \   00000214   8342               STD     Z+2, R20
   \   00000216   8353               STD     Z+3, R21
    499                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup2[UART[ch].pRxBuffer[pointer]][i] ;
   \   00000218   ....               LDI     R20, LOW((TData + 171))
   \   0000021A   ....               LDI     R21, HIGH((TData + 171))
   \   0000021C   0F48               ADD     R20, R24
   \   0000021E   1F59               ADC     R21, R25
   \   00000220   85A2               LDD     R26, Z+10
   \   00000222   85B3               LDD     R27, Z+11
   \   00000224   0FA2               ADD     R26, R18
   \   00000226   1FB3               ADC     R27, R19
   \   00000228   917C               LD      R23, X
   \   0000022A   E06E               LDI     R22, 14
   \   0000022C   9F76               MUL     R23, R22
   \   0000022E   0D40               ADD     R20, R0
   \   00000230   1D51               ADC     R21, R1
   \   00000232   01DA               MOVW    R27:R26, R21:R20
   \   00000234   914C               LD      R20, X
   \   00000236   81A0               LD      R26, Z
   \   00000238   81B1               LDD     R27, Z+1
   \   0000023A   8162               LDD     R22, Z+2
   \   0000023C   8173               LDD     R23, Z+3
   \   0000023E   0FA6               ADD     R26, R22
   \   00000240   1FB7               ADC     R27, R23
   \   00000242   934C               ST      X, R20
   \   00000244   8142               LDD     R20, Z+2
   \   00000246   8153               LDD     R21, Z+3
   \   00000248   5F4F               SUBI    R20, 255
   \   0000024A   4F5F               SBCI    R21, 255
   \   0000024C   8342               STD     Z+2, R20
   \   0000024E   8353               STD     Z+3, R21
    500                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.RS4.Result[UART[ch].pRxBuffer[pointer]][i]) ;   // ADresult
   \   00000250   ....               LDI     R20, LOW((TData + 731))
   \   00000252   ....               LDI     R21, HIGH((TData + 731))
   \   00000254   01BC               MOVW    R23:R22, R25:R24
   \   00000256   0F66               LSL     R22
   \   00000258   1F77               ROL     R23
   \   0000025A   0F66               LSL     R22
   \   0000025C   1F77               ROL     R23
   \   0000025E   0F46               ADD     R20, R22
   \   00000260   1F57               ADC     R21, R23
   \   00000262   85A2               LDD     R26, Z+10
   \   00000264   85B3               LDD     R27, Z+11
   \   00000266   0FA2               ADD     R26, R18
   \   00000268   1FB3               ADC     R27, R19
   \   0000026A   917C               LD      R23, X
   \   0000026C   E368               LDI     R22, 56
   \   0000026E   9F76               MUL     R23, R22
   \   00000270   0D40               ADD     R20, R0
   \   00000272   1D51               ADC     R21, R1
   \   00000274   01DA               MOVW    R27:R26, R21:R20
   \   00000276   914D               LD      R20, X+
   \   00000278   915D               LD      R21, X+
   \   0000027A   916D               LD      R22, X+
   \   0000027C   917C               LD      R23, X
   \   0000027E   81A0               LD      R26, Z
   \   00000280   81B1               LDD     R27, Z+1
   \   00000282   8002               LDD     R0, Z+2
   \   00000284   8013               LDD     R1, Z+3
   \   00000286   0DA0               ADD     R26, R0
   \   00000288   1DB1               ADC     R27, R1
   \   0000028A   934D               ST      X+, R20
   \   0000028C   935D               ST      X+, R21
   \   0000028E   936D               ST      X+, R22
   \   00000290   937C               ST      X, R23
    501                  UART[ch].TxFirst += sizeof(float) ;
   \   00000292   8142               LDD     R20, Z+2
   \   00000294   8153               LDD     R21, Z+3
   \   00000296   5F4C               SUBI    R20, 252
   \   00000298   4F5F               SBCI    R21, 255
   \   0000029A   8342               STD     Z+2, R20
   \   0000029C   8353               STD     Z+3, R21
    502              }
   \   0000029E   9601               ADIW    R25:R24, 1
   \   000002A0   308E               CPI     R24, 14
   \   000002A2   E040               LDI     R20, 0
   \   000002A4   0794               CPC     R25, R20
   \   000002A6   F40C               BRGE    $+2+2
   \   000002A8   CF9B               RJMP    ??BuildMData485_0
    503          
    504              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000002AA   8122               LDD     R18, Z+2
   \   000002AC   1B20               SUB     R18, R16
   \   000002AE   5022               SUBI    R18, 2
   \   000002B0   81A0               LD      R26, Z
   \   000002B2   81B1               LDD     R27, Z+1
   \   000002B4   0FA0               ADD     R26, R16
   \   000002B6   1FB1               ADC     R27, R17
   \   000002B8   932C               ST      X, R18
    505              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000002BA   8122               LDD     R18, Z+2
   \   000002BC   8133               LDD     R19, Z+3
   \   000002BE   1B20               SUB     R18, R16
   \   000002C0   0B31               SBC     R19, R17
   \   000002C2   5022               SUBI    R18, 2
   \   000002C4   4030               SBCI    R19, 0
   \   000002C6   2F43               MOV     R20, R19
   \   000002C8   8120               LD      R18, Z
   \   000002CA   8131               LDD     R19, Z+1
   \   000002CC   0F20               ADD     R18, R16
   \   000002CE   1F31               ADC     R19, R17
   \   000002D0   01F9               MOVW    R31:R30, R19:R18
   \   000002D2   8341               STD     Z+1, R20
    506          
    507          }
   \   000002D4   01C1               MOVW    R25:R24, R3:R2
   \   000002D6   91A9               LD      R26, Y+
   \   000002D8   91B9               LD      R27, Y+
   \   000002DA   9508               RET
    508          
    509          /*************************************************************************
    510          *
    511          * Build datablock of raw and cal data for ADcard
    512          *
    513          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    514          void BuildRData485(char ch, short pointer) {
   \                     BuildRData485:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    515          
    516              short ntna, i ;
    517              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R26, LOW(UART)
   \   0000000E   ....               LDI     R27, (UART) >> 8
   \   00000010   0DA0               ADD     R26, R0
   \   00000012   1DB1               ADC     R27, R1
   \   00000014   E001               LDI     R16, 1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8F01               STD     Z+25, R16
    518          
    519              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA & 0xff;
   \   0000001A   E746               LDI     R20, 118
   \   0000001C   8100               LD      R16, Z
   \   0000001E   8111               LDD     R17, Z+1
   \   00000020   8162               LDD     R22, Z+2
   \   00000022   8173               LDD     R23, Z+3
   \   00000024   0F06               ADD     R16, R22
   \   00000026   1F17               ADC     R17, R23
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   8340               ST      Z, R20
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8102               LDD     R16, Z+2
   \   00000030   8113               LDD     R17, Z+3
   \   00000032   5F0F               SUBI    R16, 255
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   8302               STD     Z+2, R16
   \   00000038   8313               STD     Z+3, R17
    520              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA >> 8;
   \   0000003A   E044               LDI     R20, 4
   \   0000003C   8100               LD      R16, Z
   \   0000003E   8111               LDD     R17, Z+1
   \   00000040   8162               LDD     R22, Z+2
   \   00000042   8173               LDD     R23, Z+3
   \   00000044   0F06               ADD     R16, R22
   \   00000046   1F17               ADC     R17, R23
   \   00000048   01F8               MOVW    R31:R30, R17:R16
   \   0000004A   8340               ST      Z, R20
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8102               LDD     R16, Z+2
   \   00000050   8113               LDD     R17, Z+3
   \   00000052   5F0F               SUBI    R16, 255
   \   00000054   4F1F               SBCI    R17, 255
   \   00000056   8302               STD     Z+2, R16
   \   00000058   8313               STD     Z+3, R17
    521              ntna = UART[ch].TxFirst ;                                    /* remember index */
    522              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000005A   01A8               MOVW    R21:R20, R17:R16
   \   0000005C   5F4E               SUBI    R20, 254
   \   0000005E   4F5F               SBCI    R21, 255
   \   00000060   8342               STD     Z+2, R20
   \   00000062   8353               STD     Z+3, R21
    523          
    524              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \   00000064   8542               LDD     R20, Z+10
   \   00000066   8553               LDD     R21, Z+11
   \   00000068   0F42               ADD     R20, R18
   \   0000006A   1F53               ADC     R21, R19
   \   0000006C   01FA               MOVW    R31:R30, R21:R20
   \   0000006E   8160               LD      R22, Z
   \   00000070   914D               LD      R20, X+
   \   00000072   915C               LD      R21, X
   \   00000074   9711               SBIW    R27:R26, 1
   \   00000076   01FD               MOVW    R31:R30, R27:R26
   \   00000078   8002               LDD     R0, Z+2
   \   0000007A   8013               LDD     R1, Z+3
   \   0000007C   0D40               ADD     R20, R0
   \   0000007E   1D51               ADC     R21, R1
   \   00000080   01FA               MOVW    R31:R30, R21:R20
   \   00000082   8360               ST      Z, R22
   \   00000084   01FD               MOVW    R31:R30, R27:R26
   \   00000086   8142               LDD     R20, Z+2
   \   00000088   8153               LDD     R21, Z+3
   \   0000008A   5F4F               SUBI    R20, 255
   \   0000008C   4F5F               SBCI    R21, 255
   \   0000008E   8342               STD     Z+2, R20
   \   00000090   8353               STD     Z+3, R21
    525              for (i = 0; i < 14; i++) {
   \   00000092   E080               LDI     R24, 0
   \   00000094   E090               LDI     R25, 0
    526                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Raw[UART[ch].pRxBuffer[pointer]][i]) ;   // Raw data
   \                     ??BuildRData485_0:
   \   00000096   01BC               MOVW    R23:R22, R25:R24
   \   00000098   0F66               LSL     R22
   \   0000009A   1F77               ROL     R23
   \   0000009C   ....               LDI     R20, LOW((TData + 283))
   \   0000009E   ....               LDI     R21, HIGH((TData + 283))
   \   000000A0   0F46               ADD     R20, R22
   \   000000A2   1F57               ADC     R21, R23
   \   000000A4   8402               LDD     R0, Z+10
   \   000000A6   8413               LDD     R1, Z+11
   \   000000A8   0E02               ADD     R0, R18
   \   000000AA   1E13               ADC     R1, R19
   \   000000AC   01F0               MOVW    R31:R30, R1:R0
   \   000000AE   8000               LD      R0, Z
   \   000000B0   E1EC               LDI     R30, 28
   \   000000B2   9E0E               MUL     R0, R30
   \   000000B4   0D40               ADD     R20, R0
   \   000000B6   1D51               ADC     R21, R1
   \   000000B8   01FA               MOVW    R31:R30, R21:R20
   \   000000BA   8000               LD      R0, Z
   \   000000BC   8011               LDD     R1, Z+1
   \   000000BE   01FD               MOVW    R31:R30, R27:R26
   \   000000C0   8140               LD      R20, Z
   \   000000C2   8151               LDD     R21, Z+1
   \   000000C4   8022               LDD     R2, Z+2
   \   000000C6   8033               LDD     R3, Z+3
   \   000000C8   0D42               ADD     R20, R2
   \   000000CA   1D53               ADC     R21, R3
   \   000000CC   01FA               MOVW    R31:R30, R21:R20
   \   000000CE   8200               ST      Z, R0
   \   000000D0   8211               STD     Z+1, R1
    527                  UART[ch].TxFirst += sizeof(short) ;
   \   000000D2   01FD               MOVW    R31:R30, R27:R26
   \   000000D4   8142               LDD     R20, Z+2
   \   000000D6   8153               LDD     R21, Z+3
   \   000000D8   5F4E               SUBI    R20, 254
   \   000000DA   4F5F               SBCI    R21, 255
   \   000000DC   8342               STD     Z+2, R20
   \   000000DE   8353               STD     Z+3, R21
    528                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Cal[UART[ch].pRxBuffer[pointer]][i]) ;   // Cal data
   \   000000E0   ....               LDI     R20, LOW((TData + 507))
   \   000000E2   ....               LDI     R21, HIGH((TData + 507))
   \   000000E4   0F46               ADD     R20, R22
   \   000000E6   1F57               ADC     R21, R23
   \   000000E8   8562               LDD     R22, Z+10
   \   000000EA   8573               LDD     R23, Z+11
   \   000000EC   0F62               ADD     R22, R18
   \   000000EE   1F73               ADC     R23, R19
   \   000000F0   01FB               MOVW    R31:R30, R23:R22
   \   000000F2   8170               LD      R23, Z
   \   000000F4   E16C               LDI     R22, 28
   \   000000F6   9F76               MUL     R23, R22
   \   000000F8   0D40               ADD     R20, R0
   \   000000FA   1D51               ADC     R21, R1
   \   000000FC   01FA               MOVW    R31:R30, R21:R20
   \   000000FE   8160               LD      R22, Z
   \   00000100   8171               LDD     R23, Z+1
   \   00000102   01FD               MOVW    R31:R30, R27:R26
   \   00000104   8140               LD      R20, Z
   \   00000106   8151               LDD     R21, Z+1
   \   00000108   8002               LDD     R0, Z+2
   \   0000010A   8013               LDD     R1, Z+3
   \   0000010C   0D40               ADD     R20, R0
   \   0000010E   1D51               ADC     R21, R1
   \   00000110   01FA               MOVW    R31:R30, R21:R20
   \   00000112   8360               ST      Z, R22
   \   00000114   8371               STD     Z+1, R23
    529                  UART[ch].TxFirst += sizeof(short) ;
   \   00000116   01FD               MOVW    R31:R30, R27:R26
   \   00000118   8142               LDD     R20, Z+2
   \   0000011A   8153               LDD     R21, Z+3
   \   0000011C   5F4E               SUBI    R20, 254
   \   0000011E   4F5F               SBCI    R21, 255
   \   00000120   8342               STD     Z+2, R20
   \   00000122   8353               STD     Z+3, R21
    530              }
   \   00000124   9601               ADIW    R25:R24, 1
   \   00000126   308E               CPI     R24, 14
   \   00000128   E040               LDI     R20, 0
   \   0000012A   0794               CPC     R25, R20
   \   0000012C   F40C               BRGE    $+2+2
   \   0000012E   CFB3               RJMP    ??BuildRData485_0
    531          
    532              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000130   8122               LDD     R18, Z+2
   \   00000132   1B20               SUB     R18, R16
   \   00000134   5022               SUBI    R18, 2
   \   00000136   91ED               LD      R30, X+
   \   00000138   91FC               LD      R31, X
   \   0000013A   9711               SBIW    R27:R26, 1
   \   0000013C   0FE0               ADD     R30, R16
   \   0000013E   1FF1               ADC     R31, R17
   \   00000140   8320               ST      Z, R18
    533              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000142   01FD               MOVW    R31:R30, R27:R26
   \   00000144   8122               LDD     R18, Z+2
   \   00000146   8133               LDD     R19, Z+3
   \   00000148   1B20               SUB     R18, R16
   \   0000014A   0B31               SBC     R19, R17
   \   0000014C   5022               SUBI    R18, 2
   \   0000014E   4030               SBCI    R19, 0
   \   00000150   91ED               LD      R30, X+
   \   00000152   91FC               LD      R31, X
   \   00000154   0FE0               ADD     R30, R16
   \   00000156   1FF1               ADC     R31, R17
   \   00000158   8331               STD     Z+1, R19
    534          
    535          }
   \   0000015A   ....               RJMP    ?Subroutine2
    536          
    537          /*************************************************************************
    538          *
    539          * Build setup data package for AN-ZBANA
    540          *
    541          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    542          void BuildANASetup(char ch, short pointer) {
   \                     BuildANASetup:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    543          
    544              short ntna ;
    545              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART)
   \   0000000A   ....               LDI     R31, (UART) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E001               LDI     R16, 1
   \   00000012   8F01               STD     Z+25, R16
    546          
    547              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP & 0xff;
   \   00000014   EB0B               LDI     R16, 187
   \   00000016   81A0               LD      R26, Z
   \   00000018   81B1               LDD     R27, Z+1
   \   0000001A   8122               LDD     R18, Z+2
   \   0000001C   8133               LDD     R19, Z+3
   \   0000001E   0FA2               ADD     R26, R18
   \   00000020   1FB3               ADC     R27, R19
   \   00000022   930C               ST      X, R16
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    548              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP >> 8;
   \   00000030   E004               LDI     R16, 4
   \   00000032   81A0               LD      R26, Z
   \   00000034   81B1               LDD     R27, Z+1
   \   00000036   8122               LDD     R18, Z+2
   \   00000038   0FA2               ADD     R26, R18
   \   0000003A   1FB1               ADC     R27, R17
   \   0000003C   930C               ST      X, R16
   \   0000003E   8102               LDD     R16, Z+2
   \   00000040   8113               LDD     R17, Z+3
   \   00000042   5F0F               SUBI    R16, 255
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   8302               STD     Z+2, R16
   \   00000048   8313               STD     Z+3, R17
    549              ntna = UART[ch].TxFirst ;                                    /* remember index */
    550              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000004A   0198               MOVW    R19:R18, R17:R16
   \   0000004C   5F2E               SUBI    R18, 254
   \   0000004E   4F3F               SBCI    R19, 255
   \   00000050   8322               STD     Z+2, R18
   \   00000052   8333               STD     Z+3, R19
    551          
    552              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.PortUsed & 0xff;
   \   00000054   9120....           LDS     R18, TData
   \   00000058   81A0               LD      R26, Z
   \   0000005A   81B1               LDD     R27, Z+1
   \   0000005C   8142               LDD     R20, Z+2
   \   0000005E   0FA4               ADD     R26, R20
   \   00000060   1FB3               ADC     R27, R19
   \   00000062   932C               ST      X, R18
   \   00000064   8122               LDD     R18, Z+2
   \   00000066   8133               LDD     R19, Z+3
   \   00000068   5F2F               SUBI    R18, 255
   \   0000006A   4F3F               SBCI    R19, 255
   \   0000006C   8322               STD     Z+2, R18
   \   0000006E   8333               STD     Z+3, R19
    553              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.Ana.PortUsed >> 8) & 0xff;
   \   00000070   9120....           LDS     R18, (TData + 1)
   \   00000074                      REQUIRE ?Subroutine0
   \   00000074                      ;               // Fall through to label ?Subroutine0
    554          
    555              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
    556              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
    557          }
    558          
    559          /*************************************************************************
    560          *
    561          * Build filter data package for AN-ZBANA
    562          *
    563          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    564          void BuildANAFilter(char ch, short pointer) {
   \                     BuildANAFilter:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    565          
    566              char port;
    567              short ntna ;
    568              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART)
   \   00000008   ....               LDI     R31, (UART) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   E001               LDI     R16, 1
   \   00000010   8F01               STD     Z+25, R16
    569          
    570              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER & 0xff;
   \   00000012   EC0F               LDI     R16, 207
   \   00000014   81A0               LD      R26, Z
   \   00000016   81B1               LDD     R27, Z+1
   \   00000018   8122               LDD     R18, Z+2
   \   0000001A   8133               LDD     R19, Z+3
   \   0000001C   0FA2               ADD     R26, R18
   \   0000001E   1FB3               ADC     R27, R19
   \   00000020   930C               ST      X, R16
   \   00000022   8102               LDD     R16, Z+2
   \   00000024   8113               LDD     R17, Z+3
   \   00000026   5F0F               SUBI    R16, 255
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   8302               STD     Z+2, R16
   \   0000002C   8313               STD     Z+3, R17
    571              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER >> 8;
   \   0000002E   E004               LDI     R16, 4
   \   00000030   81A0               LD      R26, Z
   \   00000032   81B1               LDD     R27, Z+1
   \   00000034   8122               LDD     R18, Z+2
   \   00000036   0FA2               ADD     R26, R18
   \   00000038   1FB1               ADC     R27, R17
   \   0000003A   930C               ST      X, R16
   \   0000003C   8102               LDD     R16, Z+2
   \   0000003E   8113               LDD     R17, Z+3
   \   00000040   5F0F               SUBI    R16, 255
   \   00000042   4F1F               SBCI    R17, 255
   \   00000044   8302               STD     Z+2, R16
   \   00000046   8313               STD     Z+3, R17
    572              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   00000048   0198               MOVW    R19:R18, R17:R16
    573              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000004A   5F0E               SUBI    R16, 254
   \   0000004C   4F1F               SBCI    R17, 255
   \   0000004E   8302               STD     Z+2, R16
   \   00000050   8313               STD     Z+3, R17
    574          
    575              for (port = 0; port < 12; port++) {
   \   00000052   ....               LDI     R16, LOW((TData + 2))
   \   00000054   ....               LDI     R17, HIGH((TData + 2))
   \   00000056   E04C               LDI     R20, 12
    576                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Filter[port];
   \                     ??BuildANAFilter_0:
   \   00000058   01D8               MOVW    R27:R26, R17:R16
   \   0000005A   915D               LD      R21, X+
   \   0000005C   018D               MOVW    R17:R16, R27:R26
   \   0000005E   81A0               LD      R26, Z
   \   00000060   81B1               LDD     R27, Z+1
   \   00000062   8162               LDD     R22, Z+2
   \   00000064   8173               LDD     R23, Z+3
   \   00000066   0FA6               ADD     R26, R22
   \   00000068   1FB7               ADC     R27, R23
   \   0000006A   935C               ST      X, R21
   \   0000006C   8162               LDD     R22, Z+2
   \   0000006E   8173               LDD     R23, Z+3
   \   00000070   5F6F               SUBI    R22, 255
   \   00000072   4F7F               SBCI    R23, 255
   \   00000074   8362               STD     Z+2, R22
   \   00000076   8373               STD     Z+3, R23
    577              }
   \   00000078   954A               DEC     R20
   \   0000007A   F771               BRNE    ??BuildANAFilter_0
    578          
    579              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000007C   8102               LDD     R16, Z+2
   \   0000007E   1B02               SUB     R16, R18
   \   00000080   5002               SUBI    R16, 2
   \   00000082   81A0               LD      R26, Z
   \   00000084   81B1               LDD     R27, Z+1
   \   00000086   0FA2               ADD     R26, R18
   \   00000088   1FB3               ADC     R27, R19
   \   0000008A   930C               ST      X, R16
    580              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   0000008C   8102               LDD     R16, Z+2
   \   0000008E   8113               LDD     R17, Z+3
   \   00000090   1B02               SUB     R16, R18
   \   00000092   0B13               SBC     R17, R19
   \   00000094   5002               SUBI    R16, 2
   \   00000096   4010               SBCI    R17, 0
   \   00000098   2F41               MOV     R20, R17
   \   0000009A   8100               LD      R16, Z
   \   0000009C   8111               LDD     R17, Z+1
   \   0000009E   0F02               ADD     R16, R18
   \   000000A0   1F13               ADC     R17, R19
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   8341               STD     Z+1, R20
    581          }
   \   000000A6   01D1               MOVW    R27:R26, R3:R2
   \   000000A8   9508               RET
    582          
    583          /*************************************************************************
    584          *
    585          * Build datablock for External AD (ANA)
    586          *
    587          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    588          void BuildMDataANA(char ch, short pointer) {
   \                     BuildMDataANA:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    589          
    590              short ntna, i ;
    591              UART[ch].RxSendReply = true ;                               // flag for answering
   \   0000000C   E11A               LDI     R17, 26
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   2D00               MOV     R16, R0
   \   00000012   ....               LDI     R18, LOW(UART)
   \   00000014   2E02               MOV     R0, R18
   \   00000016   ....               LDI     R18, (UART) >> 8
   \   00000018   0E00               ADD     R0, R16
   \   0000001A   1D21               ADC     R18, R1
   \   0000001C   2E12               MOV     R1, R18
   \   0000001E   E001               LDI     R16, 1
   \   00000020   2DE0               MOV     R30, R0
   \   00000022   2FF2               MOV     R31, R18
   \   00000024   8F01               STD     Z+25, R16
    592          
    593              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA & 0xff;
   \   00000026   ED29               LDI     R18, 217
   \   00000028   8100               LD      R16, Z
   \   0000002A   8111               LDD     R17, Z+1
   \   0000002C   8142               LDD     R20, Z+2
   \   0000002E   8153               LDD     R21, Z+3
   \   00000030   0F04               ADD     R16, R20
   \   00000032   1F15               ADC     R17, R21
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   8320               ST      Z, R18
   \   00000038   01F0               MOVW    R31:R30, R1:R0
   \   0000003A   8102               LDD     R16, Z+2
   \   0000003C   8113               LDD     R17, Z+3
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8302               STD     Z+2, R16
   \   00000044   8313               STD     Z+3, R17
    594              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA >> 8;
   \   00000046   E024               LDI     R18, 4
   \   00000048   8100               LD      R16, Z
   \   0000004A   8111               LDD     R17, Z+1
   \   0000004C   8142               LDD     R20, Z+2
   \   0000004E   8153               LDD     R21, Z+3
   \   00000050   0F04               ADD     R16, R20
   \   00000052   1F15               ADC     R17, R21
   \   00000054   01F8               MOVW    R31:R30, R17:R16
   \   00000056   8320               ST      Z, R18
   \   00000058   01F0               MOVW    R31:R30, R1:R0
   \   0000005A   8102               LDD     R16, Z+2
   \   0000005C   8113               LDD     R17, Z+3
   \   0000005E   5F0F               SUBI    R16, 255
   \   00000060   4F1F               SBCI    R17, 255
   \   00000062   8302               STD     Z+2, R16
   \   00000064   8313               STD     Z+3, R17
    595              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   00000066   0198               MOVW    R19:R18, R17:R16
    596              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000068   5F0E               SUBI    R16, 254
   \   0000006A   4F1F               SBCI    R17, 255
   \   0000006C   8302               STD     Z+2, R16
   \   0000006E   8313               STD     Z+3, R17
    597          
    598              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RestartStatus << 4) ;    // Add restart status
   \   00000070   9140....           LDS     R20, RestartStatus
   \   00000074   9542               SWAP    R20
   \   00000076   7F40               ANDI    R20, 0xF0
   \   00000078   8100               LD      R16, Z
   \   0000007A   8111               LDD     R17, Z+1
   \   0000007C   8162               LDD     R22, Z+2
   \   0000007E   8173               LDD     R23, Z+3
   \   00000080   0F06               ADD     R16, R22
   \   00000082   1F17               ADC     R17, R23
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   8340               ST      Z, R20
   \   00000088   01F0               MOVW    R31:R30, R1:R0
   \   0000008A   8102               LDD     R16, Z+2
   \   0000008C   8113               LDD     R17, Z+3
   \   0000008E   5F0F               SUBI    R16, 255
   \   00000090   4F1F               SBCI    R17, 255
   \   00000092   8302               STD     Z+2, R16
   \   00000094   8313               STD     Z+3, R17
    599              for (i = 0; i<12; i++) {
   \   00000096   ....               LDI     R30, LOW((TData + 14))
   \   00000098   ....               LDI     R31, HIGH((TData + 14))
   \   0000009A   ....               LDI     R24, LOW((TData + 26))
   \   0000009C   ....               LDI     R25, HIGH((TData + 26))
   \   0000009E   E00C               LDI     R16, 12
    600                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Status[i] ;
   \                     ??BuildMDataANA_0:
   \   000000A0   9111               LD      R17, Z+
   \   000000A2   01D0               MOVW    R27:R26, R1:R0
   \   000000A4   914D               LD      R20, X+
   \   000000A6   915C               LD      R21, X
   \   000000A8   01D0               MOVW    R27:R26, R1:R0
   \   000000AA   9612               ADIW    R27:R26, 2
   \   000000AC   916D               LD      R22, X+
   \   000000AE   917C               LD      R23, X
   \   000000B0   0F46               ADD     R20, R22
   \   000000B2   1F57               ADC     R21, R23
   \   000000B4   01DA               MOVW    R27:R26, R21:R20
   \   000000B6   931C               ST      X, R17
   \   000000B8   01D0               MOVW    R27:R26, R1:R0
   \   000000BA   9612               ADIW    R27:R26, 2
   \   000000BC   914D               LD      R20, X+
   \   000000BE   915C               LD      R21, X
   \   000000C0   5F4F               SUBI    R20, 255
   \   000000C2   4F5F               SBCI    R21, 255
   \   000000C4   935C               ST      X, R21
   \   000000C6   934E               ST      -X, R20
    601                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.Ana.Result[i]) ;   // ADresult
   \   000000C8   01DC               MOVW    R27:R26, R25:R24
   \   000000CA   914D               LD      R20, X+
   \   000000CC   915D               LD      R21, X+
   \   000000CE   916D               LD      R22, X+
   \   000000D0   917D               LD      R23, X+
   \   000000D2   01CD               MOVW    R25:R24, R27:R26
   \   000000D4   01D0               MOVW    R27:R26, R1:R0
   \   000000D6   902D               LD      R2, X+
   \   000000D8   903C               LD      R3, X
   \   000000DA   01D0               MOVW    R27:R26, R1:R0
   \   000000DC   9612               ADIW    R27:R26, 2
   \   000000DE   904D               LD      R4, X+
   \   000000E0   905C               LD      R5, X
   \   000000E2   0C24               ADD     R2, R4
   \   000000E4   1C35               ADC     R3, R5
   \   000000E6   01D1               MOVW    R27:R26, R3:R2
   \   000000E8   934D               ST      X+, R20
   \   000000EA   935D               ST      X+, R21
   \   000000EC   936D               ST      X+, R22
   \   000000EE   937C               ST      X, R23
    602                  UART[ch].TxFirst += sizeof(float) ;
   \   000000F0   01D0               MOVW    R27:R26, R1:R0
   \   000000F2   9612               ADIW    R27:R26, 2
   \   000000F4   914D               LD      R20, X+
   \   000000F6   915C               LD      R21, X
   \   000000F8   5F4C               SUBI    R20, 252
   \   000000FA   4F5F               SBCI    R21, 255
   \   000000FC   935C               ST      X, R21
   \   000000FE   934E               ST      -X, R20
    603              }
   \   00000100   950A               DEC     R16
   \   00000102   F671               BRNE    ??BuildMDataANA_0
    604          
    605              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000104   01F0               MOVW    R31:R30, R1:R0
   \   00000106   1B42               SUB     R20, R18
   \   00000108   5042               SUBI    R20, 2
   \   0000010A   8100               LD      R16, Z
   \   0000010C   8111               LDD     R17, Z+1
   \   0000010E   0F02               ADD     R16, R18
   \   00000110   1F13               ADC     R17, R19
   \   00000112   01F8               MOVW    R31:R30, R17:R16
   \   00000114   8340               ST      Z, R20
    606              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000116   01F0               MOVW    R31:R30, R1:R0
   \   00000118   8102               LDD     R16, Z+2
   \   0000011A   8113               LDD     R17, Z+3
   \   0000011C   1B02               SUB     R16, R18
   \   0000011E   0B13               SBC     R17, R19
   \   00000120   5002               SUBI    R16, 2
   \   00000122   4010               SBCI    R17, 0
   \   00000124   2F41               MOV     R20, R17
   \   00000126   8100               LD      R16, Z
   \   00000128   8111               LDD     R17, Z+1
   \   0000012A   0F02               ADD     R16, R18
   \   0000012C   1F13               ADC     R17, R19
   \   0000012E   01F8               MOVW    R31:R30, R17:R16
   \   00000130   8341               STD     Z+1, R20
    607          
    608          }
   \   00000132                      REQUIRE ?Subroutine1
   \   00000132                      ;               // Fall through to label ?Subroutine1
    609          
    610          /*************************************************************************
    611          *
    612          * Build datablock for Stack status
    613          *
    614          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    615          void BuildStackStatus(char ch, short pointer) {
   \                     BuildStackStatus:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    616          
    617              short ntna, stack ;
    618              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R26, LOW(UART)
   \   0000000E   ....               LDI     R27, (UART) >> 8
   \   00000010   0DA0               ADD     R26, R0
   \   00000012   1DB1               ADC     R27, R1
   \   00000014   E001               LDI     R16, 1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8F01               STD     Z+25, R16
    619          
    620              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS & 0xff;
   \   0000001A   E727               LDI     R18, 119
   \   0000001C   8100               LD      R16, Z
   \   0000001E   8111               LDD     R17, Z+1
   \   00000020   8142               LDD     R20, Z+2
   \   00000022   8153               LDD     R21, Z+3
   \   00000024   0F04               ADD     R16, R20
   \   00000026   1F15               ADC     R17, R21
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   8320               ST      Z, R18
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8102               LDD     R16, Z+2
   \   00000030   8113               LDD     R17, Z+3
   \   00000032   5F0F               SUBI    R16, 255
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   8302               STD     Z+2, R16
   \   00000038   8313               STD     Z+3, R17
    621              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS >> 8;
   \   0000003A   E027               LDI     R18, 7
   \   0000003C   8100               LD      R16, Z
   \   0000003E   8111               LDD     R17, Z+1
   \   00000040   8142               LDD     R20, Z+2
   \   00000042   8153               LDD     R21, Z+3
   \   00000044   0F04               ADD     R16, R20
   \   00000046   1F15               ADC     R17, R21
   \   00000048   01F8               MOVW    R31:R30, R17:R16
   \   0000004A   8320               ST      Z, R18
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8102               LDD     R16, Z+2
   \   00000050   8113               LDD     R17, Z+3
   \   00000052   5F0F               SUBI    R16, 255
   \   00000054   4F1F               SBCI    R17, 255
   \   00000056   8302               STD     Z+2, R16
   \   00000058   8313               STD     Z+3, R17
    622              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000005A   01C8               MOVW    R25:R24, R17:R16
    623              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000005C   5F0E               SUBI    R16, 254
   \   0000005E   4F1F               SBCI    R17, 255
   \   00000060   8302               STD     Z+2, R16
   \   00000062   8313               STD     Z+3, R17
    624          
    625              stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
   \   00000064   ....               LDI     R16, LOW(TCB_USART0)
   \   00000066   ....               LDI     R17, (TCB_USART0) >> 8
   \   00000068   ........           CALL    OS_GetStackSpace
    626              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   0000006C   912D               LD      R18, X+
   \   0000006E   913C               LD      R19, X
   \   00000070   9711               SBIW    R27:R26, 1
   \   00000072   01FD               MOVW    R31:R30, R27:R26
   \   00000074   8162               LDD     R22, Z+2
   \   00000076   8173               LDD     R23, Z+3
   \   00000078   0F26               ADD     R18, R22
   \   0000007A   1F37               ADC     R19, R23
   \   0000007C   01F9               MOVW    R31:R30, R19:R18
   \   0000007E   8300               ST      Z, R16
   \   00000080   01FD               MOVW    R31:R30, R27:R26
   \   00000082   8122               LDD     R18, Z+2
   \   00000084   8133               LDD     R19, Z+3
   \   00000086   5F2F               SUBI    R18, 255
   \   00000088   4F3F               SBCI    R19, 255
   \   0000008A   8322               STD     Z+2, R18
   \   0000008C   8333               STD     Z+3, R19
    627              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000008E   2F21               MOV     R18, R17
   \   00000090   8100               LD      R16, Z
   \   00000092   8111               LDD     R17, Z+1
   \   00000094   8142               LDD     R20, Z+2
   \   00000096   0F04               ADD     R16, R20
   \   00000098   1F13               ADC     R17, R19
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   8320               ST      Z, R18
   \   0000009E   01FD               MOVW    R31:R30, R27:R26
   \   000000A0   8102               LDD     R16, Z+2
   \   000000A2   8113               LDD     R17, Z+3
   \   000000A4   5F0F               SUBI    R16, 255
   \   000000A6   4F1F               SBCI    R17, 255
   \   000000A8   8302               STD     Z+2, R16
   \   000000AA   8313               STD     Z+3, R17
    628              stack = OS_GetStackSpace(&TCB_USART1);                            // USART 1
   \   000000AC   ....               LDI     R16, LOW(TCB_USART1)
   \   000000AE   ....               LDI     R17, (TCB_USART1) >> 8
   \   000000B0   ........           CALL    OS_GetStackSpace
    629              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000000B4   912D               LD      R18, X+
   \   000000B6   913C               LD      R19, X
   \   000000B8   9711               SBIW    R27:R26, 1
   \   000000BA   01FD               MOVW    R31:R30, R27:R26
   \   000000BC   8162               LDD     R22, Z+2
   \   000000BE   8173               LDD     R23, Z+3
   \   000000C0   0F26               ADD     R18, R22
   \   000000C2   1F37               ADC     R19, R23
   \   000000C4   01F9               MOVW    R31:R30, R19:R18
   \   000000C6   8300               ST      Z, R16
   \   000000C8   01FD               MOVW    R31:R30, R27:R26
   \   000000CA   8122               LDD     R18, Z+2
   \   000000CC   8133               LDD     R19, Z+3
   \   000000CE   5F2F               SUBI    R18, 255
   \   000000D0   4F3F               SBCI    R19, 255
   \   000000D2   8322               STD     Z+2, R18
   \   000000D4   8333               STD     Z+3, R19
    630              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   000000D6   2F21               MOV     R18, R17
   \   000000D8   8100               LD      R16, Z
   \   000000DA   8111               LDD     R17, Z+1
   \   000000DC   8142               LDD     R20, Z+2
   \   000000DE   0F04               ADD     R16, R20
   \   000000E0   1F13               ADC     R17, R19
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   8320               ST      Z, R18
   \   000000E6   01FD               MOVW    R31:R30, R27:R26
   \   000000E8   8102               LDD     R16, Z+2
   \   000000EA   8113               LDD     R17, Z+3
   \   000000EC   5F0F               SUBI    R16, 255
   \   000000EE   4F1F               SBCI    R17, 255
   \   000000F0   8302               STD     Z+2, R16
   \   000000F2   8313               STD     Z+3, R17
    631              stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \   000000F4   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   000000F6   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   000000F8   ........           CALL    OS_GetStackSpace
    632              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000000FC   912D               LD      R18, X+
   \   000000FE   913C               LD      R19, X
   \   00000100   9711               SBIW    R27:R26, 1
   \   00000102   01FD               MOVW    R31:R30, R27:R26
   \   00000104   8162               LDD     R22, Z+2
   \   00000106   8173               LDD     R23, Z+3
   \   00000108   0F26               ADD     R18, R22
   \   0000010A   1F37               ADC     R19, R23
   \   0000010C   01F9               MOVW    R31:R30, R19:R18
   \   0000010E   8300               ST      Z, R16
   \   00000110   01FD               MOVW    R31:R30, R27:R26
   \   00000112   8122               LDD     R18, Z+2
   \   00000114   8133               LDD     R19, Z+3
   \   00000116   5F2F               SUBI    R18, 255
   \   00000118   4F3F               SBCI    R19, 255
   \   0000011A   8322               STD     Z+2, R18
   \   0000011C   8333               STD     Z+3, R19
    633              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000011E   2F21               MOV     R18, R17
   \   00000120   8100               LD      R16, Z
   \   00000122   8111               LDD     R17, Z+1
   \   00000124   8142               LDD     R20, Z+2
   \   00000126   0F04               ADD     R16, R20
   \   00000128   1F13               ADC     R17, R19
   \   0000012A   01F8               MOVW    R31:R30, R17:R16
   \   0000012C   8320               ST      Z, R18
   \   0000012E   01FD               MOVW    R31:R30, R27:R26
   \   00000130   8102               LDD     R16, Z+2
   \   00000132   8113               LDD     R17, Z+3
   \   00000134   5F0F               SUBI    R16, 255
   \   00000136   4F1F               SBCI    R17, 255
   \   00000138   8302               STD     Z+2, R16
   \   0000013A   8313               STD     Z+3, R17
    634              switch (UnitID) {
   \   0000013C   9100....           LDS     R16, UnitID
   \   00000140   2300               TST     R16
   \   00000142   F021               BREQ    ??BuildStackStatus_0
   \   00000144   950A               DEC     R16
   \   00000146   F409               BRNE    $+2+2
   \   00000148   C041               RJMP    ??BuildStackStatus_1
   \   0000014A   C083               RJMP    ??BuildStackStatus_2
    635              case AN_ZB485 :
    636                  stack = OS_GetStackSpace(&TCB_RS485Ctl);                            // RS485 Control
   \                     ??BuildStackStatus_0:
   \   0000014C   ....               LDI     R16, LOW(TCB_RS485Ctl)
   \   0000014E   ....               LDI     R17, (TCB_RS485Ctl) >> 8
   \   00000150   ........           CALL    OS_GetStackSpace
    637                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   00000154   912D               LD      R18, X+
   \   00000156   913C               LD      R19, X
   \   00000158   9711               SBIW    R27:R26, 1
   \   0000015A   01FD               MOVW    R31:R30, R27:R26
   \   0000015C   8162               LDD     R22, Z+2
   \   0000015E   8173               LDD     R23, Z+3
   \   00000160   0F26               ADD     R18, R22
   \   00000162   1F37               ADC     R19, R23
   \   00000164   01F9               MOVW    R31:R30, R19:R18
   \   00000166   8300               ST      Z, R16
   \   00000168   01FD               MOVW    R31:R30, R27:R26
   \   0000016A   8122               LDD     R18, Z+2
   \   0000016C   8133               LDD     R19, Z+3
   \   0000016E   5F2F               SUBI    R18, 255
   \   00000170   4F3F               SBCI    R19, 255
   \   00000172   8322               STD     Z+2, R18
   \   00000174   8333               STD     Z+3, R19
    638                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000176   2F21               MOV     R18, R17
   \   00000178   8100               LD      R16, Z
   \   0000017A   8111               LDD     R17, Z+1
   \   0000017C   8142               LDD     R20, Z+2
   \   0000017E   0F04               ADD     R16, R20
   \   00000180   1F13               ADC     R17, R19
   \   00000182   01F8               MOVW    R31:R30, R17:R16
   \   00000184   8320               ST      Z, R18
   \   00000186   01FD               MOVW    R31:R30, R27:R26
   \   00000188   8102               LDD     R16, Z+2
   \   0000018A   8113               LDD     R17, Z+3
   \   0000018C   5F0F               SUBI    R16, 255
   \   0000018E   4F1F               SBCI    R17, 255
   \   00000190   8302               STD     Z+2, R16
   \   00000192   8313               STD     Z+3, R17
    639                  stack = OS_GetStackSpace(&TCB_RS485Rec);                            // RS485 receive
   \   00000194   ....               LDI     R16, LOW(TCB_RS485Rec)
   \   00000196   ....               LDI     R17, (TCB_RS485Rec) >> 8
   \   00000198   ........           CALL    OS_GetStackSpace
    640                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   0000019C   912D               LD      R18, X+
   \   0000019E   913C               LD      R19, X
   \   000001A0   9711               SBIW    R27:R26, 1
   \   000001A2   01FD               MOVW    R31:R30, R27:R26
   \   000001A4   8162               LDD     R22, Z+2
   \   000001A6   8173               LDD     R23, Z+3
   \   000001A8   0F26               ADD     R18, R22
   \   000001AA   1F37               ADC     R19, R23
   \   000001AC   01F9               MOVW    R31:R30, R19:R18
   \   000001AE   8300               ST      Z, R16
   \   000001B0   01FD               MOVW    R31:R30, R27:R26
   \   000001B2   8122               LDD     R18, Z+2
   \   000001B4   8133               LDD     R19, Z+3
   \   000001B6   5F2F               SUBI    R18, 255
   \   000001B8   4F3F               SBCI    R19, 255
   \   000001BA   8322               STD     Z+2, R18
   \   000001BC   8333               STD     Z+3, R19
    641                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   000001BE   2F21               MOV     R18, R17
   \   000001C0   8100               LD      R16, Z
   \   000001C2   8111               LDD     R17, Z+1
   \   000001C4   8142               LDD     R20, Z+2
   \   000001C6   0F04               ADD     R16, R20
   \   000001C8   1F13               ADC     R17, R19
   \   000001CA   C03A               RJMP    ??BuildStackStatus_3
    642                  break;
    643              case AN_ZBANA :
    644                  stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
   \                     ??BuildStackStatus_1:
   \   000001CC   ....               LDI     R16, LOW(TCB_AD7715)
   \   000001CE   ....               LDI     R17, (TCB_AD7715) >> 8
   \   000001D0   ........           CALL    OS_GetStackSpace
    645                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000001D4   912D               LD      R18, X+
   \   000001D6   913C               LD      R19, X
   \   000001D8   9711               SBIW    R27:R26, 1
   \   000001DA   01FD               MOVW    R31:R30, R27:R26
   \   000001DC   8162               LDD     R22, Z+2
   \   000001DE   8173               LDD     R23, Z+3
   \   000001E0   0F26               ADD     R18, R22
   \   000001E2   1F37               ADC     R19, R23
   \   000001E4   01F9               MOVW    R31:R30, R19:R18
   \   000001E6   8300               ST      Z, R16
   \   000001E8   01FD               MOVW    R31:R30, R27:R26
   \   000001EA   8122               LDD     R18, Z+2
   \   000001EC   8133               LDD     R19, Z+3
   \   000001EE   5F2F               SUBI    R18, 255
   \   000001F0   4F3F               SBCI    R19, 255
   \   000001F2   8322               STD     Z+2, R18
   \   000001F4   8333               STD     Z+3, R19
    646                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   000001F6   2F21               MOV     R18, R17
   \   000001F8   8100               LD      R16, Z
   \   000001FA   8111               LDD     R17, Z+1
   \   000001FC   8142               LDD     R20, Z+2
   \   000001FE   0F04               ADD     R16, R20
   \   00000200   1F13               ADC     R17, R19
   \   00000202   01F8               MOVW    R31:R30, R17:R16
   \   00000204   8320               ST      Z, R18
   \   00000206   01FD               MOVW    R31:R30, R27:R26
   \   00000208   8102               LDD     R16, Z+2
   \   0000020A   8113               LDD     R17, Z+3
   \   0000020C   5F0F               SUBI    R16, 255
   \   0000020E   4F1F               SBCI    R17, 255
   \   00000210   8302               STD     Z+2, R16
   \   00000212   8313               STD     Z+3, R17
    647                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \   00000214   E020               LDI     R18, 0
   \   00000216   8100               LD      R16, Z
   \   00000218   8111               LDD     R17, Z+1
   \   0000021A   8142               LDD     R20, Z+2
   \   0000021C   8153               LDD     R21, Z+3
   \   0000021E   0F04               ADD     R16, R20
   \   00000220   1F15               ADC     R17, R21
   \   00000222   01F8               MOVW    R31:R30, R17:R16
   \   00000224   8320               ST      Z, R18
   \   00000226   01FD               MOVW    R31:R30, R27:R26
   \   00000228   8102               LDD     R16, Z+2
   \   0000022A   8113               LDD     R17, Z+3
   \   0000022C   5F0F               SUBI    R16, 255
   \   0000022E   4F1F               SBCI    R17, 255
   \   00000230   8302               STD     Z+2, R16
   \   00000232   8313               STD     Z+3, R17
    648                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \   00000234   8100               LD      R16, Z
   \   00000236   8111               LDD     R17, Z+1
   \   00000238   8142               LDD     R20, Z+2
   \   0000023A   8153               LDD     R21, Z+3
   \   0000023C   0F04               ADD     R16, R20
   \   0000023E   1F15               ADC     R17, R21
   \                     ??BuildStackStatus_3:
   \   00000240   01F8               MOVW    R31:R30, R17:R16
   \   00000242   8320               ST      Z, R18
   \   00000244   01FD               MOVW    R31:R30, R27:R26
   \   00000246   8102               LDD     R16, Z+2
   \   00000248   8113               LDD     R17, Z+3
   \   0000024A   5F0F               SUBI    R16, 255
   \   0000024C   4F1F               SBCI    R17, 255
   \   0000024E   8302               STD     Z+2, R16
   \   00000250   8313               STD     Z+3, R17
    649                  break;
    650              }
    651          
    652              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildStackStatus_2:
   \   00000252   8102               LDD     R16, Z+2
   \   00000254   1B08               SUB     R16, R24
   \   00000256   5002               SUBI    R16, 2
   \   00000258   91ED               LD      R30, X+
   \   0000025A   91FC               LD      R31, X
   \   0000025C   9711               SBIW    R27:R26, 1
   \   0000025E   0FE8               ADD     R30, R24
   \   00000260   1FF9               ADC     R31, R25
   \   00000262   8300               ST      Z, R16
    653              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000264   01FD               MOVW    R31:R30, R27:R26
   \   00000266   8102               LDD     R16, Z+2
   \   00000268   8113               LDD     R17, Z+3
   \   0000026A   1B08               SUB     R16, R24
   \   0000026C   0B19               SBC     R17, R25
   \   0000026E   5002               SUBI    R16, 2
   \   00000270   4010               SBCI    R17, 0
   \   00000272   91ED               LD      R30, X+
   \   00000274   91FC               LD      R31, X
   \   00000276   0FE8               ADD     R30, R24
   \   00000278   1FF9               ADC     R31, R25
   \   0000027A   8311               STD     Z+1, R17
    654          
    655          }
   \   0000027C   ....               RJMP    ?Subroutine2
    656          
    657          //////////////////////////////////////////////////////////////////////////////
    658          // Receiving data to IO module here
    659          /////////////////////////////////////////////////////////////////////////////
    660          
    661          /*************************************************************************
    662          *
    663          * Receive Command to Reset the EEPROM
    664          *
    665          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    666          void GetResetEEPROM(char ch, short pointer) {
   \                     GetResetEEPROM:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    667          
    668              EEPROMReset();
   \   00000000   ........           JMP     EEPROMReset
    669          }
    670          
    671          
    672          /*************************************************************************
    673          *
    674          * Receive Command to go to the bootloader program
    675          *
    676          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    677          void GetGotoBootloader(char ch, short pointer) {
   \                     GetGotoBootloader:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    678          
    679          //    void (*BootApp)(void) = (void(*)())0xF000;
    680          
    681              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
   \                     ??GetGotoBootloader_0:
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    682                  ;
    683              EEARL = (0x0fff & 0xff);
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB0E               OUT     0x1E, R16
    684              EEARH = (0x0fff >> 8);
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   BB0F               OUT     0x1F, R16
    685              EEDR = 0xff;
   \   0000000C   EF0F               LDI     R16, 255
   \   0000000E   BB0D               OUT     0x1D, R16
    686              EECR |= (1<<EEMWE);
   \   00000010   9AE2               SBI     0x1C, 0x02
    687              EECR |= (1<<EEWE);
   \   00000012   9AE1               SBI     0x1C, 0x01
    688              while (EECR & (1<<EEWE))
   \                     ??GetGotoBootloader_1:
   \   00000014   99E1               SBIC    0x1C, 0x01
   \   00000016   CFFE               RJMP    ??GetGotoBootloader_1
    689                  ;
    690          
    691              WDTCR = 0x18;               //Start watchdog to genetate restart
   \   00000018   E108               LDI     R16, 24
   \   0000001A   BD01               OUT     0x21, R16
    692              WDTCR = 0x08;               //Start watchdog to genetate restart
   \   0000001C   E008               LDI     R16, 8
   \   0000001E   BD01               OUT     0x21, R16
    693          }
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_EECR
   \   00000022                      REQUIRE _A_EEAR
   \   00000022                      REQUIRE _A_EEDR
   \   00000022                      REQUIRE _A_WDTCR
    694          
    695          /*************************************************************************
    696          *
    697          * Receive EEPROM data
    698          *
    699          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    700          void GetEEPROMData(char ch, short pointer) {
   \                     GetEEPROMData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   0139               MOVW    R7:R6, R19:R18
    701          
    702            char channel;
    703            int t0;
    704          
    705              channel = UART[ch].pRxBuffer[pointer] ;
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   ....               LDI     R16, LOW(UART)
   \   00000018   2E40               MOV     R4, R16
   \   0000001A   ....               LDI     R16, (UART) >> 8
   \   0000001C   0C40               ADD     R4, R0
   \   0000001E   1D01               ADC     R16, R1
   \   00000020   2E50               MOV     R5, R16
   \   00000022   2DE4               MOV     R30, R4
   \   00000024   2FF0               MOV     R31, R16
   \   00000026   8542               LDD     R20, Z+10
   \   00000028   8553               LDD     R21, Z+11
   \   0000002A   0F42               ADD     R20, R18
   \   0000002C   1F53               ADC     R21, R19
   \   0000002E   01FA               MOVW    R31:R30, R21:R20
   \   00000030   8120               LD      R18, Z
    706              if ((channel >= 0x80) && (UnitID == 0x01)) { // AN-ZBANA
   \   00000032   3820               CPI     R18, 128
   \   00000034   F100               BRCS    ??GetEEPROMData_0
   \   00000036   9100....           LDS     R16, UnitID
   \   0000003A   3001               CPI     R16, 1
   \   0000003C   F4E1               BRNE    ??GetEEPROMData_0
    707                *((float*)&TData.Ana.Offset[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+1]) ;  //offset
   \   0000003E   ....               LDI     R16, LOW((TData + 98))
   \   00000040   ....               LDI     R17, HIGH((TData + 98))
   \   00000042   2F62               MOV     R22, R18
   \   00000044   E070               LDI     R23, 0
   \   00000046   706F               ANDI    R22, 0x0F
   \   00000048   0F66               LSL     R22
   \   0000004A   0F66               LSL     R22
   \   0000004C   0F06               ADD     R16, R22
   \   0000004E   1F17               ADC     R17, R23
   \   00000050   8001               LDD     R0, Z+1
   \   00000052   8012               LDD     R1, Z+2
   \   00000054   8023               LDD     R2, Z+3
   \   00000056   8034               LDD     R3, Z+4
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   8200               ST      Z, R0
   \   0000005C   8211               STD     Z+1, R1
   \   0000005E   8222               STD     Z+2, R2
   \   00000060   8233               STD     Z+3, R3
    708                *((float*)&TData.Ana.Gain[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+5]) ;  //gain
   \   00000062   01FA               MOVW    R31:R30, R21:R20
   \   00000064   8005               LDD     R0, Z+5
   \   00000066   8016               LDD     R1, Z+6
   \   00000068   8027               LDD     R2, Z+7
   \   0000006A   8430               LDD     R3, Z+8
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   AA00               STD     Z+48, R0
   \   00000070   AA11               STD     Z+49, R1
   \   00000072   AA22               STD     Z+50, R2
   \   00000074   AA33               STD     Z+51, R3
    709              }
    710              WriteEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+1]);
   \                     ??GetEEPROMData_0:
   \   00000076   E008               LDI     R16, 8
   \   00000078   9F20               MUL     R18, R16
   \   0000007A   01D0               MOVW    R27:R26, R1:R0
   \   0000007C   5F4F               SUBI    R20, 255
   \   0000007E   4F5F               SBCI    R21, 255
   \   00000080   E024               LDI     R18, 4
   \   00000082   0180               MOVW    R17:R16, R1:R0
   \   00000084   ........           CALL    WriteEEPROMBuffer
    711              t0 = OS_GetTime();
   \   00000088   ........           CALL    OS__Gettime
   \   0000008C   01C8               MOVW    R25:R24, R17:R16
    712              do {
    713                OS_Delay(1);
   \                     ??GetEEPROMData_1:
   \   0000008E   E001               LDI     R16, 1
   \   00000090   E010               LDI     R17, 0
   \   00000092   ........           CALL    OS_Delay
    714              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);  //8.5 ms programming time
   \   00000096   ........           CALL    OS__Gettime
   \   0000009A   1B08               SUB     R16, R24
   \   0000009C   0B19               SBC     R17, R25
   \   0000009E   3204               CPI     R16, 36
   \   000000A0   4010               SBCI    R17, 0
   \   000000A2   F420               BRCC    ??GetEEPROMData_2
   \   000000A4   9100....           LDS     R16, EEPWriteOK
   \   000000A8   2300               TST     R16
   \   000000AA   F389               BREQ    ??GetEEPROMData_1
    715              WriteEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+5]);
   \                     ??GetEEPROMData_2:
   \   000000AC   01F2               MOVW    R31:R30, R5:R4
   \   000000AE   8542               LDD     R20, Z+10
   \   000000B0   8553               LDD     R21, Z+11
   \   000000B2   0D46               ADD     R20, R6
   \   000000B4   1D57               ADC     R21, R7
   \   000000B6   5F4B               SUBI    R20, 251
   \   000000B8   4F5F               SBCI    R21, 255
   \   000000BA   E024               LDI     R18, 4
   \   000000BC   9614               ADIW    R27:R26, 4
   \   000000BE   018D               MOVW    R17:R16, R27:R26
   \   000000C0   ........           CALL    WriteEEPROMBuffer
    716              t0 = OS_GetTime();
   \   000000C4   ........           CALL    OS__Gettime
   \   000000C8   01C8               MOVW    R25:R24, R17:R16
    717              do {
    718                OS_Delay(1);
   \                     ??GetEEPROMData_3:
   \   000000CA   E001               LDI     R16, 1
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   ........           CALL    OS_Delay
    719              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);
   \   000000D2   ........           CALL    OS__Gettime
   \   000000D6   1B08               SUB     R16, R24
   \   000000D8   0B19               SBC     R17, R25
   \   000000DA   3204               CPI     R16, 36
   \   000000DC   4010               SBCI    R17, 0
   \   000000DE   F420               BRCC    ??GetEEPROMData_4
   \   000000E0   9100....           LDS     R16, EEPWriteOK
   \   000000E4   2300               TST     R16
   \   000000E6   F389               BREQ    ??GetEEPROMData_3
    720          }
   \                     ??GetEEPROMData_4:
   \   000000E8   9189               LD      R24, Y+
   \   000000EA   9199               LD      R25, Y+
   \   000000EC   91A9               LD      R26, Y+
   \   000000EE   91B9               LD      R27, Y+
   \   000000F0   9049               LD      R4, Y+
   \   000000F2   9059               LD      R5, Y+
   \   000000F4   9069               LD      R6, Y+
   \   000000F6   9079               LD      R7, Y+
   \   000000F8   9508               RET
    721          
    722          /*************************************************************************
    723          *
    724          * Receive AN-ZB485 setup
    725          *
    726          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    727          void GetRS4Setup(char ch, short pointer) {
   \                     GetRS4Setup:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R26, LOW(UART)
   \   0000000A   ....               LDI     R27, (UART) >> 8
   \   0000000C   0DA0               ADD     R26, R0
   \   0000000E   1DB1               ADC     R27, R1
   \   00000010   961A               ADIW    R27:R26, 10
   \   00000012   91ED               LD      R30, X+
   \   00000014   91FC               LD      R31, X
   \   00000016   0FE2               ADD     R30, R18
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   8100               LD      R16, Z
   \   0000001C   9300....           STS     TData, R16
    728          
    729              TData.RS4.PortUsed = UART[ch].pRxBuffer[pointer];           // Get the setup
    730              TData.RS4.SensorType[0] = UART[ch].pRxBuffer[pointer+1];       // Get the sensor type
   \   00000020   8101               LDD     R16, Z+1
   \   00000022   9300....           STS     (TData + 1), R16
    731              TData.RS4.SensorType[1] = UART[ch].pRxBuffer[pointer+2];       // Get the sensor type
   \   00000026   8102               LDD     R16, Z+2
   \   00000028   9300....           STS     (TData + 2), R16
    732              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);      // store in EEPROM
   \   0000002C   9120....           LDS     R18, TData
   \   00000030   E002               LDI     R16, 2
   \   00000032   E010               LDI     R17, 0
   \   00000034   ........           CALL    WriteEEPROMByte
    733              WriteEEPROMByte(EEPROM_PORTSETUP+1, TData.RS4.SensorType[0]);
   \   00000038   9120....           LDS     R18, (TData + 1)
   \   0000003C   E003               LDI     R16, 3
   \   0000003E   E010               LDI     R17, 0
   \   00000040   ........           CALL    WriteEEPROMByte
    734              WriteEEPROMByte(EEPROM_PORTSETUP+2, TData.RS4.SensorType[1]);
   \   00000044   9120....           LDS     R18, (TData + 2)
   \   00000048   E004               LDI     R16, 4
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   ........           CALL    WriteEEPROMByte
    735              SetRS4Port();                                               // Set power on ports
   \   00000050   ........           CALL    SetRS4Port
    736          }
   \   00000054   91A9               LD      R26, Y+
   \   00000056   91B9               LD      R27, Y+
   \   00000058   9508               RET
    737          
    738          /*************************************************************************
    739          *
    740          * Rceive data fo AD card
    741          *
    742          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    743          void GetADData(char ch, short pointer) {
   \                     GetADData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004   2E39               MOV     R3, R25
   \   00000006   2F68               MOV     R22, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   01C9               MOVW    R25:R24, R19:R18
   \   0000000A   E11A               LDI     R17, 26
   \   0000000C   9F01               MUL     R16, R17
   \   0000000E   ....               LDI     R30, LOW(UART)
   \   00000010   ....               LDI     R31, (UART) >> 8
   \   00000012   0DE0               ADD     R30, R0
   \   00000014   1DF1               ADC     R31, R1
   \   00000016   8502               LDD     R16, Z+10
   \   00000018   8513               LDD     R17, Z+11
   \   0000001A   01D8               MOVW    R27:R26, R17:R16
   \   0000001C   0FA2               ADD     R26, R18
   \   0000001E   1FB3               ADC     R27, R19
   \   00000020   912C               LD      R18, X
   \   00000022   3024               CPI     R18, 4
   \   00000024   F410               BRCC    ??GetADData_0
    744          
    745             char i, pair;
    746          
    747             if (UART[ch].pRxBuffer[pointer] <=3) {
    748               pair = 0;
   \   00000026   E040               LDI     R20, 0
   \   00000028   C001               RJMP    ??GetADData_1
    749             } else {
    750               pair = 1;
   \                     ??GetADData_0:
   \   0000002A   E540               LDI     R20, 80
   \                     ??GetADData_1:
   \   0000002C   E050               LDI     R21, 0
    751             }
    752             if (!TData.RS4.ToTargetBuffer[pair][0]) {                                // buffer empty?
   \   0000002E   ....               LDI     R18, LOW(TData)
   \   00000030   ....               LDI     R19, (TData) >> 8
   \   00000032   0F24               ADD     R18, R20
   \   00000034   1F35               ADC     R19, R21
   \   00000036   01F9               MOVW    R31:R30, R19:R18
   \   00000038   50EC               SUBI    R30, 12
   \   0000003A   4FFB               SBCI    R31, 251
   \   0000003C   8140               LD      R20, Z
   \   0000003E   2344               TST     R20
   \   00000040   F4F9               BRNE    ??GetADData_2
    753                TData.RS4.ToTargetBuffer[pair][0] = true;                            //  Availible data for AD card
   \   00000042   E041               LDI     R20, 1
   \   00000044   8340               ST      Z, R20
    754                TData.RS4.ToTargetBuffer[pair][1] = UART[ch].pRxBuffer[pointer++];   //  Channel to AD card
   \   00000046   914C               LD      R20, X
   \   00000048   8341               STD     Z+1, R20
   \   0000004A   9601               ADIW    R25:R24, 1
    755                TData.RS4.ToTargetBuffer[pair][2] = UART[ch].pRxBuffer[pointer++];   // nob in datablock
   \   0000004C   0F08               ADD     R16, R24
   \   0000004E   1F19               ADC     R17, R25
   \   00000050   01D8               MOVW    R27:R26, R17:R16
   \   00000052   914C               LD      R20, X
   \   00000054   8342               STD     Z+2, R20
    756                for (i = 3; i < TData.RS4.ToTargetBuffer[pair][2] + 3; i++) {
   \   00000056   E043               LDI     R20, 3
   \   00000058   5F0F               SUBI    R16, 255
   \   0000005A   4F1F               SBCI    R17, 255
   \   0000005C   E070               LDI     R23, 0
   \   0000005E   C00A               RJMP    ??GetADData_3
    757                    TData.RS4.ToTargetBuffer[pair][i] = UART[ch].pRxBuffer[pointer++];  //Get the buffer
   \                     ??GetADData_4:
   \   00000060   01D8               MOVW    R27:R26, R17:R16
   \   00000062   915D               LD      R21, X+
   \   00000064   018D               MOVW    R17:R16, R27:R26
   \   00000066   01D9               MOVW    R27:R26, R19:R18
   \   00000068   0FA4               ADD     R26, R20
   \   0000006A   1FB7               ADC     R27, R23
   \   0000006C   50AC               SUBI    R26, 12
   \   0000006E   4FBB               SBCI    R27, 251
   \   00000070   935C               ST      X, R21
    758                }
   \   00000072   9543               INC     R20
   \                     ??GetADData_3:
   \   00000074   8182               LDD     R24, Z+2
   \   00000076   E090               LDI     R25, 0
   \   00000078   9603               ADIW    R25:R24, 3
   \   0000007A   1748               CP      R20, R24
   \   0000007C   0779               CPC     R23, R25
   \   0000007E   F384               BRLT    ??GetADData_4
    759             }
    760          }
   \                     ??GetADData_2:
   \   00000080   2F86               MOV     R24, R22
   \   00000082   2D93               MOV     R25, R3
   \   00000084   2DA2               MOV     R26, R2
   \   00000086   91B9               LD      R27, Y+
   \   00000088   9508               RET
    761          
    762          /*************************************************************************
    763          *
    764          * Receive AN-ZBANA setup
    765          *
    766          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    767          void GetANASetup(char ch, short pointer) {
   \                     GetANASetup:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   01C9               MOVW    R25:R24, R19:R18
    768          
    769              TData.Ana.PortUsed = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer+1] << 8);  //Get the setup
   \   0000000A   E11A               LDI     R17, 26
   \   0000000C   9F01               MUL     R16, R17
   \   0000000E   ....               LDI     R26, LOW(UART)
   \   00000010   ....               LDI     R27, (UART) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8502               LDD     R16, Z+10
   \   0000001A   8513               LDD     R17, Z+11
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   8120               LD      R18, Z
   \   00000024   8131               LDD     R19, Z+1
   \   00000026   9320....           STS     TData, R18
   \   0000002A   9330....           STS     (TData + 1), R19
    770              WriteEEPROMByte(EEPROM_PORTSETUP,UART[ch].pRxBuffer[pointer]);   // store in EEPROM
   \   0000002E   8120               LD      R18, Z
   \   00000030   E002               LDI     R16, 2
   \   00000032   E010               LDI     R17, 0
   \   00000034   ........           CALL    WriteEEPROMByte
    771              WriteEEPROMByte(EEPROM_PORTSETUP+1,UART[ch].pRxBuffer[pointer+1]);
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8502               LDD     R16, Z+10
   \   0000003C   8513               LDD     R17, Z+11
   \   0000003E   0F08               ADD     R16, R24
   \   00000040   1F19               ADC     R17, R25
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   8121               LDD     R18, Z+1
   \   00000046   E003               LDI     R16, 3
   \   00000048   E010               LDI     R17, 0
   \   0000004A   ........           CALL    WriteEEPROMByte
    772              SetAnaPort();                           // set the port on or off
   \   0000004E   ........           CALL    SetAnaPort
    773          }
   \   00000052   ....               RJMP    ?Subroutine2
    774          
    775          /*************************************************************************
    776          *
    777          * Receive AN-ZBANA filter
    778          *
    779          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    780          void GetANAFilter(char ch, short pointer) {
   \                     GetANAFilter:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    781              char port;
    782          
    783              for (port = 0; port <12; port++) {
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000C   85A2               LDD     R26, Z+10
   \   0000000E   85B3               LDD     R27, Z+11
   \   00000010   0FA2               ADD     R26, R18
   \   00000012   1FB3               ADC     R27, R19
   \   00000014   ....               LDI     R30, LOW((TData + 2))
   \   00000016   ....               LDI     R31, HIGH((TData + 2))
   \   00000018   E00C               LDI     R16, 12
    784                  TData.Ana.Filter[port] = UART[ch].pRxBuffer[pointer++];  //Get the filter
   \                     ??GetANAFilter_0:
   \   0000001A   911D               LD      R17, X+
   \   0000001C   9311               ST      Z+, R17
    785              }
   \   0000001E   950A               DEC     R16
   \   00000020   F7E1               BRNE    ??GetANAFilter_0
    786          }
   \   00000022   01DA               MOVW    R27:R26, R21:R20
   \   00000024   9508               RET
    787          
    788          /*************************************************************************
    789          *
    790          *  Receive data on USARTs
    791          *
    792          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    793          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   2F80               MOV     R24, R16
    794          
    795              switch (UART[ch].RxState) {                  // check status
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F80               MUL     R24, R16
   \   0000000E   ....               LDI     R26, LOW(UART)
   \   00000010   ....               LDI     R27, (UART) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8902               LDD     R16, Z+18
   \   0000001A   2300               TST     R16
   \   0000001C   F409               BRNE    $+2+2
   \   0000001E   C0AC               RJMP    ??ReceivePacketUart_0
   \   00000020   950A               DEC     R16
   \   00000022   F039               BREQ    ??ReceivePacketUart_1
   \   00000024   950A               DEC     R16
   \   00000026   F409               BRNE    $+2+2
   \   00000028   C04B               RJMP    ??ReceivePacketUart_2
   \   0000002A   5008               SUBI    R16, 8
   \   0000002C   F409               BRNE    $+2+2
   \   0000002E   C0A4               RJMP    ??ReceivePacketUart_0
   \   00000030   C0A0               RJMP    ??ReceivePacketUart_3
    796              case SYNC :
    797                  // all functionallity in inerrupt routine
    798                  break ;
    799              case HEADER :
    800                  if (UART[ch].RxLast >= 6) {             // receive header
   \                     ??ReceivePacketUart_1:
   \   00000032   8506               LDD     R16, Z+14
   \   00000034   8517               LDD     R17, Z+15
   \   00000036   3006               CPI     R16, 6
   \   00000038   4010               SBCI    R17, 0
   \   0000003A   F408               BRCC    $+2+2
   \   0000003C   C09D               RJMP    ??ReceivePacketUart_0
    801                      UART[ch].RxPacklen = (UART[ch].pRxBuffer[4] + (UART[ch].pRxBuffer[5] * 256)) ; // Find length of package
   \   0000003E   8502               LDD     R16, Z+10
   \   00000040   85F3               LDD     R31, Z+11
   \   00000042   2FE0               MOV     R30, R16
   \   00000044   8104               LDD     R16, Z+4
   \   00000046   8115               LDD     R17, Z+5
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8B06               STD     Z+22, R16
   \   0000004C   8B17               STD     Z+23, R17
    802                      if (CalcDSRxChecksum(ch, 6) && (UART[ch].pRxBuffer[0] == (DEVICE_IO + UnitID))) {
   \   0000004E   E060               LDI     R22, 0
   \   00000050   8502               LDD     R16, Z+10
   \   00000052   8513               LDD     R17, Z+11
   \   00000054   01A8               MOVW    R21:R20, R17:R16
   \   00000056   E026               LDI     R18, 6
   \   00000058   ....               LDI     R19, (crc) >> 16
   \                     ??ReceivePacketUart_4:
   \   0000005A   01FA               MOVW    R31:R30, R21:R20
   \   0000005C   9001               LD      R0, Z+
   \   0000005E   01AF               MOVW    R21:R20, R31:R30
   \   00000060   2560               EOR     R22, R0
   \   00000062   2FE6               MOV     R30, R22
   \   00000064   E0F0               LDI     R31, 0
   \   00000066   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000068   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000006A   BF3B               OUT     0x3B, R19
   \   0000006C   9166               ELPM    R22, Z
   \   0000006E   952A               DEC     R18
   \   00000070   F7A1               BRNE    ??ReceivePacketUart_4
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   8126               LDD     R18, Z+6
   \   00000076   1762               CP      R22, R18
   \   00000078   F009               BREQ    $+2+2
   \   0000007A   C07B               RJMP    ??ReceivePacketUart_3
   \   0000007C   8100               LD      R16, Z
   \   0000007E   E010               LDI     R17, 0
   \   00000080   91E0....           LDS     R30, UnitID
   \   00000084   E0F0               LDI     R31, 0
   \   00000086   9670               ADIW    R31:R30, 16
   \   00000088   170E               CP      R16, R30
   \   0000008A   071F               CPC     R17, R31
   \   0000008C   F009               BREQ    $+2+2
   \   0000008E   C071               RJMP    ??ReceivePacketUart_3
    803                          // header checksum OK and to me
    804                          if ((UART[ch].RxPacklen < ((short) RXSIZE_UART-UART[ch].RxLast)) &&    /* chk. header */
    805                              (UART[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   00000090   01FD               MOVW    R31:R30, R27:R26
   \   00000092   8926               LDD     R18, Z+22
   \   00000094   8937               LDD     R19, Z+23
   \   00000096   E906               LDI     R16, 150
   \   00000098   8546               LDD     R20, Z+14
   \   0000009A   8557               LDD     R21, Z+15
   \   0000009C   1B04               SUB     R16, R20
   \   0000009E   0B15               SBC     R17, R21
   \   000000A0   1720               CP      R18, R16
   \   000000A2   0731               CPC     R19, R17
   \   000000A4   F008               BRCS    $+2+2
   \   000000A6   C065               RJMP    ??ReceivePacketUart_3
   \   000000A8   3027               CPI     R18, 7
   \   000000AA   4030               SBCI    R19, 0
   \   000000AC   F408               BRCC    $+2+2
   \   000000AE   C061               RJMP    ??ReceivePacketUart_3
    806                              UART[ch].RxState = RECEIVE ;       // Header ok go to data receive state
   \   000000B0   E002               LDI     R16, 2
   \   000000B2   8B02               STD     Z+18, R16
    807                              UART[ch].RxCount = UART[ch].RxLast + 1 ;    // Set receive counter
   \   000000B4   8586               LDD     R24, Z+14
   \   000000B6   8597               LDD     R25, Z+15
   \   000000B8   9601               ADIW    R25:R24, 1
   \   000000BA   8B80               STD     Z+16, R24
   \   000000BC   8B91               STD     Z+17, R25
   \   000000BE   C05C               RJMP    ??ReceivePacketUart_0
    808                          } else {
    809                              GoToSyncUART(ch) ;                        // go to sync modus for recive
    810                          }
    811                      } else {
    812                          GoToSyncUART(ch) ;                            // go to sync modus for recive
    813                      }
    814                  }
    815                  break ;
    816              case RECEIVE :
    817                  if (++UART[ch].RxCount >= UART[ch].RxPacklen) {
   \                     ??ReceivePacketUart_2:
   \   000000C0   8900               LDD     R16, Z+16
   \   000000C2   8911               LDD     R17, Z+17
   \   000000C4   5F0F               SUBI    R16, 255
   \   000000C6   4F1F               SBCI    R17, 255
   \   000000C8   8B00               STD     Z+16, R16
   \   000000CA   8B11               STD     Z+17, R17
   \   000000CC   8926               LDD     R18, Z+22
   \   000000CE   8937               LDD     R19, Z+23
   \   000000D0   1702               CP      R16, R18
   \   000000D2   0713               CPC     R17, R19
   \   000000D4   F408               BRCC    $+2+2
   \   000000D6   C050               RJMP    ??ReceivePacketUart_0
    818                      if ((UART[ch].pRxBuffer[UART[ch].RxPacklen -1]) == ANPRO10_EOT) {
   \   000000D8   0109               MOVW    R1:R0, R19:R18
   \   000000DA   8502               LDD     R16, Z+10
   \   000000DC   8513               LDD     R17, Z+11
   \   000000DE   0F02               ADD     R16, R18
   \   000000E0   1F13               ADC     R17, R19
   \   000000E2   5001               SUBI    R16, 1
   \   000000E4   4010               SBCI    R17, 0
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   8100               LD      R16, Z
   \   000000EA   3004               CPI     R16, 4
   \   000000EC   F009               BREQ    $+2+2
   \   000000EE   C041               RJMP    ??ReceivePacketUart_3
    819                          if (CalcDSRxChecksum(ch, UART[ch].RxPacklen-2)) {
   \   000000F0   EF0E               LDI     R16, 254
   \   000000F2   0E00               ADD     R0, R16
   \   000000F4   EF0F               LDI     R16, 255
   \   000000F6   1E10               ADC     R1, R16
   \   000000F8   2422               CLR     R2
   \   000000FA   01FD               MOVW    R31:R30, R27:R26
   \   000000FC   8542               LDD     R20, Z+10
   \   000000FE   8553               LDD     R21, Z+11
   \   00000100   2D00               MOV     R16, R0
   \   00000102   2901               OR      R16, R1
   \   00000104   F091               BREQ    ??ReceivePacketUart_5
   \   00000106   018A               MOVW    R17:R16, R21:R20
   \   00000108   01B0               MOVW    R23:R22, R1:R0
   \   0000010A   ....               LDI     R19, (crc) >> 16
   \                     ??ReceivePacketUart_6:
   \   0000010C   01F8               MOVW    R31:R30, R17:R16
   \   0000010E   9121               LD      R18, Z+
   \   00000110   018F               MOVW    R17:R16, R31:R30
   \   00000112   2622               EOR     R2, R18
   \   00000114   2DE2               MOV     R30, R2
   \   00000116   E0F0               LDI     R31, 0
   \   00000118   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000011A   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000011C   BF3B               OUT     0x3B, R19
   \   0000011E   9026               ELPM    R2, Z
   \   00000120   5061               SUBI    R22, 1
   \   00000122   4070               SBCI    R23, 0
   \   00000124   2F26               MOV     R18, R22
   \   00000126   2B27               OR      R18, R23
   \   00000128   F789               BRNE    ??ReceivePacketUart_6
   \                     ??ReceivePacketUart_5:
   \   0000012A   0D40               ADD     R20, R0
   \   0000012C   1D51               ADC     R21, R1
   \   0000012E   01FA               MOVW    R31:R30, R21:R20
   \   00000130   8100               LD      R16, Z
   \   00000132   1620               CP      R2, R16
   \   00000134   F4F1               BRNE    ??ReceivePacketUart_3
    820                              if ((UART[ch].pRxBuffer[1] == MyAddress())||      // message to me? or
    821                                  (UART[ch].pRxBuffer[1] == 0xff)) {            // broadcast
   \   00000136   ........           CALL    MyAddress
   \   0000013A   01FD               MOVW    R31:R30, R27:R26
   \   0000013C   8522               LDD     R18, Z+10
   \   0000013E   85F3               LDD     R31, Z+11
   \   00000140   2FE2               MOV     R30, R18
   \   00000142   8111               LDD     R17, Z+1
   \   00000144   1710               CP      R17, R16
   \   00000146   F011               BREQ    ??ReceivePacketUart_7
   \   00000148   3F1F               CPI     R17, 255
   \   0000014A   F499               BRNE    ??ReceivePacketUart_3
    822                                  hostAddress = UART[ch].pRxBuffer[3];            // address to sender (host)
   \                     ??ReceivePacketUart_7:
   \   0000014C   8103               LDD     R16, Z+3
   \   0000014E   9300....           STS     hostAddress, R16
    823                                  UART[ch].RxState = HANDLE ;                     // Package OK
   \   00000152   E00A               LDI     R16, 10
   \   00000154   01FD               MOVW    R31:R30, R27:R26
   \   00000156   8B02               STD     Z+18, R16
    824                                  if (ch == 0) {
   \   00000158   2388               TST     R24
   \   0000015A   F419               BRNE    ??ReceivePacketUart_8
    825                                      OS_SignalEvent(1, &TCB_USART0);
   \   0000015C   ....               LDI     R18, LOW(TCB_USART0)
   \   0000015E   ....               LDI     R19, (TCB_USART0) >> 8
   \   00000160   C004               RJMP    ??ReceivePacketUart_9
    826                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart_8:
   \   00000162   3081               CPI     R24, 1
   \   00000164   F449               BRNE    ??ReceivePacketUart_0
    827                                      OS_SignalEvent(1, &TCB_USART1);
   \   00000166   ....               LDI     R18, LOW(TCB_USART1)
   \   00000168   ....               LDI     R19, (TCB_USART1) >> 8
   \                     ??ReceivePacketUart_9:
   \   0000016A   E001               LDI     R16, 1
   \   0000016C   ........           CALL    OS_SignalEvent
   \   00000170   C003               RJMP    ??ReceivePacketUart_0
    828                                  }
    829                              } else {
    830                                  GoToSyncUART(ch) ;                             // go to sync modus for recive
    831                              }
    832                          } else {
    833                              GoToSyncUART(ch) ;                                // go to sync modus for recive
    834                          }
    835                      } else {
    836                          GoToSyncUART(ch) ;                                    // go to sync modus for recive
    837                      }
    838                  }
    839                  break ;
    840              case HANDLE :
    841                  break;
    842              default :
    843                  GoToSyncUART(ch) ;                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_3:
   \   00000172   2F08               MOV     R16, R24
   \   00000174   ........           CALL    GoToSyncUART
    844                  break ;
    845              }                                                           // end switch
    846              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer
   \                     ??ReceivePacketUart_0:
   \   00000178   01FD               MOVW    R31:R30, R27:R26
   \   0000017A   8506               LDD     R16, Z+14
   \   0000017C   8517               LDD     R17, Z+15
   \   0000017E   5F0F               SUBI    R16, 255
   \   00000180   4F1F               SBCI    R17, 255
   \   00000182   8706               STD     Z+14, R16
   \   00000184   8717               STD     Z+15, R17
   \   00000186   3906               CPI     R16, 150
   \   00000188   E020               LDI     R18, 0
   \   0000018A   4010               SBCI    R17, 0
   \   0000018C   F010               BRCS    ??ReceivePacketUart_10
    847                  UART[ch].RxLast = 0;                                     // reset pointer
   \   0000018E   8726               STD     Z+14, R18
   \   00000190   8727               STD     Z+15, R18
    848              }
    849          }
   \                     ??ReceivePacketUart_10:
   \   00000192   ........           JMP     ?Subroutine2
    850          
    851          
    852          /*************************************************************************
    853          *
    854          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    855          *
    856          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    857          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F10               MOV     R17, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    858          
    859              unsigned short  cnt ;
    860              unsigned char   csum ;
    861          
    862              csum = 0 ;
   \   00000008   E000               LDI     R16, 0
    863              for (cnt = 4 ; cnt < len ; cnt++) {
   \   0000000A   3025               CPI     R18, 5
   \   0000000C   4030               SBCI    R19, 0
   \   0000000E   F0A0               BRCS    ??CalcDSTxChecksum_0
   \   00000010   E12A               LDI     R18, 26
   \   00000012   9F12               MUL     R17, R18
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   81A0               LD      R26, Z
   \   0000001C   81B1               LDD     R27, Z+1
   \   0000001E   9614               ADIW    R27:R26, 4
   \   00000020   9704               SBIW    R25:R24, 4
   \   00000022   ....               LDI     R19, (crc) >> 16
    864                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]] ;
   \                     ??CalcDSTxChecksum_1:
   \   00000024   E0F0               LDI     R31, 0
   \   00000026   912D               LD      R18, X+
   \   00000028   2702               EOR     R16, R18
   \   0000002A   2FE0               MOV     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000030   BF3B               OUT     0x3B, R19
   \   00000032   9106               ELPM    R16, Z
    865              }
   \   00000034   9701               SBIW    R25:R24, 1
   \   00000036   F7B1               BRNE    ??CalcDSTxChecksum_1
    866              return csum ;
   \                     ??CalcDSTxChecksum_0:
   \   00000038   01CA               MOVW    R25:R24, R21:R20
   \   0000003A   01DB               MOVW    R27:R26, R23:R22
   \   0000003C   9508               RET
    867          }
    868          
    869          /*************************************************************************
    870          *
    871          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    872          *
    873          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    874          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   01A9               MOVW    R21:R20, R19:R18
    875          
    876              unsigned short  cnt ;
    877              unsigned char   csum ;
    878          
    879              csum = 0 ;
   \   00000004   E020               LDI     R18, 0
   \   00000006   E11A               LDI     R17, 26
   \   00000008   9F01               MUL     R16, R17
   \   0000000A   ....               LDI     R30, LOW(UART)
   \   0000000C   ....               LDI     R31, (UART) >> 8
   \   0000000E   0DE0               ADD     R30, R0
   \   00000010   1DF1               ADC     R31, R1
   \   00000012   8562               LDD     R22, Z+10
   \   00000014   8573               LDD     R23, Z+11
   \   00000016   2F04               MOV     R16, R20
   \   00000018   2B03               OR      R16, R19
   \   0000001A   F089               BREQ    ??CalcDSRxChecksum_0
   \   0000001C   018B               MOVW    R17:R16, R23:R22
   \   0000001E   2F84               MOV     R24, R20
   \   00000020   2F93               MOV     R25, R19
   \   00000022   ....               LDI     R19, (crc) >> 16
    880              for (cnt=0 ; cnt < len ; cnt++) {
    881                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]] ;
   \                     ??CalcDSRxChecksum_1:
   \   00000024   2E02               MOV     R0, R18
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   9121               LD      R18, Z+
   \   0000002A   018F               MOVW    R17:R16, R31:R30
   \   0000002C   2602               EOR     R0, R18
   \   0000002E   2DE0               MOV     R30, R0
   \   00000030   E0F0               LDI     R31, 0
   \   00000032   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000034   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000036   BF3B               OUT     0x3B, R19
   \   00000038   9126               ELPM    R18, Z
    882              }
   \   0000003A   9701               SBIW    R25:R24, 1
   \   0000003C   F799               BRNE    ??CalcDSRxChecksum_1
    883              if (csum == UART[ch].pRxBuffer[len]) {
   \                     ??CalcDSRxChecksum_0:
   \   0000003E   0F64               ADD     R22, R20
   \   00000040   1F75               ADC     R23, R21
   \   00000042   01FB               MOVW    R31:R30, R23:R22
   \   00000044   8100               LD      R16, Z
   \   00000046   1720               CP      R18, R16
   \   00000048   F411               BRNE    ??CalcDSRxChecksum_2
    884                  return true ;
   \   0000004A   E001               LDI     R16, 1
   \   0000004C   C001               RJMP    ??CalcDSRxChecksum_3
    885              } else {
    886                  return false ;
   \                     ??CalcDSRxChecksum_2:
   \   0000004E   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum_3:
   \   00000050   E010               LDI     R17, 0
   \   00000052   01C1               MOVW    R25:R24, R3:R2
   \   00000054   9508               RET
    887              }
    888          }
    889          
    890          /*************************************************************************
    891          *
    892          * Goes to sync mode
    893          *
    894          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    895          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   94F8               CLI
    896          
    897              if (ch < 2) {
   \   00000004   3002               CPI     R16, 2
   \   00000006   F458               BRCC    ??GoToSyncUART_0
    898                  UART[ch].SyncCnt = 0 ;                        // ready for sync
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R30, LOW(UART)
   \   0000000E   ....               LDI     R31, (UART) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   E000               LDI     R16, 0
   \   00000016   8B03               STD     Z+19, R16
    899                  UART[ch].RxState = SYNC ;
   \   00000018   8B02               STD     Z+18, R16
    900                  UART[ch].RxFirst = 0 ;
   \   0000001A   8704               STD     Z+12, R16
   \   0000001C   8705               STD     Z+13, R16
    901              }
    902          }
   \                     ??GoToSyncUART_0:
   \   0000001E   BF2F               OUT     0x3F, R18
   \   00000020   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_21) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   0A                 DB      0xa
   \   00000008   ....               DW      (??CheckActionUart_3) /2
   \   0000000A   0A                 DB      0xa
   \   0000000B   ....               DW      (??CheckActionUart_4) /2
   \   0000000D   32                 DB      0x32
   \   0000000E   ....               DW      (??CheckActionUart_5) /2
   \   00000010   0A                 DB      0xa
   \   00000011   ....               DW      (??CheckActionUart_6) /2
   \   00000013   0A                 DB      0xa
   \   00000014   ....               DW      (??CheckActionUart_7) /2
   \   00000016   0A                 DB      0xa
   \   00000017   ....               DW      (??CheckActionUart_8) /2
   \   00000019   0A                 DB      0xa
   \   0000001A   ....               DW      (??CheckActionUart_9) /2
   \   0000001C   1E                 DB      0x1e
   \   0000001D   ....               DW      (??CheckActionUart_11) /2
   \   0000001F   14                 DB      0x14
   \   00000020   ....               DW      (??CheckActionUart_10) /2
   \   00000022   28                 DB      0x28
   \   00000023   ....               DW      (??CheckActionUart_16) /2
   \   00000025   0A                 DB      0xa
   \   00000026   ....               DW      (??CheckActionUart_17) /2
   \   00000028   0A                 DB      0xa
   \   00000029   ....               DW      (??CheckActionUart_18) /2
   \   0000002B   0A                 DB      0xa
   \   0000002C   ....               DW      (??CheckActionUart_19) /2
   \   0000002E   0A                 DB      0xa
   \   0000002F   ....               DW      (??CheckActionUart_20) /2
   \   00000031   02FE9E             DB      254,0x2,0x9e
   \   00000034   ....               DW      (??CheckActionUart_2) /2
   \   00000036   FB                 DB      251
   \   00000037   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   BuildADEpromdata
      0      2   BuildADInt
      0      2   BuildANAFilter
      0      2   BuildANASetup
      6      2   BuildEEPROMData
        6      2   -> ReadEEPROMBuffer
      2      2   BuildMData485
      6      2   BuildMDataANA
      4      2   BuildRData485
      0      2   BuildRS4Setup
      4      2   BuildStackStatus
        4      2   -> OS_GetStackSpace
      6      2   BuildStatusData
        6      2   -> MyAddress
      4      2   BuildWHdata
        4      2   -> OS_LeaveRegion
      0      2   CalcDSRxChecksum
      0      2   CalcDSTxChecksum
     10      2   CheckActionUart
       10      2   -> BuildADEpromdata
       10      2   -> BuildADInt
       10      2   -> BuildANAFilter
       10      2   -> BuildANASetup
       10      2   -> BuildEEPROMData
       10      2   -> BuildMData485
       10      2   -> BuildMDataANA
       10      2   -> BuildRData485
       10      2   -> BuildRS4Setup
       10      2   -> BuildStackStatus
       10      2   -> BuildStatusData
       10      2   -> BuildWHdata
       10      2   -> EEPROMReset
       10      2   -> GetADData
       10      2   -> GetANAFilter
       10      2   -> GetANASetup
       10      2   -> GetEEPROMData
       10      2   -> GetGotoBootloader
       10      2   -> GetRS4Setup
       10      2 ?SS_SHR_L02
       10      2 ?SV_SWITCH_L06
      1      2   GetADData
      0      2   GetANAFilter
      4      2   GetANASetup
        4      2   -> SetAnaPort
        4      2   -> WriteEEPROMByte
      8      2   GetEEPROMData
        8      2   -> OS_Delay
        8      2   -> OS__Gettime
        8      2   -> WriteEEPROMBuffer
      0      2   GetGotoBootloader
      2      2   GetRS4Setup
        2      2   -> SetRS4Port
        2      2   -> WriteEEPROMByte
      0      2   GetResetEEPROM
        0      2   -> EEPROMReset
      0      2   GoToSyncUART
      4      2   ReceivePacketUart
        4      2   -> GoToSyncUART
        4      2   -> MyAddress
        4      2   -> OS_SignalEvent
      0      2   TimoutUSART0
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   TimoutUSART0On
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1On
        0      2   -> OS_StopTimer
      2      2   Uart_BuildHeader
        2      2   -> MyAddress
      3      2   Uart_BuildTail
        3      2   -> CalcDSTxChecksum
        3      2   -> OS_RetriggerTimer
        3      2   -> Uart_BuildHeader
      0      2   Usart0Handler
        0      2   -> OS_Unuse
        0      2   -> OS_Use
        0      2   -> OS_WaitEventTimed
        0      2   -> UsartCheckPackage
      0      2   Usart1Handler
        0      2   -> OS_Unuse
        0      2   -> OS_Use
        0      2   -> OS_WaitEventTimed
        0      2   -> UsartCheckPackage
      5      2   UsartCheckPackage
        5      2   -> CheckActionUart
        5      2   -> GoToSyncUART
        5      2   -> Uart_BuildTail


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Jumptable for CheckActionUart>_0
      70  ?Subroutine0
      14  ?Subroutine1
      10  ?Subroutine2
     180  BuildADEpromdata
     206  BuildADInt
     170  BuildANAFilter
     116  BuildANASetup
     262  BuildEEPROMData
     732  BuildMData485
     306  BuildMDataANA
     348  BuildRData485
     146  BuildRS4Setup
     638  BuildStackStatus
     540  BuildStatusData
     416  BuildWHdata
      86  CalcDSRxChecksum
      62  CalcDSTxChecksum
     456  CheckActionUart
     138  GetADData
      38  GetANAFilter
      84  GetANASetup
     250  GetEEPROMData
      34  GetGotoBootloader
      90  GetRS4Setup
       4  GetResetEEPROM
      34  GoToSyncUART
     406  ReceivePacketUart
      28  TimoutUSART0
      10  TimoutUSART0On
      36  TimoutUSART1
      18  TimoutUSART1On
     156  Uart_BuildHeader
     362  Uart_BuildTail
      36  Usart0Handler
      36  Usart1Handler
     124  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_UCSR1B
       1  _A_WDTCR

 
     8 bytes in segment ABSOLUTE
 6 642 bytes in segment CODE
    56 bytes in segment SWITCH
 
 6 698 bytes of CODE memory
     0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
