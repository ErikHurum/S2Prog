###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            07/Feb/2017  12:16:22
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\init.c
#    Command line =  
#        D:\S2Prog\IO\ANZB\Src\init.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB\Release\Obj -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\ANZB\Release\List -y --initializers_in_flash --no_tbaa
#        --enable_external_bus -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB\INC\ -I D:\S2Prog\IO\ANZB\..\..\SHARED\INC\
#        --eeprom_size 4096 --clib -Oh
#    List file    =  D:\S2Prog\IO\ANZB\Release\List\init.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x26
   \   union <unnamed> volatile __io _A_ADCSR
   \                     _A_ADCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x51
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_XDIV
   \                     _A_XDIV:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x64
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6c
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6d
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x95
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x98
   \   union <unnamed> volatile __io _A_UBRR1H
   \                     _A_UBRR1H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x99
   \   union <unnamed> volatile __io _A_UBRR1L
   \                     _A_UBRR1L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9d
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*
     14          **===========================================================================
     15          ** Init the system according to board type
     16          **===========================================================================
     17          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     18          void InitSystem(void) {
   \                     InitSystem:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     19          
     20              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   BB07               OUT     0x17, R16
     21          //    PORTB   =  0xc;
     22              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000004   B306               IN      R16, 0x16
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     23          #if (OS_UART == 0)
     24              UnitID = 0x00; //AStmark  for test
     25          #endif
     26          
     27              Init_CPU();                         // init all processes
   \   00000010   ....               RCALL   Init_CPU
     28              Init_IO();
   \   00000012   ....               RCALL   Init_IO
     29              Init_TMR() ;
   \   00000014   9100....           LDS     R16, UnitID
   \   00000018   2300               TST     R16
   \   0000001A   F031               BREQ    ??InitSystem_0
   \   0000001C   950A               DEC     R16
   \   0000001E   F441               BRNE    ??InitSystem_1
   \   00000020   E909               LDI     R16, 153
   \   00000022   BF03               OUT     0x33, R16
   \   00000024   E007               LDI     R16, 7
   \   00000026   C003               RJMP    ??InitSystem_2
   \                     ??InitSystem_0:
   \   00000028   E909               LDI     R16, 153
   \   0000002A   BF03               OUT     0x33, R16
   \   0000002C   E003               LDI     R16, 3
   \                     ??InitSystem_2:
   \   0000002E   BF01               OUT     0x31, R16
     30          #if (OS_UART != 0)
     31              Init_USART(0, 38400) ;              // 
   \                     ??InitSystem_1:
   \   00000030   E040               LDI     R20, 0
   \   00000032   E956               LDI     R21, 150
   \   00000034   E060               LDI     R22, 0
   \   00000036   E070               LDI     R23, 0
   \   00000038   E000               LDI     R16, 0
   \   0000003A   ....               RCALL   Init_USART
     32          #endif
     33              Init_USART(1, 38400) ;              //    
   \   0000003C   E040               LDI     R20, 0
   \   0000003E   E956               LDI     R21, 150
   \   00000040   E060               LDI     R22, 0
   \   00000042   E070               LDI     R23, 0
   \   00000044   E001               LDI     R16, 1
   \   00000046   ....               RCALL   Init_USART
     34              Init_AD();
   \   00000048   ....               RCALL   Init_AD
     35              Init_Values();                      // init the values in the system
     36          
     37              ADCSR |= 0x40 ;                     //start the AD convertion
   \   0000004A   9A36               SBI     0x06, 0x06
     38          }
   \   0000004C   9508               RET
   \   0000004E                      REQUIRE _A_DDRB
   \   0000004E                      REQUIRE _A_PINB
   \   0000004E                      REQUIRE _A_ADCSR
   \   0000004E                      REQUIRE _A_TCCR0
   \   0000004E                      REQUIRE _A_OCR0
     39          
     40          /*
     41          **===========================================================================
     42          ** Init the CPU related registers
     43          **===========================================================================
     44          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     45          void Init_CPU( void ) {
   \                     Init_CPU:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     46          
     47              __disable_interrupt();
   \   00000000   94F8               CLI
     48          
     49              /*--- Configure CPU and interrupts ---*/
     50              switch (UnitID) {
   \   00000002   9100....           LDS     R16, UnitID
   \   00000006   2300               TST     R16
   \   00000008   F019               BREQ    ??Init_CPU_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F061               BREQ    ??Init_CPU_1
   \   0000000E   C014               RJMP    ??Init_CPU_2
     51              case AN_ZB485:                  // AN-ZB485 
     52                  MCUCR = 0xc0 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_0:
   \   00000010   EC00               LDI     R16, 192
   \   00000012   BF05               OUT     0x35, R16
     53                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \   00000014   E000               LDI     R16, 0
   \   00000016   BF09               OUT     0x39, R16
     54                  EICRA = 0xAf ;        // External interrupt control register, 0,1 raising, rest faling
   \   00000018   EA0F               LDI     R16, 175
   \   0000001A   9300....           STS     _A_EICRA, R16
     55                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000001E   EA0A               LDI     R16, 170
   \   00000020   BF0A               OUT     0x3A, R16
     56                  EIMSK = 0x03 ;        // External interrupt mask register, int 0 and 1 on 
   \   00000022   E003               LDI     R16, 3
   \   00000024   C008               RJMP    ??Init_CPU_3
     57                  break;
     58              case AN_ZBANA:                  // AN-ZBANA
     59                  MCUCR = 0x00 ;        // MCU control register wait state
   \                     ??Init_CPU_1:
   \   00000026   E000               LDI     R16, 0
   \   00000028   BF05               OUT     0x35, R16
     60                  EIMSK = 0x00 ;        // External interrupt mask register , all off
   \   0000002A   BF09               OUT     0x39, R16
     61                  EICRA = 0xAA ;        // External interrupt control register, o on faling edge
   \   0000002C   EA0A               LDI     R16, 170
   \   0000002E   9300....           STS     _A_EICRA, R16
     62                  EICRB = 0xAA ;        // External interrupt control register 
   \   00000032   BF0A               OUT     0x3A, R16
     63                  EIMSK = 0x01 ;        // External interrupt mask register, int 0 on 
   \   00000034   E001               LDI     R16, 1
   \                     ??Init_CPU_3:
   \   00000036   BF09               OUT     0x39, R16
     64                  break;
     65              }
     66              XMCRA = 0x00 ;       // maximum wait states
   \                     ??Init_CPU_2:
   \   00000038   E000               LDI     R16, 0
   \   0000003A   9300....           STS     _A_XMCRA, R16
     67              XMCRB = 0x07 ;       // Full portC + bus keeper
   \   0000003E   E007               LDI     R16, 7
   \   00000040   9300....           STS     _A_XMCRB, R16
     68              SREG  = 0x80 ;        // global interrupt
   \   00000044   E800               LDI     R16, 128
   \   00000046   BF0F               OUT     0x3F, R16
     69              XDIV  = 0x00 ;     // Init valuse used 0x00
   \   00000048   E000               LDI     R16, 0
   \   0000004A   BF0C               OUT     0x3C, R16
     70          
     71          
     72              RestartStatus = MCUCSR;       // Remember reset source
   \   0000004C   B704               IN      R16, 0x34
   \   0000004E   9300....           STS     RestartStatus, R16
     73              MCUCSR = 0x00;              // and reset
   \   00000052   E000               LDI     R16, 0
   \   00000054   BF04               OUT     0x34, R16
     74              /*--- Initialize buffer ---*/
     75              WriteCount = 0;
   \   00000056   9300....           STS     WriteCount, R16
     76          
     77          }
   \   0000005A   9508               RET
   \   0000005C                      REQUIRE _A_MCUCR
   \   0000005C                      REQUIRE _A_EIMSK
   \   0000005C                      REQUIRE _A_EICRA
   \   0000005C                      REQUIRE _A_EICRB
   \   0000005C                      REQUIRE _A_XMCRA
   \   0000005C                      REQUIRE _A_XMCRB
   \   0000005C                      REQUIRE _A_SREG
   \   0000005C                      REQUIRE _A_XDIV
   \   0000005C                      REQUIRE _A_MCUCSR
     78          
     79          /*
     80          **===========================================================================
     81          ** Init the watchdog registers
     82          **===========================================================================
     83          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     84          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   94F8               CLI
     85          
     86              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
     87              WDTCR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   BD01               OUT     0x21, R16
     88              asm("WDR");                             // kick the dog!!
   \   0000000A   95A8               WDR
     89          
     90          }
   \   0000000C   BF1F               OUT     0x3F, R17
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_WDTCR
     91          
     92          /*
     93          **===========================================================================
     94          ** Init the IO related registers
     95          **===========================================================================
     96          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     97          void Init_IO( void ) {
   \                     Init_IO:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     98          
     99              /*--- Initialize the data registers, output value and input pullup ---*/
    100              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   2300               TST     R16
   \   00000006   F019               BREQ    ??Init_IO_0
   \   00000008   950A               DEC     R16
   \   0000000A   F0F1               BREQ    ??Init_IO_1
   \   0000000C   9508               RET
    101              case AN_ZB485:                  // AN-ZB485  
    102                  DDRA   =  0xff ;      // Port A data direction (out), external bus
   \                     ??Init_IO_0:
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   BB0A               OUT     0x1A, R16
    103                  PORTA  =  0x00 ;      // Port A data
   \   00000012   E000               LDI     R16, 0
   \   00000014   BB0B               OUT     0x1B, R16
    104                  DDRB   =  0x10 ;      // Port B data direction, bit 0, 4-7 out
   \   00000016   E100               LDI     R16, 16
   \   00000018   BB07               OUT     0x17, R16
    105                  PORTB  =  0x00 ;      // Port B data   
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   BB08               OUT     0x18, R16
    106                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   BB04               OUT     0x14, R16
    107                  PORTC  =  0x00 ;      // Port C data
   \   00000022   E000               LDI     R16, 0
   \   00000024   BB05               OUT     0x15, R16
    108                  DDRD   =  0x00 ;      // Port D data direction, all in except output to osc and txd
   \   00000026   BB01               OUT     0x11, R16
    109                  PORTD  =  0xff ;      // Port D data pullup on int fro AD
   \   00000028   EF0F               LDI     R16, 255
   \   0000002A   BB02               OUT     0x12, R16
    110                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   0000002C   EF0E               LDI     R16, 254
   \   0000002E   B902               OUT     0x02, R16
    111                  PORTE  =  0xf0 ;      // Port E data 
   \   00000030   EF00               LDI     R16, 240
   \   00000032   B903               OUT     0x03, R16
    112                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000034   E000               LDI     R16, 0
   \   00000036   9300....           STS     _A_DDRF, R16
    113                  PORTF  =  0x00 ;      // Port F data 
   \   0000003A   9300....           STS     _A_PORTF, R16
    114                  DDRG   =  0x07 ;      // Port G data direction, port 1,2,3 out
   \   0000003E   E007               LDI     R16, 7
   \   00000040   9300....           STS     _A_DDRG, R16
    115                  PORTG  =  0x03 ;      // Port G data 
   \   00000044   E003               LDI     R16, 3
   \   00000046   C01B               RJMP    ??Init_IO_2
    116                  break;
    117              case AN_ZBANA:                  // AN-ZBANA
    118                  DDRA   =  0x00 ;      // Port A data direction in (not used)
   \                     ??Init_IO_1:
   \   00000048   E000               LDI     R16, 0
   \   0000004A   BB0A               OUT     0x1A, R16
    119                  PORTA  =  0x00 ;      // Port A data
   \   0000004C   BB0B               OUT     0x1B, R16
    120                  DDRB   =  0xF1 ;      // Port B data direction, bit 0, 4-7 out
   \   0000004E   EF01               LDI     R16, 241
   \   00000050   BB07               OUT     0x17, R16
    121                  PORTB  =  0x00 ;      // Port B data   
   \   00000052   E000               LDI     R16, 0
   \   00000054   BB08               OUT     0x18, R16
    122                  DDRC   =  0xFF ;      // Port C data direction, all out
   \   00000056   EF0F               LDI     R16, 255
   \   00000058   BB04               OUT     0x14, R16
    123                  PORTC  =  0x00 ;      // Port C data
   \   0000005A   E000               LDI     R16, 0
   \   0000005C   BB05               OUT     0x15, R16
    124                  DDRD   =  0x02 ;      // Port D data direction, all in except output to osc and txd
   \   0000005E   E002               LDI     R16, 2
   \   00000060   BB01               OUT     0x11, R16
    125                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD
   \   00000062   EF01               LDI     R16, 241
   \   00000064   BB02               OUT     0x12, R16
    126                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000066   EF0E               LDI     R16, 254
   \   00000068   B902               OUT     0x02, R16
    127                  PORTE  =  0x00 ;      // Port E data 
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   B903               OUT     0x03, R16
    128                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   0000006E   9300....           STS     _A_DDRF, R16
    129                  PORTF  =  0x00 ;      // Port F data 
   \   00000072   9300....           STS     _A_PORTF, R16
    130                  DDRG   =  0x10 ;      // Port G data direction, bit 5 out
   \   00000076   E100               LDI     R16, 16
   \   00000078   9300....           STS     _A_DDRG, R16
    131                  PORTG  =  0x00 ;      // Port G data 
   \   0000007C   E000               LDI     R16, 0
   \                     ??Init_IO_2:
   \   0000007E   9300....           STS     _A_PORTG, R16
    132                  break;
    133              default:
    134                  break;
    135              }    
    136          }
   \   00000082   9508               RET
   \   00000084                      REQUIRE _A_DDRA
   \   00000084                      REQUIRE _A_PORTA
   \   00000084                      REQUIRE _A_DDRB
   \   00000084                      REQUIRE _A_PORTB
   \   00000084                      REQUIRE _A_DDRC
   \   00000084                      REQUIRE _A_PORTC
   \   00000084                      REQUIRE _A_DDRD
   \   00000084                      REQUIRE _A_PORTD
   \   00000084                      REQUIRE _A_DDRE
   \   00000084                      REQUIRE _A_PORTE
   \   00000084                      REQUIRE _A_DDRF
   \   00000084                      REQUIRE _A_PORTF
   \   00000084                      REQUIRE _A_DDRG
   \   00000084                      REQUIRE _A_PORTG
    137          
    138          /*
    139          **===========================================================================
    140          ** Init the timer related registers
    141          **===========================================================================
    142          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    143          void Init_TMR( void ) {
   \                     Init_TMR:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    144              /*--- Timer control (disable clock inputs) ---*/
    145          
    146              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   2300               TST     R16
   \   00000006   F019               BREQ    ??Init_TMR_0
   \   00000008   950A               DEC     R16
   \   0000000A   F029               BREQ    ??Init_TMR_1
   \   0000000C   9508               RET
    147              case AN_ZB485:                  // AN-ZB485
    148                  TCCR0   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_0:
   \   0000000E   E909               LDI     R16, 153
   \   00000010   BF03               OUT     0x33, R16
    149                  OCR0    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
   \   00000012   E003               LDI     R16, 3
   \   00000014   C003               RJMP    ??Init_TMR_2
    150                  break;
    151              case AN_ZBANA:                  // AN-ZBANA
    152                  TCCR0   =  0x99 ;      // Timer control register 0 
   \                     ??Init_TMR_1:
   \   00000016   E909               LDI     R16, 153
   \   00000018   BF03               OUT     0x33, R16
    153                  OCR0    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
   \   0000001A   E007               LDI     R16, 7
   \                     ??Init_TMR_2:
   \   0000001C   BF01               OUT     0x31, R16
    154                  break;
    155              default:
    156                  break;
    157              }
    158          
    159          } 
   \   0000001E   9508               RET
   \   00000020                      REQUIRE _A_TCCR0
   \   00000020                      REQUIRE _A_OCR0
    160          
    161          /*
    162          **===========================================================================
    163          ** Init the USARTs registers
    164          **===========================================================================
    165          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    166          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    167          
    168          
    169              /*--- Configure UART data block ---*/
    170              UART[channel].TxFirst   = 0x00;
   \   00000008   ....               LDI     R26, LOW(UART)
   \   0000000A   ....               LDI     R27, (UART) >> 8
   \   0000000C   E11A               LDI     R17, 26
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   0DE0               ADD     R30, R0
   \   00000014   1DF1               ADC     R31, R1
   \   00000016   E030               LDI     R19, 0
   \   00000018   8332               STD     Z+2, R19
   \   0000001A   8333               STD     Z+3, R19
    171              UART[channel].TxLast    = 0x00;
   \   0000001C   8334               STD     Z+4, R19
   \   0000001E   8335               STD     Z+5, R19
    172              UART[channel].TxCount   = 0x00;
   \   00000020   8336               STD     Z+6, R19
   \   00000022   8337               STD     Z+7, R19
    173              UART[channel].RxFirst   = 0x00;
   \   00000024   8734               STD     Z+12, R19
   \   00000026   8735               STD     Z+13, R19
    174              UART[channel].RxLast    = 0x00;
   \   00000028   8736               STD     Z+14, R19
   \   0000002A   8737               STD     Z+15, R19
    175              UART[channel].RxCount   = 0x00;
   \   0000002C   8B30               STD     Z+16, R19
   \   0000002E   8B31               STD     Z+17, R19
    176              UART[channel].RxState   = SYNC;
   \   00000030   8B32               STD     Z+18, R19
    177              UART[channel].SyncCnt   = 0 ;
   \   00000032   8B33               STD     Z+19, R19
    178              UART[channel].TxStatus  = 0x00;
   \   00000034   8730               STD     Z+8, R19
    179          
    180              switch (channel) {
   \   00000036   2300               TST     R16
   \   00000038   F019               BREQ    ??Init_USART_0
   \   0000003A   950A               DEC     R16
   \   0000003C   F101               BREQ    ??Init_USART_1
   \   0000003E   C040               RJMP    ??Init_USART_2
    181              case 0x00 :          
    182                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   00000040   EF0A               LDI     R16, 250
   \   00000042   01FD               MOVW    R31:R30, R27:R26
   \   00000044   8B04               STD     Z+20, R16
   \   00000046   8B35               STD     Z+21, R19
    183                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   00000048   ....               LDI     R16, LOW(TxBufferCh0)
   \   0000004A   ....               LDI     R17, (TxBufferCh0) >> 8
   \   0000004C   930D               ST      X+, R16
   \   0000004E   931C               ST      X, R17
    184                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   00000050   ....               LDI     R16, LOW(RxBufferCh0)
   \   00000052   ....               LDI     R17, (RxBufferCh0) >> 8
   \   00000054   8702               STD     Z+10, R16
   \   00000056   8713               STD     Z+11, R17
    185                  UCSR0A  = 0x00; 
   \   00000058   B93B               OUT     0x0B, R19
    186                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000005A   E400               LDI     R16, 64
   \   0000005C   E412               LDI     R17, 66
   \   0000005E   E02F               LDI     R18, 15
   \   00000060   ........           CALL    ?UL_DIVMOD_S_L03
   \   00000064   2F40               MOV     R20, R16
   \   00000066   954A               DEC     R20
   \   00000068   B949               OUT     0x09, R20
    187                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   0000006A   01C8               MOVW    R25:R24, R17:R16
   \   0000006C   9701               SBIW    R25:R24, 1
   \   0000006E   9390....           STS     _A_UBRR0H, R25
    188                  UCSR0B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   00000072   EB08               LDI     R16, 184
   \   00000074   B90A               OUT     0x0A, R16
    189                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000076   E006               LDI     R16, 6
   \   00000078   9300....           STS     _A_UCSR0C, R16
    190                  break;
   \   0000007C   C021               RJMP    ??Init_USART_2
    191              case 0x01 :
    192                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   0000007E   EF0A               LDI     R16, 250
   \   00000080   01FD               MOVW    R31:R30, R27:R26
   \   00000082   A706               STD     Z+46, R16
   \   00000084   A737               STD     Z+47, R19
    193                  UART[channel].pTxBuffer = TxBufferCh1;
   \   00000086   ....               LDI     R16, LOW(TxBufferCh1)
   \   00000088   ....               LDI     R17, (TxBufferCh1) >> 8
   \   0000008A   8F02               STD     Z+26, R16
   \   0000008C   8F13               STD     Z+27, R17
    194                  UART[channel].pRxBuffer = RxBufferCh1;
   \   0000008E   ....               LDI     R16, LOW(RxBufferCh1)
   \   00000090   ....               LDI     R17, (RxBufferCh1) >> 8
   \   00000092   A304               STD     Z+36, R16
   \   00000094   A315               STD     Z+37, R17
    195                  UCSR1A  = 0x00; 
   \   00000096   9330....           STS     _A_UCSR1A, R19
    196                  UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000009A   E400               LDI     R16, 64
   \   0000009C   E412               LDI     R17, 66
   \   0000009E   E02F               LDI     R18, 15
   \   000000A0   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000A4   2F40               MOV     R20, R16
   \   000000A6   954A               DEC     R20
   \   000000A8   9340....           STS     _A_UBRR1L, R20
    197                  UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   000000AC   01C8               MOVW    R25:R24, R17:R16
   \   000000AE   9701               SBIW    R25:R24, 1
   \   000000B0   9390....           STS     _A_UBRR1H, R25
    198                  UCSR1B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   000000B4   EB08               LDI     R16, 184
   \   000000B6   9300....           STS     _A_UCSR1B, R16
    199                  UCSR1C  = 0x06;       /* n,8,1 */
   \   000000BA   E006               LDI     R16, 6
   \   000000BC   9300....           STS     _A_UCSR1C, R16
    200                  break;
    201              default:
    202                  break ;
    203              }    
    204          }
   \                     ??Init_USART_2:
   \   000000C0   9189               LD      R24, Y+
   \   000000C2   9199               LD      R25, Y+
   \   000000C4   91A9               LD      R26, Y+
   \   000000C6   91B9               LD      R27, Y+
   \   000000C8   9508               RET
   \   000000CA                      REQUIRE _A_UCSR0A
   \   000000CA                      REQUIRE _A_UBRR0L
   \   000000CA                      REQUIRE _A_UBRR0H
   \   000000CA                      REQUIRE _A_UCSR0B
   \   000000CA                      REQUIRE _A_UCSR0C
   \   000000CA                      REQUIRE _A_UCSR1A
   \   000000CA                      REQUIRE _A_UBRR1L
   \   000000CA                      REQUIRE _A_UBRR1H
   \   000000CA                      REQUIRE _A_UCSR1B
   \   000000CA                      REQUIRE _A_UCSR1C
    205          
    206          
    207          /*
    208          **===========================================================================
    209          ** Init the AD converter registers
    210          **===========================================================================
    211          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    212          void Init_AD( void ) {
   \                     Init_AD:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    213          
    214              char i;     
    215              for (i = 0; i<8; i++) {                 // Init variables
   \   00000000   ....               LDI     R30, LOW(ADInt)
   \   00000002   ....               LDI     R31, (ADInt) >> 8
   \   00000004   E008               LDI     R16, 8
   \   00000006   E020               LDI     R18, 0
    216                  ADInt.Result[i] = 0;                   // convertion resluts
   \                     ??Init_AD_0:
   \   00000008   9321               ST      Z+, R18
   \   0000000A   9321               ST      Z+, R18
    217              }
   \   0000000C   950A               DEC     R16
   \   0000000E   F7E1               BRNE    ??Init_AD_0
    218              ADChannel = 0x00 ;                      // AD channel to be converted
   \   00000010   9320....           STS     ADChannel, R18
    219              ADMUX   = 0xc0 ;                        // Ref = 2,56V, right adjust
   \   00000014   EC00               LDI     R16, 192
   \   00000016   B907               OUT     0x07, R16
    220              ADCSR   = 0x8f ;                        // AD enabled, int enabled, xtal / 128
   \   00000018   E80F               LDI     R16, 143
   \   0000001A   B906               OUT     0x06, R16
    221          }
   \   0000001C   9508               RET
   \   0000001E                      REQUIRE _A_ADMUX
   \   0000001E                      REQUIRE _A_ADCSR
    222          
    223          /*
    224          **===========================================================================
    225          ** Init values  in the system
    226          **===========================================================================
    227          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    228          void Init_Values(void) {
   \                     Init_Values:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    229          
    230          
    231          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   InitSystem
        0      2   -> Init_AD
        0      2   -> Init_CPU
        0      2   -> Init_IO
        0      2   -> Init_USART
      0      2   Init_AD
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      4      2   Init_USART
        4      2 ?UL_DIVMOD_S_L03
      0      2   Init_Values
      0      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      78  InitSystem
      30  Init_AD
      92  Init_CPU
     132  Init_IO
      32  Init_TMR
     202  Init_USART
       2  Init_Values
      16  Init_Watchdog
       1  _A_ADCSR
       1  _A_ADMUX
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_MCUCSR
       1  _A_OCR0
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR0
       1  _A_UBRR0H
       1  _A_UBRR0L
       1  _A_UBRR1H
       1  _A_UBRR1L
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_WDTCR
       1  _A_XDIV
       1  _A_XMCRA
       1  _A_XMCRB

 
  39 bytes in segment ABSOLUTE
 584 bytes in segment CODE
 
 584 bytes of CODE memory
   0 bytes of DATA memory (+ 39 bytes shared)

Errors: none
Warnings: none
