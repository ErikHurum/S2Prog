###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            07/Feb/2017  12:16:22
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\ANZB\Src\UsartInt.c
#    Command line =  
#        D:\S2Prog\IO\ANZB\Src\UsartInt.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB\Release\Obj -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\ANZB\Release\List -y --initializers_in_flash --no_tbaa
#        --enable_external_bus -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB\INC\ -I D:\S2Prog\IO\ANZB\..\..\SHARED\INC\
#        --eeprom_size 4096 --clib -Oh
#    List file    =  D:\S2Prog\IO\ANZB\Release\List\UsartInt.lst
#    Object file  =  D:\S2Prog\IO\ANZB\Release\Obj\UsartInt.r90
#
###############################################################################

D:\S2Prog\IO\ANZB\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   Uart1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          
      8          
      9          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9c
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1
     10          #include "stdio.h"
     11          #include "math.h"
     12          #include "externals.h"
     13          #include "version.h"
     14          
     15          #if (OS_UART != 0)
     16          
     17          // USART0
     18          #pragma vector=USART0_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     19          __interrupt void IntHandler_RX_USART0( void ){   
   \                     IntHandler_RX_USART0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   93FA               ST      -Y, R31
   \   0000000A   93EA               ST      -Y, R30
   \   0000000C   923A               ST      -Y, R3
   \   0000000E   922A               ST      -Y, R2
   \   00000010   921A               ST      -Y, R1
   \   00000012   920A               ST      -Y, R0
   \   00000014   937A               ST      -Y, R23
   \   00000016   936A               ST      -Y, R22
   \   00000018   935A               ST      -Y, R21
   \   0000001A   934A               ST      -Y, R20
   \   0000001C   933A               ST      -Y, R19
   \   0000001E   932A               ST      -Y, R18
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   B78F               IN      R24, 0x3F
   \   00000026   B79B               IN      R25, 0x3B
   \   00000028                      REQUIRE __RSTACK_in_external_ram_new_way
     20          
     21              OS_EnterInterrupt();
   \   00000028   9100....           LDS     R16, OS_Counters
   \   0000002C   9503               INC     R16
   \   0000002E   9300....           STS     OS_Counters, R16
   \   00000032   9100....           LDS     R16, (OS_Counters + 1)
   \   00000036   9503               INC     R16
   \   00000038   9300....           STS     (OS_Counters + 1), R16
     22              OS_EnterIntStack();
   \   0000003C   94F8               CLI
   \   0000003E   ........           CALL    OS__EnterIntStack
   \   00000042   9100....           LDS     R16, (OS_Counters + 1)
   \   00000046   2300               TST     R16
   \   00000048   F409               BRNE    ??IntHandler_RX_USART0_0
   \   0000004A   9478               SEI
     23              if ( UCSR0A & __BIT_MASK( DOR0 ) ) {                // Overrun error? 
   \                     ??IntHandler_RX_USART0_0:
   \   0000004C   B10B               IN      R16, 0x0B
     24              }
     25          
     26              if ( UCSR0A & __BIT_MASK( FE0 ) ) {                 // Framing error? 
   \   0000004E   B10B               IN      R16, 0x0B
   \   00000050   ....               LDI     R26, LOW(UART)
   \   00000052   ....               LDI     R27, (UART) >> 8
   \   00000054   C007               RJMP    ??IntHandler_RX_USART0_1
     27              }
     28          
     29              while ( UCSR0A & __BIT_MASK( RXC0)  ) {                // New byte avaiable?
     30                  UART[0].pRxBuffer[ UART[0].RxFirst ] = UDR0;    // Read the character 
     31          
     32                  if (UART[0].RxState != HANDLE) {                // ok to receive? 
     33                      switch (UART[0].RxState) {                   // Yes, check state
     34                      case SYNC :
     35                          if ( UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SYN) {
     36                              UART[0].SyncCnt ++ ;                 // count sync
   \                     ??IntHandler_RX_USART0_2:
   \   00000056   01FD               MOVW    R31:R30, R27:R26
   \   00000058   8903               LDD     R16, Z+19
   \   0000005A   9503               INC     R16
   \   0000005C   8B03               STD     Z+19, R16
     37                              UART[0].RxFirst = 0;                 // start at start of buff
   \   0000005E   E000               LDI     R16, 0
   \   00000060   8704               STD     Z+12, R16
   \   00000062   8705               STD     Z+13, R16
     38                          } else if ((UART[0].SyncCnt >= 2) && 
   \                     ??IntHandler_RX_USART0_1:
   \   00000064   9B5F               SBIS    0x0B, 0x07
   \   00000066   C044               RJMP    ??IntHandler_RX_USART0_3
   \   00000068   B12C               IN      R18, 0x0C
   \   0000006A   01FD               MOVW    R31:R30, R27:R26
   \   0000006C   8502               LDD     R16, Z+10
   \   0000006E   8513               LDD     R17, Z+11
   \   00000070   8544               LDD     R20, Z+12
   \   00000072   8555               LDD     R21, Z+13
   \   00000074   0F04               ADD     R16, R20
   \   00000076   1F15               ADC     R17, R21
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   8320               ST      Z, R18
   \   0000007C   9100....           LDS     R16, (UART + 18)
   \   00000080   300A               CPI     R16, 10
   \   00000082   F381               BREQ    ??IntHandler_RX_USART0_1
   \   00000084   2300               TST     R16
   \   00000086   01FD               MOVW    R31:R30, R27:R26
   \   00000088   F519               BRNE    ??IntHandler_RX_USART0_4
   \   0000008A   8502               LDD     R16, Z+10
   \   0000008C   8513               LDD     R17, Z+11
   \   0000008E   8524               LDD     R18, Z+12
   \   00000090   8535               LDD     R19, Z+13
   \   00000092   0F02               ADD     R16, R18
   \   00000094   1F13               ADC     R17, R19
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   8100               LD      R16, Z
   \   0000009A   3106               CPI     R16, 22
   \   0000009C   F2E1               BREQ    ??IntHandler_RX_USART0_2
     39                                     (UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \   0000009E   9110....           LDS     R17, (UART + 19)
   \   000000A2   3012               CPI     R17, 2
   \   000000A4   F088               BRCS    ??IntHandler_RX_USART0_5
   \   000000A6   3001               CPI     R16, 1
   \   000000A8   F479               BRNE    ??IntHandler_RX_USART0_5
     40                              UART[0].SyncCnt = 0 ;                // reset counter
   \   000000AA   E000               LDI     R16, 0
   \   000000AC   9300....           STS     (UART + 19), R16
     41                              UART[0].RxState = HEADER ;
   \   000000B0   E001               LDI     R16, 1
   \   000000B2   9300....           STS     (UART + 18), R16
     42                              UART[0].RxLast = 0 ;
   \   000000B6   E000               LDI     R16, 0
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   01FD               MOVW    R31:R30, R27:R26
   \   000000BC   8706               STD     Z+14, R16
   \   000000BE   8707               STD     Z+15, R16
     43                              UART[0].RxTimeout = RX_TO_TIME ;    // reset timeout
   \   000000C0   EF0A               LDI     R16, 250
   \   000000C2   8B04               STD     Z+20, R16
   \   000000C4   8B15               STD     Z+21, R17
   \   000000C6   CFCE               RJMP    ??IntHandler_RX_USART0_1
     44                          } else {
     45                              UART[0].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_RX_USART0_5:
   \   000000C8   E000               LDI     R16, 0
   \   000000CA   9300....           STS     (UART + 19), R16
   \   000000CE   CFCA               RJMP    ??IntHandler_RX_USART0_1
     46                          }
     47                          break;
     48                      default :
     49                          if ((++UART[0].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??IntHandler_RX_USART0_4:
   \   000000D0   8504               LDD     R16, Z+12
   \   000000D2   8515               LDD     R17, Z+13
   \   000000D4   5F0F               SUBI    R16, 255
   \   000000D6   4F1F               SBCI    R17, 255
   \   000000D8   8704               STD     Z+12, R16
   \   000000DA   8715               STD     Z+13, R17
   \   000000DC   3907               CPI     R16, 151
   \   000000DE   4010               SBCI    R17, 0
   \   000000E0   E000               LDI     R16, 0
   \   000000E2   F018               BRCS    ??IntHandler_RX_USART0_6
     50                              GoToSyncUART(0) ;                       // go to sync mode
   \   000000E4   ........           CALL    GoToSyncUART
   \   000000E8   CFBD               RJMP    ??IntHandler_RX_USART0_1
     51                          } else {
     52                              ReceivePacketUart(0) ;              // Check package
   \                     ??IntHandler_RX_USART0_6:
   \   000000EA   ........           CALL    ReceivePacketUart
   \   000000EE   CFBA               RJMP    ??IntHandler_RX_USART0_1
     53                          }
     54                          break ;   
     55                      }
     56                  }
     57              }
     58              OS_LeaveIntStack();
   \                     ??IntHandler_RX_USART0_3:
   \   000000F0   ....               RJMP    ?Subroutine0
   \   000000F2                      REQUIRE _A_UCSR0A
   \   000000F2                      REQUIRE _A_UDR0
     59              OS_LeaveInterruptNoSwitch();
     60          } 

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   94F8               CLI
   \   00000002   ........           CALL    OS__LeaveIntStack
   \   00000006   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000A   950A               DEC     R16
   \   0000000C   9300....           STS     (OS_Counters + 1), R16
   \   00000010   9100....           LDS     R16, OS_Counters
   \   00000014   950A               DEC     R16
   \   00000016   9300....           STS     OS_Counters, R16
   \   0000001A   BF9B               OUT     0x3B, R25
   \   0000001C   BF8F               OUT     0x3F, R24
   \   0000001E   9109               LD      R16, Y+
   \   00000020   9119               LD      R17, Y+
   \   00000022   9129               LD      R18, Y+
   \   00000024   9139               LD      R19, Y+
   \   00000026   9149               LD      R20, Y+
   \   00000028   9159               LD      R21, Y+
   \   0000002A   9169               LD      R22, Y+
   \   0000002C   9179               LD      R23, Y+
   \   0000002E   9009               LD      R0, Y+
   \   00000030   9019               LD      R1, Y+
   \   00000032   9029               LD      R2, Y+
   \   00000034   9039               LD      R3, Y+
   \   00000036   91E9               LD      R30, Y+
   \   00000038   91F9               LD      R31, Y+
   \   0000003A   9189               LD      R24, Y+
   \   0000003C   9199               LD      R25, Y+
   \   0000003E   91A9               LD      R26, Y+
   \   00000040   91B9               LD      R27, Y+
   \   00000042   9518               RETI
     61          
     62          
     63          #pragma vector=USART0_TXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     64          __interrupt void IntHandler_TX_USART0( void ){   
   \                     IntHandler_TX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
     65          
     66             OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
     67             OS_EnterIntStack();
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??IntHandler_TX_USART0_0
   \   00000046   9478               SEI
     68              
     69              UCSR0B &= ~(__BIT_MASK( TXCIE0)) ;            // transmission end, disable int.
   \                     ??IntHandler_TX_USART0_0:
   \   00000048   9856               CBI     0x0A, 0x06
     70              PORTE &= ~0x04 ;                              // TXE0 off
   \   0000004A   981A               CBI     0x03, 0x02
     71              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \   0000004C   ....               LDI     R16, LOW(TimerUSART0)
   \   0000004E   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000050   ........           CALL    OS_StopTimer
     72              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000054   E000               LDI     R16, 0
   \   00000056                      REQUIRE ?Subroutine1
   \   00000056                      REQUIRE _A_UCSR0B
   \   00000056                      REQUIRE _A_PORTE
   \   00000056                      ;               // Fall through to label ?Subroutine1
     73              
     74              OS_LeaveIntStack();
     75              OS_LeaveInterruptNoSwitch();
     76          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ........           CALL    GoToSyncUART
   \   00000004   94F8               CLI
   \   00000006   ........           CALL    OS__LeaveIntStack
   \   0000000A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000E   950A               DEC     R16
   \   00000010   9300....           STS     (OS_Counters + 1), R16
   \   00000014   9100....           LDS     R16, OS_Counters
   \   00000018   950A               DEC     R16
   \   0000001A   9300....           STS     OS_Counters, R16
   \   0000001E   BF9B               OUT     0x3B, R25
   \   00000020   BF8F               OUT     0x3F, R24
   \   00000022   9109               LD      R16, Y+
   \   00000024   9119               LD      R17, Y+
   \   00000026   9129               LD      R18, Y+
   \   00000028   9139               LD      R19, Y+
   \   0000002A   9149               LD      R20, Y+
   \   0000002C   9159               LD      R21, Y+
   \   0000002E   9169               LD      R22, Y+
   \   00000030   9179               LD      R23, Y+
   \   00000032   9009               LD      R0, Y+
   \   00000034   9019               LD      R1, Y+
   \   00000036   9029               LD      R2, Y+
   \   00000038   9039               LD      R3, Y+
   \   0000003A   91E9               LD      R30, Y+
   \   0000003C   91F9               LD      R31, Y+
   \   0000003E   9189               LD      R24, Y+
   \   00000040   9199               LD      R25, Y+
   \   00000042   9518               RETI
     77          
     78          
     79          #pragma vector = USART0_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
     80          __interrupt void IntHandler_UDRE_USART0( void ){   
   \                     IntHandler_UDRE_USART0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   93FA               ST      -Y, R31
   \   0000000A   93EA               ST      -Y, R30
   \   0000000C   923A               ST      -Y, R3
   \   0000000E   922A               ST      -Y, R2
   \   00000010   921A               ST      -Y, R1
   \   00000012   920A               ST      -Y, R0
   \   00000014   937A               ST      -Y, R23
   \   00000016   936A               ST      -Y, R22
   \   00000018   935A               ST      -Y, R21
   \   0000001A   934A               ST      -Y, R20
   \   0000001C   933A               ST      -Y, R19
   \   0000001E   932A               ST      -Y, R18
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   B78F               IN      R24, 0x3F
   \   00000026   B79B               IN      R25, 0x3B
   \   00000028                      REQUIRE __RSTACK_in_external_ram_new_way
     81          
     82              OS_EnterInterrupt();
   \   00000028   9100....           LDS     R16, OS_Counters
   \   0000002C   9503               INC     R16
   \   0000002E   9300....           STS     OS_Counters, R16
   \   00000032   9100....           LDS     R16, (OS_Counters + 1)
   \   00000036   9503               INC     R16
   \   00000038   9300....           STS     (OS_Counters + 1), R16
     83              OS_EnterIntStack();
   \   0000003C   94F8               CLI
   \   0000003E   ........           CALL    OS__EnterIntStack
   \   00000042   9100....           LDS     R16, (OS_Counters + 1)
   \   00000046   2300               TST     R16
   \   00000048   F409               BRNE    ??IntHandler_UDRE_USART0_0
   \   0000004A   9478               SEI
     84              if ( UART[0].TxCount-- > 0 ) {
   \                     ??IntHandler_UDRE_USART0_0:
   \   0000004C   ....               LDI     R30, LOW(UART)
   \   0000004E   ....               LDI     R31, (UART) >> 8
   \   00000050   8106               LDD     R16, Z+6
   \   00000052   8117               LDD     R17, Z+7
   \   00000054   2B01               OR      R16, R17
   \   00000056   F0A1               BREQ    ??IntHandler_UDRE_USART0_1
   \   00000058   8106               LDD     R16, Z+6
   \   0000005A   5001               SUBI    R16, 1
   \   0000005C   4010               SBCI    R17, 0
   \   0000005E   8306               STD     Z+6, R16
   \   00000060   8317               STD     Z+7, R17
     85                  UDR0 = UART[0].pTxBuffer[ UART[0].TxLast ];     // Send a character
   \   00000062   81A0               LD      R26, Z
   \   00000064   81B1               LDD     R27, Z+1
   \   00000066   8104               LDD     R16, Z+4
   \   00000068   8115               LDD     R17, Z+5
   \   0000006A   0FA0               ADD     R26, R16
   \   0000006C   1FB1               ADC     R27, R17
   \   0000006E   910C               LD      R16, X
   \   00000070   B90C               OUT     0x0C, R16
     86                  UART[0].TxLast++;
   \   00000072   8104               LDD     R16, Z+4
   \   00000074   8115               LDD     R17, Z+5
   \   00000076   5F0F               SUBI    R16, 255
   \   00000078   4F1F               SBCI    R17, 255
   \   0000007A   8304               STD     Z+4, R16
   \   0000007C   8315               STD     Z+5, R17
   \   0000007E   C006               RJMP    ??IntHandler_UDRE_USART0_2
     87              } else{                                             // Last byte sent?
   \                     ??IntHandler_UDRE_USART0_1:
   \   00000080   EF0F               LDI     R16, 255
   \   00000082   8306               STD     Z+6, R16
   \   00000084   8307               STD     Z+7, R16
     88                    UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000086   9855               CBI     0x0A, 0x05
     89                    UCSR0A |= (__BIT_MASK( TXC0)) ;               // Clear int bit in TXC.
   \   00000088   9A5E               SBI     0x0B, 0x06
     90                    UCSR0B |= __BIT_MASK( TXCIE0) ;               // Enable TXC int.
   \   0000008A   9A56               SBI     0x0A, 0x06
     91              }           
     92              OS_LeaveIntStack();
   \                     ??IntHandler_UDRE_USART0_2:
   \   0000008C   ....               RJMP    ?Subroutine0
   \   0000008E                      REQUIRE _A_UDR0
   \   0000008E                      REQUIRE _A_UCSR0B
   \   0000008E                      REQUIRE _A_UCSR0A
     93              OS_LeaveInterruptNoSwitch();
     94          } 
     95          #endif
     96          
     97          // USART1
     98          #pragma vector=USART1_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     99          __interrupt void IntHandler_RX_USART1( void ){   
   \                     IntHandler_RX_USART1:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   93FA               ST      -Y, R31
   \   0000000A   93EA               ST      -Y, R30
   \   0000000C   923A               ST      -Y, R3
   \   0000000E   922A               ST      -Y, R2
   \   00000010   921A               ST      -Y, R1
   \   00000012   920A               ST      -Y, R0
   \   00000014   937A               ST      -Y, R23
   \   00000016   936A               ST      -Y, R22
   \   00000018   935A               ST      -Y, R21
   \   0000001A   934A               ST      -Y, R20
   \   0000001C   933A               ST      -Y, R19
   \   0000001E   932A               ST      -Y, R18
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   B78F               IN      R24, 0x3F
   \   00000026   B79B               IN      R25, 0x3B
   \   00000028                      REQUIRE __RSTACK_in_external_ram_new_way
    100          
    101              OS_EnterInterrupt();
   \   00000028   9100....           LDS     R16, OS_Counters
   \   0000002C   9503               INC     R16
   \   0000002E   9300....           STS     OS_Counters, R16
   \   00000032   9100....           LDS     R16, (OS_Counters + 1)
   \   00000036   9503               INC     R16
   \   00000038   9300....           STS     (OS_Counters + 1), R16
    102              OS_EnterIntStack();
   \   0000003C   94F8               CLI
   \   0000003E   ........           CALL    OS__EnterIntStack
   \   00000042   9100....           LDS     R16, (OS_Counters + 1)
   \   00000046   2300               TST     R16
   \   00000048   F409               BRNE    ??IntHandler_RX_USART1_0
   \   0000004A   9478               SEI
    103              if ( UCSR1A & __BIT_MASK( DOR1 ) ) {                // Overrun error? 
   \                     ??IntHandler_RX_USART1_0:
   \   0000004C   9100....           LDS     R16, _A_UCSR1A
    104              }
    105          
    106              if ( UCSR1A & __BIT_MASK( FE1 ) ) {                 // Framing error? 
   \   00000050   9100....           LDS     R16, _A_UCSR1A
   \   00000054   ....               LDI     R26, LOW(UART)
   \   00000056   ....               LDI     R27, (UART) >> 8
   \   00000058   C007               RJMP    ??IntHandler_RX_USART1_1
    107              }
    108          
    109              while ( UCSR1A & __BIT_MASK( RXC1)  ) {                // New byte avaiable?
    110                  UART[1].pRxBuffer[ UART[1].RxFirst ] = UDR1;    // Read the character 
    111          
    112                  if (UART[1].RxState != HANDLE) {                // ok to receive? 
    113                      switch (UART[1].RxState) {                   // Yes, check state
    114                      case SYNC :
    115                          if ( UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SYN) {
    116                              UART[1].SyncCnt ++ ;                 // count sync
   \                     ??IntHandler_RX_USART1_2:
   \   0000005A   01FD               MOVW    R31:R30, R27:R26
   \   0000005C   A505               LDD     R16, Z+45
   \   0000005E   9503               INC     R16
   \   00000060   A705               STD     Z+45, R16
    117                              UART[1].RxFirst = 0;                 // start at start of buff
   \   00000062   E000               LDI     R16, 0
   \   00000064   A306               STD     Z+38, R16
   \   00000066   A307               STD     Z+39, R16
    118                          } else if ((UART[1].SyncCnt >= 2) && 
   \                     ??IntHandler_RX_USART1_1:
   \   00000068   9100....           LDS     R16, _A_UCSR1A
   \   0000006C   FF07               SBRS    R16, 7
   \   0000006E   C045               RJMP    ??IntHandler_RX_USART1_3
   \   00000070   9120....           LDS     R18, _A_UDR1
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   A104               LDD     R16, Z+36
   \   00000078   A115               LDD     R17, Z+37
   \   0000007A   A146               LDD     R20, Z+38
   \   0000007C   A157               LDD     R21, Z+39
   \   0000007E   0F04               ADD     R16, R20
   \   00000080   1F15               ADC     R17, R21
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   8320               ST      Z, R18
   \   00000086   9100....           LDS     R16, (UART + 44)
   \   0000008A   300A               CPI     R16, 10
   \   0000008C   F369               BREQ    ??IntHandler_RX_USART1_1
   \   0000008E   2300               TST     R16
   \   00000090   01FD               MOVW    R31:R30, R27:R26
   \   00000092   F519               BRNE    ??IntHandler_RX_USART1_4
   \   00000094   A104               LDD     R16, Z+36
   \   00000096   A115               LDD     R17, Z+37
   \   00000098   A126               LDD     R18, Z+38
   \   0000009A   A137               LDD     R19, Z+39
   \   0000009C   0F02               ADD     R16, R18
   \   0000009E   1F13               ADC     R17, R19
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   8100               LD      R16, Z
   \   000000A4   3106               CPI     R16, 22
   \   000000A6   F2C9               BREQ    ??IntHandler_RX_USART1_2
    119                                     (UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \   000000A8   9110....           LDS     R17, (UART + 45)
   \   000000AC   3012               CPI     R17, 2
   \   000000AE   F088               BRCS    ??IntHandler_RX_USART1_5
   \   000000B0   3001               CPI     R16, 1
   \   000000B2   F479               BRNE    ??IntHandler_RX_USART1_5
    120                              UART[1].SyncCnt = 0 ;                // reset counter
   \   000000B4   E000               LDI     R16, 0
   \   000000B6   9300....           STS     (UART + 45), R16
    121                              UART[1].RxState = HEADER ;
   \   000000BA   E001               LDI     R16, 1
   \   000000BC   9300....           STS     (UART + 44), R16
    122                              UART[1].RxLast = 0 ;
   \   000000C0   E000               LDI     R16, 0
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   01FD               MOVW    R31:R30, R27:R26
   \   000000C6   A700               STD     Z+40, R16
   \   000000C8   A701               STD     Z+41, R16
    123                              UART[1].RxTimeout = RX_TO_TIME ;      // reset timeout
   \   000000CA   EF0A               LDI     R16, 250
   \   000000CC   A706               STD     Z+46, R16
   \   000000CE   A717               STD     Z+47, R17
   \   000000D0   CFCB               RJMP    ??IntHandler_RX_USART1_1
    124                          } else {
    125                              UART[1].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_RX_USART1_5:
   \   000000D2   E000               LDI     R16, 0
   \   000000D4   9300....           STS     (UART + 45), R16
   \   000000D8   CFC7               RJMP    ??IntHandler_RX_USART1_1
    126                          }
    127                          break;
    128                      default :
    129                          if ((++UART[1].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??IntHandler_RX_USART1_4:
   \   000000DA   A106               LDD     R16, Z+38
   \   000000DC   A117               LDD     R17, Z+39
   \   000000DE   5F0F               SUBI    R16, 255
   \   000000E0   4F1F               SBCI    R17, 255
   \   000000E2   A306               STD     Z+38, R16
   \   000000E4   A317               STD     Z+39, R17
   \   000000E6   3907               CPI     R16, 151
   \   000000E8   4010               SBCI    R17, 0
   \   000000EA   E001               LDI     R16, 1
   \   000000EC   F018               BRCS    ??IntHandler_RX_USART1_6
    130                              GoToSyncUART(1) ;                    // go to sync mode
   \   000000EE   ........           CALL    GoToSyncUART
   \   000000F2   CFBA               RJMP    ??IntHandler_RX_USART1_1
    131                          } else {
    132                              ReceivePacketUart(1) ;              // Check package
   \                     ??IntHandler_RX_USART1_6:
   \   000000F4   ........           CALL    ReceivePacketUart
   \   000000F8   CFB7               RJMP    ??IntHandler_RX_USART1_1
    133                          }
    134                          break ;   
    135                      }
    136                  }
    137              }
    138             OS_LeaveIntStack();
   \                     ??IntHandler_RX_USART1_3:
   \   000000FA                      REQUIRE ?Subroutine0
   \   000000FA                      REQUIRE _A_UCSR1A
   \   000000FA                      REQUIRE _A_UDR1
   \   000000FA                      ;               // Fall through to label ?Subroutine0
    139             OS_LeaveInterruptNoSwitch();
    140          } 
    141          
    142          
    143          #pragma vector=USART1_TXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
    144          __interrupt void IntHandler_TX_USART1( void ){   
   \                     IntHandler_TX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    145          
    146              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
    147              OS_EnterIntStack();
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??IntHandler_TX_USART1_0
   \   00000046   9478               SEI
    148              UCSR1B &= ~(__BIT_MASK( TXCIE1)) ;            // transmission end, disable int.
   \                     ??IntHandler_TX_USART1_0:
   \   00000048   9100009A           LDS     R16, 154
   \   0000004C   7B0F               ANDI    R16, 0xBF
   \   0000004E   9300009A           STS     154, R16
    149              PORTE &= ~0x08 ;                              // TXE1 off
   \   00000052   981B               CBI     0x03, 0x03
    150              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \   00000054   ....               LDI     R16, LOW(TimerUSART1)
   \   00000056   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000058   ........           CALL    OS_StopTimer
    151              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   0000005C   E001               LDI     R16, 1
   \   0000005E   ....               RJMP    ?Subroutine1
   \   00000060                      REQUIRE _A_UCSR1B
   \   00000060                      REQUIRE _A_PORTE
    152              OS_LeaveIntStack();
    153              OS_LeaveInterruptNoSwitch();
    154          }
    155          
    156          
    157          #pragma vector = USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    158          __interrupt void IntHandler_UDRE_USART1( void ){   
   \                     IntHandler_UDRE_USART1:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   93FA               ST      -Y, R31
   \   0000000A   93EA               ST      -Y, R30
   \   0000000C   923A               ST      -Y, R3
   \   0000000E   922A               ST      -Y, R2
   \   00000010   921A               ST      -Y, R1
   \   00000012   920A               ST      -Y, R0
   \   00000014   937A               ST      -Y, R23
   \   00000016   936A               ST      -Y, R22
   \   00000018   935A               ST      -Y, R21
   \   0000001A   934A               ST      -Y, R20
   \   0000001C   933A               ST      -Y, R19
   \   0000001E   932A               ST      -Y, R18
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   B78F               IN      R24, 0x3F
   \   00000026   B79B               IN      R25, 0x3B
   \   00000028                      REQUIRE __RSTACK_in_external_ram_new_way
    159          
    160             OS_EnterInterrupt();
   \   00000028   9100....           LDS     R16, OS_Counters
   \   0000002C   9503               INC     R16
   \   0000002E   9300....           STS     OS_Counters, R16
   \   00000032   9100....           LDS     R16, (OS_Counters + 1)
   \   00000036   9503               INC     R16
   \   00000038   9300....           STS     (OS_Counters + 1), R16
    161             OS_EnterIntStack();
   \   0000003C   94F8               CLI
   \   0000003E   ........           CALL    OS__EnterIntStack
   \   00000042   9100....           LDS     R16, (OS_Counters + 1)
   \   00000046   2300               TST     R16
   \   00000048   F409               BRNE    ??IntHandler_UDRE_USART1_0
   \   0000004A   9478               SEI
    162               if ( UART[1].TxCount-- > 0 ) {
   \                     ??IntHandler_UDRE_USART1_0:
   \   0000004C   ....               LDI     R30, LOW(UART)
   \   0000004E   ....               LDI     R31, (UART) >> 8
   \   00000050   A100               LDD     R16, Z+32
   \   00000052   A111               LDD     R17, Z+33
   \   00000054   2B01               OR      R16, R17
   \   00000056   F0A9               BREQ    ??IntHandler_UDRE_USART1_1
   \   00000058   A100               LDD     R16, Z+32
   \   0000005A   5001               SUBI    R16, 1
   \   0000005C   4010               SBCI    R17, 0
   \   0000005E   A300               STD     Z+32, R16
   \   00000060   A311               STD     Z+33, R17
    163                  UDR1 = UART[1].pTxBuffer[ UART[1].TxLast ];  // Send a character
   \   00000062   8DA2               LDD     R26, Z+26
   \   00000064   8DB3               LDD     R27, Z+27
   \   00000066   8D06               LDD     R16, Z+30
   \   00000068   8D17               LDD     R17, Z+31
   \   0000006A   0FA0               ADD     R26, R16
   \   0000006C   1FB1               ADC     R27, R17
   \   0000006E   910C               LD      R16, X
   \   00000070   9300....           STS     _A_UDR1, R16
    164                  UART[1].TxLast++;
   \   00000074   8D06               LDD     R16, Z+30
   \   00000076   8D17               LDD     R17, Z+31
   \   00000078   5F0F               SUBI    R16, 255
   \   0000007A   4F1F               SBCI    R17, 255
   \   0000007C   8F06               STD     Z+30, R16
   \   0000007E   8F17               STD     Z+31, R17
   \   00000080   C012               RJMP    ??IntHandler_UDRE_USART1_2
    165               } else {
   \                     ??IntHandler_UDRE_USART1_1:
   \   00000082   EF0F               LDI     R16, 255
   \   00000084   A300               STD     Z+32, R16
   \   00000086   A301               STD     Z+33, R16
    166                  UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \   00000088   9100009A           LDS     R16, 154
   \   0000008C   7D0F               ANDI    R16, 0xDF
   \   0000008E   9300009A           STS     154, R16
    167                  UCSR1A |= (__BIT_MASK( TXC1)) ;               // Clear int bit in TXC.
   \   00000092   9100009B           LDS     R16, 155
   \   00000096   6400               ORI     R16, 0x40
   \   00000098   9300009B           STS     155, R16
    168                  UCSR1B |= __BIT_MASK( TXCIE1) ;               // Enable TXC int.
   \   0000009C   9100009A           LDS     R16, 154
   \   000000A0   6400               ORI     R16, 0x40
   \   000000A2   9300009A           STS     154, R16
    169               }
    170              OS_LeaveIntStack();
   \                     ??IntHandler_UDRE_USART1_2:
   \   000000A6   ....               RJMP    ?Subroutine0
   \   000000A8                      REQUIRE _A_UDR1
   \   000000A8                      REQUIRE _A_UCSR1B
   \   000000A8                      REQUIRE _A_UCSR1A
    171              OS_LeaveInterruptNoSwitch();
    172          } 

   \                                 In  segment INTVEC, offset 0x48, root
   \                     `??IntHandler_RX_USART0::??INTVEC 72`:
   \   00000048   ........           JMP     IntHandler_RX_USART0

   \                                 In  segment INTVEC, offset 0x4c, root
   \                     `??IntHandler_UDRE_USART0::??INTVEC 76`:
   \   0000004C   ........           JMP     IntHandler_UDRE_USART0

   \                                 In  segment INTVEC, offset 0x50, root
   \                     `??IntHandler_TX_USART0::??INTVEC 80`:
   \   00000050   ........           JMP     IntHandler_TX_USART0

   \                                 In  segment INTVEC, offset 0x78, root
   \                     `??IntHandler_RX_USART1::??INTVEC 120`:
   \   00000078   ........           JMP     IntHandler_RX_USART1

   \                                 In  segment INTVEC, offset 0x7c, root
   \                     `??IntHandler_UDRE_USART1::??INTVEC 124`:
   \   0000007C   ........           JMP     IntHandler_UDRE_USART1

   \                                 In  segment INTVEC, offset 0x80, root
   \                     `??IntHandler_TX_USART1::??INTVEC 128`:
   \   00000080   ........           JMP     IntHandler_TX_USART1

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     18      2   IntHandler_RX_USART0
       18      2   -> GoToSyncUART
       18      2   -> OS__EnterIntStack
       18      2   -> OS__LeaveIntStack
       18      2   -> ReceivePacketUart
     18      2   IntHandler_RX_USART1
       18      2   -> GoToSyncUART
       18      2   -> OS__EnterIntStack
       18      2   -> OS__LeaveIntStack
       18      2   -> ReceivePacketUart
     16      2   IntHandler_TX_USART0
       16      2   -> GoToSyncUART
       16      2   -> OS_StopTimer
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_TX_USART1
       16      2   -> GoToSyncUART
       16      2   -> OS_StopTimer
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     18      2   IntHandler_UDRE_USART0
       18      2   -> OS__EnterIntStack
       18      2   -> OS__LeaveIntStack
     18      2   IntHandler_UDRE_USART1
       18      2   -> OS__EnterIntStack
       18      2   -> OS__LeaveIntStack


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      68  ?Subroutine0
      68  ?Subroutine1
     242  IntHandler_RX_USART0
       4  IntHandler_RX_USART0::??INTVEC 72
     250  IntHandler_RX_USART1
       4  IntHandler_RX_USART1::??INTVEC 120
      86  IntHandler_TX_USART0
       4  IntHandler_TX_USART0::??INTVEC 80
      96  IntHandler_TX_USART1
       4  IntHandler_TX_USART1::??INTVEC 128
     142  IntHandler_UDRE_USART0
       4  IntHandler_UDRE_USART0::??INTVEC 76
     168  IntHandler_UDRE_USART1
       4  IntHandler_UDRE_USART1::??INTVEC 124
       1  _A_PORTE
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UDR0
       1  _A_UDR1

 
     7 bytes in segment ABSOLUTE
 1 120 bytes in segment CODE
    24 bytes in segment INTVEC
 
 1 120 bytes of CODE memory (+ 24 bytes shared)
     0 bytes of DATA memory (+  7 bytes shared)

Errors: none
Warnings: none
