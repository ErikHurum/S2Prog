###############################################################################
#
# IAR C/C++ Compiler V7.30.1.1615 for Microchip AVR       02/Mar/2021  16:10:36
# Copyright 1996-2020 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB_ATmega1281\Src\ExtInt.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EWF1F3.tmp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\ExtInt.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1
#        -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List -y --initializers_in_flash
#        --debug -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB_ATmega1281\INC\\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\ --eeprom_size 4096
#        --clib -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\ExtInt.lst
#    Object file  =  D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\ExtInt.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\ExtInt.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1281.h" 
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          
     11          #if USE_16552_DRIVER_TASK == 1

   \                                 In  segment CODE, align 2, keep-with-next
     12          static void
     13          _16552_0_irq_handler(void)
   \                     _16552_0_irq_handler:
     14          {
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006                      REQUIRE ?Register_R4_is_cg_reg
     15            UART16552[0].TxStatus = (U0_IIR & 0x0f);          // reason for interrupt
   \   00000006   9100220A           LDS     R16, 8714
   \   0000000A   700F               ANDI    R16, 0x0F
   \   0000000C   9300....           STS     (UART16552 + 8), R16
   \   00000010   EFAA               LDI     R26, 250
   \   00000012   E0B0               LDI     R27, 0
   \   00000014   2444               CLR     R4
   \   00000016   9443               INC     R4
     16            do {
     17              switch (UART16552[0].TxStatus) {
   \                     ??_16552_0_irq_handler_0:
   \   00000018   9100....           LDS     R16, (UART16552 + 8)
   \   0000001C   2300               TST     R16
   \   0000001E   F409               BRNE    $+2+2
   \   00000020   C0AC               RJMP    ??_16552_0_irq_handler_1
   \   00000022   5002               SUBI    R16, 2
   \   00000024   F051               BREQ    ??_16552_0_irq_handler_2
   \   00000026   5002               SUBI    R16, 2
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C053               RJMP    ??_16552_0_irq_handler_3
   \   0000002C   5002               SUBI    R16, 2
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C0A1               RJMP    ??_16552_0_irq_handler_4
   \   00000032   5006               SUBI    R16, 6
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C04D               RJMP    ??_16552_0_irq_handler_3
   \   00000038   C0A2               RJMP    ??_16552_0_irq_handler_5
     18              case 0x02 :             // transmit holding reg emty
     19                if (UART16552[0].TxCount == 0) {
   \                     ??_16552_0_irq_handler_2:
   \   0000003A   9100....           LDS     R16, (UART16552 + 6)
   \   0000003E   9110....           LDS     R17, (UART16552 + 7)
   \   00000042   2B01               OR      R16, R17
   \   00000044   F451               BRNE    ??_16552_0_irq_handler_6
     20                  U0_MCR &= ~RTS;        // set RTS off
   \   00000046   9100220C           LDS     R16, 8716
   \   0000004A   7F0D               ANDI    R16, 0xFD
   \   0000004C   9300220C           STS     8716, R16
     21                  OS_StopTimer(&TimerUART0);                    // and stop timer
   \   00000050   ....               LDI     R16, LOW(TimerUART0)
   \   00000052   ....               LDI     R17, (TimerUART0) >> 8
   \   00000054   ........           CALL    OS_StopTimer
   \   00000058   C092               RJMP    ??_16552_0_irq_handler_5
     22                } else {
     23                  for (UART16552[0].TxSeqCnt = 0;( UART16552[0].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[0].TxCount > 0 ); UART16552[0].TxSeqCnt++, --UART16552[0].TxCount) {
   \                     ??_16552_0_irq_handler_6:
   \   0000005A   93B0....           STS     (UART16552 + 9), R27
   \                     ??_16552_0_irq_handler_7:
   \   0000005E   9100....           LDS     R16, (UART16552 + 6)
   \   00000062   9110....           LDS     R17, (UART16552 + 7)
   \   00000066   2B01               OR      R16, R17
   \   00000068   F409               BRNE    $+2+2
   \   0000006A   C089               RJMP    ??_16552_0_irq_handler_5
     24                    U0_THR = UART16552[0].pTxBuffer[UART16552[0].TxLast++];
   \   0000006C   9100....           LDS     R16, (UART16552 + 4)
   \   00000070   9110....           LDS     R17, (UART16552 + 5)
   \   00000074   91E0....           LDS     R30, UART16552
   \   00000078   91F0....           LDS     R31, (UART16552 + 1)
   \   0000007C   0FE0               ADD     R30, R16
   \   0000007E   1FF1               ADC     R31, R17
   \   00000080   8100               LD      R16, Z
   \   00000082   93002208           STS     8712, R16
   \   00000086   9100....           LDS     R16, (UART16552 + 4)
   \   0000008A   9110....           LDS     R17, (UART16552 + 5)
   \   0000008E   5F0F               SUBI    R16, 255
   \   00000090   4F1F               SBCI    R17, 255
   \   00000092   9300....           STS     (UART16552 + 4), R16
   \   00000096   9310....           STS     (UART16552 + 5), R17
     25                  }
   \   0000009A   9100....           LDS     R16, (UART16552 + 9)
   \   0000009E   9503               INC     R16
   \   000000A0   9300....           STS     (UART16552 + 9), R16
   \   000000A4   9100....           LDS     R16, (UART16552 + 6)
   \   000000A8   9110....           LDS     R17, (UART16552 + 7)
   \   000000AC   5001               SUBI    R16, 1
   \   000000AE   4010               SBCI    R17, 0
   \   000000B0   9300....           STS     (UART16552 + 6), R16
   \   000000B4   9310....           STS     (UART16552 + 7), R17
   \   000000B8   9100....           LDS     R16, (UART16552 + 9)
   \   000000BC   3100               CPI     R16, 16
   \   000000BE   F008               BRCS    $+2+2
   \   000000C0   C05E               RJMP    ??_16552_0_irq_handler_5
   \   000000C2   CFCD               RJMP    ??_16552_0_irq_handler_7
     26                }
     27                break;
     28              case 0x04 :             // Receive data available    
     29              case 0x0C :             // or caracter timeout (FIFO)
     30                while (U0_LSR & DATA_READY) {
     31          
     32                  UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] = U0_RBR;             // Read the character 
     33          
     34                  if (UART16552[0].RxState != HANDLE) {                 // ok to receive? 
     35                    switch (UART16552[0].RxState) {                   // Yes, check state
     36                      case SYNC :
     37                        if ( UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] == ANPRO1_SYN) {
     38                          UART16552[0].SyncCnt ++ ;                 // count sync
   \                     ??_16552_0_irq_handler_8:
   \   000000C4   9503               INC     R16
   \   000000C6   9300....           STS     (UART16552 + 19), R16
     39                          UART16552[0].RxFirst = 0;                 // start at start of buff
   \   000000CA   93B0....           STS     (UART16552 + 12), R27
   \   000000CE   93B0....           STS     (UART16552 + 13), R27
     40                        } else if (UART16552[0].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??_16552_0_irq_handler_3:
   \   000000D2   9100220D           LDS     R16, 8717
   \   000000D6   FF00               SBRS    R16, 0
   \   000000D8   C052               RJMP    ??_16552_0_irq_handler_5
   \   000000DA   91002208           LDS     R16, 8712
   \   000000DE   91E0....           LDS     R30, (UART16552 + 10)
   \   000000E2   91F0....           LDS     R31, (UART16552 + 11)
   \   000000E6   9120....           LDS     R18, (UART16552 + 12)
   \   000000EA   9130....           LDS     R19, (UART16552 + 13)
   \   000000EE   0FE2               ADD     R30, R18
   \   000000F0   1FF3               ADC     R31, R19
   \   000000F2   8300               ST      Z, R16
   \   000000F4   9100....           LDS     R16, (UART16552 + 18)
   \   000000F8   300A               CPI     R16, 10
   \   000000FA   F359               BREQ    ??_16552_0_irq_handler_3
   \   000000FC   2300               TST     R16
   \   000000FE   F549               BRNE    ??_16552_0_irq_handler_9
   \   00000100   91E0....           LDS     R30, (UART16552 + 10)
   \   00000104   91F0....           LDS     R31, (UART16552 + 11)
   \   00000108   9100....           LDS     R16, (UART16552 + 12)
   \   0000010C   9110....           LDS     R17, (UART16552 + 13)
   \   00000110   0FE0               ADD     R30, R16
   \   00000112   1FF1               ADC     R31, R17
   \   00000114   8100               LD      R16, Z
   \   00000116   3002               CPI     R16, 2
   \   00000118   9100....           LDS     R16, (UART16552 + 19)
   \   0000011C   F299               BREQ    ??_16552_0_irq_handler_8
   \   0000011E   3002               CPI     R16, 2
   \   00000120   93B0....           STS     (UART16552 + 19), R27
   \   00000124   F2B0               BRCS    ??_16552_0_irq_handler_3
     41                          UART16552[0].SyncCnt = 0 ;                // reset counter
     42                          UART16552[0].RxState = HEADER ;
   \   00000126   9240....           STS     (UART16552 + 18), R4
     43                          UART16552[0].RxLast = 0 ;
   \   0000012A   93B0....           STS     (UART16552 + 14), R27
   \   0000012E   93B0....           STS     (UART16552 + 15), R27
     44                          UART16552[0].RxTimeout = RX_TO_TIME ;   // reset timeout
   \   00000132   93A0....           STS     (UART16552 + 20), R26
   \   00000136   93B0....           STS     (UART16552 + 21), R27
     45                          UART16552[0].RxFirst++ ;                 //  1. char OK, start on next
   \   0000013A   9100....           LDS     R16, (UART16552 + 12)
   \   0000013E   5F0F               SUBI    R16, 255
   \   00000140   4F1F               SBCI    R17, 255
   \   00000142   9300....           STS     (UART16552 + 12), R16
   \   00000146   9310....           STS     (UART16552 + 13), R17
     46                          ReceivePacketUart16552(0) ;              // Check package
   \   0000014A   E000               LDI     R16, 0
   \                     ??_16552_0_irq_handler_10:
   \   0000014C   ........           CALL    ReceivePacketUart16552
   \   00000150   CFC0               RJMP    ??_16552_0_irq_handler_3
     47                        } else {
     48                          UART16552[0].SyncCnt = 0 ;                // start over once more
     49                        }
     50                        break;
     51                      default :
     52                        if ((++UART16552[0].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??_16552_0_irq_handler_9:
   \   00000152   9100....           LDS     R16, (UART16552 + 12)
   \   00000156   9110....           LDS     R17, (UART16552 + 13)
   \   0000015A   5F0F               SUBI    R16, 255
   \   0000015C   4F1F               SBCI    R17, 255
   \   0000015E   9300....           STS     (UART16552 + 12), R16
   \   00000162   9310....           STS     (UART16552 + 13), R17
   \   00000166   3709               CPI     R16, 121
   \   00000168   4010               SBCI    R17, 0
   \   0000016A   E000               LDI     R16, 0
   \   0000016C   F378               BRCS    ??_16552_0_irq_handler_10
     53                          GoToSyncUART16552(0) ;                       // go to sync mode
   \   0000016E   ........           CALL    GoToSyncUART16552
   \   00000172   CFAF               RJMP    ??_16552_0_irq_handler_3
     54                        } else {
     55                          ReceivePacketUart16552(0) ;              // Check package
     56                        }
     57                        break ;   
     58                    }
     59                  }
     60                } 
     61                break;
     62              case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
     63                U0_LSR;      // Dummy read to empty register        
   \                     ??_16552_0_irq_handler_4:
   \   00000174   9100220D           LDS     R16, 8717
     64                break;
   \   00000178   C002               RJMP    ??_16552_0_irq_handler_5
     65              case 0x00 :                 // Modem status.
     66                U0_MSR;      // Dummy read to empty register           
   \                     ??_16552_0_irq_handler_1:
   \   0000017A   9100220E           LDS     R16, 8718
     67                break;
     68              }
     69              UART16552[0].TxStatus = (U0_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??_16552_0_irq_handler_5:
   \   0000017E   9100220A           LDS     R16, 8714
   \   00000182   700F               ANDI    R16, 0x0F
   \   00000184   9300....           STS     (UART16552 + 8), R16
     70              // check again before exit to avoid lost int. and hang
     71            } while ((UART16552[0].TxStatus & 0x01) != 0x01) ;  
   \   00000188   FF00               SBRS    R16, 0
   \   0000018A   CF46               RJMP    ??_16552_0_irq_handler_0
     72          }
   \   0000018C   91A9               LD      R26, Y+
   \   0000018E   91B9               LD      R27, Y+
   \   00000190   9049               LD      R4, Y+
   \   00000192   9508               RET
     73          

   \                                 In  segment CODE, align 2, keep-with-next
     74          static void
     75          _16552_1_irq_handler(void)
   \                     _16552_1_irq_handler:
     76          {
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006                      REQUIRE ?Register_R4_is_cg_reg
     77            UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt
   \   00000006   91002202           LDS     R16, 8706
   \   0000000A   700F               ANDI    R16, 0x0F
   \   0000000C   9300....           STS     (UART16552 + 34), R16
   \   00000010   EFAA               LDI     R26, 250
   \   00000012   E0B0               LDI     R27, 0
   \   00000014   2444               CLR     R4
   \   00000016   9443               INC     R4
     78            do {
     79              switch (UART16552[1].TxStatus) {
   \                     ??_16552_1_irq_handler_0:
   \   00000018   9100....           LDS     R16, (UART16552 + 34)
   \   0000001C   2300               TST     R16
   \   0000001E   F409               BRNE    $+2+2
   \   00000020   C0AC               RJMP    ??_16552_1_irq_handler_1
   \   00000022   5002               SUBI    R16, 2
   \   00000024   F051               BREQ    ??_16552_1_irq_handler_2
   \   00000026   5002               SUBI    R16, 2
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C053               RJMP    ??_16552_1_irq_handler_3
   \   0000002C   5002               SUBI    R16, 2
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C0A1               RJMP    ??_16552_1_irq_handler_4
   \   00000032   5006               SUBI    R16, 6
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C04D               RJMP    ??_16552_1_irq_handler_3
   \   00000038   C0A2               RJMP    ??_16552_1_irq_handler_5
     80              case 0x02 :             // transmit holding reg emty
     81                if (UART16552[1].TxCount == 0) {
   \                     ??_16552_1_irq_handler_2:
   \   0000003A   9100....           LDS     R16, (UART16552 + 32)
   \   0000003E   9110....           LDS     R17, (UART16552 + 33)
   \   00000042   2B01               OR      R16, R17
   \   00000044   F451               BRNE    ??_16552_1_irq_handler_6
     82                  U1_MCR &= ~RTS;        // set RTS off
   \   00000046   91002204           LDS     R16, 8708
   \   0000004A   7F0D               ANDI    R16, 0xFD
   \   0000004C   93002204           STS     8708, R16
     83                  OS_StopTimer(&TimerUART1);                    // and stop timer
   \   00000050   ....               LDI     R16, LOW(TimerUART1)
   \   00000052   ....               LDI     R17, (TimerUART1) >> 8
   \   00000054   ........           CALL    OS_StopTimer
   \   00000058   C092               RJMP    ??_16552_1_irq_handler_5
     84                } else {
     85                  for (UART16552[1].TxSeqCnt = 0;( UART16552[1].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[1].TxCount > 0 ); UART16552[1].TxSeqCnt++, UART16552[1].TxCount--) {
   \                     ??_16552_1_irq_handler_6:
   \   0000005A   93B0....           STS     (UART16552 + 35), R27
   \                     ??_16552_1_irq_handler_7:
   \   0000005E   9100....           LDS     R16, (UART16552 + 32)
   \   00000062   9110....           LDS     R17, (UART16552 + 33)
   \   00000066   2B01               OR      R16, R17
   \   00000068   F409               BRNE    $+2+2
   \   0000006A   C089               RJMP    ??_16552_1_irq_handler_5
     86                    U1_THR = UART16552[1].pTxBuffer[UART16552[1].TxLast++] ;
   \   0000006C   91E0....           LDS     R30, (UART16552 + 26)
   \   00000070   91F0....           LDS     R31, (UART16552 + 27)
   \   00000074   9100....           LDS     R16, (UART16552 + 30)
   \   00000078   9110....           LDS     R17, (UART16552 + 31)
   \   0000007C   0FE0               ADD     R30, R16
   \   0000007E   1FF1               ADC     R31, R17
   \   00000080   8100               LD      R16, Z
   \   00000082   93002200           STS     8704, R16
   \   00000086   9100....           LDS     R16, (UART16552 + 30)
   \   0000008A   9110....           LDS     R17, (UART16552 + 31)
   \   0000008E   5F0F               SUBI    R16, 255
   \   00000090   4F1F               SBCI    R17, 255
   \   00000092   9300....           STS     (UART16552 + 30), R16
   \   00000096   9310....           STS     (UART16552 + 31), R17
     87                  }
   \   0000009A   9100....           LDS     R16, (UART16552 + 35)
   \   0000009E   9503               INC     R16
   \   000000A0   9300....           STS     (UART16552 + 35), R16
   \   000000A4   9100....           LDS     R16, (UART16552 + 32)
   \   000000A8   9110....           LDS     R17, (UART16552 + 33)
   \   000000AC   5001               SUBI    R16, 1
   \   000000AE   4010               SBCI    R17, 0
   \   000000B0   9300....           STS     (UART16552 + 32), R16
   \   000000B4   9310....           STS     (UART16552 + 33), R17
   \   000000B8   9100....           LDS     R16, (UART16552 + 35)
   \   000000BC   3100               CPI     R16, 16
   \   000000BE   F008               BRCS    $+2+2
   \   000000C0   C05E               RJMP    ??_16552_1_irq_handler_5
   \   000000C2   CFCD               RJMP    ??_16552_1_irq_handler_7
     88                }
     89                break;
     90              case 0x04 :             // Receive data available    
     91              case 0x0C :             // or caracter timeout (FIFO)
     92                while (U1_LSR & DATA_READY) {
     93          
     94                  UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] = U1_RBR;          // Read the character 
     95          
     96                  if (UART16552[1].RxState != HANDLE) {        // ok to receive? 
     97                    switch (UART16552[1].RxState) {                   // Yes, check state
     98                      case SYNC :
     99                        if ( UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] == ANPRO1_SYN) {
    100                          UART16552[1].SyncCnt ++ ;                 // count sync
   \                     ??_16552_1_irq_handler_8:
   \   000000C4   9503               INC     R16
   \   000000C6   9300....           STS     (UART16552 + 45), R16
    101                          UART16552[1].RxFirst = 0;                 // start at start of buff
   \   000000CA   93B0....           STS     (UART16552 + 38), R27
   \   000000CE   93B0....           STS     (UART16552 + 39), R27
    102                        } else if (UART16552[1].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??_16552_1_irq_handler_3:
   \   000000D2   91002205           LDS     R16, 8709
   \   000000D6   FF00               SBRS    R16, 0
   \   000000D8   C052               RJMP    ??_16552_1_irq_handler_5
   \   000000DA   91002200           LDS     R16, 8704
   \   000000DE   91E0....           LDS     R30, (UART16552 + 36)
   \   000000E2   91F0....           LDS     R31, (UART16552 + 37)
   \   000000E6   9120....           LDS     R18, (UART16552 + 38)
   \   000000EA   9130....           LDS     R19, (UART16552 + 39)
   \   000000EE   0FE2               ADD     R30, R18
   \   000000F0   1FF3               ADC     R31, R19
   \   000000F2   8300               ST      Z, R16
   \   000000F4   9100....           LDS     R16, (UART16552 + 44)
   \   000000F8   300A               CPI     R16, 10
   \   000000FA   F359               BREQ    ??_16552_1_irq_handler_3
   \   000000FC   2300               TST     R16
   \   000000FE   F549               BRNE    ??_16552_1_irq_handler_9
   \   00000100   91E0....           LDS     R30, (UART16552 + 36)
   \   00000104   91F0....           LDS     R31, (UART16552 + 37)
   \   00000108   9100....           LDS     R16, (UART16552 + 38)
   \   0000010C   9110....           LDS     R17, (UART16552 + 39)
   \   00000110   0FE0               ADD     R30, R16
   \   00000112   1FF1               ADC     R31, R17
   \   00000114   8100               LD      R16, Z
   \   00000116   3002               CPI     R16, 2
   \   00000118   9100....           LDS     R16, (UART16552 + 45)
   \   0000011C   F299               BREQ    ??_16552_1_irq_handler_8
   \   0000011E   3002               CPI     R16, 2
   \   00000120   93B0....           STS     (UART16552 + 45), R27
   \   00000124   F2B0               BRCS    ??_16552_1_irq_handler_3
    103                          UART16552[1].SyncCnt = 0 ;                // reset counter
    104                          UART16552[1].RxState = HEADER ;
   \   00000126   9240....           STS     (UART16552 + 44), R4
    105                          UART16552[1].RxLast = 0 ;
   \   0000012A   93B0....           STS     (UART16552 + 40), R27
   \   0000012E   93B0....           STS     (UART16552 + 41), R27
    106                          UART16552[1].RxTimeout = RX_TO_TIME ;     // reset timeout
   \   00000132   93A0....           STS     (UART16552 + 46), R26
   \   00000136   93B0....           STS     (UART16552 + 47), R27
    107                          UART16552[1].RxFirst++ ;                  //  1. char OK, start on next
   \   0000013A   9100....           LDS     R16, (UART16552 + 38)
   \   0000013E   5F0F               SUBI    R16, 255
   \   00000140   4F1F               SBCI    R17, 255
   \   00000142   9300....           STS     (UART16552 + 38), R16
   \   00000146   9310....           STS     (UART16552 + 39), R17
    108                          ReceivePacketUart16552(1) ;               // Check package
   \   0000014A   E001               LDI     R16, 1
   \                     ??_16552_1_irq_handler_10:
   \   0000014C   ........           CALL    ReceivePacketUart16552
   \   00000150   CFC0               RJMP    ??_16552_1_irq_handler_3
    109                        } else {
    110                          UART16552[1].SyncCnt = 0 ;                // start over once more
    111                        }
    112                        break;
    113                      default :
    114                        if ((++UART16552[1].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??_16552_1_irq_handler_9:
   \   00000152   9100....           LDS     R16, (UART16552 + 38)
   \   00000156   9110....           LDS     R17, (UART16552 + 39)
   \   0000015A   5F0F               SUBI    R16, 255
   \   0000015C   4F1F               SBCI    R17, 255
   \   0000015E   9300....           STS     (UART16552 + 38), R16
   \   00000162   9310....           STS     (UART16552 + 39), R17
   \   00000166   3709               CPI     R16, 121
   \   00000168   4010               SBCI    R17, 0
   \   0000016A   E001               LDI     R16, 1
   \   0000016C   F378               BRCS    ??_16552_1_irq_handler_10
    115                          GoToSyncUART16552(1) ;                       // go to sync mode
   \   0000016E   ........           CALL    GoToSyncUART16552
   \   00000172   CFAF               RJMP    ??_16552_1_irq_handler_3
    116                        } else {
    117                          ReceivePacketUart16552(1) ;              // Check package
    118                        }
    119                        break ;   
    120                    }
    121                  }
    122                }
    123                break;
    124              case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    125                U1_LSR;      // Dummy read to empty register        
   \                     ??_16552_1_irq_handler_4:
   \   00000174   91002205           LDS     R16, 8709
    126                break;
   \   00000178   C002               RJMP    ??_16552_1_irq_handler_5
    127              case 0x00 :                 // Modem status.
    128                U1_MSR;      // Dummy read to empty register           
   \                     ??_16552_1_irq_handler_1:
   \   0000017A   91002206           LDS     R16, 8710
    129                break;
    130              }
    131              UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??_16552_1_irq_handler_5:
   \   0000017E   91002202           LDS     R16, 8706
   \   00000182   700F               ANDI    R16, 0x0F
   \   00000184   9300....           STS     (UART16552 + 34), R16
    132              // check again before exit to avoid lost int. and hang
    133            } while ((UART16552[1].TxStatus & 0x01) != 0x01);  
   \   00000188   FF00               SBRS    R16, 0
   \   0000018A   CF46               RJMP    ??_16552_1_irq_handler_0
    134          }
   \   0000018C   91A9               LD      R26, Y+
   \   0000018E   91B9               LD      R27, Y+
   \   00000190   9049               LD      R4, Y+
   \   00000192   9508               RET
    135          

   \                                 In  segment CODE, align 2, keep-with-next
    136          static void
    137          _16552_driver_task(void)
   \                     _16552_driver_task:
    138          {
   \   00000000   938A               ST      -Y, R24
    139            char status;
    140          
    141            while(1)
    142            {
    143              status = OS_WaitEventTimed(0x01 | 0x02, 500);
   \                     ??_16552_driver_task_0:
   \   00000002   EF24               LDI     R18, 244
   \   00000004   E031               LDI     R19, 1
   \   00000006   E003               LDI     R16, 3
   \   00000008   ........           CALL    OS_WaitEventTimed
   \   0000000C   2F80               MOV     R24, R16
    144          
    145              if (status & 0x01)
   \   0000000E   FB00               BST     R16, 0
   \   00000010   F40E               BRTC    ??_16552_driver_task_1
    146              {
    147                _16552_0_irq_handler();
   \   00000012   ....               RCALL   _16552_0_irq_handler
    148              }
    149          
    150              if (status & 0x02)
   \                     ??_16552_driver_task_1:
   \   00000014   FB81               BST     R24, 1
   \   00000016   F7AE               BRTC    ??_16552_driver_task_0
    151              {
    152                _16552_1_irq_handler();
   \   00000018   ....               RCALL   _16552_1_irq_handler
   \   0000001A   CFF3               RJMP    ??_16552_driver_task_0
    153              }
    154            }
    155          }
    156          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    157          static OS_TASK TCB_16552_DRIVER;
   \                     TCB_16552_DRIVER:
   \   00000000                      DS8 22

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    158          static OS_STACKPTR int stack[50]; /* Task stacks */
   \                     stack:
   \   00000000                      DS8 100
    159          

   \                                 In  segment CODE, align 2, keep-with-next
    160          void
    161          _16552_driver_task_init(void)
   \                     _16552_driver_task_init:
    162          {
    163          
    164            OS_CREATETASK(&TCB_16552_DRIVER, "16552_DRIVER", _16552_driver_task, 90, stack);
   \   00000000   E002               LDI     R16, 2
   \   00000002   E010               LDI     R17, 0
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   E604               LDI     R16, 100
   \   0000000A   931A               ST      -Y, R17
   \   0000000C   930A               ST      -Y, R16
   \   0000000E   ....               LDI     R16, LOW(stack)
   \   00000010   ....               LDI     R17, (stack) >> 8
   \   00000012   931A               ST      -Y, R17
   \   00000014   930A               ST      -Y, R16
   \   00000016   ....               LDI     R22, LOW(_16552_driver_task/2)
   \   00000018   ....               LDI     R23, (_16552_driver_task/2) >> 8
   \   0000001A   E54A               LDI     R20, 90
   \   0000001C   ....               LDI     R18, LOW(`?<Constant "16552_DRIVER">`)
   \   0000001E   ....               LDI     R19, (`?<Constant "16552_DRIVER">`) >> 8
   \   00000020   ....               LDI     R16, LOW(TCB_16552_DRIVER)
   \   00000022   ....               LDI     R17, (TCB_16552_DRIVER) >> 8
   \   00000024   ........           JMP     OS_CreateTask_D
    165          }
    166          #endif
    167          
    168          /*************************************************************************
    169          *
    170          *  External int 0 (UART PC16554 on AN-ZB485 or ADready on AN-ZBANA)
    171          *
    172          *************************************************************************/
    173          #pragma vector=INT0_vect

   \                                 In  segment CODE, align 2, keep-with-next
    174          __interrupt void IntHandler_INT0( void ){               //Int handler for ext int 0
   \                     IntHandler_INT0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   93FA               ST      -Y, R31
   \   0000000A   93EA               ST      -Y, R30
   \   0000000C   923A               ST      -Y, R3
   \   0000000E   922A               ST      -Y, R2
   \   00000010   921A               ST      -Y, R1
   \   00000012   920A               ST      -Y, R0
   \   00000014   937A               ST      -Y, R23
   \   00000016   936A               ST      -Y, R22
   \   00000018   935A               ST      -Y, R21
   \   0000001A   934A               ST      -Y, R20
   \   0000001C   933A               ST      -Y, R19
   \   0000001E   932A               ST      -Y, R18
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   B78F               IN      R24, 0x3F
   \   00000026   B79B               IN      R25, 0x3B
    175          
    176              // OBS!!!
    177              // Uses UART16552[].TxStatus as intreason and
    178              // UART16552[].TxSeqCnt as counter because these needs to be globale 
    179              // by using OS_EnterIntStack()
    180          
    181              
    182              OS_EnterInterrupt();
   \   00000028   9100....           LDS     R16, OS_InInt
   \   0000002C   9503               INC     R16
   \   0000002E   9300....           STS     OS_InInt, R16
   \   00000032   9100....           LDS     R16, OS_Counters
   \   00000036   9503               INC     R16
   \   00000038   9300....           STS     OS_Counters, R16
   \   0000003C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000040   9503               INC     R16
   \   00000042   9300....           STS     (OS_Counters + 1), R16
    183              OS_EnterIntStack();
   \   00000046   94F8               CLI
   \   00000048   ........           CALL    OS__EnterIntStack
   \   0000004C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000050   7F00               ANDI    R16, 0xF0
   \   00000052   F021               BREQ    ??IntHandler_INT0_0
   \   00000054   E909               LDI     R16, 153
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    OS_Error
   \                     ??IntHandler_INT0_0:
   \   0000005C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000060   2300               TST     R16
   \   00000062   F409               BRNE    ??IntHandler_INT0_1
   \   00000064   9478               SEI
    184          
    185              switch (UnitID) {
   \                     ??IntHandler_INT0_1:
   \   00000066   9100....           LDS     R16, UnitID
   \   0000006A   2300               TST     R16
   \   0000006C   F021               BREQ    ??IntHandler_INT0_2
   \   0000006E   950A               DEC     R16
   \   00000070   F409               BRNE    $+2+2
   \   00000072   C0C8               RJMP    ??IntHandler_INT0_3
   \   00000074   C0CC               RJMP    ??IntHandler_INT0_4
    186              case 0x00:                  // AN-ZB485  
    187          #if USE_16552_DRIVER_TASK == 1
    188                    UART16552[0].TxStatus = (U0_IIR & 0x0f);          // reason for interrupt
   \                     ??IntHandler_INT0_2:
   \   00000076   9100220A           LDS     R16, 8714
   \   0000007A   700F               ANDI    R16, 0x0F
   \   0000007C   9300....           STS     (UART16552 + 8), R16
   \   00000080   EFAA               LDI     R26, 250
   \   00000082   E0B0               LDI     R27, 0
    189                  do {
    190                      switch (UART16552[0].TxStatus) {
   \                     ??IntHandler_INT0_5:
   \   00000084   9100....           LDS     R16, (UART16552 + 8)
   \   00000088   2300               TST     R16
   \   0000008A   F409               BRNE    $+2+2
   \   0000008C   C0B1               RJMP    ??IntHandler_INT0_6
   \   0000008E   5002               SUBI    R16, 2
   \   00000090   F051               BREQ    ??IntHandler_INT0_7
   \   00000092   5002               SUBI    R16, 2
   \   00000094   F409               BRNE    $+2+2
   \   00000096   C055               RJMP    ??IntHandler_INT0_8
   \   00000098   5002               SUBI    R16, 2
   \   0000009A   F409               BRNE    $+2+2
   \   0000009C   C0A6               RJMP    ??IntHandler_INT0_9
   \   0000009E   5006               SUBI    R16, 6
   \   000000A0   F409               BRNE    $+2+2
   \   000000A2   C04F               RJMP    ??IntHandler_INT0_8
   \   000000A4   C0A7               RJMP    ??IntHandler_INT0_10
    191                      case 0x02 :             // transmit holding reg emty
    192                          if (UART16552[0].TxCount == 0) {
   \                     ??IntHandler_INT0_7:
   \   000000A6   9100....           LDS     R16, (UART16552 + 6)
   \   000000AA   9110....           LDS     R17, (UART16552 + 7)
   \   000000AE   2B01               OR      R16, R17
   \   000000B0   F451               BRNE    ??IntHandler_INT0_11
    193                              U0_MCR &= ~RTS;        // set RTS off
   \   000000B2   9100220C           LDS     R16, 8716
   \   000000B6   7F0D               ANDI    R16, 0xFD
   \   000000B8   9300220C           STS     8716, R16
    194                              OS_StopTimer(&TimerUART0);                    // and stop timer
   \   000000BC   ....               LDI     R16, LOW(TimerUART0)
   \   000000BE   ....               LDI     R17, (TimerUART0) >> 8
   \   000000C0   ........           CALL    OS_StopTimer
   \   000000C4   C097               RJMP    ??IntHandler_INT0_10
    195                          } else {
    196                              for (UART16552[0].TxSeqCnt = 0;( UART16552[0].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[0].TxCount > 0 ); UART16552[0].TxSeqCnt++, --UART16552[0].TxCount) {
   \                     ??IntHandler_INT0_11:
   \   000000C6   93B0....           STS     (UART16552 + 9), R27
   \                     ??IntHandler_INT0_12:
   \   000000CA   9100....           LDS     R16, (UART16552 + 6)
   \   000000CE   9110....           LDS     R17, (UART16552 + 7)
   \   000000D2   2B01               OR      R16, R17
   \   000000D4   F409               BRNE    $+2+2
   \   000000D6   C08E               RJMP    ??IntHandler_INT0_10
    197                                  U0_THR = UART16552[0].pTxBuffer[UART16552[0].TxLast++];
   \   000000D8   9100....           LDS     R16, (UART16552 + 4)
   \   000000DC   9110....           LDS     R17, (UART16552 + 5)
   \   000000E0   91E0....           LDS     R30, UART16552
   \   000000E4   91F0....           LDS     R31, (UART16552 + 1)
   \   000000E8   0FE0               ADD     R30, R16
   \   000000EA   1FF1               ADC     R31, R17
   \   000000EC   8100               LD      R16, Z
   \   000000EE   93002208           STS     8712, R16
   \   000000F2   9100....           LDS     R16, (UART16552 + 4)
   \   000000F6   9110....           LDS     R17, (UART16552 + 5)
   \   000000FA   5F0F               SUBI    R16, 255
   \   000000FC   4F1F               SBCI    R17, 255
   \   000000FE   9300....           STS     (UART16552 + 4), R16
   \   00000102   9310....           STS     (UART16552 + 5), R17
    198                              }
   \   00000106   9100....           LDS     R16, (UART16552 + 9)
   \   0000010A   9503               INC     R16
   \   0000010C   9300....           STS     (UART16552 + 9), R16
   \   00000110   9100....           LDS     R16, (UART16552 + 6)
   \   00000114   9110....           LDS     R17, (UART16552 + 7)
   \   00000118   5001               SUBI    R16, 1
   \   0000011A   4010               SBCI    R17, 0
   \   0000011C   9300....           STS     (UART16552 + 6), R16
   \   00000120   9310....           STS     (UART16552 + 7), R17
   \   00000124   9100....           LDS     R16, (UART16552 + 9)
   \   00000128   3100               CPI     R16, 16
   \   0000012A   F008               BRCS    $+2+2
   \   0000012C   C063               RJMP    ??IntHandler_INT0_10
   \   0000012E   CFCD               RJMP    ??IntHandler_INT0_12
    199                          }
    200                          break;
    201                      case 0x04 :             // Receive data available    
    202                      case 0x0C :             // or caracter timeout (FIFO)
    203                          while (U0_LSR & DATA_READY) {
    204          
    205                              UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] = U0_RBR;             // Read the character 
    206          
    207                              if (UART16552[0].RxState != HANDLE) {                 // ok to receive? 
    208                                  switch (UART16552[0].RxState) {                   // Yes, check state
    209                                  case SYNC :
    210                                      if ( UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] == ANPRO1_SYN) {
    211                                          UART16552[0].SyncCnt ++ ;                 // count sync
   \                     ??IntHandler_INT0_13:
   \   00000130   9100....           LDS     R16, (UART16552 + 19)
   \   00000134   9503               INC     R16
   \   00000136   9300....           STS     (UART16552 + 19), R16
    212                                          UART16552[0].RxFirst = 0;                 // start at start of buff
   \   0000013A   93B0....           STS     (UART16552 + 12), R27
   \   0000013E   93B0....           STS     (UART16552 + 13), R27
    213                                      } else if (UART16552[0].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??IntHandler_INT0_8:
   \   00000142   9100220D           LDS     R16, 8717
   \   00000146   FF00               SBRS    R16, 0
   \   00000148   C055               RJMP    ??IntHandler_INT0_10
   \   0000014A   91002208           LDS     R16, 8712
   \   0000014E   91E0....           LDS     R30, (UART16552 + 10)
   \   00000152   91F0....           LDS     R31, (UART16552 + 11)
   \   00000156   9120....           LDS     R18, (UART16552 + 12)
   \   0000015A   9130....           LDS     R19, (UART16552 + 13)
   \   0000015E   0FE2               ADD     R30, R18
   \   00000160   1FF3               ADC     R31, R19
   \   00000162   8300               ST      Z, R16
   \   00000164   9100....           LDS     R16, (UART16552 + 18)
   \   00000168   300A               CPI     R16, 10
   \   0000016A   F359               BREQ    ??IntHandler_INT0_8
   \   0000016C   2300               TST     R16
   \   0000016E   F561               BRNE    ??IntHandler_INT0_14
   \   00000170   91E0....           LDS     R30, (UART16552 + 10)
   \   00000174   91F0....           LDS     R31, (UART16552 + 11)
   \   00000178   9100....           LDS     R16, (UART16552 + 12)
   \   0000017C   9110....           LDS     R17, (UART16552 + 13)
   \   00000180   0FE0               ADD     R30, R16
   \   00000182   1FF1               ADC     R31, R17
   \   00000184   8100               LD      R16, Z
   \   00000186   3002               CPI     R16, 2
   \   00000188   F299               BREQ    ??IntHandler_INT0_13
   \   0000018A   9110....           LDS     R17, (UART16552 + 19)
   \   0000018E   3012               CPI     R17, 2
   \   00000190   93B0....           STS     (UART16552 + 19), R27
   \   00000194   F2B0               BRCS    ??IntHandler_INT0_8
    214                                          UART16552[0].SyncCnt = 0 ;                // reset counter
    215                                          UART16552[0].RxState = HEADER ;
   \   00000196   E001               LDI     R16, 1
   \   00000198   9300....           STS     (UART16552 + 18), R16
    216                                          UART16552[0].RxLast = 0 ;
   \   0000019C   93B0....           STS     (UART16552 + 14), R27
   \   000001A0   93B0....           STS     (UART16552 + 15), R27
    217                                          UART16552[0].RxTimeout = RX_TO_TIME ;   // reset timeout
   \   000001A4   93A0....           STS     (UART16552 + 20), R26
   \   000001A8   93B0....           STS     (UART16552 + 21), R27
    218                                          UART16552[0].RxFirst++ ;                 //  1. char OK, start on next
   \   000001AC   9100....           LDS     R16, (UART16552 + 12)
   \   000001B0   9110....           LDS     R17, (UART16552 + 13)
   \   000001B4   5F0F               SUBI    R16, 255
   \   000001B6   4F1F               SBCI    R17, 255
   \   000001B8   9300....           STS     (UART16552 + 12), R16
   \   000001BC   9310....           STS     (UART16552 + 13), R17
    219                                          ReceivePacketUart16552(0) ;              // Check package
   \   000001C0   E000               LDI     R16, 0
   \                     ??IntHandler_INT0_15:
   \   000001C2   ........           CALL    ReceivePacketUart16552
   \   000001C6   CFBD               RJMP    ??IntHandler_INT0_8
    220                                      } else {
    221                                          UART16552[0].SyncCnt = 0 ;                // start over once more
    222                                      }
    223                                      break;
    224                                  default :
    225                                      if ((++UART16552[0].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??IntHandler_INT0_14:
   \   000001C8   9100....           LDS     R16, (UART16552 + 12)
   \   000001CC   9110....           LDS     R17, (UART16552 + 13)
   \   000001D0   5F0F               SUBI    R16, 255
   \   000001D2   4F1F               SBCI    R17, 255
   \   000001D4   9300....           STS     (UART16552 + 12), R16
   \   000001D8   9310....           STS     (UART16552 + 13), R17
   \   000001DC   3709               CPI     R16, 121
   \   000001DE   4010               SBCI    R17, 0
   \   000001E0   E000               LDI     R16, 0
   \   000001E2   F378               BRCS    ??IntHandler_INT0_15
    226                                          GoToSyncUART16552(0) ;                       // go to sync mode
   \   000001E4   ........           CALL    GoToSyncUART16552
   \   000001E8   CFAC               RJMP    ??IntHandler_INT0_8
    227                                      } else {
    228                                          ReceivePacketUart16552(0) ;              // Check package
    229                                      }
    230                                      break ;   
    231                                  }
    232                              }
    233                          } 
    234                          break;
    235                      case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    236                          U0_LSR;      // Dummy read to empty register        
   \                     ??IntHandler_INT0_9:
   \   000001EA   9100220D           LDS     R16, 8717
    237                          break;
   \   000001EE   C002               RJMP    ??IntHandler_INT0_10
    238                      case 0x00 :                 // Modem status.
    239                          U0_MSR;      // Dummy read to empty register           
   \                     ??IntHandler_INT0_6:
   \   000001F0   9100220E           LDS     R16, 8718
    240                          break;
    241                      }
    242                      UART16552[0].TxStatus = (U0_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??IntHandler_INT0_10:
   \   000001F4   9100220A           LDS     R16, 8714
   \   000001F8   700F               ANDI    R16, 0x0F
   \   000001FA   9300....           STS     (UART16552 + 8), R16
    243                                                                                // check again before exit to avoid lost int. and hang
    244                  } while ((UART16552[0].TxStatus & 0x01) != 0x01) ;  
   \   000001FE   FD00               SBRC    R16, 0
   \   00000200   C006               RJMP    ??IntHandler_INT0_4
   \   00000202   CF40               RJMP    ??IntHandler_INT0_5
    245          #else
    246                  OS_SignalEvent(0x01, &TCB_16552_DRIVER) ;
    247          #endif
    248                  break;
    249              case 0x01:                  // AN-ZBANA ADready
    250                  OS_SignalEvent(1, &TCB_AD7715);
   \                     ??IntHandler_INT0_3:
   \   00000204   ....               LDI     R18, LOW(TCB_AD7715)
   \   00000206   ....               LDI     R19, (TCB_AD7715) >> 8
   \   00000208   E001               LDI     R16, 1
   \   0000020A   ........           CALL    OS_SignalEvent
    251                  break;
    252              }
    253              OS_LeaveIntStack();
   \                     ??IntHandler_INT0_4:
   \   0000020E                      REQUIRE ?Subroutine0
   \   0000020E                      ;               // Fall through to label ?Subroutine0
    254              OS_LeaveInterruptNoSwitch();
    255          
    256          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   94F8               CLI
   \   00000002   ........           CALL    OS__LeaveIntStack
   \   00000006   9100....           LDS     R16, OS_InInt
   \   0000000A   2F10               MOV     R17, R16
   \   0000000C   951A               DEC     R17
   \   0000000E   9310....           STS     OS_InInt, R17
   \   00000012   2300               TST     R16
   \   00000014   F421               BRNE    ??Subroutine0_0
   \   00000016   E908               LDI     R16, 152
   \   00000018   E010               LDI     R17, 0
   \   0000001A   ........           CALL    OS_Error
   \                     ??Subroutine0_0:
   \   0000001E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000022   950A               DEC     R16
   \   00000024   9300....           STS     (OS_Counters + 1), R16
   \   00000028   9100....           LDS     R16, OS_Counters
   \   0000002C   950A               DEC     R16
   \   0000002E   9300....           STS     OS_Counters, R16
   \   00000032   BF9B               OUT     0x3B, R25
   \   00000034   BF8F               OUT     0x3F, R24
   \   00000036   9109               LD      R16, Y+
   \   00000038   9119               LD      R17, Y+
   \   0000003A   9129               LD      R18, Y+
   \   0000003C   9139               LD      R19, Y+
   \   0000003E   9149               LD      R20, Y+
   \   00000040   9159               LD      R21, Y+
   \   00000042   9169               LD      R22, Y+
   \   00000044   9179               LD      R23, Y+
   \   00000046   9009               LD      R0, Y+
   \   00000048   9019               LD      R1, Y+
   \   0000004A   9029               LD      R2, Y+
   \   0000004C   9039               LD      R3, Y+
   \   0000004E   91E9               LD      R30, Y+
   \   00000050   91F9               LD      R31, Y+
   \   00000052   9189               LD      R24, Y+
   \   00000054   9199               LD      R25, Y+
   \   00000056   91A9               LD      R26, Y+
   \   00000058   91B9               LD      R27, Y+
   \   0000005A   9518               RETI
    257          
    258          
    259          /*************************************************************************
    260          *
    261          *  External int 1 (UART PC16554 on AN-ZB485)
    262          *
    263          *************************************************************************/
    264          #pragma vector=INT1_vect

   \                                 In  segment CODE, align 2, keep-with-next
    265          __interrupt void IntHandler_INT1( void ){               //Int handler for Ext int 1
   \                     IntHandler_INT1:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   93FA               ST      -Y, R31
   \   0000000A   93EA               ST      -Y, R30
   \   0000000C   923A               ST      -Y, R3
   \   0000000E   922A               ST      -Y, R2
   \   00000010   921A               ST      -Y, R1
   \   00000012   920A               ST      -Y, R0
   \   00000014   937A               ST      -Y, R23
   \   00000016   936A               ST      -Y, R22
   \   00000018   935A               ST      -Y, R21
   \   0000001A   934A               ST      -Y, R20
   \   0000001C   933A               ST      -Y, R19
   \   0000001E   932A               ST      -Y, R18
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   B78F               IN      R24, 0x3F
   \   00000026   B79B               IN      R25, 0x3B
    266          
    267              // OBS!!!
    268              // Uses UART16552[].TxStatus as intreason and
    269              // UART16552[].TxSeqCnt as counter because these needs to be globale 
    270              // by using OS_EnterIntStack()
    271              
    272            
    273              OS_EnterInterrupt();
   \   00000028   9100....           LDS     R16, OS_InInt
   \   0000002C   9503               INC     R16
   \   0000002E   9300....           STS     OS_InInt, R16
   \   00000032   9100....           LDS     R16, OS_Counters
   \   00000036   9503               INC     R16
   \   00000038   9300....           STS     OS_Counters, R16
   \   0000003C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000040   9503               INC     R16
   \   00000042   9300....           STS     (OS_Counters + 1), R16
    274              OS_EnterIntStack();
   \   00000046   94F8               CLI
   \   00000048   ........           CALL    OS__EnterIntStack
   \   0000004C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000050   7F00               ANDI    R16, 0xF0
   \   00000052   F021               BREQ    ??IntHandler_INT1_0
   \   00000054   E909               LDI     R16, 153
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    OS_Error
   \                     ??IntHandler_INT1_0:
   \   0000005C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000060   2300               TST     R16
   \   00000062   F409               BRNE    ??IntHandler_INT1_1
   \   00000064   9478               SEI
    275          
    276              switch (UnitID) {
   \                     ??IntHandler_INT1_1:
   \   00000066   9100....           LDS     R16, UnitID
   \   0000006A   2300               TST     R16
   \   0000006C   F009               BREQ    $+2+2
   \   0000006E   C0C6               RJMP    ??IntHandler_INT1_2
    277              case 0x00:               // AN-ZB485 
    278          #if USE_16552_DRIVER_TASK == 1
    279                  UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt
   \   00000070   91002202           LDS     R16, 8706
   \   00000074   700F               ANDI    R16, 0x0F
   \   00000076   9300....           STS     (UART16552 + 34), R16
   \   0000007A   EFAA               LDI     R26, 250
   \   0000007C   E0B0               LDI     R27, 0
    280                  do {
    281                      switch (UART16552[1].TxStatus) {
   \                     ??IntHandler_INT1_3:
   \   0000007E   9100....           LDS     R16, (UART16552 + 34)
   \   00000082   2300               TST     R16
   \   00000084   F409               BRNE    $+2+2
   \   00000086   C0B1               RJMP    ??IntHandler_INT1_4
   \   00000088   5002               SUBI    R16, 2
   \   0000008A   F051               BREQ    ??IntHandler_INT1_5
   \   0000008C   5002               SUBI    R16, 2
   \   0000008E   F409               BRNE    $+2+2
   \   00000090   C055               RJMP    ??IntHandler_INT1_6
   \   00000092   5002               SUBI    R16, 2
   \   00000094   F409               BRNE    $+2+2
   \   00000096   C0A6               RJMP    ??IntHandler_INT1_7
   \   00000098   5006               SUBI    R16, 6
   \   0000009A   F409               BRNE    $+2+2
   \   0000009C   C04F               RJMP    ??IntHandler_INT1_6
   \   0000009E   C0A7               RJMP    ??IntHandler_INT1_8
    282                      case 0x02 :             // transmit holding reg emty
    283                          if (UART16552[1].TxCount == 0) {
   \                     ??IntHandler_INT1_5:
   \   000000A0   9100....           LDS     R16, (UART16552 + 32)
   \   000000A4   9110....           LDS     R17, (UART16552 + 33)
   \   000000A8   2B01               OR      R16, R17
   \   000000AA   F451               BRNE    ??IntHandler_INT1_9
    284                              U1_MCR &= ~RTS;        // set RTS off
   \   000000AC   91002204           LDS     R16, 8708
   \   000000B0   7F0D               ANDI    R16, 0xFD
   \   000000B2   93002204           STS     8708, R16
    285                              OS_StopTimer(&TimerUART1);                    // and stop timer
   \   000000B6   ....               LDI     R16, LOW(TimerUART1)
   \   000000B8   ....               LDI     R17, (TimerUART1) >> 8
   \   000000BA   ........           CALL    OS_StopTimer
   \   000000BE   C097               RJMP    ??IntHandler_INT1_8
    286                          } else {
    287                              for (UART16552[1].TxSeqCnt = 0;( UART16552[1].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[1].TxCount > 0 ); UART16552[1].TxSeqCnt++, UART16552[1].TxCount--) {
   \                     ??IntHandler_INT1_9:
   \   000000C0   93B0....           STS     (UART16552 + 35), R27
   \                     ??IntHandler_INT1_10:
   \   000000C4   9100....           LDS     R16, (UART16552 + 32)
   \   000000C8   9110....           LDS     R17, (UART16552 + 33)
   \   000000CC   2B01               OR      R16, R17
   \   000000CE   F409               BRNE    $+2+2
   \   000000D0   C08E               RJMP    ??IntHandler_INT1_8
    288                                 U1_THR = UART16552[1].pTxBuffer[UART16552[1].TxLast++] ;
   \   000000D2   91E0....           LDS     R30, (UART16552 + 26)
   \   000000D6   91F0....           LDS     R31, (UART16552 + 27)
   \   000000DA   9100....           LDS     R16, (UART16552 + 30)
   \   000000DE   9110....           LDS     R17, (UART16552 + 31)
   \   000000E2   0FE0               ADD     R30, R16
   \   000000E4   1FF1               ADC     R31, R17
   \   000000E6   8100               LD      R16, Z
   \   000000E8   93002200           STS     8704, R16
   \   000000EC   9100....           LDS     R16, (UART16552 + 30)
   \   000000F0   9110....           LDS     R17, (UART16552 + 31)
   \   000000F4   5F0F               SUBI    R16, 255
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   9300....           STS     (UART16552 + 30), R16
   \   000000FC   9310....           STS     (UART16552 + 31), R17
    289                              }
   \   00000100   9100....           LDS     R16, (UART16552 + 35)
   \   00000104   9503               INC     R16
   \   00000106   9300....           STS     (UART16552 + 35), R16
   \   0000010A   9100....           LDS     R16, (UART16552 + 32)
   \   0000010E   9110....           LDS     R17, (UART16552 + 33)
   \   00000112   5001               SUBI    R16, 1
   \   00000114   4010               SBCI    R17, 0
   \   00000116   9300....           STS     (UART16552 + 32), R16
   \   0000011A   9310....           STS     (UART16552 + 33), R17
   \   0000011E   9100....           LDS     R16, (UART16552 + 35)
   \   00000122   3100               CPI     R16, 16
   \   00000124   F008               BRCS    $+2+2
   \   00000126   C063               RJMP    ??IntHandler_INT1_8
   \   00000128   CFCD               RJMP    ??IntHandler_INT1_10
    290                          }
    291                          break;
    292                      case 0x04 :             // Receive data available    
    293                      case 0x0C :             // or caracter timeout (FIFO)
    294                          while (U1_LSR & DATA_READY) {
    295          
    296                              UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] = U1_RBR;          // Read the character 
    297          
    298                              if (UART16552[1].RxState != HANDLE) {        // ok to receive? 
    299                                  switch (UART16552[1].RxState) {                   // Yes, check state
    300                                  case SYNC :
    301                                      if ( UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] == ANPRO1_SYN) {
    302                                          UART16552[1].SyncCnt ++ ;                 // count sync
   \                     ??IntHandler_INT1_11:
   \   0000012A   9100....           LDS     R16, (UART16552 + 45)
   \   0000012E   9503               INC     R16
   \   00000130   9300....           STS     (UART16552 + 45), R16
    303                                          UART16552[1].RxFirst = 0;                 // start at start of buff
   \   00000134   93B0....           STS     (UART16552 + 38), R27
   \   00000138   93B0....           STS     (UART16552 + 39), R27
    304                                      } else if (UART16552[1].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??IntHandler_INT1_6:
   \   0000013C   91002205           LDS     R16, 8709
   \   00000140   FF00               SBRS    R16, 0
   \   00000142   C055               RJMP    ??IntHandler_INT1_8
   \   00000144   91002200           LDS     R16, 8704
   \   00000148   91E0....           LDS     R30, (UART16552 + 36)
   \   0000014C   91F0....           LDS     R31, (UART16552 + 37)
   \   00000150   9120....           LDS     R18, (UART16552 + 38)
   \   00000154   9130....           LDS     R19, (UART16552 + 39)
   \   00000158   0FE2               ADD     R30, R18
   \   0000015A   1FF3               ADC     R31, R19
   \   0000015C   8300               ST      Z, R16
   \   0000015E   9100....           LDS     R16, (UART16552 + 44)
   \   00000162   300A               CPI     R16, 10
   \   00000164   F359               BREQ    ??IntHandler_INT1_6
   \   00000166   2300               TST     R16
   \   00000168   F561               BRNE    ??IntHandler_INT1_12
   \   0000016A   91E0....           LDS     R30, (UART16552 + 36)
   \   0000016E   91F0....           LDS     R31, (UART16552 + 37)
   \   00000172   9100....           LDS     R16, (UART16552 + 38)
   \   00000176   9110....           LDS     R17, (UART16552 + 39)
   \   0000017A   0FE0               ADD     R30, R16
   \   0000017C   1FF1               ADC     R31, R17
   \   0000017E   8100               LD      R16, Z
   \   00000180   3002               CPI     R16, 2
   \   00000182   F299               BREQ    ??IntHandler_INT1_11
   \   00000184   9110....           LDS     R17, (UART16552 + 45)
   \   00000188   3012               CPI     R17, 2
   \   0000018A   93B0....           STS     (UART16552 + 45), R27
   \   0000018E   F2B0               BRCS    ??IntHandler_INT1_6
    305                                          UART16552[1].SyncCnt = 0 ;                // reset counter
    306                                          UART16552[1].RxState = HEADER ;
   \   00000190   E001               LDI     R16, 1
   \   00000192   9300....           STS     (UART16552 + 44), R16
    307                                          UART16552[1].RxLast = 0 ;
   \   00000196   93B0....           STS     (UART16552 + 40), R27
   \   0000019A   93B0....           STS     (UART16552 + 41), R27
    308                                          UART16552[1].RxTimeout = RX_TO_TIME ;     // reset timeout
   \   0000019E   93A0....           STS     (UART16552 + 46), R26
   \   000001A2   93B0....           STS     (UART16552 + 47), R27
    309                                          UART16552[1].RxFirst++ ;                  //  1. char OK, start on next
   \   000001A6   9100....           LDS     R16, (UART16552 + 38)
   \   000001AA   9110....           LDS     R17, (UART16552 + 39)
   \   000001AE   5F0F               SUBI    R16, 255
   \   000001B0   4F1F               SBCI    R17, 255
   \   000001B2   9300....           STS     (UART16552 + 38), R16
   \   000001B6   9310....           STS     (UART16552 + 39), R17
    310                                          ReceivePacketUart16552(1) ;               // Check package
   \   000001BA   E001               LDI     R16, 1
   \                     ??IntHandler_INT1_13:
   \   000001BC   ........           CALL    ReceivePacketUart16552
   \   000001C0   CFBD               RJMP    ??IntHandler_INT1_6
    311                                      } else {
    312                                          UART16552[1].SyncCnt = 0 ;                // start over once more
    313                                      }
    314                                      break;
    315                                  default :
    316                                      if ((++UART16552[1].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??IntHandler_INT1_12:
   \   000001C2   9100....           LDS     R16, (UART16552 + 38)
   \   000001C6   9110....           LDS     R17, (UART16552 + 39)
   \   000001CA   5F0F               SUBI    R16, 255
   \   000001CC   4F1F               SBCI    R17, 255
   \   000001CE   9300....           STS     (UART16552 + 38), R16
   \   000001D2   9310....           STS     (UART16552 + 39), R17
   \   000001D6   3709               CPI     R16, 121
   \   000001D8   4010               SBCI    R17, 0
   \   000001DA   E001               LDI     R16, 1
   \   000001DC   F378               BRCS    ??IntHandler_INT1_13
    317                                          GoToSyncUART16552(1) ;                       // go to sync mode
   \   000001DE   ........           CALL    GoToSyncUART16552
   \   000001E2   CFAC               RJMP    ??IntHandler_INT1_6
    318                                      } else {
    319                                          ReceivePacketUart16552(1) ;              // Check package
    320                                      }
    321                                      break ;   
    322                                  }
    323                              }
    324                          }
    325                          break;
    326                      case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    327                          U1_LSR;      // Dummy read to empty register        
   \                     ??IntHandler_INT1_7:
   \   000001E4   91002205           LDS     R16, 8709
    328                          break;
   \   000001E8   C002               RJMP    ??IntHandler_INT1_8
    329                      case 0x00 :                 // Modem status.
    330                          U1_MSR;      // Dummy read to empty register           
   \                     ??IntHandler_INT1_4:
   \   000001EA   91002206           LDS     R16, 8710
    331                          break;
    332                      }
    333                      UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??IntHandler_INT1_8:
   \   000001EE   91002202           LDS     R16, 8706
   \   000001F2   700F               ANDI    R16, 0x0F
   \   000001F4   9300....           STS     (UART16552 + 34), R16
    334                                                                                // check again before exit to avoid lost int. and hang
    335                 } while ((UART16552[1].TxStatus & 0x01) != 0x01);  
   \   000001F8   FF00               SBRS    R16, 0
   \   000001FA   CF41               RJMP    ??IntHandler_INT1_3
    336          #else
    337                  OS_SignalEvent(0x02, &TCB_16552_DRIVER);
    338          #endif
    339                  break;
    340              case 0x01:                  // AN-ZBANA Not connected!
    341                  break;
    342              }
    343              OS_LeaveIntStack();
   \                     ??IntHandler_INT1_2:
   \   000001FC   ....               RJMP    ?Subroutine0
    344              OS_LeaveInterruptNoSwitch();
    345          }

   \                                 In  segment INTVEC, offset 0x4, root
   \                     `??IntHandler_INT0::??INTVEC 4`:
   \   00000004   ........           JMP     IntHandler_INT0

   \                                 In  segment INTVEC, offset 0x8, root
   \                     `??IntHandler_INT1::??INTVEC 8`:
   \   00000008   ........           JMP     IntHandler_INT1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "16552_DRIVER">>`:
   \   00000000   363135355F32       DC8 "16552_DRIVER"
   \              524456495245
   \              00          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "16552_DRIVER">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "16552_DRIVER">>`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     18      2   IntHandler_INT0
       18      2   -> GoToSyncUART16552
       18      2   -> OS_Error
       18      2   -> OS_SignalEvent
       18      2   -> OS_StopTimer
       18      2   -> OS__EnterIntStack
       18      2   -> OS__LeaveIntStack
       18      2   -> ReceivePacketUart16552
     18      2   IntHandler_INT1
       18      2   -> GoToSyncUART16552
       18      2   -> OS_Error
       18      2   -> OS_StopTimer
       18      2   -> OS__EnterIntStack
       18      2   -> OS__LeaveIntStack
       18      2   -> ReceivePacketUart16552
      3      2   _16552_0_irq_handler
        3      2   -> GoToSyncUART16552
        3      2   -> OS_StopTimer
        3      2   -> ReceivePacketUart16552
      3      2   _16552_1_irq_handler
        3      2   -> GoToSyncUART16552
        3      2   -> OS_StopTimer
        3      2   -> ReceivePacketUart16552
      1      2   _16552_driver_task
        1      2   -> OS_WaitEventTimed
        1      2   -> _16552_0_irq_handler
        1      2   -> _16552_1_irq_handler
      6      2   _16552_driver_task_init
        0      2   -> OS_CreateTask_D


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      13  ?<Constant "16552_DRIVER">
      13  ?<Initializer for <Constant "16552_DRIVER">>
      92  ?Subroutine0
     526  IntHandler_INT0
       4  IntHandler_INT0::??INTVEC 4
     510  IntHandler_INT1
       4  IntHandler_INT1::??INTVEC 8
      22  TCB_16552_DRIVER
     404  _16552_0_irq_handler
     404  _16552_1_irq_handler
      28  _16552_driver_task
      40  _16552_driver_task_init
     100  stack
      14  -- Other

 
 2 004 bytes in segment CODE
    14 bytes in segment INITTAB
     8 bytes in segment INTVEC
    13 bytes in segment NEAR_I
    13 bytes in segment NEAR_ID
   122 bytes in segment NEAR_Z
 
 2 017 bytes of CODE memory (+ 22 bytes shared)
   135 bytes of DATA memory

Errors: none
Warnings: none
