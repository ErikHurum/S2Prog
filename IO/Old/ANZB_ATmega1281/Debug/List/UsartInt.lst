###############################################################################
#
# IAR C/C++ Compiler V7.30.1.1615 for Microchip AVR       02/Mar/2021  16:10:36
# Copyright 1996-2020 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EWFCB9.tmp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1
#        -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List -y --initializers_in_flash
#        --debug -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB_ATmega1281\INC\\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\ --eeprom_size 4096
#        --clib -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\UsartInt.lst
#    Object file  =  D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\UsartInt.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   Uart1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          
      8          #if USE_MODBUS_PROTOCOL == 0
      9          
     10          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xce
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc6
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
     11          #include "stdio.h"
     12          #include "math.h"
     13          #include "externals.h"
     14          #include "version.h"
     15          
     16          #if (OS_UART != 0)
     17          
     18          // USART0
     19          #pragma vector=USART0_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     20          __interrupt void IntHandler_RX_USART0( void ){   
   \                     IntHandler_RX_USART0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   93FA               ST      -Y, R31
   \   0000000A   93EA               ST      -Y, R30
   \   0000000C   923A               ST      -Y, R3
   \   0000000E   922A               ST      -Y, R2
   \   00000010   921A               ST      -Y, R1
   \   00000012   920A               ST      -Y, R0
   \   00000014   937A               ST      -Y, R23
   \   00000016   936A               ST      -Y, R22
   \   00000018   935A               ST      -Y, R21
   \   0000001A   934A               ST      -Y, R20
   \   0000001C   933A               ST      -Y, R19
   \   0000001E   932A               ST      -Y, R18
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   B78F               IN      R24, 0x3F
   \   00000026   B79B               IN      R25, 0x3B
     21          
     22              OS_EnterInterrupt();
   \   00000028   9100....           LDS     R16, OS_InInt
   \   0000002C   9503               INC     R16
   \   0000002E   9300....           STS     OS_InInt, R16
   \   00000032   9100....           LDS     R16, OS_Counters
   \   00000036   9503               INC     R16
   \   00000038   9300....           STS     OS_Counters, R16
   \   0000003C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000040   9503               INC     R16
   \   00000042   9300....           STS     (OS_Counters + 1), R16
     23              OS_EnterIntStack();
   \   00000046   94F8               CLI
   \   00000048   ........           CALL    OS__EnterIntStack
   \   0000004C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000050   7F00               ANDI    R16, 0xF0
   \   00000052   F021               BREQ    ??IntHandler_RX_USART0_0
   \   00000054   E909               LDI     R16, 153
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    OS_Error
   \                     ??IntHandler_RX_USART0_0:
   \   0000005C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000060   2300               TST     R16
   \   00000062   F409               BRNE    ??IntHandler_RX_USART0_1
   \   00000064   9478               SEI
     24              if ( UCSR0A & __BIT_MASK( DOR0 ) ) {                // Overrun error? 
   \                     ??IntHandler_RX_USART0_1:
   \   00000066   9100....           LDS     R16, _A_UCSR0A
     25              }
     26          
     27              if ( UCSR0A & __BIT_MASK( FE0 ) ) {                 // Framing error? 
   \   0000006A   9100....           LDS     R16, _A_UCSR0A
   \   0000006E   EFAA               LDI     R26, 250
   \   00000070   E0B0               LDI     R27, 0
   \   00000072   C007               RJMP    ??IntHandler_RX_USART0_2
     28              }
     29          
     30              while ( UCSR0A & __BIT_MASK( RXC0)  ) {                // New byte avaiable?
     31                  UART[0].pRxBuffer[ UART[0].RxFirst ] = UDR0;    // Read the character 
     32          
     33                  if (UART[0].RxState != HANDLE) {                // ok to receive? 
     34                      switch (UART[0].RxState) {                   // Yes, check state
     35                      case SYNC :
     36                          if ( UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SYN) {
     37                              UART[0].SyncCnt ++ ;                 // count sync
   \                     ??IntHandler_RX_USART0_3:
   \   00000074   9503               INC     R16
   \   00000076   9300....           STS     (UART + 19), R16
     38                              UART[0].RxFirst = 0;                 // start at start of buff
   \   0000007A   93B0....           STS     (UART + 12), R27
   \   0000007E   93B0....           STS     (UART + 13), R27
     39                          } else if ((UART[0].SyncCnt >= 2) && 
   \                     ??IntHandler_RX_USART0_2:
   \   00000082   9100....           LDS     R16, _A_UCSR0A
   \   00000086   FF07               SBRS    R16, 7
   \   00000088   C04B               RJMP    ??IntHandler_RX_USART0_4
   \   0000008A   9100....           LDS     R16, _A_UDR0
   \   0000008E   91E0....           LDS     R30, (UART + 10)
   \   00000092   91F0....           LDS     R31, (UART + 11)
   \   00000096   9120....           LDS     R18, (UART + 12)
   \   0000009A   9130....           LDS     R19, (UART + 13)
   \   0000009E   0FE2               ADD     R30, R18
   \   000000A0   1FF3               ADC     R31, R19
   \   000000A2   8300               ST      Z, R16
   \   000000A4   9100....           LDS     R16, (UART + 18)
   \   000000A8   300A               CPI     R16, 10
   \   000000AA   F359               BREQ    ??IntHandler_RX_USART0_2
   \   000000AC   2300               TST     R16
   \   000000AE   F521               BRNE    ??IntHandler_RX_USART0_5
   \   000000B0   91E0....           LDS     R30, (UART + 10)
   \   000000B4   91F0....           LDS     R31, (UART + 11)
   \   000000B8   9100....           LDS     R16, (UART + 12)
   \   000000BC   9110....           LDS     R17, (UART + 13)
   \   000000C0   0FE0               ADD     R30, R16
   \   000000C2   1FF1               ADC     R31, R17
   \   000000C4   8110               LD      R17, Z
   \   000000C6   3116               CPI     R17, 22
   \   000000C8   9100....           LDS     R16, (UART + 19)
   \   000000CC   F299               BREQ    ??IntHandler_RX_USART0_3
     40                                     (UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \   000000CE   3002               CPI     R16, 2
   \   000000D0   F080               BRCS    ??IntHandler_RX_USART0_6
   \   000000D2   E001               LDI     R16, 1
   \   000000D4   3011               CPI     R17, 1
   \   000000D6   F469               BRNE    ??IntHandler_RX_USART0_6
     41                              UART[0].SyncCnt = 0 ;                // reset counter
   \   000000D8   93B0....           STS     (UART + 19), R27
     42                              UART[0].RxState = HEADER ;
   \   000000DC   9300....           STS     (UART + 18), R16
     43                              UART[0].RxLast = 0 ;
   \   000000E0   93B0....           STS     (UART + 14), R27
   \   000000E4   93B0....           STS     (UART + 15), R27
     44                              UART[0].RxTimeout = RX_TO_TIME ;    // reset timeout
   \   000000E8   93A0....           STS     (UART + 20), R26
   \   000000EC   93B0....           STS     (UART + 21), R27
   \   000000F0   CFC8               RJMP    ??IntHandler_RX_USART0_2
     45                          } else {
     46                              UART[0].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_RX_USART0_6:
   \   000000F2   93B0....           STS     (UART + 19), R27
   \   000000F6   CFC5               RJMP    ??IntHandler_RX_USART0_2
     47                          }
     48                          break;
     49                      default :
     50                          if ((++UART[0].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??IntHandler_RX_USART0_5:
   \   000000F8   9100....           LDS     R16, (UART + 12)
   \   000000FC   9110....           LDS     R17, (UART + 13)
   \   00000100   5F0F               SUBI    R16, 255
   \   00000102   4F1F               SBCI    R17, 255
   \   00000104   9300....           STS     (UART + 12), R16
   \   00000108   9310....           STS     (UART + 13), R17
   \   0000010C   3907               CPI     R16, 151
   \   0000010E   4010               SBCI    R17, 0
   \   00000110   E000               LDI     R16, 0
   \   00000112   F018               BRCS    ??IntHandler_RX_USART0_7
     51                              GoToSyncUART(0) ;                       // go to sync mode
   \   00000114   ........           CALL    GoToSyncUART
   \   00000118   CFB4               RJMP    ??IntHandler_RX_USART0_2
     52                          } else {
     53                              ReceivePacketUart(0) ;              // Check package
   \                     ??IntHandler_RX_USART0_7:
   \   0000011A   ........           CALL    ReceivePacketUart
   \   0000011E   CFB1               RJMP    ??IntHandler_RX_USART0_2
     54                          }
     55                          break ;   
     56                      }
     57                  }
     58              }
     59              OS_LeaveIntStack();
   \                     ??IntHandler_RX_USART0_4:
   \   00000120                      REQUIRE ?Subroutine0
   \   00000120                      REQUIRE _A_UCSR0A
   \   00000120                      REQUIRE _A_UDR0
   \   00000120                      ;               // Fall through to label ?Subroutine0
     60              OS_LeaveInterruptNoSwitch();
     61          } 

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   94F8               CLI
   \   00000002   ........           CALL    OS__LeaveIntStack
   \   00000006   9100....           LDS     R16, OS_InInt
   \   0000000A   2F10               MOV     R17, R16
   \   0000000C   951A               DEC     R17
   \   0000000E   9310....           STS     OS_InInt, R17
   \   00000012   2300               TST     R16
   \   00000014   F421               BRNE    ??Subroutine0_0
   \   00000016   E908               LDI     R16, 152
   \   00000018   E010               LDI     R17, 0
   \   0000001A   ........           CALL    OS_Error
   \                     ??Subroutine0_0:
   \   0000001E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000022   950A               DEC     R16
   \   00000024   9300....           STS     (OS_Counters + 1), R16
   \   00000028   9100....           LDS     R16, OS_Counters
   \   0000002C   950A               DEC     R16
   \   0000002E   9300....           STS     OS_Counters, R16
   \   00000032   BF9B               OUT     0x3B, R25
   \   00000034   BF8F               OUT     0x3F, R24
   \   00000036   9109               LD      R16, Y+
   \   00000038   9119               LD      R17, Y+
   \   0000003A   9129               LD      R18, Y+
   \   0000003C   9139               LD      R19, Y+
   \   0000003E   9149               LD      R20, Y+
   \   00000040   9159               LD      R21, Y+
   \   00000042   9169               LD      R22, Y+
   \   00000044   9179               LD      R23, Y+
   \   00000046   9009               LD      R0, Y+
   \   00000048   9019               LD      R1, Y+
   \   0000004A   9029               LD      R2, Y+
   \   0000004C   9039               LD      R3, Y+
   \   0000004E   91E9               LD      R30, Y+
   \   00000050   91F9               LD      R31, Y+
   \   00000052   9189               LD      R24, Y+
   \   00000054   9199               LD      R25, Y+
   \   00000056   91A9               LD      R26, Y+
   \   00000058   91B9               LD      R27, Y+
   \   0000005A   9518               RETI
     62          
     63          
     64          #pragma vector=USART0_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     65          __interrupt void IntHandler_TX_USART0( void ){   
   \                     IntHandler_TX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     66          
     67             OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
     68             OS_EnterIntStack();
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   F021               BREQ    ??IntHandler_TX_USART0_0
   \   00000050   E909               LDI     R16, 153
   \   00000052   E010               LDI     R17, 0
   \   00000054   ........           CALL    OS_Error
   \                     ??IntHandler_TX_USART0_0:
   \   00000058   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005C   2300               TST     R16
   \   0000005E   F409               BRNE    ??IntHandler_TX_USART0_1
   \   00000060   9478               SEI
     69              
     70              UCSR0B &= ~(__BIT_MASK( TXCIE0)) ;            // transmission end, disable int.
   \                     ??IntHandler_TX_USART0_1:
   \   00000062   910000C1           LDS     R16, 193
   \   00000066   7B0F               ANDI    R16, 0xBF
   \   00000068   930000C1           STS     193, R16
     71              PORTE &= ~0x04 ;                              // TXE0 off
   \   0000006C   9872               CBI     0x0E, 0x02
     72              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \   0000006E   ....               LDI     R16, LOW(TimerUSART0)
   \   00000070   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000072   ........           CALL    OS_StopTimer
     73              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000076   E000               LDI     R16, 0
   \   00000078   ....               RJMP    ?Subroutine1
   \   0000007A                      REQUIRE _A_UCSR0B
   \   0000007A                      REQUIRE _A_PORTE
     74              
     75              OS_LeaveIntStack();
     76              OS_LeaveInterruptNoSwitch();
     77          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ........           CALL    GoToSyncUART
   \                     ??Subroutine1_0:
   \   00000004   94F8               CLI
   \   00000006   ........           CALL    OS__LeaveIntStack
   \   0000000A   9100....           LDS     R16, OS_InInt
   \   0000000E   2F10               MOV     R17, R16
   \   00000010   951A               DEC     R17
   \   00000012   9310....           STS     OS_InInt, R17
   \   00000016   2300               TST     R16
   \   00000018   F421               BRNE    ??Subroutine1_1
   \   0000001A   E908               LDI     R16, 152
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   ........           CALL    OS_Error
   \                     ??Subroutine1_1:
   \   00000022   9100....           LDS     R16, (OS_Counters + 1)
   \   00000026   950A               DEC     R16
   \   00000028   9300....           STS     (OS_Counters + 1), R16
   \   0000002C   9100....           LDS     R16, OS_Counters
   \   00000030   950A               DEC     R16
   \   00000032   9300....           STS     OS_Counters, R16
   \   00000036   BF9B               OUT     0x3B, R25
   \   00000038   BF8F               OUT     0x3F, R24
   \   0000003A   9109               LD      R16, Y+
   \   0000003C   9119               LD      R17, Y+
   \   0000003E   9129               LD      R18, Y+
   \   00000040   9139               LD      R19, Y+
   \   00000042   9149               LD      R20, Y+
   \   00000044   9159               LD      R21, Y+
   \   00000046   9169               LD      R22, Y+
   \   00000048   9179               LD      R23, Y+
   \   0000004A   9009               LD      R0, Y+
   \   0000004C   9019               LD      R1, Y+
   \   0000004E   9029               LD      R2, Y+
   \   00000050   9039               LD      R3, Y+
   \   00000052   91E9               LD      R30, Y+
   \   00000054   91F9               LD      R31, Y+
   \   00000056   9189               LD      R24, Y+
   \   00000058   9199               LD      R25, Y+
   \   0000005A   9518               RETI
     78          
     79          
     80          #pragma vector = USART0_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
     81          __interrupt void IntHandler_UDRE_USART0( void ){   
   \                     IntHandler_UDRE_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     82          
     83              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
     84              OS_EnterIntStack();
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   F021               BREQ    ??IntHandler_UDRE_USART0_0
   \   00000050   E909               LDI     R16, 153
   \   00000052   E010               LDI     R17, 0
   \   00000054   ........           CALL    OS_Error
   \                     ??IntHandler_UDRE_USART0_0:
   \   00000058   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005C   2300               TST     R16
   \   0000005E   F409               BRNE    ??IntHandler_UDRE_USART0_1
   \   00000060   9478               SEI
     85              if ( UART[0].TxCount-- > 0 ) {
   \                     ??IntHandler_UDRE_USART0_1:
   \   00000062   9100....           LDS     R16, (UART + 6)
   \   00000066   9110....           LDS     R17, (UART + 7)
   \   0000006A   2B01               OR      R16, R17
   \   0000006C   F101               BREQ    ??IntHandler_UDRE_USART0_2
   \   0000006E   9100....           LDS     R16, (UART + 6)
   \   00000072   5001               SUBI    R16, 1
   \   00000074   4010               SBCI    R17, 0
   \   00000076   9300....           STS     (UART + 6), R16
   \   0000007A   9310....           STS     (UART + 7), R17
     86                  UDR0 = UART[0].pTxBuffer[ UART[0].TxLast ];     // Send a character
   \   0000007E   9100....           LDS     R16, (UART + 4)
   \   00000082   9110....           LDS     R17, (UART + 5)
   \   00000086   91E0....           LDS     R30, UART
   \   0000008A   91F0....           LDS     R31, (UART + 1)
   \   0000008E   0FE0               ADD     R30, R16
   \   00000090   1FF1               ADC     R31, R17
   \   00000092   8100               LD      R16, Z
   \   00000094   9300....           STS     _A_UDR0, R16
     87                  UART[0].TxLast++;
   \   00000098   9100....           LDS     R16, (UART + 4)
   \   0000009C   9110....           LDS     R17, (UART + 5)
   \   000000A0   5F0F               SUBI    R16, 255
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   9300....           STS     (UART + 4), R16
   \   000000A8   9310....           STS     (UART + 5), R17
   \   000000AC   C014               RJMP    ??IntHandler_UDRE_USART0_3
     88              } else{                                             // Last byte sent?
   \                     ??IntHandler_UDRE_USART0_2:
   \   000000AE   EF0F               LDI     R16, 255
   \   000000B0   9300....           STS     (UART + 6), R16
   \   000000B4   9300....           STS     (UART + 7), R16
     89                    UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   000000B8   910000C1           LDS     R16, 193
   \   000000BC   7D0F               ANDI    R16, 0xDF
   \   000000BE   930000C1           STS     193, R16
     90                    UCSR0A |= (__BIT_MASK( TXC0)) ;               // Clear int bit in TXC.
   \   000000C2   910000C0           LDS     R16, 192
   \   000000C6   6400               ORI     R16, 0x40
   \   000000C8   930000C0           STS     192, R16
     91                    UCSR0B |= __BIT_MASK( TXCIE0) ;               // Enable TXC int.
   \   000000CC   910000C1           LDS     R16, 193
   \   000000D0   6400               ORI     R16, 0x40
   \   000000D2   930000C1           STS     193, R16
     92              }           
     93              OS_LeaveIntStack();
   \                     ??IntHandler_UDRE_USART0_3:
   \   000000D6   ....               RJMP    ??Subroutine1_0
   \   000000D8                      REQUIRE _A_UDR0
   \   000000D8                      REQUIRE _A_UCSR0B
   \   000000D8                      REQUIRE _A_UCSR0A
     94              OS_LeaveInterruptNoSwitch();
     95          } 
     96          #endif
     97          
     98          // USART1
     99          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    100          __interrupt void IntHandler_RX_USART1( void ){   
   \                     IntHandler_RX_USART1:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   93FA               ST      -Y, R31
   \   0000000A   93EA               ST      -Y, R30
   \   0000000C   923A               ST      -Y, R3
   \   0000000E   922A               ST      -Y, R2
   \   00000010   921A               ST      -Y, R1
   \   00000012   920A               ST      -Y, R0
   \   00000014   937A               ST      -Y, R23
   \   00000016   936A               ST      -Y, R22
   \   00000018   935A               ST      -Y, R21
   \   0000001A   934A               ST      -Y, R20
   \   0000001C   933A               ST      -Y, R19
   \   0000001E   932A               ST      -Y, R18
   \   00000020   931A               ST      -Y, R17
   \   00000022   930A               ST      -Y, R16
   \   00000024   B78F               IN      R24, 0x3F
   \   00000026   B79B               IN      R25, 0x3B
    101          
    102              OS_EnterInterrupt();
   \   00000028   9100....           LDS     R16, OS_InInt
   \   0000002C   9503               INC     R16
   \   0000002E   9300....           STS     OS_InInt, R16
   \   00000032   9100....           LDS     R16, OS_Counters
   \   00000036   9503               INC     R16
   \   00000038   9300....           STS     OS_Counters, R16
   \   0000003C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000040   9503               INC     R16
   \   00000042   9300....           STS     (OS_Counters + 1), R16
    103              OS_EnterIntStack();
   \   00000046   94F8               CLI
   \   00000048   ........           CALL    OS__EnterIntStack
   \   0000004C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000050   7F00               ANDI    R16, 0xF0
   \   00000052   F021               BREQ    ??IntHandler_RX_USART1_0
   \   00000054   E909               LDI     R16, 153
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    OS_Error
   \                     ??IntHandler_RX_USART1_0:
   \   0000005C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000060   2300               TST     R16
   \   00000062   F409               BRNE    ??IntHandler_RX_USART1_1
   \   00000064   9478               SEI
    104              if ( UCSR1A & __BIT_MASK( DOR1 ) ) {                // Overrun error? 
   \                     ??IntHandler_RX_USART1_1:
   \   00000066   9100....           LDS     R16, _A_UCSR1A
    105              }
    106          
    107              if ( UCSR1A & __BIT_MASK( FE1 ) ) {                 // Framing error? 
   \   0000006A   9100....           LDS     R16, _A_UCSR1A
   \   0000006E   EFAA               LDI     R26, 250
   \   00000070   E0B0               LDI     R27, 0
   \   00000072   C007               RJMP    ??IntHandler_RX_USART1_2
    108              }
    109          
    110              while ( UCSR1A & __BIT_MASK( RXC1)  ) {                // New byte avaiable?
    111                  UART[1].pRxBuffer[ UART[1].RxFirst ] = UDR1;    // Read the character 
    112          
    113                  if (UART[1].RxState != HANDLE) {                // ok to receive? 
    114                      switch (UART[1].RxState) {                   // Yes, check state
    115                      case SYNC :
    116                          if ( UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SYN) {
    117                              UART[1].SyncCnt ++ ;                 // count sync
   \                     ??IntHandler_RX_USART1_3:
   \   00000074   9503               INC     R16
   \   00000076   9300....           STS     (UART + 45), R16
    118                              UART[1].RxFirst = 0;                 // start at start of buff
   \   0000007A   93B0....           STS     (UART + 38), R27
   \   0000007E   93B0....           STS     (UART + 39), R27
    119                          } else if ((UART[1].SyncCnt >= 2) && 
   \                     ??IntHandler_RX_USART1_2:
   \   00000082   9100....           LDS     R16, _A_UCSR1A
   \   00000086   FF07               SBRS    R16, 7
   \   00000088   C04B               RJMP    ??IntHandler_RX_USART1_4
   \   0000008A   9100....           LDS     R16, _A_UDR1
   \   0000008E   91E0....           LDS     R30, (UART + 36)
   \   00000092   91F0....           LDS     R31, (UART + 37)
   \   00000096   9120....           LDS     R18, (UART + 38)
   \   0000009A   9130....           LDS     R19, (UART + 39)
   \   0000009E   0FE2               ADD     R30, R18
   \   000000A0   1FF3               ADC     R31, R19
   \   000000A2   8300               ST      Z, R16
   \   000000A4   9100....           LDS     R16, (UART + 44)
   \   000000A8   300A               CPI     R16, 10
   \   000000AA   F359               BREQ    ??IntHandler_RX_USART1_2
   \   000000AC   2300               TST     R16
   \   000000AE   F521               BRNE    ??IntHandler_RX_USART1_5
   \   000000B0   91E0....           LDS     R30, (UART + 36)
   \   000000B4   91F0....           LDS     R31, (UART + 37)
   \   000000B8   9100....           LDS     R16, (UART + 38)
   \   000000BC   9110....           LDS     R17, (UART + 39)
   \   000000C0   0FE0               ADD     R30, R16
   \   000000C2   1FF1               ADC     R31, R17
   \   000000C4   8110               LD      R17, Z
   \   000000C6   3116               CPI     R17, 22
   \   000000C8   9100....           LDS     R16, (UART + 45)
   \   000000CC   F299               BREQ    ??IntHandler_RX_USART1_3
    120                                     (UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \   000000CE   3002               CPI     R16, 2
   \   000000D0   F080               BRCS    ??IntHandler_RX_USART1_6
   \   000000D2   E001               LDI     R16, 1
   \   000000D4   3011               CPI     R17, 1
   \   000000D6   F469               BRNE    ??IntHandler_RX_USART1_6
    121                              UART[1].SyncCnt = 0 ;                // reset counter
   \   000000D8   93B0....           STS     (UART + 45), R27
    122                              UART[1].RxState = HEADER ;
   \   000000DC   9300....           STS     (UART + 44), R16
    123                              UART[1].RxLast = 0 ;
   \   000000E0   93B0....           STS     (UART + 40), R27
   \   000000E4   93B0....           STS     (UART + 41), R27
    124                              UART[1].RxTimeout = RX_TO_TIME ;      // reset timeout
   \   000000E8   93A0....           STS     (UART + 46), R26
   \   000000EC   93B0....           STS     (UART + 47), R27
   \   000000F0   CFC8               RJMP    ??IntHandler_RX_USART1_2
    125                          } else {
    126                              UART[1].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_RX_USART1_6:
   \   000000F2   93B0....           STS     (UART + 45), R27
   \   000000F6   CFC5               RJMP    ??IntHandler_RX_USART1_2
    127                          }
    128                          break;
    129                      default :
    130                          if ((++UART[1].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??IntHandler_RX_USART1_5:
   \   000000F8   9100....           LDS     R16, (UART + 38)
   \   000000FC   9110....           LDS     R17, (UART + 39)
   \   00000100   5F0F               SUBI    R16, 255
   \   00000102   4F1F               SBCI    R17, 255
   \   00000104   9300....           STS     (UART + 38), R16
   \   00000108   9310....           STS     (UART + 39), R17
   \   0000010C   3907               CPI     R16, 151
   \   0000010E   4010               SBCI    R17, 0
   \   00000110   E001               LDI     R16, 1
   \   00000112   F018               BRCS    ??IntHandler_RX_USART1_7
    131                              GoToSyncUART(1) ;                    // go to sync mode
   \   00000114   ........           CALL    GoToSyncUART
   \   00000118   CFB4               RJMP    ??IntHandler_RX_USART1_2
    132                          } else {
    133                              ReceivePacketUart(1) ;              // Check package
   \                     ??IntHandler_RX_USART1_7:
   \   0000011A   ........           CALL    ReceivePacketUart
   \   0000011E   CFB1               RJMP    ??IntHandler_RX_USART1_2
    134                          }
    135                          break ;   
    136                      }
    137                  }
    138              }
    139             OS_LeaveIntStack();
   \                     ??IntHandler_RX_USART1_4:
   \   00000120   ....               RJMP    ?Subroutine0
   \   00000122                      REQUIRE _A_UCSR1A
   \   00000122                      REQUIRE _A_UDR1
    140             OS_LeaveInterruptNoSwitch();
    141          } 
    142          
    143          
    144          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    145          __interrupt void IntHandler_TX_USART1( void ){   
   \                     IntHandler_TX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    146          
    147              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
    148              OS_EnterIntStack();
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   F021               BREQ    ??IntHandler_TX_USART1_0
   \   00000050   E909               LDI     R16, 153
   \   00000052   E010               LDI     R17, 0
   \   00000054   ........           CALL    OS_Error
   \                     ??IntHandler_TX_USART1_0:
   \   00000058   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005C   2300               TST     R16
   \   0000005E   F409               BRNE    ??IntHandler_TX_USART1_1
   \   00000060   9478               SEI
    149              UCSR1B &= ~(__BIT_MASK( TXCIE1)) ;            // transmission end, disable int.
   \                     ??IntHandler_TX_USART1_1:
   \   00000062   910000C9           LDS     R16, 201
   \   00000066   7B0F               ANDI    R16, 0xBF
   \   00000068   930000C9           STS     201, R16
    150              PORTE &= ~0x08 ;                              // TXE1 off
   \   0000006C   9873               CBI     0x0E, 0x03
    151              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \   0000006E   ....               LDI     R16, LOW(TimerUSART1)
   \   00000070   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000072   ........           CALL    OS_StopTimer
    152              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000076   E001               LDI     R16, 1
   \   00000078   ....               RJMP    ?Subroutine1
   \   0000007A                      REQUIRE _A_UCSR1B
   \   0000007A                      REQUIRE _A_PORTE
    153              OS_LeaveIntStack();
    154              OS_LeaveInterruptNoSwitch();
    155          }
    156          
    157          
    158          #pragma vector = USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    159          __interrupt void IntHandler_UDRE_USART1( void ){   
   \                     IntHandler_UDRE_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    160          
    161             OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_InInt
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_InInt, R16
   \   0000002E   9100....           LDS     R16, OS_Counters
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     OS_Counters, R16
   \   00000038   9100....           LDS     R16, (OS_Counters + 1)
   \   0000003C   9503               INC     R16
   \   0000003E   9300....           STS     (OS_Counters + 1), R16
    162             OS_EnterIntStack();
   \   00000042   94F8               CLI
   \   00000044   ........           CALL    OS__EnterIntStack
   \   00000048   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004C   7F00               ANDI    R16, 0xF0
   \   0000004E   F021               BREQ    ??IntHandler_UDRE_USART1_0
   \   00000050   E909               LDI     R16, 153
   \   00000052   E010               LDI     R17, 0
   \   00000054   ........           CALL    OS_Error
   \                     ??IntHandler_UDRE_USART1_0:
   \   00000058   9100....           LDS     R16, (OS_Counters + 1)
   \   0000005C   2300               TST     R16
   \   0000005E   F409               BRNE    ??IntHandler_UDRE_USART1_1
   \   00000060   9478               SEI
    163               if ( UART[1].TxCount-- > 0 ) {
   \                     ??IntHandler_UDRE_USART1_1:
   \   00000062   9100....           LDS     R16, (UART + 32)
   \   00000066   9110....           LDS     R17, (UART + 33)
   \   0000006A   2B01               OR      R16, R17
   \   0000006C   F101               BREQ    ??IntHandler_UDRE_USART1_2
   \   0000006E   9100....           LDS     R16, (UART + 32)
   \   00000072   5001               SUBI    R16, 1
   \   00000074   4010               SBCI    R17, 0
   \   00000076   9300....           STS     (UART + 32), R16
   \   0000007A   9310....           STS     (UART + 33), R17
    164                  UDR1 = UART[1].pTxBuffer[ UART[1].TxLast ];  // Send a character
   \   0000007E   91E0....           LDS     R30, (UART + 26)
   \   00000082   91F0....           LDS     R31, (UART + 27)
   \   00000086   9100....           LDS     R16, (UART + 30)
   \   0000008A   9110....           LDS     R17, (UART + 31)
   \   0000008E   0FE0               ADD     R30, R16
   \   00000090   1FF1               ADC     R31, R17
   \   00000092   8100               LD      R16, Z
   \   00000094   9300....           STS     _A_UDR1, R16
    165                  UART[1].TxLast++;
   \   00000098   9100....           LDS     R16, (UART + 30)
   \   0000009C   9110....           LDS     R17, (UART + 31)
   \   000000A0   5F0F               SUBI    R16, 255
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   9300....           STS     (UART + 30), R16
   \   000000A8   9310....           STS     (UART + 31), R17
   \   000000AC   C014               RJMP    ??IntHandler_UDRE_USART1_3
    166               } else {
   \                     ??IntHandler_UDRE_USART1_2:
   \   000000AE   EF0F               LDI     R16, 255
   \   000000B0   9300....           STS     (UART + 32), R16
   \   000000B4   9300....           STS     (UART + 33), R16
    167                  UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \   000000B8   910000C9           LDS     R16, 201
   \   000000BC   7D0F               ANDI    R16, 0xDF
   \   000000BE   930000C9           STS     201, R16
    168                  UCSR1A |= (__BIT_MASK( TXC1)) ;               // Clear int bit in TXC.
   \   000000C2   910000C8           LDS     R16, 200
   \   000000C6   6400               ORI     R16, 0x40
   \   000000C8   930000C8           STS     200, R16
    169                  UCSR1B |= __BIT_MASK( TXCIE1) ;               // Enable TXC int.
   \   000000CC   910000C9           LDS     R16, 201
   \   000000D0   6400               ORI     R16, 0x40
   \   000000D2   930000C9           STS     201, R16
    170               }
    171              OS_LeaveIntStack();
   \                     ??IntHandler_UDRE_USART1_3:
   \   000000D6   ....               RJMP    ??Subroutine1_0
   \   000000D8                      REQUIRE _A_UDR1
   \   000000D8                      REQUIRE _A_UCSR1B
   \   000000D8                      REQUIRE _A_UCSR1A
    172              OS_LeaveInterruptNoSwitch();
    173          } 

   \                                 In  segment INTVEC, offset 0x64, root
   \                     `??IntHandler_RX_USART0::??INTVEC 100`:
   \   00000064   ........           JMP     IntHandler_RX_USART0

   \                                 In  segment INTVEC, offset 0x68, root
   \                     `??IntHandler_UDRE_USART0::??INTVEC 104`:
   \   00000068   ........           JMP     IntHandler_UDRE_USART0

   \                                 In  segment INTVEC, offset 0x6c, root
   \                     `??IntHandler_TX_USART0::??INTVEC 108`:
   \   0000006C   ........           JMP     IntHandler_TX_USART0

   \                                 In  segment INTVEC, offset 0x90, root
   \                     `??IntHandler_RX_USART1::??INTVEC 144`:
   \   00000090   ........           JMP     IntHandler_RX_USART1

   \                                 In  segment INTVEC, offset 0x94, root
   \                     `??IntHandler_UDRE_USART1::??INTVEC 148`:
   \   00000094   ........           JMP     IntHandler_UDRE_USART1

   \                                 In  segment INTVEC, offset 0x98, root
   \                     `??IntHandler_TX_USART1::??INTVEC 152`:
   \   00000098   ........           JMP     IntHandler_TX_USART1
    174          
    175          #endif /* USE_MODBUS_PROTOCOL == 0 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     18      2   IntHandler_RX_USART0
       18      2   -> GoToSyncUART
       18      2   -> OS_Error
       18      2   -> OS__EnterIntStack
       18      2   -> OS__LeaveIntStack
       18      2   -> ReceivePacketUart
     18      2   IntHandler_RX_USART1
       18      2   -> GoToSyncUART
       18      2   -> OS_Error
       18      2   -> OS__EnterIntStack
       18      2   -> OS__LeaveIntStack
       18      2   -> ReceivePacketUart
     16      2   IntHandler_TX_USART0
       16      2   -> GoToSyncUART
       16      2   -> OS_Error
       16      2   -> OS_StopTimer
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_TX_USART1
       16      2   -> GoToSyncUART
       16      2   -> OS_Error
       16      2   -> OS_StopTimer
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_UDRE_USART0
       16      2   -> OS_Error
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_UDRE_USART1
       16      2   -> OS_Error
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      92  ?Subroutine0
      92  ?Subroutine1
     288  IntHandler_RX_USART0
       4  IntHandler_RX_USART0::??INTVEC 100
     290  IntHandler_RX_USART1
       4  IntHandler_RX_USART1::??INTVEC 144
     122  IntHandler_TX_USART0
       4  IntHandler_TX_USART0::??INTVEC 108
     122  IntHandler_TX_USART1
       4  IntHandler_TX_USART1::??INTVEC 152
     216  IntHandler_UDRE_USART0
       4  IntHandler_UDRE_USART0::??INTVEC 104
     216  IntHandler_UDRE_USART1
       4  IntHandler_UDRE_USART1::??INTVEC 148
       1  _A_PORTE
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UDR0
       1  _A_UDR1

 
     7 bytes in segment ABSOLUTE
 1 438 bytes in segment CODE
    24 bytes in segment INTVEC
 
 1 438 bytes of CODE memory (+ 24 bytes shared)
     0 bytes of DATA memory (+  7 bytes shared)

Errors: none
Warnings: none
