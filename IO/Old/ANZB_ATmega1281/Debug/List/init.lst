###############################################################################
#
# IAR C/C++ Compiler V7.30.1.1615 for Microchip AVR       02/Mar/2021  16:10:36
# Copyright 1996-2020 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\ANZB_ATmega1281\Src\init.c
#    Command line =  
#        -f C:\Users\esy\AppData\Local\Temp\EWF1F4.tmp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\init.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1
#        -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Debug\List -y --initializers_in_flash
#        --debug -DENABLE_BIT_DEFINITIONS -e -I
#        D:\S2Prog\IO\ANZB_ATmega1281\INC\\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\ --eeprom_size 4096
#        --clib -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\ANZB_ATmega1281\Debug\List\init.lst
#    Object file  =  D:\S2Prog\IO\ANZB_ATmega1281\Debug\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb3
   \   union <unnamed> volatile __io _A_OCR2A
   \                     _A_OCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb1
   \   union <unnamed> volatile __io _A_TCCR2B
   \                     _A_TCCR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb0
   \   union <unnamed> volatile __io _A_TCCR2A
   \                     _A_TCCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7c
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x75
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*
     14          **===========================================================================
     15          ** Init the system according to board type
     16          **===========================================================================
     17          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     18          void InitSystem(void) {
   \                     InitSystem:
     19          
     20              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   B904               OUT     0x04, R16
     21          //    PORTB   =  0xc;
     22              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000004   B103               IN      R16, 0x03
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     23          #if (OS_UART == 0)
     24              UnitID = 0x00; //AStmark  for test
     25          #endif
     26          
     27              Init_CPU();                         // init all processes
   \   00000010   94F8               CLI
   \   00000012   9110....           LDS     R17, UnitID
   \   00000016   F071               BREQ    ??InitSystem_0
   \   00000018   950A               DEC     R16
   \   0000001A   F4D9               BRNE    ??InitSystem_1
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   BF05               OUT     0x35, R16
   \   00000020   BB0D               OUT     0x1D, R16
   \   00000022   EA0A               LDI     R16, 170
   \   00000024   9300....           STS     _A_EICRA, R16
   \   00000028   9300....           STS     _A_EICRB, R16
   \   0000002C   E001               LDI     R16, 1
   \   0000002E   BB0D               OUT     0x1D, R16
   \   00000030   E000               LDI     R16, 0
   \   00000032   C00D               RJMP    ??InitSystem_2
   \                     ??InitSystem_0:
   \   00000034   EC00               LDI     R16, 192
   \   00000036   BF05               OUT     0x35, R16
   \   00000038   E000               LDI     R16, 0
   \   0000003A   BB0D               OUT     0x1D, R16
   \   0000003C   EA0F               LDI     R16, 175
   \   0000003E   9300....           STS     _A_EICRA, R16
   \   00000042   EA0A               LDI     R16, 170
   \   00000044   9300....           STS     _A_EICRB, R16
   \   00000048   E003               LDI     R16, 3
   \   0000004A   BB0D               OUT     0x1D, R16
   \   0000004C   E800               LDI     R16, 128
   \                     ??InitSystem_2:
   \   0000004E   9300....           STS     _A_XMCRA, R16
   \                     ??InitSystem_1:
   \   00000052   E007               LDI     R16, 7
   \   00000054   9300....           STS     _A_XMCRB, R16
   \   00000058   B704               IN      R16, 0x34
   \   0000005A   9300....           STS     RestartStatus, R16
   \   0000005E   E000               LDI     R16, 0
   \   00000060   BF04               OUT     0x34, R16
   \   00000062   9300....           STS     WriteCount, R16
     28              Init_IO();
   \   00000066   2F01               MOV     R16, R17
   \   00000068   2311               TST     R17
   \   0000006A   F0E9               BREQ    ??InitSystem_3
   \   0000006C   950A               DEC     R16
   \   0000006E   F009               BREQ    $+2+2
   \   00000070   C0D3               RJMP    ??InitSystem_4
   \   00000072   E000               LDI     R16, 0
   \   00000074   B901               OUT     0x01, R16
   \   00000076   B902               OUT     0x02, R16
   \   00000078   EF01               LDI     R16, 241
   \   0000007A   B904               OUT     0x04, R16
   \   0000007C   E000               LDI     R16, 0
   \   0000007E   B905               OUT     0x05, R16
   \   00000080   EF0F               LDI     R16, 255
   \   00000082   B907               OUT     0x07, R16
   \   00000084   E000               LDI     R16, 0
   \   00000086   B908               OUT     0x08, R16
   \   00000088   E002               LDI     R16, 2
   \   0000008A   B90A               OUT     0x0A, R16
   \   0000008C   EF01               LDI     R16, 241
   \   0000008E   B90B               OUT     0x0B, R16
   \   00000090   EF0E               LDI     R16, 254
   \   00000092   B90D               OUT     0x0D, R16
   \   00000094   E000               LDI     R16, 0
   \   00000096   B90E               OUT     0x0E, R16
   \   00000098   BB00               OUT     0x10, R16
   \   0000009A   BB01               OUT     0x11, R16
   \   0000009C   E100               LDI     R16, 16
   \   0000009E   BB03               OUT     0x13, R16
   \   000000A0   E000               LDI     R16, 0
   \   000000A2   BB04               OUT     0x14, R16
   \   000000A4   C0BF               RJMP    ??InitSystem_5
   \                     ??InitSystem_3:
   \   000000A6   EF0F               LDI     R16, 255
   \   000000A8   B901               OUT     0x01, R16
   \   000000AA   E000               LDI     R16, 0
   \   000000AC   B902               OUT     0x02, R16
   \   000000AE   E100               LDI     R16, 16
   \   000000B0   B904               OUT     0x04, R16
   \   000000B2   E000               LDI     R16, 0
   \   000000B4   B905               OUT     0x05, R16
   \   000000B6   EF0F               LDI     R16, 255
   \   000000B8   B907               OUT     0x07, R16
   \   000000BA   E000               LDI     R16, 0
   \   000000BC   B908               OUT     0x08, R16
   \   000000BE   B90A               OUT     0x0A, R16
   \   000000C0   EF0F               LDI     R16, 255
   \   000000C2   B90B               OUT     0x0B, R16
   \   000000C4   EF0E               LDI     R16, 254
   \   000000C6   B90D               OUT     0x0D, R16
   \   000000C8   EF00               LDI     R16, 240
   \   000000CA   B90E               OUT     0x0E, R16
   \   000000CC   E000               LDI     R16, 0
   \   000000CE   BB00               OUT     0x10, R16
   \   000000D0   BB01               OUT     0x11, R16
   \   000000D2   E007               LDI     R16, 7
   \   000000D4   BB03               OUT     0x13, R16
   \   000000D6   E003               LDI     R16, 3
   \   000000D8   BB04               OUT     0x14, R16
   \                     ??InitSystem_6:
   \   000000DA   E402               LDI     R16, 66
   \   000000DC   9300....           STS     _A_TCCR2A, R16
   \   000000E0   E801               LDI     R16, 129
   \   000000E2   9300....           STS     _A_TCCR2B, R16
   \   000000E6   E003               LDI     R16, 3
   \                     ??InitSystem_7:
   \   000000E8   9300....           STS     _A_OCR2A, R16
     29              Init_TMR() ;
     30          #if (OS_UART != 0)
     31              Init_USART(0, 38400) ;              // 
   \                     ??InitSystem_8:
   \   000000EC   E000               LDI     R16, 0
   \   000000EE   9300....           STS     (UART + 2), R16
   \   000000F2   9300....           STS     (UART + 3), R16
   \   000000F6   9300....           STS     (UART + 4), R16
   \   000000FA   9300....           STS     (UART + 5), R16
   \   000000FE   9300....           STS     (UART + 6), R16
   \   00000102   9300....           STS     (UART + 7), R16
   \   00000106   9300....           STS     (UART + 12), R16
   \   0000010A   9300....           STS     (UART + 13), R16
   \   0000010E   9300....           STS     (UART + 14), R16
   \   00000112   9300....           STS     (UART + 15), R16
   \   00000116   9300....           STS     (UART + 16), R16
   \   0000011A   9300....           STS     (UART + 17), R16
   \   0000011E   9300....           STS     (UART + 18), R16
   \   00000122   9300....           STS     (UART + 19), R16
   \   00000126   9300....           STS     (UART + 8), R16
   \   0000012A   EF0A               LDI     R16, 250
   \   0000012C   9300....           STS     (UART + 20), R16
   \   00000130   E000               LDI     R16, 0
   \   00000132   9300....           STS     (UART + 21), R16
   \   00000136   ....               LDI     R16, LOW(TxBufferCh0)
   \   00000138   ....               LDI     R17, (TxBufferCh0) >> 8
   \   0000013A   9300....           STS     UART, R16
   \   0000013E   9310....           STS     (UART + 1), R17
   \   00000142   ....               LDI     R16, LOW(RxBufferCh0)
   \   00000144   ....               LDI     R17, (RxBufferCh0) >> 8
   \   00000146   9300....           STS     (UART + 10), R16
   \   0000014A   9310....           STS     (UART + 11), R17
   \   0000014E   E000               LDI     R16, 0
   \   00000150   9300....           STS     _A_UCSR0A, R16
   \   00000154   E109               LDI     R16, 25
   \   00000156   9300....           STS     _A_UBRR0, R16
   \   0000015A   E000               LDI     R16, 0
   \   0000015C   930000C5           STS     197, R16
   \   00000160   E908               LDI     R16, 152
   \   00000162   9300....           STS     _A_UCSR0B, R16
   \   00000166   E006               LDI     R16, 6
   \   00000168   9300....           STS     _A_UCSR0C, R16
     32          #endif
     33              Init_USART(1, 38400) ;              //    
   \   0000016C   E000               LDI     R16, 0
   \   0000016E   9300....           STS     (UART + 28), R16
   \   00000172   9300....           STS     (UART + 29), R16
   \   00000176   9300....           STS     (UART + 30), R16
   \   0000017A   9300....           STS     (UART + 31), R16
   \   0000017E   9300....           STS     (UART + 32), R16
   \   00000182   9300....           STS     (UART + 33), R16
   \   00000186   9300....           STS     (UART + 38), R16
   \   0000018A   9300....           STS     (UART + 39), R16
   \   0000018E   9300....           STS     (UART + 40), R16
   \   00000192   9300....           STS     (UART + 41), R16
   \   00000196   9300....           STS     (UART + 42), R16
   \   0000019A   9300....           STS     (UART + 43), R16
   \   0000019E   9300....           STS     (UART + 44), R16
   \   000001A2   9300....           STS     (UART + 45), R16
   \   000001A6   9300....           STS     (UART + 34), R16
   \   000001AA   EF0A               LDI     R16, 250
   \   000001AC   9300....           STS     (UART + 46), R16
   \   000001B0   E000               LDI     R16, 0
   \   000001B2   9300....           STS     (UART + 47), R16
   \   000001B6   ....               LDI     R16, LOW(TxBufferCh1)
   \   000001B8   ....               LDI     R17, (TxBufferCh1) >> 8
   \   000001BA   9300....           STS     (UART + 26), R16
   \   000001BE   9310....           STS     (UART + 27), R17
   \   000001C2   ....               LDI     R16, LOW(RxBufferCh1)
   \   000001C4   ....               LDI     R17, (RxBufferCh1) >> 8
   \   000001C6   9300....           STS     (UART + 36), R16
   \   000001CA   9310....           STS     (UART + 37), R17
   \   000001CE   E000               LDI     R16, 0
   \   000001D0   9300....           STS     _A_UCSR1A, R16
   \   000001D4   E109               LDI     R16, 25
   \   000001D6   9300....           STS     _A_UBRR1, R16
   \   000001DA   E000               LDI     R16, 0
   \   000001DC   930000CD           STS     205, R16
   \   000001E0   E908               LDI     R16, 152
   \   000001E2   9300....           STS     _A_UCSR0B, R16
   \   000001E6   E006               LDI     R16, 6
   \   000001E8   9300....           STS     _A_UCSR1C, R16
     34              Init_AD();
   \   000001EC   ....               LDI     R30, LOW(ADInt)
   \   000001EE   ....               LDI     R31, (ADInt) >> 8
   \   000001F0   E008               LDI     R16, 8
   \   000001F2   E020               LDI     R18, 0
   \                     ??InitSystem_9:
   \   000001F4   9321               ST      Z+, R18
   \   000001F6   9321               ST      Z+, R18
   \   000001F8   950A               DEC     R16
   \   000001FA   F7E1               BRNE    ??InitSystem_9
   \   000001FC   9320....           STS     ADChannel, R18
   \   00000200   EC00               LDI     R16, 192
   \   00000202   9300....           STS     _A_ADMUX, R16
   \   00000206   E80F               LDI     R16, 143
   \   00000208   9300....           STS     _A_ADCSRA, R16
     35              Init_Values();                      // init the values in the system
     36          
     37              // 128 -> 1281
     38              // ADCSR |= 0x40 ;                     //start the AD convertion
     39              ADCSRA |= 0x40 ;
   \   0000020C   9100007A           LDS     R16, 122
   \   00000210   6400               ORI     R16, 0x40
   \   00000212   9300007A           STS     122, R16
     40          }
   \   00000216   9508               RET
   \                     ??InitSystem_4:
   \   00000218   2311               TST     R17
   \   0000021A   F409               BRNE    $+2+2
   \   0000021C   CF5E               RJMP    ??InitSystem_6
   \   0000021E   951A               DEC     R17
   \   00000220   F009               BREQ    $+2+2
   \   00000222   CF64               RJMP    ??InitSystem_8
   \                     ??InitSystem_5:
   \   00000224   E402               LDI     R16, 66
   \   00000226   9300....           STS     _A_TCCR2A, R16
   \   0000022A   E801               LDI     R16, 129
   \   0000022C   9300....           STS     _A_TCCR2B, R16
   \   00000230   E007               LDI     R16, 7
   \   00000232   CF5A               RJMP    ??InitSystem_7
   \   00000234                      REQUIRE _A_DDRB
   \   00000234                      REQUIRE _A_PINB
   \   00000234                      REQUIRE _A_ADCSRA
   \   00000234                      REQUIRE _A_UCSR0A
   \   00000234                      REQUIRE _A_UBRR0
   \   00000234                      REQUIRE _A_UCSR0B
   \   00000234                      REQUIRE _A_UCSR0C
   \   00000234                      REQUIRE _A_UCSR1A
   \   00000234                      REQUIRE _A_UBRR1
   \   00000234                      REQUIRE _A_UCSR1C
   \   00000234                      REQUIRE _A_TCCR2A
   \   00000234                      REQUIRE _A_TCCR2B
   \   00000234                      REQUIRE _A_OCR2A
   \   00000234                      REQUIRE _A_ADMUX
   \   00000234                      REQUIRE _A_MCUCR
   \   00000234                      REQUIRE _A_EIMSK
   \   00000234                      REQUIRE _A_EICRA
   \   00000234                      REQUIRE _A_EICRB
   \   00000234                      REQUIRE _A_XMCRA
   \   00000234                      REQUIRE _A_XMCRB
   \   00000234                      REQUIRE _A_MCUSR
   \   00000234                      REQUIRE _A_DDRA
   \   00000234                      REQUIRE _A_PORTA
   \   00000234                      REQUIRE _A_PORTB
   \   00000234                      REQUIRE _A_DDRC
   \   00000234                      REQUIRE _A_PORTC
   \   00000234                      REQUIRE _A_DDRD
   \   00000234                      REQUIRE _A_PORTD
   \   00000234                      REQUIRE _A_DDRE
   \   00000234                      REQUIRE _A_PORTE
   \   00000234                      REQUIRE _A_DDRF
   \   00000234                      REQUIRE _A_PORTF
   \   00000234                      REQUIRE _A_DDRG
   \   00000234                      REQUIRE _A_PORTG
     41          
     42          /*
     43          **===========================================================================
     44          ** Init the CPU related registers
     45          **===========================================================================
     46          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     47          void Init_CPU( void ) {
   \                     Init_CPU:
     48          
     49              __disable_interrupt();
   \   00000000   94F8               CLI
     50          
     51              /*--- Configure CPU and interrupts ---*/
     52              switch (UnitID) {
   \   00000002   9100....           LDS     R16, UnitID
   \   00000006   2300               TST     R16
   \   00000008   F019               BREQ    ??Init_CPU_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F079               BREQ    ??Init_CPU_1
   \   0000000E   C01B               RJMP    ??Init_CPU_2
     53              case AN_ZB485:                  // AN-ZB485 
     54                  MCUCR = 0xc0 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_0:
   \   00000010   EC00               LDI     R16, 192
   \   00000012   BF05               OUT     0x35, R16
     55                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \   00000014   E000               LDI     R16, 0
   \   00000016   BB0D               OUT     0x1D, R16
     56                  EICRA = 0xAf ;        // External interrupt control register, 0,1 raising, rest faling
   \   00000018   EA0F               LDI     R16, 175
   \   0000001A   9300....           STS     _A_EICRA, R16
     57                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000001E   EA0A               LDI     R16, 170
   \   00000020   9300....           STS     _A_EICRB, R16
     58                  EIMSK = 0x03 ;        // External interrupt mask register, int 0 and 1 on
   \   00000024   E003               LDI     R16, 3
   \   00000026   BB0D               OUT     0x1D, R16
     59                  XMCRA = 0x80; // maximum wait states
   \   00000028   E800               LDI     R16, 128
   \   0000002A   C00B               RJMP    ??Init_CPU_3
     60                  break;
     61              case AN_ZBANA:                  // AN-ZBANA
     62                  MCUCR = 0x00 ;        // MCU control register wait state
   \                     ??Init_CPU_1:
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   BF05               OUT     0x35, R16
     63                  EIMSK = 0x00 ;        // External interrupt mask register , all off
   \   00000030   BB0D               OUT     0x1D, R16
     64                  EICRA = 0xAA ;        // External interrupt control register, o on faling edge
   \   00000032   EA0A               LDI     R16, 170
   \   00000034   9300....           STS     _A_EICRA, R16
     65                  EICRB = 0xAA ;        // External interrupt control register 
   \   00000038   9300....           STS     _A_EICRB, R16
     66                  EIMSK = 0x01 ;        // External interrupt mask register, int 0 on
   \   0000003C   E001               LDI     R16, 1
   \   0000003E   BB0D               OUT     0x1D, R16
     67                  XMCRA = 0x00 ; // maximum wait states
   \   00000040   E000               LDI     R16, 0
   \                     ??Init_CPU_3:
   \   00000042   9300....           STS     _A_XMCRA, R16
     68                  break;
     69              }
     70              // XMCRA = 0x00; // maximum wait states
     71              XMCRB = 0x07 ;       // Full portC + bus keeper
   \                     ??Init_CPU_2:
   \   00000046   E007               LDI     R16, 7
   \   00000048   9300....           STS     _A_XMCRB, R16
     72              //
     73              // hkim
     74              // are you fucking out of mind?
     75              // why do you enable global interrupt here?
     76              //
     77              // SREG = 0x80;  // global interrupt
     78          
     79              //
     80              // 128 -> 1281
     81              // No XDIV in 1281. CLKPR instead.
     82              // Anyway No need to do this.
     83              //XDIV  = 0x00 ;     // Init valuse used 0x00
     84          
     85              // 128 -> 1281
     86              // register name change
     87              // RestartStatus = MCUCSR;       // Remember reset source
     88              RestartStatus = MCUSR;
   \   0000004C   B704               IN      R16, 0x34
   \   0000004E   9300....           STS     RestartStatus, R16
     89              MCUSR = 0x00; // and reset
   \   00000052   E000               LDI     R16, 0
   \   00000054   BF04               OUT     0x34, R16
     90              /*--- Initialize buffer ---*/
     91              WriteCount = 0;
   \   00000056   9300....           STS     WriteCount, R16
     92          
     93          }
   \   0000005A   9508               RET
   \   0000005C                      REQUIRE _A_MCUCR
   \   0000005C                      REQUIRE _A_EIMSK
   \   0000005C                      REQUIRE _A_EICRA
   \   0000005C                      REQUIRE _A_EICRB
   \   0000005C                      REQUIRE _A_XMCRA
   \   0000005C                      REQUIRE _A_XMCRB
   \   0000005C                      REQUIRE _A_MCUSR
     94          
     95          /*
     96          **===========================================================================
     97          ** Init the watchdog registers
     98          **===========================================================================
     99          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    100          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
    101          
    102              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
    103              // 128 -> 1281
    104              // WDTCR = 0x0f;
    105              WDTCSR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   9300....           STS     _A_WDTCSR, R16
    106              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
    107          
    108          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCSR
    109          
    110          /*
    111          **===========================================================================
    112          ** Init the IO related registers
    113          **===========================================================================
    114          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    115          void Init_IO( void ) {
   \                     Init_IO:
    116          
    117              /*--- Initialize the data registers, output value and input pullup ---*/
    118              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   2300               TST     R16
   \   00000006   F019               BREQ    ??Init_IO_0
   \   00000008   950A               DEC     R16
   \   0000000A   F0D9               BREQ    ??Init_IO_1
   \   0000000C   9508               RET
    119              case AN_ZB485:                  // AN-ZB485  
    120                  DDRA   =  0xff ;      // Port A data direction (out), external bus
   \                     ??Init_IO_0:
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   B901               OUT     0x01, R16
    121                  PORTA  =  0x00 ;      // Port A data
   \   00000012   E000               LDI     R16, 0
   \   00000014   B902               OUT     0x02, R16
    122                  DDRB   =  0x10 ;      // Port B data direction, bit 0, 4-7 out
   \   00000016   E100               LDI     R16, 16
   \   00000018   B904               OUT     0x04, R16
    123                  PORTB  =  0x00 ;      // Port B data   
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   B905               OUT     0x05, R16
    124                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   B907               OUT     0x07, R16
    125                  PORTC  =  0x00 ;      // Port C data
   \   00000022   E000               LDI     R16, 0
   \   00000024   B908               OUT     0x08, R16
    126                  DDRD   =  0x00 ;      // Port D data direction, all in except output to osc and txd
   \   00000026   B90A               OUT     0x0A, R16
    127                  PORTD  =  0xff ;      // Port D data pullup on int fro AD
   \   00000028   EF0F               LDI     R16, 255
   \   0000002A   B90B               OUT     0x0B, R16
    128                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   0000002C   EF0E               LDI     R16, 254
   \   0000002E   B90D               OUT     0x0D, R16
    129                  PORTE  =  0xf0 ;      // Port E data 
   \   00000030   EF00               LDI     R16, 240
   \   00000032   B90E               OUT     0x0E, R16
    130                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000034   E000               LDI     R16, 0
   \   00000036   BB00               OUT     0x10, R16
    131                  PORTF  =  0x00 ;      // Port F data 
   \   00000038   BB01               OUT     0x11, R16
    132                  DDRG   =  0x07 ;      // Port G data direction, port 1,2,3 out
   \   0000003A   E007               LDI     R16, 7
   \   0000003C   BB03               OUT     0x13, R16
    133                  PORTG  =  0x03 ;      // Port G data 
   \   0000003E   E003               LDI     R16, 3
   \   00000040   C018               RJMP    ??Init_IO_2
    134                  break;
    135              case AN_ZBANA:                  // AN-ZBANA
    136                  DDRA   =  0x00 ;      // Port A data direction in (not used)
   \                     ??Init_IO_1:
   \   00000042   E000               LDI     R16, 0
   \   00000044   B901               OUT     0x01, R16
    137                  PORTA  =  0x00 ;      // Port A data
   \   00000046   B902               OUT     0x02, R16
    138                  DDRB   =  0xF1 ;      // Port B data direction, bit 0, 4-7 out
   \   00000048   EF01               LDI     R16, 241
   \   0000004A   B904               OUT     0x04, R16
    139                  PORTB  =  0x00 ;      // Port B data   
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   B905               OUT     0x05, R16
    140                  DDRC   =  0xFF ;      // Port C data direction, all out
   \   00000050   EF0F               LDI     R16, 255
   \   00000052   B907               OUT     0x07, R16
    141                  PORTC  =  0x00 ;      // Port C data
   \   00000054   E000               LDI     R16, 0
   \   00000056   B908               OUT     0x08, R16
    142                  DDRD   =  0x02 ;      // Port D data direction, all in except output to osc and txd
   \   00000058   E002               LDI     R16, 2
   \   0000005A   B90A               OUT     0x0A, R16
    143                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD
   \   0000005C   EF01               LDI     R16, 241
   \   0000005E   B90B               OUT     0x0B, R16
    144                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000060   EF0E               LDI     R16, 254
   \   00000062   B90D               OUT     0x0D, R16
    145                  PORTE  =  0x00 ;      // Port E data 
   \   00000064   E000               LDI     R16, 0
   \   00000066   B90E               OUT     0x0E, R16
    146                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000068   BB00               OUT     0x10, R16
    147                  PORTF  =  0x00 ;      // Port F data 
   \   0000006A   BB01               OUT     0x11, R16
    148                  DDRG   =  0x10 ;      // Port G data direction, bit 5 out
   \   0000006C   E100               LDI     R16, 16
   \   0000006E   BB03               OUT     0x13, R16
    149                  PORTG  =  0x00 ;      // Port G data 
   \   00000070   E000               LDI     R16, 0
   \                     ??Init_IO_2:
   \   00000072   BB04               OUT     0x14, R16
    150                  break;
    151              default:
    152                  break;
    153              }    
    154          }
   \   00000074   9508               RET
   \   00000076                      REQUIRE _A_DDRA
   \   00000076                      REQUIRE _A_PORTA
   \   00000076                      REQUIRE _A_DDRB
   \   00000076                      REQUIRE _A_PORTB
   \   00000076                      REQUIRE _A_DDRC
   \   00000076                      REQUIRE _A_PORTC
   \   00000076                      REQUIRE _A_DDRD
   \   00000076                      REQUIRE _A_PORTD
   \   00000076                      REQUIRE _A_DDRE
   \   00000076                      REQUIRE _A_PORTE
   \   00000076                      REQUIRE _A_DDRF
   \   00000076                      REQUIRE _A_PORTF
   \   00000076                      REQUIRE _A_DDRG
   \   00000076                      REQUIRE _A_PORTG
    155          
    156          /*
    157          **===========================================================================
    158          ** Init the timer related registers
    159          **===========================================================================
    160          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    161          void Init_TMR( void ) {
   \                     Init_TMR:
    162              /*--- Timer control (disable clock inputs) ---*/
    163          
    164              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   2300               TST     R16
   \   00000006   F019               BREQ    ??Init_TMR_0
   \   00000008   950A               DEC     R16
   \   0000000A   F049               BREQ    ??Init_TMR_1
   \   0000000C   9508               RET
    165              case AN_ZB485:                  // AN-ZB485
    166                  // 128 -> 1281
    167                  // TIM0 and TIM2 are swapped in 1281.
    168                  // Registers are completely changed.
    169                  // TCCR0   =  0x99 ;      // Timer control register 0
    170                  // OCR0    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
    171                  //
    172                  // TCCR2A : 0 1 0 0 - - 1 0
    173                  // TCCR2B : 1 0 - - 0 0 0 1
    174                  //
    175                  // COM2A1 COM2A0 : 0 1
    176                  // COM2B1 COM2B0 : 0 0
    177                  // WGM21 WGM20   : 1 0
    178                  // FOC2A : 1, FOR2B : 0, WGM22 : 0, CS2/1/0 : 0 0 1
    179                  //
    180                  // COM2A : Toggle
    181                  // WGM : CTC
    182                  // Clock Scale: 1
    183          
    184                  TCCR2A = 0x42;
   \                     ??Init_TMR_0:
   \   0000000E   E402               LDI     R16, 66
   \   00000010   9300....           STS     _A_TCCR2A, R16
    185                  TCCR2B = 0x81;
   \   00000014   E801               LDI     R16, 129
   \   00000016   9300....           STS     _A_TCCR2B, R16
    186                  OCR2A = 3;
   \   0000001A   E003               LDI     R16, 3
   \   0000001C   C007               RJMP    ??Init_TMR_2
    187                  break;
    188              case AN_ZBANA:                  // AN-ZBANA
    189                  // 128 -> 1281
    190                  // TCCR0   =  0x99 ;      // Timer control register 0
    191                  // OCR0    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
    192                  TCCR2A = 0x42;
   \                     ??Init_TMR_1:
   \   0000001E   E402               LDI     R16, 66
   \   00000020   9300....           STS     _A_TCCR2A, R16
    193                  TCCR2B = 0x81;
   \   00000024   E801               LDI     R16, 129
   \   00000026   9300....           STS     _A_TCCR2B, R16
    194                  OCR2A = 7;
   \   0000002A   E007               LDI     R16, 7
   \                     ??Init_TMR_2:
   \   0000002C   9300....           STS     _A_OCR2A, R16
    195                  break;
    196              default:
    197                  break;
    198              }
    199          
    200          } 
   \   00000030   9508               RET
   \   00000032                      REQUIRE _A_TCCR2A
   \   00000032                      REQUIRE _A_TCCR2B
   \   00000032                      REQUIRE _A_OCR2A
    201          
    202          /*
    203          **===========================================================================
    204          ** Init the USARTs registers
    205          **===========================================================================
    206          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    207          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
    208          
    209          
    210              /*--- Configure UART data block ---*/
    211              UART[channel].TxFirst   = 0x00;
   \   00000000   E11A               LDI     R17, 26
   \   00000002   9F01               MUL     R16, R17
   \   00000004   ....               LDI     R30, LOW(UART)
   \   00000006   ....               LDI     R31, (UART) >> 8
   \   00000008   0DE0               ADD     R30, R0
   \   0000000A   1DF1               ADC     R31, R1
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   8312               STD     Z+2, R17
   \   00000010   8313               STD     Z+3, R17
    212              UART[channel].TxLast    = 0x00;
   \   00000012   8314               STD     Z+4, R17
   \   00000014   8315               STD     Z+5, R17
    213              UART[channel].TxCount   = 0x00;
   \   00000016   8316               STD     Z+6, R17
   \   00000018   8317               STD     Z+7, R17
    214              UART[channel].RxFirst   = 0x00;
   \   0000001A   8714               STD     Z+12, R17
   \   0000001C   8715               STD     Z+13, R17
    215              UART[channel].RxLast    = 0x00;
   \   0000001E   8716               STD     Z+14, R17
   \   00000020   8717               STD     Z+15, R17
    216              UART[channel].RxCount   = 0x00;
   \   00000022   8B10               STD     Z+16, R17
   \   00000024   8B11               STD     Z+17, R17
    217              UART[channel].RxState   = SYNC;
   \   00000026   8B12               STD     Z+18, R17
    218              UART[channel].SyncCnt   = 0 ;
   \   00000028   8B13               STD     Z+19, R17
    219              UART[channel].TxStatus  = 0x00;
   \   0000002A   8710               STD     Z+8, R17
    220          
    221              switch (channel) {
   \   0000002C   2300               TST     R16
   \   0000002E   F019               BREQ    ??Init_USART_0
   \   00000030   950A               DEC     R16
   \   00000032   F151               BREQ    ??Init_USART_1
   \   00000034   9508               RET
    222              case 0x00 :          
    223                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   00000036   EF0A               LDI     R16, 250
   \   00000038   9300....           STS     (UART + 20), R16
   \   0000003C   9310....           STS     (UART + 21), R17
    224                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   00000040   ....               LDI     R16, LOW(TxBufferCh0)
   \   00000042   ....               LDI     R17, (TxBufferCh0) >> 8
   \   00000044   9300....           STS     UART, R16
   \   00000048   9310....           STS     (UART + 1), R17
    225                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   0000004C   ....               LDI     R16, LOW(RxBufferCh0)
   \   0000004E   ....               LDI     R17, (RxBufferCh0) >> 8
   \   00000050   9300....           STS     (UART + 10), R16
   \   00000054   9310....           STS     (UART + 11), R17
    226                  UCSR0A  = 0x00; 
   \   00000058   E000               LDI     R16, 0
   \   0000005A   9300....           STS     _A_UCSR0A, R16
    227                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000005E   E400               LDI     R16, 64
   \   00000060   E412               LDI     R17, 66
   \   00000062   E02F               LDI     R18, 15
   \   00000064   E030               LDI     R19, 0
   \   00000066   ........           CALL    ?UL_DIVMOD_S_L03
   \   0000006A   2F40               MOV     R20, R16
   \   0000006C   954A               DEC     R20
   \   0000006E   9340....           STS     _A_UBRR0, R20
    228                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   00000072   5001               SUBI    R16, 1
   \   00000074   4010               SBCI    R17, 0
   \   00000076   931000C5           STS     197, R17
    229                  // why the fuck do you enalbe UDRE here you stupid fucktard!!! -hkim
    230                  // UCSR0B = 0xb8; /* tx/ rx enable, int udre/rxon */
    231                  UCSR0B  = 0x98;       /* tx/ rx enable, int udre/rxon */
   \   0000007A   E908               LDI     R16, 152
   \   0000007C   9300....           STS     _A_UCSR0B, R16
    232                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000080   E006               LDI     R16, 6
   \   00000082   9300....           STS     _A_UCSR0C, R16
    233                  break;
   \   00000086   9508               RET
    234              case 0x01 :
    235                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   00000088   EF0A               LDI     R16, 250
   \   0000008A   9300....           STS     (UART + 46), R16
   \   0000008E   9310....           STS     (UART + 47), R17
    236                  UART[channel].pTxBuffer = TxBufferCh1;
   \   00000092   ....               LDI     R16, LOW(TxBufferCh1)
   \   00000094   ....               LDI     R17, (TxBufferCh1) >> 8
   \   00000096   9300....           STS     (UART + 26), R16
   \   0000009A   9310....           STS     (UART + 27), R17
    237                  UART[channel].pRxBuffer = RxBufferCh1;
   \   0000009E   ....               LDI     R16, LOW(RxBufferCh1)
   \   000000A0   ....               LDI     R17, (RxBufferCh1) >> 8
   \   000000A2   9300....           STS     (UART + 36), R16
   \   000000A6   9310....           STS     (UART + 37), R17
    238                  UCSR1A  = 0x00; 
   \   000000AA   E000               LDI     R16, 0
   \   000000AC   9300....           STS     _A_UCSR1A, R16
    239                  UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   000000B0   E400               LDI     R16, 64
   \   000000B2   E412               LDI     R17, 66
   \   000000B4   E02F               LDI     R18, 15
   \   000000B6   E030               LDI     R19, 0
   \   000000B8   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000BC   2F40               MOV     R20, R16
   \   000000BE   954A               DEC     R20
   \   000000C0   9340....           STS     _A_UBRR1, R20
    240                  UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   000000C4   5001               SUBI    R16, 1
   \   000000C6   4010               SBCI    R17, 0
   \   000000C8   931000CD           STS     205, R17
    241                  // why the fuck do you enalbe UDRE here you stupid fucktard!!! -hkim
    242                  // UCSR1B = 0xb8; /* tx/ rx enable, int udre/rxon */
    243                  UCSR0B = 0x98;       /* tx/ rx enable, int udre/rxon */
   \   000000CC   E908               LDI     R16, 152
   \   000000CE   9300....           STS     _A_UCSR0B, R16
    244                  UCSR1C  = 0x06;       /* n,8,1 */
   \   000000D2   E006               LDI     R16, 6
   \   000000D4   9300....           STS     _A_UCSR1C, R16
    245                  break;
    246              default:
    247                  break ;
    248              }    
    249          }
   \   000000D8   9508               RET
   \   000000DA                      REQUIRE _A_UCSR0A
   \   000000DA                      REQUIRE _A_UBRR0
   \   000000DA                      REQUIRE _A_UCSR0B
   \   000000DA                      REQUIRE _A_UCSR0C
   \   000000DA                      REQUIRE _A_UCSR1A
   \   000000DA                      REQUIRE _A_UBRR1
   \   000000DA                      REQUIRE _A_UCSR1C
    250          
    251          
    252          /*
    253          **===========================================================================
    254          ** Init the AD converter registers
    255          **===========================================================================
    256          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    257          void Init_AD( void ) {
   \                     Init_AD:
    258          
    259              char i;     
    260              for (i = 0; i<8; i++) {                 // Init variables
   \   00000000   ....               LDI     R30, LOW(ADInt)
   \   00000002   ....               LDI     R31, (ADInt) >> 8
   \   00000004   E008               LDI     R16, 8
   \   00000006   E020               LDI     R18, 0
    261                  ADInt.Result[i] = 0;                   // convertion resluts
   \                     ??Init_AD_0:
   \   00000008   9321               ST      Z+, R18
   \   0000000A   9321               ST      Z+, R18
    262              }
   \   0000000C   950A               DEC     R16
   \   0000000E   F7E1               BRNE    ??Init_AD_0
    263              ADChannel = 0x00 ;                      // AD channel to be converted
   \   00000010   9320....           STS     ADChannel, R18
    264              ADMUX   = 0xc0 ;                        // Ref = 2,56V, right adjust
   \   00000014   EC00               LDI     R16, 192
   \   00000016   9300....           STS     _A_ADMUX, R16
    265              // 128 -> 1281
    266              // ADCSR   = 0x8f ;                        // AD enabled, int enabled, xtal / 128
    267              ADCSRA = 0x8f;
   \   0000001A   E80F               LDI     R16, 143
   \   0000001C   9300....           STS     _A_ADCSRA, R16
    268          }
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_ADMUX
   \   00000022                      REQUIRE _A_ADCSRA
    269          
    270          /*
    271          **===========================================================================
    272          ** Init values  in the system
    273          **===========================================================================
    274          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    275          void Init_Values(void) {
   \                     Init_Values:
    276          
    277          
    278          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   InitSystem
      2   Init_AD
      2   Init_CPU
      2   Init_IO
      2   Init_TMR
      2   Init_USART
        2 ?UL_DIVMOD_S_L03
      2   Init_Values
      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     564  InitSystem
      34  Init_AD
      92  Init_CPU
     118  Init_IO
      50  Init_TMR
     218  Init_USART
       2  Init_Values
      18  Init_Watchdog
       1  _A_ADCSRA
       1  _A_ADMUX
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_MCUSR
       1  _A_OCR2A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_TCCR2A
       1  _A_TCCR2B
       2  _A_UBRR0
       2  _A_UBRR1
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1C
       1  _A_WDTCSR
       1  _A_XMCRA
       1  _A_XMCRB

 
    37 bytes in segment ABSOLUTE
 1 096 bytes in segment CODE
 
 1 096 bytes of CODE memory
     0 bytes of DATA memory (+ 37 bytes shared)

Errors: none
Warnings: none
