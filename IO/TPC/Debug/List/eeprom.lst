###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            18/Jan/2017  16:22:12
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\TPC\Src\eeprom.c
#    Command line =  
#        D:\S2Prog\IO\TPC\Src\eeprom.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\TPC\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\TPC\Debug\List -y --initializers_in_flash --no_cse
#        --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\TPC\INC\ -I
#        D:\S2Prog\IO\TPC\..\..\SHARED\INC\ --eeprom_size 4096 --clib -On
#    List file    =  D:\S2Prog\IO\TPC\Debug\List\eeprom.lst
#    Object file  =  D:\S2Prog\IO\TPC\Debug\Obj\eeprom.r90
#
###############################################################################

D:\S2Prog\IO\TPC\Src\eeprom.c
      1          /****************************************************************************************
      2          / Read and write the eeprom
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          
     12          
     13          /*---------------------------------------------------------------------------
     14          **
     15          **  See how many date i remining
     16          **
     17          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     18          char TestEEPROM( void ) {
   \                     TestEEPROM:
     19          
     20              return WriteCount;
   \   00000000   9100....           LDS     R16, WriteCount
   \   00000004   9508               RET
     21          }
     22          
     23          /*---------------------------------------------------------------------------
     24          **
     25          **  Reads an address in the eeprom
     26          **
     27          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     28          char ReadEEPROMByte( unsigned int Address ) {
   \                     ReadEEPROMByte:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     29          
     30              unsigned char Data;
     31          
     32              while (EECR & (1<<EEWE))     // Wait until ready
   \                     ??ReadEEPROMByte_0:
   \   00000006   99E1               SBIC    0x1C, 0x01
   \   00000008   CFFE               RJMP    ??ReadEEPROMByte_0
     33                  ;
     34              EEAR = Address;
   \   0000000A   BB9F               OUT     0x1F, R25
   \   0000000C   BB8E               OUT     0x1E, R24
     35              OS_IncDI();
   \   0000000E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000012   7F00               ANDI    R16, 0xF0
   \   00000014   2300               TST     R16
   \   00000016   F021               BREQ    ??ReadEEPROMByte_1
   \   00000018   E909               LDI     R16, 153
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ........           CALL    OS_Error
   \                     ??ReadEEPROMByte_1:
   \   00000020   94F8               CLI
   \   00000022   9100....           LDS     R16, (OS_Counters + 1)
   \   00000026   9503               INC     R16
   \   00000028   9300....           STS     (OS_Counters + 1), R16
     36              EECR |= (1 << EERE) ;       // Don't use SetBit macrod due to timing
   \   0000002C   9AE0               SBI     0x1C, 0x00
     37              OS_DecRI();
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   7F00               ANDI    R16, 0xF0
   \   00000034   2300               TST     R16
   \   00000036   F021               BREQ    ??ReadEEPROMByte_2
   \   00000038   E909               LDI     R16, 153
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    OS_Error
   \                     ??ReadEEPROMByte_2:
   \   00000040   9100....           LDS     R16, (OS_Counters + 1)
   \   00000044   950A               DEC     R16
   \   00000046   9300....           STS     (OS_Counters + 1), R16
   \   0000004A   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004E   2300               TST     R16
   \   00000050   F409               BRNE    ??ReadEEPROMByte_3
   \   00000052   9478               SEI
     38          
     39              Data = EEDR;
   \                     ??ReadEEPROMByte_3:
   \   00000054   B30D               IN      R16, 0x1D
   \   00000056   2FA0               MOV     R26, R16
     40              return Data;
   \   00000058   2F0A               MOV     R16, R26
   \   0000005A   E0E3               LDI     R30, 3
   \   0000005C   ........           JMP     ?EPILOGUE_B3_L09
   \   00000060                      REQUIRE _A_EECR
   \   00000060                      REQUIRE _A_EEAR
   \   00000060                      REQUIRE _A_EEDR
     41          
     42          }
     43          
     44          /*---------------------------------------------------------------------------
     45          **
     46          **  Write a caracther to the eeprom
     47          **
     48          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     49          void WriteEEPROMByte( unsigned int Address, char Data ) {   
   \                     WriteEEPROMByte:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2FA2               MOV     R26, R18
     50          
     51              while (EECR & (1<<EEWE))     // Wait until ready
   \                     ??WriteEEPROMByte_0:
   \   00000008   99E1               SBIC    0x1C, 0x01
   \   0000000A   CFFE               RJMP    ??WriteEEPROMByte_0
     52                  ;
     53              OS_IncDI();
   \   0000000C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000010   7F00               ANDI    R16, 0xF0
   \   00000012   2300               TST     R16
   \   00000014   F021               BREQ    ??WriteEEPROMByte_1
   \   00000016   E909               LDI     R16, 153
   \   00000018   E010               LDI     R17, 0
   \   0000001A   ........           CALL    OS_Error
   \                     ??WriteEEPROMByte_1:
   \   0000001E   94F8               CLI
   \   00000020   9100....           LDS     R16, (OS_Counters + 1)
   \   00000024   9503               INC     R16
   \   00000026   9300....           STS     (OS_Counters + 1), R16
     54              EEAR = Address;
   \   0000002A   BB9F               OUT     0x1F, R25
   \   0000002C   BB8E               OUT     0x1E, R24
     55              EEDR = Data;
   \   0000002E   BBAD               OUT     0x1D, R26
     56              EECR |= (1 << EEMWE) ;       // Don't use SetBit macrod due to timing
   \   00000030   9AE2               SBI     0x1C, 0x02
     57              EECR |= (1 << EEWE) ;        // Don't use SetBit macrod due to timing
   \   00000032   9AE1               SBI     0x1C, 0x01
     58              OS_DecRI();
   \   00000034   9100....           LDS     R16, (OS_Counters + 1)
   \   00000038   7F00               ANDI    R16, 0xF0
   \   0000003A   2300               TST     R16
   \   0000003C   F021               BREQ    ??WriteEEPROMByte_2
   \   0000003E   E909               LDI     R16, 153
   \   00000040   E010               LDI     R17, 0
   \   00000042   ........           CALL    OS_Error
   \                     ??WriteEEPROMByte_2:
   \   00000046   9100....           LDS     R16, (OS_Counters + 1)
   \   0000004A   950A               DEC     R16
   \   0000004C   9300....           STS     (OS_Counters + 1), R16
   \   00000050   9100....           LDS     R16, (OS_Counters + 1)
   \   00000054   2300               TST     R16
   \   00000056   F409               BRNE    ??WriteEEPROMByte_3
   \   00000058   9478               SEI
     59          }
   \                     ??WriteEEPROMByte_3:
   \   0000005A   E0E3               LDI     R30, 3
   \   0000005C   ........           JMP     ?EPILOGUE_B3_L09
   \   00000060                      REQUIRE _A_EECR
   \   00000060                      REQUIRE _A_EEAR
   \   00000060                      REQUIRE _A_EEDR
     60          
     61          /*---------------------------------------------------------------------------
     62          **
     63          **  Read a tring from the eeprom
     64          **
     65          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     66          void ReadEEPROMBuffer( unsigned int Address, char Size, char *pData ) {   
   \                     ReadEEPROMBuffer:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2E62               MOV     R6, R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
     67              unsigned int Index;
     68          
     69              for ( Index = 0; Index < Size; Index++ ) {
   \   0000000A   E0A0               LDI     R26, 0
   \   0000000C   E0B0               LDI     R27, 0
   \                     ??ReadEEPROMBuffer_0:
   \   0000000E   2477               CLR     R7
   \   00000010   15A6               CP      R26, R6
   \   00000012   05B7               CPC     R27, R7
   \   00000014   F460               BRCC    ??ReadEEPROMBuffer_1
     70                  *pData++ = ReadEEPROMByte( Address + Index );
   \   00000016   018C               MOVW    R17:R16, R25:R24
   \   00000018   0F0A               ADD     R16, R26
   \   0000001A   1F1B               ADC     R17, R27
   \   0000001C   ....               RCALL   ReadEEPROMByte
   \   0000001E   01F2               MOVW    R31:R30, R5:R4
   \   00000020   8300               ST      Z, R16
   \   00000022   E001               LDI     R16, 1
   \   00000024   0E40               ADD     R4, R16
   \   00000026   E000               LDI     R16, 0
   \   00000028   1E50               ADC     R5, R16
     71              }
   \   0000002A   9611               ADIW    R27:R26, 1
   \   0000002C   CFF0               RJMP    ??ReadEEPROMBuffer_0
     72          }
   \                     ??ReadEEPROMBuffer_1:
   \   0000002E   E0E8               LDI     R30, 8
   \   00000030   ........           JMP     ?EPILOGUE_B8_L09
     73          
     74          /*---------------------------------------------------------------------------
     75          **
     76          **  Writ buffer to eeprom
     77          **
     78          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     79          void WriteEEPROMBuffer( unsigned int Address, char Size, char *pData ) {   
   \                     WriteEEPROMBuffer:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2E42               MOV     R4, R18
   \   00000008   01DA               MOVW    R27:R26, R21:R20
     80          
     81              while (EECR & (1<<EEWE))     // Wait until ready
   \                     ??WriteEEPROMBuffer_0:
   \   0000000A   99E1               SBIC    0x1C, 0x01
   \   0000000C   CFFE               RJMP    ??WriteEEPROMBuffer_0
     82                  ;
     83              OS_IncDI();
   \   0000000E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000012   7F00               ANDI    R16, 0xF0
   \   00000014   2300               TST     R16
   \   00000016   F021               BREQ    ??WriteEEPROMBuffer_1
   \   00000018   E909               LDI     R16, 153
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ........           CALL    OS_Error
   \                     ??WriteEEPROMBuffer_1:
   \   00000020   94F8               CLI
   \   00000022   9100....           LDS     R16, (OS_Counters + 1)
   \   00000026   9503               INC     R16
   \   00000028   9300....           STS     (OS_Counters + 1), R16
     84              pWriteBuffer = pData;
   \   0000002C   93A0....           STS     pWriteBuffer, R26
   \   00000030   93B0....           STS     (pWriteBuffer + 1), R27
     85              WriteCount = Size;
   \   00000034   9240....           STS     WriteCount, R4
     86              EEAR = Address ;
   \   00000038   BB9F               OUT     0x1F, R25
   \   0000003A   BB8E               OUT     0x1E, R24
     87              EEDR = *pData ;
   \   0000003C   910C               LD      R16, X
   \   0000003E   BB0D               OUT     0x1D, R16
     88              pWriteBuffer++;
   \   00000040   ....               LDI     R30, LOW(pWriteBuffer)
   \   00000042   ....               LDI     R31, (pWriteBuffer) >> 8
   \   00000044   8100               LD      R16, Z
   \   00000046   8111               LDD     R17, Z+1
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8300               ST      Z, R16
   \   0000004E   8311               STD     Z+1, R17
     89              RestoreStat = true;
   \   00000050   E001               LDI     R16, 1
   \   00000052   9300....           STS     RestoreStat, R16
     90              EECR |= (1 << EEMWE) ;       // Don't use SetBit macrod due to timing
   \   00000056   9AE2               SBI     0x1C, 0x02
     91              EECR |= (1 << EEWE) ;        // Don't use SetBit macrod due to timing
   \   00000058   9AE1               SBI     0x1C, 0x01
     92              EECR |= (1 << EERIE) ;       // Don't use SetBit macrod due to timing
   \   0000005A   9AE3               SBI     0x1C, 0x03
     93              OS_DecRI();
   \   0000005C   9100....           LDS     R16, (OS_Counters + 1)
   \   00000060   7F00               ANDI    R16, 0xF0
   \   00000062   2300               TST     R16
   \   00000064   F021               BREQ    ??WriteEEPROMBuffer_2
   \   00000066   E909               LDI     R16, 153
   \   00000068   E010               LDI     R17, 0
   \   0000006A   ........           CALL    OS_Error
   \                     ??WriteEEPROMBuffer_2:
   \   0000006E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000072   950A               DEC     R16
   \   00000074   9300....           STS     (OS_Counters + 1), R16
   \   00000078   9100....           LDS     R16, (OS_Counters + 1)
   \   0000007C   2300               TST     R16
   \   0000007E   F409               BRNE    ??WriteEEPROMBuffer_3
   \   00000080   9478               SEI
     94          }
   \                     ??WriteEEPROMBuffer_3:
   \   00000082   E0E5               LDI     R30, 5
   \   00000084   ........           JMP     ?EPILOGUE_B5_L09
   \   00000088                      REQUIRE _A_EECR
   \   00000088                      REQUIRE _A_EEAR
   \   00000088                      REQUIRE _A_EEDR
     95          
     96          /*---------------------------------------------------------------------------
     97          **
     98          **  Interrupt on EEPROM write
     99          **
    100          **--------------------------------------------------------------------------*/
    101          #pragma vector=EE_RDY_vect

   \                                 In  segment CODE, align 2, keep-with-next
    102          __interrupt void IntHandler_EEPROM( void ){
   \                     IntHandler_EEPROM:
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   933A               ST      -Y, R19
   \   00000006   932A               ST      -Y, R18
   \   00000008   931A               ST      -Y, R17
   \   0000000A   930A               ST      -Y, R16
   \   0000000C   B72F               IN      R18, 0x3F
   \   0000000E   B73B               IN      R19, 0x3B
    103          
    104              if ( --WriteCount ) {                        // More to write? 
   \   00000010   9100....           LDS     R16, WriteCount
   \   00000014   950A               DEC     R16
   \   00000016   9300....           STS     WriteCount, R16
   \   0000001A   9100....           LDS     R16, WriteCount
   \   0000001E   2300               TST     R16
   \   00000020   F0B9               BREQ    ??IntHandler_EEPROM_0
    105                  EEAR++;                                  // Define address and data 
   \   00000022   B30E               IN      R16, 0x1E
   \   00000024   B31F               IN      R17, 0x1F
   \   00000026   5F0F               SUBI    R16, 255
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   BB1F               OUT     0x1F, R17
   \   0000002C   BB0E               OUT     0x1E, R16
    106                  EEDR = *pWriteBuffer++;
   \   0000002E   91E0....           LDS     R30, pWriteBuffer
   \   00000032   91F0....           LDS     R31, (pWriteBuffer + 1)
   \   00000036   8100               LD      R16, Z
   \   00000038   BB0D               OUT     0x1D, R16
   \   0000003A   ....               LDI     R30, LOW(pWriteBuffer)
   \   0000003C   ....               LDI     R31, (pWriteBuffer) >> 8
   \   0000003E   8100               LD      R16, Z
   \   00000040   8111               LDD     R17, Z+1
   \   00000042   5F0F               SUBI    R16, 255
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   8300               ST      Z, R16
   \   00000048   8311               STD     Z+1, R17
    107                  EECR |= (1 << EEMWE) ;       // Don't use SetBit macrod due to timing
   \   0000004A   9AE2               SBI     0x1C, 0x02
    108                  EECR |= (1 << EEWE) ;        // Don't use SetBit macrod due to timing
   \   0000004C   9AE1               SBI     0x1C, 0x01
   \   0000004E   C004               RJMP    ??IntHandler_EEPROM_1
    109              } else {
    110                  EECR &= ~(1 << EERIE) ;       // Don't use ClrBit macrod due to timing
   \                     ??IntHandler_EEPROM_0:
   \   00000050   98E3               CBI     0x1C, 0x03
    111                  RestoreStat = false;
   \   00000052   E000               LDI     R16, 0
   \   00000054   9300....           STS     RestoreStat, R16
    112              }
    113          }
   \                     ??IntHandler_EEPROM_1:
   \   00000058   BF3B               OUT     0x3B, R19
   \   0000005A   BF2F               OUT     0x3F, R18
   \   0000005C   9109               LD      R16, Y+
   \   0000005E   9119               LD      R17, Y+
   \   00000060   9129               LD      R18, Y+
   \   00000062   9139               LD      R19, Y+
   \   00000064   91E9               LD      R30, Y+
   \   00000066   91F9               LD      R31, Y+
   \   00000068   9518               RETI
   \   0000006A                      REQUIRE _A_EEAR
   \   0000006A                      REQUIRE _A_EEDR
   \   0000006A                      REQUIRE _A_EECR
    114          
    115          
    116          /**===========================================================================
    117          ** Get the stored version in EEPROM
    118          **==========================================================================*/ 

   \                                 In  segment CODE, align 2, keep-with-next
    119          char EEPROMVersion(void) {
   \                     EEPROMVersion:
   \   00000000   938A               ST      -Y, R24
   \   00000002   9721               SBIW    R29:R28, 1
    120              char val ;
    121              char retval = false;
   \   00000004   E080               LDI     R24, 0
    122          
    123              ReadEEPROMBuffer(EEPROM_ID_START, 1, (char*)&val) ;
   \   00000006   01AE               MOVW    R21:R20, R29:R28
   \   00000008   E021               LDI     R18, 1
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   ....               RCALL   ReadEEPROMBuffer
    124              if (val == EEPROM_ID) {                                     //correct EEPROM ID
   \   00000010   8108               LD      R16, Y
   \   00000012   3B0D               CPI     R16, 189
   \   00000014   F489               BRNE    ??EEPROMVersion_0
    125                  ReadEEPROMBuffer(EEPROM_ID_START+1, 1, (char*)&val) ;
   \   00000016   01AE               MOVW    R21:R20, R29:R28
   \   00000018   E021               LDI     R18, 1
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   ....               RCALL   ReadEEPROMBuffer
    126                  if (val == STORE_VERSION) {                             // and version
   \   00000020   8108               LD      R16, Y
   \   00000022   3001               CPI     R16, 1
   \   00000024   F449               BRNE    ??EEPROMVersion_0
    127                      ReadEEPROMBuffer(0xffe, 1, (char*)&val) ;
   \   00000026   01AE               MOVW    R21:R20, R29:R28
   \   00000028   E021               LDI     R18, 1
   \   0000002A   EF0E               LDI     R16, 254
   \   0000002C   E01F               LDI     R17, 15
   \   0000002E   ....               RCALL   ReadEEPROMBuffer
    128                      if (val == EEPROM_OK) {                             // and no reset from user
   \   00000030   8108               LD      R16, Y
   \   00000032   3F0F               CPI     R16, 255
   \   00000034   F409               BRNE    ??EEPROMVersion_0
    129                          retval = true ;                                 // then everything is OK
   \   00000036   E081               LDI     R24, 1
    130                      }
    131                  }
    132              }
    133              return retval;
   \                     ??EEPROMVersion_0:
   \   00000038   2F08               MOV     R16, R24
   \   0000003A   9621               ADIW    R29:R28, 1
   \   0000003C   9189               LD      R24, Y+
   \   0000003E   9508               RET
    134          }
    135          
    136          /**===========================================================================
    137          ** Reset the EEPROM
    138          **==========================================================================*/ 

   \                                 In  segment CODE, align 2, keep-with-next
    139          void EEPROMReset(void) {
   \                     EEPROMReset:
    140              EEARL = (0x0ffe & 0xff);
   \   00000000   EF0E               LDI     R16, 254
   \   00000002   BB0E               OUT     0x1E, R16
    141              EEARH = (0x0ffe >> 8);
   \   00000004   E00F               LDI     R16, 15
   \   00000006   BB0F               OUT     0x1F, R16
    142              EEDR = EEPROM_RESET;
   \   00000008   ED0B               LDI     R16, 219
   \   0000000A   BB0D               OUT     0x1D, R16
    143              EECR |= (1<<EEMWE);
   \   0000000C   9AE2               SBI     0x1C, 0x02
    144              EECR |= (1<<EEWE);
   \   0000000E   9AE1               SBI     0x1C, 0x01
    145              while (EECR & (1<<EEWE))
   \                     ??EEPROMReset_0:
   \   00000010   99E1               SBIC    0x1C, 0x01
   \   00000012   CFFE               RJMP    ??EEPROMReset_0
    146                  ;
    147              WDTCR = 0x18;               //Start watchdog to genetate restart
   \   00000014   E108               LDI     R16, 24
   \   00000016   BD01               OUT     0x21, R16
    148              WDTCR = 0x18;
   \   00000018   E108               LDI     R16, 24
   \   0000001A   BD01               OUT     0x21, R16
    149          }
   \   0000001C   9508               RET
   \   0000001E                      REQUIRE _A_EEAR
   \   0000001E                      REQUIRE _A_EEDR
   \   0000001E                      REQUIRE _A_EECR
   \   0000001E                      REQUIRE _A_WDTCR

   \                                 In  segment INTVEC, offset 0x58, root
   \                     `??IntHandler_EEPROM::??INTVEC 88`:
   \   00000058   ........           JMP     IntHandler_EEPROM

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   EEPROMReset
      2      2   EEPROMVersion
        2      2   -> ReadEEPROMBuffer
      6      2   IntHandler_EEPROM
      8      2   ReadEEPROMBuffer
        8      2   -> ReadEEPROMByte
      3      2   ReadEEPROMByte
        3      2   -> OS_Error
      0      2   TestEEPROM
      5      2   WriteEEPROMBuffer
        5      2   -> OS_Error
      3      2   WriteEEPROMByte
        3      2   -> OS_Error


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  EEPROMReset
      64  EEPROMVersion
     106  IntHandler_EEPROM
       4  IntHandler_EEPROM::??INTVEC 88
      52  ReadEEPROMBuffer
      96  ReadEEPROMByte
       6  TestEEPROM
     136  WriteEEPROMBuffer
      96  WriteEEPROMByte
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_WDTCR

 
   5 bytes in segment ABSOLUTE
 586 bytes in segment CODE
   4 bytes in segment INTVEC
 
 586 bytes of CODE memory (+ 4 bytes shared)
   0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
