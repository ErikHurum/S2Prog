###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            18/Jan/2017  16:22:12
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\TPC\Src\init.c
#    Command line =  
#        D:\S2Prog\IO\TPC\Src\init.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\TPC\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\TPC\Debug\List -y --initializers_in_flash --no_cse
#        --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\TPC\INC\ -I
#        D:\S2Prog\IO\TPC\..\..\SHARED\INC\ --eeprom_size 4096 --clib -On
#    List file    =  D:\S2Prog\IO\TPC\Debug\List\init.lst
#    Object file  =  D:\S2Prog\IO\TPC\Debug\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\TPC\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x51
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_XDIV
   \                     _A_XDIV:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x64
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6c
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6d
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x95
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*
     14          **===========================================================================
     15          ** Init the system according to board type
     16          **===========================================================================
     17          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     18          void InitSystem(void) {
   \                     InitSystem:
   \   00000000   938A               ST      -Y, R24
     19          
     20              char UnitIDtemp;
     21          
     22              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000002   E000               LDI     R16, 0
   \   00000004   BB07               OUT     0x17, R16
     23          //    PORTB   =  0xc;
     24          #if (OS_UART == 0)
     25              UnitIDtemp = TPC140_LOC; //AStmark  for test
     26          #else
     27              UnitIDtemp  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000006   B306               IN      R16, 0x16
   \   00000008   9506               LSR     R16
   \   0000000A   9506               LSR     R16
   \   0000000C   7003               ANDI    R16, 0x03
   \   0000000E   2F80               MOV     R24, R16
     28          #endif
     29           
     30               if (((ReadEEPROMByte(EEPROM_PRI_ADDR)) < 30) || ((ReadEEPROMByte(EEPROM_PRI_ADDR) > 45))) {
   \   00000010   E001               LDI     R16, 1
   \   00000012   E010               LDI     R17, 0
   \   00000014   ........           CALL    ReadEEPROMByte
   \   00000018   310E               CPI     R16, 30
   \   0000001A   F030               BRCS    ??InitSystem_0
   \   0000001C   E001               LDI     R16, 1
   \   0000001E   E010               LDI     R17, 0
   \   00000020   ........           CALL    ReadEEPROMByte
   \   00000024   320E               CPI     R16, 46
   \   00000026   F140               BRCS    ??InitSystem_1
     31                switch (UnitIDtemp) {
   \                     ??InitSystem_0:
   \   00000028   2F08               MOV     R16, R24
   \   0000002A   5000               SUBI    R16, 0
   \   0000002C   F029               BREQ    ??InitSystem_2
   \   0000002E   950A               DEC     R16
   \   00000030   F071               BREQ    ??InitSystem_3
   \   00000032   950A               DEC     R16
   \   00000034   F0B9               BREQ    ??InitSystem_4
   \   00000036   C020               RJMP    ??InitSystem_1
     32                  case TPC140_LOC:
     33                    WriteEEPROMByte(EEPROM_PRI_ADDR, TPC140_DEF_ADDR);
   \                     ??InitSystem_2:
   \   00000038   E12F               LDI     R18, 31
   \   0000003A   E001               LDI     R16, 1
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   ........           CALL    WriteEEPROMByte
     34                    WriteEEPROMByte(EEPROM_SEC_ADDR, 0);
   \   00000042   E020               LDI     R18, 0
   \   00000044   E002               LDI     R16, 2
   \   00000046   E010               LDI     R17, 0
   \   00000048   ........           CALL    WriteEEPROMByte
     35                    break;
   \   0000004C   C015               RJMP    ??InitSystem_1
     36                  case TPC350_LOC:
     37                    WriteEEPROMByte(EEPROM_PRI_ADDR, TPC350_DEF_ADDR);
   \                     ??InitSystem_3:
   \   0000004E   E12E               LDI     R18, 30
   \   00000050   E001               LDI     R16, 1
   \   00000052   E010               LDI     R17, 0
   \   00000054   ........           CALL    WriteEEPROMByte
     38                    WriteEEPROMByte(EEPROM_SEC_ADDR, 0);
   \   00000058   E020               LDI     R18, 0
   \   0000005A   E002               LDI     R16, 2
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   ........           CALL    WriteEEPROMByte
     39                    break;
   \   00000062   C00A               RJMP    ??InitSystem_1
     40                  case TPC196_LOC:
     41                    WriteEEPROMByte(EEPROM_PRI_ADDR, TPC196_DEF_ADDR);
   \                     ??InitSystem_4:
   \   00000064   E220               LDI     R18, 32
   \   00000066   E001               LDI     R16, 1
   \   00000068   E010               LDI     R17, 0
   \   0000006A   ........           CALL    WriteEEPROMByte
     42                    WriteEEPROMByte(EEPROM_SEC_ADDR, 0);
   \   0000006E   E020               LDI     R18, 0
   \   00000070   E002               LDI     R16, 2
   \   00000072   E010               LDI     R17, 0
   \   00000074   ........           CALL    WriteEEPROMByte
     43                    break;
     44                }
     45              }
     46             
     47              switch (UnitIDtemp) {
   \                     ??InitSystem_1:
   \   00000078   2F08               MOV     R16, R24
   \   0000007A   5000               SUBI    R16, 0
   \   0000007C   F029               BREQ    ??InitSystem_5
   \   0000007E   950A               DEC     R16
   \   00000080   F051               BREQ    ??InitSystem_6
   \   00000082   950A               DEC     R16
   \   00000084   F079               BREQ    ??InitSystem_7
   \   00000086   C014               RJMP    ??InitSystem_8
     48                case TPC140_LOC:
     49                  UnitID = TPC140;
   \                     ??InitSystem_5:
   \   00000088   E100               LDI     R16, 16
   \   0000008A   9300....           STS     UnitID, R16
     50                  MyPriAddress = TPC140_DEF_ADDR;
   \   0000008E   E10F               LDI     R16, 31
   \   00000090   9300....           STS     MyPriAddress, R16
     51                  break;
   \   00000094   C00D               RJMP    ??InitSystem_8
     52                case TPC350_LOC:
     53                  UnitID = TPC350;
   \                     ??InitSystem_6:
   \   00000096   E000               LDI     R16, 0
   \   00000098   9300....           STS     UnitID, R16
     54                  MyPriAddress = TPC350_DEF_ADDR;
   \   0000009C   E10E               LDI     R16, 30
   \   0000009E   9300....           STS     MyPriAddress, R16
     55                  break;
   \   000000A2   C006               RJMP    ??InitSystem_8
     56                case TPC196_LOC:
     57                  UnitID = TPC196;
   \                     ??InitSystem_7:
   \   000000A4   E001               LDI     R16, 1
   \   000000A6   9300....           STS     UnitID, R16
     58                  MyPriAddress = TPC196_DEF_ADDR;
   \   000000AA   E200               LDI     R16, 32
   \   000000AC   9300....           STS     MyPriAddress, R16
     59                  break;
     60              }
     61              MySecAddress = MyAddress() ;    // Get my address
   \                     ??InitSystem_8:
   \   000000B0   ........           CALL    MyAddress
   \   000000B4   9300....           STS     MySecAddress, R16
     62          
     63          
     64          //#if (OS_UART == 0)
     65          //    UnitID = TPC140; //AStmark  for test
     66          //#endif
     67          
     68              Init_CPU();                         // init all processes
   \   000000B8   ....               RCALL   Init_CPU
     69              Init_IO();
   \   000000BA   ....               RCALL   Init_IO
     70              Init_TMR() ;
   \   000000BC   ....               RCALL   Init_TMR
     71          #if (OS_UART != 0)
     72              Init_USART(0, 9600) ;              // 
   \   000000BE   E840               LDI     R20, 128
   \   000000C0   E255               LDI     R21, 37
   \   000000C2   E060               LDI     R22, 0
   \   000000C4   E070               LDI     R23, 0
   \   000000C6   E000               LDI     R16, 0
   \   000000C8   ....               RCALL   Init_USART
     73          #endif
     74              Init_Values();                      // init the values in the system
   \   000000CA   ....               RCALL   Init_Values
     75          
     76          }
   \   000000CC   9189               LD      R24, Y+
   \   000000CE   9508               RET
   \   000000D0                      REQUIRE _A_DDRB
   \   000000D0                      REQUIRE _A_PINB
     77          
     78          /*
     79          **===========================================================================
     80          ** Init the CPU related registers
     81          **===========================================================================
     82          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     83          void Init_CPU( void ) {
   \                     Init_CPU:
     84          
     85              __disable_interrupt();
   \   00000000   94F8               CLI
     86          
     87              /*--- Configure CPU and interrupts ---*/
     88              switch (UnitID) {
   \   00000002   9100....           LDS     R16, UnitID
   \   00000006   5001               SUBI    R16, 1
   \   00000008   F011               BREQ    ??Init_CPU_0
   \   0000000A   500F               SUBI    R16, 15
   \   0000000C   F449               BRNE    ??Init_CPU_1
     89              case TPC140:                  // TPC140
     90              case TPC196:                  // TPC196
     91                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \                     ??Init_CPU_0:
   \   0000000E   E000               LDI     R16, 0
   \   00000010   BF09               OUT     0x39, R16
     92                  EICRA = 0xAA ;        // External interrupt control register, faling
   \   00000012   EA0A               LDI     R16, 170
   \   00000014   9300....           STS     _A_EICRA, R16
     93                  EICRB = 0xAA ;        // External interrupt control register, falling edge 
   \   00000018   EA0A               LDI     R16, 170
   \   0000001A   BF0A               OUT     0x3A, R16
     94                  EIMSK = 0xF0 ;        // External interrupt mask register, int 4 - 7 on 
   \   0000001C   EF00               LDI     R16, 240
   \   0000001E   BF09               OUT     0x39, R16
     95                  break;
     96              }
     97              MCUCR = 0x00 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_1:
   \   00000020   E000               LDI     R16, 0
   \   00000022   BF05               OUT     0x35, R16
     98              XMCRA = 0x00 ;       // maximum wait states
   \   00000024   E000               LDI     R16, 0
   \   00000026   9300....           STS     _A_XMCRA, R16
     99              XMCRB = 0x07 ;       // Full portC + bus keeper
   \   0000002A   E007               LDI     R16, 7
   \   0000002C   9300....           STS     _A_XMCRB, R16
    100              SREG  = 0x80 ;        // global interrupt
   \   00000030   E800               LDI     R16, 128
   \   00000032   BF0F               OUT     0x3F, R16
    101              XDIV  = 0x00 ;     // Init valuse used 0x00
   \   00000034   E000               LDI     R16, 0
   \   00000036   BF0C               OUT     0x3C, R16
    102          
    103          
    104              RestartStatus = MCUCSR;       // Remember reset source
   \   00000038   B704               IN      R16, 0x34
   \   0000003A   9300....           STS     RestartStatus, R16
    105              MCUCSR = 0x00;              // and reset
   \   0000003E   E000               LDI     R16, 0
   \   00000040   BF04               OUT     0x34, R16
    106              /*--- Initialize buffer ---*/
    107              WriteCount = 0;
   \   00000042   E000               LDI     R16, 0
   \   00000044   9300....           STS     WriteCount, R16
    108          
    109          }
   \   00000048   9508               RET
   \   0000004A                      REQUIRE _A_EIMSK
   \   0000004A                      REQUIRE _A_EICRA
   \   0000004A                      REQUIRE _A_EICRB
   \   0000004A                      REQUIRE _A_MCUCR
   \   0000004A                      REQUIRE _A_XMCRA
   \   0000004A                      REQUIRE _A_XMCRB
   \   0000004A                      REQUIRE _A_SREG
   \   0000004A                      REQUIRE _A_XDIV
   \   0000004A                      REQUIRE _A_MCUCSR
    110          
    111          /*
    112          **===========================================================================
    113          ** Init the watchdog registers
    114          **===========================================================================
    115          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    116          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
    117          
    118              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
    119              WDTCR = 0x0f;                           // 2.1 sec
   \   00000006   E00F               LDI     R16, 15
   \   00000008   BD01               OUT     0x21, R16
    120              asm("WDR");                             // kick the dog!!
   \   0000000A   95A8               WDR
    121          
    122          }
   \   0000000C   BF1F               OUT     0x3F, R17
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_WDTCR
    123          
    124          /*
    125          **===========================================================================
    126          ** Init the IO related registers
    127          **===========================================================================
    128          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    129          void Init_IO( void ) {
   \                     Init_IO:
    130          
    131              /*--- Initialize the data registers, output value and input pullup ---*/
    132              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5001               SUBI    R16, 1
   \   00000006   F121               BREQ    ??Init_IO_0
   \   00000008   500F               SUBI    R16, 15
   \   0000000A   F009               BREQ    $+2+2
   \   0000000C   C041               RJMP    ??Init_IO_1
    133              case TPC140:                  // TPC140  
    134                  DDRA   =  0xff ;      // Port A data direction, all out
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   BB0A               OUT     0x1A, R16
    135                  PORTA  =  0x00 ;      // Port A data
   \   00000012   E000               LDI     R16, 0
   \   00000014   BB0B               OUT     0x1B, R16
    136                  DDRB   =  0x00 ;      // Port B data direction, all in
   \   00000016   E000               LDI     R16, 0
   \   00000018   BB07               OUT     0x17, R16
    137                  PORTB  =  0x06 ;      // Port B data pullup on bit 2 and 3   
   \   0000001A   E006               LDI     R16, 6
   \   0000001C   BB08               OUT     0x18, R16
    138                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   BB04               OUT     0x14, R16
    139                  PORTC  =  0x00 ;      // Port C data
   \   00000022   E000               LDI     R16, 0
   \   00000024   BB05               OUT     0x15, R16
    140                  DDRD   =  0xff ;      // Port D data direction, all out
   \   00000026   EF0F               LDI     R16, 255
   \   00000028   BB01               OUT     0x11, R16
    141                  PORTD  =  0xfe ;      // Port D data 1-7 high, 0 low
   \   0000002A   EF0E               LDI     R16, 254
   \   0000002C   BB02               OUT     0x12, R16
    142                  DDRE   =  0x04 ;      // Port E data direction, PE2out
   \   0000002E   E004               LDI     R16, 4
   \   00000030   B902               OUT     0x02, R16
    143                  PORTE  =  0xfb ;      // Port E data pullup
   \   00000032   EF0B               LDI     R16, 251
   \   00000034   B903               OUT     0x03, R16
    144                  DDRF   =  0x00 ;      // Port F data direction, all in
   \   00000036   E000               LDI     R16, 0
   \   00000038   9300....           STS     _A_DDRF, R16
    145                  PORTF  =  0xff ;      // Port F data pullup
   \   0000003C   EF0F               LDI     R16, 255
   \   0000003E   9300....           STS     _A_PORTF, R16
    146                  DDRG   =  0xff ;      // Port G data direction, all out
   \   00000042   EF0F               LDI     R16, 255
   \   00000044   9300....           STS     _A_DDRG, R16
    147                  PORTG  =  0x00 ;      // Port G data 
   \   00000048   E000               LDI     R16, 0
   \   0000004A   9300....           STS     _A_PORTG, R16
    148                  break;
   \   0000004E   9508               RET
    149              case TPC196:                  // TPC196 
    150                  DDRA   =  0xff ;      // Port A data direction, all out
   \                     ??Init_IO_0:
   \   00000050   EF0F               LDI     R16, 255
   \   00000052   BB0A               OUT     0x1A, R16
    151                  PORTA  =  0x00 ;      // Port A data
   \   00000054   E000               LDI     R16, 0
   \   00000056   BB0B               OUT     0x1B, R16
    152                  DDRB   =  0x80 ;      // Port B data direction, 0-6 inm 7 out
   \   00000058   E800               LDI     R16, 128
   \   0000005A   BB07               OUT     0x17, R16
    153                  PORTB  =  0x06 ;      // Port B data pullup on bit 2 and 3   
   \   0000005C   E006               LDI     R16, 6
   \   0000005E   BB08               OUT     0x18, R16
    154                  DDRC   =  0xff ;      // Port C data direction, all out
   \   00000060   EF0F               LDI     R16, 255
   \   00000062   BB04               OUT     0x14, R16
    155                  PORTC  =  0x00 ;      // Port C data
   \   00000064   E000               LDI     R16, 0
   \   00000066   BB05               OUT     0x15, R16
    156                  DDRD   =  0xff ;      // Port D data direction, all out
   \   00000068   EF0F               LDI     R16, 255
   \   0000006A   BB01               OUT     0x11, R16
    157                  PORTD  =  0xfe ;      // Port D data 1-7 high, 0 low
   \   0000006C   EF0E               LDI     R16, 254
   \   0000006E   BB02               OUT     0x12, R16
    158                  DDRE   =  0x04 ;      // Port E data direction, PE2out
   \   00000070   E004               LDI     R16, 4
   \   00000072   B902               OUT     0x02, R16
    159                  PORTE  =  0xfb ;      // Port E data pullup
   \   00000074   EF0B               LDI     R16, 251
   \   00000076   B903               OUT     0x03, R16
    160                  DDRF   =  0x00 ;      // Port F data direction, all in
   \   00000078   E000               LDI     R16, 0
   \   0000007A   9300....           STS     _A_DDRF, R16
    161                  PORTF  =  0xff ;      // Port F data pullup
   \   0000007E   EF0F               LDI     R16, 255
   \   00000080   9300....           STS     _A_PORTF, R16
    162                  DDRG   =  0xff ;      // Port G data direction, all out
   \   00000084   EF0F               LDI     R16, 255
   \   00000086   9300....           STS     _A_DDRG, R16
    163                  PORTG  =  0x00 ;      // Port G data 
   \   0000008A   E000               LDI     R16, 0
   \   0000008C   9300....           STS     _A_PORTG, R16
    164                  break;
    165              default:
    166                  break;
    167              }    
    168          }
   \                     ??Init_IO_1:
   \   00000090   9508               RET
   \   00000092                      REQUIRE _A_DDRA
   \   00000092                      REQUIRE _A_PORTA
   \   00000092                      REQUIRE _A_DDRB
   \   00000092                      REQUIRE _A_PORTB
   \   00000092                      REQUIRE _A_DDRC
   \   00000092                      REQUIRE _A_PORTC
   \   00000092                      REQUIRE _A_DDRD
   \   00000092                      REQUIRE _A_PORTD
   \   00000092                      REQUIRE _A_DDRE
   \   00000092                      REQUIRE _A_PORTE
   \   00000092                      REQUIRE _A_DDRF
   \   00000092                      REQUIRE _A_PORTF
   \   00000092                      REQUIRE _A_DDRG
   \   00000092                      REQUIRE _A_PORTG
    169          
    170          /*
    171          **===========================================================================
    172          ** Init the timer related registers
    173          **===========================================================================
    174          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    175          void Init_TMR( void ) {
   \                     Init_TMR:
    176              /*--- Timer control (disable clock inputs) ---*/
    177          
    178              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   5001               SUBI    R16, 1
   \   00000006   F011               BREQ    ??Init_TMR_0
   \   00000008   500F               SUBI    R16, 15
   \   0000000A   F421               BRNE    ??Init_TMR_1
    179              case TPC140:                  // TPC140
    180              case TPC196:                  // TPC196
    181                  TCCR0   =  0x89 ;      // Timer control register 0 
   \                     ??Init_TMR_0:
   \   0000000C   E809               LDI     R16, 137
   \   0000000E   BF03               OUT     0x33, R16
    182                  OCR0    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
   \   00000010   E003               LDI     R16, 3
   \   00000012   BF01               OUT     0x31, R16
    183                  break;
    184              default:
    185                  break;
    186              }
    187          
    188          } 
   \                     ??Init_TMR_1:
   \   00000014   9508               RET
   \   00000016                      REQUIRE _A_TCCR0
   \   00000016                      REQUIRE _A_OCR0
    189          
    190          /*
    191          **===========================================================================
    192          ** Init the USARTs registers
    193          **===========================================================================
    194          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    195          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FF0               MOV     R31, R16
   \   00000006   012A               MOVW    R5:R4, R21:R20
   \   00000008   013B               MOVW    R7:R6, R23:R22
    196          
    197          
    198              /*--- Configure UART data block ---*/
    199              UART[channel].TxFirst   = 0x00;
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   E030               LDI     R19, 0
   \   0000000E   2F0F               MOV     R16, R31
   \   00000010   E010               LDI     R17, 0
   \   00000012   E14D               LDI     R20, 29
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   01D8               MOVW    R27:R26, R17:R16
   \   0000001C   ....               SUBI    R26, LOW((-(UART + 2) & 0xFFFF))
   \   0000001E   ....               SBCI    R27, HIGH((-(UART + 2) & 0xFFFF))
   \   00000020   932D               ST      X+, R18
   \   00000022   933C               ST      X, R19
   \   00000024   9711               SBIW    R27:R26, 1
    200              UART[channel].TxLast    = 0x00;
   \   00000026   E020               LDI     R18, 0
   \   00000028   E030               LDI     R19, 0
   \   0000002A   2F0F               MOV     R16, R31
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E14D               LDI     R20, 29
   \   00000030   E050               LDI     R21, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01D8               MOVW    R27:R26, R17:R16
   \   00000038   ....               SUBI    R26, LOW((-(UART + 4) & 0xFFFF))
   \   0000003A   ....               SBCI    R27, HIGH((-(UART + 4) & 0xFFFF))
   \   0000003C   932D               ST      X+, R18
   \   0000003E   933C               ST      X, R19
   \   00000040   9711               SBIW    R27:R26, 1
    201              UART[channel].TxCount   = 0x00;
   \   00000042   E020               LDI     R18, 0
   \   00000044   E030               LDI     R19, 0
   \   00000046   2F0F               MOV     R16, R31
   \   00000048   E010               LDI     R17, 0
   \   0000004A   E14D               LDI     R20, 29
   \   0000004C   E050               LDI     R21, 0
   \   0000004E   ........           CALL    ?S_EC_MUL_L02
   \   00000052   01D8               MOVW    R27:R26, R17:R16
   \   00000054   ....               SUBI    R26, LOW((-(UART + 6) & 0xFFFF))
   \   00000056   ....               SBCI    R27, HIGH((-(UART + 6) & 0xFFFF))
   \   00000058   932D               ST      X+, R18
   \   0000005A   933C               ST      X, R19
   \   0000005C   9711               SBIW    R27:R26, 1
    202              UART[channel].RxFirst   = 0x00;
   \   0000005E   E020               LDI     R18, 0
   \   00000060   E030               LDI     R19, 0
   \   00000062   2F0F               MOV     R16, R31
   \   00000064   E010               LDI     R17, 0
   \   00000066   E14D               LDI     R20, 29
   \   00000068   E050               LDI     R21, 0
   \   0000006A   ........           CALL    ?S_EC_MUL_L02
   \   0000006E   01D8               MOVW    R27:R26, R17:R16
   \   00000070   ....               SUBI    R26, LOW((-(UART + 14) & 0xFFFF))
   \   00000072   ....               SBCI    R27, HIGH((-(UART + 14) & 0xFFFF))
   \   00000074   932D               ST      X+, R18
   \   00000076   933C               ST      X, R19
   \   00000078   9711               SBIW    R27:R26, 1
    203              UART[channel].RxLast    = 0x00;
   \   0000007A   E020               LDI     R18, 0
   \   0000007C   E030               LDI     R19, 0
   \   0000007E   2F0F               MOV     R16, R31
   \   00000080   E010               LDI     R17, 0
   \   00000082   E14D               LDI     R20, 29
   \   00000084   E050               LDI     R21, 0
   \   00000086   ........           CALL    ?S_EC_MUL_L02
   \   0000008A   01D8               MOVW    R27:R26, R17:R16
   \   0000008C   ....               SUBI    R26, LOW((-(UART + 16) & 0xFFFF))
   \   0000008E   ....               SBCI    R27, HIGH((-(UART + 16) & 0xFFFF))
   \   00000090   932D               ST      X+, R18
   \   00000092   933C               ST      X, R19
   \   00000094   9711               SBIW    R27:R26, 1
    204              UART[channel].RxCount   = 0x00;
   \   00000096   E020               LDI     R18, 0
   \   00000098   E030               LDI     R19, 0
   \   0000009A   2F0F               MOV     R16, R31
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   E14D               LDI     R20, 29
   \   000000A0   E050               LDI     R21, 0
   \   000000A2   ........           CALL    ?S_EC_MUL_L02
   \   000000A6   01D8               MOVW    R27:R26, R17:R16
   \   000000A8   ....               SUBI    R26, LOW((-(UART + 18) & 0xFFFF))
   \   000000AA   ....               SBCI    R27, HIGH((-(UART + 18) & 0xFFFF))
   \   000000AC   932D               ST      X+, R18
   \   000000AE   933C               ST      X, R19
   \   000000B0   9711               SBIW    R27:R26, 1
    205              UART[channel].RxState   = SYNC;
   \   000000B2   E020               LDI     R18, 0
   \   000000B4   2F0F               MOV     R16, R31
   \   000000B6   E010               LDI     R17, 0
   \   000000B8   E14D               LDI     R20, 29
   \   000000BA   E050               LDI     R21, 0
   \   000000BC   ........           CALL    ?S_EC_MUL_L02
   \   000000C0   01D8               MOVW    R27:R26, R17:R16
   \   000000C2   ....               SUBI    R26, LOW((-(UART + 20) & 0xFFFF))
   \   000000C4   ....               SBCI    R27, HIGH((-(UART + 20) & 0xFFFF))
   \   000000C6   932C               ST      X, R18
    206              UART[channel].SyncCnt   = 0 ;
   \   000000C8   E020               LDI     R18, 0
   \   000000CA   2F0F               MOV     R16, R31
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   E14D               LDI     R20, 29
   \   000000D0   E050               LDI     R21, 0
   \   000000D2   ........           CALL    ?S_EC_MUL_L02
   \   000000D6   01D8               MOVW    R27:R26, R17:R16
   \   000000D8   ....               SUBI    R26, LOW((-(UART + 21) & 0xFFFF))
   \   000000DA   ....               SBCI    R27, HIGH((-(UART + 21) & 0xFFFF))
   \   000000DC   932C               ST      X, R18
    207              UART[channel].TxStatus  = 0x00;
   \   000000DE   E020               LDI     R18, 0
   \   000000E0   2F0F               MOV     R16, R31
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14D               LDI     R20, 29
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01D8               MOVW    R27:R26, R17:R16
   \   000000EE   ....               SUBI    R26, LOW((-(UART + 10) & 0xFFFF))
   \   000000F0   ....               SBCI    R27, HIGH((-(UART + 10) & 0xFFFF))
   \   000000F2   932C               ST      X, R18
    208          
    209              switch (channel) {
   \   000000F4   23FF               TST     R31
   \   000000F6   F009               BREQ    $+2+2
   \   000000F8   C049               RJMP    ??Init_USART_0
    210              case 0x00 :          
    211                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \   000000FA   EF2A               LDI     R18, 250
   \   000000FC   E030               LDI     R19, 0
   \   000000FE   2F0F               MOV     R16, R31
   \   00000100   E010               LDI     R17, 0
   \   00000102   E14D               LDI     R20, 29
   \   00000104   E050               LDI     R21, 0
   \   00000106   ........           CALL    ?S_EC_MUL_L02
   \   0000010A   01D8               MOVW    R27:R26, R17:R16
   \   0000010C   ....               SUBI    R26, LOW((-(UART + 22) & 0xFFFF))
   \   0000010E   ....               SBCI    R27, HIGH((-(UART + 22) & 0xFFFF))
   \   00000110   932D               ST      X+, R18
   \   00000112   933C               ST      X, R19
   \   00000114   9711               SBIW    R27:R26, 1
    212                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   00000116   ....               LDI     R18, LOW(TxBufferCh0)
   \   00000118   ....               LDI     R19, (TxBufferCh0) >> 8
   \   0000011A   2F0F               MOV     R16, R31
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   E14D               LDI     R20, 29
   \   00000120   E050               LDI     R21, 0
   \   00000122   ........           CALL    ?S_EC_MUL_L02
   \   00000126   01D8               MOVW    R27:R26, R17:R16
   \   00000128   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000012A   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   0000012C   932D               ST      X+, R18
   \   0000012E   933C               ST      X, R19
   \   00000130   9711               SBIW    R27:R26, 1
    213                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   00000132   ....               LDI     R18, LOW(RxBufferCh0)
   \   00000134   ....               LDI     R19, (RxBufferCh0) >> 8
   \   00000136   2F0F               MOV     R16, R31
   \   00000138   E010               LDI     R17, 0
   \   0000013A   E14D               LDI     R20, 29
   \   0000013C   E050               LDI     R21, 0
   \   0000013E   ........           CALL    ?S_EC_MUL_L02
   \   00000142   01D8               MOVW    R27:R26, R17:R16
   \   00000144   ....               SUBI    R26, LOW((-(UART + 12) & 0xFFFF))
   \   00000146   ....               SBCI    R27, HIGH((-(UART + 12) & 0xFFFF))
   \   00000148   932D               ST      X+, R18
   \   0000014A   933C               ST      X, R19
   \   0000014C   9711               SBIW    R27:R26, 1
    214                  UCSR0A  = 0x00; 
   \   0000014E   E000               LDI     R16, 0
   \   00000150   B90B               OUT     0x0B, R16
    215                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   00000152   E400               LDI     R16, 64
   \   00000154   E412               LDI     R17, 66
   \   00000156   E02F               LDI     R18, 15
   \   00000158   E030               LDI     R19, 0
   \   0000015A   01A2               MOVW    R21:R20, R5:R4
   \   0000015C   01B3               MOVW    R23:R22, R7:R6
   \   0000015E   ........           CALL    ?UL_DIVMOD_L03
   \   00000162   950A               DEC     R16
   \   00000164   B909               OUT     0x09, R16
    216                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   00000166   E400               LDI     R16, 64
   \   00000168   E412               LDI     R17, 66
   \   0000016A   E02F               LDI     R18, 15
   \   0000016C   E030               LDI     R19, 0
   \   0000016E   01A2               MOVW    R21:R20, R5:R4
   \   00000170   01B3               MOVW    R23:R22, R7:R6
   \   00000172   ........           CALL    ?UL_DIVMOD_L03
   \   00000176   5001               SUBI    R16, 1
   \   00000178   4010               SBCI    R17, 0
   \   0000017A   2F01               MOV     R16, R17
   \   0000017C   E010               LDI     R17, 0
   \   0000017E   9300....           STS     _A_UBRR0H, R16
    217                  UCSR0B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   00000182   EB08               LDI     R16, 184
   \   00000184   B90A               OUT     0x0A, R16
    218                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000186   E006               LDI     R16, 6
   \   00000188   9300....           STS     _A_UCSR0C, R16
    219                  break;
    220              default:
    221                  break ;
    222              }    
    223          }
   \                     ??Init_USART_0:
   \   0000018C   E0E8               LDI     R30, 8
   \   0000018E   ........           JMP     ?EPILOGUE_B8_L09
   \   00000192                      REQUIRE _A_UCSR0A
   \   00000192                      REQUIRE _A_UBRR0L
   \   00000192                      REQUIRE _A_UBRR0H
   \   00000192                      REQUIRE _A_UCSR0B
   \   00000192                      REQUIRE _A_UCSR0C
    224          
    225          /*
    226          **===========================================================================
    227          ** Init values  in the system
    228          **===========================================================================
    229          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    230          void Init_Values(void) {
   \                     Init_Values:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    231          
    232              int i;
    233              
    234              for (i = 0; i < PACKED_DATA_SIZE; i++) {  //copy data from eeprom to ram
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
   \                     ??Init_Values_0:
   \   00000008   3288               CPI     R24, 40
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   0790               CPC     R25, R16
   \   0000000E   F45C               BRGE    ??Init_Values_1
    235                packed_data[i] = ReadEEPROMByte(EEPROM_EEPROMDATA +i);
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   9633               ADIW    R31:R30, 3
   \   00000014   018F               MOVW    R17:R16, R31:R30
   \   00000016   ........           CALL    ReadEEPROMByte
   \   0000001A   01FC               MOVW    R31:R30, R25:R24
   \   0000001C   ....               SUBI    R30, LOW((-(packed_data) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(packed_data) & 0xFFFF) >> 8
   \   00000020   8300               ST      Z, R16
    236              }
   \   00000022   9601               ADIW    R25:R24, 1
   \   00000024   CFF1               RJMP    ??Init_Values_0
    237           /* AStmark unused so far
    238              CharToAscii(MyPriAddress, &Disp.lo_data[0][0]);
    239              CharToAscii(MySecAddress, &Disp.lo_data[0][3]);
    240              Disp.lo_data[0][0] = 5 ;                         // four char to disp
    241          
    242              CharToAscii((char) PROG_VERSION, &Disp.x_data[0][0]);
    243              Disp.x_data[0][0] = 2 ;                          // four char to disp
    244          
    245              Disp.hi_data[0][0] = 4 ;                         // four char to disp
    246              Disp.hi_data[0][1] = 'V' ;                       // version
    247              CharToAscii((char) PROG_VERSION, &Disp.hi_data[0][2]) ;
    248          */
    249          
    250          }
   \                     ??Init_Values_1:
   \   00000026   9189               LD      R24, Y+
   \   00000028   9199               LD      R25, Y+
   \   0000002A   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   InitSystem
        1      2   -> Init_CPU
        1      2   -> Init_IO
        1      2   -> Init_TMR
        1      2   -> Init_USART
        1      2   -> Init_Values
        1      2   -> MyAddress
        1      2   -> ReadEEPROMByte
        1      2   -> WriteEEPROMByte
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      8      2   Init_USART
        8      2 ?S_EC_MUL_L02
        8      2 ?UL_DIVMOD_L03
      2      2   Init_Values
        2      2   -> ReadEEPROMByte
      0      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     208  InitSystem
      74  Init_CPU
     146  Init_IO
      22  Init_TMR
     402  Init_USART
      44  Init_Values
      16  Init_Watchdog
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_MCUCSR
       1  _A_OCR0
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR0
       1  _A_UBRR0H
       1  _A_UBRR0L
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_WDTCR
       1  _A_XDIV
       1  _A_XMCRA
       1  _A_XMCRB

 
  32 bytes in segment ABSOLUTE
 912 bytes in segment CODE
 
 912 bytes of CODE memory
   0 bytes of DATA memory (+ 32 bytes shared)

Errors: none
Warnings: none
