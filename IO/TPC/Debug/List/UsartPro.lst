###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            18/Jan/2017  16:22:12
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\TPC\Src\UsartPro.c
#    Command line =  
#        D:\S2Prog\IO\TPC\Src\UsartPro.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\TPC\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\TPC\Debug\List -y --initializers_in_flash --no_cse
#        --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\TPC\INC\ -I
#        D:\S2Prog\IO\TPC\..\..\SHARED\INC\ --eeprom_size 4096 --clib -On
#    List file    =  D:\S2Prog\IO\TPC\Debug\List\UsartPro.lst
#    Object file  =  D:\S2Prog\IO\TPC\Debug\Obj\UsartPro.r90
#
###############################################################################

D:\S2Prog\IO\TPC\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0 
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3c
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          
     12          /*************************************************************************
     13          *   (This is a timer calback)
     14          *  Timout timer USART 0
     15          *
     16          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     17          void TimoutUSART0(void) {
   \                     TimoutUSART0:
     18          
     19              UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000000   9855               CBI     0x0A, 0x05
     20              ClrBit(PORTE, 0x04) ;                              // TXE0 off
   \   00000002   981A               CBI     0x03, 0x02
     21              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \   00000004   ....               LDI     R16, LOW(TimerUSART0)
   \   00000006   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000008   ........           CALL    OS_StopTimer
     22          }
   \   0000000C   9508               RET
   \   0000000E                      REQUIRE _A_UCSR0B
   \   0000000E                      REQUIRE _A_PORTE
     23          
     24          /*************************************************************************
     25          *   (This is a task)
     26          *  Usart0 handler
     27          *
     28          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     29          void Usart0Handler(void) {
   \                     Usart0Handler:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
     30              char stat, FailCount;
     31              
     32              
     33              FailCount = 0 ;
   \   00000004   E090               LDI     R25, 0
     34              while (1) {
     35                  stat = OS_WaitEventTimed(1,10000);  // Time out 10 sec
   \                     ??Usart0Handler_0:
   \   00000006   E120               LDI     R18, 16
   \   00000008   E237               LDI     R19, 39
   \   0000000A   E001               LDI     R16, 1
   \   0000000C   ........           CALL    OS_WaitEventTimed
   \   00000010   2F80               MOV     R24, R16
     36                  if (stat & 0x01) {
   \   00000012   FB80               BST     R24, 0
   \   00000014   F466               BRTC    ??Usart0Handler_1
     37                      OS_Use(&UARTSEND);
   \   00000016   ....               LDI     R16, LOW(UARTSEND)
   \   00000018   ....               LDI     R17, (UARTSEND) >> 8
   \   0000001A   ........           CALL    OS_Use
     38                      UsartCheckPackage(0) ; 
   \   0000001E   E000               LDI     R16, 0
   \   00000020   ....               RCALL   UsartCheckPackage
     39                      OS_Unuse(&UARTSEND);
   \   00000022   ....               LDI     R16, LOW(UARTSEND)
   \   00000024   ....               LDI     R17, (UARTSEND) >> 8
   \   00000026   ........           CALL    OS_Unuse
     40                      FailCount = 0;
   \   0000002A   E090               LDI     R25, 0
   \   0000002C   CFEC               RJMP    ??Usart0Handler_0
     41                  } else if (!stat) {
   \                     ??Usart0Handler_1:
   \   0000002E   2388               TST     R24
   \   00000030   F751               BRNE    ??Usart0Handler_0
     42                      if (FailCount++ > 12) {         // More than 2 minutes
   \   00000032   2F09               MOV     R16, R25
   \   00000034   2F90               MOV     R25, R16
   \   00000036   9593               INC     R25
   \   00000038   300D               CPI     R16, 13
   \   0000003A   F068               BRCS    ??Usart0Handler_2
     43                        if (!RXTimeout) {
   \   0000003C   9100....           LDS     R16, RXTimeout
   \   00000040   2300               TST     R16
   \   00000042   F441               BRNE    ??Usart0Handler_3
     44                          PrintComError("No Rx", ALARM_FLASH);
   \   00000044   E022               LDI     R18, 2
   \   00000046   ....               LDI     R16, LOW(`?<Constant "No Rx">`)
   \   00000048   ....               LDI     R17, (`?<Constant "No Rx">`) >> 8
   \   0000004A   ........           CALL    PrintComError
     45                          RXTimeout = true;
   \   0000004E   E001               LDI     R16, 1
   \   00000050   9300....           STS     RXTimeout, R16
     46                        }
     47                        FailCount = 0;
   \                     ??Usart0Handler_3:
   \   00000054   E090               LDI     R25, 0
     48                      }
     49                      GoToSyncUART(0) ;                                    // go to sync modus for recive
   \                     ??Usart0Handler_2:
   \   00000056   E000               LDI     R16, 0
   \   00000058   ........           CALL    GoToSyncUART
   \   0000005C   CFD4               RJMP    ??Usart0Handler_0
     50                  }
     51              }
     52          }
     53          
     54          /*************************************************************************
     55          *
     56          *  Check the incoming packages (ANPRO1)
     57          *
     58          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     59          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
     60          
     61              unsigned short pointer;
     62              char    retval ;
     63          
     64              UART[ch].RxSendReply = false ;                           // flag for answering set to fault
   \   00000006   E020               LDI     R18, 0
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14D               LDI     R20, 29
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8F24               STD     Z+28, R18
     65              UART[ch].TxFirst = 6 ;                                 // Start pos for first TX command
   \   0000001C   E026               LDI     R18, 6
   \   0000001E   E030               LDI     R19, 0
   \   00000020   2F08               MOV     R16, R24
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14D               LDI     R20, 29
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   8322               STD     Z+2, R18
   \   00000034   8333               STD     Z+3, R19
     66              pointer = 4 ;
   \   00000036   E0A4               LDI     R26, 4
   \   00000038   E0B0               LDI     R27, 0
     67              do {
     68                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   0000003A   019D               MOVW    R19:R18, R27:R26
   \   0000003C   2F08               MOV     R16, R24
   \   0000003E   ....               RCALL   CheckActionUart
   \   00000040   2F90               MOV     R25, R16
     69                  pointer = pointer + UART[ch].pRxBuffer[pointer+1] + 2;        // Point to a command cmd hb/lb
   \   00000042   2F08               MOV     R16, R24
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14D               LDI     R20, 29
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000054   8504               LDD     R16, Z+12
   \   00000056   8515               LDD     R17, Z+13
   \   00000058   0F0A               ADD     R16, R26
   \   0000005A   1F1B               ADC     R17, R27
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   8101               LDD     R16, Z+1
   \   00000060   2FE0               MOV     R30, R16
   \   00000062   E0F0               LDI     R31, 0
   \   00000064   9632               ADIW    R31:R30, 2
   \   00000066   0FAE               ADD     R26, R30
   \   00000068   1FBF               ADC     R27, R31
     70                  OS_Delay(0);
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   E010               LDI     R17, 0
   \   0000006E   ........           CALL    OS_Delay
     71              } while (retval && (pointer < (UART[ch].RxPacklen - 2 )));
   \   00000072   2399               TST     R25
   \   00000074   F081               BREQ    ??UsartCheckPackage_1
   \   00000076   2F08               MOV     R16, R24
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E14D               LDI     R20, 29
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000086   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000088   8D00               LDD     R16, Z+24
   \   0000008A   8D11               LDD     R17, Z+25
   \   0000008C   5002               SUBI    R16, 2
   \   0000008E   4010               SBCI    R17, 0
   \   00000090   17A0               CP      R26, R16
   \   00000092   07B1               CPC     R27, R17
   \   00000094   F290               BRCS    ??UsartCheckPackage_0
     72              if (UART[ch].RxSendReply) {                              //send answer
   \                     ??UsartCheckPackage_1:
   \   00000096   2F08               MOV     R16, R24
   \   00000098   E010               LDI     R17, 0
   \   0000009A   E14D               LDI     R20, 29
   \   0000009C   E050               LDI     R21, 0
   \   0000009E   ........           CALL    ?S_EC_MUL_L02
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A8   8D04               LDD     R16, Z+28
   \   000000AA   2300               TST     R16
   \   000000AC   F019               BREQ    ??UsartCheckPackage_2
     73                  Uart_BuildTail(ch);
   \   000000AE   2F08               MOV     R16, R24
   \   000000B0   ........           CALL    Uart_BuildTail
     74              }
     75              GoToSyncUART(ch) ;                                    // go to sync modus for recive
   \                     ??UsartCheckPackage_2:
   \   000000B4   2F08               MOV     R16, R24
   \   000000B6   ........           CALL    GoToSyncUART
     76          }
   \   000000BA   E0E4               LDI     R30, 4
   \   000000BC   ........           JMP     ?EPILOGUE_B4_L09
     77          
     78          /*************************************************************************
     79          *
     80          *  Check action on received data (ANPRO1)
     81          *
     82          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     83          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
     84          
     85              unsigned short   command;
     86              char    retval = true;
   \   00000008   E0B1               LDI     R27, 1
     87              float test = 2.0;
   \   0000000A   2444               CLR     R4
   \   0000000C   2455               CLR     R5
   \   0000000E   2466               CLR     R6
   \   00000010   E400               LDI     R16, 64
   \   00000012   2E70               MOV     R7, R16
     88          
     89              test *= pointer; 
   \   00000014   018C               MOVW    R17:R16, R25:R24
   \   00000016   E020               LDI     R18, 0
   \   00000018   E030               LDI     R19, 0
   \   0000001A   ........           CALL    ?UL2F_L04
   \   0000001E   01A8               MOVW    R21:R20, R17:R16
   \   00000020   01B9               MOVW    R23:R22, R19:R18
   \   00000022   0182               MOVW    R17:R16, R5:R4
   \   00000024   0193               MOVW    R19:R18, R7:R6
   \   00000026   ........           CALL    ?F_MUL_L04
   \   0000002A   0128               MOVW    R5:R4, R17:R16
   \   0000002C   0139               MOVW    R7:R6, R19:R18
     90              test = 0;
   \   0000002E   2444               CLR     R4
   \   00000030   2455               CLR     R5
   \   00000032   2466               CLR     R6
   \   00000034   2477               CLR     R7
     91              
     92              if (UART[ch].pRxBuffer[pointer+2] == MySecAddress) {	  // reset com error cnt. if lagal address
   \   00000036   2F0A               MOV     R16, R26
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14D               LDI     R20, 29
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000048   8504               LDD     R16, Z+12
   \   0000004A   8515               LDD     R17, Z+13
   \   0000004C   0F08               ADD     R16, R24
   \   0000004E   1F19               ADC     R17, R25
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   8102               LDD     R16, Z+2
   \   00000054   9110....           LDS     R17, MySecAddress
   \   00000058   1701               CP      R16, R17
   \   0000005A   F461               BRNE    ??CheckActionUart_0
     93                if (RXTimeout) {
   \   0000005C   9100....           LDS     R16, RXTimeout
   \   00000060   2300               TST     R16
   \   00000062   F029               BREQ    ??CheckActionUart_1
     94                  PrintComError(" OK", ALARM_OFF) ;
   \   00000064   E020               LDI     R18, 0
   \   00000066   ....               LDI     R16, LOW(`?<Constant " OK">`)
   \   00000068   ....               LDI     R17, (`?<Constant " OK">`) >> 8
   \   0000006A   ........           CALL    PrintComError
     95                }
     96                RXTimeout = false;
   \                     ??CheckActionUart_1:
   \   0000006E   E000               LDI     R16, 0
   \   00000070   9300....           STS     RXTimeout, R16
     97              }
     98          
     99              command = UART[ch].pRxBuffer[pointer];
   \                     ??CheckActionUart_0:
   \   00000074   2F0A               MOV     R16, R26
   \   00000076   E010               LDI     R17, 0
   \   00000078   E14D               LDI     R20, 29
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000084   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000086   8504               LDD     R16, Z+12
   \   00000088   8515               LDD     R17, Z+13
   \   0000008A   0F08               ADD     R16, R24
   \   0000008C   1F19               ADC     R17, R25
   \   0000008E   01F8               MOVW    R31:R30, R17:R16
   \   00000090   8100               LD      R16, Z
   \   00000092   E010               LDI     R17, 0
   \   00000094   0148               MOVW    R9:R8, R17:R16
    100              switch (command) {                                  // check action 
   \   00000096   0184               MOVW    R17:R16, R9:R8
   \   00000098   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   0000009A   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   0000009C   BFFB               OUT     0x3B, R31
   \   0000009E   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   000000A0   ........           JMP     ?SV_SWITCH_L06
    101          
    102              case ANP1_SND_XTXT :                        // Receive data for X-Displays
    103                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_2:
   \   000000A4   2F0A               MOV     R16, R26
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   E14D               LDI     R20, 29
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   ........           CALL    ?S_EC_MUL_L02
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B6   8504               LDD     R16, Z+12
   \   000000B8   8515               LDD     R17, Z+13
   \   000000BA   0F08               ADD     R16, R24
   \   000000BC   1F19               ADC     R17, R25
   \   000000BE   01F8               MOVW    R31:R30, R17:R16
   \   000000C0   8102               LDD     R16, Z+2
   \   000000C2   9110....           LDS     R17, MySecAddress
   \   000000C6   1701               CP      R16, R17
   \   000000C8   F429               BRNE    ??CheckActionUart_3
    104                  RecXText(ch, pointer+3);
   \   000000CA   019C               MOVW    R19:R18, R25:R24
   \   000000CC   5F2D               SUBI    R18, 253
   \   000000CE   4F3F               SBCI    R19, 255
   \   000000D0   2F0A               MOV     R16, R26
   \   000000D2   ....               RCALL   RecXText
    105                }
    106                break;
   \                     ??CheckActionUart_3:
   \   000000D4   C1FB               RJMP    ??CheckActionUart_4
    107          
    108              case ANP1_SND_LOTXT :                        // Receive data for low display
    109                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_5:
   \   000000D6   2F0A               MOV     R16, R26
   \   000000D8   E010               LDI     R17, 0
   \   000000DA   E14D               LDI     R20, 29
   \   000000DC   E050               LDI     R21, 0
   \   000000DE   ........           CALL    ?S_EC_MUL_L02
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E8   8504               LDD     R16, Z+12
   \   000000EA   8515               LDD     R17, Z+13
   \   000000EC   0F08               ADD     R16, R24
   \   000000EE   1F19               ADC     R17, R25
   \   000000F0   01F8               MOVW    R31:R30, R17:R16
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   9110....           LDS     R17, MySecAddress
   \   000000F8   1701               CP      R16, R17
   \   000000FA   F429               BRNE    ??CheckActionUart_6
    110                  RecLowText(ch, pointer+3);
   \   000000FC   019C               MOVW    R19:R18, R25:R24
   \   000000FE   5F2D               SUBI    R18, 253
   \   00000100   4F3F               SBCI    R19, 255
   \   00000102   2F0A               MOV     R16, R26
   \   00000104   ....               RCALL   RecLowText
    111                }
    112                break;
   \                     ??CheckActionUart_6:
   \   00000106   C1E2               RJMP    ??CheckActionUart_4
    113          
    114              case ANP1_SND_HITXT :                        // Receive data for high display
    115                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_7:
   \   00000108   2F0A               MOV     R16, R26
   \   0000010A   E010               LDI     R17, 0
   \   0000010C   E14D               LDI     R20, 29
   \   0000010E   E050               LDI     R21, 0
   \   00000110   ........           CALL    ?S_EC_MUL_L02
   \   00000114   01F8               MOVW    R31:R30, R17:R16
   \   00000116   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000118   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011A   8504               LDD     R16, Z+12
   \   0000011C   8515               LDD     R17, Z+13
   \   0000011E   0F08               ADD     R16, R24
   \   00000120   1F19               ADC     R17, R25
   \   00000122   01F8               MOVW    R31:R30, R17:R16
   \   00000124   8102               LDD     R16, Z+2
   \   00000126   9110....           LDS     R17, MySecAddress
   \   0000012A   1701               CP      R16, R17
   \   0000012C   F429               BRNE    ??CheckActionUart_8
    116                  RecHighText(ch, pointer+3);
   \   0000012E   019C               MOVW    R19:R18, R25:R24
   \   00000130   5F2D               SUBI    R18, 253
   \   00000132   4F3F               SBCI    R19, 255
   \   00000134   2F0A               MOV     R16, R26
   \   00000136   ....               RCALL   RecHighText
    117                }
    118                break; 
   \                     ??CheckActionUart_8:
   \   00000138   C1C9               RJMP    ??CheckActionUart_4
    119                
    120              case ANP1_SND_BAVAL :                        // Receive data for pri bar graph
    121                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_9:
   \   0000013A   2F0A               MOV     R16, R26
   \   0000013C   E010               LDI     R17, 0
   \   0000013E   E14D               LDI     R20, 29
   \   00000140   E050               LDI     R21, 0
   \   00000142   ........           CALL    ?S_EC_MUL_L02
   \   00000146   01F8               MOVW    R31:R30, R17:R16
   \   00000148   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000014C   8504               LDD     R16, Z+12
   \   0000014E   8515               LDD     R17, Z+13
   \   00000150   0F08               ADD     R16, R24
   \   00000152   1F19               ADC     R17, R25
   \   00000154   01F8               MOVW    R31:R30, R17:R16
   \   00000156   8102               LDD     R16, Z+2
   \   00000158   9110....           LDS     R17, MySecAddress
   \   0000015C   1701               CP      R16, R17
   \   0000015E   F429               BRNE    ??CheckActionUart_10
    122                  RecPriBarVal(ch, pointer+3);
   \   00000160   019C               MOVW    R19:R18, R25:R24
   \   00000162   5F2D               SUBI    R18, 253
   \   00000164   4F3F               SBCI    R19, 255
   \   00000166   2F0A               MOV     R16, R26
   \   00000168   ....               RCALL   RecPriBarVal
    123                }
    124                break;
   \                     ??CheckActionUart_10:
   \   0000016A   C1B0               RJMP    ??CheckActionUart_4
    125                
    126              case ANP1_SND_BAVOL :                        // Receive data for sec bar graph
    127                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_11:
   \   0000016C   2F0A               MOV     R16, R26
   \   0000016E   E010               LDI     R17, 0
   \   00000170   E14D               LDI     R20, 29
   \   00000172   E050               LDI     R21, 0
   \   00000174   ........           CALL    ?S_EC_MUL_L02
   \   00000178   01F8               MOVW    R31:R30, R17:R16
   \   0000017A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000017C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017E   8504               LDD     R16, Z+12
   \   00000180   8515               LDD     R17, Z+13
   \   00000182   0F08               ADD     R16, R24
   \   00000184   1F19               ADC     R17, R25
   \   00000186   01F8               MOVW    R31:R30, R17:R16
   \   00000188   8102               LDD     R16, Z+2
   \   0000018A   9110....           LDS     R17, MySecAddress
   \   0000018E   1701               CP      R16, R17
   \   00000190   F429               BRNE    ??CheckActionUart_12
    128                  RecSecBarVal(ch, pointer+3);
   \   00000192   019C               MOVW    R19:R18, R25:R24
   \   00000194   5F2D               SUBI    R18, 253
   \   00000196   4F3F               SBCI    R19, 255
   \   00000198   2F0A               MOV     R16, R26
   \   0000019A   ....               RCALL   RecSecBarVal
    129                }
    130                break; 
   \                     ??CheckActionUart_12:
   \   0000019C   C197               RJMP    ??CheckActionUart_4
    131                
    132              case ANP1_SND_ALSTA :                        // Receive data for alarm status
    133                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_13:
   \   0000019E   2F0A               MOV     R16, R26
   \   000001A0   E010               LDI     R17, 0
   \   000001A2   E14D               LDI     R20, 29
   \   000001A4   E050               LDI     R21, 0
   \   000001A6   ........           CALL    ?S_EC_MUL_L02
   \   000001AA   01F8               MOVW    R31:R30, R17:R16
   \   000001AC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001B0   8504               LDD     R16, Z+12
   \   000001B2   8515               LDD     R17, Z+13
   \   000001B4   0F08               ADD     R16, R24
   \   000001B6   1F19               ADC     R17, R25
   \   000001B8   01F8               MOVW    R31:R30, R17:R16
   \   000001BA   8102               LDD     R16, Z+2
   \   000001BC   9110....           LDS     R17, MySecAddress
   \   000001C0   1701               CP      R16, R17
   \   000001C2   F429               BRNE    ??CheckActionUart_14
    134                  RecAlStatus(ch, pointer+3);
   \   000001C4   019C               MOVW    R19:R18, R25:R24
   \   000001C6   5F2D               SUBI    R18, 253
   \   000001C8   4F3F               SBCI    R19, 255
   \   000001CA   2F0A               MOV     R16, R26
   \   000001CC   ....               RCALL   RecAlStatus
    135                }
    136                break; 
   \                     ??CheckActionUart_14:
   \   000001CE   C17E               RJMP    ??CheckActionUart_4
    137                
    138               case ANP1_REQ_ACKSTAT :                     // Receive data acknowledge status
    139                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_15:
   \   000001D0   2F0A               MOV     R16, R26
   \   000001D2   E010               LDI     R17, 0
   \   000001D4   E14D               LDI     R20, 29
   \   000001D6   E050               LDI     R21, 0
   \   000001D8   ........           CALL    ?S_EC_MUL_L02
   \   000001DC   01F8               MOVW    R31:R30, R17:R16
   \   000001DE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001E2   8504               LDD     R16, Z+12
   \   000001E4   8515               LDD     R17, Z+13
   \   000001E6   0F08               ADD     R16, R24
   \   000001E8   1F19               ADC     R17, R25
   \   000001EA   01F8               MOVW    R31:R30, R17:R16
   \   000001EC   8102               LDD     R16, Z+2
   \   000001EE   9110....           LDS     R17, MySecAddress
   \   000001F2   1701               CP      R16, R17
   \   000001F4   F429               BRNE    ??CheckActionUart_16
    140                  RecAckStatus(ch, pointer+3);
   \   000001F6   019C               MOVW    R19:R18, R25:R24
   \   000001F8   5F2D               SUBI    R18, 253
   \   000001FA   4F3F               SBCI    R19, 255
   \   000001FC   2F0A               MOV     R16, R26
   \   000001FE   ....               RCALL   RecAckStatus
    141                }
    142                break; 
   \                     ??CheckActionUart_16:
   \   00000200   C165               RJMP    ??CheckActionUart_4
    143                
    144               case ANP1_SND_LOGRA :                     // Receive image for low disp
    145                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_17:
   \   00000202   2F0A               MOV     R16, R26
   \   00000204   E010               LDI     R17, 0
   \   00000206   E14D               LDI     R20, 29
   \   00000208   E050               LDI     R21, 0
   \   0000020A   ........           CALL    ?S_EC_MUL_L02
   \   0000020E   01F8               MOVW    R31:R30, R17:R16
   \   00000210   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000212   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000214   8504               LDD     R16, Z+12
   \   00000216   8515               LDD     R17, Z+13
   \   00000218   0F08               ADD     R16, R24
   \   0000021A   1F19               ADC     R17, R25
   \   0000021C   01F8               MOVW    R31:R30, R17:R16
   \   0000021E   8102               LDD     R16, Z+2
   \   00000220   9110....           LDS     R17, MySecAddress
   \   00000224   1701               CP      R16, R17
   \   00000226   F429               BRNE    ??CheckActionUart_18
    146                  RecLoGraph(ch, pointer+3);
   \   00000228   019C               MOVW    R19:R18, R25:R24
   \   0000022A   5F2D               SUBI    R18, 253
   \   0000022C   4F3F               SBCI    R19, 255
   \   0000022E   2F0A               MOV     R16, R26
   \   00000230   ....               RCALL   RecLoGraph
    147                }
    148                break;
   \                     ??CheckActionUart_18:
   \   00000232   C14C               RJMP    ??CheckActionUart_4
    149          
    150               case ANP1_SND_HIIMG :                     // Receive image for bar graph
    151                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_19:
   \   00000234   2F0A               MOV     R16, R26
   \   00000236   E010               LDI     R17, 0
   \   00000238   E14D               LDI     R20, 29
   \   0000023A   E050               LDI     R21, 0
   \   0000023C   ........           CALL    ?S_EC_MUL_L02
   \   00000240   01F8               MOVW    R31:R30, R17:R16
   \   00000242   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000244   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000246   8504               LDD     R16, Z+12
   \   00000248   8515               LDD     R17, Z+13
   \   0000024A   0F08               ADD     R16, R24
   \   0000024C   1F19               ADC     R17, R25
   \   0000024E   01F8               MOVW    R31:R30, R17:R16
   \   00000250   8102               LDD     R16, Z+2
   \   00000252   9110....           LDS     R17, MySecAddress
   \   00000256   1701               CP      R16, R17
   \   00000258   F429               BRNE    ??CheckActionUart_20
    152                  RecHiImage(ch, pointer+3);
   \   0000025A   019C               MOVW    R19:R18, R25:R24
   \   0000025C   5F2D               SUBI    R18, 253
   \   0000025E   4F3F               SBCI    R19, 255
   \   00000260   2F0A               MOV     R16, R26
   \   00000262   ....               RCALL   RecHiImage
    153                }
    154                break;
   \                     ??CheckActionUart_20:
   \   00000264   C133               RJMP    ??CheckActionUart_4
    155          
    156               case ANP1_SND_DVAL :                     // Receive Display window
    157                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_21:
   \   00000266   2F0A               MOV     R16, R26
   \   00000268   E010               LDI     R17, 0
   \   0000026A   E14D               LDI     R20, 29
   \   0000026C   E050               LDI     R21, 0
   \   0000026E   ........           CALL    ?S_EC_MUL_L02
   \   00000272   01F8               MOVW    R31:R30, R17:R16
   \   00000274   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000276   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000278   8504               LDD     R16, Z+12
   \   0000027A   8515               LDD     R17, Z+13
   \   0000027C   0F08               ADD     R16, R24
   \   0000027E   1F19               ADC     R17, R25
   \   00000280   01F8               MOVW    R31:R30, R17:R16
   \   00000282   8102               LDD     R16, Z+2
   \   00000284   9110....           LDS     R17, MySecAddress
   \   00000288   1701               CP      R16, R17
   \   0000028A   F429               BRNE    ??CheckActionUart_22
    158                  RecValDisp(ch, pointer+3);
   \   0000028C   019C               MOVW    R19:R18, R25:R24
   \   0000028E   5F2D               SUBI    R18, 253
   \   00000290   4F3F               SBCI    R19, 255
   \   00000292   2F0A               MOV     R16, R26
   \   00000294   ....               RCALL   RecValDisp
    159                }
    160                break;
   \                     ??CheckActionUart_22:
   \   00000296   C11A               RJMP    ??CheckActionUart_4
    161                
    162               case ANP1_SND_DISDVAL :                     // Receive disable window command
    163                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_23:
   \   00000298   2F0A               MOV     R16, R26
   \   0000029A   E010               LDI     R17, 0
   \   0000029C   E14D               LDI     R20, 29
   \   0000029E   E050               LDI     R21, 0
   \   000002A0   ........           CALL    ?S_EC_MUL_L02
   \   000002A4   01F8               MOVW    R31:R30, R17:R16
   \   000002A6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002A8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002AA   8504               LDD     R16, Z+12
   \   000002AC   8515               LDD     R17, Z+13
   \   000002AE   0F08               ADD     R16, R24
   \   000002B0   1F19               ADC     R17, R25
   \   000002B2   01F8               MOVW    R31:R30, R17:R16
   \   000002B4   8102               LDD     R16, Z+2
   \   000002B6   9110....           LDS     R17, MySecAddress
   \   000002BA   1701               CP      R16, R17
   \   000002BC   F429               BRNE    ??CheckActionUart_24
    164                  RecDisableDisp(ch, pointer+3);
   \   000002BE   019C               MOVW    R19:R18, R25:R24
   \   000002C0   5F2D               SUBI    R18, 253
   \   000002C2   4F3F               SBCI    R19, 255
   \   000002C4   2F0A               MOV     R16, R26
   \   000002C6   ....               RCALL   RecDisableDisp
    165                }
    166                break;
   \                     ??CheckActionUart_24:
   \   000002C8   C101               RJMP    ??CheckActionUart_4
    167                
    168               case ANP1_SND_EEPDATA :                     // Receive Eepromdata
    169                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_25:
   \   000002CA   2F0A               MOV     R16, R26
   \   000002CC   E010               LDI     R17, 0
   \   000002CE   E14D               LDI     R20, 29
   \   000002D0   E050               LDI     R21, 0
   \   000002D2   ........           CALL    ?S_EC_MUL_L02
   \   000002D6   01F8               MOVW    R31:R30, R17:R16
   \   000002D8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002DA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002DC   8504               LDD     R16, Z+12
   \   000002DE   8515               LDD     R17, Z+13
   \   000002E0   0F08               ADD     R16, R24
   \   000002E2   1F19               ADC     R17, R25
   \   000002E4   01F8               MOVW    R31:R30, R17:R16
   \   000002E6   8102               LDD     R16, Z+2
   \   000002E8   9110....           LDS     R17, MySecAddress
   \   000002EC   1701               CP      R16, R17
   \   000002EE   F429               BRNE    ??CheckActionUart_26
    170                  RecEepData(ch, pointer+3);
   \   000002F0   019C               MOVW    R19:R18, R25:R24
   \   000002F2   5F2D               SUBI    R18, 253
   \   000002F4   4F3F               SBCI    R19, 255
   \   000002F6   2F0A               MOV     R16, R26
   \   000002F8   ....               RCALL   RecEepData
    171                }
    172                break;
   \                     ??CheckActionUart_26:
   \   000002FA   C0E8               RJMP    ??CheckActionUart_4
    173          
    174               case ANP1_SND_CASET :                     // Receive card setup
    175                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_27:
   \   000002FC   2F0A               MOV     R16, R26
   \   000002FE   E010               LDI     R17, 0
   \   00000300   E14D               LDI     R20, 29
   \   00000302   E050               LDI     R21, 0
   \   00000304   ........           CALL    ?S_EC_MUL_L02
   \   00000308   01F8               MOVW    R31:R30, R17:R16
   \   0000030A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000030C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000030E   8504               LDD     R16, Z+12
   \   00000310   8515               LDD     R17, Z+13
   \   00000312   0F08               ADD     R16, R24
   \   00000314   1F19               ADC     R17, R25
   \   00000316   01F8               MOVW    R31:R30, R17:R16
   \   00000318   8102               LDD     R16, Z+2
   \   0000031A   9110....           LDS     R17, MySecAddress
   \   0000031E   1701               CP      R16, R17
   \   00000320   F429               BRNE    ??CheckActionUart_28
    176                  RecSetupData(ch, pointer+3);
   \   00000322   019C               MOVW    R19:R18, R25:R24
   \   00000324   5F2D               SUBI    R18, 253
   \   00000326   4F3F               SBCI    R19, 255
   \   00000328   2F0A               MOV     R16, R26
   \   0000032A   ....               RCALL   RecSetupData
    177                }
    178                break;
   \                     ??CheckActionUart_28:
   \   0000032C   C0CF               RJMP    ??CheckActionUart_4
    179          
    180                //*//
    181              case ANP1_REQ_TXEEP :                         // Request eepromdata
    182                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_29:
   \   0000032E   2F0A               MOV     R16, R26
   \   00000330   E010               LDI     R17, 0
   \   00000332   E14D               LDI     R20, 29
   \   00000334   E050               LDI     R21, 0
   \   00000336   ........           CALL    ?S_EC_MUL_L02
   \   0000033A   01F8               MOVW    R31:R30, R17:R16
   \   0000033C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000033E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000340   8504               LDD     R16, Z+12
   \   00000342   8515               LDD     R17, Z+13
   \   00000344   0F08               ADD     R16, R24
   \   00000346   1F19               ADC     R17, R25
   \   00000348   01F8               MOVW    R31:R30, R17:R16
   \   0000034A   8102               LDD     R16, Z+2
   \   0000034C   9110....           LDS     R17, MySecAddress
   \   00000350   1701               CP      R16, R17
   \   00000352   F429               BRNE    ??CheckActionUart_30
    183                  BuildEepData(ch, pointer+3);
   \   00000354   019C               MOVW    R19:R18, R25:R24
   \   00000356   5F2D               SUBI    R18, 253
   \   00000358   4F3F               SBCI    R19, 255
   \   0000035A   2F0A               MOV     R16, R26
   \   0000035C   ....               RCALL   BuildEepData
    184                }
    185                break;
   \                     ??CheckActionUart_30:
   \   0000035E   C0B6               RJMP    ??CheckActionUart_4
    186                
    187              case ANP1_SND_WEEP :                         // Write eeprom (dallas type)
    188                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_31:
   \   00000360   2F0A               MOV     R16, R26
   \   00000362   E010               LDI     R17, 0
   \   00000364   E14D               LDI     R20, 29
   \   00000366   E050               LDI     R21, 0
   \   00000368   ........           CALL    ?S_EC_MUL_L02
   \   0000036C   01F8               MOVW    R31:R30, R17:R16
   \   0000036E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000370   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000372   8504               LDD     R16, Z+12
   \   00000374   8515               LDD     R17, Z+13
   \   00000376   0F08               ADD     R16, R24
   \   00000378   1F19               ADC     R17, R25
   \   0000037A   01F8               MOVW    R31:R30, R17:R16
   \   0000037C   8102               LDD     R16, Z+2
   \   0000037E   9110....           LDS     R17, MySecAddress
   \   00000382   1701               CP      R16, R17
   \   00000384   F429               BRNE    ??CheckActionUart_32
    189                  BuildEEPWriteData(ch, pointer+3);
   \   00000386   019C               MOVW    R19:R18, R25:R24
   \   00000388   5F2D               SUBI    R18, 253
   \   0000038A   4F3F               SBCI    R19, 255
   \   0000038C   2F0A               MOV     R16, R26
   \   0000038E   ....               RCALL   BuildEEPWriteData
    190                }
    191                break;
   \                     ??CheckActionUart_32:
   \   00000390   C09D               RJMP    ??CheckActionUart_4
    192          
    193              case ANP1_SND_WAPR :                         // Write AP register
    194                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_33:
   \   00000392   2F0A               MOV     R16, R26
   \   00000394   E010               LDI     R17, 0
   \   00000396   E14D               LDI     R20, 29
   \   00000398   E050               LDI     R21, 0
   \   0000039A   ........           CALL    ?S_EC_MUL_L02
   \   0000039E   01F8               MOVW    R31:R30, R17:R16
   \   000003A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003A4   8504               LDD     R16, Z+12
   \   000003A6   8515               LDD     R17, Z+13
   \   000003A8   0F08               ADD     R16, R24
   \   000003AA   1F19               ADC     R17, R25
   \   000003AC   01F8               MOVW    R31:R30, R17:R16
   \   000003AE   8102               LDD     R16, Z+2
   \   000003B0   9110....           LDS     R17, MySecAddress
   \   000003B4   1701               CP      R16, R17
   \   000003B6   F431               BRNE    ??CheckActionUart_34
    195                  BuildAPWriteData(ch, pointer+3);
   \   000003B8   019C               MOVW    R19:R18, R25:R24
   \   000003BA   5F2D               SUBI    R18, 253
   \   000003BC   4F3F               SBCI    R19, 255
   \   000003BE   2F0A               MOV     R16, R26
   \   000003C0   ........           CALL    BuildAPWriteData
    196                }
    197                break;
   \                     ??CheckActionUart_34:
   \   000003C4   C083               RJMP    ??CheckActionUart_4
    198          
    199              case ANP1_REQ_TXSER :                         // Ask for dallas ID
    200                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_35:
   \   000003C6   2F0A               MOV     R16, R26
   \   000003C8   E010               LDI     R17, 0
   \   000003CA   E14D               LDI     R20, 29
   \   000003CC   E050               LDI     R21, 0
   \   000003CE   ........           CALL    ?S_EC_MUL_L02
   \   000003D2   01F8               MOVW    R31:R30, R17:R16
   \   000003D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003D8   8504               LDD     R16, Z+12
   \   000003DA   8515               LDD     R17, Z+13
   \   000003DC   0F08               ADD     R16, R24
   \   000003DE   1F19               ADC     R17, R25
   \   000003E0   01F8               MOVW    R31:R30, R17:R16
   \   000003E2   8102               LDD     R16, Z+2
   \   000003E4   9110....           LDS     R17, MySecAddress
   \   000003E8   1701               CP      R16, R17
   \   000003EA   F431               BRNE    ??CheckActionUart_36
    201                  BuildDallasData(ch, pointer+3);
   \   000003EC   019C               MOVW    R19:R18, R25:R24
   \   000003EE   5F2D               SUBI    R18, 253
   \   000003F0   4F3F               SBCI    R19, 255
   \   000003F2   2F0A               MOV     R16, R26
   \   000003F4   ........           CALL    BuildDallasData
    202                }
    203                break;
   \                     ??CheckActionUart_36:
   \   000003F8   C069               RJMP    ??CheckActionUart_4
    204          
    205              case ANP1_REQ_STAT :                         // Request card status
    206                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_37:
   \   000003FA   2F0A               MOV     R16, R26
   \   000003FC   E010               LDI     R17, 0
   \   000003FE   E14D               LDI     R20, 29
   \   00000400   E050               LDI     R21, 0
   \   00000402   ........           CALL    ?S_EC_MUL_L02
   \   00000406   01F8               MOVW    R31:R30, R17:R16
   \   00000408   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000040A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000040C   8504               LDD     R16, Z+12
   \   0000040E   8515               LDD     R17, Z+13
   \   00000410   0F08               ADD     R16, R24
   \   00000412   1F19               ADC     R17, R25
   \   00000414   01F8               MOVW    R31:R30, R17:R16
   \   00000416   8102               LDD     R16, Z+2
   \   00000418   9110....           LDS     R17, MySecAddress
   \   0000041C   1701               CP      R16, R17
   \   0000041E   F431               BRNE    ??CheckActionUart_38
    207                  BuildStatusData(ch, pointer+3);
   \   00000420   019C               MOVW    R19:R18, R25:R24
   \   00000422   5F2D               SUBI    R18, 253
   \   00000424   4F3F               SBCI    R19, 255
   \   00000426   2F0A               MOV     R16, R26
   \   00000428   ........           CALL    BuildStatusData
    208                }
    209                break;
   \                     ??CheckActionUart_38:
   \   0000042C   C04F               RJMP    ??CheckActionUart_4
    210          
    211              case ANP1_REQ_STACKSTATUS :                        // Request stck status
    212                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_39:
   \   0000042E   2F0A               MOV     R16, R26
   \   00000430   E010               LDI     R17, 0
   \   00000432   E14D               LDI     R20, 29
   \   00000434   E050               LDI     R21, 0
   \   00000436   ........           CALL    ?S_EC_MUL_L02
   \   0000043A   01F8               MOVW    R31:R30, R17:R16
   \   0000043C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000043E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000440   8504               LDD     R16, Z+12
   \   00000442   8515               LDD     R17, Z+13
   \   00000444   0F08               ADD     R16, R24
   \   00000446   1F19               ADC     R17, R25
   \   00000448   01F8               MOVW    R31:R30, R17:R16
   \   0000044A   8102               LDD     R16, Z+2
   \   0000044C   9110....           LDS     R17, MySecAddress
   \   00000450   1701               CP      R16, R17
   \   00000452   F5E1               BRNE    ??CheckActionUart_4
    213                  BuildStackStatus(ch, pointer+3) ;                     // receive package	
   \   00000454   019C               MOVW    R19:R18, R25:R24
   \   00000456   5F2D               SUBI    R18, 253
   \   00000458   4F3F               SBCI    R19, 255
   \   0000045A   2F0A               MOV     R16, R26
   \   0000045C   ........           CALL    BuildStackStatus
    214                }
    215                break ;
   \   00000460   C035               RJMP    ??CheckActionUart_4
    216              case ANP1_GOTO_BOOTLOADER :                        // Goto bootlaoder??
    217                if (UART[ch].pRxBuffer[pointer+2]== MySecAddress) {
   \                     ??CheckActionUart_40:
   \   00000462   2F0A               MOV     R16, R26
   \   00000464   E010               LDI     R17, 0
   \   00000466   E14D               LDI     R20, 29
   \   00000468   E050               LDI     R21, 0
   \   0000046A   ........           CALL    ?S_EC_MUL_L02
   \   0000046E   01F8               MOVW    R31:R30, R17:R16
   \   00000470   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000472   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000474   8504               LDD     R16, Z+12
   \   00000476   8515               LDD     R17, Z+13
   \   00000478   0F08               ADD     R16, R24
   \   0000047A   1F19               ADC     R17, R25
   \   0000047C   01F8               MOVW    R31:R30, R17:R16
   \   0000047E   8102               LDD     R16, Z+2
   \   00000480   9110....           LDS     R17, MySecAddress
   \   00000484   1701               CP      R16, R17
   \   00000486   F511               BRNE    ??CheckActionUart_4
    218                  GetGotoBootloader(ch, pointer+3) ;                     // receive package	
   \   00000488   019C               MOVW    R19:R18, R25:R24
   \   0000048A   5F2D               SUBI    R18, 253
   \   0000048C   4F3F               SBCI    R19, 255
   \   0000048E   2F0A               MOV     R16, R26
   \   00000490   ........           CALL    GetGotoBootloader
    219                }
    220                break ;
   \   00000494   C01B               RJMP    ??CheckActionUart_4
    221          
    222              default:
    223                  if (command < ANP1_MAX_ECMD) {                   // handle end commands
   \                     ??CheckActionUart_41:
   \   00000496   E00A               LDI     R16, 10
   \   00000498   1680               CP      R8, R16
   \   0000049A   E000               LDI     R16, 0
   \   0000049C   0690               CPC     R9, R16
   \   0000049E   F4B0               BRCC    ??CheckActionUart_4
    224                     switch (command) {                                  // check action 
   \   000004A0   E002               LDI     R16, 2
   \   000004A2   1680               CP      R8, R16
   \   000004A4   E000               LDI     R16, 0
   \   000004A6   0690               CPC     R9, R16
   \   000004A8   F481               BRNE    ??CheckActionUart_42
    225                        case ANP1_ECMD_SNDOK :								/* OK to send data*/
    226                          if (tx_status & ALARM_SEND) {
   \   000004AA   ....               LDI     R30, LOW(tx_status)
   \   000004AC   ....               LDI     R31, (tx_status) >> 8
   \   000004AE   8100               LD      R16, Z
   \   000004B0   FF01               SBRS    R16, 1
   \   000004B2   C00B               RJMP    ??CheckActionUart_42
    227                              BuildCardData(ch, pointer+3);
   \   000004B4   019C               MOVW    R19:R18, R25:R24
   \   000004B6   5F2D               SUBI    R18, 253
   \   000004B8   4F3F               SBCI    R19, 255
   \   000004BA   2F0A               MOV     R16, R26
   \   000004BC   ........           CALL    BuildCardData
    228                              tx_status &= ~TX_SENDOK ;       // sent once
   \   000004C0   ....               LDI     R30, LOW(tx_status)
   \   000004C2   ....               LDI     R31, (tx_status) >> 8
   \   000004C4   8100               LD      R16, Z
   \   000004C6   7F0E               ANDI    R16, 0xFE
   \   000004C8   8300               ST      Z, R16
    229                          }
    230                        break ;
    231                     }   
    232                     retval = false ;
   \                     ??CheckActionUart_42:
   \   000004CA   E0B0               LDI     R27, 0
    233                  }
    234                  break;
    235          
    236              }
    237              return retval;
   \                     ??CheckActionUart_4:
   \   000004CC   2F0B               MOV     R16, R27
   \   000004CE   E0EA               LDI     R30, 10
   \   000004D0   ........           JMP     ?EPILOGUE_B10_L09
    238          }
    239          
    240          /*************************************************************************
    241          *
    242          * Build send packet header (ANPRO1)
    243          *
    244          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    245          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   2F20               MOV     R18, R16
    246          
    247              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   E060               LDI     R22, 0
   \   00000004   E070               LDI     R23, 0
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14D               LDI     R20, 29
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   8766               STD     Z+14, R22
   \   0000001A   8777               STD     Z+15, R23
    248              UART[ch].RxLast  = 0;
   \   0000001C   E060               LDI     R22, 0
   \   0000001E   E070               LDI     R23, 0
   \   00000020   2F02               MOV     R16, R18
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14D               LDI     R20, 29
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   8B60               STD     Z+16, R22
   \   00000034   8B71               STD     Z+17, R23
    249              UART[ch].TxLast  = 0;
   \   00000036   E060               LDI     R22, 0
   \   00000038   E070               LDI     R23, 0
   \   0000003A   2F02               MOV     R16, R18
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   E14D               LDI     R20, 29
   \   00000040   E050               LDI     R21, 0
   \   00000042   ........           CALL    ?S_EC_MUL_L02
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004C   8364               STD     Z+4, R22
   \   0000004E   8375               STD     Z+5, R23
    250          
    251              UART[ch].pTxBuffer[0] = ANPRO1_SYN ;                        /* Sync */
   \   00000050   E032               LDI     R19, 2
   \   00000052   2F02               MOV     R16, R18
   \   00000054   E010               LDI     R17, 0
   \   00000056   E14D               LDI     R20, 29
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000064   8100               LD      R16, Z
   \   00000066   8111               LDD     R17, Z+1
   \   00000068   01F8               MOVW    R31:R30, R17:R16
   \   0000006A   8330               ST      Z, R19
    252              UART[ch].pTxBuffer[1] = ANPRO1_SYN ;                        /* Sync */
   \   0000006C   E032               LDI     R19, 2
   \   0000006E   2F02               MOV     R16, R18
   \   00000070   E010               LDI     R17, 0
   \   00000072   E14D               LDI     R20, 29
   \   00000074   E050               LDI     R21, 0
   \   00000076   ........           CALL    ?S_EC_MUL_L02
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000080   8100               LD      R16, Z
   \   00000082   8111               LDD     R17, Z+1
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   8331               STD     Z+1, R19
    253              UART[ch].pTxBuffer[2] = UART[ch].pRxBuffer[1] ;      /* RXID */
   \   00000088   2F02               MOV     R16, R18
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14D               LDI     R20, 29
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009A   8504               LDD     R16, Z+12
   \   0000009C   8515               LDD     R17, Z+13
   \   0000009E   01F8               MOVW    R31:R30, R17:R16
   \   000000A0   8131               LDD     R19, Z+1
   \   000000A2   2F02               MOV     R16, R18
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   E14D               LDI     R20, 29
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   ........           CALL    ?S_EC_MUL_L02
   \   000000AE   01F8               MOVW    R31:R30, R17:R16
   \   000000B0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B4   8100               LD      R16, Z
   \   000000B6   8111               LDD     R17, Z+1
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   8332               STD     Z+2, R19
    254              UART[ch].pTxBuffer[3] = MyPriAddress;                 /* Tx address pri*/
   \   000000BC   9130....           LDS     R19, MyPriAddress
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14D               LDI     R20, 29
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D2   8100               LD      R16, Z
   \   000000D4   8111               LDD     R17, Z+1
   \   000000D6   01F8               MOVW    R31:R30, R17:R16
   \   000000D8   8333               STD     Z+3, R19
    255              UART[ch].pTxBuffer[4] = 0 ;                          /* packlen HB, don't know yet */
   \   000000DA   E030               LDI     R19, 0
   \   000000DC   2F02               MOV     R16, R18
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E14D               LDI     R20, 29
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000EE   8100               LD      R16, Z
   \   000000F0   8111               LDD     R17, Z+1
   \   000000F2   01F8               MOVW    R31:R30, R17:R16
   \   000000F4   8334               STD     Z+4, R19
    256              UART[ch].pTxBuffer[5] = 0 ;                          /* packlen LB, don't know yet */
   \   000000F6   E030               LDI     R19, 0
   \   000000F8   2F02               MOV     R16, R18
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   E14D               LDI     R20, 29
   \   000000FE   E050               LDI     R21, 0
   \   00000100   ........           CALL    ?S_EC_MUL_L02
   \   00000104   01F8               MOVW    R31:R30, R17:R16
   \   00000106   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010A   8100               LD      R16, Z
   \   0000010C   8111               LDD     R17, Z+1
   \   0000010E   01F8               MOVW    R31:R30, R17:R16
   \   00000110   8335               STD     Z+5, R19
    257          }
   \   00000112   9508               RET
    258          
    259          /*************************************************************************
    260          *
    261          * Build  packet tail (ANPRO1)
    262          *
    263          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    264          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    265          
    266              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000004   2F08               MOV     R16, R24
   \   00000006   ....               RCALL   Uart_BuildHeader
    267          
    268              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_ECMD_NMDWOACK ;  // End command 
   \   00000008   E060               LDI     R22, 0
   \   0000000A   2F08               MOV     R16, R24
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14D               LDI     R20, 29
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8120               LD      R18, Z
   \   0000001E   8131               LDD     R19, Z+1
   \   00000020   2F08               MOV     R16, R24
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14D               LDI     R20, 29
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   8102               LDD     R16, Z+2
   \   00000034   8113               LDD     R17, Z+3
   \   00000036   0F20               ADD     R18, R16
   \   00000038   1F31               ADC     R19, R17
   \   0000003A   01F9               MOVW    R31:R30, R19:R18
   \   0000003C   8360               ST      Z, R22
   \   0000003E   2F08               MOV     R16, R24
   \   00000040   E010               LDI     R17, 0
   \   00000042   E14D               LDI     R20, 29
   \   00000044   E050               LDI     R21, 0
   \   00000046   ........           CALL    ?S_EC_MUL_L02
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000050   8102               LDD     R16, Z+2
   \   00000052   8113               LDD     R17, Z+3
   \   00000054   5F0F               SUBI    R16, 255
   \   00000056   4F1F               SBCI    R17, 255
   \   00000058   8302               STD     Z+2, R16
   \   0000005A   8313               STD     Z+3, R17
    269              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;                  // End data 
   \   0000005C   E060               LDI     R22, 0
   \   0000005E   2F08               MOV     R16, R24
   \   00000060   E010               LDI     R17, 0
   \   00000062   E14D               LDI     R20, 29
   \   00000064   E050               LDI     R21, 0
   \   00000066   ........           CALL    ?S_EC_MUL_L02
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000070   8120               LD      R18, Z
   \   00000072   8131               LDD     R19, Z+1
   \   00000074   2F08               MOV     R16, R24
   \   00000076   E010               LDI     R17, 0
   \   00000078   E14D               LDI     R20, 29
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000084   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000086   8102               LDD     R16, Z+2
   \   00000088   8113               LDD     R17, Z+3
   \   0000008A   0F20               ADD     R18, R16
   \   0000008C   1F31               ADC     R19, R17
   \   0000008E   01F9               MOVW    R31:R30, R19:R18
   \   00000090   8360               ST      Z, R22
   \   00000092   2F08               MOV     R16, R24
   \   00000094   E010               LDI     R17, 0
   \   00000096   E14D               LDI     R20, 29
   \   00000098   E050               LDI     R21, 0
   \   0000009A   ........           CALL    ?S_EC_MUL_L02
   \   0000009E   01F8               MOVW    R31:R30, R17:R16
   \   000000A0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000A2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A4   8102               LDD     R16, Z+2
   \   000000A6   8113               LDD     R17, Z+3
   \   000000A8   5F0F               SUBI    R16, 255
   \   000000AA   4F1F               SBCI    R17, 255
   \   000000AC   8302               STD     Z+2, R16
   \   000000AE   8313               STD     Z+3, R17
    270          
    271              UART[ch].pTxBuffer[5] = UART[ch].TxFirst;                    // correct length because stx's
   \   000000B0   2F08               MOV     R16, R24
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   E14D               LDI     R20, 29
   \   000000B6   E050               LDI     R21, 0
   \   000000B8   ........           CALL    ?S_EC_MUL_L02
   \   000000BC   01F8               MOVW    R31:R30, R17:R16
   \   000000BE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000C0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C2   8122               LDD     R18, Z+2
   \   000000C4   8133               LDD     R19, Z+3
   \   000000C6   2F08               MOV     R16, R24
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   E14D               LDI     R20, 29
   \   000000CC   E050               LDI     R21, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D8   8100               LD      R16, Z
   \   000000DA   8111               LDD     R17, Z+1
   \   000000DC   01F8               MOVW    R31:R30, R17:R16
   \   000000DE   8325               STD     Z+5, R18
    272              UART[ch].pTxBuffer[4] = (UART[ch].TxFirst) >> 8 ;             // packet len high 
   \   000000E0   2F08               MOV     R16, R24
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14D               LDI     R20, 29
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F2   8122               LDD     R18, Z+2
   \   000000F4   8133               LDD     R19, Z+3
   \   000000F6   2F23               MOV     R18, R19
   \   000000F8   E030               LDI     R19, 0
   \   000000FA   2F08               MOV     R16, R24
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   E14D               LDI     R20, 29
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   01F8               MOVW    R31:R30, R17:R16
   \   00000108   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010C   8100               LD      R16, Z
   \   0000010E   8111               LDD     R17, Z+1
   \   00000110   01F8               MOVW    R31:R30, R17:R16
   \   00000112   8324               STD     Z+4, R18
    273          
    274              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst) ; // Get checksum 
   \   00000114   2F08               MOV     R16, R24
   \   00000116   E010               LDI     R17, 0
   \   00000118   E14D               LDI     R20, 29
   \   0000011A   E050               LDI     R21, 0
   \   0000011C   ........           CALL    ?S_EC_MUL_L02
   \   00000120   01F8               MOVW    R31:R30, R17:R16
   \   00000122   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000124   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000126   8122               LDD     R18, Z+2
   \   00000128   8133               LDD     R19, Z+3
   \   0000012A   2F08               MOV     R16, R24
   \   0000012C   ....               RCALL   CalcDSTxChecksum
   \   0000012E   2F60               MOV     R22, R16
   \   00000130   2F08               MOV     R16, R24
   \   00000132   E010               LDI     R17, 0
   \   00000134   E14D               LDI     R20, 29
   \   00000136   E050               LDI     R21, 0
   \   00000138   ........           CALL    ?S_EC_MUL_L02
   \   0000013C   01F8               MOVW    R31:R30, R17:R16
   \   0000013E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000140   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000142   8120               LD      R18, Z
   \   00000144   8131               LDD     R19, Z+1
   \   00000146   2F08               MOV     R16, R24
   \   00000148   E010               LDI     R17, 0
   \   0000014A   E14D               LDI     R20, 29
   \   0000014C   E050               LDI     R21, 0
   \   0000014E   ........           CALL    ?S_EC_MUL_L02
   \   00000152   01F8               MOVW    R31:R30, R17:R16
   \   00000154   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000156   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000158   8102               LDD     R16, Z+2
   \   0000015A   8113               LDD     R17, Z+3
   \   0000015C   0F20               ADD     R18, R16
   \   0000015E   1F31               ADC     R19, R17
   \   00000160   01F9               MOVW    R31:R30, R19:R18
   \   00000162   8360               ST      Z, R22
    275              UART[ch].TxFirst++ ;                                        // OBS!! must be inc here due
   \   00000164   2F08               MOV     R16, R24
   \   00000166   E010               LDI     R17, 0
   \   00000168   E14D               LDI     R20, 29
   \   0000016A   E050               LDI     R21, 0
   \   0000016C   ........           CALL    ?S_EC_MUL_L02
   \   00000170   01F8               MOVW    R31:R30, R17:R16
   \   00000172   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000174   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000176   8102               LDD     R16, Z+2
   \   00000178   8113               LDD     R17, Z+3
   \   0000017A   5F0F               SUBI    R16, 255
   \   0000017C   4F1F               SBCI    R17, 255
   \   0000017E   8302               STD     Z+2, R16
   \   00000180   8313               STD     Z+3, R17
    276                                                                          // to ANSI standard !!!!
    277          
    278              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO1_EOT ;            // End of transmission 
   \   00000182   E063               LDI     R22, 3
   \   00000184   2F08               MOV     R16, R24
   \   00000186   E010               LDI     R17, 0
   \   00000188   E14D               LDI     R20, 29
   \   0000018A   E050               LDI     R21, 0
   \   0000018C   ........           CALL    ?S_EC_MUL_L02
   \   00000190   01F8               MOVW    R31:R30, R17:R16
   \   00000192   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000194   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000196   8120               LD      R18, Z
   \   00000198   8131               LDD     R19, Z+1
   \   0000019A   2F08               MOV     R16, R24
   \   0000019C   E010               LDI     R17, 0
   \   0000019E   E14D               LDI     R20, 29
   \   000001A0   E050               LDI     R21, 0
   \   000001A2   ........           CALL    ?S_EC_MUL_L02
   \   000001A6   01F8               MOVW    R31:R30, R17:R16
   \   000001A8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AC   8102               LDD     R16, Z+2
   \   000001AE   8113               LDD     R17, Z+3
   \   000001B0   0F20               ADD     R18, R16
   \   000001B2   1F31               ADC     R19, R17
   \   000001B4   01F9               MOVW    R31:R30, R19:R18
   \   000001B6   8360               ST      Z, R22
   \   000001B8   2F08               MOV     R16, R24
   \   000001BA   E010               LDI     R17, 0
   \   000001BC   E14D               LDI     R20, 29
   \   000001BE   E050               LDI     R21, 0
   \   000001C0   ........           CALL    ?S_EC_MUL_L02
   \   000001C4   01F8               MOVW    R31:R30, R17:R16
   \   000001C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CA   8102               LDD     R16, Z+2
   \   000001CC   8113               LDD     R17, Z+3
   \   000001CE   5F0F               SUBI    R16, 255
   \   000001D0   4F1F               SBCI    R17, 255
   \   000001D2   8302               STD     Z+2, R16
   \   000001D4   8313               STD     Z+3, R17
    279              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;            //switch off transmitter delay 
   \   000001D6   E060               LDI     R22, 0
   \   000001D8   2F08               MOV     R16, R24
   \   000001DA   E010               LDI     R17, 0
   \   000001DC   E14D               LDI     R20, 29
   \   000001DE   E050               LDI     R21, 0
   \   000001E0   ........           CALL    ?S_EC_MUL_L02
   \   000001E4   01F8               MOVW    R31:R30, R17:R16
   \   000001E6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001EA   8120               LD      R18, Z
   \   000001EC   8131               LDD     R19, Z+1
   \   000001EE   2F08               MOV     R16, R24
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E14D               LDI     R20, 29
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   01F8               MOVW    R31:R30, R17:R16
   \   000001FC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001FE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000200   8102               LDD     R16, Z+2
   \   00000202   8113               LDD     R17, Z+3
   \   00000204   0F20               ADD     R18, R16
   \   00000206   1F31               ADC     R19, R17
   \   00000208   01F9               MOVW    R31:R30, R19:R18
   \   0000020A   8360               ST      Z, R22
   \   0000020C   2F08               MOV     R16, R24
   \   0000020E   E010               LDI     R17, 0
   \   00000210   E14D               LDI     R20, 29
   \   00000212   E050               LDI     R21, 0
   \   00000214   ........           CALL    ?S_EC_MUL_L02
   \   00000218   01F8               MOVW    R31:R30, R17:R16
   \   0000021A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000021C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000021E   8102               LDD     R16, Z+2
   \   00000220   8113               LDD     R17, Z+3
   \   00000222   5F0F               SUBI    R16, 255
   \   00000224   4F1F               SBCI    R17, 255
   \   00000226   8302               STD     Z+2, R16
   \   00000228   8313               STD     Z+3, R17
    280          
    281              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send 
   \   0000022A   2F08               MOV     R16, R24
   \   0000022C   E010               LDI     R17, 0
   \   0000022E   E14D               LDI     R20, 29
   \   00000230   E050               LDI     R21, 0
   \   00000232   ........           CALL    ?S_EC_MUL_L02
   \   00000236   01F8               MOVW    R31:R30, R17:R16
   \   00000238   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000023A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000023C   8122               LDD     R18, Z+2
   \   0000023E   8133               LDD     R19, Z+3
   \   00000240   2F08               MOV     R16, R24
   \   00000242   E010               LDI     R17, 0
   \   00000244   E14D               LDI     R20, 29
   \   00000246   E050               LDI     R21, 0
   \   00000248   ........           CALL    ?S_EC_MUL_L02
   \   0000024C   01F8               MOVW    R31:R30, R17:R16
   \   0000024E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000250   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000252   8326               STD     Z+6, R18
   \   00000254   8337               STD     Z+7, R19
    282              UART[ch].TxLast = 0;                                     // reset cunter
   \   00000256   E020               LDI     R18, 0
   \   00000258   E030               LDI     R19, 0
   \   0000025A   2F08               MOV     R16, R24
   \   0000025C   E010               LDI     R17, 0
   \   0000025E   E14D               LDI     R20, 29
   \   00000260   E050               LDI     R21, 0
   \   00000262   ........           CALL    ?S_EC_MUL_L02
   \   00000266   01F8               MOVW    R31:R30, R17:R16
   \   00000268   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000026A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000026C   8324               STD     Z+4, R18
   \   0000026E   8335               STD     Z+5, R19
    283              UART[ch].TxPkCnt++ ;                                     // Count sent packages
   \   00000270   2F08               MOV     R16, R24
   \   00000272   E010               LDI     R17, 0
   \   00000274   E14D               LDI     R20, 29
   \   00000276   E050               LDI     R21, 0
   \   00000278   ........           CALL    ?S_EC_MUL_L02
   \   0000027C   01F8               MOVW    R31:R30, R17:R16
   \   0000027E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000280   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000282   8500               LDD     R16, Z+8
   \   00000284   8511               LDD     R17, Z+9
   \   00000286   5F0F               SUBI    R16, 255
   \   00000288   4F1F               SBCI    R17, 255
   \   0000028A   8700               STD     Z+8, R16
   \   0000028C   8711               STD     Z+9, R17
    284              if (ch == 0) {                                           // Turn on TXE for channel
   \   0000028E   2388               TST     R24
   \   00000290   F451               BRNE    ??Uart_BuildTail_0
    285                  OS_RetriggerTimer(&TimerUSART0);                    // and start timeout timer
   \   00000292   ....               LDI     R16, LOW(TimerUSART0)
   \   00000294   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000296   ........           CALL    OS_RetriggerTimer
    286                  SetBit(PORTE, 0x04) ;                                     // TXE0 on
   \   0000029A   9A1A               SBI     0x03, 0x02
    287                  OS_Delay(20);                                       // Wait (ms) for tx stable
   \   0000029C   E104               LDI     R16, 20
   \   0000029E   E010               LDI     R17, 0
   \   000002A0   ........           CALL    OS_Delay
    288                  UCSR0B |= __BIT_MASK( UDRIE0) ;                     // start sending by enableing interrupt
   \   000002A4   9A55               SBI     0x0A, 0x05
    289              } else if (ch ==1) {
    290                  // not used
    291              }
    292          }
   \                     ??Uart_BuildTail_0:
   \   000002A6   9189               LD      R24, Y+
   \   000002A8   9508               RET
   \   000002AA                      REQUIRE _A_PORTE
   \   000002AA                      REQUIRE _A_UCSR0B
    293          
    294          /*************************************************************************
    295          *
    296          * Build datablock for eeprom data
    297          *
    298          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    299          void BuildEepData(char ch, short pointer){
   \                     BuildEepData:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
    300          
    301          	short i, ntna;
    302              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000008   E071               LDI     R23, 1
   \   0000000A   2F06               MOV     R16, R22
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14D               LDI     R20, 29
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8F74               STD     Z+28, R23
    303          	
    304              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_EEP;     
   \   0000001E   E574               LDI     R23, 84
   \   00000020   2F06               MOV     R16, R22
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14D               LDI     R20, 29
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   81A0               LD      R26, Z
   \   00000034   81B1               LDD     R27, Z+1
   \   00000036   2F06               MOV     R16, R22
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14D               LDI     R20, 29
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000048   8102               LDD     R16, Z+2
   \   0000004A   8113               LDD     R17, Z+3
   \   0000004C   0FA0               ADD     R26, R16
   \   0000004E   1FB1               ADC     R27, R17
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   8370               ST      Z, R23
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14D               LDI     R20, 29
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    305              ntna = UART[ch].TxFirst++ ;                                    /* remember index */
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14D               LDI     R20, 29
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8102               LDD     R16, Z+2
   \   00000086   8113               LDD     R17, Z+3
   \   00000088   0198               MOVW    R19:R18, R17:R16
   \   0000008A   2F06               MOV     R16, R22
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   E14D               LDI     R20, 29
   \   00000090   E050               LDI     R21, 0
   \   00000092   ........           CALL    ?S_EC_MUL_L02
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009C   8102               LDD     R16, Z+2
   \   0000009E   8113               LDD     R17, Z+3
   \   000000A0   5F0F               SUBI    R16, 255
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   8302               STD     Z+2, R16
   \   000000A6   8313               STD     Z+3, R17
    306          
    307          	  UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress ;			// Secondary address
   \   000000A8   9170....           LDS     R23, MySecAddress
   \   000000AC   2F06               MOV     R16, R22
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   E14D               LDI     R20, 29
   \   000000B2   E050               LDI     R21, 0
   \   000000B4   ........           CALL    ?S_EC_MUL_L02
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BE   81A0               LD      R26, Z
   \   000000C0   81B1               LDD     R27, Z+1
   \   000000C2   2F06               MOV     R16, R22
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   E14D               LDI     R20, 29
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   ........           CALL    ?S_EC_MUL_L02
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D4   8102               LDD     R16, Z+2
   \   000000D6   8113               LDD     R17, Z+3
   \   000000D8   0FA0               ADD     R26, R16
   \   000000DA   1FB1               ADC     R27, R17
   \   000000DC   01FD               MOVW    R31:R30, R27:R26
   \   000000DE   8370               ST      Z, R23
   \   000000E0   2F06               MOV     R16, R22
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14D               LDI     R20, 29
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    308          	  for (i = 0; i < PACKED_DATA_SIZE; i++) {
   \   000000FE   E080               LDI     R24, 0
   \   00000100   E090               LDI     R25, 0
   \                     ??BuildEepData_0:
   \   00000102   3288               CPI     R24, 40
   \   00000104   E000               LDI     R16, 0
   \   00000106   0790               CPC     R25, R16
   \   00000108   F57C               BRGE    ??BuildEepData_1
    309          		  UART[ch].pTxBuffer[UART[ch].TxFirst++] = packed_data[i]; /* data */
   \   0000010A   01FC               MOVW    R31:R30, R25:R24
   \   0000010C   ....               SUBI    R30, LOW((-(packed_data) & 0xFFFF))
   \   0000010E   ....               SBCI    R31, (-(packed_data) & 0xFFFF) >> 8
   \   00000110   8170               LD      R23, Z
   \   00000112   2F06               MOV     R16, R22
   \   00000114   E010               LDI     R17, 0
   \   00000116   E14D               LDI     R20, 29
   \   00000118   E050               LDI     R21, 0
   \   0000011A   ........           CALL    ?S_EC_MUL_L02
   \   0000011E   01F8               MOVW    R31:R30, R17:R16
   \   00000120   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000122   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000124   81A0               LD      R26, Z
   \   00000126   81B1               LDD     R27, Z+1
   \   00000128   2F06               MOV     R16, R22
   \   0000012A   E010               LDI     R17, 0
   \   0000012C   E14D               LDI     R20, 29
   \   0000012E   E050               LDI     R21, 0
   \   00000130   ........           CALL    ?S_EC_MUL_L02
   \   00000134   01F8               MOVW    R31:R30, R17:R16
   \   00000136   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000138   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000013A   8102               LDD     R16, Z+2
   \   0000013C   8113               LDD     R17, Z+3
   \   0000013E   0FA0               ADD     R26, R16
   \   00000140   1FB1               ADC     R27, R17
   \   00000142   01FD               MOVW    R31:R30, R27:R26
   \   00000144   8370               ST      Z, R23
   \   00000146   2F06               MOV     R16, R22
   \   00000148   E010               LDI     R17, 0
   \   0000014A   E14D               LDI     R20, 29
   \   0000014C   E050               LDI     R21, 0
   \   0000014E   ........           CALL    ?S_EC_MUL_L02
   \   00000152   01F8               MOVW    R31:R30, R17:R16
   \   00000154   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000156   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000158   8102               LDD     R16, Z+2
   \   0000015A   8113               LDD     R17, Z+3
   \   0000015C   5F0F               SUBI    R16, 255
   \   0000015E   4F1F               SBCI    R17, 255
   \   00000160   8302               STD     Z+2, R16
   \   00000162   8313               STD     Z+3, R17
    310          	  }
   \   00000164   9601               ADIW    R25:R24, 1
   \   00000166   CFCD               RJMP    ??BuildEepData_0
    311              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \                     ??BuildEepData_1:
   \   00000168   2F06               MOV     R16, R22
   \   0000016A   E010               LDI     R17, 0
   \   0000016C   E14D               LDI     R20, 29
   \   0000016E   E050               LDI     R21, 0
   \   00000170   ........           CALL    ?S_EC_MUL_L02
   \   00000174   01F8               MOVW    R31:R30, R17:R16
   \   00000176   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000178   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017A   81A2               LDD     R26, Z+2
   \   0000017C   81B3               LDD     R27, Z+3
   \   0000017E   2F02               MOV     R16, R18
   \   00000180   1BA0               SUB     R26, R16
   \   00000182   95AA               DEC     R26
   \   00000184   2F06               MOV     R16, R22
   \   00000186   E010               LDI     R17, 0
   \   00000188   E14D               LDI     R20, 29
   \   0000018A   E050               LDI     R21, 0
   \   0000018C   ........           CALL    ?S_EC_MUL_L02
   \   00000190   01F8               MOVW    R31:R30, R17:R16
   \   00000192   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000194   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000196   8100               LD      R16, Z
   \   00000198   8111               LDD     R17, Z+1
   \   0000019A   0F02               ADD     R16, R18
   \   0000019C   1F13               ADC     R17, R19
   \   0000019E   01F8               MOVW    R31:R30, R17:R16
   \   000001A0   83A0               ST      Z, R26
    312          }
   \   000001A2   E0E4               LDI     R30, 4
   \   000001A4   ........           JMP     ?EPILOGUE_B4_L09
    313          
    314          /*************************************************************************
    315          *
    316          * Build answer for writing eeprom (Dallas type)
    317          *
    318          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    319          void BuildEEPWriteData(char ch, short pointer){
   \                     BuildEEPWriteData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
    320          
    321              char retval = true;
   \   00000008   E0B1               LDI     R27, 1
    322          	short i, ntna;
    323              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   0000000A   E021               LDI     R18, 1
   \   0000000C   2F0A               MOV     R16, R26
   \   0000000E   E010               LDI     R17, 0
   \   00000010   E14D               LDI     R20, 29
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?S_EC_MUL_L02
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001E   8F24               STD     Z+28, R18
    324          	
    325              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_ACKWEEP;     
   \   00000020   E522               LDI     R18, 82
   \   00000022   2F0A               MOV     R16, R26
   \   00000024   E010               LDI     R17, 0
   \   00000026   E14D               LDI     R20, 29
   \   00000028   E050               LDI     R21, 0
   \   0000002A   ........           CALL    ?S_EC_MUL_L02
   \   0000002E   01F8               MOVW    R31:R30, R17:R16
   \   00000030   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000034   8160               LD      R22, Z
   \   00000036   8171               LDD     R23, Z+1
   \   00000038   2F0A               MOV     R16, R26
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14D               LDI     R20, 29
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   0F60               ADD     R22, R16
   \   00000050   1F71               ADC     R23, R17
   \   00000052   01FB               MOVW    R31:R30, R23:R22
   \   00000054   8320               ST      Z, R18
   \   00000056   2F0A               MOV     R16, R26
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14D               LDI     R20, 29
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000068   8102               LDD     R16, Z+2
   \   0000006A   8113               LDD     R17, Z+3
   \   0000006C   5F0F               SUBI    R16, 255
   \   0000006E   4F1F               SBCI    R17, 255
   \   00000070   8302               STD     Z+2, R16
   \   00000072   8313               STD     Z+3, R17
    326              ntna = UART[ch].TxFirst++ ;                                    /* remember index */
   \   00000074   2F0A               MOV     R16, R26
   \   00000076   E010               LDI     R17, 0
   \   00000078   E14D               LDI     R20, 29
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000084   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000086   8102               LDD     R16, Z+2
   \   00000088   8113               LDD     R17, Z+3
   \   0000008A   0128               MOVW    R5:R4, R17:R16
   \   0000008C   2F0A               MOV     R16, R26
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14D               LDI     R20, 29
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    327              
    328              for (i = 0; i < PACKED_DATA_SIZE; i++) {          //copy data from eeprom to ram
   \   000000AA   E080               LDI     R24, 0
   \   000000AC   E090               LDI     R25, 0
   \                     ??BuildEEPWriteData_0:
   \   000000AE   3288               CPI     R24, 40
   \   000000B0   E000               LDI     R16, 0
   \   000000B2   0790               CPC     R25, R16
   \   000000B4   F45C               BRGE    ??BuildEEPWriteData_1
    329                 WriteEEPROMByte(EEPROM_EEPROMDATA+i, packed_data[i]);
   \   000000B6   01FC               MOVW    R31:R30, R25:R24
   \   000000B8   ....               SUBI    R30, LOW((-(packed_data) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(packed_data) & 0xFFFF) >> 8
   \   000000BC   8120               LD      R18, Z
   \   000000BE   018C               MOVW    R17:R16, R25:R24
   \   000000C0   5F0D               SUBI    R16, 253
   \   000000C2   4F1F               SBCI    R17, 255
   \   000000C4   ........           CALL    WriteEEPROMByte
    330              }
   \   000000C8   9601               ADIW    R25:R24, 1
   \   000000CA   CFF1               RJMP    ??BuildEEPWriteData_0
    331          
    332              for (i = 0; i < PACKED_DATA_SIZE; i++) {          //verify data from eeprom to ram
   \                     ??BuildEEPWriteData_1:
   \   000000CC   E080               LDI     R24, 0
   \   000000CE   E090               LDI     R25, 0
   \                     ??BuildEEPWriteData_2:
   \   000000D0   3288               CPI     R24, 40
   \   000000D2   E000               LDI     R16, 0
   \   000000D4   0790               CPC     R25, R16
   \   000000D6   F474               BRGE    ??BuildEEPWriteData_3
    333                 if (ReadEEPROMByte(EEPROM_EEPROMDATA+i) != packed_data[i]) {
   \   000000D8   018C               MOVW    R17:R16, R25:R24
   \   000000DA   5F0D               SUBI    R16, 253
   \   000000DC   4F1F               SBCI    R17, 255
   \   000000DE   ........           CALL    ReadEEPROMByte
   \   000000E2   01FC               MOVW    R31:R30, R25:R24
   \   000000E4   ....               SUBI    R30, LOW((-(packed_data) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, (-(packed_data) & 0xFFFF) >> 8
   \   000000E8   8110               LD      R17, Z
   \   000000EA   1701               CP      R16, R17
   \   000000EC   F009               BREQ    ??BuildEEPWriteData_4
    334                    retval = false ;
   \   000000EE   E0B0               LDI     R27, 0
    335                 }
    336              }
   \                     ??BuildEEPWriteData_4:
   \   000000F0   9601               ADIW    R25:R24, 1
   \   000000F2   CFEE               RJMP    ??BuildEEPWriteData_2
    337          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress ;			// Secondary address
   \                     ??BuildEEPWriteData_3:
   \   000000F4   9120....           LDS     R18, MySecAddress
   \   000000F8   2F0A               MOV     R16, R26
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   E14D               LDI     R20, 29
   \   000000FE   E050               LDI     R21, 0
   \   00000100   ........           CALL    ?S_EC_MUL_L02
   \   00000104   01F8               MOVW    R31:R30, R17:R16
   \   00000106   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010A   8160               LD      R22, Z
   \   0000010C   8171               LDD     R23, Z+1
   \   0000010E   2F0A               MOV     R16, R26
   \   00000110   E010               LDI     R17, 0
   \   00000112   E14D               LDI     R20, 29
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   01F8               MOVW    R31:R30, R17:R16
   \   0000011C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000120   8102               LDD     R16, Z+2
   \   00000122   8113               LDD     R17, Z+3
   \   00000124   0F60               ADD     R22, R16
   \   00000126   1F71               ADC     R23, R17
   \   00000128   01FB               MOVW    R31:R30, R23:R22
   \   0000012A   8320               ST      Z, R18
   \   0000012C   2F0A               MOV     R16, R26
   \   0000012E   E010               LDI     R17, 0
   \   00000130   E14D               LDI     R20, 29
   \   00000132   E050               LDI     R21, 0
   \   00000134   ........           CALL    ?S_EC_MUL_L02
   \   00000138   01F8               MOVW    R31:R30, R17:R16
   \   0000013A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000013E   8102               LDD     R16, Z+2
   \   00000140   8113               LDD     R17, Z+3
   \   00000142   5F0F               SUBI    R16, 255
   \   00000144   4F1F               SBCI    R17, 255
   \   00000146   8302               STD     Z+2, R16
   \   00000148   8313               STD     Z+3, R17
    338          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = retval ;			// Secondary address
   \   0000014A   2F0A               MOV     R16, R26
   \   0000014C   E010               LDI     R17, 0
   \   0000014E   E14D               LDI     R20, 29
   \   00000150   E050               LDI     R21, 0
   \   00000152   ........           CALL    ?S_EC_MUL_L02
   \   00000156   01F8               MOVW    R31:R30, R17:R16
   \   00000158   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015C   8120               LD      R18, Z
   \   0000015E   8131               LDD     R19, Z+1
   \   00000160   2F0A               MOV     R16, R26
   \   00000162   E010               LDI     R17, 0
   \   00000164   E14D               LDI     R20, 29
   \   00000166   E050               LDI     R21, 0
   \   00000168   ........           CALL    ?S_EC_MUL_L02
   \   0000016C   01F8               MOVW    R31:R30, R17:R16
   \   0000016E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000170   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000172   8102               LDD     R16, Z+2
   \   00000174   8113               LDD     R17, Z+3
   \   00000176   0F20               ADD     R18, R16
   \   00000178   1F31               ADC     R19, R17
   \   0000017A   01F9               MOVW    R31:R30, R19:R18
   \   0000017C   83B0               ST      Z, R27
   \   0000017E   2F0A               MOV     R16, R26
   \   00000180   E010               LDI     R17, 0
   \   00000182   E14D               LDI     R20, 29
   \   00000184   E050               LDI     R21, 0
   \   00000186   ........           CALL    ?S_EC_MUL_L02
   \   0000018A   01F8               MOVW    R31:R30, R17:R16
   \   0000018C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000190   8102               LDD     R16, Z+2
   \   00000192   8113               LDD     R17, Z+3
   \   00000194   5F0F               SUBI    R16, 255
   \   00000196   4F1F               SBCI    R17, 255
   \   00000198   8302               STD     Z+2, R16
   \   0000019A   8313               STD     Z+3, R17
    339              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \   0000019C   2F0A               MOV     R16, R26
   \   0000019E   E010               LDI     R17, 0
   \   000001A0   E14D               LDI     R20, 29
   \   000001A2   E050               LDI     R21, 0
   \   000001A4   ........           CALL    ?S_EC_MUL_L02
   \   000001A8   01F8               MOVW    R31:R30, R17:R16
   \   000001AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AE   8122               LDD     R18, Z+2
   \   000001B0   8133               LDD     R19, Z+3
   \   000001B2   2D04               MOV     R16, R4
   \   000001B4   1B20               SUB     R18, R16
   \   000001B6   952A               DEC     R18
   \   000001B8   2F0A               MOV     R16, R26
   \   000001BA   E010               LDI     R17, 0
   \   000001BC   E14D               LDI     R20, 29
   \   000001BE   E050               LDI     R21, 0
   \   000001C0   ........           CALL    ?S_EC_MUL_L02
   \   000001C4   01F8               MOVW    R31:R30, R17:R16
   \   000001C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CA   8100               LD      R16, Z
   \   000001CC   8111               LDD     R17, Z+1
   \   000001CE   0D04               ADD     R16, R4
   \   000001D0   1D15               ADC     R17, R5
   \   000001D2   01F8               MOVW    R31:R30, R17:R16
   \   000001D4   8320               ST      Z, R18
    340          }
   \   000001D6   E0E8               LDI     R30, 8
   \   000001D8   ........           JMP     ?EPILOGUE_B8_L09
    341          
    342          /*************************************************************************
    343          *
    344          * Build answer for writing AP register
    345          *
    346          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    347          void BuildAPWriteData(char ch, short pointer){
   \                     BuildAPWriteData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
    348          
    349              char retval = true;
   \   00000008   E0B1               LDI     R27, 1
    350          	short i, ntna;
    351              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   0000000A   E021               LDI     R18, 1
   \   0000000C   2F0A               MOV     R16, R26
   \   0000000E   E010               LDI     R17, 0
   \   00000010   E14D               LDI     R20, 29
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?S_EC_MUL_L02
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001E   8F24               STD     Z+28, R18
    352          	
    353              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_ACKWAPR;     
   \   00000020   E523               LDI     R18, 83
   \   00000022   2F0A               MOV     R16, R26
   \   00000024   E010               LDI     R17, 0
   \   00000026   E14D               LDI     R20, 29
   \   00000028   E050               LDI     R21, 0
   \   0000002A   ........           CALL    ?S_EC_MUL_L02
   \   0000002E   01F8               MOVW    R31:R30, R17:R16
   \   00000030   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000034   8160               LD      R22, Z
   \   00000036   8171               LDD     R23, Z+1
   \   00000038   2F0A               MOV     R16, R26
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14D               LDI     R20, 29
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   0F60               ADD     R22, R16
   \   00000050   1F71               ADC     R23, R17
   \   00000052   01FB               MOVW    R31:R30, R23:R22
   \   00000054   8320               ST      Z, R18
   \   00000056   2F0A               MOV     R16, R26
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14D               LDI     R20, 29
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000068   8102               LDD     R16, Z+2
   \   0000006A   8113               LDD     R17, Z+3
   \   0000006C   5F0F               SUBI    R16, 255
   \   0000006E   4F1F               SBCI    R17, 255
   \   00000070   8302               STD     Z+2, R16
   \   00000072   8313               STD     Z+3, R17
    354              ntna = UART[ch].TxFirst++ ;                                    /* remember index */
   \   00000074   2F0A               MOV     R16, R26
   \   00000076   E010               LDI     R17, 0
   \   00000078   E14D               LDI     R20, 29
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000084   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000086   8102               LDD     R16, Z+2
   \   00000088   8113               LDD     R17, Z+3
   \   0000008A   0128               MOVW    R5:R4, R17:R16
   \   0000008C   2F0A               MOV     R16, R26
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14D               LDI     R20, 29
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    355              
    356              for (i = 0; i < PACKED_DATA_SIZE; i++) {          //copy data from eeprom to ram
   \   000000AA   E080               LDI     R24, 0
   \   000000AC   E090               LDI     R25, 0
   \                     ??BuildAPWriteData_0:
   \   000000AE   3288               CPI     R24, 40
   \   000000B0   E000               LDI     R16, 0
   \   000000B2   0790               CPC     R25, R16
   \   000000B4   F45C               BRGE    ??BuildAPWriteData_1
    357                 WriteEEPROMByte(EEPROM_EEPROMDATA+i, packed_data[i]);
   \   000000B6   01FC               MOVW    R31:R30, R25:R24
   \   000000B8   ....               SUBI    R30, LOW((-(packed_data) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(packed_data) & 0xFFFF) >> 8
   \   000000BC   8120               LD      R18, Z
   \   000000BE   018C               MOVW    R17:R16, R25:R24
   \   000000C0   5F0D               SUBI    R16, 253
   \   000000C2   4F1F               SBCI    R17, 255
   \   000000C4   ........           CALL    WriteEEPROMByte
    358              }
   \   000000C8   9601               ADIW    R25:R24, 1
   \   000000CA   CFF1               RJMP    ??BuildAPWriteData_0
    359          
    360              for (i = 0; i < PACKED_DATA_SIZE; i++) {          //verify data from eeprom to ram
   \                     ??BuildAPWriteData_1:
   \   000000CC   E080               LDI     R24, 0
   \   000000CE   E090               LDI     R25, 0
   \                     ??BuildAPWriteData_2:
   \   000000D0   3288               CPI     R24, 40
   \   000000D2   E000               LDI     R16, 0
   \   000000D4   0790               CPC     R25, R16
   \   000000D6   F474               BRGE    ??BuildAPWriteData_3
    361                 if (ReadEEPROMByte(EEPROM_EEPROMDATA+i) != packed_data[i]) {
   \   000000D8   018C               MOVW    R17:R16, R25:R24
   \   000000DA   5F0D               SUBI    R16, 253
   \   000000DC   4F1F               SBCI    R17, 255
   \   000000DE   ........           CALL    ReadEEPROMByte
   \   000000E2   01FC               MOVW    R31:R30, R25:R24
   \   000000E4   ....               SUBI    R30, LOW((-(packed_data) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, (-(packed_data) & 0xFFFF) >> 8
   \   000000E8   8110               LD      R17, Z
   \   000000EA   1701               CP      R16, R17
   \   000000EC   F009               BREQ    ??BuildAPWriteData_4
    362                    retval = false ;
   \   000000EE   E0B0               LDI     R27, 0
    363                 }
    364              }
   \                     ??BuildAPWriteData_4:
   \   000000F0   9601               ADIW    R25:R24, 1
   \   000000F2   CFEE               RJMP    ??BuildAPWriteData_2
    365          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress ;			// Secondary address
   \                     ??BuildAPWriteData_3:
   \   000000F4   9120....           LDS     R18, MySecAddress
   \   000000F8   2F0A               MOV     R16, R26
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   E14D               LDI     R20, 29
   \   000000FE   E050               LDI     R21, 0
   \   00000100   ........           CALL    ?S_EC_MUL_L02
   \   00000104   01F8               MOVW    R31:R30, R17:R16
   \   00000106   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000010A   8160               LD      R22, Z
   \   0000010C   8171               LDD     R23, Z+1
   \   0000010E   2F0A               MOV     R16, R26
   \   00000110   E010               LDI     R17, 0
   \   00000112   E14D               LDI     R20, 29
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   01F8               MOVW    R31:R30, R17:R16
   \   0000011C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000120   8102               LDD     R16, Z+2
   \   00000122   8113               LDD     R17, Z+3
   \   00000124   0F60               ADD     R22, R16
   \   00000126   1F71               ADC     R23, R17
   \   00000128   01FB               MOVW    R31:R30, R23:R22
   \   0000012A   8320               ST      Z, R18
   \   0000012C   2F0A               MOV     R16, R26
   \   0000012E   E010               LDI     R17, 0
   \   00000130   E14D               LDI     R20, 29
   \   00000132   E050               LDI     R21, 0
   \   00000134   ........           CALL    ?S_EC_MUL_L02
   \   00000138   01F8               MOVW    R31:R30, R17:R16
   \   0000013A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000013E   8102               LDD     R16, Z+2
   \   00000140   8113               LDD     R17, Z+3
   \   00000142   5F0F               SUBI    R16, 255
   \   00000144   4F1F               SBCI    R17, 255
   \   00000146   8302               STD     Z+2, R16
   \   00000148   8313               STD     Z+3, R17
    366          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = retval ;			// Secondary address
   \   0000014A   2F0A               MOV     R16, R26
   \   0000014C   E010               LDI     R17, 0
   \   0000014E   E14D               LDI     R20, 29
   \   00000150   E050               LDI     R21, 0
   \   00000152   ........           CALL    ?S_EC_MUL_L02
   \   00000156   01F8               MOVW    R31:R30, R17:R16
   \   00000158   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000015A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000015C   8120               LD      R18, Z
   \   0000015E   8131               LDD     R19, Z+1
   \   00000160   2F0A               MOV     R16, R26
   \   00000162   E010               LDI     R17, 0
   \   00000164   E14D               LDI     R20, 29
   \   00000166   E050               LDI     R21, 0
   \   00000168   ........           CALL    ?S_EC_MUL_L02
   \   0000016C   01F8               MOVW    R31:R30, R17:R16
   \   0000016E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000170   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000172   8102               LDD     R16, Z+2
   \   00000174   8113               LDD     R17, Z+3
   \   00000176   0F20               ADD     R18, R16
   \   00000178   1F31               ADC     R19, R17
   \   0000017A   01F9               MOVW    R31:R30, R19:R18
   \   0000017C   83B0               ST      Z, R27
   \   0000017E   2F0A               MOV     R16, R26
   \   00000180   E010               LDI     R17, 0
   \   00000182   E14D               LDI     R20, 29
   \   00000184   E050               LDI     R21, 0
   \   00000186   ........           CALL    ?S_EC_MUL_L02
   \   0000018A   01F8               MOVW    R31:R30, R17:R16
   \   0000018C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000190   8102               LDD     R16, Z+2
   \   00000192   8113               LDD     R17, Z+3
   \   00000194   5F0F               SUBI    R16, 255
   \   00000196   4F1F               SBCI    R17, 255
   \   00000198   8302               STD     Z+2, R16
   \   0000019A   8313               STD     Z+3, R17
    367              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \   0000019C   2F0A               MOV     R16, R26
   \   0000019E   E010               LDI     R17, 0
   \   000001A0   E14D               LDI     R20, 29
   \   000001A2   E050               LDI     R21, 0
   \   000001A4   ........           CALL    ?S_EC_MUL_L02
   \   000001A8   01F8               MOVW    R31:R30, R17:R16
   \   000001AA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001AC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AE   8122               LDD     R18, Z+2
   \   000001B0   8133               LDD     R19, Z+3
   \   000001B2   2D04               MOV     R16, R4
   \   000001B4   1B20               SUB     R18, R16
   \   000001B6   952A               DEC     R18
   \   000001B8   2F0A               MOV     R16, R26
   \   000001BA   E010               LDI     R17, 0
   \   000001BC   E14D               LDI     R20, 29
   \   000001BE   E050               LDI     R21, 0
   \   000001C0   ........           CALL    ?S_EC_MUL_L02
   \   000001C4   01F8               MOVW    R31:R30, R17:R16
   \   000001C6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001C8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CA   8100               LD      R16, Z
   \   000001CC   8111               LDD     R17, Z+1
   \   000001CE   0D04               ADD     R16, R4
   \   000001D0   1D15               ADC     R17, R5
   \   000001D2   01F8               MOVW    R31:R30, R17:R16
   \   000001D4   8320               ST      Z, R18
    368          }
   \   000001D6   E0E8               LDI     R30, 8
   \   000001D8   ........           JMP     ?EPILOGUE_B8_L09
    369          
    370          /*************************************************************************
    371          *
    372          * Build answer for Dallas EEprom 
    373          *   !OBS: Does not have Dallas her, dummy for protocol matching with older products
    374          *
    375          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    376          void BuildDallasData(char ch, short pointer){
   \                     BuildDallasData:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
    377          
    378          	short i, ntna;
    379              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000008   E071               LDI     R23, 1
   \   0000000A   2F06               MOV     R16, R22
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14D               LDI     R20, 29
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8F74               STD     Z+28, R23
    380          	
    381              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_EEPSER;     
   \   0000001E   E578               LDI     R23, 88
   \   00000020   2F06               MOV     R16, R22
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14D               LDI     R20, 29
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   81A0               LD      R26, Z
   \   00000034   81B1               LDD     R27, Z+1
   \   00000036   2F06               MOV     R16, R22
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14D               LDI     R20, 29
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000048   8102               LDD     R16, Z+2
   \   0000004A   8113               LDD     R17, Z+3
   \   0000004C   0FA0               ADD     R26, R16
   \   0000004E   1FB1               ADC     R27, R17
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   8370               ST      Z, R23
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14D               LDI     R20, 29
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    382              ntna = UART[ch].TxFirst++ ;                                    /* remember index */
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14D               LDI     R20, 29
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8102               LDD     R16, Z+2
   \   00000086   8113               LDD     R17, Z+3
   \   00000088   0198               MOVW    R19:R18, R17:R16
   \   0000008A   2F06               MOV     R16, R22
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   E14D               LDI     R20, 29
   \   00000090   E050               LDI     R21, 0
   \   00000092   ........           CALL    ?S_EC_MUL_L02
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009C   8102               LDD     R16, Z+2
   \   0000009E   8113               LDD     R17, Z+3
   \   000000A0   5F0F               SUBI    R16, 255
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   8302               STD     Z+2, R16
   \   000000A6   8313               STD     Z+3, R17
    383          
    384          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress ;			// Secondary address
   \   000000A8   9170....           LDS     R23, MySecAddress
   \   000000AC   2F06               MOV     R16, R22
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   E14D               LDI     R20, 29
   \   000000B2   E050               LDI     R21, 0
   \   000000B4   ........           CALL    ?S_EC_MUL_L02
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BE   81A0               LD      R26, Z
   \   000000C0   81B1               LDD     R27, Z+1
   \   000000C2   2F06               MOV     R16, R22
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   E14D               LDI     R20, 29
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   ........           CALL    ?S_EC_MUL_L02
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D4   8102               LDD     R16, Z+2
   \   000000D6   8113               LDD     R17, Z+3
   \   000000D8   0FA0               ADD     R26, R16
   \   000000DA   1FB1               ADC     R27, R17
   \   000000DC   01FD               MOVW    R31:R30, R27:R26
   \   000000DE   8370               ST      Z, R23
   \   000000E0   2F06               MOV     R16, R22
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14D               LDI     R20, 29
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    385              for (i = 0; i < 10; i++) {                                       //Send 10 0-es for fault
   \   000000FE   E080               LDI     R24, 0
   \   00000100   E090               LDI     R25, 0
   \                     ??BuildDallasData_0:
   \   00000102   308A               CPI     R24, 10
   \   00000104   E000               LDI     R16, 0
   \   00000106   0790               CPC     R25, R16
   \   00000108   F564               BRGE    ??BuildDallasData_1
    386                 UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0;
   \   0000010A   E070               LDI     R23, 0
   \   0000010C   2F06               MOV     R16, R22
   \   0000010E   E010               LDI     R17, 0
   \   00000110   E14D               LDI     R20, 29
   \   00000112   E050               LDI     R21, 0
   \   00000114   ........           CALL    ?S_EC_MUL_L02
   \   00000118   01F8               MOVW    R31:R30, R17:R16
   \   0000011A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011E   81A0               LD      R26, Z
   \   00000120   81B1               LDD     R27, Z+1
   \   00000122   2F06               MOV     R16, R22
   \   00000124   E010               LDI     R17, 0
   \   00000126   E14D               LDI     R20, 29
   \   00000128   E050               LDI     R21, 0
   \   0000012A   ........           CALL    ?S_EC_MUL_L02
   \   0000012E   01F8               MOVW    R31:R30, R17:R16
   \   00000130   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000132   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000134   8102               LDD     R16, Z+2
   \   00000136   8113               LDD     R17, Z+3
   \   00000138   0FA0               ADD     R26, R16
   \   0000013A   1FB1               ADC     R27, R17
   \   0000013C   01FD               MOVW    R31:R30, R27:R26
   \   0000013E   8370               ST      Z, R23
   \   00000140   2F06               MOV     R16, R22
   \   00000142   E010               LDI     R17, 0
   \   00000144   E14D               LDI     R20, 29
   \   00000146   E050               LDI     R21, 0
   \   00000148   ........           CALL    ?S_EC_MUL_L02
   \   0000014C   01F8               MOVW    R31:R30, R17:R16
   \   0000014E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000150   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000152   8102               LDD     R16, Z+2
   \   00000154   8113               LDD     R17, Z+3
   \   00000156   5F0F               SUBI    R16, 255
   \   00000158   4F1F               SBCI    R17, 255
   \   0000015A   8302               STD     Z+2, R16
   \   0000015C   8313               STD     Z+3, R17
    387              }
   \   0000015E   9601               ADIW    R25:R24, 1
   \   00000160   CFD0               RJMP    ??BuildDallasData_0
    388          
    389              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \                     ??BuildDallasData_1:
   \   00000162   2F06               MOV     R16, R22
   \   00000164   E010               LDI     R17, 0
   \   00000166   E14D               LDI     R20, 29
   \   00000168   E050               LDI     R21, 0
   \   0000016A   ........           CALL    ?S_EC_MUL_L02
   \   0000016E   01F8               MOVW    R31:R30, R17:R16
   \   00000170   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000172   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000174   81A2               LDD     R26, Z+2
   \   00000176   81B3               LDD     R27, Z+3
   \   00000178   2F02               MOV     R16, R18
   \   0000017A   1BA0               SUB     R26, R16
   \   0000017C   95AA               DEC     R26
   \   0000017E   2F06               MOV     R16, R22
   \   00000180   E010               LDI     R17, 0
   \   00000182   E14D               LDI     R20, 29
   \   00000184   E050               LDI     R21, 0
   \   00000186   ........           CALL    ?S_EC_MUL_L02
   \   0000018A   01F8               MOVW    R31:R30, R17:R16
   \   0000018C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000190   8100               LD      R16, Z
   \   00000192   8111               LDD     R17, Z+1
   \   00000194   0F02               ADD     R16, R18
   \   00000196   1F13               ADC     R17, R19
   \   00000198   01F8               MOVW    R31:R30, R17:R16
   \   0000019A   83A0               ST      Z, R26
    390          }
   \   0000019C   E0E4               LDI     R30, 4
   \   0000019E   ........           JMP     ?EPILOGUE_B4_L09
    391          
    392          /*************************************************************************
    393          *
    394          * Build datablock for card status
    395          *
    396          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    397          void BuildStatusData(char ch, short pointer){
   \                     BuildStatusData:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
    398          
    399              short ntna ;
    400              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000008   E071               LDI     R23, 1
   \   0000000A   2F06               MOV     R16, R22
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14D               LDI     R20, 29
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8F74               STD     Z+28, R23
    401          
    402              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_STAT;     
   \   0000001E   E47F               LDI     R23, 79
   \   00000020   2F06               MOV     R16, R22
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14D               LDI     R20, 29
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   8180               LD      R24, Z
   \   00000034   8191               LDD     R25, Z+1
   \   00000036   2F06               MOV     R16, R22
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14D               LDI     R20, 29
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000048   8102               LDD     R16, Z+2
   \   0000004A   8113               LDD     R17, Z+3
   \   0000004C   0F80               ADD     R24, R16
   \   0000004E   1F91               ADC     R25, R17
   \   00000050   01FC               MOVW    R31:R30, R25:R24
   \   00000052   8370               ST      Z, R23
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14D               LDI     R20, 29
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    403              ntna = UART[ch].TxFirst++ ;                                    /* remember index */
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14D               LDI     R20, 29
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8102               LDD     R16, Z+2
   \   00000086   8113               LDD     R17, Z+3
   \   00000088   0198               MOVW    R19:R18, R17:R16
   \   0000008A   2F06               MOV     R16, R22
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   E14D               LDI     R20, 29
   \   00000090   E050               LDI     R21, 0
   \   00000092   ........           CALL    ?S_EC_MUL_L02
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009C   8102               LDD     R16, Z+2
   \   0000009E   8113               LDD     R17, Z+3
   \   000000A0   5F0F               SUBI    R16, 255
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   8302               STD     Z+2, R16
   \   000000A6   8313               STD     Z+3, R17
    404          
    405              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress;           // unit adddress sec
   \   000000A8   9170....           LDS     R23, MySecAddress
   \   000000AC   2F06               MOV     R16, R22
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   E14D               LDI     R20, 29
   \   000000B2   E050               LDI     R21, 0
   \   000000B4   ........           CALL    ?S_EC_MUL_L02
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BE   8180               LD      R24, Z
   \   000000C0   8191               LDD     R25, Z+1
   \   000000C2   2F06               MOV     R16, R22
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   E14D               LDI     R20, 29
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   ........           CALL    ?S_EC_MUL_L02
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D4   8102               LDD     R16, Z+2
   \   000000D6   8113               LDD     R17, Z+3
   \   000000D8   0F80               ADD     R24, R16
   \   000000DA   1F91               ADC     R25, R17
   \   000000DC   01FC               MOVW    R31:R30, R25:R24
   \   000000DE   8370               ST      Z, R23
   \   000000E0   2F06               MOV     R16, R22
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14D               LDI     R20, 29
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    406              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION ;       // software version */
   \   000000FE   E17B               LDI     R23, 27
   \   00000100   2F06               MOV     R16, R22
   \   00000102   E010               LDI     R17, 0
   \   00000104   E14D               LDI     R20, 29
   \   00000106   E050               LDI     R21, 0
   \   00000108   ........           CALL    ?S_EC_MUL_L02
   \   0000010C   01F8               MOVW    R31:R30, R17:R16
   \   0000010E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000110   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000112   8180               LD      R24, Z
   \   00000114   8191               LDD     R25, Z+1
   \   00000116   2F06               MOV     R16, R22
   \   00000118   E010               LDI     R17, 0
   \   0000011A   E14D               LDI     R20, 29
   \   0000011C   E050               LDI     R21, 0
   \   0000011E   ........           CALL    ?S_EC_MUL_L02
   \   00000122   01F8               MOVW    R31:R30, R17:R16
   \   00000124   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000126   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000128   8102               LDD     R16, Z+2
   \   0000012A   8113               LDD     R17, Z+3
   \   0000012C   0F80               ADD     R24, R16
   \   0000012E   1F91               ADC     R25, R17
   \   00000130   01FC               MOVW    R31:R30, R25:R24
   \   00000132   8370               ST      Z, R23
   \   00000134   2F06               MOV     R16, R22
   \   00000136   E010               LDI     R17, 0
   \   00000138   E14D               LDI     R20, 29
   \   0000013A   E050               LDI     R21, 0
   \   0000013C   ........           CALL    ?S_EC_MUL_L02
   \   00000140   01F8               MOVW    R31:R30, R17:R16
   \   00000142   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000144   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000146   8102               LDD     R16, Z+2
   \   00000148   8113               LDD     R17, Z+3
   \   0000014A   5F0F               SUBI    R16, 255
   \   0000014C   4F1F               SBCI    R17, 255
   \   0000014E   8302               STD     Z+2, R16
   \   00000150   8313               STD     Z+3, R17
    407              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UnitID ;       // software version */
   \   00000152   9170....           LDS     R23, UnitID
   \   00000156   2F06               MOV     R16, R22
   \   00000158   E010               LDI     R17, 0
   \   0000015A   E14D               LDI     R20, 29
   \   0000015C   E050               LDI     R21, 0
   \   0000015E   ........           CALL    ?S_EC_MUL_L02
   \   00000162   01F8               MOVW    R31:R30, R17:R16
   \   00000164   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000166   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000168   8180               LD      R24, Z
   \   0000016A   8191               LDD     R25, Z+1
   \   0000016C   2F06               MOV     R16, R22
   \   0000016E   E010               LDI     R17, 0
   \   00000170   E14D               LDI     R20, 29
   \   00000172   E050               LDI     R21, 0
   \   00000174   ........           CALL    ?S_EC_MUL_L02
   \   00000178   01F8               MOVW    R31:R30, R17:R16
   \   0000017A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000017C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017E   8102               LDD     R16, Z+2
   \   00000180   8113               LDD     R17, Z+3
   \   00000182   0F80               ADD     R24, R16
   \   00000184   1F91               ADC     R25, R17
   \   00000186   01FC               MOVW    R31:R30, R25:R24
   \   00000188   8370               ST      Z, R23
   \   0000018A   2F06               MOV     R16, R22
   \   0000018C   E010               LDI     R17, 0
   \   0000018E   E14D               LDI     R20, 29
   \   00000190   E050               LDI     R21, 0
   \   00000192   ........           CALL    ?S_EC_MUL_L02
   \   00000196   01F8               MOVW    R31:R30, R17:R16
   \   00000198   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000019A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000019C   8102               LDD     R16, Z+2
   \   0000019E   8113               LDD     R17, Z+3
   \   000001A0   5F0F               SUBI    R16, 255
   \   000001A2   4F1F               SBCI    R17, 255
   \   000001A4   8302               STD     Z+2, R16
   \   000001A6   8313               STD     Z+3, R17
    408              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \   000001A8   EF7F               LDI     R23, 255
   \   000001AA   2F06               MOV     R16, R22
   \   000001AC   E010               LDI     R17, 0
   \   000001AE   E14D               LDI     R20, 29
   \   000001B0   E050               LDI     R21, 0
   \   000001B2   ........           CALL    ?S_EC_MUL_L02
   \   000001B6   01F8               MOVW    R31:R30, R17:R16
   \   000001B8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001BA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001BC   8180               LD      R24, Z
   \   000001BE   8191               LDD     R25, Z+1
   \   000001C0   2F06               MOV     R16, R22
   \   000001C2   E010               LDI     R17, 0
   \   000001C4   E14D               LDI     R20, 29
   \   000001C6   E050               LDI     R21, 0
   \   000001C8   ........           CALL    ?S_EC_MUL_L02
   \   000001CC   01F8               MOVW    R31:R30, R17:R16
   \   000001CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D2   8102               LDD     R16, Z+2
   \   000001D4   8113               LDD     R17, Z+3
   \   000001D6   0F80               ADD     R24, R16
   \   000001D8   1F91               ADC     R25, R17
   \   000001DA   01FC               MOVW    R31:R30, R25:R24
   \   000001DC   8370               ST      Z, R23
   \   000001DE   2F06               MOV     R16, R22
   \   000001E0   E010               LDI     R17, 0
   \   000001E2   E14D               LDI     R20, 29
   \   000001E4   E050               LDI     R21, 0
   \   000001E6   ........           CALL    ?S_EC_MUL_L02
   \   000001EA   01F8               MOVW    R31:R30, R17:R16
   \   000001EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001F0   8102               LDD     R16, Z+2
   \   000001F2   8113               LDD     R17, Z+3
   \   000001F4   5F0F               SUBI    R16, 255
   \   000001F6   4F1F               SBCI    R17, 255
   \   000001F8   8302               STD     Z+2, R16
   \   000001FA   8313               STD     Z+3, R17
    409              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (( RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   000001FC   E070               LDI     R23, 0
   \   000001FE   2F06               MOV     R16, R22
   \   00000200   E010               LDI     R17, 0
   \   00000202   E14D               LDI     R20, 29
   \   00000204   E050               LDI     R21, 0
   \   00000206   ........           CALL    ?S_EC_MUL_L02
   \   0000020A   01F8               MOVW    R31:R30, R17:R16
   \   0000020C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000020E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000210   8180               LD      R24, Z
   \   00000212   8191               LDD     R25, Z+1
   \   00000214   2F06               MOV     R16, R22
   \   00000216   E010               LDI     R17, 0
   \   00000218   E14D               LDI     R20, 29
   \   0000021A   E050               LDI     R21, 0
   \   0000021C   ........           CALL    ?S_EC_MUL_L02
   \   00000220   01F8               MOVW    R31:R30, R17:R16
   \   00000222   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000224   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000226   8102               LDD     R16, Z+2
   \   00000228   8113               LDD     R17, Z+3
   \   0000022A   0F80               ADD     R24, R16
   \   0000022C   1F91               ADC     R25, R17
   \   0000022E   01FC               MOVW    R31:R30, R25:R24
   \   00000230   8370               ST      Z, R23
   \   00000232   2F06               MOV     R16, R22
   \   00000234   E010               LDI     R17, 0
   \   00000236   E14D               LDI     R20, 29
   \   00000238   E050               LDI     R21, 0
   \   0000023A   ........           CALL    ?S_EC_MUL_L02
   \   0000023E   01F8               MOVW    R31:R30, R17:R16
   \   00000240   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000242   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000244   8102               LDD     R16, Z+2
   \   00000246   8113               LDD     R17, Z+3
   \   00000248   5F0F               SUBI    R16, 255
   \   0000024A   4F1F               SBCI    R17, 255
   \   0000024C   8302               STD     Z+2, R16
   \   0000024E   8313               STD     Z+3, R17
    410              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \   00000250   E976               LDI     R23, 150
   \   00000252   2F06               MOV     R16, R22
   \   00000254   E010               LDI     R17, 0
   \   00000256   E14D               LDI     R20, 29
   \   00000258   E050               LDI     R21, 0
   \   0000025A   ........           CALL    ?S_EC_MUL_L02
   \   0000025E   01F8               MOVW    R31:R30, R17:R16
   \   00000260   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000262   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000264   8180               LD      R24, Z
   \   00000266   8191               LDD     R25, Z+1
   \   00000268   2F06               MOV     R16, R22
   \   0000026A   E010               LDI     R17, 0
   \   0000026C   E14D               LDI     R20, 29
   \   0000026E   E050               LDI     R21, 0
   \   00000270   ........           CALL    ?S_EC_MUL_L02
   \   00000274   01F8               MOVW    R31:R30, R17:R16
   \   00000276   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000278   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000027A   8102               LDD     R16, Z+2
   \   0000027C   8113               LDD     R17, Z+3
   \   0000027E   0F80               ADD     R24, R16
   \   00000280   1F91               ADC     R25, R17
   \   00000282   01FC               MOVW    R31:R30, R25:R24
   \   00000284   8370               ST      Z, R23
   \   00000286   2F06               MOV     R16, R22
   \   00000288   E010               LDI     R17, 0
   \   0000028A   E14D               LDI     R20, 29
   \   0000028C   E050               LDI     R21, 0
   \   0000028E   ........           CALL    ?S_EC_MUL_L02
   \   00000292   01F8               MOVW    R31:R30, R17:R16
   \   00000294   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000296   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000298   8102               LDD     R16, Z+2
   \   0000029A   8113               LDD     R17, Z+3
   \   0000029C   5F0F               SUBI    R16, 255
   \   0000029E   4F1F               SBCI    R17, 255
   \   000002A0   8302               STD     Z+2, R16
   \   000002A2   8313               STD     Z+3, R17
    411              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
   \   000002A4   E070               LDI     R23, 0
   \   000002A6   2F06               MOV     R16, R22
   \   000002A8   E010               LDI     R17, 0
   \   000002AA   E14D               LDI     R20, 29
   \   000002AC   E050               LDI     R21, 0
   \   000002AE   ........           CALL    ?S_EC_MUL_L02
   \   000002B2   01F8               MOVW    R31:R30, R17:R16
   \   000002B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002B8   8180               LD      R24, Z
   \   000002BA   8191               LDD     R25, Z+1
   \   000002BC   2F06               MOV     R16, R22
   \   000002BE   E010               LDI     R17, 0
   \   000002C0   E14D               LDI     R20, 29
   \   000002C2   E050               LDI     R21, 0
   \   000002C4   ........           CALL    ?S_EC_MUL_L02
   \   000002C8   01F8               MOVW    R31:R30, R17:R16
   \   000002CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002CE   8102               LDD     R16, Z+2
   \   000002D0   8113               LDD     R17, Z+3
   \   000002D2   0F80               ADD     R24, R16
   \   000002D4   1F91               ADC     R25, R17
   \   000002D6   01FC               MOVW    R31:R30, R25:R24
   \   000002D8   8370               ST      Z, R23
   \   000002DA   2F06               MOV     R16, R22
   \   000002DC   E010               LDI     R17, 0
   \   000002DE   E14D               LDI     R20, 29
   \   000002E0   E050               LDI     R21, 0
   \   000002E2   ........           CALL    ?S_EC_MUL_L02
   \   000002E6   01F8               MOVW    R31:R30, R17:R16
   \   000002E8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002EA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002EC   8102               LDD     R16, Z+2
   \   000002EE   8113               LDD     R17, Z+3
   \   000002F0   5F0F               SUBI    R16, 255
   \   000002F2   4F1F               SBCI    R17, 255
   \   000002F4   8302               STD     Z+2, R16
   \   000002F6   8313               STD     Z+3, R17
    412              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus ;               // restart flag
   \   000002F8   9170....           LDS     R23, RestartStatus
   \   000002FC   2F06               MOV     R16, R22
   \   000002FE   E010               LDI     R17, 0
   \   00000300   E14D               LDI     R20, 29
   \   00000302   E050               LDI     R21, 0
   \   00000304   ........           CALL    ?S_EC_MUL_L02
   \   00000308   01F8               MOVW    R31:R30, R17:R16
   \   0000030A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000030C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000030E   8180               LD      R24, Z
   \   00000310   8191               LDD     R25, Z+1
   \   00000312   2F06               MOV     R16, R22
   \   00000314   E010               LDI     R17, 0
   \   00000316   E14D               LDI     R20, 29
   \   00000318   E050               LDI     R21, 0
   \   0000031A   ........           CALL    ?S_EC_MUL_L02
   \   0000031E   01F8               MOVW    R31:R30, R17:R16
   \   00000320   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000322   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000324   8102               LDD     R16, Z+2
   \   00000326   8113               LDD     R17, Z+3
   \   00000328   0F80               ADD     R24, R16
   \   0000032A   1F91               ADC     R25, R17
   \   0000032C   01FC               MOVW    R31:R30, R25:R24
   \   0000032E   8370               ST      Z, R23
   \   00000330   2F06               MOV     R16, R22
   \   00000332   E010               LDI     R17, 0
   \   00000334   E14D               LDI     R20, 29
   \   00000336   E050               LDI     R21, 0
   \   00000338   ........           CALL    ?S_EC_MUL_L02
   \   0000033C   01F8               MOVW    R31:R30, R17:R16
   \   0000033E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000340   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000342   8102               LDD     R16, Z+2
   \   00000344   8113               LDD     R17, Z+3
   \   00000346   5F0F               SUBI    R16, 255
   \   00000348   4F1F               SBCI    R17, 255
   \   0000034A   8302               STD     Z+2, R16
   \   0000034C   8313               STD     Z+3, R17
    413              UART[ch].pTxBuffer[UART[ch].TxFirst++] = packed_data[0];              //Ser no1 ;
   \   0000034E   9170....           LDS     R23, packed_data
   \   00000352   2F06               MOV     R16, R22
   \   00000354   E010               LDI     R17, 0
   \   00000356   E14D               LDI     R20, 29
   \   00000358   E050               LDI     R21, 0
   \   0000035A   ........           CALL    ?S_EC_MUL_L02
   \   0000035E   01F8               MOVW    R31:R30, R17:R16
   \   00000360   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000362   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000364   8180               LD      R24, Z
   \   00000366   8191               LDD     R25, Z+1
   \   00000368   2F06               MOV     R16, R22
   \   0000036A   E010               LDI     R17, 0
   \   0000036C   E14D               LDI     R20, 29
   \   0000036E   E050               LDI     R21, 0
   \   00000370   ........           CALL    ?S_EC_MUL_L02
   \   00000374   01F8               MOVW    R31:R30, R17:R16
   \   00000376   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000378   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000037A   8102               LDD     R16, Z+2
   \   0000037C   8113               LDD     R17, Z+3
   \   0000037E   0F80               ADD     R24, R16
   \   00000380   1F91               ADC     R25, R17
   \   00000382   01FC               MOVW    R31:R30, R25:R24
   \   00000384   8370               ST      Z, R23
   \   00000386   2F06               MOV     R16, R22
   \   00000388   E010               LDI     R17, 0
   \   0000038A   E14D               LDI     R20, 29
   \   0000038C   E050               LDI     R21, 0
   \   0000038E   ........           CALL    ?S_EC_MUL_L02
   \   00000392   01F8               MOVW    R31:R30, R17:R16
   \   00000394   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000396   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000398   8102               LDD     R16, Z+2
   \   0000039A   8113               LDD     R17, Z+3
   \   0000039C   5F0F               SUBI    R16, 255
   \   0000039E   4F1F               SBCI    R17, 255
   \   000003A0   8302               STD     Z+2, R16
   \   000003A2   8313               STD     Z+3, R17
    414              UART[ch].pTxBuffer[UART[ch].TxFirst++] = packed_data[1];              //Ser no2 ;
   \   000003A4   9170....           LDS     R23, (packed_data + 1)
   \   000003A8   2F06               MOV     R16, R22
   \   000003AA   E010               LDI     R17, 0
   \   000003AC   E14D               LDI     R20, 29
   \   000003AE   E050               LDI     R21, 0
   \   000003B0   ........           CALL    ?S_EC_MUL_L02
   \   000003B4   01F8               MOVW    R31:R30, R17:R16
   \   000003B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003BA   8180               LD      R24, Z
   \   000003BC   8191               LDD     R25, Z+1
   \   000003BE   2F06               MOV     R16, R22
   \   000003C0   E010               LDI     R17, 0
   \   000003C2   E14D               LDI     R20, 29
   \   000003C4   E050               LDI     R21, 0
   \   000003C6   ........           CALL    ?S_EC_MUL_L02
   \   000003CA   01F8               MOVW    R31:R30, R17:R16
   \   000003CC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003CE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003D0   8102               LDD     R16, Z+2
   \   000003D2   8113               LDD     R17, Z+3
   \   000003D4   0F80               ADD     R24, R16
   \   000003D6   1F91               ADC     R25, R17
   \   000003D8   01FC               MOVW    R31:R30, R25:R24
   \   000003DA   8370               ST      Z, R23
   \   000003DC   2F06               MOV     R16, R22
   \   000003DE   E010               LDI     R17, 0
   \   000003E0   E14D               LDI     R20, 29
   \   000003E2   E050               LDI     R21, 0
   \   000003E4   ........           CALL    ?S_EC_MUL_L02
   \   000003E8   01F8               MOVW    R31:R30, R17:R16
   \   000003EA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003EC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003EE   8102               LDD     R16, Z+2
   \   000003F0   8113               LDD     R17, Z+3
   \   000003F2   5F0F               SUBI    R16, 255
   \   000003F4   4F1F               SBCI    R17, 255
   \   000003F6   8302               STD     Z+2, R16
   \   000003F8   8313               STD     Z+3, R17
    415              UART[ch].pTxBuffer[UART[ch].TxFirst++] = packed_data[2];              //Ser no3 ;
   \   000003FA   9170....           LDS     R23, (packed_data + 2)
   \   000003FE   2F06               MOV     R16, R22
   \   00000400   E010               LDI     R17, 0
   \   00000402   E14D               LDI     R20, 29
   \   00000404   E050               LDI     R21, 0
   \   00000406   ........           CALL    ?S_EC_MUL_L02
   \   0000040A   01F8               MOVW    R31:R30, R17:R16
   \   0000040C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000040E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000410   8180               LD      R24, Z
   \   00000412   8191               LDD     R25, Z+1
   \   00000414   2F06               MOV     R16, R22
   \   00000416   E010               LDI     R17, 0
   \   00000418   E14D               LDI     R20, 29
   \   0000041A   E050               LDI     R21, 0
   \   0000041C   ........           CALL    ?S_EC_MUL_L02
   \   00000420   01F8               MOVW    R31:R30, R17:R16
   \   00000422   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000424   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000426   8102               LDD     R16, Z+2
   \   00000428   8113               LDD     R17, Z+3
   \   0000042A   0F80               ADD     R24, R16
   \   0000042C   1F91               ADC     R25, R17
   \   0000042E   01FC               MOVW    R31:R30, R25:R24
   \   00000430   8370               ST      Z, R23
   \   00000432   2F06               MOV     R16, R22
   \   00000434   E010               LDI     R17, 0
   \   00000436   E14D               LDI     R20, 29
   \   00000438   E050               LDI     R21, 0
   \   0000043A   ........           CALL    ?S_EC_MUL_L02
   \   0000043E   01F8               MOVW    R31:R30, R17:R16
   \   00000440   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000442   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000444   8102               LDD     R16, Z+2
   \   00000446   8113               LDD     R17, Z+3
   \   00000448   5F0F               SUBI    R16, 255
   \   0000044A   4F1F               SBCI    R17, 255
   \   0000044C   8302               STD     Z+2, R16
   \   0000044E   8313               STD     Z+3, R17
    416              UART[ch].pTxBuffer[UART[ch].TxFirst++] = packed_data[3];              //Ser no4 ;
   \   00000450   9170....           LDS     R23, (packed_data + 3)
   \   00000454   2F06               MOV     R16, R22
   \   00000456   E010               LDI     R17, 0
   \   00000458   E14D               LDI     R20, 29
   \   0000045A   E050               LDI     R21, 0
   \   0000045C   ........           CALL    ?S_EC_MUL_L02
   \   00000460   01F8               MOVW    R31:R30, R17:R16
   \   00000462   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000464   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000466   8180               LD      R24, Z
   \   00000468   8191               LDD     R25, Z+1
   \   0000046A   2F06               MOV     R16, R22
   \   0000046C   E010               LDI     R17, 0
   \   0000046E   E14D               LDI     R20, 29
   \   00000470   E050               LDI     R21, 0
   \   00000472   ........           CALL    ?S_EC_MUL_L02
   \   00000476   01F8               MOVW    R31:R30, R17:R16
   \   00000478   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000047A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000047C   8102               LDD     R16, Z+2
   \   0000047E   8113               LDD     R17, Z+3
   \   00000480   0F80               ADD     R24, R16
   \   00000482   1F91               ADC     R25, R17
   \   00000484   01FC               MOVW    R31:R30, R25:R24
   \   00000486   8370               ST      Z, R23
   \   00000488   2F06               MOV     R16, R22
   \   0000048A   E010               LDI     R17, 0
   \   0000048C   E14D               LDI     R20, 29
   \   0000048E   E050               LDI     R21, 0
   \   00000490   ........           CALL    ?S_EC_MUL_L02
   \   00000494   01F8               MOVW    R31:R30, R17:R16
   \   00000496   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000498   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000049A   8102               LDD     R16, Z+2
   \   0000049C   8113               LDD     R17, Z+3
   \   0000049E   5F0F               SUBI    R16, 255
   \   000004A0   4F1F               SBCI    R17, 255
   \   000004A2   8302               STD     Z+2, R16
   \   000004A4   8313               STD     Z+3, R17
    417          
    418              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \   000004A6   2F06               MOV     R16, R22
   \   000004A8   E010               LDI     R17, 0
   \   000004AA   E14D               LDI     R20, 29
   \   000004AC   E050               LDI     R21, 0
   \   000004AE   ........           CALL    ?S_EC_MUL_L02
   \   000004B2   01F8               MOVW    R31:R30, R17:R16
   \   000004B4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004B6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004B8   8182               LDD     R24, Z+2
   \   000004BA   8193               LDD     R25, Z+3
   \   000004BC   2F02               MOV     R16, R18
   \   000004BE   1B80               SUB     R24, R16
   \   000004C0   958A               DEC     R24
   \   000004C2   2F06               MOV     R16, R22
   \   000004C4   E010               LDI     R17, 0
   \   000004C6   E14D               LDI     R20, 29
   \   000004C8   E050               LDI     R21, 0
   \   000004CA   ........           CALL    ?S_EC_MUL_L02
   \   000004CE   01F8               MOVW    R31:R30, R17:R16
   \   000004D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004D4   8100               LD      R16, Z
   \   000004D6   8111               LDD     R17, Z+1
   \   000004D8   0F02               ADD     R16, R18
   \   000004DA   1F13               ADC     R17, R19
   \   000004DC   01F8               MOVW    R31:R30, R17:R16
   \   000004DE   8380               ST      Z, R24
    419          
    420              RestartStatus = 0 ;                                                  // set reset stat to 0 = read    
   \   000004E0   E000               LDI     R16, 0
   \   000004E2   9300....           STS     RestartStatus, R16
    421          }
   \   000004E6   9189               LD      R24, Y+
   \   000004E8   9199               LD      R25, Y+
   \   000004EA   9508               RET
    422          
    423          /*************************************************************************
    424          *
    425          * Build send package for card data 
    426          *
    427          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    428          void BuildCardData(char ch, short pointer){
   \                     BuildCardData:
   \   00000000   939A               ST      -Y, R25
   \   00000002   2F78               MOV     R23, R24
   \   00000004   2F60               MOV     R22, R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
    429              
    430              unsigned char ntna ;
    431          
    432              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000008   E031               LDI     R19, 1
   \   0000000A   2F06               MOV     R16, R22
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14D               LDI     R20, 29
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8F34               STD     Z+28, R19
    433              
    434              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_DATA;     
   \   0000001E   E43B               LDI     R19, 75
   \   00000020   2F06               MOV     R16, R22
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14D               LDI     R20, 29
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   8180               LD      R24, Z
   \   00000034   8191               LDD     R25, Z+1
   \   00000036   2F06               MOV     R16, R22
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14D               LDI     R20, 29
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000048   8102               LDD     R16, Z+2
   \   0000004A   8113               LDD     R17, Z+3
   \   0000004C   0F80               ADD     R24, R16
   \   0000004E   1F91               ADC     R25, R17
   \   00000050   01FC               MOVW    R31:R30, R25:R24
   \   00000052   8330               ST      Z, R19
   \   00000054   2F06               MOV     R16, R22
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14D               LDI     R20, 29
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    435              ntna = UART[ch].TxFirst++ ;                                    /* remember index */
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14D               LDI     R20, 29
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8102               LDD     R16, Z+2
   \   00000086   8113               LDD     R17, Z+3
   \   00000088   2F20               MOV     R18, R16
   \   0000008A   2F06               MOV     R16, R22
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   E14D               LDI     R20, 29
   \   00000090   E050               LDI     R21, 0
   \   00000092   ........           CALL    ?S_EC_MUL_L02
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009C   8102               LDD     R16, Z+2
   \   0000009E   8113               LDD     R17, Z+3
   \   000000A0   5F0F               SUBI    R16, 255
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   8302               STD     Z+2, R16
   \   000000A6   8313               STD     Z+3, R17
    436          
    437          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress ;			// Secondary address
   \   000000A8   9130....           LDS     R19, MySecAddress
   \   000000AC   2F06               MOV     R16, R22
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   E14D               LDI     R20, 29
   \   000000B2   E050               LDI     R21, 0
   \   000000B4   ........           CALL    ?S_EC_MUL_L02
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BE   8180               LD      R24, Z
   \   000000C0   8191               LDD     R25, Z+1
   \   000000C2   2F06               MOV     R16, R22
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   E14D               LDI     R20, 29
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   ........           CALL    ?S_EC_MUL_L02
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D4   8102               LDD     R16, Z+2
   \   000000D6   8113               LDD     R17, Z+3
   \   000000D8   0F80               ADD     R24, R16
   \   000000DA   1F91               ADC     R25, R17
   \   000000DC   01FC               MOVW    R31:R30, R25:R24
   \   000000DE   8330               ST      Z, R19
   \   000000E0   2F06               MOV     R16, R22
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14D               LDI     R20, 29
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    438          	UART[ch].pTxBuffer[UART[ch].TxFirst++] = Disp.alarmLED;				// status of led 
   \   000000FE   9130....           LDS     R19, (Disp + 1751)
   \   00000102   2F06               MOV     R16, R22
   \   00000104   E010               LDI     R17, 0
   \   00000106   E14D               LDI     R20, 29
   \   00000108   E050               LDI     R21, 0
   \   0000010A   ........           CALL    ?S_EC_MUL_L02
   \   0000010E   01F8               MOVW    R31:R30, R17:R16
   \   00000110   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000112   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000114   8180               LD      R24, Z
   \   00000116   8191               LDD     R25, Z+1
   \   00000118   2F06               MOV     R16, R22
   \   0000011A   E010               LDI     R17, 0
   \   0000011C   E14D               LDI     R20, 29
   \   0000011E   E050               LDI     R21, 0
   \   00000120   ........           CALL    ?S_EC_MUL_L02
   \   00000124   01F8               MOVW    R31:R30, R17:R16
   \   00000126   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000128   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000012A   8102               LDD     R16, Z+2
   \   0000012C   8113               LDD     R17, Z+3
   \   0000012E   0F80               ADD     R24, R16
   \   00000130   1F91               ADC     R25, R17
   \   00000132   01FC               MOVW    R31:R30, R25:R24
   \   00000134   8330               ST      Z, R19
   \   00000136   2F06               MOV     R16, R22
   \   00000138   E010               LDI     R17, 0
   \   0000013A   E14D               LDI     R20, 29
   \   0000013C   E050               LDI     R21, 0
   \   0000013E   ........           CALL    ?S_EC_MUL_L02
   \   00000142   01F8               MOVW    R31:R30, R17:R16
   \   00000144   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000146   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000148   8102               LDD     R16, Z+2
   \   0000014A   8113               LDD     R17, Z+3
   \   0000014C   5F0F               SUBI    R16, 255
   \   0000014E   4F1F               SBCI    R17, 255
   \   00000150   8302               STD     Z+2, R16
   \   00000152   8313               STD     Z+3, R17
    439          	UART[ch].pTxBuffer[UART[ch].TxFirst++]  = 0x00 ;
   \   00000154   E030               LDI     R19, 0
   \   00000156   2F06               MOV     R16, R22
   \   00000158   E010               LDI     R17, 0
   \   0000015A   E14D               LDI     R20, 29
   \   0000015C   E050               LDI     R21, 0
   \   0000015E   ........           CALL    ?S_EC_MUL_L02
   \   00000162   01F8               MOVW    R31:R30, R17:R16
   \   00000164   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000166   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000168   8180               LD      R24, Z
   \   0000016A   8191               LDD     R25, Z+1
   \   0000016C   2F06               MOV     R16, R22
   \   0000016E   E010               LDI     R17, 0
   \   00000170   E14D               LDI     R20, 29
   \   00000172   E050               LDI     R21, 0
   \   00000174   ........           CALL    ?S_EC_MUL_L02
   \   00000178   01F8               MOVW    R31:R30, R17:R16
   \   0000017A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000017C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000017E   8102               LDD     R16, Z+2
   \   00000180   8113               LDD     R17, Z+3
   \   00000182   0F80               ADD     R24, R16
   \   00000184   1F91               ADC     R25, R17
   \   00000186   01FC               MOVW    R31:R30, R25:R24
   \   00000188   8330               ST      Z, R19
   \   0000018A   2F06               MOV     R16, R22
   \   0000018C   E010               LDI     R17, 0
   \   0000018E   E14D               LDI     R20, 29
   \   00000190   E050               LDI     R21, 0
   \   00000192   ........           CALL    ?S_EC_MUL_L02
   \   00000196   01F8               MOVW    R31:R30, R17:R16
   \   00000198   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000019A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000019C   8102               LDD     R16, Z+2
   \   0000019E   8113               LDD     R17, Z+3
   \   000001A0   5F0F               SUBI    R16, 255
   \   000001A2   4F1F               SBCI    R17, 255
   \   000001A4   8302               STD     Z+2, R16
   \   000001A6   8313               STD     Z+3, R17
    440          
    441              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \   000001A8   2F06               MOV     R16, R22
   \   000001AA   E010               LDI     R17, 0
   \   000001AC   E14D               LDI     R20, 29
   \   000001AE   E050               LDI     R21, 0
   \   000001B0   ........           CALL    ?S_EC_MUL_L02
   \   000001B4   01F8               MOVW    R31:R30, R17:R16
   \   000001B6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001B8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001BA   8182               LDD     R24, Z+2
   \   000001BC   8193               LDD     R25, Z+3
   \   000001BE   1B82               SUB     R24, R18
   \   000001C0   958A               DEC     R24
   \   000001C2   2F06               MOV     R16, R22
   \   000001C4   E010               LDI     R17, 0
   \   000001C6   E14D               LDI     R20, 29
   \   000001C8   E050               LDI     R21, 0
   \   000001CA   ........           CALL    ?S_EC_MUL_L02
   \   000001CE   01F8               MOVW    R31:R30, R17:R16
   \   000001D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D4   8100               LD      R16, Z
   \   000001D6   8111               LDD     R17, Z+1
   \   000001D8   E030               LDI     R19, 0
   \   000001DA   0F02               ADD     R16, R18
   \   000001DC   1F13               ADC     R17, R19
   \   000001DE   01F8               MOVW    R31:R30, R17:R16
   \   000001E0   8380               ST      Z, R24
    442          }
   \   000001E2   2F87               MOV     R24, R23
   \   000001E4   9199               LD      R25, Y+
   \   000001E6   9508               RET
    443          
    444          /*************************************************************************
    445          *
    446          * Build stack status package 
    447          *
    448          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    449          void BuildStackStatus(char ch, short pointer){
   \                     BuildStackStatus:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
    450            unsigned char ntna;
    451            unsigned short stack ;
    452          
    453              UART[ch].RxSendReply = true ;                               // flag for answering 
   \   00000008   E021               LDI     R18, 1
   \   0000000A   2F0A               MOV     R16, R26
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14D               LDI     R20, 29
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001C   8F24               STD     Z+28, R18
    454              
    455              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANP1_REP_STACKSTATUS;     
   \   0000001E   EE27               LDI     R18, 231
   \   00000020   2F0A               MOV     R16, R26
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14D               LDI     R20, 29
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000032   8160               LD      R22, Z
   \   00000034   8171               LDD     R23, Z+1
   \   00000036   2F0A               MOV     R16, R26
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14D               LDI     R20, 29
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000048   8102               LDD     R16, Z+2
   \   0000004A   8113               LDD     R17, Z+3
   \   0000004C   0F60               ADD     R22, R16
   \   0000004E   1F71               ADC     R23, R17
   \   00000050   01FB               MOVW    R31:R30, R23:R22
   \   00000052   8320               ST      Z, R18
   \   00000054   2F0A               MOV     R16, R26
   \   00000056   E010               LDI     R17, 0
   \   00000058   E14D               LDI     R20, 29
   \   0000005A   E050               LDI     R21, 0
   \   0000005C   ........           CALL    ?S_EC_MUL_L02
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000066   8102               LDD     R16, Z+2
   \   00000068   8113               LDD     R17, Z+3
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   8302               STD     Z+2, R16
   \   00000070   8313               STD     Z+3, R17
    456              ntna = UART[ch].TxFirst++ ;                                    /* remember index */
   \   00000072   2F0A               MOV     R16, R26
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14D               LDI     R20, 29
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000084   8102               LDD     R16, Z+2
   \   00000086   8113               LDD     R17, Z+3
   \   00000088   2E40               MOV     R4, R16
   \   0000008A   2F0A               MOV     R16, R26
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   E14D               LDI     R20, 29
   \   00000090   E050               LDI     R21, 0
   \   00000092   ........           CALL    ?S_EC_MUL_L02
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000009C   8102               LDD     R16, Z+2
   \   0000009E   8113               LDD     R17, Z+3
   \   000000A0   5F0F               SUBI    R16, 255
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   8302               STD     Z+2, R16
   \   000000A6   8313               STD     Z+3, R17
    457          
    458              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MySecAddress;           // unit adddress sec
   \   000000A8   9120....           LDS     R18, MySecAddress
   \   000000AC   2F0A               MOV     R16, R26
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   E14D               LDI     R20, 29
   \   000000B2   E050               LDI     R21, 0
   \   000000B4   ........           CALL    ?S_EC_MUL_L02
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000BE   8160               LD      R22, Z
   \   000000C0   8171               LDD     R23, Z+1
   \   000000C2   2F0A               MOV     R16, R26
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   E14D               LDI     R20, 29
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   ........           CALL    ?S_EC_MUL_L02
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D4   8102               LDD     R16, Z+2
   \   000000D6   8113               LDD     R17, Z+3
   \   000000D8   0F60               ADD     R22, R16
   \   000000DA   1F71               ADC     R23, R17
   \   000000DC   01FB               MOVW    R31:R30, R23:R22
   \   000000DE   8320               ST      Z, R18
   \   000000E0   2F0A               MOV     R16, R26
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14D               LDI     R20, 29
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    459              stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
   \   000000FE   ....               LDI     R16, LOW(TCB_USART0)
   \   00000100   ....               LDI     R17, (TCB_USART0) >> 8
   \   00000102   ........           CALL    OS_GetStackSpace
   \   00000106   01C8               MOVW    R25:R24, R17:R16
    460              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   00000108   2F28               MOV     R18, R24
   \   0000010A   2F0A               MOV     R16, R26
   \   0000010C   E010               LDI     R17, 0
   \   0000010E   E14D               LDI     R20, 29
   \   00000110   E050               LDI     R21, 0
   \   00000112   ........           CALL    ?S_EC_MUL_L02
   \   00000116   01F8               MOVW    R31:R30, R17:R16
   \   00000118   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011C   8160               LD      R22, Z
   \   0000011E   8171               LDD     R23, Z+1
   \   00000120   2F0A               MOV     R16, R26
   \   00000122   E010               LDI     R17, 0
   \   00000124   E14D               LDI     R20, 29
   \   00000126   E050               LDI     R21, 0
   \   00000128   ........           CALL    ?S_EC_MUL_L02
   \   0000012C   01F8               MOVW    R31:R30, R17:R16
   \   0000012E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000130   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000132   8102               LDD     R16, Z+2
   \   00000134   8113               LDD     R17, Z+3
   \   00000136   0F60               ADD     R22, R16
   \   00000138   1F71               ADC     R23, R17
   \   0000013A   01FB               MOVW    R31:R30, R23:R22
   \   0000013C   8320               ST      Z, R18
   \   0000013E   2F0A               MOV     R16, R26
   \   00000140   E010               LDI     R17, 0
   \   00000142   E14D               LDI     R20, 29
   \   00000144   E050               LDI     R21, 0
   \   00000146   ........           CALL    ?S_EC_MUL_L02
   \   0000014A   01F8               MOVW    R31:R30, R17:R16
   \   0000014C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000014E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000150   8102               LDD     R16, Z+2
   \   00000152   8113               LDD     R17, Z+3
   \   00000154   5F0F               SUBI    R16, 255
   \   00000156   4F1F               SBCI    R17, 255
   \   00000158   8302               STD     Z+2, R16
   \   0000015A   8313               STD     Z+3, R17
    461              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000015C   018C               MOVW    R17:R16, R25:R24
   \   0000015E   2F01               MOV     R16, R17
   \   00000160   E010               LDI     R17, 0
   \   00000162   2F20               MOV     R18, R16
   \   00000164   2F0A               MOV     R16, R26
   \   00000166   E010               LDI     R17, 0
   \   00000168   E14D               LDI     R20, 29
   \   0000016A   E050               LDI     R21, 0
   \   0000016C   ........           CALL    ?S_EC_MUL_L02
   \   00000170   01F8               MOVW    R31:R30, R17:R16
   \   00000172   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000174   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000176   8160               LD      R22, Z
   \   00000178   8171               LDD     R23, Z+1
   \   0000017A   2F0A               MOV     R16, R26
   \   0000017C   E010               LDI     R17, 0
   \   0000017E   E14D               LDI     R20, 29
   \   00000180   E050               LDI     R21, 0
   \   00000182   ........           CALL    ?S_EC_MUL_L02
   \   00000186   01F8               MOVW    R31:R30, R17:R16
   \   00000188   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000018A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000018C   8102               LDD     R16, Z+2
   \   0000018E   8113               LDD     R17, Z+3
   \   00000190   0F60               ADD     R22, R16
   \   00000192   1F71               ADC     R23, R17
   \   00000194   01FB               MOVW    R31:R30, R23:R22
   \   00000196   8320               ST      Z, R18
   \   00000198   2F0A               MOV     R16, R26
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   E14D               LDI     R20, 29
   \   0000019E   E050               LDI     R21, 0
   \   000001A0   ........           CALL    ?S_EC_MUL_L02
   \   000001A4   01F8               MOVW    R31:R30, R17:R16
   \   000001A6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AA   8102               LDD     R16, Z+2
   \   000001AC   8113               LDD     R17, Z+3
   \   000001AE   5F0F               SUBI    R16, 255
   \   000001B0   4F1F               SBCI    R17, 255
   \   000001B2   8302               STD     Z+2, R16
   \   000001B4   8313               STD     Z+3, R17
    462              stack = OS_GetStackSpace(&TCB_Blink);                            // Blink
   \   000001B6   ....               LDI     R16, LOW(TCB_Blink)
   \   000001B8   ....               LDI     R17, (TCB_Blink) >> 8
   \   000001BA   ........           CALL    OS_GetStackSpace
   \   000001BE   01C8               MOVW    R25:R24, R17:R16
    463              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000001C0   2F28               MOV     R18, R24
   \   000001C2   2F0A               MOV     R16, R26
   \   000001C4   E010               LDI     R17, 0
   \   000001C6   E14D               LDI     R20, 29
   \   000001C8   E050               LDI     R21, 0
   \   000001CA   ........           CALL    ?S_EC_MUL_L02
   \   000001CE   01F8               MOVW    R31:R30, R17:R16
   \   000001D0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001D4   8160               LD      R22, Z
   \   000001D6   8171               LDD     R23, Z+1
   \   000001D8   2F0A               MOV     R16, R26
   \   000001DA   E010               LDI     R17, 0
   \   000001DC   E14D               LDI     R20, 29
   \   000001DE   E050               LDI     R21, 0
   \   000001E0   ........           CALL    ?S_EC_MUL_L02
   \   000001E4   01F8               MOVW    R31:R30, R17:R16
   \   000001E6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001E8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001EA   8102               LDD     R16, Z+2
   \   000001EC   8113               LDD     R17, Z+3
   \   000001EE   0F60               ADD     R22, R16
   \   000001F0   1F71               ADC     R23, R17
   \   000001F2   01FB               MOVW    R31:R30, R23:R22
   \   000001F4   8320               ST      Z, R18
   \   000001F6   2F0A               MOV     R16, R26
   \   000001F8   E010               LDI     R17, 0
   \   000001FA   E14D               LDI     R20, 29
   \   000001FC   E050               LDI     R21, 0
   \   000001FE   ........           CALL    ?S_EC_MUL_L02
   \   00000202   01F8               MOVW    R31:R30, R17:R16
   \   00000204   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000206   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000208   8102               LDD     R16, Z+2
   \   0000020A   8113               LDD     R17, Z+3
   \   0000020C   5F0F               SUBI    R16, 255
   \   0000020E   4F1F               SBCI    R17, 255
   \   00000210   8302               STD     Z+2, R16
   \   00000212   8313               STD     Z+3, R17
    464              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000214   018C               MOVW    R17:R16, R25:R24
   \   00000216   2F01               MOV     R16, R17
   \   00000218   E010               LDI     R17, 0
   \   0000021A   2F20               MOV     R18, R16
   \   0000021C   2F0A               MOV     R16, R26
   \   0000021E   E010               LDI     R17, 0
   \   00000220   E14D               LDI     R20, 29
   \   00000222   E050               LDI     R21, 0
   \   00000224   ........           CALL    ?S_EC_MUL_L02
   \   00000228   01F8               MOVW    R31:R30, R17:R16
   \   0000022A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000022C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000022E   8160               LD      R22, Z
   \   00000230   8171               LDD     R23, Z+1
   \   00000232   2F0A               MOV     R16, R26
   \   00000234   E010               LDI     R17, 0
   \   00000236   E14D               LDI     R20, 29
   \   00000238   E050               LDI     R21, 0
   \   0000023A   ........           CALL    ?S_EC_MUL_L02
   \   0000023E   01F8               MOVW    R31:R30, R17:R16
   \   00000240   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000242   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000244   8102               LDD     R16, Z+2
   \   00000246   8113               LDD     R17, Z+3
   \   00000248   0F60               ADD     R22, R16
   \   0000024A   1F71               ADC     R23, R17
   \   0000024C   01FB               MOVW    R31:R30, R23:R22
   \   0000024E   8320               ST      Z, R18
   \   00000250   2F0A               MOV     R16, R26
   \   00000252   E010               LDI     R17, 0
   \   00000254   E14D               LDI     R20, 29
   \   00000256   E050               LDI     R21, 0
   \   00000258   ........           CALL    ?S_EC_MUL_L02
   \   0000025C   01F8               MOVW    R31:R30, R17:R16
   \   0000025E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000260   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000262   8102               LDD     R16, Z+2
   \   00000264   8113               LDD     R17, Z+3
   \   00000266   5F0F               SUBI    R16, 255
   \   00000268   4F1F               SBCI    R17, 255
   \   0000026A   8302               STD     Z+2, R16
   \   0000026C   8313               STD     Z+3, R17
    465              stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \   0000026E   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   00000270   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   00000272   ........           CALL    OS_GetStackSpace
   \   00000276   01C8               MOVW    R25:R24, R17:R16
    466              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   00000278   2F28               MOV     R18, R24
   \   0000027A   2F0A               MOV     R16, R26
   \   0000027C   E010               LDI     R17, 0
   \   0000027E   E14D               LDI     R20, 29
   \   00000280   E050               LDI     R21, 0
   \   00000282   ........           CALL    ?S_EC_MUL_L02
   \   00000286   01F8               MOVW    R31:R30, R17:R16
   \   00000288   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000028A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000028C   8160               LD      R22, Z
   \   0000028E   8171               LDD     R23, Z+1
   \   00000290   2F0A               MOV     R16, R26
   \   00000292   E010               LDI     R17, 0
   \   00000294   E14D               LDI     R20, 29
   \   00000296   E050               LDI     R21, 0
   \   00000298   ........           CALL    ?S_EC_MUL_L02
   \   0000029C   01F8               MOVW    R31:R30, R17:R16
   \   0000029E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002A0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002A2   8102               LDD     R16, Z+2
   \   000002A4   8113               LDD     R17, Z+3
   \   000002A6   0F60               ADD     R22, R16
   \   000002A8   1F71               ADC     R23, R17
   \   000002AA   01FB               MOVW    R31:R30, R23:R22
   \   000002AC   8320               ST      Z, R18
   \   000002AE   2F0A               MOV     R16, R26
   \   000002B0   E010               LDI     R17, 0
   \   000002B2   E14D               LDI     R20, 29
   \   000002B4   E050               LDI     R21, 0
   \   000002B6   ........           CALL    ?S_EC_MUL_L02
   \   000002BA   01F8               MOVW    R31:R30, R17:R16
   \   000002BC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002BE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002C0   8102               LDD     R16, Z+2
   \   000002C2   8113               LDD     R17, Z+3
   \   000002C4   5F0F               SUBI    R16, 255
   \   000002C6   4F1F               SBCI    R17, 255
   \   000002C8   8302               STD     Z+2, R16
   \   000002CA   8313               STD     Z+3, R17
    467              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   000002CC   018C               MOVW    R17:R16, R25:R24
   \   000002CE   2F01               MOV     R16, R17
   \   000002D0   E010               LDI     R17, 0
   \   000002D2   2F20               MOV     R18, R16
   \   000002D4   2F0A               MOV     R16, R26
   \   000002D6   E010               LDI     R17, 0
   \   000002D8   E14D               LDI     R20, 29
   \   000002DA   E050               LDI     R21, 0
   \   000002DC   ........           CALL    ?S_EC_MUL_L02
   \   000002E0   01F8               MOVW    R31:R30, R17:R16
   \   000002E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002E6   8160               LD      R22, Z
   \   000002E8   8171               LDD     R23, Z+1
   \   000002EA   2F0A               MOV     R16, R26
   \   000002EC   E010               LDI     R17, 0
   \   000002EE   E14D               LDI     R20, 29
   \   000002F0   E050               LDI     R21, 0
   \   000002F2   ........           CALL    ?S_EC_MUL_L02
   \   000002F6   01F8               MOVW    R31:R30, R17:R16
   \   000002F8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002FA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002FC   8102               LDD     R16, Z+2
   \   000002FE   8113               LDD     R17, Z+3
   \   00000300   0F60               ADD     R22, R16
   \   00000302   1F71               ADC     R23, R17
   \   00000304   01FB               MOVW    R31:R30, R23:R22
   \   00000306   8320               ST      Z, R18
   \   00000308   2F0A               MOV     R16, R26
   \   0000030A   E010               LDI     R17, 0
   \   0000030C   E14D               LDI     R20, 29
   \   0000030E   E050               LDI     R21, 0
   \   00000310   ........           CALL    ?S_EC_MUL_L02
   \   00000314   01F8               MOVW    R31:R30, R17:R16
   \   00000316   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000318   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000031A   8102               LDD     R16, Z+2
   \   0000031C   8113               LDD     R17, Z+3
   \   0000031E   5F0F               SUBI    R16, 255
   \   00000320   4F1F               SBCI    R17, 255
   \   00000322   8302               STD     Z+2, R16
   \   00000324   8313               STD     Z+3, R17
    468              stack = OS_GetStackSpace(&TCB_Info);                              // Info
   \   00000326   ....               LDI     R16, LOW(TCB_Info)
   \   00000328   ....               LDI     R17, (TCB_Info) >> 8
   \   0000032A   ........           CALL    OS_GetStackSpace
   \   0000032E   01C8               MOVW    R25:R24, R17:R16
    469              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   00000330   2F28               MOV     R18, R24
   \   00000332   2F0A               MOV     R16, R26
   \   00000334   E010               LDI     R17, 0
   \   00000336   E14D               LDI     R20, 29
   \   00000338   E050               LDI     R21, 0
   \   0000033A   ........           CALL    ?S_EC_MUL_L02
   \   0000033E   01F8               MOVW    R31:R30, R17:R16
   \   00000340   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000342   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000344   8160               LD      R22, Z
   \   00000346   8171               LDD     R23, Z+1
   \   00000348   2F0A               MOV     R16, R26
   \   0000034A   E010               LDI     R17, 0
   \   0000034C   E14D               LDI     R20, 29
   \   0000034E   E050               LDI     R21, 0
   \   00000350   ........           CALL    ?S_EC_MUL_L02
   \   00000354   01F8               MOVW    R31:R30, R17:R16
   \   00000356   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000358   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000035A   8102               LDD     R16, Z+2
   \   0000035C   8113               LDD     R17, Z+3
   \   0000035E   0F60               ADD     R22, R16
   \   00000360   1F71               ADC     R23, R17
   \   00000362   01FB               MOVW    R31:R30, R23:R22
   \   00000364   8320               ST      Z, R18
   \   00000366   2F0A               MOV     R16, R26
   \   00000368   E010               LDI     R17, 0
   \   0000036A   E14D               LDI     R20, 29
   \   0000036C   E050               LDI     R21, 0
   \   0000036E   ........           CALL    ?S_EC_MUL_L02
   \   00000372   01F8               MOVW    R31:R30, R17:R16
   \   00000374   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000376   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000378   8102               LDD     R16, Z+2
   \   0000037A   8113               LDD     R17, Z+3
   \   0000037C   5F0F               SUBI    R16, 255
   \   0000037E   4F1F               SBCI    R17, 255
   \   00000380   8302               STD     Z+2, R16
   \   00000382   8313               STD     Z+3, R17
    470              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000384   018C               MOVW    R17:R16, R25:R24
   \   00000386   2F01               MOV     R16, R17
   \   00000388   E010               LDI     R17, 0
   \   0000038A   2F20               MOV     R18, R16
   \   0000038C   2F0A               MOV     R16, R26
   \   0000038E   E010               LDI     R17, 0
   \   00000390   E14D               LDI     R20, 29
   \   00000392   E050               LDI     R21, 0
   \   00000394   ........           CALL    ?S_EC_MUL_L02
   \   00000398   01F8               MOVW    R31:R30, R17:R16
   \   0000039A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000039C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000039E   8160               LD      R22, Z
   \   000003A0   8171               LDD     R23, Z+1
   \   000003A2   2F0A               MOV     R16, R26
   \   000003A4   E010               LDI     R17, 0
   \   000003A6   E14D               LDI     R20, 29
   \   000003A8   E050               LDI     R21, 0
   \   000003AA   ........           CALL    ?S_EC_MUL_L02
   \   000003AE   01F8               MOVW    R31:R30, R17:R16
   \   000003B0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003B2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003B4   8102               LDD     R16, Z+2
   \   000003B6   8113               LDD     R17, Z+3
   \   000003B8   0F60               ADD     R22, R16
   \   000003BA   1F71               ADC     R23, R17
   \   000003BC   01FB               MOVW    R31:R30, R23:R22
   \   000003BE   8320               ST      Z, R18
   \   000003C0   2F0A               MOV     R16, R26
   \   000003C2   E010               LDI     R17, 0
   \   000003C4   E14D               LDI     R20, 29
   \   000003C6   E050               LDI     R21, 0
   \   000003C8   ........           CALL    ?S_EC_MUL_L02
   \   000003CC   01F8               MOVW    R31:R30, R17:R16
   \   000003CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003D2   8102               LDD     R16, Z+2
   \   000003D4   8113               LDD     R17, Z+3
   \   000003D6   5F0F               SUBI    R16, 255
   \   000003D8   4F1F               SBCI    R17, 255
   \   000003DA   8302               STD     Z+2, R16
   \   000003DC   8313               STD     Z+3, R17
    471              stack = OS_GetStackSpace(&TCB_DispCtl);                            // Diaplay
   \   000003DE   ....               LDI     R16, LOW(TCB_DispCtl)
   \   000003E0   ....               LDI     R17, (TCB_DispCtl) >> 8
   \   000003E2   ........           CALL    OS_GetStackSpace
   \   000003E6   01C8               MOVW    R25:R24, R17:R16
    472              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000003E8   2F28               MOV     R18, R24
   \   000003EA   2F0A               MOV     R16, R26
   \   000003EC   E010               LDI     R17, 0
   \   000003EE   E14D               LDI     R20, 29
   \   000003F0   E050               LDI     R21, 0
   \   000003F2   ........           CALL    ?S_EC_MUL_L02
   \   000003F6   01F8               MOVW    R31:R30, R17:R16
   \   000003F8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000003FA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000003FC   8160               LD      R22, Z
   \   000003FE   8171               LDD     R23, Z+1
   \   00000400   2F0A               MOV     R16, R26
   \   00000402   E010               LDI     R17, 0
   \   00000404   E14D               LDI     R20, 29
   \   00000406   E050               LDI     R21, 0
   \   00000408   ........           CALL    ?S_EC_MUL_L02
   \   0000040C   01F8               MOVW    R31:R30, R17:R16
   \   0000040E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000410   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000412   8102               LDD     R16, Z+2
   \   00000414   8113               LDD     R17, Z+3
   \   00000416   0F60               ADD     R22, R16
   \   00000418   1F71               ADC     R23, R17
   \   0000041A   01FB               MOVW    R31:R30, R23:R22
   \   0000041C   8320               ST      Z, R18
   \   0000041E   2F0A               MOV     R16, R26
   \   00000420   E010               LDI     R17, 0
   \   00000422   E14D               LDI     R20, 29
   \   00000424   E050               LDI     R21, 0
   \   00000426   ........           CALL    ?S_EC_MUL_L02
   \   0000042A   01F8               MOVW    R31:R30, R17:R16
   \   0000042C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000042E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000430   8102               LDD     R16, Z+2
   \   00000432   8113               LDD     R17, Z+3
   \   00000434   5F0F               SUBI    R16, 255
   \   00000436   4F1F               SBCI    R17, 255
   \   00000438   8302               STD     Z+2, R16
   \   0000043A   8313               STD     Z+3, R17
    473              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000043C   018C               MOVW    R17:R16, R25:R24
   \   0000043E   2F01               MOV     R16, R17
   \   00000440   E010               LDI     R17, 0
   \   00000442   2F20               MOV     R18, R16
   \   00000444   2F0A               MOV     R16, R26
   \   00000446   E010               LDI     R17, 0
   \   00000448   E14D               LDI     R20, 29
   \   0000044A   E050               LDI     R21, 0
   \   0000044C   ........           CALL    ?S_EC_MUL_L02
   \   00000450   01F8               MOVW    R31:R30, R17:R16
   \   00000452   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000454   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000456   8160               LD      R22, Z
   \   00000458   8171               LDD     R23, Z+1
   \   0000045A   2F0A               MOV     R16, R26
   \   0000045C   E010               LDI     R17, 0
   \   0000045E   E14D               LDI     R20, 29
   \   00000460   E050               LDI     R21, 0
   \   00000462   ........           CALL    ?S_EC_MUL_L02
   \   00000466   01F8               MOVW    R31:R30, R17:R16
   \   00000468   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000046A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000046C   8102               LDD     R16, Z+2
   \   0000046E   8113               LDD     R17, Z+3
   \   00000470   0F60               ADD     R22, R16
   \   00000472   1F71               ADC     R23, R17
   \   00000474   01FB               MOVW    R31:R30, R23:R22
   \   00000476   8320               ST      Z, R18
   \   00000478   2F0A               MOV     R16, R26
   \   0000047A   E010               LDI     R17, 0
   \   0000047C   E14D               LDI     R20, 29
   \   0000047E   E050               LDI     R21, 0
   \   00000480   ........           CALL    ?S_EC_MUL_L02
   \   00000484   01F8               MOVW    R31:R30, R17:R16
   \   00000486   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000488   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000048A   8102               LDD     R16, Z+2
   \   0000048C   8113               LDD     R17, Z+3
   \   0000048E   5F0F               SUBI    R16, 255
   \   00000490   4F1F               SBCI    R17, 255
   \   00000492   8302               STD     Z+2, R16
   \   00000494   8313               STD     Z+3, R17
    474          
    475             UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
   \   00000496   2F0A               MOV     R16, R26
   \   00000498   E010               LDI     R17, 0
   \   0000049A   E14D               LDI     R20, 29
   \   0000049C   E050               LDI     R21, 0
   \   0000049E   ........           CALL    ?S_EC_MUL_L02
   \   000004A2   01F8               MOVW    R31:R30, R17:R16
   \   000004A4   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004A6   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004A8   8122               LDD     R18, Z+2
   \   000004AA   8133               LDD     R19, Z+3
   \   000004AC   1924               SUB     R18, R4
   \   000004AE   952A               DEC     R18
   \   000004B0   2F0A               MOV     R16, R26
   \   000004B2   E010               LDI     R17, 0
   \   000004B4   E14D               LDI     R20, 29
   \   000004B6   E050               LDI     R21, 0
   \   000004B8   ........           CALL    ?S_EC_MUL_L02
   \   000004BC   01F8               MOVW    R31:R30, R17:R16
   \   000004BE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000004C0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000004C2   8100               LD      R16, Z
   \   000004C4   8111               LDD     R17, Z+1
   \   000004C6   2455               CLR     R5
   \   000004C8   0D04               ADD     R16, R4
   \   000004CA   1D15               ADC     R17, R5
   \   000004CC   01F8               MOVW    R31:R30, R17:R16
   \   000004CE   8320               ST      Z, R18
    476          }
   \   000004D0   E0E8               LDI     R30, 8
   \   000004D2   ........           JMP     ?EPILOGUE_B8_L09
    477          
    478          /*************************************************************************
    479          *
    480          * Build datablock for ??
    481          *
    482          *************************************************************************/
    483          /*void Build??(char ch){
    484          
    485              short ntna ;
    486              UART[ch].RxSendReply = true ;                               // flag for answering 
    487          
    488              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ??;     
    489              ntna = UART[ch].TxFirst++ ;                                    // remember index 
    490          
    491              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ?? ;               // restart flag
    492          
    493              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 1) ;      // length of data block lb
    494          
    495          }*/
    496          
    497          
    498          //////////////////////////////////////////////////////////////////////////////
    499          // Receiving data to IO module here
    500          /////////////////////////////////////////////////////////////////////////////
    501          /*************************************************************************
    502          *
    503          * Receive data for tPC196 displays
    504          *
    505          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    506          void RecXText(char ch, short pointer){
   \                     RecXText:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    507          	char i, disno;
    508          	disno = UART[ch].pRxBuffer[pointer] ;					        // display no 0 high (green), 1 low yellow)
   \   00000008   2D04               MOV     R16, R4
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14D               LDI     R20, 29
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8504               LDD     R16, Z+12
   \   0000001C   8515               LDD     R17, Z+13
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   2FA0               MOV     R26, R16
    509          	if (disno < NO_OF_XDISP) {
   \   00000028   30A5               CPI     R26, 5
   \   0000002A   F008               BRCS    $+2+2
   \   0000002C   C068               RJMP    ??RecXText_0
    510          		Disp.x_data[disno][0] = (UART[ch].pRxBuffer[pointer-2] - 2);	// no of char
   \   0000002E   2D04               MOV     R16, R4
   \   00000030   E010               LDI     R17, 0
   \   00000032   E14D               LDI     R20, 29
   \   00000034   E050               LDI     R21, 0
   \   00000036   ........           CALL    ?S_EC_MUL_L02
   \   0000003A   01F8               MOVW    R31:R30, R17:R16
   \   0000003C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000040   8504               LDD     R16, Z+12
   \   00000042   8515               LDD     R17, Z+13
   \   00000044   0F08               ADD     R16, R24
   \   00000046   1F19               ADC     R17, R25
   \   00000048   5002               SUBI    R16, 2
   \   0000004A   4010               SBCI    R17, 0
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   8120               LD      R18, Z
   \   00000050   5022               SUBI    R18, 2
   \   00000052   2F0A               MOV     R16, R26
   \   00000054   E010               LDI     R17, 0
   \   00000056   E046               LDI     R20, 6
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(Disp + 1500) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(Disp + 1500) & 0xFFFF))
   \   00000064   8320               ST      Z, R18
    511          		if (Disp.x_data[disno][0] > NO_OF_XCH) {
   \   00000066   2F0A               MOV     R16, R26
   \   00000068   E010               LDI     R17, 0
   \   0000006A   E046               LDI     R20, 6
   \   0000006C   E050               LDI     R21, 0
   \   0000006E   ........           CALL    ?S_EC_MUL_L02
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   ....               SUBI    R30, LOW((-(Disp + 1500) & 0xFFFF))
   \   00000076   ....               SBCI    R31, HIGH((-(Disp + 1500) & 0xFFFF))
   \   00000078   8100               LD      R16, Z
   \   0000007A   3006               CPI     R16, 6
   \   0000007C   F058               BRCS    ??RecXText_1
    512          			Disp.x_data[disno][0] = NO_OF_XCH ;
   \   0000007E   E025               LDI     R18, 5
   \   00000080   2F0A               MOV     R16, R26
   \   00000082   E010               LDI     R17, 0
   \   00000084   E046               LDI     R20, 6
   \   00000086   E050               LDI     R21, 0
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   ....               SUBI    R30, LOW((-(Disp + 1500) & 0xFFFF))
   \   00000090   ....               SBCI    R31, HIGH((-(Disp + 1500) & 0xFFFF))
   \   00000092   8320               ST      Z, R18
    513          		}
    514          		for (i = 1; i <= Disp.x_data[disno][0]; i++) {
   \                     ??RecXText_1:
   \   00000094   E0B1               LDI     R27, 1
   \                     ??RecXText_2:
   \   00000096   2F0A               MOV     R16, R26
   \   00000098   E010               LDI     R17, 0
   \   0000009A   E046               LDI     R20, 6
   \   0000009C   E050               LDI     R21, 0
   \   0000009E   ........           CALL    ?S_EC_MUL_L02
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   ....               SUBI    R30, LOW((-(Disp + 1500) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, HIGH((-(Disp + 1500) & 0xFFFF))
   \   000000A8   8100               LD      R16, Z
   \   000000AA   170B               CP      R16, R27
   \   000000AC   F128               BRCS    ??RecXText_3
    515          			Disp.x_data[disno][i] = UART[ch].pRxBuffer[pointer+i] ;		// store
   \   000000AE   2D04               MOV     R16, R4
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   E14D               LDI     R20, 29
   \   000000B4   E050               LDI     R21, 0
   \   000000B6   ........           CALL    ?S_EC_MUL_L02
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000C0   8504               LDD     R16, Z+12
   \   000000C2   8515               LDD     R17, Z+13
   \   000000C4   2F4B               MOV     R20, R27
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   019C               MOVW    R19:R18, R25:R24
   \   000000CA   0F24               ADD     R18, R20
   \   000000CC   1F35               ADC     R19, R21
   \   000000CE   0F02               ADD     R16, R18
   \   000000D0   1F13               ADC     R17, R19
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   8120               LD      R18, Z
   \   000000D6   ....               LDI     R30, LOW((Disp + 1500))
   \   000000D8   ....               LDI     R31, HIGH((Disp + 1500))
   \   000000DA   2F0B               MOV     R16, R27
   \   000000DC   E010               LDI     R17, 0
   \   000000DE   0FE0               ADD     R30, R16
   \   000000E0   1FF1               ADC     R31, R17
   \   000000E2   2F0A               MOV     R16, R26
   \   000000E4   E010               LDI     R17, 0
   \   000000E6   E046               LDI     R20, 6
   \   000000E8   E050               LDI     R21, 0
   \   000000EA   ........           CALL    ?S_EC_MUL_L02
   \   000000EE   0FE0               ADD     R30, R16
   \   000000F0   1FF1               ADC     R31, R17
   \   000000F2   8320               ST      Z, R18
    516          		}
   \   000000F4   95B3               INC     R27
   \   000000F6   CFCF               RJMP    ??RecXText_2
    517          		printXDi(disno) ;        
   \                     ??RecXText_3:
   \   000000F8   2F0A               MOV     R16, R26
   \   000000FA   ........           CALL    printXDi
    518          	}
    519          }
   \                     ??RecXText_0:
   \   000000FE   E0E5               LDI     R30, 5
   \   00000100   ........           JMP     ?EPILOGUE_B5_L09
    520          
    521          
    522          /*************************************************************************
    523          *
    524          * Receive data for low display
    525          *
    526          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    527          void RecLowText(char ch, short pointer){
   \                     RecLowText:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    528          	char i, set;
    529          
    530          	set = UART[ch].pRxBuffer[pointer] ;					// value set
   \   00000008   2D04               MOV     R16, R4
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14D               LDI     R20, 29
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8504               LDD     R16, Z+12
   \   0000001C   8515               LDD     R17, Z+13
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   2FA0               MOV     R26, R16
    531          	if (set < NO_OF_VT) {
   \   00000028   36A4               CPI     R26, 100
   \   0000002A   F008               BRCS    $+2+2
   \   0000002C   C07A               RJMP    ??RecLowText_0
    532          		Disp.window_enable[set] = true ;			// mark as legal for display
   \   0000002E   E021               LDI     R18, 1
   \   00000030   2F0A               MOV     R16, R26
   \   00000032   E010               LDI     R17, 0
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   00000038   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   0000003A   8320               ST      Z, R18
    533          	//	Disp.vt_status |= (0x01 << set) ;			// mark as legal for display
    534          		Disp.lo_data[set][0] = (UART[ch].pRxBuffer[pointer-2] - 2);	// no of char
   \   0000003C   2D04               MOV     R16, R4
   \   0000003E   E010               LDI     R17, 0
   \   00000040   E14D               LDI     R20, 29
   \   00000042   E050               LDI     R21, 0
   \   00000044   ........           CALL    ?S_EC_MUL_L02
   \   00000048   01F8               MOVW    R31:R30, R17:R16
   \   0000004A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004E   8504               LDD     R16, Z+12
   \   00000050   8515               LDD     R17, Z+13
   \   00000052   0F08               ADD     R16, R24
   \   00000054   1F19               ADC     R17, R25
   \   00000056   5002               SUBI    R16, 2
   \   00000058   4010               SBCI    R17, 0
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   8120               LD      R18, Z
   \   0000005E   5022               SUBI    R18, 2
   \   00000060   2F0A               MOV     R16, R26
   \   00000062   E010               LDI     R17, 0
   \   00000064   E048               LDI     R20, 8
   \   00000066   E050               LDI     R21, 0
   \   00000068   ........           CALL    ?S_EC_MUL_L02
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(Disp + 200) & 0xFFFF))
   \   00000070   ....               SBCI    R31, HIGH((-(Disp + 200) & 0xFFFF))
   \   00000072   8320               ST      Z, R18
    535          		if (Disp.lo_data[set][0] > NO_OF_LOCH) {
   \   00000074   2F0A               MOV     R16, R26
   \   00000076   E010               LDI     R17, 0
   \   00000078   E048               LDI     R20, 8
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(Disp + 200) & 0xFFFF))
   \   00000084   ....               SBCI    R31, HIGH((-(Disp + 200) & 0xFFFF))
   \   00000086   8100               LD      R16, Z
   \   00000088   3008               CPI     R16, 8
   \   0000008A   F058               BRCS    ??RecLowText_1
    536          			Disp.lo_data[set][0] = NO_OF_LOCH ;
   \   0000008C   E027               LDI     R18, 7
   \   0000008E   2F0A               MOV     R16, R26
   \   00000090   E010               LDI     R17, 0
   \   00000092   E048               LDI     R20, 8
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(Disp + 200) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, HIGH((-(Disp + 200) & 0xFFFF))
   \   000000A0   8320               ST      Z, R18
    537          		}
    538          		for (i = 1; i <= Disp.lo_data[set][0]; i++) {
   \                     ??RecLowText_1:
   \   000000A2   E0B1               LDI     R27, 1
   \                     ??RecLowText_2:
   \   000000A4   2F0A               MOV     R16, R26
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   E048               LDI     R20, 8
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   ........           CALL    ?S_EC_MUL_L02
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(Disp + 200) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(Disp + 200) & 0xFFFF))
   \   000000B6   8100               LD      R16, Z
   \   000000B8   170B               CP      R16, R27
   \   000000BA   F128               BRCS    ??RecLowText_3
    539          			Disp.lo_data[set][i] = UART[ch].pRxBuffer[pointer+i] ;		// store
   \   000000BC   2D04               MOV     R16, R4
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   E14D               LDI     R20, 29
   \   000000C2   E050               LDI     R21, 0
   \   000000C4   ........           CALL    ?S_EC_MUL_L02
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000CE   8504               LDD     R16, Z+12
   \   000000D0   8515               LDD     R17, Z+13
   \   000000D2   2F4B               MOV     R20, R27
   \   000000D4   E050               LDI     R21, 0
   \   000000D6   019C               MOVW    R19:R18, R25:R24
   \   000000D8   0F24               ADD     R18, R20
   \   000000DA   1F35               ADC     R19, R21
   \   000000DC   0F02               ADD     R16, R18
   \   000000DE   1F13               ADC     R17, R19
   \   000000E0   01F8               MOVW    R31:R30, R17:R16
   \   000000E2   8120               LD      R18, Z
   \   000000E4   ....               LDI     R30, LOW((Disp + 200))
   \   000000E6   ....               LDI     R31, HIGH((Disp + 200))
   \   000000E8   2F0B               MOV     R16, R27
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   0FE0               ADD     R30, R16
   \   000000EE   1FF1               ADC     R31, R17
   \   000000F0   2F0A               MOV     R16, R26
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   E048               LDI     R20, 8
   \   000000F6   E050               LDI     R21, 0
   \   000000F8   ........           CALL    ?S_EC_MUL_L02
   \   000000FC   0FE0               ADD     R30, R16
   \   000000FE   1FF1               ADC     R31, R17
   \   00000100   8320               ST      Z, R18
    540          		}
   \   00000102   95B3               INC     R27
   \   00000104   CFCF               RJMP    ??RecLowText_2
    541          
    542          		if (Disp.lo_grdata[20] == set) {
   \                     ??RecLowText_3:
   \   00000106   9100....           LDS     R16, (Disp + 1750)
   \   0000010A   170A               CP      R16, R26
   \   0000010C   F419               BRNE    ??RecLowText_4
    543          			Disp.lo_grdata[20] = ALARM_VT ;			// do not show graph data any more
   \   0000010E   E000               LDI     R16, 0
   \   00000110   9300....           STS     (Disp + 1750), R16
    544          		}
    545          		if (Disp.disp_vt == set) { // New data to display
   \                     ??RecLowText_4:
   \   00000114   9100....           LDS     R16, (Disp + 1752)
   \   00000118   170A               CP      R16, R26
   \   0000011A   F419               BRNE    ??RecLowText_0
    546          			printLoDi(set) ;        
   \   0000011C   2F0A               MOV     R16, R26
   \   0000011E   ........           CALL    printLoDi
    547          		}
    548          	}
    549          }
   \                     ??RecLowText_0:
   \   00000122   E0E5               LDI     R30, 5
   \   00000124   ........           JMP     ?EPILOGUE_B5_L09
    550          
    551          
    552          /*************************************************************************
    553          *
    554          * Receive data for High display
    555          *
    556          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    557          void RecHighText(char ch, short pointer){
   \                     RecHighText:
   \   00000000   939A               ST      -Y, R25
   \   00000002   2E38               MOV     R3, R24
   \   00000004   2F70               MOV     R23, R16
    558          	char i, set;
    559          
    560          	set = UART[ch].pRxBuffer[pointer] ;					        // value set
   \   00000006   2F07               MOV     R16, R23
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14D               LDI     R20, 29
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   8504               LDD     R16, Z+12
   \   0000001A   8515               LDD     R17, Z+13
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   8100               LD      R16, Z
   \   00000024   2F60               MOV     R22, R16
    561          	if (set < NO_OF_VT) {
   \   00000026   3664               CPI     R22, 100
   \   00000028   F008               BRCS    $+2+2
   \   0000002A   C06A               RJMP    ??RecHighText_0
    562          		Disp.window_enable[set] = true ;			// mark as legal for display
   \   0000002C   E041               LDI     R20, 1
   \   0000002E   2F06               MOV     R16, R22
   \   00000030   E010               LDI     R17, 0
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   00000036   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   00000038   8340               ST      Z, R20
    563          //		Disp.vt_status |= (0x01 << set) ;		            // mark as legal for display
    564          		Disp.hi_data[set][0] = (UART[ch].pRxBuffer[pointer-2] - 2); 	// no of char
   \   0000003A   2F07               MOV     R16, R23
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   E14D               LDI     R20, 29
   \   00000040   E050               LDI     R21, 0
   \   00000042   ........           CALL    ?S_EC_MUL_L02
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004C   8504               LDD     R16, Z+12
   \   0000004E   8515               LDD     R17, Z+13
   \   00000050   0F02               ADD     R16, R18
   \   00000052   1F13               ADC     R17, R19
   \   00000054   5002               SUBI    R16, 2
   \   00000056   4010               SBCI    R17, 0
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   8190               LD      R25, Z
   \   0000005C   5092               SUBI    R25, 2
   \   0000005E   2F06               MOV     R16, R22
   \   00000060   E010               LDI     R17, 0
   \   00000062   E045               LDI     R20, 5
   \   00000064   E050               LDI     R21, 0
   \   00000066   ........           CALL    ?S_EC_MUL_L02
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(Disp + 1000) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, HIGH((-(Disp + 1000) & 0xFFFF))
   \   00000070   8390               ST      Z, R25
    565          		if (Disp.hi_data[set][0] > NO_OF_HICH) {
   \   00000072   2F06               MOV     R16, R22
   \   00000074   E010               LDI     R17, 0
   \   00000076   E045               LDI     R20, 5
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(Disp + 1000) & 0xFFFF))
   \   00000082   ....               SBCI    R31, HIGH((-(Disp + 1000) & 0xFFFF))
   \   00000084   8100               LD      R16, Z
   \   00000086   3005               CPI     R16, 5
   \   00000088   F058               BRCS    ??RecHighText_1
    566          			Disp.hi_data[set][0] = NO_OF_HICH ;
   \   0000008A   E094               LDI     R25, 4
   \   0000008C   2F06               MOV     R16, R22
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E045               LDI     R20, 5
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(Disp + 1000) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, HIGH((-(Disp + 1000) & 0xFFFF))
   \   0000009E   8390               ST      Z, R25
    567          		}
    568          		for (i = 0; i < Disp.hi_data[set][0]; i++) {
   \                     ??RecHighText_1:
   \   000000A0   E080               LDI     R24, 0
   \                     ??RecHighText_2:
   \   000000A2   2F06               MOV     R16, R22
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   E045               LDI     R20, 5
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   ........           CALL    ?S_EC_MUL_L02
   \   000000AE   01F8               MOVW    R31:R30, R17:R16
   \   000000B0   ....               SUBI    R30, LOW((-(Disp + 1000) & 0xFFFF))
   \   000000B2   ....               SBCI    R31, HIGH((-(Disp + 1000) & 0xFFFF))
   \   000000B4   8100               LD      R16, Z
   \   000000B6   1780               CP      R24, R16
   \   000000B8   F518               BRCC    ??RecHighText_0
    569          			Disp.hi_data[set][i+1] = UART[ch].pRxBuffer[pointer+i+1] ; 	// store
   \   000000BA   2F07               MOV     R16, R23
   \   000000BC   E010               LDI     R17, 0
   \   000000BE   E14D               LDI     R20, 29
   \   000000C0   E050               LDI     R21, 0
   \   000000C2   ........           CALL    ?S_EC_MUL_L02
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000CC   8504               LDD     R16, Z+12
   \   000000CE   8515               LDD     R17, Z+13
   \   000000D0   E090               LDI     R25, 0
   \   000000D2   01A9               MOVW    R21:R20, R19:R18
   \   000000D4   0F48               ADD     R20, R24
   \   000000D6   1F59               ADC     R21, R25
   \   000000D8   0F04               ADD     R16, R20
   \   000000DA   1F15               ADC     R17, R21
   \   000000DC   01F8               MOVW    R31:R30, R17:R16
   \   000000DE   8021               LDD     R2, Z+1
   \   000000E0   ....               LDI     R30, LOW((Disp + 1001))
   \   000000E2   ....               LDI     R31, HIGH((Disp + 1001))
   \   000000E4   E090               LDI     R25, 0
   \   000000E6   0FE8               ADD     R30, R24
   \   000000E8   1FF9               ADC     R31, R25
   \   000000EA   2F06               MOV     R16, R22
   \   000000EC   E010               LDI     R17, 0
   \   000000EE   E045               LDI     R20, 5
   \   000000F0   E050               LDI     R21, 0
   \   000000F2   ........           CALL    ?S_EC_MUL_L02
   \   000000F6   0FE0               ADD     R30, R16
   \   000000F8   1FF1               ADC     R31, R17
   \   000000FA   8220               ST      Z, R2
    570          		}
   \   000000FC   9583               INC     R24
   \   000000FE   CFD1               RJMP    ??RecHighText_2
    571          
    572          		if (Disp.disp_vt == set) {                           // New data to display
    573          		//AStmark not defined 	Write2416Data(set) ;        
    574          		}
    575          	}
    576          }
   \                     ??RecHighText_0:
   \   00000100   2D83               MOV     R24, R3
   \   00000102   9199               LD      R25, Y+
   \   00000104   9508               RET
    577          
    578          /*************************************************************************
    579          *
    580          * Receive data for pri. bar graph         
    581          *
    582          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    583          void RecPriBarVal(char ch, short pointer){
   \                     RecPriBarVal:
   \   00000000   2E20               MOV     R2, R16
   \   00000002   01B9               MOVW    R23:R22, R19:R18
    584          	char set;
    585          
    586          	set = UART[ch].pRxBuffer[pointer] ;					// value set
   \   00000004   2D02               MOV     R16, R2
   \   00000006   E010               LDI     R17, 0
   \   00000008   E14D               LDI     R20, 29
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   ........           CALL    ?S_EC_MUL_L02
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000016   8504               LDD     R16, Z+12
   \   00000018   8515               LDD     R17, Z+13
   \   0000001A   0F06               ADD     R16, R22
   \   0000001C   1F17               ADC     R17, R23
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   8100               LD      R16, Z
   \   00000022   2F20               MOV     R18, R16
    587          	if (set < NO_OF_VT) {
   \   00000024   3624               CPI     R18, 100
   \   00000026   F538               BRCC    ??RecPriBarVal_0
    588          		Disp.window_enable[set] = true ;			// mark as legal for display
   \   00000028   E001               LDI     R16, 1
   \   0000002A   E030               LDI     R19, 0
   \   0000002C   01F9               MOVW    R31:R30, R19:R18
   \   0000002E   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   00000032   8300               ST      Z, R16
    589          //		Disp.vt_status |= (0x01 << set) ;			// mark as legal for display
    590          		Disp.ba_pdata[set] = UART[ch].pRxBuffer[pointer+1] ;
   \   00000034   2D02               MOV     R16, R2
   \   00000036   E010               LDI     R17, 0
   \   00000038   E14D               LDI     R20, 29
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   ........           CALL    ?S_EC_MUL_L02
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000046   8504               LDD     R16, Z+12
   \   00000048   8515               LDD     R17, Z+13
   \   0000004A   0F06               ADD     R16, R22
   \   0000004C   1F17               ADC     R17, R23
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   8101               LDD     R16, Z+1
   \   00000052   E030               LDI     R19, 0
   \   00000054   01F9               MOVW    R31:R30, R19:R18
   \   00000056   ....               SUBI    R30, LOW((-(Disp + 1530) & 0xFFFF))
   \   00000058   ....               SBCI    R31, HIGH((-(Disp + 1530) & 0xFFFF))
   \   0000005A   8300               ST      Z, R16
    591          		if (Disp.ba_pdata[set] > 100) {
   \   0000005C   E030               LDI     R19, 0
   \   0000005E   01F9               MOVW    R31:R30, R19:R18
   \   00000060   ....               SUBI    R30, LOW((-(Disp + 1530) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(Disp + 1530) & 0xFFFF))
   \   00000064   8100               LD      R16, Z
   \   00000066   3605               CPI     R16, 101
   \   00000068   F030               BRCS    ??RecPriBarVal_0
    592          			Disp.ba_pdata[set] = 100 ;
   \   0000006A   E604               LDI     R16, 100
   \   0000006C   E030               LDI     R19, 0
   \   0000006E   01F9               MOVW    R31:R30, R19:R18
   \   00000070   ....               SUBI    R30, LOW((-(Disp + 1530) & 0xFFFF))
   \   00000072   ....               SBCI    R31, HIGH((-(Disp + 1530) & 0xFFFF))
   \   00000074   8300               ST      Z, R16
    593          		}
    594          		if (Disp.disp_vt == set) { // New data to display
    595          			// AStmark not defined yet  printBar(set) ;
    596          		}
    597          	}
    598          }
   \                     ??RecPriBarVal_0:
   \   00000076   9508               RET
    599          /*************************************************************************
    600          *
    601          * Receive data for bar sec. graph         
    602          *
    603          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    604          void RecSecBarVal(char ch, short pointer){
   \                     RecSecBarVal:
   \   00000000   2E20               MOV     R2, R16
   \   00000002   01B9               MOVW    R23:R22, R19:R18
    605          	char set;
    606          
    607          	Disp.bar_status |= SECBARUSED ;					  // data to second bar
   \   00000004   ....               LDI     R30, LOW((Disp + 1754))
   \   00000006   ....               LDI     R31, HIGH((Disp + 1754))
   \   00000008   8100               LD      R16, Z
   \   0000000A   6100               ORI     R16, 0x10
   \   0000000C   8300               ST      Z, R16
    608          	set = UART[ch].pRxBuffer[pointer] ;					// value set
   \   0000000E   2D02               MOV     R16, R2
   \   00000010   E010               LDI     R17, 0
   \   00000012   E14D               LDI     R20, 29
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000020   8504               LDD     R16, Z+12
   \   00000022   8515               LDD     R17, Z+13
   \   00000024   0F06               ADD     R16, R22
   \   00000026   1F17               ADC     R17, R23
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   8100               LD      R16, Z
   \   0000002C   2F20               MOV     R18, R16
    609          	if (set < NO_OF_VT) {
   \   0000002E   3624               CPI     R18, 100
   \   00000030   F538               BRCC    ??RecSecBarVal_0
    610          		Disp.window_enable[set] = true ;			// mark as legal for display
   \   00000032   E001               LDI     R16, 1
   \   00000034   E030               LDI     R19, 0
   \   00000036   01F9               MOVW    R31:R30, R19:R18
   \   00000038   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   0000003C   8300               ST      Z, R16
    611          //		Disp.vt_status |= (0x01 << set) ;			// mark as legal for display
    612          		Disp.ba_sdata[set] = UART[ch].pRxBuffer[pointer+1] ;
   \   0000003E   2D02               MOV     R16, R2
   \   00000040   E010               LDI     R17, 0
   \   00000042   E14D               LDI     R20, 29
   \   00000044   E050               LDI     R21, 0
   \   00000046   ........           CALL    ?S_EC_MUL_L02
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000050   8504               LDD     R16, Z+12
   \   00000052   8515               LDD     R17, Z+13
   \   00000054   0F06               ADD     R16, R22
   \   00000056   1F17               ADC     R17, R23
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   8101               LDD     R16, Z+1
   \   0000005C   E030               LDI     R19, 0
   \   0000005E   01F9               MOVW    R31:R30, R19:R18
   \   00000060   ....               SUBI    R30, LOW((-(Disp + 1630) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(Disp + 1630) & 0xFFFF))
   \   00000064   8300               ST      Z, R16
    613          		if (Disp.ba_sdata[set] > 100) {
   \   00000066   E030               LDI     R19, 0
   \   00000068   01F9               MOVW    R31:R30, R19:R18
   \   0000006A   ....               SUBI    R30, LOW((-(Disp + 1630) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, HIGH((-(Disp + 1630) & 0xFFFF))
   \   0000006E   8100               LD      R16, Z
   \   00000070   3605               CPI     R16, 101
   \   00000072   F030               BRCS    ??RecSecBarVal_0
    614          			Disp.ba_sdata[set] = 100 ;
   \   00000074   E604               LDI     R16, 100
   \   00000076   E030               LDI     R19, 0
   \   00000078   01F9               MOVW    R31:R30, R19:R18
   \   0000007A   ....               SUBI    R30, LOW((-(Disp + 1630) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(Disp + 1630) & 0xFFFF))
   \   0000007E   8300               ST      Z, R16
    615          		}
    616          		if (Disp.disp_vt == set) {				// New data to display
    617          			// AStmark not defined yet printBarSec(set) ;
    618          		}
    619          	}
    620          }
   \                     ??RecSecBarVal_0:
   \   00000080   9508               RET
    621          
    622          /*************************************************************************
    623          *
    624          * Receive alarm status         
    625          *
    626          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    627          void RecAlStatus(char ch, short pointer){
   \                     RecAlStatus:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    628          
    629          	Disp.alarmLED = UART[ch].pRxBuffer[pointer];
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14D               LDI     R20, 29
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8504               LDD     R16, Z+12
   \   0000001C   8515               LDD     R17, Z+13
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   9300....           STS     (Disp + 1751), R16
    630          	if (Disp.disp_vt == ALARM_VT) {	 // new value set to display
   \   0000002A   9100....           LDS     R16, (Disp + 1752)
   \   0000002E   2300               TST     R16
   \   00000030   F421               BRNE    ??RecAlStatus_0
    631          		RefreshDisplay(Disp.disp_vt) ;
   \   00000032   9100....           LDS     R16, (Disp + 1752)
   \   00000036   ........           CALL    RefreshDisplay
    632          	}
    633          }
   \                     ??RecAlStatus_0:
   \   0000003A   E0E3               LDI     R30, 3
   \   0000003C   ........           JMP     ?EPILOGUE_B3_L09
    634          
    635          /*************************************************************************
    636          *
    637          * Receive ack status  from host        
    638          *
    639          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    640          void RecAckStatus(char ch, short pointer){   
   \                     RecAckStatus:
    641          
    642          	tx_status &= ~ALARM_SEND ;			// Received ok by host
   \   00000000   ....               LDI     R30, LOW(tx_status)
   \   00000002   ....               LDI     R31, (tx_status) >> 8
   \   00000004   8110               LD      R17, Z
   \   00000006   7F1D               ANDI    R17, 0xFD
   \   00000008   8310               ST      Z, R17
    643          }
   \   0000000A   9508               RET
    644          
    645          
    646          /*************************************************************************
    647          *
    648          * Receive data for low graphic         
    649          *
    650          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    651          void RecLoGraph(char ch, short pointer){
   \                     RecLoGraph:
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   2E60               MOV     R6, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    652          	int i, j, k;
    653          
    654          	if (UART[ch].pRxBuffer[pointer] < NO_OF_VT) {
   \   00000008   2D06               MOV     R16, R6
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14D               LDI     R20, 29
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8504               LDD     R16, Z+12
   \   0000001C   8515               LDD     R17, Z+13
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   3604               CPI     R16, 100
   \   00000028   F008               BRCS    $+2+2
   \   0000002A   C08A               RJMP    ??RecLoGraph_0
    655          		Disp.lo_grdata[20] = UART[ch].pRxBuffer[pointer++] ;	// value type
   \   0000002C   2D06               MOV     R16, R6
   \   0000002E   E010               LDI     R17, 0
   \   00000030   E14D               LDI     R20, 29
   \   00000032   E050               LDI     R21, 0
   \   00000034   ........           CALL    ?S_EC_MUL_L02
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000003E   8504               LDD     R16, Z+12
   \   00000040   8515               LDD     R17, Z+13
   \   00000042   0F08               ADD     R16, R24
   \   00000044   1F19               ADC     R17, R25
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   8100               LD      R16, Z
   \   0000004A   9300....           STS     (Disp + 1750), R16
   \   0000004E   9601               ADIW    R25:R24, 1
    656          		Disp.window_enable[Disp.lo_grdata[20]] = true ;			// mark as legal for display
   \   00000050   E001               LDI     R16, 1
   \   00000052   9120....           LDS     R18, (Disp + 1750)
   \   00000056   E030               LDI     R19, 0
   \   00000058   01F9               MOVW    R31:R30, R19:R18
   \   0000005A   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   0000005E   8300               ST      Z, R16
    657          //		Disp.vt_status |= (0x01 << Disp.lo_grdata[20]) ;	// mark as legal for display
    658          
    659          		if (UART[ch].pRxBuffer[pointer++]) {			  // Clear display
   \   00000060   019C               MOVW    R19:R18, R25:R24
   \   00000062   01C9               MOVW    R25:R24, R19:R18
   \   00000064   9601               ADIW    R25:R24, 1
   \   00000066   2D06               MOV     R16, R6
   \   00000068   E010               LDI     R17, 0
   \   0000006A   E14D               LDI     R20, 29
   \   0000006C   E050               LDI     R21, 0
   \   0000006E   ........           CALL    ?S_EC_MUL_L02
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000076   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000078   8504               LDD     R16, Z+12
   \   0000007A   8515               LDD     R17, Z+13
   \   0000007C   0F02               ADD     R16, R18
   \   0000007E   1F13               ADC     R17, R19
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   8100               LD      R16, Z
   \   00000084   2300               TST     R16
   \   00000086   F069               BREQ    ??RecLoGraph_1
    660          			for (i=0; i<20; i++) {
   \   00000088   E0A0               LDI     R26, 0
   \   0000008A   E0B0               LDI     R27, 0
   \                     ??RecLoGraph_2:
   \   0000008C   31A4               CPI     R26, 20
   \   0000008E   E000               LDI     R16, 0
   \   00000090   07B0               CPC     R27, R16
   \   00000092   F43C               BRGE    ??RecLoGraph_1
    661          				Disp.lo_grdata[i] = 0x00 ;
   \   00000094   E000               LDI     R16, 0
   \   00000096   01FD               MOVW    R31:R30, R27:R26
   \   00000098   ....               SUBI    R30, LOW((-(Disp + 1730) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, HIGH((-(Disp + 1730) & 0xFFFF))
   \   0000009C   8300               ST      Z, R16
    662          			}
   \   0000009E   9611               ADIW    R27:R26, 1
   \   000000A0   CFF5               RJMP    ??RecLoGraph_2
    663          		}
    664          		j = (UART[ch].pRxBuffer[pointer-4]-3);				// bytes to display
   \                     ??RecLoGraph_1:
   \   000000A2   2D06               MOV     R16, R6
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   E14D               LDI     R20, 29
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   ........           CALL    ?S_EC_MUL_L02
   \   000000AE   01F8               MOVW    R31:R30, R17:R16
   \   000000B0   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B2   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B4   8504               LDD     R16, Z+12
   \   000000B6   8515               LDD     R17, Z+13
   \   000000B8   0F08               ADD     R16, R24
   \   000000BA   1F19               ADC     R17, R25
   \   000000BC   5004               SUBI    R16, 4
   \   000000BE   4010               SBCI    R17, 0
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   8100               LD      R16, Z
   \   000000C4   2FE0               MOV     R30, R16
   \   000000C6   E0F0               LDI     R31, 0
   \   000000C8   9733               SBIW    R31:R30, 3
   \   000000CA   014F               MOVW    R9:R8, R31:R30
    665          		if (j >20) {						  // Check for legal image pos.
   \   000000CC   E105               LDI     R16, 21
   \   000000CE   1680               CP      R8, R16
   \   000000D0   E000               LDI     R16, 0
   \   000000D2   0690               CPC     R9, R16
   \   000000D4   F01C               BRLT    ??RecLoGraph_3
    666          			j = 20 ;
   \   000000D6   E104               LDI     R16, 20
   \   000000D8   2E80               MOV     R8, R16
   \   000000DA   2499               CLR     R9
    667          		}
    668          		for (i =0 ;i < j; i++) {
   \                     ??RecLoGraph_3:
   \   000000DC   E0A0               LDI     R26, 0
   \   000000DE   E0B0               LDI     R27, 0
   \                     ??RecLoGraph_4:
   \   000000E0   15A8               CP      R26, R8
   \   000000E2   05B9               CPC     R27, R9
   \   000000E4   F54C               BRGE    ??RecLoGraph_5
    669          			for (k=19; k>0; k--) {
   \   000000E6   E103               LDI     R16, 19
   \   000000E8   2E40               MOV     R4, R16
   \   000000EA   2455               CLR     R5
   \                     ??RecLoGraph_6:
   \   000000EC   E001               LDI     R16, 1
   \   000000EE   1640               CP      R4, R16
   \   000000F0   E000               LDI     R16, 0
   \   000000F2   0650               CPC     R5, R16
   \   000000F4   F06C               BRLT    ??RecLoGraph_7
    670          				Disp.lo_grdata[k] = Disp.lo_grdata[k-1] ;
   \   000000F6   01F2               MOVW    R31:R30, R5:R4
   \   000000F8   ....               SUBI    R30, LOW((-(Disp + 1729) & 0xFFFF))
   \   000000FA   ....               SBCI    R31, HIGH((-(Disp + 1729) & 0xFFFF))
   \   000000FC   8100               LD      R16, Z
   \   000000FE   01F2               MOVW    R31:R30, R5:R4
   \   00000100   ....               SUBI    R30, LOW((-(Disp + 1730) & 0xFFFF))
   \   00000102   ....               SBCI    R31, HIGH((-(Disp + 1730) & 0xFFFF))
   \   00000104   8300               ST      Z, R16
    671          			}
   \   00000106   EF0F               LDI     R16, 255
   \   00000108   0E40               ADD     R4, R16
   \   0000010A   EF0F               LDI     R16, 255
   \   0000010C   1E50               ADC     R5, R16
   \   0000010E   CFEE               RJMP    ??RecLoGraph_6
    672          			Disp.lo_grdata[0] = UART[ch].pRxBuffer[pointer++] ; //ASTmark invert graf
   \                     ??RecLoGraph_7:
   \   00000110   2D06               MOV     R16, R6
   \   00000112   E010               LDI     R17, 0
   \   00000114   E14D               LDI     R20, 29
   \   00000116   E050               LDI     R21, 0
   \   00000118   ........           CALL    ?S_EC_MUL_L02
   \   0000011C   01F8               MOVW    R31:R30, R17:R16
   \   0000011E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000120   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000122   8504               LDD     R16, Z+12
   \   00000124   8515               LDD     R17, Z+13
   \   00000126   0F08               ADD     R16, R24
   \   00000128   1F19               ADC     R17, R25
   \   0000012A   01F8               MOVW    R31:R30, R17:R16
   \   0000012C   8100               LD      R16, Z
   \   0000012E   9300....           STS     (Disp + 1730), R16
   \   00000132   9601               ADIW    R25:R24, 1
    673          		}
   \   00000134   9611               ADIW    R27:R26, 1
   \   00000136   CFD4               RJMP    ??RecLoGraph_4
    674          		printLoDi(Disp.disp_vt) ;        
   \                     ??RecLoGraph_5:
   \   00000138   9100....           LDS     R16, (Disp + 1752)
   \   0000013C   ........           CALL    printLoDi
    675          	}
    676          }
   \                     ??RecLoGraph_0:
   \   00000140   E0EA               LDI     R30, 10
   \   00000142   ........           JMP     ?EPILOGUE_B10_L09
    677          
    678          /*************************************************************************
    679          *
    680          * Receive data for Bar Image         
    681          *
    682          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    683          void RecHiImage(char ch, short pointer){
   \                     RecHiImage:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
    684          	int i, j;
    685          	
    686          	j=20+UART[ch].pRxBuffer[pointer-2]-2;		// packet size
   \   00000006   2F06               MOV     R16, R22
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14D               LDI     R20, 29
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   8504               LDD     R16, Z+12
   \   0000001A   8515               LDD     R17, Z+13
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   5002               SUBI    R16, 2
   \   00000022   4010               SBCI    R17, 0
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8100               LD      R16, Z
   \   00000028   2FE0               MOV     R30, R16
   \   0000002A   E0F0               LDI     R31, 0
   \   0000002C   9672               ADIW    R31:R30, 18
   \   0000002E   01DF               MOVW    R27:R26, R31:R30
    687          	if (j >50) {					// Check for legal image pos.
   \   00000030   33A3               CPI     R26, 51
   \   00000032   E000               LDI     R16, 0
   \   00000034   07B0               CPC     R27, R16
   \   00000036   F014               BRLT    ??RecHiImage_0
    688          		j = 50 ;
   \   00000038   E3A2               LDI     R26, 50
   \   0000003A   E0B0               LDI     R27, 0
    689          	}
    690          	for (i =20;i < j; i++) {
   \                     ??RecHiImage_0:
   \   0000003C   E184               LDI     R24, 20
   \   0000003E   E090               LDI     R25, 0
   \                     ??RecHiImage_1:
   \   00000040   178A               CP      R24, R26
   \   00000042   079B               CPC     R25, R27
   \   00000044   F4E4               BRGE    ??RecHiImage_2
    691          		Disp.image[i] = UART[ch].pRxBuffer[pointer++] ;
   \   00000046   2F06               MOV     R16, R22
   \   00000048   E010               LDI     R17, 0
   \   0000004A   E14D               LDI     R20, 29
   \   0000004C   E050               LDI     R21, 0
   \   0000004E   ........           CALL    ?S_EC_MUL_L02
   \   00000052   01F8               MOVW    R31:R30, R17:R16
   \   00000054   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000058   8504               LDD     R16, Z+12
   \   0000005A   8515               LDD     R17, Z+13
   \   0000005C   0F02               ADD     R16, R18
   \   0000005E   1F13               ADC     R17, R19
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   8140               LD      R20, Z
   \   00000064   E050               LDI     R21, 0
   \   00000066   018C               MOVW    R17:R16, R25:R24
   \   00000068   0F00               LSL     R16
   \   0000006A   1F11               ROL     R17
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   00000070   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   00000072   8340               ST      Z, R20
   \   00000074   8351               STD     Z+1, R21
   \   00000076   5F2F               SUBI    R18, 255
   \   00000078   4F3F               SBCI    R19, 255
    692          	}
   \   0000007A   9601               ADIW    R25:R24, 1
   \   0000007C   CFE1               RJMP    ??RecHiImage_1
    693          }
   \                     ??RecHiImage_2:
   \   0000007E   E0E4               LDI     R30, 4
   \   00000080   ........           JMP     ?EPILOGUE_B4_L09
    694          
    695          /*************************************************************************
    696          *
    697          * Receive data for value set to display         
    698          *
    699          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    700          void RecValDisp(char ch, short pointer){
   \                     RecValDisp:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    701          
    702            if (UART[ch].pRxBuffer[pointer] < NO_OF_VT) {
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14D               LDI     R20, 29
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8504               LDD     R16, Z+12
   \   0000001C   8515               LDD     R17, Z+13
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   3604               CPI     R16, 100
   \   00000028   F558               BRCC    ??RecValDisp_0
    703               if (Disp.window_enable[UART[ch].pRxBuffer[pointer]] == true) {
   \   0000002A   2F0A               MOV     R16, R26
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E14D               LDI     R20, 29
   \   00000030   E050               LDI     R21, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000003C   8504               LDD     R16, Z+12
   \   0000003E   8515               LDD     R17, Z+13
   \   00000040   0F08               ADD     R16, R24
   \   00000042   1F19               ADC     R17, R25
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   8100               LD      R16, Z
   \   00000048   E010               LDI     R17, 0
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   00000050   8100               LD      R16, Z
   \   00000052   3001               CPI     R16, 1
   \   00000054   F4A9               BRNE    ??RecValDisp_0
    704          //    if ((Disp.vt_status >> UART[ch].pRxBuffer[pointer]) & 0x01) {
    705              	Disp.disp_vt = UART[ch].pRxBuffer[pointer] ;	
   \   00000056   2F0A               MOV     R16, R26
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14D               LDI     R20, 29
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000068   8504               LDD     R16, Z+12
   \   0000006A   8515               LDD     R17, Z+13
   \   0000006C   0F08               ADD     R16, R24
   \   0000006E   1F19               ADC     R17, R25
   \   00000070   01F8               MOVW    R31:R30, R17:R16
   \   00000072   8100               LD      R16, Z
   \   00000074   9300....           STS     (Disp + 1752), R16
    706              	RefreshDisplay( Disp.disp_vt );
   \   00000078   9100....           LDS     R16, (Disp + 1752)
   \   0000007C   ........           CALL    RefreshDisplay
    707              }
    708            }
    709          }
   \                     ??RecValDisp_0:
   \   00000080   E0E3               LDI     R30, 3
   \   00000082   ........           JMP     ?EPILOGUE_B3_L09
    710          
    711          /*************************************************************************
    712          *
    713          * Receive data to disable a window         
    714          *
    715          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    716          void RecDisableDisp(char ch, short pointer){
   \                     RecDisableDisp:
   \   00000000   2F60               MOV     R22, R16
    717          
    718            if (UART[ch].pRxBuffer[pointer] < NO_OF_VT) {
   \   00000002   2F06               MOV     R16, R22
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14D               LDI     R20, 29
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000014   8504               LDD     R16, Z+12
   \   00000016   8515               LDD     R17, Z+13
   \   00000018   0F02               ADD     R16, R18
   \   0000001A   1F13               ADC     R17, R19
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   8100               LD      R16, Z
   \   00000020   3604               CPI     R16, 100
   \   00000022   F558               BRCC    ??RecDisableDisp_0
    719               if (Disp.window_enable[UART[ch].pRxBuffer[pointer]] == true) {
   \   00000024   2F06               MOV     R16, R22
   \   00000026   E010               LDI     R17, 0
   \   00000028   E14D               LDI     R20, 29
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   ........           CALL    ?S_EC_MUL_L02
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000036   8504               LDD     R16, Z+12
   \   00000038   8515               LDD     R17, Z+13
   \   0000003A   0F02               ADD     R16, R18
   \   0000003C   1F13               ADC     R17, R19
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   8100               LD      R16, Z
   \   00000042   E010               LDI     R17, 0
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   00000048   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   0000004A   8100               LD      R16, Z
   \   0000004C   3001               CPI     R16, 1
   \   0000004E   F4A9               BRNE    ??RecDisableDisp_0
    720                Disp.window_enable[UART[ch].pRxBuffer[pointer]] = false;
   \   00000050   E070               LDI     R23, 0
   \   00000052   2F06               MOV     R16, R22
   \   00000054   E010               LDI     R17, 0
   \   00000056   E14D               LDI     R20, 29
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000064   8504               LDD     R16, Z+12
   \   00000066   8515               LDD     R17, Z+13
   \   00000068   0F02               ADD     R16, R18
   \   0000006A   1F13               ADC     R17, R19
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   8100               LD      R16, Z
   \   00000070   E010               LDI     R17, 0
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   00000076   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   00000078   8370               ST      Z, R23
    721              }
    722            }
    723          }
   \                     ??RecDisableDisp_0:
   \   0000007A   9508               RET
    724          
    725          /*************************************************************************
    726          *
    727          * Receive eeprom data
    728          *
    729          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    730          void RecEepData(char ch, short pointer){
   \                     RecEepData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    731          
    732          //	unsigned char temp_data[PACKED_DATA_SIZE];
    733          	char   *e_data, *a_data, i ;
    734          
    735          	a_data = &UART[ch].pRxBuffer[pointer] ;
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14D               LDI     R20, 29
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8504               LDD     R16, Z+12
   \   0000001C   8515               LDD     R17, Z+13
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   0128               MOVW    R5:R4, R17:R16
    736          	e_data = &UART[ch].pRxBuffer[pointer + 8] ;
   \   00000024   2F0A               MOV     R16, R26
   \   00000026   E010               LDI     R17, 0
   \   00000028   E14D               LDI     R20, 29
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   ........           CALL    ?S_EC_MUL_L02
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000036   8504               LDD     R16, Z+12
   \   00000038   8515               LDD     R17, Z+13
   \   0000003A   0F08               ADD     R16, R24
   \   0000003C   1F19               ADC     R17, R25
   \   0000003E   5F08               SUBI    R16, 248
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   0138               MOVW    R7:R6, R17:R16
    737          
    738          	if (CheckEepData(e_data) && CheckADData(a_data) &&
    739          		(UART[ch].pRxBuffer[pointer + PACKED_DATA_SIZE] & 0x01)) {	// check legale packet 
   \   00000044   0183               MOVW    R17:R16, R7:R6
   \   00000046   ........           CALL    CheckEepData
   \   0000004A   2300               TST     R16
   \   0000004C   F189               BREQ    ??RecEepData_0
   \   0000004E   0182               MOVW    R17:R16, R5:R4
   \   00000050   ........           CALL    CheckADData
   \   00000054   2300               TST     R16
   \   00000056   F161               BREQ    ??RecEepData_0
   \   00000058   2F0A               MOV     R16, R26
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E14D               LDI     R20, 29
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000006A   8504               LDD     R16, Z+12
   \   0000006C   8515               LDD     R17, Z+13
   \   0000006E   0F08               ADD     R16, R24
   \   00000070   1F19               ADC     R17, R25
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   A500               LDD     R16, Z+40
   \   00000076   FF00               SBRS    R16, 0
   \   00000078   C01B               RJMP    ??RecEepData_0
    740          		for (i = 0; i < PACKED_DATA_SIZE; i++) {
   \   0000007A   E0B0               LDI     R27, 0
   \                     ??RecEepData_1:
   \   0000007C   32B8               CPI     R27, 40
   \   0000007E   F4C0               BRCC    ??RecEepData_0
    741          			packed_data[i] = UART[ch].pRxBuffer[pointer++];			// copy data
   \   00000080   2F0A               MOV     R16, R26
   \   00000082   E010               LDI     R17, 0
   \   00000084   E14D               LDI     R20, 29
   \   00000086   E050               LDI     R21, 0
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000092   8504               LDD     R16, Z+12
   \   00000094   8515               LDD     R17, Z+13
   \   00000096   0F08               ADD     R16, R24
   \   00000098   1F19               ADC     R17, R25
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   8120               LD      R18, Z
   \   0000009E   2F0B               MOV     R16, R27
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   ....               SUBI    R30, LOW((-(packed_data) & 0xFFFF))
   \   000000A6   ....               SBCI    R31, (-(packed_data) & 0xFFFF) >> 8
   \   000000A8   8320               ST      Z, R18
   \   000000AA   9601               ADIW    R25:R24, 1
    742          		}
   \   000000AC   95B3               INC     R27
   \   000000AE   CFE6               RJMP    ??RecEepData_1
    743          	//	eep_type &= ~0x0f ;
    744          		//eep_type |= 0x09 ;				 // use PC data 
    745          	} else {
    746          //		eep_type &= ~0x0f ;
    747          	//	eep_type |= 0x02 ;				 // fail from pc 
    748          	}
    749          }
   \                     ??RecEepData_0:
   \   000000B0   E0E8               LDI     R30, 8
   \   000000B2   ........           JMP     ?EPILOGUE_B8_L09
    750          
    751          
    752          /*************************************************************************
    753          *
    754          * Receive setup
    755          *
    756          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    757          void RecSetupData(char ch, short pointer){
   \                     RecSetupData:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    758          
    759              WriteEEPROMByte(EEPROM_PRI_ADDR, UART[ch].pRxBuffer[pointer]);
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14D               LDI     R20, 29
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   8504               LDD     R16, Z+12
   \   0000001C   8515               LDD     R17, Z+13
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8120               LD      R18, Z
   \   00000026   E001               LDI     R16, 1
   \   00000028   E010               LDI     R17, 0
   \   0000002A   ........           CALL    WriteEEPROMByte
    760              WriteEEPROMByte(EEPROM_SEC_ADDR, UART[ch].pRxBuffer[pointer+1]);
   \   0000002E   2F0A               MOV     R16, R26
   \   00000030   E010               LDI     R17, 0
   \   00000032   E14D               LDI     R20, 29
   \   00000034   E050               LDI     R21, 0
   \   00000036   ........           CALL    ?S_EC_MUL_L02
   \   0000003A   01F8               MOVW    R31:R30, R17:R16
   \   0000003C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000003E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000040   8504               LDD     R16, Z+12
   \   00000042   8515               LDD     R17, Z+13
   \   00000044   0F08               ADD     R16, R24
   \   00000046   1F19               ADC     R17, R25
   \   00000048   01F8               MOVW    R31:R30, R17:R16
   \   0000004A   8121               LDD     R18, Z+1
   \   0000004C   E002               LDI     R16, 2
   \   0000004E   E010               LDI     R17, 0
   \   00000050   ........           CALL    WriteEEPROMByte
    761          
    762              // AStmark don't saved for brightness tpc350
    763          }
   \   00000054   E0E3               LDI     R30, 3
   \   00000056   ........           JMP     ?EPILOGUE_B3_L09
    764          
    765          /*************************************************************************
    766          *
    767          * Receive Command to go to the bootloader program
    768          *
    769          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    770          void GetGotoBootloader(char ch, short pointer) {   
   \                     GetGotoBootloader:
   \                     ??GetGotoBootloader_0:
    771          
    772          //    void (*BootApp)(void) = (void(*)())0xF000;
    773          
    774              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
   \   00000000   99E1               SBIC    0x1C, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    775                  ;
    776              EEARL = (0x0fff & 0xff);
   \   00000004   EF1F               LDI     R17, 255
   \   00000006   BB1E               OUT     0x1E, R17
    777              EEARH = (0x0fff >> 8);
   \   00000008   E01F               LDI     R17, 15
   \   0000000A   BB1F               OUT     0x1F, R17
    778              EEDR = 0xff;
   \   0000000C   EF1F               LDI     R17, 255
   \   0000000E   BB1D               OUT     0x1D, R17
    779              EECR |= (1<<EEMWE);
   \   00000010   9AE2               SBI     0x1C, 0x02
    780              EECR |= (1<<EEWE);
   \   00000012   9AE1               SBI     0x1C, 0x01
    781              while (EECR & (1<<EEWE))
   \                     ??GetGotoBootloader_1:
   \   00000014   99E1               SBIC    0x1C, 0x01
   \   00000016   CFFE               RJMP    ??GetGotoBootloader_1
    782                  ;
    783          
    784              WDTCR = 0x18;               //Start watchdog to genetate restart
   \   00000018   E118               LDI     R17, 24
   \   0000001A   BD11               OUT     0x21, R17
    785              WDTCR = 0x08;               //Start watchdog to genetate restart
   \   0000001C   E018               LDI     R17, 8
   \   0000001E   BD11               OUT     0x21, R17
    786          }
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_EECR
   \   00000022                      REQUIRE _A_EEAR
   \   00000022                      REQUIRE _A_EEDR
   \   00000022                      REQUIRE _A_WDTCR
    787          
    788          
    789          /*************************************************************************
    790          *
    791          *  Receive data on USARTs (ANPRO1)
    792          *
    793          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    794          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    795          
    796              switch (UART[ch].RxState) {                  // check status 
   \   00000006   2F08               MOV     R16, R24
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14D               LDI     R20, 29
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000018   8904               LDD     R16, Z+20
   \   0000001A   5000               SUBI    R16, 0
   \   0000001C   F049               BREQ    ??ReceivePacketUart_0
   \   0000001E   950A               DEC     R16
   \   00000020   F041               BREQ    ??ReceivePacketUart_1
   \   00000022   950A               DEC     R16
   \   00000024   F409               BRNE    $+2+2
   \   00000026   C072               RJMP    ??ReceivePacketUart_2
   \   00000028   5008               SUBI    R16, 8
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C118               RJMP    ??ReceivePacketUart_3
   \   0000002E   C114               RJMP    ??ReceivePacketUart_4
    797              case SYNC :
    798                  // all functionallity in inerrupt routine 
    799                  break ;
   \                     ??ReceivePacketUart_0:
   \   00000030   C116               RJMP    ??ReceivePacketUart_3
    800              case HEADER :
    801                   if (UART[ch].RxLast >= 3) {             // receive header 
   \                     ??ReceivePacketUart_1:
   \   00000032   2F08               MOV     R16, R24
   \   00000034   E010               LDI     R17, 0
   \   00000036   E14D               LDI     R20, 29
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   89A0               LDD     R26, Z+16
   \   00000046   89B1               LDD     R27, Z+17
   \   00000048   9713               SBIW    R27:R26, 3
   \   0000004A   F408               BRCC    $+2+2
   \   0000004C   C108               RJMP    ??ReceivePacketUart_3
    802                    UART[ch].RxPacklen = (UART[ch].pRxBuffer[2] * 256)+ UART[ch].pRxBuffer[3] ; // Find length of package
   \   0000004E   2F08               MOV     R16, R24
   \   00000050   E010               LDI     R17, 0
   \   00000052   E14D               LDI     R20, 29
   \   00000054   E050               LDI     R21, 0
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000060   8504               LDD     R16, Z+12
   \   00000062   8515               LDD     R17, Z+13
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8122               LDD     R18, Z+2
   \   00000068   E030               LDI     R19, 0
   \   0000006A   2F32               MOV     R19, R18
   \   0000006C   E020               LDI     R18, 0
   \   0000006E   2F08               MOV     R16, R24
   \   00000070   E010               LDI     R17, 0
   \   00000072   E14D               LDI     R20, 29
   \   00000074   E050               LDI     R21, 0
   \   00000076   ........           CALL    ?S_EC_MUL_L02
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000080   8504               LDD     R16, Z+12
   \   00000082   8515               LDD     R17, Z+13
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   8103               LDD     R16, Z+3
   \   00000088   E010               LDI     R17, 0
   \   0000008A   0F20               ADD     R18, R16
   \   0000008C   1F31               ADC     R19, R17
   \   0000008E   2F08               MOV     R16, R24
   \   00000090   E010               LDI     R17, 0
   \   00000092   E14D               LDI     R20, 29
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000A0   8F20               STD     Z+24, R18
   \   000000A2   8F31               STD     Z+25, R19
    803                    if (UART[ch].RxPacklen >= MIN_PACK_LEN) {
   \   000000A4   2F08               MOV     R16, R24
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   E14D               LDI     R20, 29
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   ........           CALL    ?S_EC_MUL_L02
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000B6   8DA0               LDD     R26, Z+24
   \   000000B8   8DB1               LDD     R27, Z+25
   \   000000BA   9717               SBIW    R27:R26, 7
   \   000000BC   F118               BRCS    ??ReceivePacketUart_5
    804                      UART[ch].RxState = RECEIVE ;       // Header ok go to data receive state
   \   000000BE   E022               LDI     R18, 2
   \   000000C0   2F08               MOV     R16, R24
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14D               LDI     R20, 29
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000D2   8B24               STD     Z+20, R18
    805                      UART[ch].RxCount = UART[ch].RxLast + 1 ;    // Set receive counter
   \   000000D4   2F08               MOV     R16, R24
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   E14D               LDI     R20, 29
   \   000000DA   E050               LDI     R21, 0
   \   000000DC   ........           CALL    ?S_EC_MUL_L02
   \   000000E0   01F8               MOVW    R31:R30, R17:R16
   \   000000E2   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000E6   89A0               LDD     R26, Z+16
   \   000000E8   89B1               LDD     R27, Z+17
   \   000000EA   9611               ADIW    R27:R26, 1
   \   000000EC   2F08               MOV     R16, R24
   \   000000EE   E010               LDI     R17, 0
   \   000000F0   E14D               LDI     R20, 29
   \   000000F2   E050               LDI     R21, 0
   \   000000F4   ........           CALL    ?S_EC_MUL_L02
   \   000000F8   01F8               MOVW    R31:R30, R17:R16
   \   000000FA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000000FC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000000FE   8BA2               STD     Z+18, R26
   \   00000100   8BB3               STD     Z+19, R27
   \   00000102   C0AD               RJMP    ??ReceivePacketUart_3
    806                    } else {
    807                      GoToSyncUART(ch) ;                        // go to sync modus for recive
   \                     ??ReceivePacketUart_5:
   \   00000104   2F08               MOV     R16, R24
   \   00000106   ........           CALL    GoToSyncUART
    808                    }
    809                  }
    810                  break ;
   \   0000010A   C0A9               RJMP    ??ReceivePacketUart_3
    811              case RECEIVE :
    812                  if (++UART[ch].RxCount >= UART[ch].RxPacklen) {
   \                     ??ReceivePacketUart_2:
   \   0000010C   2F08               MOV     R16, R24
   \   0000010E   E010               LDI     R17, 0
   \   00000110   E14D               LDI     R20, 29
   \   00000112   E050               LDI     R21, 0
   \   00000114   ........           CALL    ?S_EC_MUL_L02
   \   00000118   01F8               MOVW    R31:R30, R17:R16
   \   0000011A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000011E   8902               LDD     R16, Z+18
   \   00000120   8913               LDD     R17, Z+19
   \   00000122   5F0F               SUBI    R16, 255
   \   00000124   4F1F               SBCI    R17, 255
   \   00000126   8B02               STD     Z+18, R16
   \   00000128   8B13               STD     Z+19, R17
   \   0000012A   2F08               MOV     R16, R24
   \   0000012C   E010               LDI     R17, 0
   \   0000012E   E14D               LDI     R20, 29
   \   00000130   E050               LDI     R21, 0
   \   00000132   ........           CALL    ?S_EC_MUL_L02
   \   00000136   01F8               MOVW    R31:R30, R17:R16
   \   00000138   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000013A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000013C   8922               LDD     R18, Z+18
   \   0000013E   8933               LDD     R19, Z+19
   \   00000140   2F08               MOV     R16, R24
   \   00000142   E010               LDI     R17, 0
   \   00000144   E14D               LDI     R20, 29
   \   00000146   E050               LDI     R21, 0
   \   00000148   ........           CALL    ?S_EC_MUL_L02
   \   0000014C   01F8               MOVW    R31:R30, R17:R16
   \   0000014E   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000150   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000152   8D00               LDD     R16, Z+24
   \   00000154   8D11               LDD     R17, Z+25
   \   00000156   1720               CP      R18, R16
   \   00000158   0731               CPC     R19, R17
   \   0000015A   F408               BRCC    $+2+2
   \   0000015C   C080               RJMP    ??ReceivePacketUart_3
    813                     if ((UART[ch].pRxBuffer[UART[ch].RxPacklen -1]) == ANPRO1_EOT) {
   \   0000015E   2F08               MOV     R16, R24
   \   00000160   E010               LDI     R17, 0
   \   00000162   E14D               LDI     R20, 29
   \   00000164   E050               LDI     R21, 0
   \   00000166   ........           CALL    ?S_EC_MUL_L02
   \   0000016A   01F8               MOVW    R31:R30, R17:R16
   \   0000016C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000016E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000170   85A4               LDD     R26, Z+12
   \   00000172   85B5               LDD     R27, Z+13
   \   00000174   2F08               MOV     R16, R24
   \   00000176   E010               LDI     R17, 0
   \   00000178   E14D               LDI     R20, 29
   \   0000017A   E050               LDI     R21, 0
   \   0000017C   ........           CALL    ?S_EC_MUL_L02
   \   00000180   01F8               MOVW    R31:R30, R17:R16
   \   00000182   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000184   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000186   8D00               LDD     R16, Z+24
   \   00000188   8D11               LDD     R17, Z+25
   \   0000018A   0FA0               ADD     R26, R16
   \   0000018C   1FB1               ADC     R27, R17
   \   0000018E   9711               SBIW    R27:R26, 1
   \   00000190   910C               LD      R16, X
   \   00000192   3003               CPI     R16, 3
   \   00000194   F009               BREQ    $+2+2
   \   00000196   C05C               RJMP    ??ReceivePacketUart_6
    814                          if (CalcDSRxChecksum(ch, UART[ch].RxPacklen-2)) {
   \   00000198   2F08               MOV     R16, R24
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   E14D               LDI     R20, 29
   \   0000019E   E050               LDI     R21, 0
   \   000001A0   ........           CALL    ?S_EC_MUL_L02
   \   000001A4   01F8               MOVW    R31:R30, R17:R16
   \   000001A6   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001A8   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001AA   8DA0               LDD     R26, Z+24
   \   000001AC   8DB1               LDD     R27, Z+25
   \   000001AE   9712               SBIW    R27:R26, 2
   \   000001B0   019D               MOVW    R19:R18, R27:R26
   \   000001B2   2F08               MOV     R16, R24
   \   000001B4   ....               RCALL   CalcDSRxChecksum
   \   000001B6   2B01               OR      R16, R17
   \   000001B8   F409               BRNE    $+2+2
   \   000001BA   C046               RJMP    ??ReceivePacketUart_7
    815                              if ((UART[ch].pRxBuffer[0] == MyPriAddress)||      // message to tpc140 or
    816                                  (UART[ch].pRxBuffer[0] == 0xff)) {            // broadcast
   \   000001BC   2F08               MOV     R16, R24
   \   000001BE   E010               LDI     R17, 0
   \   000001C0   E14D               LDI     R20, 29
   \   000001C2   E050               LDI     R21, 0
   \   000001C4   ........           CALL    ?S_EC_MUL_L02
   \   000001C8   01F8               MOVW    R31:R30, R17:R16
   \   000001CA   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001CC   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001CE   8504               LDD     R16, Z+12
   \   000001D0   8515               LDD     R17, Z+13
   \   000001D2   01F8               MOVW    R31:R30, R17:R16
   \   000001D4   8100               LD      R16, Z
   \   000001D6   9110....           LDS     R17, MyPriAddress
   \   000001DA   1701               CP      R16, R17
   \   000001DC   F079               BREQ    ??ReceivePacketUart_8
   \   000001DE   2F08               MOV     R16, R24
   \   000001E0   E010               LDI     R17, 0
   \   000001E2   E14D               LDI     R20, 29
   \   000001E4   E050               LDI     R21, 0
   \   000001E6   ........           CALL    ?S_EC_MUL_L02
   \   000001EA   01F8               MOVW    R31:R30, R17:R16
   \   000001EC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000001EE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000001F0   8504               LDD     R16, Z+12
   \   000001F2   8515               LDD     R17, Z+13
   \   000001F4   01F8               MOVW    R31:R30, R17:R16
   \   000001F6   8100               LD      R16, Z
   \   000001F8   3F0F               CPI     R16, 255
   \   000001FA   F511               BRNE    ??ReceivePacketUart_9
    817                                  HostAddress = UART[ch].pRxBuffer[1];            // address to sender (host)
   \                     ??ReceivePacketUart_8:
   \   000001FC   2F08               MOV     R16, R24
   \   000001FE   E010               LDI     R17, 0
   \   00000200   E14D               LDI     R20, 29
   \   00000202   E050               LDI     R21, 0
   \   00000204   ........           CALL    ?S_EC_MUL_L02
   \   00000208   01F8               MOVW    R31:R30, R17:R16
   \   0000020A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000020C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000020E   8504               LDD     R16, Z+12
   \   00000210   8515               LDD     R17, Z+13
   \   00000212   01F8               MOVW    R31:R30, R17:R16
   \   00000214   8101               LDD     R16, Z+1
   \   00000216   9300....           STS     HostAddress, R16
    818                                  UART[ch].RxState = HANDLE ;                     // Package OK
   \   0000021A   E02A               LDI     R18, 10
   \   0000021C   2F08               MOV     R16, R24
   \   0000021E   E010               LDI     R17, 0
   \   00000220   E14D               LDI     R20, 29
   \   00000222   E050               LDI     R21, 0
   \   00000224   ........           CALL    ?S_EC_MUL_L02
   \   00000228   01F8               MOVW    R31:R30, R17:R16
   \   0000022A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000022C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000022E   8B24               STD     Z+20, R18
    819                                  if (ch == 0) {
   \   00000230   2388               TST     R24
   \   00000232   F4A9               BRNE    ??ReceivePacketUart_3
    820                                      OS_SignalEvent(1, &TCB_USART0);
   \   00000234   ....               LDI     R18, LOW(TCB_USART0)
   \   00000236   ....               LDI     R19, (TCB_USART0) >> 8
   \   00000238   E001               LDI     R16, 1
   \   0000023A   ........           CALL    OS_SignalEvent
   \   0000023E   C00F               RJMP    ??ReceivePacketUart_3
    821                                  } else if (ch == 1) {
    822                                       //Not used
    823                                  }
    824                              } else {
    825                                  GoToSyncUART(ch) ;                             // go to sync modus for recive
   \                     ??ReceivePacketUart_9:
   \   00000240   2F08               MOV     R16, R24
   \   00000242   ........           CALL    GoToSyncUART
   \   00000246   C00B               RJMP    ??ReceivePacketUart_3
    826                              }
    827                          } else {
    828                              GoToSyncUART(ch) ;                                // go to sync modus for recive
   \                     ??ReceivePacketUart_7:
   \   00000248   2F08               MOV     R16, R24
   \   0000024A   ........           CALL    GoToSyncUART
   \   0000024E   C007               RJMP    ??ReceivePacketUart_3
    829                          }
    830                      } else {
    831                          GoToSyncUART(ch) ;                                    // go to sync modus for recive
   \                     ??ReceivePacketUart_6:
   \   00000250   2F08               MOV     R16, R24
   \   00000252   ........           CALL    GoToSyncUART
    832                      }
    833                  }
    834                  break ;
   \   00000256   C003               RJMP    ??ReceivePacketUart_3
    835              case HANDLE :
    836                  break;
    837              default :
    838                  GoToSyncUART(ch) ;                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_4:
   \   00000258   2F08               MOV     R16, R24
   \   0000025A   ........           CALL    GoToSyncUART
    839                  break ;
    840              }                                                           // end switch 
    841              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer 
   \                     ??ReceivePacketUart_3:
   \   0000025E   2F08               MOV     R16, R24
   \   00000260   E010               LDI     R17, 0
   \   00000262   E14D               LDI     R20, 29
   \   00000264   E050               LDI     R21, 0
   \   00000266   ........           CALL    ?S_EC_MUL_L02
   \   0000026A   01F8               MOVW    R31:R30, R17:R16
   \   0000026C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000026E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000270   8900               LDD     R16, Z+16
   \   00000272   8911               LDD     R17, Z+17
   \   00000274   5F0F               SUBI    R16, 255
   \   00000276   4F1F               SBCI    R17, 255
   \   00000278   8B00               STD     Z+16, R16
   \   0000027A   8B11               STD     Z+17, R17
   \   0000027C   2F08               MOV     R16, R24
   \   0000027E   E010               LDI     R17, 0
   \   00000280   E14D               LDI     R20, 29
   \   00000282   E050               LDI     R21, 0
   \   00000284   ........           CALL    ?S_EC_MUL_L02
   \   00000288   01F8               MOVW    R31:R30, R17:R16
   \   0000028A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000028C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000028E   8900               LDD     R16, Z+16
   \   00000290   8911               LDD     R17, Z+17
   \   00000292   3F0F               CPI     R16, 255
   \   00000294   E020               LDI     R18, 0
   \   00000296   0712               CPC     R17, R18
   \   00000298   F068               BRCS    ??ReceivePacketUart_10
    842                  UART[ch].RxLast = 0;                                     // reset pointer
   \   0000029A   E020               LDI     R18, 0
   \   0000029C   E030               LDI     R19, 0
   \   0000029E   2F08               MOV     R16, R24
   \   000002A0   E010               LDI     R17, 0
   \   000002A2   E14D               LDI     R20, 29
   \   000002A4   E050               LDI     R21, 0
   \   000002A6   ........           CALL    ?S_EC_MUL_L02
   \   000002AA   01F8               MOVW    R31:R30, R17:R16
   \   000002AC   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   000002AE   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   000002B0   8B20               STD     Z+16, R18
   \   000002B2   8B31               STD     Z+17, R19
    843              }
    844          }
   \                     ??ReceivePacketUart_10:
   \   000002B4   E0E4               LDI     R30, 4
   \   000002B6   ........           JMP     ?EPILOGUE_B4_L09
    845          
    846          
    847          /*************************************************************************
    848          *
    849          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    850          *
    851          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    852          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    853          
    854              unsigned short  cnt ;
    855              unsigned char   csum ;
    856          
    857              csum = 0 ;
   \   00000008   E000               LDI     R16, 0
    858              for (cnt = 2 ; cnt < len ; cnt++) {
   \   0000000A   E082               LDI     R24, 2
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSTxChecksum_0:
   \   0000000E   1786               CP      R24, R22
   \   00000010   0797               CPC     R25, R23
   \   00000012   F4E0               BRCC    ??CalcDSTxChecksum_1
    859                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]] ;
   \   00000014   2FA0               MOV     R26, R16
   \   00000016   E0B0               LDI     R27, 0
   \   00000018   2D02               MOV     R16, R2
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14D               LDI     R20, 29
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002A   8100               LD      R16, Z
   \   0000002C   8111               LDD     R17, Z+1
   \   0000002E   0F08               ADD     R16, R24
   \   00000030   1F19               ADC     R17, R25
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   8100               LD      R16, Z
   \   00000036   E010               LDI     R17, 0
   \   00000038   27A0               EOR     R26, R16
   \   0000003A   27B1               EOR     R27, R17
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000042   ....               LDI     R19, (crc) >> 16
   \   00000044   BF3B               OUT     0x3B, R19
   \   00000046   9106               ELPM    R16, Z
    860              }
   \   00000048   9601               ADIW    R25:R24, 1
   \   0000004A   CFE1               RJMP    ??CalcDSTxChecksum_0
    861              return csum ;
   \                     ??CalcDSTxChecksum_1:
   \   0000004C   E0E4               LDI     R30, 4
   \   0000004E   ........           JMP     ?EPILOGUE_B4_L09
    862          }
    863          
    864          /*************************************************************************
    865          *
    866          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    867          *
    868          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    869          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    870          
    871              unsigned short  cnt ;
    872              unsigned char   csum ;
    873          
    874              csum = 0 ;
   \   00000008   E020               LDI     R18, 0
    875              for (cnt=0 ; cnt < len ; cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSRxChecksum_0:
   \   0000000E   1786               CP      R24, R22
   \   00000010   0797               CPC     R25, R23
   \   00000012   F4E0               BRCC    ??CalcDSRxChecksum_1
    876                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]] ;
   \   00000014   2FA2               MOV     R26, R18
   \   00000016   E0B0               LDI     R27, 0
   \   00000018   2D02               MOV     R16, R2
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14D               LDI     R20, 29
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000002A   8504               LDD     R16, Z+12
   \   0000002C   8515               LDD     R17, Z+13
   \   0000002E   0F08               ADD     R16, R24
   \   00000030   1F19               ADC     R17, R25
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   8100               LD      R16, Z
   \   00000036   E010               LDI     R17, 0
   \   00000038   27A0               EOR     R26, R16
   \   0000003A   27B1               EOR     R27, R17
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000042   ....               LDI     R19, (crc) >> 16
   \   00000044   BF3B               OUT     0x3B, R19
   \   00000046   9126               ELPM    R18, Z
    877              }
   \   00000048   9601               ADIW    R25:R24, 1
   \   0000004A   CFE1               RJMP    ??CalcDSRxChecksum_0
    878              if (csum == UART[ch].pRxBuffer[len]) {
   \                     ??CalcDSRxChecksum_1:
   \   0000004C   2D02               MOV     R16, R2
   \   0000004E   E010               LDI     R17, 0
   \   00000050   E14D               LDI     R20, 29
   \   00000052   E050               LDI     R21, 0
   \   00000054   ........           CALL    ?S_EC_MUL_L02
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000005E   8504               LDD     R16, Z+12
   \   00000060   8515               LDD     R17, Z+13
   \   00000062   0F06               ADD     R16, R22
   \   00000064   1F17               ADC     R17, R23
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   8100               LD      R16, Z
   \   0000006A   1720               CP      R18, R16
   \   0000006C   F419               BRNE    ??CalcDSRxChecksum_2
    879                  return true ;
   \   0000006E   E001               LDI     R16, 1
   \   00000070   E010               LDI     R17, 0
   \   00000072   C002               RJMP    ??CalcDSRxChecksum_3
    880              } else {
    881                  return false ; 
   \                     ??CalcDSRxChecksum_2:
   \   00000074   E000               LDI     R16, 0
   \   00000076   E010               LDI     R17, 0
   \                     ??CalcDSRxChecksum_3:
   \   00000078   E0E4               LDI     R30, 4
   \   0000007A   ........           JMP     ?EPILOGUE_B4_L09
    882              }
    883          }
    884          /*************************************************************************
    885          *
    886          * Check AppData checksum
    887          *
    888          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    889          char CheckADData(char *data)
   \                     CheckADData:
    890          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    891          
    892          	int             cnt ;
    893          	unsigned char   csum, ok ;
    894          
    895          	ok = false ;
   \   00000006   E010               LDI     R17, 0
    896          	csum = 0 ;
   \   00000008   E040               LDI     R20, 0
    897          	for (cnt = 0 ; cnt < 7 ; cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \                     ??CheckADData_0:
   \   0000000E   3087               CPI     R24, 7
   \   00000010   E000               LDI     R16, 0
   \   00000012   0790               CPC     R25, R16
   \   00000014   F49C               BRGE    ??CheckADData_1
    898          		if (*data != 0x00) {
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8100               LD      R16, Z
   \   0000001A   2300               TST     R16
   \   0000001C   F009               BREQ    ??CheckADData_2
    899          			ok = true ;
   \   0000001E   E011               LDI     R17, 1
    900          		}
    901          		csum = crc[csum ^ *data++] ;
   \                     ??CheckADData_2:
   \   00000020   E050               LDI     R21, 0
   \   00000022   912C               LD      R18, X
   \   00000024   E030               LDI     R19, 0
   \   00000026   2742               EOR     R20, R18
   \   00000028   2753               EOR     R21, R19
   \   0000002A   01FA               MOVW    R31:R30, R21:R20
   \   0000002C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000030   ....               LDI     R19, (crc) >> 16
   \   00000032   BF3B               OUT     0x3B, R19
   \   00000034   9146               ELPM    R20, Z
   \   00000036   9611               ADIW    R27:R26, 1
    902          	}
   \   00000038   9601               ADIW    R25:R24, 1
   \   0000003A   CFE9               RJMP    ??CheckADData_0
    903          	if ((csum == *data) && (ok == true)) {
   \                     ??CheckADData_1:
   \   0000003C   910C               LD      R16, X
   \   0000003E   1740               CP      R20, R16
   \   00000040   F421               BRNE    ??CheckADData_3
   \   00000042   3011               CPI     R17, 1
   \   00000044   F411               BRNE    ??CheckADData_3
    904          		return true ;
   \   00000046   E001               LDI     R16, 1
   \   00000048   C001               RJMP    ??CheckADData_4
    905          	} else {
    906          		return false ;
   \                     ??CheckADData_3:
   \   0000004A   E000               LDI     R16, 0
   \                     ??CheckADData_4:
   \   0000004C   E0E4               LDI     R30, 4
   \   0000004E   ........           JMP     ?EPILOGUE_B4_L09
    907          
    908          	}
    909          }
    910          
    911          
    912          /*************************************************************************
    913          *
    914          * Check Eepdata checksum
    915          *
    916          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    917          char CheckEepData(char *data)
   \                     CheckEepData:
    918          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    919          
    920          	int             cnt ;
    921          	unsigned char   csum ;
    922          
    923          	csum = 0 ;
   \   00000006   E020               LDI     R18, 0
    924          	for (cnt = 8 ; cnt < (PACKED_DATA_SIZE -1) ; cnt++) {
   \   00000008   E0A8               LDI     R26, 8
   \   0000000A   E0B0               LDI     R27, 0
   \                     ??CheckEepData_0:
   \   0000000C   32A7               CPI     R26, 39
   \   0000000E   E000               LDI     R16, 0
   \   00000010   07B0               CPC     R27, R16
   \   00000012   F484               BRGE    ??CheckEepData_1
    925          		csum = crc[csum ^ *data++] ;
   \   00000014   2F02               MOV     R16, R18
   \   00000016   E010               LDI     R17, 0
   \   00000018   01FC               MOVW    R31:R30, R25:R24
   \   0000001A   8120               LD      R18, Z
   \   0000001C   E030               LDI     R19, 0
   \   0000001E   2702               EOR     R16, R18
   \   00000020   2713               EOR     R17, R19
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000026   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000028   ....               LDI     R19, (crc) >> 16
   \   0000002A   BF3B               OUT     0x3B, R19
   \   0000002C   9126               ELPM    R18, Z
   \   0000002E   9601               ADIW    R25:R24, 1
    926          	}
   \   00000030   9611               ADIW    R27:R26, 1
   \   00000032   CFEC               RJMP    ??CheckEepData_0
    927          	if (csum == *data) {
   \                     ??CheckEepData_1:
   \   00000034   01FC               MOVW    R31:R30, R25:R24
   \   00000036   8100               LD      R16, Z
   \   00000038   1720               CP      R18, R16
   \   0000003A   F411               BRNE    ??CheckEepData_2
    928          		return true ;
   \   0000003C   E001               LDI     R16, 1
   \   0000003E   C001               RJMP    ??CheckEepData_3
    929          	} else {
    930          		return false ;
   \                     ??CheckEepData_2:
   \   00000040   E000               LDI     R16, 0
   \                     ??CheckEepData_3:
   \   00000042   E0E4               LDI     R30, 4
   \   00000044   ........           JMP     ?EPILOGUE_B4_L09
    931          	}
    932          }
    933          
    934          
    935          /*************************************************************************
    936          *
    937          * Goes to sync mode
    938          *
    939          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    940          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B62F               IN      R2, 0x3F
   \   00000002   94F8               CLI
   \   00000004   2F20               MOV     R18, R16
    941          
    942              if (ch < 2) {
   \   00000006   3022               CPI     R18, 2
   \   00000008   F518               BRCC    ??GoToSyncUART_0
    943                  UART[ch].SyncCnt = 0 ;                        // ready for sync
   \   0000000A   E030               LDI     R19, 0
   \   0000000C   2F02               MOV     R16, R18
   \   0000000E   E010               LDI     R17, 0
   \   00000010   E14D               LDI     R20, 29
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?S_EC_MUL_L02
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001E   8B35               STD     Z+21, R19
    944                  UART[ch].RxState = SYNC ;
   \   00000020   E030               LDI     R19, 0
   \   00000022   2F02               MOV     R16, R18
   \   00000024   E010               LDI     R17, 0
   \   00000026   E14D               LDI     R20, 29
   \   00000028   E050               LDI     R21, 0
   \   0000002A   ........           CALL    ?S_EC_MUL_L02
   \   0000002E   01F8               MOVW    R31:R30, R17:R16
   \   00000030   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000034   8B34               STD     Z+20, R19
    945                  UART[ch].RxFirst = 0 ;
   \   00000036   E060               LDI     R22, 0
   \   00000038   E070               LDI     R23, 0
   \   0000003A   2F02               MOV     R16, R18
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   E14D               LDI     R20, 29
   \   00000040   E050               LDI     R21, 0
   \   00000042   ........           CALL    ?S_EC_MUL_L02
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000004C   8766               STD     Z+14, R22
   \   0000004E   8777               STD     Z+15, R23
    946              }
    947          }
   \                     ??GoToSyncUART_0:
   \   00000050   BE2F               OUT     0x3F, R2
   \   00000052   9508               RET

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "No Rx">>`:
   \   00000000   6F4E52200078       DC8 "No Rx"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant " OK">>`:
   \   00000000   4F20004B           DC8 " OK"

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   3200               DW      12800
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_41) /2
   \   00000005   ....               DW      (??CheckActionUart_5) /2
   \   00000007   01                 DB      0x1
   \   00000008   ....               DW      (??CheckActionUart_7) /2
   \   0000000A   01                 DB      0x1
   \   0000000B   ....               DW      (??CheckActionUart_9) /2
   \   0000000D   01                 DB      0x1
   \   0000000E   ....               DW      (??CheckActionUart_11) /2
   \   00000010   01                 DB      0x1
   \   00000011   ....               DW      (??CheckActionUart_13) /2
   \   00000013   01                 DB      0x1
   \   00000014   ....               DW      (??CheckActionUart_15) /2
   \   00000016   01                 DB      0x1
   \   00000017   ....               DW      (??CheckActionUart_17) /2
   \   00000019   01                 DB      0x1
   \   0000001A   ....               DW      (??CheckActionUart_19) /2
   \   0000001C   01                 DB      0x1
   \   0000001D   ....               DW      (??CheckActionUart_25) /2
   \   0000001F   01                 DB      0x1
   \   00000020   ....               DW      (??CheckActionUart_37) /2
   \   00000022   01                 DB      0x1
   \   00000023   ....               DW      (??CheckActionUart_27) /2
   \   00000025   01                 DB      0x1
   \   00000026   ....               DW      (??CheckActionUart_2) /2
   \   00000028   01                 DB      0x1
   \   00000029   ....               DW      (??CheckActionUart_31) /2
   \   0000002B   01                 DB      0x1
   \   0000002C   ....               DW      (??CheckActionUart_33) /2
   \   0000002E   01                 DB      0x1
   \   0000002F   ....               DW      (??CheckActionUart_29) /2
   \   00000031   02                 DB      0x2
   \   00000032   ....               DW      (??CheckActionUart_21) /2
   \   00000034   01                 DB      0x1
   \   00000035   ....               DW      (??CheckActionUart_23) /2
   \   00000037   01                 DB      0x1
   \   00000038   ....               DW      (??CheckActionUart_35) /2
   \   0000003A   A2                 DB      0xa2
   \   0000003B   ....               DW      (??CheckActionUart_39) /2
   \   0000003D   12                 DB      0x12
   \   0000003E   ....               DW      (??CheckActionUart_40) /2
   \   00000040   FB                 DB      251
   \   00000041   00                 DB      0

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "No Rx">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "No Rx">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant " OK">`:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for <Constant " OK">>`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      8      2   BuildAPWriteData
        8      2   -> ReadEEPROMByte
        8      2   -> WriteEEPROMByte
        8      2 ?S_EC_MUL_L02
      1      2   BuildCardData
        1      2 ?S_EC_MUL_L02
      4      2   BuildDallasData
        4      2 ?S_EC_MUL_L02
      8      2   BuildEEPWriteData
        8      2   -> ReadEEPROMByte
        8      2   -> WriteEEPROMByte
        8      2 ?S_EC_MUL_L02
      4      2   BuildEepData
        4      2 ?S_EC_MUL_L02
      8      2   BuildStackStatus
        8      2   -> OS_GetStackSpace
        8      2 ?S_EC_MUL_L02
      2      2   BuildStatusData
        2      2 ?S_EC_MUL_L02
      4      2   CalcDSRxChecksum
        4      2 ?S_EC_MUL_L02
      4      2   CalcDSTxChecksum
        4      2 ?S_EC_MUL_L02
      4      2   CheckADData
     10      2   CheckActionUart
       10      2   -> BuildAPWriteData
       10      2   -> BuildCardData
       10      2   -> BuildDallasData
       10      2   -> BuildEEPWriteData
       10      2   -> BuildEepData
       10      2   -> BuildStackStatus
       10      2   -> BuildStatusData
       10      2   -> GetGotoBootloader
       10      2   -> PrintComError
       10      2   -> RecAckStatus
       10      2   -> RecAlStatus
       10      2   -> RecDisableDisp
       10      2   -> RecEepData
       10      2   -> RecHiImage
       10      2   -> RecHighText
       10      2   -> RecLoGraph
       10      2   -> RecLowText
       10      2   -> RecPriBarVal
       10      2   -> RecSecBarVal
       10      2   -> RecSetupData
       10      2   -> RecValDisp
       10      2   -> RecXText
       10      2 ?F_MUL_L04
       10      2 ?SV_SWITCH_L06
       10      2 ?S_EC_MUL_L02
       10      2 ?UL2F_L04
      4      2   CheckEepData
      0      2   GetGotoBootloader
      0      2   GoToSyncUART
        0      2 ?S_EC_MUL_L02
      0      2   RecAckStatus
      3      2   RecAlStatus
        3      2   -> RefreshDisplay
        3      2 ?S_EC_MUL_L02
      0      2   RecDisableDisp
        0      2 ?S_EC_MUL_L02
      8      2   RecEepData
        8      2   -> CheckADData
        8      2   -> CheckEepData
        8      2 ?S_EC_MUL_L02
      4      2   RecHiImage
        4      2 ?S_EC_MUL_L02
      1      2   RecHighText
        1      2 ?S_EC_MUL_L02
     10      2   RecLoGraph
       10      2   -> printLoDi
       10      2 ?S_EC_MUL_L02
      5      2   RecLowText
        5      2   -> printLoDi
        5      2 ?S_EC_MUL_L02
      0      2   RecPriBarVal
        0      2 ?S_EC_MUL_L02
      0      2   RecSecBarVal
        0      2 ?S_EC_MUL_L02
      3      2   RecSetupData
        3      2   -> WriteEEPROMByte
        3      2 ?S_EC_MUL_L02
      3      2   RecValDisp
        3      2   -> RefreshDisplay
        3      2 ?S_EC_MUL_L02
      5      2   RecXText
        5      2   -> printXDi
        5      2 ?S_EC_MUL_L02
      4      2   ReceivePacketUart
        4      2   -> CalcDSRxChecksum
        4      2   -> GoToSyncUART
        4      2   -> OS_SignalEvent
        4      2 ?S_EC_MUL_L02
      0      2   TimoutUSART0
        0      2   -> OS_StopTimer
      0      2   Uart_BuildHeader
        0      2 ?S_EC_MUL_L02
      1      2   Uart_BuildTail
        1      2   -> CalcDSTxChecksum
        1      2   -> OS_Delay
        1      2   -> OS_RetriggerTimer
        1      2   -> Uart_BuildHeader
        1      2 ?S_EC_MUL_L02
      2      2   Usart0Handler
        2      2   -> GoToSyncUART
        2      2   -> OS_Unuse
        2      2   -> OS_Use
        2      2   -> OS_WaitEventTimed
        2      2   -> PrintComError
        2      2   -> UsartCheckPackage
      4      2   UsartCheckPackage
        4      2   -> CheckActionUart
        4      2   -> GoToSyncUART
        4      2   -> OS_Delay
        4      2   -> Uart_BuildTail
        4      2 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant " OK">
       6  ?<Constant "No Rx">
       4  ?<Initializer for <Constant " OK">>
       6  ?<Initializer for <Constant "No Rx">>
      66  ?<Jumptable for CheckActionUart>_0
     476  BuildAPWriteData
     488  BuildCardData
     418  BuildDallasData
     476  BuildEEPWriteData
     424  BuildEepData
    1238  BuildStackStatus
    1260  BuildStatusData
     126  CalcDSRxChecksum
      82  CalcDSTxChecksum
      82  CheckADData
    1236  CheckActionUart
      72  CheckEepData
      34  GetGotoBootloader
      84  GoToSyncUART
      12  RecAckStatus
      64  RecAlStatus
     124  RecDisableDisp
     182  RecEepData
     132  RecHiImage
     262  RecHighText
     326  RecLoGraph
     296  RecLowText
     120  RecPriBarVal
     130  RecSecBarVal
      90  RecSetupData
     134  RecValDisp
     260  RecXText
     698  ReceivePacketUart
      14  TimoutUSART0
     276  Uart_BuildHeader
     682  Uart_BuildTail
      94  Usart0Handler
     192  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_WDTCR
       7  -- Other

 
      7 bytes in segment ABSOLUTE
 10 584 bytes in segment CODE
      7 bytes in segment INITTAB
     10 bytes in segment NEAR_I
     10 bytes in segment NEAR_ID
     66 bytes in segment SWITCH
 
 10 660 bytes of CODE memory (+ 7 bytes shared)
     10 bytes of DATA memory (+ 7 bytes shared)

Errors: none
Warnings: none
