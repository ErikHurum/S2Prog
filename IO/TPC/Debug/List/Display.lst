###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            23/Jan/2017  11:21:34
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\TPC\Src\Display.c
#    Command line =  
#        D:\S2Prog\IO\TPC\Src\Display.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\TPC\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\TPC\Debug\List -y --initializers_in_flash --no_cse
#        --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\TPC\INC\ -I
#        D:\S2Prog\IO\TPC\..\..\SHARED\INC\ --eeprom_size 4096 --clib -On
#    List file    =  D:\S2Prog\IO\TPC\Debug\List\Display.lst
#    Object file  =  D:\S2Prog\IO\TPC\Debug\Obj\Display.r90
#
###############################################################################

D:\S2Prog\IO\TPC\Src\Display.c
      1          /****************************************************************************************
      2          /  Display. routines
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          
     14          /*************************************************************************
     15          *   (This is a task)
     16          *  Info-rmation
     17          *
     18          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     19          void Info(void) {
   \                     Info:
   \   00000000   9727               SBIW    R29:R28, 7
     20              char Buf[7];
     21          
     22              Buf[0] = 'V';
   \   00000002   E506               LDI     R16, 86
   \   00000004   8308               ST      Y, R16
     23              Buf[1] = '-';
   \   00000006   E20D               LDI     R16, 45
   \   00000008   8309               STD     Y+1, R16
     24              CharToAscii(PROG_VERSION, &Buf[2]);
   \   0000000A   019E               MOVW    R19:R18, R29:R28
   \   0000000C   5F2E               SUBI    R18, 254
   \   0000000E   4F3F               SBCI    R19, 255
   \   00000010   E10B               LDI     R16, 27
   \   00000012   ........           CALL    CharToAscii
     25              Buf[5] = 0;
   \   00000016   E000               LDI     R16, 0
   \   00000018   830D               STD     Y+5, R16
     26              PrintComError(Buf, ALARM_OFF);      //AStmark test only
   \   0000001A   E020               LDI     R18, 0
   \   0000001C   018E               MOVW    R17:R16, R29:R28
   \   0000001E   ....               RCALL   PrintComError
     27              OS_Delay(4000);
   \   00000020   EA00               LDI     R16, 160
   \   00000022   E01F               LDI     R17, 15
   \   00000024   ........           CALL    OS_Delay
     28              CharToAscii(MyPriAddress, &Buf[0]);
   \   00000028   019E               MOVW    R19:R18, R29:R28
   \   0000002A   9100....           LDS     R16, MyPriAddress
   \   0000002E   ........           CALL    CharToAscii
     29              Buf[0] = Buf[1];                    // rotate left due to max 2 char in address
   \   00000032   8109               LDD     R16, Y+1
   \   00000034   8308               ST      Y, R16
     30              Buf[1] = Buf[2];
   \   00000036   810A               LDD     R16, Y+2
   \   00000038   8309               STD     Y+1, R16
     31              Buf[2] = ' ';
   \   0000003A   E200               LDI     R16, 32
   \   0000003C   830A               STD     Y+2, R16
     32              CharToAscii(MySecAddress, &Buf[3]);
   \   0000003E   019E               MOVW    R19:R18, R29:R28
   \   00000040   5F2D               SUBI    R18, 253
   \   00000042   4F3F               SBCI    R19, 255
   \   00000044   9100....           LDS     R16, MySecAddress
   \   00000048   ........           CALL    CharToAscii
     33              Buf[6] = 0;
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   830E               STD     Y+6, R16
     34              PrintComError(Buf, ALARM_OFF);      //AStmark test only
   \   00000050   E020               LDI     R18, 0
   \   00000052   018E               MOVW    R17:R16, R29:R28
   \   00000054   ....               RCALL   PrintComError
     35          
     36              while (1) {
     37                  OS_WaitEvent(1);  // wait for keyhit
   \                     ??Info_0:
   \   00000056   E001               LDI     R16, 1
   \   00000058   ........           CALL    OS_WaitEvent
     38                  kbd_delay_cnt = true ;
   \   0000005C   E001               LDI     R16, 1
   \   0000005E   9300....           STS     kbd_delay_cnt, R16
     39                  OS_Delay(250);
   \   00000062   EF0A               LDI     R16, 250
   \   00000064   E010               LDI     R17, 0
   \   00000066   ........           CALL    OS_Delay
     40                  kbd_delay_cnt = false ;
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   9300....           STS     kbd_delay_cnt, R16
   \   00000070   CFF2               RJMP    ??Info_0
     41              }
     42          }
     43          
     44          /*************************************************************************
     45          *   (This is a task)
     46          *  Display blink
     47          *
     48          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     49          void DisplayBlink(void) {
   \                     DisplayBlink:
   \                     ??DisplayBlink_0:
     50          
     51              while (1) {
     52                  OS_Delay(125);
   \   00000000   E70D               LDI     R16, 125
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    OS_Delay
     53                  BlinkStatus = 0x7f;
   \   00000008   E70F               LDI     R16, 127
   \   0000000A   9300....           STS     BlinkStatus, R16
     54                  OS_Delay(125*3);
   \   0000000E   E707               LDI     R16, 119
   \   00000010   E011               LDI     R17, 1
   \   00000012   ........           CALL    OS_Delay
     55                  BlinkStatus = 0x00;
   \   00000016   E000               LDI     R16, 0
   \   00000018   9300....           STS     BlinkStatus, R16
   \   0000001C   CFF1               RJMP    ??DisplayBlink_0
     56              }
     57          }
     58          
     59          /*************************************************************************
     60          *   (This is a task)
     61          *  Display handler
     62          *
     63          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     64          void DisplayHandler(void) {
   \                     DisplayHandler:
   \                     ??DisplayHandler_0:
     65              static char pointer = 0, alarmLEDImg=0 ;
     66          
     67              while (1) {
     68                  OS_Delay(5);
   \   00000000   E005               LDI     R16, 5
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    OS_Delay
     69          
     70                  switch (UnitID) {
   \   00000008   9100....           LDS     R16, UnitID
   \   0000000C   5001               SUBI    R16, 1
   \   0000000E   F021               BREQ    ??DisplayHandler_1
   \   00000010   500F               SUBI    R16, 15
   \   00000012   F409               BRNE    $+2+2
   \   00000014   C0BC               RJMP    ??DisplayHandler_2
   \   00000016   C127               RJMP    ??DisplayHandler_3
     71                  /*     case TPC350:
     72                           PDR5 &= ~0x7f ;                                     // display driver off
     73                           if (Disp.image[pointer + 25] & 0x80) {                // Upper sergment and flashing ??
     74                               PDR6 = (~(Disp.image[pointer + 25] & flash)& 0x7f  ) ;
     75                           } else {
     76                               PDR6 = (~Disp.image[pointer + 25] & 0x7f ) ;
     77                           }
     78                           PDR6 |= 0x80 ;                                      // write pulse
     79                           PDR6 &= ~0x80 ;
     80                           if (Disp.image[pointer] & 0x80) {                     // Lower segment and flashing ??
     81                               PDR6 = (~(Disp.image[pointer] & flash)& 0x7f  ) ;
     82                           } else {
     83                               PDR6 = (~Disp.image[pointer] & 0x7f ) ;
     84                           }
     85                           PDR5 |= (pointer & 0x07) ;                          // set sinc drive
     86                           PDR5 |= DispDrv350[(pointer >> 3) & 0x03] ;
     87                           if (++pointer >= 25) {
     88                               pointer = 0 ;                                   // start over again
     89                           }
     90                           break;
     91                 */
     92                  case TPC196:
     93                     // PORTA = 0x00 ;
     94                     // PORTC = 0x00 ;
     95                      ClrBit(PORTG, 0x0f) ;                 
   \                     ??DisplayHandler_1:
   \   00000018   9100....           LDS     R16, _A_PORTG
   \   0000001C   7F00               ANDI    R16, 0xF0
   \   0000001E   9300....           STS     _A_PORTG, R16
     96          
     97                      if (pointer < 20) {
   \   00000022   9100....           LDS     R16, ??pointer
   \   00000026   3104               CPI     R16, 20
   \   00000028   F008               BRCS    $+2+2
   \   0000002A   C066               RJMP    ??DisplayHandler_4
     98                          PORTD = ~Disp.image[pointer + 20] ;                    // No flasing due to . is 0x80
   \   0000002C   9100....           LDS     R16, ??pointer
   \   00000030   E010               LDI     R17, 0
   \   00000032   0F00               LSL     R16
   \   00000034   1F11               ROL     R17
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   0000003C   A500               LDD     R16, Z+40
   \   0000003E   A511               LDD     R17, Z+41
   \   00000040   9500               COM     R16
   \   00000042   BB02               OUT     0x12, R16
     99                          PORTB |= 0x80 ;                                      // write pulse - LE
   \   00000044   9AC7               SBI     0x18, 0x07
    100                          PORTB &= ~0x80 ;
   \   00000046   98C7               CBI     0x18, 0x07
    101                          if (Disp.image[pointer] & 0x80) {                     // flashing
   \   00000048   9100....           LDS     R16, ??pointer
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   0F00               LSL     R16
   \   00000050   1F11               ROL     R17
   \   00000052   01F8               MOVW    R31:R30, R17:R16
   \   00000054   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   00000058   8100               LD      R16, Z
   \   0000005A   FF07               SBRS    R16, 7
   \   0000005C   C011               RJMP    ??DisplayHandler_5
    102                              PORTD = ~(Disp.image[pointer]  & 0x7f & BlinkStatus)  ;
   \   0000005E   9100....           LDS     R16, ??pointer
   \   00000062   E010               LDI     R17, 0
   \   00000064   0F00               LSL     R16
   \   00000066   1F11               ROL     R17
   \   00000068   01F8               MOVW    R31:R30, R17:R16
   \   0000006A   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   0000006E   8100               LD      R16, Z
   \   00000070   8111               LDD     R17, Z+1
   \   00000072   9110....           LDS     R17, BlinkStatus
   \   00000076   2301               AND     R16, R17
   \   00000078   770F               ANDI    R16, 0x7F
   \   0000007A   9500               COM     R16
   \   0000007C   BB02               OUT     0x12, R16
   \   0000007E   C00D               RJMP    ??DisplayHandler_6
    103                          } else {
    104                              PORTD = ~(Disp.image[pointer] & 0x7f ) ;
   \                     ??DisplayHandler_5:
   \   00000080   9100....           LDS     R16, ??pointer
   \   00000084   E010               LDI     R17, 0
   \   00000086   0F00               LSL     R16
   \   00000088   1F11               ROL     R17
   \   0000008A   01F8               MOVW    R31:R30, R17:R16
   \   0000008C   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   00000090   8100               LD      R16, Z
   \   00000092   8111               LDD     R17, Z+1
   \   00000094   770F               ANDI    R16, 0x7F
   \   00000096   9500               COM     R16
   \   00000098   BB02               OUT     0x12, R16
    105                          }
    106                          PORTA = DispDrv140[pointer][0];                      // Use the same decoding as tPC140
   \                     ??DisplayHandler_6:
   \   0000009A   9140....           LDS     R20, ??pointer
   \   0000009E   E050               LDI     R21, 0
   \   000000A0   E003               LDI     R16, 3
   \   000000A2   E010               LDI     R17, 0
   \   000000A4   ........           CALL    ?S_EC_MUL_L02
   \   000000A8   01F8               MOVW    R31:R30, R17:R16
   \   000000AA   ....               SUBI    R30, LOW((-(DispDrv140) & 0xFFFFFF))
   \   000000AC   ....               SBCI    R31, HIGH((-(DispDrv140) & 0xFFFFFF))
   \   000000AE   ....               LDI     R19, (DispDrv140) >> 16
   \   000000B0   BF3B               OUT     0x3B, R19
   \   000000B2   9106               ELPM    R16, Z
   \   000000B4   BB0B               OUT     0x1B, R16
    107                          PORTC = DispDrv140[pointer][1];
   \   000000B6   9140....           LDS     R20, ??pointer
   \   000000BA   E050               LDI     R21, 0
   \   000000BC   E003               LDI     R16, 3
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
   \   000000C4   01F8               MOVW    R31:R30, R17:R16
   \   000000C6   ....               SUBI    R30, LOW((-(DispDrv140 + 1) & 0xFFFFFF))
   \   000000C8   ....               SBCI    R31, HIGH((-(DispDrv140 + 1) & 0xFFFFFF))
   \   000000CA   ....               LDI     R19, BYTE3(DispDrv140)
   \   000000CC   BF3B               OUT     0x3B, R19
   \   000000CE   9106               ELPM    R16, Z
   \   000000D0   BB05               OUT     0x15, R16
    108                          SetBit(PORTG, DispDrv140[pointer][2]);
   \   000000D2   9140....           LDS     R20, ??pointer
   \   000000D6   E050               LDI     R21, 0
   \   000000D8   E003               LDI     R16, 3
   \   000000DA   E010               LDI     R17, 0
   \   000000DC   ........           CALL    ?S_EC_MUL_L02
   \   000000E0   01F8               MOVW    R31:R30, R17:R16
   \   000000E2   ....               SUBI    R30, LOW((-(DispDrv140 + 2) & 0xFFFFFF))
   \   000000E4   ....               SBCI    R31, HIGH((-(DispDrv140 + 2) & 0xFFFFFF))
   \   000000E6   ....               LDI     R19, BYTE3(DispDrv140)
   \   000000E8   BF3B               OUT     0x3B, R19
   \   000000EA   9106               ELPM    R16, Z
   \   000000EC   9110....           LDS     R17, _A_PORTG
   \   000000F0   2B10               OR      R17, R16
   \   000000F2   9310....           STS     _A_PORTG, R17
   \   000000F6   C03E               RJMP    ??DisplayHandler_7
    109          
    110                      } else {                                // another run for the green and yellow
    111                          PORTD = ~Disp.image[pointer] ;                    // No flasing due to . is 0x80
   \                     ??DisplayHandler_4:
   \   000000F8   9100....           LDS     R16, ??pointer
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   0F00               LSL     R16
   \   00000100   1F11               ROL     R17
   \   00000102   01F8               MOVW    R31:R30, R17:R16
   \   00000104   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   00000106   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   00000108   8100               LD      R16, Z
   \   0000010A   8111               LDD     R17, Z+1
   \   0000010C   9500               COM     R16
   \   0000010E   BB02               OUT     0x12, R16
    112                          PORTB |= 0x80 ;                                      // write pulse - LE
   \   00000110   9AC7               SBI     0x18, 0x07
    113                          PORTB &= ~0x80 ;
   \   00000112   98C7               CBI     0x18, 0x07
    114                          PORTD = 0x7f ;
   \   00000114   E70F               LDI     R16, 127
   \   00000116   BB02               OUT     0x12, R16
    115                          PORTA = DispDrv140[pointer-20][0];                      // Use the same decoding as tPC140
   \   00000118   9140....           LDS     R20, ??pointer
   \   0000011C   E050               LDI     R21, 0
   \   0000011E   E003               LDI     R16, 3
   \   00000120   E010               LDI     R17, 0
   \   00000122   ........           CALL    ?S_EC_MUL_L02
   \   00000126   01F8               MOVW    R31:R30, R17:R16
   \   00000128   ....               SUBI    R30, LOW((-(DispDrv140 - 60) & 0xFFFFFF))
   \   0000012A   ....               SBCI    R31, HIGH((-(DispDrv140 - 60) & 0xFFFFFF))
   \   0000012C   ....               LDI     R19, BYTE3(DispDrv140)
   \   0000012E   BF3B               OUT     0x3B, R19
   \   00000130   9106               ELPM    R16, Z
   \   00000132   BB0B               OUT     0x1B, R16
    116                          PORTC = DispDrv140[pointer-20][1];
   \   00000134   9140....           LDS     R20, ??pointer
   \   00000138   E050               LDI     R21, 0
   \   0000013A   E003               LDI     R16, 3
   \   0000013C   E010               LDI     R17, 0
   \   0000013E   ........           CALL    ?S_EC_MUL_L02
   \   00000142   01F8               MOVW    R31:R30, R17:R16
   \   00000144   ....               SUBI    R30, LOW((-(DispDrv140 - 59) & 0xFFFFFF))
   \   00000146   ....               SBCI    R31, HIGH((-(DispDrv140 - 59) & 0xFFFFFF))
   \   00000148   ....               LDI     R19, BYTE3(DispDrv140)
   \   0000014A   BF3B               OUT     0x3B, R19
   \   0000014C   9106               ELPM    R16, Z
   \   0000014E   BB05               OUT     0x15, R16
    117                          SetBit(PORTG, DispDrv140[pointer-20][2]);
   \   00000150   9140....           LDS     R20, ??pointer
   \   00000154   E050               LDI     R21, 0
   \   00000156   E003               LDI     R16, 3
   \   00000158   E010               LDI     R17, 0
   \   0000015A   ........           CALL    ?S_EC_MUL_L02
   \   0000015E   01F8               MOVW    R31:R30, R17:R16
   \   00000160   ....               SUBI    R30, LOW((-(DispDrv140 - 58) & 0xFFFFFF))
   \   00000162   ....               SBCI    R31, HIGH((-(DispDrv140 - 58) & 0xFFFFFF))
   \   00000164   ....               LDI     R19, BYTE3(DispDrv140)
   \   00000166   BF3B               OUT     0x3B, R19
   \   00000168   9106               ELPM    R16, Z
   \   0000016A   9110....           LDS     R17, _A_PORTG
   \   0000016E   2B10               OR      R17, R16
   \   00000170   9310....           STS     _A_PORTG, R17
    118                      }
    119                      if (++pointer >= 28) {
   \                     ??DisplayHandler_7:
   \   00000174   9100....           LDS     R16, ??pointer
   \   00000178   9503               INC     R16
   \   0000017A   9300....           STS     ??pointer, R16
   \   0000017E   9100....           LDS     R16, ??pointer
   \   00000182   310C               CPI     R16, 28
   \   00000184   F018               BRCS    ??DisplayHandler_8
    120                          pointer = 0 ;                                   // start over again
   \   00000186   E000               LDI     R16, 0
   \   00000188   9300....           STS     ??pointer, R16
    121                      }
    122                      break;
   \                     ??DisplayHandler_8:
   \   0000018C   C06C               RJMP    ??DisplayHandler_3
    123                  case TPC140:
    124                      PORTA = 0x00 ;
   \                     ??DisplayHandler_2:
   \   0000018E   E000               LDI     R16, 0
   \   00000190   BB0B               OUT     0x1B, R16
    125                      PORTC = 0x00 ;
   \   00000192   E000               LDI     R16, 0
   \   00000194   BB05               OUT     0x15, R16
    126                      ClrBit(PORTG, 0x0f) ;                 
   \   00000196   9100....           LDS     R16, _A_PORTG
   \   0000019A   7F00               ANDI    R16, 0xF0
   \   0000019C   9300....           STS     _A_PORTG, R16
    127                      if (Disp.image[pointer] & 0x80) {                     // flashing
   \   000001A0   9100....           LDS     R16, ??pointer
   \   000001A4   E010               LDI     R17, 0
   \   000001A6   0F00               LSL     R16
   \   000001A8   1F11               ROL     R17
   \   000001AA   01F8               MOVW    R31:R30, R17:R16
   \   000001AC   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   000001AE   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   000001B0   8100               LD      R16, Z
   \   000001B2   FF07               SBRS    R16, 7
   \   000001B4   C011               RJMP    ??DisplayHandler_9
    128                          PORTD = ~((Disp.image[pointer]  & 0x7f & BlinkStatus) << 1)  ;
   \   000001B6   9100....           LDS     R16, ??pointer
   \   000001BA   E010               LDI     R17, 0
   \   000001BC   0F00               LSL     R16
   \   000001BE   1F11               ROL     R17
   \   000001C0   01F8               MOVW    R31:R30, R17:R16
   \   000001C2   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   000001C4   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   000001C6   8100               LD      R16, Z
   \   000001C8   8111               LDD     R17, Z+1
   \   000001CA   9110....           LDS     R17, BlinkStatus
   \   000001CE   2301               AND     R16, R17
   \   000001D0   0F00               LSL     R16
   \   000001D2   9500               COM     R16
   \   000001D4   BB02               OUT     0x12, R16
   \   000001D6   C00D               RJMP    ??DisplayHandler_10
    129                      } else {
    130                          PORTD = ~((Disp.image[pointer] & 0x7f ) << 1) ;
   \                     ??DisplayHandler_9:
   \   000001D8   9100....           LDS     R16, ??pointer
   \   000001DC   E010               LDI     R17, 0
   \   000001DE   0F00               LSL     R16
   \   000001E0   1F11               ROL     R17
   \   000001E2   01F8               MOVW    R31:R30, R17:R16
   \   000001E4   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   000001E6   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   000001E8   8100               LD      R16, Z
   \   000001EA   8111               LDD     R17, Z+1
   \   000001EC   0F00               LSL     R16
   \   000001EE   9500               COM     R16
   \   000001F0   BB02               OUT     0x12, R16
    131                      }
    132                      PORTA = DispDrv140[pointer][0];
   \                     ??DisplayHandler_10:
   \   000001F2   9140....           LDS     R20, ??pointer
   \   000001F6   E050               LDI     R21, 0
   \   000001F8   E003               LDI     R16, 3
   \   000001FA   E010               LDI     R17, 0
   \   000001FC   ........           CALL    ?S_EC_MUL_L02
   \   00000200   01F8               MOVW    R31:R30, R17:R16
   \   00000202   ....               SUBI    R30, LOW((-(DispDrv140) & 0xFFFFFF))
   \   00000204   ....               SBCI    R31, HIGH((-(DispDrv140) & 0xFFFFFF))
   \   00000206   ....               LDI     R19, (DispDrv140) >> 16
   \   00000208   BF3B               OUT     0x3B, R19
   \   0000020A   9106               ELPM    R16, Z
   \   0000020C   BB0B               OUT     0x1B, R16
    133                      PORTC = DispDrv140[pointer][1];
   \   0000020E   9140....           LDS     R20, ??pointer
   \   00000212   E050               LDI     R21, 0
   \   00000214   E003               LDI     R16, 3
   \   00000216   E010               LDI     R17, 0
   \   00000218   ........           CALL    ?S_EC_MUL_L02
   \   0000021C   01F8               MOVW    R31:R30, R17:R16
   \   0000021E   ....               SUBI    R30, LOW((-(DispDrv140 + 1) & 0xFFFFFF))
   \   00000220   ....               SBCI    R31, HIGH((-(DispDrv140 + 1) & 0xFFFFFF))
   \   00000222   ....               LDI     R19, BYTE3(DispDrv140)
   \   00000224   BF3B               OUT     0x3B, R19
   \   00000226   9106               ELPM    R16, Z
   \   00000228   BB05               OUT     0x15, R16
    134                      SetBit(PORTG, DispDrv140[pointer][2]) ;
   \   0000022A   9140....           LDS     R20, ??pointer
   \   0000022E   E050               LDI     R21, 0
   \   00000230   E003               LDI     R16, 3
   \   00000232   E010               LDI     R17, 0
   \   00000234   ........           CALL    ?S_EC_MUL_L02
   \   00000238   01F8               MOVW    R31:R30, R17:R16
   \   0000023A   ....               SUBI    R30, LOW((-(DispDrv140 + 2) & 0xFFFFFF))
   \   0000023C   ....               SBCI    R31, HIGH((-(DispDrv140 + 2) & 0xFFFFFF))
   \   0000023E   ....               LDI     R19, BYTE3(DispDrv140)
   \   00000240   BF3B               OUT     0x3B, R19
   \   00000242   9106               ELPM    R16, Z
   \   00000244   9110....           LDS     R17, _A_PORTG
   \   00000248   2B10               OR      R17, R16
   \   0000024A   9310....           STS     _A_PORTG, R17
    135                      if (++pointer >= 20) {
   \   0000024E   9100....           LDS     R16, ??pointer
   \   00000252   9503               INC     R16
   \   00000254   9300....           STS     ??pointer, R16
   \   00000258   9100....           LDS     R16, ??pointer
   \   0000025C   3104               CPI     R16, 20
   \   0000025E   F018               BRCS    ??DisplayHandler_3
    136                          pointer = 0 ;                                   // start over again
   \   00000260   E000               LDI     R16, 0
   \   00000262   9300....           STS     ??pointer, R16
    137                      }
    138                      break;
    139                  default:
    140                      break;
    141                  }
    142                  if (Disp.alarmLED == ALARM_FLASH) {
   \                     ??DisplayHandler_3:
   \   00000266   9100....           LDS     R16, (Disp + 1751)
   \   0000026A   3002               CPI     R16, 2
   \   0000026C   F479               BRNE    ??DisplayHandler_11
    143                      if (BlinkStatus) {
   \   0000026E   9100....           LDS     R16, BlinkStatus
   \   00000272   2300               TST     R16
   \   00000274   F031               BREQ    ??DisplayHandler_12
    144                          SetBit(PORTG, ALARM_LED) ;
   \   00000276   91000065           LDS     R16, 101
   \   0000027A   6100               ORI     R16, 0x10
   \   0000027C   93000065           STS     101, R16
   \   00000280   C005               RJMP    ??DisplayHandler_11
    145                      } else {
    146                          ClrBit(PORTG, ALARM_LED) ;
   \                     ??DisplayHandler_12:
   \   00000282   91000065           LDS     R16, 101
   \   00000286   7E0F               ANDI    R16, 0xEF
   \   00000288   93000065           STS     101, R16
    147                      }
    148                  }
    149                  if (Disp.alarmLED != alarmLEDImg) {
   \                     ??DisplayHandler_11:
   \   0000028C   9100....           LDS     R16, (Disp + 1751)
   \   00000290   9110....           LDS     R17, ??alarmLEDImg
   \   00000294   1701               CP      R16, R17
   \   00000296   F409               BRNE    $+2+2
   \   00000298   CEB3               RJMP    ??DisplayHandler_0
    150                      switch (Disp.alarmLED) {
   \   0000029A   9100....           LDS     R16, (Disp + 1751)
   \   0000029E   5000               SUBI    R16, 0
   \   000002A0   F089               BREQ    ??DisplayHandler_13
   \   000002A2   950A               DEC     R16
   \   000002A4   F019               BREQ    ??DisplayHandler_14
   \   000002A6   950A               DEC     R16
   \   000002A8   F039               BREQ    ??DisplayHandler_15
   \   000002AA   C011               RJMP    ??DisplayHandler_16
    151                      case ALARM_ON:
    152                          SetBit(PORTG, ALARM_LED) ;
   \                     ??DisplayHandler_14:
   \   000002AC   91000065           LDS     R16, 101
   \   000002B0   6100               ORI     R16, 0x10
   \   000002B2   93000065           STS     101, R16
    153                          break;
   \   000002B6   C00B               RJMP    ??DisplayHandler_16
    154                      case ALARM_FLASH :
    155                          SetBit(PORTG, ALARM_LED) ;
   \                     ??DisplayHandler_15:
   \   000002B8   91000065           LDS     R16, 101
   \   000002BC   6100               ORI     R16, 0x10
   \   000002BE   93000065           STS     101, R16
    156                          break;
   \   000002C2   C005               RJMP    ??DisplayHandler_16
    157                      case ALARM_OFF:
    158                          ClrBit(PORTG, ALARM_LED) ;
   \                     ??DisplayHandler_13:
   \   000002C4   91000065           LDS     R16, 101
   \   000002C8   7E0F               ANDI    R16, 0xEF
   \   000002CA   93000065           STS     101, R16
    159                          break;
    160                      }
    161                      alarmLEDImg = Disp.alarmLED ;
   \                     ??DisplayHandler_16:
   \   000002CE   9100....           LDS     R16, (Disp + 1751)
   \   000002D2   9300....           STS     ??alarmLEDImg, R16
   \   000002D6   CE94               RJMP    ??DisplayHandler_0
   \   000002D8                      REQUIRE _A_PORTG
   \   000002D8                      REQUIRE _A_PORTD
   \   000002D8                      REQUIRE _A_PORTB
   \   000002D8                      REQUIRE _A_PORTA
   \   000002D8                      REQUIRE _A_PORTC
    162                  }
    163              }
    164          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??pointer:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??alarmLEDImg:
   \   00000000                      DS8 1
    165          
    166          /*************************************************************************
    167          *
    168          *  Build Low display image
    169          *
    170          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    171          void printLoDi(char val){
   \                     printLoDi:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   9764               SBIW    R29:R28, 20
   \   00000006   2E20               MOV     R2, R16
    172              char i,j, nop, pos, nob, ct, LEDDum[20];
    173              if ((Disp.lo_grdata[20] == val) && (val != ALARM_VT)) {  // graph to display 
   \   00000008   9100....           LDS     R16, (Disp + 1750)
   \   0000000C   1502               CP      R16, R2
   \   0000000E   F009               BREQ    $+2+2
   \   00000010   C061               RJMP    ??printLoDi_0
   \   00000012   2022               TST     R2
   \   00000014   F409               BRNE    $+2+2
   \   00000016   C05E               RJMP    ??printLoDi_0
    174                  for (i=0; i < 20; i++) {
   \   00000018   E080               LDI     R24, 0
   \                     ??printLoDi_1:
   \   0000001A   3184               CPI     R24, 20
   \   0000001C   F470               BRCC    ??printLoDi_2
    175                      LEDDum[i] = Disp.lo_grdata[i] ;                  // copy graph
   \   0000001E   2F08               MOV     R16, R24
   \   00000020   E010               LDI     R17, 0
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   ....               SUBI    R30, LOW((-(Disp + 1730) & 0xFFFF))
   \   00000026   ....               SBCI    R31, HIGH((-(Disp + 1730) & 0xFFFF))
   \   00000028   8120               LD      R18, Z
   \   0000002A   01FE               MOVW    R31:R30, R29:R28
   \   0000002C   2F08               MOV     R16, R24
   \   0000002E   E010               LDI     R17, 0
   \   00000030   0FE0               ADD     R30, R16
   \   00000032   1FF1               ADC     R31, R17
   \   00000034   8320               ST      Z, R18
    176                  }
   \   00000036   9583               INC     R24
   \   00000038   CFF0               RJMP    ??printLoDi_1
    177                  if (UnitID == TPC140) {                        // Mirror byte
   \                     ??printLoDi_2:
   \   0000003A   9100....           LDS     R16, UnitID
   \   0000003E   3100               CPI     R16, 16
   \   00000040   F599               BRNE    ??printLoDi_3
    178                      for (j = 0 ; j < 20 ; j++) {
   \   00000042   E0A0               LDI     R26, 0
   \                     ??printLoDi_4:
   \   00000044   31A4               CPI     R26, 20
   \   00000046   F580               BRCC    ??printLoDi_3
    179                          ct = 0x00;
   \   00000048   E090               LDI     R25, 0
    180                          if (LEDDum[j] & 0x80) {
   \   0000004A   01FE               MOVW    R31:R30, R29:R28
   \   0000004C   2F0A               MOV     R16, R26
   \   0000004E   E010               LDI     R17, 0
   \   00000050   0FE0               ADD     R30, R16
   \   00000052   1FF1               ADC     R31, R17
   \   00000054   8100               LD      R16, Z
   \   00000056   FF07               SBRS    R16, 7
   \   00000058   C002               RJMP    ??printLoDi_5
    181                              ct |= 0x01 ;
   \   0000005A   6091               ORI     R25, 0x01
   \   0000005C   E001               LDI     R16, 1
    182                          }
    183                          for (i=0 ; i < 7 ; i++) {
   \                     ??printLoDi_5:
   \   0000005E   E080               LDI     R24, 0
   \                     ??printLoDi_6:
   \   00000060   3087               CPI     R24, 7
   \   00000062   F4D0               BRCC    ??printLoDi_7
    184                              ct <<= 1 ;
   \   00000064   0F99               LSL     R25
    185                              if (LEDDum[j] & 0x01) {
   \   00000066   01FE               MOVW    R31:R30, R29:R28
   \   00000068   2F0A               MOV     R16, R26
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   0FE0               ADD     R30, R16
   \   0000006E   1FF1               ADC     R31, R17
   \   00000070   8100               LD      R16, Z
   \   00000072   FF00               SBRS    R16, 0
   \   00000074   C002               RJMP    ??printLoDi_8
    186                                  ct |= 0x01 ;
   \   00000076   6091               ORI     R25, 0x01
   \   00000078   E001               LDI     R16, 1
    187                              }
    188                              LEDDum[j] >>= 1 ;
   \                     ??printLoDi_8:
   \   0000007A   01FE               MOVW    R31:R30, R29:R28
   \   0000007C   2F0A               MOV     R16, R26
   \   0000007E   E010               LDI     R17, 0
   \   00000080   0FE0               ADD     R30, R16
   \   00000082   1FF1               ADC     R31, R17
   \   00000084   8120               LD      R18, Z
   \   00000086   9526               LSR     R18
   \   00000088   01FE               MOVW    R31:R30, R29:R28
   \   0000008A   2F0A               MOV     R16, R26
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   0FE0               ADD     R30, R16
   \   00000090   1FF1               ADC     R31, R17
   \   00000092   8320               ST      Z, R18
    189                          }
   \   00000094   9583               INC     R24
   \   00000096   CFE4               RJMP    ??printLoDi_6
    190                          LEDDum[j] = ct ;
   \                     ??printLoDi_7:
   \   00000098   01FE               MOVW    R31:R30, R29:R28
   \   0000009A   2F0A               MOV     R16, R26
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   0FE0               ADD     R30, R16
   \   000000A0   1FF1               ADC     R31, R17
   \   000000A2   8390               ST      Z, R25
    191                      }
   \   000000A4   95A3               INC     R26
   \   000000A6   CFCE               RJMP    ??printLoDi_4
    192                  }
    193                  for (i=0; i < 20; i++) {
   \                     ??printLoDi_3:
   \   000000A8   E080               LDI     R24, 0
   \                     ??printLoDi_9:
   \   000000AA   3184               CPI     R24, 20
   \   000000AC   F008               BRCS    $+2+2
   \   000000AE   C181               RJMP    ??printLoDi_10
    194                      Disp.image[i] = LEDDum[i] ;                   // disp if
   \   000000B0   01FE               MOVW    R31:R30, R29:R28
   \   000000B2   2F08               MOV     R16, R24
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   0FE0               ADD     R30, R16
   \   000000B8   1FF1               ADC     R31, R17
   \   000000BA   8120               LD      R18, Z
   \   000000BC   E030               LDI     R19, 0
   \   000000BE   2F08               MOV     R16, R24
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   0F00               LSL     R16
   \   000000C4   1F11               ROL     R17
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   000000CC   8320               ST      Z, R18
   \   000000CE   8331               STD     Z+1, R19
    195                  }
   \   000000D0   9583               INC     R24
   \   000000D2   CFEB               RJMP    ??printLoDi_9
    196              } else {
    197                  nob = Disp.lo_data[val][0];                          // no of char to disp
   \                     ??printLoDi_0:
   \   000000D4   2D02               MOV     R16, R2
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   E048               LDI     R20, 8
   \   000000DA   E050               LDI     R21, 0
   \   000000DC   ........           CALL    ?S_EC_MUL_L02
   \   000000E0   01F8               MOVW    R31:R30, R17:R16
   \   000000E2   ....               SUBI    R30, LOW((-(Disp + 200) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, HIGH((-(Disp + 200) & 0xFFFF))
   \   000000E6   8100               LD      R16, Z
   \   000000E8   2E70               MOV     R7, R16
    198          
    199                  nop = 0 ;                                       // select char set
   \   000000EA   2433               CLR     R3
    200                  for (i=0; (i < NO_OF_LOCH) && (i < nob);) {
   \   000000EC   E080               LDI     R24, 0
   \                     ??printLoDi_11:
   \   000000EE   3087               CPI     R24, 7
   \   000000F0   F510               BRCC    ??printLoDi_12
   \   000000F2   1587               CP      R24, R7
   \   000000F4   F500               BRCC    ??printLoDi_12
    201                      nop += ascii_table[Disp.lo_data[val][i+1]-0x20][WIDE_CHAR][0];   // number of pixels
   \   000000F6   ....               LDI     R30, LOW((Disp + 201))
   \   000000F8   ....               LDI     R31, HIGH((Disp + 201))
   \   000000FA   2F08               MOV     R16, R24
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   0FE0               ADD     R30, R16
   \   00000100   1FF1               ADC     R31, R17
   \   00000102   2D02               MOV     R16, R2
   \   00000104   E010               LDI     R17, 0
   \   00000106   E048               LDI     R20, 8
   \   00000108   E050               LDI     R21, 0
   \   0000010A   ........           CALL    ?S_EC_MUL_L02
   \   0000010E   0FE0               ADD     R30, R16
   \   00000110   1FF1               ADC     R31, R17
   \   00000112   8140               LD      R20, Z
   \   00000114   E050               LDI     R21, 0
   \   00000116   E00F               LDI     R16, 15
   \   00000118   E010               LDI     R17, 0
   \   0000011A   ........           CALL    ?S_EC_MUL_L02
   \   0000011E   01F8               MOVW    R31:R30, R17:R16
   \   00000120   ....               SUBI    R30, LOW((-(ascii_table - 480) & 0xFFFFFF))
   \   00000122   ....               SBCI    R31, HIGH((-(ascii_table - 480) & 0xFFFFFF))
   \   00000124   ....               LDI     R19, BYTE3(ascii_table)
   \   00000126   BF3B               OUT     0x3B, R19
   \   00000128   9106               ELPM    R16, Z
   \   0000012A   0E30               ADD     R3, R16
    202                      if (++i < nob) {                            // inc i here!!   
   \   0000012C   9583               INC     R24
   \   0000012E   1587               CP      R24, R7
   \   00000130   F6F0               BRCC    ??printLoDi_11
    203                          nop++ ;                                 // add space
   \   00000132   9433               INC     R3
   \   00000134   CFDC               RJMP    ??printLoDi_11
    204                      }
    205                  }
    206                  if (nop > 20) {
   \                     ??printLoDi_12:
   \   00000136   E105               LDI     R16, 21
   \   00000138   1630               CP      R3, R16
   \   0000013A   F010               BRCS    ??printLoDi_13
    207                      ct = TINY_CHAR ;
   \   0000013C   E091               LDI     R25, 1
   \   0000013E   C001               RJMP    ??printLoDi_14
    208                  } else {
    209                      ct = WIDE_CHAR ; 
   \                     ??printLoDi_13:
   \   00000140   E090               LDI     R25, 0
    210                  }
    211                  pos = 20 ;                                      // start from left (pos 19 first!!)
   \                     ??printLoDi_14:
   \   00000142   E1B4               LDI     R27, 20
    212                  for (i=0; (i < NO_OF_LOCH) && (i < nob) && (pos > 0);) {
   \   00000144   E080               LDI     R24, 0
   \                     ??printLoDi_15:
   \   00000146   3087               CPI     R24, 7
   \   00000148   F008               BRCS    $+2+2
   \   0000014A   C09D               RJMP    ??printLoDi_16
   \   0000014C   1587               CP      R24, R7
   \   0000014E   F008               BRCS    $+2+2
   \   00000150   C09A               RJMP    ??printLoDi_16
   \   00000152   23BB               TST     R27
   \   00000154   F409               BRNE    $+2+2
   \   00000156   C097               RJMP    ??printLoDi_16
    213                      if ((Disp.lo_data[val][i+1] >= 0x20) && (Disp.lo_data[val][i+1] <= 0x7f)) {
   \   00000158   ....               LDI     R30, LOW((Disp + 201))
   \   0000015A   ....               LDI     R31, HIGH((Disp + 201))
   \   0000015C   2F08               MOV     R16, R24
   \   0000015E   E010               LDI     R17, 0
   \   00000160   0FE0               ADD     R30, R16
   \   00000162   1FF1               ADC     R31, R17
   \   00000164   2D02               MOV     R16, R2
   \   00000166   E010               LDI     R17, 0
   \   00000168   E048               LDI     R20, 8
   \   0000016A   E050               LDI     R21, 0
   \   0000016C   ........           CALL    ?S_EC_MUL_L02
   \   00000170   0FE0               ADD     R30, R16
   \   00000172   1FF1               ADC     R31, R17
   \   00000174   8100               LD      R16, Z
   \   00000176   3200               CPI     R16, 32
   \   00000178   F408               BRCC    $+2+2
   \   0000017A   C075               RJMP    ??printLoDi_17
   \   0000017C   ....               LDI     R30, LOW((Disp + 201))
   \   0000017E   ....               LDI     R31, HIGH((Disp + 201))
   \   00000180   2F08               MOV     R16, R24
   \   00000182   E010               LDI     R17, 0
   \   00000184   0FE0               ADD     R30, R16
   \   00000186   1FF1               ADC     R31, R17
   \   00000188   2D02               MOV     R16, R2
   \   0000018A   E010               LDI     R17, 0
   \   0000018C   E048               LDI     R20, 8
   \   0000018E   E050               LDI     R21, 0
   \   00000190   ........           CALL    ?S_EC_MUL_L02
   \   00000194   0FE0               ADD     R30, R16
   \   00000196   1FF1               ADC     R31, R17
   \   00000198   8100               LD      R16, Z
   \   0000019A   3800               CPI     R16, 128
   \   0000019C   F008               BRCS    $+2+2
   \   0000019E   C063               RJMP    ??printLoDi_17
    214                          nop = ascii_table[Disp.lo_data[val][i+1]-0x20][ct][0];   // number of pixels
   \   000001A0   ....               LDI     R30, LOW((ascii_table - 480))
   \   000001A2   ....               LDI     R31, HIGH((ascii_table - 480))
   \   000001A4   ....               LDI     R19, BYTE3(ascii_table)
   \   000001A6   2F09               MOV     R16, R25
   \   000001A8   E010               LDI     R17, 0
   \   000001AA   E045               LDI     R20, 5
   \   000001AC   E050               LDI     R21, 0
   \   000001AE   ........           CALL    ?S_EC_MUL_L02
   \   000001B2   0FE0               ADD     R30, R16
   \   000001B4   1FF1               ADC     R31, R17
   \   000001B6   2E63               MOV     R6, R19
   \   000001B8   012F               MOVW    R5:R4, R31:R30
   \   000001BA   ....               LDI     R30, LOW((Disp + 201))
   \   000001BC   ....               LDI     R31, HIGH((Disp + 201))
   \   000001BE   2F08               MOV     R16, R24
   \   000001C0   E010               LDI     R17, 0
   \   000001C2   0FE0               ADD     R30, R16
   \   000001C4   1FF1               ADC     R31, R17
   \   000001C6   2D22               MOV     R18, R2
   \   000001C8   E030               LDI     R19, 0
   \   000001CA   E048               LDI     R20, 8
   \   000001CC   E050               LDI     R21, 0
   \   000001CE   0189               MOVW    R17:R16, R19:R18
   \   000001D0   ........           CALL    ?S_EC_MUL_L02
   \   000001D4   0FE0               ADD     R30, R16
   \   000001D6   1FF1               ADC     R31, R17
   \   000001D8   8140               LD      R20, Z
   \   000001DA   E050               LDI     R21, 0
   \   000001DC   E00F               LDI     R16, 15
   \   000001DE   E010               LDI     R17, 0
   \   000001E0   ........           CALL    ?S_EC_MUL_L02
   \   000001E4   01F2               MOVW    R31:R30, R5:R4
   \   000001E6   2D36               MOV     R19, R6
   \   000001E8   0FE0               ADD     R30, R16
   \   000001EA   1FF1               ADC     R31, R17
   \   000001EC   BF3B               OUT     0x3B, R19
   \   000001EE   9106               ELPM    R16, Z
   \   000001F0   2E30               MOV     R3, R16
    215                          for (j=0 ; (j < nop) && (pos > 0); j++) {
   \   000001F2   E0A0               LDI     R26, 0
   \                     ??printLoDi_18:
   \   000001F4   15A3               CP      R26, R3
   \   000001F6   F5B8               BRCC    ??printLoDi_17
   \   000001F8   23BB               TST     R27
   \   000001FA   F1A9               BREQ    ??printLoDi_17
    216                              LEDDum[--pos] = ascii_table[Disp.lo_data[val][i+1]-0x20][ct][j+1];
   \   000001FC   95BA               DEC     R27
   \   000001FE   ....               LDI     R30, LOW((ascii_table - 479))
   \   00000200   ....               LDI     R31, HIGH((ascii_table - 479))
   \   00000202   ....               LDI     R19, BYTE3(ascii_table)
   \   00000204   2F09               MOV     R16, R25
   \   00000206   E010               LDI     R17, 0
   \   00000208   E045               LDI     R20, 5
   \   0000020A   E050               LDI     R21, 0
   \   0000020C   ........           CALL    ?S_EC_MUL_L02
   \   00000210   0FE0               ADD     R30, R16
   \   00000212   1FF1               ADC     R31, R17
   \   00000214   2F0A               MOV     R16, R26
   \   00000216   E010               LDI     R17, 0
   \   00000218   0FE0               ADD     R30, R16
   \   0000021A   1FF1               ADC     R31, R17
   \   0000021C   2E63               MOV     R6, R19
   \   0000021E   012F               MOVW    R5:R4, R31:R30
   \   00000220   ....               LDI     R30, LOW((Disp + 201))
   \   00000222   ....               LDI     R31, HIGH((Disp + 201))
   \   00000224   2F08               MOV     R16, R24
   \   00000226   E010               LDI     R17, 0
   \   00000228   0FE0               ADD     R30, R16
   \   0000022A   1FF1               ADC     R31, R17
   \   0000022C   2D22               MOV     R18, R2
   \   0000022E   E030               LDI     R19, 0
   \   00000230   E048               LDI     R20, 8
   \   00000232   E050               LDI     R21, 0
   \   00000234   0189               MOVW    R17:R16, R19:R18
   \   00000236   ........           CALL    ?S_EC_MUL_L02
   \   0000023A   0FE0               ADD     R30, R16
   \   0000023C   1FF1               ADC     R31, R17
   \   0000023E   8140               LD      R20, Z
   \   00000240   E050               LDI     R21, 0
   \   00000242   E00F               LDI     R16, 15
   \   00000244   E010               LDI     R17, 0
   \   00000246   ........           CALL    ?S_EC_MUL_L02
   \   0000024A   01F2               MOVW    R31:R30, R5:R4
   \   0000024C   2D36               MOV     R19, R6
   \   0000024E   0FE0               ADD     R30, R16
   \   00000250   1FF1               ADC     R31, R17
   \   00000252   BF3B               OUT     0x3B, R19
   \   00000254   9126               ELPM    R18, Z
   \   00000256   01FE               MOVW    R31:R30, R29:R28
   \   00000258   2F0B               MOV     R16, R27
   \   0000025A   E010               LDI     R17, 0
   \   0000025C   0FE0               ADD     R30, R16
   \   0000025E   1FF1               ADC     R31, R17
   \   00000260   8320               ST      Z, R18
    217                          }  
   \   00000262   95A3               INC     R26
   \   00000264   CFC7               RJMP    ??printLoDi_18
    218                      }
    219                      if ((++i < nob) && (pos > 0)) {             // inc i here!!  V6: add check of pos 
   \                     ??printLoDi_17:
   \   00000266   9583               INC     R24
   \   00000268   1587               CP      R24, R7
   \   0000026A   F008               BRCS    $+2+2
   \   0000026C   CF6C               RJMP    ??printLoDi_15
   \   0000026E   23BB               TST     R27
   \   00000270   F409               BRNE    $+2+2
   \   00000272   CF69               RJMP    ??printLoDi_15
    220                          LEDDum[--pos] = 0x00;                   // space if more char
   \   00000274   95BA               DEC     R27
   \   00000276   E020               LDI     R18, 0
   \   00000278   01FE               MOVW    R31:R30, R29:R28
   \   0000027A   2F0B               MOV     R16, R27
   \   0000027C   E010               LDI     R17, 0
   \   0000027E   0FE0               ADD     R30, R16
   \   00000280   1FF1               ADC     R31, R17
   \   00000282   8320               ST      Z, R18
   \   00000284   CF60               RJMP    ??printLoDi_15
    221                      }
    222                  }
    223                  if (pos > 0) {
   \                     ??printLoDi_16:
   \   00000286   23BB               TST     R27
   \   00000288   F019               BREQ    ??printLoDi_19
    224                      rorLoDis(LEDDum, pos);
   \   0000028A   2F2B               MOV     R18, R27
   \   0000028C   018E               MOVW    R17:R16, R29:R28
   \   0000028E   ....               RCALL   rorLoDis
    225                  }
    226          
    227                  switch (UnitID) {
   \                     ??printLoDi_19:
   \   00000290   9100....           LDS     R16, UnitID
   \   00000294   3100               CPI     R16, 16
   \   00000296   F599               BRNE    ??printLoDi_20
    228                  case TPC140:                        // Mirror byte
    229                      for (j = 0 ; j < 20 ; j++) {
   \   00000298   E0A0               LDI     R26, 0
   \                     ??printLoDi_21:
   \   0000029A   31A4               CPI     R26, 20
   \   0000029C   F580               BRCC    ??printLoDi_20
    230                          ct = 0x00;
   \   0000029E   E090               LDI     R25, 0
    231                          if (LEDDum[j] & 0x80) {
   \   000002A0   01FE               MOVW    R31:R30, R29:R28
   \   000002A2   2F0A               MOV     R16, R26
   \   000002A4   E010               LDI     R17, 0
   \   000002A6   0FE0               ADD     R30, R16
   \   000002A8   1FF1               ADC     R31, R17
   \   000002AA   8100               LD      R16, Z
   \   000002AC   FF07               SBRS    R16, 7
   \   000002AE   C002               RJMP    ??printLoDi_22
    232                              ct |= 0x01 ;
   \   000002B0   6091               ORI     R25, 0x01
   \   000002B2   E001               LDI     R16, 1
    233                          }
    234                          for (i=0 ; i < 7 ; i++) {
   \                     ??printLoDi_22:
   \   000002B4   E080               LDI     R24, 0
   \                     ??printLoDi_23:
   \   000002B6   3087               CPI     R24, 7
   \   000002B8   F4D0               BRCC    ??printLoDi_24
    235                              ct <<= 1 ;
   \   000002BA   0F99               LSL     R25
    236                              if (LEDDum[j] & 0x01) {
   \   000002BC   01FE               MOVW    R31:R30, R29:R28
   \   000002BE   2F0A               MOV     R16, R26
   \   000002C0   E010               LDI     R17, 0
   \   000002C2   0FE0               ADD     R30, R16
   \   000002C4   1FF1               ADC     R31, R17
   \   000002C6   8100               LD      R16, Z
   \   000002C8   FF00               SBRS    R16, 0
   \   000002CA   C002               RJMP    ??printLoDi_25
    237                                  ct |= 0x01 ;
   \   000002CC   6091               ORI     R25, 0x01
   \   000002CE   E001               LDI     R16, 1
    238                              }
    239                              LEDDum[j] >>= 1 ;
   \                     ??printLoDi_25:
   \   000002D0   01FE               MOVW    R31:R30, R29:R28
   \   000002D2   2F0A               MOV     R16, R26
   \   000002D4   E010               LDI     R17, 0
   \   000002D6   0FE0               ADD     R30, R16
   \   000002D8   1FF1               ADC     R31, R17
   \   000002DA   8120               LD      R18, Z
   \   000002DC   9526               LSR     R18
   \   000002DE   01FE               MOVW    R31:R30, R29:R28
   \   000002E0   2F0A               MOV     R16, R26
   \   000002E2   E010               LDI     R17, 0
   \   000002E4   0FE0               ADD     R30, R16
   \   000002E6   1FF1               ADC     R31, R17
   \   000002E8   8320               ST      Z, R18
    240                          }
   \   000002EA   9583               INC     R24
   \   000002EC   CFE4               RJMP    ??printLoDi_23
    241                          LEDDum[j] = ct ;
   \                     ??printLoDi_24:
   \   000002EE   01FE               MOVW    R31:R30, R29:R28
   \   000002F0   2F0A               MOV     R16, R26
   \   000002F2   E010               LDI     R17, 0
   \   000002F4   0FE0               ADD     R30, R16
   \   000002F6   1FF1               ADC     R31, R17
   \   000002F8   8390               ST      Z, R25
    242                      }
   \   000002FA   95A3               INC     R26
   \   000002FC   CFCE               RJMP    ??printLoDi_21
    243                      break;
    244                  }
    245          
    246                  for (i=0; i < 20; i++) {
   \                     ??printLoDi_20:
   \   000002FE   E080               LDI     R24, 0
   \                     ??printLoDi_26:
   \   00000300   3184               CPI     R24, 20
   \   00000302   F490               BRCC    ??printLoDi_27
    247                      Disp.image[i] = LEDDum[i] ;                   // copy to displaybuffer
   \   00000304   01FE               MOVW    R31:R30, R29:R28
   \   00000306   2F08               MOV     R16, R24
   \   00000308   E010               LDI     R17, 0
   \   0000030A   0FE0               ADD     R30, R16
   \   0000030C   1FF1               ADC     R31, R17
   \   0000030E   8120               LD      R18, Z
   \   00000310   E030               LDI     R19, 0
   \   00000312   2F08               MOV     R16, R24
   \   00000314   E010               LDI     R17, 0
   \   00000316   0F00               LSL     R16
   \   00000318   1F11               ROL     R17
   \   0000031A   01F8               MOVW    R31:R30, R17:R16
   \   0000031C   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   0000031E   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   00000320   8320               ST      Z, R18
   \   00000322   8331               STD     Z+1, R19
    248                  }
   \   00000324   9583               INC     R24
   \   00000326   CFEC               RJMP    ??printLoDi_26
    249                  switch (UnitID) {
   \                     ??printLoDi_27:
   \   00000328   9100....           LDS     R16, UnitID
   \   0000032C   3001               CPI     R16, 1
   \   0000032E   F4E9               BRNE    ??printLoDi_28
    250                  case TPC196:                        // Rearrange columns due to hw fault
    251                      for (i = 8; i < 19; i++) {
   \   00000330   E088               LDI     R24, 8
   \                     ??printLoDi_29:
   \   00000332   3183               CPI     R24, 19
   \   00000334   F4D0               BRCC    ??printLoDi_28
    252                          Disp.image[i] = LEDDum[DispArr196[i-8]] ;
   \   00000336   018E               MOVW    R17:R16, R29:R28
   \   00000338   2F48               MOV     R20, R24
   \   0000033A   E050               LDI     R21, 0
   \   0000033C   01FA               MOVW    R31:R30, R21:R20
   \   0000033E   ....               SUBI    R30, LOW((-(DispArr196 - 8) & 0xFFFFFF))
   \   00000340   ....               SBCI    R31, HIGH((-(DispArr196 - 8) & 0xFFFFFF))
   \   00000342   ....               LDI     R19, BYTE3(DispArr196)
   \   00000344   BF3B               OUT     0x3B, R19
   \   00000346   9126               ELPM    R18, Z
   \   00000348   E030               LDI     R19, 0
   \   0000034A   0F02               ADD     R16, R18
   \   0000034C   1F13               ADC     R17, R19
   \   0000034E   01F8               MOVW    R31:R30, R17:R16
   \   00000350   8120               LD      R18, Z
   \   00000352   E030               LDI     R19, 0
   \   00000354   2F08               MOV     R16, R24
   \   00000356   E010               LDI     R17, 0
   \   00000358   0F00               LSL     R16
   \   0000035A   1F11               ROL     R17
   \   0000035C   01F8               MOVW    R31:R30, R17:R16
   \   0000035E   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   00000360   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   00000362   8320               ST      Z, R18
   \   00000364   8331               STD     Z+1, R19
    253                      }
   \   00000366   9583               INC     R24
   \   00000368   CFE4               RJMP    ??printLoDi_29
    254                  }
    255          
    256                  if (val == ALARM_VT) {
   \                     ??printLoDi_28:
   \   0000036A   2022               TST     R2
   \   0000036C   F511               BRNE    ??printLoDi_10
    257                      if (Disp.alarmLED == ALARM_FLASH) {
   \   0000036E   9100....           LDS     R16, (Disp + 1751)
   \   00000372   3002               CPI     R16, 2
   \   00000374   F479               BRNE    ??printLoDi_30
    258                          for (i=0; i < 20; i++) {
   \   00000376   E080               LDI     R24, 0
   \                     ??printLoDi_31:
   \   00000378   3184               CPI     R24, 20
   \   0000037A   F4D8               BRCC    ??printLoDi_10
    259                              Disp.image[i] |= 0x80 ;               // disp blink on
   \   0000037C   2F08               MOV     R16, R24
   \   0000037E   E010               LDI     R17, 0
   \   00000380   0F00               LSL     R16
   \   00000382   1F11               ROL     R17
   \   00000384   01F8               MOVW    R31:R30, R17:R16
   \   00000386   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   00000388   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   0000038A   8100               LD      R16, Z
   \   0000038C   6800               ORI     R16, 0x80
   \   0000038E   8300               ST      Z, R16
    260                          }
   \   00000390   9583               INC     R24
   \   00000392   CFF2               RJMP    ??printLoDi_31
    261                      } else {
    262                          for (i=0; i < 20; i++) {
   \                     ??printLoDi_30:
   \   00000394   E080               LDI     R24, 0
   \                     ??printLoDi_32:
   \   00000396   3184               CPI     R24, 20
   \   00000398   F460               BRCC    ??printLoDi_10
    263                              Disp.image[i] &= ~0x80 ;              // disp blink off
   \   0000039A   2F08               MOV     R16, R24
   \   0000039C   E010               LDI     R17, 0
   \   0000039E   0F00               LSL     R16
   \   000003A0   1F11               ROL     R17
   \   000003A2   01F8               MOVW    R31:R30, R17:R16
   \   000003A4   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   000003A6   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   000003A8   8100               LD      R16, Z
   \   000003AA   770F               ANDI    R16, 0x7F
   \   000003AC   8300               ST      Z, R16
    264                          }
   \   000003AE   9583               INC     R24
   \   000003B0   CFF2               RJMP    ??printLoDi_32
    265                      }
    266                  }
    267              }
    268          }
   \                     ??printLoDi_10:
   \   000003B2   9664               ADIW    R29:R28, 20
   \   000003B4   E0E8               LDI     R30, 8
   \   000003B6   ........           JMP     ?EPILOGUE_B8_L09
    269          
    270          /*************************************************************************
    271          *
    272          *  Build X display image
    273          *
    274          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    275          void printXDi(char disno)
   \                     printXDi:
    276          {
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   9724               SBIW    R29:R28, 4
   \   00000004   2F60               MOV     R22, R16
    277              unsigned char i, pos, nob, LEDDum[4] ;
    278          
    279              if (UnitID == TPC196) {
   \   00000006   9100....           LDS     R16, UnitID
   \   0000000A   3001               CPI     R16, 1
   \   0000000C   F009               BREQ    $+2+2
   \   0000000E   C0EC               RJMP    ??printXDi_0
    280                  nob = Disp.x_data[disno][0];                            // no of char to disp
   \   00000010   2F06               MOV     R16, R22
   \   00000012   E010               LDI     R17, 0
   \   00000014   E046               LDI     R20, 6
   \   00000016   E050               LDI     R21, 0
   \   00000018   ........           CALL    ?S_EC_MUL_L02
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   ....               SUBI    R30, LOW((-(Disp + 1500) & 0xFFFF))
   \   00000020   ....               SBCI    R31, HIGH((-(Disp + 1500) & 0xFFFF))
   \   00000022   8100               LD      R16, Z
   \   00000024   2F70               MOV     R23, R16
    281          
    282                  for (i=0; i<4; i++) {                               // reset buffer
   \   00000026   E020               LDI     R18, 0
   \                     ??printXDi_1:
   \   00000028   3024               CPI     R18, 4
   \   0000002A   F440               BRCC    ??printXDi_2
    283                      LEDDum[i] = 0x00;
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   01FE               MOVW    R31:R30, R29:R28
   \   00000030   E030               LDI     R19, 0
   \   00000032   0FE2               ADD     R30, R18
   \   00000034   1FF3               ADC     R31, R19
   \   00000036   8300               ST      Z, R16
    284                  }
   \   00000038   9523               INC     R18
   \   0000003A   CFF6               RJMP    ??printXDi_1
    285          
    286                  pos = 0 ;                                           // start from left 
   \                     ??printXDi_2:
   \   0000003C   E080               LDI     R24, 0
    287                  for (i=0; (i < NO_OF_XCH) && (i < nob); ) {
   \   0000003E   E020               LDI     R18, 0
   \                     ??printXDi_3:
   \   00000040   3025               CPI     R18, 5
   \   00000042   F008               BRCS    $+2+2
   \   00000044   C09B               RJMP    ??printXDi_4
   \   00000046   1727               CP      R18, R23
   \   00000048   F008               BRCS    $+2+2
   \   0000004A   C098               RJMP    ??printXDi_4
    288                      if ((Disp.x_data[disno][i+1] >= 0x20) && (Disp.x_data[disno][i+1] <= 0x7f)) {
   \   0000004C   ....               LDI     R30, LOW((Disp + 1501))
   \   0000004E   ....               LDI     R31, HIGH((Disp + 1501))
   \   00000050   E030               LDI     R19, 0
   \   00000052   0FE2               ADD     R30, R18
   \   00000054   1FF3               ADC     R31, R19
   \   00000056   2F06               MOV     R16, R22
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E046               LDI     R20, 6
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   0FE0               ADD     R30, R16
   \   00000064   1FF1               ADC     R31, R17
   \   00000066   8100               LD      R16, Z
   \   00000068   3200               CPI     R16, 32
   \   0000006A   F178               BRCS    ??printXDi_5
   \   0000006C   ....               LDI     R30, LOW((Disp + 1501))
   \   0000006E   ....               LDI     R31, HIGH((Disp + 1501))
   \   00000070   E030               LDI     R19, 0
   \   00000072   0FE2               ADD     R30, R18
   \   00000074   1FF3               ADC     R31, R19
   \   00000076   2F06               MOV     R16, R22
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E046               LDI     R20, 6
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   0FE0               ADD     R30, R16
   \   00000084   1FF1               ADC     R31, R17
   \   00000086   8100               LD      R16, Z
   \   00000088   3800               CPI     R16, 128
   \   0000008A   F4F8               BRCC    ??printXDi_5
    289                          LEDDum[pos] = ascii_table[Disp.x_data[disno][i+1]-0x20][SEVEN_SEG][0];
   \   0000008C   ....               LDI     R30, LOW((Disp + 1501))
   \   0000008E   ....               LDI     R31, HIGH((Disp + 1501))
   \   00000090   E030               LDI     R19, 0
   \   00000092   0FE2               ADD     R30, R18
   \   00000094   1FF3               ADC     R31, R19
   \   00000096   2F06               MOV     R16, R22
   \   00000098   E010               LDI     R17, 0
   \   0000009A   E046               LDI     R20, 6
   \   0000009C   E050               LDI     R21, 0
   \   0000009E   ........           CALL    ?S_EC_MUL_L02
   \   000000A2   0FE0               ADD     R30, R16
   \   000000A4   1FF1               ADC     R31, R17
   \   000000A6   8140               LD      R20, Z
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   E00F               LDI     R16, 15
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   ........           CALL    ?S_EC_MUL_L02
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(ascii_table - 470) & 0xFFFFFF))
   \   000000B6   ....               SBCI    R31, HIGH((-(ascii_table - 470) & 0xFFFFFF))
   \   000000B8   ....               LDI     R19, BYTE3(ascii_table)
   \   000000BA   BF3B               OUT     0x3B, R19
   \   000000BC   9106               ELPM    R16, Z
   \   000000BE   01FE               MOVW    R31:R30, R29:R28
   \   000000C0   E090               LDI     R25, 0
   \   000000C2   0FE8               ADD     R30, R24
   \   000000C4   1FF9               ADC     R31, R25
   \   000000C6   8300               ST      Z, R16
    290                          i++ ;
   \   000000C8   9523               INC     R18
    291                      }
    292                      if (pos == 0) {
   \                     ??printXDi_5:
   \   000000CA   2388               TST     R24
   \   000000CC   F539               BRNE    ??printXDi_6
    293                          if ((Disp.x_data[disno][i] == 0x2c) || (Disp.x_data[disno][i] == 0x2e)) {
   \   000000CE   ....               LDI     R30, LOW((Disp + 1500))
   \   000000D0   ....               LDI     R31, HIGH((Disp + 1500))
   \   000000D2   E030               LDI     R19, 0
   \   000000D4   0FE2               ADD     R30, R18
   \   000000D6   1FF3               ADC     R31, R19
   \   000000D8   2F06               MOV     R16, R22
   \   000000DA   E010               LDI     R17, 0
   \   000000DC   E046               LDI     R20, 6
   \   000000DE   E050               LDI     R21, 0
   \   000000E0   ........           CALL    ?S_EC_MUL_L02
   \   000000E4   0FE0               ADD     R30, R16
   \   000000E6   1FF1               ADC     R31, R17
   \   000000E8   8100               LD      R16, Z
   \   000000EA   320C               CPI     R16, 44
   \   000000EC   F081               BREQ    ??printXDi_7
   \   000000EE   ....               LDI     R30, LOW((Disp + 1500))
   \   000000F0   ....               LDI     R31, HIGH((Disp + 1500))
   \   000000F2   E030               LDI     R19, 0
   \   000000F4   0FE2               ADD     R30, R18
   \   000000F6   1FF3               ADC     R31, R19
   \   000000F8   2F06               MOV     R16, R22
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   E046               LDI     R20, 6
   \   000000FE   E050               LDI     R21, 0
   \   00000100   ........           CALL    ?S_EC_MUL_L02
   \   00000104   0FE0               ADD     R30, R16
   \   00000106   1FF1               ADC     R31, R17
   \   00000108   8100               LD      R16, Z
   \   0000010A   320E               CPI     R16, 46
   \   0000010C   F439               BRNE    ??printXDi_6
    294                              LEDDum[pos] |= 0x80;                                          // check ./, on first char
   \                     ??printXDi_7:
   \   0000010E   01FE               MOVW    R31:R30, R29:R28
   \   00000110   E090               LDI     R25, 0
   \   00000112   0FE8               ADD     R30, R24
   \   00000114   1FF9               ADC     R31, R25
   \   00000116   8100               LD      R16, Z
   \   00000118   6800               ORI     R16, 0x80
   \   0000011A   8300               ST      Z, R16
    295                          }
    296                      }
    297                      if (i < nob) {
   \                     ??printXDi_6:
   \   0000011C   1727               CP      R18, R23
   \   0000011E   F540               BRCC    ??printXDi_8
    298                          if ((Disp.x_data[disno][i+1] == 0x2c) || (Disp.x_data[disno][i+1] == 0x2e)) {   // , or .
   \   00000120   ....               LDI     R30, LOW((Disp + 1501))
   \   00000122   ....               LDI     R31, HIGH((Disp + 1501))
   \   00000124   E030               LDI     R19, 0
   \   00000126   0FE2               ADD     R30, R18
   \   00000128   1FF3               ADC     R31, R19
   \   0000012A   2F06               MOV     R16, R22
   \   0000012C   E010               LDI     R17, 0
   \   0000012E   E046               LDI     R20, 6
   \   00000130   E050               LDI     R21, 0
   \   00000132   ........           CALL    ?S_EC_MUL_L02
   \   00000136   0FE0               ADD     R30, R16
   \   00000138   1FF1               ADC     R31, R17
   \   0000013A   8100               LD      R16, Z
   \   0000013C   320C               CPI     R16, 44
   \   0000013E   F081               BREQ    ??printXDi_9
   \   00000140   ....               LDI     R30, LOW((Disp + 1501))
   \   00000142   ....               LDI     R31, HIGH((Disp + 1501))
   \   00000144   E030               LDI     R19, 0
   \   00000146   0FE2               ADD     R30, R18
   \   00000148   1FF3               ADC     R31, R19
   \   0000014A   2F06               MOV     R16, R22
   \   0000014C   E010               LDI     R17, 0
   \   0000014E   E046               LDI     R20, 6
   \   00000150   E050               LDI     R21, 0
   \   00000152   ........           CALL    ?S_EC_MUL_L02
   \   00000156   0FE0               ADD     R30, R16
   \   00000158   1FF1               ADC     R31, R17
   \   0000015A   8100               LD      R16, Z
   \   0000015C   320E               CPI     R16, 46
   \   0000015E   F441               BRNE    ??printXDi_8
    299                              LEDDum[pos] |= 0x80;
   \                     ??printXDi_9:
   \   00000160   01FE               MOVW    R31:R30, R29:R28
   \   00000162   E090               LDI     R25, 0
   \   00000164   0FE8               ADD     R30, R24
   \   00000166   1FF9               ADC     R31, R25
   \   00000168   8100               LD      R16, Z
   \   0000016A   6800               ORI     R16, 0x80
   \   0000016C   8300               ST      Z, R16
    300                              i++ ;
   \   0000016E   9523               INC     R18
    301                          }
    302                      }
    303                      if (++pos >= 4) {                             // no room for more characters
   \                     ??printXDi_8:
   \   00000170   9583               INC     R24
   \   00000172   3084               CPI     R24, 4
   \   00000174   F408               BRCC    $+2+2
   \   00000176   CF64               RJMP    ??printXDi_3
    304                          i = NO_OF_XCH ;
   \   00000178   E025               LDI     R18, 5
   \   0000017A   CF62               RJMP    ??printXDi_3
    305                      }
    306                  }                                                
    307                  for (;pos < 4; pos++) {                 // shift text right 
   \                     ??printXDi_4:
   \   0000017C   3084               CPI     R24, 4
   \   0000017E   F4C8               BRCC    ??printXDi_10
    308                      for (i=3; i>0; i--) {
   \   00000180   E023               LDI     R18, 3
   \                     ??printXDi_11:
   \   00000182   2322               TST     R18
   \   00000184   F0A1               BREQ    ??printXDi_12
    309                          LEDDum[i] = LEDDum[i-1];
   \   00000186   01FE               MOVW    R31:R30, R29:R28
   \   00000188   E030               LDI     R19, 0
   \   0000018A   0FE2               ADD     R30, R18
   \   0000018C   1FF3               ADC     R31, R19
   \   0000018E   9731               SBIW    R31:R30, 1
   \   00000190   8100               LD      R16, Z
   \   00000192   01FE               MOVW    R31:R30, R29:R28
   \   00000194   E030               LDI     R19, 0
   \   00000196   0FE2               ADD     R30, R18
   \   00000198   1FF3               ADC     R31, R19
   \   0000019A   8300               ST      Z, R16
    310                          LEDDum[i-1] = 0x00 ;                        // clear leftmost char
   \   0000019C   E000               LDI     R16, 0
   \   0000019E   01FE               MOVW    R31:R30, R29:R28
   \   000001A0   E030               LDI     R19, 0
   \   000001A2   0FE2               ADD     R30, R18
   \   000001A4   1FF3               ADC     R31, R19
   \   000001A6   9731               SBIW    R31:R30, 1
   \   000001A8   8300               ST      Z, R16
    311                      }
   \   000001AA   952A               DEC     R18
   \   000001AC   CFEA               RJMP    ??printXDi_11
    312                  }
   \                     ??printXDi_12:
   \   000001AE   9583               INC     R24
   \   000001B0   CFE5               RJMP    ??printXDi_4
    313                  for (i=0; i < 4; i++) {
   \                     ??printXDi_10:
   \   000001B2   E020               LDI     R18, 0
   \                     ??printXDi_13:
   \   000001B4   3024               CPI     R18, 4
   \   000001B6   F4C0               BRCC    ??printXDi_0
    314                      Disp.image[20+4*disno+i] = LEDDum[i] ;            // copy to displaybuffer
   \   000001B8   01FE               MOVW    R31:R30, R29:R28
   \   000001BA   E030               LDI     R19, 0
   \   000001BC   0FE2               ADD     R30, R18
   \   000001BE   1FF3               ADC     R31, R19
   \   000001C0   8140               LD      R20, Z
   \   000001C2   E050               LDI     R21, 0
   \   000001C4   2F06               MOV     R16, R22
   \   000001C6   E010               LDI     R17, 0
   \   000001C8   0F00               LSL     R16
   \   000001CA   1F11               ROL     R17
   \   000001CC   0F00               LSL     R16
   \   000001CE   1F11               ROL     R17
   \   000001D0   E030               LDI     R19, 0
   \   000001D2   0F02               ADD     R16, R18
   \   000001D4   1F13               ADC     R17, R19
   \   000001D6   0F00               LSL     R16
   \   000001D8   1F11               ROL     R17
   \   000001DA   01F8               MOVW    R31:R30, R17:R16
   \   000001DC   ....               SUBI    R30, LOW((-(Disp) & 0xFFFF))
   \   000001DE   ....               SBCI    R31, (-(Disp) & 0xFFFF) >> 8
   \   000001E0   A740               STD     Z+40, R20
   \   000001E2   A751               STD     Z+41, R21
    315                  }
   \   000001E4   9523               INC     R18
   \   000001E6   CFE6               RJMP    ??printXDi_13
    316              }
    317          }
   \                     ??printXDi_0:
   \   000001E8   9624               ADIW    R29:R28, 4
   \   000001EA   01C1               MOVW    R25:R24, R3:R2
   \   000001EC   9508               RET
    318          
    319          /*************************************************************************
    320          *
    321          *  Rotate right low display
    322          *
    323          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    324          void rorLoDis(char* buf, char pos){
   \                     rorLoDis:
   \   00000000   01A8               MOVW    R21:R20, R17:R16
   \   00000002   2F62               MOV     R22, R18
    325              unsigned char i ;
    326              for (i=pos; i < 20; i++) {
   \   00000004   2F06               MOV     R16, R22
   \                     ??rorLoDis_0:
   \   00000006   3104               CPI     R16, 20
   \   00000008   F480               BRCC    ??rorLoDis_1
    327                  buf[i-pos] = buf[i] ;
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   01FA               MOVW    R31:R30, R21:R20
   \   0000000E   0FE0               ADD     R30, R16
   \   00000010   1FF1               ADC     R31, R17
   \   00000012   8110               LD      R17, Z
   \   00000014   2F20               MOV     R18, R16
   \   00000016   E030               LDI     R19, 0
   \   00000018   E070               LDI     R23, 0
   \   0000001A   1B26               SUB     R18, R22
   \   0000001C   0B37               SBC     R19, R23
   \   0000001E   01FA               MOVW    R31:R30, R21:R20
   \   00000020   0FE2               ADD     R30, R18
   \   00000022   1FF3               ADC     R31, R19
   \   00000024   8310               ST      Z, R17
    328              }
   \   00000026   9503               INC     R16
   \   00000028   CFEE               RJMP    ??rorLoDis_0
    329              for (i=0; i < pos; i++) {
   \                     ??rorLoDis_1:
   \   0000002A   E000               LDI     R16, 0
   \                     ??rorLoDis_2:
   \   0000002C   1706               CP      R16, R22
   \   0000002E   F460               BRCC    ??rorLoDis_3
    330                  buf[19-i] = 0x00 ;
   \   00000030   E010               LDI     R17, 0
   \   00000032   2F20               MOV     R18, R16
   \   00000034   E030               LDI     R19, 0
   \   00000036   9531               NEG     R19
   \   00000038   9521               NEG     R18
   \   0000003A   4030               SBCI    R19, 0
   \   0000003C   01FA               MOVW    R31:R30, R21:R20
   \   0000003E   0FE2               ADD     R30, R18
   \   00000040   1FF3               ADC     R31, R19
   \   00000042   8B13               STD     Z+19, R17
    331              }
   \   00000044   9503               INC     R16
   \   00000046   CFF2               RJMP    ??rorLoDis_2
    332          }
   \                     ??rorLoDis_3:
   \   00000048   9508               RET
    333          
    334          /*************************************************************************
    335          *
    336          * Refresh displays
    337          *
    338          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    339          void RefreshDisplay(char value){
   \                     RefreshDisplay:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    340              switch (UnitID) {
   \   00000004   9100....           LDS     R16, UnitID
   \   00000008   5000               SUBI    R16, 0
   \   0000000A   F031               BREQ    ??RefreshDisplay_0
   \   0000000C   950A               DEC     R16
   \   0000000E   F421               BRNE    ??RefreshDisplay_0
    341              case TPC350:
    342                  /*      Write2416Data(value) ;        
    343                        printBar(value) ;
    344                        printBarSec(value) ;*/
    345                  break;
    346              case TPC196:
    347                  printXDi(0) ;        
   \   00000010   E000               LDI     R16, 0
   \   00000012   ....               RCALL   printXDi
    348                  printXDi(1) ;        
   \   00000014   E001               LDI     R16, 1
   \   00000016   ....               RCALL   printXDi
    349                  break;
    350              default:
    351                  break;
    352              }
    353              printLoDi(value) ;        
   \                     ??RefreshDisplay_0:
   \   00000018   2F08               MOV     R16, R24
   \   0000001A   ....               RCALL   printLoDi
    354          }
   \   0000001C   9189               LD      R24, Y+
   \   0000001E   9508               RET
    355          
    356          /*************************************************************************
    357          *
    358          *  Print measage on display
    359          *
    360          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    361          void PrintComError(char *data, char led) {
   \                     PrintComError:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
    362          
    363              Disp.lo_data[ALARM_VT][0] = strlen(data);//5 ;                  // char to disp
   \   00000008   018D               MOVW    R17:R16, R27:R26
   \   0000000A   ........           CALL    strlen
   \   0000000E   9300....           STS     (Disp + 200), R16
    364              Disp.lo_data[ALARM_VT][1] = data[0] ;            
   \   00000012   910C               LD      R16, X
   \   00000014   9300....           STS     (Disp + 201), R16
    365              Disp.lo_data[ALARM_VT][2] = data[1] ;               
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8101               LDD     R16, Z+1
   \   0000001C   9300....           STS     (Disp + 202), R16
    366              Disp.lo_data[ALARM_VT][3] = data[2] ;               
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   8102               LDD     R16, Z+2
   \   00000024   9300....           STS     (Disp + 203), R16
    367              Disp.lo_data[ALARM_VT][4] = data[3] ;               
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8103               LDD     R16, Z+3
   \   0000002C   9300....           STS     (Disp + 204), R16
    368              Disp.lo_data[ALARM_VT][5] = data[4] ;               
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8104               LDD     R16, Z+4
   \   00000034   9300....           STS     (Disp + 205), R16
    369              Disp.lo_data[ALARM_VT][6] = data[5] ;               
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   8105               LDD     R16, Z+5
   \   0000003C   9300....           STS     (Disp + 206), R16
    370          
    371              switch (UnitID) {
   \   00000040   9100....           LDS     R16, UnitID
   \   00000044   5000               SUBI    R16, 0
   \   00000046   F019               BREQ    ??PrintComError_0
   \   00000048   950A               DEC     R16
   \   0000004A   F059               BREQ    ??PrintComError_1
   \   0000004C   C010               RJMP    ??PrintComError_2
    372              case TPC350:
    373                  Disp.hi_data[ALARM_VT][0] = 0 ;                  // char to disp
   \                     ??PrintComError_0:
   \   0000004E   E000               LDI     R16, 0
   \   00000050   9300....           STS     (Disp + 1000), R16
    374                  Disp.ba_pdata[ALARM_VT] = 0 ;
   \   00000054   E000               LDI     R16, 0
   \   00000056   9300....           STS     (Disp + 1530), R16
    375                  Disp.ba_sdata[ALARM_VT] = 0 ;
   \   0000005A   E000               LDI     R16, 0
   \   0000005C   9300....           STS     (Disp + 1630), R16
    376                  break;
   \   00000060   C006               RJMP    ??PrintComError_2
    377              case TPC196:
    378                  Disp.x_data[0][0] = 0 ;                  // char to disp
   \                     ??PrintComError_1:
   \   00000062   E000               LDI     R16, 0
   \   00000064   9300....           STS     (Disp + 1500), R16
    379                  Disp.x_data[1][0] = 0 ;                  // char to disp
   \   00000068   E000               LDI     R16, 0
   \   0000006A   9300....           STS     (Disp + 1506), R16
    380                  break;
    381              default:
    382                  break;
    383              }
    384          
    385              Disp.alarmLED = led ;
   \                     ??PrintComError_2:
   \   0000006E   9380....           STS     (Disp + 1751), R24
    386              Disp.disp_vt = ALARM_VT ;
   \   00000072   E000               LDI     R16, 0
   \   00000074   9300....           STS     (Disp + 1752), R16
    387              Disp.disp_vt_old = Disp.disp_vt + 1 ;                 // force printout
   \   00000078   9100....           LDS     R16, (Disp + 1752)
   \   0000007C   9503               INC     R16
   \   0000007E   9300....           STS     (Disp + 1753), R16
    388              printLoDi(0);
   \   00000082   E000               LDI     R16, 0
   \   00000084   ....               RCALL   printLoDi
    389          
    390          }
   \   00000086   E0E4               LDI     R30, 4
   \   00000088   ........           JMP     ?EPILOGUE_B4_L09
    391          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   DisplayBlink
        0      2   -> OS_Delay
      0      2   DisplayHandler
        0      2   -> OS_Delay
        0      2 ?S_EC_MUL_L02
      7      2   Info
        7      2   -> CharToAscii
        7      2   -> OS_Delay
        7      2   -> OS_WaitEvent
        7      2   -> PrintComError
      4      2   PrintComError
        4      2   -> printLoDi
        4      2   -> strlen
      1      2   RefreshDisplay
        1      2   -> printLoDi
        1      2   -> printXDi
     28      2   printLoDi
       28      2   -> rorLoDis
       28      2 ?S_EC_MUL_L02
      4      2   printXDi
        4      2 ?S_EC_MUL_L02
      0      2   rorLoDis


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  DisplayBlink
     728  DisplayHandler
     114  Info
     140  PrintComError
      32  RefreshDisplay
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTG
       1  alarmLEDImg
       1  pointer
     954  printLoDi
     494  printXDi
      74  rorLoDis
       7  -- Other

 
     5 bytes in segment ABSOLUTE
 2 566 bytes in segment CODE
     7 bytes in segment INITTAB
     2 bytes in segment NEAR_Z
 
 2 566 bytes of CODE memory (+ 7 bytes shared)
     2 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
