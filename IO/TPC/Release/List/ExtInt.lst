###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            23/Jan/2017  13:07:10
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\TPC\Src\ExtInt.c
#    Command line =  
#        D:\S2Prog\IO\TPC\Src\ExtInt.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\TPC\Release\Obj -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\TPC\Release\List -y --initializers_in_flash --no_tbaa
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\TPC\INC\ -I
#        D:\S2Prog\IO\TPC\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohs
#    List file    =  D:\S2Prog\IO\TPC\Release\List\ExtInt.lst
#    Object file  =  D:\S2Prog\IO\TPC\Release\Obj\ExtInt.r90
#
###############################################################################

D:\S2Prog\IO\TPC\Src\ExtInt.c
      1          /****************************************************************************************
      2          / keyboard handling
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom128.h"
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          
     11          /*************************************************************************
     12          *
     13          *  External int 4 (Keyboard ???)
     14          *
     15          *************************************************************************/
     16          #pragma vector=INT4_vect

   \                                 In  segment CODE, align 2, keep-with-next
     17          __interrupt void IntHandler_INT4( void ){
   \                     IntHandler_INT4:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     18          
     19          
     20              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
     21              OS_EnterIntStack();
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??IntHandler_INT4_0
   \   00000046   9478               SEI
     22          
     23              if (!kbd_delay_cnt) {
   \                     ??IntHandler_INT4_0:
   \   00000048   9100....           LDS     R16, kbd_delay_cnt
   \   0000004C   2300               TST     R16
   \   0000004E   F429               BRNE    ??IntHandler_INT4_1
     24          
     25                switch (UnitID) {
     26                case 0x00:                  // TPC140 
     27                  break;
     28                }
     29                OS_SignalEvent(1, &TCB_Info);
   \   00000050   ....               LDI     R18, LOW(TCB_Info)
   \   00000052   ....               LDI     R19, (TCB_Info) >> 8
   \   00000054   E001               LDI     R16, 1
   \   00000056   ........           CALL    OS_SignalEvent
     30              }
     31              OS_LeaveIntStack();
   \                     ??IntHandler_INT4_1:
   \   0000005A   ....               RJMP    ?Subroutine0
     32              OS_LeaveInterrupt();
     33          
     34          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   94F8               CLI
   \   00000002   ........           CALL    OS__LeaveIntStack
   \   00000006   9100....           LDS     R16, (OS_Counters + 1)
   \   0000000A   950A               DEC     R16
   \   0000000C   9300....           STS     (OS_Counters + 1), R16
   \   00000010   9100....           LDS     R16, OS_Counters
   \   00000014   3001               CPI     R16, 1
   \   00000016   F431               BRNE    ??Subroutine0_0
   \   00000018   9100....           LDS     R16, OS_Pending
   \   0000001C   2300               TST     R16
   \   0000001E   F011               BREQ    ??Subroutine0_0
   \   00000020   ........           CALL    OS_SwitchFromInt
   \                     ??Subroutine0_0:
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   950A               DEC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   BF9B               OUT     0x3B, R25
   \   00000030   BF8F               OUT     0x3F, R24
   \   00000032   9109               LD      R16, Y+
   \   00000034   9119               LD      R17, Y+
   \   00000036   9129               LD      R18, Y+
   \   00000038   9139               LD      R19, Y+
   \   0000003A   9149               LD      R20, Y+
   \   0000003C   9159               LD      R21, Y+
   \   0000003E   9169               LD      R22, Y+
   \   00000040   9179               LD      R23, Y+
   \   00000042   9009               LD      R0, Y+
   \   00000044   9019               LD      R1, Y+
   \   00000046   9029               LD      R2, Y+
   \   00000048   9039               LD      R3, Y+
   \   0000004A   91E9               LD      R30, Y+
   \   0000004C   91F9               LD      R31, Y+
   \   0000004E   9189               LD      R24, Y+
   \   00000050   9199               LD      R25, Y+
   \   00000052   9518               RETI
     35          
     36          
     37          /*************************************************************************
     38          *
     39          *  External int 5 (Alarm ack)
     40          *
     41          *************************************************************************/
     42          #pragma vector=INT5_vect

   \                                 In  segment CODE, align 2, keep-with-next
     43          __interrupt void IntHandler_INT5( void ){
   \                     IntHandler_INT5:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     44          
     45              char i ;
     46              
     47              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
     48              OS_EnterIntStack();
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??IntHandler_INT5_0
   \   00000046   9478               SEI
     49          
     50            
     51              if (!kbd_delay_cnt) {
   \                     ??IntHandler_INT5_0:
   \   00000048   9100....           LDS     R16, kbd_delay_cnt
   \   0000004C   2300               TST     R16
   \   0000004E   F549               BRNE    ??IntHandler_INT5_1
     52                switch (UnitID) {
   \   00000050   9100....           LDS     R16, UnitID
   \   00000054   950A               DEC     R16
   \   00000056   F011               BREQ    ??IntHandler_INT5_2
   \   00000058   500F               SUBI    R16, 15
   \   0000005A   F4F1               BRNE    ??IntHandler_INT5_3
     53                case TPC140:           
     54                case TPC196:           
     55                  if (Disp.disp_vt == ALARM_VT) {
   \                     ??IntHandler_INT5_2:
   \   0000005C   9100....           LDS     R16, (Disp + 1752)
   \   00000060   2300               TST     R16
   \   00000062   F4B9               BRNE    ??IntHandler_INT5_4
     56                      if (Disp.alarmLED == ALARM_FLASH) {
   \   00000064   9100....           LDS     R16, (Disp + 1751)
   \   00000068   3002               CPI     R16, 2
   \   0000006A   F419               BRNE    ??IntHandler_INT5_5
     57                          Disp.alarmLED =  ALARM_ON ;          // reset alarm
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   9300....           STS     (Disp + 1751), R16
     58                      }
     59                      for (i=0; i < 20; i++) {
   \                     ??IntHandler_INT5_5:
   \   00000072   ....               LDI     R30, LOW(Disp)
   \   00000074   ....               LDI     R31, (Disp) >> 8
   \   00000076   E104               LDI     R16, 20
     60                          Disp.image[i] &= ~0x80 ;          // disp blink off
   \                     ??IntHandler_INT5_6:
   \   00000078   8120               LD      R18, Z
   \   0000007A   8131               LDD     R19, Z+1
   \   0000007C   772F               ANDI    R18, 0x7F
   \   0000007E   9321               ST      Z+, R18
   \   00000080   9331               ST      Z+, R19
     61                      }
   \   00000082   950A               DEC     R16
   \   00000084   F7C9               BRNE    ??IntHandler_INT5_6
     62                      tx_status |= ALARM_SEND ;           // Flag data to send
   \   00000086   ....               LDI     R30, LOW(tx_status)
   \   00000088   ....               LDI     R31, (tx_status) >> 8
   \   0000008A   8100               LD      R16, Z
   \   0000008C   6002               ORI     R16, 0x02
   \   0000008E   8300               ST      Z, R16
   \   00000090   C003               RJMP    ??IntHandler_INT5_3
     63                  } else {
     64                      Disp.disp_vt = ALARM_VT ;
   \                     ??IntHandler_INT5_4:
   \   00000092   E000               LDI     R16, 0
   \   00000094   9300....           STS     (Disp + 1752), R16
     65                  }
     66                  break;
     67                }
     68                OS_SignalEvent(1, &TCB_Info);
   \                     ??IntHandler_INT5_3:
   \   00000098   ....               LDI     R18, LOW(TCB_Info)
   \   0000009A   ....               LDI     R19, (TCB_Info) >> 8
   \   0000009C   E001               LDI     R16, 1
   \   0000009E   ........           CALL    OS_SignalEvent
     69              }
     70              OS_LeaveIntStack();
   \                     ??IntHandler_INT5_1:
   \   000000A2   ....               RJMP    ?Subroutine0
     71              OS_LeaveInterrupt();
     72          }
     73          
     74          /*************************************************************************
     75          *
     76          *  External int 6 (Arrow up)
     77          *
     78          *************************************************************************/
     79          #pragma vector=INT6_vect

   \                                 In  segment CODE, align 2, keep-with-next
     80          __interrupt void IntHandler_INT6( void ){
   \                     IntHandler_INT6:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     81          
     82              char i, j ;
     83              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
     84              OS_EnterIntStack();
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??IntHandler_INT6_0
   \   00000046   9478               SEI
     85          
     86              if (!kbd_delay_cnt) {  
   \                     ??IntHandler_INT6_0:
   \   00000048   9100....           LDS     R16, kbd_delay_cnt
   \   0000004C   2300               TST     R16
   \   0000004E   F509               BRNE    ??IntHandler_INT6_1
     87                switch (UnitID) {
   \   00000050   9100....           LDS     R16, UnitID
   \   00000054   3100               CPI     R16, 16
   \   00000056   F4C1               BRNE    ??IntHandler_INT6_2
     88                case TPC140:        
     89                    i = Disp.disp_vt ;
   \   00000058   9120....           LDS     R18, (Disp + 1752)
     90                    for (j=0; (j < NO_OF_VT); j++) {
   \   0000005C   E000               LDI     R16, 0
     91                        if (++i >= NO_OF_VT) {
   \                     ??IntHandler_INT6_3:
   \   0000005E   9523               INC     R18
   \   00000060   3624               CPI     R18, 100
   \   00000062   F008               BRCS    ??IntHandler_INT6_4
     92                            i = 0 ;
   \   00000064   E020               LDI     R18, 0
     93                        }
     94                        if (Disp.window_enable[i] == true) {
   \                     ??IntHandler_INT6_4:
   \   00000066   E0F0               LDI     R31, 0
   \   00000068   2FE2               MOV     R30, R18
   \   0000006A   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   0000006E   8110               LD      R17, Z
   \   00000070   3011               CPI     R17, 1
   \   00000072   F419               BRNE    ??IntHandler_INT6_5
     95                            Disp.disp_vt = i ;
   \   00000074   9320....           STS     (Disp + 1752), R18
     96                            j = NO_OF_VT ;                  // terminate for loop
   \   00000078   E604               LDI     R16, 100
     97                        }
     98                    }
   \                     ??IntHandler_INT6_5:
   \   0000007A   9503               INC     R16
   \   0000007C   3604               CPI     R16, 100
   \   0000007E   F378               BRCS    ??IntHandler_INT6_3
     99                   	RefreshDisplay( Disp.disp_vt );
   \   00000080   9100....           LDS     R16, (Disp + 1752)
   \   00000084   ........           CALL    RefreshDisplay
    100                    break;
    101                }
    102                OS_SignalEvent(1, &TCB_Info);
   \                     ??IntHandler_INT6_2:
   \   00000088   ....               LDI     R18, LOW(TCB_Info)
   \   0000008A   ....               LDI     R19, (TCB_Info) >> 8
   \   0000008C   E001               LDI     R16, 1
   \   0000008E   ........           CALL    OS_SignalEvent
    103              }
    104              OS_LeaveIntStack();
   \                     ??IntHandler_INT6_1:
   \   00000092                      REQUIRE ?Subroutine0
   \   00000092                      ;               // Fall through to label ?Subroutine0
    105              OS_LeaveInterrupt();
    106          }
    107          
    108          /*************************************************************************
    109          *
    110          *  External int 7 (Arrow down)
    111          *
    112          *************************************************************************/
    113          #pragma vector=INT7_vect

   \                                 In  segment CODE, align 2, keep-with-next
    114          __interrupt void IntHandler_INT7( void ){
   \                     IntHandler_INT7:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    115          
    116               char i, j ;
    117              OS_EnterInterrupt();
   \   00000024   9100....           LDS     R16, OS_Counters
   \   00000028   9503               INC     R16
   \   0000002A   9300....           STS     OS_Counters, R16
   \   0000002E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000032   9503               INC     R16
   \   00000034   9300....           STS     (OS_Counters + 1), R16
    118              OS_EnterIntStack();
   \   00000038   94F8               CLI
   \   0000003A   ........           CALL    OS__EnterIntStack
   \   0000003E   9100....           LDS     R16, (OS_Counters + 1)
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??IntHandler_INT7_0
   \   00000046   9478               SEI
    119          
    120              if (!kbd_delay_cnt) {
   \                     ??IntHandler_INT7_0:
   \   00000048   9100....           LDS     R16, kbd_delay_cnt
   \   0000004C   2300               TST     R16
   \   0000004E   F509               BRNE    ??IntHandler_INT7_1
    121                switch (UnitID) {
   \   00000050   9100....           LDS     R16, UnitID
   \   00000054   3100               CPI     R16, 16
   \   00000056   F4C1               BRNE    ??IntHandler_INT7_2
    122                case TPC140:             
    123            
    124                    i = Disp.disp_vt ;
   \   00000058   9120....           LDS     R18, (Disp + 1752)
    125                    for (j=0; (j < NO_OF_VT); j++) {
   \   0000005C   E000               LDI     R16, 0
    126                        if (--i >= NO_OF_VT) {
   \                     ??IntHandler_INT7_3:
   \   0000005E   952A               DEC     R18
   \   00000060   3624               CPI     R18, 100
   \   00000062   F008               BRCS    ??IntHandler_INT7_4
    127                            i = NO_OF_VT -1 ;
   \   00000064   E623               LDI     R18, 99
    128                        }
    129                        if (Disp.window_enable[i] == true) {
   \                     ??IntHandler_INT7_4:
   \   00000066   E0F0               LDI     R31, 0
   \   00000068   2FE2               MOV     R30, R18
   \   0000006A   ....               SUBI    R30, LOW((-(Disp + 100) & 0xFFFF))
   \   0000006C   ....               SBCI    R31, HIGH((-(Disp + 100) & 0xFFFF))
   \   0000006E   8110               LD      R17, Z
   \   00000070   3011               CPI     R17, 1
   \   00000072   F419               BRNE    ??IntHandler_INT7_5
    130          //              if ((Disp.vt_status >> i) & 0x01) {
    131                            Disp.disp_vt = i ;
   \   00000074   9320....           STS     (Disp + 1752), R18
    132                            j = NO_OF_VT ;                  // terminate for loop
   \   00000078   E604               LDI     R16, 100
    133                        }
    134                    }
   \                     ??IntHandler_INT7_5:
   \   0000007A   9503               INC     R16
   \   0000007C   3604               CPI     R16, 100
   \   0000007E   F378               BRCS    ??IntHandler_INT7_3
    135              	RefreshDisplay( Disp.disp_vt );
   \   00000080   9100....           LDS     R16, (Disp + 1752)
   \   00000084   ........           CALL    RefreshDisplay
    136                  break;
    137                }
    138                OS_SignalEvent(1, &TCB_Info);
   \                     ??IntHandler_INT7_2:
   \   00000088   ....               LDI     R18, LOW(TCB_Info)
   \   0000008A   ....               LDI     R19, (TCB_Info) >> 8
   \   0000008C   E001               LDI     R16, 1
   \   0000008E   ........           CALL    OS_SignalEvent
    139              }
    140              OS_LeaveIntStack();
   \                     ??IntHandler_INT7_1:
   \   00000092   ....               RJMP    ?Subroutine0
    141              OS_LeaveInterrupt();
    142          }

   \                                 In  segment INTVEC, offset 0x14, root
   \                     `??IntHandler_INT4::??INTVEC 20`:
   \   00000014   ........           JMP     IntHandler_INT4

   \                                 In  segment INTVEC, offset 0x18, root
   \                     `??IntHandler_INT5::??INTVEC 24`:
   \   00000018   ........           JMP     IntHandler_INT5

   \                                 In  segment INTVEC, offset 0x1c, root
   \                     `??IntHandler_INT6::??INTVEC 28`:
   \   0000001C   ........           JMP     IntHandler_INT6

   \                                 In  segment INTVEC, offset 0x20, root
   \                     `??IntHandler_INT7::??INTVEC 32`:
   \   00000020   ........           JMP     IntHandler_INT7

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_INT4
       16      2   -> OS_SignalEvent
       16      2   -> OS_SwitchFromInt
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_INT5
       16      2   -> OS_SignalEvent
       16      2   -> OS_SwitchFromInt
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_INT6
       16      2   -> OS_SignalEvent
       16      2   -> OS_SwitchFromInt
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> RefreshDisplay
     16      2   IntHandler_INT7
       16      2   -> OS_SignalEvent
       16      2   -> OS_SwitchFromInt
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> RefreshDisplay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      84  ?Subroutine0
      92  IntHandler_INT4
       4  IntHandler_INT4::??INTVEC 20
     164  IntHandler_INT5
       4  IntHandler_INT5::??INTVEC 24
     146  IntHandler_INT6
       4  IntHandler_INT6::??INTVEC 28
     148  IntHandler_INT7
       4  IntHandler_INT7::??INTVEC 32

 
 634 bytes in segment CODE
  16 bytes in segment INTVEC
 
 634 bytes of CODE memory (+ 16 bytes shared)

Errors: none
Warnings: none
