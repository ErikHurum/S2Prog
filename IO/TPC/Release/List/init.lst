###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            23/Jan/2017  13:07:10
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Atmel AVR 6.80
#
#    Source file  =  D:\S2Prog\IO\TPC\Src\init.c
#    Command line =  
#        D:\S2Prog\IO\TPC\Src\init.c --cpu=m128 -ms -o
#        D:\S2Prog\IO\TPC\Release\Obj -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\TPC\Release\List -y --initializers_in_flash --no_tbaa
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\TPC\INC\ -I
#        D:\S2Prog\IO\TPC\..\..\SHARED\INC\ --eeprom_size 4096 --clib -Ohs
#    List file    =  D:\S2Prog\IO\TPC\Release\List\init.lst
#    Object file  =  D:\S2Prog\IO\TPC\Release\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\TPC\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom128.h"

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x51
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5c
   \   union <unnamed> volatile __io _A_XDIV
   \                     _A_XDIV:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x64
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6c
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6d
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x95
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*
     14          **===========================================================================
     15          ** Init the system according to board type
     16          **===========================================================================
     17          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     18          void InitSystem(void) {
   \                     InitSystem:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
     19          
     20              char UnitIDtemp;
     21          
     22              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000008   E000               LDI     R16, 0
   \   0000000A   BB07               OUT     0x17, R16
     23          //    PORTB   =  0xc;
     24          #if (OS_UART == 0)
     25              UnitIDtemp = TPC140_LOC; //AStmark  for test
     26          #else
     27              UnitIDtemp  = (PINB >> 2)& 0x03;       //get the unit ID
   \   0000000C   B386               IN      R24, 0x16
   \   0000000E   9586               LSR     R24
   \   00000010   9586               LSR     R24
   \   00000012   7083               ANDI    R24, 0x03
     28          #endif
     29           
     30               if (((ReadEEPROMByte(EEPROM_PRI_ADDR)) < 30) || ((ReadEEPROMByte(EEPROM_PRI_ADDR) > 45))) {
   \   00000014   E001               LDI     R16, 1
   \   00000016   E010               LDI     R17, 0
   \   00000018   ........           CALL    ReadEEPROMByte
   \   0000001C   310E               CPI     R16, 30
   \   0000001E   F038               BRCS    ??InitSystem_0
   \   00000020   E001               LDI     R16, 1
   \   00000022   E010               LDI     R17, 0
   \   00000024   ........           CALL    ReadEEPROMByte
   \   00000028   320E               CPI     R16, 46
   \   0000002A   F408               BRCC    $+2+2
   \   0000002C   C07C               RJMP    ??InitSystem_1
     31                switch (UnitIDtemp) {
   \                     ??InitSystem_0:
   \   0000002E   2F08               MOV     R16, R24
   \   00000030   2388               TST     R24
   \   00000032   F029               BREQ    ??InitSystem_2
   \   00000034   950A               DEC     R16
   \   00000036   F071               BREQ    ??InitSystem_3
   \   00000038   950A               DEC     R16
   \   0000003A   F0D9               BREQ    ??InitSystem_4
   \   0000003C   C074               RJMP    ??InitSystem_1
     32                  case TPC140_LOC:
     33                    WriteEEPROMByte(EEPROM_PRI_ADDR, TPC140_DEF_ADDR);
   \                     ??InitSystem_2:
   \   0000003E   E12F               LDI     R18, 31
   \   00000040   E001               LDI     R16, 1
   \   00000042   E010               LDI     R17, 0
   \   00000044   ........           CALL    WriteEEPROMByte
     34                    WriteEEPROMByte(EEPROM_SEC_ADDR, 0);
   \   00000048   E020               LDI     R18, 0
   \   0000004A   E002               LDI     R16, 2
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   ........           CALL    WriteEEPROMByte
     35                    break;
   \   00000052   C072               RJMP    ??InitSystem_5
     36                  case TPC350_LOC:
     37                    WriteEEPROMByte(EEPROM_PRI_ADDR, TPC350_DEF_ADDR);
   \                     ??InitSystem_3:
   \   00000054   E12E               LDI     R18, 30
   \   00000056   E001               LDI     R16, 1
   \   00000058   E010               LDI     R17, 0
   \   0000005A   ........           CALL    WriteEEPROMByte
     38                    WriteEEPROMByte(EEPROM_SEC_ADDR, 0);
   \   0000005E   E020               LDI     R18, 0
   \   00000060   E002               LDI     R16, 2
   \   00000062   E010               LDI     R17, 0
   \   00000064   ........           CALL    WriteEEPROMByte
     39                    break;
     40                  case TPC196_LOC:
     41                    WriteEEPROMByte(EEPROM_PRI_ADDR, TPC196_DEF_ADDR);
     42                    WriteEEPROMByte(EEPROM_SEC_ADDR, 0);
     43                    break;
     44                }
     45              }
     46             
     47              switch (UnitIDtemp) {
     48                case TPC140_LOC:
     49                  UnitID = TPC140;
     50                  MyPriAddress = TPC140_DEF_ADDR;
     51                  break;
     52                case TPC350_LOC:
     53                  UnitID = TPC350;
   \                     ??InitSystem_6:
   \   00000068   E000               LDI     R16, 0
   \   0000006A   9300....           STS     UnitID, R16
     54                  MyPriAddress = TPC350_DEF_ADDR;
   \   0000006E   E10E               LDI     R16, 30
   \   00000070   C00E               RJMP    ??InitSystem_7
   \                     ??InitSystem_4:
   \   00000072   E220               LDI     R18, 32
   \   00000074   E001               LDI     R16, 1
   \   00000076   E010               LDI     R17, 0
   \   00000078   ........           CALL    WriteEEPROMByte
   \   0000007C   E020               LDI     R18, 0
   \   0000007E   E002               LDI     R16, 2
   \   00000080   E010               LDI     R17, 0
   \   00000082   ........           CALL    WriteEEPROMByte
     55                  break;
     56                case TPC196_LOC:
     57                  UnitID = TPC196;
   \                     ??InitSystem_8:
   \   00000086   E001               LDI     R16, 1
   \   00000088   9300....           STS     UnitID, R16
     58                  MyPriAddress = TPC196_DEF_ADDR;
   \   0000008C   E200               LDI     R16, 32
   \                     ??InitSystem_7:
   \   0000008E   9300....           STS     MyPriAddress, R16
     59                  break;
     60              }
     61              MySecAddress = MyAddress() ;    // Get my address
   \                     ??InitSystem_9:
   \   00000092   ........           CALL    MyAddress
   \   00000096   9300....           STS     MySecAddress, R16
     62          
     63          
     64          //#if (OS_UART == 0)
     65          //    UnitID = TPC140; //AStmark  for test
     66          //#endif
     67          
     68              Init_CPU();                         // init all processes
   \   0000009A   ....               RCALL   Init_CPU
     69              Init_IO();
   \   0000009C   ....               RCALL   Init_IO
     70              Init_TMR() ;
   \   0000009E   9100....           LDS     R16, UnitID
   \   000000A2   950A               DEC     R16
   \   000000A4   F011               BREQ    ??InitSystem_10
   \   000000A6   500F               SUBI    R16, 15
   \   000000A8   F421               BRNE    ??InitSystem_11
   \                     ??InitSystem_10:
   \   000000AA   E809               LDI     R16, 137
   \   000000AC   BF03               OUT     0x33, R16
   \   000000AE   E003               LDI     R16, 3
   \   000000B0   BF01               OUT     0x31, R16
     71          #if (OS_UART != 0)
     72              Init_USART(0, 9600) ;              // 
   \                     ??InitSystem_11:
   \   000000B2   ....               LDI     R30, LOW(UART)
   \   000000B4   ....               LDI     R31, (UART) >> 8
   \   000000B6   E000               LDI     R16, 0
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   8302               STD     Z+2, R16
   \   000000BC   8303               STD     Z+3, R16
   \   000000BE   8304               STD     Z+4, R16
   \   000000C0   8305               STD     Z+5, R16
   \   000000C2   8306               STD     Z+6, R16
   \   000000C4   8307               STD     Z+7, R16
   \   000000C6   8706               STD     Z+14, R16
   \   000000C8   8707               STD     Z+15, R16
   \   000000CA   8B00               STD     Z+16, R16
   \   000000CC   8B01               STD     Z+17, R16
   \   000000CE   8B02               STD     Z+18, R16
   \   000000D0   8B03               STD     Z+19, R16
   \   000000D2   8B04               STD     Z+20, R16
   \   000000D4   8B05               STD     Z+21, R16
   \   000000D6   8702               STD     Z+10, R16
   \   000000D8   EF0A               LDI     R16, 250
   \   000000DA   8B06               STD     Z+22, R16
   \   000000DC   8B17               STD     Z+23, R17
   \   000000DE   ....               LDI     R16, LOW(TxBufferCh0)
   \   000000E0   ....               LDI     R17, (TxBufferCh0) >> 8
   \   000000E2   8300               ST      Z, R16
   \   000000E4   8311               STD     Z+1, R17
   \   000000E6   ....               LDI     R16, LOW(RxBufferCh0)
   \   000000E8   ....               LDI     R17, (RxBufferCh0) >> 8
   \   000000EA   8704               STD     Z+12, R16
   \   000000EC   8715               STD     Z+13, R17
   \   000000EE   E000               LDI     R16, 0
   \   000000F0   B90B               OUT     0x0B, R16
   \   000000F2   E607               LDI     R16, 103
   \   000000F4   B909               OUT     0x09, R16
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   9300....           STS     _A_UBRR0H, R16
   \   000000FC   EB08               LDI     R16, 184
   \   000000FE   B90A               OUT     0x0A, R16
   \   00000100   E006               LDI     R16, 6
   \   00000102   9300....           STS     _A_UCSR0C, R16
     73          #endif
     74              Init_Values();                      // init the values in the system
   \   00000106   E080               LDI     R24, 0
   \   00000108   E090               LDI     R25, 0
   \   0000010A   ....               LDI     R26, LOW(packed_data)
   \   0000010C   ....               LDI     R27, (packed_data) >> 8
   \                     ??InitSystem_12:
   \   0000010E   018C               MOVW    R17:R16, R25:R24
   \   00000110   5F0D               SUBI    R16, 253
   \   00000112   4F1F               SBCI    R17, 255
   \   00000114   ........           CALL    ReadEEPROMByte
   \   00000118   930D               ST      X+, R16
   \   0000011A   9601               ADIW    R25:R24, 1
   \   0000011C   3288               CPI     R24, 40
   \   0000011E   E000               LDI     R16, 0
   \   00000120   0790               CPC     R25, R16
   \   00000122   F3AC               BRLT    ??InitSystem_12
     75          
     76          }
   \   00000124   ....               RJMP    ?Subroutine0
   \                     ??InitSystem_1:
   \   00000126   2388               TST     R24
   \   00000128   F039               BREQ    ??InitSystem_5
   \   0000012A   958A               DEC     R24
   \   0000012C   F409               BRNE    $+2+2
   \   0000012E   CF9C               RJMP    ??InitSystem_6
   \   00000130   958A               DEC     R24
   \   00000132   F409               BRNE    $+2+2
   \   00000134   CFA8               RJMP    ??InitSystem_8
   \   00000136   CFAD               RJMP    ??InitSystem_9
   \                     ??InitSystem_5:
   \   00000138   E100               LDI     R16, 16
   \   0000013A   9300....           STS     UnitID, R16
   \   0000013E   E10F               LDI     R16, 31
   \   00000140   CFA6               RJMP    ??InitSystem_7
   \   00000142                      REQUIRE _A_DDRB
   \   00000142                      REQUIRE _A_PINB
   \   00000142                      REQUIRE _A_UCSR0A
   \   00000142                      REQUIRE _A_UBRR0L
   \   00000142                      REQUIRE _A_UBRR0H
   \   00000142                      REQUIRE _A_UCSR0B
   \   00000142                      REQUIRE _A_UCSR0C
   \   00000142                      REQUIRE _A_TCCR0
   \   00000142                      REQUIRE _A_OCR0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9508               RET
     77          
     78          /*
     79          **===========================================================================
     80          ** Init the CPU related registers
     81          **===========================================================================
     82          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     83          void Init_CPU( void ) {
   \                     Init_CPU:
     84          
     85              __disable_interrupt();
   \   00000000   94F8               CLI
     86          
     87              /*--- Configure CPU and interrupts ---*/
     88              switch (UnitID) {
   \   00000002   9100....           LDS     R16, UnitID
   \   00000006   950A               DEC     R16
   \   00000008   F011               BREQ    ??Init_CPU_0
   \   0000000A   500F               SUBI    R16, 15
   \   0000000C   F441               BRNE    ??Init_CPU_1
     89              case TPC140:                  // TPC140
     90              case TPC196:                  // TPC196
     91                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \                     ??Init_CPU_0:
   \   0000000E   E000               LDI     R16, 0
   \   00000010   BF09               OUT     0x39, R16
     92                  EICRA = 0xAA ;        // External interrupt control register, faling
   \   00000012   EA0A               LDI     R16, 170
   \   00000014   9300....           STS     _A_EICRA, R16
     93                  EICRB = 0xAA ;        // External interrupt control register, falling edge 
   \   00000018   BF0A               OUT     0x3A, R16
     94                  EIMSK = 0xF0 ;        // External interrupt mask register, int 4 - 7 on 
   \   0000001A   EF00               LDI     R16, 240
   \   0000001C   BF09               OUT     0x39, R16
     95                  break;
     96              }
     97              MCUCR = 0x00 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_1:
   \   0000001E   E000               LDI     R16, 0
   \   00000020   BF05               OUT     0x35, R16
     98              XMCRA = 0x00 ;       // maximum wait states
   \   00000022   9300....           STS     _A_XMCRA, R16
     99              XMCRB = 0x07 ;       // Full portC + bus keeper
   \   00000026   E007               LDI     R16, 7
   \   00000028   9300....           STS     _A_XMCRB, R16
    100              SREG  = 0x80 ;        // global interrupt
   \   0000002C   E800               LDI     R16, 128
   \   0000002E   BF0F               OUT     0x3F, R16
    101              XDIV  = 0x00 ;     // Init valuse used 0x00
   \   00000030   E000               LDI     R16, 0
   \   00000032   BF0C               OUT     0x3C, R16
    102          
    103          
    104              RestartStatus = MCUCSR;       // Remember reset source
   \   00000034   B704               IN      R16, 0x34
   \   00000036   9300....           STS     RestartStatus, R16
    105              MCUCSR = 0x00;              // and reset
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   BF04               OUT     0x34, R16
    106              /*--- Initialize buffer ---*/
    107              WriteCount = 0;
   \   0000003E   9300....           STS     WriteCount, R16
    108          
    109          }
   \   00000042   9508               RET
   \   00000044                      REQUIRE _A_EIMSK
   \   00000044                      REQUIRE _A_EICRA
   \   00000044                      REQUIRE _A_EICRB
   \   00000044                      REQUIRE _A_MCUCR
   \   00000044                      REQUIRE _A_XMCRA
   \   00000044                      REQUIRE _A_XMCRB
   \   00000044                      REQUIRE _A_SREG
   \   00000044                      REQUIRE _A_XDIV
   \   00000044                      REQUIRE _A_MCUCSR
    110          
    111          /*
    112          **===========================================================================
    113          ** Init the watchdog registers
    114          **===========================================================================
    115          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    116          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
    117          
    118              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
    119              WDTCR = 0x0f;                           // 2.1 sec
   \   00000006   E00F               LDI     R16, 15
   \   00000008   BD01               OUT     0x21, R16
    120              asm("WDR");                             // kick the dog!!
   \   0000000A   95A8               WDR
    121          
    122          }
   \   0000000C   BF1F               OUT     0x3F, R17
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_WDTCR
    123          
    124          /*
    125          **===========================================================================
    126          ** Init the IO related registers
    127          **===========================================================================
    128          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    129          void Init_IO( void ) {
   \                     Init_IO:
    130          
    131              /*--- Initialize the data registers, output value and input pullup ---*/
    132              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   950A               DEC     R16
   \   00000006   F109               BREQ    ??Init_IO_0
   \   00000008   500F               SUBI    R16, 15
   \   0000000A   F5F1               BRNE    ??Init_IO_1
    133              case TPC140:                  // TPC140  
    134                  DDRA   =  0xff ;      // Port A data direction, all out
   \   0000000C   EF0F               LDI     R16, 255
   \   0000000E   BB0A               OUT     0x1A, R16
    135                  PORTA  =  0x00 ;      // Port A data
   \   00000010   E000               LDI     R16, 0
   \   00000012   BB0B               OUT     0x1B, R16
    136                  DDRB   =  0x00 ;      // Port B data direction, all in
   \   00000014   BB07               OUT     0x17, R16
    137                  PORTB  =  0x06 ;      // Port B data pullup on bit 2 and 3   
   \   00000016   E006               LDI     R16, 6
   \   00000018   BB08               OUT     0x18, R16
    138                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000001A   EF0F               LDI     R16, 255
   \   0000001C   BB04               OUT     0x14, R16
    139                  PORTC  =  0x00 ;      // Port C data
   \   0000001E   E000               LDI     R16, 0
   \   00000020   BB05               OUT     0x15, R16
    140                  DDRD   =  0xff ;      // Port D data direction, all out
   \   00000022   EF0F               LDI     R16, 255
   \   00000024   BB01               OUT     0x11, R16
    141                  PORTD  =  0xfe ;      // Port D data 1-7 high, 0 low
   \   00000026   EF0E               LDI     R16, 254
   \   00000028   BB02               OUT     0x12, R16
    142                  DDRE   =  0x04 ;      // Port E data direction, PE2out
   \   0000002A   E004               LDI     R16, 4
   \   0000002C   B902               OUT     0x02, R16
    143                  PORTE  =  0xfb ;      // Port E data pullup
   \   0000002E   EF0B               LDI     R16, 251
   \   00000030   B903               OUT     0x03, R16
    144                  DDRF   =  0x00 ;      // Port F data direction, all in
   \   00000032   E000               LDI     R16, 0
   \   00000034   9300....           STS     _A_DDRF, R16
    145                  PORTF  =  0xff ;      // Port F data pullup
   \   00000038   EF0F               LDI     R16, 255
   \   0000003A   9300....           STS     _A_PORTF, R16
    146                  DDRG   =  0xff ;      // Port G data direction, all out
   \   0000003E   9300....           STS     _A_DDRG, R16
    147                  PORTG  =  0x00 ;      // Port G data 
   \   00000042   E000               LDI     R16, 0
   \   00000044   9300....           STS     _A_PORTG, R16
    148                  break;
   \   00000048   9508               RET
    149              case TPC196:                  // TPC196 
    150                  DDRA   =  0xff ;      // Port A data direction, all out
   \                     ??Init_IO_0:
   \   0000004A   EF0F               LDI     R16, 255
   \   0000004C   BB0A               OUT     0x1A, R16
    151                  PORTA  =  0x00 ;      // Port A data
   \   0000004E   E000               LDI     R16, 0
   \   00000050   BB0B               OUT     0x1B, R16
    152                  DDRB   =  0x80 ;      // Port B data direction, 0-6 inm 7 out
   \   00000052   E800               LDI     R16, 128
   \   00000054   BB07               OUT     0x17, R16
    153                  PORTB  =  0x06 ;      // Port B data pullup on bit 2 and 3   
   \   00000056   E006               LDI     R16, 6
   \   00000058   BB08               OUT     0x18, R16
    154                  DDRC   =  0xff ;      // Port C data direction, all out
   \   0000005A   EF0F               LDI     R16, 255
   \   0000005C   BB04               OUT     0x14, R16
    155                  PORTC  =  0x00 ;      // Port C data
   \   0000005E   E000               LDI     R16, 0
   \   00000060   BB05               OUT     0x15, R16
    156                  DDRD   =  0xff ;      // Port D data direction, all out
   \   00000062   EF0F               LDI     R16, 255
   \   00000064   BB01               OUT     0x11, R16
    157                  PORTD  =  0xfe ;      // Port D data 1-7 high, 0 low
   \   00000066   EF0E               LDI     R16, 254
   \   00000068   BB02               OUT     0x12, R16
    158                  DDRE   =  0x04 ;      // Port E data direction, PE2out
   \   0000006A   E004               LDI     R16, 4
   \   0000006C   B902               OUT     0x02, R16
    159                  PORTE  =  0xfb ;      // Port E data pullup
   \   0000006E   EF0B               LDI     R16, 251
   \   00000070   B903               OUT     0x03, R16
    160                  DDRF   =  0x00 ;      // Port F data direction, all in
   \   00000072   E000               LDI     R16, 0
   \   00000074   9300....           STS     _A_DDRF, R16
    161                  PORTF  =  0xff ;      // Port F data pullup
   \   00000078   EF0F               LDI     R16, 255
   \   0000007A   9300....           STS     _A_PORTF, R16
    162                  DDRG   =  0xff ;      // Port G data direction, all out
   \   0000007E   9300....           STS     _A_DDRG, R16
    163                  PORTG  =  0x00 ;      // Port G data 
   \   00000082   E000               LDI     R16, 0
   \   00000084   9300....           STS     _A_PORTG, R16
    164                  break;
    165              default:
    166                  break;
    167              }    
    168          }
   \                     ??Init_IO_1:
   \   00000088   9508               RET
   \   0000008A                      REQUIRE _A_DDRA
   \   0000008A                      REQUIRE _A_PORTA
   \   0000008A                      REQUIRE _A_DDRB
   \   0000008A                      REQUIRE _A_PORTB
   \   0000008A                      REQUIRE _A_DDRC
   \   0000008A                      REQUIRE _A_PORTC
   \   0000008A                      REQUIRE _A_DDRD
   \   0000008A                      REQUIRE _A_PORTD
   \   0000008A                      REQUIRE _A_DDRE
   \   0000008A                      REQUIRE _A_PORTE
   \   0000008A                      REQUIRE _A_DDRF
   \   0000008A                      REQUIRE _A_PORTF
   \   0000008A                      REQUIRE _A_DDRG
   \   0000008A                      REQUIRE _A_PORTG
    169          
    170          /*
    171          **===========================================================================
    172          ** Init the timer related registers
    173          **===========================================================================
    174          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    175          void Init_TMR( void ) {
   \                     Init_TMR:
    176              /*--- Timer control (disable clock inputs) ---*/
    177          
    178              switch (UnitID) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   950A               DEC     R16
   \   00000006   F011               BREQ    ??Init_TMR_0
   \   00000008   500F               SUBI    R16, 15
   \   0000000A   F421               BRNE    ??Init_TMR_1
    179              case TPC140:                  // TPC140
    180              case TPC196:                  // TPC196
    181                  TCCR0   =  0x89 ;      // Timer control register 0 
   \                     ??Init_TMR_0:
   \   0000000C   E809               LDI     R16, 137
   \   0000000E   BF03               OUT     0x33, R16
    182                  OCR0    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
   \   00000010   E003               LDI     R16, 3
   \   00000012   BF01               OUT     0x31, R16
    183                  break;
    184              default:
    185                  break;
    186              }
    187          
    188          } 
   \                     ??Init_TMR_1:
   \   00000014   9508               RET
   \   00000016                      REQUIRE _A_TCCR0
   \   00000016                      REQUIRE _A_OCR0
    189          
    190          /*
    191          **===========================================================================
    192          ** Init the USARTs registers
    193          **===========================================================================
    194          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    195          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   2F20               MOV     R18, R16
    196          
    197          
    198              /*--- Configure UART data block ---*/
    199              UART[channel].TxFirst   = 0x00;
   \   0000000A   ....               LDI     R26, LOW(UART)
   \   0000000C   ....               LDI     R27, (UART) >> 8
   \   0000000E   E10D               LDI     R16, 29
   \   00000010   9F20               MUL     R18, R16
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   0DE0               ADD     R30, R0
   \   00000016   1DF1               ADC     R31, R1
   \   00000018   E000               LDI     R16, 0
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   8302               STD     Z+2, R16
   \   0000001E   8303               STD     Z+3, R16
    200              UART[channel].TxLast    = 0x00;
   \   00000020   8304               STD     Z+4, R16
   \   00000022   8305               STD     Z+5, R16
    201              UART[channel].TxCount   = 0x00;
   \   00000024   8306               STD     Z+6, R16
   \   00000026   8307               STD     Z+7, R16
    202              UART[channel].RxFirst   = 0x00;
   \   00000028   8706               STD     Z+14, R16
   \   0000002A   8707               STD     Z+15, R16
    203              UART[channel].RxLast    = 0x00;
   \   0000002C   8B00               STD     Z+16, R16
   \   0000002E   8B01               STD     Z+17, R16
    204              UART[channel].RxCount   = 0x00;
   \   00000030   8B02               STD     Z+18, R16
   \   00000032   8B03               STD     Z+19, R16
    205              UART[channel].RxState   = SYNC;
   \   00000034   8B04               STD     Z+20, R16
    206              UART[channel].SyncCnt   = 0 ;
   \   00000036   8B05               STD     Z+21, R16
    207              UART[channel].TxStatus  = 0x00;
   \   00000038   8702               STD     Z+10, R16
    208          
    209              switch (channel) {
   \   0000003A   2322               TST     R18
   \   0000003C   F501               BRNE    ??Init_USART_0
    210              case 0x00 :          
    211                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \   0000003E   EF0A               LDI     R16, 250
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8B06               STD     Z+22, R16
   \   00000044   8B17               STD     Z+23, R17
    212                  UART[channel].pTxBuffer = TxBufferCh0;        
   \   00000046   ....               LDI     R16, LOW(TxBufferCh0)
   \   00000048   ....               LDI     R17, (TxBufferCh0) >> 8
   \   0000004A   930D               ST      X+, R16
   \   0000004C   931C               ST      X, R17
    213                  UART[channel].pRxBuffer = RxBufferCh0;        
   \   0000004E   ....               LDI     R16, LOW(RxBufferCh0)
   \   00000050   ....               LDI     R17, (RxBufferCh0) >> 8
   \   00000052   8704               STD     Z+12, R16
   \   00000054   8715               STD     Z+13, R17
    214                  UCSR0A  = 0x00; 
   \   00000056   E000               LDI     R16, 0
   \   00000058   B90B               OUT     0x0B, R16
    215                  UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
   \   0000005A   E400               LDI     R16, 64
   \   0000005C   E412               LDI     R17, 66
   \   0000005E   E02F               LDI     R18, 15
   \   00000060   E030               LDI     R19, 0
   \   00000062   ........           CALL    ?UL_DIVMOD_S_L03
   \   00000066   2F40               MOV     R20, R16
   \   00000068   954A               DEC     R20
   \   0000006A   B949               OUT     0x09, R20
    216                  UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
   \   0000006C   01C8               MOVW    R25:R24, R17:R16
   \   0000006E   9701               SBIW    R25:R24, 1
   \   00000070   9390....           STS     _A_UBRR0H, R25
    217                  UCSR0B  = 0xb8;       /* tx/ rx enable, int udre/rxon */
   \   00000074   EB08               LDI     R16, 184
   \   00000076   B90A               OUT     0x0A, R16
    218                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000078   E006               LDI     R16, 6
   \   0000007A   9300....           STS     _A_UCSR0C, R16
    219                  break;
    220              default:
    221                  break ;
    222              }    
    223          }
   \                     ??Init_USART_0:
   \   0000007E   ....               RJMP    ?Subroutine0
   \   00000080                      REQUIRE _A_UCSR0A
   \   00000080                      REQUIRE _A_UBRR0L
   \   00000080                      REQUIRE _A_UBRR0H
   \   00000080                      REQUIRE _A_UCSR0B
   \   00000080                      REQUIRE _A_UCSR0C
    224          
    225          /*
    226          **===========================================================================
    227          ** Init values  in the system
    228          **===========================================================================
    229          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    230          void Init_Values(void) {
   \                     Init_Values:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
    231          
    232              int i;
    233              
    234              for (i = 0; i < PACKED_DATA_SIZE; i++) {  //copy data from eeprom to ram
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
   \   0000000C   ....               LDI     R26, LOW(packed_data)
   \   0000000E   ....               LDI     R27, (packed_data) >> 8
    235                packed_data[i] = ReadEEPROMByte(EEPROM_EEPROMDATA +i);
   \                     ??Init_Values_0:
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   9633               ADIW    R31:R30, 3
   \   00000014   018F               MOVW    R17:R16, R31:R30
   \   00000016   ........           CALL    ReadEEPROMByte
   \   0000001A   930D               ST      X+, R16
    236              }
   \   0000001C   9601               ADIW    R25:R24, 1
   \   0000001E   3288               CPI     R24, 40
   \   00000020   E000               LDI     R16, 0
   \   00000022   0790               CPC     R25, R16
   \   00000024   F3AC               BRLT    ??Init_Values_0
    237           /* AStmark unused so far
    238              CharToAscii(MyPriAddress, &Disp.lo_data[0][0]);
    239              CharToAscii(MySecAddress, &Disp.lo_data[0][3]);
    240              Disp.lo_data[0][0] = 5 ;                         // four char to disp
    241          
    242              CharToAscii((char) PROG_VERSION, &Disp.x_data[0][0]);
    243              Disp.x_data[0][0] = 2 ;                          // four char to disp
    244          
    245              Disp.hi_data[0][0] = 4 ;                         // four char to disp
    246              Disp.hi_data[0][1] = 'V' ;                       // version
    247              CharToAscii((char) PROG_VERSION, &Disp.hi_data[0][2]) ;
    248          */
    249          
    250          }
   \   00000026                      REQUIRE ?Subroutine0
   \   00000026                      ;               // Fall through to label ?Subroutine0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   InitSystem
        4      2   -> Init_CPU
        4      2   -> Init_IO
        4      2   -> MyAddress
        4      2   -> ReadEEPROMByte
        4      2   -> WriteEEPROMByte
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      4      2   Init_USART
        4      2 ?UL_DIVMOD_S_L03
      4      2   Init_Values
        4      2   -> ReadEEPROMByte
      0      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?Subroutine0
     322  InitSystem
      68  Init_CPU
     138  Init_IO
      22  Init_TMR
     128  Init_USART
      38  Init_Values
      16  Init_Watchdog
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_MCUCSR
       1  _A_OCR0
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SREG
       1  _A_TCCR0
       1  _A_UBRR0H
       1  _A_UBRR0L
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_WDTCR
       1  _A_XDIV
       1  _A_XMCRA
       1  _A_XMCRB

 
  32 bytes in segment ABSOLUTE
 742 bytes in segment CODE
 
 742 bytes of CODE memory
   0 bytes of DATA memory (+ 32 bytes shared)

Errors: none
Warnings: none
