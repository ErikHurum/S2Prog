###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       10/Aug/2021  11:27:14
# Copyright 1996-2021 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\New ANSGCNV\Src\OS_Error.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW940A.tmp ("D:\S2Prog\IO\New
#        ANSGCNV\Src\OS_Error.c" --cpu=m128a -ms -o "D:\S2Prog\IO\New
#        ANSGCNV\Debug\Obj" -D OS_LIBMODE_R -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\New ANSGCNV\Debug\List" -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\New
#        ANSGCNV\INC\\" -I "D:\S2Prog\IO\New ANSGCNV\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\New ANSGCNV\Debug\List\OS_Error.lst
#    Object file  =  D:\S2Prog\IO\New ANSGCNV\Debug\Obj\OS_Error.r90
#
###############################################################################

D:\S2Prog\IO\New ANSGCNV\Src\OS_Error.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER GmbH & Co KG                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2012  SEGGER Microcontroller GmbH & Co KG         *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       OS version: 3.86g                                            *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : OS_Error.c
     31          Purpose : OS error handler. Not required in "R" (release) builds
     32                    Feel free to modify this file acc. to your target system.
     33          --------  END-OF-HEADER  ---------------------------------------------
     34          */
     35          
     36          #include "RTOS.h"
     37          
     38          /*********************************************************************
     39          *
     40          *       Global functions
     41          *
     42          **********************************************************************
     43          */
     44          
     45          /*********************************************************************
     46          *
     47          *       (OS_Error)
     48          *
     49          **********************************************************************
     50          
     51           Run-time error reaction
     52          
     53           When this happens, a fatal error has occured and the kernel
     54           can not continue. In linux, the equivalent would be a
     55           "kernel panic"
     56          
     57           This routine can be modified to suit your needs ...
     58           E.g. a red LED could light up. When using an
     59           emulator, you may set a breakpoint here.
     60           In the release builds of the library (R), this routine is not required
     61           (as no checks are performed).
     62           In the stack check builds (S/SP), only error 120 may occur.
     63           In the debug builds(D/DP), all of the listed errors may occur.
     64          
     65           The following are the current errorcodes:
     66           (Please refer to the documentation for more info)
     67          
     68          *** Port 100..119 ********************************
     69          OS_ERR_ISR_INDEX                      (100 = 0x64)
     70          OS_ERR_ISR_VECTOR                     (101 = 0x65)
     71          OS_ERR_ISR_PRIO                       (102 = 0x66)
     72          OS_ERR_WRONG_STACK                    (103 = 0x67)
     73          OS_ERR_ISR_NO_HANDLER                 (104 = 0x68)  *** No interrupt handler was defined for this interrupt
     74          OS_ERR_TLS_INIT                       (105 = 0x69)  *** OS_TLS_Init() called multiple times from one task
     75          
     76          *** OS generic ***********************************
     77          
     78          OS_ERR_EXTEND_CONTEXT                 (116 = 0x74)  *** OS_ExtendTaskContext called multiple times from one task
     79          OS_ERR_TIMESLICE                      (117 = 0x75)  *** A timeslice value of 0 (illegal) was set.
     80          OS_ERR_INTERNAL                       (118 = 0x76)  *** OS_ChangeTask called without RegionCnt set (or other internal error)
     81          OS_ERR_IDLE_RETURNS                   (119 = 0x77)  *** Idle loop should not return
     82          
     83          *** Stack overflow ******************************
     84          OS_ERR_STACK                          (120 = 0x78)  *** Stack overflow or invalid stack
     85          
     86          *** Counting semaphore overflow ******************
     87          OS_ERR_CSEMA_OVERFLOW                 (121 = 0x79)
     88          
     89          *** Power handling module ************************
     90          OS_ERR_POWER_OVER                     (122 = 0x7A)
     91          OS_ERR_POWER_UNDER                    (123 = 0x7B)
     92          OS_ERR_POWER_INDEX                    (124 = 0x7C)
     93          
     94          *** System/interrupt stack ***********************
     95          OS_ERR_SYS_STACK                      (125 = 0x7D) *** embOS system stack overflow
     96          OS_ERR_INT_STACK                      (126 = 0x7E) *** Interrupt stack overflow
     97          
     98          *** Invalid or non-initialized data structures ***
     99          OS_ERR_INV_TASK                       (128 = 0x80)
    100          OS_ERR_INV_TIMER                      (129 = 0x81)
    101          OS_ERR_INV_MAILBOX                    (130 = 0x82)
    102          OS_ERR_INV_CSEMA                      (132 = 0x84)
    103          OS_ERR_INV_RSEMA                      (133 = 0x85)
    104          
    105          *** Using GetMail1, PutMail1, GetMailCond1 or PutMailCond1
    106          *** on a non-1 byte mailbox  *********************
    107          OS_ERR_MAILBOX_NOT1                   (135 = 0x87)
    108          
    109          *** Waitable objects deleted with waiting tasks or occupied by task ***
    110          OS_ERR_MAILBOX_DELETE                 (136 = 0x88)
    111          OS_ERR_CSEMA_DELETE                   (137 = 0x89)
    112          OS_ERR_RSEMA_DELETE                   (138 = 0x8A)
    113          
    114          *** Internal errors, please contact SEGGER Microcontrollersysteme ***
    115          OS_ERR_MAILBOX_NOT_IN_LIST            (140 = 0x8C)
    116          OS_ERR_TASKLIST_CORRUPT               (142 = 0x8E)
    117          
    118          *** Queue errors *********************************
    119          OS_ERR_QUEUE_INUSE                    (143 = 0x8F)
    120          OS_ERR_QUEUE_NOT_INUSE                (144 = 0x90)
    121          OS_ERR_QUEUE_INVALID                  (145 = 0x91)
    122          OS_ERR_QUEUE_DELETE                   (146 = 0x92)
    123          
    124          *** Not matching routine calls or macro usage ****
    125          OS_ERR_UNUSE_BEFORE_USE               (150 = 0x96)
    126          OS_ERR_LEAVEREGION_BEFORE_ENTERREGION (151 = 0x97)
    127          OS_ERR_LEAVEINT                       (152 = 0x98)
    128          OS_ERR_DICNT                          (153 = 0x99)
    129          OS_ERR_INTERRUPT_DISABLED             (154 = 0x9A)
    130          OS_ERR_TASK_ENDS_WITHOUT_TERMINATE    (155 = 0x9B)
    131          OS_ERR_RESOURCE_OWNER                 (156 = 0x9C)
    132          OS_ERR_REGIONCNT                      (157 = 0x9D)
    133          
    134          *** Not a legal system call during interrupt *****
    135          OS_ERR_ILLEGAL_IN_ISR                 (160 = 0xA0)
    136          
    137          *** Not a legal system call during timer *********
    138          OS_ERR_ILLEGAL_IN_TIMER               (161 = 0xA1)
    139          
    140          *** Not a legal system call outside interrupt ****
    141          OS_ERR_ILLEGAL_OUT_ISR                (162 = 0xA2)
    142          
    143          *** Illegal states or function calls *************
    144          OS_ERR_NOT_IN_ISR                     (163 = 0xA3)  *** OS_EnterInterrupt() has been called, but CPU is not in ISR state
    145          OS_ERR_IN_ISR                         (164 = 0xA4)  *** OS_EnterInterrupt() has not been called, but CPU is in ISR state
    146          
    147          OS_ERR_INIT_NOT_CALLED                (165 = 0xA5)  *** OS_InitKern() was not called
    148          
    149          OS_ERR_CPU_STATE_ISR_ILLEGAL          (166 = 0xA6)  *** OS-function called from ISR with high priority
    150          OS_ERR_CPU_STATE_ILLEGAL              (167 = 0xA7)  *** CPU runs in illegal mode
    151          OS_ERR_CPU_STATE_UNKNOWN              (168 = 0xA8)  *** CPU runs in unknown mode or mode could not be read
    152          
    153          *** Double used data structures **
    154          OS_ERR_2USE_TASK                      (170 = 0xAA)
    155          OS_ERR_2USE_TIMER                     (171 = 0xAB)
    156          OS_ERR_2USE_MAILBOX                   (172 = 0xAC)
    157          OS_ERR_2USE_BSEMA                     (173 = 0xAD)
    158          OS_ERR_2USE_CSEMA                     (174 = 0xAE)
    159          OS_ERR_2USE_RSEMA                     (175 = 0xAF)
    160          OS_ERR_2USE_MEMF                      (176 = 0xB0)
    161          
    162          *** Communication errors (OSCOM) **
    163          OS_ERR_NESTED_RX_INT                  (180 = 0xB4)
    164          
    165          *** Fixed block memory pool  ***
    166          OS_ERR_MEMF_INV                       (190 = 0xBE)
    167          OS_ERR_MEMF_INV_PTR                   (191 = 0xBF)
    168          OS_ERR_MEMF_PTR_FREE                  (192 = 0xC0)
    169          OS_ERR_MEMF_RELEASE                   (193 = 0xC1)
    170          OS_ERR_MEMF_POOLADDR                  (194 = 0xC2)
    171          OS_ERR_MEMF_BLOCKSIZE                 (195 = 0xC3)
    172          
    173          *** Task suspend / resume errors ***
    174          OS_ERR_SUSPEND_TOO_OFTEN              (200 = 0xC8)
    175          OS_ERR_RESUME_BEFORE_SUSPEND          (201 = 0xC9)
    176          
    177          *** Other task related errors ***
    178          OS_ERR_TASK_PRIORITY                  (202 = 0xCA)
    179          
    180          *** Event object ***
    181          OS_ERR_EVENT_INVALID                  (210 = 0xD2)
    182          OS_ERR_EVENT_DELETE                   (212 = 0xD4)
    183          
    184          *** Tick Hook ***
    185          OS_ERR_TICKHOOK_INVALID               (223 = 0xDF)
    186          OS_ERR_TICKHOOK_FUNC_INVALID          (224 = 0xE0)
    187          
    188          *** Cache related ***
    189          OS_ERR_NON_ALIGNED_INVALIDATE         (230 = 0xE6)  *** Cache invalidation needs to be cache line aligned
    190          
    191          *** embOS special build, or internal
    192          OS_ERR_TRIAL_LIMIT                    (254 = 0xFE)
    193          
    194          */
    195          

   \                                 In  segment CODE, align 2, keep-with-next
    196          void OS_Error(int ErrCode) {
   \                     OS_Error:
    197            OS_EnterRegion();      /* Avoid further task switches            */
   \   00000000   9120....           LDS     R18, OS_Global
   \   00000004   9523               INC     R18
   \   00000006   9320....           STS     OS_Global, R18
    198            OS_DICnt = 0u;         /* Allow interrupts so we can communicate */
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   9320....           STS     (OS_Global + 1), R18
    199            OS_EI();
   \   00000010   9478               sei
    200            OS_Status = (OS_U8) ErrCode;
   \   00000012   2F20               MOV     R18, R16
   \   00000014   9320....           STS     OS_Status, R18
    201            while (OS_Status) {
   \                     ??OS_Error_0:
   \   00000018   9120....           LDS     R18, OS_Status
   \   0000001C   2322               TST     R18
   \   0000001E   F7E1               BRNE    ??OS_Error_0
    202              /* Endless loop may be left by setting OS_Status to 0. */
    203            }
    204          }
   \   00000020   9508               RET
    205          
    206          /****** End Of File *************************************************/

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   OS_Error


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      34  OS_Error

 
 34 bytes in segment CODE
 
 34 bytes of CODE memory

Errors: none
Warnings: none
