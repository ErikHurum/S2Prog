###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       10/Aug/2021  11:27:14
# Copyright 1996-2021 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\New ANSGCNV\Src\UsartInt.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW94B9.tmp ("D:\S2Prog\IO\New
#        ANSGCNV\Src\UsartInt.c" --cpu=m128a -ms -o "D:\S2Prog\IO\New
#        ANSGCNV\Debug\Obj" -D OS_LIBMODE_R -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\New ANSGCNV\Debug\List" -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\New
#        ANSGCNV\INC\\" -I "D:\S2Prog\IO\New ANSGCNV\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\New ANSGCNV\Debug\List\UsartInt.lst
#    Object file  =  D:\S2Prog\IO\New ANSGCNV\Debug\Obj\UsartInt.r90
#
###############################################################################

D:\S2Prog\IO\New ANSGCNV\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   Uart1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          
      8          
      9          #include "iom128a.h"

   \                                 In  segment ABSOLUTE, at 0x9c
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9a
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
     10          #include "stdio.h"
     11          #include "math.h"
     12          #include "externals.h"
     13          #include "version.h"
     14          
     15          #if (OS_UART != 0)
     16          
     17          // USART0
     18          #pragma vector=USART0_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     19          __interrupt void IntHandler_RX_USART0( void ){   
   \                     IntHandler_RX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     20          
     21              OS_EnterInterrupt();
   \   00000024   ........           CALL    OS_EnterInterrupt
     22              OS_EnterIntStack();
   \   00000028   94F8               cli
   \   0000002A   ........           CALL    OS__EnterIntStack
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   2300               TST     R16
   \   00000034   F409               BRNE    ??IntHandler_RX_USART0_0
   \   00000036   9478               sei
     23              if ( UCSR0A & __BIT_MASK( DOR0 ) ) {                // Overrun error? 
   \                     ??IntHandler_RX_USART0_0:
   \   00000038   B10B               IN      R16, 0x0B
     24              }
     25          
     26              if ( UCSR0A & __BIT_MASK( FE0 ) ) {                 // Framing error? 
   \   0000003A   B11B               IN      R17, 0x0B
     27              }
     28          
     29              while ( UCSR0A & __BIT_MASK( RXC0)  ) {                // New byte avaiable?
   \                     ??IntHandler_RX_USART0_1:
   \   0000003C   9B5F               SBIS    0x0B, 0x07
   \   0000003E   C06E               RJMP    ??IntHandler_RX_USART0_2
     30                  UART[0].pRxBuffer[ UART[0].RxFirst ] = UDR0;    // Read the character 
   \   00000040   B10C               IN      R16, 0x0C
   \   00000042   91E0....           LDS     R30, (UART + 10)
   \   00000046   91F0....           LDS     R31, (UART + 11)
   \   0000004A   9120....           LDS     R18, (UART + 12)
   \   0000004E   9130....           LDS     R19, (UART + 13)
   \   00000052   0FE2               ADD     R30, R18
   \   00000054   1FF3               ADC     R31, R19
   \   00000056   8300               ST      Z, R16
     31          
     32                  if (UART[0].RxState != HANDLE) {                // ok to receive? 
   \   00000058   9100....           LDS     R16, (UART + 18)
   \   0000005C   300A               CPI     R16, 10
   \   0000005E   F371               BREQ    ??IntHandler_RX_USART0_1
     33                      switch (UART[0].RxState) {                   // Yes, check state
   \   00000060   9100....           LDS     R16, (UART + 18)
   \   00000064   2300               TST     R16
   \   00000066   F009               BREQ    $+2+2
   \   00000068   C041               RJMP    ??IntHandler_RX_USART0_3
     34                      case SYNC :
     35                          if ( UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SYN) {
   \   0000006A   91E0....           LDS     R30, (UART + 10)
   \   0000006E   91F0....           LDS     R31, (UART + 11)
   \   00000072   9100....           LDS     R16, (UART + 12)
   \   00000076   9110....           LDS     R17, (UART + 13)
   \   0000007A   0FE0               ADD     R30, R16
   \   0000007C   1FF1               ADC     R31, R17
   \   0000007E   8100               LD      R16, Z
   \   00000080   3106               CPI     R16, 22
   \   00000082   F461               BRNE    ??IntHandler_RX_USART0_4
     36                              UART[0].SyncCnt ++ ;                 // count sync
   \   00000084   9100....           LDS     R16, (UART + 19)
   \   00000088   9503               INC     R16
   \   0000008A   9300....           STS     (UART + 19), R16
     37                              UART[0].RxFirst = 0;                 // start at start of buff
   \   0000008E   E000               LDI     R16, 0
   \   00000090   9300....           STS     (UART + 12), R16
   \   00000094   E000               LDI     R16, 0
   \   00000096   9300....           STS     (UART + 13), R16
   \   0000009A   CFD0               RJMP    ??IntHandler_RX_USART0_1
     38                          } else if ((UART[0].SyncCnt >= 2) && 
     39                                     (UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \                     ??IntHandler_RX_USART0_4:
   \   0000009C   9100....           LDS     R16, (UART + 19)
   \   000000A0   3002               CPI     R16, 2
   \   000000A2   F100               BRCS    ??IntHandler_RX_USART0_5
   \   000000A4   91E0....           LDS     R30, (UART + 10)
   \   000000A8   91F0....           LDS     R31, (UART + 11)
   \   000000AC   9100....           LDS     R16, (UART + 12)
   \   000000B0   9110....           LDS     R17, (UART + 13)
   \   000000B4   0FE0               ADD     R30, R16
   \   000000B6   1FF1               ADC     R31, R17
   \   000000B8   8100               LD      R16, Z
   \   000000BA   3001               CPI     R16, 1
   \   000000BC   F499               BRNE    ??IntHandler_RX_USART0_5
     40                              UART[0].SyncCnt = 0 ;                // reset counter
   \   000000BE   E000               LDI     R16, 0
   \   000000C0   9300....           STS     (UART + 19), R16
     41                              UART[0].RxState = HEADER ;
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   9300....           STS     (UART + 18), R16
     42                              UART[0].RxLast = 0 ;
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   9300....           STS     (UART + 14), R16
   \   000000D0   E000               LDI     R16, 0
   \   000000D2   9300....           STS     (UART + 15), R16
     43                              UART[0].RxTimeout = RX_TO_TIME ;    // reset timeout
   \   000000D6   EF0A               LDI     R16, 250
   \   000000D8   9300....           STS     (UART + 20), R16
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   9300....           STS     (UART + 21), R16
   \   000000E2   CFAC               RJMP    ??IntHandler_RX_USART0_1
     44                          } else {
     45                              UART[0].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_RX_USART0_5:
   \   000000E4   E000               LDI     R16, 0
   \   000000E6   9300....           STS     (UART + 19), R16
     46                          }
     47                          break;
   \   000000EA   CFA8               RJMP    ??IntHandler_RX_USART0_1
     48                      default :
     49                          if ((++UART[0].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??IntHandler_RX_USART0_3:
   \   000000EC   ....               LDI     R30, LOW(UART)
   \   000000EE   ....               LDI     R31, (UART) >> 8
   \   000000F0   8504               LDD     R16, Z+12
   \   000000F2   8515               LDD     R17, Z+13
   \   000000F4   5F0F               SUBI    R16, 255
   \   000000F6   4F1F               SBCI    R17, 255
   \   000000F8   8704               STD     Z+12, R16
   \   000000FA   8715               STD     Z+13, R17
   \   000000FC   9100....           LDS     R16, (UART + 12)
   \   00000100   9110....           LDS     R17, (UART + 13)
   \   00000104   3907               CPI     R16, 151
   \   00000106   E020               LDI     R18, 0
   \   00000108   0712               CPC     R17, R18
   \   0000010A   F020               BRCS    ??IntHandler_RX_USART0_6
     50                              GoToSyncUART(0) ;                       // go to sync mode
   \   0000010C   E000               LDI     R16, 0
   \   0000010E   ........           CALL    GoToSyncUART
   \   00000112   CF94               RJMP    ??IntHandler_RX_USART0_1
     51                          } else {
     52                              ReceivePacketUart(0) ;              // Check package
   \                     ??IntHandler_RX_USART0_6:
   \   00000114   E000               LDI     R16, 0
   \   00000116   ........           CALL    ReceivePacketUart
     53                          }
     54                          break ;   
   \   0000011A   CF90               RJMP    ??IntHandler_RX_USART0_1
     55                      }
     56                  }
     57              }
     58              OS_LeaveIntStack();
   \                     ??IntHandler_RX_USART0_2:
   \   0000011C   94F8               cli
   \   0000011E   ........           CALL    OS__LeaveIntStack
     59              OS_LeaveInterruptNoSwitch();
   \   00000122   ........           CALL    OS_LeaveInterruptNoSwitch
     60          } 
   \   00000126   BF9B               OUT     0x3B, R25
   \   00000128   BF8F               OUT     0x3F, R24
   \   0000012A   9109               LD      R16, Y+
   \   0000012C   9119               LD      R17, Y+
   \   0000012E   9129               LD      R18, Y+
   \   00000130   9139               LD      R19, Y+
   \   00000132   9149               LD      R20, Y+
   \   00000134   9159               LD      R21, Y+
   \   00000136   9169               LD      R22, Y+
   \   00000138   9179               LD      R23, Y+
   \   0000013A   9009               LD      R0, Y+
   \   0000013C   9019               LD      R1, Y+
   \   0000013E   9029               LD      R2, Y+
   \   00000140   9039               LD      R3, Y+
   \   00000142   91E9               LD      R30, Y+
   \   00000144   91F9               LD      R31, Y+
   \   00000146   9189               LD      R24, Y+
   \   00000148   9199               LD      R25, Y+
   \   0000014A   9518               RETI
   \   0000014C                      REQUIRE _A_UCSR0A
   \   0000014C                      REQUIRE _A_UDR0
     61          
     62          
     63          #pragma vector=USART0_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     64          __interrupt void IntHandler_TX_USART0( void ){   
   \                     IntHandler_TX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     65          
     66             OS_EnterInterrupt();
   \   00000024   ........           CALL    OS_EnterInterrupt
     67             OS_EnterIntStack();
   \   00000028   94F8               cli
   \   0000002A   ........           CALL    OS__EnterIntStack
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   2300               TST     R16
   \   00000034   F409               BRNE    ??IntHandler_TX_USART0_0
   \   00000036   9478               sei
     68              
     69              UCSR0B &= ~(__BIT_MASK( TXCIE0)) ;            // transmission end, disable int.
   \                     ??IntHandler_TX_USART0_0:
   \   00000038   9856               CBI     0x0A, 0x06
     70              PORTE &= ~0x04 ;                              // TXE0 off
   \   0000003A   981A               CBI     0x03, 0x02
     71              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \   0000003C   ....               LDI     R16, LOW(TimerUSART0)
   \   0000003E   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000040   ........           CALL    OS_StopTimer
     72              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000044   E000               LDI     R16, 0
   \   00000046   ........           CALL    GoToSyncUART
     73              
     74              OS_LeaveIntStack();
   \   0000004A   94F8               cli
   \   0000004C   ........           CALL    OS__LeaveIntStack
     75              OS_LeaveInterruptNoSwitch();
   \   00000050   ........           CALL    OS_LeaveInterruptNoSwitch
     76          }
   \   00000054   BF9B               OUT     0x3B, R25
   \   00000056   BF8F               OUT     0x3F, R24
   \   00000058   9109               LD      R16, Y+
   \   0000005A   9119               LD      R17, Y+
   \   0000005C   9129               LD      R18, Y+
   \   0000005E   9139               LD      R19, Y+
   \   00000060   9149               LD      R20, Y+
   \   00000062   9159               LD      R21, Y+
   \   00000064   9169               LD      R22, Y+
   \   00000066   9179               LD      R23, Y+
   \   00000068   9009               LD      R0, Y+
   \   0000006A   9019               LD      R1, Y+
   \   0000006C   9029               LD      R2, Y+
   \   0000006E   9039               LD      R3, Y+
   \   00000070   91E9               LD      R30, Y+
   \   00000072   91F9               LD      R31, Y+
   \   00000074   9189               LD      R24, Y+
   \   00000076   9199               LD      R25, Y+
   \   00000078   9518               RETI
   \   0000007A                      REQUIRE _A_UCSR0B
   \   0000007A                      REQUIRE _A_PORTE
     77          
     78          
     79          #pragma vector = USART0_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
     80          __interrupt void IntHandler_UDRE_USART0( void ){   
   \                     IntHandler_UDRE_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     81          
     82              OS_EnterInterrupt();
   \   00000024   ........           CALL    OS_EnterInterrupt
     83              OS_EnterIntStack();
   \   00000028   94F8               cli
   \   0000002A   ........           CALL    OS__EnterIntStack
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   2300               TST     R16
   \   00000034   F409               BRNE    ??IntHandler_UDRE_USART0_0
   \   00000036   9478               sei
     84              if ( UART[0].TxCount-- > 0 ) {
   \                     ??IntHandler_UDRE_USART0_0:
   \   00000038   9100....           LDS     R16, (UART + 6)
   \   0000003C   9110....           LDS     R17, (UART + 7)
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   9731               SBIW    R31:R30, 1
   \   00000044   93E0....           STS     (UART + 6), R30
   \   00000048   93F0....           STS     (UART + 7), R31
   \   0000004C   2B01               OR      R16, R17
   \   0000004E   F0A9               BREQ    ??IntHandler_UDRE_USART0_1
     85                  UDR0 = UART[0].pTxBuffer[ UART[0].TxLast ];     // Send a character
   \   00000050   9100....           LDS     R16, (UART + 4)
   \   00000054   9110....           LDS     R17, (UART + 5)
   \   00000058   91E0....           LDS     R30, UART
   \   0000005C   91F0....           LDS     R31, (UART + 1)
   \   00000060   0FE0               ADD     R30, R16
   \   00000062   1FF1               ADC     R31, R17
   \   00000064   8100               LD      R16, Z
   \   00000066   B90C               OUT     0x0C, R16
     86                  UART[0].TxLast++;
   \   00000068   ....               LDI     R30, LOW(UART)
   \   0000006A   ....               LDI     R31, (UART) >> 8
   \   0000006C   8104               LDD     R16, Z+4
   \   0000006E   8115               LDD     R17, Z+5
   \   00000070   5F0F               SUBI    R16, 255
   \   00000072   4F1F               SBCI    R17, 255
   \   00000074   8304               STD     Z+4, R16
   \   00000076   8315               STD     Z+5, R17
   \   00000078   C003               RJMP    ??IntHandler_UDRE_USART0_2
     87              } else{                                             // Last byte sent?
     88                    UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \                     ??IntHandler_UDRE_USART0_1:
   \   0000007A   9855               CBI     0x0A, 0x05
     89                    UCSR0A |= (__BIT_MASK( TXC0)) ;               // Clear int bit in TXC.
   \   0000007C   9A5E               SBI     0x0B, 0x06
     90                    UCSR0B |= __BIT_MASK( TXCIE0) ;               // Enable TXC int.
   \   0000007E   9A56               SBI     0x0A, 0x06
     91              }           
     92              OS_LeaveIntStack();
   \                     ??IntHandler_UDRE_USART0_2:
   \   00000080   94F8               cli
   \   00000082   ........           CALL    OS__LeaveIntStack
     93              OS_LeaveInterruptNoSwitch();
   \   00000086   ........           CALL    OS_LeaveInterruptNoSwitch
     94          } 
   \   0000008A   BF9B               OUT     0x3B, R25
   \   0000008C   BF8F               OUT     0x3F, R24
   \   0000008E   9109               LD      R16, Y+
   \   00000090   9119               LD      R17, Y+
   \   00000092   9129               LD      R18, Y+
   \   00000094   9139               LD      R19, Y+
   \   00000096   9149               LD      R20, Y+
   \   00000098   9159               LD      R21, Y+
   \   0000009A   9169               LD      R22, Y+
   \   0000009C   9179               LD      R23, Y+
   \   0000009E   9009               LD      R0, Y+
   \   000000A0   9019               LD      R1, Y+
   \   000000A2   9029               LD      R2, Y+
   \   000000A4   9039               LD      R3, Y+
   \   000000A6   91E9               LD      R30, Y+
   \   000000A8   91F9               LD      R31, Y+
   \   000000AA   9189               LD      R24, Y+
   \   000000AC   9199               LD      R25, Y+
   \   000000AE   9518               RETI
   \   000000B0                      REQUIRE _A_UDR0
   \   000000B0                      REQUIRE _A_UCSR0B
   \   000000B0                      REQUIRE _A_UCSR0A
     95          #endif
     96          
     97          // USART1
     98          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     99          __interrupt void IntHandler_RX_USART1( void ){   
   \                     IntHandler_RX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    100          
    101              OS_EnterInterrupt();
   \   00000024   ........           CALL    OS_EnterInterrupt
    102              OS_EnterIntStack();
   \   00000028   94F8               cli
   \   0000002A   ........           CALL    OS__EnterIntStack
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   2300               TST     R16
   \   00000034   F409               BRNE    ??IntHandler_RX_USART1_0
   \   00000036   9478               sei
    103              if ( UCSR1A & __BIT_MASK( DOR1 ) ) {                // Overrun error? 
   \                     ??IntHandler_RX_USART1_0:
   \   00000038   9100....           LDS     R16, _A_UCSR1A
    104              }
    105          
    106              if ( UCSR1A & __BIT_MASK( FE1 ) ) {                 // Framing error? 
   \   0000003C   9110....           LDS     R17, _A_UCSR1A
    107              }
    108          
    109              while ( UCSR1A & __BIT_MASK( RXC1)  ) {                // New byte avaiable?
   \                     ??IntHandler_RX_USART1_1:
   \   00000040   9100....           LDS     R16, _A_UCSR1A
   \   00000044   2F10               MOV     R17, R16
   \   00000046   FF17               SBRS    R17, 7
   \   00000048   C06F               RJMP    ??IntHandler_RX_USART1_2
    110                  UART[1].pRxBuffer[ UART[1].RxFirst ] = UDR1;    // Read the character 
   \   0000004A   9100....           LDS     R16, _A_UDR1
   \   0000004E   91E0....           LDS     R30, (UART + 36)
   \   00000052   91F0....           LDS     R31, (UART + 37)
   \   00000056   9120....           LDS     R18, (UART + 38)
   \   0000005A   9130....           LDS     R19, (UART + 39)
   \   0000005E   0FE2               ADD     R30, R18
   \   00000060   1FF3               ADC     R31, R19
   \   00000062   8300               ST      Z, R16
    111          
    112                  if (UART[1].RxState != HANDLE) {                // ok to receive? 
   \   00000064   9100....           LDS     R16, (UART + 44)
   \   00000068   300A               CPI     R16, 10
   \   0000006A   F351               BREQ    ??IntHandler_RX_USART1_1
    113                      switch (UART[1].RxState) {                   // Yes, check state
   \   0000006C   9100....           LDS     R16, (UART + 44)
   \   00000070   2300               TST     R16
   \   00000072   F009               BREQ    $+2+2
   \   00000074   C041               RJMP    ??IntHandler_RX_USART1_3
    114                      case SYNC :
    115                          if ( UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SYN) {
   \   00000076   91E0....           LDS     R30, (UART + 36)
   \   0000007A   91F0....           LDS     R31, (UART + 37)
   \   0000007E   9100....           LDS     R16, (UART + 38)
   \   00000082   9110....           LDS     R17, (UART + 39)
   \   00000086   0FE0               ADD     R30, R16
   \   00000088   1FF1               ADC     R31, R17
   \   0000008A   8100               LD      R16, Z
   \   0000008C   3106               CPI     R16, 22
   \   0000008E   F461               BRNE    ??IntHandler_RX_USART1_4
    116                              UART[1].SyncCnt ++ ;                 // count sync
   \   00000090   9100....           LDS     R16, (UART + 45)
   \   00000094   9503               INC     R16
   \   00000096   9300....           STS     (UART + 45), R16
    117                              UART[1].RxFirst = 0;                 // start at start of buff
   \   0000009A   E000               LDI     R16, 0
   \   0000009C   9300....           STS     (UART + 38), R16
   \   000000A0   E000               LDI     R16, 0
   \   000000A2   9300....           STS     (UART + 39), R16
   \   000000A6   CFCC               RJMP    ??IntHandler_RX_USART1_1
    118                          } else if ((UART[1].SyncCnt >= 2) && 
    119                                     (UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \                     ??IntHandler_RX_USART1_4:
   \   000000A8   9100....           LDS     R16, (UART + 45)
   \   000000AC   3002               CPI     R16, 2
   \   000000AE   F100               BRCS    ??IntHandler_RX_USART1_5
   \   000000B0   91E0....           LDS     R30, (UART + 36)
   \   000000B4   91F0....           LDS     R31, (UART + 37)
   \   000000B8   9100....           LDS     R16, (UART + 38)
   \   000000BC   9110....           LDS     R17, (UART + 39)
   \   000000C0   0FE0               ADD     R30, R16
   \   000000C2   1FF1               ADC     R31, R17
   \   000000C4   8100               LD      R16, Z
   \   000000C6   3001               CPI     R16, 1
   \   000000C8   F499               BRNE    ??IntHandler_RX_USART1_5
    120                              UART[1].SyncCnt = 0 ;                // reset counter
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   9300....           STS     (UART + 45), R16
    121                              UART[1].RxState = HEADER ;
   \   000000D0   E001               LDI     R16, 1
   \   000000D2   9300....           STS     (UART + 44), R16
    122                              UART[1].RxLast = 0 ;
   \   000000D6   E000               LDI     R16, 0
   \   000000D8   9300....           STS     (UART + 40), R16
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   9300....           STS     (UART + 41), R16
    123                              UART[1].RxTimeout = RX_TO_TIME ;      // reset timeout
   \   000000E2   EF0A               LDI     R16, 250
   \   000000E4   9300....           STS     (UART + 46), R16
   \   000000E8   E000               LDI     R16, 0
   \   000000EA   9300....           STS     (UART + 47), R16
   \   000000EE   CFA8               RJMP    ??IntHandler_RX_USART1_1
    124                          } else {
    125                              UART[1].SyncCnt = 0 ;                // start over once more
   \                     ??IntHandler_RX_USART1_5:
   \   000000F0   E000               LDI     R16, 0
   \   000000F2   9300....           STS     (UART + 45), R16
    126                          }
    127                          break;
   \   000000F6   CFA4               RJMP    ??IntHandler_RX_USART1_1
    128                      default :
    129                          if ((++UART[1].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??IntHandler_RX_USART1_3:
   \   000000F8   ....               LDI     R30, LOW(UART)
   \   000000FA   ....               LDI     R31, (UART) >> 8
   \   000000FC   A106               LDD     R16, Z+38
   \   000000FE   A117               LDD     R17, Z+39
   \   00000100   5F0F               SUBI    R16, 255
   \   00000102   4F1F               SBCI    R17, 255
   \   00000104   A306               STD     Z+38, R16
   \   00000106   A317               STD     Z+39, R17
   \   00000108   9100....           LDS     R16, (UART + 38)
   \   0000010C   9110....           LDS     R17, (UART + 39)
   \   00000110   3907               CPI     R16, 151
   \   00000112   E020               LDI     R18, 0
   \   00000114   0712               CPC     R17, R18
   \   00000116   F020               BRCS    ??IntHandler_RX_USART1_6
    130                              GoToSyncUART(1) ;                    // go to sync mode
   \   00000118   E001               LDI     R16, 1
   \   0000011A   ........           CALL    GoToSyncUART
   \   0000011E   CF90               RJMP    ??IntHandler_RX_USART1_1
    131                          } else {
    132                              ReceivePacketUart(1) ;              // Check package
   \                     ??IntHandler_RX_USART1_6:
   \   00000120   E001               LDI     R16, 1
   \   00000122   ........           CALL    ReceivePacketUart
    133                          }
    134                          break ;   
   \   00000126   CF8C               RJMP    ??IntHandler_RX_USART1_1
    135                      }
    136                  }
    137              }
    138             OS_LeaveIntStack();
   \                     ??IntHandler_RX_USART1_2:
   \   00000128   94F8               cli
   \   0000012A   ........           CALL    OS__LeaveIntStack
    139             OS_LeaveInterruptNoSwitch();
   \   0000012E   ........           CALL    OS_LeaveInterruptNoSwitch
    140          } 
   \   00000132   BF9B               OUT     0x3B, R25
   \   00000134   BF8F               OUT     0x3F, R24
   \   00000136   9109               LD      R16, Y+
   \   00000138   9119               LD      R17, Y+
   \   0000013A   9129               LD      R18, Y+
   \   0000013C   9139               LD      R19, Y+
   \   0000013E   9149               LD      R20, Y+
   \   00000140   9159               LD      R21, Y+
   \   00000142   9169               LD      R22, Y+
   \   00000144   9179               LD      R23, Y+
   \   00000146   9009               LD      R0, Y+
   \   00000148   9019               LD      R1, Y+
   \   0000014A   9029               LD      R2, Y+
   \   0000014C   9039               LD      R3, Y+
   \   0000014E   91E9               LD      R30, Y+
   \   00000150   91F9               LD      R31, Y+
   \   00000152   9189               LD      R24, Y+
   \   00000154   9199               LD      R25, Y+
   \   00000156   9518               RETI
   \   00000158                      REQUIRE _A_UCSR1A
   \   00000158                      REQUIRE _A_UDR1
    141          
    142          
    143          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    144          __interrupt void IntHandler_TX_USART1( void ){   
   \                     IntHandler_TX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    145          
    146              OS_EnterInterrupt();
   \   00000024   ........           CALL    OS_EnterInterrupt
    147              OS_EnterIntStack();
   \   00000028   94F8               cli
   \   0000002A   ........           CALL    OS__EnterIntStack
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   2300               TST     R16
   \   00000034   F409               BRNE    ??IntHandler_TX_USART1_0
   \   00000036   9478               sei
    148              UCSR1B &= ~(__BIT_MASK( TXCIE1)) ;            // transmission end, disable int.
   \                     ??IntHandler_TX_USART1_0:
   \   00000038   9100009A           LDS     R16, 154
   \   0000003C   7B0F               ANDI    R16, 0xBF
   \   0000003E   9300009A           STS     154, R16
    149              PORTE &= ~0x08 ;                              // TXE1 off
   \   00000042   981B               CBI     0x03, 0x03
    150              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \   00000044   ....               LDI     R16, LOW(TimerUSART1)
   \   00000046   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000048   ........           CALL    OS_StopTimer
    151              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   0000004C   E001               LDI     R16, 1
   \   0000004E   ........           CALL    GoToSyncUART
    152              OS_LeaveIntStack();
   \   00000052   94F8               cli
   \   00000054   ........           CALL    OS__LeaveIntStack
    153              OS_LeaveInterruptNoSwitch();
   \   00000058   ........           CALL    OS_LeaveInterruptNoSwitch
    154          }
   \   0000005C   BF9B               OUT     0x3B, R25
   \   0000005E   BF8F               OUT     0x3F, R24
   \   00000060   9109               LD      R16, Y+
   \   00000062   9119               LD      R17, Y+
   \   00000064   9129               LD      R18, Y+
   \   00000066   9139               LD      R19, Y+
   \   00000068   9149               LD      R20, Y+
   \   0000006A   9159               LD      R21, Y+
   \   0000006C   9169               LD      R22, Y+
   \   0000006E   9179               LD      R23, Y+
   \   00000070   9009               LD      R0, Y+
   \   00000072   9019               LD      R1, Y+
   \   00000074   9029               LD      R2, Y+
   \   00000076   9039               LD      R3, Y+
   \   00000078   91E9               LD      R30, Y+
   \   0000007A   91F9               LD      R31, Y+
   \   0000007C   9189               LD      R24, Y+
   \   0000007E   9199               LD      R25, Y+
   \   00000080   9518               RETI
   \   00000082                      REQUIRE _A_UCSR1B
   \   00000082                      REQUIRE _A_PORTE
    155          
    156          
    157          #pragma vector = USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    158          __interrupt void IntHandler_UDRE_USART1( void ){   
   \                     IntHandler_UDRE_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    159          
    160             OS_EnterInterrupt();
   \   00000024   ........           CALL    OS_EnterInterrupt
    161             OS_EnterIntStack();
   \   00000028   94F8               cli
   \   0000002A   ........           CALL    OS__EnterIntStack
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   2300               TST     R16
   \   00000034   F409               BRNE    ??IntHandler_UDRE_USART1_0
   \   00000036   9478               sei
    162               if ( UART[1].TxCount-- > 0 ) {
   \                     ??IntHandler_UDRE_USART1_0:
   \   00000038   9100....           LDS     R16, (UART + 32)
   \   0000003C   9110....           LDS     R17, (UART + 33)
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   9731               SBIW    R31:R30, 1
   \   00000044   93E0....           STS     (UART + 32), R30
   \   00000048   93F0....           STS     (UART + 33), R31
   \   0000004C   2B01               OR      R16, R17
   \   0000004E   F0B1               BREQ    ??IntHandler_UDRE_USART1_1
    163                  UDR1 = UART[1].pTxBuffer[ UART[1].TxLast ];  // Send a character
   \   00000050   91E0....           LDS     R30, (UART + 26)
   \   00000054   91F0....           LDS     R31, (UART + 27)
   \   00000058   9100....           LDS     R16, (UART + 30)
   \   0000005C   9110....           LDS     R17, (UART + 31)
   \   00000060   0FE0               ADD     R30, R16
   \   00000062   1FF1               ADC     R31, R17
   \   00000064   8100               LD      R16, Z
   \   00000066   9300....           STS     _A_UDR1, R16
    164                  UART[1].TxLast++;
   \   0000006A   ....               LDI     R30, LOW(UART)
   \   0000006C   ....               LDI     R31, (UART) >> 8
   \   0000006E   8D06               LDD     R16, Z+30
   \   00000070   8D17               LDD     R17, Z+31
   \   00000072   5F0F               SUBI    R16, 255
   \   00000074   4F1F               SBCI    R17, 255
   \   00000076   8F06               STD     Z+30, R16
   \   00000078   8F17               STD     Z+31, R17
   \   0000007A   C00F               RJMP    ??IntHandler_UDRE_USART1_2
    165               } else {
    166                  UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \                     ??IntHandler_UDRE_USART1_1:
   \   0000007C   9100009A           LDS     R16, 154
   \   00000080   7D0F               ANDI    R16, 0xDF
   \   00000082   9300009A           STS     154, R16
    167                  UCSR1A |= (__BIT_MASK( TXC1)) ;               // Clear int bit in TXC.
   \   00000086   9100009B           LDS     R16, 155
   \   0000008A   6400               ORI     R16, 0x40
   \   0000008C   9300009B           STS     155, R16
    168                  UCSR1B |= __BIT_MASK( TXCIE1) ;               // Enable TXC int.
   \   00000090   9100009A           LDS     R16, 154
   \   00000094   6400               ORI     R16, 0x40
   \   00000096   9300009A           STS     154, R16
    169               }
    170              OS_LeaveIntStack();
   \                     ??IntHandler_UDRE_USART1_2:
   \   0000009A   94F8               cli
   \   0000009C   ........           CALL    OS__LeaveIntStack
    171              OS_LeaveInterruptNoSwitch();
   \   000000A0   ........           CALL    OS_LeaveInterruptNoSwitch
    172          } 
   \   000000A4   BF9B               OUT     0x3B, R25
   \   000000A6   BF8F               OUT     0x3F, R24
   \   000000A8   9109               LD      R16, Y+
   \   000000AA   9119               LD      R17, Y+
   \   000000AC   9129               LD      R18, Y+
   \   000000AE   9139               LD      R19, Y+
   \   000000B0   9149               LD      R20, Y+
   \   000000B2   9159               LD      R21, Y+
   \   000000B4   9169               LD      R22, Y+
   \   000000B6   9179               LD      R23, Y+
   \   000000B8   9009               LD      R0, Y+
   \   000000BA   9019               LD      R1, Y+
   \   000000BC   9029               LD      R2, Y+
   \   000000BE   9039               LD      R3, Y+
   \   000000C0   91E9               LD      R30, Y+
   \   000000C2   91F9               LD      R31, Y+
   \   000000C4   9189               LD      R24, Y+
   \   000000C6   9199               LD      R25, Y+
   \   000000C8   9518               RETI
   \   000000CA                      REQUIRE _A_UDR1
   \   000000CA                      REQUIRE _A_UCSR1B
   \   000000CA                      REQUIRE _A_UCSR1A

   \                                 In  segment INTVEC, offset 0x48, root
   \                     `??IntHandler_RX_USART0::??INTVEC 72`:
   \   00000048   ........           JMP     IntHandler_RX_USART0

   \                                 In  segment INTVEC, offset 0x4c, root
   \                     `??IntHandler_UDRE_USART0::??INTVEC 76`:
   \   0000004C   ........           JMP     IntHandler_UDRE_USART0

   \                                 In  segment INTVEC, offset 0x50, root
   \                     `??IntHandler_TX_USART0::??INTVEC 80`:
   \   00000050   ........           JMP     IntHandler_TX_USART0

   \                                 In  segment INTVEC, offset 0x78, root
   \                     `??IntHandler_RX_USART1::??INTVEC 120`:
   \   00000078   ........           JMP     IntHandler_RX_USART1

   \                                 In  segment INTVEC, offset 0x7c, root
   \                     `??IntHandler_UDRE_USART1::??INTVEC 124`:
   \   0000007C   ........           JMP     IntHandler_UDRE_USART1

   \                                 In  segment INTVEC, offset 0x80, root
   \                     `??IntHandler_TX_USART1::??INTVEC 128`:
   \   00000080   ........           JMP     IntHandler_TX_USART1

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_RX_USART0
       16      2   -> GoToSyncUART
       16      2   -> OS_EnterInterrupt
       16      2   -> OS_LeaveInterruptNoSwitch
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> ReceivePacketUart
     16      2   IntHandler_RX_USART1
       16      2   -> GoToSyncUART
       16      2   -> OS_EnterInterrupt
       16      2   -> OS_LeaveInterruptNoSwitch
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
       16      2   -> ReceivePacketUart
     16      2   IntHandler_TX_USART0
       16      2   -> GoToSyncUART
       16      2   -> OS_EnterInterrupt
       16      2   -> OS_LeaveInterruptNoSwitch
       16      2   -> OS_StopTimer
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_TX_USART1
       16      2   -> GoToSyncUART
       16      2   -> OS_EnterInterrupt
       16      2   -> OS_LeaveInterruptNoSwitch
       16      2   -> OS_StopTimer
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_UDRE_USART0
       16      2   -> OS_EnterInterrupt
       16      2   -> OS_LeaveInterruptNoSwitch
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_UDRE_USART1
       16      2   -> OS_EnterInterrupt
       16      2   -> OS_LeaveInterruptNoSwitch
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     332  IntHandler_RX_USART0
       4  IntHandler_RX_USART0::??INTVEC 72
     344  IntHandler_RX_USART1
       4  IntHandler_RX_USART1::??INTVEC 120
     122  IntHandler_TX_USART0
       4  IntHandler_TX_USART0::??INTVEC 80
     130  IntHandler_TX_USART1
       4  IntHandler_TX_USART1::??INTVEC 128
     176  IntHandler_UDRE_USART0
       4  IntHandler_UDRE_USART0::??INTVEC 76
     202  IntHandler_UDRE_USART1
       4  IntHandler_UDRE_USART1::??INTVEC 124
       1  _A_PORTE
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UDR0
       1  _A_UDR1

 
     7 bytes in segment ABSOLUTE
 1 306 bytes in segment CODE
    24 bytes in segment INTVEC
 
 1 306 bytes of CODE memory (+ 24 bytes shared)
     0 bytes of DATA memory (+  7 bytes shared)

Errors: none
Warnings: 12
