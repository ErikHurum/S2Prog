###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       10/Aug/2021  11:27:14
# Copyright 1996-2021 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\New ANSGCNV\Src\RS485.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW940B.tmp ("D:\S2Prog\IO\New
#        ANSGCNV\Src\RS485.c" --cpu=m128a -ms -o "D:\S2Prog\IO\New
#        ANSGCNV\Debug\Obj" -D OS_LIBMODE_R -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\New ANSGCNV\Debug\List" -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\New
#        ANSGCNV\INC\\" -I "D:\S2Prog\IO\New ANSGCNV\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\New ANSGCNV\Debug\List\RS485.lst
#    Object file  =  D:\S2Prog\IO\New ANSGCNV\Debug\Obj\RS485.r90
#
###############################################################################

D:\S2Prog\IO\New ANSGCNV\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom128a.h"

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          //#include "stdlib.h"
     13          //#include "string.h"
     14          
     15          
     16          
     17          /************************************************ *************************
     18          *   (This is a timer calback)
     19          *  Timout timer UART 0
     20          *
     21          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     22          void TimoutUART0(void) {
   \                     TimoutUART0:
     23          
     24              U0_MCR &= ~MCR_RTS;      // set RTS off
   \   00000000   E0EC               LDI     R30, LOW(4364)
   \   00000002   E1F1               LDI     R31, (4364) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   7F0D               ANDI    R16, 0xFD
   \   00000008   8300               ST      Z, R16
     25          }
   \   0000000A   9508               RET
     26          
     27          /*************************************************************************
     28          *   (This is a timer calback)
     29          *  Timout timer UART 1
     30          *
     31          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     32          void TimoutUART1(void) {
   \                     TimoutUART1:
     33          
     34              U1_MCR &= ~MCR_RTS;       // set RTS off
   \   00000000   E0E4               LDI     R30, LOW(4356)
   \   00000002   E1F1               LDI     R31, (4356) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   7F0D               ANDI    R16, 0xFD
   \   00000008   8300               ST      Z, R16
     35          }
   \   0000000A   9508               RET
     36          
     37          
     38          /*************************************************************************
     39          *   (This is a task)
     40          *  Usart handler UART send request
     41          *
     42          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     43          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
     44              char SeqCnt = 0;
   \   00000004   E0A0               LDI     R26, 0
     45              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   00000006   E0B5               LDI     R27, 5
     46              char EventStatus;
     47              char AskMD[2];
     48          
     49              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000008   E840               LDI     R20, 128
   \   0000000A   E255               LDI     R21, 37
   \   0000000C   E060               LDI     R22, 0
   \   0000000E   E070               LDI     R23, 0
   \   00000010   E000               LDI     R16, 0
   \   00000012   ....               RCALL   Init16552
     50              Init16552(1, 9600);                                      // Init UART channel 1
   \   00000014   E840               LDI     R20, 128
   \   00000016   E255               LDI     R21, 37
   \   00000018   E060               LDI     R22, 0
   \   0000001A   E070               LDI     R23, 0
   \   0000001C   E001               LDI     R16, 1
   \   0000001E   ....               RCALL   Init16552
     51          
     52              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   00000020   E002               LDI     R16, 2
   \   00000022   E010               LDI     R17, 0
   \   00000024   ........           CALL    ReadEEPROMByte
   \   00000028   9300....           STS     TData, R16
     53              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   0000002C   E003               LDI     R16, 3
   \   0000002E   E010               LDI     R17, 0
   \   00000030   ........           CALL    ReadEEPROMByte
   \   00000034   9300....           STS     (TData + 1), R16
     54              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   00000038   E004               LDI     R16, 4
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   ........           CALL    ReadEEPROMByte
   \   00000040   9300....           STS     (TData + 2), R16
     55          
     56              TData.RS4.ToTargetBuffer[0][0] = false;
   \   00000044   E000               LDI     R16, 0
   \   00000046   9300....           STS     (TData + 1268), R16
     57              TData.RS4.ToTargetBuffer[1][0] = false;
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   9300....           STS     (TData + 1348), R16
     58              TData.RS4.FromTargetBuffer[0][0] = false;
   \   00000050   E000               LDI     R16, 0
   \   00000052   9300....           STS     (TData + 1428), R16
     59              TData.RS4.FromTargetBuffer[1][0] = false;
   \   00000056   E000               LDI     R16, 0
   \   00000058   9300....           STS     (TData + 1478), R16
     60          
     61              for (char i = 0; i < 8; i++) {
   \   0000005C   2455               CLR     R5
   \                     ??ExtRS485Ctl_0:
   \   0000005E   E008               LDI     R16, 8
   \   00000060   1650               CP      R5, R16
   \   00000062   F508               BRCC    ??ExtRS485Ctl_1
     62                  SetBitsOr(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \   00000064   94F8               cli
   \   00000066   9100....           LDS     R16, (OS_Global + 1)
   \   0000006A   9503               INC     R16
   \   0000006C   9300....           STS     (OS_Global + 1), R16
   \   00000070   9120....           LDS     R18, TData
   \   00000074   E001               LDI     R16, 1
   \   00000076   E010               LDI     R17, 0
   \   00000078   2D45               MOV     R20, R5
   \   0000007A   ........           CALL    ?S_SHL_L02
   \   0000007E   2320               AND     R18, R16
   \   00000080   B305               IN      R16, 0x15
   \   00000082   2B02               OR      R16, R18
   \   00000084   BB05               OUT     0x15, R16
   \   00000086   9100....           LDS     R16, (OS_Global + 1)
   \   0000008A   950A               DEC     R16
   \   0000008C   9300....           STS     (OS_Global + 1), R16
   \   00000090   9100....           LDS     R16, (OS_Global + 1)
   \   00000094   2300               TST     R16
   \   00000096   F409               BRNE    ??ExtRS485Ctl_2
   \   00000098   9478               sei
     63                  OS_Delay(100);
   \                     ??ExtRS485Ctl_2:
   \   0000009A   E604               LDI     R16, 100
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   ........           CALL    OS_Delay
     64              }
   \   000000A2   9453               INC     R5
   \   000000A4   CFDC               RJMP    ??ExtRS485Ctl_0
     65              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \                     ??ExtRS485Ctl_1:
   \   000000A6   E700               LDI     R16, 112
   \   000000A8   E117               LDI     R17, 23
   \   000000AA   ........           CALL    OS_Delay
     66          
     67              while (1) {
     68                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
   \                     ??ExtRS485Ctl_3:
   \   000000AE   E000               LDI     R16, 0
   \   000000B0   9300....           STS     PortPair, R16
   \                     ??ExtRS485Ctl_4:
   \   000000B4   9100....           LDS     R16, PortPair
   \   000000B8   3004               CPI     R16, 4
   \   000000BA   F008               BRCS    $+2+2
   \   000000BC   C20B               RJMP    ??ExtRS485Ctl_5
     69                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
   \   000000BE   9100....           LDS     R16, (UART16552 + 24)
   \   000000C2   3009               CPI     R16, 9
   \   000000C4   F010               BRCS    ??ExtRS485Ctl_6
     70                          EmptyRxBuf16552(0);                            // Empty UART channel 0
   \   000000C6   E000               LDI     R16, 0
   \   000000C8   ....               RCALL   EmptyRxBuf16552
     71                      }
     72                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
   \                     ??ExtRS485Ctl_6:
   \   000000CA   9100....           LDS     R16, (UART16552 + 50)
   \   000000CE   3009               CPI     R16, 9
   \   000000D0   F010               BRCS    ??ExtRS485Ctl_7
     73                          EmptyRxBuf16552(1);                            // Empty UART channel 1
   \   000000D2   E001               LDI     R16, 1
   \   000000D4   ....               RCALL   EmptyRxBuf16552
     74                      }
     75                      if (PowerOnTimer < POWER_ON_CNT) {
   \                     ??ExtRS485Ctl_7:
   \   000000D6   30B5               CPI     R27, 5
   \   000000D8   F420               BRCC    ??ExtRS485Ctl_8
     76                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
   \   000000DA   95B3               INC     R27
   \   000000DC   30B5               CPI     R27, 5
   \   000000DE   F008               BRCS    ??ExtRS485Ctl_8
     77                              SetRS4Port();                                // and set power on ports
   \   000000E0   ....               RCALL   SetRS4Port
     78                          }
     79                      }
     80                      SetBitsOr(PORTE, 0xf0);
   \                     ??ExtRS485Ctl_8:
   \   000000E2   94F8               cli
   \   000000E4   9100....           LDS     R16, (OS_Global + 1)
   \   000000E8   9503               INC     R16
   \   000000EA   9300....           STS     (OS_Global + 1), R16
   \   000000EE   B103               IN      R16, 0x03
   \   000000F0   6F00               ORI     R16, 0xF0
   \   000000F2   B903               OUT     0x03, R16
   \   000000F4   9100....           LDS     R16, (OS_Global + 1)
   \   000000F8   950A               DEC     R16
   \   000000FA   9300....           STS     (OS_Global + 1), R16
   \   000000FE   9100....           LDS     R16, (OS_Global + 1)
   \   00000102   2300               TST     R16
   \   00000104   F409               BRNE    ??ExtRS485Ctl_9
   \   00000106   9478               sei
     81                      ClrBit(PORTE, (0x10 << PortPair) & 0xf0);            // set mux port
   \                     ??ExtRS485Ctl_9:
   \   00000108   94F8               cli
   \   0000010A   9100....           LDS     R16, (OS_Global + 1)
   \   0000010E   9503               INC     R16
   \   00000110   9300....           STS     (OS_Global + 1), R16
   \   00000114   9140....           LDS     R20, PortPair
   \   00000118   E100               LDI     R16, 16
   \   0000011A   E010               LDI     R17, 0
   \   0000011C   ........           CALL    ?S_SHL_L02
   \   00000120   7F00               ANDI    R16, 0xF0
   \   00000122   9500               COM     R16
   \   00000124   B113               IN      R17, 0x03
   \   00000126   2310               AND     R17, R16
   \   00000128   B913               OUT     0x03, R17
   \   0000012A   9100....           LDS     R16, (OS_Global + 1)
   \   0000012E   950A               DEC     R16
   \   00000130   9300....           STS     (OS_Global + 1), R16
   \   00000134   9100....           LDS     R16, (OS_Global + 1)
   \   00000138   2300               TST     R16
   \   0000013A   F409               BRNE    ??ExtRS485Ctl_10
   \   0000013C   9478               sei
     82                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
   \                     ??ExtRS485Ctl_10:
   \   0000013E   9100....           LDS     R16, TData
   \   00000142   E010               LDI     R17, 0
   \   00000144   9140....           LDS     R20, PortPair
   \   00000148   ........           CALL    ?SS_SHR_L02
   \   0000014C   7001               ANDI    R16, 0x01
   \   0000014E   2300               TST     R16
   \   00000150   F409               BRNE    $+2+2
   \   00000152   C0BC               RJMP    ??ExtRS485Ctl_11
     83                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
   \   00000154   ....               LDI     R30, LOW(UART16552)
   \   00000156   ....               LDI     R31, (UART16552) >> 8
   \   00000158   E006               LDI     R16, 6
   \   0000015A   E010               LDI     R17, 0
   \   0000015C   8302               STD     Z+2, R16
   \   0000015E   8313               STD     Z+3, R17
     84                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair));
   \   00000160   9100....           LDS     R16, (TData + 1)
   \   00000164   E010               LDI     R17, 0
   \   00000166   9130....           LDS     R19, PortPair
   \   0000016A   E022               LDI     R18, 2
   \   0000016C   9F32               MUL     R19, R18
   \   0000016E   2D40               MOV     R20, R0
   \   00000170   ........           CALL    ?SS_SHR_L02
   \   00000174   2E50               MOV     R5, R16
     85                          if (SnsType == 0x01) {    //Water ingress??
   \   00000176   E001               LDI     R16, 1
   \   00000178   1650               CP      R5, R16
   \   0000017A   F549               BRNE    ??ExtRS485Ctl_12
     86                              switch (SeqCnt) {
   \   0000017C   2F0A               MOV     R16, R26
   \   0000017E   5000               SUBI    R16, 0
   \   00000180   F019               BREQ    ??ExtRS485Ctl_13
   \   00000182   5104               SUBI    R16, 20
   \   00000184   F021               BREQ    ??ExtRS485Ctl_14
   \   00000186   C020               RJMP    ??ExtRS485Ctl_15
     87                              case 0:
     88                                  Uart_BuildReqWISCardStatus(0);          //Card status
   \                     ??ExtRS485Ctl_13:
   \   00000188   E000               LDI     R16, 0
   \   0000018A   ....               RCALL   Uart_BuildReqWISCardStatus
     89                                  break;
   \   0000018C   C09B               RJMP    ??ExtRS485Ctl_16
     90                              case 20:
     91                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \                     ??ExtRS485Ctl_14:
   \   0000018E   9100....           LDS     R16, (TData + 1428)
   \   00000192   2300               TST     R16
   \   00000194   F4B1               BRNE    ??ExtRS485Ctl_17
   \   00000196   9100....           LDS     R16, (TData + 1530)
   \   0000019A   9110....           LDS     R17, PortPair
   \   0000019E   1701               CP      R16, R17
   \   000001A0   F481               BRNE    ??ExtRS485Ctl_17
     92                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
   \   000001A2   E713               LDI     R17, 115
   \   000001A4   E000               LDI     R16, 0
   \   000001A6   ....               RCALL   Uart_BuildReqWISXData
     93                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   000001A8   9100....           LDS     R16, (TData + 1530)
   \   000001AC   9503               INC     R16
   \   000001AE   9300....           STS     (TData + 1530), R16
   \   000001B2   9100....           LDS     R16, (TData + 1530)
   \   000001B6   3004               CPI     R16, 4
   \   000001B8   F030               BRCS    ??ExtRS485Ctl_18
     94                                          TData.RS4.EEPROMPortpair[0] = 0;
   \   000001BA   E000               LDI     R16, 0
   \   000001BC   9300....           STS     (TData + 1530), R16
   \   000001C0   C081               RJMP    ??ExtRS485Ctl_16
     95                                      }
     96                                  } else {
     97                                      Uart_BuildReqWISData(0);                //WIS data
   \                     ??ExtRS485Ctl_17:
   \   000001C2   E000               LDI     R16, 0
   \   000001C4   ....               RCALL   Uart_BuildReqWISData
     98                                  }
     99                                  break;
   \                     ??ExtRS485Ctl_18:
   \   000001C6   C07E               RJMP    ??ExtRS485Ctl_16
    100                              default:
    101                                  Uart_BuildReqWISData(0);                //WIS data
   \                     ??ExtRS485Ctl_15:
   \   000001C8   E000               LDI     R16, 0
   \   000001CA   ....               RCALL   Uart_BuildReqWISData
    102                                  break;
   \   000001CC   C07B               RJMP    ??ExtRS485Ctl_16
    103                              }
    104                          } else if (SnsType == 0x02) {       // Radar??
   \                     ??ExtRS485Ctl_12:
   \   000001CE   E002               LDI     R16, 2
   \   000001D0   1650               CP      R5, R16
   \   000001D2   F509               BRNE    ??ExtRS485Ctl_19
    105                              switch (SeqCnt) {
   \   000001D4   2F0A               MOV     R16, R26
   \   000001D6   5000               SUBI    R16, 0
   \   000001D8   F0D9               BREQ    ??ExtRS485Ctl_20
   \   000001DA   5104               SUBI    R16, 20
   \   000001DC   F4B1               BRNE    ??ExtRS485Ctl_21
    106                              case 20:
    107                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \   000001DE   9100....           LDS     R16, (TData + 1428)
   \   000001E2   2300               TST     R16
   \   000001E4   F491               BRNE    ??ExtRS485Ctl_21
   \   000001E6   9100....           LDS     R16, (TData + 1530)
   \   000001EA   9110....           LDS     R17, PortPair
   \   000001EE   1701               CP      R16, R17
   \   000001F0   F461               BRNE    ??ExtRS485Ctl_21
    108                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   000001F2   9100....           LDS     R16, (TData + 1530)
   \   000001F6   9503               INC     R16
   \   000001F8   9300....           STS     (TData + 1530), R16
   \   000001FC   9100....           LDS     R16, (TData + 1530)
   \   00000200   3004               CPI     R16, 4
   \   00000202   F018               BRCS    ??ExtRS485Ctl_21
    109                                          TData.RS4.EEPROMPortpair[0] = 0;
   \   00000204   E000               LDI     R16, 0
   \   00000206   9300....           STS     (TData + 1530), R16
    110                                      }
    111                                  }
    112                                  // Fall through and send the request
    113                              default:
    114                                  Uart_BuildReqRadarData(0);          // Radar data
   \                     ??ExtRS485Ctl_21:
   \   0000020A   E000               LDI     R16, 0
   \   0000020C   ....               RCALL   Uart_BuildReqRadarData
    115                                  break;
   \   0000020E   C05A               RJMP    ??ExtRS485Ctl_16
    116                              case 0:
    117                                  Uart_BuildReqRadarInfo(0);          //Radar Information
   \                     ??ExtRS485Ctl_20:
   \   00000210   E000               LDI     R16, 0
   \   00000212   ....               RCALL   Uart_BuildReqRadarInfo
    118                                  break;
   \   00000214   C057               RJMP    ??ExtRS485Ctl_16
    119                              }
    120                          } else {                                        // AN-SGCNV
    121                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    122                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
   \                     ??ExtRS485Ctl_19:
   \   00000216   9100....           LDS     R16, (TData + 1268)
   \   0000021A   3001               CPI     R16, 1
   \   0000021C   F469               BRNE    ??ExtRS485Ctl_22
   \   0000021E   9100....           LDS     R16, (TData + 1269)
   \   00000222   9110....           LDS     R17, PortPair
   \   00000226   1701               CP      R16, R17
   \   00000228   F439               BRNE    ??ExtRS485Ctl_22
    123                                  Uart_BuildSndData(0);                       // add data to AD card package
   \   0000022A   E000               LDI     R16, 0
   \   0000022C   ....               RCALL   Uart_BuildSndData
    124                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
   \   0000022E   E000               LDI     R16, 0
   \   00000230   ....               RCALL   Uart_BuildReqConfig
    125                                  AskMD[0] = false;
   \   00000232   E000               LDI     R16, 0
   \   00000234   2F80               MOV     R24, R16
   \   00000236   C002               RJMP    ??ExtRS485Ctl_23
    126                              } else {
    127                                  AskMD[0] = true;
   \                     ??ExtRS485Ctl_22:
   \   00000238   E001               LDI     R16, 1
   \   0000023A   2F80               MOV     R24, R16
    128                              }
    129                              if (SeqCnt == 0) {
   \                     ??ExtRS485Ctl_23:
   \   0000023C   23AA               TST     R26
   \   0000023E   F419               BRNE    ??ExtRS485Ctl_24
    130                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
   \   00000240   E000               LDI     R16, 0
   \   00000242   ....               RCALL   Uart_BuildReqCardStatus
   \   00000244   C03F               RJMP    ??ExtRS485Ctl_16
    131                              } else if (SeqCnt == 5) {
   \                     ??ExtRS485Ctl_24:
   \   00000246   30A5               CPI     R26, 5
   \   00000248   F419               BRNE    ??ExtRS485Ctl_25
    132                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
   \   0000024A   E000               LDI     R16, 0
   \   0000024C   ....               RCALL   Uart_BuildReqR16552
   \   0000024E   C03A               RJMP    ??ExtRS485Ctl_16
    133                              } else if (SeqCnt == 10) {
   \                     ??ExtRS485Ctl_25:
   \   00000250   30AA               CPI     R26, 10
   \   00000252   F419               BRNE    ??ExtRS485Ctl_26
    134                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
   \   00000254   E000               LDI     R16, 0
   \   00000256   ....               RCALL   Uart_BuildReqConfig
   \   00000258   C035               RJMP    ??ExtRS485Ctl_16
    135                              } else if (SeqCnt == 15) {
   \                     ??ExtRS485Ctl_26:
   \   0000025A   30AF               CPI     R26, 15
   \   0000025C   F419               BRNE    ??ExtRS485Ctl_27
    136                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
   \   0000025E   E000               LDI     R16, 0
   \   00000260   ....               RCALL   Uart_BuildReqC16552
   \   00000262   C030               RJMP    ??ExtRS485Ctl_16
    137                              } else if (SeqCnt == 20) {
   \                     ??ExtRS485Ctl_27:
   \   00000264   31A4               CPI     R26, 20
   \   00000266   F551               BRNE    ??ExtRS485Ctl_28
    138                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
   \   00000268   9100....           LDS     R16, (TData + 1428)
   \   0000026C   2300               TST     R16
   \   0000026E   F509               BRNE    ??ExtRS485Ctl_29
   \   00000270   9100....           LDS     R16, (TData + 1530)
   \   00000274   9110....           LDS     R17, PortPair
   \   00000278   1701               CP      R16, R17
   \   0000027A   F4D9               BRNE    ??ExtRS485Ctl_29
    139                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
   \   0000027C   E000               LDI     R16, 0
   \   0000027E   ....               RCALL   Uart_BuildReqEEPROMData
    140                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
   \   00000280   9100....           LDS     R16, (TData + 1528)
   \   00000284   5F0E               SUBI    R16, 254
   \   00000286   9300....           STS     (TData + 1528), R16
   \   0000028A   9100....           LDS     R16, (TData + 1528)
   \   0000028E   300F               CPI     R16, 15
   \   00000290   F0C8               BRCS    ??ExtRS485Ctl_16
    141                                          TData.RS4.EEPROMADChannel[0] = 0;
   \   00000292   E000               LDI     R16, 0
   \   00000294   9300....           STS     (TData + 1528), R16
    142                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
   \   00000298   9100....           LDS     R16, (TData + 1530)
   \   0000029C   9503               INC     R16
   \   0000029E   9300....           STS     (TData + 1530), R16
   \   000002A2   9100....           LDS     R16, (TData + 1530)
   \   000002A6   3004               CPI     R16, 4
   \   000002A8   F068               BRCS    ??ExtRS485Ctl_16
    143                                              TData.RS4.EEPROMPortpair[0] = 0;
   \   000002AA   E000               LDI     R16, 0
   \   000002AC   9300....           STS     (TData + 1530), R16
   \   000002B0   C009               RJMP    ??ExtRS485Ctl_16
    144                                          }
    145                                      }
    146                                  } else if (AskMD[0] == true) {
   \                     ??ExtRS485Ctl_29:
   \   000002B2   3081               CPI     R24, 1
   \   000002B4   F439               BRNE    ??ExtRS485Ctl_16
    147                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
   \   000002B6   E000               LDI     R16, 0
   \   000002B8   ....               RCALL   Uart_BuildReqM16552
   \   000002BA   C004               RJMP    ??ExtRS485Ctl_16
    148                                  }
    149                              } else if (AskMD[0] == true) {
   \                     ??ExtRS485Ctl_28:
   \   000002BC   3081               CPI     R24, 1
   \   000002BE   F411               BRNE    ??ExtRS485Ctl_16
    150                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
   \   000002C0   E000               LDI     R16, 0
   \   000002C2   ....               RCALL   Uart_BuildReqM16552
    151                              }
    152                          }
    153                          Uart_BuildTail16552(0);
   \                     ??ExtRS485Ctl_16:
   \   000002C4   E000               LDI     R16, 0
   \   000002C6   ........           CALL    Uart_BuildTail16552
   \   000002CA   C012               RJMP    ??ExtRS485Ctl_30
    154                      } else {
    155                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
   \                     ??ExtRS485Ctl_11:
   \   000002CC   9100....           LDS     R16, (TData + 1530)
   \   000002D0   9110....           LDS     R17, PortPair
   \   000002D4   1701               CP      R16, R17
   \   000002D6   F461               BRNE    ??ExtRS485Ctl_30
    156                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
   \   000002D8   9100....           LDS     R16, (TData + 1530)
   \   000002DC   9503               INC     R16
   \   000002DE   9300....           STS     (TData + 1530), R16
   \   000002E2   9100....           LDS     R16, (TData + 1530)
   \   000002E6   3004               CPI     R16, 4
   \   000002E8   F018               BRCS    ??ExtRS485Ctl_30
    157                                  TData.RS4.EEPROMPortpair[0] = 0;
   \   000002EA   E000               LDI     R16, 0
   \   000002EC   9300....           STS     (TData + 1530), R16
    158                              }
    159                          }
    160                      }
    161                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Ctl_30:
   \   000002F0   9100....           LDS     R16, TData
   \   000002F4   E010               LDI     R17, 0
   \   000002F6   9140....           LDS     R20, PortPair
   \   000002FA   5F4C               SUBI    R20, 252
   \   000002FC   ........           CALL    ?SS_SHR_L02
   \   00000300   7001               ANDI    R16, 0x01
   \   00000302   2300               TST     R16
   \   00000304   F409               BRNE    $+2+2
   \   00000306   C0C3               RJMP    ??ExtRS485Ctl_31
    162                          UART16552[1].TxFirst = 6;                       // Start at
   \   00000308   ....               LDI     R30, LOW(UART16552)
   \   0000030A   ....               LDI     R31, (UART16552) >> 8
   \   0000030C   E006               LDI     R16, 6
   \   0000030E   E010               LDI     R17, 0
   \   00000310   8F04               STD     Z+28, R16
   \   00000312   8F15               STD     Z+29, R17
    163                          char SnsType = (TData.RS4.SensorType[1] >> (2 * PortPair));
   \   00000314   9100....           LDS     R16, (TData + 2)
   \   00000318   E010               LDI     R17, 0
   \   0000031A   9130....           LDS     R19, PortPair
   \   0000031E   E022               LDI     R18, 2
   \   00000320   9F32               MUL     R19, R18
   \   00000322   2D40               MOV     R20, R0
   \   00000324   ........           CALL    ?SS_SHR_L02
   \   00000328   2E50               MOV     R5, R16
    164                          if (SnsType == 0x01) {    //Water ingress??
   \   0000032A   E001               LDI     R16, 1
   \   0000032C   1650               CP      R5, R16
   \   0000032E   F549               BRNE    ??ExtRS485Ctl_32
    165                              switch (SeqCnt) {
   \   00000330   2F0A               MOV     R16, R26
   \   00000332   5000               SUBI    R16, 0
   \   00000334   F019               BREQ    ??ExtRS485Ctl_33
   \   00000336   5104               SUBI    R16, 20
   \   00000338   F021               BREQ    ??ExtRS485Ctl_34
   \   0000033A   C020               RJMP    ??ExtRS485Ctl_35
    166                              case 0:
    167                                  Uart_BuildReqWISCardStatus(1);          //Card status
   \                     ??ExtRS485Ctl_33:
   \   0000033C   E001               LDI     R16, 1
   \   0000033E   ....               RCALL   Uart_BuildReqWISCardStatus
    168                                  break;
   \   00000340   C0A2               RJMP    ??ExtRS485Ctl_36
    169                              case 20:
    170                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \                     ??ExtRS485Ctl_34:
   \   00000342   9100....           LDS     R16, (TData + 1478)
   \   00000346   2300               TST     R16
   \   00000348   F4B1               BRNE    ??ExtRS485Ctl_37
   \   0000034A   9100....           LDS     R16, (TData + 1531)
   \   0000034E   9110....           LDS     R17, PortPair
   \   00000352   1701               CP      R16, R17
   \   00000354   F481               BRNE    ??ExtRS485Ctl_37
    171                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
   \   00000356   E713               LDI     R17, 115
   \   00000358   E001               LDI     R16, 1
   \   0000035A   ....               RCALL   Uart_BuildReqWISXData
    172                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   0000035C   9100....           LDS     R16, (TData + 1531)
   \   00000360   9503               INC     R16
   \   00000362   9300....           STS     (TData + 1531), R16
   \   00000366   9100....           LDS     R16, (TData + 1531)
   \   0000036A   3004               CPI     R16, 4
   \   0000036C   F030               BRCS    ??ExtRS485Ctl_38
    173                                          TData.RS4.EEPROMPortpair[1] = 0;
   \   0000036E   E000               LDI     R16, 0
   \   00000370   9300....           STS     (TData + 1531), R16
   \   00000374   C088               RJMP    ??ExtRS485Ctl_36
    174                                      }
    175                                  } else {
    176                                      Uart_BuildReqWISData(1);                //WIS data
   \                     ??ExtRS485Ctl_37:
   \   00000376   E001               LDI     R16, 1
   \   00000378   ....               RCALL   Uart_BuildReqWISData
    177                                  }
    178                                  break;
   \                     ??ExtRS485Ctl_38:
   \   0000037A   C085               RJMP    ??ExtRS485Ctl_36
    179                              default:
    180                                  Uart_BuildReqWISData(1);                //WIS data
   \                     ??ExtRS485Ctl_35:
   \   0000037C   E001               LDI     R16, 1
   \   0000037E   ....               RCALL   Uart_BuildReqWISData
    181                                  break;
   \   00000380   C082               RJMP    ??ExtRS485Ctl_36
    182                              }
    183                          } else if (SnsType == 0x02) {       // Radar??
   \                     ??ExtRS485Ctl_32:
   \   00000382   E002               LDI     R16, 2
   \   00000384   1650               CP      R5, R16
   \   00000386   F509               BRNE    ??ExtRS485Ctl_39
    184                              switch (SeqCnt) {
   \   00000388   2F0A               MOV     R16, R26
   \   0000038A   5000               SUBI    R16, 0
   \   0000038C   F0D9               BREQ    ??ExtRS485Ctl_40
   \   0000038E   5104               SUBI    R16, 20
   \   00000390   F4B1               BRNE    ??ExtRS485Ctl_41
    185                              case 20:
    186                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \   00000392   9100....           LDS     R16, (TData + 1478)
   \   00000396   2300               TST     R16
   \   00000398   F491               BRNE    ??ExtRS485Ctl_41
   \   0000039A   9100....           LDS     R16, (TData + 1531)
   \   0000039E   9110....           LDS     R17, PortPair
   \   000003A2   1701               CP      R16, R17
   \   000003A4   F461               BRNE    ??ExtRS485Ctl_41
    187                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   000003A6   9100....           LDS     R16, (TData + 1531)
   \   000003AA   9503               INC     R16
   \   000003AC   9300....           STS     (TData + 1531), R16
   \   000003B0   9100....           LDS     R16, (TData + 1531)
   \   000003B4   3004               CPI     R16, 4
   \   000003B6   F018               BRCS    ??ExtRS485Ctl_41
    188                                          TData.RS4.EEPROMPortpair[1] = 0;
   \   000003B8   E000               LDI     R16, 0
   \   000003BA   9300....           STS     (TData + 1531), R16
    189                                      }
    190                                  }
    191                                  // Fall through and send the request
    192                              default:
    193                                  Uart_BuildReqRadarData(1);          // Radar data
   \                     ??ExtRS485Ctl_41:
   \   000003BE   E001               LDI     R16, 1
   \   000003C0   ....               RCALL   Uart_BuildReqRadarData
    194                                  break;
   \   000003C2   C061               RJMP    ??ExtRS485Ctl_36
    195                              case 0:
    196                                  Uart_BuildReqRadarInfo(1);          //Radar Information
   \                     ??ExtRS485Ctl_40:
   \   000003C4   E001               LDI     R16, 1
   \   000003C6   ....               RCALL   Uart_BuildReqRadarInfo
    197                                  break;
   \   000003C8   C05E               RJMP    ??ExtRS485Ctl_36
    198                              }
    199                          } else {                                        // AN-SGCNV
    200                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    201                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
   \                     ??ExtRS485Ctl_39:
   \   000003CA   9100....           LDS     R16, (TData + 1348)
   \   000003CE   3001               CPI     R16, 1
   \   000003D0   F489               BRNE    ??ExtRS485Ctl_42
   \   000003D2   9100....           LDS     R16, (TData + 1349)
   \   000003D6   E010               LDI     R17, 0
   \   000003D8   91E0....           LDS     R30, PortPair
   \   000003DC   E0F0               LDI     R31, 0
   \   000003DE   9634               ADIW    R31:R30, 4
   \   000003E0   170E               CP      R16, R30
   \   000003E2   071F               CPC     R17, R31
   \   000003E4   F439               BRNE    ??ExtRS485Ctl_42
    202                                  Uart_BuildSndData(1);                       // add data to AD card package
   \   000003E6   E001               LDI     R16, 1
   \   000003E8   ....               RCALL   Uart_BuildSndData
    203                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
   \   000003EA   E001               LDI     R16, 1
   \   000003EC   ....               RCALL   Uart_BuildReqConfig
    204                                  AskMD[1] = false;
   \   000003EE   E000               LDI     R16, 0
   \   000003F0   2F90               MOV     R25, R16
   \   000003F2   C002               RJMP    ??ExtRS485Ctl_43
    205                              } else {
    206                                  AskMD[1] = true;
   \                     ??ExtRS485Ctl_42:
   \   000003F4   E001               LDI     R16, 1
   \   000003F6   2F90               MOV     R25, R16
    207                              }
    208                              if (SeqCnt == 0) {
   \                     ??ExtRS485Ctl_43:
   \   000003F8   23AA               TST     R26
   \   000003FA   F419               BRNE    ??ExtRS485Ctl_44
    209                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
   \   000003FC   E001               LDI     R16, 1
   \   000003FE   ....               RCALL   Uart_BuildReqCardStatus
   \   00000400   C042               RJMP    ??ExtRS485Ctl_36
    210                              } else if (SeqCnt == 5) {
   \                     ??ExtRS485Ctl_44:
   \   00000402   30A5               CPI     R26, 5
   \   00000404   F419               BRNE    ??ExtRS485Ctl_45
    211                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
   \   00000406   E001               LDI     R16, 1
   \   00000408   ....               RCALL   Uart_BuildReqR16552
   \   0000040A   C03D               RJMP    ??ExtRS485Ctl_36
    212                              } else if (SeqCnt == 10) {
   \                     ??ExtRS485Ctl_45:
   \   0000040C   30AA               CPI     R26, 10
   \   0000040E   F419               BRNE    ??ExtRS485Ctl_46
    213                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
   \   00000410   E001               LDI     R16, 1
   \   00000412   ....               RCALL   Uart_BuildReqConfig
   \   00000414   C038               RJMP    ??ExtRS485Ctl_36
    214                              } else if (SeqCnt == 15) {
   \                     ??ExtRS485Ctl_46:
   \   00000416   30AF               CPI     R26, 15
   \   00000418   F419               BRNE    ??ExtRS485Ctl_47
    215                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
   \   0000041A   E001               LDI     R16, 1
   \   0000041C   ....               RCALL   Uart_BuildReqC16552
   \   0000041E   C033               RJMP    ??ExtRS485Ctl_36
    216                              } else if (SeqCnt == 20) {
   \                     ??ExtRS485Ctl_47:
   \   00000420   31A4               CPI     R26, 20
   \   00000422   F561               BRNE    ??ExtRS485Ctl_48
    217                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
   \   00000424   9100....           LDS     R16, (TData + 1478)
   \   00000428   2300               TST     R16
   \   0000042A   F511               BRNE    ??ExtRS485Ctl_49
   \   0000042C   9100....           LDS     R16, (TData + 1531)
   \   00000430   9110....           LDS     R17, PortPair
   \   00000434   1701               CP      R16, R17
   \   00000436   F4E1               BRNE    ??ExtRS485Ctl_49
    218                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
   \   00000438   E001               LDI     R16, 1
   \   0000043A   ........           CALL    Uart_BuildReqEEPROMData
    219                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
   \   0000043E   9100....           LDS     R16, (TData + 1529)
   \   00000442   5F0E               SUBI    R16, 254
   \   00000444   9300....           STS     (TData + 1529), R16
   \   00000448   9100....           LDS     R16, (TData + 1529)
   \   0000044C   300F               CPI     R16, 15
   \   0000044E   F0D8               BRCS    ??ExtRS485Ctl_36
    220                                          TData.RS4.EEPROMADChannel[1] = 0;
   \   00000450   E000               LDI     R16, 0
   \   00000452   9300....           STS     (TData + 1529), R16
    221                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
   \   00000456   9100....           LDS     R16, (TData + 1531)
   \   0000045A   9503               INC     R16
   \   0000045C   9300....           STS     (TData + 1531), R16
   \   00000460   9100....           LDS     R16, (TData + 1531)
   \   00000464   3004               CPI     R16, 4
   \   00000466   F078               BRCS    ??ExtRS485Ctl_36
    222                                              TData.RS4.EEPROMPortpair[1] = 0;
   \   00000468   E000               LDI     R16, 0
   \   0000046A   9300....           STS     (TData + 1531), R16
   \   0000046E   C00B               RJMP    ??ExtRS485Ctl_36
    223                                          }
    224                                      }
    225                                  } else if (AskMD[1] == true) {
   \                     ??ExtRS485Ctl_49:
   \   00000470   3091               CPI     R25, 1
   \   00000472   F449               BRNE    ??ExtRS485Ctl_36
    226                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
   \   00000474   E001               LDI     R16, 1
   \   00000476   ........           CALL    Uart_BuildReqM16552
   \   0000047A   C005               RJMP    ??ExtRS485Ctl_36
    227                                  }
    228                              } else if (AskMD[1] == true) {
   \                     ??ExtRS485Ctl_48:
   \   0000047C   3091               CPI     R25, 1
   \   0000047E   F419               BRNE    ??ExtRS485Ctl_36
    229                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
   \   00000480   E001               LDI     R16, 1
   \   00000482   ........           CALL    Uart_BuildReqM16552
    230                              }
    231                          }
    232                          Uart_BuildTail16552(1);
   \                     ??ExtRS485Ctl_36:
   \   00000486   E001               LDI     R16, 1
   \   00000488   ........           CALL    Uart_BuildTail16552
   \   0000048C   C012               RJMP    ??ExtRS485Ctl_50
    233                      } else {
    234                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
   \                     ??ExtRS485Ctl_31:
   \   0000048E   9100....           LDS     R16, (TData + 1531)
   \   00000492   9110....           LDS     R17, PortPair
   \   00000496   1701               CP      R16, R17
   \   00000498   F461               BRNE    ??ExtRS485Ctl_50
    235                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
   \   0000049A   9100....           LDS     R16, (TData + 1531)
   \   0000049E   9503               INC     R16
   \   000004A0   9300....           STS     (TData + 1531), R16
   \   000004A4   9100....           LDS     R16, (TData + 1531)
   \   000004A8   3004               CPI     R16, 4
   \   000004AA   F018               BRCS    ??ExtRS485Ctl_50
    236                                  TData.RS4.EEPROMPortpair[1] = 0;
   \   000004AC   E000               LDI     R16, 0
   \   000004AE   9300....           STS     (TData + 1531), R16
    237                              }
    238                          }
    239                      }
    240                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
   \                     ??ExtRS485Ctl_50:
   \   000004B2   EE28               LDI     R18, 232
   \   000004B4   E033               LDI     R19, 3
   \   000004B6   E001               LDI     R16, 1
   \   000004B8   ........           CALL    OS_WaitEventTimed
   \   000004BC   2E40               MOV     R4, R16
    241                      if (EventStatus & 0x02) {
   \   000004BE   FA41               BST     R4, 1
   \   000004C0   F41E               BRTC    ??ExtRS485Ctl_51
    242                          if (PowerOnTimer >= POWER_ON_CNT) {
   \   000004C2   30B5               CPI     R27, 5
   \   000004C4   F008               BRCS    ??ExtRS485Ctl_51
    243                              PowerOnTimer = 0;                              // and start over again
   \   000004C6   E0B0               LDI     R27, 0
    244                          }
    245                      }
    246                  }
   \                     ??ExtRS485Ctl_51:
   \   000004C8   9100....           LDS     R16, PortPair
   \   000004CC   9503               INC     R16
   \   000004CE   9300....           STS     PortPair, R16
   \   000004D2   CDF0               RJMP    ??ExtRS485Ctl_4
    247                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_5:
   \   000004D4   95A3               INC     R26
   \   000004D6   31A5               CPI     R26, 21
   \   000004D8   F408               BRCC    $+2+2
   \   000004DA   CDE9               RJMP    ??ExtRS485Ctl_3
    248                      SeqCnt = 0;
   \   000004DC   E0A0               LDI     R26, 0
   \   000004DE   CDE7               RJMP    ??ExtRS485Ctl_3
   \   000004E0                      REQUIRE _A_PORTC
   \   000004E0                      REQUIRE _A_PORTE
    249                  }
    250              }
    251          }
    252          
    253          
    254          /*************************************************************************
    255          *   (This is a task)
    256          *  Usart handler UART receive data
    257          *
    258          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    259          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    260          
    261              char portresp;
    262          
    263              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   00000004   E900               LDI     R16, 144
   \   00000006   E11A               LDI     R17, 26
   \   00000008   ........           CALL    OS_Delay
    264          
    265              while (1) {
    266                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
   \                     ??ExtRS485Rec_0:
   \   0000000C   EF03               LDI     R16, 243
   \   0000000E   E011               LDI     R17, 1
   \   00000010   ........           CALL    OS_Delay
    267                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
   \   00000014   E021               LDI     R18, 1
   \   00000016   E030               LDI     R19, 0
   \   00000018   E003               LDI     R16, 3
   \   0000001A   ........           CALL    OS_WaitEventTimed
   \   0000001E   2F80               MOV     R24, R16
    268                  if (portresp & 0x01) {                  // answer on ch 0
   \   00000020   FB80               BST     R24, 0
   \   00000022   F4EE               BRTC    ??ExtRS485Rec_1
    269                      Usart16552CheckPackage(0);         // handle incomming package
   \   00000024   E000               LDI     R16, 0
   \   00000026   ....               RCALL   Usart16552CheckPackage
    270                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
   \   00000028   9100....           LDS     R16, PortPair
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   0F00               LSL     R16
   \   00000030   1F11               ROL     R17
   \   00000032   0F00               LSL     R16
   \   00000034   1F11               ROL     R17
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   8703               STD     Z+11, R16
   \   00000040   E000               LDI     R16, 0
   \   00000042   8704               STD     Z+12, R16
    271                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
   \   00000044   9100....           LDS     R16, PortPair
   \   00000048   E010               LDI     R17, 0
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000050   8103               LDD     R16, Z+3
   \   00000052   7F0E               ANDI    R16, 0xFE
   \   00000054   8303               STD     Z+3, R16
    272                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
   \   00000056   E000               LDI     R16, 0
   \   00000058   9300....           STS     (UART16552 + 24), R16
   \   0000005C   C072               RJMP    ??ExtRS485Rec_2
    273                  } else {
    274                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   0000005E   9100....           LDS     R16, (UART16552 + 24)
   \   00000062   9503               INC     R16
   \   00000064   9300....           STS     (UART16552 + 24), R16
    275                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
   \   00000068   9100....           LDS     R16, PortPair
   \   0000006C   E010               LDI     R17, 0
   \   0000006E   0F00               LSL     R16
   \   00000070   1F11               ROL     R17
   \   00000072   0F00               LSL     R16
   \   00000074   1F11               ROL     R17
   \   00000076   01F8               MOVW    R31:R30, R17:R16
   \   00000078   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007C   8505               LDD     R16, Z+13
   \   0000007E   8516               LDD     R17, Z+14
   \   00000080   5F0F               SUBI    R16, 255
   \   00000082   4F1F               SBCI    R17, 255
   \   00000084   8705               STD     Z+13, R16
   \   00000086   8716               STD     Z+14, R17
    276                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
   \   00000088   9100....           LDS     R16, PortPair
   \   0000008C   2F20               MOV     R18, R16
   \   0000008E   E030               LDI     R19, 0
   \   00000090   0F22               LSL     R18
   \   00000092   1F33               ROL     R19
   \   00000094   0F22               LSL     R18
   \   00000096   1F33               ROL     R19
   \   00000098   01F9               MOVW    R31:R30, R19:R18
   \   0000009A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000009E   85A3               LDD     R26, Z+11
   \   000000A0   85B4               LDD     R27, Z+12
   \   000000A2   019D               MOVW    R19:R18, R27:R26
   \   000000A4   5F2F               SUBI    R18, 255
   \   000000A6   4F3F               SBCI    R19, 255
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   0F00               LSL     R16
   \   000000AC   1F11               ROL     R17
   \   000000AE   0F00               LSL     R16
   \   000000B0   1F11               ROL     R17
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B8   8723               STD     Z+11, R18
   \   000000BA   8734               STD     Z+12, R19
   \   000000BC   9716               SBIW    R27:R26, 6
   \   000000BE   F048               BRCS    ??ExtRS485Rec_3
    277                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
   \   000000C0   9100....           LDS     R16, PortPair
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   01F8               MOVW    R31:R30, R17:R16
   \   000000C8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000CA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000CC   8103               LDD     R16, Z+3
   \   000000CE   6001               ORI     R16, 0x01
   \   000000D0   8303               STD     Z+3, R16
    278                      }
    279                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
   \                     ??ExtRS485Rec_3:
   \   000000D2   9100....           LDS     R16, TData
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   9140....           LDS     R20, PortPair
   \   000000DC   ........           CALL    ?SS_SHR_L02
   \   000000E0   7001               ANDI    R16, 0x01
   \   000000E2   2300               TST     R16
   \   000000E4   F171               BREQ    ??ExtRS485Rec_2
    280                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   000000E6   9100....           LDS     R16, PortPair
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   0F00               LSL     R16
   \   000000EE   1F11               ROL     R17
   \   000000F0   0F00               LSL     R16
   \   000000F2   1F11               ROL     R17
   \   000000F4   01F8               MOVW    R31:R30, R17:R16
   \   000000F6   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000F8   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000FA   8503               LDD     R16, Z+11
   \   000000FC   8514               LDD     R17, Z+12
   \   000000FE   7007               ANDI    R16, 0x07
   \   00000100   3004               CPI     R16, 4
   \   00000102   F4F9               BRNE    ??ExtRS485Rec_2
    281                              ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
   \   00000104   94F8               cli
   \   00000106   9100....           LDS     R16, (OS_Global + 1)
   \   0000010A   9503               INC     R16
   \   0000010C   9300....           STS     (OS_Global + 1), R16
   \   00000110   9140....           LDS     R20, PortPair
   \   00000114   E001               LDI     R16, 1
   \   00000116   E010               LDI     R17, 0
   \   00000118   ........           CALL    ?S_SHL_L02
   \   0000011C   9500               COM     R16
   \   0000011E   B315               IN      R17, 0x15
   \   00000120   2310               AND     R17, R16
   \   00000122   BB15               OUT     0x15, R17
   \   00000124   9100....           LDS     R16, (OS_Global + 1)
   \   00000128   950A               DEC     R16
   \   0000012A   9300....           STS     (OS_Global + 1), R16
   \   0000012E   9100....           LDS     R16, (OS_Global + 1)
   \   00000132   2300               TST     R16
   \   00000134   F409               BRNE    ??ExtRS485Rec_4
   \   00000136   9478               sei
    282                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_4:
   \   00000138   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   0000013A   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   0000013C   E002               LDI     R16, 2
   \   0000013E   ........           CALL    OS_SignalEvent
    283                          }
    284                      }
    285                  }
    286                  if (portresp & 0x02) {                  // answer on ch 1
   \                     ??ExtRS485Rec_2:
   \   00000142   FB81               BST     R24, 1
   \   00000144   F4EE               BRTC    ??ExtRS485Rec_5
    287                      Usart16552CheckPackage(1);         // handle incomming package
   \   00000146   E001               LDI     R16, 1
   \   00000148   ....               RCALL   Usart16552CheckPackage
    288                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
   \   0000014A   9100....           LDS     R16, PortPair
   \   0000014E   E010               LDI     R17, 0
   \   00000150   0F00               LSL     R16
   \   00000152   1F11               ROL     R17
   \   00000154   0F00               LSL     R16
   \   00000156   1F11               ROL     R17
   \   00000158   01F8               MOVW    R31:R30, R17:R16
   \   0000015A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000015C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000015E   E000               LDI     R16, 0
   \   00000160   8F03               STD     Z+27, R16
   \   00000162   E000               LDI     R16, 0
   \   00000164   8F04               STD     Z+28, R16
    289                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
   \   00000166   9100....           LDS     R16, PortPair
   \   0000016A   E010               LDI     R17, 0
   \   0000016C   01F8               MOVW    R31:R30, R17:R16
   \   0000016E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000170   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000172   8107               LDD     R16, Z+7
   \   00000174   7F0E               ANDI    R16, 0xFE
   \   00000176   8307               STD     Z+7, R16
    290                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
   \   00000178   E000               LDI     R16, 0
   \   0000017A   9300....           STS     (UART16552 + 50), R16
   \   0000017E   C074               RJMP    ??ExtRS485Rec_6
    291                  } else {
    292                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_5:
   \   00000180   9100....           LDS     R16, (UART16552 + 50)
   \   00000184   9503               INC     R16
   \   00000186   9300....           STS     (UART16552 + 50), R16
    293                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   0000018A   9100....           LDS     R16, PortPair
   \   0000018E   E010               LDI     R17, 0
   \   00000190   0F00               LSL     R16
   \   00000192   1F11               ROL     R17
   \   00000194   0F00               LSL     R16
   \   00000196   1F11               ROL     R17
   \   00000198   01F8               MOVW    R31:R30, R17:R16
   \   0000019A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000019C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000019E   8D05               LDD     R16, Z+29
   \   000001A0   8D16               LDD     R17, Z+30
   \   000001A2   5F0F               SUBI    R16, 255
   \   000001A4   4F1F               SBCI    R17, 255
   \   000001A6   8F05               STD     Z+29, R16
   \   000001A8   8F16               STD     Z+30, R17
    294                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   000001AA   9100....           LDS     R16, PortPair
   \   000001AE   2F20               MOV     R18, R16
   \   000001B0   E030               LDI     R19, 0
   \   000001B2   0F22               LSL     R18
   \   000001B4   1F33               ROL     R19
   \   000001B6   0F22               LSL     R18
   \   000001B8   1F33               ROL     R19
   \   000001BA   01F9               MOVW    R31:R30, R19:R18
   \   000001BC   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001BE   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001C0   8DA3               LDD     R26, Z+27
   \   000001C2   8DB4               LDD     R27, Z+28
   \   000001C4   019D               MOVW    R19:R18, R27:R26
   \   000001C6   5F2F               SUBI    R18, 255
   \   000001C8   4F3F               SBCI    R19, 255
   \   000001CA   E010               LDI     R17, 0
   \   000001CC   0F00               LSL     R16
   \   000001CE   1F11               ROL     R17
   \   000001D0   0F00               LSL     R16
   \   000001D2   1F11               ROL     R17
   \   000001D4   01F8               MOVW    R31:R30, R17:R16
   \   000001D6   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001D8   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001DA   8F23               STD     Z+27, R18
   \   000001DC   8F34               STD     Z+28, R19
   \   000001DE   9716               SBIW    R27:R26, 6
   \   000001E0   F048               BRCS    ??ExtRS485Rec_7
    295                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   000001E2   9100....           LDS     R16, PortPair
   \   000001E6   E010               LDI     R17, 0
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001EE   8107               LDD     R16, Z+7
   \   000001F0   6001               ORI     R16, 0x01
   \   000001F2   8307               STD     Z+7, R16
    296                      }
    297                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_7:
   \   000001F4   9100....           LDS     R16, TData
   \   000001F8   E010               LDI     R17, 0
   \   000001FA   9140....           LDS     R20, PortPair
   \   000001FE   5F4C               SUBI    R20, 252
   \   00000200   ........           CALL    ?SS_SHR_L02
   \   00000204   7001               ANDI    R16, 0x01
   \   00000206   2300               TST     R16
   \   00000208   F179               BREQ    ??ExtRS485Rec_6
    298                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   0000020A   9100....           LDS     R16, PortPair
   \   0000020E   E010               LDI     R17, 0
   \   00000210   0F00               LSL     R16
   \   00000212   1F11               ROL     R17
   \   00000214   0F00               LSL     R16
   \   00000216   1F11               ROL     R17
   \   00000218   01F8               MOVW    R31:R30, R17:R16
   \   0000021A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000021C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000021E   8D03               LDD     R16, Z+27
   \   00000220   8D14               LDD     R17, Z+28
   \   00000222   7007               ANDI    R16, 0x07
   \   00000224   3004               CPI     R16, 4
   \   00000226   F501               BRNE    ??ExtRS485Rec_6
    299                              ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
   \   00000228   94F8               cli
   \   0000022A   9100....           LDS     R16, (OS_Global + 1)
   \   0000022E   9503               INC     R16
   \   00000230   9300....           STS     (OS_Global + 1), R16
   \   00000234   9140....           LDS     R20, PortPair
   \   00000238   5F4C               SUBI    R20, 252
   \   0000023A   E001               LDI     R16, 1
   \   0000023C   E010               LDI     R17, 0
   \   0000023E   ........           CALL    ?S_SHL_L02
   \   00000242   9500               COM     R16
   \   00000244   B315               IN      R17, 0x15
   \   00000246   2310               AND     R17, R16
   \   00000248   BB15               OUT     0x15, R17
   \   0000024A   9100....           LDS     R16, (OS_Global + 1)
   \   0000024E   950A               DEC     R16
   \   00000250   9300....           STS     (OS_Global + 1), R16
   \   00000254   9100....           LDS     R16, (OS_Global + 1)
   \   00000258   2300               TST     R16
   \   0000025A   F409               BRNE    ??ExtRS485Rec_8
   \   0000025C   9478               sei
    300                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_8:
   \   0000025E   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000260   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000262   E002               LDI     R16, 2
   \   00000264   ........           CALL    OS_SignalEvent
    301                          }
    302                      }
    303                  }
    304                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_6:
   \   00000268   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   0000026A   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   0000026C   E001               LDI     R16, 1
   \   0000026E   ........           CALL    OS_SignalEvent
   \   00000272   CECC               RJMP    ??ExtRS485Rec_0
   \   00000274                      REQUIRE _A_PORTC
    305              }
    306          }
    307          
    308          /*************************************************************************
    309          *
    310          *  Set ports on or off
    311          *
    312          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    313          void SetRS4Port(void) {
   \                     SetRS4Port:
    314          
    315              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   BB05               OUT     0x15, R16
    316          
    317          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    318          
    319          /*************************************************************************
    320          *
    321          *  Check the incoming packages from AN_SGCNV / WIS
    322          *
    323          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    324          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    325          
    326              unsigned short pointer;
    327              char count_out, more;
    328          
    329              count_out = MAX_PROT_CMD;                  // max command
   \   00000006   EFBF               LDI     R27, 255
    330              more = true;
   \   00000008   E0A1               LDI     R26, 1
    331              pointer = 4;
   \   0000000A   E084               LDI     R24, 4
   \   0000000C   E090               LDI     R25, 0
    332              do {
    333                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   0000000E   019C               MOVW    R19:R18, R25:R24
   \   00000010   2D04               MOV     R16, R4
   \   00000012   ....               RCALL   CheckActionUart16552
   \   00000014   2300               TST     R16
   \   00000016   F409               BRNE    ??Usart16552CheckPackage_1
    334                      more = false;                          // terminate while loop
   \   00000018   E0A0               LDI     R26, 0
    335                  }
    336                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   0000001A   2D04               MOV     R16, R4
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   E14A               LDI     R20, 26
   \   00000020   E050               LDI     R21, 0
   \   00000022   ........           CALL    ?S_EC_MUL_L02
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002C   8502               LDD     R16, Z+10
   \   0000002E   8513               LDD     R17, Z+11
   \   00000030   0F08               ADD     R16, R24
   \   00000032   1F19               ADC     R17, R25
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   8101               LDD     R16, Z+1
   \   00000038   2FE0               MOV     R30, R16
   \   0000003A   E0F0               LDI     R31, 0
   \   0000003C   9632               ADIW    R31:R30, 2
   \   0000003E   0F8E               ADD     R24, R30
   \   00000040   1F9F               ADC     R25, R31
    337                  if (!--count_out) {
   \   00000042   95BA               DEC     R27
   \   00000044   23BB               TST     R27
   \   00000046   F409               BRNE    ??Usart16552CheckPackage_2
    338                      more = false;
   \   00000048   E0A0               LDI     R26, 0
    339                  }
    340              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \                     ??Usart16552CheckPackage_2:
   \   0000004A   23AA               TST     R26
   \   0000004C   F081               BREQ    ??Usart16552CheckPackage_3
   \   0000004E   2D04               MOV     R16, R4
   \   00000050   E010               LDI     R17, 0
   \   00000052   E14A               LDI     R20, 26
   \   00000054   E050               LDI     R21, 0
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000060   8906               LDD     R16, Z+22
   \   00000062   8917               LDD     R17, Z+23
   \   00000064   5003               SUBI    R16, 3
   \   00000066   4010               SBCI    R17, 0
   \   00000068   1780               CP      R24, R16
   \   0000006A   0791               CPC     R25, R17
   \   0000006C   F280               BRCS    ??Usart16552CheckPackage_0
    341              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_3:
   \   0000006E   2D04               MOV     R16, R4
   \   00000070   ........           CALL    GoToSyncUART16552
    342          }
   \   00000074   E0E5               LDI     R30, 5
   \   00000076   ........           JMP     ?EPILOGUE_B5_L09
    343          
    344          /*************************************************************************
    345          *
    346          *  Check action on received data from AN_SGCNV
    347          *
    348          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    349          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    350          
    351              char retval = true;
   \   00000008   E0B1               LDI     R27, 1
    352          
    353              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   0000000A   2F0A               MOV     R16, R26
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8502               LDD     R16, Z+10
   \   0000001E   8513               LDD     R17, Z+11
   \   00000020   0F08               ADD     R16, R24
   \   00000022   1F19               ADC     R17, R25
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8100               LD      R16, Z
   \   00000028   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart16552>_0`)
   \   0000002A   ....               LDI     R31, (`?<Jumptable for CheckActionUart16552>_0`) >> 16
   \   0000002C   BFFB               OUT     0x3B, R31
   \   0000002E   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000030   ........           JMP     ?CV_SWITCH_L06
    354          
    355              case ANP1_REP_MP_DATA :                              // Measured pressure data
    356              case ANP1_REP_MT_DATA :                              // Measured temperature data
    357              case ANP1_REP_MO_DATA :                              // Measured "other" data
    358                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_0:
   \   00000034   019C               MOVW    R19:R18, R25:R24
   \   00000036   5F2E               SUBI    R18, 254
   \   00000038   4F3F               SBCI    R19, 255
   \   0000003A   2F0A               MOV     R16, R26
   \   0000003C   ....               RCALL   ReceivePTOData
    359                  break;
   \   0000003E   C043               RJMP    ??CheckActionUart16552_1
    360              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    361                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_2:
   \   00000040   019C               MOVW    R19:R18, R25:R24
   \   00000042   5F2E               SUBI    R18, 254
   \   00000044   4F3F               SBCI    R19, 255
   \   00000046   2F0A               MOV     R16, R26
   \   00000048   ....               RCALL   ReceiveWHData
    362                  break;
   \   0000004A   C03D               RJMP    ??CheckActionUart16552_1
    363              case ANP1_REP_RP_DATA :                              // Raw pressure data
    364              case ANP1_REP_RT_DATA :                              // Raw temp. data
    365              case ANP1_REP_RO_DATA :                              // Raw "other" data
    366                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_3:
   \   0000004C   019C               MOVW    R19:R18, R25:R24
   \   0000004E   5F2E               SUBI    R18, 254
   \   00000050   4F3F               SBCI    R19, 255
   \   00000052   2F0A               MOV     R16, R26
   \   00000054   ....               RCALL   ReceiveRData
    367                  break;
   \   00000056   C037               RJMP    ??CheckActionUart16552_1
    368              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    369                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_4:
   \   00000058   019C               MOVW    R19:R18, R25:R24
   \   0000005A   5F2E               SUBI    R18, 254
   \   0000005C   4F3F               SBCI    R19, 255
   \   0000005E   2F0A               MOV     R16, R26
   \   00000060   ....               RCALL   ReceiveCData
    370                  break;
   \   00000062   C031               RJMP    ??CheckActionUart16552_1
    371          
    372              case ANP1_REP_CARD_STAT :                             // card status package
    373                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_5:
   \   00000064   019C               MOVW    R19:R18, R25:R24
   \   00000066   5F2E               SUBI    R18, 254
   \   00000068   4F3F               SBCI    R19, 255
   \   0000006A   2F0A               MOV     R16, R26
   \   0000006C   ....               RCALL   ReceiveCardStatus
    374                  break;
   \   0000006E   C02B               RJMP    ??CheckActionUart16552_1
    375          
    376              case ANP1_REP_CONFIG :                             // config data
    377                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_6:
   \   00000070   019C               MOVW    R19:R18, R25:R24
   \   00000072   5F2E               SUBI    R18, 254
   \   00000074   4F3F               SBCI    R19, 255
   \   00000076   2F0A               MOV     R16, R26
   \   00000078   ....               RCALL   ReceiveConfigData
    378                  break;
   \   0000007A   C025               RJMP    ??CheckActionUart16552_1
    379          
    380              case ANP1_REP_EEP_DATA :                             // card eeprome
    381                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_7:
   \   0000007C   019C               MOVW    R19:R18, R25:R24
   \   0000007E   5F2E               SUBI    R18, 254
   \   00000080   4F3F               SBCI    R19, 255
   \   00000082   2F0A               MOV     R16, R26
   \   00000084   ....               RCALL   ReceiveCardEEPROMData
    382                  break;
   \   00000086   C01F               RJMP    ??CheckActionUart16552_1
    383          
    384              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    385                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_8:
   \   00000088   019C               MOVW    R19:R18, R25:R24
   \   0000008A   5F2E               SUBI    R18, 254
   \   0000008C   4F3F               SBCI    R19, 255
   \   0000008E   2F0A               MOV     R16, R26
   \   00000090   ....               RCALL   ReceiveWISStatus
    386                  break;
   \   00000092   C019               RJMP    ??CheckActionUart16552_1
    387          
    388              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    389                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_9:
   \   00000094   019C               MOVW    R19:R18, R25:R24
   \   00000096   5F2E               SUBI    R18, 254
   \   00000098   4F3F               SBCI    R19, 255
   \   0000009A   2F0A               MOV     R16, R26
   \   0000009C   ....               RCALL   ReceiveWISXData
    390                  break;
   \   0000009E   C013               RJMP    ??CheckActionUart16552_1
    391          
    392              case ANP1_REP_WIS_DATA :                             // Data from WIS
    393                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_10:
   \   000000A0   019C               MOVW    R19:R18, R25:R24
   \   000000A2   5F2E               SUBI    R18, 254
   \   000000A4   4F3F               SBCI    R19, 255
   \   000000A6   2F0A               MOV     R16, R26
   \   000000A8   ....               RCALL   ReceiveWISData
    394                  break;
   \   000000AA   C00D               RJMP    ??CheckActionUart16552_1
    395              case ANP1_REP_GODA_DATA:
    396                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_11:
   \   000000AC   019C               MOVW    R19:R18, R25:R24
   \   000000AE   5F2E               SUBI    R18, 254
   \   000000B0   4F3F               SBCI    R19, 255
   \   000000B2   2F0A               MOV     R16, R26
   \   000000B4   ....               RCALL   ReceiveRadarData
    397                  break;
   \   000000B6   C007               RJMP    ??CheckActionUart16552_1
    398              case ANP1_REP_GODA_INFO:
    399                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_12:
   \   000000B8   019C               MOVW    R19:R18, R25:R24
   \   000000BA   5F2E               SUBI    R18, 254
   \   000000BC   4F3F               SBCI    R19, 255
   \   000000BE   2F0A               MOV     R16, R26
   \   000000C0   ....               RCALL   ReceiveRadarInfo
    400                  break;
   \   000000C2   C001               RJMP    ??CheckActionUart16552_1
    401              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    402              case ANP1_ECMD_NMDWOACK :                         // No more data
    403                  retval = false;
   \                     ??CheckActionUart16552_13:
   \   000000C4   E0B0               LDI     R27, 0
    404                  break;
    405              }
    406              return retval;
   \                     ??CheckActionUart16552_1:
   \   000000C6   2F0B               MOV     R16, R27
   \   000000C8   E0E4               LDI     R30, 4
   \   000000CA   ........           JMP     ?EPILOGUE_B4_L09
    407          }
    408          
    409          /*************************************************************************
    410          *
    411          *  Receive card status from WIS
    412          *
    413          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    414          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   2F60               MOV     R22, R16
    415          
    416              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000002   9020....           LDS     R2, PortPair
   \   00000006   2F06               MOV     R16, R22
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8502               LDD     R16, Z+10
   \   0000001A   8513               LDD     R17, Z+11
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   8140               LD      R20, Z
   \   00000024   2F06               MOV     R16, R22
   \   00000026   E010               LDI     R17, 0
   \   00000028   0F00               LSL     R16
   \   0000002A   1F11               ROL     R17
   \   0000002C   0F00               LSL     R16
   \   0000002E   1F11               ROL     R17
   \   00000030   2433               CLR     R3
   \   00000032   0D02               ADD     R16, R2
   \   00000034   1D13               ADC     R17, R3
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003C   A503               LDD     R16, Z+43
   \   0000003E   2B04               OR      R16, R20
   \   00000040   A703               STD     Z+43, R16
    417              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000042   2F06               MOV     R16, R22
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14A               LDI     R20, 26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000054   8502               LDD     R16, Z+10
   \   00000056   8513               LDD     R17, Z+11
   \   00000058   0F02               ADD     R16, R18
   \   0000005A   1F13               ADC     R17, R19
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   8171               LDD     R23, Z+1
   \   00000060   2F06               MOV     R16, R22
   \   00000062   E010               LDI     R17, 0
   \   00000064   0F00               LSL     R16
   \   00000066   1F11               ROL     R17
   \   00000068   0F00               LSL     R16
   \   0000006A   1F11               ROL     R17
   \   0000006C   9140....           LDS     R20, PortPair
   \   00000070   E050               LDI     R21, 0
   \   00000072   0F04               ADD     R16, R20
   \   00000074   1F15               ADC     R17, R21
   \   00000076   01F8               MOVW    R31:R30, R17:R16
   \   00000078   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007C   AB73               STD     Z+51, R23
    418              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   0000007E   2F06               MOV     R16, R22
   \   00000080   E010               LDI     R17, 0
   \   00000082   E14A               LDI     R20, 26
   \   00000084   E050               LDI     R21, 0
   \   00000086   ........           CALL    ?S_EC_MUL_L02
   \   0000008A   01F8               MOVW    R31:R30, R17:R16
   \   0000008C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000090   8502               LDD     R16, Z+10
   \   00000092   8513               LDD     R17, Z+11
   \   00000094   0F02               ADD     R16, R18
   \   00000096   1F13               ADC     R17, R19
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   8104               LDD     R16, Z+4
   \   0000009C   2300               TST     R16
   \   0000009E   F089               BREQ    ??ReceiveWISStatus_0
    419                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   000000A0   9140....           LDS     R20, PortPair
   \   000000A4   2F06               MOV     R16, R22
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   0F00               LSL     R16
   \   000000AA   1F11               ROL     R17
   \   000000AC   0F00               LSL     R16
   \   000000AE   1F11               ROL     R17
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   0F04               ADD     R16, R20
   \   000000B4   1F15               ADC     R17, R21
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000BC   A903               LDD     R16, Z+51
   \   000000BE   6800               ORI     R16, 0x80
   \   000000C0   AB03               STD     Z+51, R16
    420              }
    421          }
   \                     ??ReceiveWISStatus_0:
   \   000000C2   9508               RET
    422          
    423          /*************************************************************************
    424          *
    425          *  Receive WIS protocol data
    426          *
    427          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    428          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    429          
    430              char i;
    431          
    432              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000008   011C               MOVW    R3:R2, R25:R24
   \   0000000A   01C1               MOVW    R25:R24, R3:R2
   \   0000000C   9601               ADIW    R25:R24, 1
   \   0000000E   2F06               MOV     R16, R22
   \   00000010   E010               LDI     R17, 0
   \   00000012   E14A               LDI     R20, 26
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000020   8502               LDD     R16, Z+10
   \   00000022   8513               LDD     R17, Z+11
   \   00000024   0D02               ADD     R16, R2
   \   00000026   1D13               ADC     R17, R3
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   8100               LD      R16, Z
   \   0000002C   3703               CPI     R16, 115
   \   0000002E   F5F1               BRNE    ??ReceiveWISXData_0
    433              case 115:                                     // Serial number
    434                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000030   2F06               MOV     R16, R22
   \   00000032   E010               LDI     R17, 0
   \   00000034   E342               LDI     R20, 50
   \   00000036   E050               LDI     R21, 0
   \   00000038   ........           CALL    ?S_EC_MUL_L02
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   ....               SUBI    R30, LOW((-(TData + 1428) & 0xFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(TData + 1428) & 0xFFFF))
   \   00000042   E001               LDI     R16, 1
   \   00000044   8300               ST      Z, R16
    435                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000046   E004               LDI     R16, 4
   \   00000048   9F60               MUL     R22, R16
   \   0000004A   2D30               MOV     R19, R0
   \   0000004C   9100....           LDS     R16, PortPair
   \   00000050   0F30               ADD     R19, R16
   \   00000052   2F06               MOV     R16, R22
   \   00000054   E010               LDI     R17, 0
   \   00000056   E342               LDI     R20, 50
   \   00000058   E050               LDI     R21, 0
   \   0000005A   ........           CALL    ?S_EC_MUL_L02
   \   0000005E   01F8               MOVW    R31:R30, R17:R16
   \   00000060   ....               SUBI    R30, LOW((-(TData + 1429) & 0xFFFF))
   \   00000062   ....               SBCI    R31, HIGH((-(TData + 1429) & 0xFFFF))
   \   00000064   8330               ST      Z, R19
    436                  for (i = 2; i < (4 + 2); i++) {
   \   00000066   E022               LDI     R18, 2
   \                     ??ReceiveWISXData_1:
   \   00000068   3026               CPI     R18, 6
   \   0000006A   F500               BRCC    ??ReceiveWISXData_0
    437                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \   0000006C   2F06               MOV     R16, R22
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8502               LDD     R16, Z+10
   \   00000080   8513               LDD     R17, Z+11
   \   00000082   0F08               ADD     R16, R24
   \   00000084   1F19               ADC     R17, R25
   \   00000086   01F8               MOVW    R31:R30, R17:R16
   \   00000088   8170               LD      R23, Z
   \   0000008A   ....               LDI     R30, LOW((TData + 1428))
   \   0000008C   ....               LDI     R31, HIGH((TData + 1428))
   \   0000008E   E030               LDI     R19, 0
   \   00000090   0FE2               ADD     R30, R18
   \   00000092   1FF3               ADC     R31, R19
   \   00000094   2F06               MOV     R16, R22
   \   00000096   E010               LDI     R17, 0
   \   00000098   E342               LDI     R20, 50
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   ........           CALL    ?S_EC_MUL_L02
   \   000000A0   0FE0               ADD     R30, R16
   \   000000A2   1FF1               ADC     R31, R17
   \   000000A4   8370               ST      Z, R23
   \   000000A6   9601               ADIW    R25:R24, 1
    438                  }
   \   000000A8   9523               INC     R18
   \   000000AA   CFDE               RJMP    ??ReceiveWISXData_1
    439                  break;
    440              default:
    441                  break;
    442              }
    443          }
   \                     ??ReceiveWISXData_0:
   \   000000AC   9189               LD      R24, Y+
   \   000000AE   9199               LD      R25, Y+
   \   000000B0   9508               RET
    444          
    445          /*************************************************************************
    446          *
    447          *  Receive measured data from WIS
    448          *
    449          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    450          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    451          
    452              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   8502               LDD     R16, Z+10
   \   0000001C   8513               LDD     R17, Z+11
   \   0000001E   0F08               ADD     R16, R24
   \   00000020   1F19               ADC     R17, R25
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   8100               LD      R16, Z
   \   00000026   E010               LDI     R17, 0
   \   00000028   E020               LDI     R18, 0
   \   0000002A   E030               LDI     R19, 0
   \   0000002C   ........           CALL    ?UL2F_L04
   \   00000030   0128               MOVW    R5:R4, R17:R16
   \   00000032   0139               MOVW    R7:R6, R19:R18
   \   00000034   2F0A               MOV     R16, R26
   \   00000036   E010               LDI     R17, 0
   \   00000038   0F00               LSL     R16
   \   0000003A   1F11               ROL     R17
   \   0000003C   0F00               LSL     R16
   \   0000003E   1F11               ROL     R17
   \   00000040   9120....           LDS     R18, PortPair
   \   00000044   E030               LDI     R19, 0
   \   00000046   0F02               ADD     R16, R18
   \   00000048   1F13               ADC     R17, R19
   \   0000004A   E348               LDI     R20, 56
   \   0000004C   E050               LDI     R21, 0
   \   0000004E   ........           CALL    ?S_EC_MUL_L02
   \   00000052   01F8               MOVW    R31:R30, R17:R16
   \   00000054   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000056   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   00000058   8240               ST      Z, R4
   \   0000005A   8251               STD     Z+1, R5
   \   0000005C   8262               STD     Z+2, R6
   \   0000005E   8273               STD     Z+3, R7
    453              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    454                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   00000060   2F0A               MOV     R16, R26
   \   00000062   E010               LDI     R17, 0
   \   00000064   E14A               LDI     R20, 26
   \   00000066   E050               LDI     R21, 0
   \   00000068   ........           CALL    ?S_EC_MUL_L02
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000070   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000072   8502               LDD     R16, Z+10
   \   00000074   8513               LDD     R17, Z+11
   \   00000076   0F08               ADD     R16, R24
   \   00000078   1F19               ADC     R17, R25
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   8131               LDD     R19, Z+1
   \   0000007E   E020               LDI     R18, 0
   \   00000080   2F0A               MOV     R16, R26
   \   00000082   E010               LDI     R17, 0
   \   00000084   E14A               LDI     R20, 26
   \   00000086   E050               LDI     R21, 0
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8502               LDD     R16, Z+10
   \   00000094   8513               LDD     R17, Z+11
   \   00000096   0F08               ADD     R16, R24
   \   00000098   1F19               ADC     R17, R25
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   8102               LDD     R16, Z+2
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   0F20               ADD     R18, R16
   \   000000A2   1F31               ADC     R19, R17
   \   000000A4   0189               MOVW    R17:R16, R19:R18
   \   000000A6   2F21               MOV     R18, R17
   \   000000A8   0F22               LSL     R18
   \   000000AA   0B22               SBC     R18, R18
   \   000000AC   2F32               MOV     R19, R18
   \   000000AE   ........           CALL    ?SL2F_L04
   \   000000B2   E040               LDI     R20, 0
   \   000000B4   E050               LDI     R21, 0
   \   000000B6   E260               LDI     R22, 32
   \   000000B8   E471               LDI     R23, 65
   \   000000BA   ........           CALL    ?F_DIV_L04
   \   000000BE   0128               MOVW    R5:R4, R17:R16
   \   000000C0   0139               MOVW    R7:R6, R19:R18
   \   000000C2   2F0A               MOV     R16, R26
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   0F00               LSL     R16
   \   000000C8   1F11               ROL     R17
   \   000000CA   0F00               LSL     R16
   \   000000CC   1F11               ROL     R17
   \   000000CE   9120....           LDS     R18, PortPair
   \   000000D2   E030               LDI     R19, 0
   \   000000D4   0F02               ADD     R16, R18
   \   000000D6   1F13               ADC     R17, R19
   \   000000D8   E348               LDI     R20, 56
   \   000000DA   E050               LDI     R21, 0
   \   000000DC   ........           CALL    ?S_EC_MUL_L02
   \   000000E0   01F8               MOVW    R31:R30, R17:R16
   \   000000E2   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   000000E4   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   000000E6   8240               ST      Z, R4
   \   000000E8   8251               STD     Z+1, R5
   \   000000EA   8262               STD     Z+2, R6
   \   000000EC   8273               STD     Z+3, R7
    455              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   000000EE   2F0A               MOV     R16, R26
   \   000000F0   E010               LDI     R17, 0
   \   000000F2   E14A               LDI     R20, 26
   \   000000F4   E050               LDI     R21, 0
   \   000000F6   ........           CALL    ?S_EC_MUL_L02
   \   000000FA   01F8               MOVW    R31:R30, R17:R16
   \   000000FC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000FE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000100   8502               LDD     R16, Z+10
   \   00000102   8513               LDD     R17, Z+11
   \   00000104   0F08               ADD     R16, R24
   \   00000106   1F19               ADC     R17, R25
   \   00000108   01F8               MOVW    R31:R30, R17:R16
   \   0000010A   8163               LDD     R22, Z+3
   \   0000010C   2F0A               MOV     R16, R26
   \   0000010E   E010               LDI     R17, 0
   \   00000110   0F00               LSL     R16
   \   00000112   1F11               ROL     R17
   \   00000114   0F00               LSL     R16
   \   00000116   1F11               ROL     R17
   \   00000118   9120....           LDS     R18, PortPair
   \   0000011C   E030               LDI     R19, 0
   \   0000011E   0F02               ADD     R16, R18
   \   00000120   1F13               ADC     R17, R19
   \   00000122   E04E               LDI     R20, 14
   \   00000124   E050               LDI     R21, 0
   \   00000126   ........           CALL    ?S_EC_MUL_L02
   \   0000012A   01F8               MOVW    R31:R30, R17:R16
   \   0000012C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000012E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000130   AF63               STD     Z+59, R22
    456              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   00000132   2F0A               MOV     R16, R26
   \   00000134   E010               LDI     R17, 0
   \   00000136   0F00               LSL     R16
   \   00000138   1F11               ROL     R17
   \   0000013A   0F00               LSL     R16
   \   0000013C   1F11               ROL     R17
   \   0000013E   9120....           LDS     R18, PortPair
   \   00000142   E030               LDI     R19, 0
   \   00000144   0F02               ADD     R16, R18
   \   00000146   1F13               ADC     R17, R19
   \   00000148   E04E               LDI     R20, 14
   \   0000014A   E050               LDI     R21, 0
   \   0000014C   ........           CALL    ?S_EC_MUL_L02
   \   00000150   01F8               MOVW    R31:R30, R17:R16
   \   00000152   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   00000154   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   00000156   E000               LDI     R16, 0
   \   00000158   8300               ST      Z, R16
    457          }
   \   0000015A   E0E8               LDI     R30, 8
   \   0000015C   ........           JMP     ?EPILOGUE_B8_L09
    458          
    459          
    460          /*************************************************************************
    461          *
    462          *  Receive measured data from Radar
    463          *
    464          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    465          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    466              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
   \   00000008   2D02               MOV     R16, R2
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   8522               LDD     R18, Z+10
   \   0000001C   8533               LDD     R19, Z+11
   \   0000001E   0F26               ADD     R18, R22
   \   00000020   1F37               ADC     R19, R23
    467              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
   \   00000022   2D02               MOV     R16, R2
   \   00000024   E010               LDI     R17, 0
   \   00000026   E14A               LDI     R20, 26
   \   00000028   E050               LDI     R21, 0
   \   0000002A   ........           CALL    ?S_EC_MUL_L02
   \   0000002E   01F8               MOVW    R31:R30, R17:R16
   \   00000030   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000034   8502               LDD     R16, Z+10
   \   00000036   8513               LDD     R17, Z+11
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   0FE6               ADD     R30, R22
   \   0000003C   1FF7               ADC     R31, R23
   \   0000003E   9634               ADIW    R31:R30, 4
    468          
    469              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
   \   00000040   01D9               MOVW    R27:R26, R19:R18
   \   00000042   904D               LD      R4, X+
   \   00000044   905D               LD      R5, X+
   \   00000046   906D               LD      R6, X+
   \   00000048   907C               LD      R7, X
   \   0000004A   9713               SBIW    R27:R26, 3
   \   0000004C   2D02               MOV     R16, R2
   \   0000004E   E010               LDI     R17, 0
   \   00000050   0F00               LSL     R16
   \   00000052   1F11               ROL     R17
   \   00000054   0F00               LSL     R16
   \   00000056   1F11               ROL     R17
   \   00000058   9140....           LDS     R20, PortPair
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   0F04               ADD     R16, R20
   \   00000060   1F15               ADC     R17, R21
   \   00000062   E348               LDI     R20, 56
   \   00000064   E050               LDI     R21, 0
   \   00000066   ........           CALL    ?S_EC_MUL_L02
   \   0000006A   01D8               MOVW    R27:R26, R17:R16
   \   0000006C   ....               SUBI    R26, LOW((-(TData + 731) & 0xFFFF))
   \   0000006E   ....               SBCI    R27, HIGH((-(TData + 731) & 0xFFFF))
   \   00000070   924D               ST      X+, R4
   \   00000072   925D               ST      X+, R5
   \   00000074   926D               ST      X+, R6
   \   00000076   927C               ST      X, R7
   \   00000078   9713               SBIW    R27:R26, 3
    470              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   0000007A   8040               LD      R4, Z
   \   0000007C   8051               LDD     R5, Z+1
   \   0000007E   8062               LDD     R6, Z+2
   \   00000080   8073               LDD     R7, Z+3
   \   00000082   2D02               MOV     R16, R2
   \   00000084   E010               LDI     R17, 0
   \   00000086   0F00               LSL     R16
   \   00000088   1F11               ROL     R17
   \   0000008A   0F00               LSL     R16
   \   0000008C   1F11               ROL     R17
   \   0000008E   9140....           LDS     R20, PortPair
   \   00000092   E050               LDI     R21, 0
   \   00000094   0F04               ADD     R16, R20
   \   00000096   1F15               ADC     R17, R21
   \   00000098   E348               LDI     R20, 56
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   ........           CALL    ?S_EC_MUL_L02
   \   000000A0   01D8               MOVW    R27:R26, R17:R16
   \   000000A2   ....               SUBI    R26, LOW((-(TData + 735) & 0xFFFF))
   \   000000A4   ....               SBCI    R27, HIGH((-(TData + 735) & 0xFFFF))
   \   000000A6   924D               ST      X+, R4
   \   000000A8   925D               ST      X+, R5
   \   000000AA   926D               ST      X+, R6
   \   000000AC   927C               ST      X, R7
   \   000000AE   9713               SBIW    R27:R26, 3
    471              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   000000B0   2D02               MOV     R16, R2
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   E14A               LDI     R20, 26
   \   000000B6   E050               LDI     R21, 0
   \   000000B8   ........           CALL    ?S_EC_MUL_L02
   \   000000BC   01D8               MOVW    R27:R26, R17:R16
   \   000000BE   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   000000C0   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   000000C2   910D               LD      R16, X+
   \   000000C4   911C               LD      R17, X
   \   000000C6   9711               SBIW    R27:R26, 1
   \   000000C8   0F06               ADD     R16, R22
   \   000000CA   1F17               ADC     R17, R23
   \   000000CC   01D8               MOVW    R27:R26, R17:R16
   \   000000CE   9618               ADIW    R27:R26, 8
   \   000000D0   903C               LD      R3, X
   \   000000D2   9718               SBIW    R27:R26, 8
   \   000000D4   2D02               MOV     R16, R2
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   0F00               LSL     R16
   \   000000DA   1F11               ROL     R17
   \   000000DC   0F00               LSL     R16
   \   000000DE   1F11               ROL     R17
   \   000000E0   9140....           LDS     R20, PortPair
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   0F04               ADD     R16, R20
   \   000000E8   1F15               ADC     R17, R21
   \   000000EA   E04E               LDI     R20, 14
   \   000000EC   E050               LDI     R21, 0
   \   000000EE   ........           CALL    ?S_EC_MUL_L02
   \   000000F2   01D8               MOVW    R27:R26, R17:R16
   \   000000F4   ....               SUBI    R26, LOW((-(TData + 59) & 0xFFFF))
   \   000000F6   ....               SBCI    R27, HIGH((-(TData + 59) & 0xFFFF))
   \   000000F8   923C               ST      X, R3
    472              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   000000FA   2D02               MOV     R16, R2
   \   000000FC   E010               LDI     R17, 0
   \   000000FE   E14A               LDI     R20, 26
   \   00000100   E050               LDI     R21, 0
   \   00000102   ........           CALL    ?S_EC_MUL_L02
   \   00000106   01D8               MOVW    R27:R26, R17:R16
   \   00000108   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   0000010A   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   0000010C   910D               LD      R16, X+
   \   0000010E   911C               LD      R17, X
   \   00000110   9711               SBIW    R27:R26, 1
   \   00000112   0F06               ADD     R16, R22
   \   00000114   1F17               ADC     R17, R23
   \   00000116   01D8               MOVW    R27:R26, R17:R16
   \   00000118   9619               ADIW    R27:R26, 9
   \   0000011A   903C               LD      R3, X
   \   0000011C   9719               SBIW    R27:R26, 9
   \   0000011E   2D02               MOV     R16, R2
   \   00000120   E010               LDI     R17, 0
   \   00000122   0F00               LSL     R16
   \   00000124   1F11               ROL     R17
   \   00000126   0F00               LSL     R16
   \   00000128   1F11               ROL     R17
   \   0000012A   9140....           LDS     R20, PortPair
   \   0000012E   E050               LDI     R21, 0
   \   00000130   0F04               ADD     R16, R20
   \   00000132   1F15               ADC     R17, R21
   \   00000134   E04E               LDI     R20, 14
   \   00000136   E050               LDI     R21, 0
   \   00000138   ........           CALL    ?S_EC_MUL_L02
   \   0000013C   01D8               MOVW    R27:R26, R17:R16
   \   0000013E   ....               SUBI    R26, LOW((-(TData + 171) & 0xFFFF))
   \   00000140   ....               SBCI    R27, HIGH((-(TData + 171) & 0xFFFF))
   \   00000142   923C               ST      X, R3
    473          }
   \   00000144   E0E8               LDI     R30, 8
   \   00000146   ........           JMP     ?EPILOGUE_B8_L09
    474          
    475          
    476          /*************************************************************************
    477          *
    478          *  Receive Serial number and version information from Radar
    479          *
    480          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    481          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   2F60               MOV     R22, R16
    482              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    483              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000002   2F06               MOV     R16, R22
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8502               LDD     R16, Z+10
   \   00000016   8513               LDD     R17, Z+11
   \   00000018   0F02               ADD     R16, R18
   \   0000001A   1F13               ADC     R17, R19
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   8402               LDD     R0, Z+10
   \   00000020   8413               LDD     R1, Z+11
   \   00000022   8424               LDD     R2, Z+12
   \   00000024   8435               LDD     R3, Z+13
   \   00000026   2F06               MOV     R16, R22
   \   00000028   E010               LDI     R17, 0
   \   0000002A   0F00               LSL     R16
   \   0000002C   1F11               ROL     R17
   \   0000002E   0F00               LSL     R16
   \   00000030   1F11               ROL     R17
   \   00000032   9140....           LDS     R20, PortPair
   \   00000036   E050               LDI     R21, 0
   \   00000038   0F04               ADD     R16, R20
   \   0000003A   1F15               ADC     R17, R21
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000042   A603               STD     Z+43, R0
    484          }
   \   00000044   9508               RET
    485          
    486          /*************************************************************************
    487          *
    488          *  Receive pressure measured data from AN_SGCNV
    489          *
    490          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    491          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   ........           CALL    ?PROLOGUE14_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004   2EA0               MOV     R10, R16
   \   00000006   0149               MOVW    R9:R8, R19:R18
    492          
    493              unsigned short pnt, ADCh;
    494              short packlen;
    495          
    496              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000008   2D0A               MOV     R16, R10
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E14A               LDI     R20, 26
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   8502               LDD     R16, Z+10
   \   0000001C   8513               LDD     R17, Z+11
   \   0000001E   0D08               ADD     R16, R8
   \   00000020   1D19               ADC     R17, R9
   \   00000022   5001               SUBI    R16, 1
   \   00000024   4010               SBCI    R17, 0
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   8100               LD      R16, Z
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   0168               MOVW    R13:R12, R17:R16
    497          
    498              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   0000002E   ....               LDI     R16, LOW(UARTSEND)
   \   00000030   ....               LDI     R17, (UARTSEND) >> 8
   \   00000032   ........           CALL    OS_Use
    499          
    500              if (packlen > 0) {
   \   00000036   E001               LDI     R16, 1
   \   00000038   16C0               CP      R12, R16
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   06D0               CPC     R13, R16
   \   0000003E   F40C               BRGE    $+2+2
   \   00000040   C07C               RJMP    ??ReceivePTOData_0
    501                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   00000042   E080               LDI     R24, 0
   \   00000044   E090               LDI     R25, 0
   \                     ??ReceivePTOData_1:
   \   00000046   158C               CP      R24, R12
   \   00000048   059D               CPC     R25, R13
   \   0000004A   F008               BRCS    $+2+2
   \   0000004C   C076               RJMP    ??ReceivePTOData_0
    502                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   0000004E   2D0A               MOV     R16, R10
   \   00000050   E010               LDI     R17, 0
   \   00000052   E14A               LDI     R20, 26
   \   00000054   E050               LDI     R21, 0
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000060   8502               LDD     R16, Z+10
   \   00000062   8513               LDD     R17, Z+11
   \   00000064   0194               MOVW    R19:R18, R9:R8
   \   00000066   0F28               ADD     R18, R24
   \   00000068   1F39               ADC     R19, R25
   \   0000006A   0F02               ADD     R16, R18
   \   0000006C   1F13               ADC     R17, R19
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   8100               LD      R16, Z
   \   00000072   E010               LDI     R17, 0
   \   00000074   01D8               MOVW    R27:R26, R17:R16
    503                      if (ADCh < 14) {
   \   00000076   30AE               CPI     R26, 14
   \   00000078   E000               LDI     R16, 0
   \   0000007A   07B0               CPC     R27, R16
   \   0000007C   F008               BRCS    $+2+2
   \   0000007E   C05B               RJMP    ??ReceivePTOData_2
    504                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000080   2D0A               MOV     R16, R10
   \   00000082   E010               LDI     R17, 0
   \   00000084   E14A               LDI     R20, 26
   \   00000086   E050               LDI     R21, 0
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8502               LDD     R16, Z+10
   \   00000094   8513               LDD     R17, Z+11
   \   00000096   0194               MOVW    R19:R18, R9:R8
   \   00000098   0F28               ADD     R18, R24
   \   0000009A   1F39               ADC     R19, R25
   \   0000009C   0F02               ADD     R16, R18
   \   0000009E   1F13               ADC     R17, R19
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   8121               LDD     R18, Z+1
   \   000000A4   ....               LDI     R30, LOW((TData + 59))
   \   000000A6   ....               LDI     R31, HIGH((TData + 59))
   \   000000A8   0FEA               ADD     R30, R26
   \   000000AA   1FFB               ADC     R31, R27
   \   000000AC   2D0A               MOV     R16, R10
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   0F00               LSL     R16
   \   000000B2   1F11               ROL     R17
   \   000000B4   0F00               LSL     R16
   \   000000B6   1F11               ROL     R17
   \   000000B8   9140....           LDS     R20, PortPair
   \   000000BC   E050               LDI     R21, 0
   \   000000BE   0F04               ADD     R16, R20
   \   000000C0   1F15               ADC     R17, R21
   \   000000C2   E04E               LDI     R20, 14
   \   000000C4   E050               LDI     R21, 0
   \   000000C6   ........           CALL    ?S_EC_MUL_L02
   \   000000CA   0FE0               ADD     R30, R16
   \   000000CC   1FF1               ADC     R31, R17
   \   000000CE   8320               ST      Z, R18
    505                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000D0   2D0A               MOV     R16, R10
   \   000000D2   E010               LDI     R17, 0
   \   000000D4   E14A               LDI     R20, 26
   \   000000D6   E050               LDI     R21, 0
   \   000000D8   ........           CALL    ?S_EC_MUL_L02
   \   000000DC   01F8               MOVW    R31:R30, R17:R16
   \   000000DE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000E0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000E2   8502               LDD     R16, Z+10
   \   000000E4   8513               LDD     R17, Z+11
   \   000000E6   0194               MOVW    R19:R18, R9:R8
   \   000000E8   0F28               ADD     R18, R24
   \   000000EA   1F39               ADC     R19, R25
   \   000000EC   0F02               ADD     R16, R18
   \   000000EE   1F13               ADC     R17, R19
   \   000000F0   01F8               MOVW    R31:R30, R17:R16
   \   000000F2   8042               LDD     R4, Z+2
   \   000000F4   8053               LDD     R5, Z+3
   \   000000F6   8064               LDD     R6, Z+4
   \   000000F8   8075               LDD     R7, Z+5
   \   000000FA   ....               LDI     R30, LOW((TData + 731))
   \   000000FC   ....               LDI     R31, HIGH((TData + 731))
   \   000000FE   018D               MOVW    R17:R16, R27:R26
   \   00000100   0F00               LSL     R16
   \   00000102   1F11               ROL     R17
   \   00000104   0F00               LSL     R16
   \   00000106   1F11               ROL     R17
   \   00000108   0FE0               ADD     R30, R16
   \   0000010A   1FF1               ADC     R31, R17
   \   0000010C   2D0A               MOV     R16, R10
   \   0000010E   E010               LDI     R17, 0
   \   00000110   0F00               LSL     R16
   \   00000112   1F11               ROL     R17
   \   00000114   0F00               LSL     R16
   \   00000116   1F11               ROL     R17
   \   00000118   9120....           LDS     R18, PortPair
   \   0000011C   E030               LDI     R19, 0
   \   0000011E   0F02               ADD     R16, R18
   \   00000120   1F13               ADC     R17, R19
   \   00000122   E348               LDI     R20, 56
   \   00000124   E050               LDI     R21, 0
   \   00000126   ........           CALL    ?S_EC_MUL_L02
   \   0000012A   0FE0               ADD     R30, R16
   \   0000012C   1FF1               ADC     R31, R17
   \   0000012E   8240               ST      Z, R4
   \   00000130   8251               STD     Z+1, R5
   \   00000132   8262               STD     Z+2, R6
   \   00000134   8273               STD     Z+3, R7
    506                      }
    507                  }
   \                     ??ReceivePTOData_2:
   \   00000136   9606               ADIW    R25:R24, 6
   \   00000138   CF86               RJMP    ??ReceivePTOData_1
    508              }
    509              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   0000013A   ....               LDI     R16, LOW(UARTSEND)
   \   0000013C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000013E   ........           CALL    OS_Unuse
    510          }
   \   00000142   E0EE               LDI     R30, 14
   \   00000144   ........           JMP     ?EPILOGUE_B14_L09
    511          /*************************************************************************
    512          *
    513          *  Receive Wash Track and High Level data from AN_SGCNV
    514          *
    515          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    516          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    517          
    518              // Fixed packet length
    519              //short packlen;
    520          
    521              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    522          
    523              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000008   ....               LDI     R16, LOW(UARTSEND)
   \   0000000A   ....               LDI     R17, (UARTSEND) >> 8
   \   0000000C   ........           CALL    OS_Use
    524          
    525              for (short pnt = 0; pnt < 4; pnt++) {
   \   00000010   E020               LDI     R18, 0
   \   00000012   E030               LDI     R19, 0
   \                     ??ReceiveWHData_0:
   \   00000014   3024               CPI     R18, 4
   \   00000016   E000               LDI     R16, 0
   \   00000018   0730               CPC     R19, R16
   \   0000001A   F594               BRGE    ??ReceiveWHData_1
    526                  TData.RS4.WTrackCnt[(ch * 4) + PortPair][pnt] = ((unsigned short*)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track 
   \   0000001C   2F0A               MOV     R16, R26
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E14A               LDI     R20, 26
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002E   8502               LDD     R16, Z+10
   \   00000030   8513               LDD     R17, Z+11
   \   00000032   0F08               ADD     R16, R24
   \   00000034   1F19               ADC     R17, R25
   \   00000036   01A9               MOVW    R21:R20, R19:R18
   \   00000038   0F44               LSL     R20
   \   0000003A   1F55               ROL     R21
   \   0000003C   0F04               ADD     R16, R20
   \   0000003E   1F15               ADC     R17, R21
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   8160               LD      R22, Z
   \   00000044   8171               LDD     R23, Z+1
   \   00000046   ....               LDI     R30, LOW((TData + 1179))
   \   00000048   ....               LDI     R31, HIGH((TData + 1179))
   \   0000004A   0189               MOVW    R17:R16, R19:R18
   \   0000004C   0F00               LSL     R16
   \   0000004E   1F11               ROL     R17
   \   00000050   0FE0               ADD     R30, R16
   \   00000052   1FF1               ADC     R31, R17
   \   00000054   2F0A               MOV     R16, R26
   \   00000056   E010               LDI     R17, 0
   \   00000058   0F00               LSL     R16
   \   0000005A   1F11               ROL     R17
   \   0000005C   0F00               LSL     R16
   \   0000005E   1F11               ROL     R17
   \   00000060   9140....           LDS     R20, PortPair
   \   00000064   E050               LDI     R21, 0
   \   00000066   0F04               ADD     R16, R20
   \   00000068   1F15               ADC     R17, R21
   \   0000006A   E048               LDI     R20, 8
   \   0000006C   E050               LDI     R21, 0
   \   0000006E   ........           CALL    ?S_EC_MUL_L02
   \   00000072   0FE0               ADD     R30, R16
   \   00000074   1FF1               ADC     R31, R17
   \   00000076   8360               ST      Z, R22
   \   00000078   8371               STD     Z+1, R23
    527              }
   \   0000007A   5F2F               SUBI    R18, 255
   \   0000007C   4F3F               SBCI    R19, 255
   \   0000007E   CFCA               RJMP    ??ReceiveWHData_0
    528              TData.RS4.LevelSwitch[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer+8]; // Hgh levels in 9th byte
   \                     ??ReceiveWHData_1:
   \   00000080   2F0A               MOV     R16, R26
   \   00000082   E010               LDI     R17, 0
   \   00000084   E14A               LDI     R20, 26
   \   00000086   E050               LDI     R21, 0
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000092   8502               LDD     R16, Z+10
   \   00000094   8513               LDD     R17, Z+11
   \   00000096   0F08               ADD     R16, R24
   \   00000098   1F19               ADC     R17, R25
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   8540               LDD     R20, Z+8
   \   0000009E   2F0A               MOV     R16, R26
   \   000000A0   E010               LDI     R17, 0
   \   000000A2   0F00               LSL     R16
   \   000000A4   1F11               ROL     R17
   \   000000A6   0F00               LSL     R16
   \   000000A8   1F11               ROL     R17
   \   000000AA   9120....           LDS     R18, PortPair
   \   000000AE   E030               LDI     R19, 0
   \   000000B0   0F02               ADD     R16, R18
   \   000000B2   1F13               ADC     R17, R19
   \   000000B4   01F8               MOVW    R31:R30, R17:R16
   \   000000B6   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000000B8   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000BA   8340               ST      Z, R20
    529              TData.RS4.WTTime[(ch * 4) + PortPair] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer+9]);  // WashTrack time in 10th and 11th bytes
   \   000000BC   2F0A               MOV     R16, R26
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   E14A               LDI     R20, 26
   \   000000C2   E050               LDI     R21, 0
   \   000000C4   ........           CALL    ?S_EC_MUL_L02
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000CE   8502               LDD     R16, Z+10
   \   000000D0   8513               LDD     R17, Z+11
   \   000000D2   0F08               ADD     R16, R24
   \   000000D4   1F19               ADC     R17, R25
   \   000000D6   01F8               MOVW    R31:R30, R17:R16
   \   000000D8   8541               LDD     R20, Z+9
   \   000000DA   8552               LDD     R21, Z+10
   \   000000DC   2F0A               MOV     R16, R26
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   0F00               LSL     R16
   \   000000E2   1F11               ROL     R17
   \   000000E4   0F00               LSL     R16
   \   000000E6   1F11               ROL     R17
   \   000000E8   9120....           LDS     R18, PortPair
   \   000000EC   E030               LDI     R19, 0
   \   000000EE   0F02               ADD     R16, R18
   \   000000F0   1F13               ADC     R17, R19
   \   000000F2   0F00               LSL     R16
   \   000000F4   1F11               ROL     R17
   \   000000F6   01F8               MOVW    R31:R30, R17:R16
   \   000000F8   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000FA   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000FC   8340               ST      Z, R20
   \   000000FE   8351               STD     Z+1, R21
    530              
    531              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \   00000100   E004               LDI     R16, 4
   \   00000102   9FA0               MUL     R26, R16
   \   00000104   2D40               MOV     R20, R0
   \   00000106   9100....           LDS     R16, PortPair
   \   0000010A   0F40               ADD     R20, R16
   \   0000010C   E001               LDI     R16, 1
   \   0000010E   E010               LDI     R17, 0
   \   00000110   ........           CALL    ?S_SHL_L02
   \   00000114   9110....           LDS     R17, (TData + 1267)
   \   00000118   2B10               OR      R17, R16
   \   0000011A   9310....           STS     (TData + 1267), R17
    532              OS_Unuse(&UARTSEND);
   \   0000011E   ....               LDI     R16, LOW(UARTSEND)
   \   00000120   ....               LDI     R17, (UARTSEND) >> 8
   \   00000122   ........           CALL    OS_Unuse
    533          }
   \   00000126   E0E3               LDI     R30, 3
   \   00000128   ........           JMP     ?EPILOGUE_B3_L09
    534          
    535          
    536          /************************************************************************
    537          *
    538          *  Receive raw data for pressure, temp and other from AN_SGCNV
    539          *
    540          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    541          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
    542          
    543              char pnt, ADCh;
    544              short packlen;
    545          
    546              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000006   2D02               MOV     R16, R2
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8502               LDD     R16, Z+10
   \   0000001A   8513               LDD     R17, Z+11
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   5001               SUBI    R16, 1
   \   00000022   4010               SBCI    R17, 0
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8100               LD      R16, Z
   \   00000028   E010               LDI     R17, 0
   \   0000002A   01D8               MOVW    R27:R26, R17:R16
    547          
    548              if (packlen > 0) {
   \   0000002C   30A1               CPI     R26, 1
   \   0000002E   E000               LDI     R16, 0
   \   00000030   07B0               CPC     R27, R16
   \   00000032   F40C               BRGE    $+2+2
   \   00000034   C078               RJMP    ??ReceiveRData_0
    549                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000036   E060               LDI     R22, 0
   \                     ??ReceiveRData_1:
   \   00000038   E070               LDI     R23, 0
   \   0000003A   176A               CP      R22, R26
   \   0000003C   077B               CPC     R23, R27
   \   0000003E   F00C               BRLT    $+2+2
   \   00000040   C072               RJMP    ??ReceiveRData_0
    550                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   00000042   2D02               MOV     R16, R2
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14A               LDI     R20, 26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000054   8502               LDD     R16, Z+10
   \   00000056   8513               LDD     R17, Z+11
   \   00000058   E070               LDI     R23, 0
   \   0000005A   01A9               MOVW    R21:R20, R19:R18
   \   0000005C   0F46               ADD     R20, R22
   \   0000005E   1F57               ADC     R21, R23
   \   00000060   0F04               ADD     R16, R20
   \   00000062   1F15               ADC     R17, R21
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8100               LD      R16, Z
   \   00000068   2F80               MOV     R24, R16
    551                      if (ADCh < 14) {
   \   0000006A   308E               CPI     R24, 14
   \   0000006C   F008               BRCS    $+2+2
   \   0000006E   C059               RJMP    ??ReceiveRData_2
    552                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000070   2D02               MOV     R16, R2
   \   00000072   E010               LDI     R17, 0
   \   00000074   E14A               LDI     R20, 26
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000082   8502               LDD     R16, Z+10
   \   00000084   8513               LDD     R17, Z+11
   \   00000086   E070               LDI     R23, 0
   \   00000088   01A9               MOVW    R21:R20, R19:R18
   \   0000008A   0F46               ADD     R20, R22
   \   0000008C   1F57               ADC     R21, R23
   \   0000008E   0F04               ADD     R16, R20
   \   00000090   1F15               ADC     R17, R21
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   8171               LDD     R23, Z+1
   \   00000096   ....               LDI     R30, LOW((TData + 59))
   \   00000098   ....               LDI     R31, HIGH((TData + 59))
   \   0000009A   E090               LDI     R25, 0
   \   0000009C   0FE8               ADD     R30, R24
   \   0000009E   1FF9               ADC     R31, R25
   \   000000A0   2D02               MOV     R16, R2
   \   000000A2   E010               LDI     R17, 0
   \   000000A4   0F00               LSL     R16
   \   000000A6   1F11               ROL     R17
   \   000000A8   0F00               LSL     R16
   \   000000AA   1F11               ROL     R17
   \   000000AC   9140....           LDS     R20, PortPair
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   0F04               ADD     R16, R20
   \   000000B4   1F15               ADC     R17, R21
   \   000000B6   E04E               LDI     R20, 14
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   ........           CALL    ?S_EC_MUL_L02
   \   000000BE   0FE0               ADD     R30, R16
   \   000000C0   1FF1               ADC     R31, R17
   \   000000C2   8370               ST      Z, R23
    553                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000C4   2D02               MOV     R16, R2
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E14A               LDI     R20, 26
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D6   8502               LDD     R16, Z+10
   \   000000D8   8513               LDD     R17, Z+11
   \   000000DA   E070               LDI     R23, 0
   \   000000DC   01A9               MOVW    R21:R20, R19:R18
   \   000000DE   0F46               ADD     R20, R22
   \   000000E0   1F57               ADC     R21, R23
   \   000000E2   0F04               ADD     R16, R20
   \   000000E4   1F15               ADC     R17, R21
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   8042               LDD     R4, Z+2
   \   000000EA   8053               LDD     R5, Z+3
   \   000000EC   ....               LDI     R30, LOW((TData + 283))
   \   000000EE   ....               LDI     R31, HIGH((TData + 283))
   \   000000F0   2F08               MOV     R16, R24
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   0F00               LSL     R16
   \   000000F6   1F11               ROL     R17
   \   000000F8   0FE0               ADD     R30, R16
   \   000000FA   1FF1               ADC     R31, R17
   \   000000FC   2D02               MOV     R16, R2
   \   000000FE   E010               LDI     R17, 0
   \   00000100   0F00               LSL     R16
   \   00000102   1F11               ROL     R17
   \   00000104   0F00               LSL     R16
   \   00000106   1F11               ROL     R17
   \   00000108   9140....           LDS     R20, PortPair
   \   0000010C   E050               LDI     R21, 0
   \   0000010E   0F04               ADD     R16, R20
   \   00000110   1F15               ADC     R17, R21
   \   00000112   E14C               LDI     R20, 28
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   0FE0               ADD     R30, R16
   \   0000011C   1FF1               ADC     R31, R17
   \   0000011E   8240               ST      Z, R4
   \   00000120   8251               STD     Z+1, R5
    554                      }
    555                  }
   \                     ??ReceiveRData_2:
   \   00000122   5F6C               SUBI    R22, 252
   \   00000124   CF89               RJMP    ??ReceiveRData_1
    556              }
    557          }
   \                     ??ReceiveRData_0:
   \   00000126   E0E6               LDI     R30, 6
   \   00000128   ........           JMP     ?EPILOGUE_B6_L09
    558          
    559          /*************************************************************************
    560          *
    561          *  Receive cal data  from AN_SGCNV
    562          *
    563          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    564          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
    565          
    566              char pnt, ADCh;
    567              short packlen;
    568          
    569              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000006   2D02               MOV     R16, R2
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8502               LDD     R16, Z+10
   \   0000001A   8513               LDD     R17, Z+11
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   5001               SUBI    R16, 1
   \   00000022   4010               SBCI    R17, 0
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8100               LD      R16, Z
   \   00000028   E010               LDI     R17, 0
   \   0000002A   01D8               MOVW    R27:R26, R17:R16
    570          
    571              if (packlen > 0) {
   \   0000002C   30A1               CPI     R26, 1
   \   0000002E   E000               LDI     R16, 0
   \   00000030   07B0               CPC     R27, R16
   \   00000032   F40C               BRGE    $+2+2
   \   00000034   C078               RJMP    ??ReceiveCData_0
    572                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000036   E060               LDI     R22, 0
   \                     ??ReceiveCData_1:
   \   00000038   E070               LDI     R23, 0
   \   0000003A   176A               CP      R22, R26
   \   0000003C   077B               CPC     R23, R27
   \   0000003E   F00C               BRLT    $+2+2
   \   00000040   C072               RJMP    ??ReceiveCData_0
    573                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \   00000042   2D02               MOV     R16, R2
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14A               LDI     R20, 26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000054   8502               LDD     R16, Z+10
   \   00000056   8513               LDD     R17, Z+11
   \   00000058   E070               LDI     R23, 0
   \   0000005A   01A9               MOVW    R21:R20, R19:R18
   \   0000005C   0F46               ADD     R20, R22
   \   0000005E   1F57               ADC     R21, R23
   \   00000060   0F04               ADD     R16, R20
   \   00000062   1F15               ADC     R17, R21
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8100               LD      R16, Z
   \   00000068   2F80               MOV     R24, R16
    574                      if (ADCh < 14) {
   \   0000006A   308E               CPI     R24, 14
   \   0000006C   F008               BRCS    $+2+2
   \   0000006E   C059               RJMP    ??ReceiveCData_2
    575                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000070   2D02               MOV     R16, R2
   \   00000072   E010               LDI     R17, 0
   \   00000074   E14A               LDI     R20, 26
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000082   8502               LDD     R16, Z+10
   \   00000084   8513               LDD     R17, Z+11
   \   00000086   E070               LDI     R23, 0
   \   00000088   01A9               MOVW    R21:R20, R19:R18
   \   0000008A   0F46               ADD     R20, R22
   \   0000008C   1F57               ADC     R21, R23
   \   0000008E   0F04               ADD     R16, R20
   \   00000090   1F15               ADC     R17, R21
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   8171               LDD     R23, Z+1
   \   00000096   ....               LDI     R30, LOW((TData + 59))
   \   00000098   ....               LDI     R31, HIGH((TData + 59))
   \   0000009A   E090               LDI     R25, 0
   \   0000009C   0FE8               ADD     R30, R24
   \   0000009E   1FF9               ADC     R31, R25
   \   000000A0   2D02               MOV     R16, R2
   \   000000A2   E010               LDI     R17, 0
   \   000000A4   0F00               LSL     R16
   \   000000A6   1F11               ROL     R17
   \   000000A8   0F00               LSL     R16
   \   000000AA   1F11               ROL     R17
   \   000000AC   9140....           LDS     R20, PortPair
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   0F04               ADD     R16, R20
   \   000000B4   1F15               ADC     R17, R21
   \   000000B6   E04E               LDI     R20, 14
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   ........           CALL    ?S_EC_MUL_L02
   \   000000BE   0FE0               ADD     R30, R16
   \   000000C0   1FF1               ADC     R31, R17
   \   000000C2   8370               ST      Z, R23
    576                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   000000C4   2D02               MOV     R16, R2
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   E14A               LDI     R20, 26
   \   000000CA   E050               LDI     R21, 0
   \   000000CC   ........           CALL    ?S_EC_MUL_L02
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D6   8502               LDD     R16, Z+10
   \   000000D8   8513               LDD     R17, Z+11
   \   000000DA   E070               LDI     R23, 0
   \   000000DC   01A9               MOVW    R21:R20, R19:R18
   \   000000DE   0F46               ADD     R20, R22
   \   000000E0   1F57               ADC     R21, R23
   \   000000E2   0F04               ADD     R16, R20
   \   000000E4   1F15               ADC     R17, R21
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   8042               LDD     R4, Z+2
   \   000000EA   8053               LDD     R5, Z+3
   \   000000EC   ....               LDI     R30, LOW((TData + 507))
   \   000000EE   ....               LDI     R31, HIGH((TData + 507))
   \   000000F0   2F08               MOV     R16, R24
   \   000000F2   E010               LDI     R17, 0
   \   000000F4   0F00               LSL     R16
   \   000000F6   1F11               ROL     R17
   \   000000F8   0FE0               ADD     R30, R16
   \   000000FA   1FF1               ADC     R31, R17
   \   000000FC   2D02               MOV     R16, R2
   \   000000FE   E010               LDI     R17, 0
   \   00000100   0F00               LSL     R16
   \   00000102   1F11               ROL     R17
   \   00000104   0F00               LSL     R16
   \   00000106   1F11               ROL     R17
   \   00000108   9140....           LDS     R20, PortPair
   \   0000010C   E050               LDI     R21, 0
   \   0000010E   0F04               ADD     R16, R20
   \   00000110   1F15               ADC     R17, R21
   \   00000112   E14C               LDI     R20, 28
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   0FE0               ADD     R30, R16
   \   0000011C   1FF1               ADC     R31, R17
   \   0000011E   8240               ST      Z, R4
   \   00000120   8251               STD     Z+1, R5
    577                      }
    578                  }
   \                     ??ReceiveCData_2:
   \   00000122   5F6C               SUBI    R22, 252
   \   00000124   CF89               RJMP    ??ReceiveCData_1
    579              }
    580          }
   \                     ??ReceiveCData_0:
   \   00000126   E0E6               LDI     R30, 6
   \   00000128   ........           JMP     ?EPILOGUE_B6_L09
    581          
    582          /*************************************************************************
    583          *
    584          *  Receive card status  from AN_SGCNV
    585          *
    586          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    587          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002   2F60               MOV     R22, R16
    588          
    589              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
   \   00000004   2F06               MOV     R16, R22
   \   00000006   E010               LDI     R17, 0
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   ........           CALL    ?S_EC_MUL_L02
   \   00000010   01D8               MOVW    R27:R26, R17:R16
   \   00000012   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   00000014   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   00000016   91ED               LD      R30, X+
   \   00000018   91FC               LD      R31, X
   \   0000001A   9711               SBIW    R27:R26, 1
   \   0000001C   0FE2               ADD     R30, R18
   \   0000001E   1FF3               ADC     R31, R19
   \   00000020   8170               LD      R23, Z
   \   00000022   2F06               MOV     R16, R22
   \   00000024   E010               LDI     R17, 0
   \   00000026   0F00               LSL     R16
   \   00000028   1F11               ROL     R17
   \   0000002A   0F00               LSL     R16
   \   0000002C   1F11               ROL     R17
   \   0000002E   9140....           LDS     R20, PortPair
   \   00000032   E050               LDI     R21, 0
   \   00000034   0F04               ADD     R16, R20
   \   00000036   1F15               ADC     R17, R21
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003E   A773               STD     Z+43, R23
    590              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000040   2F06               MOV     R16, R22
   \   00000042   E010               LDI     R17, 0
   \   00000044   E14A               LDI     R20, 26
   \   00000046   E050               LDI     R21, 0
   \   00000048   ........           CALL    ?S_EC_MUL_L02
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000052   8502               LDD     R16, Z+10
   \   00000054   8513               LDD     R17, Z+11
   \   00000056   0F02               ADD     R16, R18
   \   00000058   1F13               ADC     R17, R19
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   8171               LDD     R23, Z+1
   \   0000005E   2F06               MOV     R16, R22
   \   00000060   E010               LDI     R17, 0
   \   00000062   0F00               LSL     R16
   \   00000064   1F11               ROL     R17
   \   00000066   0F00               LSL     R16
   \   00000068   1F11               ROL     R17
   \   0000006A   9140....           LDS     R20, PortPair
   \   0000006E   E050               LDI     R21, 0
   \   00000070   0F04               ADD     R16, R20
   \   00000072   1F15               ADC     R17, R21
   \   00000074   01F8               MOVW    R31:R30, R17:R16
   \   00000076   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000078   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007A   AB73               STD     Z+51, R23
    591          }
   \   0000007C   01D1               MOVW    R27:R26, R3:R2
   \   0000007E   9508               RET
    592          
    593          /*************************************************************************
    594          *
    595          *  Receive config data from AN_SGCNV
    596          *
    597          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    598          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   011C               MOVW    R3:R2, R25:R24
   \   00000002   2F60               MOV     R22, R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
    599          
    600              char i, ADCh;
    601          
    602              for (i = 0; i < 14; i++) {
   \   00000006   E030               LDI     R19, 0
   \                     ??ReceiveConfigData_0:
   \   00000008   303E               CPI     R19, 14
   \   0000000A   F008               BRCS    $+2+2
   \   0000000C   C065               RJMP    ??ReceiveConfigData_1
    603                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \   0000000E   2F06               MOV     R16, R22
   \   00000010   E010               LDI     R17, 0
   \   00000012   E14A               LDI     R20, 26
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?S_EC_MUL_L02
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000020   8502               LDD     R16, Z+10
   \   00000022   8513               LDD     R17, Z+11
   \   00000024   0F08               ADD     R16, R24
   \   00000026   1F19               ADC     R17, R25
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   8100               LD      R16, Z
   \   0000002C   2F20               MOV     R18, R16
   \   0000002E   9601               ADIW    R25:R24, 1
    604                  if (ADCh < 14) {
   \   00000030   302E               CPI     R18, 14
   \   00000032   F008               BRCS    $+2+2
   \   00000034   C04E               RJMP    ??ReceiveConfigData_2
    605                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000036   2F06               MOV     R16, R22
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14A               LDI     R20, 26
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   8502               LDD     R16, Z+10
   \   0000004A   8513               LDD     R17, Z+11
   \   0000004C   0F08               ADD     R16, R24
   \   0000004E   1F19               ADC     R17, R25
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   8170               LD      R23, Z
   \   00000054   ....               LDI     R30, LOW((TData + 59))
   \   00000056   ....               LDI     R31, HIGH((TData + 59))
   \   00000058   2F02               MOV     R16, R18
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   0FE0               ADD     R30, R16
   \   0000005E   1FF1               ADC     R31, R17
   \   00000060   2F06               MOV     R16, R22
   \   00000062   E010               LDI     R17, 0
   \   00000064   0F00               LSL     R16
   \   00000066   1F11               ROL     R17
   \   00000068   0F00               LSL     R16
   \   0000006A   1F11               ROL     R17
   \   0000006C   9140....           LDS     R20, PortPair
   \   00000070   E050               LDI     R21, 0
   \   00000072   0F04               ADD     R16, R20
   \   00000074   1F15               ADC     R17, R21
   \   00000076   E04E               LDI     R20, 14
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   0FE0               ADD     R30, R16
   \   00000080   1FF1               ADC     R31, R17
   \   00000082   8370               ST      Z, R23
    606                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000084   2F06               MOV     R16, R22
   \   00000086   E010               LDI     R17, 0
   \   00000088   E14A               LDI     R20, 26
   \   0000008A   E050               LDI     R21, 0
   \   0000008C   ........           CALL    ?S_EC_MUL_L02
   \   00000090   01F8               MOVW    R31:R30, R17:R16
   \   00000092   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000094   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000096   8502               LDD     R16, Z+10
   \   00000098   8513               LDD     R17, Z+11
   \   0000009A   0F08               ADD     R16, R24
   \   0000009C   1F19               ADC     R17, R25
   \   0000009E   01F8               MOVW    R31:R30, R17:R16
   \   000000A0   8171               LDD     R23, Z+1
   \   000000A2   ....               LDI     R30, LOW((TData + 171))
   \   000000A4   ....               LDI     R31, HIGH((TData + 171))
   \   000000A6   2F02               MOV     R16, R18
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   0FE0               ADD     R30, R16
   \   000000AC   1FF1               ADC     R31, R17
   \   000000AE   2F06               MOV     R16, R22
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   0F00               LSL     R16
   \   000000B4   1F11               ROL     R17
   \   000000B6   0F00               LSL     R16
   \   000000B8   1F11               ROL     R17
   \   000000BA   9140....           LDS     R20, PortPair
   \   000000BE   E050               LDI     R21, 0
   \   000000C0   0F04               ADD     R16, R20
   \   000000C2   1F15               ADC     R17, R21
   \   000000C4   E04E               LDI     R20, 14
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   0FE0               ADD     R30, R16
   \   000000CE   1FF1               ADC     R31, R17
   \   000000D0   8370               ST      Z, R23
    607                  }
    608                  pointer += 2;
   \                     ??ReceiveConfigData_2:
   \   000000D2   9602               ADIW    R25:R24, 2
    609              }
   \   000000D4   9533               INC     R19
   \   000000D6   CF98               RJMP    ??ReceiveConfigData_0
    610          }
   \                     ??ReceiveConfigData_1:
   \   000000D8   01C1               MOVW    R25:R24, R3:R2
   \   000000DA   9508               RET
    611          
    612          /*************************************************************************
    613          *
    614          *  Receive eeprom data from AN_SGCNV
    615          *
    616          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    617          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F60               MOV     R22, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    618          
    619              short i;
    620          
    621              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000008   2F06               MOV     R16, R22
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E342               LDI     R20, 50
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(TData + 1428) & 0xFFFF))
   \   00000018   ....               SBCI    R31, HIGH((-(TData + 1428) & 0xFFFF))
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   8300               ST      Z, R16
    622              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   0000001E   E004               LDI     R16, 4
   \   00000020   9F60               MUL     R22, R16
   \   00000022   2D20               MOV     R18, R0
   \   00000024   9100....           LDS     R16, PortPair
   \   00000028   0F20               ADD     R18, R16
   \   0000002A   2F06               MOV     R16, R22
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E342               LDI     R20, 50
   \   00000030   E050               LDI     R21, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(TData + 1429) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(TData + 1429) & 0xFFFF))
   \   0000003C   8320               ST      Z, R18
    623              for (i = 2; i < (41 + 2); i++) {
   \   0000003E   E0A2               LDI     R26, 2
   \   00000040   E0B0               LDI     R27, 0
   \                     ??ReceiveCardEEPROMData_0:
   \   00000042   32AB               CPI     R26, 43
   \   00000044   E000               LDI     R16, 0
   \   00000046   07B0               CPC     R27, R16
   \   00000048   F4FC               BRGE    ??ReceiveCardEEPROMData_1
    624                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \   0000004A   2F06               MOV     R16, R22
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   E14A               LDI     R20, 26
   \   00000050   E050               LDI     R21, 0
   \   00000052   ........           CALL    ?S_EC_MUL_L02
   \   00000056   01F8               MOVW    R31:R30, R17:R16
   \   00000058   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000005C   8502               LDD     R16, Z+10
   \   0000005E   8513               LDD     R17, Z+11
   \   00000060   0F08               ADD     R16, R24
   \   00000062   1F19               ADC     R17, R25
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8120               LD      R18, Z
   \   00000068   ....               LDI     R30, LOW((TData + 1428))
   \   0000006A   ....               LDI     R31, HIGH((TData + 1428))
   \   0000006C   0FEA               ADD     R30, R26
   \   0000006E   1FFB               ADC     R31, R27
   \   00000070   2F06               MOV     R16, R22
   \   00000072   E010               LDI     R17, 0
   \   00000074   E342               LDI     R20, 50
   \   00000076   E050               LDI     R21, 0
   \   00000078   ........           CALL    ?S_EC_MUL_L02
   \   0000007C   0FE0               ADD     R30, R16
   \   0000007E   1FF1               ADC     R31, R17
   \   00000080   8320               ST      Z, R18
   \   00000082   9601               ADIW    R25:R24, 1
    625              }
   \   00000084   9611               ADIW    R27:R26, 1
   \   00000086   CFDD               RJMP    ??ReceiveCardEEPROMData_0
    626          }
   \                     ??ReceiveCardEEPROMData_1:
   \   00000088   E0E4               LDI     R30, 4
   \   0000008A   ........           JMP     ?EPILOGUE_B4_L09
    627          
    628          /*************************************************************************
    629          *
    630          * Build send packet header for AN-SGCNV
    631          *
    632          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    633          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   2F20               MOV     R18, R16
    634          
    635              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   E000               LDI     R16, 0
   \   00000016   8704               STD     Z+12, R16
   \   00000018   E000               LDI     R16, 0
   \   0000001A   8705               STD     Z+13, R16
    636              UART16552[ch].RxLast = 0;
   \   0000001C   2F02               MOV     R16, R18
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E14A               LDI     R20, 26
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002E   E000               LDI     R16, 0
   \   00000030   8706               STD     Z+14, R16
   \   00000032   E000               LDI     R16, 0
   \   00000034   8707               STD     Z+15, R16
    637              UART16552[ch].TxLast = 0;
   \   00000036   2F02               MOV     R16, R18
   \   00000038   E010               LDI     R17, 0
   \   0000003A   E14A               LDI     R20, 26
   \   0000003C   E050               LDI     R21, 0
   \   0000003E   ........           CALL    ?S_EC_MUL_L02
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8304               STD     Z+4, R16
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   8305               STD     Z+5, R16
    638          
    639              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   00000050   2F02               MOV     R16, R18
   \   00000052   E010               LDI     R17, 0
   \   00000054   E14A               LDI     R20, 26
   \   00000056   E050               LDI     R21, 0
   \   00000058   ........           CALL    ?S_EC_MUL_L02
   \   0000005C   01F8               MOVW    R31:R30, R17:R16
   \   0000005E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000060   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000062   8100               LD      R16, Z
   \   00000064   8111               LDD     R17, Z+1
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   E002               LDI     R16, 2
   \   0000006A   8300               ST      Z, R16
    640              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8100               LD      R16, Z
   \   00000080   8111               LDD     R17, Z+1
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   E002               LDI     R16, 2
   \   00000086   8301               STD     Z+1, R16
    641              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   00000088   2F02               MOV     R16, R18
   \   0000008A   E010               LDI     R17, 0
   \   0000008C   E14A               LDI     R20, 26
   \   0000008E   E050               LDI     R21, 0
   \   00000090   ........           CALL    ?S_EC_MUL_L02
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000098   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009A   8100               LD      R16, Z
   \   0000009C   8111               LDD     R17, Z+1
   \   0000009E   01F8               MOVW    R31:R30, R17:R16
   \   000000A0   E000               LDI     R16, 0
   \   000000A2   8302               STD     Z+2, R16
    642              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   000000A4   2F02               MOV     R16, R18
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   E14A               LDI     R20, 26
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   ........           CALL    ?S_EC_MUL_L02
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B6   8100               LD      R16, Z
   \   000000B8   8111               LDD     R17, Z+1
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   EF0D               LDI     R16, 253
   \   000000BE   8303               STD     Z+3, R16
    643              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8100               LD      R16, Z
   \   000000D4   8111               LDD     R17, Z+1
   \   000000D6   01F8               MOVW    R31:R30, R17:R16
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   8304               STD     Z+4, R16
    644              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   000000DC   2F02               MOV     R16, R18
   \   000000DE   E010               LDI     R17, 0
   \   000000E0   E14A               LDI     R20, 26
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   ........           CALL    ?S_EC_MUL_L02
   \   000000E8   01F8               MOVW    R31:R30, R17:R16
   \   000000EA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000EC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000EE   8100               LD      R16, Z
   \   000000F0   8111               LDD     R17, Z+1
   \   000000F2   01F8               MOVW    R31:R30, R17:R16
   \   000000F4   E000               LDI     R16, 0
   \   000000F6   8305               STD     Z+5, R16
    645          }
   \   000000F8   9508               RET
    646          
    647          /*************************************************************************
    648          *
    649          * Build  packet tail
    650          *
    651          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    652          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    653          
    654              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000006   2F08               MOV     R16, R24
   \   00000008   ....               RCALL   Uart_BuildHeader16552
    655          
    656              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   0000000A   2F08               MOV     R16, R24
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   8120               LD      R18, Z
   \   0000001E   8131               LDD     R19, Z+1
   \   00000020   2F08               MOV     R16, R24
   \   00000022   E010               LDI     R17, 0
   \   00000024   E14A               LDI     R20, 26
   \   00000026   E050               LDI     R21, 0
   \   00000028   ........           CALL    ?S_EC_MUL_L02
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000032   8102               LDD     R16, Z+2
   \   00000034   8113               LDD     R17, Z+3
   \   00000036   0F20               ADD     R18, R16
   \   00000038   1F31               ADC     R19, R17
   \   0000003A   01F9               MOVW    R31:R30, R19:R18
   \   0000003C   E001               LDI     R16, 1
   \   0000003E   8300               ST      Z, R16
   \   00000040   2F08               MOV     R16, R24
   \   00000042   E010               LDI     R17, 0
   \   00000044   E14A               LDI     R20, 26
   \   00000046   E050               LDI     R21, 0
   \   00000048   ........           CALL    ?S_EC_MUL_L02
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000052   8102               LDD     R16, Z+2
   \   00000054   8113               LDD     R17, Z+3
   \   00000056   5F0F               SUBI    R16, 255
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   8302               STD     Z+2, R16
   \   0000005C   8313               STD     Z+3, R17
    657              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   0000005E   2F08               MOV     R16, R24
   \   00000060   E010               LDI     R17, 0
   \   00000062   E14A               LDI     R20, 26
   \   00000064   E050               LDI     R21, 0
   \   00000066   ........           CALL    ?S_EC_MUL_L02
   \   0000006A   01F8               MOVW    R31:R30, R17:R16
   \   0000006C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000070   8120               LD      R18, Z
   \   00000072   8131               LDD     R19, Z+1
   \   00000074   2F08               MOV     R16, R24
   \   00000076   E010               LDI     R17, 0
   \   00000078   E14A               LDI     R20, 26
   \   0000007A   E050               LDI     R21, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000084   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000086   8102               LDD     R16, Z+2
   \   00000088   8113               LDD     R17, Z+3
   \   0000008A   0F20               ADD     R18, R16
   \   0000008C   1F31               ADC     R19, R17
   \   0000008E   01F9               MOVW    R31:R30, R19:R18
   \   00000090   E000               LDI     R16, 0
   \   00000092   8300               ST      Z, R16
   \   00000094   2F08               MOV     R16, R24
   \   00000096   E010               LDI     R17, 0
   \   00000098   E14A               LDI     R20, 26
   \   0000009A   E050               LDI     R21, 0
   \   0000009C   ........           CALL    ?S_EC_MUL_L02
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A6   8102               LDD     R16, Z+2
   \   000000A8   8113               LDD     R17, Z+3
   \   000000AA   5F0F               SUBI    R16, 255
   \   000000AC   4F1F               SBCI    R17, 255
   \   000000AE   8302               STD     Z+2, R16
   \   000000B0   8313               STD     Z+3, R17
    658          
    659              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   000000B2   2F08               MOV     R16, R24
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   E14A               LDI     R20, 26
   \   000000B8   E050               LDI     R21, 0
   \   000000BA   ........           CALL    ?S_EC_MUL_L02
   \   000000BE   01F8               MOVW    R31:R30, R17:R16
   \   000000C0   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000C2   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000C4   8122               LDD     R18, Z+2
   \   000000C6   8133               LDD     R19, Z+3
   \   000000C8   2F23               MOV     R18, R19
   \   000000CA   E030               LDI     R19, 0
   \   000000CC   2F08               MOV     R16, R24
   \   000000CE   E010               LDI     R17, 0
   \   000000D0   E14A               LDI     R20, 26
   \   000000D2   E050               LDI     R21, 0
   \   000000D4   ........           CALL    ?S_EC_MUL_L02
   \   000000D8   01F8               MOVW    R31:R30, R17:R16
   \   000000DA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000DC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000DE   8100               LD      R16, Z
   \   000000E0   8111               LDD     R17, Z+1
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   8324               STD     Z+4, R18
    660              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   000000E6   2F08               MOV     R16, R24
   \   000000E8   E010               LDI     R17, 0
   \   000000EA   E14A               LDI     R20, 26
   \   000000EC   E050               LDI     R21, 0
   \   000000EE   ........           CALL    ?S_EC_MUL_L02
   \   000000F2   01F8               MOVW    R31:R30, R17:R16
   \   000000F4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F8   8122               LDD     R18, Z+2
   \   000000FA   8133               LDD     R19, Z+3
   \   000000FC   2F08               MOV     R16, R24
   \   000000FE   E010               LDI     R17, 0
   \   00000100   E14A               LDI     R20, 26
   \   00000102   E050               LDI     R21, 0
   \   00000104   ........           CALL    ?S_EC_MUL_L02
   \   00000108   01F8               MOVW    R31:R30, R17:R16
   \   0000010A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000010C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000010E   8100               LD      R16, Z
   \   00000110   8111               LDD     R17, Z+1
   \   00000112   01F8               MOVW    R31:R30, R17:R16
   \   00000114   8325               STD     Z+5, R18
    661          
    662          
    663              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   00000116   2F08               MOV     R16, R24
   \   00000118   E010               LDI     R17, 0
   \   0000011A   E14A               LDI     R20, 26
   \   0000011C   E050               LDI     R21, 0
   \   0000011E   ........           CALL    ?S_EC_MUL_L02
   \   00000122   01F8               MOVW    R31:R30, R17:R16
   \   00000124   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000126   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000128   8122               LDD     R18, Z+2
   \   0000012A   8133               LDD     R19, Z+3
   \   0000012C   2F08               MOV     R16, R24
   \   0000012E   ....               RCALL   CalcDSTxChecksumUART16552
   \   00000130   2F60               MOV     R22, R16
   \   00000132   2F08               MOV     R16, R24
   \   00000134   E010               LDI     R17, 0
   \   00000136   E14A               LDI     R20, 26
   \   00000138   E050               LDI     R21, 0
   \   0000013A   ........           CALL    ?S_EC_MUL_L02
   \   0000013E   01F8               MOVW    R31:R30, R17:R16
   \   00000140   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000142   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000144   8120               LD      R18, Z
   \   00000146   8131               LDD     R19, Z+1
   \   00000148   2F08               MOV     R16, R24
   \   0000014A   E010               LDI     R17, 0
   \   0000014C   E14A               LDI     R20, 26
   \   0000014E   E050               LDI     R21, 0
   \   00000150   ........           CALL    ?S_EC_MUL_L02
   \   00000154   01F8               MOVW    R31:R30, R17:R16
   \   00000156   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000158   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000015A   8102               LDD     R16, Z+2
   \   0000015C   8113               LDD     R17, Z+3
   \   0000015E   0F20               ADD     R18, R16
   \   00000160   1F31               ADC     R19, R17
   \   00000162   01F9               MOVW    R31:R30, R19:R18
   \   00000164   8360               ST      Z, R22
    664              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   00000166   2F08               MOV     R16, R24
   \   00000168   E010               LDI     R17, 0
   \   0000016A   E14A               LDI     R20, 26
   \   0000016C   E050               LDI     R21, 0
   \   0000016E   ........           CALL    ?S_EC_MUL_L02
   \   00000172   01F8               MOVW    R31:R30, R17:R16
   \   00000174   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000176   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000178   8102               LDD     R16, Z+2
   \   0000017A   8113               LDD     R17, Z+3
   \   0000017C   5F0F               SUBI    R16, 255
   \   0000017E   4F1F               SBCI    R17, 255
   \   00000180   8302               STD     Z+2, R16
   \   00000182   8313               STD     Z+3, R17
    665                                                                           // to ANSI standard !!!!
    666          
    667              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   00000184   2F08               MOV     R16, R24
   \   00000186   E010               LDI     R17, 0
   \   00000188   E14A               LDI     R20, 26
   \   0000018A   E050               LDI     R21, 0
   \   0000018C   ........           CALL    ?S_EC_MUL_L02
   \   00000190   01F8               MOVW    R31:R30, R17:R16
   \   00000192   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000194   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000196   8120               LD      R18, Z
   \   00000198   8131               LDD     R19, Z+1
   \   0000019A   2F08               MOV     R16, R24
   \   0000019C   E010               LDI     R17, 0
   \   0000019E   E14A               LDI     R20, 26
   \   000001A0   E050               LDI     R21, 0
   \   000001A2   ........           CALL    ?S_EC_MUL_L02
   \   000001A6   01F8               MOVW    R31:R30, R17:R16
   \   000001A8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001AA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001AC   8102               LDD     R16, Z+2
   \   000001AE   8113               LDD     R17, Z+3
   \   000001B0   0F20               ADD     R18, R16
   \   000001B2   1F31               ADC     R19, R17
   \   000001B4   01F9               MOVW    R31:R30, R19:R18
   \   000001B6   E003               LDI     R16, 3
   \   000001B8   8300               ST      Z, R16
   \   000001BA   2F08               MOV     R16, R24
   \   000001BC   E010               LDI     R17, 0
   \   000001BE   E14A               LDI     R20, 26
   \   000001C0   E050               LDI     R21, 0
   \   000001C2   ........           CALL    ?S_EC_MUL_L02
   \   000001C6   01F8               MOVW    R31:R30, R17:R16
   \   000001C8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001CA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001CC   8102               LDD     R16, Z+2
   \   000001CE   8113               LDD     R17, Z+3
   \   000001D0   5F0F               SUBI    R16, 255
   \   000001D2   4F1F               SBCI    R17, 255
   \   000001D4   8302               STD     Z+2, R16
   \   000001D6   8313               STD     Z+3, R17
    668              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   000001D8   2F08               MOV     R16, R24
   \   000001DA   E010               LDI     R17, 0
   \   000001DC   E14A               LDI     R20, 26
   \   000001DE   E050               LDI     R21, 0
   \   000001E0   ........           CALL    ?S_EC_MUL_L02
   \   000001E4   01F8               MOVW    R31:R30, R17:R16
   \   000001E6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001E8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001EA   8120               LD      R18, Z
   \   000001EC   8131               LDD     R19, Z+1
   \   000001EE   2F08               MOV     R16, R24
   \   000001F0   E010               LDI     R17, 0
   \   000001F2   E14A               LDI     R20, 26
   \   000001F4   E050               LDI     R21, 0
   \   000001F6   ........           CALL    ?S_EC_MUL_L02
   \   000001FA   01F8               MOVW    R31:R30, R17:R16
   \   000001FC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001FE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000200   8102               LDD     R16, Z+2
   \   00000202   8113               LDD     R17, Z+3
   \   00000204   0F20               ADD     R18, R16
   \   00000206   1F31               ADC     R19, R17
   \   00000208   01F9               MOVW    R31:R30, R19:R18
   \   0000020A   E000               LDI     R16, 0
   \   0000020C   8300               ST      Z, R16
   \   0000020E   2F08               MOV     R16, R24
   \   00000210   E010               LDI     R17, 0
   \   00000212   E14A               LDI     R20, 26
   \   00000214   E050               LDI     R21, 0
   \   00000216   ........           CALL    ?S_EC_MUL_L02
   \   0000021A   01F8               MOVW    R31:R30, R17:R16
   \   0000021C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000021E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000220   8102               LDD     R16, Z+2
   \   00000222   8113               LDD     R17, Z+3
   \   00000224   5F0F               SUBI    R16, 255
   \   00000226   4F1F               SBCI    R17, 255
   \   00000228   8302               STD     Z+2, R16
   \   0000022A   8313               STD     Z+3, R17
    669          
    670              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   0000022C   2F08               MOV     R16, R24
   \   0000022E   E010               LDI     R17, 0
   \   00000230   E14A               LDI     R20, 26
   \   00000232   E050               LDI     R21, 0
   \   00000234   ........           CALL    ?S_EC_MUL_L02
   \   00000238   01F8               MOVW    R31:R30, R17:R16
   \   0000023A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000023C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000023E   81A2               LDD     R26, Z+2
   \   00000240   81B3               LDD     R27, Z+3
   \   00000242   9711               SBIW    R27:R26, 1
   \   00000244   2F08               MOV     R16, R24
   \   00000246   E010               LDI     R17, 0
   \   00000248   E14A               LDI     R20, 26
   \   0000024A   E050               LDI     R21, 0
   \   0000024C   ........           CALL    ?S_EC_MUL_L02
   \   00000250   01F8               MOVW    R31:R30, R17:R16
   \   00000252   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000254   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000256   83A6               STD     Z+6, R26
   \   00000258   83B7               STD     Z+7, R27
    671              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   0000025A   2F08               MOV     R16, R24
   \   0000025C   E010               LDI     R17, 0
   \   0000025E   E14A               LDI     R20, 26
   \   00000260   E050               LDI     R21, 0
   \   00000262   ........           CALL    ?S_EC_MUL_L02
   \   00000266   01F8               MOVW    R31:R30, R17:R16
   \   00000268   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000026A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000026C   E001               LDI     R16, 1
   \   0000026E   E010               LDI     R17, 0
   \   00000270   8304               STD     Z+4, R16
   \   00000272   8315               STD     Z+5, R17
    672              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   00000274   2F08               MOV     R16, R24
   \   00000276   ....               RCALL   GoToSyncUART16552
    673              if (ch == 0) {                                           // Turn on TXE for channel
   \   00000278   2388               TST     R24
   \   0000027A   F4E9               BRNE    ??Uart_BuildTail16552_0
    674                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   0000027C   ....               LDI     R16, LOW(TimerUART0)
   \   0000027E   ....               LDI     R17, (TimerUART0) >> 8
   \   00000280   ........           CALL    OS_RetriggerTimer
    675                  U0_MCR |= MCR_RTS;                                    // set RTS on
   \   00000284   E0EC               LDI     R30, LOW(4364)
   \   00000286   E1F1               LDI     R31, (4364) >> 8
   \   00000288   8100               LD      R16, Z
   \   0000028A   6002               ORI     R16, 0x02
   \   0000028C   8300               ST      Z, R16
    676                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   0000028E   E104               LDI     R16, 20
   \   00000290   E010               LDI     R17, 0
   \   00000292   ........           CALL    OS_Delay
    677                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   00000296   2F08               MOV     R16, R24
   \   00000298   E010               LDI     R17, 0
   \   0000029A   E14A               LDI     R20, 26
   \   0000029C   E050               LDI     R21, 0
   \   0000029E   ........           CALL    ?S_EC_MUL_L02
   \   000002A2   01F8               MOVW    R31:R30, R17:R16
   \   000002A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000002A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000002A8   8100               LD      R16, Z
   \   000002AA   8111               LDD     R17, Z+1
   \   000002AC   01F8               MOVW    R31:R30, R17:R16
   \   000002AE   8100               LD      R16, Z
   \   000002B0   93001108           STS     4360, R16
   \   000002B4   C01E               RJMP    ??Uart_BuildTail16552_1
    678              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   000002B6   3081               CPI     R24, 1
   \   000002B8   F4E1               BRNE    ??Uart_BuildTail16552_1
    679                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   000002BA   ....               LDI     R16, LOW(TimerUART1)
   \   000002BC   ....               LDI     R17, (TimerUART1) >> 8
   \   000002BE   ........           CALL    OS_RetriggerTimer
    680                  U1_MCR |= MCR_RTS;                                      // set RTS on
   \   000002C2   E0E4               LDI     R30, LOW(4356)
   \   000002C4   E1F1               LDI     R31, (4356) >> 8
   \   000002C6   8100               LD      R16, Z
   \   000002C8   6002               ORI     R16, 0x02
   \   000002CA   8300               ST      Z, R16
    681                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   000002CC   E104               LDI     R16, 20
   \   000002CE   E010               LDI     R17, 0
   \   000002D0   ........           CALL    OS_Delay
    682                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   000002D4   2F08               MOV     R16, R24
   \   000002D6   E010               LDI     R17, 0
   \   000002D8   E14A               LDI     R20, 26
   \   000002DA   E050               LDI     R21, 0
   \   000002DC   ........           CALL    ?S_EC_MUL_L02
   \   000002E0   01F8               MOVW    R31:R30, R17:R16
   \   000002E2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000002E4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000002E6   8100               LD      R16, Z
   \   000002E8   8111               LDD     R17, Z+1
   \   000002EA   01F8               MOVW    R31:R30, R17:R16
   \   000002EC   8100               LD      R16, Z
   \   000002EE   93001100           STS     4352, R16
    683              }
    684          }
   \                     ??Uart_BuildTail16552_1:
   \   000002F2   E0E4               LDI     R30, 4
   \   000002F4   ........           JMP     ?EPILOGUE_B4_L09
    685          
    686          /*************************************************************************
    687          *
    688          * Build send request for system status on WIS
    689          *
    690          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    691          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   2F20               MOV     R18, R16
    692          
    693              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E604               LDI     R16, 100
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    694              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    695          
    696          }
   \   000000AA   9508               RET
    697          
    698          /*************************************************************************
    699          *
    700          * Build send request for WIS protocoler on WIS
    701          *
    702          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    703          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   2F20               MOV     R18, R16
   \   00000002   2F31               MOV     R19, R17
    704          
    705              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000004   2F02               MOV     R16, R18
   \   00000006   E010               LDI     R17, 0
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   ........           CALL    ?S_EC_MUL_L02
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000016   8160               LD      R22, Z
   \   00000018   8171               LDD     R23, Z+1
   \   0000001A   2F02               MOV     R16, R18
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   E14A               LDI     R20, 26
   \   00000020   E050               LDI     R21, 0
   \   00000022   ........           CALL    ?S_EC_MUL_L02
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   8113               LDD     R17, Z+3
   \   00000030   0F60               ADD     R22, R16
   \   00000032   1F71               ADC     R23, R17
   \   00000034   01FB               MOVW    R31:R30, R23:R22
   \   00000036   E606               LDI     R16, 102
   \   00000038   8300               ST      Z, R16
   \   0000003A   2F02               MOV     R16, R18
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   E14A               LDI     R20, 26
   \   00000040   E050               LDI     R21, 0
   \   00000042   ........           CALL    ?S_EC_MUL_L02
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    706              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   00000058   2F02               MOV     R16, R18
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E14A               LDI     R20, 26
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   8160               LD      R22, Z
   \   0000006C   8171               LDD     R23, Z+1
   \   0000006E   2F02               MOV     R16, R18
   \   00000070   E010               LDI     R17, 0
   \   00000072   E14A               LDI     R20, 26
   \   00000074   E050               LDI     R21, 0
   \   00000076   ........           CALL    ?S_EC_MUL_L02
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000080   8102               LDD     R16, Z+2
   \   00000082   8113               LDD     R17, Z+3
   \   00000084   0F60               ADD     R22, R16
   \   00000086   1F71               ADC     R23, R17
   \   00000088   01FB               MOVW    R31:R30, R23:R22
   \   0000008A   E001               LDI     R16, 1
   \   0000008C   8300               ST      Z, R16
   \   0000008E   2F02               MOV     R16, R18
   \   00000090   E010               LDI     R17, 0
   \   00000092   E14A               LDI     R20, 26
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A0   8102               LDD     R16, Z+2
   \   000000A2   8113               LDD     R17, Z+3
   \   000000A4   5F0F               SUBI    R16, 255
   \   000000A6   4F1F               SBCI    R17, 255
   \   000000A8   8302               STD     Z+2, R16
   \   000000AA   8313               STD     Z+3, R17
    707              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   000000AC   2F02               MOV     R16, R18
   \   000000AE   E010               LDI     R17, 0
   \   000000B0   E14A               LDI     R20, 26
   \   000000B2   E050               LDI     R21, 0
   \   000000B4   ........           CALL    ?S_EC_MUL_L02
   \   000000B8   01F8               MOVW    R31:R30, R17:R16
   \   000000BA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BE   8160               LD      R22, Z
   \   000000C0   8171               LDD     R23, Z+1
   \   000000C2   2F02               MOV     R16, R18
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   E14A               LDI     R20, 26
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   ........           CALL    ?S_EC_MUL_L02
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D4   8102               LDD     R16, Z+2
   \   000000D6   8113               LDD     R17, Z+3
   \   000000D8   0F60               ADD     R22, R16
   \   000000DA   1F71               ADC     R23, R17
   \   000000DC   01FB               MOVW    R31:R30, R23:R22
   \   000000DE   8330               ST      Z, R19
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    708          
    709          }
   \   000000FE   9508               RET
    710          
    711          /*************************************************************************
    712          *
    713          * Build send request for measure data to Water ingress
    714          *
    715          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    716          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   2F20               MOV     R18, R16
    717          
    718              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E605               LDI     R16, 101
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    719              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    720              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    721          
    722          }
   \   000000FE   9508               RET
    723          
    724          
    725          /*************************************************************************
    726          *
    727          * Build send request for GODA measurement
    728          *
    729          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    730          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   2F20               MOV     R18, R16
    731          
    732              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   EA00               LDI     R16, 160
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    733              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    734              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    735          
    736          }
   \   000000FE   9508               RET
    737          
    738          /*************************************************************************
    739          *
    740          * Build send request for GODA device information
    741          *
    742          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    743          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   2F20               MOV     R18, R16
    744          
    745              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   EA01               LDI     R16, 161
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    746              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    747          }
   \   000000AA   9508               RET
    748          
    749          /*************************************************************************
    750          *
    751          * Build datablock to AN-SGCNV
    752          *
    753          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    754          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   2F20               MOV     R18, R16
    755          
    756              char i;
    757          
    758              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000002   E063               LDI     R22, 3
   \                     ??Uart_BuildSndData_0:
   \   00000004   E070               LDI     R23, 0
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E540               LDI     R20, 80
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(TData + 1270) & 0xFFFF))
   \   00000016   ....               SBCI    R31, HIGH((-(TData + 1270) & 0xFFFF))
   \   00000018   8100               LD      R16, Z
   \   0000001A   2FE0               MOV     R30, R16
   \   0000001C   E0F0               LDI     R31, 0
   \   0000001E   9633               ADIW    R31:R30, 3
   \   00000020   176E               CP      R22, R30
   \   00000022   077F               CPC     R23, R31
   \   00000024   F5CC               BRGE    ??Uart_BuildSndData_1
    759                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \   00000026   ....               LDI     R30, LOW((TData + 1268))
   \   00000028   ....               LDI     R31, HIGH((TData + 1268))
   \   0000002A   E070               LDI     R23, 0
   \   0000002C   0FE6               ADD     R30, R22
   \   0000002E   1FF7               ADC     R31, R23
   \   00000030   2F02               MOV     R16, R18
   \   00000032   E010               LDI     R17, 0
   \   00000034   E540               LDI     R20, 80
   \   00000036   E050               LDI     R21, 0
   \   00000038   ........           CALL    ?S_EC_MUL_L02
   \   0000003C   0FE0               ADD     R30, R16
   \   0000003E   1FF1               ADC     R31, R17
   \   00000040   8130               LD      R19, Z
   \   00000042   2F02               MOV     R16, R18
   \   00000044   E010               LDI     R17, 0
   \   00000046   E14A               LDI     R20, 26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?S_EC_MUL_L02
   \   0000004E   01F8               MOVW    R31:R30, R17:R16
   \   00000050   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000052   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000054   8020               LD      R2, Z
   \   00000056   8031               LDD     R3, Z+1
   \   00000058   2F02               MOV     R16, R18
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E14A               LDI     R20, 26
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   8102               LDD     R16, Z+2
   \   0000006C   8113               LDD     R17, Z+3
   \   0000006E   0E20               ADD     R2, R16
   \   00000070   1E31               ADC     R3, R17
   \   00000072   01F1               MOVW    R31:R30, R3:R2
   \   00000074   8330               ST      Z, R19
   \   00000076   2F02               MOV     R16, R18
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E14A               LDI     R20, 26
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000086   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000088   8102               LDD     R16, Z+2
   \   0000008A   8113               LDD     R17, Z+3
   \   0000008C   5F0F               SUBI    R16, 255
   \   0000008E   4F1F               SBCI    R17, 255
   \   00000090   8302               STD     Z+2, R16
   \   00000092   8313               STD     Z+3, R17
    760              }
   \   00000094   9563               INC     R22
   \   00000096   CFB6               RJMP    ??Uart_BuildSndData_0
    761              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \                     ??Uart_BuildSndData_1:
   \   00000098   2F02               MOV     R16, R18
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   E540               LDI     R20, 80
   \   0000009E   E050               LDI     R21, 0
   \   000000A0   ........           CALL    ?S_EC_MUL_L02
   \   000000A4   01F8               MOVW    R31:R30, R17:R16
   \   000000A6   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   000000A8   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   000000AA   E000               LDI     R16, 0
   \   000000AC   8300               ST      Z, R16
    762          }
   \   000000AE   9508               RET
    763          
    764          /*************************************************************************
    765          *
    766          * Build send request for measure data to AN-SGCNV
    767          *
    768          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    769          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   2F20               MOV     R18, R16
    770          
    771              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E00A               LDI     R16, 10
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    772              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    773              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    774          
    775          }
   \   000000FE   9508               RET
    776          
    777          /*************************************************************************
    778          *
    779          * Build send request for raw data to AN-SGCNV
    780          *
    781          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    782          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   2F20               MOV     R18, R16
    783          
    784              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E00D               LDI     R16, 13
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    785              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    786              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    787          
    788          }
   \   000000FE   9508               RET
    789          
    790          /*************************************************************************
    791          *
    792          * Build send request for cal data to AN-SGCNV
    793          *
    794          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    795          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   2F20               MOV     R18, R16
    796          
    797              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E100               LDI     R16, 16
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    798              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    799              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    800          
    801          }
   \   000000FE   9508               RET
    802          
    803          /*************************************************************************
    804          *
    805          * Build send request for system status on AN_SGCNV
    806          *
    807          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    808          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   2F20               MOV     R18, R16
    809          
    810              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E10B               LDI     R16, 27
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    811              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    812              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
   \   000000AA   2F02               MOV     R16, R18
   \   000000AC   E010               LDI     R17, 0
   \   000000AE   E14A               LDI     R20, 26
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   ........           CALL    ?S_EC_MUL_L02
   \   000000B6   01F8               MOVW    R31:R30, R17:R16
   \   000000B8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000BC   8160               LD      R22, Z
   \   000000BE   8171               LDD     R23, Z+1
   \   000000C0   2F02               MOV     R16, R18
   \   000000C2   E010               LDI     R17, 0
   \   000000C4   E14A               LDI     R20, 26
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   ........           CALL    ?S_EC_MUL_L02
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D2   8102               LDD     R16, Z+2
   \   000000D4   8113               LDD     R17, Z+3
   \   000000D6   0F60               ADD     R22, R16
   \   000000D8   1F71               ADC     R23, R17
   \   000000DA   01FB               MOVW    R31:R30, R23:R22
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   8300               ST      Z, R16
   \   000000E0   2F02               MOV     R16, R18
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   E14A               LDI     R20, 26
   \   000000E6   E050               LDI     R21, 0
   \   000000E8   ........           CALL    ?S_EC_MUL_L02
   \   000000EC   01F8               MOVW    R31:R30, R17:R16
   \   000000EE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F2   8102               LDD     R16, Z+2
   \   000000F4   8113               LDD     R17, Z+3
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   8313               STD     Z+3, R17
    813          
    814          }
   \   000000FE   9508               RET
    815          
    816          /*************************************************************************
    817          *
    818          * Build send request for card config on AN_SGCNV
    819          *
    820          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    821          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   2F20               MOV     R18, R16
    822          
    823              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E101               LDI     R16, 17
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    824              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    825          
    826          }
   \   000000AA   9508               RET
    827          
    828          /*************************************************************************
    829          *
    830          * Build send request for EEPROM data on AN_SGCNV
    831          *
    832          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    833          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   2F20               MOV     R18, R16
    834          
    835              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000002   2F02               MOV     R16, R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   E14A               LDI     R20, 26
   \   00000008   E050               LDI     R21, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8160               LD      R22, Z
   \   00000016   8171               LDD     R23, Z+1
   \   00000018   2F02               MOV     R16, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E14A               LDI     R20, 26
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   0F60               ADD     R22, R16
   \   00000030   1F71               ADC     R23, R17
   \   00000032   01FB               MOVW    R31:R30, R23:R22
   \   00000034   E108               LDI     R16, 24
   \   00000036   8300               ST      Z, R16
   \   00000038   2F02               MOV     R16, R18
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E14A               LDI     R20, 26
   \   0000003E   E050               LDI     R21, 0
   \   00000040   ........           CALL    ?S_EC_MUL_L02
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    836              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000056   2F02               MOV     R16, R18
   \   00000058   E010               LDI     R17, 0
   \   0000005A   E14A               LDI     R20, 26
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   ........           CALL    ?S_EC_MUL_L02
   \   00000062   01F8               MOVW    R31:R30, R17:R16
   \   00000064   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000068   8160               LD      R22, Z
   \   0000006A   8171               LDD     R23, Z+1
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   E14A               LDI     R20, 26
   \   00000072   E050               LDI     R21, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   01FB               MOVW    R31:R30, R23:R22
   \   00000088   E001               LDI     R16, 1
   \   0000008A   8300               ST      Z, R16
   \   0000008C   2F02               MOV     R16, R18
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   8113               LDD     R17, Z+3
   \   000000A2   5F0F               SUBI    R16, 255
   \   000000A4   4F1F               SBCI    R17, 255
   \   000000A6   8302               STD     Z+2, R16
   \   000000A8   8313               STD     Z+3, R17
    837              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   000000AA   E030               LDI     R19, 0
   \   000000AC   01F9               MOVW    R31:R30, R19:R18
   \   000000AE   ....               SUBI    R30, LOW((-(TData + 1528) & 0xFFFF))
   \   000000B0   ....               SBCI    R31, HIGH((-(TData + 1528) & 0xFFFF))
   \   000000B2   8130               LD      R19, Z
   \   000000B4   2F02               MOV     R16, R18
   \   000000B6   E010               LDI     R17, 0
   \   000000B8   E14A               LDI     R20, 26
   \   000000BA   E050               LDI     R21, 0
   \   000000BC   ........           CALL    ?S_EC_MUL_L02
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000C4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000C6   8160               LD      R22, Z
   \   000000C8   8171               LDD     R23, Z+1
   \   000000CA   2F02               MOV     R16, R18
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   E14A               LDI     R20, 26
   \   000000D0   E050               LDI     R21, 0
   \   000000D2   ........           CALL    ?S_EC_MUL_L02
   \   000000D6   01F8               MOVW    R31:R30, R17:R16
   \   000000D8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000DA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000DC   8102               LDD     R16, Z+2
   \   000000DE   8113               LDD     R17, Z+3
   \   000000E0   0F60               ADD     R22, R16
   \   000000E2   1F71               ADC     R23, R17
   \   000000E4   01FB               MOVW    R31:R30, R23:R22
   \   000000E6   8330               ST      Z, R19
   \   000000E8   2F02               MOV     R16, R18
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   E14A               LDI     R20, 26
   \   000000EE   E050               LDI     R21, 0
   \   000000F0   ........           CALL    ?S_EC_MUL_L02
   \   000000F4   01F8               MOVW    R31:R30, R17:R16
   \   000000F6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000F8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000FA   8102               LDD     R16, Z+2
   \   000000FC   8113               LDD     R17, Z+3
   \   000000FE   5F0F               SUBI    R16, 255
   \   00000100   4F1F               SBCI    R17, 255
   \   00000102   8302               STD     Z+2, R16
   \   00000104   8313               STD     Z+3, R17
    838          
    839          }
   \   00000106   9508               RET
    840          /*************************************************************************
    841          *
    842          *  Receive data on USARTs
    843          *
    844          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    845          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
    846          
    847              switch (UART16552[ch].RxState) {                  // check status
   \   00000006   2F08               MOV     R16, R24
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8902               LDD     R16, Z+18
   \   0000001A   5000               SUBI    R16, 0
   \   0000001C   F049               BREQ    ??ReceivePacketUart16552_0
   \   0000001E   950A               DEC     R16
   \   00000020   F041               BREQ    ??ReceivePacketUart16552_1
   \   00000022   950A               DEC     R16
   \   00000024   F409               BRNE    $+2+2
   \   00000026   C08F               RJMP    ??ReceivePacketUart16552_2
   \   00000028   5008               SUBI    R16, 8
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C110               RJMP    ??ReceivePacketUart16552_3
   \   0000002E   C10C               RJMP    ??ReceivePacketUart16552_4
    848              case SYNC :
    849                  // all functionallity in inerrupt routine
    850                  break;
   \                     ??ReceivePacketUart16552_0:
   \   00000030   C10E               RJMP    ??ReceivePacketUart16552_3
    851              case HEADER :
    852                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   00000032   2F08               MOV     R16, R24
   \   00000034   E010               LDI     R17, 0
   \   00000036   E14A               LDI     R20, 26
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000044   85A6               LDD     R26, Z+14
   \   00000046   85B7               LDD     R27, Z+15
   \   00000048   9713               SBIW    R27:R26, 3
   \   0000004A   F408               BRCC    $+2+2
   \   0000004C   C100               RJMP    ??ReceivePacketUart16552_3
    853                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    854                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000004E   2F08               MOV     R16, R24
   \   00000050   E010               LDI     R17, 0
   \   00000052   E14A               LDI     R20, 26
   \   00000054   E050               LDI     R21, 0
   \   00000056   ........           CALL    ?S_EC_MUL_L02
   \   0000005A   01F8               MOVW    R31:R30, R17:R16
   \   0000005C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000060   8502               LDD     R16, Z+10
   \   00000062   8513               LDD     R17, Z+11
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8122               LDD     R18, Z+2
   \   00000068   E030               LDI     R19, 0
   \   0000006A   2F32               MOV     R19, R18
   \   0000006C   E020               LDI     R18, 0
   \   0000006E   2F08               MOV     R16, R24
   \   00000070   E010               LDI     R17, 0
   \   00000072   E14A               LDI     R20, 26
   \   00000074   E050               LDI     R21, 0
   \   00000076   ........           CALL    ?S_EC_MUL_L02
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000080   8502               LDD     R16, Z+10
   \   00000082   8513               LDD     R17, Z+11
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   8103               LDD     R16, Z+3
   \   00000088   E010               LDI     R17, 0
   \   0000008A   0F20               ADD     R18, R16
   \   0000008C   1F31               ADC     R19, R17
   \   0000008E   2F08               MOV     R16, R24
   \   00000090   E010               LDI     R17, 0
   \   00000092   E14A               LDI     R20, 26
   \   00000094   E050               LDI     R21, 0
   \   00000096   ........           CALL    ?S_EC_MUL_L02
   \   0000009A   01F8               MOVW    R31:R30, R17:R16
   \   0000009C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000A0   8B26               STD     Z+22, R18
   \   000000A2   8B37               STD     Z+23, R19
    855                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    856                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   000000A4   2F08               MOV     R16, R24
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   E14A               LDI     R20, 26
   \   000000AA   E050               LDI     R21, 0
   \   000000AC   ........           CALL    ?S_EC_MUL_L02
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B6   8966               LDD     R22, Z+22
   \   000000B8   8977               LDD     R23, Z+23
   \   000000BA   E728               LDI     R18, 120
   \   000000BC   E030               LDI     R19, 0
   \   000000BE   2F08               MOV     R16, R24
   \   000000C0   E010               LDI     R17, 0
   \   000000C2   E14A               LDI     R20, 26
   \   000000C4   E050               LDI     R21, 0
   \   000000C6   ........           CALL    ?S_EC_MUL_L02
   \   000000CA   01F8               MOVW    R31:R30, R17:R16
   \   000000CC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000D0   8506               LDD     R16, Z+14
   \   000000D2   8517               LDD     R17, Z+15
   \   000000D4   1B20               SUB     R18, R16
   \   000000D6   0B31               SBC     R19, R17
   \   000000D8   1762               CP      R22, R18
   \   000000DA   0773               CPC     R23, R19
   \   000000DC   F580               BRCC    ??ReceivePacketUart16552_5
   \   000000DE   2F08               MOV     R16, R24
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   E14A               LDI     R20, 26
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   ........           CALL    ?S_EC_MUL_L02
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000EE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000F0   89A6               LDD     R26, Z+22
   \   000000F2   89B7               LDD     R27, Z+23
   \   000000F4   9717               SBIW    R27:R26, 7
   \   000000F6   F118               BRCS    ??ReceivePacketUart16552_5
    857                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   000000F8   2F08               MOV     R16, R24
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   E14A               LDI     R20, 26
   \   000000FE   E050               LDI     R21, 0
   \   00000100   ........           CALL    ?S_EC_MUL_L02
   \   00000104   01F8               MOVW    R31:R30, R17:R16
   \   00000106   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000010A   E002               LDI     R16, 2
   \   0000010C   8B02               STD     Z+18, R16
    858                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   0000010E   2F08               MOV     R16, R24
   \   00000110   E010               LDI     R17, 0
   \   00000112   E14A               LDI     R20, 26
   \   00000114   E050               LDI     R21, 0
   \   00000116   ........           CALL    ?S_EC_MUL_L02
   \   0000011A   01F8               MOVW    R31:R30, R17:R16
   \   0000011C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000120   85A6               LDD     R26, Z+14
   \   00000122   85B7               LDD     R27, Z+15
   \   00000124   9611               ADIW    R27:R26, 1
   \   00000126   2F08               MOV     R16, R24
   \   00000128   E010               LDI     R17, 0
   \   0000012A   E14A               LDI     R20, 26
   \   0000012C   E050               LDI     R21, 0
   \   0000012E   ........           CALL    ?S_EC_MUL_L02
   \   00000132   01F8               MOVW    R31:R30, R17:R16
   \   00000134   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000136   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000138   8BA0               STD     Z+16, R26
   \   0000013A   8BB1               STD     Z+17, R27
   \   0000013C   C088               RJMP    ??ReceivePacketUart16552_3
    859                      } else {
    860                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
   \                     ??ReceivePacketUart16552_5:
   \   0000013E   2F08               MOV     R16, R24
   \   00000140   ........           CALL    GoToSyncUART16552
    861                      }
    862                  }
    863                  break;
   \   00000144   C084               RJMP    ??ReceivePacketUart16552_3
    864              case RECEIVE :
    865                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   00000146   2F08               MOV     R16, R24
   \   00000148   E010               LDI     R17, 0
   \   0000014A   E14A               LDI     R20, 26
   \   0000014C   E050               LDI     R21, 0
   \   0000014E   ........           CALL    ?S_EC_MUL_L02
   \   00000152   01F8               MOVW    R31:R30, R17:R16
   \   00000154   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000156   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000158   8900               LDD     R16, Z+16
   \   0000015A   8911               LDD     R17, Z+17
   \   0000015C   5F0F               SUBI    R16, 255
   \   0000015E   4F1F               SBCI    R17, 255
   \   00000160   8B00               STD     Z+16, R16
   \   00000162   8B11               STD     Z+17, R17
   \   00000164   2F08               MOV     R16, R24
   \   00000166   E010               LDI     R17, 0
   \   00000168   E14A               LDI     R20, 26
   \   0000016A   E050               LDI     R21, 0
   \   0000016C   ........           CALL    ?S_EC_MUL_L02
   \   00000170   01F8               MOVW    R31:R30, R17:R16
   \   00000172   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000174   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000176   8920               LDD     R18, Z+16
   \   00000178   8931               LDD     R19, Z+17
   \   0000017A   2F08               MOV     R16, R24
   \   0000017C   E010               LDI     R17, 0
   \   0000017E   E14A               LDI     R20, 26
   \   00000180   E050               LDI     R21, 0
   \   00000182   ........           CALL    ?S_EC_MUL_L02
   \   00000186   01F8               MOVW    R31:R30, R17:R16
   \   00000188   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000018A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000018C   8906               LDD     R16, Z+22
   \   0000018E   8917               LDD     R17, Z+23
   \   00000190   1720               CP      R18, R16
   \   00000192   0731               CPC     R19, R17
   \   00000194   F408               BRCC    $+2+2
   \   00000196   C05B               RJMP    ??ReceivePacketUart16552_3
    866                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000198   2F08               MOV     R16, R24
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   E14A               LDI     R20, 26
   \   0000019E   E050               LDI     R21, 0
   \   000001A0   ........           CALL    ?S_EC_MUL_L02
   \   000001A4   01F8               MOVW    R31:R30, R17:R16
   \   000001A6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001A8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001AA   8522               LDD     R18, Z+10
   \   000001AC   8533               LDD     R19, Z+11
   \   000001AE   2F08               MOV     R16, R24
   \   000001B0   E010               LDI     R17, 0
   \   000001B2   E14A               LDI     R20, 26
   \   000001B4   E050               LDI     R21, 0
   \   000001B6   ........           CALL    ?S_EC_MUL_L02
   \   000001BA   01F8               MOVW    R31:R30, R17:R16
   \   000001BC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001BE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001C0   8906               LDD     R16, Z+22
   \   000001C2   8917               LDD     R17, Z+23
   \   000001C4   0F20               ADD     R18, R16
   \   000001C6   1F31               ADC     R19, R17
   \   000001C8   5021               SUBI    R18, 1
   \   000001CA   4030               SBCI    R19, 0
   \   000001CC   01F9               MOVW    R31:R30, R19:R18
   \   000001CE   8100               LD      R16, Z
   \   000001D0   3003               CPI     R16, 3
   \   000001D2   F5B1               BRNE    ??ReceivePacketUart16552_6
    867                          if (CalcDSRxChecksum16552(ch)) {
   \   000001D4   2F08               MOV     R16, R24
   \   000001D6   ....               RCALL   CalcDSRxChecksum16552
   \   000001D8   2B01               OR      R16, R17
   \   000001DA   F171               BREQ    ??ReceivePacketUart16552_7
    868                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   000001DC   2F08               MOV     R16, R24
   \   000001DE   E010               LDI     R17, 0
   \   000001E0   E14A               LDI     R20, 26
   \   000001E2   E050               LDI     R21, 0
   \   000001E4   ........           CALL    ?S_EC_MUL_L02
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001EE   8502               LDD     R16, Z+10
   \   000001F0   8513               LDD     R17, Z+11
   \   000001F2   01F8               MOVW    R31:R30, R17:R16
   \   000001F4   8100               LD      R16, Z
   \   000001F6   3F0D               CPI     R16, 253
   \   000001F8   F4D9               BRNE    ??ReceivePacketUart16552_8
    869                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   000001FA   2F08               MOV     R16, R24
   \   000001FC   E010               LDI     R17, 0
   \   000001FE   E14A               LDI     R20, 26
   \   00000200   E050               LDI     R21, 0
   \   00000202   ........           CALL    ?S_EC_MUL_L02
   \   00000206   01F8               MOVW    R31:R30, R17:R16
   \   00000208   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000020A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000020C   E00A               LDI     R16, 10
   \   0000020E   8B02               STD     Z+18, R16
    870                                  if (ch == 0) {
   \   00000210   2388               TST     R24
   \   00000212   F431               BRNE    ??ReceivePacketUart16552_9
    871                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   00000214   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000216   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000218   E001               LDI     R16, 1
   \   0000021A   ........           CALL    OS_SignalEvent
   \   0000021E   C017               RJMP    ??ReceivePacketUart16552_3
    872                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_9:
   \   00000220   3081               CPI     R24, 1
   \   00000222   F4A9               BRNE    ??ReceivePacketUart16552_3
    873                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   00000224   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000226   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000228   E002               LDI     R16, 2
   \   0000022A   ........           CALL    OS_SignalEvent
   \   0000022E   C00F               RJMP    ??ReceivePacketUart16552_3
    874                                  }
    875                              } else {
    876                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
   \                     ??ReceivePacketUart16552_8:
   \   00000230   2F08               MOV     R16, R24
   \   00000232   ........           CALL    GoToSyncUART16552
   \   00000236   C00B               RJMP    ??ReceivePacketUart16552_3
    877                              }
    878                          } else {
    879                              GoToSyncUART16552(ch);                                // go to sync modus for recive
   \                     ??ReceivePacketUart16552_7:
   \   00000238   2F08               MOV     R16, R24
   \   0000023A   ........           CALL    GoToSyncUART16552
   \   0000023E   C007               RJMP    ??ReceivePacketUart16552_3
    880                          }
    881                      } else {
    882                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
   \                     ??ReceivePacketUart16552_6:
   \   00000240   2F08               MOV     R16, R24
   \   00000242   ........           CALL    GoToSyncUART16552
    883                      }
    884                  }
    885                  break;
   \   00000246   C003               RJMP    ??ReceivePacketUart16552_3
    886              case HANDLE :
    887                  break;
    888              default :
    889                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_4:
   \   00000248   2F08               MOV     R16, R24
   \   0000024A   ........           CALL    GoToSyncUART16552
    890                  break;
    891              }                                                           // end switch
    892              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_3:
   \   0000024E   2F08               MOV     R16, R24
   \   00000250   E010               LDI     R17, 0
   \   00000252   E14A               LDI     R20, 26
   \   00000254   E050               LDI     R21, 0
   \   00000256   ........           CALL    ?S_EC_MUL_L02
   \   0000025A   01F8               MOVW    R31:R30, R17:R16
   \   0000025C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000025E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000260   8506               LDD     R16, Z+14
   \   00000262   8517               LDD     R17, Z+15
   \   00000264   5F0F               SUBI    R16, 255
   \   00000266   4F1F               SBCI    R17, 255
   \   00000268   8706               STD     Z+14, R16
   \   0000026A   8717               STD     Z+15, R17
   \   0000026C   2F08               MOV     R16, R24
   \   0000026E   E010               LDI     R17, 0
   \   00000270   E14A               LDI     R20, 26
   \   00000272   E050               LDI     R21, 0
   \   00000274   ........           CALL    ?S_EC_MUL_L02
   \   00000278   01F8               MOVW    R31:R30, R17:R16
   \   0000027A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000027C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000027E   8506               LDD     R16, Z+14
   \   00000280   8517               LDD     R17, Z+15
   \   00000282   3708               CPI     R16, 120
   \   00000284   E020               LDI     R18, 0
   \   00000286   0712               CPC     R17, R18
   \   00000288   F068               BRCS    ??ReceivePacketUart16552_10
    893                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   0000028A   2F08               MOV     R16, R24
   \   0000028C   E010               LDI     R17, 0
   \   0000028E   E14A               LDI     R20, 26
   \   00000290   E050               LDI     R21, 0
   \   00000292   ........           CALL    ?S_EC_MUL_L02
   \   00000296   01F8               MOVW    R31:R30, R17:R16
   \   00000298   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000029A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000029C   E000               LDI     R16, 0
   \   0000029E   8706               STD     Z+14, R16
   \   000002A0   E000               LDI     R16, 0
   \   000002A2   8707               STD     Z+15, R16
    894              }
    895          }
   \                     ??ReceivePacketUart16552_10:
   \   000002A4   E0E4               LDI     R30, 4
   \   000002A6   ........           JMP     ?EPILOGUE_B4_L09
    896          
    897          
    898          /*************************************************************************
    899          *
    900          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    901          *
    902          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    903          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   0129               MOVW    R5:R4, R19:R18
    904          
    905              unsigned short cnt;
    906              unsigned char csum;
    907          
    908              csum = 0;
   \   00000008   E060               LDI     R22, 0
    909              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   E082               LDI     R24, 2
   \   0000000C   E090               LDI     R25, 0
   \                     ??CalcDSTxChecksumUART16552_0:
   \   0000000E   1584               CP      R24, R4
   \   00000010   0595               CPC     R25, R5
   \   00000012   F4D8               BRCC    ??CalcDSTxChecksumUART16552_1
    910                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \   00000014   E070               LDI     R23, 0
   \   00000016   2D02               MOV     R16, R2
   \   00000018   E010               LDI     R17, 0
   \   0000001A   E14A               LDI     R20, 26
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   ........           CALL    ?S_EC_MUL_L02
   \   00000022   01D8               MOVW    R27:R26, R17:R16
   \   00000024   ....               SUBI    R26, LOW((-(UART16552) & 0xFFFF))
   \   00000026   ....               SBCI    R27, (-(UART16552) & 0xFFFF) >> 8
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9711               SBIW    R27:R26, 1
   \   0000002E   0FE8               ADD     R30, R24
   \   00000030   1FF9               ADC     R31, R25
   \   00000032   8100               LD      R16, Z
   \   00000034   E010               LDI     R17, 0
   \   00000036   2760               EOR     R22, R16
   \   00000038   2771               EOR     R23, R17
   \   0000003A   01FB               MOVW    R31:R30, R23:R22
   \   0000003C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000040   ....               LDI     R19, (crc) >> 16
   \   00000042   BF3B               OUT     0x3B, R19
   \   00000044   9166               ELPM    R22, Z
    911              }
   \   00000046   9601               ADIW    R25:R24, 1
   \   00000048   CFE2               RJMP    ??CalcDSTxChecksumUART16552_0
    912              return csum;
   \                     ??CalcDSTxChecksumUART16552_1:
   \   0000004A   2F06               MOV     R16, R22
   \   0000004C   E0E6               LDI     R30, 6
   \   0000004E   ........           JMP     ?EPILOGUE_B6_L09
    913          }
    914          
    915          /*************************************************************************
    916          *
    917          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    918          *
    919          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    920          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F20               MOV     R18, R16
    921          
    922              short cnt;
    923              unsigned char csum;
    924          
    925              csum = 0;
   \   00000006   E060               LDI     R22, 0
    926              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
   \                     ??CalcDSRxChecksum16552_0:
   \   0000000C   2F02               MOV     R16, R18
   \   0000000E   E010               LDI     R17, 0
   \   00000010   E14A               LDI     R20, 26
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?S_EC_MUL_L02
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001E   89A6               LDD     R26, Z+22
   \   00000020   89B7               LDD     R27, Z+23
   \   00000022   9712               SBIW    R27:R26, 2
   \   00000024   178A               CP      R24, R26
   \   00000026   079B               CPC     R25, R27
   \   00000028   F4D8               BRCC    ??CalcDSRxChecksum16552_1
    927                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \   0000002A   E070               LDI     R23, 0
   \   0000002C   2F02               MOV     R16, R18
   \   0000002E   E010               LDI     R17, 0
   \   00000030   E14A               LDI     R20, 26
   \   00000032   E050               LDI     R21, 0
   \   00000034   ........           CALL    ?S_EC_MUL_L02
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000003E   8502               LDD     R16, Z+10
   \   00000040   8513               LDD     R17, Z+11
   \   00000042   0F08               ADD     R16, R24
   \   00000044   1F19               ADC     R17, R25
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   8100               LD      R16, Z
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   2760               EOR     R22, R16
   \   0000004E   2771               EOR     R23, R17
   \   00000050   01FB               MOVW    R31:R30, R23:R22
   \   00000052   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000054   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000056   ....               LDI     R19, (crc) >> 16
   \   00000058   BF3B               OUT     0x3B, R19
   \   0000005A   9166               ELPM    R22, Z
    928              }
   \   0000005C   9601               ADIW    R25:R24, 1
   \   0000005E   CFD6               RJMP    ??CalcDSRxChecksum16552_0
    929              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \                     ??CalcDSRxChecksum16552_1:
   \   00000060   2F02               MOV     R16, R18
   \   00000062   E010               LDI     R17, 0
   \   00000064   E14A               LDI     R20, 26
   \   00000066   E050               LDI     R21, 0
   \   00000068   ........           CALL    ?S_EC_MUL_L02
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000070   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000072   85A2               LDD     R26, Z+10
   \   00000074   85B3               LDD     R27, Z+11
   \   00000076   2F02               MOV     R16, R18
   \   00000078   E010               LDI     R17, 0
   \   0000007A   E14A               LDI     R20, 26
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   ........           CALL    ?S_EC_MUL_L02
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000086   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000088   8906               LDD     R16, Z+22
   \   0000008A   8917               LDD     R17, Z+23
   \   0000008C   0FA0               ADD     R26, R16
   \   0000008E   1FB1               ADC     R27, R17
   \   00000090   9712               SBIW    R27:R26, 2
   \   00000092   01FD               MOVW    R31:R30, R27:R26
   \   00000094   8100               LD      R16, Z
   \   00000096   1760               CP      R22, R16
   \   00000098   F419               BRNE    ??CalcDSRxChecksum16552_2
    930                  return true;
   \   0000009A   E001               LDI     R16, 1
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   C002               RJMP    ??CalcDSRxChecksum16552_3
    931              } else {
    932                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   000000A0   E000               LDI     R16, 0
   \   000000A2   E010               LDI     R17, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   000000A4   E0E4               LDI     R30, 4
   \   000000A6   ........           JMP     ?EPILOGUE_B4_L09
    933              }
    934          }
    935          
    936          /*************************************************************************
    937          *
    938          * Goes to sync mode
    939          *
    940          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    941          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   \   00000000   2F20               MOV     R18, R16
    942          
    943              if (ch < 2) {
   \   00000002   3022               CPI     R18, 2
   \   00000004   F580               BRCC    ??GoToSyncUART16552_0
    944                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000006   2F02               MOV     R16, R18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ........           CALL    ?S_EC_MUL_L02
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   E000               LDI     R16, 0
   \   0000001A   8B03               STD     Z+19, R16
    945                  UART16552[ch].RxState = SYNC;
   \   0000001C   2F02               MOV     R16, R18
   \   0000001E   E010               LDI     R17, 0
   \   00000020   E14A               LDI     R20, 26
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?S_EC_MUL_L02
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002E   E000               LDI     R16, 0
   \   00000030   8B02               STD     Z+18, R16
    946                  UART16552[ch].RxFirst = 0;
   \   00000032   2F02               MOV     R16, R18
   \   00000034   E010               LDI     R17, 0
   \   00000036   E14A               LDI     R20, 26
   \   00000038   E050               LDI     R21, 0
   \   0000003A   ........           CALL    ?S_EC_MUL_L02
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000044   E000               LDI     R16, 0
   \   00000046   8704               STD     Z+12, R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8705               STD     Z+13, R16
    947                  UART16552[ch].RxPacklen = 0;
   \   0000004C   2F02               MOV     R16, R18
   \   0000004E   E010               LDI     R17, 0
   \   00000050   E14A               LDI     R20, 26
   \   00000052   E050               LDI     R21, 0
   \   00000054   ........           CALL    ?S_EC_MUL_L02
   \   00000058   01F8               MOVW    R31:R30, R17:R16
   \   0000005A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000005E   E000               LDI     R16, 0
   \   00000060   8B06               STD     Z+22, R16
   \   00000062   E000               LDI     R16, 0
   \   00000064   8B07               STD     Z+23, R16
    948              }
    949          }
   \                     ??GoToSyncUART16552_0:
   \   00000066   9508               RET
    950          
    951          /*************************************************************************
    952          *
    953          *  Empty rx buffer on PC16552 UART
    954          *
    955          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    956          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
    957          
    958              switch (uartno) {
   \   00000000   2F10               MOV     R17, R16
   \   00000002   5010               SUBI    R17, 0
   \   00000004   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000006   951A               DEC     R17
   \   00000008   F049               BREQ    ??EmptyRxBuf16552_1
   \   0000000A   9508               RET
    959              case 0:
    960                  do {
    961                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000C   91101108           LDS     R17, 4360
    962                  } while (U0_LSR & DATA_READY);
   \   00000010   E0ED               LDI     R30, LOW(4365)
   \   00000012   E1F1               LDI     R31, (4365) >> 8
   \   00000014   8120               LD      R18, Z
   \   00000016   FD20               SBRC    R18, 0
   \   00000018   CFF9               RJMP    ??EmptyRxBuf16552_0
    963                  break;
   \   0000001A   9508               RET
    964              case 1:
    965                  do {
    966                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   0000001C   91101100           LDS     R17, 4352
    967                  } while (U1_LSR & DATA_READY);
   \   00000020   E0E5               LDI     R30, LOW(4357)
   \   00000022   E1F1               LDI     R31, (4357) >> 8
   \   00000024   8120               LD      R18, Z
   \   00000026   FD20               SBRC    R18, 0
   \   00000028   CFF9               RJMP    ??EmptyRxBuf16552_1
    968                  break;
    969              }
    970          }
   \   0000002A   9508               RET
    971          
    972          /*************************************************************************
    973          *
    974          *  Init the PC16552 UART
    975          *
    976          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    977          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
    978          
    979              /*--- Configure UART data block ---*/
    980              UART16552[channel].TxFirst = 0x00;
   \   0000000A   2D04               MOV     R16, R4
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   E14A               LDI     R20, 26
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?S_EC_MUL_L02
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8302               STD     Z+2, R16
   \   00000020   E000               LDI     R16, 0
   \   00000022   8303               STD     Z+3, R16
    981              UART16552[channel].TxLast = 0x00;
   \   00000024   2D04               MOV     R16, R4
   \   00000026   E010               LDI     R17, 0
   \   00000028   E14A               LDI     R20, 26
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   ........           CALL    ?S_EC_MUL_L02
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000036   E000               LDI     R16, 0
   \   00000038   8304               STD     Z+4, R16
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   8305               STD     Z+5, R16
    982              UART16552[channel].TxCount = 0x00;
   \   0000003E   2D04               MOV     R16, R4
   \   00000040   E010               LDI     R17, 0
   \   00000042   E14A               LDI     R20, 26
   \   00000044   E050               LDI     R21, 0
   \   00000046   ........           CALL    ?S_EC_MUL_L02
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000050   E000               LDI     R16, 0
   \   00000052   8306               STD     Z+6, R16
   \   00000054   E000               LDI     R16, 0
   \   00000056   8307               STD     Z+7, R16
    983              UART16552[channel].RxFirst = 0x00;
   \   00000058   2D04               MOV     R16, R4
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   E14A               LDI     R20, 26
   \   0000005E   E050               LDI     R21, 0
   \   00000060   ........           CALL    ?S_EC_MUL_L02
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000068   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   8704               STD     Z+12, R16
   \   0000006E   E000               LDI     R16, 0
   \   00000070   8705               STD     Z+13, R16
    984              UART16552[channel].RxLast = 0x00;
   \   00000072   2D04               MOV     R16, R4
   \   00000074   E010               LDI     R17, 0
   \   00000076   E14A               LDI     R20, 26
   \   00000078   E050               LDI     R21, 0
   \   0000007A   ........           CALL    ?S_EC_MUL_L02
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000082   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000084   E000               LDI     R16, 0
   \   00000086   8706               STD     Z+14, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8707               STD     Z+15, R16
    985              UART16552[channel].RxCount = 0x00;
   \   0000008C   2D04               MOV     R16, R4
   \   0000008E   E010               LDI     R17, 0
   \   00000090   E14A               LDI     R20, 26
   \   00000092   E050               LDI     R21, 0
   \   00000094   ........           CALL    ?S_EC_MUL_L02
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000009C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000009E   E000               LDI     R16, 0
   \   000000A0   8B00               STD     Z+16, R16
   \   000000A2   E000               LDI     R16, 0
   \   000000A4   8B01               STD     Z+17, R16
    986              UART16552[channel].RxState = SYNC;
   \   000000A6   2D04               MOV     R16, R4
   \   000000A8   E010               LDI     R17, 0
   \   000000AA   E14A               LDI     R20, 26
   \   000000AC   E050               LDI     R21, 0
   \   000000AE   ........           CALL    ?S_EC_MUL_L02
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000B8   E000               LDI     R16, 0
   \   000000BA   8B02               STD     Z+18, R16
    987              UART16552[channel].SyncCnt = 0;
   \   000000BC   2D04               MOV     R16, R4
   \   000000BE   E010               LDI     R17, 0
   \   000000C0   E14A               LDI     R20, 26
   \   000000C2   E050               LDI     R21, 0
   \   000000C4   ........           CALL    ?S_EC_MUL_L02
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000CC   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000CE   E000               LDI     R16, 0
   \   000000D0   8B03               STD     Z+19, R16
    988              UART16552[channel].TxStatus = 0x00;
   \   000000D2   2D04               MOV     R16, R4
   \   000000D4   E010               LDI     R17, 0
   \   000000D6   E14A               LDI     R20, 26
   \   000000D8   E050               LDI     R21, 0
   \   000000DA   ........           CALL    ?S_EC_MUL_L02
   \   000000DE   01F8               MOVW    R31:R30, R17:R16
   \   000000E0   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000000E2   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000000E4   E000               LDI     R16, 0
   \   000000E6   8700               STD     Z+8, R16
    989          
    990              switch (channel) {
   \   000000E8   2D04               MOV     R16, R4
   \   000000EA   5000               SUBI    R16, 0
   \   000000EC   F021               BREQ    ??Init16552_0
   \   000000EE   950A               DEC     R16
   \   000000F0   F409               BRNE    $+2+2
   \   000000F2   C051               RJMP    ??Init16552_1
   \   000000F4   C09F               RJMP    ??Init16552_2
    991              case 0x00 :
    992                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   000000F6   2D04               MOV     R16, R4
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   E14A               LDI     R20, 26
   \   000000FC   E050               LDI     R21, 0
   \   000000FE   ........           CALL    ?S_EC_MUL_L02
   \   00000102   01F8               MOVW    R31:R30, R17:R16
   \   00000104   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000106   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000108   EF0A               LDI     R16, 250
   \   0000010A   E010               LDI     R17, 0
   \   0000010C   8B04               STD     Z+20, R16
   \   0000010E   8B15               STD     Z+21, R17
    993                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   00000110   ....               LDI     R18, LOW(TxBuf16552Ch0)
   \   00000112   ....               LDI     R19, (TxBuf16552Ch0) >> 8
   \   00000114   2D04               MOV     R16, R4
   \   00000116   E010               LDI     R17, 0
   \   00000118   E14A               LDI     R20, 26
   \   0000011A   E050               LDI     R21, 0
   \   0000011C   ........           CALL    ?S_EC_MUL_L02
   \   00000120   01F8               MOVW    R31:R30, R17:R16
   \   00000122   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000124   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000126   8320               ST      Z, R18
   \   00000128   8331               STD     Z+1, R19
    994                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   0000012A   ....               LDI     R18, LOW(RxBuf16552Ch0)
   \   0000012C   ....               LDI     R19, (RxBuf16552Ch0) >> 8
   \   0000012E   2D04               MOV     R16, R4
   \   00000130   E010               LDI     R17, 0
   \   00000132   E14A               LDI     R20, 26
   \   00000134   E050               LDI     R21, 0
   \   00000136   ........           CALL    ?S_EC_MUL_L02
   \   0000013A   01F8               MOVW    R31:R30, R17:R16
   \   0000013C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000013E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000140   8722               STD     Z+10, R18
   \   00000142   8733               STD     Z+11, R19
    995                  U0_LCR = 0x80;          // set DLAB
   \   00000144   E800               LDI     R16, 128
   \   00000146   9300110B           STS     4363, R16
    996                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000014A   E000               LDI     R16, 0
   \   0000014C   E71D               LDI     R17, 125
   \   0000014E   E020               LDI     R18, 0
   \   00000150   E030               LDI     R19, 0
   \   00000152   01AC               MOVW    R21:R20, R25:R24
   \   00000154   01BD               MOVW    R23:R22, R27:R26
   \   00000156   ........           CALL    ?UL_DIVMOD_L03
   \   0000015A   93001108           STS     4360, R16
    997                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   0000015E   E000               LDI     R16, 0
   \   00000160   E71D               LDI     R17, 125
   \   00000162   E020               LDI     R18, 0
   \   00000164   E030               LDI     R19, 0
   \   00000166   01AC               MOVW    R21:R20, R25:R24
   \   00000168   01BD               MOVW    R23:R22, R27:R26
   \   0000016A   ........           CALL    ?UL_DIVMOD_L03
   \   0000016E   2F01               MOV     R16, R17
   \   00000170   E010               LDI     R17, 0
   \   00000172   93001109           STS     4361, R16
    998                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000176   E003               LDI     R16, 3
   \   00000178   9300110B           STS     4363, R16
    999                  U0_FCR = 0x01;          // enable FIFO ..
   \   0000017C   E001               LDI     R16, 1
   \   0000017E   9300110A           STS     4362, R16
   1000                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   00000182   EC01               LDI     R16, 193
   \   00000184   9300110A           STS     4362, R16
   1001                  U0_IER = 0x03;          // enable TX and RX int.
   \   00000188   E003               LDI     R16, 3
   \   0000018A   93001109           STS     4361, R16
   1002                  U0_MCR = 0x00;          // RTS off
   \   0000018E   E000               LDI     R16, 0
   \   00000190   9300110C           STS     4364, R16
   1003                  break;
   \   00000194   C04F               RJMP    ??Init16552_2
   1004              case 0x01 :
   1005                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   00000196   2D04               MOV     R16, R4
   \   00000198   E010               LDI     R17, 0
   \   0000019A   E14A               LDI     R20, 26
   \   0000019C   E050               LDI     R21, 0
   \   0000019E   ........           CALL    ?S_EC_MUL_L02
   \   000001A2   01F8               MOVW    R31:R30, R17:R16
   \   000001A4   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001A6   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001A8   EF0A               LDI     R16, 250
   \   000001AA   E010               LDI     R17, 0
   \   000001AC   8B04               STD     Z+20, R16
   \   000001AE   8B15               STD     Z+21, R17
   1006                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   000001B0   ....               LDI     R18, LOW(TxBuf16552Ch1)
   \   000001B2   ....               LDI     R19, (TxBuf16552Ch1) >> 8
   \   000001B4   2D04               MOV     R16, R4
   \   000001B6   E010               LDI     R17, 0
   \   000001B8   E14A               LDI     R20, 26
   \   000001BA   E050               LDI     R21, 0
   \   000001BC   ........           CALL    ?S_EC_MUL_L02
   \   000001C0   01F8               MOVW    R31:R30, R17:R16
   \   000001C2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001C4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001C6   8320               ST      Z, R18
   \   000001C8   8331               STD     Z+1, R19
   1007                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   000001CA   ....               LDI     R18, LOW(RxBuf16552Ch1)
   \   000001CC   ....               LDI     R19, (RxBuf16552Ch1) >> 8
   \   000001CE   2D04               MOV     R16, R4
   \   000001D0   E010               LDI     R17, 0
   \   000001D2   E14A               LDI     R20, 26
   \   000001D4   E050               LDI     R21, 0
   \   000001D6   ........           CALL    ?S_EC_MUL_L02
   \   000001DA   01F8               MOVW    R31:R30, R17:R16
   \   000001DC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000001DE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000001E0   8722               STD     Z+10, R18
   \   000001E2   8733               STD     Z+11, R19
   1008                  U1_LCR = 0x80;          // set DLAB
   \   000001E4   E800               LDI     R16, 128
   \   000001E6   93001103           STS     4355, R16
   1009                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000001EA   E000               LDI     R16, 0
   \   000001EC   E71D               LDI     R17, 125
   \   000001EE   E020               LDI     R18, 0
   \   000001F0   E030               LDI     R19, 0
   \   000001F2   01AC               MOVW    R21:R20, R25:R24
   \   000001F4   01BD               MOVW    R23:R22, R27:R26
   \   000001F6   ........           CALL    ?UL_DIVMOD_L03
   \   000001FA   93001100           STS     4352, R16
   1010                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000001FE   E000               LDI     R16, 0
   \   00000200   E71D               LDI     R17, 125
   \   00000202   E020               LDI     R18, 0
   \   00000204   E030               LDI     R19, 0
   \   00000206   01AC               MOVW    R21:R20, R25:R24
   \   00000208   01BD               MOVW    R23:R22, R27:R26
   \   0000020A   ........           CALL    ?UL_DIVMOD_L03
   \   0000020E   2F01               MOV     R16, R17
   \   00000210   E010               LDI     R17, 0
   \   00000212   93001101           STS     4353, R16
   1011                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000216   E003               LDI     R16, 3
   \   00000218   93001103           STS     4355, R16
   1012                  U1_FCR = 0x01;          // enable FIFO ..
   \   0000021C   E001               LDI     R16, 1
   \   0000021E   93001102           STS     4354, R16
   1013                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   00000222   EC01               LDI     R16, 193
   \   00000224   93001102           STS     4354, R16
   1014                  U1_IER = 0x03;          // enable TX and RX int.
   \   00000228   E003               LDI     R16, 3
   \   0000022A   93001101           STS     4353, R16
   1015                  U1_MCR = 0x00;          // RTS off
   \   0000022E   E000               LDI     R16, 0
   \   00000230   93001104           STS     4356, R16
   1016                  break;
   1017              default:
   1018                  break;
   1019              }
   1020          }
   \                     ??Init16552_2:
   \   00000234   E0E5               LDI     R30, 5
   \   00000236   ........           JMP     ?EPILOGUE_B5_L09

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart16552>_0`:
   \   00000000   00                 DB      0
   \   00000001   01                 DB      1
   \   00000002   ....               DW      (??CheckActionUart16552_1) /2
   \   00000004   ....               DW      (??CheckActionUart16552_13) /2
   \   00000006   01                 DB      0x1
   \   00000007   ....               DW      (??CheckActionUart16552_13) /2
   \   00000009   1D                 DB      0x1d
   \   0000000A   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000C   01                 DB      0x1
   \   0000000D   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000F   01                 DB      0x1
   \   00000010   ....               DW      (??CheckActionUart16552_0) /2
   \   00000012   01                 DB      0x1
   \   00000013   ....               DW      (??CheckActionUart16552_3) /2
   \   00000015   01                 DB      0x1
   \   00000016   ....               DW      (??CheckActionUart16552_3) /2
   \   00000018   01                 DB      0x1
   \   00000019   ....               DW      (??CheckActionUart16552_3) /2
   \   0000001B   01                 DB      0x1
   \   0000001C   ....               DW      (??CheckActionUart16552_4) /2
   \   0000001E   01                 DB      0x1
   \   0000001F   ....               DW      (??CheckActionUart16552_6) /2
   \   00000021   07                 DB      0x7
   \   00000022   ....               DW      (??CheckActionUart16552_7) /2
   \   00000024   03                 DB      0x3
   \   00000025   ....               DW      (??CheckActionUart16552_5) /2
   \   00000027   02                 DB      0x2
   \   00000028   ....               DW      (??CheckActionUart16552_2) /2
   \   0000002A   4D                 DB      0x4d
   \   0000002B   ....               DW      (??CheckActionUart16552_8) /2
   \   0000002D   01                 DB      0x1
   \   0000002E   ....               DW      (??CheckActionUart16552_10) /2
   \   00000030   01                 DB      0x1
   \   00000031   ....               DW      (??CheckActionUart16552_9) /2
   \   00000033   34                 DB      0x34
   \   00000034   ....               DW      (??CheckActionUart16552_11) /2
   \   00000036   01                 DB      0x1
   \   00000037   ....               DW      (??CheckActionUart16552_12) /2
   \   00000039   FB                 DB      251

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   CalcDSRxChecksum16552
        4      2 ?S_EC_MUL_L02
      6      2   CalcDSTxChecksumUART16552
        6      2 ?S_EC_MUL_L02
      4      2   CheckActionUart16552
        4      2   -> ReceiveCData
        4      2   -> ReceiveCardEEPROMData
        4      2   -> ReceiveCardStatus
        4      2   -> ReceiveConfigData
        4      2   -> ReceivePTOData
        4      2   -> ReceiveRData
        4      2   -> ReceiveRadarData
        4      2   -> ReceiveRadarInfo
        4      2   -> ReceiveWHData
        4      2   -> ReceiveWISData
        4      2   -> ReceiveWISStatus
        4      2   -> ReceiveWISXData
        4      2 ?CV_SWITCH_L06
        4      2 ?S_EC_MUL_L02
      0      2   EmptyRxBuf16552
      6      2   ExtRS485Ctl
        6      2   -> EmptyRxBuf16552
        6      2   -> Init16552
        6      2   -> OS_Delay
        6      2   -> OS_WaitEventTimed
        6      2   -> ReadEEPROMByte
        6      2   -> SetRS4Port
        6      2   -> Uart_BuildReqC16552
        6      2   -> Uart_BuildReqCardStatus
        6      2   -> Uart_BuildReqConfig
        6      2   -> Uart_BuildReqEEPROMData
        6      2   -> Uart_BuildReqM16552
        6      2   -> Uart_BuildReqR16552
        6      2   -> Uart_BuildReqRadarData
        6      2   -> Uart_BuildReqRadarInfo
        6      2   -> Uart_BuildReqWISCardStatus
        6      2   -> Uart_BuildReqWISData
        6      2   -> Uart_BuildReqWISXData
        6      2   -> Uart_BuildSndData
        6      2   -> Uart_BuildTail16552
        6      2 ?SS_SHR_L02
        6      2 ?S_SHL_L02
      4      2   ExtRS485Rec
        4      2   -> OS_Delay
        4      2   -> OS_SignalEvent
        4      2   -> OS_WaitEventTimed
        4      2   -> Usart16552CheckPackage
        4      2 ?SS_SHR_L02
        4      2 ?S_SHL_L02
      0      2   GoToSyncUART16552
        0      2 ?S_EC_MUL_L02
      5      2   Init16552
        5      2 ?S_EC_MUL_L02
        5      2 ?UL_DIVMOD_L03
      6      2   ReceiveCData
        6      2 ?S_EC_MUL_L02
      4      2   ReceiveCardEEPROMData
        4      2 ?S_EC_MUL_L02
      0      2   ReceiveCardStatus
        0      2 ?S_EC_MUL_L02
      0      2   ReceiveConfigData
        0      2 ?S_EC_MUL_L02
     14      2   ReceivePTOData
       14      2   -> OS_Unuse
       14      2   -> OS_Use
       14      2 ?S_EC_MUL_L02
      4      2   ReceivePacketUart16552
        4      2   -> CalcDSRxChecksum16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_SignalEvent
        4      2 ?S_EC_MUL_L02
      6      2   ReceiveRData
        6      2 ?S_EC_MUL_L02
      8      2   ReceiveRadarData
        8      2 ?S_EC_MUL_L02
      0      2   ReceiveRadarInfo
        0      2 ?S_EC_MUL_L02
      3      2   ReceiveWHData
        3      2   -> OS_Unuse
        3      2   -> OS_Use
        3      2 ?S_EC_MUL_L02
        3      2 ?S_SHL_L02
      8      2   ReceiveWISData
        8      2 ?F_DIV_L04
        8      2 ?SL2F_L04
        8      2 ?S_EC_MUL_L02
        8      2 ?UL2F_L04
      0      2   ReceiveWISStatus
        0      2 ?S_EC_MUL_L02
      2      2   ReceiveWISXData
        2      2 ?S_EC_MUL_L02
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqC16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqCardStatus
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqConfig
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqEEPROMData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqM16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqR16552
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqRadarInfo
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISCardStatus
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildReqWISXData
        0      2 ?S_EC_MUL_L02
      0      2   Uart_BuildSndData
        0      2 ?S_EC_MUL_L02
      4      2   Uart_BuildTail16552
        4      2   -> CalcDSTxChecksumUART16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_Delay
        4      2   -> OS_RetriggerTimer
        4      2   -> Uart_BuildHeader16552
        4      2 ?S_EC_MUL_L02
      5      2   Usart16552CheckPackage
        5      2   -> CheckActionUart16552
        5      2   -> GoToSyncUART16552
        5      2 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      58  ?<Jumptable for CheckActionUart16552>_0
     170  CalcDSRxChecksum16552
      82  CalcDSTxChecksumUART16552
     206  CheckActionUart16552
      44  EmptyRxBuf16552
    1248  ExtRS485Ctl
     628  ExtRS485Rec
     104  GoToSyncUART16552
     570  Init16552
     300  ReceiveCData
     142  ReceiveCardEEPROMData
     128  ReceiveCardStatus
     220  ReceiveConfigData
     328  ReceivePTOData
     682  ReceivePacketUart16552
     300  ReceiveRData
     330  ReceiveRadarData
      70  ReceiveRadarInfo
     300  ReceiveWHData
     352  ReceiveWISData
     196  ReceiveWISStatus
     178  ReceiveWISXData
       8  SetRS4Port
      12  TimoutUART0
      12  TimoutUART1
     250  Uart_BuildHeader16552
     256  Uart_BuildReqC16552
     256  Uart_BuildReqCardStatus
     172  Uart_BuildReqConfig
     264  Uart_BuildReqEEPROMData
     256  Uart_BuildReqM16552
     256  Uart_BuildReqR16552
     256  Uart_BuildReqRadarData
     172  Uart_BuildReqRadarInfo
     172  Uart_BuildReqWISCardStatus
     256  Uart_BuildReqWISData
     256  Uart_BuildReqWISXData
     176  Uart_BuildSndData
     760  Uart_BuildTail16552
     122  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
      2 bytes in segment ABSOLUTE
 10 490 bytes in segment CODE
     58 bytes in segment SWITCH
 
 10 548 bytes of CODE memory
      0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 3
