###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       10/Aug/2021  11:27:14
# Copyright 1996-2021 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\New ANSGCNV\Src\Misc.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW939B.tmp ("D:\S2Prog\IO\New
#        ANSGCNV\Src\Misc.c" --cpu=m128a -ms -o "D:\S2Prog\IO\New
#        ANSGCNV\Debug\Obj" -D OS_LIBMODE_R -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\New ANSGCNV\Debug\List" -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\New
#        ANSGCNV\INC\\" -I "D:\S2Prog\IO\New ANSGCNV\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\New ANSGCNV\Debug\List\Misc.lst
#    Object file  =  D:\S2Prog\IO\New ANSGCNV\Debug\Obj\Misc.r90
#
###############################################################################

D:\S2Prog\IO\New ANSGCNV\Src\Misc.c
      1          /****************************************************************************************
      2          /  Misc. routines
      3          /
      4          ***************************************************************************************/
      5          #include "iom128a.h"

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          /*************************************************************************
     14          *   (This is a task)
     15          *  Watchdog handler
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void WatchDogHandler(void) {
   \                     WatchDogHandler:
     19          
     20              OS_Delay(100);                         // wait 1 seconds for other tasks to start and set TaskStatus
   \   00000000   E604               LDI     R16, 100
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    OS_Delay
     21              asm("WDR");                             // kick the dog!!
   \   00000008   95A8               WDR
     22              WDTCR = 0x1f;
   \   0000000A   E10F               LDI     R16, 31
   \   0000000C   BD01               OUT     0x21, R16
     23              WDTCR = 0x0f;
   \   0000000E   E00F               LDI     R16, 15
   \   00000010   BD01               OUT     0x21, R16
     24              asm("WDR");                             // kick the dog!!
   \   00000012   95A8               WDR
     25              while (1) {
     26                  OS_Delay(500);
   \                     ??WatchDogHandler_0:
   \   00000014   EF04               LDI     R16, 244
   \   00000016   E011               LDI     R17, 1
   \   00000018   ........           CALL    OS_Delay
     27                  __watchdog_reset();               //kick the dog
   \   0000001C   95A8               WDR
   \   0000001E   CFFA               RJMP    ??WatchDogHandler_0
   \   00000020                      REQUIRE _A_WDTCR
     28              }
     29          }
     30          
     31          
     32          /*************************************************************************
     33          *
     34          *  Get my address
     35          *
     36          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     37          char MyAddress(void) {
   \                     MyAddress:
     38          
     39          #if (OS_UART == 0)
     40              return 0;                   // Debug only
     41          #else
     42              return(~(PIND>>4) & 0x0f) ;
   \   00000000   B300               IN      R16, 0x10
   \   00000002   9502               SWAP    R16
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   9500               COM     R16
   \   00000008   700F               ANDI    R16, 0x0F
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_PIND
     43          #endif
     44          }
     45          
     46          /*************************************************************************
     47          *
     48          *  Check for legal float
     49          *
     50          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     51          char IsFloat(float A){
   \                     IsFloat:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01A8               MOVW    R21:R20, R17:R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
     52            long exp;
     53          	// A NAN has an exponent of 255 (shifted left 23 positions) and
     54          	// Denormalized has an exponent set to 0
     55          	exp = *(long*)&A & 0x7F800000L;
   \   00000008   018A               MOVW    R17:R16, R21:R20
   \   0000000A   019B               MOVW    R19:R18, R23:R22
   \   0000000C   7000               ANDI    R16, 0x00
   \   0000000E   7010               ANDI    R17, 0x00
   \   00000010   7820               ANDI    R18, 0x80
   \   00000012   773F               ANDI    R19, 0x7F
   \   00000014   01C8               MOVW    R25:R24, R17:R16
   \   00000016   01D9               MOVW    R27:R26, R19:R18
     56          	//int mantissa = *(int*)&A & 0x007FFFFF;
     57          	if ( exp && (exp != 0x7F800000L)  ) {
   \   00000018   2F08               MOV     R16, R24
   \   0000001A   2B09               OR      R16, R25
   \   0000001C   2B0A               OR      R16, R26
   \   0000001E   2B0B               OR      R16, R27
   \   00000020   F051               BREQ    ??IsFloat_0
   \   00000022   3080               CPI     R24, 0
   \   00000024   E000               LDI     R16, 0
   \   00000026   0790               CPC     R25, R16
   \   00000028   E800               LDI     R16, 128
   \   0000002A   07A0               CPC     R26, R16
   \   0000002C   E70F               LDI     R16, 127
   \   0000002E   07B0               CPC     R27, R16
   \   00000030   F011               BREQ    ??IsFloat_0
     58          		return(true);
   \   00000032   E001               LDI     R16, 1
   \   00000034   C001               RJMP    ??IsFloat_1
     59            }
     60          	return(false);
   \                     ??IsFloat_0:
   \   00000036   E000               LDI     R16, 0
   \                     ??IsFloat_1:
   \   00000038   E0E4               LDI     R30, 4
   \   0000003A   ........           JMP     ?EPILOGUE_B4_L09
     61          }
     62          
     63          /*************************************************************************
     64          *
     65          *  Write to the leds
     66          *
     67          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     68          void Led(short no, short state)
   \                     Led:
     69          {
     70              switch ( no ) {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   9731               SBIW    R31:R30, 1
   \   00000004   F019               BREQ    ??Led_0
   \   00000006   9731               SBIW    R31:R30, 1
   \   00000008   F149               BREQ    ??Led_1
   \   0000000A   9508               RET
     71              case    1:                                      /* LED 1 */
     72                  switch ( state ) {
   \                     ??Led_0:
   \   0000000C   3021               CPI     R18, 1
   \   0000000E   E040               LDI     R20, 0
   \   00000010   0734               CPC     R19, R20
   \   00000012   F491               BRNE    ??Led_2
     73                  case LED_ON :
     74                      ClrBit(PORTD,LED1);
   \   00000014   94F8               cli
   \   00000016   9140....           LDS     R20, (OS_Global + 1)
   \   0000001A   9543               INC     R20
   \   0000001C   9340....           STS     (OS_Global + 1), R20
   \   00000020   9895               CBI     0x12, 0x05
   \   00000022   9140....           LDS     R20, (OS_Global + 1)
   \   00000026   954A               DEC     R20
   \   00000028   9340....           STS     (OS_Global + 1), R20
   \   0000002C   9140....           LDS     R20, (OS_Global + 1)
   \   00000030   2344               TST     R20
   \   00000032   F499               BRNE    ??Led_3
   \   00000034   9478               sei
     75                      break ;
   \   00000036   9508               RET
     76                  case LED_OFF :
     77                  default :
     78                      SetBitsOr(PORTD,LED1);
   \                     ??Led_2:
   \   00000038   94F8               cli
   \   0000003A   9140....           LDS     R20, (OS_Global + 1)
   \   0000003E   9543               INC     R20
   \   00000040   9340....           STS     (OS_Global + 1), R20
   \   00000044   9A95               SBI     0x12, 0x05
   \   00000046   9140....           LDS     R20, (OS_Global + 1)
   \   0000004A   954A               DEC     R20
   \   0000004C   9340....           STS     (OS_Global + 1), R20
   \   00000050   9140....           LDS     R20, (OS_Global + 1)
   \   00000054   2344               TST     R20
   \   00000056   F589               BRNE    ??Led_4
   \   00000058   9478               sei
     79                      break ;
     80                  }
     81                  break ;
   \                     ??Led_3:
   \   0000005A   9508               RET
     82              case    2:                                      /* LED 2 */
     83                  switch ( state ) {
   \                     ??Led_1:
   \   0000005C   3021               CPI     R18, 1
   \   0000005E   E040               LDI     R20, 0
   \   00000060   0734               CPC     R19, R20
   \   00000062   F4B1               BRNE    ??Led_5
     84                  case LED_ON :
     85                      ClrBit(PORTF,LED2);
   \   00000064   94F8               cli
   \   00000066   9140....           LDS     R20, (OS_Global + 1)
   \   0000006A   9543               INC     R20
   \   0000006C   9340....           STS     (OS_Global + 1), R20
   \   00000070   91400062           LDS     R20, 98
   \   00000074   7F4D               ANDI    R20, 0xFD
   \   00000076   93400062           STS     98, R20
   \   0000007A   9140....           LDS     R20, (OS_Global + 1)
   \   0000007E   954A               DEC     R20
   \   00000080   9340....           STS     (OS_Global + 1), R20
   \   00000084   9140....           LDS     R20, (OS_Global + 1)
   \   00000088   2344               TST     R20
   \   0000008A   F4B9               BRNE    ??Led_4
   \   0000008C   9478               sei
     86                      break ;
   \   0000008E   9508               RET
     87                  case LED_OFF :
     88                  default :
     89                      SetBitsOr(PORTF,LED2);
   \                     ??Led_5:
   \   00000090   94F8               cli
   \   00000092   9140....           LDS     R20, (OS_Global + 1)
   \   00000096   9543               INC     R20
   \   00000098   9340....           STS     (OS_Global + 1), R20
   \   0000009C   91400062           LDS     R20, 98
   \   000000A0   6042               ORI     R20, 0x02
   \   000000A2   93400062           STS     98, R20
   \   000000A6   9140....           LDS     R20, (OS_Global + 1)
   \   000000AA   954A               DEC     R20
   \   000000AC   9340....           STS     (OS_Global + 1), R20
   \   000000B0   9140....           LDS     R20, (OS_Global + 1)
   \   000000B4   2344               TST     R20
   \   000000B6   F409               BRNE    ??Led_4
   \   000000B8   9478               sei
     90                      break ;
     91                  }
     92                  break ;
     93              default :
     94                  break ;
     95              }
     96          }
   \                     ??Led_4:
   \   000000BA   9508               RET
   \   000000BC                      REQUIRE _A_PORTD
   \   000000BC                      REQUIRE _A_PORTF
     97          
     98          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   IsFloat
      0      2   Led
      0      2   MyAddress
      0      2   WatchDogHandler
        0      2   -> OS_Delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      62  IsFloat
     188  Led
      12  MyAddress
      32  WatchDogHandler
       1  _A_PIND
       1  _A_PORTD
       1  _A_PORTF
       1  _A_WDTCR

 
   4 bytes in segment ABSOLUTE
 294 bytes in segment CODE
 
 294 bytes of CODE memory
   0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
