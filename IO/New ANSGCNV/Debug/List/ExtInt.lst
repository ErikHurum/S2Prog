###############################################################################
#
# IAR C/C++ Compiler V7.30.4.1668 for Microchip AVR       10/Aug/2021  11:27:14
# Copyright 1996-2021 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\New ANSGCNV\Src\ExtInt.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW801E.tmp ("D:\S2Prog\IO\New
#        ANSGCNV\Src\ExtInt.c" --cpu=m128a -ms -o "D:\S2Prog\IO\New
#        ANSGCNV\Debug\Obj" -D OS_LIBMODE_R -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\New ANSGCNV\Debug\List" -y --initializers_in_flash
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I "D:\S2Prog\IO\New
#        ANSGCNV\INC\\" -I "D:\S2Prog\IO\New ANSGCNV\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -On)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\New ANSGCNV\Debug\List\ExtInt.lst
#    Object file  =  D:\S2Prog\IO\New ANSGCNV\Debug\Obj\ExtInt.r90
#
###############################################################################

D:\S2Prog\IO\New ANSGCNV\Src\ExtInt.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom128a.h"
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          
     11          /*************************************************************************
     12          *
     13          *  External int 0 (UART PC16554 on AN-ZB485 or ADready on AN-ZBANA)
     14          *
     15          *************************************************************************/
     16          #pragma vector=INT0_vect

   \                                 In  segment CODE, align 2, keep-with-next
     17          __interrupt void IntHandler_INT0( void ){               //Int handler for ext int 0
   \                     IntHandler_INT0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     18          
     19              // OBS!!!
     20              // Uses UART16552[].TxStatus as intreason and
     21              // UART16552[].TxSeqCnt as counter because these needs to be globale 
     22              // by using OS_EnterIntStack()
     23          
     24              
     25              OS_EnterInterrupt();
   \   00000024   ........           CALL    OS_EnterInterrupt
     26              OS_EnterIntStack();
   \   00000028   94F8               cli
   \   0000002A   ........           CALL    OS__EnterIntStack
   \   0000002E   9100....           LDS     R16, (OS_Global + 1)
   \   00000032   2300               TST     R16
   \   00000034   F409               BRNE    ??IntHandler_INT0_0
   \   00000036   9478               sei
     27          
     28              switch (UnitID) {
   \                     ??IntHandler_INT0_0:
   \   00000038   9100....           LDS     R16, UnitID
   \   0000003C   3004               CPI     R16, 4
     29              case AN_SGCNV:                  // AN-ZBANA ADready
     30                  //
     31                  break;
     32              }
     33              OS_LeaveIntStack();
   \   0000003E   94F8               cli
   \   00000040   ........           CALL    OS__LeaveIntStack
     34              OS_LeaveInterruptNoSwitch();
   \   00000044   ........           CALL    OS_LeaveInterruptNoSwitch
     35          
     36          }
   \   00000048   BF9B               OUT     0x3B, R25
   \   0000004A   BF8F               OUT     0x3F, R24
   \   0000004C   9109               LD      R16, Y+
   \   0000004E   9119               LD      R17, Y+
   \   00000050   9129               LD      R18, Y+
   \   00000052   9139               LD      R19, Y+
   \   00000054   9149               LD      R20, Y+
   \   00000056   9159               LD      R21, Y+
   \   00000058   9169               LD      R22, Y+
   \   0000005A   9179               LD      R23, Y+
   \   0000005C   9009               LD      R0, Y+
   \   0000005E   9019               LD      R1, Y+
   \   00000060   9029               LD      R2, Y+
   \   00000062   9039               LD      R3, Y+
   \   00000064   91E9               LD      R30, Y+
   \   00000066   91F9               LD      R31, Y+
   \   00000068   9189               LD      R24, Y+
   \   0000006A   9199               LD      R25, Y+
   \   0000006C   9518               RETI
     37          
     38          
     39          /*************************************************************************
     40          *
     41          *  External int 1 (UART PC16554 on AN-ZB485)
     42          *
     43          *************************************************************************/

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     44          long IntCnt  = 0;
   \                     IntCnt:
   \   00000000                      DS8 4
     45          
     46          #pragma vector=INT1_vect
     47          

   \                                 In  segment CODE, align 2, keep-with-next
     48          __interrupt void IntHandler_INT1( void ){               //Int handler for Ext int 1
   \                     IntHandler_INT1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     49          
     50              // OBS!!!
     51              // Uses UART16552[].TxStatus as intreason and
     52              // UART16552[].TxSeqCnt as counter because these needs to be globale 
     53              // by using OS_EnterIntStack()
     54              
     55            
     56              OS_EnterInterrupt();
   \   00000024   ........           CALL    OS_EnterInterrupt
     57              //OS_EnterIntStack();
     58              IntCnt++;
   \   00000028   ....               LDI     R30, LOW(IntCnt)
   \   0000002A   ....               LDI     R31, (IntCnt) >> 8
   \   0000002C   8100               LD      R16, Z
   \   0000002E   8111               LDD     R17, Z+1
   \   00000030   8122               LDD     R18, Z+2
   \   00000032   8133               LDD     R19, Z+3
   \   00000034   5F0F               SUBI    R16, 255
   \   00000036   4F1F               SBCI    R17, 255
   \   00000038   4F2F               SBCI    R18, 255
   \   0000003A   4F3F               SBCI    R19, 255
   \   0000003C   8300               ST      Z, R16
   \   0000003E   8311               STD     Z+1, R17
   \   00000040   8322               STD     Z+2, R18
   \   00000042   8333               STD     Z+3, R19
     59              switch (UnitID) {
   \   00000044   9100....           LDS     R16, UnitID
   \   00000048   3004               CPI     R16, 4
   \   0000004A   F429               BRNE    ??IntHandler_INT1_0
     60          	case AN_SGCNV:                  // AN-ZBANA Not connected!
     61          		OS_SignalEvent(1, &TCB_AD7715);
   \   0000004C   ....               LDI     R18, LOW(TCB_AD7715)
   \   0000004E   ....               LDI     R19, (TCB_AD7715) >> 8
   \   00000050   E001               LDI     R16, 1
   \   00000052   ........           CALL    OS_SignalEvent
     62                  break;
     63              }
     64              //OS_LeaveIntStack();
     65              OS_LeaveInterruptNoSwitch();
   \                     ??IntHandler_INT1_0:
   \   00000056   ........           CALL    OS_LeaveInterruptNoSwitch
     66          }
   \   0000005A   BF9B               OUT     0x3B, R25
   \   0000005C   BF8F               OUT     0x3F, R24
   \   0000005E   9109               LD      R16, Y+
   \   00000060   9119               LD      R17, Y+
   \   00000062   9129               LD      R18, Y+
   \   00000064   9139               LD      R19, Y+
   \   00000066   9149               LD      R20, Y+
   \   00000068   9159               LD      R21, Y+
   \   0000006A   9169               LD      R22, Y+
   \   0000006C   9179               LD      R23, Y+
   \   0000006E   9009               LD      R0, Y+
   \   00000070   9019               LD      R1, Y+
   \   00000072   9029               LD      R2, Y+
   \   00000074   9039               LD      R3, Y+
   \   00000076   91E9               LD      R30, Y+
   \   00000078   91F9               LD      R31, Y+
   \   0000007A   9189               LD      R24, Y+
   \   0000007C   9199               LD      R25, Y+
   \   0000007E   9518               RETI

   \                                 In  segment INTVEC, offset 0x4, root
   \                     `??IntHandler_INT0::??INTVEC 4`:
   \   00000004   ........           JMP     IntHandler_INT0

   \                                 In  segment INTVEC, offset 0x8, root
   \                     `??IntHandler_INT1::??INTVEC 8`:
   \   00000008   ........           JMP     IntHandler_INT1

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_INT0
       16      2   -> OS_EnterInterrupt
       16      2   -> OS_LeaveInterruptNoSwitch
       16      2   -> OS__EnterIntStack
       16      2   -> OS__LeaveIntStack
     16      2   IntHandler_INT1
       16      2   -> OS_EnterInterrupt
       16      2   -> OS_LeaveInterruptNoSwitch
       16      2   -> OS_SignalEvent


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  IntCnt
     110  IntHandler_INT0
       4  IntHandler_INT0::??INTVEC 4
     128  IntHandler_INT1
       4  IntHandler_INT1::??INTVEC 8
       7  -- Other

 
 238 bytes in segment CODE
   7 bytes in segment INITTAB
   8 bytes in segment INTVEC
   4 bytes in segment NEAR_Z
 
 238 bytes of CODE memory (+ 15 bytes shared)
   4 bytes of DATA memory

Errors: none
Warnings: 4
