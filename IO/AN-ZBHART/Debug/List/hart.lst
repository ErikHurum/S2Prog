###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       02/Oct/2023  15:18:53
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\hart.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWCFE2.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\hart.c" --cpu=m1280
#        -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\INC\\" -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\List\hart.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\Obj\hart.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\hart.c
      1          #include <stdio.h>
      2          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x136
   \   union <unnamed> volatile __ext_io _A_UDR3
   \                     _A_UDR3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x134
   \   union <unnamed> volatile __ext_io _A_UBRR3
   \                     _A_UBRR3:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x132
   \   union <unnamed> volatile __ext_io _A_UCSR3C
   \                     _A_UCSR3C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x131
   \   union <unnamed> volatile __ext_io _A_UCSR3B
   \                     _A_UCSR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x130
   \   union <unnamed> volatile __ext_io _A_UCSR3A
   \                     _A_UCSR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd6
   \   union <unnamed> volatile __io _A_UDR2
   \                     _A_UDR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd4
   \   union <unnamed> volatile __io _A_UBRR2
   \                     _A_UBRR2:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xd2
   \   union <unnamed> volatile __io _A_UCSR2C
   \                     _A_UCSR2C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd1
   \   union <unnamed> volatile __io _A_UCSR2B
   \                     _A_UCSR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd0
   \   union <unnamed> volatile __io _A_UCSR2A
   \                     _A_UCSR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xce
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1
      3          #include "version.h"
      4          #include "inavr.h"
      5          #include "RTOS.h"
      6          
      7          #include "constants.h"
      8          #include "hart_common.h"
      9          #include "hart.h"
     10          #include "hart_diag.h"
     11          #include "hart_msg.h"
     12          #include "hart_gpio.h"
     13          #include "externals.h"
     14          
     15          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          extern volatile char CriticalComError = 0;
   \                     CriticalComError:
   \   00000000                      DS8 1
     17          ////////////////////////////////////////////////////////////////////////////////
     18          //
     19          // private prototypes
     20          //
     21          ////////////////////////////////////////////////////////////////////////////////
     22          static void hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off);
     23          
     24          static void hart_config_uart(HartTaskStruct *task);
     25          static void hart_reset_tx(HartTaskStruct *task);
     26          static void hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl);
     27          static void hart_start_transaction(HartTaskStruct *task);
     28          
     29          static void hart_irq_tx_next(HartTaskStruct *task);
     30          static void hart_irq_finish_tx(HartTaskStruct *task);
     31          
     32          static void do_hart_transaction(HartTaskStruct *task, hart_channel_t current_chnl, HartTransaction *t);
     33          
     34          void HART_Task(void *pVoid);
     35          
     36          static void vega_radar_make_request(HartTaskStruct *task, hart_channel_t current_chnl);
     37          static void vega_radar_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type);
     38          //static void vega_radar_handle_rx_complete(HartTaskStruct *task, hart_channel_t current_chnl);
     39          static uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl);
     40          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     41          HartTaskStruct       _hart_task0 =
   \                     _hart_task0:
   \   00000000                      DS8 1431
   \   00000597                      REQUIRE `?<Initializer for _hart_task0>`
     42          {
     43          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     44              .StackTest1   = { "123456789" },
     45              .StackTest2   = { "123456789" },
     46          #endif
     47              .modem_no     = hart_modem_0,
     48              .start_chnl   = hart_channel_0,
     49              .end_chnl     = hart_channel_3,
     50          };
     51          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     52          HartTaskStruct       _hart_task1 =
   \                     _hart_task1:
   \   00000000                      DS8 1431
   \   00000597                      REQUIRE `?<Initializer for _hart_task1>`
     53          {
     54          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     55              .StackTest1   = { "123456789" },
     56              .StackTest2   = { "123456789" },
     57          #endif
     58              .modem_no     = hart_modem_1,
     59              .start_chnl   = hart_channel_4,
     60              .end_chnl     = hart_channel_7,
     61          };
     62          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     63          HartTaskStruct       _hart_task2 =
   \                     _hart_task2:
   \   00000000                      DS8 1431
   \   00000597                      REQUIRE `?<Initializer for _hart_task2>`
     64          {
     65          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     66              .StackTest1   = { "123456789" },
     67              .StackTest2   = { "123456789" },
     68          #endif
     69              .modem_no     = hart_modem_2,
     70              .start_chnl   = hart_channel_8,
     71              .end_chnl     = hart_channel_11,
     72          };
     73          
     74          ////////////////////////////////////////////////////////////////////////////////
     75          //
     76          // hart module privates
     77          //
     78          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     79          static HartTransaction   _demo1_transaction =
   \                     _demo1_transaction:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for _demo1_transaction>`
     80          {
     81              .make_request = vega_radar_make_request,
     82              .complete     = ReceiveReply, //vega_radar_handle_rx_complete,
     83              .error        = vega_radar_handle_rx_error,
     84          };
     85          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     86          static HartChannel          _hart_channels[HART_MAX_CHANNEL] =
   \                     _hart_channels:
   \   00000000                      DS8 276
   \   00000114                      REQUIRE `?<Initializer for _hart_channels>`
     87          {
     88              { .chnl_num       = hart_channel_0  },
     89              { .chnl_num       = hart_channel_1  },
     90              { .chnl_num       = hart_channel_2  },
     91              { .chnl_num       = hart_channel_3  },
     92              { .chnl_num       = hart_channel_4  },
     93              { .chnl_num       = hart_channel_5  },
     94              { .chnl_num       = hart_channel_6  },
     95              { .chnl_num       = hart_channel_7  },
     96              { .chnl_num       = hart_channel_8  },
     97              { .chnl_num       = hart_channel_9  },
     98              { .chnl_num       = hart_channel_10 },
     99              { .chnl_num       = hart_channel_11 },
    100          };
    101          
    102          #define HART_EEPROM_START_ADDRESS         0x800
    103          #define HART_EEPROM_RSP_DELAY_ADDRESS     (HART_EEPROM_START_ADDRESS + 2)
    104          
    105          static volatile uint16_t          _eeprom_power_status;
    106          static volatile uint16_t          _rsp_delay = 0;
    107          
    108          ////////////////////////////////////////////////////////////////////////////////
    109          //
    110          // hart channel specifics
    111          //
    112          ////////////////////////////////////////////////////////////////////////////////
    113          /*
    114          void hart_debug_check(void)
    115          {
    116            if((UCSR2B & _BV(TXCIE2)) == 0)
    117            {
    118              while(1)
    119                ;
    120            }
    121          }
    122          */
    123          
    124          /*
    125          static inline void hart_channel_lock(HartChannel *channel) {
    126              switch ( channel->chnl_num ) {
    127              case hart_channel_0:
    128              case hart_channel_1:
    129              case hart_channel_2:
    130              case hart_channel_3:
    131                  OS_Use(&_hart_task0.channel_lock);
    132                  break;
    133          
    134              case hart_channel_4:
    135              case hart_channel_5:
    136              case hart_channel_6:
    137              case hart_channel_7:
    138                  OS_Use(&_hart_task1.channel_lock);
    139                  break;
    140          
    141              case hart_channel_8:
    142              case hart_channel_9:
    143              case hart_channel_10:
    144              case hart_channel_11:
    145                  OS_Use(&_hart_task2.channel_lock);
    146                  break;
    147              }
    148          }
    149          
    150          static inline void hart_channel_unlock(HartChannel *channel) {
    151              switch ( channel->chnl_num ) {
    152              case hart_channel_0:
    153              case hart_channel_1:
    154              case hart_channel_2:
    155              case hart_channel_3:
    156                  OS_Unuse(&_hart_task0.channel_lock);
    157                  break;
    158          
    159              case hart_channel_4:
    160              case hart_channel_5:
    161              case hart_channel_6:
    162              case hart_channel_7:
    163                  OS_Unuse(&_hart_task1.channel_lock);
    164                  break;
    165          
    166              case hart_channel_8:
    167              case hart_channel_9:
    168              case hart_channel_10:
    169              case hart_channel_11:
    170                  OS_Unuse(&_hart_task2.channel_lock);
    171                  break;
    172              }
    173          }
    174          */

   \                                 In  segment CODE, align 2, keep-with-next
    175          static inline void hart_channel_reset(HartChannel *channel) {
   \                     hart_channel_reset:
    176              //hart_channel_lock(channel);
    177          
    178              channel->status         = HartChannelStatus_No_Response;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   E021               LDI     R18, 1
   \   00000004   8321               STD     Z+1, R18
    179              channel->power_status   = HartChannelPowerStatus_OFF;
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   E021               LDI     R18, 1
   \   0000000A   8322               STD     Z+2, R18
    180          
    181              channel->rx_invalid_msg = 0;
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   E040               LDI     R20, 0
   \   00000010   E050               LDI     R21, 0
   \   00000012   E060               LDI     R22, 0
   \   00000014   E070               LDI     R23, 0
   \   00000016   8343               STD     Z+3, R20
   \   00000018   8354               STD     Z+4, R21
   \   0000001A   8365               STD     Z+5, R22
   \   0000001C   8376               STD     Z+6, R23
    182              channel->rx_csum_err    = 0;
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   E040               LDI     R20, 0
   \   00000022   E050               LDI     R21, 0
   \   00000024   E060               LDI     R22, 0
   \   00000026   E070               LDI     R23, 0
   \   00000028   8347               STD     Z+7, R20
   \   0000002A   8750               STD     Z+8, R21
   \   0000002C   8761               STD     Z+9, R22
   \   0000002E   8772               STD     Z+10, R23
    183              channel->rx_timeout     = 0;
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   E040               LDI     R20, 0
   \   00000034   E050               LDI     R21, 0
   \   00000036   E060               LDI     R22, 0
   \   00000038   E070               LDI     R23, 0
   \   0000003A   8743               STD     Z+11, R20
   \   0000003C   8754               STD     Z+12, R21
   \   0000003E   8765               STD     Z+13, R22
   \   00000040   8776               STD     Z+14, R23
    184              channel->total_reqs     = 0;
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   E040               LDI     R20, 0
   \   00000046   E050               LDI     R21, 0
   \   00000048   E060               LDI     R22, 0
   \   0000004A   E070               LDI     R23, 0
   \   0000004C   8747               STD     Z+15, R20
   \   0000004E   8B50               STD     Z+16, R21
   \   00000050   8B61               STD     Z+17, R22
   \   00000052   8B72               STD     Z+18, R23
    185              channel->total_success  = 0;
   \   00000054   01F8               MOVW    R31:R30, R17:R16
   \   00000056   E040               LDI     R20, 0
   \   00000058   E050               LDI     R21, 0
   \   0000005A   E060               LDI     R22, 0
   \   0000005C   E070               LDI     R23, 0
   \   0000005E   8B43               STD     Z+19, R20
   \   00000060   8B54               STD     Z+20, R21
   \   00000062   8B65               STD     Z+21, R22
   \   00000064   8B76               STD     Z+22, R23
    186          
    187              //hart_channel_unlock(channel);
    188          }
   \   00000066   9508               RET
    189          

   \                                 In  segment CODE, align 2, keep-with-next
    190          static inline void hart_channel_set_status(HartChannel *channel, HartChannelStatus status) {
   \                     hart_channel_set_status:
    191              //hart_channel_lock(channel);
    192          
    193              channel->status     = status;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8321               STD     Z+1, R18
    194          
    195              //hart_channel_unlock(channel);
    196          }
   \   00000004   9508               RET
    197          

   \                                 In  segment CODE, align 2, keep-with-next
    198          static inline void hart_channel_set_power_status(HartChannel *channel, HartChannelPowerStatus status) {
   \                     hart_channel_set_power_status:
    199              //hart_channel_lock(channel);
    200          
    201              channel->power_status   = status;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8322               STD     Z+2, R18
    202          
    203              //hart_channel_unlock(channel);
    204          }
   \   00000004   9508               RET
    205          

   \                                 In  segment CODE, align 2, keep-with-next
    206          static inline void hart_channel_inc_stat(HartChannel *channel, HartChannelStatItem item) {
   \                     hart_channel_inc_stat:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
    207              //hart_channel_lock(channel);
    208          
    209              switch ( item ) {
   \   00000002   2F02               MOV     R16, R18
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F049               BREQ    ??hart_channel_inc_stat_0
   \   00000008   950A               DEC     R16
   \   0000000A   F0A1               BREQ    ??hart_channel_inc_stat_1
   \   0000000C   950A               DEC     R16
   \   0000000E   F0F9               BREQ    ??hart_channel_inc_stat_2
   \   00000010   950A               DEC     R16
   \   00000012   F151               BREQ    ??hart_channel_inc_stat_3
   \   00000014   950A               DEC     R16
   \   00000016   F1A9               BREQ    ??hart_channel_inc_stat_4
   \   00000018   9508               RET
    210              case HartChannelStatItem_RX_INVALID:
    211                  channel->rx_invalid_msg++;
   \                     ??hart_channel_inc_stat_0:
   \   0000001A   8143               LDD     R20, Z+3
   \   0000001C   8154               LDD     R21, Z+4
   \   0000001E   8165               LDD     R22, Z+5
   \   00000020   8176               LDD     R23, Z+6
   \   00000022   5F4F               SUBI    R20, 255
   \   00000024   4F5F               SBCI    R21, 255
   \   00000026   4F6F               SBCI    R22, 255
   \   00000028   4F7F               SBCI    R23, 255
   \   0000002A   8343               STD     Z+3, R20
   \   0000002C   8354               STD     Z+4, R21
   \   0000002E   8365               STD     Z+5, R22
   \   00000030   8376               STD     Z+6, R23
    212                  break;
   \   00000032   9508               RET
    213          
    214              case HartChannelStatItem_RX_CSUM:
    215                  channel->rx_csum_err++;
   \                     ??hart_channel_inc_stat_1:
   \   00000034   8147               LDD     R20, Z+7
   \   00000036   8550               LDD     R21, Z+8
   \   00000038   8561               LDD     R22, Z+9
   \   0000003A   8572               LDD     R23, Z+10
   \   0000003C   5F4F               SUBI    R20, 255
   \   0000003E   4F5F               SBCI    R21, 255
   \   00000040   4F6F               SBCI    R22, 255
   \   00000042   4F7F               SBCI    R23, 255
   \   00000044   8347               STD     Z+7, R20
   \   00000046   8750               STD     Z+8, R21
   \   00000048   8761               STD     Z+9, R22
   \   0000004A   8772               STD     Z+10, R23
    216                  break;
   \   0000004C   9508               RET
    217          
    218              case HartChannelStatItem_RX_TIMEOUT:
    219                  channel->rx_timeout++;
   \                     ??hart_channel_inc_stat_2:
   \   0000004E   8543               LDD     R20, Z+11
   \   00000050   8554               LDD     R21, Z+12
   \   00000052   8565               LDD     R22, Z+13
   \   00000054   8576               LDD     R23, Z+14
   \   00000056   5F4F               SUBI    R20, 255
   \   00000058   4F5F               SBCI    R21, 255
   \   0000005A   4F6F               SBCI    R22, 255
   \   0000005C   4F7F               SBCI    R23, 255
   \   0000005E   8743               STD     Z+11, R20
   \   00000060   8754               STD     Z+12, R21
   \   00000062   8765               STD     Z+13, R22
   \   00000064   8776               STD     Z+14, R23
    220                  break;
   \   00000066   9508               RET
    221          
    222              case HartChannelStatItem_TOTAL_REQS:
    223                  channel->total_reqs++;
   \                     ??hart_channel_inc_stat_3:
   \   00000068   8547               LDD     R20, Z+15
   \   0000006A   8950               LDD     R21, Z+16
   \   0000006C   8961               LDD     R22, Z+17
   \   0000006E   8972               LDD     R23, Z+18
   \   00000070   5F4F               SUBI    R20, 255
   \   00000072   4F5F               SBCI    R21, 255
   \   00000074   4F6F               SBCI    R22, 255
   \   00000076   4F7F               SBCI    R23, 255
   \   00000078   8747               STD     Z+15, R20
   \   0000007A   8B50               STD     Z+16, R21
   \   0000007C   8B61               STD     Z+17, R22
   \   0000007E   8B72               STD     Z+18, R23
    224                  break;
   \   00000080   9508               RET
    225          
    226              case HartChannelStatItem_TOTAL_SUCCESS:
    227                  channel->total_success++;
   \                     ??hart_channel_inc_stat_4:
   \   00000082   8943               LDD     R20, Z+19
   \   00000084   8954               LDD     R21, Z+20
   \   00000086   8965               LDD     R22, Z+21
   \   00000088   8976               LDD     R23, Z+22
   \   0000008A   5F4F               SUBI    R20, 255
   \   0000008C   4F5F               SBCI    R21, 255
   \   0000008E   4F6F               SBCI    R22, 255
   \   00000090   4F7F               SBCI    R23, 255
   \   00000092   8B43               STD     Z+19, R20
   \   00000094   8B54               STD     Z+20, R21
   \   00000096   8B65               STD     Z+21, R22
   \   00000098   8B76               STD     Z+22, R23
    228                  break;
    229              }
    230          
    231              //hart_channel_unlock(channel);
    232          }
   \   0000009A   9508               RET
    233          
    234          
    235          ////////////////////////////////////////////////////////////////////////////////
    236          //
    237          // private utilities
    238          //
    239          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    240          static void hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off) {
   \                     hart_control_power:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   2FB1               MOV     R27, R17
    241              //
    242              // XXX be careful about channel lock when calling this function.
    243              //
    244              HartChannel *c = &_hart_channels[chnl];
   \   00000008   2F0A               MOV     R16, R26
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   E147               LDI     R20, 23
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   ....               LDI     R24, LOW(_hart_channels)
   \   00000016   ....               LDI     R25, (_hart_channels) >> 8
   \   00000018   0F80               ADD     R24, R16
   \   0000001A   1F91               ADC     R25, R17
    245          
    246              if ( on_off == HartChannelPowerStatus_ON ) {
   \   0000001C   23BB               TST     R27
   \   0000001E   F421               BRNE    ??hart_control_power_0
    247                  hart_gpio_power_on(chnl);
   \   00000020   2F0A               MOV     R16, R26
   \   00000022   ........           CALL    hart_gpio_power_on
   \   00000026   C003               RJMP    ??hart_control_power_1
    248              } else {
    249                  hart_gpio_power_off(chnl);
   \                     ??hart_control_power_0:
   \   00000028   2F0A               MOV     R16, R26
   \   0000002A   ........           CALL    hart_gpio_power_off
    250              }
    251              hart_channel_set_power_status(c, on_off);
   \                     ??hart_control_power_1:
   \   0000002E   2F2B               MOV     R18, R27
   \   00000030   018C               MOVW    R17:R16, R25:R24
   \   00000032   ....               RCALL   hart_channel_set_power_status
    252          }
   \   00000034   E0E4               LDI     R30, 4
   \   00000036   ........           JMP     ?EPILOGUE_B4_L09
    253          

   \                                 In  segment CODE, align 2, keep-with-next
    254          static void hart_control_Rx_Enable(hart_modem_t   modem, uint8_t enable) {
   \                     hart_control_Rx_Enable:
    255              switch ( modem ) {
   \   00000000   2F20               MOV     R18, R16
   \   00000002   5020               SUBI    R18, 0
   \   00000004   F029               BREQ    ??hart_control_Rx_Enable_0
   \   00000006   952A               DEC     R18
   \   00000008   F089               BREQ    ??hart_control_Rx_Enable_1
   \   0000000A   952A               DEC     R18
   \   0000000C   F0E9               BREQ    ??hart_control_Rx_Enable_2
   \   0000000E   9508               RET
    256              case hart_modem_0:
    257                  if ( enable ) {
   \                     ??hart_control_Rx_Enable_0:
   \   00000010   2311               TST     R17
   \   00000012   F031               BREQ    ??hart_control_Rx_Enable_3
    258                      UCSR1B |= _BV(RXEN1);
   \   00000014   912000C9           LDS     R18, 201
   \   00000018   6120               ORI     R18, 0x10
   \   0000001A   932000C9           STS     201, R18
   \   0000001E   9508               RET
    259                  } else {
    260                      UCSR1B &= ~_BV(RXEN1);
   \                     ??hart_control_Rx_Enable_3:
   \   00000020   912000C9           LDS     R18, 201
   \   00000024   7E2F               ANDI    R18, 0xEF
   \   00000026   932000C9           STS     201, R18
    261                  }
    262                  break;
   \   0000002A   9508               RET
    263          
    264              case hart_modem_1:
    265                  if ( enable ) {
   \                     ??hart_control_Rx_Enable_1:
   \   0000002C   2311               TST     R17
   \   0000002E   F031               BREQ    ??hart_control_Rx_Enable_4
    266                      UCSR2B |= _BV(RXEN2);
   \   00000030   912000D1           LDS     R18, 209
   \   00000034   6120               ORI     R18, 0x10
   \   00000036   932000D1           STS     209, R18
   \   0000003A   9508               RET
    267                  } else {
    268                      UCSR2B &= ~_BV(RXEN2);
   \                     ??hart_control_Rx_Enable_4:
   \   0000003C   912000D1           LDS     R18, 209
   \   00000040   7E2F               ANDI    R18, 0xEF
   \   00000042   932000D1           STS     209, R18
    269                  }
    270                  break;
   \   00000046   9508               RET
    271          
    272              case hart_modem_2:
    273                  if ( enable ) {
   \                     ??hart_control_Rx_Enable_2:
   \   00000048   2311               TST     R17
   \   0000004A   F031               BREQ    ??hart_control_Rx_Enable_5
    274                      UCSR3B |= _BV(RXEN3);
   \   0000004C   91200131           LDS     R18, 305
   \   00000050   6120               ORI     R18, 0x10
   \   00000052   93200131           STS     305, R18
   \   00000056   9508               RET
    275                  } else {
    276                      UCSR3B &= ~_BV(RXEN3);
   \                     ??hart_control_Rx_Enable_5:
   \   00000058   91200131           LDS     R18, 305
   \   0000005C   7E2F               ANDI    R18, 0xEF
   \   0000005E   93200131           STS     305, R18
    277                  }
    278                  break;
    279              }
    280          }
   \   00000062   9508               RET
   \   00000064                      REQUIRE _A_UCSR1B
   \   00000064                      REQUIRE _A_UCSR2B
   \   00000064                      REQUIRE _A_UCSR3B
    281          
    282          ////////////////////////////////////////////////////////////////////////////////
    283          //
    284          // common IRQ context utilities
    285          //
    286          // this routines shouldn't be called in task context.
    287          //
    288          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    289          static void hart_irq_tx_next(HartTaskStruct *task) {
   \                     hart_irq_tx_next:
    290              uint8_t  tndx = task->tx_buf_ndx;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   5CE6               SUBI    R30, 198
   \   00000004   4FFD               SBCI    R31, 253
   \   00000006   8120               LD      R18, Z
   \   00000008   8131               LDD     R19, Z+1
    291              uint16_t len  = task->tx_len;
   \   0000000A   01F8               MOVW    R31:R30, R17:R16
   \   0000000C   5CE4               SUBI    R30, 196
   \   0000000E   4FFD               SBCI    R31, 253
   \   00000010   8140               LD      R20, Z
   \   00000012   8151               LDD     R21, Z+1
    292              uint8_t b     = task->tx_buf[tndx++];
   \   00000014   E030               LDI     R19, 0
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   0FE2               ADD     R30, R18
   \   0000001A   1FF3               ADC     R31, R19
   \   0000001C   5CE2               SUBI    R30, 194
   \   0000001E   4FFD               SBCI    R31, 253
   \   00000020   8160               LD      R22, Z
   \   00000022   9523               INC     R18
    293              OS_DI();             // Disable before allowing interrupt
   \   00000024   94F8               cli
    294          
    295              switch ( task->modem_no ) {
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   5CE9               SUBI    R30, 201
   \   0000002A   4FFD               SBCI    R31, 253
   \   0000002C   8130               LD      R19, Z
   \   0000002E   5030               SUBI    R19, 0
   \   00000030   F029               BREQ    ??hart_irq_tx_next_0
   \   00000032   953A               DEC     R19
   \   00000034   F0C9               BREQ    ??hart_irq_tx_next_1
   \   00000036   953A               DEC     R19
   \   00000038   F169               BREQ    ??hart_irq_tx_next_2
   \   0000003A   C041               RJMP    ??hart_irq_tx_next_3
    296              case hart_modem_0:
    297                  if ( tndx >= len ) {
   \                     ??hart_irq_tx_next_0:
   \   0000003C   E030               LDI     R19, 0
   \   0000003E   1724               CP      R18, R20
   \   00000040   0735               CPC     R19, R21
   \   00000042   F078               BRCS    ??hart_irq_tx_next_4
    298                      UCSR1A |=  _BV(TXC1);       // clear TXC flag if set by any chance
   \   00000044   913000C8           LDS     R19, 200
   \   00000048   6430               ORI     R19, 0x40
   \   0000004A   933000C8           STS     200, R19
    299                      UCSR1B &= ~_BV(UDRIE1);
   \   0000004E   913000C9           LDS     R19, 201
   \   00000052   7D3F               ANDI    R19, 0xDF
   \   00000054   933000C9           STS     201, R19
    300                      UCSR1B |=  _BV(TXCIE1);
   \   00000058   913000C9           LDS     R19, 201
   \   0000005C   6430               ORI     R19, 0x40
   \   0000005E   933000C9           STS     201, R19
    301                  }
    302                  UDR1 = b;
   \                     ??hart_irq_tx_next_4:
   \   00000062   9360....           STS     _A_UDR1, R22
    303                  break;
   \   00000066   C02B               RJMP    ??hart_irq_tx_next_3
    304          
    305              case hart_modem_1:
    306                  if ( tndx >= len ) {
   \                     ??hart_irq_tx_next_1:
   \   00000068   E030               LDI     R19, 0
   \   0000006A   1724               CP      R18, R20
   \   0000006C   0735               CPC     R19, R21
   \   0000006E   F078               BRCS    ??hart_irq_tx_next_5
    307                      UCSR2A |=  _BV(TXC2);       // clear TXC flag if set by any chance
   \   00000070   913000D0           LDS     R19, 208
   \   00000074   6430               ORI     R19, 0x40
   \   00000076   933000D0           STS     208, R19
    308                      UCSR2B &= ~_BV(UDRIE2);
   \   0000007A   913000D1           LDS     R19, 209
   \   0000007E   7D3F               ANDI    R19, 0xDF
   \   00000080   933000D1           STS     209, R19
    309                      UCSR2B |=  _BV(TXCIE2);
   \   00000084   913000D1           LDS     R19, 209
   \   00000088   6430               ORI     R19, 0x40
   \   0000008A   933000D1           STS     209, R19
    310                  }
    311                  UDR2 = b;
   \                     ??hart_irq_tx_next_5:
   \   0000008E   9360....           STS     _A_UDR2, R22
    312                  break;
   \   00000092   C015               RJMP    ??hart_irq_tx_next_3
    313          
    314              case hart_modem_2:
    315                  if ( tndx >= len ) {
   \                     ??hart_irq_tx_next_2:
   \   00000094   E030               LDI     R19, 0
   \   00000096   1724               CP      R18, R20
   \   00000098   0735               CPC     R19, R21
   \   0000009A   F078               BRCS    ??hart_irq_tx_next_6
    316                      UCSR3A |=  _BV(TXC3);       // clear TXC flag if set by any chance
   \   0000009C   91300130           LDS     R19, 304
   \   000000A0   6430               ORI     R19, 0x40
   \   000000A2   93300130           STS     304, R19
    317                      UCSR3B &= ~_BV(UDRIE3);
   \   000000A6   91300131           LDS     R19, 305
   \   000000AA   7D3F               ANDI    R19, 0xDF
   \   000000AC   93300131           STS     305, R19
    318                      UCSR3B |=  _BV(TXCIE3);
   \   000000B0   91300131           LDS     R19, 305
   \   000000B4   6430               ORI     R19, 0x40
   \   000000B6   93300131           STS     305, R19
    319                  }
    320                  UDR3 = b;
   \                     ??hart_irq_tx_next_6:
   \   000000BA   9360....           STS     _A_UDR3, R22
    321                  break;
    322              }
    323              task->tx_buf_ndx = tndx;
   \                     ??hart_irq_tx_next_3:
   \   000000BE   E030               LDI     R19, 0
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   5CE6               SUBI    R30, 198
   \   000000C4   4FFD               SBCI    R31, 253
   \   000000C6   8320               ST      Z, R18
   \   000000C8   8331               STD     Z+1, R19
    324          }
   \   000000CA   9508               RET
   \   000000CC                      REQUIRE _A_UCSR1A
   \   000000CC                      REQUIRE _A_UCSR1B
   \   000000CC                      REQUIRE _A_UDR1
   \   000000CC                      REQUIRE _A_UCSR2A
   \   000000CC                      REQUIRE _A_UCSR2B
   \   000000CC                      REQUIRE _A_UDR2
   \   000000CC                      REQUIRE _A_UCSR3A
   \   000000CC                      REQUIRE _A_UCSR3B
   \   000000CC                      REQUIRE _A_UDR3
    325          

   \                                 In  segment CODE, align 2, keep-with-next
    326          static void hart_irq_finish_tx(HartTaskStruct *task) {
   \                     hart_irq_finish_tx:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    327              OS_DI();             // Disable before allowing interrupt
   \   00000006   94F8               cli
    328              switch ( task->modem_no ) {
   \   00000008   01FC               MOVW    R31:R30, R25:R24
   \   0000000A   5CE9               SUBI    R30, 201
   \   0000000C   4FFD               SBCI    R31, 253
   \   0000000E   8100               LD      R16, Z
   \   00000010   5000               SUBI    R16, 0
   \   00000012   F029               BREQ    ??hart_irq_finish_tx_0
   \   00000014   950A               DEC     R16
   \   00000016   F049               BREQ    ??hart_irq_finish_tx_1
   \   00000018   950A               DEC     R16
   \   0000001A   F069               BREQ    ??hart_irq_finish_tx_2
   \   0000001C   C011               RJMP    ??hart_irq_finish_tx_3
    329              case hart_modem_0:
    330                  UCSR1B &=  ~_BV(TXCIE1);
   \                     ??hart_irq_finish_tx_0:
   \   0000001E   910000C9           LDS     R16, 201
   \   00000022   7B0F               ANDI    R16, 0xBF
   \   00000024   930000C9           STS     201, R16
    331                  break;
   \   00000028   C00B               RJMP    ??hart_irq_finish_tx_3
    332          
    333              case hart_modem_1:
    334                  UCSR2B &=  ~_BV(TXCIE2);
   \                     ??hart_irq_finish_tx_1:
   \   0000002A   910000D1           LDS     R16, 209
   \   0000002E   7B0F               ANDI    R16, 0xBF
   \   00000030   930000D1           STS     209, R16
    335                  break;
   \   00000034   C005               RJMP    ??hart_irq_finish_tx_3
    336          
    337              case hart_modem_2:
    338                  UCSR3B &=  ~_BV(TXCIE3);
   \                     ??hart_irq_finish_tx_2:
   \   00000036   91000131           LDS     R16, 305
   \   0000003A   7B0F               ANDI    R16, 0xBF
   \   0000003C   93000131           STS     305, R16
    339                  break;
    340              }
    341          
    342              //
    343              // Disable demodulator on hart modem
    344              //
    345          #if HART_CONTROL_RTS_IN_TASK  == 0
    346              hart_gpio_hart_carrier_off_irq(task->modem_no);
    347          #endif
    348              if ( OS_IsTask(&task->tcb) ) {
   \                     ??hart_irq_finish_tx_3:
   \   00000040   018C               MOVW    R17:R16, R25:R24
   \   00000042   5E0A               SUBI    R16, 234
   \   00000044   4F1D               SBCI    R17, 253
   \   00000046   ........           CALL    OS_IsTask
   \   0000004A   2300               TST     R16
   \   0000004C   F031               BREQ    ??hart_irq_finish_tx_4
    349                  OS_SignalEvent(HART_EVENT_TX_COMPLETE, &task->tcb);
   \   0000004E   019C               MOVW    R19:R18, R25:R24
   \   00000050   5E2A               SUBI    R18, 234
   \   00000052   4F3D               SBCI    R19, 253
   \   00000054   E004               LDI     R16, 4
   \   00000056   ........           CALL    OS_SignalEvent
    350              }
    351          
    352              return;
   \                     ??hart_irq_finish_tx_4:
   \   0000005A   9189               LD      R24, Y+
   \   0000005C   9199               LD      R25, Y+
   \   0000005E   9508               RET
   \   00000060                      REQUIRE _A_UCSR1B
   \   00000060                      REQUIRE _A_UCSR2B
   \   00000060                      REQUIRE _A_UCSR3B
    353          }
    354          
    355          
    356          ////////////////////////////////////////////////////////////////////////////////
    357          //
    358          // HART0 USART1 IRQ handler
    359          //
    360          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    361          void Handler_USART_RXC(HartTaskStruct *_hart_task) {
   \                     Handler_USART_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   9721               SBIW    R29:R28, 1
   \   00000006   01C8               MOVW    R25:R24, R17:R16
    362              char tmpData;
    363              switch ( _hart_task->modem_no ) {
   \   00000008   01FC               MOVW    R31:R30, R25:R24
   \   0000000A   5CE9               SUBI    R30, 201
   \   0000000C   4FFD               SBCI    R31, 253
   \   0000000E   8100               LD      R16, Z
   \   00000010   5000               SUBI    R16, 0
   \   00000012   F029               BREQ    ??Handler_USART_RXC_0
   \   00000014   950A               DEC     R16
   \   00000016   F039               BREQ    ??Handler_USART_RXC_1
   \   00000018   950A               DEC     R16
   \   0000001A   F049               BREQ    ??Handler_USART_RXC_2
   \   0000001C   C00B               RJMP    ??Handler_USART_RXC_3
    364              case 0:
    365                  tmpData = UDR1;
   \                     ??Handler_USART_RXC_0:
   \   0000001E   9100....           LDS     R16, _A_UDR1
   \   00000022   8308               ST      Y, R16
    366                  break;
   \   00000024   C007               RJMP    ??Handler_USART_RXC_3
    367              case 1:
    368                  tmpData = UDR2;
   \                     ??Handler_USART_RXC_1:
   \   00000026   9100....           LDS     R16, _A_UDR2
   \   0000002A   8308               ST      Y, R16
    369                  break;
   \   0000002C   C003               RJMP    ??Handler_USART_RXC_3
    370              case 2:
    371                  tmpData = UDR3;
   \                     ??Handler_USART_RXC_2:
   \   0000002E   9100....           LDS     R16, _A_UDR3
   \   00000032   8308               ST      Y, R16
    372                  break;
    373              }
    374              if ( _hart_task->rx_Listen[_hart_task->rx_Channel] ) {
   \                     ??Handler_USART_RXC_3:
   \   00000034   01FC               MOVW    R31:R30, R25:R24
   \   00000036   5BEE               SUBI    R30, 190
   \   00000038   4FFA               SBCI    R31, 250
   \   0000003A   8100               LD      R16, Z
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   01FC               MOVW    R31:R30, R25:R24
   \   00000040   0FE0               ADD     R30, R16
   \   00000042   1FF1               ADC     R31, R17
   \   00000044   5BED               SUBI    R30, 189
   \   00000046   4FFA               SBCI    R31, 250
   \   00000048   8100               LD      R16, Z
   \   0000004A   2300               TST     R16
   \   0000004C   F0C9               BREQ    ??Handler_USART_RXC_4
    375                  _hart_task->rx_Time[_hart_task->rx_Channel] = OS_Time;
   \   0000004E   01FC               MOVW    R31:R30, R25:R24
   \   00000050   5BEE               SUBI    R30, 190
   \   00000052   4FFA               SBCI    R31, 250
   \   00000054   8100               LD      R16, Z
   \   00000056   ....               LDI     R30, LOW(OS_Global)
   \   00000058   ....               LDI     R31, (OS_Global) >> 8
   \   0000005A   8942               LDD     R20, Z+18
   \   0000005C   8953               LDD     R21, Z+19
   \   0000005E   8964               LDD     R22, Z+20
   \   00000060   8975               LDD     R23, Z+21
   \   00000062   E010               LDI     R17, 0
   \   00000064   0F00               LSL     R16
   \   00000066   1F11               ROL     R17
   \   00000068   0F00               LSL     R16
   \   0000006A   1F11               ROL     R17
   \   0000006C   01FC               MOVW    R31:R30, R25:R24
   \   0000006E   0FE0               ADD     R30, R16
   \   00000070   1FF1               ADC     R31, R17
   \   00000072   5BE9               SUBI    R30, 185
   \   00000074   4FFA               SBCI    R31, 250
   \   00000076   8340               ST      Z, R20
   \   00000078   8351               STD     Z+1, R21
   \   0000007A   8362               STD     Z+2, R22
   \   0000007C   8373               STD     Z+3, R23
   \   0000007E   C00F               RJMP    ??Handler_USART_RXC_5
    376              } else if ( OS_IsTask(&_hart_task->tcb) ) {
   \                     ??Handler_USART_RXC_4:
   \   00000080   018C               MOVW    R17:R16, R25:R24
   \   00000082   5E0A               SUBI    R16, 234
   \   00000084   4F1D               SBCI    R17, 253
   \   00000086   ........           CALL    OS_IsTask
   \   0000008A   2300               TST     R16
   \   0000008C   F041               BREQ    ??Handler_USART_RXC_5
    377                  CriticalComError = OS_PutMailCond1(&_hart_task->RxMailBox, &tmpData);
   \   0000008E   019E               MOVW    R19:R18, R29:R28
   \   00000090   018C               MOVW    R17:R16, R25:R24
   \   00000092   5F08               SUBI    R16, 248
   \   00000094   4F1D               SBCI    R17, 253
   \   00000096   ........           CALL    OS_PutMailCond1
   \   0000009A   9300....           STS     CriticalComError, R16
    378              }
    379          }
   \                     ??Handler_USART_RXC_5:
   \   0000009E   9621               ADIW    R29:R28, 1
   \   000000A0   9189               LD      R24, Y+
   \   000000A2   9199               LD      R25, Y+
   \   000000A4   9508               RET
   \   000000A6                      REQUIRE _A_UDR1
   \   000000A6                      REQUIRE _A_UDR2
   \   000000A6                      REQUIRE _A_UDR3
    380          

   \                                 In  segment CODE, align 2, keep-with-next
    381          void hart_irq_finish_tx0(void) {
   \                     hart_irq_finish_tx0:
    382              hart_irq_finish_tx(&_hart_task0);
   \   00000000   ....               LDI     R16, LOW(_hart_task0)
   \   00000002   ....               LDI     R17, (_hart_task0) >> 8
   \   00000004   ....               RCALL   hart_irq_finish_tx
    383          }
   \   00000006   9508               RET
    384          

   \                                 In  segment CODE, align 2, keep-with-next
    385          void hart_irq_finish_tx1(void) {
   \                     hart_irq_finish_tx1:
    386              hart_irq_finish_tx(&_hart_task1);
   \   00000000   ....               LDI     R16, LOW(_hart_task1)
   \   00000002   ....               LDI     R17, (_hart_task1) >> 8
   \   00000004   ....               RCALL   hart_irq_finish_tx
    387          }
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    388          void hart_irq_finish_tx2(void) {
   \                     hart_irq_finish_tx2:
    389              hart_irq_finish_tx(&_hart_task2);
   \   00000000   ....               LDI     R16, LOW(_hart_task2)
   \   00000002   ....               LDI     R17, (_hart_task2) >> 8
   \   00000004   ....               RCALL   hart_irq_finish_tx
    390          }
   \   00000006   9508               RET
    391          

   \                                 In  segment CODE, align 2, keep-with-next
    392          void Handler_USART_RXC0(void) {
   \                     Handler_USART_RXC0:
    393              Handler_USART_RXC(&_hart_task0);
   \   00000000   ....               LDI     R16, LOW(_hart_task0)
   \   00000002   ....               LDI     R17, (_hart_task0) >> 8
   \   00000004   ....               RCALL   Handler_USART_RXC
    394          }
   \   00000006   9508               RET
    395          

   \                                 In  segment CODE, align 2, keep-with-next
    396          void Handler_USART_RXC1(void) {
   \                     Handler_USART_RXC1:
    397              Handler_USART_RXC(&_hart_task1);
   \   00000000   ....               LDI     R16, LOW(_hart_task1)
   \   00000002   ....               LDI     R17, (_hart_task1) >> 8
   \   00000004   ....               RCALL   Handler_USART_RXC
    398          }
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    399          void Handler_USART_RXC2(void) {
   \                     Handler_USART_RXC2:
    400              Handler_USART_RXC(&_hart_task2);
   \   00000000   ....               LDI     R16, LOW(_hart_task2)
   \   00000002   ....               LDI     R17, (_hart_task2) >> 8
   \   00000004   ....               RCALL   Handler_USART_RXC
    401          }
   \   00000006   9508               RET
    402          

   \                                 In  segment CODE, align 2, keep-with-next
    403          void hart_irq_tx_next0(void) {
   \                     hart_irq_tx_next0:
    404              hart_irq_tx_next(&_hart_task0);
   \   00000000   ....               LDI     R16, LOW(_hart_task0)
   \   00000002   ....               LDI     R17, (_hart_task0) >> 8
   \   00000004   ....               RCALL   hart_irq_tx_next
    405          }
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    406          void hart_irq_tx_next1(void) {
   \                     hart_irq_tx_next1:
    407              hart_irq_tx_next(&_hart_task1);
   \   00000000   ....               LDI     R16, LOW(_hart_task1)
   \   00000002   ....               LDI     R17, (_hart_task1) >> 8
   \   00000004   ....               RCALL   hart_irq_tx_next
    408          }
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    409          void hart_irq_tx_next2(void) {
   \                     hart_irq_tx_next2:
    410              hart_irq_tx_next(&_hart_task2);
   \   00000000   ....               LDI     R16, LOW(_hart_task2)
   \   00000002   ....               LDI     R17, (_hart_task2) >> 8
   \   00000004   ....               RCALL   hart_irq_tx_next
    411          }
   \   00000006   9508               RET
    412          
    413          
    414          
    415          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    416          __interrupt void USART1_RXC(void) {
   \                     USART1_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    417              OS_CallISR(Handler_USART_RXC0);
   \   00000024   ....               LDI     R16, LOW(Handler_USART_RXC0/2)
   \   00000026   ....               LDI     R17, (Handler_USART_RXC0/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    418          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    419          
    420          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    421          __interrupt void USART1_TXC(void) {
   \                     USART1_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    422              OS_CallISR(hart_irq_finish_tx0);
   \   00000024   ....               LDI     R16, LOW(hart_irq_finish_tx0/2)
   \   00000026   ....               LDI     R17, (hart_irq_finish_tx0/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    423          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    424          
    425          #pragma vector=USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    426          __interrupt void USART1_UDRE(void) {
   \                     USART1_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    427              OS_CallISR(hart_irq_tx_next0);
   \   00000024   ....               LDI     R16, LOW(hart_irq_tx_next0/2)
   \   00000026   ....               LDI     R17, (hart_irq_tx_next0/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    428          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    429          
    430          ////////////////////////////////////////////////////////////////////////////////
    431          //
    432          // HART1 USART2 IRQ handler
    433          //
    434          ////////////////////////////////////////////////////////////////////////////////
    435          #pragma vector=USART2_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    436          __interrupt void USART2_RXC(void) {
   \                     USART2_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    437              OS_CallISR(Handler_USART_RXC1);
   \   00000024   ....               LDI     R16, LOW(Handler_USART_RXC1/2)
   \   00000026   ....               LDI     R17, (Handler_USART_RXC1/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    438          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    439          
    440          #pragma vector=USART2_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    441          __interrupt void USART2_TXC(void) {
   \                     USART2_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    442              OS_CallISR(hart_irq_finish_tx1);
   \   00000024   ....               LDI     R16, LOW(hart_irq_finish_tx1/2)
   \   00000026   ....               LDI     R17, (hart_irq_finish_tx1/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    443          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    444          
    445          #pragma vector=USART2_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    446          __interrupt void USART2_UDRE(void) {
   \                     USART2_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    447              OS_CallISR(hart_irq_tx_next1);
   \   00000024   ....               LDI     R16, LOW(hart_irq_tx_next1/2)
   \   00000026   ....               LDI     R17, (hart_irq_tx_next1/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    448          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    449          
    450          ////////////////////////////////////////////////////////////////////////////////
    451          //
    452          // HART1 USART3 IRQ handler
    453          //
    454          ////////////////////////////////////////////////////////////////////////////////
    455          #pragma vector=USART3_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    456          __interrupt void USART3_RXC(void) {
   \                     USART3_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    457              OS_CallISR(Handler_USART_RXC2);
   \   00000024   ....               LDI     R16, LOW(Handler_USART_RXC2/2)
   \   00000026   ....               LDI     R17, (Handler_USART_RXC2/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    458          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    459          
    460          #pragma vector=USART3_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    461          __interrupt void USART3_TXC(void) {
   \                     USART3_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    462              OS_CallISR(hart_irq_finish_tx2);
   \   00000024   ....               LDI     R16, LOW(hart_irq_finish_tx2/2)
   \   00000026   ....               LDI     R17, (hart_irq_finish_tx2/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    463          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    464          
    465          #pragma vector=USART3_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    466          __interrupt void USART3_UDRE(void) {
   \                     USART3_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    467              OS_CallISR(hart_irq_tx_next2);
   \   00000024   ....               LDI     R16, LOW(hart_irq_tx_next2/2)
   \   00000026   ....               LDI     R17, (hart_irq_tx_next2/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    468          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    469          
    470          ////////////////////////////////////////////////////////////////////////////////
    471          //
    472          // UART Utilities
    473          //
    474          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    475          void hart_config_uart(HartTaskStruct *task) {
   \                     hart_config_uart:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
    476              uint16_t    baud = 1200;
   \   00000006   EB80               LDI     R24, 176
   \   00000008   E094               LDI     R25, 4
    477              uint16_t    baud_setting = (XTAL_CPU / 4 / baud - 1) / 2;
   \   0000000A   01AC               MOVW    R21:R20, R25:R24
   \   0000000C   E060               LDI     R22, 0
   \   0000000E   E070               LDI     R23, 0
   \   00000010   E000               LDI     R16, 0
   \   00000012   E019               LDI     R17, 9
   \   00000014   E32D               LDI     R18, 61
   \   00000016   E030               LDI     R19, 0
   \   00000018   ........           CALL    ?SL_DIVMOD_L03
   \   0000001C   5001               SUBI    R16, 1
   \   0000001E   4010               SBCI    R17, 0
   \   00000020   4020               SBCI    R18, 0
   \   00000022   4030               SBCI    R19, 0
   \   00000024   E042               LDI     R20, 2
   \   00000026   E050               LDI     R21, 0
   \   00000028   E060               LDI     R22, 0
   \   0000002A   E070               LDI     R23, 0
   \   0000002C   ........           CALL    ?SL_DIVMOD_L03
   \   00000030   01D8               MOVW    R27:R26, R17:R16
    478          
    479              switch ( task->modem_no ) {
   \   00000032   01F2               MOVW    R31:R30, R5:R4
   \   00000034   5CE9               SUBI    R30, 201
   \   00000036   4FFD               SBCI    R31, 253
   \   00000038   8100               LD      R16, Z
   \   0000003A   5000               SUBI    R16, 0
   \   0000003C   F031               BREQ    ??hart_config_uart_0
   \   0000003E   950A               DEC     R16
   \   00000040   F1A9               BREQ    ??hart_config_uart_1
   \   00000042   950A               DEC     R16
   \   00000044   F409               BRNE    $+2+2
   \   00000046   C063               RJMP    ??hart_config_uart_2
   \   00000048   C092               RJMP    ??hart_config_uart_3
    480              case hart_modem_0:
    481                  // try U2X mode first
    482                  UCSR1A      = _BV(U2X1);
   \                     ??hart_config_uart_0:
   \   0000004A   E002               LDI     R16, 2
   \   0000004C   9300....           STS     _A_UCSR1A, R16
    483                  if ( ((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095) ) {
   \   00000050   3080               CPI     R24, 0
   \   00000052   EE01               LDI     R16, 225
   \   00000054   0790               CPC     R25, R16
   \   00000056   F021               BREQ    ??hart_config_uart_4
   \   00000058   30A0               CPI     R26, 0
   \   0000005A   E100               LDI     R16, 16
   \   0000005C   07B0               CPC     R27, R16
   \   0000005E   F0B8               BRCS    ??hart_config_uart_5
    484                      UCSR1A      = 0;
   \                     ??hart_config_uart_4:
   \   00000060   E000               LDI     R16, 0
   \   00000062   9300....           STS     _A_UCSR1A, R16
    485                      baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
   \   00000066   01AC               MOVW    R21:R20, R25:R24
   \   00000068   E060               LDI     R22, 0
   \   0000006A   E070               LDI     R23, 0
   \   0000006C   E800               LDI     R16, 128
   \   0000006E   E814               LDI     R17, 132
   \   00000070   E12E               LDI     R18, 30
   \   00000072   E030               LDI     R19, 0
   \   00000074   ........           CALL    ?SL_DIVMOD_L03
   \   00000078   5001               SUBI    R16, 1
   \   0000007A   4010               SBCI    R17, 0
   \   0000007C   4020               SBCI    R18, 0
   \   0000007E   4030               SBCI    R19, 0
   \   00000080   E042               LDI     R20, 2
   \   00000082   E050               LDI     R21, 0
   \   00000084   E060               LDI     R22, 0
   \   00000086   E070               LDI     R23, 0
   \   00000088   ........           CALL    ?SL_DIVMOD_L03
   \   0000008C   01D8               MOVW    R27:R26, R17:R16
    486                  }
    487          
    488                  UBRR1H      = baud_setting >> 8;
   \                     ??hart_config_uart_5:
   \   0000008E   018D               MOVW    R17:R16, R27:R26
   \   00000090   2F01               MOV     R16, R17
   \   00000092   E010               LDI     R17, 0
   \   00000094   930000CD           STS     205, R16
    489                  UBRR1L      = baud_setting;
   \   00000098   2F0A               MOV     R16, R26
   \   0000009A   9300....           STS     _A_UBRR1, R16
    490          
    491                  UCSR1C      = _BV(UCSZ10) | _BV(UCSZ11) | USART1_ODD_PARITY | USART1_1_STOP_BIT;
   \   0000009E   E306               LDI     R16, 54
   \   000000A0   9300....           STS     _A_UCSR1C, R16
    492                  UCSR1B      = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);
   \   000000A4   E908               LDI     R16, 152
   \   000000A6   9300....           STS     _A_UCSR1B, R16
    493                  break;
   \   000000AA   C061               RJMP    ??hart_config_uart_3
    494          
    495              case hart_modem_1:
    496                  UCSR2A      = _BV(U2X2);
   \                     ??hart_config_uart_1:
   \   000000AC   E002               LDI     R16, 2
   \   000000AE   9300....           STS     _A_UCSR2A, R16
    497                  if ( ((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095) ) {
   \   000000B2   3080               CPI     R24, 0
   \   000000B4   EE01               LDI     R16, 225
   \   000000B6   0790               CPC     R25, R16
   \   000000B8   F021               BREQ    ??hart_config_uart_6
   \   000000BA   30A0               CPI     R26, 0
   \   000000BC   E100               LDI     R16, 16
   \   000000BE   07B0               CPC     R27, R16
   \   000000C0   F0B8               BRCS    ??hart_config_uart_7
    498                      UCSR2A      = 0;
   \                     ??hart_config_uart_6:
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   9300....           STS     _A_UCSR2A, R16
    499                      baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
   \   000000C8   01AC               MOVW    R21:R20, R25:R24
   \   000000CA   E060               LDI     R22, 0
   \   000000CC   E070               LDI     R23, 0
   \   000000CE   E800               LDI     R16, 128
   \   000000D0   E814               LDI     R17, 132
   \   000000D2   E12E               LDI     R18, 30
   \   000000D4   E030               LDI     R19, 0
   \   000000D6   ........           CALL    ?SL_DIVMOD_L03
   \   000000DA   5001               SUBI    R16, 1
   \   000000DC   4010               SBCI    R17, 0
   \   000000DE   4020               SBCI    R18, 0
   \   000000E0   4030               SBCI    R19, 0
   \   000000E2   E042               LDI     R20, 2
   \   000000E4   E050               LDI     R21, 0
   \   000000E6   E060               LDI     R22, 0
   \   000000E8   E070               LDI     R23, 0
   \   000000EA   ........           CALL    ?SL_DIVMOD_L03
   \   000000EE   01D8               MOVW    R27:R26, R17:R16
    500                  }
    501          
    502                  UBRR2H      = baud_setting >> 8;
   \                     ??hart_config_uart_7:
   \   000000F0   018D               MOVW    R17:R16, R27:R26
   \   000000F2   2F01               MOV     R16, R17
   \   000000F4   E010               LDI     R17, 0
   \   000000F6   930000D5           STS     213, R16
    503                  UBRR2L      = baud_setting;
   \   000000FA   2F0A               MOV     R16, R26
   \   000000FC   9300....           STS     _A_UBRR2, R16
    504          
    505                  UCSR2C      = _BV(UCSZ20) | _BV(UCSZ21) | USART2_ODD_PARITY | USART2_1_STOP_BIT;
   \   00000100   E306               LDI     R16, 54
   \   00000102   9300....           STS     _A_UCSR2C, R16
    506                  UCSR2B      = _BV(RXEN2) | _BV(TXEN2) | _BV(RXCIE2);
   \   00000106   E908               LDI     R16, 152
   \   00000108   9300....           STS     _A_UCSR2B, R16
    507                  break;
   \   0000010C   C030               RJMP    ??hart_config_uart_3
    508          
    509              case hart_modem_2:
    510                  UCSR3A      = _BV(U2X3);
   \                     ??hart_config_uart_2:
   \   0000010E   E002               LDI     R16, 2
   \   00000110   9300....           STS     _A_UCSR3A, R16
    511                  if ( ((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095) ) {
   \   00000114   3080               CPI     R24, 0
   \   00000116   EE01               LDI     R16, 225
   \   00000118   0790               CPC     R25, R16
   \   0000011A   F021               BREQ    ??hart_config_uart_8
   \   0000011C   30A0               CPI     R26, 0
   \   0000011E   E100               LDI     R16, 16
   \   00000120   07B0               CPC     R27, R16
   \   00000122   F0B8               BRCS    ??hart_config_uart_9
    512                      UCSR3A      = 0;
   \                     ??hart_config_uart_8:
   \   00000124   E000               LDI     R16, 0
   \   00000126   9300....           STS     _A_UCSR3A, R16
    513                      baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
   \   0000012A   01AC               MOVW    R21:R20, R25:R24
   \   0000012C   E060               LDI     R22, 0
   \   0000012E   E070               LDI     R23, 0
   \   00000130   E800               LDI     R16, 128
   \   00000132   E814               LDI     R17, 132
   \   00000134   E12E               LDI     R18, 30
   \   00000136   E030               LDI     R19, 0
   \   00000138   ........           CALL    ?SL_DIVMOD_L03
   \   0000013C   5001               SUBI    R16, 1
   \   0000013E   4010               SBCI    R17, 0
   \   00000140   4020               SBCI    R18, 0
   \   00000142   4030               SBCI    R19, 0
   \   00000144   E042               LDI     R20, 2
   \   00000146   E050               LDI     R21, 0
   \   00000148   E060               LDI     R22, 0
   \   0000014A   E070               LDI     R23, 0
   \   0000014C   ........           CALL    ?SL_DIVMOD_L03
   \   00000150   01D8               MOVW    R27:R26, R17:R16
    514                  }
    515          
    516                  UBRR3H      = baud_setting >> 8;
   \                     ??hart_config_uart_9:
   \   00000152   018D               MOVW    R17:R16, R27:R26
   \   00000154   2F01               MOV     R16, R17
   \   00000156   E010               LDI     R17, 0
   \   00000158   93000135           STS     309, R16
    517                  UBRR3L      = baud_setting;
   \   0000015C   2F0A               MOV     R16, R26
   \   0000015E   9300....           STS     _A_UBRR3, R16
    518          
    519                  UCSR3C      = _BV(UCSZ30) | _BV(UCSZ31) | USART3_ODD_PARITY | USART3_1_STOP_BIT;
   \   00000162   E306               LDI     R16, 54
   \   00000164   9300....           STS     _A_UCSR3C, R16
    520                  UCSR3B      = _BV(RXEN3) | _BV(TXEN3) | _BV(RXCIE3);
   \   00000168   E908               LDI     R16, 152
   \   0000016A   9300....           STS     _A_UCSR3B, R16
    521                  break;
    522              }
    523          }
   \                     ??hart_config_uart_3:
   \   0000016E   E0E6               LDI     R30, 6
   \   00000170   ........           JMP     ?EPILOGUE_B6_L09
   \   00000174                      REQUIRE _A_UCSR1A
   \   00000174                      REQUIRE _A_UBRR1
   \   00000174                      REQUIRE _A_UCSR1C
   \   00000174                      REQUIRE _A_UCSR1B
   \   00000174                      REQUIRE _A_UCSR2A
   \   00000174                      REQUIRE _A_UBRR2
   \   00000174                      REQUIRE _A_UCSR2C
   \   00000174                      REQUIRE _A_UCSR2B
   \   00000174                      REQUIRE _A_UCSR3A
   \   00000174                      REQUIRE _A_UBRR3
   \   00000174                      REQUIRE _A_UCSR3C
   \   00000174                      REQUIRE _A_UCSR3B
    524          

   \                                 In  segment CODE, align 2, keep-with-next
    525          static void hart_reset_tx(HartTaskStruct *task) {
   \                     hart_reset_tx:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    526              task->tx_buf_ndx  = 0;
   \   00000006   01FC               MOVW    R31:R30, R25:R24
   \   00000008   5CE6               SUBI    R30, 198
   \   0000000A   4FFD               SBCI    R31, 253
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   E010               LDI     R17, 0
   \   00000010   8300               ST      Z, R16
   \   00000012   8311               STD     Z+1, R17
    527              task->tx_len      = 0;
   \   00000014   01FC               MOVW    R31:R30, R25:R24
   \   00000016   5CE4               SUBI    R30, 196
   \   00000018   4FFD               SBCI    R31, 253
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   8300               ST      Z, R16
   \   00000020   8311               STD     Z+1, R17
    528          
    529              hart_msg_encoder_reset(&task->hart_encoder);
   \   00000022   018C               MOVW    R17:R16, R25:R24
   \   00000024   5700               SUBI    R16, 112
   \   00000026   4F1A               SBCI    R17, 250
   \   00000028   ........           CALL    hart_msg_encoder_reset
    530          }
   \   0000002C   9189               LD      R24, Y+
   \   0000002E   9199               LD      R25, Y+
   \   00000030   9508               RET
    531          

   \                                 In  segment CODE, align 2, keep-with-next
    532          static void hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     hart_reset_rx:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2FA2               MOV     R26, R18
    533              task->rx_buf_ndx   	 = 0;
   \   00000008   01FC               MOVW    R31:R30, R25:R24
   \   0000000A   54E2               SUBI    R30, 66
   \   0000000C   4FFC               SBCI    R31, 252
   \   0000000E   E000               LDI     R16, 0
   \   00000010   E010               LDI     R17, 0
   \   00000012   8300               ST      Z, R16
   \   00000014   8311               STD     Z+1, R17
    534              task->rx_len       	 = 0;
   \   00000016   01FC               MOVW    R31:R30, R25:R24
   \   00000018   54E0               SUBI    R30, 64
   \   0000001A   4FFC               SBCI    R31, 252
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   E010               LDI     R17, 0
   \   00000020   8300               ST      Z, R16
   \   00000022   8311               STD     Z+1, R17
    535          
    536              hart_msg_parser_reset(&task->hart_parser);
   \   00000024   018C               MOVW    R17:R16, R25:R24
   \   00000026   5A05               SUBI    R16, 165
   \   00000028   4F1A               SBCI    R17, 250
   \   0000002A   ........           CALL    hart_msg_parser_reset
    537          }
   \   0000002E   E0E3               LDI     R30, 3
   \   00000030   ........           JMP     ?EPILOGUE_B3_L09
    538          

   \                                 In  segment CODE, align 2, keep-with-next
    539          static void hart_start_transaction(HartTaskStruct *task) {
   \                     hart_start_transaction:
    540              if ( task->tx_len == 0 ) {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   5CE4               SUBI    R30, 196
   \   00000004   4FFD               SBCI    R31, 253
   \   00000006   8120               LD      R18, Z
   \   00000008   8131               LDD     R19, Z+1
   \   0000000A   2B23               OR      R18, R19
   \   0000000C   F119               BREQ    ??hart_start_transaction_0
    541                  // XXX fucked up. there is a bug
    542                  return;
    543              }
    544          
    545              // just to make sure
    546              task->tx_buf_ndx    = 0;
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   5CE6               SUBI    R30, 198
   \   00000012   4FFD               SBCI    R31, 253
   \   00000014   E020               LDI     R18, 0
   \   00000016   E030               LDI     R19, 0
   \   00000018   8320               ST      Z, R18
   \   0000001A   8331               STD     Z+1, R19
    547          
    548              switch ( task->modem_no ) {
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   5CE9               SUBI    R30, 201
   \   00000020   4FFD               SBCI    R31, 253
   \   00000022   8120               LD      R18, Z
   \   00000024   5020               SUBI    R18, 0
   \   00000026   F029               BREQ    ??hart_start_transaction_1
   \   00000028   952A               DEC     R18
   \   0000002A   F049               BREQ    ??hart_start_transaction_2
   \   0000002C   952A               DEC     R18
   \   0000002E   F069               BREQ    ??hart_start_transaction_3
   \   00000030   9508               RET
    549              case hart_modem_0:
    550                  UCSR1B |= _BV(UDRIE1);
   \                     ??hart_start_transaction_1:
   \   00000032   912000C9           LDS     R18, 201
   \   00000036   6220               ORI     R18, 0x20
   \   00000038   932000C9           STS     201, R18
    551                  break;
   \   0000003C   9508               RET
    552          
    553              case hart_modem_1:
    554                  UCSR2B |= _BV(UDRIE2);
   \                     ??hart_start_transaction_2:
   \   0000003E   912000D1           LDS     R18, 209
   \   00000042   6220               ORI     R18, 0x20
   \   00000044   932000D1           STS     209, R18
    555                  break;
   \   00000048   9508               RET
    556          
    557              case hart_modem_2:
    558                  UCSR3B |= _BV(UDRIE3);
   \                     ??hart_start_transaction_3:
   \   0000004A   91200131           LDS     R18, 305
   \   0000004E   6220               ORI     R18, 0x20
   \   00000050   93200131           STS     305, R18
    559                  break;
    560              }
    561          }
   \                     ??hart_start_transaction_0:
   \   00000054   9508               RET
   \   00000056                      REQUIRE _A_UCSR1B
   \   00000056                      REQUIRE _A_UCSR2B
   \   00000056                      REQUIRE _A_UCSR3B
    562          
    563          ////////////////////////////////////////////////////////////////////////////////
    564          //
    565          // demo transaction
    566          //
    567          // IT IS YOUR JOB TO OVERRIDE THESE CALLBACKS
    568          //
    569          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    570          void vega_radar_make_request(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     vega_radar_make_request:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   01C8               MOVW    R25:R24, R17:R16
   \   00000008   2FA2               MOV     R26, R18
    571              uint8_t   addr[5] = { 0x80, 0x00, 0x00, 0x00, 0x00 };
   \   0000000A   018E               MOVW    R17:R16, R29:R28
   \   0000000C   ....               LDI     R30, LOW(`?<Constant {128, 0, 0, 0, 0}>`)
   \   0000000E   ....               LDI     R31, HIGH(`?<Constant {128, 0, 0, 0, 0}>`)
   \   00000010   ....               LDI     R19, (`?<Constant {128, 0, 0, 0, 0}>`) >> 16
   \   00000012   E045               LDI     R20, 5
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    572              uint8_t   cmd = TData.Hart.HartCmd[current_chnl];        // Can use command 1 later, possibly controlled from TCU no idea what to use
   \   0000001A   E0B0               LDI     R27, 0
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   ....               SUBI    R30, LOW((-(TData + 148) & 0xFFFF))
   \   00000020   ....               SBCI    R31, HIGH((-(TData + 148) & 0xFFFF))
   \   00000022   81B0               LD      R27, Z
    573          
    574              hart_msg_encoder_preamble(&task->hart_encoder, 5);        // we use preamble 5 for tx
   \   00000024   E025               LDI     R18, 5
   \   00000026   018C               MOVW    R17:R16, R25:R24
   \   00000028   5700               SUBI    R16, 112
   \   0000002A   4F1A               SBCI    R17, 250
   \   0000002C   ........           CALL    hart_msg_encoder_preamble
    575              hart_msg_encoder_long_start(&task->hart_encoder,
    576                                          0x82,                                                 // master to slave request is always 82
    577                                          addr,                                                 // slave address
    578                                          cmd);                                                 // command to send
   \   00000030   2F3B               MOV     R19, R27
   \   00000032   01AE               MOVW    R21:R20, R29:R28
   \   00000034   E822               LDI     R18, 130
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   5700               SUBI    R16, 112
   \   0000003A   4F1A               SBCI    R17, 250
   \   0000003C   ........           CALL    hart_msg_encoder_long_start
    579                                                                                                //
    580              // request has no status bytes
    581              //
    582          
    583              hart_msg_encoder_data(&task->hart_encoder,
    584                                    NULL,                                                 // command data in request
    585                                    0);                                                   // no data. thus data length 0
   \   00000040   E040               LDI     R20, 0
   \   00000042   E020               LDI     R18, 0
   \   00000044   E030               LDI     R19, 0
   \   00000046   018C               MOVW    R17:R16, R25:R24
   \   00000048   5700               SUBI    R16, 112
   \   0000004A   4F1A               SBCI    R17, 250
   \   0000004C   ........           CALL    hart_msg_encoder_data
    586          
    587              hart_msg_encoder_calc_csum(&task->hart_encoder);          // finally calculate checksum
   \   00000050   018C               MOVW    R17:R16, R25:R24
   \   00000052   5700               SUBI    R16, 112
   \   00000054   4F1A               SBCI    R17, 250
   \   00000056   ........           CALL    hart_msg_encoder_calc_csum
    588          }
   \   0000005A   9625               ADIW    R29:R28, 5
   \   0000005C   E0E4               LDI     R30, 4
   \   0000005E   ........           JMP     ?EPILOGUE_B4_L09
    589          

   \                                 In  segment CODE, align 2, keep-with-next
    590          void vega_radar_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type) {
   \                     vega_radar_handle_rx_error:
   \   00000000   01BC               MOVW    R23:R22, R25:R24
    591              switch ( err_type ) {
   \   00000002   2F43               MOV     R20, R19
   \   00000004   5040               SUBI    R20, 0
   \   00000006   F031               BREQ    ??vega_radar_handle_rx_error_0
   \   00000008   954A               DEC     R20
   \   0000000A   F1F9               BREQ    ??vega_radar_handle_rx_error_1
   \   0000000C   954A               DEC     R20
   \   0000000E   F409               BRNE    $+2+2
   \   00000010   C077               RJMP    ??vega_radar_handle_rx_error_2
   \   00000012   C0B0               RJMP    ??vega_radar_handle_rx_error_3
    592              case HartCommErr_RX_Error:
    593                  // XXX
    594                  // do whatevern necessary here
    595                  if ( TData.Hart.FailCnt[current_chnl][0] < 0xffff ) {
   \                     ??vega_radar_handle_rx_error_0:
   \   00000014   2F42               MOV     R20, R18
   \   00000016   E050               LDI     R21, 0
   \   00000018   0F44               LSL     R20
   \   0000001A   1F55               ROL     R21
   \   0000001C   0F44               LSL     R20
   \   0000001E   1F55               ROL     R21
   \   00000020   01FA               MOVW    R31:R30, R21:R20
   \   00000022   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000024   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000026   8180               LD      R24, Z
   \   00000028   8191               LDD     R25, Z+1
   \   0000002A   3F8F               CPI     R24, 255
   \   0000002C   4F9F               SBCI    R25, 255
   \   0000002E   F079               BREQ    ??vega_radar_handle_rx_error_4
    596                      TData.Hart.FailCnt[current_chnl][0]++;
   \   00000030   2F42               MOV     R20, R18
   \   00000032   E050               LDI     R21, 0
   \   00000034   0F44               LSL     R20
   \   00000036   1F55               ROL     R21
   \   00000038   0F44               LSL     R20
   \   0000003A   1F55               ROL     R21
   \   0000003C   01FA               MOVW    R31:R30, R21:R20
   \   0000003E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000042   8140               LD      R20, Z
   \   00000044   8151               LDD     R21, Z+1
   \   00000046   5F4F               SUBI    R20, 255
   \   00000048   4F5F               SBCI    R21, 255
   \   0000004A   8340               ST      Z, R20
   \   0000004C   8351               STD     Z+1, R21
    597                  }
    598                  if ( TData.Hart.FailCnt[current_chnl][1] < 0xffff ) {
   \                     ??vega_radar_handle_rx_error_4:
   \   0000004E   2F42               MOV     R20, R18
   \   00000050   E050               LDI     R21, 0
   \   00000052   0F44               LSL     R20
   \   00000054   1F55               ROL     R21
   \   00000056   0F44               LSL     R20
   \   00000058   1F55               ROL     R21
   \   0000005A   01FA               MOVW    R31:R30, R21:R20
   \   0000005C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000060   8182               LDD     R24, Z+2
   \   00000062   8193               LDD     R25, Z+3
   \   00000064   3F8F               CPI     R24, 255
   \   00000066   4F9F               SBCI    R25, 255
   \   00000068   F079               BREQ    ??vega_radar_handle_rx_error_5
    599                      TData.Hart.FailCnt[current_chnl][1]++;
   \   0000006A   2F42               MOV     R20, R18
   \   0000006C   E050               LDI     R21, 0
   \   0000006E   0F44               LSL     R20
   \   00000070   1F55               ROL     R21
   \   00000072   0F44               LSL     R20
   \   00000074   1F55               ROL     R21
   \   00000076   01FA               MOVW    R31:R30, R21:R20
   \   00000078   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000007A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007C   8142               LDD     R20, Z+2
   \   0000007E   8153               LDD     R21, Z+3
   \   00000080   5F4F               SUBI    R20, 255
   \   00000082   4F5F               SBCI    R21, 255
   \   00000084   8342               STD     Z+2, R20
   \   00000086   8353               STD     Z+3, R21
    600                  }
    601                  break;
   \                     ??vega_radar_handle_rx_error_5:
   \   00000088   C075               RJMP    ??vega_radar_handle_rx_error_3
    602          
    603              case HartCommErr_RX_Timeout:
    604                  // XXX
    605                  // do whatever necessary here
    606                  if ( TData.Hart.FailCnt[current_chnl][0] < 0xffff ) {
   \                     ??vega_radar_handle_rx_error_1:
   \   0000008A   2F42               MOV     R20, R18
   \   0000008C   E050               LDI     R21, 0
   \   0000008E   0F44               LSL     R20
   \   00000090   1F55               ROL     R21
   \   00000092   0F44               LSL     R20
   \   00000094   1F55               ROL     R21
   \   00000096   01FA               MOVW    R31:R30, R21:R20
   \   00000098   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000009A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000009C   8180               LD      R24, Z
   \   0000009E   8191               LDD     R25, Z+1
   \   000000A0   3F8F               CPI     R24, 255
   \   000000A2   4F9F               SBCI    R25, 255
   \   000000A4   F079               BREQ    ??vega_radar_handle_rx_error_6
    607                      TData.Hart.FailCnt[current_chnl][0]++;
   \   000000A6   2F42               MOV     R20, R18
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   0F44               LSL     R20
   \   000000AC   1F55               ROL     R21
   \   000000AE   0F44               LSL     R20
   \   000000B0   1F55               ROL     R21
   \   000000B2   01FA               MOVW    R31:R30, R21:R20
   \   000000B4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B8   8140               LD      R20, Z
   \   000000BA   8151               LDD     R21, Z+1
   \   000000BC   5F4F               SUBI    R20, 255
   \   000000BE   4F5F               SBCI    R21, 255
   \   000000C0   8340               ST      Z, R20
   \   000000C2   8351               STD     Z+1, R21
    608                  }
    609                  if ( TData.Hart.FailCnt[current_chnl][1] < 0xffff ) {
   \                     ??vega_radar_handle_rx_error_6:
   \   000000C4   2F42               MOV     R20, R18
   \   000000C6   E050               LDI     R21, 0
   \   000000C8   0F44               LSL     R20
   \   000000CA   1F55               ROL     R21
   \   000000CC   0F44               LSL     R20
   \   000000CE   1F55               ROL     R21
   \   000000D0   01FA               MOVW    R31:R30, R21:R20
   \   000000D2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000D6   8182               LDD     R24, Z+2
   \   000000D8   8193               LDD     R25, Z+3
   \   000000DA   3F8F               CPI     R24, 255
   \   000000DC   4F9F               SBCI    R25, 255
   \   000000DE   F079               BREQ    ??vega_radar_handle_rx_error_7
    610                      TData.Hart.FailCnt[current_chnl][1]++;
   \   000000E0   2F42               MOV     R20, R18
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   0F44               LSL     R20
   \   000000E6   1F55               ROL     R21
   \   000000E8   0F44               LSL     R20
   \   000000EA   1F55               ROL     R21
   \   000000EC   01FA               MOVW    R31:R30, R21:R20
   \   000000EE   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000F0   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000F2   8142               LDD     R20, Z+2
   \   000000F4   8153               LDD     R21, Z+3
   \   000000F6   5F4F               SUBI    R20, 255
   \   000000F8   4F5F               SBCI    R21, 255
   \   000000FA   8342               STD     Z+2, R20
   \   000000FC   8353               STD     Z+3, R21
    611                  }
    612                  break;
   \                     ??vega_radar_handle_rx_error_7:
   \   000000FE   C03A               RJMP    ??vega_radar_handle_rx_error_3
    613          
    614              case HartCommErr_RX_Checksum:
    615                  // XXX
    616                  // do whatever necessary here
    617                  if ( TData.Hart.FailCnt[current_chnl][0] < 0xffff ) {
   \                     ??vega_radar_handle_rx_error_2:
   \   00000100   2F42               MOV     R20, R18
   \   00000102   E050               LDI     R21, 0
   \   00000104   0F44               LSL     R20
   \   00000106   1F55               ROL     R21
   \   00000108   0F44               LSL     R20
   \   0000010A   1F55               ROL     R21
   \   0000010C   01FA               MOVW    R31:R30, R21:R20
   \   0000010E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000110   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000112   8180               LD      R24, Z
   \   00000114   8191               LDD     R25, Z+1
   \   00000116   3F8F               CPI     R24, 255
   \   00000118   4F9F               SBCI    R25, 255
   \   0000011A   F079               BREQ    ??vega_radar_handle_rx_error_8
    618                      TData.Hart.FailCnt[current_chnl][0]++;
   \   0000011C   2F42               MOV     R20, R18
   \   0000011E   E050               LDI     R21, 0
   \   00000120   0F44               LSL     R20
   \   00000122   1F55               ROL     R21
   \   00000124   0F44               LSL     R20
   \   00000126   1F55               ROL     R21
   \   00000128   01FA               MOVW    R31:R30, R21:R20
   \   0000012A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000012C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000012E   8140               LD      R20, Z
   \   00000130   8151               LDD     R21, Z+1
   \   00000132   5F4F               SUBI    R20, 255
   \   00000134   4F5F               SBCI    R21, 255
   \   00000136   8340               ST      Z, R20
   \   00000138   8351               STD     Z+1, R21
    619                  }
    620                  if ( TData.Hart.FailCnt[current_chnl][1] < 0xffff ) {
   \                     ??vega_radar_handle_rx_error_8:
   \   0000013A   2F42               MOV     R20, R18
   \   0000013C   E050               LDI     R21, 0
   \   0000013E   0F44               LSL     R20
   \   00000140   1F55               ROL     R21
   \   00000142   0F44               LSL     R20
   \   00000144   1F55               ROL     R21
   \   00000146   01FA               MOVW    R31:R30, R21:R20
   \   00000148   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000014A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000014C   8182               LDD     R24, Z+2
   \   0000014E   8193               LDD     R25, Z+3
   \   00000150   3F8F               CPI     R24, 255
   \   00000152   4F9F               SBCI    R25, 255
   \   00000154   F079               BREQ    ??vega_radar_handle_rx_error_3
    621                      TData.Hart.FailCnt[current_chnl][1]++;
   \   00000156   2F42               MOV     R20, R18
   \   00000158   E050               LDI     R21, 0
   \   0000015A   0F44               LSL     R20
   \   0000015C   1F55               ROL     R21
   \   0000015E   0F44               LSL     R20
   \   00000160   1F55               ROL     R21
   \   00000162   01FA               MOVW    R31:R30, R21:R20
   \   00000164   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000166   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000168   8142               LDD     R20, Z+2
   \   0000016A   8153               LDD     R21, Z+3
   \   0000016C   5F4F               SUBI    R20, 255
   \   0000016E   4F5F               SBCI    R21, 255
   \   00000170   8342               STD     Z+2, R20
   \   00000172   8353               STD     Z+3, R21
    622                  }
    623                  break;
    624              }
    625          }
   \                     ??vega_radar_handle_rx_error_3:
   \   00000174   01CB               MOVW    R25:R24, R23:R22
   \   00000176   9508               RET
    626          
    627          

   \                                 In  segment CODE, align 2, keep-with-next
    628          float ConvertBigEndianToLittleEndian(char *Ptr) {
   \                     ConvertBigEndianToLittleEndian:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002   9724               SBIW    R29:R28, 4
   \   00000004   01F8               MOVW    R31:R30, R17:R16
    629              const char FloatBuf[4] = { Ptr[3], Ptr[2], Ptr[1], Ptr[0] };
   \   00000006   8103               LDD     R16, Z+3
   \   00000008   8308               ST      Y, R16
   \   0000000A   8102               LDD     R16, Z+2
   \   0000000C   8309               STD     Y+1, R16
   \   0000000E   8101               LDD     R16, Z+1
   \   00000010   830A               STD     Y+2, R16
   \   00000012   8100               LD      R16, Z
   \   00000014   830B               STD     Y+3, R16
    630              const float *FloatNum  = (float *)FloatBuf;
   \   00000016   01DE               MOVW    R27:R26, R29:R28
    631              return *FloatNum;
   \   00000018   910D               LD      R16, X+
   \   0000001A   911D               LD      R17, X+
   \   0000001C   912D               LD      R18, X+
   \   0000001E   913C               LD      R19, X
   \   00000020   9713               SBIW    R27:R26, 3
   \   00000022   9624               ADIW    R29:R28, 4
   \   00000024   01DA               MOVW    R27:R26, R21:R20
   \   00000026   9508               RET
    632          }
    633          

   \                                 In  segment CODE, align 2, keep-with-next
    634          uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     ReceiveReply:
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   9727               SBIW    R29:R28, 7
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   2EF2               MOV     R15, R18
    635              char RxTimeOut   = false;
   \   0000000A   E080               LDI     R24, 0
    636              char RxStatus    = HART_EVENT_NONE;
   \   0000000C   24EE               CLR     R14
    637              char *BufPtr     = (char *)task->rx_buf;
   \   0000000E   012D               MOVW    R5:R4, R27:R26
   \   00000010   EC02               LDI     R16, 194
   \   00000012   0E40               ADD     R4, R16
   \   00000014   E003               LDI     R16, 3
   \   00000016   1E50               ADC     R5, R16
    638              int  SyncCnt     = 0;
   \   00000018   24CC               CLR     R12
   \   0000001A   24DD               CLR     R13
    639              char RxByte;
    640              int TimeOut = 200;
   \   0000001C   EC08               LDI     R16, 200
   \   0000001E   2E60               MOV     R6, R16
   \   00000020   2477               CLR     R7
    641              do {
    642                  RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_0:
   \   00000022   01A3               MOVW    R21:R20, R7:R6
   \   00000024   019E               MOVW    R19:R18, R29:R28
   \   00000026   018D               MOVW    R17:R16, R27:R26
   \   00000028   5F08               SUBI    R16, 248
   \   0000002A   4F1D               SBCI    R17, 253
   \   0000002C   ........           CALL    OS_GetMailTimed
   \   00000030   2F80               MOV     R24, R16
    643                  if ( RxByte == 0xff ) {
   \   00000032   8108               LD      R16, Y
   \   00000034   3F0F               CPI     R16, 255
   \   00000036   F439               BRNE    ??ReceiveReply_1
    644                      SyncCnt++;
   \   00000038   E001               LDI     R16, 1
   \   0000003A   0EC0               ADD     R12, R16
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   1ED0               ADC     R13, R16
    645                      TimeOut = 25;
   \   00000040   E109               LDI     R16, 25
   \   00000042   2E60               MOV     R6, R16
   \   00000044   2477               CLR     R7
    646                  }
    647              }while ( (SyncCnt < HART_PREAMBLE_MAX_LENGTH) && !RxTimeOut && (RxByte == HART_PREAMBLE) );
   \                     ??ReceiveReply_1:
   \   00000046   E104               LDI     R16, 20
   \   00000048   16C0               CP      R12, R16
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   06D0               CPC     R13, R16
   \   0000004E   F42C               BRGE    ??ReceiveReply_2
   \   00000050   2388               TST     R24
   \   00000052   F419               BRNE    ??ReceiveReply_2
   \   00000054   8108               LD      R16, Y
   \   00000056   3F0F               CPI     R16, 255
   \   00000058   F321               BREQ    ??ReceiveReply_0
    648          
    649              if ( !RxTimeOut && (SyncCnt >= HART_PREAMBLE_MIN_LENGTH ) &&  (SyncCnt < HART_PREAMBLE_MAX_LENGTH) ) {
   \                     ??ReceiveReply_2:
   \   0000005A   2388               TST     R24
   \   0000005C   F009               BREQ    $+2+2
   \   0000005E   C11C               RJMP    ??ReceiveReply_3
   \   00000060   E005               LDI     R16, 5
   \   00000062   16C0               CP      R12, R16
   \   00000064   E000               LDI     R16, 0
   \   00000066   06D0               CPC     R13, R16
   \   00000068   F40C               BRGE    $+2+2
   \   0000006A   C116               RJMP    ??ReceiveReply_3
   \   0000006C   E104               LDI     R16, 20
   \   0000006E   16C0               CP      R12, R16
   \   00000070   E000               LDI     R16, 0
   \   00000072   06D0               CPC     R13, R16
   \   00000074   F00C               BRLT    $+2+2
   \   00000076   C110               RJMP    ??ReceiveReply_3
    650                  *BufPtr = RxByte;
   \   00000078   8108               LD      R16, Y
   \   0000007A   01F2               MOVW    R31:R30, R5:R4
   \   0000007C   8300               ST      Z, R16
    651                  BufPtr++;
   \   0000007E   E001               LDI     R16, 1
   \   00000080   0E40               ADD     R4, R16
   \   00000082   E000               LDI     R16, 0
   \   00000084   1E50               ADC     R5, R16
    652                  char MasterNum   = RxByte;
   \   00000086   8108               LD      R16, Y
   \   00000088   830B               STD     Y+3, R16
    653                  switch ( MasterNum ) {
   \   0000008A   810B               LDD     R16, Y+3
   \   0000008C   5802               SUBI    R16, 130
   \   0000008E   F029               BREQ    ??ReceiveReply_4
   \   00000090   5004               SUBI    R16, 4
   \   00000092   F029               BREQ    ??ReceiveReply_5
   \   00000094   5800               SUBI    R16, 128
   \   00000096   F011               BREQ    ??ReceiveReply_6
   \   00000098   C101               RJMP    ??ReceiveReply_7
    654                  case HART_MSG_START_FROM_MASTER_TO_SLAVE:
    655                      break;
   \                     ??ReceiveReply_4:
   \   0000009A   C100               RJMP    ??ReceiveReply_7
    656                  case HART_MSG_START_FROM_SLAVE_TO_MASTER:
    657                      break;
   \                     ??ReceiveReply_6:
   \   0000009C   C0FF               RJMP    ??ReceiveReply_7
    658                  case HART_MSG_START_FROM_SLAVE_TO_MASTER_LONG:
    659                      {
    660                          HARTLongMessage *Msg = (HARTLongMessage *)BufPtr;
   \                     ??ReceiveReply_5:
   \   0000009E   824D               STD     Y+5, R4
   \   000000A0   825E               STD     Y+6, R5
    661                          int  hRxCnt = 0;
   \   000000A2   24AA               CLR     R10
   \   000000A4   24BB               CLR     R11
    662                          do {
    663                              RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_8:
   \   000000A6   01A3               MOVW    R21:R20, R7:R6
   \   000000A8   019E               MOVW    R19:R18, R29:R28
   \   000000AA   018D               MOVW    R17:R16, R27:R26
   \   000000AC   5F08               SUBI    R16, 248
   \   000000AE   4F1D               SBCI    R17, 253
   \   000000B0   ........           CALL    OS_GetMailTimed
   \   000000B4   2F80               MOV     R24, R16
    664                              BufPtr[hRxCnt++] = RxByte;
   \   000000B6   8108               LD      R16, Y
   \   000000B8   01F2               MOVW    R31:R30, R5:R4
   \   000000BA   0DEA               ADD     R30, R10
   \   000000BC   1DFB               ADC     R31, R11
   \   000000BE   8300               ST      Z, R16
   \   000000C0   E001               LDI     R16, 1
   \   000000C2   0EA0               ADD     R10, R16
   \   000000C4   E000               LDI     R16, 0
   \   000000C6   1EB0               ADC     R11, R16
    665                              // Make sure we are within limits of the buffer
    666                          }while ( !RxTimeOut && hRxCnt < sizeof(HARTLongMessage) );
   \   000000C8   2388               TST     R24
   \   000000CA   F429               BRNE    ??ReceiveReply_9
   \   000000CC   E008               LDI     R16, 8
   \   000000CE   16A0               CP      R10, R16
   \   000000D0   E000               LDI     R16, 0
   \   000000D2   06B0               CPC     R11, R16
   \   000000D4   F340               BRCS    ??ReceiveReply_8
    667                          if ( RxTimeOut ) {
   \                     ??ReceiveReply_9:
   \   000000D6   2388               TST     R24
   \   000000D8   F019               BREQ    ??ReceiveReply_10
    668                              RxStatus	 = HART_EVENT_TIMEOUT;
   \   000000DA   E008               LDI     R16, 8
   \   000000DC   2EE0               MOV     R14, R16
   \   000000DE   C0DE               RJMP    ??ReceiveReply_7
    669                          } else if ( hRxCnt >= HART_MAX_RX_BUFFER_SIZE ||  Msg->MsessageSize >= HART_MAX_DATA_LENGTH ) {
   \                     ??ReceiveReply_10:
   \   000000E0   E800               LDI     R16, 128
   \   000000E2   16A0               CP      R10, R16
   \   000000E4   E001               LDI     R16, 1
   \   000000E6   06B0               CPC     R11, R16
   \   000000E8   F42C               BRGE    ??ReceiveReply_11
   \   000000EA   81ED               LDD     R30, Y+5
   \   000000EC   81FE               LDD     R31, Y+6
   \   000000EE   8106               LDD     R16, Z+6
   \   000000F0   3F0D               CPI     R16, 253
   \   000000F2   F018               BRCS    ??ReceiveReply_12
    670                              RxStatus	 = HART_EVENT_RX_ERROR;
   \                     ??ReceiveReply_11:
   \   000000F4   E002               LDI     R16, 2
   \   000000F6   2EE0               MOV     R14, R16
   \   000000F8   C0D1               RJMP    ??ReceiveReply_7
    671                          } else {
    672                              int  mRxCnt = 0;
   \                     ??ReceiveReply_12:
   \   000000FA   2488               CLR     R8
   \   000000FC   2499               CLR     R9
    673                              BufPtr += sizeof(HARTLongMessage);
   \   000000FE   E008               LDI     R16, 8
   \   00000100   0E40               ADD     R4, R16
   \   00000102   E000               LDI     R16, 0
   \   00000104   1E50               ADC     R5, R16
    674                              do {
    675                                  RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_13:
   \   00000106   01A3               MOVW    R21:R20, R7:R6
   \   00000108   019E               MOVW    R19:R18, R29:R28
   \   0000010A   018D               MOVW    R17:R16, R27:R26
   \   0000010C   5F08               SUBI    R16, 248
   \   0000010E   4F1D               SBCI    R17, 253
   \   00000110   ........           CALL    OS_GetMailTimed
   \   00000114   2F80               MOV     R24, R16
    676                                  BufPtr[mRxCnt++] = RxByte;
   \   00000116   8108               LD      R16, Y
   \   00000118   01F2               MOVW    R31:R30, R5:R4
   \   0000011A   0DE8               ADD     R30, R8
   \   0000011C   1DF9               ADC     R31, R9
   \   0000011E   8300               ST      Z, R16
   \   00000120   E001               LDI     R16, 1
   \   00000122   0E80               ADD     R8, R16
   \   00000124   E000               LDI     R16, 0
   \   00000126   1E90               ADC     R9, R16
    677                              }while ( !RxTimeOut && (mRxCnt < Msg->MsessageSize) );
   \   00000128   2388               TST     R24
   \   0000012A   F439               BRNE    ??ReceiveReply_14
   \   0000012C   81ED               LDD     R30, Y+5
   \   0000012E   81FE               LDD     R31, Y+6
   \   00000130   8106               LDD     R16, Z+6
   \   00000132   E010               LDI     R17, 0
   \   00000134   1680               CP      R8, R16
   \   00000136   0691               CPC     R9, R17
   \   00000138   F334               BRLT    ??ReceiveReply_13
    678                              if ( RxTimeOut ) {
   \                     ??ReceiveReply_14:
   \   0000013A   2388               TST     R24
   \   0000013C   F019               BREQ    ??ReceiveReply_15
    679                                  RxStatus	  = HART_EVENT_TIMEOUT;
   \   0000013E   E008               LDI     R16, 8
   \   00000140   2EE0               MOV     R14, R16
   \   00000142   C0AC               RJMP    ??ReceiveReply_7
    680                              } else {
    681                                  uint8_t pcsum = task->rx_buf[hRxCnt + mRxCnt];
   \                     ??ReceiveReply_15:
   \   00000144   0185               MOVW    R17:R16, R11:R10
   \   00000146   0D08               ADD     R16, R8
   \   00000148   1D19               ADC     R17, R9
   \   0000014A   01FD               MOVW    R31:R30, R27:R26
   \   0000014C   0FE0               ADD     R30, R16
   \   0000014E   1FF1               ADC     R31, R17
   \   00000150   53EE               SUBI    R30, 62
   \   00000152   4FFC               SBCI    R31, 252
   \   00000154   8100               LD      R16, Z
   \   00000156   830A               STD     Y+2, R16
    682                                  uint8_t csum  = hart_msg_calc_csum((const uint8_t *)task->rx_buf, hRxCnt + mRxCnt);
   \   00000158   0195               MOVW    R19:R18, R11:R10
   \   0000015A   0D28               ADD     R18, R8
   \   0000015C   1D39               ADC     R19, R9
   \   0000015E   018D               MOVW    R17:R16, R27:R26
   \   00000160   530E               SUBI    R16, 62
   \   00000162   4F1C               SBCI    R17, 252
   \   00000164   ........           CALL    hart_msg_calc_csum
   \   00000168   8309               STD     Y+1, R16
    683                                  if ( csum == pcsum ) {
   \   0000016A   8109               LDD     R16, Y+1
   \   0000016C   811A               LDD     R17, Y+2
   \   0000016E   1701               CP      R16, R17
   \   00000170   F009               BREQ    $+2+2
   \   00000172   C07D               RJMP    ??ReceiveReply_16
    684                                      switch ( TData.Hart.HartCmd[current_chnl] ) {
   \   00000174   2D0F               MOV     R16, R15
   \   00000176   E010               LDI     R17, 0
   \   00000178   01F8               MOVW    R31:R30, R17:R16
   \   0000017A   ....               SUBI    R30, LOW((-(TData + 148) & 0xFFFF))
   \   0000017C   ....               SBCI    R31, HIGH((-(TData + 148) & 0xFFFF))
   \   0000017E   8100               LD      R16, Z
   \   00000180   5001               SUBI    R16, 1
   \   00000182   F019               BREQ    ??ReceiveReply_17
   \   00000184   5002               SUBI    R16, 2
   \   00000186   F121               BREQ    ??ReceiveReply_18
   \   00000188   C06F               RJMP    ??ReceiveReply_19
    685                                      case 1:
    686                                          TData.Hart.Distance[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[2]);
   \                     ??ReceiveReply_17:
   \   0000018A   0182               MOVW    R17:R16, R5:R4
   \   0000018C   5F0E               SUBI    R16, 254
   \   0000018E   4F1F               SBCI    R17, 255
   \   00000190   ....               RCALL   ConvertBigEndianToLittleEndian
   \   00000192   01A8               MOVW    R21:R20, R17:R16
   \   00000194   01B9               MOVW    R23:R22, R19:R18
   \   00000196   2D0F               MOV     R16, R15
   \   00000198   E010               LDI     R17, 0
   \   0000019A   0F00               LSL     R16
   \   0000019C   1F11               ROL     R17
   \   0000019E   0F00               LSL     R16
   \   000001A0   1F11               ROL     R17
   \   000001A2   01F8               MOVW    R31:R30, R17:R16
   \   000001A4   ....               SUBI    R30, LOW((-(TData + 268) & 0xFFFF))
   \   000001A6   ....               SBCI    R31, HIGH((-(TData + 268) & 0xFFFF))
   \   000001A8   018A               MOVW    R17:R16, R21:R20
   \   000001AA   019B               MOVW    R19:R18, R23:R22
   \   000001AC   8300               ST      Z, R16
   \   000001AE   8311               STD     Z+1, R17
   \   000001B0   8322               STD     Z+2, R18
   \   000001B2   8333               STD     Z+3, R19
    687                                          TData.Hart.FailCnt[current_chnl][0] = 0;
   \   000001B4   2D0F               MOV     R16, R15
   \   000001B6   E010               LDI     R17, 0
   \   000001B8   0F00               LSL     R16
   \   000001BA   1F11               ROL     R17
   \   000001BC   0F00               LSL     R16
   \   000001BE   1F11               ROL     R17
   \   000001C0   01F8               MOVW    R31:R30, R17:R16
   \   000001C2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001C4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001C6   E000               LDI     R16, 0
   \   000001C8   8300               ST      Z, R16
   \   000001CA   E000               LDI     R16, 0
   \   000001CC   8301               STD     Z+1, R16
    688                                          break;
   \   000001CE   C04C               RJMP    ??ReceiveReply_19
    689                                      case 3:
    690                                          TData.Hart.HartCurrent[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[1]);
   \                     ??ReceiveReply_18:
   \   000001D0   0182               MOVW    R17:R16, R5:R4
   \   000001D2   5F0F               SUBI    R16, 255
   \   000001D4   4F1F               SBCI    R17, 255
   \   000001D6   ....               RCALL   ConvertBigEndianToLittleEndian
   \   000001D8   01A8               MOVW    R21:R20, R17:R16
   \   000001DA   01B9               MOVW    R23:R22, R19:R18
   \   000001DC   2D0F               MOV     R16, R15
   \   000001DE   E010               LDI     R17, 0
   \   000001E0   0F00               LSL     R16
   \   000001E2   1F11               ROL     R17
   \   000001E4   0F00               LSL     R16
   \   000001E6   1F11               ROL     R17
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   ....               SUBI    R30, LOW((-(TData + 220) & 0xFFFF))
   \   000001EC   ....               SBCI    R31, HIGH((-(TData + 220) & 0xFFFF))
   \   000001EE   018A               MOVW    R17:R16, R21:R20
   \   000001F0   019B               MOVW    R19:R18, R23:R22
   \   000001F2   8300               ST      Z, R16
   \   000001F4   8311               STD     Z+1, R17
   \   000001F6   8322               STD     Z+2, R18
   \   000001F8   8333               STD     Z+3, R19
    691                                          // Ignore UnitId and other data. char UnitId     = BufPtr[5+Offset];
    692                                          // Only keep Distance and level
    693                                          TData.Hart.Distance[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[6 + 0]);
   \   000001FA   0182               MOVW    R17:R16, R5:R4
   \   000001FC   5F0A               SUBI    R16, 250
   \   000001FE   4F1F               SBCI    R17, 255
   \   00000200   ....               RCALL   ConvertBigEndianToLittleEndian
   \   00000202   01A8               MOVW    R21:R20, R17:R16
   \   00000204   01B9               MOVW    R23:R22, R19:R18
   \   00000206   2D0F               MOV     R16, R15
   \   00000208   E010               LDI     R17, 0
   \   0000020A   0F00               LSL     R16
   \   0000020C   1F11               ROL     R17
   \   0000020E   0F00               LSL     R16
   \   00000210   1F11               ROL     R17
   \   00000212   01F8               MOVW    R31:R30, R17:R16
   \   00000214   ....               SUBI    R30, LOW((-(TData + 268) & 0xFFFF))
   \   00000216   ....               SBCI    R31, HIGH((-(TData + 268) & 0xFFFF))
   \   00000218   018A               MOVW    R17:R16, R21:R20
   \   0000021A   019B               MOVW    R19:R18, R23:R22
   \   0000021C   8300               ST      Z, R16
   \   0000021E   8311               STD     Z+1, R17
   \   00000220   8322               STD     Z+2, R18
   \   00000222   8333               STD     Z+3, R19
    694                                          TData.Hart.Level[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[6 + 5]);
   \   00000224   0182               MOVW    R17:R16, R5:R4
   \   00000226   5F05               SUBI    R16, 245
   \   00000228   4F1F               SBCI    R17, 255
   \   0000022A   ....               RCALL   ConvertBigEndianToLittleEndian
   \   0000022C   01A8               MOVW    R21:R20, R17:R16
   \   0000022E   01B9               MOVW    R23:R22, R19:R18
   \   00000230   2D0F               MOV     R16, R15
   \   00000232   E010               LDI     R17, 0
   \   00000234   0F00               LSL     R16
   \   00000236   1F11               ROL     R17
   \   00000238   0F00               LSL     R16
   \   0000023A   1F11               ROL     R17
   \   0000023C   01F8               MOVW    R31:R30, R17:R16
   \   0000023E   ....               SUBI    R30, LOW((-(TData + 316) & 0xFFFF))
   \   00000240   ....               SBCI    R31, HIGH((-(TData + 316) & 0xFFFF))
   \   00000242   018A               MOVW    R17:R16, R21:R20
   \   00000244   019B               MOVW    R19:R18, R23:R22
   \   00000246   8300               ST      Z, R16
   \   00000248   8311               STD     Z+1, R17
   \   0000024A   8322               STD     Z+2, R18
   \   0000024C   8333               STD     Z+3, R19
    695                                          TData.Hart.FailCnt[current_chnl][0] = 0;
   \   0000024E   2D0F               MOV     R16, R15
   \   00000250   E010               LDI     R17, 0
   \   00000252   0F00               LSL     R16
   \   00000254   1F11               ROL     R17
   \   00000256   0F00               LSL     R16
   \   00000258   1F11               ROL     R17
   \   0000025A   01F8               MOVW    R31:R30, R17:R16
   \   0000025C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000025E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000260   E000               LDI     R16, 0
   \   00000262   8300               ST      Z, R16
   \   00000264   E000               LDI     R16, 0
   \   00000266   8301               STD     Z+1, R16
    696                                          break;
    697                                      }
    698                                      RxStatus = HART_EVENT_RX_COMPLETE;
   \                     ??ReceiveReply_19:
   \   00000268   24EE               CLR     R14
   \   0000026A   94E3               INC     R14
   \   0000026C   C002               RJMP    ??ReceiveReply_20
    699                                  } else {
    700                                      RxStatus = HART_EVENT_CHECKSUM_ERROR;
   \                     ??ReceiveReply_16:
   \   0000026E   E100               LDI     R16, 16
   \   00000270   2EE0               MOV     R14, R16
    701                                  }
    702                                  char Cnt = 0;
   \                     ??ReceiveReply_20:
   \   00000272   E090               LDI     R25, 0
    703                                  do {
    704                                      char RxByte;
    705                                      RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_21:
   \   00000274   01A3               MOVW    R21:R20, R7:R6
   \   00000276   019E               MOVW    R19:R18, R29:R28
   \   00000278   5F2C               SUBI    R18, 252
   \   0000027A   4F3F               SBCI    R19, 255
   \   0000027C   018D               MOVW    R17:R16, R27:R26
   \   0000027E   5F08               SUBI    R16, 248
   \   00000280   4F1D               SBCI    R17, 253
   \   00000282   ........           CALL    OS_GetMailTimed
   \   00000286   2F80               MOV     R24, R16
    706                                  }while ( !RxTimeOut && Cnt++ < HART_MAX_DATA_LENGTH );
   \   00000288   2388               TST     R24
   \   0000028A   F441               BRNE    ??ReceiveReply_7
   \   0000028C   2F09               MOV     R16, R25
   \   0000028E   2F90               MOV     R25, R16
   \   00000290   9593               INC     R25
   \   00000292   3F0D               CPI     R16, 253
   \   00000294   F378               BRCS    ??ReceiveReply_21
    707                              }
    708                          }
    709                      }
    710                      break;
   \   00000296   C002               RJMP    ??ReceiveReply_7
    711                  }
    712              } else {
    713                  RxStatus = HART_EVENT_RX_ERROR;
   \                     ??ReceiveReply_3:
   \   00000298   E002               LDI     R16, 2
   \   0000029A   2EE0               MOV     R14, R16
    714              }
    715              return RxStatus;
   \                     ??ReceiveReply_7:
   \   0000029C   2D0E               MOV     R16, R14
   \   0000029E   9627               ADIW    R29:R28, 7
   \   000002A0   E1E0               LDI     R30, 16
   \   000002A2   ........           JMP     ?EPILOGUE_B16_L09
    716          }
    717          ////////////////////////////////////////////////////////////////////////////////
    718          //
    719          // core hart work
    720          //
    721          ////////////////////////////////////////////////////////////////////////////////
    722          

   \                                 In  segment CODE, align 2, keep-with-next
    723          void do_hart_transaction(HartTaskStruct *task, const hart_channel_t current_chnl, HartTransaction *t) {
   \                     do_hart_transaction:
   \   00000000   ........           CALL    ?PROLOGUE16_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004                      REQUIRE ?Register_R15_is_cg_reg
   \   00000004   9724               SBIW    R29:R28, 4
   \   00000006   01C8               MOVW    R25:R24, R17:R16
   \   00000008   2EC2               MOV     R12, R18
   \   0000000A   012A               MOVW    R5:R4, R21:R20
    724              long        t1    = OS_Time;
   \   0000000C   ....               LDI     R30, LOW(OS_Global)
   \   0000000E   ....               LDI     R31, (OS_Global) >> 8
   \   00000010   8882               LDD     R8, Z+18
   \   00000012   8893               LDD     R9, Z+19
   \   00000014   88A4               LDD     R10, Z+20
   \   00000016   88B5               LDD     R11, Z+21
    725              HartChannel *chnl = &_hart_channels[current_chnl];
   \   00000018   2D0C               MOV     R16, R12
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   E147               LDI     R20, 23
   \   0000001E   E050               LDI     R21, 0
   \   00000020   ........           CALL    ?S_EC_MUL_L02
   \   00000024   ....               LDI     R26, LOW(_hart_channels)
   \   00000026   ....               LDI     R27, (_hart_channels) >> 8
   \   00000028   0FA0               ADD     R26, R16
   \   0000002A   1FB1               ADC     R27, R17
    726          
    727              hart_channel_t ModemChannel = (hart_channel_t)(current_chnl - task->start_chnl);
   \   0000002C   01FC               MOVW    R31:R30, R25:R24
   \   0000002E   5CE8               SUBI    R30, 200
   \   00000030   4FFD               SBCI    R31, 253
   \   00000032   8100               LD      R16, Z
   \   00000034   2CEC               MOV     R14, R12
   \   00000036   1AE0               SUB     R14, R16
    728          
    729              hart_channel_inc_stat(chnl, HartChannelStatItem_TOTAL_REQS);
   \   00000038   E023               LDI     R18, 3
   \   0000003A   018D               MOVW    R17:R16, R27:R26
   \   0000003C   ....               RCALL   hart_channel_inc_stat
    730          
    731          
    732              hart_reset_rx(task, current_chnl);
   \   0000003E   2D2C               MOV     R18, R12
   \   00000040   018C               MOVW    R17:R16, R25:R24
   \   00000042   ....               RCALL   hart_reset_rx
    733              hart_reset_tx(task);
   \   00000044   018C               MOVW    R17:R16, R25:R24
   \   00000046   ....               RCALL   hart_reset_tx
    734              //uint8_t tmp1= PORTC;
    735              hart_gpio_channel_select(current_chnl);
   \   00000048   2D0C               MOV     R16, R12
   \   0000004A   ........           CALL    hart_gpio_channel_select
    736              OS_Delay(15); // Wait a little to detect if any other HArt modem is active.
   \   0000004E   E00F               LDI     R16, 15
   \   00000050   E010               LDI     R17, 0
   \   00000052   ........           CALL    OS_Delay
    737          
    738              //uint8_t tmp3= PORTC;
    739              // Don't change channel before other channel is selected
    740              task->rx_Channel = ModemChannel;
   \   00000056   01FC               MOVW    R31:R30, R25:R24
   \   00000058   5BEE               SUBI    R30, 190
   \   0000005A   4FFA               SBCI    R31, 250
   \   0000005C   82E0               ST      Z, R14
    741              long LastRxTime = 0;
   \   0000005E   E000               LDI     R16, 0
   \   00000060   8308               ST      Y, R16
   \   00000062   E000               LDI     R16, 0
   \   00000064   8309               STD     Y+1, R16
   \   00000066   E000               LDI     R16, 0
   \   00000068   830A               STD     Y+2, R16
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   830B               STD     Y+3, R16
    742              if ( task->rx_Time[ModemChannel] ) {
   \   0000006E   2D0E               MOV     R16, R14
   \   00000070   E010               LDI     R17, 0
   \   00000072   0F00               LSL     R16
   \   00000074   1F11               ROL     R17
   \   00000076   0F00               LSL     R16
   \   00000078   1F11               ROL     R17
   \   0000007A   01FC               MOVW    R31:R30, R25:R24
   \   0000007C   0FE0               ADD     R30, R16
   \   0000007E   1FF1               ADC     R31, R17
   \   00000080   5BE9               SUBI    R30, 185
   \   00000082   4FFA               SBCI    R31, 250
   \   00000084   8100               LD      R16, Z
   \   00000086   8111               LDD     R17, Z+1
   \   00000088   8122               LDD     R18, Z+2
   \   0000008A   8133               LDD     R19, Z+3
   \   0000008C   2B01               OR      R16, R17
   \   0000008E   2B02               OR      R16, R18
   \   00000090   2B03               OR      R16, R19
   \   00000092   F0E9               BREQ    ??do_hart_transaction_0
    743                  LastRxTime = OS_Time - task->rx_Time[ModemChannel];
   \   00000094   ....               LDI     R30, LOW(OS_Global)
   \   00000096   ....               LDI     R31, (OS_Global) >> 8
   \   00000098   8902               LDD     R16, Z+18
   \   0000009A   8913               LDD     R17, Z+19
   \   0000009C   8924               LDD     R18, Z+20
   \   0000009E   8935               LDD     R19, Z+21
   \   000000A0   2D4E               MOV     R20, R14
   \   000000A2   E050               LDI     R21, 0
   \   000000A4   0F44               LSL     R20
   \   000000A6   1F55               ROL     R21
   \   000000A8   0F44               LSL     R20
   \   000000AA   1F55               ROL     R21
   \   000000AC   01FC               MOVW    R31:R30, R25:R24
   \   000000AE   0FE4               ADD     R30, R20
   \   000000B0   1FF5               ADC     R31, R21
   \   000000B2   5BE9               SUBI    R30, 185
   \   000000B4   4FFA               SBCI    R31, 250
   \   000000B6   8140               LD      R20, Z
   \   000000B8   8151               LDD     R21, Z+1
   \   000000BA   8162               LDD     R22, Z+2
   \   000000BC   8173               LDD     R23, Z+3
   \   000000BE   1B04               SUB     R16, R20
   \   000000C0   0B15               SBC     R17, R21
   \   000000C2   0B26               SBC     R18, R22
   \   000000C4   0B37               SBC     R19, R23
   \   000000C6   8308               ST      Y, R16
   \   000000C8   8319               STD     Y+1, R17
   \   000000CA   832A               STD     Y+2, R18
   \   000000CC   833B               STD     Y+3, R19
    744              }
    745          
    746              char NoOtherRx = LastRxTime > 30000L;
   \                     ??do_hart_transaction_0:
   \   000000CE   8148               LD      R20, Y
   \   000000D0   8159               LDD     R21, Y+1
   \   000000D2   816A               LDD     R22, Y+2
   \   000000D4   817B               LDD     R23, Y+3
   \   000000D6   3341               CPI     R20, 49
   \   000000D8   E705               LDI     R16, 117
   \   000000DA   0750               CPC     R21, R16
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   0760               CPC     R22, R16
   \   000000E0   E000               LDI     R16, 0
   \   000000E2   0770               CPC     R23, R16
   \   000000E4   F01C               BRLT    ??do_hart_transaction_1
   \   000000E6   24DD               CLR     R13
   \   000000E8   94D3               INC     R13
   \   000000EA   C001               RJMP    ??do_hart_transaction_2
   \                     ??do_hart_transaction_1:
   \   000000EC   24DD               CLR     R13
    747              // NoOtherRx = 1;
    748              if ( !LastRxTime || NoOtherRx ) {
   \                     ??do_hart_transaction_2:
   \   000000EE   8108               LD      R16, Y
   \   000000F0   8119               LDD     R17, Y+1
   \   000000F2   812A               LDD     R18, Y+2
   \   000000F4   813B               LDD     R19, Y+3
   \   000000F6   2B01               OR      R16, R17
   \   000000F8   2B02               OR      R16, R18
   \   000000FA   2B03               OR      R16, R19
   \   000000FC   F019               BREQ    ??do_hart_transaction_3
   \   000000FE   20DD               TST     R13
   \   00000100   F409               BRNE    $+2+2
   \   00000102   C09D               RJMP    ??do_hart_transaction_4
    749          
    750                  t->make_request(task, current_chnl);
   \                     ??do_hart_transaction_3:
   \   00000104   2D2C               MOV     R18, R12
   \   00000106   018C               MOVW    R17:R16, R25:R24
   \   00000108   01F2               MOVW    R31:R30, R5:R4
   \   0000010A   8140               LD      R20, Z
   \   0000010C   8151               LDD     R21, Z+1
   \   0000010E   01FA               MOVW    R31:R30, R21:R20
   \   00000110   9509               ICALL
    751                  //
    752                  // now set the tx length of tx_buf
    753                  //
    754                  task->tx_len = task->hart_encoder.tx_ndx;
   \   00000112   01FC               MOVW    R31:R30, R25:R24
   \   00000114   56EC               SUBI    R30, 108
   \   00000116   4FFA               SBCI    R31, 250
   \   00000118   8120               LD      R18, Z
   \   0000011A   8131               LDD     R19, Z+1
   \   0000011C   01FC               MOVW    R31:R30, R25:R24
   \   0000011E   5CE4               SUBI    R30, 196
   \   00000120   4FFD               SBCI    R31, 253
   \   00000122   8320               ST      Z, R18
   \   00000124   8331               STD     Z+1, R19
    755          #if HART_CONTROL_RTS_IN_TASK  == 1
    756                  hart_gpio_hart_carrier_on(task->modem_no);
   \   00000126   01FC               MOVW    R31:R30, R25:R24
   \   00000128   5CE9               SUBI    R30, 201
   \   0000012A   4FFD               SBCI    R31, 253
   \   0000012C   8100               LD      R16, Z
   \   0000012E   ........           CALL    hart_gpio_hart_carrier_on
    757          #endif
    758                  OS_Delay(5);
   \   00000132   E005               LDI     R16, 5
   \   00000134   E010               LDI     R17, 0
   \   00000136   ........           CALL    OS_Delay
    759                  // Be sure we have no unhandled signals before start
    760                  OS_ClearEvents(&task->tcb);
   \   0000013A   018C               MOVW    R17:R16, R25:R24
   \   0000013C   5E0A               SUBI    R16, 234
   \   0000013E   4F1D               SBCI    R17, 253
   \   00000140   ........           CALL    OS_ClearEvents
    761                  //OS_ClearMB(&task->RxMailBox);
    762                  hart_start_transaction(task);
   \   00000144   018C               MOVW    R17:R16, R25:R24
   \   00000146   ....               RCALL   hart_start_transaction
    763                  // Task will halt if no signal!
    764                  // Changed code to avoid halt EHS
    765                  char TxFlag = OS_WaitEventTimed(HART_EVENT_TX_COMPLETE, 2000);
   \   00000148   ED20               LDI     R18, 208
   \   0000014A   E037               LDI     R19, 7
   \   0000014C   E004               LDI     R16, 4
   \   0000014E   ........           CALL    OS_WaitEventTimed
   \   00000152   2E70               MOV     R7, R16
    766          #if HART_CONTROL_RTS_IN_TASK  == 1
    767                  hart_gpio_hart_carrier_off(task->modem_no);
   \   00000154   01FC               MOVW    R31:R30, R25:R24
   \   00000156   5CE9               SUBI    R30, 201
   \   00000158   4FFD               SBCI    R31, 253
   \   0000015A   8100               LD      R16, Z
   \   0000015C   ........           CALL    hart_gpio_hart_carrier_off
    768          #endif
    769                  if ( TxFlag ) {
   \   00000160   2077               TST     R7
   \   00000162   F409               BRNE    $+2+2
   \   00000164   C080               RJMP    ??do_hart_transaction_5
    770                      task->rx_Listen[ModemChannel] = false;
   \   00000166   24FF               CLR     R15
   \   00000168   01FC               MOVW    R31:R30, R25:R24
   \   0000016A   0DEE               ADD     R30, R14
   \   0000016C   1DFF               ADC     R31, R15
   \   0000016E   5BED               SUBI    R30, 189
   \   00000170   4FFA               SBCI    R31, 250
   \   00000172   E000               LDI     R16, 0
   \   00000174   8300               ST      Z, R16
    771          
    772                      hart_control_Rx_Enable(task->modem_no, TRUE);
   \   00000176   E011               LDI     R17, 1
   \   00000178   01FC               MOVW    R31:R30, R25:R24
   \   0000017A   5CE9               SUBI    R30, 201
   \   0000017C   4FFD               SBCI    R31, 253
   \   0000017E   8100               LD      R16, Z
   \   00000180   ....               RCALL   hart_control_Rx_Enable
    773                      uint8_t event_status = t->complete(task, current_chnl);
   \   00000182   2D2C               MOV     R18, R12
   \   00000184   018C               MOVW    R17:R16, R25:R24
   \   00000186   01F2               MOVW    R31:R30, R5:R4
   \   00000188   8142               LDD     R20, Z+2
   \   0000018A   8153               LDD     R21, Z+3
   \   0000018C   01FA               MOVW    R31:R30, R21:R20
   \   0000018E   9509               ICALL
   \   00000190   2E60               MOV     R6, R16
    774                      task->rx_Time[ModemChannel] = 0;
   \   00000192   2D0E               MOV     R16, R14
   \   00000194   E010               LDI     R17, 0
   \   00000196   0F00               LSL     R16
   \   00000198   1F11               ROL     R17
   \   0000019A   0F00               LSL     R16
   \   0000019C   1F11               ROL     R17
   \   0000019E   01FC               MOVW    R31:R30, R25:R24
   \   000001A0   0FE0               ADD     R30, R16
   \   000001A2   1FF1               ADC     R31, R17
   \   000001A4   5BE9               SUBI    R30, 185
   \   000001A6   4FFA               SBCI    R31, 250
   \   000001A8   E000               LDI     R16, 0
   \   000001AA   E010               LDI     R17, 0
   \   000001AC   E020               LDI     R18, 0
   \   000001AE   E030               LDI     R19, 0
   \   000001B0   8300               ST      Z, R16
   \   000001B2   8311               STD     Z+1, R17
   \   000001B4   8322               STD     Z+2, R18
   \   000001B6   8333               STD     Z+3, R19
    775                      task->rx_Listen[ModemChannel] = true;
   \   000001B8   24FF               CLR     R15
   \   000001BA   01FC               MOVW    R31:R30, R25:R24
   \   000001BC   0DEE               ADD     R30, R14
   \   000001BE   1DFF               ADC     R31, R15
   \   000001C0   5BED               SUBI    R30, 189
   \   000001C2   4FFA               SBCI    R31, 250
   \   000001C4   E001               LDI     R16, 1
   \   000001C6   8300               ST      Z, R16
    776                      switch ( event_status ) {
   \   000001C8   2D06               MOV     R16, R6
   \   000001CA   5001               SUBI    R16, 1
   \   000001CC   F129               BREQ    ??do_hart_transaction_6
   \   000001CE   950A               DEC     R16
   \   000001D0   F0A1               BREQ    ??do_hart_transaction_7
   \   000001D2   5006               SUBI    R16, 6
   \   000001D4   F019               BREQ    ??do_hart_transaction_8
   \   000001D6   5008               SUBI    R16, 8
   \   000001D8   F119               BREQ    ??do_hart_transaction_9
   \   000001DA   C045               RJMP    ??do_hart_transaction_5
    777                      case HART_EVENT_TIMEOUT: // Timeout
    778                          hart_channel_inc_stat(chnl, HartChannelStatItem_RX_TIMEOUT);
   \                     ??do_hart_transaction_8:
   \   000001DC   E022               LDI     R18, 2
   \   000001DE   018D               MOVW    R17:R16, R27:R26
   \   000001E0   ....               RCALL   hart_channel_inc_stat
    779                          hart_channel_set_status(chnl, HartChannelStatus_No_Response);
   \   000001E2   E021               LDI     R18, 1
   \   000001E4   018D               MOVW    R17:R16, R27:R26
   \   000001E6   ....               RCALL   hart_channel_set_status
    780          
    781                          t->error(task, current_chnl, HartCommErr_RX_Timeout);
   \   000001E8   E031               LDI     R19, 1
   \   000001EA   2D2C               MOV     R18, R12
   \   000001EC   018C               MOVW    R17:R16, R25:R24
   \   000001EE   01F2               MOVW    R31:R30, R5:R4
   \   000001F0   8144               LDD     R20, Z+4
   \   000001F2   8155               LDD     R21, Z+5
   \   000001F4   01FA               MOVW    R31:R30, R21:R20
   \   000001F6   9509               ICALL
    782                          break;
   \   000001F8   C036               RJMP    ??do_hart_transaction_5
    783                      case HART_EVENT_RX_ERROR:
    784                          // protocol parsing error
    785                          hart_channel_inc_stat(chnl, HartChannelStatItem_RX_INVALID);
   \                     ??do_hart_transaction_7:
   \   000001FA   E020               LDI     R18, 0
   \   000001FC   018D               MOVW    R17:R16, R27:R26
   \   000001FE   ....               RCALL   hart_channel_inc_stat
    786                          hart_channel_set_status(chnl, HartChannelStatus_Invalid_Response);
   \   00000200   E022               LDI     R18, 2
   \   00000202   018D               MOVW    R17:R16, R27:R26
   \   00000204   ....               RCALL   hart_channel_set_status
    787          
    788                          t->error(task, current_chnl, HartCommErr_RX_Error);
   \   00000206   E030               LDI     R19, 0
   \   00000208   2D2C               MOV     R18, R12
   \   0000020A   018C               MOVW    R17:R16, R25:R24
   \   0000020C   01F2               MOVW    R31:R30, R5:R4
   \   0000020E   8144               LDD     R20, Z+4
   \   00000210   8155               LDD     R21, Z+5
   \   00000212   01FA               MOVW    R31:R30, R21:R20
   \   00000214   9509               ICALL
    789                          break;
   \   00000216   C027               RJMP    ??do_hart_transaction_5
    790                      case HART_EVENT_RX_COMPLETE:
    791                          hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_6:
   \   00000218   E020               LDI     R18, 0
   \   0000021A   018D               MOVW    R17:R16, R27:R26
   \   0000021C   ....               RCALL   hart_channel_set_status
    792                          break;
   \   0000021E   C023               RJMP    ??do_hart_transaction_5
    793                      case HART_EVENT_CHECKSUM_ERROR:
    794                          hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_9:
   \   00000220   E020               LDI     R18, 0
   \   00000222   018D               MOVW    R17:R16, R27:R26
   \   00000224   ....               RCALL   hart_channel_set_status
    795                          hart_channel_inc_stat(chnl, HartChannelStatItem_RX_CSUM);
   \   00000226   E021               LDI     R18, 1
   \   00000228   018D               MOVW    R17:R16, R27:R26
   \   0000022A   ....               RCALL   hart_channel_inc_stat
    796                          // checksum mismatch
    797                          t->error(task, current_chnl, HartCommErr_RX_Checksum);
   \   0000022C   E032               LDI     R19, 2
   \   0000022E   2D2C               MOV     R18, R12
   \   00000230   018C               MOVW    R17:R16, R25:R24
   \   00000232   01F2               MOVW    R31:R30, R5:R4
   \   00000234   8144               LDD     R20, Z+4
   \   00000236   8155               LDD     R21, Z+5
   \   00000238   01FA               MOVW    R31:R30, R21:R20
   \   0000023A   9509               ICALL
    798                          break;
   \   0000023C   C014               RJMP    ??do_hart_transaction_5
    799                      }
    800                  }
    801              } else if ( !NoOtherRx ) {
   \                     ??do_hart_transaction_4:
   \   0000023E   20DD               TST     R13
   \   00000240   F491               BRNE    ??do_hart_transaction_5
    802                  // Seems like other hart Modem connected. So just start reading to get read of the data
    803                  OS_Delay(2);
   \   00000242   E002               LDI     R16, 2
   \   00000244   E010               LDI     R17, 0
   \   00000246   ........           CALL    OS_Delay
    804                  task->rx_Listen[ModemChannel] = true;
   \   0000024A   24FF               CLR     R15
   \   0000024C   01FC               MOVW    R31:R30, R25:R24
   \   0000024E   0DEE               ADD     R30, R14
   \   00000250   1DFF               ADC     R31, R15
   \   00000252   5BED               SUBI    R30, 189
   \   00000254   4FFA               SBCI    R31, 250
   \   00000256   E001               LDI     R16, 1
   \   00000258   8300               ST      Z, R16
    805                  hart_control_Rx_Enable(task->modem_no, TRUE);
   \   0000025A   E011               LDI     R17, 1
   \   0000025C   01FC               MOVW    R31:R30, R25:R24
   \   0000025E   5CE9               SUBI    R30, 201
   \   00000260   4FFD               SBCI    R31, 253
   \   00000262   8100               LD      R16, Z
   \   00000264   ....               RCALL   hart_control_Rx_Enable
    806              }
    807              OS_DelayUntil(t1 + 750);
   \                     ??do_hart_transaction_5:
   \   00000266   0184               MOVW    R17:R16, R9:R8
   \   00000268   5102               SUBI    R16, 18
   \   0000026A   4F1D               SBCI    R17, 253
   \   0000026C   ........           CALL    OS_DelayUntil
    808              hart_control_Rx_Enable(task->modem_no, FALSE);
   \   00000270   E010               LDI     R17, 0
   \   00000272   01FC               MOVW    R31:R30, R25:R24
   \   00000274   5CE9               SUBI    R30, 201
   \   00000276   4FFD               SBCI    R31, 253
   \   00000278   8100               LD      R16, Z
   \   0000027A   ....               RCALL   hart_control_Rx_Enable
    809              task->rx_Listen[ModemChannel] = false;
   \   0000027C   24FF               CLR     R15
   \   0000027E   01FC               MOVW    R31:R30, R25:R24
   \   00000280   0DEE               ADD     R30, R14
   \   00000282   1DFF               ADC     R31, R15
   \   00000284   5BED               SUBI    R30, 189
   \   00000286   4FFA               SBCI    R31, 250
   \   00000288   E000               LDI     R16, 0
   \   0000028A   8300               ST      Z, R16
    810          }
   \   0000028C   9624               ADIW    R29:R28, 4
   \   0000028E   E1E0               LDI     R30, 16
   \   00000290   ........           JMP     ?EPILOGUE_B16_L09
    811          
    812          ////////////////////////////////////////////////////////////////////////////////
    813          //
    814          // HART Task
    815          //
    816          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    817          void HART_Task(void *pVoid) {
   \                     HART_Task:
   \   00000000   ........           CALL    ?PROLOGUE15_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004                      REQUIRE ?Register_R13_is_cg_reg
   \   00000004                      REQUIRE ?Register_R14_is_cg_reg
   \   00000004   9726               SBIW    R29:R28, 6
   \   00000006   0168               MOVW    R13:R12, R17:R16
    818              HartTaskStruct *HartTasks[3] = { &_hart_task0, &_hart_task1, &_hart_task2 };
   \   00000008   018E               MOVW    R17:R16, R29:R28
   \   0000000A   ....               LDI     R30, LOW(`?<Constant {&_hart_task0, &_hart_task1, &_hart`)
   \   0000000C   ....               LDI     R31, HIGH(`?<Constant {&_hart_task0, &_hart_task1, &_hart`)
   \   0000000E   ....               LDI     R19, (`?<Constant {&_hart_task0, &_hart_task1, &_hart`) >> 16
   \   00000010   E046               LDI     R20, 6
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    819              char ModemNo            = (char)pVoid;
   \   00000018   2CEC               MOV     R14, R12
    820              //OS_TASK *taskPtr        = OS_GetpCurrentTask();
    821              //HartTaskStruct *myTask  = container_of(taskPtr, HartTaskStruct, tcb);
    822              HartTaskStruct *myTask  = HartTasks[ModemNo];
   \   0000001A   01FE               MOVW    R31:R30, R29:R28
   \   0000001C   2D0E               MOV     R16, R14
   \   0000001E   E010               LDI     R17, 0
   \   00000020   0F00               LSL     R16
   \   00000022   1F11               ROL     R17
   \   00000024   0FE0               ADD     R30, R16
   \   00000026   1FF1               ADC     R31, R17
   \   00000028   80A0               LD      R10, Z
   \   0000002A   80B1               LDD     R11, Z+1
    823          
    824          
    825          
    826              hart_msg_parser_init(&myTask->hart_parser, myTask->rx_buf, HART_MAX_RX_BUFFER_SIZE);
   \   0000002C   E840               LDI     R20, 128
   \   0000002E   E051               LDI     R21, 1
   \   00000030   0195               MOVW    R19:R18, R11:R10
   \   00000032   532E               SUBI    R18, 62
   \   00000034   4F3C               SBCI    R19, 252
   \   00000036   0185               MOVW    R17:R16, R11:R10
   \   00000038   5A05               SUBI    R16, 165
   \   0000003A   4F1A               SBCI    R17, 250
   \   0000003C   ........           CALL    hart_msg_parser_init
    827              hart_msg_encoder_init(&myTask->hart_encoder, myTask->tx_buf, HART_MAX_TX_BUFFER_SIZE);
   \   00000040   E840               LDI     R20, 128
   \   00000042   E051               LDI     R21, 1
   \   00000044   0195               MOVW    R19:R18, R11:R10
   \   00000046   5C22               SUBI    R18, 194
   \   00000048   4F3D               SBCI    R19, 253
   \   0000004A   0185               MOVW    R17:R16, R11:R10
   \   0000004C   5700               SUBI    R16, 112
   \   0000004E   4F1A               SBCI    R17, 250
   \   00000050   ........           CALL    hart_msg_encoder_init
    828          
    829              hart_config_uart(myTask);
   \   00000054   0185               MOVW    R17:R16, R11:R10
   \   00000056   ....               RCALL   hart_config_uart
    830              hart_gpio_hart_carrier_off(myTask->modem_no);
   \   00000058   01F5               MOVW    R31:R30, R11:R10
   \   0000005A   5CE9               SUBI    R30, 201
   \   0000005C   4FFD               SBCI    R31, 253
   \   0000005E   8100               LD      R16, Z
   \   00000060   ........           CALL    hart_gpio_hart_carrier_off
    831              hart_control_Rx_Enable(myTask->modem_no, FALSE);
   \   00000064   E010               LDI     R17, 0
   \   00000066   01F5               MOVW    R31:R30, R11:R10
   \   00000068   5CE9               SUBI    R30, 201
   \   0000006A   4FFD               SBCI    R31, 253
   \   0000006C   8100               LD      R16, Z
   \   0000006E   ....               RCALL   hart_control_Rx_Enable
    832          
    833              while ( 1 ) {
    834                  long t0 = OS_Time;
   \                     ??HART_Task_0:
   \   00000070   ....               LDI     R30, LOW(OS_Global)
   \   00000072   ....               LDI     R31, (OS_Global) >> 8
   \   00000074   8842               LDD     R4, Z+18
   \   00000076   8853               LDD     R5, Z+19
   \   00000078   8864               LDD     R6, Z+20
   \   0000007A   8875               LDD     R7, Z+21
    835                  myTask->LastHartTaskRunTime = OS_Time;
   \   0000007C   ....               LDI     R30, LOW(OS_Global)
   \   0000007E   ....               LDI     R31, (OS_Global) >> 8
   \   00000080   8902               LDD     R16, Z+18
   \   00000082   8913               LDD     R17, Z+19
   \   00000084   8924               LDD     R18, Z+20
   \   00000086   8935               LDD     R19, Z+21
   \   00000088   01F5               MOVW    R31:R30, R11:R10
   \   0000008A   5AE9               SUBI    R30, 169
   \   0000008C   4FFA               SBCI    R31, 250
   \   0000008E   8300               ST      Z, R16
   \   00000090   8311               STD     Z+1, R17
   \   00000092   8322               STD     Z+2, R18
   \   00000094   8333               STD     Z+3, R19
    836          
    837                  for ( hart_channel_t current_chnl = myTask->start_chnl; current_chnl <= myTask->end_chnl; current_chnl++ ) {
   \   00000096   01F5               MOVW    R31:R30, R11:R10
   \   00000098   5CE8               SUBI    R30, 200
   \   0000009A   4FFD               SBCI    R31, 253
   \   0000009C   8080               LD      R8, Z
   \                     ??HART_Task_1:
   \   0000009E   01F5               MOVW    R31:R30, R11:R10
   \   000000A0   5CE7               SUBI    R30, 199
   \   000000A2   4FFD               SBCI    R31, 253
   \   000000A4   8100               LD      R16, Z
   \   000000A6   1508               CP      R16, R8
   \   000000A8   F408               BRCC    $+2+2
   \   000000AA   C04C               RJMP    ??HART_Task_2
    838                      // Check if it's a HART sensor configured for the channel
    839                      if ( TData.Hart.HartSensor & (1U << current_chnl) ) {
   \   000000AC   ....               LDI     R30, LOW((TData + 146))
   \   000000AE   ....               LDI     R31, HIGH((TData + 146))
   \   000000B0   8100               LD      R16, Z
   \   000000B2   8111               LDD     R17, Z+1
   \   000000B4   2D48               MOV     R20, R8
   \   000000B6   ........           CALL    ?US_SHR_L02
   \   000000BA   7001               ANDI    R16, 0x01
   \   000000BC   7010               ANDI    R17, 0x00
   \   000000BE   2B01               OR      R16, R17
   \   000000C0   F129               BREQ    ??HART_Task_3
    840                          float ADCurrent = TData.Hart.ADCurrent[current_chnl];
   \   000000C2   2D08               MOV     R16, R8
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   0F00               LSL     R16
   \   000000C8   1F11               ROL     R17
   \   000000CA   0F00               LSL     R16
   \   000000CC   1F11               ROL     R17
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   ....               SUBI    R30, LOW((-(TData + 172) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, HIGH((-(TData + 172) & 0xFFFF))
   \   000000D4   8180               LD      R24, Z
   \   000000D6   8191               LDD     R25, Z+1
   \   000000D8   81A2               LDD     R26, Z+2
   \   000000DA   81B3               LDD     R27, Z+3
    841                          if ( ADCurrent >= HART_MINIMUM_MA_FEEDBACK_FOR_OK  && ADCurrent <= HART_MAXIMUM_MA_FEEDBACK_FOR_OK ) {
   \   000000DC   018C               MOVW    R17:R16, R25:R24
   \   000000DE   019D               MOVW    R19:R18, R27:R26
   \   000000E0   E040               LDI     R20, 0
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   E460               LDI     R22, 64
   \   000000E6   E470               LDI     R23, 64
   \   000000E8   ........           CALL    ?F_CMP_GE_L04
   \   000000EC   F548               BRCC    ??HART_Task_4
   \   000000EE   018C               MOVW    R17:R16, R25:R24
   \   000000F0   019D               MOVW    R19:R18, R27:R26
   \   000000F2   E041               LDI     R20, 1
   \   000000F4   E050               LDI     R21, 0
   \   000000F6   EA68               LDI     R22, 168
   \   000000F8   E471               LDI     R23, 65
   \   000000FA   ........           CALL    ?F_CMP_LT_L04
   \   000000FE   F500               BRCC    ??HART_Task_4
    842                              do_hart_transaction(myTask, current_chnl, &_demo1_transaction);
   \   00000100   ....               LDI     R20, LOW(_demo1_transaction)
   \   00000102   ....               LDI     R21, (_demo1_transaction) >> 8
   \   00000104   2D28               MOV     R18, R8
   \   00000106   0185               MOVW    R17:R16, R11:R10
   \   00000108   ....               RCALL   do_hart_transaction
   \   0000010A   C01A               RJMP    ??HART_Task_4
    843                          }
    844                      } else {
    845                          TData.Hart.FailCnt[current_chnl][0] = 0;
   \                     ??HART_Task_3:
   \   0000010C   2D08               MOV     R16, R8
   \   0000010E   E010               LDI     R17, 0
   \   00000110   0F00               LSL     R16
   \   00000112   1F11               ROL     R17
   \   00000114   0F00               LSL     R16
   \   00000116   1F11               ROL     R17
   \   00000118   01F8               MOVW    R31:R30, R17:R16
   \   0000011A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000011C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000011E   E000               LDI     R16, 0
   \   00000120   8300               ST      Z, R16
   \   00000122   E000               LDI     R16, 0
   \   00000124   8301               STD     Z+1, R16
    846                          TData.Hart.FailCnt[current_chnl][1] = 0;
   \   00000126   2D08               MOV     R16, R8
   \   00000128   E010               LDI     R17, 0
   \   0000012A   0F00               LSL     R16
   \   0000012C   1F11               ROL     R17
   \   0000012E   0F00               LSL     R16
   \   00000130   1F11               ROL     R17
   \   00000132   01F8               MOVW    R31:R30, R17:R16
   \   00000134   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000136   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000138   E000               LDI     R16, 0
   \   0000013A   8302               STD     Z+2, R16
   \   0000013C   E000               LDI     R16, 0
   \   0000013E   8303               STD     Z+3, R16
    847                      }
    848          
    849                  }
   \                     ??HART_Task_4:
   \   00000140   9483               INC     R8
   \   00000142   CFAD               RJMP    ??HART_Task_1
    850                  OS_DelayUntil(t0 + 3000);
   \                     ??HART_Task_2:
   \   00000144   0182               MOVW    R17:R16, R5:R4
   \   00000146   5408               SUBI    R16, 72
   \   00000148   4F14               SBCI    R17, 244
   \   0000014A   ........           CALL    OS_DelayUntil
   \   0000014E   CF90               RJMP    ??HART_Task_0
    851              }
    852          }

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {&_hart_task0, &_hart_task1, &_hart`:
   \   00000000   ............       DC16 _hart_task0, _hart_task1, _hart_task2
    853          
    854          
    855          ////////////////////////////////////////////////////////////////////////////////
    856          //
    857          // public interfaces
    858          //
    859          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    860          void
    861          hart_start(void) {
   \                     hart_start:
   \   00000000   938A               ST      -Y, R24
    862              hart_channel_t   chnl;
    863              OS_CreateMB(&_hart_task0.RxMailBox, 1, HART_MB_BUFFER_SIZE, (char *)_hart_task0.mailBuf);
   \   00000002   ....               LDI     R22, LOW((_hart_task0 + 470))
   \   00000004   ....               LDI     R23, HIGH((_hart_task0 + 470))
   \   00000006   E342               LDI     R20, 50
   \   00000008   E050               LDI     R21, 0
   \   0000000A   E021               LDI     R18, 1
   \   0000000C   ....               LDI     R16, LOW((_hart_task0 + 520))
   \   0000000E   ....               LDI     R17, HIGH((_hart_task0 + 520))
   \   00000010   ........           CALL    OS_CreateMB
    864              OS_CreateMB(&_hart_task1.RxMailBox, 1, HART_MB_BUFFER_SIZE, (char *)_hart_task1.mailBuf);
   \   00000014   ....               LDI     R22, LOW((_hart_task1 + 470))
   \   00000016   ....               LDI     R23, HIGH((_hart_task1 + 470))
   \   00000018   E342               LDI     R20, 50
   \   0000001A   E050               LDI     R21, 0
   \   0000001C   E021               LDI     R18, 1
   \   0000001E   ....               LDI     R16, LOW((_hart_task1 + 520))
   \   00000020   ....               LDI     R17, HIGH((_hart_task1 + 520))
   \   00000022   ........           CALL    OS_CreateMB
    865              OS_CreateMB(&_hart_task2.RxMailBox, 1, HART_MB_BUFFER_SIZE, (char *)_hart_task2.mailBuf);
   \   00000026   ....               LDI     R22, LOW((_hart_task2 + 470))
   \   00000028   ....               LDI     R23, HIGH((_hart_task2 + 470))
   \   0000002A   E342               LDI     R20, 50
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   E021               LDI     R18, 1
   \   00000030   ....               LDI     R16, LOW((_hart_task2 + 520))
   \   00000032   ....               LDI     R17, HIGH((_hart_task2 + 520))
   \   00000034   ........           CALL    OS_CreateMB
    866          /*
    867              OS_CREATERSEMA(&_hart_task0.channel_lock);
    868              OS_CREATERSEMA(&_hart_task1.channel_lock);
    869              OS_CREATERSEMA(&_hart_task2.channel_lock);
    870          */
    871              hart_for_each_channel(chnl) {
   \   00000038   E080               LDI     R24, 0
   \                     ??hart_start_0:
   \   0000003A   308C               CPI     R24, 12
   \   0000003C   F498               BRCC    ??hart_start_1
    872                  hart_channel_reset(&_hart_channels[chnl]);
   \   0000003E   2F08               MOV     R16, R24
   \   00000040   E010               LDI     R17, 0
   \   00000042   E147               LDI     R20, 23
   \   00000044   E050               LDI     R21, 0
   \   00000046   ........           CALL    ?S_EC_MUL_L02
   \   0000004A   0198               MOVW    R19:R18, R17:R16
   \   0000004C   ....               LDI     R16, LOW(_hart_channels)
   \   0000004E   ....               LDI     R17, (_hart_channels) >> 8
   \   00000050   0F02               ADD     R16, R18
   \   00000052   1F13               ADC     R17, R19
   \   00000054   ........           CALL    hart_channel_reset
    873                  hart_control_power(chnl, HartChannelPowerStatus_ON);
   \   00000058   E010               LDI     R17, 0
   \   0000005A   2F08               MOV     R16, R24
   \   0000005C   ........           CALL    hart_control_power
    874              }
   \   00000060   9583               INC     R24
   \   00000062   CFEB               RJMP    ??hart_start_0
    875              hart_gpio_enable_all_mux();
   \                     ??hart_start_1:
   \   00000064   ........           CALL    hart_gpio_enable_all_mux
    876          
    877              //
    878              // now power on modem one by one.
    879              // don't care about start up time
    880              //
    881          
    882              //OS_CreateTask(&_hart_task0.tcb, "HART0", HART_TASK_PRIORITY,HART_Task,_hart_task0.Mystack,sizeof(_hart_task0.Mystack),0);
    883              //OS_CreateTask(&_hart_task1.tcb, "HART1", HART_TASK_PRIORITY,HART_Task,_hart_task1.Mystack,sizeof(_hart_task1.Mystack),0);
    884              //OS_CreateTask(&_hart_task2.tcb, "HART2", HART_TASK_PRIORITY,HART_Task,_hart_task2.Mystack,sizeof(_hart_task2.Mystack),0);
    885              OS_CREATETASK_EX(&_hart_task0.tcb, "HART0", HART_Task, HART_TASK_PRIORITY, _hart_task0.Mystack, (void *)0);
   \   00000068   E000               LDI     R16, 0
   \   0000006A   E010               LDI     R17, 0
   \   0000006C   931A               ST      -Y, R17
   \   0000006E   930A               ST      -Y, R16
   \   00000070   E002               LDI     R16, 2
   \   00000072   E010               LDI     R17, 0
   \   00000074   931A               ST      -Y, R17
   \   00000076   930A               ST      -Y, R16
   \   00000078   EC02               LDI     R16, 194
   \   0000007A   E011               LDI     R17, 1
   \   0000007C   931A               ST      -Y, R17
   \   0000007E   930A               ST      -Y, R16
   \   00000080   ....               LDI     R16, LOW((_hart_task0 + 10))
   \   00000082   ....               LDI     R17, HIGH((_hart_task0 + 10))
   \   00000084   931A               ST      -Y, R17
   \   00000086   930A               ST      -Y, R16
   \   00000088   ....               LDI     R22, LOW(HART_Task/2)
   \   0000008A   ....               LDI     R23, (HART_Task/2) >> 8
   \   0000008C   E748               LDI     R20, 120
   \   0000008E   ....               LDI     R18, LOW(`?<Constant "HART0">`)
   \   00000090   ....               LDI     R19, (`?<Constant "HART0">`) >> 8
   \   00000092   ....               LDI     R16, LOW((_hart_task0 + 534))
   \   00000094   ....               LDI     R17, HIGH((_hart_task0 + 534))
   \   00000096   ........           CALL    OS_CreateTaskEx_D
    886              OS_CREATETASK_EX(&_hart_task1.tcb, "HART1", HART_Task, HART_TASK_PRIORITY, _hart_task1.Mystack, (void *)1);
   \   0000009A   E001               LDI     R16, LOW(1)
   \   0000009C   E010               LDI     R17, (1) >> 8
   \   0000009E   931A               ST      -Y, R17
   \   000000A0   930A               ST      -Y, R16
   \   000000A2   E002               LDI     R16, 2
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   931A               ST      -Y, R17
   \   000000A8   930A               ST      -Y, R16
   \   000000AA   EC02               LDI     R16, 194
   \   000000AC   E011               LDI     R17, 1
   \   000000AE   931A               ST      -Y, R17
   \   000000B0   930A               ST      -Y, R16
   \   000000B2   ....               LDI     R16, LOW((_hart_task1 + 10))
   \   000000B4   ....               LDI     R17, HIGH((_hart_task1 + 10))
   \   000000B6   931A               ST      -Y, R17
   \   000000B8   930A               ST      -Y, R16
   \   000000BA   ....               LDI     R22, LOW(HART_Task/2)
   \   000000BC   ....               LDI     R23, (HART_Task/2) >> 8
   \   000000BE   E748               LDI     R20, 120
   \   000000C0   ....               LDI     R18, LOW(`?<Constant "HART1">`)
   \   000000C2   ....               LDI     R19, (`?<Constant "HART1">`) >> 8
   \   000000C4   ....               LDI     R16, LOW((_hart_task1 + 534))
   \   000000C6   ....               LDI     R17, HIGH((_hart_task1 + 534))
   \   000000C8   ........           CALL    OS_CreateTaskEx_D
    887              OS_CREATETASK_EX(&_hart_task2.tcb, "HART2", HART_Task, HART_TASK_PRIORITY, _hart_task2.Mystack, (void *)2);
   \   000000CC   E002               LDI     R16, LOW(2)
   \   000000CE   E010               LDI     R17, (2) >> 8
   \   000000D0   931A               ST      -Y, R17
   \   000000D2   930A               ST      -Y, R16
   \   000000D4   E002               LDI     R16, 2
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   931A               ST      -Y, R17
   \   000000DA   930A               ST      -Y, R16
   \   000000DC   EC02               LDI     R16, 194
   \   000000DE   E011               LDI     R17, 1
   \   000000E0   931A               ST      -Y, R17
   \   000000E2   930A               ST      -Y, R16
   \   000000E4   ....               LDI     R16, LOW((_hart_task2 + 10))
   \   000000E6   ....               LDI     R17, HIGH((_hart_task2 + 10))
   \   000000E8   931A               ST      -Y, R17
   \   000000EA   930A               ST      -Y, R16
   \   000000EC   ....               LDI     R22, LOW(HART_Task/2)
   \   000000EE   ....               LDI     R23, (HART_Task/2) >> 8
   \   000000F0   E748               LDI     R20, 120
   \   000000F2   ....               LDI     R18, LOW(`?<Constant "HART2">`)
   \   000000F4   ....               LDI     R19, (`?<Constant "HART2">`) >> 8
   \   000000F6   ....               LDI     R16, LOW((_hart_task2 + 534))
   \   000000F8   ....               LDI     R17, HIGH((_hart_task2 + 534))
   \   000000FA   ........           CALL    OS_CreateTaskEx_D
    888          
    889          
    890          }
   \   000000FE   9189               LD      R24, Y+
   \   00000100   9508               RET
    891          
    892          

   \                                 In  segment CODE, align 2, keep-with-next
    893          void RestartHart(void) {
   \                     RestartHart:
    894              OS_EnterRegion();
   \   00000000   9100....           LDS     R16, OS_Global
   \   00000004   9503               INC     R16
   \   00000006   9300....           STS     OS_Global, R16
    895              OS_TerminateTask(&_hart_task0.tcb);
   \   0000000A   ....               LDI     R16, LOW((_hart_task0 + 534))
   \   0000000C   ....               LDI     R17, HIGH((_hart_task0 + 534))
   \   0000000E   ........           CALL    OS_TerminateTask
    896              OS_TerminateTask(&_hart_task1.tcb);
   \   00000012   ....               LDI     R16, LOW((_hart_task1 + 534))
   \   00000014   ....               LDI     R17, HIGH((_hart_task1 + 534))
   \   00000016   ........           CALL    OS_TerminateTask
    897              OS_TerminateTask(&_hart_task2.tcb);
   \   0000001A   ....               LDI     R16, LOW((_hart_task2 + 534))
   \   0000001C   ....               LDI     R17, HIGH((_hart_task2 + 534))
   \   0000001E   ........           CALL    OS_TerminateTask
    898              hart_diag_task_stop();
   \   00000022   ........           CALL    hart_diag_task_stop
    899              //memset(&_hart_task0.tcb, 0, sizeof(_hart_task0.tcb));
    900              //memset(&_hart_task1.tcb, 0, sizeof(_hart_task0.tcb));
    901              //memset(&_hart_task2.tcb, 0, sizeof(_hart_task0.tcb));
    902              /*
    903              OS_DeleteRSema(&_hart_task0.channel_lock);
    904              OS_DeleteRSema(&_hart_task1.channel_lock);
    905              OS_DeleteRSema(&_hart_task2.channel_lock);
    906           */
    907              OS_DeleteMB(&_hart_task0.RxMailBox);
   \   00000026   ....               LDI     R16, LOW((_hart_task0 + 520))
   \   00000028   ....               LDI     R17, HIGH((_hart_task0 + 520))
   \   0000002A   ........           CALL    OS_DeleteMB
    908              OS_DeleteMB(&_hart_task1.RxMailBox);
   \   0000002E   ....               LDI     R16, LOW((_hart_task1 + 520))
   \   00000030   ....               LDI     R17, HIGH((_hart_task1 + 520))
   \   00000032   ........           CALL    OS_DeleteMB
    909              OS_DeleteMB(&_hart_task2.RxMailBox);
   \   00000036   ....               LDI     R16, LOW((_hart_task2 + 520))
   \   00000038   ....               LDI     R17, HIGH((_hart_task2 + 520))
   \   0000003A   ........           CALL    OS_DeleteMB
    910              OS_LeaveRegion();
   \   0000003E   ........           CALL    OS_LeaveRegion
    911              OS_Delay(100);
   \   00000042   E604               LDI     R16, 100
   \   00000044   E010               LDI     R17, 0
   \   00000046   ........           CALL    OS_Delay
    912              hart_start();
   \   0000004A   ....               RCALL   hart_start
    913          }
   \   0000004C   9508               RET

   \                                 In  segment INTVEC, offset 0x90, root
   \                     `??USART1_RXC::??INTVEC 144`:
   \   00000090   ........           JMP     USART1_RXC

   \                                 In  segment INTVEC, offset 0x94, root
   \                     `??USART1_UDRE::??INTVEC 148`:
   \   00000094   ........           JMP     USART1_UDRE

   \                                 In  segment INTVEC, offset 0x98, root
   \                     `??USART1_TXC::??INTVEC 152`:
   \   00000098   ........           JMP     USART1_TXC

   \                                 In  segment INTVEC, offset 0xcc, root
   \                     `??USART2_RXC::??INTVEC 204`:
   \   000000CC   ........           JMP     USART2_RXC

   \                                 In  segment INTVEC, offset 0xd0, root
   \                     `??USART2_UDRE::??INTVEC 208`:
   \   000000D0   ........           JMP     USART2_UDRE

   \                                 In  segment INTVEC, offset 0xd4, root
   \                     `??USART2_TXC::??INTVEC 212`:
   \   000000D4   ........           JMP     USART2_TXC

   \                                 In  segment INTVEC, offset 0xd8, root
   \                     `??USART3_RXC::??INTVEC 216`:
   \   000000D8   ........           JMP     USART3_RXC

   \                                 In  segment INTVEC, offset 0xdc, root
   \                     `??USART3_UDRE::??INTVEC 220`:
   \   000000DC   ........           JMP     USART3_UDRE

   \                                 In  segment INTVEC, offset 0xe0, root
   \                     `??USART3_TXC::??INTVEC 224`:
   \   000000E0   ........           JMP     USART3_TXC

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HART0">>`:
   \   00000000   414854520030       DC8 "HART0"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HART1">>`:
   \   00000000   414854520031       DC8 "HART1"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HART2">>`:
   \   00000000   414854520032       DC8 "HART2"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_task0>`:
   \   00000000   323134333635       DC8 "123456789"
   \              38370039    
   \   0000000A   0000               DC16 0
   \   0000000C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000002C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000004C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000013C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000014C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000015C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000016C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000017C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000018C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000019C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001CC   323134333635       DC8 "123456789"
   \              38370039    
   \   000001D6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   000001E7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000208   0000               DC16 0H
   \   0000020A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   00000216   0000               DC16 0H
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
   \              000000000000
   \              000000000300
   \   0000023A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000024A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000025A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000050A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000053A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000054A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000055A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000056A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000057A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000058A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_task1>`:
   \   00000000   323134333635       DC8 "123456789"
   \              38370039    
   \   0000000A   0000               DC16 0
   \   0000000C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000002C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000004C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000013C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000014C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000015C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000016C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000017C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000018C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000019C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001CC   323134333635       DC8 "123456789"
   \              38370039    
   \   000001D6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   000001E7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000208   0000               DC16 0H
   \   0000020A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   00000216   0000               DC16 0H
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 7
   \              000000000000
   \              000001000704
   \   0000023A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000024A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000025A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000050A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000053A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000054A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000055A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000056A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000057A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000058A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_task2>`:
   \   00000000   323134333635       DC8 "123456789"
   \              38370039    
   \   0000000A   0000               DC16 0
   \   0000000C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000002C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000004C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000013C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000014C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000015C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000016C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000017C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000018C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000019C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001CC   323134333635       DC8 "123456789"
   \              38370039    
   \   000001D6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   000001E7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000208   0000               DC16 0H
   \   0000020A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   00000216   0000               DC16 0H
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 11
   \              000000000000
   \              000002000B08
   \   0000023A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000024A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000025A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000050A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000053A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000054A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000055A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000056A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000057A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000058A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _demo1_transaction>`:
   \   00000000   ........           DC16 vega_radar_make_request/2, ReceiveReply/2
   \   00000004   ....               DC16 vega_radar_handle_rx_error/2

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_channels>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000017   000100000000       DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000002E   000200000000       DC8 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000045   000300000000       DC8 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000005C   000400000000       DC8 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000073   000500000000       DC8 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000008A   000600000000       DC8 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000A1   000700000000       DC8 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000B8   000800000000       DC8 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000CF   000900000000       DC8 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000E6   000A00000000       DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   000000F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0
   \              000B00000000
   \              000000      
   \   00000106   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "HART0">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "HART0">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "HART1">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "HART1">>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "HART2">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "HART2">>`

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {128, 0, 0, 0, 0}>`:
   \   00000000   0080000000         DC8 128, 0, 0, 0, 0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   ConvertBigEndianToLittleEndian
     21      2   HART_Task
       21      2   -> OS_DelayUntil
       21      2   -> do_hart_transaction
       21      2   -> hart_config_uart
       21      2   -> hart_control_Rx_Enable
       21      2   -> hart_gpio_hart_carrier_off
       21      2   -> hart_msg_encoder_init
       21      2   -> hart_msg_parser_init
       21      2 ?F_CMP_GE_L04
       21      2 ?F_CMP_LT_L04
       21      2 ?ML_FLASH_SRAM_24EC_16_L07
       21      2 ?US_SHR_L02
      3      2   Handler_USART_RXC
        3      2   -> OS_IsTask
        3      2   -> OS_PutMailCond1
      0      2   Handler_USART_RXC0
        0      2   -> Handler_USART_RXC
      0      2   Handler_USART_RXC1
        0      2   -> Handler_USART_RXC
      0      2   Handler_USART_RXC2
        0      2   -> Handler_USART_RXC
     23      2   ReceiveReply
       23      2   -> ConvertBigEndianToLittleEndian
       23      2   -> OS_GetMailTimed
       23      2   -> hart_msg_calc_csum
      0      2   RestartHart
        0      2   -> OS_Delay
        0      2   -> OS_DeleteMB
        0      2   -> OS_LeaveRegion
        0      2   -> OS_TerminateTask
        0      2   -> hart_diag_task_stop
        0      2   -> hart_start
     16      2   USART1_RXC
       16      2   -> OS_CallISR_Debug
     16      2   USART1_TXC
       16      2   -> OS_CallISR_Debug
     16      2   USART1_UDRE
       16      2   -> OS_CallISR_Debug
     16      2   USART2_RXC
       16      2   -> OS_CallISR_Debug
     16      2   USART2_TXC
       16      2   -> OS_CallISR_Debug
     16      2   USART2_UDRE
       16      2   -> OS_CallISR_Debug
     16      2   USART3_RXC
       16      2   -> OS_CallISR_Debug
     16      2   USART3_TXC
       16      2   -> OS_CallISR_Debug
     16      2   USART3_UDRE
       16      2   -> OS_CallISR_Debug
     20      2   do_hart_transaction
       20      2   -- Indirect call
       20      2   -> OS_ClearEvents
       20      2   -> OS_Delay
       20      2   -> OS_DelayUntil
       20      2   -> OS_WaitEventTimed
       20      2   -> hart_channel_inc_stat
       20      2   -> hart_channel_set_status
       20      2   -> hart_control_Rx_Enable
       20      2   -> hart_gpio_channel_select
       20      2   -> hart_gpio_hart_carrier_off
       20      2   -> hart_gpio_hart_carrier_on
       20      2   -> hart_reset_rx
       20      2   -> hart_reset_tx
       20      2   -> hart_start_transaction
       20      2 ?S_EC_MUL_L02
      0      2   hart_channel_inc_stat
      0      2   hart_channel_reset
      0      2   hart_channel_set_power_status
      0      2   hart_channel_set_status
      6      2   hart_config_uart
        6      2 ?SL_DIVMOD_L03
      0      2   hart_control_Rx_Enable
      4      2   hart_control_power
        4      2   -> hart_channel_set_power_status
        4      2   -> hart_gpio_power_off
        4      2   -> hart_gpio_power_on
        4      2 ?S_EC_MUL_L02
      2      2   hart_irq_finish_tx
        2      2   -> OS_IsTask
        2      2   -> OS_SignalEvent
      0      2   hart_irq_finish_tx0
        0      2   -> hart_irq_finish_tx
      0      2   hart_irq_finish_tx1
        0      2   -> hart_irq_finish_tx
      0      2   hart_irq_finish_tx2
        0      2   -> hart_irq_finish_tx
      0      2   hart_irq_tx_next
      0      2   hart_irq_tx_next0
        0      2   -> hart_irq_tx_next
      0      2   hart_irq_tx_next1
        0      2   -> hart_irq_tx_next
      0      2   hart_irq_tx_next2
        0      2   -> hart_irq_tx_next
      3      2   hart_reset_rx
        3      2   -> hart_msg_parser_reset
      2      2   hart_reset_tx
        2      2   -> hart_msg_encoder_reset
      9      2   hart_start
        1      2   -> OS_CreateMB
        1      2   -> OS_CreateTaskEx_D
        1      2   -> hart_channel_reset
        1      2   -> hart_control_power
        1      2   -> hart_gpio_enable_all_mux
        1      2 ?S_EC_MUL_L02
      0      2   hart_start_transaction
      0      2   vega_radar_handle_rx_error
      9      2   vega_radar_make_request
        9      2   -> hart_msg_encoder_calc_csum
        9      2   -> hart_msg_encoder_data
        9      2   -> hart_msg_encoder_long_start
        9      2   -> hart_msg_encoder_preamble
        9      2 ?ML_FLASH_SRAM_24EC_16_L07


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant "HART0">
       6  ?<Constant "HART1">
       6  ?<Constant "HART2">
       6  ?<Constant {&_hart_task0, &_hart_task1, &_hart
       5  ?<Constant {128, 0, 0, 0, 0}>
       6  ?<Initializer for <Constant "HART0">>
       6  ?<Initializer for <Constant "HART1">>
       6  ?<Initializer for <Constant "HART2">>
       6  ?<Initializer for _demo1_transaction>
     276  ?<Initializer for _hart_channels>
    1431  ?<Initializer for _hart_task0>
    1431  ?<Initializer for _hart_task1>
    1431  ?<Initializer for _hart_task2>
      40  ConvertBigEndianToLittleEndian
       1  CriticalComError
     336  HART_Task
     166  Handler_USART_RXC
       8  Handler_USART_RXC0
       8  Handler_USART_RXC1
       8  Handler_USART_RXC2
     678  ReceiveReply
      78  RestartHart
      82  USART1_RXC
       4  USART1_RXC::??INTVEC 144
      82  USART1_TXC
       4  USART1_TXC::??INTVEC 152
      82  USART1_UDRE
       4  USART1_UDRE::??INTVEC 148
      82  USART2_RXC
       4  USART2_RXC::??INTVEC 204
      82  USART2_TXC
       4  USART2_TXC::??INTVEC 212
      82  USART2_UDRE
       4  USART2_UDRE::??INTVEC 208
      82  USART3_RXC
       4  USART3_RXC::??INTVEC 216
      82  USART3_TXC
       4  USART3_TXC::??INTVEC 224
      82  USART3_UDRE
       4  USART3_UDRE::??INTVEC 220
       2  _A_UBRR1
       2  _A_UBRR2
       2  _A_UBRR3
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_UCSR2A
       1  _A_UCSR2B
       1  _A_UCSR2C
       1  _A_UCSR3A
       1  _A_UCSR3B
       1  _A_UCSR3C
       1  _A_UDR1
       1  _A_UDR2
       1  _A_UDR3
       6  _demo1_transaction
     276  _hart_channels
    1431  _hart_task0
    1431  _hart_task1
    1431  _hart_task2
     660  do_hart_transaction
     156  hart_channel_inc_stat
     104  hart_channel_reset
       6  hart_channel_set_power_status
       6  hart_channel_set_status
     372  hart_config_uart
     100  hart_control_Rx_Enable
      58  hart_control_power
      96  hart_irq_finish_tx
       8  hart_irq_finish_tx0
       8  hart_irq_finish_tx1
       8  hart_irq_finish_tx2
     204  hart_irq_tx_next
       8  hart_irq_tx_next0
       8  hart_irq_tx_next1
       8  hart_irq_tx_next2
      52  hart_reset_rx
      50  hart_reset_tx
     258  hart_start
      86  hart_start_transaction
     376  vega_radar_handle_rx_error
      98  vega_radar_make_request
      14  -- Other

 
    18 bytes in segment ABSOLUTE
 4 790 bytes in segment CODE
    11 bytes in segment FAR_F
    14 bytes in segment INITTAB
    36 bytes in segment INTVEC
 4 593 bytes in segment NEAR_I
 4 593 bytes in segment NEAR_ID
     1 byte  in segment NEAR_Z
 
 9 394 bytes of CODE memory (+ 50 bytes shared)
 4 594 bytes of DATA memory (+ 18 bytes shared)

Errors: none
Warnings: 3
