###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       29/Jan/2024  12:21:17
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\Misc.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW5087.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\Misc.c" --cpu=m1280
#        -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\List" -y
#        --initializers_in_flash --debug -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\INC\\" -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -Ohs)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\List\Misc.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\Obj\Misc.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\Misc.c
      1          /****************************************************************************************
      2          /  Misc. routines
      3          /
      4          ***************************************************************************************/
      5          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_PINE
   \                     _A_PINE:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "stdlib.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          #include "inavr.h"
     12          #include "string.h"
     13          #include "hart.h"
     14          
     15          __no_init int RestartCnt             @0x21FD;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          volatile char RestartCmd = 0;
   \                     RestartCmd:
   \   00000000                      DS8 1
     17          
     18          

   \                                 In  segment CODE, align 2, keep-with-next
     19          void WDT_off(void)
   \                     WDT_off:
     20          {
     21              __disable_interrupt();
   \   00000000   94F8               CLI
     22              __watchdog_reset();
   \   00000002   95A8               WDR
     23              /* Clear WDRF in MCUSR */
     24              MCUSR &= ~(1<<WDRF);
   \   00000004   B704               IN      R16, 0x34
   \   00000006   7F07               ANDI    R16, 0xF7
   \   00000008   BF04               OUT     0x34, R16
     25              /* Write logical one to WDCE and WDE */
     26              /* Keep old prescaler setting to prevent unintentional time-out
     27              */
     28              WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
   \   0000000A   E00F               LDI     R16, 15
   \   0000000C   9300....           STS     _A_WDTCSR, R16
     29              /* Turn off WDT */
     30              WDTCSR = 0x00;
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     _A_WDTCSR, R16
     31              __enable_interrupt();
   \   00000016   9478               SEI
     32          }
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_MCUSR
   \   0000001A                      REQUIRE _A_WDTCSR
     33          

   \                                 In  segment CODE, align 2, keep-with-next
     34          void WDT_Prescaler_Change(void)
   \                     WDT_Prescaler_Change:
     35          {
     36              __disable_interrupt();
   \   00000000   94F8               CLI
     37              __watchdog_reset();
   \   00000002   95A8               WDR
     38              /* Start timed equence */
     39              WDTCSR |= (1<<WDCE) | (1<<WDE);
   \   00000004   9100....           LDS     R16, _A_WDTCSR
   \   00000008   6108               ORI     R16, 0x18
   \   0000000A   9300....           STS     _A_WDTCSR, R16
     40              /* Set new prescaler(time-out) value = 64K cycles (~0.5 s) */
     41              //WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
     42              /* Set new prescaler(time-out) value = 256K cycles (~2.0 s) */
     43              WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
   \   0000000E   E00F               LDI     R16, 15
   \   00000010   9300....           STS     _A_WDTCSR, R16
     44          
     45          
     46          __enable_interrupt();
   \   00000014   9478               SEI
     47          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_WDTCSR
     48          
     49          /*************************************************************************
     50          *   (This is a task)
     51          *  Watchdog handler
     52          *
     53          *************************************************************************/
     54          #define NUMBER_OF_TASKS 7

   \                                 In  segment CODE, align 2, keep-with-next
     55          void WatchDogHandler(void) {
   \                     WatchDogHandler:
   \   00000000   928A               ST      -Y, R8
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R8_is_cg_reg
     56          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     57              static const char *StackCheck[] = { 
     58                  StackTest1              , StackTest2            , 
     59                  StackTest3              , StackTest4            , 
     60                  StackTest5              , StackTest6            , 
     61                  _hart_task0.StackTest1  , _hart_task0.StackTest2, 
     62                  _hart_task1.StackTest1  , _hart_task1.StackTest2,
     63                  _hart_task2.StackTest1  , _hart_task2.StackTest2 };
     64          #endif
     65              char HartComCheckTimeCnt = 0;
   \   0000000A   2488               CLR     R8
     66          #ifdef OS_LIBMODE_DP
     67              char LoadCnt            = 0;
     68              int RawPerformance[NUMBER_OF_TASKS];
     69              static OS_TASK *MyTasks[NUMBER_OF_TASKS] = { &_hart_task0.tcb, &_hart_task1.tcb, &_hart_task2.tcb, &TCB_USART0, &TCB_AD7715, &TCB_INT_ADC, &TCB_WATCHDOG };
     70          #endif
     71              OS_Delay(100);                         // wait 1 seconds for other tasks to start and set TaskStatus
   \   0000000C   E604               LDI     R16, 100
   \   0000000E   E010               LDI     R17, 0
   \   00000010   ........           CALL    OS_Delay
   \   00000014   C01E               RJMP    ??WatchDogHandler_0
     72              //asm("WDR");                             // kick the dog!!
     73              //WDTCSR = 0x1f;
     74              //WDTCSR = 0x0f;
     75              //asm("WDR");                             // kick the dog!!
     76              while (1) {
     77                  OS_Delay(500);
     78                  OS_U32 CurrentTime = OS_Time;
     79                  if (CriticalComError) {
     80                      OS_Error(ZB_ERR_UART);
     81                  } else if (HartComCheckTimeCnt++ >= 10) {
     82                      if (labs(CurrentTime - _hart_task0.LastHartTaskRunTime) > 10000) {
     83                          OS_Error(ZB_ERR_MODEM_0);
     84                      }
     85                      if (labs(CurrentTime - _hart_task1.LastHartTaskRunTime) > 10000) {
     86                          OS_Error(ZB_ERR_MODEM_1);
     87                      }
     88                      if (labs(CurrentTime - _hart_task2.LastHartTaskRunTime) > 10000) {
     89                          OS_Error(ZB_ERR_MODEM_2);
     90                      }
     91                  } else if (labs(CurrentTime - Last_ADC_OK_Time) > 5000) {
   \                     ??WatchDogHandler_1:
   \   00000016   9100....           LDS     R16, Last_ADC_OK_Time
   \   0000001A   9110....           LDS     R17, (Last_ADC_OK_Time + 1)
   \   0000001E   9120....           LDS     R18, (Last_ADC_OK_Time + 2)
   \   00000022   9130....           LDS     R19, (Last_ADC_OK_Time + 3)
   \   00000026   1B80               SUB     R24, R16
   \   00000028   0B91               SBC     R25, R17
   \   0000002A   0BA2               SBC     R26, R18
   \   0000002C   0BB3               SBC     R27, R19
   \   0000002E   018C               MOVW    R17:R16, R25:R24
   \   00000030   019D               MOVW    R19:R18, R27:R26
   \   00000032   ........           CALL    labs
   \   00000036   3809               CPI     R16, 137
   \   00000038   4113               SBCI    R17, 19
   \   0000003A   4020               SBCI    R18, 0
   \   0000003C   4030               SBCI    R19, 0
   \   0000003E   F024               BRLT    ??WatchDogHandler_2
     92                      OS_Error(ZB_ERR_EXT_ADC);
   \   00000040   E005               LDI     R16, 5
   \                     ??WatchDogHandler_3:
   \   00000042   E010               LDI     R17, 0
   \   00000044   ........           CALL    OS_Error
     93                  }
     94                  if (!RestartCmd) {
   \                     ??WatchDogHandler_2:
   \   00000048   9100....           LDS     R16, RestartCmd
   \   0000004C   2300               TST     R16
   \   0000004E   F409               BRNE    ??WatchDogHandler_0
     95                      __watchdog_reset();               //kick the dog
   \   00000050   95A8               WDR
     96                  }
   \                     ??WatchDogHandler_0:
   \   00000052   EF04               LDI     R16, 244
   \   00000054   E011               LDI     R17, 1
   \   00000056   ........           CALL    OS_Delay
   \   0000005A   9180....           LDS     R24, (OS_Global + 18)
   \   0000005E   9190....           LDS     R25, (OS_Global + 19)
   \   00000062   91A0....           LDS     R26, (OS_Global + 20)
   \   00000066   91B0....           LDS     R27, (OS_Global + 21)
   \   0000006A   9100....           LDS     R16, CriticalComError
   \   0000006E   2300               TST     R16
   \   00000070   F011               BREQ    ??WatchDogHandler_4
   \   00000072   E004               LDI     R16, 4
   \   00000074   CFE6               RJMP    ??WatchDogHandler_3
   \                     ??WatchDogHandler_4:
   \   00000076   E00A               LDI     R16, 10
   \   00000078   1680               CP      R8, R16
   \   0000007A   9483               INC     R8
   \   0000007C   F260               BRCS    ??WatchDogHandler_1
   \   0000007E   9140....           LDS     R20, (_hart_task0 + 1367)
   \   00000082   9150....           LDS     R21, (_hart_task0 + 1368)
   \   00000086   9160....           LDS     R22, (_hart_task0 + 1369)
   \   0000008A   9170....           LDS     R23, (_hart_task0 + 1370)
   \   0000008E   018C               MOVW    R17:R16, R25:R24
   \   00000090   019D               MOVW    R19:R18, R27:R26
   \   00000092   1B04               SUB     R16, R20
   \   00000094   0B15               SBC     R17, R21
   \   00000096   0B26               SBC     R18, R22
   \   00000098   0B37               SBC     R19, R23
   \   0000009A   ........           CALL    labs
   \   0000009E   3101               CPI     R16, 17
   \   000000A0   4217               SBCI    R17, 39
   \   000000A2   4020               SBCI    R18, 0
   \   000000A4   4030               SBCI    R19, 0
   \   000000A6   F024               BRLT    ??WatchDogHandler_5
   \   000000A8   E001               LDI     R16, 1
   \   000000AA   E010               LDI     R17, 0
   \   000000AC   ........           CALL    OS_Error
   \                     ??WatchDogHandler_5:
   \   000000B0   9140....           LDS     R20, (_hart_task1 + 1367)
   \   000000B4   9150....           LDS     R21, (_hart_task1 + 1368)
   \   000000B8   9160....           LDS     R22, (_hart_task1 + 1369)
   \   000000BC   9170....           LDS     R23, (_hart_task1 + 1370)
   \   000000C0   018C               MOVW    R17:R16, R25:R24
   \   000000C2   019D               MOVW    R19:R18, R27:R26
   \   000000C4   1B04               SUB     R16, R20
   \   000000C6   0B15               SBC     R17, R21
   \   000000C8   0B26               SBC     R18, R22
   \   000000CA   0B37               SBC     R19, R23
   \   000000CC   ........           CALL    labs
   \   000000D0   3101               CPI     R16, 17
   \   000000D2   4217               SBCI    R17, 39
   \   000000D4   4020               SBCI    R18, 0
   \   000000D6   4030               SBCI    R19, 0
   \   000000D8   F024               BRLT    ??WatchDogHandler_6
   \   000000DA   E002               LDI     R16, 2
   \   000000DC   E010               LDI     R17, 0
   \   000000DE   ........           CALL    OS_Error
   \                     ??WatchDogHandler_6:
   \   000000E2   9100....           LDS     R16, (_hart_task2 + 1367)
   \   000000E6   9110....           LDS     R17, (_hart_task2 + 1368)
   \   000000EA   9120....           LDS     R18, (_hart_task2 + 1369)
   \   000000EE   9130....           LDS     R19, (_hart_task2 + 1370)
   \   000000F2   1B80               SUB     R24, R16
   \   000000F4   0B91               SBC     R25, R17
   \   000000F6   0BA2               SBC     R26, R18
   \   000000F8   0BB3               SBC     R27, R19
   \   000000FA   018C               MOVW    R17:R16, R25:R24
   \   000000FC   019D               MOVW    R19:R18, R27:R26
   \   000000FE   ........           CALL    labs
   \   00000102   3101               CPI     R16, 17
   \   00000104   4217               SBCI    R17, 39
   \   00000106   4020               SBCI    R18, 0
   \   00000108   4030               SBCI    R19, 0
   \   0000010A   F40C               BRGE    $+2+2
   \   0000010C   CF9D               RJMP    ??WatchDogHandler_2
   \   0000010E   E003               LDI     R16, 3
   \   00000110   CF98               RJMP    ??WatchDogHandler_3
     97          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     98                  char ErrorStack = 0;
     99                  for (char i = 0; i < NELEMENTS(StackCheck); i++) {
    100                      if (memcmp(StackCheck[i], "123456789", 10)) {
    101                          ErrorStack = i + 1;
    102                      }
    103                  }
    104          #endif
    105          #ifdef OS_LIBMODE_DP
    106                  if (LoadCnt++ > 5) {
    107                      OS_STAT_Sample();
    108                      OS_Delay(10);
    109                      int tmpRawLoad = 0;
    110                      for (char i = 0; i < NUMBER_OF_TASKS; i++) {
    111                          RawPerformance[i] = OS_STAT_GetLoad(MyTasks[i]);
    112                          tmpRawLoad       += RawPerformance[i];
    113                      }
    114                  }
    115          #endif
    116              }
    117          }
    118          
    119          
    120          /*************************************************************************
    121          *
    122          *  Get my address
    123          *
    124          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    125          char MyAddress(void) {
   \                     MyAddress:
    126          
    127          #if (OS_UART == 0)
    128              return 0;                   // Debug only
    129          #else
    130              int Address = (~(PINE >> 4) & 0x0f);
    131              return Address;
   \   00000000   B10C               IN      R16, 0x0C
   \   00000002   9502               SWAP    R16
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   9500               COM     R16
   \   00000008   700F               ANDI    R16, 0x0F
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_PINE
    132              //return(~(PINE>>4) & 0x0f) ;
    133          #endif
    134          }
    135          
    136          /*************************************************************************
    137          *
    138          *  Check for legal float
    139          *
    140          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    141          char IsFloat(float A) {
   \                     IsFloat:
    142              long exp;
    143              // A NAN has an exponent of 255 (shifted left 23 positions) and
    144              // Denormalized has an exponent set to 0
    145              exp = *(long *)&A & 0x7F800000L;
   \   00000000   E000               LDI     R16, 0
   \   00000002   7820               ANDI    R18, 0x80
   \   00000004   773F               ANDI    R19, 0x7F
    146              //int mantissa = *(int*)&A & 0x007FFFFF;
    147              if (exp && (exp != 0x7F800000L)) {
   \   00000006   2F42               MOV     R20, R18
   \   00000008   2B43               OR      R20, R19
   \   0000000A   F029               BREQ    ??IsFloat_0
   \   0000000C   3000               CPI     R16, 0
   \   0000000E   4820               SBCI    R18, 128
   \   00000010   473F               SBCI    R19, 127
   \   00000012   F009               BREQ    ??IsFloat_0
    148                  return (true);
   \   00000014   E001               LDI     R16, 1
    149              }
    150              return (false);
   \                     ??IsFloat_0:
   \   00000016   9508               RET
    151          }
    152          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   IsFloat
      0      2   MyAddress
      0      2   WDT_Prescaler_Change
      0      2   WDT_off
      5      2   WatchDogHandler
        5      2   -> OS_Delay
        5      2   -> OS_Error
        5      2   -> labs


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  IsFloat
      12  MyAddress
       1  RestartCmd
      24  WDT_Prescaler_Change
      26  WDT_off
     274  WatchDogHandler
       1  _A_MCUSR
       1  _A_PINE
       1  _A_WDTCSR
       7  -- Other

 
   3 bytes in segment ABSOLUTE
 360 bytes in segment CODE
   7 bytes in segment INITTAB
   1 byte  in segment NEAR_Z
 
 360 bytes of CODE memory (+ 7 bytes shared)
   1 byte  of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: 1
