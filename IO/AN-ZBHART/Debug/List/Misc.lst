###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       02/Oct/2023  15:18:53
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\Misc.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWCFE6.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\Misc.c" --cpu=m1280
#        -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\Obj" -D
#        OS_LIBMODE_D -D OS_UART=-1 -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\List" -y
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\INC\\" -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\List\Misc.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Debug\Obj\Misc.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\Misc.c
      1          /****************************************************************************************
      2          /  Misc. routines
      3          /
      4          ***************************************************************************************/
      5          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_PINE
   \                     _A_PINE:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "stdlib.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          #include "inavr.h"
     12          #include "string.h"
     13          #include "hart.h"
     14          
     15          __no_init int RestartCnt             @0x21FD;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          volatile char RestartCmd = 0;
   \                     RestartCmd:
   \   00000000                      DS8 1
     17          
     18          

   \                                 In  segment CODE, align 2, keep-with-next
     19          void WDT_off(void)
   \                     WDT_off:
     20          {
     21              __disable_interrupt();
   \   00000000   94F8               CLI
     22              __watchdog_reset();
   \   00000002   95A8               WDR
     23              /* Clear WDRF in MCUSR */
     24              MCUSR &= ~(1<<WDRF);
   \   00000004   B704               IN      R16, 0x34
   \   00000006   7F07               ANDI    R16, 0xF7
   \   00000008   BF04               OUT     0x34, R16
     25              /* Write logical one to WDCE and WDE */
     26              /* Keep old prescaler setting to prevent unintentional time-out
     27              */
     28              WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
   \   0000000A   E00F               LDI     R16, 15
   \   0000000C   9300....           STS     _A_WDTCSR, R16
     29              /* Turn off WDT */
     30              WDTCSR = 0x00;
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     _A_WDTCSR, R16
     31              __enable_interrupt();
   \   00000016   9478               SEI
     32          }
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_MCUSR
   \   0000001A                      REQUIRE _A_WDTCSR
     33          

   \                                 In  segment CODE, align 2, keep-with-next
     34          void WDT_Prescaler_Change(void)
   \                     WDT_Prescaler_Change:
     35          {
     36              __disable_interrupt();
   \   00000000   94F8               CLI
     37              __watchdog_reset();
   \   00000002   95A8               WDR
     38              /* Start timed equence */
     39              WDTCSR |= (1<<WDCE) | (1<<WDE);
   \   00000004   9100....           LDS     R16, _A_WDTCSR
   \   00000008   6108               ORI     R16, 0x18
   \   0000000A   9300....           STS     _A_WDTCSR, R16
     40              /* Set new prescaler(time-out) value = 64K cycles (~0.5 s) */
     41              //WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
     42              /* Set new prescaler(time-out) value = 256K cycles (~2.0 s) */
     43              WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
   \   0000000E   E00F               LDI     R16, 15
   \   00000010   9300....           STS     _A_WDTCSR, R16
     44          
     45          
     46          __enable_interrupt();
   \   00000014   9478               SEI
     47          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_WDTCSR
     48          
     49          /*************************************************************************
     50          *   (This is a task)
     51          *  Watchdog handler
     52          *
     53          *************************************************************************/
     54          #define NUMBER_OF_TASKS 7

   \                                 In  segment CODE, align 2, keep-with-next
     55          void WatchDogHandler(void) {
   \                     WatchDogHandler:
   \   00000000   ........           CALL    ?PROLOGUE7_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
     56          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     57              static const char *StackCheck[] = { 
     58                  StackTest1              , StackTest2            , 
     59                  StackTest3              , StackTest4            , 
     60                  StackTest5              , StackTest6            , 
     61                  _hart_task0.StackTest1  , _hart_task0.StackTest2, 
     62                  _hart_task1.StackTest1  , _hart_task1.StackTest2,
     63                  _hart_task2.StackTest1  , _hart_task2.StackTest2 };
     64          #endif
     65              char HartComCheckTimeCnt = 0;
   \   00000004   2444               CLR     R4
     66          #ifdef OS_LIBMODE_DP
     67              char LoadCnt            = 0;
     68              int RawPerformance[NUMBER_OF_TASKS];
     69              static OS_TASK *MyTasks[NUMBER_OF_TASKS] = { &_hart_task0.tcb, &_hart_task1.tcb, &_hart_task2.tcb, &TCB_USART0, &TCB_AD7715, &TCB_INT_ADC, &TCB_WATCHDOG };
     70          #endif
     71              OS_Delay(100);                         // wait 1 seconds for other tasks to start and set TaskStatus
   \   00000006   E604               LDI     R16, 100
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    OS_Delay
     72              //asm("WDR");                             // kick the dog!!
     73              //WDTCSR = 0x1f;
     74              //WDTCSR = 0x0f;
     75              //asm("WDR");                             // kick the dog!!
     76              while (1) {
     77                  OS_Delay(500);
   \                     ??WatchDogHandler_0:
   \   0000000E   EF04               LDI     R16, 244
   \   00000010   E011               LDI     R17, 1
   \   00000012   ........           CALL    OS_Delay
     78                  OS_U32 CurrentTime = OS_Time;
   \   00000016   ....               LDI     R30, LOW(OS_Global)
   \   00000018   ....               LDI     R31, (OS_Global) >> 8
   \   0000001A   8982               LDD     R24, Z+18
   \   0000001C   8993               LDD     R25, Z+19
   \   0000001E   89A4               LDD     R26, Z+20
   \   00000020   89B5               LDD     R27, Z+21
     79                  if (CriticalComError) {
   \   00000022   9100....           LDS     R16, CriticalComError
   \   00000026   2300               TST     R16
   \   00000028   F029               BREQ    ??WatchDogHandler_1
     80                      OS_Error(ZB_ERR_UART);
   \   0000002A   E004               LDI     R16, 4
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   ........           CALL    OS_Error
   \   00000032   C06F               RJMP    ??WatchDogHandler_2
     81                  } else if (HartComCheckTimeCnt++ >= 10) {
   \                     ??WatchDogHandler_1:
   \   00000034   2D04               MOV     R16, R4
   \   00000036   2E40               MOV     R4, R16
   \   00000038   9443               INC     R4
   \   0000003A   300A               CPI     R16, 10
   \   0000003C   F408               BRCC    $+2+2
   \   0000003E   C04F               RJMP    ??WatchDogHandler_3
     82                      if (labs(CurrentTime - _hart_task0.LastHartTaskRunTime) > 10000) {
   \   00000040   ....               LDI     R30, LOW((_hart_task0 + 1367))
   \   00000042   ....               LDI     R31, HIGH((_hart_task0 + 1367))
   \   00000044   8140               LD      R20, Z
   \   00000046   8151               LDD     R21, Z+1
   \   00000048   8162               LDD     R22, Z+2
   \   0000004A   8173               LDD     R23, Z+3
   \   0000004C   018C               MOVW    R17:R16, R25:R24
   \   0000004E   019D               MOVW    R19:R18, R27:R26
   \   00000050   1B04               SUB     R16, R20
   \   00000052   0B15               SBC     R17, R21
   \   00000054   0B26               SBC     R18, R22
   \   00000056   0B37               SBC     R19, R23
   \   00000058   ........           CALL    labs
   \   0000005C   3101               CPI     R16, 17
   \   0000005E   E247               LDI     R20, 39
   \   00000060   0714               CPC     R17, R20
   \   00000062   E040               LDI     R20, 0
   \   00000064   0724               CPC     R18, R20
   \   00000066   E040               LDI     R20, 0
   \   00000068   0734               CPC     R19, R20
   \   0000006A   F024               BRLT    ??WatchDogHandler_4
     83                          OS_Error(ZB_ERR_MODEM_0);
   \   0000006C   E001               LDI     R16, 1
   \   0000006E   E010               LDI     R17, 0
   \   00000070   ........           CALL    OS_Error
     84                      }
     85                      if (labs(CurrentTime - _hart_task1.LastHartTaskRunTime) > 10000) {
   \                     ??WatchDogHandler_4:
   \   00000074   ....               LDI     R30, LOW((_hart_task1 + 1367))
   \   00000076   ....               LDI     R31, HIGH((_hart_task1 + 1367))
   \   00000078   8140               LD      R20, Z
   \   0000007A   8151               LDD     R21, Z+1
   \   0000007C   8162               LDD     R22, Z+2
   \   0000007E   8173               LDD     R23, Z+3
   \   00000080   018C               MOVW    R17:R16, R25:R24
   \   00000082   019D               MOVW    R19:R18, R27:R26
   \   00000084   1B04               SUB     R16, R20
   \   00000086   0B15               SBC     R17, R21
   \   00000088   0B26               SBC     R18, R22
   \   0000008A   0B37               SBC     R19, R23
   \   0000008C   ........           CALL    labs
   \   00000090   3101               CPI     R16, 17
   \   00000092   E247               LDI     R20, 39
   \   00000094   0714               CPC     R17, R20
   \   00000096   E040               LDI     R20, 0
   \   00000098   0724               CPC     R18, R20
   \   0000009A   E040               LDI     R20, 0
   \   0000009C   0734               CPC     R19, R20
   \   0000009E   F024               BRLT    ??WatchDogHandler_5
     86                          OS_Error(ZB_ERR_MODEM_1);
   \   000000A0   E002               LDI     R16, 2
   \   000000A2   E010               LDI     R17, 0
   \   000000A4   ........           CALL    OS_Error
     87                      }
     88                      if (labs(CurrentTime - _hart_task2.LastHartTaskRunTime) > 10000) {
   \                     ??WatchDogHandler_5:
   \   000000A8   ....               LDI     R30, LOW((_hart_task2 + 1367))
   \   000000AA   ....               LDI     R31, HIGH((_hart_task2 + 1367))
   \   000000AC   8140               LD      R20, Z
   \   000000AE   8151               LDD     R21, Z+1
   \   000000B0   8162               LDD     R22, Z+2
   \   000000B2   8173               LDD     R23, Z+3
   \   000000B4   018C               MOVW    R17:R16, R25:R24
   \   000000B6   019D               MOVW    R19:R18, R27:R26
   \   000000B8   1B04               SUB     R16, R20
   \   000000BA   0B15               SBC     R17, R21
   \   000000BC   0B26               SBC     R18, R22
   \   000000BE   0B37               SBC     R19, R23
   \   000000C0   ........           CALL    labs
   \   000000C4   3101               CPI     R16, 17
   \   000000C6   E247               LDI     R20, 39
   \   000000C8   0714               CPC     R17, R20
   \   000000CA   E040               LDI     R20, 0
   \   000000CC   0724               CPC     R18, R20
   \   000000CE   E040               LDI     R20, 0
   \   000000D0   0734               CPC     R19, R20
   \   000000D2   F0FC               BRLT    ??WatchDogHandler_2
     89                          OS_Error(ZB_ERR_MODEM_2);
   \   000000D4   E003               LDI     R16, 3
   \   000000D6   E010               LDI     R17, 0
   \   000000D8   ........           CALL    OS_Error
   \   000000DC   C01A               RJMP    ??WatchDogHandler_2
     90                      }
     91                  } else if (labs(CurrentTime - Last_ADC_OK_Time) > 5000) {
   \                     ??WatchDogHandler_3:
   \   000000DE   ....               LDI     R30, LOW(Last_ADC_OK_Time)
   \   000000E0   ....               LDI     R31, (Last_ADC_OK_Time) >> 8
   \   000000E2   8140               LD      R20, Z
   \   000000E4   8151               LDD     R21, Z+1
   \   000000E6   8162               LDD     R22, Z+2
   \   000000E8   8173               LDD     R23, Z+3
   \   000000EA   018C               MOVW    R17:R16, R25:R24
   \   000000EC   019D               MOVW    R19:R18, R27:R26
   \   000000EE   1B04               SUB     R16, R20
   \   000000F0   0B15               SBC     R17, R21
   \   000000F2   0B26               SBC     R18, R22
   \   000000F4   0B37               SBC     R19, R23
   \   000000F6   ........           CALL    labs
   \   000000FA   3809               CPI     R16, 137
   \   000000FC   E143               LDI     R20, 19
   \   000000FE   0714               CPC     R17, R20
   \   00000100   E040               LDI     R20, 0
   \   00000102   0724               CPC     R18, R20
   \   00000104   E040               LDI     R20, 0
   \   00000106   0734               CPC     R19, R20
   \   00000108   F024               BRLT    ??WatchDogHandler_2
     92                      OS_Error(ZB_ERR_EXT_ADC);
   \   0000010A   E005               LDI     R16, 5
   \   0000010C   E010               LDI     R17, 0
   \   0000010E   ........           CALL    OS_Error
     93                  }
     94                  if (!RestartCmd) {
   \                     ??WatchDogHandler_2:
   \   00000112   9100....           LDS     R16, RestartCmd
   \   00000116   2300               TST     R16
   \   00000118   F409               BRNE    ??WatchDogHandler_6
     95                      __watchdog_reset();               //kick the dog
   \   0000011A   95A8               WDR
     96                  }
     97          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     98                  char ErrorStack = 0;
   \                     ??WatchDogHandler_6:
   \   0000011C   2455               CLR     R5
     99                  for (char i = 0; i < NELEMENTS(StackCheck); i++) {
   \   0000011E   2466               CLR     R6
   \                     ??WatchDogHandler_7:
   \   00000120   E00C               LDI     R16, 12
   \   00000122   1660               CP      R6, R16
   \   00000124   F008               BRCS    $+2+2
   \   00000126   CF73               RJMP    ??WatchDogHandler_0
    100                      if (memcmp(StackCheck[i], "123456789", 10)) {
   \   00000128   E04A               LDI     R20, 10
   \   0000012A   E050               LDI     R21, 0
   \   0000012C   ....               LDI     R18, LOW(`?<Constant "123456789">`)
   \   0000012E   ....               LDI     R19, (`?<Constant "123456789">`) >> 8
   \   00000130   2D06               MOV     R16, R6
   \   00000132   E010               LDI     R17, 0
   \   00000134   0F00               LSL     R16
   \   00000136   1F11               ROL     R17
   \   00000138   01F8               MOVW    R31:R30, R17:R16
   \   0000013A   ....               SUBI    R30, LOW((-(??StackCheck) & 0xFFFF))
   \   0000013C   ....               SBCI    R31, (-(??StackCheck) & 0xFFFF) >> 8
   \   0000013E   8100               LD      R16, Z
   \   00000140   8111               LDD     R17, Z+1
   \   00000142   ........           CALL    memcmp
   \   00000146   2B01               OR      R16, R17
   \   00000148   F019               BREQ    ??WatchDogHandler_8
    101                          ErrorStack = i + 1;
   \   0000014A   2D06               MOV     R16, R6
   \   0000014C   9503               INC     R16
   \   0000014E   2E50               MOV     R5, R16
    102                      }
    103                  }
   \                     ??WatchDogHandler_8:
   \   00000150   9463               INC     R6
   \   00000152   CFE6               RJMP    ??WatchDogHandler_7
    104          #endif
    105          #ifdef OS_LIBMODE_DP
    106                  if (LoadCnt++ > 5) {
    107                      OS_STAT_Sample();
    108                      OS_Delay(10);
    109                      int tmpRawLoad = 0;
    110                      for (char i = 0; i < NUMBER_OF_TASKS; i++) {
    111                          RawPerformance[i] = OS_STAT_GetLoad(MyTasks[i]);
    112                          tmpRawLoad       += RawPerformance[i];
    113                      }
    114                  }
    115          #endif
    116              }
    117          }

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     ??StackCheck:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for StackCheck>`
    118          
    119          
    120          /*************************************************************************
    121          *
    122          *  Get my address
    123          *
    124          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    125          char MyAddress(void) {
   \                     MyAddress:
    126          
    127          #if (OS_UART == 0)
    128              return 0;                   // Debug only
    129          #else
    130              int Address = (~(PINE >> 4) & 0x0f);
   \   00000000   B10C               IN      R16, 0x0C
   \   00000002   9502               SWAP    R16
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   E010               LDI     R17, 0
   \   00000008   9500               COM     R16
   \   0000000A   9510               COM     R17
   \   0000000C   700F               ANDI    R16, 0x0F
   \   0000000E   7010               ANDI    R17, 0x00
    131              return Address;
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_PINE
    132              //return(~(PINE>>4) & 0x0f) ;
    133          #endif
    134          }
    135          
    136          /*************************************************************************
    137          *
    138          *  Check for legal float
    139          *
    140          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    141          char IsFloat(float A) {
   \                     IsFloat:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01A8               MOVW    R21:R20, R17:R16
   \   00000006   01B9               MOVW    R23:R22, R19:R18
    142              long exp;
    143              // A NAN has an exponent of 255 (shifted left 23 positions) and
    144              // Denormalized has an exponent set to 0
    145              exp = *(long *)&A & 0x7F800000L;
   \   00000008   018A               MOVW    R17:R16, R21:R20
   \   0000000A   019B               MOVW    R19:R18, R23:R22
   \   0000000C   7000               ANDI    R16, 0x00
   \   0000000E   7010               ANDI    R17, 0x00
   \   00000010   7820               ANDI    R18, 0x80
   \   00000012   773F               ANDI    R19, 0x7F
   \   00000014   01C8               MOVW    R25:R24, R17:R16
   \   00000016   01D9               MOVW    R27:R26, R19:R18
    146              //int mantissa = *(int*)&A & 0x007FFFFF;
    147              if (exp && (exp != 0x7F800000L)) {
   \   00000018   2F08               MOV     R16, R24
   \   0000001A   2B09               OR      R16, R25
   \   0000001C   2B0A               OR      R16, R26
   \   0000001E   2B0B               OR      R16, R27
   \   00000020   F051               BREQ    ??IsFloat_0
   \   00000022   3080               CPI     R24, 0
   \   00000024   E000               LDI     R16, 0
   \   00000026   0790               CPC     R25, R16
   \   00000028   E800               LDI     R16, 128
   \   0000002A   07A0               CPC     R26, R16
   \   0000002C   E70F               LDI     R16, 127
   \   0000002E   07B0               CPC     R27, R16
   \   00000030   F011               BREQ    ??IsFloat_0
    148                  return (true);
   \   00000032   E001               LDI     R16, 1
   \   00000034   C001               RJMP    ??IsFloat_1
    149              }
    150              return (false);
   \                     ??IsFloat_0:
   \   00000036   E000               LDI     R16, 0
   \                     ??IsFloat_1:
   \   00000038   E0E4               LDI     R30, 4
   \   0000003A   ........           JMP     ?EPILOGUE_B4_L09
    151          }

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "123456789">>`:
   \   00000000   323134333635       DC8 "123456789"
   \              38370039    

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for StackCheck>`:
   \   00000000   ............       DC16 StackTest1, StackTest2, StackTest3, StackTest4, StackTest5
   \              ........    
   \   0000000A   ............       DC16 StackTest6, _hart_task0, _hart_task0 + 1CCH, _hart_task1
   \              ....        
   \   00000012   ............       DC16 _hart_task1 + 1CCH, _hart_task2, _hart_task2 + 1CCH

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "123456789">`:
   \   00000000                      DS8 10
   \   0000000A                      REQUIRE `?<Initializer for <Constant "123456789">>`
    152          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   IsFloat
      0      2   MyAddress
      0      2   WDT_Prescaler_Change
      0      2   WDT_off
      7      2   WatchDogHandler
        7      2   -> OS_Delay
        7      2   -> OS_Error
        7      2   -> labs
        7      2   -> memcmp


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "123456789">
      10  ?<Initializer for <Constant "123456789">>
      24  ?<Initializer for StackCheck>
      62  IsFloat
      18  MyAddress
       1  RestartCmd
      24  StackCheck
      24  WDT_Prescaler_Change
      26  WDT_off
     340  WatchDogHandler
       1  _A_MCUSR
       1  _A_PINE
       1  _A_WDTCSR
      14  -- Other

 
   3 bytes in segment ABSOLUTE
 470 bytes in segment CODE
  14 bytes in segment INITTAB
  34 bytes in segment NEAR_I
  34 bytes in segment NEAR_ID
   1 byte  in segment NEAR_Z
 
 504 bytes of CODE memory (+ 14 bytes shared)
  35 bytes of DATA memory (+  3 bytes shared)

Errors: none
Warnings: 1
