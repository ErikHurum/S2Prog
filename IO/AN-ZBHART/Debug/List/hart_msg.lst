###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       04/May/2023  10:24:00
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  D:\S2Prog\IO\AN-ZBHART\Src\hart_msg.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWA2D.tmp
#        (D:\S2Prog\IO\AN-ZBHART\Src\hart_msg.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\AN-ZBHART\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\AN-ZBHART\Debug\List -y --initializers_in_flash --no_cse
#        --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\AN-ZBHART\INC\\ -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  D:\S2Prog\IO\AN-ZBHART\Debug\List\hart_msg.lst
#    Object file  =  D:\S2Prog\IO\AN-ZBHART\Debug\Obj\hart_msg.r90
#
###############################################################################

D:\S2Prog\IO\AN-ZBHART\Src\hart_msg.c
      1          #include <stdio.h>
      2          #include "hart_common.h"
      3          #include "hart_msg.h"
      4          #include "externals.h"
      5          
      6          ////////////////////////////////////////////////////////////////////////////////
      7          //
      8          // internal defines
      9          //
     10          ////////////////////////////////////////////////////////////////////////////////
     11          #define HART_PARSER_ERR(__parser__, __err_msg__)                      \
     12            __parser__->err_msg   = __err_msg__;                                \
     13            hart_msg_parser_move_state(__parser__, hart_msg_state_blackhole);   \
     14            return HartMessageParsing_Error;
     15          
     16          #define HART_PUT_RX_DATA(__parser__, __rxb__)                           \
     17            if(hart_msg_put_rx_data(__parser__, __rxb__) == 0)                    \
     18            {                                                                     \
     19              hart_msg_parser_move_state(__parser__, hart_msg_state_blackhole);   \
     20              return HartMessageParsing_Error;                                    \
     21            }
     22          
     23          #define HART_ENCODER_PUT(__encoder__, __d__)                  \
     24            if(hart_msg_encoder_put_data(__encoder__, __d__) != 1)     \
     25            {                                                           \
     26              return 0;                                                 \
     27            }
     28          
     29          #define HART_MARK_DPTR(parser, ptr)\
     30            ptr = &(parser->rx_buf_ptr[parser->rx_ndx]);
     31          
     32          
     33          
     34          ////////////////////////////////////////////////////////////////////////////////
     35          //
     36          // private prototypes
     37          //
     38          ////////////////////////////////////////////////////////////////////////////////
     39          static inline HartMessageParsingStatus hart_msg_parser_move_state(HartMessageParser *parser, hart_message_state state);
     40          
     41          static HartMessageParsingStatus hart_msg_state_begin(HartMessageParser *parser, hart_data_t rxb);
     42          static HartMessageParsingStatus hart_msg_state_preamble(HartMessageParser *parser, hart_data_t rxb);
     43          static HartMessageParsingStatus hart_msg_state_start_char(HartMessageParser *parser, hart_data_t rxb);
     44          static HartMessageParsingStatus hart_msg_state_address(HartMessageParser *parser, hart_data_t rxb);
     45          static HartMessageParsingStatus hart_msg_state_expansion(HartMessageParser *parser, hart_data_t rxb);
     46          static HartMessageParsingStatus hart_msg_state_command(HartMessageParser *parser, hart_data_t rxb);
     47          static HartMessageParsingStatus hart_msg_state_bytecount(HartMessageParser *parser, hart_data_t rxb);
     48          static HartMessageParsingStatus hart_msg_state_status(HartMessageParser *parser, hart_data_t rxb);
     49          static HartMessageParsingStatus hart_msg_state_data(HartMessageParser *parser, hart_data_t rxb);
     50          static HartMessageParsingStatus hart_msg_state_checksum(HartMessageParser *parser, hart_data_t rxb);
     51          
     52          static HartMessageParsingStatus hart_msg_state_blackhole(HartMessageParser *parser, hart_data_t rxb);
     53          
     54          ////////////////////////////////////////////////////////////////////////////////
     55          //
     56          // utilities
     57          //
     58          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
     59          static inline HartMessageParsingStatus
     60          hart_msg_parser_move_state(HartMessageParser *parser, hart_message_state state) {
   \                     hart_msg_parser_move_state:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
     61          	parser->parsing_state = state;
   \   00000002   8320               ST      Z, R18
   \   00000004   8331               STD     Z+1, R19
     62          
     63          	return HartMessageParsing_Pass;
   \   00000006   E000               LDI     R16, 0
   \   00000008   9508               RET
     64          }
     65          

   \                                 In  segment CODE, align 2, keep-with-next
     66          static inline HartMessageParsingStatus
     67          hart_msg_move_and_invoke_state(HartMessageParser *parser, hart_message_state state, hart_data_t rxb) {
   \                     hart_msg_move_and_invoke_state:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   2E44               MOV     R4, R20
     68          	hart_msg_parser_move_state(parser, state);
   \   0000000A   019C               MOVW    R19:R18, R25:R24
   \   0000000C   018D               MOVW    R17:R16, R27:R26
   \   0000000E   ....               RCALL   hart_msg_parser_move_state
     69          
     70          	return state(parser, rxb);
   \   00000010   2D24               MOV     R18, R4
   \   00000012   018D               MOVW    R17:R16, R27:R26
   \   00000014   01FC               MOVW    R31:R30, R25:R24
   \   00000016   9509               ICALL
   \   00000018   E0E5               LDI     R30, 5
   \   0000001A   ........           JMP     ?EPILOGUE_B5_L09
     71          }
     72          
     73          
     74          /*
     75           *
     76           * returns
     77           * 1 ok
     78           * 0 when buffer overflow
     79           *
     80           */

   \                                 In  segment CODE, align 2, keep-with-next
     81          static inline int
     82          hart_msg_put_rx_data(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_put_rx_data:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01F8               MOVW    R31:R30, R17:R16
     83          	uint16_t      r_ndx     = parser->rx_ndx;
   \   00000006   8182               LDD     R24, Z+2
   \   00000008   8193               LDD     R25, Z+3
     84          	uint16_t      buf_size  = parser->rx_buf_size;
   \   0000000A   8144               LDD     R20, Z+4
   \   0000000C   8155               LDD     R21, Z+5
     85          	volatile hart_data_t *buf       = parser->rx_buf_ptr;
   \   0000000E   8166               LDD     R22, Z+6
   \   00000010   8177               LDD     R23, Z+7
     86          
     87          	if (r_ndx < buf_size) {
   \   00000012   1784               CP      R24, R20
   \   00000014   0795               CPC     R25, R21
   \   00000016   F450               BRCC    ??hart_msg_put_rx_data_0
     88          		buf[r_ndx] = rxb;
   \   00000018   01DB               MOVW    R27:R26, R23:R22
   \   0000001A   0FA8               ADD     R26, R24
   \   0000001C   1FB9               ADC     R27, R25
   \   0000001E   932C               ST      X, R18
     89          		r_ndx++;
   \   00000020   9601               ADIW    R25:R24, 1
     90          		parser->rx_ndx = r_ndx;
   \   00000022   8382               STD     Z+2, R24
   \   00000024   8393               STD     Z+3, R25
     91          		return 1;
   \   00000026   E001               LDI     R16, 1
   \   00000028   E010               LDI     R17, 0
   \   0000002A   C004               RJMP    ??hart_msg_put_rx_data_1
     92          	}
     93          
     94          	parser->err_msg = HartMessageErrorCode_OutOfBound;
   \                     ??hart_msg_put_rx_data_0:
   \   0000002C   E001               LDI     R16, 1
   \   0000002E   AB04               STD     Z+52, R16
     95          	return 0;
   \   00000030   E000               LDI     R16, 0
   \   00000032   E010               LDI     R17, 0
   \                     ??hart_msg_put_rx_data_1:
   \   00000034   E0E4               LDI     R30, 4
   \   00000036   ........           JMP     ?EPILOGUE_B4_L09
     96          }
     97          
     98          
     99          ////////////////////////////////////////////////////////////////////////////////
    100          //
    101          // private parsing state machine
    102          //
    103          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    104          static HartMessageParsingStatus
    105          hart_msg_state_begin(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_begin:
   \   00000000   01A8               MOVW    R21:R20, R17:R16
   \   00000002   2F62               MOV     R22, R18
    106          	if (rxb != 0xff) {
   \   00000004   3F6F               CPI     R22, 255
   \   00000006   F049               BREQ    ??hart_msg_state_begin_0
    107          		HART_PARSER_ERR(parser, HartMessageErrorCode_InvalidPreambleInBegin);
   \   00000008   01FA               MOVW    R31:R30, R21:R20
   \   0000000A   E003               LDI     R16, 3
   \   0000000C   AB04               STD     Z+52, R16
   \   0000000E   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   00000010   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   00000012   018A               MOVW    R17:R16, R21:R20
   \   00000014   ....               RCALL   hart_msg_parser_move_state
   \   00000016   E001               LDI     R16, 1
   \   00000018   9508               RET
    108          	}
    109          
    110          	parser->state_dependent_cnt   = 1;
   \                     ??hart_msg_state_begin_0:
   \   0000001A   01FA               MOVW    R31:R30, R21:R20
   \   0000001C   E001               LDI     R16, 1
   \   0000001E   E010               LDI     R17, 0
   \   00000020   8700               STD     Z+8, R16
   \   00000022   8711               STD     Z+9, R17
    111          
    112          	return hart_msg_parser_move_state(parser, hart_msg_state_preamble);
   \   00000024   ....               LDI     R18, LOW(hart_msg_state_preamble/2)
   \   00000026   ....               LDI     R19, (hart_msg_state_preamble/2) >> 8
   \   00000028   018A               MOVW    R17:R16, R21:R20
   \   0000002A   ....               RCALL   hart_msg_parser_move_state
   \   0000002C   9508               RET
    113          }
    114          

   \                                 In  segment CODE, align 2, keep-with-next
    115          static HartMessageParsingStatus
    116          hart_msg_state_preamble(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_preamble:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
    117          	if (rxb != 0xff) {
   \   00000008   3F8F               CPI     R24, 255
   \   0000000A   F0A9               BREQ    ??hart_msg_state_preamble_0
    118          		if (parser->state_dependent_cnt >= HART_PREAMBLE_MIN_LENGTH) {
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8500               LDD     R16, Z+8
   \   00000010   8511               LDD     R17, Z+9
   \   00000012   3005               CPI     R16, 5
   \   00000014   4010               SBCI    R17, 0
   \   00000016   F030               BRCS    ??hart_msg_state_preamble_1
    119          			// ok. we can accept it as start byte
    120          			return hart_msg_move_and_invoke_state(parser, hart_msg_state_start_char, rxb);
   \   00000018   2F48               MOV     R20, R24
   \   0000001A   ....               LDI     R18, LOW(hart_msg_state_start_char/2)
   \   0000001C   ....               LDI     R19, (hart_msg_state_start_char/2) >> 8
   \   0000001E   018D               MOVW    R17:R16, R27:R26
   \   00000020   ....               RCALL   hart_msg_move_and_invoke_state
   \   00000022   C020               RJMP    ??hart_msg_state_preamble_2
    121          		}
    122          
    123          		HART_PARSER_ERR(parser, HartMessageErrorCode_NotEnoughPreamble);
   \                     ??hart_msg_state_preamble_1:
   \   00000024   01FD               MOVW    R31:R30, R27:R26
   \   00000026   E004               LDI     R16, 4
   \   00000028   AB04               STD     Z+52, R16
   \   0000002A   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   0000002C   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   0000002E   018D               MOVW    R17:R16, R27:R26
   \   00000030   ....               RCALL   hart_msg_parser_move_state
   \   00000032   E001               LDI     R16, 1
   \   00000034   C017               RJMP    ??hart_msg_state_preamble_2
    124          	}
    125          
    126          	parser->state_dependent_cnt++;
   \                     ??hart_msg_state_preamble_0:
   \   00000036   01FD               MOVW    R31:R30, R27:R26
   \   00000038   8500               LDD     R16, Z+8
   \   0000003A   8511               LDD     R17, Z+9
   \   0000003C   5F0F               SUBI    R16, 255
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   8700               STD     Z+8, R16
   \   00000042   8711               STD     Z+9, R17
    127          
    128          	if (parser->state_dependent_cnt > HART_PREAMBLE_MAX_LENGTH) {
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8500               LDD     R16, Z+8
   \   00000048   8511               LDD     R17, Z+9
   \   0000004A   3105               CPI     R16, 21
   \   0000004C   4010               SBCI    R17, 0
   \   0000004E   F048               BRCS    ??hart_msg_state_preamble_3
    129          		// excessive preamble
    130          		HART_PARSER_ERR(parser, HartMessageErrorCode_ExcessivePreamble);
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   E005               LDI     R16, 5
   \   00000054   AB04               STD     Z+52, R16
   \   00000056   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   00000058   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   0000005A   018D               MOVW    R17:R16, R27:R26
   \   0000005C   ....               RCALL   hart_msg_parser_move_state
   \   0000005E   E001               LDI     R16, 1
   \   00000060   C001               RJMP    ??hart_msg_state_preamble_2
    131          	}
    132          	return HartMessageParsing_Pass;
   \                     ??hart_msg_state_preamble_3:
   \   00000062   E000               LDI     R16, 0
   \                     ??hart_msg_state_preamble_2:
   \   00000064   E0E4               LDI     R30, 4
   \   00000066   ........           JMP     ?EPILOGUE_B4_L09
    133          }
    134          

   \                                 In  segment CODE, align 2, keep-with-next
    135          static HartMessageParsingStatus
    136          hart_msg_state_start_char(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_start_char:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   9724               SBIW    R29:R28, 4
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   2E22               MOV     R2, R18
    137          	HART_MARK_DPTR(parser, parser->start_ptr);
   \   0000000A   01FD               MOVW    R31:R30, R27:R26
   \   0000000C   8106               LDD     R16, Z+6
   \   0000000E   8117               LDD     R17, Z+7
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   8122               LDD     R18, Z+2
   \   00000014   8133               LDD     R19, Z+3
   \   00000016   0F02               ADD     R16, R18
   \   00000018   1F13               ADC     R17, R19
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8B00               STD     Z+16, R16
   \   0000001E   8B11               STD     Z+17, R17
    138          
    139          	HART_PUT_RX_DATA(parser, rxb);
   \   00000020   2D22               MOV     R18, R2
   \   00000022   018D               MOVW    R17:R16, R27:R26
   \   00000024   ....               RCALL   hart_msg_put_rx_data
   \   00000026   2B01               OR      R16, R17
   \   00000028   F431               BRNE    ??hart_msg_state_start_char_0
   \   0000002A   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   0000002C   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   0000002E   018D               MOVW    R17:R16, R27:R26
   \   00000030   ....               RCALL   hart_msg_parser_move_state
   \   00000032   E001               LDI     R16, 1
   \   00000034   C09B               RJMP    ??hart_msg_state_start_char_1
    140          
    141          	//
    142          	// a) extract out type of message
    143          	//      master -> slave
    144          	//      slave -> master
    145          	//      burst from slave
    146          	// b) extract out address format
    147          	//      short frame
    148          	//      long frame
    149          	// c) extract out expansion count
    150          	//
    151          	if (rxb == HART_MSG_START_FROM_MASTER_TO_SLAVE) {
   \                     ??hart_msg_state_start_char_0:
   \   00000036   E802               LDI     R16, 130
   \   00000038   1620               CP      R2, R16
   \   0000003A   F439               BRNE    ??hart_msg_state_start_char_2
    152          		// mater to slave delimiter
    153          		parser->msg_type              = HartMessageType_MasterToSlave;
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   E000               LDI     R16, 0
   \   00000040   8707               STD     Z+15, R16
    154          		parser->address_fmt           = HartMessageAddressFormat_Long;
   \   00000042   01FD               MOVW    R31:R30, R27:R26
   \   00000044   E001               LDI     R16, 1
   \   00000046   8706               STD     Z+14, R16
   \   00000048   C085               RJMP    ??hart_msg_state_start_char_3
    155          	} else if (rxb == HART_MSG_START_FROM_SLAVE_TO_MASTER) {
   \                     ??hart_msg_state_start_char_2:
   \   0000004A   E006               LDI     R16, 6
   \   0000004C   1620               CP      R2, R16
   \   0000004E   F439               BRNE    ??hart_msg_state_start_char_4
    156          		// slave to master delimiter
    157          		parser->msg_type              = HartMessageType_SlaveToMaster;
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   E001               LDI     R16, 1
   \   00000054   8707               STD     Z+15, R16
    158          		parser->address_fmt           = HartMessageAddressFormat_Short;
   \   00000056   01FD               MOVW    R31:R30, R27:R26
   \   00000058   E000               LDI     R16, 0
   \   0000005A   8706               STD     Z+14, R16
   \   0000005C   C07B               RJMP    ??hart_msg_state_start_char_3
    159          	} else if (rxb == HART_MSG_START_FROM_SLAVE_TO_MASTER_LONG) {
   \                     ??hart_msg_state_start_char_4:
   \   0000005E   E806               LDI     R16, 134
   \   00000060   1620               CP      R2, R16
   \   00000062   F009               BREQ    $+2+2
   \   00000064   C06E               RJMP    ??hart_msg_state_start_char_5
    160          		// slave to master delimiter
    161          		parser->msg_type              = HartMessageType_SlaveToMaster;
   \   00000066   01FD               MOVW    R31:R30, R27:R26
   \   00000068   E001               LDI     R16, 1
   \   0000006A   8707               STD     Z+15, R16
    162          		parser->address_fmt           = HartMessageAddressFormat_Long;
   \   0000006C   01FD               MOVW    R31:R30, R27:R26
   \   0000006E   E001               LDI     R16, 1
   \   00000070   8706               STD     Z+14, R16
    163          		{
    164          			char FloatBuf[4] = { parser->rx_buf_ptr[13], parser->rx_buf_ptr[12], parser->rx_buf_ptr[11], parser->rx_buf_ptr[10] };
   \   00000072   01FD               MOVW    R31:R30, R27:R26
   \   00000074   8106               LDD     R16, Z+6
   \   00000076   8117               LDD     R17, Z+7
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   8505               LDD     R16, Z+13
   \   0000007C   2E40               MOV     R4, R16
   \   0000007E   01FD               MOVW    R31:R30, R27:R26
   \   00000080   8106               LDD     R16, Z+6
   \   00000082   8117               LDD     R17, Z+7
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   8504               LDD     R16, Z+12
   \   00000088   2E50               MOV     R5, R16
   \   0000008A   01FD               MOVW    R31:R30, R27:R26
   \   0000008C   8106               LDD     R16, Z+6
   \   0000008E   8117               LDD     R17, Z+7
   \   00000090   01F8               MOVW    R31:R30, R17:R16
   \   00000092   8503               LDD     R16, Z+11
   \   00000094   2E60               MOV     R6, R16
   \   00000096   01FD               MOVW    R31:R30, R27:R26
   \   00000098   8106               LDD     R16, Z+6
   \   0000009A   8117               LDD     R17, Z+7
   \   0000009C   01F8               MOVW    R31:R30, R17:R16
   \   0000009E   8502               LDD     R16, Z+10
   \   000000A0   2E70               MOV     R7, R16
    165          			parser->Current             = *((float *)FloatBuf);
   \   000000A2   01FD               MOVW    R31:R30, R27:R26
   \   000000A4   8E44               STD     Z+28, R4
   \   000000A6   8E55               STD     Z+29, R5
   \   000000A8   8E66               STD     Z+30, R6
   \   000000AA   8E77               STD     Z+31, R7
    166          		}
    167          		for (int i = 0; i < 4; i++) {
   \   000000AC   E080               LDI     R24, 0
   \   000000AE   E090               LDI     R25, 0
   \                     ??hart_msg_state_start_char_6:
   \   000000B0   3084               CPI     R24, 4
   \   000000B2   E000               LDI     R16, 0
   \   000000B4   0790               CPC     R25, R16
   \   000000B6   F00C               BRLT    $+2+2
   \   000000B8   C04D               RJMP    ??hart_msg_state_start_char_3
    168          			int Offset = i * 5;
   \   000000BA   018C               MOVW    R17:R16, R25:R24
   \   000000BC   E045               LDI     R20, 5
   \   000000BE   E050               LDI     R21, 0
   \   000000C0   ........           CALL    ?S_EC_MUL_L02
    169          			char FloatBuf[4] = { parser->rx_buf_ptr[18 + Offset], parser->rx_buf_ptr[17 + Offset], parser->rx_buf_ptr[16 + Offset], parser->rx_buf_ptr[15 + Offset] };
   \   000000C4   01FD               MOVW    R31:R30, R27:R26
   \   000000C6   8126               LDD     R18, Z+6
   \   000000C8   8137               LDD     R19, Z+7
   \   000000CA   0F20               ADD     R18, R16
   \   000000CC   1F31               ADC     R19, R17
   \   000000CE   01F9               MOVW    R31:R30, R19:R18
   \   000000D0   8922               LDD     R18, Z+18
   \   000000D2   8328               ST      Y, R18
   \   000000D4   01FD               MOVW    R31:R30, R27:R26
   \   000000D6   8126               LDD     R18, Z+6
   \   000000D8   8137               LDD     R19, Z+7
   \   000000DA   0F20               ADD     R18, R16
   \   000000DC   1F31               ADC     R19, R17
   \   000000DE   01F9               MOVW    R31:R30, R19:R18
   \   000000E0   8921               LDD     R18, Z+17
   \   000000E2   8329               STD     Y+1, R18
   \   000000E4   01FD               MOVW    R31:R30, R27:R26
   \   000000E6   8126               LDD     R18, Z+6
   \   000000E8   8137               LDD     R19, Z+7
   \   000000EA   0F20               ADD     R18, R16
   \   000000EC   1F31               ADC     R19, R17
   \   000000EE   01F9               MOVW    R31:R30, R19:R18
   \   000000F0   8920               LDD     R18, Z+16
   \   000000F2   832A               STD     Y+2, R18
   \   000000F4   01FD               MOVW    R31:R30, R27:R26
   \   000000F6   8126               LDD     R18, Z+6
   \   000000F8   8137               LDD     R19, Z+7
   \   000000FA   0F20               ADD     R18, R16
   \   000000FC   1F31               ADC     R19, R17
   \   000000FE   01F9               MOVW    R31:R30, R19:R18
   \   00000100   8527               LDD     R18, Z+15
   \   00000102   832B               STD     Y+3, R18
    170          			float *ProsVal              = (float *)FloatBuf;
   \   00000104   019E               MOVW    R19:R18, R29:R28
    171          			parser->UnitId[i] = parser->rx_buf_ptr[14 + Offset];
   \   00000106   01FD               MOVW    R31:R30, R27:R26
   \   00000108   8146               LDD     R20, Z+6
   \   0000010A   8157               LDD     R21, Z+7
   \   0000010C   0F40               ADD     R20, R16
   \   0000010E   1F51               ADC     R21, R17
   \   00000110   01FA               MOVW    R31:R30, R21:R20
   \   00000112   8546               LDD     R20, Z+14
   \   00000114   01FD               MOVW    R31:R30, R27:R26
   \   00000116   0FE8               ADD     R30, R24
   \   00000118   1FF9               ADC     R31, R25
   \   0000011A   A340               STD     Z+32, R20
    172          			parser->ProsData[i] = *ProsVal;
   \   0000011C   01F9               MOVW    R31:R30, R19:R18
   \   0000011E   8140               LD      R20, Z
   \   00000120   8151               LDD     R21, Z+1
   \   00000122   8162               LDD     R22, Z+2
   \   00000124   8173               LDD     R23, Z+3
   \   00000126   019C               MOVW    R19:R18, R25:R24
   \   00000128   0F22               LSL     R18
   \   0000012A   1F33               ROL     R19
   \   0000012C   0F22               LSL     R18
   \   0000012E   1F33               ROL     R19
   \   00000130   01FD               MOVW    R31:R30, R27:R26
   \   00000132   0FE2               ADD     R30, R18
   \   00000134   1FF3               ADC     R31, R19
   \   00000136   A344               STD     Z+36, R20
   \   00000138   A355               STD     Z+37, R21
   \   0000013A   A366               STD     Z+38, R22
   \   0000013C   A377               STD     Z+39, R23
    173          		}
   \   0000013E   9601               ADIW    R25:R24, 1
   \   00000140   CFB7               RJMP    ??hart_msg_state_start_char_6
    174          	} else {
    175          		HART_PARSER_ERR(parser, HartMessageErrorCode_UnknownStartDelimeter);
   \                     ??hart_msg_state_start_char_5:
   \   00000142   01FD               MOVW    R31:R30, R27:R26
   \   00000144   E006               LDI     R16, 6
   \   00000146   AB04               STD     Z+52, R16
   \   00000148   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   0000014A   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   0000014C   018D               MOVW    R17:R16, R27:R26
   \   0000014E   ....               RCALL   hart_msg_parser_move_state
   \   00000150   E001               LDI     R16, 1
   \   00000152   C00C               RJMP    ??hart_msg_state_start_char_1
    176          	}
    177          
    178          	parser->state_dependent_cnt   = 0;
   \                     ??hart_msg_state_start_char_3:
   \   00000154   01FD               MOVW    R31:R30, R27:R26
   \   00000156   E000               LDI     R16, 0
   \   00000158   8700               STD     Z+8, R16
   \   0000015A   E000               LDI     R16, 0
   \   0000015C   8701               STD     Z+9, R16
    179          
    180          	//
    181          	// XXX FIXME burst from slave is not yet implemented
    182          	//
    183          
    184          	//
    185          	// XXX FIXME EXP is not yet implemented
    186          	//
    187          	parser->exp_cnt               = 0;
   \   0000015E   01FD               MOVW    R31:R30, R27:R26
   \   00000160   E000               LDI     R16, 0
   \   00000162   8702               STD     Z+10, R16
    188          
    189          	return hart_msg_parser_move_state(parser, hart_msg_state_address);
   \   00000164   ....               LDI     R18, LOW(hart_msg_state_address/2)
   \   00000166   ....               LDI     R19, (hart_msg_state_address/2) >> 8
   \   00000168   018D               MOVW    R17:R16, R27:R26
   \   0000016A   ....               RCALL   hart_msg_parser_move_state
   \                     ??hart_msg_state_start_char_1:
   \   0000016C   9624               ADIW    R29:R28, 4
   \   0000016E   E0E8               LDI     R30, 8
   \   00000170   ........           JMP     ?EPILOGUE_B8_L09
    190          }
    191          

   \                                 In  segment CODE, align 2, keep-with-next
    192          static HartMessageParsingStatus
    193          hart_msg_state_address(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_address:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2E12               MOV     R1, R18
    194          	if (parser->state_dependent_cnt == 0) {
   \   00000008   01FD               MOVW    R31:R30, R27:R26
   \   0000000A   8500               LDD     R16, Z+8
   \   0000000C   8511               LDD     R17, Z+9
   \   0000000E   2B01               OR      R16, R17
   \   00000010   F459               BRNE    ??hart_msg_state_address_0
    195          		HART_MARK_DPTR(parser, parser->addr_ptr);
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   8106               LDD     R16, Z+6
   \   00000016   8117               LDD     R17, Z+7
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8122               LDD     R18, Z+2
   \   0000001C   8133               LDD     R19, Z+3
   \   0000001E   0F02               ADD     R16, R18
   \   00000020   1F13               ADC     R17, R19
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   8B02               STD     Z+18, R16
   \   00000026   8B13               STD     Z+19, R17
    196          	}
    197          
    198          	HART_PUT_RX_DATA(parser, rxb);
   \                     ??hart_msg_state_address_0:
   \   00000028   2D21               MOV     R18, R1
   \   0000002A   018D               MOVW    R17:R16, R27:R26
   \   0000002C   ....               RCALL   hart_msg_put_rx_data
   \   0000002E   2B01               OR      R16, R17
   \   00000030   F431               BRNE    ??hart_msg_state_address_1
   \   00000032   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   00000034   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   00000036   018D               MOVW    R17:R16, R27:R26
   \   00000038   ....               RCALL   hart_msg_parser_move_state
   \   0000003A   E001               LDI     R16, 1
   \   0000003C   C02D               RJMP    ??hart_msg_state_address_2
    199          
    200          	parser->state_dependent_cnt++;
   \                     ??hart_msg_state_address_1:
   \   0000003E   01FD               MOVW    R31:R30, R27:R26
   \   00000040   8500               LDD     R16, Z+8
   \   00000042   8511               LDD     R17, Z+9
   \   00000044   5F0F               SUBI    R16, 255
   \   00000046   4F1F               SBCI    R17, 255
   \   00000048   8700               STD     Z+8, R16
   \   0000004A   8711               STD     Z+9, R17
    201          
    202          	switch (parser->address_fmt) {
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8506               LDD     R16, Z+14
   \   00000050   5000               SUBI    R16, 0
   \   00000052   F049               BREQ    ??hart_msg_state_address_3
   \   00000054   950A               DEC     R16
   \   00000056   F4F9               BRNE    ??hart_msg_state_address_4
    203          	case HartMessageAddressFormat_Long:
    204          		if (parser->state_dependent_cnt != 5) {
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   8580               LDD     R24, Z+8
   \   0000005C   8591               LDD     R25, Z+9
   \   0000005E   9705               SBIW    R25:R24, 5
   \   00000060   F011               BREQ    ??hart_msg_state_address_3
    205          			return HartMessageParsing_Pass;
   \   00000062   E000               LDI     R16, 0
   \   00000064   C019               RJMP    ??hart_msg_state_address_2
    206          		}
    207          
    208          		//
    209          		// fall through
    210          		//
    211          	case HartMessageAddressFormat_Short:
    212          		if (parser->exp_cnt == 0) {
   \                     ??hart_msg_state_address_3:
   \   00000066   01FD               MOVW    R31:R30, R27:R26
   \   00000068   8502               LDD     R16, Z+10
   \   0000006A   2300               TST     R16
   \   0000006C   F451               BRNE    ??hart_msg_state_address_5
    213          			parser->state_dependent_cnt = 0;
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   E000               LDI     R16, 0
   \   00000072   8700               STD     Z+8, R16
   \   00000074   E000               LDI     R16, 0
   \   00000076   8701               STD     Z+9, R16
    214          			return hart_msg_parser_move_state(parser, hart_msg_state_command);
   \   00000078   ....               LDI     R18, LOW(hart_msg_state_command/2)
   \   0000007A   ....               LDI     R19, (hart_msg_state_command/2) >> 8
   \   0000007C   018D               MOVW    R17:R16, R27:R26
   \   0000007E   ....               RCALL   hart_msg_parser_move_state
   \   00000080   C00B               RJMP    ??hart_msg_state_address_2
    215          		} else {
    216          			parser->state_dependent_cnt = 0;
   \                     ??hart_msg_state_address_5:
   \   00000082   01FD               MOVW    R31:R30, R27:R26
   \   00000084   E000               LDI     R16, 0
   \   00000086   8700               STD     Z+8, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8701               STD     Z+9, R16
    217          			return hart_msg_parser_move_state(parser, hart_msg_state_expansion);
   \   0000008C   ....               LDI     R18, LOW(hart_msg_state_expansion/2)
   \   0000008E   ....               LDI     R19, (hart_msg_state_expansion/2) >> 8
   \   00000090   018D               MOVW    R17:R16, R27:R26
   \   00000092   ....               RCALL   hart_msg_parser_move_state
   \   00000094   C001               RJMP    ??hart_msg_state_address_2
    218          		}
    219          		break;
    220          	}
    221          
    222          	return HartMessageParsing_Pass;
   \                     ??hart_msg_state_address_4:
   \   00000096   E000               LDI     R16, 0
   \                     ??hart_msg_state_address_2:
   \   00000098   E0E4               LDI     R30, 4
   \   0000009A   ........           JMP     ?EPILOGUE_B4_L09
    223          }
    224          

   \                                 In  segment CODE, align 2, keep-with-next
    225          static HartMessageParsingStatus
    226          hart_msg_state_expansion(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_expansion:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002   01D8               MOVW    R27:R26, R17:R16
   \   00000004   2E12               MOV     R1, R18
    227          	if (parser->state_dependent_cnt == 0) {
   \   00000006   01FD               MOVW    R31:R30, R27:R26
   \   00000008   8500               LDD     R16, Z+8
   \   0000000A   8511               LDD     R17, Z+9
   \   0000000C   2B01               OR      R16, R17
   \   0000000E   F459               BRNE    ??hart_msg_state_expansion_0
    228          		HART_MARK_DPTR(parser, parser->exp_ptr);
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   8106               LDD     R16, Z+6
   \   00000014   8117               LDD     R17, Z+7
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8122               LDD     R18, Z+2
   \   0000001A   8133               LDD     R19, Z+3
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   8B04               STD     Z+20, R16
   \   00000024   8B15               STD     Z+21, R17
    229          	}
    230          
    231          	HART_PUT_RX_DATA(parser, rxb);
   \                     ??hart_msg_state_expansion_0:
   \   00000026   2D21               MOV     R18, R1
   \   00000028   018D               MOVW    R17:R16, R27:R26
   \   0000002A   ....               RCALL   hart_msg_put_rx_data
   \   0000002C   2B01               OR      R16, R17
   \   0000002E   F431               BRNE    ??hart_msg_state_expansion_1
   \   00000030   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   00000032   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   00000034   018D               MOVW    R17:R16, R27:R26
   \   00000036   ....               RCALL   hart_msg_parser_move_state
   \   00000038   E001               LDI     R16, 1
   \   0000003A   C016               RJMP    ??hart_msg_state_expansion_2
    232          
    233          	parser->state_dependent_cnt++;
   \                     ??hart_msg_state_expansion_1:
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   8500               LDD     R16, Z+8
   \   00000040   8511               LDD     R17, Z+9
   \   00000042   5F0F               SUBI    R16, 255
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   8700               STD     Z+8, R16
   \   00000048   8711               STD     Z+9, R17
    234          
    235          	if (parser->state_dependent_cnt == parser->exp_cnt) {
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8520               LDD     R18, Z+8
   \   0000004E   8531               LDD     R19, Z+9
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   8502               LDD     R16, Z+10
   \   00000054   E010               LDI     R17, 0
   \   00000056   1720               CP      R18, R16
   \   00000058   0731               CPC     R19, R17
   \   0000005A   F429               BRNE    ??hart_msg_state_expansion_3
    236          		return hart_msg_parser_move_state(parser, hart_msg_state_command);
   \   0000005C   ....               LDI     R18, LOW(hart_msg_state_command/2)
   \   0000005E   ....               LDI     R19, (hart_msg_state_command/2) >> 8
   \   00000060   018D               MOVW    R17:R16, R27:R26
   \   00000062   ....               RCALL   hart_msg_parser_move_state
   \   00000064   C001               RJMP    ??hart_msg_state_expansion_2
    237          	}
    238          
    239          	return HartMessageParsing_Pass;
   \                     ??hart_msg_state_expansion_3:
   \   00000066   E000               LDI     R16, 0
   \                     ??hart_msg_state_expansion_2:
   \   00000068   01D1               MOVW    R27:R26, R3:R2
   \   0000006A   9508               RET
    240          }
    241          

   \                                 In  segment CODE, align 2, keep-with-next
    242          static HartMessageParsingStatus
    243          hart_msg_state_command(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_command:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002   01D8               MOVW    R27:R26, R17:R16
   \   00000004   2E12               MOV     R1, R18
    244          	HART_MARK_DPTR(parser, parser->cmd_ptr);
   \   00000006   01FD               MOVW    R31:R30, R27:R26
   \   00000008   8106               LDD     R16, Z+6
   \   0000000A   8117               LDD     R17, Z+7
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8122               LDD     R18, Z+2
   \   00000010   8133               LDD     R19, Z+3
   \   00000012   0F02               ADD     R16, R18
   \   00000014   1F13               ADC     R17, R19
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8B06               STD     Z+22, R16
   \   0000001A   8B17               STD     Z+23, R17
    245          
    246          	HART_PUT_RX_DATA(parser, rxb);
   \   0000001C   2D21               MOV     R18, R1
   \   0000001E   018D               MOVW    R17:R16, R27:R26
   \   00000020   ....               RCALL   hart_msg_put_rx_data
   \   00000022   2B01               OR      R16, R17
   \   00000024   F431               BRNE    ??hart_msg_state_command_0
   \   00000026   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   00000028   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   0000002A   018D               MOVW    R17:R16, R27:R26
   \   0000002C   ....               RCALL   hart_msg_parser_move_state
   \   0000002E   E001               LDI     R16, 1
   \   00000030   C004               RJMP    ??hart_msg_state_command_1
    247          
    248          	return hart_msg_parser_move_state(parser, hart_msg_state_bytecount);
   \                     ??hart_msg_state_command_0:
   \   00000032   ....               LDI     R18, LOW(hart_msg_state_bytecount/2)
   \   00000034   ....               LDI     R19, (hart_msg_state_bytecount/2) >> 8
   \   00000036   018D               MOVW    R17:R16, R27:R26
   \   00000038   ....               RCALL   hart_msg_parser_move_state
   \                     ??hart_msg_state_command_1:
   \   0000003A   01D1               MOVW    R27:R26, R3:R2
   \   0000003C   9508               RET
    249          }
    250          

   \                                 In  segment CODE, align 2, keep-with-next
    251          static HartMessageParsingStatus
    252          hart_msg_state_bytecount(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_bytecount:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
    253          	if (parser->msg_type == HartMessageType_SlaveToMaster && rxb < 2) {
   \   00000008   01FD               MOVW    R31:R30, R27:R26
   \   0000000A   8507               LDD     R16, Z+15
   \   0000000C   3001               CPI     R16, 1
   \   0000000E   F459               BRNE    ??hart_msg_state_bytecount_0
   \   00000010   3082               CPI     R24, 2
   \   00000012   F448               BRCC    ??hart_msg_state_bytecount_0
    254          		HART_PARSER_ERR(parser, HartMessageErrorCode_ByteCountInSlaveResponse);
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   E002               LDI     R16, 2
   \   00000018   AB04               STD     Z+52, R16
   \   0000001A   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   0000001C   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   0000001E   018D               MOVW    R17:R16, R27:R26
   \   00000020   ....               RCALL   hart_msg_parser_move_state
   \   00000022   E001               LDI     R16, 1
   \   00000024   C03E               RJMP    ??hart_msg_state_bytecount_1
    255          	}
    256          
    257          	parser->byte_cnt = rxb;
   \                     ??hart_msg_state_bytecount_0:
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8783               STD     Z+11, R24
    258          
    259          	HART_PUT_RX_DATA(parser, rxb);
   \   0000002A   2F28               MOV     R18, R24
   \   0000002C   018D               MOVW    R17:R16, R27:R26
   \   0000002E   ....               RCALL   hart_msg_put_rx_data
   \   00000030   2B01               OR      R16, R17
   \   00000032   F431               BRNE    ??hart_msg_state_bytecount_2
   \   00000034   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   00000036   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   00000038   018D               MOVW    R17:R16, R27:R26
   \   0000003A   ....               RCALL   hart_msg_parser_move_state
   \   0000003C   E001               LDI     R16, 1
   \   0000003E   C031               RJMP    ??hart_msg_state_bytecount_1
    260          
    261          	//
    262          	// response from slave
    263          	// has status word
    264          	//
    265          	if (parser->msg_type == HartMessageType_SlaveToMaster) {
   \                     ??hart_msg_state_bytecount_2:
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8507               LDD     R16, Z+15
   \   00000044   3001               CPI     R16, 1
   \   00000046   F451               BRNE    ??hart_msg_state_bytecount_3
    266          		parser->state_dependent_cnt = 0;
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   8700               STD     Z+8, R16
   \   0000004E   E000               LDI     R16, 0
   \   00000050   8701               STD     Z+9, R16
    267          		return hart_msg_parser_move_state(parser, hart_msg_state_status);
   \   00000052   ....               LDI     R18, LOW(hart_msg_state_status/2)
   \   00000054   ....               LDI     R19, (hart_msg_state_status/2) >> 8
   \   00000056   018D               MOVW    R17:R16, R27:R26
   \   00000058   ....               RCALL   hart_msg_parser_move_state
   \   0000005A   C023               RJMP    ??hart_msg_state_bytecount_1
    268          	}
    269          
    270          	//
    271          	// either from master or burst from slave
    272          	// no status word
    273          	//
    274          	parser->status_ptr  = NULL;
   \                     ??hart_msg_state_bytecount_3:
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   E000               LDI     R16, 0
   \   00000060   8F00               STD     Z+24, R16
   \   00000062   E000               LDI     R16, 0
   \   00000064   8F01               STD     Z+25, R16
    275          	if (parser->byte_cnt == 0) {
   \   00000066   01FD               MOVW    R31:R30, R27:R26
   \   00000068   8503               LDD     R16, Z+11
   \   0000006A   2300               TST     R16
   \   0000006C   F469               BRNE    ??hart_msg_state_bytecount_4
    276          		// no data
    277          		parser->data_cnt    = 0;
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   E000               LDI     R16, 0
   \   00000072   8704               STD     Z+12, R16
    278          		parser->data_ptr    = NULL;
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   E000               LDI     R16, 0
   \   00000078   8F02               STD     Z+26, R16
   \   0000007A   E000               LDI     R16, 0
   \   0000007C   8F03               STD     Z+27, R16
    279          		return hart_msg_parser_move_state(parser, hart_msg_state_checksum);
   \   0000007E   ....               LDI     R18, LOW(hart_msg_state_checksum/2)
   \   00000080   ....               LDI     R19, (hart_msg_state_checksum/2) >> 8
   \   00000082   018D               MOVW    R17:R16, R27:R26
   \   00000084   ....               RCALL   hart_msg_parser_move_state
   \   00000086   C00D               RJMP    ??hart_msg_state_bytecount_1
    280          	}
    281          
    282          	// some data
    283          	parser->data_cnt = parser->byte_cnt;
   \                     ??hart_msg_state_bytecount_4:
   \   00000088   01FD               MOVW    R31:R30, R27:R26
   \   0000008A   8503               LDD     R16, Z+11
   \   0000008C   01FD               MOVW    R31:R30, R27:R26
   \   0000008E   8704               STD     Z+12, R16
    284          	parser->state_dependent_cnt = 0;
   \   00000090   01FD               MOVW    R31:R30, R27:R26
   \   00000092   E000               LDI     R16, 0
   \   00000094   8700               STD     Z+8, R16
   \   00000096   E000               LDI     R16, 0
   \   00000098   8701               STD     Z+9, R16
    285          	return hart_msg_parser_move_state(parser, hart_msg_state_data);
   \   0000009A   ....               LDI     R18, LOW(hart_msg_state_data/2)
   \   0000009C   ....               LDI     R19, (hart_msg_state_data/2) >> 8
   \   0000009E   018D               MOVW    R17:R16, R27:R26
   \   000000A0   ....               RCALL   hart_msg_parser_move_state
   \                     ??hart_msg_state_bytecount_1:
   \   000000A2   E0E4               LDI     R30, 4
   \   000000A4   ........           JMP     ?EPILOGUE_B4_L09
    286          }
    287          

   \                                 In  segment CODE, align 2, keep-with-next
    288          static HartMessageParsingStatus
    289          hart_msg_state_status(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_status:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2E12               MOV     R1, R18
    290          	if (parser->state_dependent_cnt == 0) {
   \   00000008   01FD               MOVW    R31:R30, R27:R26
   \   0000000A   8500               LDD     R16, Z+8
   \   0000000C   8511               LDD     R17, Z+9
   \   0000000E   2B01               OR      R16, R17
   \   00000010   F459               BRNE    ??hart_msg_state_status_0
    291          		HART_MARK_DPTR(parser, parser->status_ptr);
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   8106               LDD     R16, Z+6
   \   00000016   8117               LDD     R17, Z+7
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8122               LDD     R18, Z+2
   \   0000001C   8133               LDD     R19, Z+3
   \   0000001E   0F02               ADD     R16, R18
   \   00000020   1F13               ADC     R17, R19
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   8F00               STD     Z+24, R16
   \   00000026   8F11               STD     Z+25, R17
    292          	}
    293          
    294          	HART_PUT_RX_DATA(parser, rxb);
   \                     ??hart_msg_state_status_0:
   \   00000028   2D21               MOV     R18, R1
   \   0000002A   018D               MOVW    R17:R16, R27:R26
   \   0000002C   ....               RCALL   hart_msg_put_rx_data
   \   0000002E   2B01               OR      R16, R17
   \   00000030   F431               BRNE    ??hart_msg_state_status_1
   \   00000032   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   00000034   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   00000036   018D               MOVW    R17:R16, R27:R26
   \   00000038   ....               RCALL   hart_msg_parser_move_state
   \   0000003A   E001               LDI     R16, 1
   \   0000003C   C02D               RJMP    ??hart_msg_state_status_2
    295          
    296          	parser->state_dependent_cnt++;
   \                     ??hart_msg_state_status_1:
   \   0000003E   01FD               MOVW    R31:R30, R27:R26
   \   00000040   8500               LDD     R16, Z+8
   \   00000042   8511               LDD     R17, Z+9
   \   00000044   5F0F               SUBI    R16, 255
   \   00000046   4F1F               SBCI    R17, 255
   \   00000048   8700               STD     Z+8, R16
   \   0000004A   8711               STD     Z+9, R17
    297          
    298          	if (parser->state_dependent_cnt == 2) {
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8580               LDD     R24, Z+8
   \   00000050   8591               LDD     R25, Z+9
   \   00000052   9702               SBIW    R25:R24, 2
   \   00000054   F501               BRNE    ??hart_msg_state_status_3
    299          		// no data
    300          		if (parser->byte_cnt == 2) {
   \   00000056   01FD               MOVW    R31:R30, R27:R26
   \   00000058   8503               LDD     R16, Z+11
   \   0000005A   3002               CPI     R16, 2
   \   0000005C   F469               BRNE    ??hart_msg_state_status_4
    301          			parser->data_cnt    = 0;
   \   0000005E   01FD               MOVW    R31:R30, R27:R26
   \   00000060   E000               LDI     R16, 0
   \   00000062   8704               STD     Z+12, R16
    302          			parser->data_ptr    = NULL;
   \   00000064   01FD               MOVW    R31:R30, R27:R26
   \   00000066   E000               LDI     R16, 0
   \   00000068   8F02               STD     Z+26, R16
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   8F03               STD     Z+27, R16
    303          			return hart_msg_parser_move_state(parser, hart_msg_state_checksum);
   \   0000006E   ....               LDI     R18, LOW(hart_msg_state_checksum/2)
   \   00000070   ....               LDI     R19, (hart_msg_state_checksum/2) >> 8
   \   00000072   018D               MOVW    R17:R16, R27:R26
   \   00000074   ....               RCALL   hart_msg_parser_move_state
   \   00000076   C010               RJMP    ??hart_msg_state_status_2
    304          		}
    305          
    306          		// some data
    307          		parser->data_cnt = parser->byte_cnt - 2;
   \                     ??hart_msg_state_status_4:
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   8503               LDD     R16, Z+11
   \   0000007C   5002               SUBI    R16, 2
   \   0000007E   01FD               MOVW    R31:R30, R27:R26
   \   00000080   8704               STD     Z+12, R16
    308          		parser->state_dependent_cnt = 0;
   \   00000082   01FD               MOVW    R31:R30, R27:R26
   \   00000084   E000               LDI     R16, 0
   \   00000086   8700               STD     Z+8, R16
   \   00000088   E000               LDI     R16, 0
   \   0000008A   8701               STD     Z+9, R16
    309          		return hart_msg_parser_move_state(parser, hart_msg_state_data);
   \   0000008C   ....               LDI     R18, LOW(hart_msg_state_data/2)
   \   0000008E   ....               LDI     R19, (hart_msg_state_data/2) >> 8
   \   00000090   018D               MOVW    R17:R16, R27:R26
   \   00000092   ....               RCALL   hart_msg_parser_move_state
   \   00000094   C001               RJMP    ??hart_msg_state_status_2
    310          	}
    311          	return HartMessageParsing_Pass;
   \                     ??hart_msg_state_status_3:
   \   00000096   E000               LDI     R16, 0
   \                     ??hart_msg_state_status_2:
   \   00000098   E0E4               LDI     R30, 4
   \   0000009A   ........           JMP     ?EPILOGUE_B4_L09
    312          }
    313          

   \                                 In  segment CODE, align 2, keep-with-next
    314          static HartMessageParsingStatus
    315          hart_msg_state_data(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_data:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002   01D8               MOVW    R27:R26, R17:R16
   \   00000004   2E12               MOV     R1, R18
    316          	if (parser->state_dependent_cnt == 0) {
   \   00000006   01FD               MOVW    R31:R30, R27:R26
   \   00000008   8500               LDD     R16, Z+8
   \   0000000A   8511               LDD     R17, Z+9
   \   0000000C   2B01               OR      R16, R17
   \   0000000E   F459               BRNE    ??hart_msg_state_data_0
    317          		HART_MARK_DPTR(parser, parser->data_ptr);
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   8106               LDD     R16, Z+6
   \   00000014   8117               LDD     R17, Z+7
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8122               LDD     R18, Z+2
   \   0000001A   8133               LDD     R19, Z+3
   \   0000001C   0F02               ADD     R16, R18
   \   0000001E   1F13               ADC     R17, R19
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   8F02               STD     Z+26, R16
   \   00000024   8F13               STD     Z+27, R17
    318          	}
    319          
    320          	HART_PUT_RX_DATA(parser, rxb);
   \                     ??hart_msg_state_data_0:
   \   00000026   2D21               MOV     R18, R1
   \   00000028   018D               MOVW    R17:R16, R27:R26
   \   0000002A   ....               RCALL   hart_msg_put_rx_data
   \   0000002C   2B01               OR      R16, R17
   \   0000002E   F431               BRNE    ??hart_msg_state_data_1
   \   00000030   ....               LDI     R18, LOW(hart_msg_state_blackhole/2)
   \   00000032   ....               LDI     R19, (hart_msg_state_blackhole/2) >> 8
   \   00000034   018D               MOVW    R17:R16, R27:R26
   \   00000036   ....               RCALL   hart_msg_parser_move_state
   \   00000038   E001               LDI     R16, 1
   \   0000003A   C016               RJMP    ??hart_msg_state_data_2
    321          
    322          	parser->state_dependent_cnt++;
   \                     ??hart_msg_state_data_1:
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   8500               LDD     R16, Z+8
   \   00000040   8511               LDD     R17, Z+9
   \   00000042   5F0F               SUBI    R16, 255
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   8700               STD     Z+8, R16
   \   00000048   8711               STD     Z+9, R17
    323          	if (parser->state_dependent_cnt == parser->data_cnt) {
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8520               LDD     R18, Z+8
   \   0000004E   8531               LDD     R19, Z+9
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   8504               LDD     R16, Z+12
   \   00000054   E010               LDI     R17, 0
   \   00000056   1720               CP      R18, R16
   \   00000058   0731               CPC     R19, R17
   \   0000005A   F429               BRNE    ??hart_msg_state_data_3
    324          		return hart_msg_parser_move_state(parser, hart_msg_state_checksum);
   \   0000005C   ....               LDI     R18, LOW(hart_msg_state_checksum/2)
   \   0000005E   ....               LDI     R19, (hart_msg_state_checksum/2) >> 8
   \   00000060   018D               MOVW    R17:R16, R27:R26
   \   00000062   ....               RCALL   hart_msg_parser_move_state
   \   00000064   C001               RJMP    ??hart_msg_state_data_2
    325          	}
    326          
    327          	return HartMessageParsing_Pass;
   \                     ??hart_msg_state_data_3:
   \   00000066   E000               LDI     R16, 0
   \                     ??hart_msg_state_data_2:
   \   00000068   01D1               MOVW    R27:R26, R3:R2
   \   0000006A   9508               RET
    328          }
    329          

   \                                 In  segment CODE, align 2, keep-with-next
    330          static HartMessageParsingStatus
    331          hart_msg_state_checksum(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_checksum:
   \   00000000   01F8               MOVW    R31:R30, R17:R16
    332          	parser->csum = rxb;
   \   00000002   8725               STD     Z+13, R18
    333          	return HartMessageParsing_Complete;
   \   00000004   E002               LDI     R16, 2
   \   00000006   9508               RET
    334          }
    335          

   \                                 In  segment CODE, align 2, keep-with-next
    336          static HartMessageParsingStatus
    337          hart_msg_state_blackhole(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_state_blackhole:
   \   00000000   01A8               MOVW    R21:R20, R17:R16
    338          	return HartMessageParsing_Pass;
   \   00000002   E000               LDI     R16, 0
   \   00000004   9508               RET
    339          }
    340          
    341          ////////////////////////////////////////////////////////////////////////////////
    342          //
    343          // parser public interfaces
    344          //
    345          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    346          void
    347          hart_msg_parser_init(HartMessageParser *parser, volatile hart_data_t *rx_buf, uint16_t rx_buf_size) {
   \                     hart_msg_parser_init:
   \   00000000   01B8               MOVW    R23:R22, R17:R16
   \   00000002   0109               MOVW    R1:R0, R19:R18
   \   00000004   011A               MOVW    R3:R2, R21:R20
    348          	parser->rx_buf_ptr    = rx_buf;
   \   00000006   01FB               MOVW    R31:R30, R23:R22
   \   00000008   8206               STD     Z+6, R0
   \   0000000A   8217               STD     Z+7, R1
    349          	parser->rx_buf_size   = rx_buf_size;
   \   0000000C   01FB               MOVW    R31:R30, R23:R22
   \   0000000E   8224               STD     Z+4, R2
   \   00000010   8235               STD     Z+5, R3
    350          
    351          	hart_msg_parser_reset(parser);
   \   00000012   018B               MOVW    R17:R16, R23:R22
   \   00000014   ....               RCALL   hart_msg_parser_reset
    352          }
   \   00000016   9508               RET
    353          
    354          

   \                                 In  segment CODE, align 2, keep-with-next
    355          HartMessageParsingStatus
    356          hart_msg_parser_handle_byte(HartMessageParser *parser, hart_data_t rxb) {
   \                     hart_msg_parser_handle_byte:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2FA2               MOV     R26, R18
    357          	return parser->parsing_state(parser, rxb);
   \   00000008   2F2A               MOV     R18, R26
   \   0000000A   018C               MOVW    R17:R16, R25:R24
   \   0000000C   01FC               MOVW    R31:R30, R25:R24
   \   0000000E   8140               LD      R20, Z
   \   00000010   8151               LDD     R21, Z+1
   \   00000012   01FA               MOVW    R31:R30, R21:R20
   \   00000014   9509               ICALL
   \   00000016   E0E3               LDI     R30, 3
   \   00000018   ........           JMP     ?EPILOGUE_B3_L09
    358          }
    359          

   \                                 In  segment CODE, align 2, keep-with-next
    360          void
    361          hart_msg_parser_reset(HartMessageParser *parser) {
   \                     hart_msg_parser_reset:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002   01D8               MOVW    R27:R26, R17:R16
    362          	parser->start_ptr             = NULL;
   \   00000004   01FD               MOVW    R31:R30, R27:R26
   \   00000006   E000               LDI     R16, 0
   \   00000008   8B00               STD     Z+16, R16
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   8B01               STD     Z+17, R16
    363          	parser->addr_ptr              = NULL;
   \   0000000E   01FD               MOVW    R31:R30, R27:R26
   \   00000010   E000               LDI     R16, 0
   \   00000012   8B02               STD     Z+18, R16
   \   00000014   E000               LDI     R16, 0
   \   00000016   8B03               STD     Z+19, R16
    364          	parser->exp_ptr               = NULL;
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   8B04               STD     Z+20, R16
   \   0000001E   E000               LDI     R16, 0
   \   00000020   8B05               STD     Z+21, R16
    365          	parser->cmd_ptr               = NULL;
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   E000               LDI     R16, 0
   \   00000026   8B06               STD     Z+22, R16
   \   00000028   E000               LDI     R16, 0
   \   0000002A   8B07               STD     Z+23, R16
    366          	parser->status_ptr            = NULL;
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   E000               LDI     R16, 0
   \   00000030   8F00               STD     Z+24, R16
   \   00000032   E000               LDI     R16, 0
   \   00000034   8F01               STD     Z+25, R16
    367          	parser->data_ptr              = NULL;
   \   00000036   01FD               MOVW    R31:R30, R27:R26
   \   00000038   E000               LDI     R16, 0
   \   0000003A   8F02               STD     Z+26, R16
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   8F03               STD     Z+27, R16
    368          
    369          	parser->state_dependent_cnt   = 0;
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   E000               LDI     R16, 0
   \   00000044   8700               STD     Z+8, R16
   \   00000046   E000               LDI     R16, 0
   \   00000048   8701               STD     Z+9, R16
    370          	parser->exp_cnt               = 0;
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   8702               STD     Z+10, R16
    371          	parser->byte_cnt              = 0;
   \   00000050   01FD               MOVW    R31:R30, R27:R26
   \   00000052   E000               LDI     R16, 0
   \   00000054   8703               STD     Z+11, R16
    372          	parser->data_cnt              = 0;
   \   00000056   01FD               MOVW    R31:R30, R27:R26
   \   00000058   E000               LDI     R16, 0
   \   0000005A   8704               STD     Z+12, R16
    373          	parser->csum                  = 0;
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   E000               LDI     R16, 0
   \   00000060   8705               STD     Z+13, R16
    374          	parser->address_fmt           = HartMessageAddressFormat_Short;
   \   00000062   01FD               MOVW    R31:R30, R27:R26
   \   00000064   E000               LDI     R16, 0
   \   00000066   8706               STD     Z+14, R16
    375          	parser->msg_type              = HartMessageType_SlaveToMaster;
   \   00000068   01FD               MOVW    R31:R30, R27:R26
   \   0000006A   E001               LDI     R16, 1
   \   0000006C   8707               STD     Z+15, R16
    376          
    377          	parser->rx_ndx                = 0;
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   E000               LDI     R16, 0
   \   00000072   E010               LDI     R17, 0
   \   00000074   8302               STD     Z+2, R16
   \   00000076   8313               STD     Z+3, R17
    378          
    379          	parser->err_msg               = HartMessageErrorCode_OK;
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   E000               LDI     R16, 0
   \   0000007C   AB04               STD     Z+52, R16
    380          
    381          	hart_msg_parser_move_state(parser, hart_msg_state_begin);
   \   0000007E   ....               LDI     R18, LOW(hart_msg_state_begin/2)
   \   00000080   ....               LDI     R19, (hart_msg_state_begin/2) >> 8
   \   00000082   018D               MOVW    R17:R16, R27:R26
   \   00000084   ....               RCALL   hart_msg_parser_move_state
    382          }
   \   00000086   01DA               MOVW    R27:R26, R21:R20
   \   00000088   9508               RET
    383          

   \                                 In  segment CODE, align 2, keep-with-next
    384          uint8_t hart_msg_calc_csum(const uint8_t *buf, uint16_t len) {
   \                     hart_msg_calc_csum:
   \   00000000   01BC               MOVW    R23:R22, R25:R24
   \   00000002   01A8               MOVW    R21:R20, R17:R16
    385          	uint8_t     csum = 0;
   \   00000004   E000               LDI     R16, 0
    386          	for (uint16_t i = 0; i < len; i++) {
   \   00000006   E080               LDI     R24, 0
   \   00000008   E090               LDI     R25, 0
   \                     ??hart_msg_calc_csum_0:
   \   0000000A   1782               CP      R24, R18
   \   0000000C   0793               CPC     R25, R19
   \   0000000E   F438               BRCC    ??hart_msg_calc_csum_1
    387          		csum = csum ^ buf[i];
   \   00000010   01FA               MOVW    R31:R30, R21:R20
   \   00000012   0FE8               ADD     R30, R24
   \   00000014   1FF9               ADC     R31, R25
   \   00000016   8110               LD      R17, Z
   \   00000018   2701               EOR     R16, R17
    388          	}
   \   0000001A   9601               ADIW    R25:R24, 1
   \   0000001C   CFF6               RJMP    ??hart_msg_calc_csum_0
    389          	return csum;
   \                     ??hart_msg_calc_csum_1:
   \   0000001E   01CB               MOVW    R25:R24, R23:R22
   \   00000020   9508               RET
    390          }
    391          
    392          ////////////////////////////////////////////////////////////////////////////////
    393          //
    394          // encoder utilities
    395          //
    396          ////////////////////////////////////////////////////////////////////////////////
    397          /*
    398           * returns
    399           *
    400           * 1 on ok
    401           * 0 on buffer overflow
    402           *
    403           */

   \                                 In  segment CODE, align 2, keep-with-next
    404          static inline uint8_t
    405          hart_msg_encoder_put_data(HartMessageEncoder *encoder, hart_data_t d) {
   \                     hart_msg_encoder_put_data:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01F8               MOVW    R31:R30, R17:R16
    406          	if (encoder->tx_ndx >= encoder->tx_buf_size) {
   \   00000004   8104               LDD     R16, Z+4
   \   00000006   8115               LDD     R17, Z+5
   \   00000008   8142               LDD     R20, Z+2
   \   0000000A   8153               LDD     R21, Z+3
   \   0000000C   1704               CP      R16, R20
   \   0000000E   0715               CPC     R17, R21
   \   00000010   F010               BRCS    ??hart_msg_encoder_put_data_0
    407          		return 0;
   \   00000012   E000               LDI     R16, 0
   \   00000014   C00E               RJMP    ??hart_msg_encoder_put_data_1
    408          	}
    409          	encoder->tx_buf[encoder->tx_ndx] = d;
   \                     ??hart_msg_encoder_put_data_0:
   \   00000016   81A0               LD      R26, Z
   \   00000018   81B1               LDD     R27, Z+1
   \   0000001A   8104               LDD     R16, Z+4
   \   0000001C   8115               LDD     R17, Z+5
   \   0000001E   0FA0               ADD     R26, R16
   \   00000020   1FB1               ADC     R27, R17
   \   00000022   932C               ST      X, R18
    410          	encoder->tx_ndx++;
   \   00000024   8104               LDD     R16, Z+4
   \   00000026   8115               LDD     R17, Z+5
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8304               STD     Z+4, R16
   \   0000002E   8315               STD     Z+5, R17
    411          
    412          	return 1;
   \   00000030   E001               LDI     R16, 1
   \                     ??hart_msg_encoder_put_data_1:
   \   00000032   01DB               MOVW    R27:R26, R23:R22
   \   00000034   9508               RET
    413          }
    414          
    415          
    416          ////////////////////////////////////////////////////////////////////////////////
    417          //
    418          // encoder public interfaces
    419          //
    420          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    421          void
    422          hart_msg_encoder_init(HartMessageEncoder *encoder, volatile uint8_t *tx_buf,  uint16_t tx_buf_size) {
   \                     hart_msg_encoder_init:
   \   00000000   010D               MOVW    R1:R0, R27:R26
   \   00000002   01D8               MOVW    R27:R26, R17:R16
   \   00000004   01B9               MOVW    R23:R22, R19:R18
    423          	encoder->tx_buf         = tx_buf;
   \   00000006   01FD               MOVW    R31:R30, R27:R26
   \   00000008   8360               ST      Z, R22
   \   0000000A   8371               STD     Z+1, R23
    424          	encoder->tx_buf_size    = tx_buf_size;
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8342               STD     Z+2, R20
   \   00000010   8353               STD     Z+3, R21
    425          
    426          	hart_msg_encoder_reset(encoder);
   \   00000012   018D               MOVW    R17:R16, R27:R26
   \   00000014   ....               RCALL   hart_msg_encoder_reset
    427          }
   \   00000016   01D0               MOVW    R27:R26, R1:R0
   \   00000018   9508               RET
    428          

   \                                 In  segment CODE, align 2, keep-with-next
    429          void
    430          hart_msg_encoder_reset(HartMessageEncoder *encoder) {
   \                     hart_msg_encoder_reset:
    431          	encoder->tx_ndx         = 0;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   E020               LDI     R18, 0
   \   00000004   8324               STD     Z+4, R18
   \   00000006   E020               LDI     R18, 0
   \   00000008   8325               STD     Z+5, R18
    432          	encoder->preamble_len   = 0;
   \   0000000A   01F8               MOVW    R31:R30, R17:R16
   \   0000000C   E020               LDI     R18, 0
   \   0000000E   8326               STD     Z+6, R18
    433          }
   \   00000010   9508               RET
    434          

   \                                 In  segment CODE, align 2, keep-with-next
    435          uint8_t
    436          hart_msg_encoder_preamble(HartMessageEncoder *encoder, uint8_t num_preamble) {
   \                     hart_msg_encoder_preamble:
   \   00000000   0108               MOVW    R1:R0, R17:R16
   \   00000002   2E22               MOV     R2, R18
    437          	uint8_t     i;
    438          
    439          	encoder->preamble_len   = num_preamble;
   \   00000004   01F0               MOVW    R31:R30, R1:R0
   \   00000006   8226               STD     Z+6, R2
    440          
    441          	for (i = 0; i < num_preamble; i++) {
   \   00000008   E030               LDI     R19, 0
   \                     ??hart_msg_encoder_preamble_0:
   \   0000000A   1532               CP      R19, R2
   \   0000000C   F448               BRCC    ??hart_msg_encoder_preamble_1
    442          		HART_ENCODER_PUT(encoder, 0xff);
   \   0000000E   EF2F               LDI     R18, 255
   \   00000010   0180               MOVW    R17:R16, R1:R0
   \   00000012   ....               RCALL   hart_msg_encoder_put_data
   \   00000014   3001               CPI     R16, 1
   \   00000016   F011               BREQ    ??hart_msg_encoder_preamble_2
   \   00000018   E000               LDI     R16, 0
   \   0000001A   9508               RET
    443          	}
   \                     ??hart_msg_encoder_preamble_2:
   \   0000001C   9533               INC     R19
   \   0000001E   CFF5               RJMP    ??hart_msg_encoder_preamble_0
    444          	return 1;
   \                     ??hart_msg_encoder_preamble_1:
   \   00000020   E001               LDI     R16, 1
   \   00000022   9508               RET
    445          }
    446          

   \                                 In  segment CODE, align 2, keep-with-next
    447          uint8_t
    448          hart_msg_encoder_short_start(HartMessageEncoder *encoder, uint8_t start, uint8_t addr, uint8_t cmd) {
   \                     hart_msg_encoder_short_start:
   \   00000000   0108               MOVW    R1:R0, R17:R16
   \   00000002   2E22               MOV     R2, R18
   \   00000004   2E34               MOV     R3, R20
    449          	HART_ENCODER_PUT(encoder, start);
   \   00000006   2D22               MOV     R18, R2
   \   00000008   0180               MOVW    R17:R16, R1:R0
   \   0000000A   ....               RCALL   hart_msg_encoder_put_data
   \   0000000C   3001               CPI     R16, 1
   \   0000000E   F011               BREQ    ??hart_msg_encoder_short_start_0
   \   00000010   E000               LDI     R16, 0
   \   00000012   9508               RET
    450          	HART_ENCODER_PUT(encoder, addr);
   \                     ??hart_msg_encoder_short_start_0:
   \   00000014   2F23               MOV     R18, R19
   \   00000016   0180               MOVW    R17:R16, R1:R0
   \   00000018   ....               RCALL   hart_msg_encoder_put_data
   \   0000001A   3001               CPI     R16, 1
   \   0000001C   F011               BREQ    ??hart_msg_encoder_short_start_1
   \   0000001E   E000               LDI     R16, 0
   \   00000020   9508               RET
    451          	HART_ENCODER_PUT(encoder, cmd);
   \                     ??hart_msg_encoder_short_start_1:
   \   00000022   2D23               MOV     R18, R3
   \   00000024   0180               MOVW    R17:R16, R1:R0
   \   00000026   ....               RCALL   hart_msg_encoder_put_data
   \   00000028   3001               CPI     R16, 1
   \   0000002A   F011               BREQ    ??hart_msg_encoder_short_start_2
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   9508               RET
    452          
    453          	return 1;
   \                     ??hart_msg_encoder_short_start_2:
   \   00000030   E001               LDI     R16, 1
   \   00000032   9508               RET
    454          }
    455          

   \                                 In  segment CODE, align 2, keep-with-next
    456          uint8_t
    457          hart_msg_encoder_long_start(HartMessageEncoder *encoder, uint8_t start, uint8_t *addr, uint8_t cmd) {
   \                     hart_msg_encoder_long_start:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   0108               MOVW    R1:R0, R17:R16
   \   00000006   2FA2               MOV     R26, R18
   \   00000008   011A               MOVW    R3:R2, R21:R20
    458          	uint8_t   i;
    459          
    460          	HART_ENCODER_PUT(encoder, start);
   \   0000000A   2F2A               MOV     R18, R26
   \   0000000C   0180               MOVW    R17:R16, R1:R0
   \   0000000E   ....               RCALL   hart_msg_encoder_put_data
   \   00000010   3001               CPI     R16, 1
   \   00000012   F011               BREQ    ??hart_msg_encoder_long_start_0
   \   00000014   E000               LDI     R16, 0
   \   00000016   C018               RJMP    ??hart_msg_encoder_long_start_1
    461          
    462          	for (i = 0; i < 5; i++) {
   \                     ??hart_msg_encoder_long_start_0:
   \   00000018   E080               LDI     R24, 0
   \                     ??hart_msg_encoder_long_start_2:
   \   0000001A   3085               CPI     R24, 5
   \   0000001C   F468               BRCC    ??hart_msg_encoder_long_start_3
    463          		HART_ENCODER_PUT(encoder, addr[i]);
   \   0000001E   E090               LDI     R25, 0
   \   00000020   01F1               MOVW    R31:R30, R3:R2
   \   00000022   0FE8               ADD     R30, R24
   \   00000024   1FF9               ADC     R31, R25
   \   00000026   8120               LD      R18, Z
   \   00000028   0180               MOVW    R17:R16, R1:R0
   \   0000002A   ....               RCALL   hart_msg_encoder_put_data
   \   0000002C   3001               CPI     R16, 1
   \   0000002E   F011               BREQ    ??hart_msg_encoder_long_start_4
   \   00000030   E000               LDI     R16, 0
   \   00000032   C00A               RJMP    ??hart_msg_encoder_long_start_1
    464          	}
   \                     ??hart_msg_encoder_long_start_4:
   \   00000034   9583               INC     R24
   \   00000036   CFF1               RJMP    ??hart_msg_encoder_long_start_2
    465          
    466          	HART_ENCODER_PUT(encoder, cmd);
   \                     ??hart_msg_encoder_long_start_3:
   \   00000038   2F23               MOV     R18, R19
   \   0000003A   0180               MOVW    R17:R16, R1:R0
   \   0000003C   ....               RCALL   hart_msg_encoder_put_data
   \   0000003E   3001               CPI     R16, 1
   \   00000040   F011               BREQ    ??hart_msg_encoder_long_start_5
   \   00000042   E000               LDI     R16, 0
   \   00000044   C001               RJMP    ??hart_msg_encoder_long_start_1
    467          
    468          	return 1;
   \                     ??hart_msg_encoder_long_start_5:
   \   00000046   E001               LDI     R16, 1
   \                     ??hart_msg_encoder_long_start_1:
   \   00000048   E0E3               LDI     R30, 3
   \   0000004A   ........           JMP     ?EPILOGUE_B3_L09
    469          }
    470          

   \                                 In  segment CODE, align 2, keep-with-next
    471          uint8_t
    472          hart_msg_encoder_status_data(HartMessageEncoder *encoder, uint8_t *status, uint8_t *data, uint8_t data_len) {
   \                     hart_msg_encoder_status_data:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   0108               MOVW    R1:R0, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   011A               MOVW    R3:R2, R21:R20
   \   0000000A   2F36               MOV     R19, R22
    473          	uint8_t   bcnt,
    474          		i;
    475          
    476          	bcnt = 2 + data_len;
   \   0000000C   2F03               MOV     R16, R19
   \   0000000E   5F0E               SUBI    R16, 254
   \   00000010   2E40               MOV     R4, R16
    477          
    478          	HART_ENCODER_PUT(encoder, bcnt);
   \   00000012   2D24               MOV     R18, R4
   \   00000014   0180               MOVW    R17:R16, R1:R0
   \   00000016   ....               RCALL   hart_msg_encoder_put_data
   \   00000018   3001               CPI     R16, 1
   \   0000001A   F011               BREQ    ??hart_msg_encoder_status_data_0
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   C021               RJMP    ??hart_msg_encoder_status_data_1
    479          
    480          	HART_ENCODER_PUT(encoder, status[0]);
   \                     ??hart_msg_encoder_status_data_0:
   \   00000020   01FC               MOVW    R31:R30, R25:R24
   \   00000022   8120               LD      R18, Z
   \   00000024   0180               MOVW    R17:R16, R1:R0
   \   00000026   ....               RCALL   hart_msg_encoder_put_data
   \   00000028   3001               CPI     R16, 1
   \   0000002A   F011               BREQ    ??hart_msg_encoder_status_data_2
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   C019               RJMP    ??hart_msg_encoder_status_data_1
    481          	HART_ENCODER_PUT(encoder, status[1]);
   \                     ??hart_msg_encoder_status_data_2:
   \   00000030   01FC               MOVW    R31:R30, R25:R24
   \   00000032   8121               LDD     R18, Z+1
   \   00000034   0180               MOVW    R17:R16, R1:R0
   \   00000036   ....               RCALL   hart_msg_encoder_put_data
   \   00000038   3001               CPI     R16, 1
   \   0000003A   F011               BREQ    ??hart_msg_encoder_status_data_3
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   C011               RJMP    ??hart_msg_encoder_status_data_1
    482          
    483          	for (i = 0; i < data_len; i++) {
   \                     ??hart_msg_encoder_status_data_3:
   \   00000040   E0A0               LDI     R26, 0
   \                     ??hart_msg_encoder_status_data_4:
   \   00000042   17A3               CP      R26, R19
   \   00000044   F468               BRCC    ??hart_msg_encoder_status_data_5
    484          		HART_ENCODER_PUT(encoder, data[i]);
   \   00000046   E0B0               LDI     R27, 0
   \   00000048   01F1               MOVW    R31:R30, R3:R2
   \   0000004A   0FEA               ADD     R30, R26
   \   0000004C   1FFB               ADC     R31, R27
   \   0000004E   8120               LD      R18, Z
   \   00000050   0180               MOVW    R17:R16, R1:R0
   \   00000052   ....               RCALL   hart_msg_encoder_put_data
   \   00000054   3001               CPI     R16, 1
   \   00000056   F011               BREQ    ??hart_msg_encoder_status_data_6
   \   00000058   E000               LDI     R16, 0
   \   0000005A   C003               RJMP    ??hart_msg_encoder_status_data_1
    485          	}
   \                     ??hart_msg_encoder_status_data_6:
   \   0000005C   95A3               INC     R26
   \   0000005E   CFF1               RJMP    ??hart_msg_encoder_status_data_4
    486          
    487          	return 1;
   \                     ??hart_msg_encoder_status_data_5:
   \   00000060   E001               LDI     R16, 1
   \                     ??hart_msg_encoder_status_data_1:
   \   00000062   E0E5               LDI     R30, 5
   \   00000064   ........           JMP     ?EPILOGUE_B5_L09
    488          }
    489          

   \                                 In  segment CODE, align 2, keep-with-next
    490          uint8_t
    491          hart_msg_encoder_data(HartMessageEncoder *encoder, uint8_t *data, uint8_t data_len) {
   \                     hart_msg_encoder_data:
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   0108               MOVW    R1:R0, R17:R16
   \   00000006   0119               MOVW    R3:R2, R19:R18
   \   00000008   2F34               MOV     R19, R20
    492          	uint8_t   bcnt,
    493          		i;
    494          
    495          	bcnt = data_len;
   \   0000000A   2FA3               MOV     R26, R19
    496          
    497          	HART_ENCODER_PUT(encoder, bcnt);
   \   0000000C   2F2A               MOV     R18, R26
   \   0000000E   0180               MOVW    R17:R16, R1:R0
   \   00000010   ....               RCALL   hart_msg_encoder_put_data
   \   00000012   3001               CPI     R16, 1
   \   00000014   F011               BREQ    ??hart_msg_encoder_data_0
   \   00000016   E000               LDI     R16, 0
   \   00000018   C011               RJMP    ??hart_msg_encoder_data_1
    498          
    499          	for (i = 0; i < data_len; i++) {
   \                     ??hart_msg_encoder_data_0:
   \   0000001A   E080               LDI     R24, 0
   \                     ??hart_msg_encoder_data_2:
   \   0000001C   1783               CP      R24, R19
   \   0000001E   F468               BRCC    ??hart_msg_encoder_data_3
    500          		HART_ENCODER_PUT(encoder, data[i]);
   \   00000020   E090               LDI     R25, 0
   \   00000022   01F1               MOVW    R31:R30, R3:R2
   \   00000024   0FE8               ADD     R30, R24
   \   00000026   1FF9               ADC     R31, R25
   \   00000028   8120               LD      R18, Z
   \   0000002A   0180               MOVW    R17:R16, R1:R0
   \   0000002C   ....               RCALL   hart_msg_encoder_put_data
   \   0000002E   3001               CPI     R16, 1
   \   00000030   F011               BREQ    ??hart_msg_encoder_data_4
   \   00000032   E000               LDI     R16, 0
   \   00000034   C003               RJMP    ??hart_msg_encoder_data_1
    501          	}
   \                     ??hart_msg_encoder_data_4:
   \   00000036   9583               INC     R24
   \   00000038   CFF1               RJMP    ??hart_msg_encoder_data_2
    502          
    503          	return 1;
   \                     ??hart_msg_encoder_data_3:
   \   0000003A   E001               LDI     R16, 1
   \                     ??hart_msg_encoder_data_1:
   \   0000003C   E0E3               LDI     R30, 3
   \   0000003E   ........           JMP     ?EPILOGUE_B3_L09
    504          }
    505          

   \                                 In  segment CODE, align 2, keep-with-next
    506          uint8_t
    507          hart_msg_encoder_calc_csum(HartMessageEncoder *encoder) {
   \                     hart_msg_encoder_calc_csum:
   \   00000000   2E1B               MOV     R1, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    508          	uint8_t   csum;
    509          
    510          	csum = hart_msg_calc_csum((const uint8_t *)&encoder->tx_buf[encoder->preamble_len], encoder->tx_ndx - encoder->preamble_len);
   \   00000006   01FD               MOVW    R31:R30, R27:R26
   \   00000008   8124               LDD     R18, Z+4
   \   0000000A   8135               LDD     R19, Z+5
   \   0000000C   01FD               MOVW    R31:R30, R27:R26
   \   0000000E   8106               LDD     R16, Z+6
   \   00000010   E010               LDI     R17, 0
   \   00000012   1B20               SUB     R18, R16
   \   00000014   0B31               SBC     R19, R17
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8100               LD      R16, Z
   \   0000001A   8111               LDD     R17, Z+1
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8146               LDD     R20, Z+6
   \   00000020   E050               LDI     R21, 0
   \   00000022   0F04               ADD     R16, R20
   \   00000024   1F15               ADC     R17, R21
   \   00000026   ....               RCALL   hart_msg_calc_csum
   \   00000028   2E00               MOV     R0, R16
    511          
    512          	HART_ENCODER_PUT(encoder, csum);
   \   0000002A   2D20               MOV     R18, R0
   \   0000002C   018D               MOVW    R17:R16, R27:R26
   \   0000002E   ....               RCALL   hart_msg_encoder_put_data
   \   00000030   3001               CPI     R16, 1
   \   00000032   F011               BREQ    ??hart_msg_encoder_calc_csum_0
   \   00000034   E000               LDI     R16, 0
   \   00000036   C001               RJMP    ??hart_msg_encoder_calc_csum_1
    513          
    514          	return 1;
   \                     ??hart_msg_encoder_calc_csum_0:
   \   00000038   E001               LDI     R16, 1
   \                     ??hart_msg_encoder_calc_csum_1:
   \   0000003A   2DA2               MOV     R26, R2
   \   0000003C   2DB1               MOV     R27, R1
   \   0000003E   9508               RET
    515          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   hart_msg_calc_csum
      0      2   hart_msg_encoder_calc_csum
        0      2   -> hart_msg_calc_csum
        0      2   -> hart_msg_encoder_put_data
      3      2   hart_msg_encoder_data
        3      2   -> hart_msg_encoder_put_data
      0      2   hart_msg_encoder_init
        0      2   -> hart_msg_encoder_reset
      3      2   hart_msg_encoder_long_start
        3      2   -> hart_msg_encoder_put_data
      0      2   hart_msg_encoder_preamble
        0      2   -> hart_msg_encoder_put_data
      0      2   hart_msg_encoder_put_data
      0      2   hart_msg_encoder_reset
      0      2   hart_msg_encoder_short_start
        0      2   -> hart_msg_encoder_put_data
      5      2   hart_msg_encoder_status_data
        5      2   -> hart_msg_encoder_put_data
      5      2   hart_msg_move_and_invoke_state
        5      2   -- Indirect call
        5      2   -> hart_msg_parser_move_state
      3      2   hart_msg_parser_handle_byte
        3      2   -- Indirect call
      0      2   hart_msg_parser_init
        0      2   -> hart_msg_parser_reset
      0      2   hart_msg_parser_move_state
      0      2   hart_msg_parser_reset
        0      2   -> hart_msg_parser_move_state
      4      2   hart_msg_put_rx_data
      4      2   hart_msg_state_address
        4      2   -> hart_msg_parser_move_state
        4      2   -> hart_msg_put_rx_data
      0      2   hart_msg_state_begin
        0      2   -> hart_msg_parser_move_state
      0      2   hart_msg_state_blackhole
      4      2   hart_msg_state_bytecount
        4      2   -> hart_msg_parser_move_state
        4      2   -> hart_msg_put_rx_data
      0      2   hart_msg_state_checksum
      0      2   hart_msg_state_command
        0      2   -> hart_msg_parser_move_state
        0      2   -> hart_msg_put_rx_data
      0      2   hart_msg_state_data
        0      2   -> hart_msg_parser_move_state
        0      2   -> hart_msg_put_rx_data
      0      2   hart_msg_state_expansion
        0      2   -> hart_msg_parser_move_state
        0      2   -> hart_msg_put_rx_data
      4      2   hart_msg_state_preamble
        4      2   -> hart_msg_move_and_invoke_state
        4      2   -> hart_msg_parser_move_state
     12      2   hart_msg_state_start_char
       12      2   -> hart_msg_parser_move_state
       12      2   -> hart_msg_put_rx_data
       12      2 ?S_EC_MUL_L02
      4      2   hart_msg_state_status
        4      2   -> hart_msg_parser_move_state
        4      2   -> hart_msg_put_rx_data


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      34  hart_msg_calc_csum
      64  hart_msg_encoder_calc_csum
      66  hart_msg_encoder_data
      26  hart_msg_encoder_init
      78  hart_msg_encoder_long_start
      36  hart_msg_encoder_preamble
      54  hart_msg_encoder_put_data
      18  hart_msg_encoder_reset
      52  hart_msg_encoder_short_start
     104  hart_msg_encoder_status_data
      30  hart_msg_move_and_invoke_state
      28  hart_msg_parser_handle_byte
      24  hart_msg_parser_init
      10  hart_msg_parser_move_state
     138  hart_msg_parser_reset
      58  hart_msg_put_rx_data
     158  hart_msg_state_address
      46  hart_msg_state_begin
       6  hart_msg_state_blackhole
     168  hart_msg_state_bytecount
       8  hart_msg_state_checksum
      62  hart_msg_state_command
     108  hart_msg_state_data
     108  hart_msg_state_expansion
     106  hart_msg_state_preamble
     372  hart_msg_state_start_char
     158  hart_msg_state_status

 
 2 120 bytes in segment CODE
 
 2 120 bytes of CODE memory

Errors: none
Warnings: none
