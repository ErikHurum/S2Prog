###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       04/May/2023  10:24:01
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  D:\S2Prog\IO\AN-ZBHART\Src\rtosinit.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWA46.tmp
#        (D:\S2Prog\IO\AN-ZBHART\Src\rtosinit.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\AN-ZBHART\Debug\Obj -D OS_LIBMODE_D -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\AN-ZBHART\Debug\List -y --initializers_in_flash --no_cse
#        --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa
#        --debug -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\AN-ZBHART\INC\\ -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -On)
#    Locale       =  English_USA.1252
#    List file    =  D:\S2Prog\IO\AN-ZBHART\Debug\List\rtosinit.lst
#    Object file  =  D:\S2Prog\IO\AN-ZBHART\Debug\Obj\rtosinit.r90
#
###############################################################################

D:\S2Prog\IO\AN-ZBHART\Src\rtosinit.c
      1          /*********************************************************************
      2          *               SEGGER MICROCONTROLLER GmbH & Co KG                  *
      3          *       Solutions for real time microcontroller applications         *
      4          **********************************************************************
      5          *                                                                    *
      6          *       (c) 1995 - 2012  SEGGER Microcontroller GmbH & Co KG         *
      7          *                                                                    *
      8          *       www.segger.com     Support: support@segger.com               *
      9          *                                                                    *
     10          **********************************************************************
     11          *                                                                    *
     12          *       embOS * Real time operating system for microcontrollers      *
     13          *                                                                    *
     14          *                                                                    *
     15          *       Please note:                                                 *
     16          *                                                                    *
     17          *       Knowledge of this file may under no circumstances            *
     18          *       be used to write a similar product or a real-time            *
     19          *       operating system for in-house use.                           *
     20          *                                                                    *
     21          *       Thank you for your fairness !                                *
     22          *                                                                    *
     23          **********************************************************************
     24          *                                                                    *
     25          *       OS version: 3.86g                                            *
     26          *                                                                    *
     27          **********************************************************************
     28          
     29          ----------------------------------------------------------------------
     30          File    : RTOSInit_ATmega128.c for ATmega128 CPU and IAR compiler
     31          
     32          Purpose : Initializes and handles the hardware for embOS as far
     33                    as required by embOS
     34                    Feel free to modify this file acc. to your
     35                    target system.
     36          --------  END-OF-HEADER  ---------------------------------------------
     37          */
     38          
     39          #include "RTOS.H"
     40          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x88
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x84
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x81
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x80
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6f
   \   union <unnamed> volatile __io _A_TIMSK1
   \                     _A_TIMSK1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   union <unnamed> volatile __io _A_TIFR1
   \                     _A_TIFR1:
   \   00000000                      DS8 1
     41          #include "constants.h"
     42          
     43          /*********************************************************************
     44          *
     45          *       Configuration
     46          *
     47          **********************************************************************
     48          */
     49          
     50          /*********************************************************************
     51          *
     52          *       Clock frequency settings
     53          */
     54          #ifndef   OS_FSYS                   /* CPU Main clock frequency     */
     55            #define OS_FSYS 16000000LuL        /* Assume 16 MHz            */
     56          #endif
     57          
     58          #ifndef   OS_PCLK_TIMER             /* Peripheral clock for timer   */
     59            #define OS_PCLK_TIMER (OS_FSYS)   /* May vary from CPU clock      */
     60          #endif                              /* depending on CPU             */
     61          
     62          #ifndef   OS_PCLK_UART              /* Peripheral clock for UART    */
     63            #define OS_PCLK_UART (OS_FSYS)    /* May vary from CPU clock      */
     64          #endif                              /* depending on CPU             */
     65          
     66          #ifndef   OS_TICK_FREQ
     67            #define OS_TICK_FREQ (1000)
     68          #endif
     69          
     70          /*********************************************************************
     71          *
     72          *       Configuration of communication to OSView
     73          */
     74          #ifndef   OS_VIEW_ENABLE            // Global enable of communication
     75            #define OS_VIEW_ENABLE    (1)     // Default: on
     76          #endif
     77          
     78          #ifndef   OS_VIEW_USE_UART          // If set, UART will be used for communication
     79            #define OS_VIEW_USE_UART  (1)     // Default: 1 => Uart is used
     80          #endif                              // if OS_VIEW_ENABLE is on
     81          
     82          /*********************************************************************
     83          *
     84          *       UART settings for OSView
     85          *       If you do not want (or can not due to hardware limitations)
     86          *       to dedicate a UART to OSView, please define it to be -1
     87          *       Currently UART1 is supported and the standard
     88          *       setup enables UART1 per default
     89          */
     90          #ifndef OS_UART
     91              #define OS_UART (0)
     92          #endif
     93          #ifndef OS_BAUDRATE
     94              #define OS_BAUDRATE (19200)
     95          #endif
     96          
     97          /****** End of configurable options *********************************/
     98          
     99          #define OS_UART_USED  ((OS_VIEW_ENABLE && (OS_VIEW_USE_UART != 0)) && ((OS_UART == 0)))
    100          
    101          #if OS_UART_USED
    102            #define OS_COM_INIT() OS_COM_Init()
    103          #else
    104            #define OS_COM_INIT()
    105          #endif
    106          
    107          #define OS_TIMER_RELOAD (OS_PCLK_TIMER / OS_TICK_FREQ)
    108          
    109          /*********************************************************************
    110          *
    111          *       Check configuration
    112          *
    113          **********************************************************************
    114          */
    115          
    116          #ifndef   DEBUG     /* Should normally be defined as project option */
    117            #define DEBUG  (0)
    118          #endif
    119          
    120          /*********************************************************************
    121          *
    122          *       Local defines (sfrs used in RTOSInit.c)
    123          *
    124          **********************************************************************
    125          */
    126          
    127          /*********************************************************************
    128          *
    129          *       Static data
    130          *
    131          **********************************************************************
    132          */
    133          
    134          /*********************************************************************
    135          *
    136          *       Local functions
    137          *
    138          **********************************************************************
    139          */
    140          
    141          /*********************************************************************
    142          *
    143          *       _ReadHWTimer()
    144          *
    145          */

   \                                 In  segment CODE, align 2, keep-with-next
    146          static int _ReadHWTimer(void) {
   \                     _ReadHWTimer:
    147            OS_U16 r = TCNT1L;
   \   00000000   9100....           LDS     R16, _A_TCNT1
   \   00000004   E010               LDI     R17, 0
    148            asm ("nop");
   \   00000006   0000               nop
    149            return r | (TCNT1H << 8);
   \   00000008   91300085           LDS     R19, 133
   \   0000000C   E020               LDI     R18, 0
   \   0000000E   2B02               OR      R16, R18
   \   00000010   2B13               OR      R17, R19
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_TCNT1
    150          }
    151          
    152          /*********************************************************************
    153          *
    154          *       OS_ISR_Tick()
    155          *       The embOS timer tick interrupt Handler
    156          */
    157          static void OS_ISR_Tick_Handler(void);

   \                                 In  segment CODE, align 2, keep-with-next
    158          static void OS_ISR_Tick_Handler(void) {
   \                     OS_ISR_Tick_Handler:
    159            OS_TICK_Handle();
   \   00000000   ........           CALL    OS_TICK_Handle
    160          }
   \   00000004   9508               RET
    161          
    162          /*********************************************************************
    163          *
    164          *       OS_ISR_Tick()
    165          *       The embOS timer tick interrupt Handler
    166          */
    167          #pragma vector = TIMER1_COMPA_vect
    168          __interrupt void OS_ISR_Tick (void);
    169          #pragma vector = TIMER1_COMPA_vect

   \                                 In  segment CODE, align 2, keep-with-next
    170          __interrupt void OS_ISR_Tick (void) {
   \                     OS_ISR_Tick:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    171            OS_CallISR(OS_ISR_Tick_Handler);
   \   00000024   ....               LDI     R16, LOW(OS_ISR_Tick_Handler/2)
   \   00000026   ....               LDI     R17, (OS_ISR_Tick_Handler/2) >> 8
   \   00000028   ........           CALL    OS_CallISR_Debug
    172          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI
    173          
    174          /*********************************************************************
    175          *
    176          *       Global functions
    177          *
    178          **********************************************************************
    179          */
    180          
    181          /*********************************************************************
    182          *
    183          *       OS_InitHW()
    184          *
    185          *       Initialize the hardware (timer) required for embOS to run.
    186          *       May be modified, if an other timer should be used
    187          */
    188          
    189          

   \                                 In  segment CODE, align 2, keep-with-next
    190          void OS_InitHW(void) {
   \                     OS_InitHW:
    191            TCCR1A=  (0<<6)       // 0: No output
    192              |(0<<4)             // 0: No output
    193              |(0<<0);            // No PWM
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     _A_TCCR1A, R16
    194            TCCR1B=  (1<<7)       // 0: Disable noise canceler
    195              |(0<<6)             // X: Capture edge
    196              |(1<<3)             // 1: Reset on compare match
    197              |(1<<0);            // 1: clock source CK/1
   \   00000006   E809               LDI     R16, 137
   \   00000008   9300....           STS     _A_TCCR1B, R16
    198            OCR1A = (XTAL_CPU/1000)-1;         // generate 1ms interrupts
   \   0000000C   E70F               LDI     R16, 127
   \   0000000E   E31E               LDI     R17, 62
   \   00000010   9310....           STS     (_A_OCR1A + 1), R17
   \   00000014   9300....           STS     _A_OCR1A, R16
    199            TIMSK1 |= (1<<1);      // Output CompareA Match Interrupt Enable
   \   00000018   9100006F           LDS     R16, 111
   \   0000001C   6002               ORI     R16, 0x02
   \   0000001E   9300006F           STS     111, R16
    200            //  SREG  = 0x80 ;        // global interrupt
    201          
    202          
    203            OS_COM_INIT();        // Initialize communication to embOSView
    204          }
   \   00000022   9508               RET
   \   00000024                      REQUIRE _A_TCCR1A
   \   00000024                      REQUIRE _A_TCCR1B
   \   00000024                      REQUIRE _A_OCR1A
   \   00000024                      REQUIRE _A_TIMSK1
    205          
    206          /*********************************************************************
    207          *
    208          *       OS_Idle()
    209          *
    210          *       Please note:
    211          *       This is basically the "core" of the idle loop.
    212          *       This core loop can be changed, but:
    213          *       The idle loop does not have a stack of its own, therefore no
    214          *       functionality should be implemented that relies on the stack
    215          *       to be preserved. However, a simple program loop can be programmed
    216          *       (like toggeling an output or incrementing a counter)
    217          */
    218          

   \                                 In  segment CODE, align 2, keep-with-next
    219          void OS_Idle(void) {          // Idle loop: No task is ready to execute
   \                     OS_Idle:
    220            
    221            while (1) {           // Nothing to do ... wait for interrupt
   \                     ??OS_Idle_0:
   \   00000000   CFFF               RJMP    ??OS_Idle_0
    222              #if (DEBUG == 0)
    223                                  // Switch CPU into sleep mode
    224              #endif
    225            }
    226          }
    227          
    228          /*********************************************************************
    229          *
    230          *       OS_GetTime_Cycles()
    231          *
    232          *       This routine is required for task-info via OSView or high
    233          *       resolution time measurement functions.
    234          *       It returns the system time in timer clock cycles.
    235          */

   \                                 In  segment CODE, align 2, keep-with-next
    236          OS_U32 OS_GetTime_Cycles(void) {
   \                     OS_GetTime_Cycles:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    237            OS_U32 Time;
    238              OS_U32 Cnt;
    239          
    240            Time = OS_Time;
   \   00000004   ....               LDI     R30, LOW(OS_Global)
   \   00000006   ....               LDI     R31, (OS_Global) >> 8
   \   00000008   8902               LDD     R16, Z+18
   \   0000000A   8913               LDD     R17, Z+19
   \   0000000C   8924               LDD     R18, Z+20
   \   0000000E   8935               LDD     R19, Z+21
   \   00000010   01A8               MOVW    R21:R20, R17:R16
   \   00000012   01B9               MOVW    R23:R22, R19:R18
    241            Cnt  = _ReadHWTimer();
   \   00000014   ....               RCALL   _ReadHWTimer
   \   00000016   2F21               MOV     R18, R17
   \   00000018   0F22               LSL     R18
   \   0000001A   0B22               SBC     R18, R18
   \   0000001C   2F32               MOV     R19, R18
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   01D9               MOVW    R27:R26, R19:R18
    242            //
    243              // Check if timer interrupt pending ...
    244            //
    245            if (TIFR1 &(1<<4)) {  // Check if timer interrupt pending ...
   \   00000022   9BB4               SBIS    0x16, 0x04
   \   00000024   C00B               RJMP    ??OS_GetTime_Cycles_0
    246              Cnt = _ReadHWTimer();
   \   00000026   ....               RCALL   _ReadHWTimer
   \   00000028   2F21               MOV     R18, R17
   \   0000002A   0F22               LSL     R18
   \   0000002C   0B22               SBC     R18, R18
   \   0000002E   2F32               MOV     R19, R18
   \   00000030   01C8               MOVW    R25:R24, R17:R16
   \   00000032   01D9               MOVW    R27:R26, R19:R18
    247              Time++;
   \   00000034   5F4F               SUBI    R20, 255
   \   00000036   4F5F               SBCI    R21, 255
   \   00000038   4F6F               SBCI    R22, 255
   \   0000003A   4F7F               SBCI    R23, 255
    248              }
    249            return(OS_TIMER_RELOAD * Time) + Cnt;
   \                     ??OS_GetTime_Cycles_0:
   \   0000003C   E800               LDI     R16, 128
   \   0000003E   E31E               LDI     R17, 62
   \   00000040   E020               LDI     R18, 0
   \   00000042   E030               LDI     R19, 0
   \   00000044   ........           CALL    ?L_EC_MUL_L03
   \   00000048   0F08               ADD     R16, R24
   \   0000004A   1F19               ADC     R17, R25
   \   0000004C   1F2A               ADC     R18, R26
   \   0000004E   1F3B               ADC     R19, R27
   \   00000050   E0E4               LDI     R30, 4
   \   00000052   ........           JMP     ?EPILOGUE_B4_L09
   \   00000056                      REQUIRE _A_TIFR1
    250          }
    251          
    252          /*********************************************************************
    253          *
    254          *       OS_ConvertCycles2us()
    255          *
    256          *       Convert Cycles into micro seconds.
    257          *
    258          *       If your clock frequency is not a multiple of 1 MHz,
    259          *       you may have to modify this routine in order to get proper
    260          *       diagnostics.
    261          *
    262          *       This routine is required for profiling or high resolution time
    263          *       measurement only.
    264             It does not affect operation of the OS.
    265          */
    266          

   \                                 In  segment CODE, align 2, keep-with-next
    267          OS_U32 OS_ConvertCycles2us(OS_U32 Cycles) {
   \                     OS_ConvertCycles2us:
    268              return Cycles/(OS_PCLK_TIMER/1000000);
   \   00000000   E044               LDI     R20, 4
   \   00000002   ........           CALL    ?UL_SHR_L03
   \   00000006   9508               RET
    269          }
    270          
    271          /*********************************************************************
    272          *
    273          *       Optional communication with embOSView
    274          *
    275          **********************************************************************
    276          */
    277          #if OS_UART_USED
    278          #define OS_BAUDDIVIDE ((OS_FSYS+OS_BAUDRATE*8L)/(OS_BAUDRATE*16L)-1)
    279          
    280          /*********************************************************************
    281          *
    282          *       OS_COM_Init()
    283          */
    284          void OS_COM_Init(void) {
    285            UBRR0H  = OS_BAUDDIVIDE >> 8;
    286            UBRR0L = OS_BAUDDIVIDE;
    287            UCSR0B =  (0<<0)      // X
    288              |(0<<1)      // X
    289              |(0<<2)      // CHR9: 9-bit Characters
    290              |(1<<3)      // TXEN: Transmitter Enable
    291              |(1<<4)      // RXEN: Receiver Enable
    292              |(0<<5)      // UDRIE: UART Data Register Empty Interrupt Enable
    293              |(0<<6)      // TXCIE Tx complete interrupt enable
    294              |(0<<7);     // RXCIE Rx complete interrupt enable
    295            UCSR0B =  (0<<0)      // X
    296              |(0<<1)      // X
    297              |(0<<2)      // CHR9: 9-bit Characters
    298              |(1<<3)      // TXEN: Transmitter Enable
    299              |(1<<4)      // RXEN: Receiver Enable
    300              |(1<<5)      // UDRIE: UART Data Register Empty Interrupt Enable
    301              |(0<<6)      // TXCIE Tx complete interrupt enable
    302              |(1<<7);     // RXCIE Rx complete interrupt enable
    303          }
    304          
    305          /*********************************************************************
    306          *
    307          *       OS_COM_Send1()
    308          *       Send one character via UART.
    309          *       Never call this function from your application
    310          */
    311          void OS_COM_Send1(unsigned char c) {
    312              UDR0 = c;
    313              UCSR0B |=  (1<< 5);      // Generate interrupt on transmit buffer emtpy
    314          }
    315          
    316          /*********************************************************************
    317          *
    318          *       OS_ISR_rx_Handler()
    319          *       embOS UART rx interrupt handler
    320          */
    321          void OS_ISR_rx_Handler(void);
    322          void OS_ISR_rx_Handler(void) {
    323              UCSR0B &=  ~(1<<7);     // Avoid nesting itself !!!
    324            OS_OnRx(UDR0);
    325              OS_DI();             // Disable before allowing Rx interrupt
    326              UCSR0B |=  (1<<7);
    327          }
    328          
    329          /*********************************************************************
    330          *
    331          *       OS_ISR_rx()
    332          *       embOS UART rx interrupt handler
    333          */
    334          #pragma vector = USART0_RXC_vect
    335          __interrupt void OS_ISR_rx(void);
    336          #pragma vector = USART0_RXC_vect
    337          __interrupt void OS_ISR_rx(void) {
    338            OS_CallISR(OS_ISR_rx_Handler);
    339          }
    340          
    341          /*********************************************************************
    342          *
    343          *       OS_ISR_tx_Handler()
    344          *       embOS UART tx interrupt handler
    345          */
    346          void OS_ISR_tx_Handler(void);
    347          void OS_ISR_tx_Handler(void) {
    348                  UCSR0B &=  ~(1<<5);   // Do not generate any more interrupts
    349            if (OS_OnTx() == 0) {
    350              OS_DI();             // Disable before allowing Tx interrupt
    351              UCSR0B |=  (1<<5);   // Re-enable Tx interrupts
    352            }
    353          }
    354          
    355          /*********************************************************************
    356          *
    357          *       OS_ISR_tx()
    358          *       embOS UART tx interrupt handler
    359          */
    360          #pragma vector = USART0_UDRE_vect
    361          __interrupt void OS_ISR_tx(void);
    362          #pragma vector = USART0_UDRE_vect
    363          __interrupt void OS_ISR_tx(void) {
    364            OS_CallISR(OS_ISR_tx_Handler);
    365          }
    366          
    367          #else  /* UART for communication not used, define dummy functions */
    368          

   \                                 In  segment CODE, align 2, keep-with-next
    369          void OS_COM_Send1(OS_U8 c) {
   \                     OS_COM_Send1:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    370            OS_USEPARA(c);           /* Avoid compiler warning */
    371            OS_COM_ClearTxActive();    /* Let the OS know that Tx is not busy */
   \   00000004   ........           CALL    OS_COM_ClearTxActive
    372          }
   \   00000008   9189               LD      R24, Y+
   \   0000000A   9508               RET

   \                                 In  segment INTVEC, offset 0x44, root
   \                     `??OS_ISR_Tick::??INTVEC 68`:
   \   00000044   ........           JMP     OS_ISR_Tick
    373          #endif
    374          
    375          /****** End Of File *************************************************/

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   OS_COM_Send1
        1      2   -> OS_COM_ClearTxActive
      0      2   OS_ConvertCycles2us
        0      2 ?UL_SHR_L03
      4      2   OS_GetTime_Cycles
        4      2   -> _ReadHWTimer
        4      2 ?L_EC_MUL_L03
     16      2   OS_ISR_Tick
       16      2   -> OS_CallISR_Debug
      0      2   OS_ISR_Tick_Handler
        0      2   -> OS_TICK_Handle
      0      2   OS_Idle
      0      2   OS_InitHW
      0      2   _ReadHWTimer


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  OS_COM_Send1
       8  OS_ConvertCycles2us
      86  OS_GetTime_Cycles
      82  OS_ISR_Tick
       4  OS_ISR_Tick::??INTVEC 68
       6  OS_ISR_Tick_Handler
       2  OS_Idle
      36  OS_InitHW
       2  _A_OCR1A
       1  _A_TCCR1A
       1  _A_TCCR1B
       2  _A_TCNT1
       1  _A_TIFR1
       1  _A_TIMSK1
      20  _ReadHWTimer

 
   8 bytes in segment ABSOLUTE
 252 bytes in segment CODE
   4 bytes in segment INTVEC
 
 252 bytes of CODE memory (+ 4 bytes shared)
   0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
