###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       31/Jan/2023  09:48:37
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\AN-ZBHART\Src\UsartInt.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW85EF.tmp
#        (D:\S2Prog\IO\AN-ZBHART\Src\UsartInt.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\AN-ZBHART\Release\Obj -D OS_LIBMODE_R -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\AN-ZBHART\Release\List -y --initializers_in_flash
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\AN-ZBHART\INC\\ -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\AN-ZBHART\Release\List\UsartInt.lst
#    Object file  =  D:\S2Prog\IO\AN-ZBHART\Release\Obj\UsartInt.r90
#
###############################################################################

D:\S2Prog\IO\AN-ZBHART\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   My485UART1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          
      8          
      9          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0xc6
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
     10          #include "stdio.h"
     11          #include "math.h"
     12          #include "externals.h"
     13          #include "version.h"
     14          extern OS_TASK     TCB_USART0;                                         /* Task-control-blocks */
     15          
     16          
     17          #if (OS_UART != 0)
     18          
     19          // USART0

   \                                 In  segment CODE, align 2, keep-with-next
     20          void INT_Handler_RX_USART0( void ){   
   \                     INT_Handler_RX_USART0:
   \   00000000   9721               SBIW    R29:R28, 1
     21              OS_DI();             // Disable before allowing new Rx interrupt
   \   00000002   94F8               cli
     22              if ( UCSR0A & __BIT_MASK( DOR0 ) ) {                // Overrun error? 
   \   00000004   9100....           LDS     R16, _A_UCSR0A
     23              }
     24          
     25              if ( UCSR0A & __BIT_MASK( FE0 ) ) {                 // Framing error? 
   \   00000008   9100....           LDS     R16, _A_UCSR0A
   \   0000000C   C00E               RJMP    ??INT_Handler_RX_USART0_0
     26              }
     27          
     28              while ( UCSR0A & __BIT_MASK( RXC0)  ) {                // New byte avaiable?
     29          		char Data = UDR0;
   \                     ??INT_Handler_RX_USART0_1:
   \   0000000E   9100....           LDS     R16, _A_UDR0
   \   00000012   8308               ST      Y, R16
     30                  if ( hasStartedUARTTask ) {
   \   00000014   9100....           LDS     R16, hasStartedUARTTask
   \   00000018   2300               TST     R16
   \   0000001A   F039               BREQ    ??INT_Handler_RX_USART0_0
     31                      CriticalComError = OS_PutMailCond1(&My485UART.RxMailBox, &Data);
   \   0000001C   019E               MOVW    R19:R18, R29:R28
   \   0000001E   ....               LDI     R16, LOW((My485UART + 10))
   \   00000020   ....               LDI     R17, HIGH((My485UART + 10))
   \   00000022   ........           CALL    OS_PutMailCond1
   \   00000026   9300....           STS     CriticalComError, R16
     32                  }
     33              }
   \                     ??INT_Handler_RX_USART0_0:
   \   0000002A   9100....           LDS     R16, _A_UCSR0A
   \   0000002E   FD07               SBRC    R16, 7
   \   00000030   CFEE               RJMP    ??INT_Handler_RX_USART0_1
     34          } 
   \   00000032   9621               ADIW    R29:R28, 1
   \   00000034   9508               RET
   \   00000036                      REQUIRE _A_UCSR0A
   \   00000036                      REQUIRE _A_UDR0
     35          #pragma vector=USART0_RX_vect
     36          

   \                                 In  segment CODE, align 2, keep-with-next
     37          __interrupt void IntHandler_RX_USART0( void ){   
   \                     IntHandler_RX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     38              OS_CallISR(INT_Handler_RX_USART0);
   \   00000024   ....               LDI     R16, LOW(INT_Handler_RX_USART0/2)
   \   00000026   ....               LDI     R17, (INT_Handler_RX_USART0/2) >> 8
   \   00000028                      REQUIRE ?Subroutine0
   \   00000028                      ;               // Fall through to label ?Subroutine0
     39          } 

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           CALL    OS_CallISR
   \   00000004   BF9B               OUT     0x3B, R25
   \   00000006   BF8F               OUT     0x3F, R24
   \   00000008   9109               LD      R16, Y+
   \   0000000A   9119               LD      R17, Y+
   \   0000000C   9129               LD      R18, Y+
   \   0000000E   9139               LD      R19, Y+
   \   00000010   9149               LD      R20, Y+
   \   00000012   9159               LD      R21, Y+
   \   00000014   9169               LD      R22, Y+
   \   00000016   9179               LD      R23, Y+
   \   00000018   9009               LD      R0, Y+
   \   0000001A   9019               LD      R1, Y+
   \   0000001C   9029               LD      R2, Y+
   \   0000001E   9039               LD      R3, Y+
   \   00000020   91E9               LD      R30, Y+
   \   00000022   91F9               LD      R31, Y+
   \   00000024   9189               LD      R24, Y+
   \   00000026   9199               LD      R25, Y+
   \   00000028   9518               RETI

   \                                 In  segment CODE, align 2, keep-with-next
     40          void INT_Handler_TX_USART0( void ){   
   \                     INT_Handler_TX_USART0:
     41              UCSR0B &= ~(__BIT_MASK( TXCIE0)) ;            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7B0F               ANDI    R16, 0xBF
   \   00000006   930000C1           STS     193, R16
     42              PORTE &= ~0x04 ;                              // TXE0 off
   \   0000000A   9872               CBI     0x0E, 0x02
     43              OS_SignalEvent(UART0_EVENT_TX_COMPLETE, &TCB_USART0); // No more to send
   \   0000000C   ....               LDI     R18, LOW(TCB_USART0)
   \   0000000E   ....               LDI     R19, (TCB_USART0) >> 8
   \   00000010   E001               LDI     R16, 1
   \   00000012   ........           JMP     OS_SignalEvent
   \   00000016                      REQUIRE _A_UCSR0B
   \   00000016                      REQUIRE _A_PORTE
     44          }
     45          
     46          #pragma vector=USART0_TX_vect
     47          

   \                                 In  segment CODE, align 2, keep-with-next
     48          __interrupt void IntHandler_TX_USART0( void ){   
   \                     IntHandler_TX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     49              OS_CallISR(INT_Handler_TX_USART0); 
   \   00000024   ....               LDI     R16, LOW(INT_Handler_TX_USART0/2)
   \   00000026   ....               LDI     R17, (INT_Handler_TX_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
     50              
     51          }
     52          

   \                                 In  segment CODE, align 2, keep-with-next
     53          void INT_Handler_UDRE_USART0( void ){   
   \                     INT_Handler_UDRE_USART0:
     54          
     55              if ( My485UART.TxLast < My485UART.TxCount ) { // Last byte sent?
   \   00000000   9100....           LDS     R16, (My485UART + 2)
   \   00000004   9110....           LDS     R17, (My485UART + 3)
   \   00000008   9120....           LDS     R18, (My485UART + 4)
   \   0000000C   9130....           LDS     R19, (My485UART + 5)
   \   00000010   1702               CP      R16, R18
   \   00000012   0713               CPC     R17, R19
   \   00000014   F4A8               BRCC    ??INT_Handler_UDRE_USART0_0
     56                  UDR0 = My485UART.pTxBuffer[ My485UART.TxLast ];     // Send a character
   \   00000016   9100....           LDS     R16, (My485UART + 2)
   \   0000001A   9110....           LDS     R17, (My485UART + 3)
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   ....               SUBI    R30, LOW((-(My485UART + 121) & 0xFFFF))
   \   00000022   ....               SBCI    R31, HIGH((-(My485UART + 121) & 0xFFFF))
   \   00000024   8100               LD      R16, Z
   \   00000026   9300....           STS     _A_UDR0, R16
     57                  My485UART.TxLast++;
   \   0000002A   9100....           LDS     R16, (My485UART + 2)
   \   0000002E   9110....           LDS     R17, (My485UART + 3)
   \   00000032   5F0F               SUBI    R16, 255
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   9300....           STS     (My485UART + 2), R16
   \   0000003A   9310....           STS     (My485UART + 3), R17
   \   0000003E   9508               RET
     58              } else{   
     59                  OS_DI();             // Disable before allowing Tx interrupt
   \                     ??INT_Handler_UDRE_USART0_0:
   \   00000040   94F8               cli
     60                  UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000042   910000C1           LDS     R16, 193
   \   00000046   7D0F               ANDI    R16, 0xDF
   \   00000048   930000C1           STS     193, R16
     61                  UCSR0A |= (__BIT_MASK( TXC0)) ;               // Clear int bit in TXC.
   \   0000004C   910000C0           LDS     R16, 192
   \   00000050   6400               ORI     R16, 0x40
   \   00000052   930000C0           STS     192, R16
     62                  UCSR0B |= __BIT_MASK( TXCIE0) ;               // Enable TXC int.
   \   00000056   910000C1           LDS     R16, 193
   \   0000005A   6400               ORI     R16, 0x40
   \   0000005C   930000C1           STS     193, R16
     63              }           
     64          } 
   \   00000060   9508               RET
   \   00000062                      REQUIRE _A_UDR0
   \   00000062                      REQUIRE _A_UCSR0B
   \   00000062                      REQUIRE _A_UCSR0A
     65          
     66          #pragma vector = USART0_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
     67          __interrupt void IntHandler_UDRE_USART0( void ){   
   \                     IntHandler_UDRE_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     68              OS_CallISR(INT_Handler_UDRE_USART0);
   \   00000024   ....               LDI     R16, LOW(INT_Handler_UDRE_USART0/2)
   \   00000026   ....               LDI     R17, (INT_Handler_UDRE_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
     69          } 

   \                                 In  segment INTVEC, offset 0x64, root
   \                     `??IntHandler_RX_USART0::??INTVEC 100`:
   \   00000064   ........           JMP     IntHandler_RX_USART0

   \                                 In  segment INTVEC, offset 0x68, root
   \                     `??IntHandler_UDRE_USART0::??INTVEC 104`:
   \   00000068   ........           JMP     IntHandler_UDRE_USART0

   \                                 In  segment INTVEC, offset 0x6c, root
   \                     `??IntHandler_TX_USART0::??INTVEC 108`:
   \   0000006C   ........           JMP     IntHandler_TX_USART0
     70          #endif
     71          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   INT_Handler_RX_USART0
        1      2   -> OS_PutMailCond1
      0      2   INT_Handler_TX_USART0
        0      2   -> OS_SignalEvent
      0      2   INT_Handler_UDRE_USART0
     16      2   IntHandler_RX_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_TX_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_UDRE_USART0
       16      2   -> OS_CallISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      42  ?Subroutine0
      54  INT_Handler_RX_USART0
      22  INT_Handler_TX_USART0
      98  INT_Handler_UDRE_USART0
      40  IntHandler_RX_USART0
       4  IntHandler_RX_USART0::??INTVEC 100
      42  IntHandler_TX_USART0
       4  IntHandler_TX_USART0::??INTVEC 108
      42  IntHandler_UDRE_USART0
       4  IntHandler_UDRE_USART0::??INTVEC 104
       1  _A_PORTE
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UDR0

 
   4 bytes in segment ABSOLUTE
 340 bytes in segment CODE
  12 bytes in segment INTVEC
 
 340 bytes of CODE memory (+ 12 bytes shared)
   0 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: 1
