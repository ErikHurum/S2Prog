###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       13/Dec/2022  10:12:02
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart active\Lib\segment_init.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWEC5F.tmp ("D:\S2Prog\IO\hart
#        active\Lib\segment_init.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\hart
#        active\Release\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\hart active\Release\List" -y --initializers_in_flash
#        --enable_external_bus -DENABLE_BIT_DEFINITIONS -e -I
#        "D:\S2Prog\IO\hart active\INC\\" -I ..\..\..\Shared\Inc\\
#        --eeprom_size 4096 --dlib --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\hart active\Release\List\segment_init.lst
#    Object file  =  D:\S2Prog\IO\hart active\Release\Obj\segment_init.r90
#
###############################################################################

D:\S2Prog\IO\hart active\Lib\segment_init.c
      1          /**************************************************************
      2           **             - __segment_init.c -
      3           **
      4           **     Segment initialization that must be
      5           **     performed before main is called.
      6           **
      7           **     Used with iccAVR.
      8           **
      9           **     Copyright 1999 IAR Systems AB. All rights reserved.
     10           **
     11           **     $Revision: 6756 $
     12           **
     13           **************************************************************/
     14          #include "segment_init.h"
     15          #include <intrinsics.h>
     16          
     17          /* We're using extended keywords in this file. Make sure */
     18          /* that the compiler has IAR extensions enabled.         */
     19          #pragma language=extended
     20          
     21          /* If you are using C or EC++ code then you must include  */
     22          /* the segment initialization code below or supply your   */
     23          /* own version of segment initialization code. Otherwise  */
     24          /* we cannot guarantee that any C or EC++ code will work. */
     25          /* If you're only using assembler modules then you don't  */
     26          /* need to initialize any segments at all.                */
     27          
     28          #ifdef __cplusplus
     29          extern "C" {
     30          #endif
     31          
     32          /* __segment_init */
     33          
     34          #pragma optimize=no_inline

   \                                 In  segment CODE, align 2, keep-with-next
     35          static __x void __memclr(DstPtr_Type dst, Counter_Type size)
   \                     __memclr:
     36          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000000   E020               LDI     R18, 0
     37            do {
     38              *dst++ = 0;
   \                     ??__memclr_0:
   \   00000002   932D               ST      X+, R18
     39            } while(--size != 0);
   \   00000004   5001               SUBI    R16, 1
   \   00000006   4010               SBCI    R17, 0
   \   00000008   F7E1               BRNE    ??__memclr_0
     40          }
   \   0000000A   9508               RET
     41          
     42          #pragma optimize=no_inline

   \                                 In  segment CODE, align 2, keep-with-next
     43          static __x_z void __flashcpy(DstPtr_Type dst, SrcPtr_Type src, Counter_Type size)
   \                     __flashcpy:
     44          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     45            do {
     46              *dst++ = *src++;
   \                     ??__flashcpy_0:
   \   00000000   BF3B               OUT     0x3B, R19
   \   00000002   9126               ELPM    R18, Z
   \   00000004   932D               ST      X+, R18
   \   00000006   5FEF               SUBI    R30, 255
   \   00000008   4FFF               SBCI    R31, 255
   \   0000000A   4F3F               SBCI    R19, 255
     47            } while(--size != 0);
   \   0000000C   5001               SUBI    R16, 1
   \   0000000E   4010               SBCI    R17, 0
   \   00000010   F7B9               BRNE    ??__flashcpy_0
     48          }
   \   00000012   9508               RET
     49          

   \                                 In  segment CODE, align 2, keep-with-next
     50          __C_task void __segment_init(void)
   \                     __segment_init:
     51          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     52            SegmentInitBlockPtr_Type InitTable;
     53          
     54            /* Initialize the INITTAB pointer. */
     55            InitTable = __segment_begin("INITTAB");
   \   00000000   ....               LDI     R20, LOW(SFB(INITTAB))
   \   00000002   ....               LDI     R21, HIGH(SFB(INITTAB))
   \   00000004   ....               LDI     R22, (SFB(INITTAB)) >> 16
     56          
     57            /* Loop over all copy/zero blocks in the INITTAB segment */
     58            do
     59            {
     60              /* Fetch initialization data from the INITTAB segment. */
     61              Counter_Type  size = InitTable->Cnt;
   \                     ??__segment_init_0:
   \   00000006   01FA               MOVW    R31:R30, R21:R20
   \   00000008   2F36               MOV     R19, R22
   \   0000000A   BF3B               OUT     0x3B, R19
   \   0000000C   9107               ELPM    R16, Z+
   \   0000000E   9116               ELPM    R17, Z
     62              DstPtr_Type   dst  = InitTable->Dst;
   \   00000010   01FA               MOVW    R31:R30, R21:R20
   \   00000012   5FEE               SUBI    R30, 254
   \   00000014   4FFF               SBCI    R31, 255
   \   00000016   4F3F               SBCI    R19, 255
   \   00000018   BF3B               OUT     0x3B, R19
   \   0000001A   91A7               ELPM    R26, Z+
   \   0000001C   91B6               ELPM    R27, Z
     63              SrcPtr_Type   src  = InitTable->Src;
   \   0000001E   01FA               MOVW    R31:R30, R21:R20
   \   00000020   2F36               MOV     R19, R22
   \   00000022   5FEC               SUBI    R30, 252
   \   00000024   4FFF               SBCI    R31, 255
   \   00000026   4F3F               SBCI    R19, 255
   \   00000028   BF3B               OUT     0x3B, R19
   \   0000002A   9007               ELPM    R0, Z+
   \   0000002C   9017               ELPM    R1, Z+
   \   0000002E   9026               ELPM    R2, Z
     64          
     65              /* If the src is 0 then we should clear a memory */
     66              /* block, otherwise it's a copy operation.       */
     67              if (src != 0)
   \   00000030   2D20               MOV     R18, R0
   \   00000032   2921               OR      R18, R1
   \   00000034   2922               OR      R18, R2
   \   00000036   F021               BREQ    ??__segment_init_1
     68                __flashcpy(dst, src, size);
   \   00000038   01F0               MOVW    R31:R30, R1:R0
   \   0000003A   2D32               MOV     R19, R2
   \   0000003C   ....               RCALL   __flashcpy
   \   0000003E   C001               RJMP    ??__segment_init_2
     69              else
     70                __memclr(dst, size);
   \                     ??__segment_init_1:
   \   00000040   ....               RCALL   __memclr
     71          
     72              /* Advance the INITTAB pointer. */
     73              ++InitTable;
   \                     ??__segment_init_2:
   \   00000042   5F49               SUBI    R20, 249
   \   00000044   4F5F               SBCI    R21, 255
   \   00000046   4F6F               SBCI    R22, 255
     74            }  while(InitTable < __segment_end("INITTAB"));
   \   00000048   ....               LDI     R17, HIGH(SFE(INITTAB))
   \   0000004A   ....               LDI     R18, (SFE(INITTAB)) >> 16
   \   0000004C   ....               CPI     R20, LOW(SFE(INITTAB))
   \   0000004E   0751               CPC     R21, R17
   \   00000050   0762               CPC     R22, R18
   \   00000052   F2C8               BRCS    ??__segment_init_0
     75          }
   \   00000054   9508               RET
     76          
     77          #ifdef __cplusplus
     78          }
     79          #endif

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   __flashcpy
      2   __memclr
      2   __segment_init
        2   -> __flashcpy
        2   -> __memclr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      20  __flashcpy
      12  __memclr
      86  __segment_init

 
 118 bytes in segment CODE
 
 118 bytes of CODE memory

Errors: none
Warnings: none
