###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       31/Jan/2023  09:48:37
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\AN-ZBHART\Src\Misc.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW84D2.tmp
#        (D:\S2Prog\IO\AN-ZBHART\Src\Misc.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\AN-ZBHART\Release\Obj -D OS_LIBMODE_R -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\AN-ZBHART\Release\List -y --initializers_in_flash
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\AN-ZBHART\INC\\ -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\AN-ZBHART\Release\List\Misc.lst
#    Object file  =  D:\S2Prog\IO\AN-ZBHART\Release\Obj\Misc.r90
#
###############################################################################

D:\S2Prog\IO\AN-ZBHART\Src\Misc.c
      1          /****************************************************************************************
      2          /  Misc. routines
      3          /
      4          ***************************************************************************************/
      5          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_PINE
   \                     _A_PINE:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "stdlib.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          #include "inavr.h"
     12          #include "string.h"
     13          #include "hart.h"
     14          
     15          __no_init int RestartCnt             @0x21FD;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          char RestartCmd = 0;
   \                     RestartCmd:
   \   00000000                      DS8 1
     17          /*************************************************************************
     18          *   (This is a task)
     19          *  Watchdog handler
     20          *
     21          *************************************************************************/
     22          #define NUMBER_OF_TASKS 7

   \                                 In  segment CODE, align 2, keep-with-next
     23          void WatchDogHandler(void) {
   \                     WatchDogHandler:
   \   00000000   928A               ST      -Y, R8
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R8_is_cg_reg
     24          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     25              static const char *StackCheck[] = { 
     26                  StackTest1              , StackTest2            , 
     27                  StackTest3              , StackTest4            , 
     28                  StackTest5              , StackTest6            , 
     29                  _hart_task0.StackTest1  , _hart_task0.StackTest2, 
     30                  _hart_task1.StackTest1  , _hart_task1.StackTest2,
     31                  _hart_task2.StackTest1  , _hart_task2.StackTest2 };
     32          #endif
     33              char HartComCheckTimeCnt = 0;
   \   0000000A   2488               CLR     R8
     34          #ifdef OS_LIBMODE_DP
     35              char LoadCnt            = 0;
     36              int RawPerformance[NUMBER_OF_TASKS];
     37              static OS_TASK *MyTasks[NUMBER_OF_TASKS] = { &_hart_task0.tcb, &_hart_task1.tcb, &_hart_task2.tcb, &TCB_USART0, &TCB_AD7715, &TCB_INT_ADC, &TCB_WATCHDOG };
     38          #endif
     39              OS_Delay(100);                         // wait 1 seconds for other tasks to start and set TaskStatus
   \   0000000C   E604               LDI     R16, 100
   \   0000000E   E010               LDI     R17, 0
   \   00000010   ........           CALL    OS_Delay
     40              asm("WDR");                             // kick the dog!!
   \   00000014   95A8               WDR
     41              WDTCSR = 0x1f;
   \   00000016   E10F               LDI     R16, 31
   \   00000018   9300....           STS     _A_WDTCSR, R16
     42              WDTCSR = 0x0f;
   \   0000001C   E00F               LDI     R16, 15
   \   0000001E   9300....           STS     _A_WDTCSR, R16
     43              asm("WDR");                             // kick the dog!!
   \   00000022   95A8               WDR
   \   00000024   C01E               RJMP    ??WatchDogHandler_0
     44              while (1) {
     45                  OS_Delay(500);
     46                  OS_U32 CurrentTime = OS_Time;
     47                  if (CriticalComError) {
     48                      OS_Error(ZB_ERR_UART);
     49                  } else if (HartComCheckTimeCnt++ >= 10) {
     50                      if (labs(CurrentTime - _hart_task0.LastHartTaskRunTime) > 10000) {
     51                          OS_Error(ZB_ERR_MODEM_0);
     52                      }
     53                      if (labs(CurrentTime - _hart_task1.LastHartTaskRunTime) > 10000) {
     54                          OS_Error(ZB_ERR_MODEM_1);
     55                      }
     56                      if (labs(CurrentTime - _hart_task2.LastHartTaskRunTime) > 10000) {
     57                          OS_Error(ZB_ERR_MODEM_2);
     58                      }
     59                  } else if (labs(CurrentTime - Last_ADC_OK_Time) > 5000) {
   \                     ??WatchDogHandler_1:
   \   00000026   9100....           LDS     R16, Last_ADC_OK_Time
   \   0000002A   9110....           LDS     R17, (Last_ADC_OK_Time + 1)
   \   0000002E   9120....           LDS     R18, (Last_ADC_OK_Time + 2)
   \   00000032   9130....           LDS     R19, (Last_ADC_OK_Time + 3)
   \   00000036   1B80               SUB     R24, R16
   \   00000038   0B91               SBC     R25, R17
   \   0000003A   0BA2               SBC     R26, R18
   \   0000003C   0BB3               SBC     R27, R19
   \   0000003E   018C               MOVW    R17:R16, R25:R24
   \   00000040   019D               MOVW    R19:R18, R27:R26
   \   00000042   ........           CALL    labs
   \   00000046   3809               CPI     R16, 137
   \   00000048   4113               SBCI    R17, 19
   \   0000004A   4020               SBCI    R18, 0
   \   0000004C   4030               SBCI    R19, 0
   \   0000004E   F024               BRLT    ??WatchDogHandler_2
     60                      OS_Error(ZB_ERR_EXT_ADC);
   \   00000050   E005               LDI     R16, 5
   \                     ??WatchDogHandler_3:
   \   00000052   E010               LDI     R17, 0
   \   00000054   ........           CALL    OS_Error
     61                  }
     62                  if (!RestartCmd) {
   \                     ??WatchDogHandler_2:
   \   00000058   9100....           LDS     R16, RestartCmd
   \   0000005C   2300               TST     R16
   \   0000005E   F409               BRNE    ??WatchDogHandler_0
     63                      __watchdog_reset();               //kick the dog
   \   00000060   95A8               WDR
     64                  }
   \                     ??WatchDogHandler_0:
   \   00000062   EF04               LDI     R16, 244
   \   00000064   E011               LDI     R17, 1
   \   00000066   ........           CALL    OS_Delay
   \   0000006A   9180....           LDS     R24, (OS_Global + 18)
   \   0000006E   9190....           LDS     R25, (OS_Global + 19)
   \   00000072   91A0....           LDS     R26, (OS_Global + 20)
   \   00000076   91B0....           LDS     R27, (OS_Global + 21)
   \   0000007A   9100....           LDS     R16, CriticalComError
   \   0000007E   2300               TST     R16
   \   00000080   F011               BREQ    ??WatchDogHandler_4
   \   00000082   E004               LDI     R16, 4
   \   00000084   CFE6               RJMP    ??WatchDogHandler_3
   \                     ??WatchDogHandler_4:
   \   00000086   E00A               LDI     R16, 10
   \   00000088   1680               CP      R8, R16
   \   0000008A   9483               INC     R8
   \   0000008C   F260               BRCS    ??WatchDogHandler_1
   \   0000008E   9140....           LDS     R20, (_hart_task0 + 1331)
   \   00000092   9150....           LDS     R21, (_hart_task0 + 1332)
   \   00000096   9160....           LDS     R22, (_hart_task0 + 1333)
   \   0000009A   9170....           LDS     R23, (_hart_task0 + 1334)
   \   0000009E   018C               MOVW    R17:R16, R25:R24
   \   000000A0   019D               MOVW    R19:R18, R27:R26
   \   000000A2   1B04               SUB     R16, R20
   \   000000A4   0B15               SBC     R17, R21
   \   000000A6   0B26               SBC     R18, R22
   \   000000A8   0B37               SBC     R19, R23
   \   000000AA   ........           CALL    labs
   \   000000AE   3101               CPI     R16, 17
   \   000000B0   4217               SBCI    R17, 39
   \   000000B2   4020               SBCI    R18, 0
   \   000000B4   4030               SBCI    R19, 0
   \   000000B6   F024               BRLT    ??WatchDogHandler_5
   \   000000B8   E001               LDI     R16, 1
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   ........           CALL    OS_Error
   \                     ??WatchDogHandler_5:
   \   000000C0   9140....           LDS     R20, (_hart_task1 + 1331)
   \   000000C4   9150....           LDS     R21, (_hart_task1 + 1332)
   \   000000C8   9160....           LDS     R22, (_hart_task1 + 1333)
   \   000000CC   9170....           LDS     R23, (_hart_task1 + 1334)
   \   000000D0   018C               MOVW    R17:R16, R25:R24
   \   000000D2   019D               MOVW    R19:R18, R27:R26
   \   000000D4   1B04               SUB     R16, R20
   \   000000D6   0B15               SBC     R17, R21
   \   000000D8   0B26               SBC     R18, R22
   \   000000DA   0B37               SBC     R19, R23
   \   000000DC   ........           CALL    labs
   \   000000E0   3101               CPI     R16, 17
   \   000000E2   4217               SBCI    R17, 39
   \   000000E4   4020               SBCI    R18, 0
   \   000000E6   4030               SBCI    R19, 0
   \   000000E8   F024               BRLT    ??WatchDogHandler_6
   \   000000EA   E002               LDI     R16, 2
   \   000000EC   E010               LDI     R17, 0
   \   000000EE   ........           CALL    OS_Error
   \                     ??WatchDogHandler_6:
   \   000000F2   9100....           LDS     R16, (_hart_task2 + 1331)
   \   000000F6   9110....           LDS     R17, (_hart_task2 + 1332)
   \   000000FA   9120....           LDS     R18, (_hart_task2 + 1333)
   \   000000FE   9130....           LDS     R19, (_hart_task2 + 1334)
   \   00000102   1B80               SUB     R24, R16
   \   00000104   0B91               SBC     R25, R17
   \   00000106   0BA2               SBC     R26, R18
   \   00000108   0BB3               SBC     R27, R19
   \   0000010A   018C               MOVW    R17:R16, R25:R24
   \   0000010C   019D               MOVW    R19:R18, R27:R26
   \   0000010E   ........           CALL    labs
   \   00000112   3101               CPI     R16, 17
   \   00000114   4217               SBCI    R17, 39
   \   00000116   4020               SBCI    R18, 0
   \   00000118   4030               SBCI    R19, 0
   \   0000011A   F40C               BRGE    $+2+2
   \   0000011C   CF9D               RJMP    ??WatchDogHandler_2
   \   0000011E   E003               LDI     R16, 3
   \   00000120   CF98               RJMP    ??WatchDogHandler_3
   \   00000122                      REQUIRE _A_WDTCSR
     65          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     66                  char ErrorStack = 0;
     67                  for (char i = 0; i < NELEMENTS(StackCheck); i++) {
     68                      if (memcmp(StackCheck[i], "123456789", 10)) {
     69                          ErrorStack = i + 1;
     70                      }
     71                  }
     72          #endif
     73          #ifdef OS_LIBMODE_DP
     74                  if (LoadCnt++ > 5) {
     75                      OS_STAT_Sample();
     76                      OS_Delay(10);
     77                      int tmpRawLoad = 0;
     78                      for (char i = 0; i < NUMBER_OF_TASKS; i++) {
     79                          RawPerformance[i] = OS_STAT_GetLoad(MyTasks[i]);
     80                          tmpRawLoad       += RawPerformance[i];
     81                      }
     82                  }
     83          #endif
     84              }
     85          }
     86          
     87          
     88          /*************************************************************************
     89          *
     90          *  Get my address
     91          *
     92          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     93          char MyAddress(void) {
   \                     MyAddress:
     94          
     95          #if (OS_UART == 0)
     96              return 0;                   // Debug only
     97          #else
     98              int Address = (~(PINE >> 4) & 0x0f);
     99              return Address;
   \   00000000   B10C               IN      R16, 0x0C
   \   00000002   9502               SWAP    R16
   \   00000004   700F               ANDI    R16, 0x0F
   \   00000006   9500               COM     R16
   \   00000008   700F               ANDI    R16, 0x0F
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_PINE
    100              //return(~(PINE>>4) & 0x0f) ;
    101          #endif
    102          }
    103          
    104          /*************************************************************************
    105          *
    106          *  Check for legal float
    107          *
    108          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    109          char IsFloat(float A) {
   \                     IsFloat:
    110              long exp;
    111              // A NAN has an exponent of 255 (shifted left 23 positions) and
    112              // Denormalized has an exponent set to 0
    113              exp = *(long *)&A & 0x7F800000L;
   \   00000000   E000               LDI     R16, 0
   \   00000002   7820               ANDI    R18, 0x80
   \   00000004   773F               ANDI    R19, 0x7F
    114              //int mantissa = *(int*)&A & 0x007FFFFF;
    115              if (exp && (exp != 0x7F800000L)) {
   \   00000006   2F42               MOV     R20, R18
   \   00000008   2B43               OR      R20, R19
   \   0000000A   F029               BREQ    ??IsFloat_0
   \   0000000C   3000               CPI     R16, 0
   \   0000000E   4820               SBCI    R18, 128
   \   00000010   473F               SBCI    R19, 127
   \   00000012   F009               BREQ    ??IsFloat_0
    116                  return (true);
   \   00000014   E001               LDI     R16, 1
    117              }
    118              return (false);
   \                     ??IsFloat_0:
   \   00000016   9508               RET
    119          }
    120          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   IsFloat
      0      2   MyAddress
      5      2   WatchDogHandler
        5      2   -> OS_Delay
        5      2   -> OS_Error
        5      2   -> labs


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  IsFloat
      12  MyAddress
       1  RestartCmd
     290  WatchDogHandler
       1  _A_PINE
       1  _A_WDTCSR
       7  -- Other

 
   2 bytes in segment ABSOLUTE
 326 bytes in segment CODE
   7 bytes in segment INITTAB
   1 byte  in segment NEAR_Z
 
 326 bytes of CODE memory (+ 7 bytes shared)
   1 byte  of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
