###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       29/Jan/2024  09:35:44
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\hart.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWBD1A.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\hart.c" --cpu=m1280
#        -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Release\Obj" -D
#        OS_LIBMODE_R -D OS_UART=-1 -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Release\List" -y
#        --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\INC\\" -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -Ohs)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Release\List\hart.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Release\Obj\hart.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\AN-ZBHART\Src\hart.c
      1          #include <stdio.h>
      2          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x136
   \   union <unnamed> volatile __ext_io _A_UDR3
   \                     _A_UDR3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x134
   \   union <unnamed> volatile __ext_io _A_UBRR3
   \                     _A_UBRR3:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x132
   \   union <unnamed> volatile __ext_io _A_UCSR3C
   \                     _A_UCSR3C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x131
   \   union <unnamed> volatile __ext_io _A_UCSR3B
   \                     _A_UCSR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x130
   \   union <unnamed> volatile __ext_io _A_UCSR3A
   \                     _A_UCSR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd6
   \   union <unnamed> volatile __io _A_UDR2
   \                     _A_UDR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd4
   \   union <unnamed> volatile __io _A_UBRR2
   \                     _A_UBRR2:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xd2
   \   union <unnamed> volatile __io _A_UCSR2C
   \                     _A_UCSR2C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd1
   \   union <unnamed> volatile __io _A_UCSR2B
   \                     _A_UCSR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd0
   \   union <unnamed> volatile __io _A_UCSR2A
   \                     _A_UCSR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xce
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1
      3          #include "version.h"
      4          #include "inavr.h"
      5          #include "RTOS.h"
      6          
      7          #include "constants.h"
      8          #include "hart_common.h"
      9          #include "hart.h"
     10          #include "hart_diag.h"
     11          #include "hart_msg.h"
     12          #include "hart_gpio.h"
     13          #include "externals.h"
     14          
     15          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          extern volatile char CriticalComError = 0;
   \                     CriticalComError:
   \   00000000                      DS8 1
     17          ////////////////////////////////////////////////////////////////////////////////
     18          //
     19          // private prototypes
     20          //
     21          ////////////////////////////////////////////////////////////////////////////////
     22          static void hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off);
     23          
     24          static void hart_config_uart(HartTaskStruct *task);
     25          static void hart_reset_tx(HartTaskStruct *task);
     26          static void hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl);
     27          static void hart_start_transaction(HartTaskStruct *task);
     28          
     29          static void hart_irq_tx_next(HartTaskStruct *task);
     30          static void hart_irq_finish_tx(HartTaskStruct *task);
     31          
     32          static void do_hart_transaction(HartTaskStruct *task, hart_channel_t current_chnl, HartTransaction *t);
     33          
     34          void HART_Task(void *pVoid);
     35          
     36          static void vega_radar_make_request(HartTaskStruct *task, hart_channel_t current_chnl);
     37          static void vega_radar_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type);
     38          //static void vega_radar_handle_rx_complete(HartTaskStruct *task, hart_channel_t current_chnl);
     39          static uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl);
     40          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     41          HartTaskStruct       _hart_task0 =
   \                     _hart_task0:
   \   00000000                      DS8 1395
   \   00000573                      REQUIRE `?<Initializer for _hart_task0>`
     42          {
     43          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     44              .StackTest1   = { "123456789" },
     45              .StackTest2   = { "123456789" },
     46          #endif
     47              .modem_no     = hart_modem_0,
     48              .start_chnl   = hart_channel_0,
     49              .end_chnl     = hart_channel_3,
     50          };
     51          
     52          HartTaskStruct       _hart_task1 =
   \                     _hart_task1:
   \   00000573                      DS8 1395
   \   00000AE6                      REQUIRE `?<Initializer for _hart_task1>`
     53          {
     54          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     55              .StackTest1   = { "123456789" },
     56              .StackTest2   = { "123456789" },
     57          #endif
     58              .modem_no     = hart_modem_1,
     59              .start_chnl   = hart_channel_4,
     60              .end_chnl     = hart_channel_7,
     61          };
     62          
     63          HartTaskStruct       _hart_task2 =
   \                     _hart_task2:
   \   00000AE6                      DS8 1395
   \   00001059                      REQUIRE `?<Initializer for _hart_task2>`
     64          {
     65          #if defined( OS_LIBMODE_D) || defined( OS_LIBMODE_S )
     66              .StackTest1   = { "123456789" },
     67              .StackTest2   = { "123456789" },
     68          #endif
     69              .modem_no     = hart_modem_2,
     70              .start_chnl   = hart_channel_8,
     71              .end_chnl     = hart_channel_11,
     72          };
     73          
     74          ////////////////////////////////////////////////////////////////////////////////
     75          //
     76          // hart module privates
     77          //
     78          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     79          static HartTransaction   _demo1_transaction =
   \                     _demo1_transaction:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for _demo1_transaction>`
     80          {
     81              .make_request = vega_radar_make_request,
     82              .complete     = ReceiveReply, //vega_radar_handle_rx_complete,
     83              .error        = vega_radar_handle_rx_error,
     84          };
     85          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     86          static HartChannel          _hart_channels[HART_MAX_CHANNEL] =
   \                     _hart_channels:
   \   00000000                      DS8 276
   \   00000114                      REQUIRE `?<Initializer for _hart_channels>`
     87          {
     88              { .chnl_num       = hart_channel_0  },
     89              { .chnl_num       = hart_channel_1  },
     90              { .chnl_num       = hart_channel_2  },
     91              { .chnl_num       = hart_channel_3  },
     92              { .chnl_num       = hart_channel_4  },
     93              { .chnl_num       = hart_channel_5  },
     94              { .chnl_num       = hart_channel_6  },
     95              { .chnl_num       = hart_channel_7  },
     96              { .chnl_num       = hart_channel_8  },
     97              { .chnl_num       = hart_channel_9  },
     98              { .chnl_num       = hart_channel_10 },
     99              { .chnl_num       = hart_channel_11 },
    100          };
    101          
    102          #define HART_EEPROM_START_ADDRESS         0x800
    103          #define HART_EEPROM_RSP_DELAY_ADDRESS     (HART_EEPROM_START_ADDRESS + 2)
    104          
    105          static volatile uint16_t          _eeprom_power_status;
    106          static volatile uint16_t          _rsp_delay = 0;
    107          
    108          ////////////////////////////////////////////////////////////////////////////////
    109          //
    110          // hart channel specifics
    111          //
    112          ////////////////////////////////////////////////////////////////////////////////
    113          /*
    114          void hart_debug_check(void)
    115          {
    116            if((UCSR2B & _BV(TXCIE2)) == 0)
    117            {
    118              while(1)
    119                ;
    120            }
    121          }
    122          */
    123          
    124          /*
    125          static inline void hart_channel_lock(HartChannel *channel) {
    126              switch ( channel->chnl_num ) {
    127              case hart_channel_0:
    128              case hart_channel_1:
    129              case hart_channel_2:
    130              case hart_channel_3:
    131                  OS_Use(&_hart_task0.channel_lock);
    132                  break;
    133          
    134              case hart_channel_4:
    135              case hart_channel_5:
    136              case hart_channel_6:
    137              case hart_channel_7:
    138                  OS_Use(&_hart_task1.channel_lock);
    139                  break;
    140          
    141              case hart_channel_8:
    142              case hart_channel_9:
    143              case hart_channel_10:
    144              case hart_channel_11:
    145                  OS_Use(&_hart_task2.channel_lock);
    146                  break;
    147              }
    148          }
    149          
    150          static inline void hart_channel_unlock(HartChannel *channel) {
    151              switch ( channel->chnl_num ) {
    152              case hart_channel_0:
    153              case hart_channel_1:
    154              case hart_channel_2:
    155              case hart_channel_3:
    156                  OS_Unuse(&_hart_task0.channel_lock);
    157                  break;
    158          
    159              case hart_channel_4:
    160              case hart_channel_5:
    161              case hart_channel_6:
    162              case hart_channel_7:
    163                  OS_Unuse(&_hart_task1.channel_lock);
    164                  break;
    165          
    166              case hart_channel_8:
    167              case hart_channel_9:
    168              case hart_channel_10:
    169              case hart_channel_11:
    170                  OS_Unuse(&_hart_task2.channel_lock);
    171                  break;
    172              }
    173          }
    174          */
    175          static inline void hart_channel_reset(HartChannel *channel) {
    176              //hart_channel_lock(channel);
    177          
    178              channel->status         = HartChannelStatus_No_Response;
    179              channel->power_status   = HartChannelPowerStatus_OFF;
    180          
    181              channel->rx_invalid_msg = 0;
    182              channel->rx_csum_err    = 0;
    183              channel->rx_timeout     = 0;
    184              channel->total_reqs     = 0;
    185              channel->total_success  = 0;
    186          
    187              //hart_channel_unlock(channel);
    188          }
    189          
    190          static inline void hart_channel_set_status(HartChannel *channel, HartChannelStatus status) {
    191              //hart_channel_lock(channel);
    192          
    193              channel->status     = status;
    194          
    195              //hart_channel_unlock(channel);
    196          }
    197          
    198          static inline void hart_channel_set_power_status(HartChannel *channel, HartChannelPowerStatus status) {
    199              //hart_channel_lock(channel);
    200          
    201              channel->power_status   = status;
    202          
    203              //hart_channel_unlock(channel);
    204          }
    205          
    206          static inline void hart_channel_inc_stat(HartChannel *channel, HartChannelStatItem item) {
    207              //hart_channel_lock(channel);
    208          
    209              switch ( item ) {
    210              case HartChannelStatItem_RX_INVALID:
    211                  channel->rx_invalid_msg++;
    212                  break;
    213          
    214              case HartChannelStatItem_RX_CSUM:
    215                  channel->rx_csum_err++;
    216                  break;
    217          
    218              case HartChannelStatItem_RX_TIMEOUT:
    219                  channel->rx_timeout++;
    220                  break;
    221          
    222              case HartChannelStatItem_TOTAL_REQS:
    223                  channel->total_reqs++;
    224                  break;
    225          
    226              case HartChannelStatItem_TOTAL_SUCCESS:
    227                  channel->total_success++;
    228                  break;
    229              }
    230          
    231              //hart_channel_unlock(channel);
    232          }
    233          
    234          
    235          ////////////////////////////////////////////////////////////////////////////////
    236          //
    237          // private utilities
    238          //
    239          ////////////////////////////////////////////////////////////////////////////////
    240          static void hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off) {
    241              //
    242              // XXX be careful about channel lock when calling this function.
    243              //
    244              HartChannel *c = &_hart_channels[chnl];
    245          
    246              if ( on_off == HartChannelPowerStatus_ON ) {
    247                  hart_gpio_power_on(chnl);
    248              } else {
    249                  hart_gpio_power_off(chnl);
    250              }
    251              hart_channel_set_power_status(c, on_off);
    252          }
    253          
    254          static void hart_control_Rx_Enable(hart_modem_t   modem, uint8_t enable) {
    255              switch ( modem ) {
    256              case hart_modem_0:
    257                  if ( enable ) {
    258                      UCSR1B |= _BV(RXEN1);
    259                  } else {
    260                      UCSR1B &= ~_BV(RXEN1);
    261                  }
    262                  break;
    263          
    264              case hart_modem_1:
    265                  if ( enable ) {
    266                      UCSR2B |= _BV(RXEN2);
    267                  } else {
    268                      UCSR2B &= ~_BV(RXEN2);
    269                  }
    270                  break;
    271          
    272              case hart_modem_2:
    273                  if ( enable ) {
    274                      UCSR3B |= _BV(RXEN3);
    275                  } else {
    276                      UCSR3B &= ~_BV(RXEN3);
    277                  }
    278                  break;
    279              }
    280          }
    281          
    282          ////////////////////////////////////////////////////////////////////////////////
    283          //
    284          // common IRQ context utilities
    285          //
    286          // this routines shouldn't be called in task context.
    287          //
    288          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    289          static void hart_irq_tx_next(HartTaskStruct *task) {
   \                     hart_irq_tx_next:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004   01F8               MOVW    R31:R30, R17:R16
    290              uint8_t  tndx = task->tx_buf_ndx;
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   5EAD               SUBI    R26, 237
   \   0000000A   4FBD               SBCI    R27, 253
   \   0000000C   9613               ADIW    R27:R26, 3
   \   0000000E   910D               LD      R16, X+
   \   00000010   911D               LD      R17, X+
    291              uint16_t len  = task->tx_len;
   \   00000012   912D               LD      R18, X+
   \   00000014   913C               LD      R19, X
   \   00000016   9716               SBIW    R27:R26, 6
    292              uint8_t b     = task->tx_buf[tndx++];
   \   00000018   E010               LDI     R17, 0
   \   0000001A   0FE0               ADD     R30, R16
   \   0000001C   1FF1               ADC     R31, R17
   \   0000001E   5EE6               SUBI    R30, 230
   \   00000020   4FFD               SBCI    R31, 253
   \   00000022   8140               LD      R20, Z
   \   00000024   9503               INC     R16
    293              OS_DI();             // Disable before allowing interrupt
   \   00000026   94F8               cli
    294          
    295              switch ( task->modem_no ) {
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8110               LD      R17, Z
   \   0000002C   2311               TST     R17
   \   0000002E   F029               BREQ    ??hart_irq_tx_next_0
   \   00000030   951A               DEC     R17
   \   00000032   F0C9               BREQ    ??hart_irq_tx_next_1
   \   00000034   951A               DEC     R17
   \   00000036   F169               BREQ    ??hart_irq_tx_next_2
   \   00000038   C041               RJMP    ??hart_irq_tx_next_3
    296              case hart_modem_0:
    297                  if ( tndx >= len ) {
   \                     ??hart_irq_tx_next_0:
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   1702               CP      R16, R18
   \   0000003E   0713               CPC     R17, R19
   \   00000040   F078               BRCS    ??hart_irq_tx_next_4
    298                      UCSR1A |=  _BV(TXC1);       // clear TXC flag if set by any chance
   \   00000042   911000C8           LDS     R17, 200
   \   00000046   6410               ORI     R17, 0x40
   \   00000048   931000C8           STS     200, R17
    299                      UCSR1B &= ~_BV(UDRIE1);
   \   0000004C   911000C9           LDS     R17, 201
   \   00000050   7D1F               ANDI    R17, 0xDF
   \   00000052   931000C9           STS     201, R17
    300                      UCSR1B |=  _BV(TXCIE1);
   \   00000056   911000C9           LDS     R17, 201
   \   0000005A   6410               ORI     R17, 0x40
   \   0000005C   931000C9           STS     201, R17
    301                  }
    302                  UDR1 = b;
   \                     ??hart_irq_tx_next_4:
   \   00000060   9340....           STS     _A_UDR1, R20
    303                  break;
   \   00000064   C02B               RJMP    ??hart_irq_tx_next_3
    304          
    305              case hart_modem_1:
    306                  if ( tndx >= len ) {
   \                     ??hart_irq_tx_next_1:
   \   00000066   E010               LDI     R17, 0
   \   00000068   1702               CP      R16, R18
   \   0000006A   0713               CPC     R17, R19
   \   0000006C   F078               BRCS    ??hart_irq_tx_next_5
    307                      UCSR2A |=  _BV(TXC2);       // clear TXC flag if set by any chance
   \   0000006E   911000D0           LDS     R17, 208
   \   00000072   6410               ORI     R17, 0x40
   \   00000074   931000D0           STS     208, R17
    308                      UCSR2B &= ~_BV(UDRIE2);
   \   00000078   911000D1           LDS     R17, 209
   \   0000007C   7D1F               ANDI    R17, 0xDF
   \   0000007E   931000D1           STS     209, R17
    309                      UCSR2B |=  _BV(TXCIE2);
   \   00000082   911000D1           LDS     R17, 209
   \   00000086   6410               ORI     R17, 0x40
   \   00000088   931000D1           STS     209, R17
    310                  }
    311                  UDR2 = b;
   \                     ??hart_irq_tx_next_5:
   \   0000008C   9340....           STS     _A_UDR2, R20
    312                  break;
   \   00000090   C015               RJMP    ??hart_irq_tx_next_3
    313          
    314              case hart_modem_2:
    315                  if ( tndx >= len ) {
   \                     ??hart_irq_tx_next_2:
   \   00000092   E010               LDI     R17, 0
   \   00000094   1702               CP      R16, R18
   \   00000096   0713               CPC     R17, R19
   \   00000098   F078               BRCS    ??hart_irq_tx_next_6
    316                      UCSR3A |=  _BV(TXC3);       // clear TXC flag if set by any chance
   \   0000009A   91100130           LDS     R17, 304
   \   0000009E   6410               ORI     R17, 0x40
   \   000000A0   93100130           STS     304, R17
    317                      UCSR3B &= ~_BV(UDRIE3);
   \   000000A4   91100131           LDS     R17, 305
   \   000000A8   7D1F               ANDI    R17, 0xDF
   \   000000AA   93100131           STS     305, R17
    318                      UCSR3B |=  _BV(TXCIE3);
   \   000000AE   91100131           LDS     R17, 305
   \   000000B2   6410               ORI     R17, 0x40
   \   000000B4   93100131           STS     305, R17
    319                  }
    320                  UDR3 = b;
   \                     ??hart_irq_tx_next_6:
   \   000000B8   9340....           STS     _A_UDR3, R20
    321                  break;
    322              }
    323              task->tx_buf_ndx = tndx;
   \                     ??hart_irq_tx_next_3:
   \   000000BC   E010               LDI     R17, 0
   \   000000BE   8303               STD     Z+3, R16
   \   000000C0   8314               STD     Z+4, R17
    324          }
   \   000000C2   2FA6               MOV     R26, R22
   \   000000C4   2FB5               MOV     R27, R21
   \   000000C6   9508               RET
   \   000000C8                      REQUIRE _A_UCSR1A
   \   000000C8                      REQUIRE _A_UCSR1B
   \   000000C8                      REQUIRE _A_UDR1
   \   000000C8                      REQUIRE _A_UCSR2A
   \   000000C8                      REQUIRE _A_UCSR2B
   \   000000C8                      REQUIRE _A_UDR2
   \   000000C8                      REQUIRE _A_UCSR3A
   \   000000C8                      REQUIRE _A_UCSR3B
   \   000000C8                      REQUIRE _A_UDR3
    325          

   \                                 In  segment CODE, align 2, keep-with-next
    326          static void hart_irq_finish_tx(HartTaskStruct *task) {
   \                     hart_irq_finish_tx:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    327              OS_DI();             // Disable before allowing interrupt
   \   00000004   94F8               cli
    328              switch ( task->modem_no ) {
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   5EED               SUBI    R30, 237
   \   0000000A   4FFD               SBCI    R31, 253
   \   0000000C   8120               LD      R18, Z
   \   0000000E   2322               TST     R18
   \   00000010   F029               BREQ    ??hart_irq_finish_tx_0
   \   00000012   952A               DEC     R18
   \   00000014   F049               BREQ    ??hart_irq_finish_tx_1
   \   00000016   952A               DEC     R18
   \   00000018   F069               BREQ    ??hart_irq_finish_tx_2
   \   0000001A   C011               RJMP    ??hart_irq_finish_tx_3
    329              case hart_modem_0:
    330                  UCSR1B &=  ~_BV(TXCIE1);
   \                     ??hart_irq_finish_tx_0:
   \   0000001C   912000C9           LDS     R18, 201
   \   00000020   7B2F               ANDI    R18, 0xBF
   \   00000022   932000C9           STS     201, R18
    331                  break;
   \   00000026   C00B               RJMP    ??hart_irq_finish_tx_3
    332          
    333              case hart_modem_1:
    334                  UCSR2B &=  ~_BV(TXCIE2);
   \                     ??hart_irq_finish_tx_1:
   \   00000028   912000D1           LDS     R18, 209
   \   0000002C   7B2F               ANDI    R18, 0xBF
   \   0000002E   932000D1           STS     209, R18
    335                  break;
   \   00000032   C005               RJMP    ??hart_irq_finish_tx_3
    336          
    337              case hart_modem_2:
    338                  UCSR3B &=  ~_BV(TXCIE3);
   \                     ??hart_irq_finish_tx_2:
   \   00000034   91200131           LDS     R18, 305
   \   00000038   7B2F               ANDI    R18, 0xBF
   \   0000003A   93200131           STS     305, R18
    339                  break;
    340              }
    341          
    342              //
    343              // Disable demodulator on hart modem
    344              //
    345          #if HART_CONTROL_RTS_IN_TASK  == 0
    346              hart_gpio_hart_carrier_off_irq(task->modem_no);
    347          #endif
    348              if ( OS_IsTask(&task->tcb) ) {
   \                     ??hart_irq_finish_tx_3:
   \   0000003E   5001               SUBI    R16, 1
   \   00000040   4F1E               SBCI    R17, 254
   \   00000042   01C8               MOVW    R25:R24, R17:R16
   \   00000044   ........           CALL    OS_IsTask
   \   00000048   2300               TST     R16
   \   0000004A   F021               BREQ    ??hart_irq_finish_tx_4
    349                  OS_SignalEvent(HART_EVENT_TX_COMPLETE, &task->tcb);
   \   0000004C   019C               MOVW    R19:R18, R25:R24
   \   0000004E   E004               LDI     R16, 4
   \   00000050   ........           CALL    OS_SignalEvent
    350              }
    351          
    352              return;
   \                     ??hart_irq_finish_tx_4:
   \   00000054   9189               LD      R24, Y+
   \   00000056   9199               LD      R25, Y+
   \   00000058   9508               RET
   \   0000005A                      REQUIRE _A_UCSR1B
   \   0000005A                      REQUIRE _A_UCSR2B
   \   0000005A                      REQUIRE _A_UCSR3B
    353          }
    354          
    355          
    356          ////////////////////////////////////////////////////////////////////////////////
    357          //
    358          // HART0 USART1 IRQ handler
    359          //
    360          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    361          void Handler_USART_RXC(HartTaskStruct *_hart_task) {
   \                     Handler_USART_RXC:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   9721               SBIW    R29:R28, 1
   \   00000006   01D8               MOVW    R27:R26, R17:R16
    362              char tmpData;
    363              switch ( _hart_task->modem_no ) {
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   5EED               SUBI    R30, 237
   \   0000000C   4FFD               SBCI    R31, 253
   \   0000000E   8100               LD      R16, Z
   \   00000010   2300               TST     R16
   \   00000012   F029               BREQ    ??Handler_USART_RXC_0
   \   00000014   950A               DEC     R16
   \   00000016   F031               BREQ    ??Handler_USART_RXC_1
   \   00000018   950A               DEC     R16
   \   0000001A   F039               BREQ    ??Handler_USART_RXC_2
   \   0000001C   C009               RJMP    ??Handler_USART_RXC_3
    364              case 0:
    365                  tmpData = UDR1;
   \                     ??Handler_USART_RXC_0:
   \   0000001E   9100....           LDS     R16, _A_UDR1
   \   00000022   C005               RJMP    ??Handler_USART_RXC_4
    366                  break;
    367              case 1:
    368                  tmpData = UDR2;
   \                     ??Handler_USART_RXC_1:
   \   00000024   9100....           LDS     R16, _A_UDR2
   \   00000028   C002               RJMP    ??Handler_USART_RXC_4
    369                  break;
    370              case 2:
    371                  tmpData = UDR3;
   \                     ??Handler_USART_RXC_2:
   \   0000002A   9100....           LDS     R16, _A_UDR3
   \                     ??Handler_USART_RXC_4:
   \   0000002E   8308               ST      Y, R16
    372                  break;
    373              }
    374              if ( _hart_task->rx_Listen[_hart_task->rx_Channel] ) {
   \                     ??Handler_USART_RXC_3:
   \   00000030   2F0A               MOV     R16, R26
   \   00000032   5E02               SUBI    R16, 226
   \   00000034   4F1A               SBCI    R17, 250
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   8120               LD      R18, Z
   \   0000003A   E030               LDI     R19, 0
   \   0000003C   01FD               MOVW    R31:R30, R27:R26
   \   0000003E   0FE2               ADD     R30, R18
   \   00000040   1FF3               ADC     R31, R19
   \   00000042   5EE1               SUBI    R30, 225
   \   00000044   4FFA               SBCI    R31, 250
   \   00000046   8120               LD      R18, Z
   \   00000048   2322               TST     R18
   \   0000004A   F0A9               BREQ    ??Handler_USART_RXC_5
    375                  _hart_task->rx_Time[_hart_task->rx_Channel] = OS_Time;
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   8100               LD      R16, Z
   \   00000050   9140....           LDS     R20, (OS_Global + 18)
   \   00000054   9150....           LDS     R21, (OS_Global + 19)
   \   00000058   9160....           LDS     R22, (OS_Global + 20)
   \   0000005C   9170....           LDS     R23, (OS_Global + 21)
   \   00000060   E014               LDI     R17, 4
   \   00000062   9F01               MUL     R16, R17
   \   00000064   0DA0               ADD     R26, R0
   \   00000066   1DB1               ADC     R27, R1
   \   00000068   5DAD               SUBI    R26, 221
   \   0000006A   4FBA               SBCI    R27, 250
   \   0000006C   934D               ST      X+, R20
   \   0000006E   935D               ST      X+, R21
   \   00000070   936D               ST      X+, R22
   \   00000072   937C               ST      X, R23
   \   00000074   C00F               RJMP    ??Handler_USART_RXC_6
    376              } else if ( OS_IsTask(&_hart_task->tcb) ) {
   \                     ??Handler_USART_RXC_5:
   \   00000076   018D               MOVW    R17:R16, R27:R26
   \   00000078   5001               SUBI    R16, 1
   \   0000007A   4F1E               SBCI    R17, 254
   \   0000007C   ........           CALL    OS_IsTask
   \   00000080   2300               TST     R16
   \   00000082   F041               BREQ    ??Handler_USART_RXC_6
    377                  CriticalComError = OS_PutMailCond1(&_hart_task->RxMailBox, &tmpData);
   \   00000084   019E               MOVW    R19:R18, R29:R28
   \   00000086   50AC               SUBI    R26, 12
   \   00000088   4FBE               SBCI    R27, 254
   \   0000008A   018D               MOVW    R17:R16, R27:R26
   \   0000008C   ........           CALL    OS_PutMailCond1
   \   00000090   9300....           STS     CriticalComError, R16
    378              }
    379          }
   \                     ??Handler_USART_RXC_6:
   \   00000094   9621               ADIW    R29:R28, 1
   \   00000096   91A9               LD      R26, Y+
   \   00000098   91B9               LD      R27, Y+
   \   0000009A   9508               RET
   \   0000009C                      REQUIRE _A_UDR1
   \   0000009C                      REQUIRE _A_UDR2
   \   0000009C                      REQUIRE _A_UDR3
    380          

   \                                 In  segment CODE, align 2, keep-with-next
    381          void hart_irq_finish_tx0(void) {
   \                     hart_irq_finish_tx0:
    382              hart_irq_finish_tx(&_hart_task0);
   \   00000000   ....               LDI     R16, LOW(_hart_task0)
   \   00000002   ....               LDI     R17, (_hart_task0) >> 8
   \   00000004   ....               RJMP    hart_irq_finish_tx
    383          }
    384          

   \                                 In  segment CODE, align 2, keep-with-next
    385          void hart_irq_finish_tx1(void) {
   \                     hart_irq_finish_tx1:
    386              hart_irq_finish_tx(&_hart_task1);
   \   00000000   ....               LDI     R16, LOW((_hart_task0 + 1395))
   \   00000002   ....               LDI     R17, HIGH((_hart_task0 + 1395))
   \   00000004   ....               RJMP    hart_irq_finish_tx
    387          }

   \                                 In  segment CODE, align 2, keep-with-next
    388          void hart_irq_finish_tx2(void) {
   \                     hart_irq_finish_tx2:
    389              hart_irq_finish_tx(&_hart_task2);
   \   00000000   ....               LDI     R16, LOW((_hart_task0 + 2790))
   \   00000002   ....               LDI     R17, HIGH((_hart_task0 + 2790))
   \   00000004   ....               RJMP    hart_irq_finish_tx
    390          }
    391          

   \                                 In  segment CODE, align 2, keep-with-next
    392          void Handler_USART_RXC0(void) {
   \                     Handler_USART_RXC0:
   \   00000000   9721               SBIW    R29:R28, 1
    393              Handler_USART_RXC(&_hart_task0);
   \   00000002   9100....           LDS     R16, (_hart_task0 + 531)
   \   00000006   2300               TST     R16
   \   00000008   F051               BREQ    ??Handler_USART_RXC0_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F029               BREQ    ??Handler_USART_RXC0_1
   \   0000000E   950A               DEC     R16
   \   00000010   F449               BRNE    ??Handler_USART_RXC0_2
   \   00000012   9100....           LDS     R16, _A_UDR3
   \   00000016   C005               RJMP    ??Handler_USART_RXC0_3
   \                     ??Handler_USART_RXC0_1:
   \   00000018   9100....           LDS     R16, _A_UDR2
   \   0000001C   C002               RJMP    ??Handler_USART_RXC0_3
   \                     ??Handler_USART_RXC0_0:
   \   0000001E   9100....           LDS     R16, _A_UDR1
   \                     ??Handler_USART_RXC0_3:
   \   00000022   8308               ST      Y, R16
   \                     ??Handler_USART_RXC0_2:
   \   00000024   9100....           LDS     R16, (_hart_task0 + 1310)
   \   00000028   E0F0               LDI     R31, 0
   \   0000002A   2FE0               MOV     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(_hart_task0 + 1311) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(_hart_task0 + 1311) & 0xFFFF))
   \   00000030   8100               LD      R16, Z
   \   00000032   2300               TST     R16
   \   00000034   F0A1               BREQ    ??Handler_USART_RXC0_4
   \   00000036   9100....           LDS     R16, (_hart_task0 + 1310)
   \   0000003A   9140....           LDS     R20, (OS_Global + 18)
   \   0000003E   9150....           LDS     R21, (OS_Global + 19)
   \   00000042   9160....           LDS     R22, (OS_Global + 20)
   \   00000046   9170....           LDS     R23, (OS_Global + 21)
   \   0000004A   E014               LDI     R17, 4
   \   0000004C   9F01               MUL     R16, R17
   \   0000004E   01F0               MOVW    R31:R30, R1:R0
   \   00000050   ....               SUBI    R30, LOW((-(_hart_task0 + 1315) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(_hart_task0 + 1315) & 0xFFFF))
   \   00000054   8340               ST      Z, R20
   \   00000056   8351               STD     Z+1, R21
   \   00000058   8362               STD     Z+2, R22
   \   0000005A   8373               STD     Z+3, R23
   \   0000005C   C00D               RJMP    ??Handler_USART_RXC0_5
   \                     ??Handler_USART_RXC0_4:
   \   0000005E   ....               LDI     R16, LOW((_hart_task0 + 511))
   \   00000060   ....               LDI     R17, HIGH((_hart_task0 + 511))
   \   00000062   ........           CALL    OS_IsTask
   \   00000066   2300               TST     R16
   \   00000068   F039               BREQ    ??Handler_USART_RXC0_5
   \   0000006A   019E               MOVW    R19:R18, R29:R28
   \   0000006C   ....               LDI     R16, LOW((_hart_task0 + 500))
   \   0000006E   ....               LDI     R17, HIGH((_hart_task0 + 500))
   \   00000070   ........           CALL    OS_PutMailCond1
   \   00000074   9300....           STS     CriticalComError, R16
    394          }
   \                     ??Handler_USART_RXC0_5:
   \   00000078   9621               ADIW    R29:R28, 1
   \   0000007A   9508               RET
   \   0000007C                      REQUIRE _A_UDR1
   \   0000007C                      REQUIRE _A_UDR2
   \   0000007C                      REQUIRE _A_UDR3
    395          

   \                                 In  segment CODE, align 2, keep-with-next
    396          void Handler_USART_RXC1(void) {
   \                     Handler_USART_RXC1:
   \   00000000   9721               SBIW    R29:R28, 1
    397              Handler_USART_RXC(&_hart_task1);
   \   00000002   9100....           LDS     R16, (_hart_task0 + 1926)
   \   00000006   2300               TST     R16
   \   00000008   F051               BREQ    ??Handler_USART_RXC1_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F029               BREQ    ??Handler_USART_RXC1_1
   \   0000000E   950A               DEC     R16
   \   00000010   F449               BRNE    ??Handler_USART_RXC1_2
   \   00000012   9100....           LDS     R16, _A_UDR3
   \   00000016   C005               RJMP    ??Handler_USART_RXC1_3
   \                     ??Handler_USART_RXC1_1:
   \   00000018   9100....           LDS     R16, _A_UDR2
   \   0000001C   C002               RJMP    ??Handler_USART_RXC1_3
   \                     ??Handler_USART_RXC1_0:
   \   0000001E   9100....           LDS     R16, _A_UDR1
   \                     ??Handler_USART_RXC1_3:
   \   00000022   8308               ST      Y, R16
   \                     ??Handler_USART_RXC1_2:
   \   00000024   9100....           LDS     R16, (_hart_task0 + 2705)
   \   00000028   E0F0               LDI     R31, 0
   \   0000002A   2FE0               MOV     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(_hart_task0 + 2706) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(_hart_task0 + 2706) & 0xFFFF))
   \   00000030   8100               LD      R16, Z
   \   00000032   2300               TST     R16
   \   00000034   F0A1               BREQ    ??Handler_USART_RXC1_4
   \   00000036   9100....           LDS     R16, (_hart_task0 + 2705)
   \   0000003A   9140....           LDS     R20, (OS_Global + 18)
   \   0000003E   9150....           LDS     R21, (OS_Global + 19)
   \   00000042   9160....           LDS     R22, (OS_Global + 20)
   \   00000046   9170....           LDS     R23, (OS_Global + 21)
   \   0000004A   E014               LDI     R17, 4
   \   0000004C   9F01               MUL     R16, R17
   \   0000004E   01F0               MOVW    R31:R30, R1:R0
   \   00000050   ....               SUBI    R30, LOW((-(_hart_task0 + 2710) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(_hart_task0 + 2710) & 0xFFFF))
   \   00000054   8340               ST      Z, R20
   \   00000056   8351               STD     Z+1, R21
   \   00000058   8362               STD     Z+2, R22
   \   0000005A   8373               STD     Z+3, R23
   \   0000005C   C00D               RJMP    ??Handler_USART_RXC1_5
   \                     ??Handler_USART_RXC1_4:
   \   0000005E   ....               LDI     R16, LOW((_hart_task0 + 1906))
   \   00000060   ....               LDI     R17, HIGH((_hart_task0 + 1906))
   \   00000062   ........           CALL    OS_IsTask
   \   00000066   2300               TST     R16
   \   00000068   F039               BREQ    ??Handler_USART_RXC1_5
   \   0000006A   019E               MOVW    R19:R18, R29:R28
   \   0000006C   ....               LDI     R16, LOW((_hart_task0 + 1895))
   \   0000006E   ....               LDI     R17, HIGH((_hart_task0 + 1895))
   \   00000070   ........           CALL    OS_PutMailCond1
   \   00000074   9300....           STS     CriticalComError, R16
    398          }
   \                     ??Handler_USART_RXC1_5:
   \   00000078   9621               ADIW    R29:R28, 1
   \   0000007A   9508               RET
   \   0000007C                      REQUIRE _A_UDR1
   \   0000007C                      REQUIRE _A_UDR2
   \   0000007C                      REQUIRE _A_UDR3

   \                                 In  segment CODE, align 2, keep-with-next
    399          void Handler_USART_RXC2(void) {
   \                     Handler_USART_RXC2:
   \   00000000   9721               SBIW    R29:R28, 1
    400              Handler_USART_RXC(&_hart_task2);
   \   00000002   9100....           LDS     R16, (_hart_task0 + 3321)
   \   00000006   2300               TST     R16
   \   00000008   F051               BREQ    ??Handler_USART_RXC2_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F029               BREQ    ??Handler_USART_RXC2_1
   \   0000000E   950A               DEC     R16
   \   00000010   F449               BRNE    ??Handler_USART_RXC2_2
   \   00000012   9100....           LDS     R16, _A_UDR3
   \   00000016   C005               RJMP    ??Handler_USART_RXC2_3
   \                     ??Handler_USART_RXC2_1:
   \   00000018   9100....           LDS     R16, _A_UDR2
   \   0000001C   C002               RJMP    ??Handler_USART_RXC2_3
   \                     ??Handler_USART_RXC2_0:
   \   0000001E   9100....           LDS     R16, _A_UDR1
   \                     ??Handler_USART_RXC2_3:
   \   00000022   8308               ST      Y, R16
   \                     ??Handler_USART_RXC2_2:
   \   00000024   9100....           LDS     R16, (_hart_task0 + 4100)
   \   00000028   E0F0               LDI     R31, 0
   \   0000002A   2FE0               MOV     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(_hart_task0 + 4101) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(_hart_task0 + 4101) & 0xFFFF))
   \   00000030   8100               LD      R16, Z
   \   00000032   2300               TST     R16
   \   00000034   F0A1               BREQ    ??Handler_USART_RXC2_4
   \   00000036   9100....           LDS     R16, (_hart_task0 + 4100)
   \   0000003A   9140....           LDS     R20, (OS_Global + 18)
   \   0000003E   9150....           LDS     R21, (OS_Global + 19)
   \   00000042   9160....           LDS     R22, (OS_Global + 20)
   \   00000046   9170....           LDS     R23, (OS_Global + 21)
   \   0000004A   E014               LDI     R17, 4
   \   0000004C   9F01               MUL     R16, R17
   \   0000004E   01F0               MOVW    R31:R30, R1:R0
   \   00000050   ....               SUBI    R30, LOW((-(_hart_task0 + 4105) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(_hart_task0 + 4105) & 0xFFFF))
   \   00000054   8340               ST      Z, R20
   \   00000056   8351               STD     Z+1, R21
   \   00000058   8362               STD     Z+2, R22
   \   0000005A   8373               STD     Z+3, R23
   \   0000005C   C00D               RJMP    ??Handler_USART_RXC2_5
   \                     ??Handler_USART_RXC2_4:
   \   0000005E   ....               LDI     R16, LOW((_hart_task0 + 3301))
   \   00000060   ....               LDI     R17, HIGH((_hart_task0 + 3301))
   \   00000062   ........           CALL    OS_IsTask
   \   00000066   2300               TST     R16
   \   00000068   F039               BREQ    ??Handler_USART_RXC2_5
   \   0000006A   019E               MOVW    R19:R18, R29:R28
   \   0000006C   ....               LDI     R16, LOW((_hart_task0 + 3290))
   \   0000006E   ....               LDI     R17, HIGH((_hart_task0 + 3290))
   \   00000070   ........           CALL    OS_PutMailCond1
   \   00000074   9300....           STS     CriticalComError, R16
    401          }
   \                     ??Handler_USART_RXC2_5:
   \   00000078   9621               ADIW    R29:R28, 1
   \   0000007A   9508               RET
   \   0000007C                      REQUIRE _A_UDR1
   \   0000007C                      REQUIRE _A_UDR2
   \   0000007C                      REQUIRE _A_UDR3
    402          

   \                                 In  segment CODE, align 2, keep-with-next
    403          void hart_irq_tx_next0(void) {
   \                     hart_irq_tx_next0:
    404              hart_irq_tx_next(&_hart_task0);
   \   00000000   ....               LDI     R16, LOW(_hart_task0)
   \   00000002   ....               LDI     R17, (_hart_task0) >> 8
   \   00000004   ....               RJMP    hart_irq_tx_next
    405          }

   \                                 In  segment CODE, align 2, keep-with-next
    406          void hart_irq_tx_next1(void) {
   \                     hart_irq_tx_next1:
    407              hart_irq_tx_next(&_hart_task1);
   \   00000000   ....               LDI     R16, LOW((_hart_task0 + 1395))
   \   00000002   ....               LDI     R17, HIGH((_hart_task0 + 1395))
   \   00000004   ....               RJMP    hart_irq_tx_next
    408          }

   \                                 In  segment CODE, align 2, keep-with-next
    409          void hart_irq_tx_next2(void) {
   \                     hart_irq_tx_next2:
    410              hart_irq_tx_next(&_hart_task2);
   \   00000000   ....               LDI     R16, LOW((_hart_task0 + 2790))
   \   00000002   ....               LDI     R17, HIGH((_hart_task0 + 2790))
   \   00000004   ....               RJMP    hart_irq_tx_next
    411          }
    412          
    413          
    414          
    415          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    416          __interrupt void USART1_RXC(void) {
   \                     USART1_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    417              OS_CallISR(Handler_USART_RXC0);
   \   00000024   ....               LDI     R16, LOW(Handler_USART_RXC0/2)
   \   00000026   ....               LDI     R17, (Handler_USART_RXC0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    418          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           CALL    OS_CallISR
   \   00000004   BF9B               OUT     0x3B, R25
   \   00000006   BF8F               OUT     0x3F, R24
   \   00000008   9109               LD      R16, Y+
   \   0000000A   9119               LD      R17, Y+
   \   0000000C   9129               LD      R18, Y+
   \   0000000E   9139               LD      R19, Y+
   \   00000010   9149               LD      R20, Y+
   \   00000012   9159               LD      R21, Y+
   \   00000014   9169               LD      R22, Y+
   \   00000016   9179               LD      R23, Y+
   \   00000018   9009               LD      R0, Y+
   \   0000001A   9019               LD      R1, Y+
   \   0000001C   9029               LD      R2, Y+
   \   0000001E   9039               LD      R3, Y+
   \   00000020   91E9               LD      R30, Y+
   \   00000022   91F9               LD      R31, Y+
   \   00000024   9189               LD      R24, Y+
   \   00000026   9199               LD      R25, Y+
   \   00000028   9518               RETI
    419          
    420          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    421          __interrupt void USART1_TXC(void) {
   \                     USART1_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    422              OS_CallISR(hart_irq_finish_tx0);
   \   00000024   ....               LDI     R16, LOW(hart_irq_finish_tx0/2)
   \   00000026   ....               LDI     R17, (hart_irq_finish_tx0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    423          }
    424          
    425          #pragma vector=USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    426          __interrupt void USART1_UDRE(void) {
   \                     USART1_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    427              OS_CallISR(hart_irq_tx_next0);
   \   00000024   ....               LDI     R16, LOW(hart_irq_tx_next0/2)
   \   00000026   ....               LDI     R17, (hart_irq_tx_next0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    428          }
    429          
    430          ////////////////////////////////////////////////////////////////////////////////
    431          //
    432          // HART1 USART2 IRQ handler
    433          //
    434          ////////////////////////////////////////////////////////////////////////////////
    435          #pragma vector=USART2_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    436          __interrupt void USART2_RXC(void) {
   \                     USART2_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    437              OS_CallISR(Handler_USART_RXC1);
   \   00000024   ....               LDI     R16, LOW(Handler_USART_RXC1/2)
   \   00000026   ....               LDI     R17, (Handler_USART_RXC1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    438          }
    439          
    440          #pragma vector=USART2_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    441          __interrupt void USART2_TXC(void) {
   \                     USART2_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    442              OS_CallISR(hart_irq_finish_tx1);
   \   00000024   ....               LDI     R16, LOW(hart_irq_finish_tx1/2)
   \   00000026   ....               LDI     R17, (hart_irq_finish_tx1/2) >> 8
   \   00000028                      REQUIRE ?Subroutine0
   \   00000028                      ;               // Fall through to label ?Subroutine0
    443          }
    444          
    445          #pragma vector=USART2_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    446          __interrupt void USART2_UDRE(void) {
   \                     USART2_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    447              OS_CallISR(hart_irq_tx_next1);
   \   00000024   ....               LDI     R16, LOW(hart_irq_tx_next1/2)
   \   00000026   ....               LDI     R17, (hart_irq_tx_next1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    448          }
    449          
    450          ////////////////////////////////////////////////////////////////////////////////
    451          //
    452          // HART1 USART3 IRQ handler
    453          //
    454          ////////////////////////////////////////////////////////////////////////////////
    455          #pragma vector=USART3_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    456          __interrupt void USART3_RXC(void) {
   \                     USART3_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    457              OS_CallISR(Handler_USART_RXC2);
   \   00000024   ....               LDI     R16, LOW(Handler_USART_RXC2/2)
   \   00000026   ....               LDI     R17, (Handler_USART_RXC2/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    458          }
    459          
    460          #pragma vector=USART3_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    461          __interrupt void USART3_TXC(void) {
   \                     USART3_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    462              OS_CallISR(hart_irq_finish_tx2);
   \   00000024   ....               LDI     R16, LOW(hart_irq_finish_tx2/2)
   \   00000026   ....               LDI     R17, (hart_irq_finish_tx2/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    463          }
    464          
    465          #pragma vector=USART3_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    466          __interrupt void USART3_UDRE(void) {
   \                     USART3_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    467              OS_CallISR(hart_irq_tx_next2);
   \   00000024   ....               LDI     R16, LOW(hart_irq_tx_next2/2)
   \   00000026   ....               LDI     R17, (hart_irq_tx_next2/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    468          }
    469          
    470          ////////////////////////////////////////////////////////////////////////////////
    471          //
    472          // UART Utilities
    473          //
    474          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    475          void hart_config_uart(HartTaskStruct *task) {
   \                     hart_config_uart:
    476              uint16_t    baud = 1200;
    477              uint16_t    baud_setting = (XTAL_CPU / 4 / baud - 1) / 2;
    478          
    479              switch ( task->modem_no ) {
   \   00000000   5E0D               SUBI    R16, 237
   \   00000002   4F1D               SBCI    R17, 253
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8100               LD      R16, Z
   \   00000008   2300               TST     R16
   \   0000000A   F029               BREQ    ??hart_config_uart_0
   \   0000000C   950A               DEC     R16
   \   0000000E   F099               BREQ    ??hart_config_uart_1
   \   00000010   950A               DEC     R16
   \   00000012   F109               BREQ    ??hart_config_uart_2
   \   00000014   9508               RET
    480              case hart_modem_0:
    481                  // try U2X mode first
    482                  UCSR1A      = _BV(U2X1);
   \                     ??hart_config_uart_0:
   \   00000016   E002               LDI     R16, 2
   \   00000018   9300....           STS     _A_UCSR1A, R16
    483                  if ( ((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095) ) {
    484                      UCSR1A      = 0;
    485                      baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
    486                  }
    487          
    488                  UBRR1H      = baud_setting >> 8;
   \   0000001C   E006               LDI     R16, 6
   \   0000001E   930000CD           STS     205, R16
    489                  UBRR1L      = baud_setting;
   \   00000022   E802               LDI     R16, 130
   \   00000024   9300....           STS     _A_UBRR1, R16
    490          
    491                  UCSR1C      = _BV(UCSZ10) | _BV(UCSZ11) | USART1_ODD_PARITY | USART1_1_STOP_BIT;
   \   00000028   E306               LDI     R16, 54
   \   0000002A   9300....           STS     _A_UCSR1C, R16
    492                  UCSR1B      = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);
   \   0000002E   E908               LDI     R16, 152
   \   00000030   9300....           STS     _A_UCSR1B, R16
    493                  break;
   \   00000034   9508               RET
    494          
    495              case hart_modem_1:
    496                  UCSR2A      = _BV(U2X2);
   \                     ??hart_config_uart_1:
   \   00000036   E002               LDI     R16, 2
   \   00000038   9300....           STS     _A_UCSR2A, R16
    497                  if ( ((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095) ) {
    498                      UCSR2A      = 0;
    499                      baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
    500                  }
    501          
    502                  UBRR2H      = baud_setting >> 8;
   \   0000003C   E006               LDI     R16, 6
   \   0000003E   930000D5           STS     213, R16
    503                  UBRR2L      = baud_setting;
   \   00000042   E802               LDI     R16, 130
   \   00000044   9300....           STS     _A_UBRR2, R16
    504          
    505                  UCSR2C      = _BV(UCSZ20) | _BV(UCSZ21) | USART2_ODD_PARITY | USART2_1_STOP_BIT;
   \   00000048   E306               LDI     R16, 54
   \   0000004A   9300....           STS     _A_UCSR2C, R16
    506                  UCSR2B      = _BV(RXEN2) | _BV(TXEN2) | _BV(RXCIE2);
   \   0000004E   E908               LDI     R16, 152
   \   00000050   9300....           STS     _A_UCSR2B, R16
    507                  break;
   \   00000054   9508               RET
    508          
    509              case hart_modem_2:
    510                  UCSR3A      = _BV(U2X3);
   \                     ??hart_config_uart_2:
   \   00000056   E002               LDI     R16, 2
   \   00000058   9300....           STS     _A_UCSR3A, R16
    511                  if ( ((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095) ) {
    512                      UCSR3A      = 0;
    513                      baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
    514                  }
    515          
    516                  UBRR3H      = baud_setting >> 8;
   \   0000005C   E006               LDI     R16, 6
   \   0000005E   93000135           STS     309, R16
    517                  UBRR3L      = baud_setting;
   \   00000062   E802               LDI     R16, 130
   \   00000064   9300....           STS     _A_UBRR3, R16
    518          
    519                  UCSR3C      = _BV(UCSZ30) | _BV(UCSZ31) | USART3_ODD_PARITY | USART3_1_STOP_BIT;
   \   00000068   E306               LDI     R16, 54
   \   0000006A   9300....           STS     _A_UCSR3C, R16
    520                  UCSR3B      = _BV(RXEN3) | _BV(TXEN3) | _BV(RXCIE3);
   \   0000006E   E908               LDI     R16, 152
   \   00000070   9300....           STS     _A_UCSR3B, R16
    521                  break;
    522              }
    523          }
   \   00000074   9508               RET
   \   00000076                      REQUIRE _A_UCSR1A
   \   00000076                      REQUIRE _A_UBRR1
   \   00000076                      REQUIRE _A_UCSR1C
   \   00000076                      REQUIRE _A_UCSR1B
   \   00000076                      REQUIRE _A_UCSR2A
   \   00000076                      REQUIRE _A_UBRR2
   \   00000076                      REQUIRE _A_UCSR2C
   \   00000076                      REQUIRE _A_UCSR2B
   \   00000076                      REQUIRE _A_UCSR3A
   \   00000076                      REQUIRE _A_UBRR3
   \   00000076                      REQUIRE _A_UCSR3C
   \   00000076                      REQUIRE _A_UCSR3B
    524          
    525          static void hart_reset_tx(HartTaskStruct *task) {
    526              task->tx_buf_ndx  = 0;
    527              task->tx_len      = 0;
    528          
    529              hart_msg_encoder_reset(&task->hart_encoder);
    530          }
    531          
    532          static void hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl) {
    533              task->rx_buf_ndx   	 = 0;
    534              task->rx_len       	 = 0;
    535          
    536              hart_msg_parser_reset(&task->hart_parser);
    537          }
    538          
    539          static void hart_start_transaction(HartTaskStruct *task) {
    540              if ( task->tx_len == 0 ) {
    541                  // XXX fucked up. there is a bug
    542                  return;
    543              }
    544          
    545              // just to make sure
    546              task->tx_buf_ndx    = 0;
    547          
    548              switch ( task->modem_no ) {
    549              case hart_modem_0:
    550                  UCSR1B |= _BV(UDRIE1);
    551                  break;
    552          
    553              case hart_modem_1:
    554                  UCSR2B |= _BV(UDRIE2);
    555                  break;
    556          
    557              case hart_modem_2:
    558                  UCSR3B |= _BV(UDRIE3);
    559                  break;
    560              }
    561          }
    562          
    563          ////////////////////////////////////////////////////////////////////////////////
    564          //
    565          // demo transaction
    566          //
    567          // IT IS YOUR JOB TO OVERRIDE THESE CALLBACKS
    568          //
    569          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    570          void vega_radar_make_request(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     vega_radar_make_request:
   \   00000000   93AA               ST      -Y, R26
   \   00000002   939A               ST      -Y, R25
   \   00000004   938A               ST      -Y, R24
   \   00000006   9725               SBIW    R29:R28, 5
   \   00000008   01C8               MOVW    R25:R24, R17:R16
    571              uint8_t   addr[5] = { 0x80, 0x00, 0x00, 0x00, 0x00 };
   \   0000000A   018E               MOVW    R17:R16, R29:R28
   \   0000000C   ....               LDI     R30, LOW(`?<Constant {128, 0, 0, 0, 0}>`)
   \   0000000E   ....               LDI     R31, HIGH(`?<Constant {128, 0, 0, 0, 0}>`)
   \   00000010   ....               LDI     R19, (`?<Constant {128, 0, 0, 0, 0}>`) >> 16
   \   00000012   E045               LDI     R20, 5
   \   00000014   E050               LDI     R21, 0
   \   00000016   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    572              uint8_t   cmd = TData.Hart.HartCmd[current_chnl];        // Can use command 1 later, possibly controlled from TCU no idea what to use
   \   0000001A   E0F0               LDI     R31, 0
   \   0000001C   2FE2               MOV     R30, R18
   \   0000001E   ....               SUBI    R30, LOW((-(TData + 148) & 0xFFFF))
   \   00000020   ....               SBCI    R31, HIGH((-(TData + 148) & 0xFFFF))
   \   00000022   81A0               LD      R26, Z
    573          
    574              hart_msg_encoder_preamble(&task->hart_encoder, 5);        // we use preamble 5 for tx
   \   00000024   5984               SUBI    R24, 148
   \   00000026   4F9A               SBCI    R25, 250
   \   00000028   E025               LDI     R18, 5
   \   0000002A   018C               MOVW    R17:R16, R25:R24
   \   0000002C   ........           CALL    hart_msg_encoder_preamble
    575              hart_msg_encoder_long_start(&task->hart_encoder,
    576                                          0x82,                                                 // master to slave request is always 82
    577                                          addr,                                                 // slave address
    578                                          cmd);                                                 // command to send
   \   00000030   2F3A               MOV     R19, R26
   \   00000032   01AE               MOVW    R21:R20, R29:R28
   \   00000034   E822               LDI     R18, 130
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   ........           CALL    hart_msg_encoder_long_start
    579                                                                                                //
    580              // request has no status bytes
    581              //
    582          
    583              hart_msg_encoder_data(&task->hart_encoder,
    584                                    NULL,                                                 // command data in request
    585                                    0);                                                   // no data. thus data length 0
   \   0000003C   E040               LDI     R20, 0
   \   0000003E   E020               LDI     R18, 0
   \   00000040   E030               LDI     R19, 0
   \   00000042   018C               MOVW    R17:R16, R25:R24
   \   00000044   ........           CALL    hart_msg_encoder_data
    586          
    587              hart_msg_encoder_calc_csum(&task->hart_encoder);          // finally calculate checksum
   \   00000048   018C               MOVW    R17:R16, R25:R24
   \   0000004A   ........           CALL    hart_msg_encoder_calc_csum
    588          }
   \   0000004E   9625               ADIW    R29:R28, 5
   \   00000050   9189               LD      R24, Y+
   \   00000052   9199               LD      R25, Y+
   \   00000054   91A9               LD      R26, Y+
   \   00000056   9508               RET
    589          

   \                                 In  segment CODE, align 2, keep-with-next
    590          void vega_radar_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type) {
   \                     vega_radar_handle_rx_error:
   \   00000000   01AC               MOVW    R21:R20, R25:R24
    591              switch ( err_type ) {
   \   00000002   5033               SUBI    R19, 3
   \   00000004   F4B0               BRCC    ??vega_radar_handle_rx_error_0
    592              case HartCommErr_RX_Error:
    593                  // XXX
    594                  // do whatevern necessary here
    595                  if ( TData.Hart.FailCnt[current_chnl][0] < 0xffff ) {
    596                      TData.Hart.FailCnt[current_chnl][0]++;
    597                  }
    598                  if ( TData.Hart.FailCnt[current_chnl][1] < 0xffff ) {
    599                      TData.Hart.FailCnt[current_chnl][1]++;
    600                  }
    601                  break;
    602          
    603              case HartCommErr_RX_Timeout:
    604                  // XXX
    605                  // do whatever necessary here
    606                  if ( TData.Hart.FailCnt[current_chnl][0] < 0xffff ) {
    607                      TData.Hart.FailCnt[current_chnl][0]++;
    608                  }
    609                  if ( TData.Hart.FailCnt[current_chnl][1] < 0xffff ) {
    610                      TData.Hart.FailCnt[current_chnl][1]++;
    611                  }
    612                  break;
    613          
    614              case HartCommErr_RX_Checksum:
    615                  // XXX
    616                  // do whatever necessary here
    617                  if ( TData.Hart.FailCnt[current_chnl][0] < 0xffff ) {
   \   00000006   E004               LDI     R16, 4
   \   00000008   9F20               MUL     R18, R16
   \   0000000A   ....               LDI     R30, LOW(TData)
   \   0000000C   ....               LDI     R31, (TData) >> 8
   \   0000000E   0DE0               ADD     R30, R0
   \   00000010   1DF1               ADC     R31, R1
   \   00000012   8180               LD      R24, Z
   \   00000014   8191               LDD     R25, Z+1
   \   00000016   3F8F               CPI     R24, 255
   \   00000018   4F9F               SBCI    R25, 255
   \   0000001A   F019               BREQ    ??vega_radar_handle_rx_error_1
    618                      TData.Hart.FailCnt[current_chnl][0]++;
   \   0000001C   9583               INC     R24
   \   0000001E   8380               ST      Z, R24
   \   00000020   8391               STD     Z+1, R25
    619                  }
    620                  if ( TData.Hart.FailCnt[current_chnl][1] < 0xffff ) {
   \                     ??vega_radar_handle_rx_error_1:
   \   00000022   8182               LDD     R24, Z+2
   \   00000024   8193               LDD     R25, Z+3
   \   00000026   3F8F               CPI     R24, 255
   \   00000028   4F9F               SBCI    R25, 255
   \   0000002A   F019               BREQ    ??vega_radar_handle_rx_error_0
    621                      TData.Hart.FailCnt[current_chnl][1]++;
   \   0000002C   9583               INC     R24
   \   0000002E   8382               STD     Z+2, R24
   \   00000030   8393               STD     Z+3, R25
    622                  }
    623                  break;
    624              }
    625          }
   \                     ??vega_radar_handle_rx_error_0:
   \   00000032   01CA               MOVW    R25:R24, R21:R20
   \   00000034   9508               RET
    626          
    627          

   \                                 In  segment CODE, align 2, keep-with-next
    628          float ConvertBigEndianToLittleEndian(char *Ptr) {
   \                     ConvertBigEndianToLittleEndian:
   \   00000000   9724               SBIW    R29:R28, 4
    629              const char FloatBuf[4] = { Ptr[3], Ptr[2], Ptr[1], Ptr[0] };
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8123               LDD     R18, Z+3
   \   00000006   8328               ST      Y, R18
   \   00000008   8122               LDD     R18, Z+2
   \   0000000A   8329               STD     Y+1, R18
   \   0000000C   8121               LDD     R18, Z+1
   \   0000000E   832A               STD     Y+2, R18
   \   00000010   8100               LD      R16, Z
   \   00000012   830B               STD     Y+3, R16
    630              const float *FloatNum  = (float *)FloatBuf;
    631              return *FloatNum;
   \   00000014   8108               LD      R16, Y
   \   00000016   8119               LDD     R17, Y+1
   \   00000018   812A               LDD     R18, Y+2
   \   0000001A   813B               LDD     R19, Y+3
   \   0000001C   9624               ADIW    R29:R28, 4
   \   0000001E   9508               RET
    632          }
    633          

   \                                 In  segment CODE, align 2, keep-with-next
    634          uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     ReceiveReply:
   \   00000000   92EA               ST      -Y, R14
   \   00000002   92DA               ST      -Y, R13
   \   00000004   92CA               ST      -Y, R12
   \   00000006   92BA               ST      -Y, R11
   \   00000008   92AA               ST      -Y, R10
   \   0000000A   929A               ST      -Y, R9
   \   0000000C   928A               ST      -Y, R8
   \   0000000E   927A               ST      -Y, R7
   \   00000010   926A               ST      -Y, R6
   \   00000012   925A               ST      -Y, R5
   \   00000014   924A               ST      -Y, R4
   \   00000016   93BA               ST      -Y, R27
   \   00000018   93AA               ST      -Y, R26
   \   0000001A   939A               ST      -Y, R25
   \   0000001C   938A               ST      -Y, R24
   \   0000001E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R13_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R14_is_cg_reg
   \   0000001E   9725               SBIW    R29:R28, 5
   \   00000020   0158               MOVW    R11:R10, R17:R16
   \   00000022   2EE2               MOV     R14, R18
    635              char RxTimeOut   = false;
    636              char RxStatus    = HART_EVENT_NONE;
   \   00000024   2466               CLR     R6
   \   00000026   01D8               MOVW    R27:R26, R17:R16
   \   00000028   56A2               SUBI    R26, 98
   \   0000002A   4FBC               SBCI    R27, 252
    637              char *BufPtr     = (char *)task->rx_buf;
    638              int  SyncCnt     = 0;
   \   0000002C   E080               LDI     R24, 0
   \   0000002E   E090               LDI     R25, 0
    639              char RxByte;
    640              int TimeOut = 200;
   \   00000030   EC08               LDI     R16, 200
   \   00000032   2E40               MOV     R4, R16
   \   00000034   2455               CLR     R5
   \   00000036   0145               MOVW    R9:R8, R11:R10
   \   00000038   EF04               LDI     R16, 244
   \   0000003A   0E80               ADD     R8, R16
   \   0000003C   E001               LDI     R16, 1
   \   0000003E   1E90               ADC     R9, R16
    641              do {
    642                  RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_0:
   \   00000040   2D44               MOV     R20, R4
   \   00000042   E050               LDI     R21, 0
   \   00000044   019E               MOVW    R19:R18, R29:R28
   \   00000046   0184               MOVW    R17:R16, R9:R8
   \   00000048   ........           CALL    OS_GetMailTimed
   \   0000004C   2F10               MOV     R17, R16
    643                  if ( RxByte == 0xff ) {
   \   0000004E   8108               LD      R16, Y
   \   00000050   3F0F               CPI     R16, 255
   \   00000052   F419               BRNE    ??ReceiveReply_1
    644                      SyncCnt++;
   \   00000054   9601               ADIW    R25:R24, 1
    645                      TimeOut = 25;
   \   00000056   E109               LDI     R16, 25
   \   00000058   2E40               MOV     R4, R16
    646                  }
    647              }while ( (SyncCnt < HART_PREAMBLE_MAX_LENGTH) && !RxTimeOut && (RxByte == HART_PREAMBLE) );
   \                     ??ReceiveReply_1:
   \   0000005A   3184               CPI     R24, 20
   \   0000005C   0596               CPC     R25, R6
   \   0000005E   F434               BRGE    ??ReceiveReply_2
   \   00000060   2311               TST     R17
   \   00000062   F421               BRNE    ??ReceiveReply_2
   \   00000064   8108               LD      R16, Y
   \   00000066   3F0F               CPI     R16, 255
   \   00000068   F421               BRNE    ??ReceiveReply_3
   \   0000006A   CFEA               RJMP    ??ReceiveReply_0
    648          
    649              if ( !RxTimeOut && (SyncCnt >= HART_PREAMBLE_MIN_LENGTH ) &&  (SyncCnt < HART_PREAMBLE_MAX_LENGTH) ) {
   \                     ??ReceiveReply_2:
   \   0000006C   2311               TST     R17
   \   0000006E   F009               BREQ    $+2+2
   \   00000070   C0D7               RJMP    ??ReceiveReply_4
   \                     ??ReceiveReply_3:
   \   00000072   9705               SBIW    R25:R24, 5
   \   00000074   970F               SBIW    R25:R24, 15
   \   00000076   F008               BRCS    $+2+2
   \   00000078   C0D3               RJMP    ??ReceiveReply_4
    650                  *BufPtr = RxByte;
   \   0000007A   8108               LD      R16, Y
   \   0000007C   930D               ST      X+, R16
    651                  BufPtr++;
    652                  char MasterNum   = RxByte;
    653                  switch ( MasterNum ) {
   \   0000007E   8108               LD      R16, Y
   \   00000080   3806               CPI     R16, 134
   \   00000082   F009               BREQ    $+2+2
   \   00000084   C0CF               RJMP    ??ReceiveReply_5
    654                  case HART_MSG_START_FROM_MASTER_TO_SLAVE:
    655                      break;
    656                  case HART_MSG_START_FROM_SLAVE_TO_MASTER:
    657                      break;
    658                  case HART_MSG_START_FROM_SLAVE_TO_MASTER_LONG:
    659                      {
    660                          HARTLongMessage *Msg = (HARTLongMessage *)BufPtr;
   \   00000086   83A9               STD     Y+1, R26
   \   00000088   83BA               STD     Y+2, R27
    661                          int  hRxCnt = 0;
   \   0000008A   E080               LDI     R24, 0
   \   0000008C   E090               LDI     R25, 0
   \   0000008E   013D               MOVW    R7:R6, R27:R26
   \   00000090   E008               LDI     R16, 8
   \   00000092   2EC0               MOV     R12, R16
    662                          do {
    663                              RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_6:
   \   00000094   01A2               MOVW    R21:R20, R5:R4
   \   00000096   019E               MOVW    R19:R18, R29:R28
   \   00000098   0184               MOVW    R17:R16, R9:R8
   \   0000009A   ........           CALL    OS_GetMailTimed
   \   0000009E   2F10               MOV     R17, R16
    664                              BufPtr[hRxCnt++] = RxByte;
   \   000000A0   8108               LD      R16, Y
   \   000000A2   01F3               MOVW    R31:R30, R7:R6
   \   000000A4   9301               ST      Z+, R16
   \   000000A6   013F               MOVW    R7:R6, R31:R30
   \   000000A8   9601               ADIW    R25:R24, 1
    665                              // Make sure we are within limits of the buffer
    666                          }while ( !RxTimeOut && hRxCnt < sizeof(HARTLongMessage) );
   \   000000AA   94CA               DEC     R12
   \   000000AC   2311               TST     R17
   \   000000AE   F009               BREQ    $+2+2
   \   000000B0   C05F               RJMP    ??ReceiveReply_7
   \   000000B2   20CC               TST     R12
   \   000000B4   F779               BRNE    ??ReceiveReply_6
    667                          if ( RxTimeOut ) {
    668                              RxStatus	 = HART_EVENT_TIMEOUT;
    669                          } else if ( hRxCnt >= HART_MAX_RX_BUFFER_SIZE ||  Msg->MsessageSize >= HART_MAX_DATA_LENGTH ) {
   \   000000B6   3880               CPI     R24, 128
   \   000000B8   E001               LDI     R16, 1
   \   000000BA   0790               CPC     R25, R16
   \   000000BC   F00C               BRLT    $+2+2
   \   000000BE   C0B0               RJMP    ??ReceiveReply_4
   \   000000C0   81E9               LDD     R30, Y+1
   \   000000C2   81FA               LDD     R31, Y+2
   \   000000C4   8106               LDD     R16, Z+6
   \   000000C6   3F0D               CPI     R16, 253
   \   000000C8   F008               BRCS    $+2+2
   \   000000CA   C0AA               RJMP    ??ReceiveReply_4
    670                              RxStatus	 = HART_EVENT_RX_ERROR;
    671                          } else {
    672                              int  mRxCnt = 0;
   \   000000CC   2466               CLR     R6
   \   000000CE   2477               CLR     R7
    673                              BufPtr += sizeof(HARTLongMessage);
   \   000000D0   9618               ADIW    R27:R26, 8
   \   000000D2   016D               MOVW    R13:R12, R27:R26
    674                              do {
    675                                  RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_8:
   \   000000D4   01A2               MOVW    R21:R20, R5:R4
   \   000000D6   019E               MOVW    R19:R18, R29:R28
   \   000000D8   0184               MOVW    R17:R16, R9:R8
   \   000000DA   ........           CALL    OS_GetMailTimed
   \   000000DE   2F10               MOV     R17, R16
    676                                  BufPtr[mRxCnt++] = RxByte;
   \   000000E0   8108               LD      R16, Y
   \   000000E2   01F6               MOVW    R31:R30, R13:R12
   \   000000E4   9301               ST      Z+, R16
   \   000000E6   016F               MOVW    R13:R12, R31:R30
   \   000000E8   E001               LDI     R16, 1
   \   000000EA   0E60               ADD     R6, R16
   \   000000EC   1C75               ADC     R7, R5
    677                              }while ( !RxTimeOut && (mRxCnt < Msg->MsessageSize) );
   \   000000EE   2311               TST     R17
   \   000000F0   F5F9               BRNE    ??ReceiveReply_7
   \   000000F2   81E9               LDD     R30, Y+1
   \   000000F4   81FA               LDD     R31, Y+2
   \   000000F6   8106               LDD     R16, Z+6
   \   000000F8   1660               CP      R6, R16
   \   000000FA   0475               CPC     R7, R5
   \   000000FC   F35C               BRLT    ??ReceiveReply_8
    678                              if ( RxTimeOut ) {
    679                                  RxStatus	  = HART_EVENT_TIMEOUT;
    680                              } else {
    681                                  uint8_t pcsum = task->rx_buf[hRxCnt + mRxCnt];
   \   000000FE   0D86               ADD     R24, R6
   \   00000100   1D97               ADC     R25, R7
   \   00000102   019C               MOVW    R19:R18, R25:R24
   \   00000104   01F5               MOVW    R31:R30, R11:R10
   \   00000106   0FE2               ADD     R30, R18
   \   00000108   1FF3               ADC     R31, R19
   \   0000010A   56E2               SUBI    R30, 98
   \   0000010C   4FFC               SBCI    R31, 252
   \   0000010E   8180               LD      R24, Z
    682                                  uint8_t csum  = hart_msg_calc_csum((const uint8_t *)task->rx_buf, hRxCnt + mRxCnt);
    683                                  if ( csum == pcsum ) {
   \   00000110   E90E               LDI     R16, 158
   \   00000112   0EA0               ADD     R10, R16
   \   00000114   E003               LDI     R16, 3
   \   00000116   1EB0               ADC     R11, R16
   \   00000118   0185               MOVW    R17:R16, R11:R10
   \   0000011A   ........           CALL    hart_msg_calc_csum
   \   0000011E   1708               CP      R16, R24
   \   00000120   F009               BREQ    $+2+2
   \   00000122   C06F               RJMP    ??ReceiveReply_9
    684                                      switch ( TData.Hart.HartCmd[current_chnl] ) {
   \   00000124   27FF               CLR     R31
   \   00000126   2DEE               MOV     R30, R14
   \   00000128   ....               SUBI    R30, LOW((-(TData + 148) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, HIGH((-(TData + 148) & 0xFFFF))
   \   0000012C   8100               LD      R16, Z
   \   0000012E   950A               DEC     R16
   \   00000130   F019               BREQ    ??ReceiveReply_10
   \   00000132   5002               SUBI    R16, 2
   \   00000134   F0F9               BREQ    ??ReceiveReply_11
   \   00000136   C062               RJMP    ??ReceiveReply_12
    685                                      case 1:
    686                                          TData.Hart.Distance[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[2]);
   \                     ??ReceiveReply_10:
   \   00000138   9612               ADIW    R27:R26, 2
   \   0000013A   01FD               MOVW    R31:R30, R27:R26
   \   0000013C   8103               LDD     R16, Z+3
   \   0000013E   8309               STD     Y+1, R16
   \   00000140   8102               LDD     R16, Z+2
   \   00000142   830A               STD     Y+2, R16
   \   00000144   8101               LDD     R16, Z+1
   \   00000146   830B               STD     Y+3, R16
   \   00000148   8100               LD      R16, Z
   \   0000014A   830C               STD     Y+4, R16
   \   0000014C   E004               LDI     R16, 4
   \   0000014E   9EE0               MUL     R14, R16
   \   00000150   ....               LDI     R16, LOW(TData)
   \   00000152   ....               LDI     R17, (TData) >> 8
   \   00000154   0D00               ADD     R16, R0
   \   00000156   1D11               ADC     R17, R1
   \   00000158   8149               LDD     R20, Y+1
   \   0000015A   815A               LDD     R21, Y+2
   \   0000015C   816B               LDD     R22, Y+3
   \   0000015E   817C               LDD     R23, Y+4
   \   00000160   01F8               MOVW    R31:R30, R17:R16
   \   00000162   52E4               SUBI    R30, 36
   \   00000164   4FFF               SBCI    R31, 255
   \   00000166   AB40               STD     Z+48, R20
   \   00000168   AB51               STD     Z+49, R21
   \   0000016A   AB62               STD     Z+50, R22
   \   0000016C   AB73               STD     Z+51, R23
    687                                          TData.Hart.FailCnt[current_chnl][0] = 0;
   \   0000016E   C043               RJMP    ??ReceiveReply_13
   \                     ??ReceiveReply_7:
   \   00000170   E008               LDI     R16, 8
   \   00000172   C057               RJMP    ??ReceiveReply_14
    688                                          break;
    689                                      case 3:
    690                                          TData.Hart.HartCurrent[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[1]);
   \                     ??ReceiveReply_11:
   \   00000174   01FD               MOVW    R31:R30, R27:R26
   \   00000176   8124               LDD     R18, Z+4
   \   00000178   8329               STD     Y+1, R18
   \   0000017A   8123               LDD     R18, Z+3
   \   0000017C   832A               STD     Y+2, R18
   \   0000017E   8122               LDD     R18, Z+2
   \   00000180   832B               STD     Y+3, R18
   \   00000182   8101               LDD     R16, Z+1
   \   00000184   830C               STD     Y+4, R16
   \   00000186   E004               LDI     R16, 4
   \   00000188   9EE0               MUL     R14, R16
   \   0000018A   ....               LDI     R16, LOW(TData)
   \   0000018C   ....               LDI     R17, (TData) >> 8
   \   0000018E   0D00               ADD     R16, R0
   \   00000190   1D11               ADC     R17, R1
   \   00000192   0198               MOVW    R19:R18, R17:R16
   \   00000194   5224               SUBI    R18, 36
   \   00000196   4F3F               SBCI    R19, 255
   \   00000198   8149               LDD     R20, Y+1
   \   0000019A   815A               LDD     R21, Y+2
   \   0000019C   816B               LDD     R22, Y+3
   \   0000019E   817C               LDD     R23, Y+4
   \   000001A0   01F9               MOVW    R31:R30, R19:R18
   \   000001A2   8340               ST      Z, R20
   \   000001A4   8351               STD     Z+1, R21
   \   000001A6   8362               STD     Z+2, R22
   \   000001A8   8373               STD     Z+3, R23
    691                                          // Ignore UnitId and other data. char UnitId     = BufPtr[5+Offset];
    692                                          // Only keep Distance and level
    693                                          TData.Hart.Distance[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[6 + 0]);
   \   000001AA   01FD               MOVW    R31:R30, R27:R26
   \   000001AC   8561               LDD     R22, Z+9
   \   000001AE   8369               STD     Y+1, R22
   \   000001B0   8560               LDD     R22, Z+8
   \   000001B2   836A               STD     Y+2, R22
   \   000001B4   8167               LDD     R22, Z+7
   \   000001B6   836B               STD     Y+3, R22
   \   000001B8   8146               LDD     R20, Z+6
   \   000001BA   834C               STD     Y+4, R20
   \   000001BC   8149               LDD     R20, Y+1
   \   000001BE   815A               LDD     R21, Y+2
   \   000001C0   816B               LDD     R22, Y+3
   \   000001C2   817C               LDD     R23, Y+4
   \   000001C4   01F9               MOVW    R31:R30, R19:R18
   \   000001C6   AB40               STD     Z+48, R20
   \   000001C8   AB51               STD     Z+49, R21
   \   000001CA   AB62               STD     Z+50, R22
   \   000001CC   AB73               STD     Z+51, R23
    694                                          TData.Hart.Level[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[6 + 5]);
   \   000001CE   961B               ADIW    R27:R26, 11
   \   000001D0   01FD               MOVW    R31:R30, R27:R26
   \   000001D2   8123               LDD     R18, Z+3
   \   000001D4   8329               STD     Y+1, R18
   \   000001D6   8122               LDD     R18, Z+2
   \   000001D8   832A               STD     Y+2, R18
   \   000001DA   8121               LDD     R18, Z+1
   \   000001DC   832B               STD     Y+3, R18
   \   000001DE   8120               LD      R18, Z
   \   000001E0   832C               STD     Y+4, R18
   \   000001E2   8149               LDD     R20, Y+1
   \   000001E4   815A               LDD     R21, Y+2
   \   000001E6   816B               LDD     R22, Y+3
   \   000001E8   01F8               MOVW    R31:R30, R17:R16
   \   000001EA   5CE4               SUBI    R30, 196
   \   000001EC   4FFE               SBCI    R31, 254
   \   000001EE   8340               ST      Z, R20
   \   000001F0   8351               STD     Z+1, R21
   \   000001F2   8362               STD     Z+2, R22
   \   000001F4   8323               STD     Z+3, R18
    695                                          TData.Hart.FailCnt[current_chnl][0] = 0;
   \                     ??ReceiveReply_13:
   \   000001F6   01F8               MOVW    R31:R30, R17:R16
   \   000001F8   8250               ST      Z, R5
   \   000001FA   8251               STD     Z+1, R5
    696                                          break;
    697                                      }
    698                                      RxStatus = HART_EVENT_RX_COMPLETE;
   \                     ??ReceiveReply_12:
   \   000001FC   2466               CLR     R6
   \   000001FE   9463               INC     R6
   \   00000200   C002               RJMP    ??ReceiveReply_15
    699                                  } else {
    700                                      RxStatus = HART_EVENT_CHECKSUM_ERROR;
   \                     ??ReceiveReply_9:
   \   00000202   E100               LDI     R16, 16
   \   00000204   2E60               MOV     R6, R16
    701                                  }
    702                                  char Cnt = 0;
   \                     ??ReceiveReply_15:
   \   00000206   EF8E               LDI     R24, 254
    703                                  do {
    704                                      char RxByte;
    705                                      RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
    706                                  }while ( !RxTimeOut && Cnt++ < HART_MAX_DATA_LENGTH );
   \                     ??ReceiveReply_16:
   \   00000208   01A2               MOVW    R21:R20, R5:R4
   \   0000020A   019E               MOVW    R19:R18, R29:R28
   \   0000020C   5F2F               SUBI    R18, 255
   \   0000020E   4F3F               SBCI    R19, 255
   \   00000210   0184               MOVW    R17:R16, R9:R8
   \   00000212   ........           CALL    OS_GetMailTimed
   \   00000216   2300               TST     R16
   \   00000218   F429               BRNE    ??ReceiveReply_5
   \   0000021A   958A               DEC     R24
   \   0000021C   F7A9               BRNE    ??ReceiveReply_16
   \   0000021E   C002               RJMP    ??ReceiveReply_5
    707                              }
    708                          }
    709                      }
    710                      break;
    711                  }
    712              } else {
    713                  RxStatus = HART_EVENT_RX_ERROR;
   \                     ??ReceiveReply_4:
   \   00000220   E002               LDI     R16, 2
   \                     ??ReceiveReply_14:
   \   00000222   2E60               MOV     R6, R16
    714              }
    715              return RxStatus;
   \                     ??ReceiveReply_5:
   \   00000224   2D06               MOV     R16, R6
   \   00000226   9625               ADIW    R29:R28, 5
   \   00000228   9189               LD      R24, Y+
   \   0000022A   9199               LD      R25, Y+
   \   0000022C   91A9               LD      R26, Y+
   \   0000022E   91B9               LD      R27, Y+
   \   00000230   9049               LD      R4, Y+
   \   00000232   9059               LD      R5, Y+
   \   00000234   9069               LD      R6, Y+
   \   00000236   9079               LD      R7, Y+
   \   00000238   9089               LD      R8, Y+
   \   0000023A   9099               LD      R9, Y+
   \   0000023C   90A9               LD      R10, Y+
   \   0000023E   90B9               LD      R11, Y+
   \   00000240   90C9               LD      R12, Y+
   \   00000242   90D9               LD      R13, Y+
   \   00000244   90E9               LD      R14, Y+
   \   00000246   9508               RET
    716          }
    717          ////////////////////////////////////////////////////////////////////////////////
    718          //
    719          // core hart work
    720          //
    721          ////////////////////////////////////////////////////////////////////////////////
    722          

   \                                 In  segment CODE, align 2, keep-with-next
    723          void do_hart_transaction(HartTaskStruct *task, const hart_channel_t current_chnl, HartTransaction *t) {
   \                     do_hart_transaction:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92CA               ST      -Y, R12
   \   00000006   92BA               ST      -Y, R11
   \   00000008   92AA               ST      -Y, R10
   \   0000000A   929A               ST      -Y, R9
   \   0000000C   928A               ST      -Y, R8
   \   0000000E   927A               ST      -Y, R7
   \   00000010   926A               ST      -Y, R6
   \   00000012   925A               ST      -Y, R5
   \   00000014   924A               ST      -Y, R4
   \   00000016   93BA               ST      -Y, R27
   \   00000018   93AA               ST      -Y, R26
   \   0000001A   939A               ST      -Y, R25
   \   0000001C   938A               ST      -Y, R24
   \   0000001E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R14_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R15_is_cg_reg
   \   0000001E   9724               SBIW    R29:R28, 4
   \   00000020   01D8               MOVW    R27:R26, R17:R16
   \   00000022   2EC2               MOV     R12, R18
   \   00000024   015A               MOVW    R11:R10, R21:R20
    724              long        t1    = OS_Time;
   \   00000026   9100....           LDS     R16, (OS_Global + 18)
   \   0000002A   9110....           LDS     R17, (OS_Global + 19)
   \   0000002E   9120....           LDS     R18, (OS_Global + 20)
   \   00000032   9130....           LDS     R19, (OS_Global + 21)
   \   00000036   8308               ST      Y, R16
   \   00000038   8319               STD     Y+1, R17
   \   0000003A   832A               STD     Y+2, R18
   \   0000003C   833B               STD     Y+3, R19
    725              HartChannel *chnl = &_hart_channels[current_chnl];
   \   0000003E   E107               LDI     R16, 23
   \   00000040   9EC0               MUL     R12, R16
   \   00000042   ....               LDI     R16, LOW(_hart_channels)
   \   00000044   2E60               MOV     R6, R16
   \   00000046   ....               LDI     R16, (_hart_channels) >> 8
   \   00000048   0C60               ADD     R6, R0
   \   0000004A   1D01               ADC     R16, R1
   \   0000004C   2E70               MOV     R7, R16
    726          
    727              hart_channel_t ModemChannel = (hart_channel_t)(current_chnl - task->start_chnl);
   \   0000004E   014D               MOVW    R9:R8, R27:R26
   \   00000050   E103               LDI     R16, 19
   \   00000052   0E80               ADD     R8, R16
   \   00000054   E002               LDI     R16, 2
   \   00000056   1E90               ADC     R9, R16
   \   00000058   01F4               MOVW    R31:R30, R9:R8
   \   0000005A   8101               LDD     R16, Z+1
   \   0000005C   2CEC               MOV     R14, R12
   \   0000005E   1AE0               SUB     R14, R16
    728          
    729              hart_channel_inc_stat(chnl, HartChannelStatItem_TOTAL_REQS);
   \   00000060   01F3               MOVW    R31:R30, R7:R6
   \   00000062   8507               LDD     R16, Z+15
   \   00000064   8910               LDD     R17, Z+16
   \   00000066   8921               LDD     R18, Z+17
   \   00000068   8932               LDD     R19, Z+18
   \   0000006A   5F0F               SUBI    R16, 255
   \   0000006C   4F1F               SBCI    R17, 255
   \   0000006E   4F2F               SBCI    R18, 255
   \   00000070   4F3F               SBCI    R19, 255
   \   00000072   8707               STD     Z+15, R16
   \   00000074   8B10               STD     Z+16, R17
   \   00000076   8B21               STD     Z+17, R18
   \   00000078   8B32               STD     Z+18, R19
    730          
    731          
    732              hart_reset_rx(task, current_chnl);
   \   0000007A   01FD               MOVW    R31:R30, R27:R26
   \   0000007C   56E6               SUBI    R30, 102
   \   0000007E   4FFC               SBCI    R31, 252
   \   00000080   E000               LDI     R16, 0
   \   00000082   8300               ST      Z, R16
   \   00000084   8301               STD     Z+1, R16
   \   00000086   8302               STD     Z+2, R16
   \   00000088   8303               STD     Z+3, R16
   \   0000008A   018D               MOVW    R17:R16, R27:R26
   \   0000008C   5C09               SUBI    R16, 201
   \   0000008E   4F1A               SBCI    R17, 250
   \   00000090   ........           CALL    hart_msg_parser_reset
    733              hart_reset_tx(task);
   \   00000094   01F4               MOVW    R31:R30, R9:R8
   \   00000096   E000               LDI     R16, 0
   \   00000098   8303               STD     Z+3, R16
   \   0000009A   8304               STD     Z+4, R16
   \   0000009C   8305               STD     Z+5, R16
   \   0000009E   8306               STD     Z+6, R16
   \   000000A0   018D               MOVW    R17:R16, R27:R26
   \   000000A2   5904               SUBI    R16, 148
   \   000000A4   4F1A               SBCI    R17, 250
   \   000000A6   ........           CALL    hart_msg_encoder_reset
    734              //uint8_t tmp1= PORTC;
    735              hart_gpio_channel_select(current_chnl);
   \   000000AA   2D0C               MOV     R16, R12
   \   000000AC   ........           CALL    hart_gpio_channel_select
    736              OS_Delay(15); // Wait a little to detect if any other HArt modem is active.
   \   000000B0   E00F               LDI     R16, 15
   \   000000B2   E010               LDI     R17, 0
   \   000000B4   ........           CALL    OS_Delay
    737          
    738              //uint8_t tmp3= PORTC;
    739              // Don't change channel before other channel is selected
    740              task->rx_Channel = ModemChannel;
   \   000000B8   01FD               MOVW    R31:R30, R27:R26
   \   000000BA   5EE2               SUBI    R30, 226
   \   000000BC   4FFA               SBCI    R31, 250
   \   000000BE   82E0               ST      Z, R14
    741              long LastRxTime = 0;
    742              if ( task->rx_Time[ModemChannel] ) {
   \   000000C0   E004               LDI     R16, 4
   \   000000C2   9EE0               MUL     R14, R16
   \   000000C4   012D               MOVW    R5:R4, R27:R26
   \   000000C6   0C40               ADD     R4, R0
   \   000000C8   1C51               ADC     R5, R1
   \   000000CA   E203               LDI     R16, 35
   \   000000CC   0E40               ADD     R4, R16
   \   000000CE   E005               LDI     R16, 5
   \   000000D0   1E50               ADC     R5, R16
   \   000000D2   01F2               MOVW    R31:R30, R5:R4
   \   000000D4   8100               LD      R16, Z
   \   000000D6   8111               LDD     R17, Z+1
   \   000000D8   8122               LDD     R18, Z+2
   \   000000DA   8133               LDD     R19, Z+3
   \   000000DC   2B01               OR      R16, R17
   \   000000DE   2B02               OR      R16, R18
   \   000000E0   2B03               OR      R16, R19
   \   000000E2   F0E9               BREQ    ??do_hart_transaction_0
    743                  LastRxTime = OS_Time - task->rx_Time[ModemChannel];
   \   000000E4   9100....           LDS     R16, (OS_Global + 18)
   \   000000E8   9110....           LDS     R17, (OS_Global + 19)
   \   000000EC   9120....           LDS     R18, (OS_Global + 20)
   \   000000F0   9130....           LDS     R19, (OS_Global + 21)
   \   000000F4   8140               LD      R20, Z
   \   000000F6   8151               LDD     R21, Z+1
   \   000000F8   8162               LDD     R22, Z+2
   \   000000FA   8173               LDD     R23, Z+3
   \   000000FC   1B04               SUB     R16, R20
   \   000000FE   0B15               SBC     R17, R21
   \   00000100   0B26               SBC     R18, R22
   \   00000102   0B37               SBC     R19, R23
   \   00000104   2F40               MOV     R20, R16
    744              }
    745          
    746              char NoOtherRx = LastRxTime > 30000L;
   \   00000106   3301               CPI     R16, 49
   \   00000108   E705               LDI     R16, 117
   \   0000010A   0710               CPC     R17, R16
   \   0000010C   E000               LDI     R16, 0
   \   0000010E   0720               CPC     R18, R16
   \   00000110   0730               CPC     R19, R16
   \   00000112   F42C               BRGE    ??do_hart_transaction_0
    747              // NoOtherRx = 1;
    748              if ( !LastRxTime || NoOtherRx ) {
   \   00000114   2B41               OR      R20, R17
   \   00000116   2B42               OR      R20, R18
   \   00000118   2B43               OR      R20, R19
   \   0000011A   F009               BREQ    $+2+2
   \   0000011C   C0BE               RJMP    ??do_hart_transaction_1
    749          
    750                  t->make_request(task, current_chnl);
   \                     ??do_hart_transaction_0:
   \   0000011E   2D2C               MOV     R18, R12
   \   00000120   018D               MOVW    R17:R16, R27:R26
   \   00000122   01F5               MOVW    R31:R30, R11:R10
   \   00000124   8140               LD      R20, Z
   \   00000126   81F1               LDD     R31, Z+1
   \   00000128   2FE4               MOV     R30, R20
   \   0000012A   9509               ICALL
    751                  //
    752                  // now set the tx length of tx_buf
    753                  //
    754                  task->tx_len = task->hart_encoder.tx_ndx;
   \   0000012C   01FD               MOVW    R31:R30, R27:R26
   \   0000012E   59E0               SUBI    R30, 144
   \   00000130   4FFA               SBCI    R31, 250
   \   00000132   8100               LD      R16, Z
   \   00000134   8111               LDD     R17, Z+1
   \   00000136   01F4               MOVW    R31:R30, R9:R8
   \   00000138   8305               STD     Z+5, R16
   \   0000013A   8316               STD     Z+6, R17
    755          #if HART_CONTROL_RTS_IN_TASK  == 1
    756                  hart_gpio_hart_carrier_on(task->modem_no);
   \   0000013C   8100               LD      R16, Z
   \   0000013E   ........           CALL    hart_gpio_hart_carrier_on
    757          #endif
    758                  OS_Delay(5);
   \   00000142   E005               LDI     R16, 5
   \   00000144   E010               LDI     R17, 0
   \   00000146   ........           CALL    OS_Delay
    759                  // Be sure we have no unhandled signals before start
    760                  OS_ClearEvents(&task->tcb);
   \   0000014A   018D               MOVW    R17:R16, R27:R26
   \   0000014C   5001               SUBI    R16, 1
   \   0000014E   4F1E               SBCI    R17, 254
   \   00000150   ........           CALL    OS_ClearEvents
    761                  //OS_ClearMB(&task->RxMailBox);
    762                  hart_start_transaction(task);
   \   00000154   01F4               MOVW    R31:R30, R9:R8
   \   00000156   8105               LDD     R16, Z+5
   \   00000158   8116               LDD     R17, Z+6
   \   0000015A   2B01               OR      R16, R17
   \   0000015C   F0D9               BREQ    ??do_hart_transaction_2
   \   0000015E   E000               LDI     R16, 0
   \   00000160   8303               STD     Z+3, R16
   \   00000162   8304               STD     Z+4, R16
   \   00000164   8100               LD      R16, Z
   \   00000166   2300               TST     R16
   \   00000168   F081               BREQ    ??do_hart_transaction_3
   \   0000016A   950A               DEC     R16
   \   0000016C   F041               BREQ    ??do_hart_transaction_4
   \   0000016E   950A               DEC     R16
   \   00000170   F489               BRNE    ??do_hart_transaction_2
   \   00000172   91000131           LDS     R16, 305
   \   00000176   6200               ORI     R16, 0x20
   \   00000178   93000131           STS     305, R16
   \   0000017C   C00B               RJMP    ??do_hart_transaction_2
   \                     ??do_hart_transaction_4:
   \   0000017E   910000D1           LDS     R16, 209
   \   00000182   6200               ORI     R16, 0x20
   \   00000184   930000D1           STS     209, R16
   \   00000188   C005               RJMP    ??do_hart_transaction_2
   \                     ??do_hart_transaction_3:
   \   0000018A   910000C9           LDS     R16, 201
   \   0000018E   6200               ORI     R16, 0x20
   \   00000190   930000C9           STS     201, R16
    763                  // Task will halt if no signal!
    764                  // Changed code to avoid halt EHS
    765                  char TxFlag = OS_WaitEventTimed(HART_EVENT_TX_COMPLETE, 2000);
   \                     ??do_hart_transaction_2:
   \   00000194   ED20               LDI     R18, 208
   \   00000196   E037               LDI     R19, 7
   \   00000198   E004               LDI     R16, 4
   \   0000019A   ........           CALL    OS_WaitEventTimed
   \   0000019E   2F80               MOV     R24, R16
    766          #if HART_CONTROL_RTS_IN_TASK  == 1
    767                  hart_gpio_hart_carrier_off(task->modem_no);
   \   000001A0   01F4               MOVW    R31:R30, R9:R8
   \   000001A2   8100               LD      R16, Z
   \   000001A4   ........           CALL    hart_gpio_hart_carrier_off
    768          #endif
    769                  if ( TxFlag ) {
   \   000001A8   2388               TST     R24
   \   000001AA   F409               BRNE    $+2+2
   \   000001AC   C09B               RJMP    ??do_hart_transaction_5
    770                      task->rx_Listen[ModemChannel] = false;
   \   000001AE   24FF               CLR     R15
   \   000001B0   01CD               MOVW    R25:R24, R27:R26
   \   000001B2   0D8E               ADD     R24, R14
   \   000001B4   1D9F               ADC     R25, R15
   \   000001B6   5E81               SUBI    R24, 225
   \   000001B8   4F9A               SBCI    R25, 250
   \   000001BA   01FC               MOVW    R31:R30, R25:R24
   \   000001BC   82F0               ST      Z, R15
    771          
    772                      hart_control_Rx_Enable(task->modem_no, TRUE);
   \   000001BE   01F4               MOVW    R31:R30, R9:R8
   \   000001C0   8100               LD      R16, Z
   \   000001C2   2300               TST     R16
   \   000001C4   F081               BREQ    ??do_hart_transaction_6
   \   000001C6   950A               DEC     R16
   \   000001C8   F041               BREQ    ??do_hart_transaction_7
   \   000001CA   950A               DEC     R16
   \   000001CC   F489               BRNE    ??do_hart_transaction_8
   \   000001CE   91000131           LDS     R16, 305
   \   000001D2   6100               ORI     R16, 0x10
   \   000001D4   93000131           STS     305, R16
   \   000001D8   C00B               RJMP    ??do_hart_transaction_8
   \                     ??do_hart_transaction_7:
   \   000001DA   910000D1           LDS     R16, 209
   \   000001DE   6100               ORI     R16, 0x10
   \   000001E0   930000D1           STS     209, R16
   \   000001E4   C005               RJMP    ??do_hart_transaction_8
   \                     ??do_hart_transaction_6:
   \   000001E6   910000C9           LDS     R16, 201
   \   000001EA   6100               ORI     R16, 0x10
   \   000001EC   930000C9           STS     201, R16
    773                      uint8_t event_status = t->complete(task, current_chnl);
   \                     ??do_hart_transaction_8:
   \   000001F0   2D2C               MOV     R18, R12
   \   000001F2   018D               MOVW    R17:R16, R27:R26
   \   000001F4   01F5               MOVW    R31:R30, R11:R10
   \   000001F6   8142               LDD     R20, Z+2
   \   000001F8   81F3               LDD     R31, Z+3
   \   000001FA   2FE4               MOV     R30, R20
   \   000001FC   9509               ICALL
   \   000001FE   2F10               MOV     R17, R16
    774                      task->rx_Time[ModemChannel] = 0;
   \   00000200   01F2               MOVW    R31:R30, R5:R4
   \   00000202   82F0               ST      Z, R15
   \   00000204   82F1               STD     Z+1, R15
   \   00000206   82F2               STD     Z+2, R15
   \   00000208   82F3               STD     Z+3, R15
    775                      task->rx_Listen[ModemChannel] = true;
   \   0000020A   01FC               MOVW    R31:R30, R25:R24
   \   0000020C   E001               LDI     R16, 1
   \   0000020E   8300               ST      Z, R16
    776                      switch ( event_status ) {
   \   00000210   951A               DEC     R17
   \   00000212   F149               BREQ    ??do_hart_transaction_9
   \   00000214   951A               DEC     R17
   \   00000216   F0B1               BREQ    ??do_hart_transaction_10
   \   00000218   5016               SUBI    R17, 6
   \   0000021A   F019               BREQ    ??do_hart_transaction_11
   \   0000021C   5018               SUBI    R17, 8
   \   0000021E   F131               BREQ    ??do_hart_transaction_12
   \   00000220   C061               RJMP    ??do_hart_transaction_5
    777                      case HART_EVENT_TIMEOUT: // Timeout
    778                          hart_channel_inc_stat(chnl, HartChannelStatItem_RX_TIMEOUT);
   \                     ??do_hart_transaction_11:
   \   00000222   01F3               MOVW    R31:R30, R7:R6
   \   00000224   8503               LDD     R16, Z+11
   \   00000226   8514               LDD     R17, Z+12
   \   00000228   8525               LDD     R18, Z+13
   \   0000022A   8536               LDD     R19, Z+14
   \   0000022C   5F0F               SUBI    R16, 255
   \   0000022E   4F1F               SBCI    R17, 255
   \   00000230   4F2F               SBCI    R18, 255
   \   00000232   4F3F               SBCI    R19, 255
   \   00000234   8703               STD     Z+11, R16
   \   00000236   8714               STD     Z+12, R17
   \   00000238   8725               STD     Z+13, R18
   \   0000023A   8736               STD     Z+14, R19
    779                          hart_channel_set_status(chnl, HartChannelStatus_No_Response);
   \   0000023C   E001               LDI     R16, 1
   \   0000023E   8301               STD     Z+1, R16
    780          
    781                          t->error(task, current_chnl, HartCommErr_RX_Timeout);
   \   00000240   E031               LDI     R19, 1
   \   00000242   C023               RJMP    ??do_hart_transaction_13
    782                          break;
    783                      case HART_EVENT_RX_ERROR:
    784                          // protocol parsing error
    785                          hart_channel_inc_stat(chnl, HartChannelStatItem_RX_INVALID);
   \                     ??do_hart_transaction_10:
   \   00000244   01F3               MOVW    R31:R30, R7:R6
   \   00000246   8103               LDD     R16, Z+3
   \   00000248   8114               LDD     R17, Z+4
   \   0000024A   8125               LDD     R18, Z+5
   \   0000024C   8136               LDD     R19, Z+6
   \   0000024E   5F0F               SUBI    R16, 255
   \   00000250   4F1F               SBCI    R17, 255
   \   00000252   4F2F               SBCI    R18, 255
   \   00000254   4F3F               SBCI    R19, 255
   \   00000256   8303               STD     Z+3, R16
   \   00000258   8314               STD     Z+4, R17
   \   0000025A   8325               STD     Z+5, R18
   \   0000025C   8336               STD     Z+6, R19
    786                          hart_channel_set_status(chnl, HartChannelStatus_Invalid_Response);
   \   0000025E   E002               LDI     R16, 2
   \   00000260   8301               STD     Z+1, R16
    787          
    788                          t->error(task, current_chnl, HartCommErr_RX_Error);
   \   00000262   E030               LDI     R19, 0
   \   00000264   C012               RJMP    ??do_hart_transaction_13
    789                          break;
    790                      case HART_EVENT_RX_COMPLETE:
    791                          hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_9:
   \   00000266   01F3               MOVW    R31:R30, R7:R6
   \   00000268   82F1               STD     Z+1, R15
    792                          break;
   \   0000026A   C03C               RJMP    ??do_hart_transaction_5
    793                      case HART_EVENT_CHECKSUM_ERROR:
    794                          hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_12:
   \   0000026C   01F3               MOVW    R31:R30, R7:R6
   \   0000026E   82F1               STD     Z+1, R15
    795                          hart_channel_inc_stat(chnl, HartChannelStatItem_RX_CSUM);
   \   00000270   8107               LDD     R16, Z+7
   \   00000272   8510               LDD     R17, Z+8
   \   00000274   8521               LDD     R18, Z+9
   \   00000276   8532               LDD     R19, Z+10
   \   00000278   5F0F               SUBI    R16, 255
   \   0000027A   4F1F               SBCI    R17, 255
   \   0000027C   4F2F               SBCI    R18, 255
   \   0000027E   4F3F               SBCI    R19, 255
   \   00000280   8307               STD     Z+7, R16
   \   00000282   8710               STD     Z+8, R17
   \   00000284   8721               STD     Z+9, R18
   \   00000286   8732               STD     Z+10, R19
    796                          // checksum mismatch
    797                          t->error(task, current_chnl, HartCommErr_RX_Checksum);
   \   00000288   E032               LDI     R19, 2
   \                     ??do_hart_transaction_13:
   \   0000028A   2D2C               MOV     R18, R12
   \   0000028C   018D               MOVW    R17:R16, R27:R26
   \   0000028E   01F5               MOVW    R31:R30, R11:R10
   \   00000290   8144               LDD     R20, Z+4
   \   00000292   81F5               LDD     R31, Z+5
   \   00000294   2FE4               MOV     R30, R20
   \   00000296   9509               ICALL
    798                          break;
   \   00000298   C025               RJMP    ??do_hart_transaction_5
    799                      }
    800                  }
    801              } else if ( !NoOtherRx ) {
    802                  // Seems like other hart Modem connected. So just start reading to get read of the data
    803                  OS_Delay(2);
   \                     ??do_hart_transaction_1:
   \   0000029A   E002               LDI     R16, 2
   \   0000029C   E010               LDI     R17, 0
   \   0000029E   ........           CALL    OS_Delay
    804                  task->rx_Listen[ModemChannel] = true;
   \   000002A2   24FF               CLR     R15
   \   000002A4   01FD               MOVW    R31:R30, R27:R26
   \   000002A6   0DEE               ADD     R30, R14
   \   000002A8   1DFF               ADC     R31, R15
   \   000002AA   5EE1               SUBI    R30, 225
   \   000002AC   4FFA               SBCI    R31, 250
   \   000002AE   E001               LDI     R16, 1
   \   000002B0   8300               ST      Z, R16
    805                  hart_control_Rx_Enable(task->modem_no, TRUE);
   \   000002B2   01F4               MOVW    R31:R30, R9:R8
   \   000002B4   8100               LD      R16, Z
   \   000002B6   2300               TST     R16
   \   000002B8   F081               BREQ    ??do_hart_transaction_14
   \   000002BA   950A               DEC     R16
   \   000002BC   F041               BREQ    ??do_hart_transaction_15
   \   000002BE   950A               DEC     R16
   \   000002C0   F489               BRNE    ??do_hart_transaction_5
   \   000002C2   91000131           LDS     R16, 305
   \   000002C6   6100               ORI     R16, 0x10
   \   000002C8   93000131           STS     305, R16
   \   000002CC   C00B               RJMP    ??do_hart_transaction_5
   \                     ??do_hart_transaction_15:
   \   000002CE   910000D1           LDS     R16, 209
   \   000002D2   6100               ORI     R16, 0x10
   \   000002D4   930000D1           STS     209, R16
   \   000002D8   C005               RJMP    ??do_hart_transaction_5
   \                     ??do_hart_transaction_14:
   \   000002DA   910000C9           LDS     R16, 201
   \   000002DE   6100               ORI     R16, 0x10
   \   000002E0   930000C9           STS     201, R16
    806              }
    807              OS_DelayUntil(t1 + 750);
   \                     ??do_hart_transaction_5:
   \   000002E4   8108               LD      R16, Y
   \   000002E6   8119               LDD     R17, Y+1
   \   000002E8   5102               SUBI    R16, 18
   \   000002EA   4F1D               SBCI    R17, 253
   \   000002EC   ........           CALL    OS_DelayUntil
    808              hart_control_Rx_Enable(task->modem_no, FALSE);
   \   000002F0   01F4               MOVW    R31:R30, R9:R8
   \   000002F2   8100               LD      R16, Z
   \   000002F4   2300               TST     R16
   \   000002F6   F081               BREQ    ??do_hart_transaction_16
   \   000002F8   950A               DEC     R16
   \   000002FA   F041               BREQ    ??do_hart_transaction_17
   \   000002FC   950A               DEC     R16
   \   000002FE   F489               BRNE    ??do_hart_transaction_18
   \   00000300   91000131           LDS     R16, 305
   \   00000304   7E0F               ANDI    R16, 0xEF
   \   00000306   93000131           STS     305, R16
   \   0000030A   C00B               RJMP    ??do_hart_transaction_18
   \                     ??do_hart_transaction_17:
   \   0000030C   910000D1           LDS     R16, 209
   \   00000310   7E0F               ANDI    R16, 0xEF
   \   00000312   930000D1           STS     209, R16
   \   00000316   C005               RJMP    ??do_hart_transaction_18
   \                     ??do_hart_transaction_16:
   \   00000318   910000C9           LDS     R16, 201
   \   0000031C   7E0F               ANDI    R16, 0xEF
   \   0000031E   930000C9           STS     201, R16
    809              task->rx_Listen[ModemChannel] = false;
   \                     ??do_hart_transaction_18:
   \   00000322   24FF               CLR     R15
   \   00000324   0DAE               ADD     R26, R14
   \   00000326   1DBF               ADC     R27, R15
   \   00000328   5EA1               SUBI    R26, 225
   \   0000032A   4FBA               SBCI    R27, 250
   \   0000032C   92FC               ST      X, R15
    810          }
   \   0000032E   9624               ADIW    R29:R28, 4
   \   00000330   9189               LD      R24, Y+
   \   00000332   9199               LD      R25, Y+
   \   00000334   91A9               LD      R26, Y+
   \   00000336   91B9               LD      R27, Y+
   \   00000338   9049               LD      R4, Y+
   \   0000033A   9059               LD      R5, Y+
   \   0000033C   9069               LD      R6, Y+
   \   0000033E   9079               LD      R7, Y+
   \   00000340   9089               LD      R8, Y+
   \   00000342   9099               LD      R9, Y+
   \   00000344   90A9               LD      R10, Y+
   \   00000346   90B9               LD      R11, Y+
   \   00000348   90C9               LD      R12, Y+
   \   0000034A   90E9               LD      R14, Y+
   \   0000034C   90F9               LD      R15, Y+
   \   0000034E   9508               RET
   \   00000350                      REQUIRE _A_UCSR1B
   \   00000350                      REQUIRE _A_UCSR2B
   \   00000350                      REQUIRE _A_UCSR3B
    811          
    812          ////////////////////////////////////////////////////////////////////////////////
    813          //
    814          // HART Task
    815          //
    816          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    817          void HART_Task(void *pVoid) {
   \                     HART_Task:
   \   00000000   92BA               ST      -Y, R11
   \   00000002   92AA               ST      -Y, R10
   \   00000004   928A               ST      -Y, R8
   \   00000006   927A               ST      -Y, R7
   \   00000008   926A               ST      -Y, R6
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   939A               ST      -Y, R25
   \   00000012   938A               ST      -Y, R24
   \   00000014                      REQUIRE ?Register_R4_is_cg_reg
   \   00000014                      REQUIRE ?Register_R6_is_cg_reg
   \   00000014                      REQUIRE ?Register_R7_is_cg_reg
   \   00000014                      REQUIRE ?Register_R8_is_cg_reg
   \   00000014                      REQUIRE ?Register_R10_is_cg_reg
   \   00000014                      REQUIRE ?Register_R11_is_cg_reg
   \   00000014   9726               SBIW    R29:R28, 6
   \   00000016   2F60               MOV     R22, R16
    818              HartTaskStruct *HartTasks[3] = { &_hart_task0, &_hart_task1, &_hart_task2 };
   \   00000018   018E               MOVW    R17:R16, R29:R28
   \   0000001A   ....               LDI     R30, LOW(`?<Constant {&_hart_task0, &_hart_task1, &_hart`)
   \   0000001C   ....               LDI     R31, HIGH(`?<Constant {&_hart_task0, &_hart_task1, &_hart`)
   \   0000001E   ....               LDI     R19, (`?<Constant {&_hart_task0, &_hart_task1, &_hart`) >> 16
   \   00000020   E046               LDI     R20, 6
   \   00000022   E050               LDI     R21, 0
   \   00000024   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    819              char ModemNo            = (char)pVoid;
    820              //OS_TASK *taskPtr        = OS_GetpCurrentTask();
    821              //HartTaskStruct *myTask  = container_of(taskPtr, HartTaskStruct, tcb);
    822              HartTaskStruct *myTask  = HartTasks[ModemNo];
   \   00000028   01FE               MOVW    R31:R30, R29:R28
   \   0000002A   E002               LDI     R16, 2
   \   0000002C   9F60               MUL     R22, R16
   \   0000002E   0DE0               ADD     R30, R0
   \   00000030   1DF1               ADC     R31, R1
   \   00000032   80A0               LD      R10, Z
   \   00000034   80B1               LDD     R11, Z+1
    823          
    824          
    825          
    826              hart_msg_parser_init(&myTask->hart_parser, myTask->rx_buf, HART_MAX_RX_BUFFER_SIZE);
   \   00000036   E840               LDI     R20, 128
   \   00000038   E051               LDI     R21, 1
   \   0000003A   0195               MOVW    R19:R18, R11:R10
   \   0000003C   5622               SUBI    R18, 98
   \   0000003E   4F3C               SBCI    R19, 252
   \   00000040   0185               MOVW    R17:R16, R11:R10
   \   00000042   5C09               SUBI    R16, 201
   \   00000044   4F1A               SBCI    R17, 250
   \   00000046   ........           CALL    hart_msg_parser_init
    827              hart_msg_encoder_init(&myTask->hart_encoder, myTask->tx_buf, HART_MAX_TX_BUFFER_SIZE);
   \   0000004A   E840               LDI     R20, 128
   \   0000004C   E051               LDI     R21, 1
   \   0000004E   0195               MOVW    R19:R18, R11:R10
   \   00000050   5E26               SUBI    R18, 230
   \   00000052   4F3D               SBCI    R19, 253
   \   00000054   0185               MOVW    R17:R16, R11:R10
   \   00000056   5904               SUBI    R16, 148
   \   00000058   4F1A               SBCI    R17, 250
   \   0000005A   ........           CALL    hart_msg_encoder_init
    828          
    829              hart_config_uart(myTask);
   \   0000005E   0185               MOVW    R17:R16, R11:R10
   \   00000060   ....               RCALL   hart_config_uart
    830              hart_gpio_hart_carrier_off(myTask->modem_no);
   \   00000062   0135               MOVW    R7:R6, R11:R10
   \   00000064   E103               LDI     R16, 19
   \   00000066   0E60               ADD     R6, R16
   \   00000068   E002               LDI     R16, 2
   \   0000006A   1E70               ADC     R7, R16
   \   0000006C   01F3               MOVW    R31:R30, R7:R6
   \   0000006E   8100               LD      R16, Z
   \   00000070   ........           CALL    hart_gpio_hart_carrier_off
    831              hart_control_Rx_Enable(myTask->modem_no, FALSE);
   \   00000074   01F3               MOVW    R31:R30, R7:R6
   \   00000076   8100               LD      R16, Z
   \   00000078   2300               TST     R16
   \   0000007A   F081               BREQ    ??HART_Task_0
   \   0000007C   950A               DEC     R16
   \   0000007E   F041               BREQ    ??HART_Task_1
   \   00000080   950A               DEC     R16
   \   00000082   F501               BRNE    ??HART_Task_2
   \   00000084   91000131           LDS     R16, 305
   \   00000088   7E0F               ANDI    R16, 0xEF
   \   0000008A   93000131           STS     305, R16
   \   0000008E   C01A               RJMP    ??HART_Task_2
   \                     ??HART_Task_1:
   \   00000090   910000D1           LDS     R16, 209
   \   00000094   7E0F               ANDI    R16, 0xEF
   \   00000096   930000D1           STS     209, R16
   \   0000009A   C014               RJMP    ??HART_Task_2
   \                     ??HART_Task_0:
   \   0000009C   910000C9           LDS     R16, 201
   \   000000A0   7E0F               ANDI    R16, 0xEF
   \   000000A2   930000C9           STS     201, R16
   \   000000A6   C00E               RJMP    ??HART_Task_2
    832          
    833              while ( 1 ) {
    834                  long t0 = OS_Time;
    835                  myTask->LastHartTaskRunTime = OS_Time;
    836          
    837                  for ( hart_channel_t current_chnl = myTask->start_chnl; current_chnl <= myTask->end_chnl; current_chnl++ ) {
    838                      // Check if it's a HART sensor configured for the channel
    839                      if ( TData.Hart.HartSensor & (1U << current_chnl) ) {
    840                          float ADCurrent = TData.Hart.ADCurrent[current_chnl];
    841                          if ( ADCurrent >= HART_MINIMUM_MA_FEEDBACK_FOR_OK  && ADCurrent <= HART_MAXIMUM_MA_FEEDBACK_FOR_OK ) {
    842                              do_hart_transaction(myTask, current_chnl, &_demo1_transaction);
    843                          }
    844                      } else {
    845                          TData.Hart.FailCnt[current_chnl][0] = 0;
   \                     ??HART_Task_3:
   \   000000A8   8280               ST      Z, R8
   \   000000AA   8281               STD     Z+1, R8
    846                          TData.Hart.FailCnt[current_chnl][1] = 0;
   \   000000AC   8282               STD     Z+2, R8
   \   000000AE   8283               STD     Z+3, R8
    847                      }
   \                     ??HART_Task_4:
   \   000000B0   01F3               MOVW    R31:R30, R7:R6
   \   000000B2   8112               LDD     R17, Z+2
   \   000000B4   9443               INC     R4
   \   000000B6   1514               CP      R17, R4
   \   000000B8   F510               BRCC    ??HART_Task_5
    848          
    849                  }
    850                  OS_DelayUntil(t0 + 3000);
   \                     ??HART_Task_6:
   \   000000BA   018C               MOVW    R17:R16, R25:R24
   \   000000BC   5408               SUBI    R16, 72
   \   000000BE   4F14               SBCI    R17, 244
   \   000000C0   ........           CALL    OS_DelayUntil
   \                     ??HART_Task_2:
   \   000000C4   9180....           LDS     R24, (OS_Global + 18)
   \   000000C8   9190....           LDS     R25, (OS_Global + 19)
   \   000000CC   91A0....           LDS     R26, (OS_Global + 20)
   \   000000D0   91B0....           LDS     R27, (OS_Global + 21)
   \   000000D4   9100....           LDS     R16, (OS_Global + 18)
   \   000000D8   9110....           LDS     R17, (OS_Global + 19)
   \   000000DC   9120....           LDS     R18, (OS_Global + 20)
   \   000000E0   9130....           LDS     R19, (OS_Global + 21)
   \   000000E4   01F5               MOVW    R31:R30, R11:R10
   \   000000E6   5CED               SUBI    R30, 205
   \   000000E8   4FFA               SBCI    R31, 250
   \   000000EA   8300               ST      Z, R16
   \   000000EC   8311               STD     Z+1, R17
   \   000000EE   8322               STD     Z+2, R18
   \   000000F0   8333               STD     Z+3, R19
   \   000000F2   01F3               MOVW    R31:R30, R7:R6
   \   000000F4   8041               LDD     R4, Z+1
   \   000000F6   2488               CLR     R8
   \   000000F8   8102               LDD     R16, Z+2
   \   000000FA   1504               CP      R16, R4
   \   000000FC   F2F0               BRCS    ??HART_Task_6
   \                     ??HART_Task_5:
   \   000000FE   E004               LDI     R16, 4
   \   00000100   9E40               MUL     R4, R16
   \   00000102   ....               LDI     R30, LOW(TData)
   \   00000104   ....               LDI     R31, (TData) >> 8
   \   00000106   0DE0               ADD     R30, R0
   \   00000108   1DF1               ADC     R31, R1
   \   0000010A   9100....           LDS     R16, (TData + 146)
   \   0000010E   9110....           LDS     R17, (TData + 147)
   \   00000112   2D44               MOV     R20, R4
   \   00000114   ........           CALL    ?US_SHR_L02
   \   00000118   7001               ANDI    R16, 0x01
   \   0000011A   F231               BREQ    ??HART_Task_3
   \   0000011C   55E4               SUBI    R30, 84
   \   0000011E   4FFF               SBCI    R31, 255
   \   00000120   8100               LD      R16, Z
   \   00000122   8111               LDD     R17, Z+1
   \   00000124   8122               LDD     R18, Z+2
   \   00000126   8133               LDD     R19, Z+3
   \   00000128   E040               LDI     R20, 0
   \   0000012A   E050               LDI     R21, 0
   \   0000012C   E460               LDI     R22, 64
   \   0000012E   E470               LDI     R23, 64
   \   00000130   ........           CALL    ?F_CMP_GE_S_L04
   \   00000134   F008               BRCS    $+2+2
   \   00000136   CFBC               RJMP    ??HART_Task_4
   \   00000138   E041               LDI     R20, 1
   \   0000013A   EA68               LDI     R22, 168
   \   0000013C   E471               LDI     R23, 65
   \   0000013E   ........           CALL    ?F_CMP_LT_S_L04
   \   00000142   F008               BRCS    $+2+2
   \   00000144   CFB5               RJMP    ??HART_Task_4
   \   00000146   ....               LDI     R20, LOW(_demo1_transaction)
   \   00000148   ....               LDI     R21, (_demo1_transaction) >> 8
   \   0000014A   2D24               MOV     R18, R4
   \   0000014C   0185               MOVW    R17:R16, R11:R10
   \   0000014E   ....               RCALL   do_hart_transaction
   \   00000150   CFAF               RJMP    ??HART_Task_4
   \   00000152                      REQUIRE _A_UCSR1B
   \   00000152                      REQUIRE _A_UCSR2B
   \   00000152                      REQUIRE _A_UCSR3B
    851              }
    852          }

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {&_hart_task0, &_hart_task1, &_hart`:
   \   00000000   ............       DC16 _hart_task0, _hart_task1, _hart_task2
    853          
    854          
    855          ////////////////////////////////////////////////////////////////////////////////
    856          //
    857          // public interfaces
    858          //
    859          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    860          void
    861          hart_start(void) {
   \                     hart_start:
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R4_is_cg_reg
    862              hart_channel_t   chnl;
    863              OS_CreateMB(&_hart_task0.RxMailBox, 1, HART_MB_BUFFER_SIZE, (char *)_hart_task0.mailBuf);
   \   0000000A   ....               LDI     R22, LOW((_hart_task0 + 450))
   \   0000000C   ....               LDI     R23, HIGH((_hart_task0 + 450))
   \   0000000E   E342               LDI     R20, 50
   \   00000010   E050               LDI     R21, 0
   \   00000012   E021               LDI     R18, 1
   \   00000014   ....               LDI     R16, LOW((_hart_task0 + 500))
   \   00000016   ....               LDI     R17, HIGH((_hart_task0 + 500))
   \   00000018   ........           CALL    OS_CreateMB
    864              OS_CreateMB(&_hart_task1.RxMailBox, 1, HART_MB_BUFFER_SIZE, (char *)_hart_task1.mailBuf);
   \   0000001C   ....               LDI     R22, LOW((_hart_task0 + 1845))
   \   0000001E   ....               LDI     R23, HIGH((_hart_task0 + 1845))
   \   00000020   E342               LDI     R20, 50
   \   00000022   E050               LDI     R21, 0
   \   00000024   E021               LDI     R18, 1
   \   00000026   ....               LDI     R16, LOW((_hart_task0 + 1895))
   \   00000028   ....               LDI     R17, HIGH((_hart_task0 + 1895))
   \   0000002A   ........           CALL    OS_CreateMB
    865              OS_CreateMB(&_hart_task2.RxMailBox, 1, HART_MB_BUFFER_SIZE, (char *)_hart_task2.mailBuf);
   \   0000002E   ....               LDI     R22, LOW((_hart_task0 + 3240))
   \   00000030   ....               LDI     R23, HIGH((_hart_task0 + 3240))
   \   00000032   E342               LDI     R20, 50
   \   00000034   E050               LDI     R21, 0
   \   00000036   E021               LDI     R18, 1
   \   00000038   ....               LDI     R16, LOW((_hart_task0 + 3290))
   \   0000003A   ....               LDI     R17, HIGH((_hart_task0 + 3290))
   \   0000003C   ........           CALL    OS_CreateMB
    866          /*
    867              OS_CREATERSEMA(&_hart_task0.channel_lock);
    868              OS_CREATERSEMA(&_hart_task1.channel_lock);
    869              OS_CREATERSEMA(&_hart_task2.channel_lock);
    870          */
    871              hart_for_each_channel(chnl) {
   \   00000040   E080               LDI     R24, 0
   \   00000042   ....               LDI     R26, LOW(_hart_channels)
   \   00000044   ....               LDI     R27, (_hart_channels) >> 8
   \   00000046   E09C               LDI     R25, 12
   \   00000048   2444               CLR     R4
    872                  hart_channel_reset(&_hart_channels[chnl]);
   \                     ??hart_start_0:
   \   0000004A   E001               LDI     R16, 1
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8301               STD     Z+1, R16
   \   00000050   8302               STD     Z+2, R16
   \   00000052   8243               STD     Z+3, R4
   \   00000054   8244               STD     Z+4, R4
   \   00000056   8245               STD     Z+5, R4
   \   00000058   8246               STD     Z+6, R4
   \   0000005A   8247               STD     Z+7, R4
   \   0000005C   8640               STD     Z+8, R4
   \   0000005E   8641               STD     Z+9, R4
   \   00000060   8642               STD     Z+10, R4
   \   00000062   8643               STD     Z+11, R4
   \   00000064   8644               STD     Z+12, R4
   \   00000066   8645               STD     Z+13, R4
   \   00000068   8646               STD     Z+14, R4
   \   0000006A   8647               STD     Z+15, R4
   \   0000006C   8A40               STD     Z+16, R4
   \   0000006E   8A41               STD     Z+17, R4
   \   00000070   8A42               STD     Z+18, R4
   \   00000072   8A43               STD     Z+19, R4
   \   00000074   8A44               STD     Z+20, R4
   \   00000076   8A45               STD     Z+21, R4
   \   00000078   8A46               STD     Z+22, R4
    873                  hart_control_power(chnl, HartChannelPowerStatus_ON);
   \   0000007A   2F08               MOV     R16, R24
   \   0000007C   ........           CALL    hart_gpio_power_on
   \   00000080   01FD               MOVW    R31:R30, R27:R26
   \   00000082   8242               STD     Z+2, R4
    874              }
   \   00000084   9583               INC     R24
   \   00000086   9657               ADIW    R27:R26, 23
   \   00000088   959A               DEC     R25
   \   0000008A   F6F9               BRNE    ??hart_start_0
    875              hart_gpio_enable_all_mux();
   \   0000008C   ........           CALL    hart_gpio_enable_all_mux
    876          
    877              //
    878              // now power on modem one by one.
    879              // don't care about start up time
    880              //
    881          
    882              //OS_CreateTask(&_hart_task0.tcb, "HART0", HART_TASK_PRIORITY,HART_Task,_hart_task0.Mystack,sizeof(_hart_task0.Mystack),0);
    883              //OS_CreateTask(&_hart_task1.tcb, "HART1", HART_TASK_PRIORITY,HART_Task,_hart_task1.Mystack,sizeof(_hart_task1.Mystack),0);
    884              //OS_CreateTask(&_hart_task2.tcb, "HART2", HART_TASK_PRIORITY,HART_Task,_hart_task2.Mystack,sizeof(_hart_task2.Mystack),0);
    885              OS_CREATETASK_EX(&_hart_task0.tcb, "HART0", HART_Task, HART_TASK_PRIORITY+0, _hart_task0.Mystack, (void *)0);
   \   00000090   924A               ST      -Y, R4
   \   00000092   924A               ST      -Y, R4
   \   00000094   E002               LDI     R16, 2
   \   00000096   924A               ST      -Y, R4
   \   00000098   930A               ST      -Y, R16
   \   0000009A   EC02               LDI     R16, 194
   \   0000009C   E011               LDI     R17, 1
   \   0000009E   931A               ST      -Y, R17
   \   000000A0   930A               ST      -Y, R16
   \   000000A2   ....               LDI     R16, LOW(_hart_task0)
   \   000000A4   ....               LDI     R17, (_hart_task0) >> 8
   \   000000A6   931A               ST      -Y, R17
   \   000000A8   930A               ST      -Y, R16
   \   000000AA   ....               LDI     R22, LOW(HART_Task/2)
   \   000000AC   ....               LDI     R23, (HART_Task/2) >> 8
   \   000000AE   E748               LDI     R20, 120
   \   000000B0   ....               LDI     R18, LOW(`?<Constant "HART0">`)
   \   000000B2   ....               LDI     R19, (`?<Constant "HART0">`) >> 8
   \   000000B4   ....               LDI     R16, LOW((_hart_task0 + 511))
   \   000000B6   ....               LDI     R17, HIGH((_hart_task0 + 511))
   \   000000B8   ........           CALL    OS_CreateTaskEx_R
    886              OS_CREATETASK_EX(&_hart_task1.tcb, "HART1", HART_Task, HART_TASK_PRIORITY+1, _hart_task1.Mystack, (void *)1);
   \   000000BC   E001               LDI     R16, LOW(1)
   \   000000BE   924A               ST      -Y, R4
   \   000000C0   930A               ST      -Y, R16
   \   000000C2   E002               LDI     R16, 2
   \   000000C4   924A               ST      -Y, R4
   \   000000C6   930A               ST      -Y, R16
   \   000000C8   EC02               LDI     R16, 194
   \   000000CA   E011               LDI     R17, 1
   \   000000CC   931A               ST      -Y, R17
   \   000000CE   930A               ST      -Y, R16
   \   000000D0   ....               LDI     R16, LOW((_hart_task0 + 1395))
   \   000000D2   ....               LDI     R17, HIGH((_hart_task0 + 1395))
   \   000000D4   931A               ST      -Y, R17
   \   000000D6   930A               ST      -Y, R16
   \   000000D8   ....               LDI     R22, LOW(HART_Task/2)
   \   000000DA   ....               LDI     R23, (HART_Task/2) >> 8
   \   000000DC   E749               LDI     R20, 121
   \   000000DE   ....               LDI     R18, LOW((`?<Constant "HART0">` + 6))
   \   000000E0   ....               LDI     R19, HIGH((`?<Constant "HART0">` + 6))
   \   000000E2   ....               LDI     R16, LOW((_hart_task0 + 1906))
   \   000000E4   ....               LDI     R17, HIGH((_hart_task0 + 1906))
   \   000000E6   ........           CALL    OS_CreateTaskEx_R
    887              OS_CREATETASK_EX(&_hart_task2.tcb, "HART2", HART_Task, HART_TASK_PRIORITY+2, _hart_task2.Mystack, (void *)2);
   \   000000EA   E002               LDI     R16, LOW(2)
   \   000000EC   924A               ST      -Y, R4
   \   000000EE   930A               ST      -Y, R16
   \   000000F0   924A               ST      -Y, R4
   \   000000F2   930A               ST      -Y, R16
   \   000000F4   EC02               LDI     R16, 194
   \   000000F6   E011               LDI     R17, 1
   \   000000F8   931A               ST      -Y, R17
   \   000000FA   930A               ST      -Y, R16
   \   000000FC   ....               LDI     R16, LOW((_hart_task0 + 2790))
   \   000000FE   ....               LDI     R17, HIGH((_hart_task0 + 2790))
   \   00000100   931A               ST      -Y, R17
   \   00000102   930A               ST      -Y, R16
   \   00000104   ....               LDI     R22, LOW(HART_Task/2)
   \   00000106   ....               LDI     R23, (HART_Task/2) >> 8
   \   00000108   E74A               LDI     R20, 122
   \   0000010A   ....               LDI     R18, LOW((`?<Constant "HART0">` + 12))
   \   0000010C   ....               LDI     R19, HIGH((`?<Constant "HART0">` + 12))
   \   0000010E   ....               LDI     R16, LOW((_hart_task0 + 3301))
   \   00000110   ....               LDI     R17, HIGH((_hart_task0 + 3301))
   \   00000112   ........           CALL    OS_CreateTaskEx_R
    888          
    889          
    890          }
   \   00000116   9189               LD      R24, Y+
   \   00000118   9199               LD      R25, Y+
   \   0000011A   91A9               LD      R26, Y+
   \   0000011C   91B9               LD      R27, Y+
   \   0000011E   9049               LD      R4, Y+
   \   00000120   9508               RET
    891          
    892          

   \                                 In  segment CODE, align 2, keep-with-next
    893          void RestartHart(void) {
   \                     RestartHart:
    894              OS_EnterRegion();
   \   00000000   9100....           LDS     R16, OS_Global
   \   00000004   9503               INC     R16
   \   00000006   9300....           STS     OS_Global, R16
    895              OS_TerminateTask(&_hart_task0.tcb);
   \   0000000A   ....               LDI     R16, LOW((_hart_task0 + 511))
   \   0000000C   ....               LDI     R17, HIGH((_hart_task0 + 511))
   \   0000000E   ........           CALL    OS_TerminateTask
    896              OS_TerminateTask(&_hart_task1.tcb);
   \   00000012   ....               LDI     R16, LOW((_hart_task0 + 1906))
   \   00000014   ....               LDI     R17, HIGH((_hart_task0 + 1906))
   \   00000016   ........           CALL    OS_TerminateTask
    897              OS_TerminateTask(&_hart_task2.tcb);
   \   0000001A   ....               LDI     R16, LOW((_hart_task0 + 3301))
   \   0000001C   ....               LDI     R17, HIGH((_hart_task0 + 3301))
   \   0000001E   ........           CALL    OS_TerminateTask
    898              hart_diag_task_stop();
   \   00000022   ........           CALL    hart_diag_task_stop
    899              //memset(&_hart_task0.tcb, 0, sizeof(_hart_task0.tcb));
    900              //memset(&_hart_task1.tcb, 0, sizeof(_hart_task0.tcb));
    901              //memset(&_hart_task2.tcb, 0, sizeof(_hart_task0.tcb));
    902              /*
    903              OS_DeleteRSema(&_hart_task0.channel_lock);
    904              OS_DeleteRSema(&_hart_task1.channel_lock);
    905              OS_DeleteRSema(&_hart_task2.channel_lock);
    906           */
    907              OS_DeleteMB(&_hart_task0.RxMailBox);
   \   00000026   ....               LDI     R16, LOW((_hart_task0 + 500))
   \   00000028   ....               LDI     R17, HIGH((_hart_task0 + 500))
   \   0000002A   ........           CALL    OS_DeleteMB
    908              OS_DeleteMB(&_hart_task1.RxMailBox);
   \   0000002E   ....               LDI     R16, LOW((_hart_task0 + 1895))
   \   00000030   ....               LDI     R17, HIGH((_hart_task0 + 1895))
   \   00000032   ........           CALL    OS_DeleteMB
    909              OS_DeleteMB(&_hart_task2.RxMailBox);
   \   00000036   ....               LDI     R16, LOW((_hart_task0 + 3290))
   \   00000038   ....               LDI     R17, HIGH((_hart_task0 + 3290))
   \   0000003A   ........           CALL    OS_DeleteMB
    910              OS_LeaveRegion();
   \   0000003E   ........           CALL    OS_LeaveRegion
    911              OS_Delay(100);
   \   00000042   E604               LDI     R16, 100
   \   00000044   E010               LDI     R17, 0
   \   00000046   ........           CALL    OS_Delay
    912              hart_start();
   \   0000004A   ....               RJMP    hart_start
    913          }

   \                                 In  segment INTVEC, offset 0x90, root
   \                     `??USART1_RXC::??INTVEC 144`:
   \   00000090   ........           JMP     USART1_RXC

   \                                 In  segment INTVEC, offset 0x94, root
   \                     `??USART1_UDRE::??INTVEC 148`:
   \   00000094   ........           JMP     USART1_UDRE

   \                                 In  segment INTVEC, offset 0x98, root
   \                     `??USART1_TXC::??INTVEC 152`:
   \   00000098   ........           JMP     USART1_TXC

   \                                 In  segment INTVEC, offset 0xcc, root
   \                     `??USART2_RXC::??INTVEC 204`:
   \   000000CC   ........           JMP     USART2_RXC

   \                                 In  segment INTVEC, offset 0xd0, root
   \                     `??USART2_UDRE::??INTVEC 208`:
   \   000000D0   ........           JMP     USART2_UDRE

   \                                 In  segment INTVEC, offset 0xd4, root
   \                     `??USART2_TXC::??INTVEC 212`:
   \   000000D4   ........           JMP     USART2_TXC

   \                                 In  segment INTVEC, offset 0xd8, root
   \                     `??USART3_RXC::??INTVEC 216`:
   \   000000D8   ........           JMP     USART3_RXC

   \                                 In  segment INTVEC, offset 0xdc, root
   \                     `??USART3_UDRE::??INTVEC 220`:
   \   000000DC   ........           JMP     USART3_UDRE

   \                                 In  segment INTVEC, offset 0xe0, root
   \                     `??USART3_TXC::??INTVEC 224`:
   \   000000E0   ........           JMP     USART3_TXC

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HART0">>`:
   \   00000000   414854520030       DC8 "HART0"
   \                     `?<Initializer for <Constant "HART1">>`:
   \   00000006   414854520031       DC8 "HART1"
   \                     `?<Initializer for <Constant "HART2">>`:
   \   0000000C   414854520032       DC8 "HART2"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_task0>`:
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000012   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000022   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000052   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000062   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000082   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000092   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000102   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000112   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000122   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000132   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000142   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000152   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000162   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000172   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000182   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000192   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   000001C3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   000001F4   0000               DC16 0H
   \   000001F6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   000001FF   0000               DC16 0H
   \   00000201   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
   \              000000000000
   \              000000000000
   \              000003      
   \   00000216   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000226   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000236   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000246   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000256   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000266   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000276   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000286   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000296   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000306   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000316   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000326   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000336   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000346   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000356   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000366   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000376   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000386   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000396   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000406   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000416   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000426   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000436   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000446   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000456   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000466   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000476   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000486   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000496   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000506   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000516   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000526   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000536   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000546   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000556   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000566   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00          
   \                     `?<Initializer for _hart_task1>`:
   \   00000573   0000               DC16 0
   \   00000575   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000585   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000595   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000605   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000615   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000625   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000635   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000645   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000655   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000665   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000675   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000685   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000695   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000705   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000715   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000725   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000736   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000746   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000756   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000767   0000               DC16 0H
   \   00000769   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   00000772   0000               DC16 0H
   \   00000774   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 7
   \              000000000000
   \              000000000000
   \              040107      
   \   00000789   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000799   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000809   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000819   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000829   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000839   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000849   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000859   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000869   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000879   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000889   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000899   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000909   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000919   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000929   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000939   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000949   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000959   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000969   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000979   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000989   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000999   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009C9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009E9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A09   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A19   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A29   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A39   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A49   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A59   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A69   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A79   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A89   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A99   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AA9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AC9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00          
   \                     `?<Initializer for _hart_task2>`:
   \   00000AE6   0000               DC16 0
   \   00000AE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000CA9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CB9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CC9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000CDA   0000               DC16 0H
   \   00000CDC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   00000CE5   0000               DC16 0H
   \   00000CE7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 11
   \              000000000000
   \              000000000000
   \              08020B      
   \   00000CFC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D0C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D1C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D2C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D3C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D4C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D5C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D6C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D7C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D8C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D9C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DAC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DBC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DCC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DDC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DEC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DFC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E0C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E1C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E2C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E3C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E4C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E5C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E6C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E7C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E8C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E9C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EAC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EBC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ECC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EDC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EEC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EFC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F0C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F1C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F2C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F3C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F4C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F5C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F6C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F7C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F8C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F9C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FAC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FBC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FCC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FDC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FEC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FFC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000100C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000101C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000102C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000103C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000104C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00          

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _demo1_transaction>`:
   \   00000000   ........           DC16 vega_radar_make_request/2, ReceiveReply/2
   \   00000004   ....               DC16 vega_radar_handle_rx_error/2

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_channels>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000017   000100000000       DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000002E   000200000000       DC8 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000045   000300000000       DC8 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000005C   000400000000       DC8 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000073   000500000000       DC8 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000008A   000600000000       DC8 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000A1   000700000000       DC8 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000B8   000800000000       DC8 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000CF   000900000000       DC8 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000E6   000A00000000       DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   000000F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0
   \              000B00000000
   \              000000      
   \   00000106   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000        

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "HART0">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "HART0">>`
   \   00000006                      DS8 6
   \   0000000C                      REQUIRE `?<Initializer for <Constant "HART1">>`
   \   0000000C                      DS8 6
   \   00000012                      REQUIRE `?<Initializer for <Constant "HART2">>`

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {128, 0, 0, 0, 0}>`:
   \   00000000   0080000000         DC8 128, 0, 0, 0, 0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   ConvertBigEndianToLittleEndian
     16      2   HART_Task
       16      2   -> OS_DelayUntil
       16      2   -> do_hart_transaction
       16      2   -> hart_config_uart
       16      2   -> hart_gpio_hart_carrier_off
       16      2   -> hart_msg_encoder_init
       16      2   -> hart_msg_parser_init
       16      2 ?F_CMP_GE_S_L04
       16      2 ?F_CMP_LT_S_L04
       16      2 ?ML_FLASH_SRAM_24EC_16_L07
       16      2 ?US_SHR_L02
      3      2   Handler_USART_RXC
        3      2   -> OS_IsTask
        3      2   -> OS_PutMailCond1
      1      2   Handler_USART_RXC0
        1      2   -> OS_IsTask
        1      2   -> OS_PutMailCond1
      1      2   Handler_USART_RXC1
        1      2   -> OS_IsTask
        1      2   -> OS_PutMailCond1
      1      2   Handler_USART_RXC2
        1      2   -> OS_IsTask
        1      2   -> OS_PutMailCond1
     20      2   ReceiveReply
       20      2   -> OS_GetMailTimed
       20      2   -> hart_msg_calc_csum
      0      2   RestartHart
        0      2   -> OS_Delay
        0      2   -> OS_DeleteMB
        0      2   -> OS_LeaveRegion
        0      2   -> OS_TerminateTask
        0      2   -> hart_diag_task_stop
        0      2   -> hart_start
     16      2   USART1_RXC
       16      2   -> OS_CallISR
     16      2   USART1_TXC
       16      2   -> OS_CallISR
     16      2   USART1_UDRE
       16      2   -> OS_CallISR
     16      2   USART2_RXC
       16      2   -> OS_CallISR
     16      2   USART2_TXC
       16      2   -> OS_CallISR
     16      2   USART2_UDRE
       16      2   -> OS_CallISR
     16      2   USART3_RXC
       16      2   -> OS_CallISR
     16      2   USART3_TXC
       16      2   -> OS_CallISR
     16      2   USART3_UDRE
       16      2   -> OS_CallISR
     19      2   do_hart_transaction
       19      2   -- Indirect call
       19      2   -> OS_ClearEvents
       19      2   -> OS_Delay
       19      2   -> OS_DelayUntil
       19      2   -> OS_WaitEventTimed
       19      2   -> hart_gpio_channel_select
       19      2   -> hart_gpio_hart_carrier_off
       19      2   -> hart_gpio_hart_carrier_on
       19      2   -> hart_msg_encoder_reset
       19      2   -> hart_msg_parser_reset
      0      2   hart_config_uart
      2      2   hart_irq_finish_tx
        2      2   -> OS_IsTask
        2      2   -> OS_SignalEvent
      0      2   hart_irq_finish_tx0
        0      2   -> hart_irq_finish_tx
      0      2   hart_irq_finish_tx1
        0      2   -> hart_irq_finish_tx
      0      2   hart_irq_finish_tx2
        0      2   -> hart_irq_finish_tx
      0      2   hart_irq_tx_next
      0      2   hart_irq_tx_next0
        0      2   -> hart_irq_tx_next
      0      2   hart_irq_tx_next1
        0      2   -> hart_irq_tx_next
      0      2   hart_irq_tx_next2
        0      2   -> hart_irq_tx_next
     13      2   hart_start
        5      2   -> OS_CreateMB
        5      2   -> OS_CreateTaskEx_R
        5      2   -> hart_gpio_enable_all_mux
        5      2   -> hart_gpio_power_on
      0      2   vega_radar_handle_rx_error
      8      2   vega_radar_make_request
        8      2   -> hart_msg_encoder_calc_csum
        8      2   -> hart_msg_encoder_data
        8      2   -> hart_msg_encoder_long_start
        8      2   -> hart_msg_encoder_preamble
        8      2 ?ML_FLASH_SRAM_24EC_16_L07


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Constant "HART0">
       6  ?<Constant {&_hart_task0, &_hart_task1, &_hart
       5  ?<Constant {128, 0, 0, 0, 0}>
      18  ?<Initializer for <Constant "HART0">>
       6  ?<Initializer for _demo1_transaction>
     276  ?<Initializer for _hart_channels>
    4185  ?<Initializer for _hart_task0>
      42  ?Subroutine0
      32  ConvertBigEndianToLittleEndian
       1  CriticalComError
     338  HART_Task
     156  Handler_USART_RXC
     124  Handler_USART_RXC0
     124  Handler_USART_RXC1
     124  Handler_USART_RXC2
     584  ReceiveReply
      76  RestartHart
      42  USART1_RXC
       4  USART1_RXC::??INTVEC 144
      42  USART1_TXC
       4  USART1_TXC::??INTVEC 152
      42  USART1_UDRE
       4  USART1_UDRE::??INTVEC 148
      42  USART2_RXC
       4  USART2_RXC::??INTVEC 204
      40  USART2_TXC
       4  USART2_TXC::??INTVEC 212
      42  USART2_UDRE
       4  USART2_UDRE::??INTVEC 208
      42  USART3_RXC
       4  USART3_RXC::??INTVEC 216
      42  USART3_TXC
       4  USART3_TXC::??INTVEC 224
      42  USART3_UDRE
       4  USART3_UDRE::??INTVEC 220
       2  _A_UBRR1
       2  _A_UBRR2
       2  _A_UBRR3
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_UCSR2A
       1  _A_UCSR2B
       1  _A_UCSR2C
       1  _A_UCSR3A
       1  _A_UCSR3B
       1  _A_UCSR3C
       1  _A_UDR1
       1  _A_UDR2
       1  _A_UDR3
       6  _demo1_transaction
     276  _hart_channels
    4185  _hart_task0
          _hart_task1
          _hart_task2
     848  do_hart_transaction
     118  hart_config_uart
      90  hart_irq_finish_tx
       6  hart_irq_finish_tx0
       6  hart_irq_finish_tx1
       6  hart_irq_finish_tx2
     200  hart_irq_tx_next
       6  hart_irq_tx_next0
       6  hart_irq_tx_next1
       6  hart_irq_tx_next2
     290  hart_start
      54  vega_radar_handle_rx_error
      88  vega_radar_make_request
      14  -- Other

 
    18 bytes in segment ABSOLUTE
 3 700 bytes in segment CODE
    11 bytes in segment FAR_F
    14 bytes in segment INITTAB
    36 bytes in segment INTVEC
 4 485 bytes in segment NEAR_I
 4 485 bytes in segment NEAR_ID
     1 byte  in segment NEAR_Z
 
 8 196 bytes of CODE memory (+ 50 bytes shared)
 4 486 bytes of DATA memory (+ 18 bytes shared)

Errors: none
Warnings: 3
