###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       31/Jan/2023  09:48:37
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\AN-ZBHART\Src\init.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW8369.tmp
#        (D:\S2Prog\IO\AN-ZBHART\Src\init.c --cpu=m1280 -ms -o
#        D:\S2Prog\IO\AN-ZBHART\Release\Obj -D OS_LIBMODE_R -D OS_UART=-1 -lCN
#        D:\S2Prog\IO\AN-ZBHART\Release\List -y --initializers_in_flash
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\AN-ZBHART\INC\\ -I
#        ..\..\..\Shared\Inc\\ --eeprom_size 4096 --clib -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\AN-ZBHART\Release\List\init.lst
#    Object file  =  D:\S2Prog\IO\AN-ZBHART\Release\Obj\init.r90
#
###############################################################################

D:\S2Prog\IO\AN-ZBHART\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x108
   \   union <unnamed> volatile __ext_io _A_PORTK
   \                     _A_PORTK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x107
   \   union <unnamed> volatile __ext_io _A_DDRK
   \                     _A_DDRK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x98
   \   union <unnamed> volatile __io _A_OCR3A
   \                     _A_OCR3A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x91
   \   union <unnamed> volatile __io _A_TCCR3B
   \                     _A_TCCR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_TCCR3A
   \                     _A_TCCR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7e
   \   union <unnamed> volatile __io _A_DIDR0
   \                     _A_DIDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7d
   \   union <unnamed> volatile __io _A_DIDR2
   \                     _A_DIDR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7b
   \   union <unnamed> volatile __io _A_ADCSRB
   \                     _A_ADCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x75
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          #include "string.h"
     12          
     13          #include "hart_gpio.h"
     14          #include "hart.h"
     15          
     16          /*
     17          **===========================================================================
     18          ** Init the system according to board type
     19          **===========================================================================
     20          */

   \                                 In  segment CODE, align 2, keep-with-next
     21          void InitSystem(void) {
   \                     InitSystem:
     22              // UnitID = AN_ZBANA; //EHSMark AN_ZBHART;                   // 0x02: ZBHART
     23          
     24              UnitID  = (PINB >> 2) & 0x03;          //get the unit ID
   \   00000000   B103               IN      R16, 0x03
   \   00000002   9506               LSR     R16
   \   00000004   9506               LSR     R16
   \   00000006   7003               ANDI    R16, 0x03
   \   00000008   9300....           STS     UnitID, R16
     25              Init_CPU();                           // init all processes
   \   0000000C   94F8               CLI
   \   0000000E   E000               LDI     R16, 0
   \   00000010   BF05               OUT     0x35, R16
   \   00000012   BB0D               OUT     0x1D, R16
   \   00000014   EA0A               LDI     R16, 170
   \   00000016   9300....           STS     _A_EICRA, R16
   \   0000001A   9300....           STS     _A_EICRB, R16
   \   0000001E   E001               LDI     R16, 1
   \   00000020   BB0D               OUT     0x1D, R16
   \   00000022   E000               LDI     R16, 0
   \   00000024   9300....           STS     _A_XMCRA, R16
   \   00000028   E007               LDI     R16, 7
   \   0000002A   9300....           STS     _A_XMCRB, R16
   \   0000002E   E800               LDI     R16, 128
   \   00000030   BF0F               OUT     0x3F, R16
   \   00000032   B705               IN      R16, 0x35
   \   00000034   9300....           STS     RestartStatus, R16
   \   00000038   E000               LDI     R16, 0
   \   0000003A   BF05               OUT     0x35, R16
   \   0000003C   9300....           STS     WriteCount, R16
     26              Init_IO();
   \   00000040   9100....           LDS     R16, UnitID
   \   00000044   3003               CPI     R16, 3
   \   00000046   F4B9               BRNE    ??InitSystem_0
   \   00000048   E000               LDI     R16, 0
   \   0000004A   BB00               OUT     0x10, R16
   \   0000004C   BB01               OUT     0x11, R16
   \   0000004E   E303               LDI     R16, 51
   \   00000050   9300....           STS     _A_DDRK, R16
   \   00000054   E80C               LDI     R16, 140
   \   00000056   9300....           STS     _A_PORTK, R16
   \   0000005A   E000               LDI     R16, 0
   \   0000005C   9300....           STS     _A_DIDR0, R16
   \   00000060   E400               LDI     R16, 64
   \   00000062   9300....           STS     _A_DIDR2, R16
   \   00000066   E807               LDI     R16, 135
   \   00000068   9300....           STS     _A_ADCSRA, R16
   \   0000006C   E000               LDI     R16, 0
   \   0000006E   9300....           STS     _A_ADCSRB, R16
   \   00000072   ........           CALL    hart_gpio_init
     27              Init_TMR();
   \                     ??InitSystem_0:
   \   00000076   9100....           LDS     R16, UnitID
   \   0000007A   3003               CPI     R16, 3
   \   0000007C   F461               BRNE    ??InitSystem_1
   \   0000007E   E400               LDI     R16, 64
   \   00000080   9300....           STS     _A_TCCR3A, R16
   \   00000084   E009               LDI     R16, 9
   \   00000086   9300....           STS     _A_TCCR3B, R16
   \   0000008A   E007               LDI     R16, 7
   \   0000008C   E010               LDI     R17, 0
   \   0000008E   9310....           STS     (_A_OCR3A + 1), R17
   \   00000092   9300....           STS     _A_OCR3A, R16
     28          #if (OS_UART != 0)
     29              Init_USART(38400);                // only 1 My485UART to TCU on ZBHART
   \                     ??InitSystem_1:
   \   00000096   E000               LDI     R16, 0
   \   00000098   9300....           STS     My485UART, R16
   \   0000009C   9300....           STS     (My485UART + 1), R16
   \   000000A0   9300....           STS     (My485UART + 2), R16
   \   000000A4   9300....           STS     (My485UART + 3), R16
   \   000000A8   9300....           STS     (My485UART + 4), R16
   \   000000AC   9300....           STS     (My485UART + 5), R16
   \   000000B0   9300....           STS     (My485UART + 8), R16
   \   000000B4   9300....           STS     (My485UART + 9), R16
   \   000000B8   ....               LDI     R30, LOW((My485UART + 673))
   \   000000BA   ....               LDI     R31, HIGH((My485UART + 673))
   \   000000BC   8300               ST      Z, R16
   \   000000BE   8301               STD     Z+1, R16
   \   000000C0   9300....           STS     (My485UART + 6), R16
   \   000000C4   8303               STD     Z+3, R16
   \   000000C6   9300....           STS     _A_UCSR0A, R16
   \   000000CA   E109               LDI     R16, 25
   \   000000CC   9300....           STS     _A_UBRR0, R16
   \   000000D0   E000               LDI     R16, 0
   \   000000D2   930000C5           STS     197, R16
   \   000000D6                      REQUIRE ?Subroutine0
   \   000000D6                      REQUIRE _A_PINB
   \   000000D6                      REQUIRE _A_UCSR0A
   \   000000D6                      REQUIRE _A_UBRR0
   \   000000D6                      REQUIRE _A_UCSR0B
   \   000000D6                      REQUIRE _A_UCSR0C
   \   000000D6                      REQUIRE _A_TCCR3A
   \   000000D6                      REQUIRE _A_TCCR3B
   \   000000D6                      REQUIRE _A_OCR3A
   \   000000D6                      REQUIRE _A_MCUCR
   \   000000D6                      REQUIRE _A_EIMSK
   \   000000D6                      REQUIRE _A_EICRA
   \   000000D6                      REQUIRE _A_EICRB
   \   000000D6                      REQUIRE _A_XMCRA
   \   000000D6                      REQUIRE _A_XMCRB
   \   000000D6                      REQUIRE _A_SREG
   \   000000D6                      REQUIRE _A_DDRF
   \   000000D6                      REQUIRE _A_PORTF
   \   000000D6                      REQUIRE _A_DDRK
   \   000000D6                      REQUIRE _A_PORTK
   \   000000D6                      REQUIRE _A_DIDR0
   \   000000D6                      REQUIRE _A_DIDR2
   \   000000D6                      REQUIRE _A_ADCSRA
   \   000000D6                      REQUIRE _A_ADCSRB
   \   000000D6                      ;               // Fall through to label ?Subroutine0
     30          #endif
     31              //Init_AD();
     32              Init_Values();                        // init the values in the system
     33          
     34              //ADCSRA |= 0x40 ;                    //start the AD convertion
     35          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   E908               LDI     R16, 152
   \   00000002   9300....           STS     _A_UCSR0B, R16
   \   00000006   E006               LDI     R16, 6
   \   00000008   9300....           STS     _A_UCSR0C, R16
   \   0000000C   9508               RET
     36          
     37          /*
     38          **===========================================================================
     39          ** Init the CPU related registers
     40          **===========================================================================
     41          */

   \                                 In  segment CODE, align 2, keep-with-next
     42          void Init_CPU(void) {
   \                     Init_CPU:
     43          
     44              __disable_interrupt();
   \   00000000   94F8               CLI
     45          
     46              MCUCR = 0x00;        // MCU control register wait state
   \   00000002   E000               LDI     R16, 0
   \   00000004   BF05               OUT     0x35, R16
     47              EIMSK = 0x00;        // External interrupt mask register , all off
   \   00000006   BB0D               OUT     0x1D, R16
     48              EICRA = 0xAA;        // External interrupt control register, o on faling edge
   \   00000008   EA0A               LDI     R16, 170
   \   0000000A   9300....           STS     _A_EICRA, R16
     49              EICRB = 0xAA;        // External interrupt control register
   \   0000000E   9300....           STS     _A_EICRB, R16
     50              EIMSK = 0x01;        // External interrupt mask register, int 0 on
   \   00000012   E001               LDI     R16, 1
   \   00000014   BB0D               OUT     0x1D, R16
     51          
     52              XMCRA = 0x00;        // maximum wait states
   \   00000016   E000               LDI     R16, 0
   \   00000018   9300....           STS     _A_XMCRA, R16
     53              XMCRB = 0x07;        // Full portC + bus keeper
   \   0000001C   E007               LDI     R16, 7
   \   0000001E   9300....           STS     _A_XMCRB, R16
     54              SREG  = 0x80;        // global interrupt
   \   00000022   E800               LDI     R16, 128
   \   00000024   BF0F               OUT     0x3F, R16
     55              //XDIV  = 0x00 ;      // Init valuse used 0x00v XXX
     56          
     57              RestartStatus = MCUCR;       // Remember reset source
   \   00000026   B705               IN      R16, 0x35
   \   00000028   9300....           STS     RestartStatus, R16
     58              MCUCR = 0x00;              // and reset
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   BF05               OUT     0x35, R16
     59          
     60              /*--- Initialize buffer ---*/
     61              WriteCount = 0;
   \   00000030   9300....           STS     WriteCount, R16
     62          }
   \   00000034   9508               RET
   \   00000036                      REQUIRE _A_MCUCR
   \   00000036                      REQUIRE _A_EIMSK
   \   00000036                      REQUIRE _A_EICRA
   \   00000036                      REQUIRE _A_EICRB
   \   00000036                      REQUIRE _A_XMCRA
   \   00000036                      REQUIRE _A_XMCRB
   \   00000036                      REQUIRE _A_SREG
     63          
     64          /*
     65          **===========================================================================
     66          ** Init the watchdog registers
     67          **===========================================================================
     68          */

   \                                 In  segment CODE, align 2, keep-with-next
     69          __monitor void Init_Watchdog(void) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
     70          
     71              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
     72              WDTCSR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   9300....           STS     _A_WDTCSR, R16
     73              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
     74          
     75          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCSR
     76          
     77          /*
     78          **===========================================================================
     79          ** Init the IO related registers
     80          **===========================================================================
     81          */
     82          

   \                                 In  segment CODE, align 2, keep-with-next
     83          void Init_IO(void) {
   \                     Init_IO:
     84              /*--- Initialize the data registers, output value and input pullup ---*/
     85              switch ( UnitID ) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   3003               CPI     R16, 3
   \   00000006   F4B9               BRNE    ??Init_IO_0
     86              case AN_ZB485:                  // AN-ZB485
     87              case AN_ZBANA:                  // AN-ZBANA
     88                  break;
     89              case AN_ZBHART:
     90                  DDRF      =  0x00;      // Port F data direction, used for ADC
   \   00000008   E000               LDI     R16, 0
   \   0000000A   BB00               OUT     0x10, R16
     91                  PORTF     =  0x00;      // Port F data
   \   0000000C   BB01               OUT     0x11, R16
     92                  // Port K initialization
     93                  // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
     94                  DDRK=(0<<DDK7) | (0<<DDK6) | (1<<DDK5) | (1<<DDK4) | (0<<DDK3) | (0<<DDK2) | (1<<DDK1) | (1<<DDK0);
   \   0000000E   E303               LDI     R16, 51
   \   00000010   9300....           STS     _A_DDRK, R16
     95                  // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T Pullup
     96                  PORTK=(1<<PORTK7) | (0<<PORTK6) | (0<<PORTK5) | (0<<PORTK4) | (1<<PORTK3) | (1<<PORTK2) | (0<<PORTK1) | (0<<PORTK0);
   \   00000014   E80C               LDI     R16, 140
   \   00000016   9300....           STS     _A_PORTK, R16
     97                  // ADC initialization
     98                  // ADC Clock frequency: 125,000 kHz
     99                  // ADC Voltage Reference: AVCC pin
    100                  // ADC Auto Trigger Source: ADC Stopped
    101                  // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
    102                  // ADC4: On, ADC5: On, ADC6: On, ADC7: On
    103                  DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   9300....           STS     _A_DIDR0, R16
    104                  // Digital input buffers on ADC8: On, ADC9: On, ADC10: On, ADC11: On
    105                  // ADC12: On, ADC13: On, ADC14: Off, ADC15: On
    106                  DIDR2=(0<<ADC15D) | (1<<ADC14D) | (0<<ADC13D) | (0<<ADC12D) | (0<<ADC11D) | (0<<ADC10D) | (0<<ADC9D) | (0<<ADC8D);
   \   00000020   E400               LDI     R16, 64
   \   00000022   9300....           STS     _A_DIDR2, R16
    107                  //ADMUX=ADC_VREF_TYPE;
    108                  ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
   \   00000026   E807               LDI     R16, 135
   \   00000028   9300....           STS     _A_ADCSRA, R16
    109                  ADCSRB=(0<<MUX5) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   9300....           STS     _A_ADCSRB, R16
    110                  hart_gpio_init();
   \   00000032   ........           CALL    hart_gpio_init
    111                  break;
    112          
    113              default:
    114                  break;
    115              }
    116          }
   \                     ??Init_IO_0:
   \   00000036   9508               RET
   \   00000038                      REQUIRE _A_DDRF
   \   00000038                      REQUIRE _A_PORTF
   \   00000038                      REQUIRE _A_DDRK
   \   00000038                      REQUIRE _A_PORTK
   \   00000038                      REQUIRE _A_DIDR0
   \   00000038                      REQUIRE _A_DIDR2
   \   00000038                      REQUIRE _A_ADCSRA
   \   00000038                      REQUIRE _A_ADCSRB
    117          
    118          /*
    119          **===========================================================================
    120          ** Init the timer related registers
    121          **===========================================================================
    122          */

   \                                 In  segment CODE, align 2, keep-with-next
    123          void Init_TMR(void) {
   \                     Init_TMR:
    124              /*--- Timer control (disable clock inputs) ---*/
    125          
    126              switch ( UnitID ) {
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   3003               CPI     R16, 3
   \   00000006   F461               BRNE    ??Init_TMR_0
    127              case AN_ZB485:                  // AN-ZB485
    128              case AN_ZBANA:                  // AN-ZBANA
    129                  break;
    130              case AN_ZBHART:
    131                  //
    132                  // to provide ADC with 1 Mhz clock, OC3A (PE3) is connected to ADC clock
    133                  //
    134                  // we will use TC3 to generate 1 Mhz clock by setting
    135                  //
    136                  // 1) TCCR3A    : 01000000   = 0x40
    137                  //    a) Bit 7:6,     COM3A1/COM3A0   :   01  - Toggle OC3A(PE3) on compare match
    138                  //    b) Bit 5:2,     don't care. all zero
    139                  //    c) Bit 1:0,     WGM31/WGM30     :   00 for CTC mode
    140                  //
    141                  // 2) TCCR3B    : 00001001 = 0x09
    142                  //    a) Bit 7,       noise canceler. don't care. 0
    143                  //    b) Bit 6,       edge select for input. don't care. 0
    144                  //    c) Bit 5,       reserved, 0
    145                  //    d) Bit 4:3,     WGM33/WGM32     : 01 for CTC mode with OCR3A as TOP
    146                  //    e) Bit 2:0,     CS32/CS31/CS30  : Clock Select, 001 : 16 Mhz with no divider
    147                  //
    148                  // 3) OCR3A     : 7, compare match at 8 tick at 16 Mhz will generate 1 MHz Clock
    149                  //
    150                  //
    151                  TCCR3A    = 0x40;
   \   00000008   E400               LDI     R16, 64
   \   0000000A   9300....           STS     _A_TCCR3A, R16
    152                  TCCR3B    = 0x09;
   \   0000000E   E009               LDI     R16, 9
   \   00000010   9300....           STS     _A_TCCR3B, R16
    153                  OCR3A     = 7;
   \   00000014   E007               LDI     R16, 7
   \   00000016   E010               LDI     R17, 0
   \   00000018   9310....           STS     (_A_OCR3A + 1), R17
   \   0000001C   9300....           STS     _A_OCR3A, R16
    154                  break;
    155          
    156              default:
    157                  break;
    158              }
    159          }
   \                     ??Init_TMR_0:
   \   00000020   9508               RET
   \   00000022                      REQUIRE _A_TCCR3A
   \   00000022                      REQUIRE _A_TCCR3B
   \   00000022                      REQUIRE _A_OCR3A
    160          
    161          /*
    162          **===========================================================================
    163          ** Init the USARTs registers
    164          **===========================================================================
    165          */

   \                                 In  segment CODE, align 2, keep-with-next
    166          void Init_USART(unsigned long baud) {
   \                     Init_USART:
   \   00000000   01A8               MOVW    R21:R20, R17:R16
   \   00000002   01B9               MOVW    R23:R22, R19:R18
    167          
    168          
    169              /*--- Configure My485UART data block ---*/
    170              My485UART.TxFirst   	    = 0x00;
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     My485UART, R16
   \   0000000A   9300....           STS     (My485UART + 1), R16
    171              My485UART.TxLast    	    = 0x00;
   \   0000000E   9300....           STS     (My485UART + 2), R16
   \   00000012   9300....           STS     (My485UART + 3), R16
    172              My485UART.TxCount   	    = 0x00;
   \   00000016   9300....           STS     (My485UART + 4), R16
   \   0000001A   9300....           STS     (My485UART + 5), R16
    173              My485UART.TxId        	    = 0x00;
   \   0000001E   9300....           STS     (My485UART + 8), R16
    174              My485UART.TxAddress   	    = 0x00;
   \   00000022   9300....           STS     (My485UART + 9), R16
    175              My485UART.RxCount   	    = 0x00;
   \   00000026   ....               LDI     R30, LOW((My485UART + 673))
   \   00000028   ....               LDI     R31, HIGH((My485UART + 673))
   \   0000002A   8300               ST      Z, R16
   \   0000002C   8301               STD     Z+1, R16
    176              My485UART.TxStatus  	    = 0x00;
   \   0000002E   9300....           STS     (My485UART + 6), R16
    177              My485UART.SequenceNumber    = 0x00;
   \   00000032   8303               STD     Z+3, R16
    178          
    179              UCSR0A  = 0x00;
   \   00000034   9300....           STS     _A_UCSR0A, R16
    180              UBRR0L  = ((XTAL_CPU / 16 / baud) - 1) & 0xff;
   \   00000038   E400               LDI     R16, 64
   \   0000003A   E412               LDI     R17, 66
   \   0000003C   E02F               LDI     R18, 15
   \   0000003E   E030               LDI     R19, 0
   \   00000040   ........           CALL    ?UL_DIVMOD_S_L03
   \   00000044   2F40               MOV     R20, R16
   \   00000046   954A               DEC     R20
   \   00000048   9340....           STS     _A_UBRR0, R20
    181              UBRR0H  = (((XTAL_CPU / 16 / baud) - 1) >> 8) & 0xff;
   \   0000004C   5001               SUBI    R16, 1
   \   0000004E   4010               SBCI    R17, 0
   \   00000050   931000C5           STS     197, R17
    182              // why the fuck do you enalbe UDRE here you stupid fucktard!!! -hkim-
    183              //UCSR0B  = 0xb8;                                       /* tx/ rx enable, int udre/rxon */
    184              //UCSR0B  &= 0x07;  //  Disable Tx,TxE, Rx at startup 0x98;                                       /* tx/ rx enable, int udre/rxon */
    185              UCSR0B  = 0x98;                                       /* tx/ rx enable, int udre/rxon */
   \   00000054   ....               RJMP    ?Subroutine0
   \   00000056                      REQUIRE _A_UCSR0A
   \   00000056                      REQUIRE _A_UBRR0
   \   00000056                      REQUIRE _A_UCSR0B
   \   00000056                      REQUIRE _A_UCSR0C
    186              UCSR0C  = 0x06;                                       /* n,8,1 */
    187          }
    188          
    189          
    190          /*
    191          **===========================================================================
    192          ** Init values  in the system
    193          **===========================================================================
    194          */

   \                                 In  segment CODE, align 2, keep-with-next
    195          void Init_Values(void) {
   \                     Init_Values:
    196          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   InitSystem
        2   -> hart_gpio_init
      2   Init_CPU
      2   Init_IO
        2   -> hart_gpio_init
      2   Init_TMR
      2   Init_USART
        2 ?UL_DIVMOD_S_L03
      2   Init_Values
      2   Init_Watchdog


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?Subroutine0
     214  InitSystem
      54  Init_CPU
      56  Init_IO
      34  Init_TMR
      86  Init_USART
       2  Init_Values
      18  Init_Watchdog
       1  _A_ADCSRA
       1  _A_ADCSRB
       1  _A_DDRF
       1  _A_DDRK
       1  _A_DIDR0
       1  _A_DIDR2
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       2  _A_OCR3A
       1  _A_PINB
       1  _A_PORTF
       1  _A_PORTK
       1  _A_SREG
       1  _A_TCCR3A
       1  _A_TCCR3B
       2  _A_UBRR0
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_WDTCSR
       1  _A_XMCRA
       1  _A_XMCRB

 
  26 bytes in segment ABSOLUTE
 478 bytes in segment CODE
 
 478 bytes of CODE memory
   0 bytes of DATA memory (+ 26 bytes shared)

Errors: none
Warnings: none
