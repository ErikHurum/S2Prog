###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       29/Dec/2022  11:09:59
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart active\Lib\low_level_init.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW929F.tmp ("D:\S2Prog\IO\hart
#        active\Lib\low_level_init.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\hart
#        active\Release_debug\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\hart active\Release_debug\List" -y
#        --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "D:\S2Prog\IO\hart active\INC\\" -I "D:\S2Prog\IO\hart
#        active\..\..\SHARED\INC\\" --eeprom_size 4096 --dlib --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  
#        D:\S2Prog\IO\hart active\Release_debug\List\low_level_init.lst
#    Object file  =  
#        D:\S2Prog\IO\hart active\Release_debug\Obj\low_level_init.r90
#
###############################################################################

D:\S2Prog\IO\hart active\Lib\low_level_init.c
      1          /**************************************************************
      2           **             - __low_level_init.c -
      3           **
      4           **     Special initializations that are performed before
      5           **     segment initialization. It is also possible to
      6           **     completely block the normal segment initialization.
      7           **
      8           **     Used with iccAVR.
      9           **
     10           **     $Revision: 6756 $
     11           **
     12           **************************************************************/
     13          #include <intrinsics.h>
     14          
     15          extern void *__RSTACK_in_external_ram;
     16          
     17          /**************************************************************
     18           **
     19           ** How to implement a low-level initialization function in C
     20           ** =========================================================
     21           **
     22           ** 1) Only use local auto variables.
     23           ** 2) Don't use global or static variables.
     24           ** 3) Don't use global or static objects (EC++ only).
     25           ** 4) Don't use agregate initializers, e.g. struct a b = {1};
     26           ** 5) Don't call any library functions (function calls that
     27           **    the compiler generates, e.g. to do integer math, are OK).
     28           ** 6) Setup the RSTACK as is appropriate! 
     29           **    See code below or use the command line --enable_external_bus
     30           **
     31           **************************************************************/
     32          #ifdef __cplusplus
     33          extern "C" {
     34          #endif

   \                                 In  segment CODE, align 2, keep-with-next
     35          char __low_level_init()
   \                     __low_level_init:
     36          {
     37            /* Uncomment the statement below if the RSTACK */
     38            /* segment has been placed in external SRAM!   */
     39          
     40            /* __require(__RSTACK_in_external_ram); */
     41            /* Or */
     42            /* __require(__RSTACK_in_external_ram_new_way); */
     43            /* Plus, if you uncomment this you will have to */
     44            /* define the sfr __?XMCRA in assembler         */
     45          
     46            /* If the low-level initialization routine is  */
     47            /* written in assembler, the line above should */
     48            /* be written as:                              */
     49            /*     EXTERN  __RSTACK_in_external_ram        */
     50            /*     REQUIRE __RSTACK_in_external_ram        */
     51          
     52            /* Add your custom setup here. */
     53          
     54            /* Return 1 to indicate that normal segment */
     55            /* initialization should be performed. If   */
     56            /* normal segment initialization should not */
     57            /* be performed, return 0.                  */
     58            return 1;
   \   00000000   E001               LDI     R16, 1
   \   00000002   9508               RET
     59          }
     60          #ifdef __cplusplus
     61          }
     62          #endif
     63          

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   __low_level_init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  __low_level_init

 
 4 bytes in segment CODE
 
 4 bytes of CODE memory

Errors: none
Warnings: none
