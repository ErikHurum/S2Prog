###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       29/Dec/2022  11:10:00
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart active\Src\main.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW92A0.tmp ("D:\S2Prog\IO\hart
#        active\Src\main.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\hart
#        active\Release_debug\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\hart active\Release_debug\List" -y
#        --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "D:\S2Prog\IO\hart active\INC\\" -I "D:\S2Prog\IO\hart
#        active\..\..\SHARED\INC\\" --eeprom_size 4096 --dlib --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\hart active\Release_debug\List\main.lst
#    Object file  =  D:\S2Prog\IO\hart active\Release_debug\Obj\main.r90
#
###############################################################################

D:\S2Prog\IO\hart active\Src\main.c
      1          /**********************************************************
      2          *  
      3          *   Main file for AN-ZB* program       
      4          *  
      5          ***********************************************************/
      6          
      7          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "variables.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char UnitID
   \                     UnitID:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RestartStatus
   \                     RestartStatus:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char volatile PortPair
   \                     PortPair:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   struct <unnamed> My485UART
   \                     My485UART:
   \   00000000                      DS8 31

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   AnalogInt ADInt
   \                     ADInt:
   \   00000000                      DS8 32

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   TargetData TData
   \                     TData:
   \   00000000                      DS8 446

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char TxBufferCh0[400]
   \                     TxBufferCh0:
   \   00000000                      DS8 400

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char RxBufferCh0[150]
   \                     RxBufferCh0:
   \   00000000                      DS8 150

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char MailBufCh0[100]
   \                     MailBufCh0:
   \   00000000                      DS8 100

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \   char volatile ADChannel
   \                     ADChannel:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for ADChannel>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char WriteCount
   \                     WriteCount:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char *__near pWriteBuffer
   \                     pWriteBuffer:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char EEPWriteOK
   \                     EEPWriteOK:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   char volatile hostAddress
   \                     hostAddress:
   \   00000000                      DS8 1

   \                                 In  segment FAR_F, align 1, keep-with-next
   \   char const __farflash crc[256]
   \                     crc:
   \   00000000   5E00E2BC3F61       DC8 0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31
   \              83DD9CC2207E
   \              FDA31F      
   \   0000000F   9D4121C3FC7F       DC8 65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96
   \              40A25F1EE301
   \              3EBD60      
   \   0000001E   DC827D23C19F       DC8 130, 220, 35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128
   \              1C42A0FEBFE1
   \              035D80      
   \   0000002D   3CDEBE6202E0       DC8 222, 60, 98, 190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158
   \              DF5C63817C3D
   \              C0229E      
   \   0000003C   431DFFA11846       DC8 29, 67, 161, 255, 70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56
   \              A4FA7927C59B
   \              DA8438      
   \   0000004B   E56659BBDB07       DC8 102, 229, 187, 89, 7, 219, 133, 103, 57, 186, 228, 6, 88, 25, 71
   \              6785BA3906E4
   \              195847      
   \   0000005A   FBA526789AC4       DC8 165, 251, 120, 38, 196, 154, 101, 59, 217, 135, 4, 90, 184, 230
   \              3B6587D95A04
   \              E6B8        
   \   00000068   F9A7451B98C6       DC8 167, 249, 27, 69, 198, 152, 122, 36, 248, 166, 68, 26, 153, 199, 37
   \              247AA6F81A44
   \              C79925      
   \   00000077   3A7B86645BD8       DC8 123, 58, 100, 134, 216, 91, 5, 231, 185, 140, 210, 48, 110, 237
   \              E7058CB930D2
   \              ED6E        
   \   00000085   51B34E0FF210       DC8 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205, 17, 79, 173, 243
   \              2FAC937111CD
   \              AD4FF3      
   \   00000094   2E7092CC8DD3       DC8 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80, 175, 241
   \              316FECB2500E
   \              F1AF        
   \   000000A2   4D1390CE2C72       DC8 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238, 50
   \              336D8FD1520C
   \              EEB032      
   \   000000B1   8E6C53D0EF0D       DC8 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45
   \              F0B14CAE9112
   \              2DCF        
   \   000000BF   CA737694AB28       DC8 115, 202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55
   \              17F50849B456
   \              69EA37      
   \   000000CE   8BD50957B5EB       DC8 213, 139, 87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119
   \              6836D48ACB95
   \              7729        
   \   000000DC   AAF41648B7E9       DC8 244, 170, 72, 22, 233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151
   \              0B55D6886A34
   \              752B97      
   \   000000EB   4AC9F61474A8       DC8 201, 74, 20, 246, 168, 116, 42, 200, 150, 21, 75, 169, 247, 182
   \              C82A1596A94B
   \              B6F7        
   \   000000F9   0AE8D7546B89       DC8 232, 10, 84, 215, 137, 107, 53
   \              35          
     11          #include "version.h"
     12          #include "inavr.h"
     13          #include "string.h"
     14          #include <intrinsics.h>
     15          #include "hart.h"
     16          
     17          extern void InternalADCHandler(void);
     18          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     19          OS_STACKPTR int Stack1[125], Stack2[80],Stack3[80];                                        /* Task stacks */
   \                     Stack1:
   \   00000000                      DS8 250

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Stack2:
   \   00000000                      DS8 160

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     Stack3:
   \   00000000                      DS8 160

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     20          OS_TASK     TCB_USART0, TCB_WATCHDOG, TCB_AD7715, TCB_INT_ADC;                                         /* Task-control-blocks */
   \                     TCB_USART0:
   \   00000000                      DS8 24
   \                     TCB_WATCHDOG:
   \   00000018                      DS8 24
   \                     TCB_INT_ADC:
   \   00000030                      DS8 24

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     TCB_AD7715:
   \   00000000                      DS8 24
     21          
     22          

   \                                 In  segment CODE, align 2, keep-with-next
     23          unsigned char ReadSignatureRow(unsigned int addr)	
   \                     ReadSignatureRow:
     24          {
     25            return (__AddrToZByteToSPMCR_LPM((void __flash*)(addr),(1 <<SPMEN) | (1<<SIGRD)));
   \   00000000   E221               LDI     R18, 33
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   BF27               OUT     0x37, R18
   \   00000006   9104               LPM     R16, Z
   \   00000008   9508               RET
     26          }
     27          /**********************************************************
     28          *
     29          *       main
     30          *  
     31          * CPU signatures:
     32          * ATmega128 : 0x1E, 0x97, 0x03
     33          * ATmega1280: 0x1E, 0x97, 0x02
     34          * 0x1E=Manufactured by Atmel
     35          * 0x97= Indicates 128Kbyte Flash memory
     36          * Last digit is type of device.
     37          * 
     38          **********************************************************/
     39          

   \                                 In  segment CODE, align 2, keep-with-next
     40          void main(void)
   \                     main:
     41          {
     42          #if 1
     43            asm("WDR");                             // Enable watchdog here because the OS hang some times during startup
   \   00000000   95A8               WDR
     44            WDTCSR = 0x1f;
   \   00000002   E10F               LDI     R16, 31
   \   00000004   9300....           STS     _A_WDTCSR, R16
     45            WDTCSR = 0x0f;
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   9300....           STS     _A_WDTCSR, R16
     46            asm("WDR");                             // kick the dog!!
   \   0000000E   95A8               WDR
     47          #endif
     48           // SPMCSR |= 1 << 5;
     49            
     50            int SByte1 = ReadSignatureRow(0); 
   \   00000010   E201               LDI     R16, 33
   \   00000012   E0E0               LDI     R30, 0
   \   00000014   E0F0               LDI     R31, 0
   \   00000016   BF07               OUT     0x37, R16
   \   00000018   9104               LPM     R16, Z
     51            int SByte3 = ReadSignatureRow(2); 
   \   0000001A   E201               LDI     R16, 33
   \   0000001C   E0E2               LDI     R30, LOW(2)
   \   0000001E   BF07               OUT     0x37, R16
   \   00000020   9104               LPM     R16, Z
     52            int SByte5 = ReadSignatureRow(4); 
   \   00000022   E201               LDI     R16, 33
   \   00000024   E0E4               LDI     R30, LOW(4)
   \   00000026   BF07               OUT     0x37, R16
   \   00000028   9104               LPM     R16, Z
     53            OS_InitKern();          /* initialize OS                 */
   \   0000002A   ........           CALL    OS_InitKern
     54            OS_InitHW();            /* initialize Hardware for OS    */
   \   0000002E   ........           CALL    OS_InitHW
     55            InitSystem();           // init the system according to board
   \   00000032   ........           CALL    InitSystem
     56            memset(&TData,sizeof(TData),0);
   \   00000036   E040               LDI     R20, 0
   \   00000038   E050               LDI     R21, 0
   \   0000003A   EB2E               LDI     R18, 190
   \   0000003C   E031               LDI     R19, 1
   \   0000003E   ....               LDI     R16, LOW(TData)
   \   00000040   ....               LDI     R17, (TData) >> 8
   \   00000042   ........           CALL    memset
     57            hart_start();
   \   00000046   ........           CALL    hart_start
     58          
     59            OS_CREATETASK(&TCB_USART0     , "UART0"           , Usart0Handler     , 110, Stack1);
   \   0000004A   E002               LDI     R16, 2
   \   0000004C   E010               LDI     R17, 0
   \   0000004E   931A               ST      -Y, R17
   \   00000050   930A               ST      -Y, R16
   \   00000052   EF0A               LDI     R16, 250
   \   00000054   931A               ST      -Y, R17
   \   00000056   930A               ST      -Y, R16
   \   00000058   ....               LDI     R16, LOW(Stack1)
   \   0000005A   ....               LDI     R17, (Stack1) >> 8
   \   0000005C   931A               ST      -Y, R17
   \   0000005E   930A               ST      -Y, R16
   \   00000060   ....               LDI     R22, LOW(Usart0Handler/2)
   \   00000062   ....               LDI     R23, (Usart0Handler/2) >> 8
   \   00000064   E64E               LDI     R20, 110
   \   00000066   ....               LDI     R18, LOW(`?<Constant "UART0">`)
   \   00000068   ....               LDI     R19, (`?<Constant "UART0">`) >> 8
   \   0000006A   ....               LDI     R16, LOW(TCB_USART0)
   \   0000006C   ....               LDI     R17, (TCB_USART0) >> 8
   \   0000006E   ........           CALL    OS_CreateTask_S
     60            OS_CREATETASK(&TCB_WATCHDOG   , "Watch dog"       , WatchDogHandler   ,  50, Stack3);
   \   00000072   E002               LDI     R16, 2
   \   00000074   E010               LDI     R17, 0
   \   00000076   931A               ST      -Y, R17
   \   00000078   930A               ST      -Y, R16
   \   0000007A   EA00               LDI     R16, 160
   \   0000007C   931A               ST      -Y, R17
   \   0000007E   930A               ST      -Y, R16
   \   00000080   ....               LDI     R16, LOW(Stack3)
   \   00000082   ....               LDI     R17, (Stack3) >> 8
   \   00000084   931A               ST      -Y, R17
   \   00000086   930A               ST      -Y, R16
   \   00000088   ....               LDI     R22, LOW(WatchDogHandler/2)
   \   0000008A   ....               LDI     R23, (WatchDogHandler/2) >> 8
   \   0000008C   E342               LDI     R20, 50
   \   0000008E   ....               LDI     R18, LOW((`?<Constant "UART0">` + 6))
   \   00000090   ....               LDI     R19, HIGH((`?<Constant "UART0">` + 6))
   \   00000092   ....               LDI     R16, LOW((TCB_USART0 + 24))
   \   00000094   ....               LDI     R17, HIGH((TCB_USART0 + 24))
   \   00000096   ........           CALL    OS_CreateTask_S
     61            OS_CREATETASK(&TCB_INT_ADC    , "Internal ADC "   , InternalADCHandler,  60, Stack2);
   \   0000009A   E002               LDI     R16, 2
   \   0000009C   E010               LDI     R17, 0
   \   0000009E   931A               ST      -Y, R17
   \   000000A0   930A               ST      -Y, R16
   \   000000A2   EA00               LDI     R16, 160
   \   000000A4   931A               ST      -Y, R17
   \   000000A6   930A               ST      -Y, R16
   \   000000A8   ....               LDI     R16, LOW(Stack2)
   \   000000AA   ....               LDI     R17, (Stack2) >> 8
   \   000000AC   931A               ST      -Y, R17
   \   000000AE   930A               ST      -Y, R16
   \   000000B0   ....               LDI     R22, LOW(InternalADCHandler/2)
   \   000000B2   ....               LDI     R23, (InternalADCHandler/2) >> 8
   \   000000B4   E34C               LDI     R20, 60
   \   000000B6   ....               LDI     R18, LOW((`?<Constant "UART0">` + 16))
   \   000000B8   ....               LDI     R19, HIGH((`?<Constant "UART0">` + 16))
   \   000000BA   ....               LDI     R16, LOW((TCB_USART0 + 48))
   \   000000BC   ....               LDI     R17, HIGH((TCB_USART0 + 48))
   \   000000BE   ........           CALL    OS_CreateTask_S
     62            OS_Start();                            // Start multitasking
   \   000000C2   E001               LDI     R16, 1
   \   000000C4   9300....           STS     OS_Running, R16
   \   000000C8   ........           CALL    OS_StartASM
     63            OS_Delay(100);
   \   000000CC   E604               LDI     R16, 100
   \   000000CE   E010               LDI     R17, 0
   \   000000D0   ........           CALL    OS_Delay
     64            ClrBit(PORTE, 0x04);                   // TXE0 off
   \   000000D4   94F8               cli
   \   000000D6   9872               CBI     0x0E, 0x02
   \   000000D8   9100....           LDS     R16, (OS_Global + 1)
   \   000000DC   2300               TST     R16
   \   000000DE   F409               BRNE    ??main_0
   \   000000E0   9478               sei
     65          
     66          }
   \                     ??main_0:
   \   000000E2   9508               RET
   \   000000E4                      REQUIRE _A_WDTCSR
   \   000000E4                      REQUIRE _A_PORTE

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "UART0">>`:
   \   00000000   415554520030       DC8 "UART0"
   \                     `?<Initializer for <Constant "Watch dog">>`:
   \   00000006   615763742068       DC8 "Watch dog"
   \              6F640067    
   \                     `?<Initializer for <Constant "Internal ADC ">>`:
   \   00000010   6E4965746E72       DC8 "Internal ADC "
   \              6C6141204344
   \              0020        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for ADChannel>`:
   \   00000000   0E                 DC8 14

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "UART0">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "UART0">>`
   \   00000006                      DS8 10
   \   00000010                      REQUIRE `?<Initializer for <Constant "Watch dog">>`
   \   00000010                      DS8 14
   \   0000001E                      REQUIRE `?<Initializer for <Constant "Internal ADC ">>`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   ReadSignatureRow
      6      2   main
        0      2   -> InitSystem
        0      2   -> OS_CreateTask_S
        0      2   -> OS_Delay
        0      2   -> OS_InitHW
        0      2   -> OS_InitKern
        0      2   -> OS_StartASM
        0      2   -> hart_start
        0      2   -> memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  ?<Constant "UART0">
      30  ?<Initializer for <Constant "UART0">>
       1  ?<Initializer for ADChannel>
       1  ADChannel
      32  ADInt
       1  EEPWriteOK
     100  MailBufCh0
      31  My485UART
       1  PortPair
      10  ReadSignatureRow
       1  RestartStatus
     150  RxBufferCh0
     250  Stack1
     160  Stack2
     160  Stack3
      24  TCB_AD7715
      72  TCB_USART0
          TCB_WATCHDOG
          TCB_INT_ADC
     446  TData
     400  TxBufferCh0
       1  UnitID
       1  WriteCount
       1  _A_PORTE
       1  _A_WDTCSR
     256  crc
       1  hostAddress
     228  main
       2  pWriteBuffer
      14  -- Other

 
     2 bytes in segment ABSOLUTE
   238 bytes in segment CODE
   256 bytes in segment FAR_F
    14 bytes in segment INITTAB
    31 bytes in segment NEAR_I
    31 bytes in segment NEAR_ID
 1 833 bytes in segment NEAR_Z
 
   525 bytes of CODE memory (+ 14 bytes shared)
 1 864 bytes of DATA memory (+  2 bytes shared)

Errors: none
Warnings: none
