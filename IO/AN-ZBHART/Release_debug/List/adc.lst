###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       29/Dec/2022  11:09:58
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart active\Src\adc.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW8C7F.tmp ("D:\S2Prog\IO\hart
#        active\Src\adc.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\hart
#        active\Release_debug\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\hart active\Release_debug\List" -y
#        --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "D:\S2Prog\IO\hart active\INC\\" -I "D:\S2Prog\IO\hart
#        active\..\..\SHARED\INC\\" --eeprom_size 4096 --dlib --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\hart active\Release_debug\List\adc.lst
#    Object file  =  D:\S2Prog\IO\hart active\Release_debug\Obj\adc.r90
#
###############################################################################

D:\S2Prog\IO\hart active\Src\adc.c
      1          /****************************************************************************************
      2          / AD converter functions and interrupt
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x7c
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7b
   \   union <unnamed> volatile __io _A_ADCSRB
   \                     _A_ADCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x78
   \   union <unnamed> volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                      DS8 2
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          #include "hart.h"
     12          
     13          // Voltage Reference: AVCC pin
     14          #define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
     15          // Voltage Reference: 2.56V, cap. on AREF
     16          //#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
     17          
     18          
     19          // Read the AD conversion result

   \                                 In  segment CODE, align 2, keep-with-next
     20          unsigned int read_adc(unsigned char adc_input) {
   \                     read_adc:
     21              ADMUX = (adc_input & 0x1f) | ADC_VREF_TYPE;
   \   00000000   2F10               MOV     R17, R16
   \   00000002   711F               ANDI    R17, 0x1F
   \   00000004   6410               ORI     R17, 0x40
   \   00000006   9310....           STS     _A_ADMUX, R17
     22              if ( adc_input & 0x20 ) ADCSRB |= (1 << MUX5);
   \   0000000A   FB05               BST     R16, 5
   \   0000000C   9100007B           LDS     R16, 123
   \   00000010   F416               BRTC    ??read_adc_0
   \   00000012   6008               ORI     R16, 0x08
   \   00000014   C001               RJMP    ??read_adc_1
     23              else ADCSRB &= ~(1 << MUX5);
   \                     ??read_adc_0:
   \   00000016   7F07               ANDI    R16, 0xF7
   \                     ??read_adc_1:
   \   00000018   9300007B           STS     123, R16
     24          // Delay needed for the stabilization of the ADC input voltage
     25              //delay_us(10);
     26              OS_Delay(1);
   \   0000001C   E001               LDI     R16, 1
   \   0000001E   E010               LDI     R17, 0
   \   00000020   ........           CALL    OS_Delay
     27          // Start the AD conversion
     28              ADCSRA |= (1 << ADSC);
   \   00000024   9100007A           LDS     R16, 122
   \   00000028   6400               ORI     R16, 0x40
   \   0000002A   9300007A           STS     122, R16
     29          // Wait for the AD conversion to complete
     30              while ( (ADCSRA & (1 << ADIF)) == 0 );
   \                     ??read_adc_2:
   \   0000002E   9100....           LDS     R16, _A_ADCSRA
   \   00000032   FF04               SBRS    R16, 4
   \   00000034   CFFC               RJMP    ??read_adc_2
     31              ADCSRA |= (1 << ADIF);
   \   00000036   9100007A           LDS     R16, 122
   \   0000003A   6100               ORI     R16, 0x10
   \   0000003C   9300007A           STS     122, R16
     32              return ADC; // Reading ADCL and ADCH in one run;
   \   00000040   9100....           LDS     R16, _A_ADC
   \   00000044   9110....           LDS     R17, (_A_ADC + 1)
   \   00000048   9508               RET
   \   0000004A                      REQUIRE _A_ADMUX
   \   0000004A                      REQUIRE _A_ADCSRB
   \   0000004A                      REQUIRE _A_ADCSRA
   \   0000004A                      REQUIRE _A_ADC
     33          }
     34          
     35          

   \                                 In  segment CODE, align 2, keep-with-next
     36          float FilterVal(float OldVal, float NewVal, float Degree) {
   \                     FilterVal:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01C8               MOVW    R25:R24, R17:R16
   \   00000012   01D9               MOVW    R27:R26, R19:R18
   \   00000014   018A               MOVW    R17:R16, R21:R20
   \   00000016   019B               MOVW    R19:R18, R23:R22
     37          
     38              OldVal += (NewVal - OldVal) / (Degree + 1.0);
     39              return OldVal;
   \   00000018   01AC               MOVW    R21:R20, R25:R24
   \   0000001A   01BD               MOVW    R23:R22, R27:R26
   \   0000001C   ........           CALL    ?F_SUB_S_L04
   \   00000020   0128               MOVW    R5:R4, R17:R16
   \   00000022   0139               MOVW    R7:R6, R19:R18
   \   00000024   8508               LDD     R16, Y+8
   \   00000026   8519               LDD     R17, Y+9
   \   00000028   852A               LDD     R18, Y+10
   \   0000002A   853B               LDD     R19, Y+11
   \   0000002C   E040               LDI     R20, 0
   \   0000002E   E050               LDI     R21, 0
   \   00000030   E860               LDI     R22, 128
   \   00000032   E37F               LDI     R23, 63
   \   00000034   ........           CALL    ?F_ADD_S_L04
   \   00000038   01A8               MOVW    R21:R20, R17:R16
   \   0000003A   01B9               MOVW    R23:R22, R19:R18
   \   0000003C   0182               MOVW    R17:R16, R5:R4
   \   0000003E   0193               MOVW    R19:R18, R7:R6
   \   00000040   ........           CALL    ?F_DIV_S_L04
   \   00000044   01AC               MOVW    R21:R20, R25:R24
   \   00000046   01BD               MOVW    R23:R22, R27:R26
   \   00000048   ........           CALL    ?F_ADD_S_L04
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   91A9               LD      R26, Y+
   \   00000052   91B9               LD      R27, Y+
   \   00000054   9049               LD      R4, Y+
   \   00000056   9059               LD      R5, Y+
   \   00000058   9069               LD      R6, Y+
   \   0000005A   9079               LD      R7, Y+
   \   0000005C   9624               ADIW    R29:R28, 4
   \   0000005E   9508               RET
     40          }
     41          
     42          /*************************************************************************
     43          *   (This is a task)
     44          *  InternalADCHandler
     45          *
     46          *************************************************************************/

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     47          float FileterdADVal = 24.0;  // Initialize to 24V as default
   \                     FileterdADVal:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for FileterdADVal>`

   \                                 In  segment CODE, align 2, keep-with-next
     48          void InternalADCHandler(void) {
   \                     InternalADCHandler:
   \   00000000   928A               ST      -Y, R8
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R8_is_cg_reg
   \   0000000A   E406               LDI     R16, 70
   \   0000000C   2E80               MOV     R8, R16
     49          
     50          	while (1) {
     51          		OS_Delay(1000);
   \                     ??InternalADCHandler_0:
   \   0000000E   EE08               LDI     R16, 232
   \   00000010   E013               LDI     R17, 3
   \   00000012   ........           CALL    OS_Delay
     52          		float NewADCVal = (float)read_adc(38);//*16.0*5.0 / 1024.0;
     53          		FileterdADVal = FilterVal(FileterdADVal, NewADCVal, 4);
   \   00000016   9280....           STS     _A_ADMUX, R8
   \   0000001A   9100007B           LDS     R16, 123
   \   0000001E   6008               ORI     R16, 0x08
   \   00000020   9300007B           STS     123, R16
   \   00000024   E001               LDI     R16, 1
   \   00000026   E010               LDI     R17, 0
   \   00000028   ........           CALL    OS_Delay
   \   0000002C   9100007A           LDS     R16, 122
   \   00000030   6400               ORI     R16, 0x40
   \   00000032   9300007A           STS     122, R16
   \                     ??InternalADCHandler_1:
   \   00000036   9100....           LDS     R16, _A_ADCSRA
   \   0000003A   FF04               SBRS    R16, 4
   \   0000003C   CFFC               RJMP    ??InternalADCHandler_1
   \   0000003E   9100007A           LDS     R16, 122
   \   00000042   6100               ORI     R16, 0x10
   \   00000044   9300007A           STS     122, R16
   \   00000048   9180....           LDS     R24, FileterdADVal
   \   0000004C   9190....           LDS     R25, (FileterdADVal + 1)
   \   00000050   91A0....           LDS     R26, (FileterdADVal + 2)
   \   00000054   91B0....           LDS     R27, (FileterdADVal + 3)
   \   00000058   9100....           LDS     R16, _A_ADC
   \   0000005C   9110....           LDS     R17, (_A_ADC + 1)
   \   00000060   E020               LDI     R18, 0
   \   00000062   E030               LDI     R19, 0
   \   00000064   ........           CALL    ?UL2F_S_L04
   \   00000068   01AC               MOVW    R21:R20, R25:R24
   \   0000006A   01BD               MOVW    R23:R22, R27:R26
   \   0000006C   ........           CALL    ?F_SUB_S_L04
   \   00000070   E040               LDI     R20, 0
   \   00000072   E050               LDI     R21, 0
   \   00000074   EA60               LDI     R22, 160
   \   00000076   E470               LDI     R23, 64
   \   00000078   ........           CALL    ?F_DIV_S_L04
   \   0000007C   01AC               MOVW    R21:R20, R25:R24
   \   0000007E   01BD               MOVW    R23:R22, R27:R26
   \   00000080   ........           CALL    ?F_ADD_S_L04
   \   00000084   9300....           STS     FileterdADVal, R16
   \   00000088   9310....           STS     (FileterdADVal + 1), R17
   \   0000008C   9320....           STS     (FileterdADVal + 2), R18
   \   00000090   9330....           STS     (FileterdADVal + 3), R19
     54          		ADInt.Result[0] = (short)FileterdADVal;
   \   00000094   ........           CALL    ?F2SL_S_L04
   \   00000098   9300....           STS     ADInt, R16
   \   0000009C   9310....           STS     (ADInt + 1), R17
   \   000000A0   CFB6               RJMP    ??InternalADCHandler_0
   \   000000A2                      REQUIRE _A_ADMUX
   \   000000A2                      REQUIRE _A_ADCSRB
   \   000000A2                      REQUIRE _A_ADCSRA
   \   000000A2                      REQUIRE _A_ADC
     55          	}
     56          }

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for FileterdADVal>`:
   \   00000000   000041C0           DD 41C00000H
     57          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     12      2   FilterVal
       12      2 ?F_ADD_S_L04
       12      2 ?F_DIV_S_L04
       12      2 ?F_SUB_S_L04
      5      2   InternalADCHandler
        5      2   -> OS_Delay
        5      2 ?F2SL_S_L04
        5      2 ?F_ADD_S_L04
        5      2 ?F_DIV_S_L04
        5      2 ?F_SUB_S_L04
        5      2 ?UL2F_S_L04
      0      2   read_adc
        0      2   -> OS_Delay


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for FileterdADVal>
       4  FileterdADVal
      96  FilterVal
     162  InternalADCHandler
       2  _A_ADC
       1  _A_ADCSRA
       1  _A_ADCSRB
       1  _A_ADMUX
      74  read_adc
       7  -- Other

 
   5 bytes in segment ABSOLUTE
 332 bytes in segment CODE
   7 bytes in segment INITTAB
   4 bytes in segment NEAR_I
   4 bytes in segment NEAR_ID
 
 336 bytes of CODE memory (+ 7 bytes shared)
   4 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
