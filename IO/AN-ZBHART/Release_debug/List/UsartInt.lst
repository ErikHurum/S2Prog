###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       29/Dec/2022  11:10:00
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart active\Src\UsartInt.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW96EB.tmp ("D:\S2Prog\IO\hart
#        active\Src\UsartInt.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\hart
#        active\Release_debug\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\hart active\Release_debug\List" -y
#        --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "D:\S2Prog\IO\hart active\INC\\" -I "D:\S2Prog\IO\hart
#        active\..\..\SHARED\INC\\" --eeprom_size 4096 --dlib --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\hart active\Release_debug\List\UsartInt.lst
#    Object file  =  D:\S2Prog\IO\hart active\Release_debug\Obj\UsartInt.r90
#
###############################################################################

D:\S2Prog\IO\hart active\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   My485UART1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          
      8          
      9          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0xc6
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
     10          #include "stdio.h"
     11          #include "math.h"
     12          #include "externals.h"
     13          #include "version.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     14          volatile char CriticalComError = 0; 
   \                     CriticalComError:
   \   00000000                      DS8 1
     15          extern OS_TASK     TCB_USART0;                                         /* Task-control-blocks */
     16          
     17          
     18          #if (OS_UART != 0)
     19          
     20          // USART0

   \                                 In  segment CODE, align 2, keep-with-next
     21          void INT_Handler_RX_USART0( void ){   
   \                     INT_Handler_RX_USART0:
   \   00000000   9721               SBIW    R29:R28, 1
     22              if ( UCSR0A & __BIT_MASK( DOR0 ) ) {                // Overrun error? 
   \   00000002   9100....           LDS     R16, _A_UCSR0A
     23              }
     24          
     25              if ( UCSR0A & __BIT_MASK( FE0 ) ) {                 // Framing error? 
   \   00000006   9100....           LDS     R16, _A_UCSR0A
     26              }
     27          
     28              if ( UCSR0A & __BIT_MASK( RXC0)  ) {                // New byte avaiable?
   \   0000000A   9100....           LDS     R16, _A_UCSR0A
   \   0000000E   FF07               SBRS    R16, 7
   \   00000010   C00A               RJMP    ??INT_Handler_RX_USART0_0
     29          		char Data = UDR0;
   \   00000012   9100....           LDS     R16, _A_UDR0
   \   00000016   8308               ST      Y, R16
     30          		CriticalComError = OS_PutMailCond1(&My485UART.RxMailBox,&Data);
   \   00000018   019E               MOVW    R19:R18, R29:R28
   \   0000001A   ....               LDI     R16, LOW((My485UART + 12))
   \   0000001C   ....               LDI     R17, HIGH((My485UART + 12))
   \   0000001E   ........           CALL    OS_PutMailCond1
   \   00000022   9300....           STS     CriticalComError, R16
     31              }
     32          } 
   \                     ??INT_Handler_RX_USART0_0:
   \   00000026   9621               ADIW    R29:R28, 1
   \   00000028   9508               RET
   \   0000002A                      REQUIRE _A_UCSR0A
   \   0000002A                      REQUIRE _A_UDR0
     33          #pragma vector=USART0_RX_vect
     34          

   \                                 In  segment CODE, align 2, keep-with-next
     35          __interrupt void IntHandler_RX_USART0( void ){   
   \                     IntHandler_RX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     36              OS_CallISR(INT_Handler_RX_USART0);
   \   00000024   ....               LDI     R16, LOW(INT_Handler_RX_USART0/2)
   \   00000026   ....               LDI     R17, (INT_Handler_RX_USART0/2) >> 8
   \   00000028                      REQUIRE ?Subroutine0
   \   00000028                      ;               // Fall through to label ?Subroutine0
     37          } 

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           CALL    OS_CallISR
   \   00000004   BF9B               OUT     0x3B, R25
   \   00000006   BF8F               OUT     0x3F, R24
   \   00000008   9109               LD      R16, Y+
   \   0000000A   9119               LD      R17, Y+
   \   0000000C   9129               LD      R18, Y+
   \   0000000E   9139               LD      R19, Y+
   \   00000010   9149               LD      R20, Y+
   \   00000012   9159               LD      R21, Y+
   \   00000014   9169               LD      R22, Y+
   \   00000016   9179               LD      R23, Y+
   \   00000018   9009               LD      R0, Y+
   \   0000001A   9019               LD      R1, Y+
   \   0000001C   9029               LD      R2, Y+
   \   0000001E   9039               LD      R3, Y+
   \   00000020   91E9               LD      R30, Y+
   \   00000022   91F9               LD      R31, Y+
   \   00000024   9189               LD      R24, Y+
   \   00000026   9199               LD      R25, Y+
   \   00000028   9518               RETI

   \                                 In  segment CODE, align 2, keep-with-next
     38          void INT_Handler_TX_USART0( void ){   
   \                     INT_Handler_TX_USART0:
     39              UCSR0B &= ~(__BIT_MASK( TXCIE0)) ;            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7B0F               ANDI    R16, 0xBF
   \   00000006   930000C1           STS     193, R16
     40              PORTE &= ~0x04 ;                              // TXE0 off
   \   0000000A   9872               CBI     0x0E, 0x02
     41          }
   \   0000000C   9508               RET
   \   0000000E                      REQUIRE _A_UCSR0B
   \   0000000E                      REQUIRE _A_PORTE
     42          
     43          #pragma vector=USART0_TX_vect
     44          

   \                                 In  segment CODE, align 2, keep-with-next
     45          __interrupt void IntHandler_TX_USART0( void ){   
   \                     IntHandler_TX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     46              OS_CallISR(INT_Handler_TX_USART0); 
   \   00000024   ....               LDI     R16, LOW(INT_Handler_TX_USART0/2)
   \   00000026   ....               LDI     R17, (INT_Handler_TX_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
     47              
     48          }
     49          

   \                                 In  segment CODE, align 2, keep-with-next
     50          void INT_Handler_UDRE_USART0( void ){   
   \                     INT_Handler_UDRE_USART0:
     51          
     52              if ( My485UART.TxLast < My485UART.TxCount ) { // Last byte sent?
   \   00000000   9100....           LDS     R16, (My485UART + 4)
   \   00000004   9110....           LDS     R17, (My485UART + 5)
   \   00000008   9120....           LDS     R18, (My485UART + 6)
   \   0000000C   9130....           LDS     R19, (My485UART + 7)
   \   00000010   1702               CP      R16, R18
   \   00000012   0713               CPC     R17, R19
   \   00000014   F4C0               BRCC    ??INT_Handler_UDRE_USART0_0
     53                  UDR0 = My485UART.pTxBuffer[ My485UART.TxLast ];     // Send a character
   \   00000016   9100....           LDS     R16, (My485UART + 4)
   \   0000001A   9110....           LDS     R17, (My485UART + 5)
   \   0000001E   91E0....           LDS     R30, My485UART
   \   00000022   91F0....           LDS     R31, (My485UART + 1)
   \   00000026   0FE0               ADD     R30, R16
   \   00000028   1FF1               ADC     R31, R17
   \   0000002A   8100               LD      R16, Z
   \   0000002C   9300....           STS     _A_UDR0, R16
     54                  My485UART.TxLast++;
   \   00000030   9100....           LDS     R16, (My485UART + 4)
   \   00000034   9110....           LDS     R17, (My485UART + 5)
   \   00000038   5F0F               SUBI    R16, 255
   \   0000003A   4F1F               SBCI    R17, 255
   \   0000003C   9300....           STS     (My485UART + 4), R16
   \   00000040   9310....           STS     (My485UART + 5), R17
   \   00000044   9508               RET
     55              } else{    
     56                  UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \                     ??INT_Handler_UDRE_USART0_0:
   \   00000046   910000C1           LDS     R16, 193
   \   0000004A   7D0F               ANDI    R16, 0xDF
   \   0000004C   930000C1           STS     193, R16
     57                  UCSR0A |= (__BIT_MASK( TXC0)) ;               // Clear int bit in TXC.
   \   00000050   910000C0           LDS     R16, 192
   \   00000054   6400               ORI     R16, 0x40
   \   00000056   930000C0           STS     192, R16
     58                  UCSR0B |= __BIT_MASK( TXCIE0) ;               // Enable TXC int.
   \   0000005A   910000C1           LDS     R16, 193
   \   0000005E   6400               ORI     R16, 0x40
   \   00000060   930000C1           STS     193, R16
     59                  OS_SignalEvent(UART0_EVENT_TX_COMPLETE, &TCB_USART0); // No more to send
   \   00000064   ....               LDI     R18, LOW(TCB_USART0)
   \   00000066   ....               LDI     R19, (TCB_USART0) >> 8
   \   00000068   E001               LDI     R16, 1
   \   0000006A   ........           JMP     OS_SignalEvent
   \   0000006E                      REQUIRE _A_UDR0
   \   0000006E                      REQUIRE _A_UCSR0B
   \   0000006E                      REQUIRE _A_UCSR0A
     60              }           
     61          } 
     62          
     63          #pragma vector = USART0_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
     64          __interrupt void IntHandler_UDRE_USART0( void ){   
   \                     IntHandler_UDRE_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     65              OS_CallISR(INT_Handler_UDRE_USART0);
   \   00000024   ....               LDI     R16, LOW(INT_Handler_UDRE_USART0/2)
   \   00000026   ....               LDI     R17, (INT_Handler_UDRE_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
     66          } 

   \                                 In  segment INTVEC, offset 0x64, root
   \                     `??IntHandler_RX_USART0::??INTVEC 100`:
   \   00000064   ........           JMP     IntHandler_RX_USART0

   \                                 In  segment INTVEC, offset 0x68, root
   \                     `??IntHandler_UDRE_USART0::??INTVEC 104`:
   \   00000068   ........           JMP     IntHandler_UDRE_USART0

   \                                 In  segment INTVEC, offset 0x6c, root
   \                     `??IntHandler_TX_USART0::??INTVEC 108`:
   \   0000006C   ........           JMP     IntHandler_TX_USART0
     67          #endif
     68          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   INT_Handler_RX_USART0
        1      2   -> OS_PutMailCond1
      0      2   INT_Handler_TX_USART0
      0      2   INT_Handler_UDRE_USART0
        0      2   -> OS_SignalEvent
     16      2   IntHandler_RX_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_TX_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_UDRE_USART0
       16      2   -> OS_CallISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      42  ?Subroutine0
       1  CriticalComError
      42  INT_Handler_RX_USART0
      14  INT_Handler_TX_USART0
     110  INT_Handler_UDRE_USART0
      40  IntHandler_RX_USART0
       4  IntHandler_RX_USART0::??INTVEC 100
      42  IntHandler_TX_USART0
       4  IntHandler_TX_USART0::??INTVEC 108
      42  IntHandler_UDRE_USART0
       4  IntHandler_UDRE_USART0::??INTVEC 104
       1  _A_PORTE
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UDR0
       7  -- Other

 
   4 bytes in segment ABSOLUTE
 332 bytes in segment CODE
   7 bytes in segment INITTAB
  12 bytes in segment INTVEC
   1 byte  in segment NEAR_Z
 
 332 bytes of CODE memory (+ 19 bytes shared)
   1 byte  of DATA memory (+  4 bytes shared)

Errors: none
Warnings: 1
