###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       29/Dec/2022  11:09:59
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 7.30
#
#    Source file  =  D:\S2Prog\IO\hart active\Src\hart.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW8C80.tmp ("D:\S2Prog\IO\hart
#        active\Src\hart.c" --cpu=m1280 -ms -o "D:\S2Prog\IO\hart
#        active\Release_debug\Obj" -D OS_LIBMODE_S -D OS_UART=-1 -lCN
#        "D:\S2Prog\IO\hart active\Release_debug\List" -y
#        --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "D:\S2Prog\IO\hart active\INC\\" -I "D:\S2Prog\IO\hart
#        active\..\..\SHARED\INC\\" --eeprom_size 4096 --dlib --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\avr\LIB\DLIB\dlAVR-3s-ec_mul-n.h" -Ohs)
#    Locale       =  Norwegian Bokmål_NOR.1252
#    List file    =  D:\S2Prog\IO\hart active\Release_debug\List\hart.lst
#    Object file  =  D:\S2Prog\IO\hart active\Release_debug\Obj\hart.r90
#
###############################################################################

D:\S2Prog\IO\hart active\Src\hart.c
      1          #include <stdio.h>
      2          #include "iom1280.h"

   \                                 In  segment ABSOLUTE, at 0x136
   \   union <unnamed> volatile __ext_io _A_UDR3
   \                     _A_UDR3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x134
   \   union <unnamed> volatile __ext_io _A_UBRR3
   \                     _A_UBRR3:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x132
   \   union <unnamed> volatile __ext_io _A_UCSR3C
   \                     _A_UCSR3C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x131
   \   union <unnamed> volatile __ext_io _A_UCSR3B
   \                     _A_UCSR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x130
   \   union <unnamed> volatile __ext_io _A_UCSR3A
   \                     _A_UCSR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd6
   \   union <unnamed> volatile __io _A_UDR2
   \                     _A_UDR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd4
   \   union <unnamed> volatile __io _A_UBRR2
   \                     _A_UBRR2:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xd2
   \   union <unnamed> volatile __io _A_UCSR2C
   \                     _A_UCSR2C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd1
   \   union <unnamed> volatile __io _A_UCSR2B
   \                     _A_UCSR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd0
   \   union <unnamed> volatile __io _A_UCSR2A
   \                     _A_UCSR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xce
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1
      3          #include "version.h"
      4          #include "inavr.h"
      5          #include "RTOS.h"
      6          
      7          #include "constants.h"
      8          #include "hart_common.h"
      9          #include "hart.h"
     10          #include "hart_diag.h"
     11          #include "hart_msg.h"
     12          #include "hart_gpio.h"
     13          #include "externals.h"
     14          
     15          
     16          ////////////////////////////////////////////////////////////////////////////////
     17          //
     18          // private prototypes
     19          //
     20          ////////////////////////////////////////////////////////////////////////////////
     21          static void hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off);
     22          
     23          static void hart_config_uart(HartTaskStruct *task);
     24          static void hart_reset_tx(HartTaskStruct *task);
     25          static void hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl);
     26          static void hart_start_transaction(HartTaskStruct *task);
     27          
     28          static void hart_irq_tx_next(HartTaskStruct *task);
     29          static void hart_irq_finish_tx(HartTaskStruct *task);
     30          
     31          static void do_hart_transaction(HartTaskStruct *task, hart_channel_t current_chnl, HartTransaction *t);
     32          
     33          void HART_Task(void);
     34          
     35          static void vega_radar_make_request(HartTaskStruct *task, hart_channel_t current_chnl);
     36          static void vega_radar_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type);
     37          //static void vega_radar_handle_rx_complete(HartTaskStruct *task, hart_channel_t current_chnl);
     38          static uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl);
     39          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     40          HartTaskStruct       _hart_task0 =
   \                     _hart_task0:
   \   00000000                      DS8 1540
   \   00000604                      REQUIRE `?<Initializer for _hart_task0>`
     41          {
     42              .modem_no     = hart_modem_0,
     43              .start_chnl   = hart_channel_0,
     44              .end_chnl     = hart_channel_3,
     45          };
     46          
     47          HartTaskStruct       _hart_task1 =
   \                     _hart_task1:
   \   00000604                      DS8 1540
   \   00000C08                      REQUIRE `?<Initializer for _hart_task1>`
     48          {
     49              .modem_no     = hart_modem_1,
     50              .start_chnl   = hart_channel_4,
     51              .end_chnl     = hart_channel_7,
     52          };
     53          
     54          HartTaskStruct       _hart_task2 =
   \                     _hart_task2:
   \   00000C08                      DS8 1540
   \   0000120C                      REQUIRE `?<Initializer for _hart_task2>`
     55          {
     56              .modem_no     = hart_modem_2,
     57              .start_chnl   = hart_channel_8,
     58              .end_chnl     = hart_channel_11,
     59          };
     60          
     61          
     62          ////////////////////////////////////////////////////////////////////////////////
     63          //
     64          // hart module privates
     65          //
     66          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     67          static HartTransaction   _demo1_transaction =
     68          {
     69              .make_request = vega_radar_make_request,
     70              .complete     = ReceiveReply, //vega_radar_handle_rx_complete,
     71              .error        = vega_radar_handle_rx_error,
     72          };
     73          
     74          static HartChannel          _hart_channels[HART_MAX_CHANNEL] =
   \                     _hart_channels:
   \   00000000                      DS8 276
   \   00000114                      REQUIRE `?<Initializer for _hart_channels>`
   \   00000114                      DS8 6
   \   0000011A                      REQUIRE `?<Initializer for _demo1_transaction>`
     75          {
     76              { .chnl_num       = hart_channel_0  },
     77              { .chnl_num       = hart_channel_1  },
     78              { .chnl_num       = hart_channel_2  },
     79              { .chnl_num       = hart_channel_3  },
     80              { .chnl_num       = hart_channel_4  },
     81              { .chnl_num       = hart_channel_5  },
     82              { .chnl_num       = hart_channel_6  },
     83              { .chnl_num       = hart_channel_7  },
     84              { .chnl_num       = hart_channel_8  },
     85              { .chnl_num       = hart_channel_9  },
     86              { .chnl_num       = hart_channel_10 },
     87              { .chnl_num       = hart_channel_11 },
     88          };
     89          
     90          #define HART_EEPROM_START_ADDRESS         0x800
     91          #define HART_EEPROM_RSP_DELAY_ADDRESS     (HART_EEPROM_START_ADDRESS + 2)
     92          
     93          static volatile uint16_t          _eeprom_power_status;
     94          static volatile uint16_t          _rsp_delay = 0;
     95          
     96          ////////////////////////////////////////////////////////////////////////////////
     97          //
     98          // hart channel specifics
     99          //
    100          ////////////////////////////////////////////////////////////////////////////////
    101          /*
    102          void hart_debug_check(void)
    103          {
    104            if((UCSR2B & _BV(TXCIE2)) == 0)
    105            {
    106              while(1)
    107                ;
    108            }
    109          }
    110          */
    111          
    112          
    113          static inline void hart_channel_lock(HartChannel *channel) {
    114              switch ( channel->chnl_num ) {
    115              case hart_channel_0:
    116              case hart_channel_1:
    117              case hart_channel_2:
    118              case hart_channel_3:
    119                  OS_Use(&_hart_task0.channel_lock);
    120                  break;
    121          
    122              case hart_channel_4:
    123              case hart_channel_5:
    124              case hart_channel_6:
    125              case hart_channel_7:
    126                  OS_Use(&_hart_task1.channel_lock);
    127                  break;
    128          
    129              case hart_channel_8:
    130              case hart_channel_9:
    131              case hart_channel_10:
    132              case hart_channel_11:
    133                  OS_Use(&_hart_task2.channel_lock);
    134                  break;
    135              }
    136          }
    137          
    138          static inline void hart_channel_unlock(HartChannel *channel) {
    139              switch ( channel->chnl_num ) {
    140              case hart_channel_0:
    141              case hart_channel_1:
    142              case hart_channel_2:
    143              case hart_channel_3:
    144                  OS_Unuse(&_hart_task0.channel_lock);
    145                  break;
    146          
    147              case hart_channel_4:
    148              case hart_channel_5:
    149              case hart_channel_6:
    150              case hart_channel_7:
    151                  OS_Unuse(&_hart_task1.channel_lock);
    152                  break;
    153          
    154              case hart_channel_8:
    155              case hart_channel_9:
    156              case hart_channel_10:
    157              case hart_channel_11:
    158                  OS_Unuse(&_hart_task2.channel_lock);
    159                  break;
    160              }
    161          }
    162          
    163          static inline void hart_channel_reset(HartChannel *channel) {
    164              hart_channel_lock(channel);
    165          
    166              channel->status         = HartChannelStatus_No_Response;
    167              channel->power_status   = HartChannelPowerStatus_OFF;
    168          
    169              channel->rx_invalid_msg = 0;
    170              channel->rx_csum_err    = 0;
    171              channel->rx_timeout     = 0;
    172              channel->total_reqs     = 0;
    173              channel->total_success  = 0;
    174          
    175              hart_channel_unlock(channel);
    176          }
    177          
    178          static inline void hart_channel_set_status(HartChannel *channel, HartChannelStatus status) {
    179              hart_channel_lock(channel);
    180          
    181              channel->status     = status;
    182          
    183              hart_channel_unlock(channel);
    184          }
    185          
    186          static inline void hart_channel_set_power_status(HartChannel *channel, HartChannelPowerStatus status) {
    187              hart_channel_lock(channel);
    188          
    189              channel->power_status   = status;
    190          
    191              hart_channel_unlock(channel);
    192          }
    193          
    194          static char hart_channel_ready_to_poll(hart_channel_t chnl) {
    195              char isLoopOK = false;
    196          
    197              //hart_channel_lock(&_hart_channels[chnl]);
    198          
    199              if ( _hart_channels[chnl].power_status == HartChannelPowerStatus_ON &&
    200                   TData.Hart.ADCurrent[chnl] >= HART_MINIMUM_MA_FEEDBACK_FOR_OK ) {
    201                  isLoopOK = true;
    202              }
    203          
    204              //hart_channel_unlock(&_hart_channels[chnl]);
    205          
    206              return isLoopOK;
    207          }
    208          
    209          static inline void hart_channel_inc_stat(HartChannel *channel, HartChannelStatItem item) {
    210              hart_channel_lock(channel);
    211          
    212              switch ( item ) {
    213              case HartChannelStatItem_RX_INVALID:
    214                  channel->rx_invalid_msg++;
    215                  break;
    216          
    217              case HartChannelStatItem_RX_CSUM:
    218                  channel->rx_csum_err++;
    219                  break;
    220          
    221              case HartChannelStatItem_RX_TIMEOUT:
    222                  channel->rx_timeout++;
    223                  break;
    224          
    225              case HartChannelStatItem_TOTAL_REQS:
    226                  channel->total_reqs++;
    227                  break;
    228          
    229              case HartChannelStatItem_TOTAL_SUCCESS:
    230                  channel->total_success++;
    231                  break;
    232              }
    233          
    234              hart_channel_unlock(channel);
    235          }
    236          
    237          
    238          ////////////////////////////////////////////////////////////////////////////////
    239          //
    240          // private utilities
    241          //
    242          ////////////////////////////////////////////////////////////////////////////////
    243          static void hart_control_power(hart_channel_t chnl, HartChannelPowerStatus on_off) {
    244              //
    245              // XXX be careful about channel lock when calling this function.
    246              //
    247              HartChannel *c = &_hart_channels[chnl];
    248          
    249              if ( on_off == HartChannelPowerStatus_ON ) {
    250                  hart_gpio_power_on(chnl);
    251              } else {
    252                  hart_gpio_power_off(chnl);
    253              }
    254              hart_channel_set_power_status(c, on_off);
    255          }
    256          
    257          static void hart_control_Rx_Enable(hart_modem_t   modem, uint8_t enable, uint8_t from_irq) {
    258              switch ( modem ) {
    259              case hart_modem_0:
    260                  if ( enable ) {
    261                      UCSR1B |= _BV(RXEN1);
    262                  } else {
    263                      UCSR1B &= ~_BV(RXEN1);
    264                  }
    265                  break;
    266          
    267              case hart_modem_1:
    268                  if ( enable ) {
    269                      UCSR2B |= _BV(RXEN2);
    270                  } else {
    271                      UCSR2B &= ~_BV(RXEN2);
    272                  }
    273                  break;
    274          
    275              case hart_modem_2:
    276                  if ( enable ) {
    277                      UCSR3B |= _BV(RXEN3);
    278                  } else {
    279                      UCSR3B &= ~_BV(RXEN3);
    280                  }
    281                  break;
    282              }
    283          }
    284          
    285          ////////////////////////////////////////////////////////////////////////////////
    286          //
    287          // common IRQ context utilities
    288          //
    289          // this routines shouldn't be called in task context.
    290          //
    291          ////////////////////////////////////////////////////////////////////////////////
    292          static void hart_irq_tx_next(HartTaskStruct *task) {
    293              uint8_t   b;
    294              uint16_t  len;
    295              uint16_t  tndx;
    296          
    297              tndx = task->tx_buf_ndx;
    298              len  = task->tx_len;
    299              b = task->tx_buf[tndx];
    300          
    301              tndx++;
    302              switch ( task->modem_no ) {
    303              case hart_modem_0:
    304                  if ( tndx >= len ) {
    305                      UCSR1A |=  _BV(TXC1);       // clear TXC flag if set by any chance
    306                      UCSR1B &= ~_BV(UDRIE1);
    307                      UCSR1B |=  _BV(TXCIE1);
    308                  }
    309                  UDR1 = b;
    310                  break;
    311          
    312              case hart_modem_1:
    313                  if ( tndx >= len ) {
    314                      UCSR2A |=  _BV(TXC2);       // clear TXC flag if set by any chance
    315                      UCSR2B &= ~_BV(UDRIE2);
    316                      UCSR2B |=  _BV(TXCIE2);
    317                  }
    318                  UDR2 = b;
    319                  break;
    320          
    321              case hart_modem_2:
    322                  if ( tndx >= len ) {
    323                      UCSR3A |=  _BV(TXC3);       // clear TXC flag if set by any chance
    324                      UCSR3B &= ~_BV(UDRIE3);
    325                      UCSR3B |=  _BV(TXCIE3);
    326                  }
    327                  UDR3 = b;
    328                  break;
    329              }
    330              task->tx_buf_ndx = tndx;
    331          }
    332          
    333          static void hart_irq_finish_tx(HartTaskStruct *task) {
    334              switch ( task->modem_no ) {
    335              case hart_modem_0:
    336                  UCSR1B &=  ~_BV(TXCIE1);
    337                  break;
    338          
    339              case hart_modem_1:
    340                  UCSR2B &=  ~_BV(TXCIE2);
    341                  break;
    342          
    343              case hart_modem_2:
    344                  UCSR3B &=  ~_BV(TXCIE3);
    345                  break;
    346              }
    347          
    348              //
    349              // Disable demodulator on hart modem
    350              //
    351          #if HART_CONTROL_RTS_IN_TASK  == 0
    352              hart_gpio_hart_carrier_off_irq(task->modem_no);
    353          #endif
    354              OS_SignalEvent(HART_EVENT_TX_COMPLETE, &task->tcb);
    355          
    356              return;
    357          }
    358          
    359          
    360          ////////////////////////////////////////////////////////////////////////////////
    361          //
    362          // HART0 USART1 IRQ handler
    363          //
    364          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    365          void Handler_USART_RXC(HartTaskStruct* _hart_task) {
   \                     Handler_USART_RXC:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   9721               SBIW    R29:R28, 1
    366              char tmpData;
    367              switch ( _hart_task->modem_no ) {
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   56E3               SUBI    R30, 99
   \   0000000A   4FFD               SBCI    R31, 253
   \   0000000C   8120               LD      R18, Z
   \   0000000E   2322               TST     R18
   \   00000010   F029               BREQ    ??Handler_USART_RXC_0
   \   00000012   952A               DEC     R18
   \   00000014   F031               BREQ    ??Handler_USART_RXC_1
   \   00000016   952A               DEC     R18
   \   00000018   F039               BREQ    ??Handler_USART_RXC_2
   \   0000001A   C009               RJMP    ??Handler_USART_RXC_3
    368              case 0:
    369                  tmpData = UDR1;
   \                     ??Handler_USART_RXC_0:
   \   0000001C   9120....           LDS     R18, _A_UDR1
   \   00000020   C005               RJMP    ??Handler_USART_RXC_4
    370                  break;
    371              case 1:
    372                  tmpData = UDR2;
   \                     ??Handler_USART_RXC_1:
   \   00000022   9120....           LDS     R18, _A_UDR2
   \   00000026   C002               RJMP    ??Handler_USART_RXC_4
    373                  break;
    374              case 2:
    375                  tmpData = UDR3;
   \                     ??Handler_USART_RXC_2:
   \   00000028   9120....           LDS     R18, _A_UDR3
   \                     ??Handler_USART_RXC_4:
   \   0000002C   8328               ST      Y, R18
    376                  break;
    377              }
    378              if ( _hart_task->rx_Listen[_hart_task->rx_Channel] ) {
   \                     ??Handler_USART_RXC_3:
   \   0000002E   01F8               MOVW    R31:R30, R17:R16
   \   00000030   55E8               SUBI    R30, 88
   \   00000032   4FFA               SBCI    R31, 250
   \   00000034   8120               LD      R18, Z
   \   00000036   E030               LDI     R19, 0
   \   00000038   01D8               MOVW    R27:R26, R17:R16
   \   0000003A   0FA2               ADD     R26, R18
   \   0000003C   1FB3               ADC     R27, R19
   \   0000003E   55A7               SUBI    R26, 87
   \   00000040   4FBA               SBCI    R27, 250
   \   00000042   912C               LD      R18, X
   \   00000044   2322               TST     R18
   \   00000046   F0A9               BREQ    ??Handler_USART_RXC_5
    379                  _hart_task->rx_Time[_hart_task->rx_Channel] = OS_Time;
   \   00000048   8120               LD      R18, Z
   \   0000004A   9140....           LDS     R20, (OS_Global + 18)
   \   0000004E   9150....           LDS     R21, (OS_Global + 19)
   \   00000052   9160....           LDS     R22, (OS_Global + 20)
   \   00000056   9170....           LDS     R23, (OS_Global + 21)
   \   0000005A   E034               LDI     R19, 4
   \   0000005C   9F23               MUL     R18, R19
   \   0000005E   0D00               ADD     R16, R0
   \   00000060   1D11               ADC     R17, R1
   \   00000062   5503               SUBI    R16, 83
   \   00000064   4F1A               SBCI    R17, 250
   \   00000066   01F8               MOVW    R31:R30, R17:R16
   \   00000068   8340               ST      Z, R20
   \   0000006A   8351               STD     Z+1, R21
   \   0000006C   8362               STD     Z+2, R22
   \   0000006E   8373               STD     Z+3, R23
   \   00000070   C005               RJMP    ??Handler_USART_RXC_6
    380              } else {
    381                  OS_PutMailCond1(&_hart_task->RxMailBox, &tmpData);
   \                     ??Handler_USART_RXC_5:
   \   00000072   019E               MOVW    R19:R18, R29:R28
   \   00000074   5806               SUBI    R16, 134
   \   00000076   4F1D               SBCI    R17, 253
   \   00000078   ........           CALL    OS_PutMailCond1
    382              }
    383          }
   \                     ??Handler_USART_RXC_6:
   \   0000007C   9621               ADIW    R29:R28, 1
   \   0000007E   91A9               LD      R26, Y+
   \   00000080   91B9               LD      R27, Y+
   \   00000082   9508               RET
   \   00000084                      REQUIRE _A_UDR1
   \   00000084                      REQUIRE _A_UDR2
   \   00000084                      REQUIRE _A_UDR3
    384          

   \                                 In  segment CODE, align 2, keep-with-next
    385          void hart_irq_finish_tx0(void) {
   \                     hart_irq_finish_tx0:
    386              hart_irq_finish_tx(&_hart_task0);
   \   00000000   9100....           LDS     R16, (_hart_task0 + 669)
   \   00000004   2300               TST     R16
   \   00000006   F081               BREQ    ??hart_irq_finish_tx0_0
   \   00000008   950A               DEC     R16
   \   0000000A   F041               BREQ    ??hart_irq_finish_tx0_1
   \   0000000C   950A               DEC     R16
   \   0000000E   F489               BRNE    ??hart_irq_finish_tx0_2
   \   00000010   91000131           LDS     R16, 305
   \   00000014   7B0F               ANDI    R16, 0xBF
   \   00000016   93000131           STS     305, R16
   \   0000001A   C00B               RJMP    ??hart_irq_finish_tx0_2
   \                     ??hart_irq_finish_tx0_1:
   \   0000001C   910000D1           LDS     R16, 209
   \   00000020   7B0F               ANDI    R16, 0xBF
   \   00000022   930000D1           STS     209, R16
   \   00000026   C005               RJMP    ??hart_irq_finish_tx0_2
   \                     ??hart_irq_finish_tx0_0:
   \   00000028   910000C9           LDS     R16, 201
   \   0000002C   7B0F               ANDI    R16, 0xBF
   \   0000002E   930000C9           STS     201, R16
   \                     ??hart_irq_finish_tx0_2:
   \   00000032   ....               LDI     R18, LOW((_hart_task0 + 645))
   \   00000034   ....               LDI     R19, HIGH((_hart_task0 + 645))
   \   00000036   E004               LDI     R16, 4
   \   00000038   ........           JMP     OS_SignalEvent
   \   0000003C                      REQUIRE _A_UCSR1B
   \   0000003C                      REQUIRE _A_UCSR2B
   \   0000003C                      REQUIRE _A_UCSR3B
    387          }
    388          

   \                                 In  segment CODE, align 2, keep-with-next
    389          void hart_irq_finish_tx1(void) {
   \                     hart_irq_finish_tx1:
    390              hart_irq_finish_tx(&_hart_task1);
   \   00000000   9100....           LDS     R16, (_hart_task0 + 2209)
   \   00000004   2300               TST     R16
   \   00000006   F081               BREQ    ??hart_irq_finish_tx1_0
   \   00000008   950A               DEC     R16
   \   0000000A   F041               BREQ    ??hart_irq_finish_tx1_1
   \   0000000C   950A               DEC     R16
   \   0000000E   F489               BRNE    ??hart_irq_finish_tx1_2
   \   00000010   91000131           LDS     R16, 305
   \   00000014   7B0F               ANDI    R16, 0xBF
   \   00000016   93000131           STS     305, R16
   \   0000001A   C00B               RJMP    ??hart_irq_finish_tx1_2
   \                     ??hart_irq_finish_tx1_1:
   \   0000001C   910000D1           LDS     R16, 209
   \   00000020   7B0F               ANDI    R16, 0xBF
   \   00000022   930000D1           STS     209, R16
   \   00000026   C005               RJMP    ??hart_irq_finish_tx1_2
   \                     ??hart_irq_finish_tx1_0:
   \   00000028   910000C9           LDS     R16, 201
   \   0000002C   7B0F               ANDI    R16, 0xBF
   \   0000002E   930000C9           STS     201, R16
   \                     ??hart_irq_finish_tx1_2:
   \   00000032   ....               LDI     R18, LOW((_hart_task0 + 2185))
   \   00000034   ....               LDI     R19, HIGH((_hart_task0 + 2185))
   \   00000036   E004               LDI     R16, 4
   \   00000038   ........           JMP     OS_SignalEvent
   \   0000003C                      REQUIRE _A_UCSR1B
   \   0000003C                      REQUIRE _A_UCSR2B
   \   0000003C                      REQUIRE _A_UCSR3B
    391          }

   \                                 In  segment CODE, align 2, keep-with-next
    392          void hart_irq_finish_tx2(void) {
   \                     hart_irq_finish_tx2:
    393              hart_irq_finish_tx(&_hart_task2);
   \   00000000   9100....           LDS     R16, (_hart_task0 + 3749)
   \   00000004   2300               TST     R16
   \   00000006   F081               BREQ    ??hart_irq_finish_tx2_0
   \   00000008   950A               DEC     R16
   \   0000000A   F041               BREQ    ??hart_irq_finish_tx2_1
   \   0000000C   950A               DEC     R16
   \   0000000E   F489               BRNE    ??hart_irq_finish_tx2_2
   \   00000010   91000131           LDS     R16, 305
   \   00000014   7B0F               ANDI    R16, 0xBF
   \   00000016   93000131           STS     305, R16
   \   0000001A   C00B               RJMP    ??hart_irq_finish_tx2_2
   \                     ??hart_irq_finish_tx2_1:
   \   0000001C   910000D1           LDS     R16, 209
   \   00000020   7B0F               ANDI    R16, 0xBF
   \   00000022   930000D1           STS     209, R16
   \   00000026   C005               RJMP    ??hart_irq_finish_tx2_2
   \                     ??hart_irq_finish_tx2_0:
   \   00000028   910000C9           LDS     R16, 201
   \   0000002C   7B0F               ANDI    R16, 0xBF
   \   0000002E   930000C9           STS     201, R16
   \                     ??hart_irq_finish_tx2_2:
   \   00000032   ....               LDI     R18, LOW((_hart_task0 + 3725))
   \   00000034   ....               LDI     R19, HIGH((_hart_task0 + 3725))
   \   00000036   E004               LDI     R16, 4
   \   00000038   ........           JMP     OS_SignalEvent
   \   0000003C                      REQUIRE _A_UCSR1B
   \   0000003C                      REQUIRE _A_UCSR2B
   \   0000003C                      REQUIRE _A_UCSR3B
    394          }
    395          

   \                                 In  segment CODE, align 2, keep-with-next
    396          void Handler_USART_RXC0(void) {
   \                     Handler_USART_RXC0:
   \   00000000   9721               SBIW    R29:R28, 1
    397              Handler_USART_RXC(&_hart_task0);
   \   00000002   9100....           LDS     R16, (_hart_task0 + 669)
   \   00000006   2300               TST     R16
   \   00000008   F051               BREQ    ??Handler_USART_RXC0_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F029               BREQ    ??Handler_USART_RXC0_1
   \   0000000E   950A               DEC     R16
   \   00000010   F449               BRNE    ??Handler_USART_RXC0_2
   \   00000012   9100....           LDS     R16, _A_UDR3
   \   00000016   C005               RJMP    ??Handler_USART_RXC0_3
   \                     ??Handler_USART_RXC0_1:
   \   00000018   9100....           LDS     R16, _A_UDR2
   \   0000001C   C002               RJMP    ??Handler_USART_RXC0_3
   \                     ??Handler_USART_RXC0_0:
   \   0000001E   9100....           LDS     R16, _A_UDR1
   \                     ??Handler_USART_RXC0_3:
   \   00000022   8308               ST      Y, R16
   \                     ??Handler_USART_RXC0_2:
   \   00000024   9100....           LDS     R16, (_hart_task0 + 1448)
   \   00000028   E0F0               LDI     R31, 0
   \   0000002A   2FE0               MOV     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(_hart_task0 + 1449) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(_hart_task0 + 1449) & 0xFFFF))
   \   00000030   8100               LD      R16, Z
   \   00000032   2300               TST     R16
   \   00000034   F0A1               BREQ    ??Handler_USART_RXC0_4
   \   00000036   9100....           LDS     R16, (_hart_task0 + 1448)
   \   0000003A   9140....           LDS     R20, (OS_Global + 18)
   \   0000003E   9150....           LDS     R21, (OS_Global + 19)
   \   00000042   9160....           LDS     R22, (OS_Global + 20)
   \   00000046   9170....           LDS     R23, (OS_Global + 21)
   \   0000004A   E014               LDI     R17, 4
   \   0000004C   9F01               MUL     R16, R17
   \   0000004E   01F0               MOVW    R31:R30, R1:R0
   \   00000050   ....               SUBI    R30, LOW((-(_hart_task0 + 1453) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(_hart_task0 + 1453) & 0xFFFF))
   \   00000054   8340               ST      Z, R20
   \   00000056   8351               STD     Z+1, R21
   \   00000058   8362               STD     Z+2, R22
   \   0000005A   8373               STD     Z+3, R23
   \   0000005C   C005               RJMP    ??Handler_USART_RXC0_5
   \                     ??Handler_USART_RXC0_4:
   \   0000005E   019E               MOVW    R19:R18, R29:R28
   \   00000060   ....               LDI     R16, LOW((_hart_task0 + 634))
   \   00000062   ....               LDI     R17, HIGH((_hart_task0 + 634))
   \   00000064   ........           CALL    OS_PutMailCond1
    398          }
   \                     ??Handler_USART_RXC0_5:
   \   00000068   9621               ADIW    R29:R28, 1
   \   0000006A   9508               RET
   \   0000006C                      REQUIRE _A_UDR1
   \   0000006C                      REQUIRE _A_UDR2
   \   0000006C                      REQUIRE _A_UDR3
    399          

   \                                 In  segment CODE, align 2, keep-with-next
    400          void Handler_USART_RXC1(void) {
   \                     Handler_USART_RXC1:
   \   00000000   9721               SBIW    R29:R28, 1
    401              Handler_USART_RXC(&_hart_task1);
   \   00000002   9100....           LDS     R16, (_hart_task0 + 2209)
   \   00000006   2300               TST     R16
   \   00000008   F051               BREQ    ??Handler_USART_RXC1_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F029               BREQ    ??Handler_USART_RXC1_1
   \   0000000E   950A               DEC     R16
   \   00000010   F449               BRNE    ??Handler_USART_RXC1_2
   \   00000012   9100....           LDS     R16, _A_UDR3
   \   00000016   C005               RJMP    ??Handler_USART_RXC1_3
   \                     ??Handler_USART_RXC1_1:
   \   00000018   9100....           LDS     R16, _A_UDR2
   \   0000001C   C002               RJMP    ??Handler_USART_RXC1_3
   \                     ??Handler_USART_RXC1_0:
   \   0000001E   9100....           LDS     R16, _A_UDR1
   \                     ??Handler_USART_RXC1_3:
   \   00000022   8308               ST      Y, R16
   \                     ??Handler_USART_RXC1_2:
   \   00000024   9100....           LDS     R16, (_hart_task0 + 2988)
   \   00000028   E0F0               LDI     R31, 0
   \   0000002A   2FE0               MOV     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(_hart_task0 + 2989) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(_hart_task0 + 2989) & 0xFFFF))
   \   00000030   8100               LD      R16, Z
   \   00000032   2300               TST     R16
   \   00000034   F0A1               BREQ    ??Handler_USART_RXC1_4
   \   00000036   9100....           LDS     R16, (_hart_task0 + 2988)
   \   0000003A   9140....           LDS     R20, (OS_Global + 18)
   \   0000003E   9150....           LDS     R21, (OS_Global + 19)
   \   00000042   9160....           LDS     R22, (OS_Global + 20)
   \   00000046   9170....           LDS     R23, (OS_Global + 21)
   \   0000004A   E014               LDI     R17, 4
   \   0000004C   9F01               MUL     R16, R17
   \   0000004E   01F0               MOVW    R31:R30, R1:R0
   \   00000050   ....               SUBI    R30, LOW((-(_hart_task0 + 2993) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(_hart_task0 + 2993) & 0xFFFF))
   \   00000054   8340               ST      Z, R20
   \   00000056   8351               STD     Z+1, R21
   \   00000058   8362               STD     Z+2, R22
   \   0000005A   8373               STD     Z+3, R23
   \   0000005C   C005               RJMP    ??Handler_USART_RXC1_5
   \                     ??Handler_USART_RXC1_4:
   \   0000005E   019E               MOVW    R19:R18, R29:R28
   \   00000060   ....               LDI     R16, LOW((_hart_task0 + 2174))
   \   00000062   ....               LDI     R17, HIGH((_hart_task0 + 2174))
   \   00000064   ........           CALL    OS_PutMailCond1
    402          }
   \                     ??Handler_USART_RXC1_5:
   \   00000068   9621               ADIW    R29:R28, 1
   \   0000006A   9508               RET
   \   0000006C                      REQUIRE _A_UDR1
   \   0000006C                      REQUIRE _A_UDR2
   \   0000006C                      REQUIRE _A_UDR3

   \                                 In  segment CODE, align 2, keep-with-next
    403          void Handler_USART_RXC2(void) {
   \                     Handler_USART_RXC2:
   \   00000000   9721               SBIW    R29:R28, 1
    404              Handler_USART_RXC(&_hart_task2);
   \   00000002   9100....           LDS     R16, (_hart_task0 + 3749)
   \   00000006   2300               TST     R16
   \   00000008   F051               BREQ    ??Handler_USART_RXC2_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F029               BREQ    ??Handler_USART_RXC2_1
   \   0000000E   950A               DEC     R16
   \   00000010   F449               BRNE    ??Handler_USART_RXC2_2
   \   00000012   9100....           LDS     R16, _A_UDR3
   \   00000016   C005               RJMP    ??Handler_USART_RXC2_3
   \                     ??Handler_USART_RXC2_1:
   \   00000018   9100....           LDS     R16, _A_UDR2
   \   0000001C   C002               RJMP    ??Handler_USART_RXC2_3
   \                     ??Handler_USART_RXC2_0:
   \   0000001E   9100....           LDS     R16, _A_UDR1
   \                     ??Handler_USART_RXC2_3:
   \   00000022   8308               ST      Y, R16
   \                     ??Handler_USART_RXC2_2:
   \   00000024   9100....           LDS     R16, (_hart_task0 + 4528)
   \   00000028   E0F0               LDI     R31, 0
   \   0000002A   2FE0               MOV     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(_hart_task0 + 4529) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(_hart_task0 + 4529) & 0xFFFF))
   \   00000030   8100               LD      R16, Z
   \   00000032   2300               TST     R16
   \   00000034   F0A1               BREQ    ??Handler_USART_RXC2_4
   \   00000036   9100....           LDS     R16, (_hart_task0 + 4528)
   \   0000003A   9140....           LDS     R20, (OS_Global + 18)
   \   0000003E   9150....           LDS     R21, (OS_Global + 19)
   \   00000042   9160....           LDS     R22, (OS_Global + 20)
   \   00000046   9170....           LDS     R23, (OS_Global + 21)
   \   0000004A   E014               LDI     R17, 4
   \   0000004C   9F01               MUL     R16, R17
   \   0000004E   01F0               MOVW    R31:R30, R1:R0
   \   00000050   ....               SUBI    R30, LOW((-(_hart_task0 + 4533) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(_hart_task0 + 4533) & 0xFFFF))
   \   00000054   8340               ST      Z, R20
   \   00000056   8351               STD     Z+1, R21
   \   00000058   8362               STD     Z+2, R22
   \   0000005A   8373               STD     Z+3, R23
   \   0000005C   C005               RJMP    ??Handler_USART_RXC2_5
   \                     ??Handler_USART_RXC2_4:
   \   0000005E   019E               MOVW    R19:R18, R29:R28
   \   00000060   ....               LDI     R16, LOW((_hart_task0 + 3714))
   \   00000062   ....               LDI     R17, HIGH((_hart_task0 + 3714))
   \   00000064   ........           CALL    OS_PutMailCond1
    405          }
   \                     ??Handler_USART_RXC2_5:
   \   00000068   9621               ADIW    R29:R28, 1
   \   0000006A   9508               RET
   \   0000006C                      REQUIRE _A_UDR1
   \   0000006C                      REQUIRE _A_UDR2
   \   0000006C                      REQUIRE _A_UDR3
    406          

   \                                 In  segment CODE, align 2, keep-with-next
    407          void hart_irq_tx_next0(void) {
   \                     hart_irq_tx_next0:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    408              hart_irq_tx_next(&_hart_task0);
   \   00000004   ....               LDI     R30, LOW((_hart_task0 + 669))
   \   00000006   ....               LDI     R31, HIGH((_hart_task0 + 669))
   \   00000008   8183               LDD     R24, Z+3
   \   0000000A   8194               LDD     R25, Z+4
   \   0000000C   8105               LDD     R16, Z+5
   \   0000000E   8116               LDD     R17, Z+6
   \   00000010   01DC               MOVW    R27:R26, R25:R24
   \   00000012   ....               SUBI    R26, LOW((-(_hart_task0 + 676) & 0xFFFF))
   \   00000014   ....               SBCI    R27, HIGH((-(_hart_task0 + 676) & 0xFFFF))
   \   00000016                      REQUIRE ?Subroutine0
   \   00000016                      REQUIRE _A_UCSR1A
   \   00000016                      REQUIRE _A_UCSR1B
   \   00000016                      REQUIRE _A_UDR1
   \   00000016                      REQUIRE _A_UCSR2A
   \   00000016                      REQUIRE _A_UCSR2B
   \   00000016                      REQUIRE _A_UDR2
   \   00000016                      REQUIRE _A_UCSR3A
   \   00000016                      REQUIRE _A_UCSR3B
   \   00000016                      REQUIRE _A_UDR3
   \   00000016                      ;               // Fall through to label ?Subroutine0
    409          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   912C               LD      R18, X
   \   00000002   9601               ADIW    R25:R24, 1
   \   00000004   8130               LD      R19, Z
   \   00000006   2333               TST     R19
   \   00000008   F171               BREQ    ??Subroutine0_0
   \   0000000A   953A               DEC     R19
   \   0000000C   F0B9               BREQ    ??Subroutine0_1
   \   0000000E   953A               DEC     R19
   \   00000010   F5F1               BRNE    ??Subroutine0_2
   \   00000012   1780               CP      R24, R16
   \   00000014   0791               CPC     R25, R17
   \   00000016   F078               BRCS    ??Subroutine0_3
   \   00000018   91000130           LDS     R16, 304
   \   0000001C   6400               ORI     R16, 0x40
   \   0000001E   93000130           STS     304, R16
   \   00000022   91000131           LDS     R16, 305
   \   00000026   7D0F               ANDI    R16, 0xDF
   \   00000028   93000131           STS     305, R16
   \   0000002C   91000131           LDS     R16, 305
   \   00000030   6400               ORI     R16, 0x40
   \   00000032   93000131           STS     305, R16
   \                     ??Subroutine0_3:
   \   00000036   9320....           STS     _A_UDR3, R18
   \   0000003A   C029               RJMP    ??Subroutine0_2
   \                     ??Subroutine0_1:
   \   0000003C   1780               CP      R24, R16
   \   0000003E   0791               CPC     R25, R17
   \   00000040   F078               BRCS    ??Subroutine0_4
   \   00000042   910000D0           LDS     R16, 208
   \   00000046   6400               ORI     R16, 0x40
   \   00000048   930000D0           STS     208, R16
   \   0000004C   910000D1           LDS     R16, 209
   \   00000050   7D0F               ANDI    R16, 0xDF
   \   00000052   930000D1           STS     209, R16
   \   00000056   910000D1           LDS     R16, 209
   \   0000005A   6400               ORI     R16, 0x40
   \   0000005C   930000D1           STS     209, R16
   \                     ??Subroutine0_4:
   \   00000060   9320....           STS     _A_UDR2, R18
   \   00000064   C014               RJMP    ??Subroutine0_2
   \                     ??Subroutine0_0:
   \   00000066   1780               CP      R24, R16
   \   00000068   0791               CPC     R25, R17
   \   0000006A   F078               BRCS    ??Subroutine0_5
   \   0000006C   910000C8           LDS     R16, 200
   \   00000070   6400               ORI     R16, 0x40
   \   00000072   930000C8           STS     200, R16
   \   00000076   910000C9           LDS     R16, 201
   \   0000007A   7D0F               ANDI    R16, 0xDF
   \   0000007C   930000C9           STS     201, R16
   \   00000080   910000C9           LDS     R16, 201
   \   00000084   6400               ORI     R16, 0x40
   \   00000086   930000C9           STS     201, R16
   \                     ??Subroutine0_5:
   \   0000008A   9320....           STS     _A_UDR1, R18
   \                     ??Subroutine0_2:
   \   0000008E   8383               STD     Z+3, R24
   \   00000090   8394               STD     Z+4, R25
   \   00000092   01CA               MOVW    R25:R24, R21:R20
   \   00000094   01DB               MOVW    R27:R26, R23:R22
   \   00000096   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    410          void hart_irq_tx_next1(void) {
   \                     hart_irq_tx_next1:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    411              hart_irq_tx_next(&_hart_task1);
   \   00000004   ....               LDI     R30, LOW((_hart_task0 + 2209))
   \   00000006   ....               LDI     R31, HIGH((_hart_task0 + 2209))
   \   00000008   8183               LDD     R24, Z+3
   \   0000000A   8194               LDD     R25, Z+4
   \   0000000C   8105               LDD     R16, Z+5
   \   0000000E   8116               LDD     R17, Z+6
   \   00000010   01DC               MOVW    R27:R26, R25:R24
   \   00000012   ....               SUBI    R26, LOW((-(_hart_task0 + 2216) & 0xFFFF))
   \   00000014   ....               SBCI    R27, HIGH((-(_hart_task0 + 2216) & 0xFFFF))
   \   00000016   ....               RJMP    ?Subroutine0
   \   00000018                      REQUIRE _A_UCSR1A
   \   00000018                      REQUIRE _A_UCSR1B
   \   00000018                      REQUIRE _A_UDR1
   \   00000018                      REQUIRE _A_UCSR2A
   \   00000018                      REQUIRE _A_UCSR2B
   \   00000018                      REQUIRE _A_UDR2
   \   00000018                      REQUIRE _A_UCSR3A
   \   00000018                      REQUIRE _A_UCSR3B
   \   00000018                      REQUIRE _A_UDR3
    412          }

   \                                 In  segment CODE, align 2, keep-with-next
    413          void hart_irq_tx_next2(void) {
   \                     hart_irq_tx_next2:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    414              hart_irq_tx_next(&_hart_task2);
   \   00000004   ....               LDI     R30, LOW((_hart_task0 + 3749))
   \   00000006   ....               LDI     R31, HIGH((_hart_task0 + 3749))
   \   00000008   8183               LDD     R24, Z+3
   \   0000000A   8194               LDD     R25, Z+4
   \   0000000C   8105               LDD     R16, Z+5
   \   0000000E   8116               LDD     R17, Z+6
   \   00000010   01DC               MOVW    R27:R26, R25:R24
   \   00000012   ....               SUBI    R26, LOW((-(_hart_task0 + 3756) & 0xFFFF))
   \   00000014   ....               SBCI    R27, HIGH((-(_hart_task0 + 3756) & 0xFFFF))
   \   00000016   ....               RJMP    ?Subroutine0
   \   00000018                      REQUIRE _A_UCSR1A
   \   00000018                      REQUIRE _A_UCSR1B
   \   00000018                      REQUIRE _A_UDR1
   \   00000018                      REQUIRE _A_UCSR2A
   \   00000018                      REQUIRE _A_UCSR2B
   \   00000018                      REQUIRE _A_UDR2
   \   00000018                      REQUIRE _A_UCSR3A
   \   00000018                      REQUIRE _A_UCSR3B
   \   00000018                      REQUIRE _A_UDR3
    415          }
    416          
    417          
    418          
    419          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    420          __interrupt void USART1_RXC(void) {
   \                     USART1_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    421              OS_CallISR(Handler_USART_RXC0);
   \   00000024   ....               LDI     R16, LOW(Handler_USART_RXC0/2)
   \   00000026   ....               LDI     R17, (Handler_USART_RXC0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine1
    422          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ........           CALL    OS_CallISR
   \   00000004   BF9B               OUT     0x3B, R25
   \   00000006   BF8F               OUT     0x3F, R24
   \   00000008   9109               LD      R16, Y+
   \   0000000A   9119               LD      R17, Y+
   \   0000000C   9129               LD      R18, Y+
   \   0000000E   9139               LD      R19, Y+
   \   00000010   9149               LD      R20, Y+
   \   00000012   9159               LD      R21, Y+
   \   00000014   9169               LD      R22, Y+
   \   00000016   9179               LD      R23, Y+
   \   00000018   9009               LD      R0, Y+
   \   0000001A   9019               LD      R1, Y+
   \   0000001C   9029               LD      R2, Y+
   \   0000001E   9039               LD      R3, Y+
   \   00000020   91E9               LD      R30, Y+
   \   00000022   91F9               LD      R31, Y+
   \   00000024   9189               LD      R24, Y+
   \   00000026   9199               LD      R25, Y+
   \   00000028   9518               RETI
    423          
    424          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    425          __interrupt void USART1_TXC(void) {
   \                     USART1_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    426              OS_CallISR(hart_irq_finish_tx0);
   \   00000024   ....               LDI     R16, LOW(hart_irq_finish_tx0/2)
   \   00000026   ....               LDI     R17, (hart_irq_finish_tx0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine1
    427          }
    428          
    429          #pragma vector=USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    430          __interrupt void USART1_UDRE(void) {
   \                     USART1_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    431              OS_CallISR(hart_irq_tx_next0);
   \   00000024   ....               LDI     R16, LOW(hart_irq_tx_next0/2)
   \   00000026   ....               LDI     R17, (hart_irq_tx_next0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine1
    432          }
    433          
    434          ////////////////////////////////////////////////////////////////////////////////
    435          //
    436          // HART1 USART2 IRQ handler
    437          //
    438          ////////////////////////////////////////////////////////////////////////////////
    439          #pragma vector=USART2_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    440          __interrupt void USART2_RXC(void) {
   \                     USART2_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    441              OS_CallISR(Handler_USART_RXC1);
   \   00000024   ....               LDI     R16, LOW(Handler_USART_RXC1/2)
   \   00000026   ....               LDI     R17, (Handler_USART_RXC1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine1
    442          }
    443          
    444          #pragma vector=USART2_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    445          __interrupt void USART2_TXC(void) {
   \                     USART2_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    446              OS_CallISR(hart_irq_finish_tx1);
   \   00000024   ....               LDI     R16, LOW(hart_irq_finish_tx1/2)
   \   00000026   ....               LDI     R17, (hart_irq_finish_tx1/2) >> 8
   \   00000028                      REQUIRE ?Subroutine1
   \   00000028                      ;               // Fall through to label ?Subroutine1
    447          }
    448          
    449          #pragma vector=USART2_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    450          __interrupt void USART2_UDRE(void) {
   \                     USART2_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    451              OS_CallISR(hart_irq_tx_next1);
   \   00000024   ....               LDI     R16, LOW(hart_irq_tx_next1/2)
   \   00000026   ....               LDI     R17, (hart_irq_tx_next1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine1
    452          }
    453          
    454          ////////////////////////////////////////////////////////////////////////////////
    455          //
    456          // HART1 USART3 IRQ handler
    457          //
    458          ////////////////////////////////////////////////////////////////////////////////
    459          #pragma vector=USART3_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    460          __interrupt void USART3_RXC(void) {
   \                     USART3_RXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    461              OS_CallISR(Handler_USART_RXC2);
   \   00000024   ....               LDI     R16, LOW(Handler_USART_RXC2/2)
   \   00000026   ....               LDI     R17, (Handler_USART_RXC2/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine1
    462          }
    463          
    464          #pragma vector=USART3_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    465          __interrupt void USART3_TXC(void) {
   \                     USART3_TXC:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    466              OS_CallISR(hart_irq_finish_tx2);
   \   00000024   ....               LDI     R16, LOW(hart_irq_finish_tx2/2)
   \   00000026   ....               LDI     R17, (hart_irq_finish_tx2/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine1
    467          }
    468          
    469          #pragma vector=USART3_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    470          __interrupt void USART3_UDRE(void) {
   \                     USART3_UDRE:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    471              OS_CallISR(hart_irq_tx_next2);
   \   00000024   ....               LDI     R16, LOW(hart_irq_tx_next2/2)
   \   00000026   ....               LDI     R17, (hart_irq_tx_next2/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine1
    472          }
    473          
    474          ////////////////////////////////////////////////////////////////////////////////
    475          //
    476          // UART Utilities
    477          //
    478          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    479          void hart_config_uart(HartTaskStruct *task) {
   \                     hart_config_uart:
    480              uint16_t    baud = 1200;
    481              uint16_t    baud_setting = (XTAL_CPU / 4 / baud - 1) / 2;
    482          
    483              switch ( task->modem_no ) {
   \   00000000   5603               SUBI    R16, 99
   \   00000002   4F1D               SBCI    R17, 253
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8100               LD      R16, Z
   \   00000008   2300               TST     R16
   \   0000000A   F029               BREQ    ??hart_config_uart_0
   \   0000000C   950A               DEC     R16
   \   0000000E   F099               BREQ    ??hart_config_uart_1
   \   00000010   950A               DEC     R16
   \   00000012   F109               BREQ    ??hart_config_uart_2
   \   00000014   9508               RET
    484              case hart_modem_0:
    485                  // try U2X mode first
    486                  UCSR1A      = _BV(U2X1);
   \                     ??hart_config_uart_0:
   \   00000016   E002               LDI     R16, 2
   \   00000018   9300....           STS     _A_UCSR1A, R16
    487                  if ( ((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095) ) {
    488                      UCSR1A      = 0;
    489                      baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
    490                  }
    491          
    492                  UBRR1H      = baud_setting >> 8;
   \   0000001C   E006               LDI     R16, 6
   \   0000001E   930000CD           STS     205, R16
    493                  UBRR1L      = baud_setting;
   \   00000022   E802               LDI     R16, 130
   \   00000024   9300....           STS     _A_UBRR1, R16
    494          
    495                  UCSR1C      = _BV(UCSZ10) | _BV(UCSZ11) | USART1_ODD_PARITY | USART1_1_STOP_BIT;
   \   00000028   E306               LDI     R16, 54
   \   0000002A   9300....           STS     _A_UCSR1C, R16
    496                  UCSR1B      = _BV(RXEN1) | _BV(TXEN1) | _BV(RXCIE1);
   \   0000002E   E908               LDI     R16, 152
   \   00000030   9300....           STS     _A_UCSR1B, R16
    497                  break;
   \   00000034   9508               RET
    498          
    499              case hart_modem_1:
    500                  UCSR2A      = _BV(U2X2);
   \                     ??hart_config_uart_1:
   \   00000036   E002               LDI     R16, 2
   \   00000038   9300....           STS     _A_UCSR2A, R16
    501                  if ( ((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095) ) {
    502                      UCSR2A      = 0;
    503                      baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
    504                  }
    505          
    506                  UBRR2H      = baud_setting >> 8;
   \   0000003C   E006               LDI     R16, 6
   \   0000003E   930000D5           STS     213, R16
    507                  UBRR2L      = baud_setting;
   \   00000042   E802               LDI     R16, 130
   \   00000044   9300....           STS     _A_UBRR2, R16
    508          
    509                  UCSR2C      = _BV(UCSZ20) | _BV(UCSZ21) | USART2_ODD_PARITY | USART2_1_STOP_BIT;
   \   00000048   E306               LDI     R16, 54
   \   0000004A   9300....           STS     _A_UCSR2C, R16
    510                  UCSR2B      = _BV(RXEN2) | _BV(TXEN2) | _BV(RXCIE2);
   \   0000004E   E908               LDI     R16, 152
   \   00000050   9300....           STS     _A_UCSR2B, R16
    511                  break;
   \   00000054   9508               RET
    512          
    513              case hart_modem_2:
    514                  UCSR3A      = _BV(U2X3);
   \                     ??hart_config_uart_2:
   \   00000056   E002               LDI     R16, 2
   \   00000058   9300....           STS     _A_UCSR3A, R16
    515                  if ( ((XTAL_CPU == 16000000UL) && (baud == 57600)) || (baud_setting > 4095) ) {
    516                      UCSR3A      = 0;
    517                      baud_setting  = (XTAL_CPU / 8 / baud - 1) / 2;
    518                  }
    519          
    520                  UBRR3H      = baud_setting >> 8;
   \   0000005C   E006               LDI     R16, 6
   \   0000005E   93000135           STS     309, R16
    521                  UBRR3L      = baud_setting;
   \   00000062   E802               LDI     R16, 130
   \   00000064   9300....           STS     _A_UBRR3, R16
    522          
    523                  UCSR3C      = _BV(UCSZ30) | _BV(UCSZ31) | USART3_ODD_PARITY | USART3_1_STOP_BIT;
   \   00000068   E306               LDI     R16, 54
   \   0000006A   9300....           STS     _A_UCSR3C, R16
    524                  UCSR3B      = _BV(RXEN3) | _BV(TXEN3) | _BV(RXCIE3);
   \   0000006E   E908               LDI     R16, 152
   \   00000070   9300....           STS     _A_UCSR3B, R16
    525                  break;
    526              }
    527          }
   \   00000074   9508               RET
   \   00000076                      REQUIRE _A_UCSR1A
   \   00000076                      REQUIRE _A_UBRR1
   \   00000076                      REQUIRE _A_UCSR1C
   \   00000076                      REQUIRE _A_UCSR1B
   \   00000076                      REQUIRE _A_UCSR2A
   \   00000076                      REQUIRE _A_UBRR2
   \   00000076                      REQUIRE _A_UCSR2C
   \   00000076                      REQUIRE _A_UCSR2B
   \   00000076                      REQUIRE _A_UCSR3A
   \   00000076                      REQUIRE _A_UBRR3
   \   00000076                      REQUIRE _A_UCSR3C
   \   00000076                      REQUIRE _A_UCSR3B
    528          
    529          static void hart_reset_tx(HartTaskStruct *task) {
    530              task->tx_buf_ndx  = 0;
    531              task->tx_len      = 0;
    532          
    533              hart_msg_encoder_reset(&task->hart_encoder);
    534          }
    535          
    536          static void hart_reset_rx(HartTaskStruct *task, hart_channel_t current_chnl) {
    537              task->rx_buf_ndx   	 = 0;
    538              task->rx_len       	 = 0;
    539          
    540              hart_msg_parser_reset(&task->hart_parser);
    541          }
    542          
    543          static void hart_start_transaction(HartTaskStruct *task) {
    544              if ( task->tx_len == 0 ) {
    545                  // XXX fucked up. there is a bug
    546                  return;
    547              }
    548          
    549              // just to make sure
    550              task->tx_buf_ndx    = 0;
    551          
    552              switch ( task->modem_no ) {
    553              case hart_modem_0:
    554                  UCSR1B |= _BV(UDRIE1);
    555                  break;
    556          
    557              case hart_modem_1:
    558                  UCSR2B |= _BV(UDRIE2);
    559                  break;
    560          
    561              case hart_modem_2:
    562                  UCSR3B |= _BV(UDRIE3);
    563                  break;
    564              }
    565          }
    566          
    567          ////////////////////////////////////////////////////////////////////////////////
    568          //
    569          // demo transaction
    570          //
    571          // IT IS YOUR JOB TO OVERRIDE THESE CALLBACKS
    572          //
    573          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    574          void vega_radar_make_request(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     vega_radar_make_request:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   9725               SBIW    R29:R28, 5
   \   00000006   01C8               MOVW    R25:R24, R17:R16
    575              uint8_t   addr[5] = { 0x80, 0x00, 0x00, 0x00, 0x00 };
   \   00000008   018E               MOVW    R17:R16, R29:R28
   \   0000000A   ....               LDI     R30, LOW(`?<Constant {128, 0, 0, 0, 0}>`)
   \   0000000C   ....               LDI     R31, HIGH(`?<Constant {128, 0, 0, 0, 0}>`)
   \   0000000E   ....               LDI     R19, (`?<Constant {128, 0, 0, 0, 0}>`) >> 16
   \   00000010   E045               LDI     R20, 5
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    576              uint8_t   cmd = 0x03;    // Can use command 1 later, possibly controlled from TCU no idea what to use
    577          
    578              hart_msg_encoder_preamble(&task->hart_encoder, 5);        // we use preamble 5 for tx
   \   00000018   508A               SUBI    R24, 10
   \   0000001A   4F9A               SBCI    R25, 250
   \   0000001C   E025               LDI     R18, 5
   \   0000001E   018C               MOVW    R17:R16, R25:R24
   \   00000020   ........           CALL    hart_msg_encoder_preamble
    579              hart_msg_encoder_long_start(&task->hart_encoder,
    580                                          0x82,                                                 // master to slave request is always 82
    581                                          addr,                                                 // slave address
    582                                          cmd);                                                 // command to send
   \   00000024   E033               LDI     R19, 3
   \   00000026   01AE               MOVW    R21:R20, R29:R28
   \   00000028   E822               LDI     R18, 130
   \   0000002A   018C               MOVW    R17:R16, R25:R24
   \   0000002C   ........           CALL    hart_msg_encoder_long_start
    583                                                                                                //
    584              // request has no status bytes
    585              //
    586          
    587              hart_msg_encoder_data(&task->hart_encoder,
    588                                    NULL,                                                 // command data in request
    589                                    0);                                                   // no data. thus data length 0
   \   00000030   E040               LDI     R20, 0
   \   00000032   E020               LDI     R18, 0
   \   00000034   E030               LDI     R19, 0
   \   00000036   018C               MOVW    R17:R16, R25:R24
   \   00000038   ........           CALL    hart_msg_encoder_data
    590          
    591              hart_msg_encoder_calc_csum(&task->hart_encoder);          // finally calculate checksum
   \   0000003C   018C               MOVW    R17:R16, R25:R24
   \   0000003E   ........           CALL    hart_msg_encoder_calc_csum
    592          }
   \   00000042   9625               ADIW    R29:R28, 5
   \   00000044   9189               LD      R24, Y+
   \   00000046   9199               LD      R25, Y+
   \   00000048   9508               RET
    593          

   \                                 In  segment CODE, align 2, keep-with-next
    594          void vega_radar_handle_rx_error(HartTaskStruct *task, hart_channel_t current_chnl, HartCommErrType err_type) {
   \                     vega_radar_handle_rx_error:
    595              switch ( err_type ) {
   \   00000000   5033               SUBI    R19, 3
   \   00000002   F490               BRCC    ??vega_radar_handle_rx_error_0
    596              case HartCommErr_RX_Error:
    597                  // XXX
    598                  // do whatevern necessary here
    599                  TData.Hart.FailCnt[current_chnl][0]++;
    600                  TData.Hart.FailCnt[current_chnl][1]++;
    601                  break;
    602          
    603              case HartCommErr_RX_Timeout:
    604                  // XXX
    605                  // do whatever necessary here
    606                  TData.Hart.FailCnt[current_chnl][0]++;
    607                  TData.Hart.FailCnt[current_chnl][1]++;
    608                  break;
    609          
    610              case HartCommErr_RX_Checksum:
    611                  // XXX
    612                  // do whatever necessary here
    613                  TData.Hart.FailCnt[current_chnl][0]++;
   \   00000004   E004               LDI     R16, 4
   \   00000006   9F20               MUL     R18, R16
   \   00000008   ....               LDI     R30, LOW(TData)
   \   0000000A   ....               LDI     R31, (TData) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   8100               LD      R16, Z
   \   00000012   8111               LDD     R17, Z+1
   \   00000014   5F0F               SUBI    R16, 255
   \   00000016   4F1F               SBCI    R17, 255
   \   00000018   8300               ST      Z, R16
   \   0000001A   8311               STD     Z+1, R17
    614                  TData.Hart.FailCnt[current_chnl][1]++;
   \   0000001C   8102               LDD     R16, Z+2
   \   0000001E   8113               LDD     R17, Z+3
   \   00000020   5F0F               SUBI    R16, 255
   \   00000022   4F1F               SBCI    R17, 255
   \   00000024   8302               STD     Z+2, R16
   \   00000026   8313               STD     Z+3, R17
    615                  break;
    616              }
    617          }
   \                     ??vega_radar_handle_rx_error_0:
   \   00000028   9508               RET
    618          
    619          

   \                                 In  segment CODE, align 2, keep-with-next
    620          float ConvertBigEndianToLittleEndian(char *Ptr) {
   \                     ConvertBigEndianToLittleEndian:
   \   00000000   9724               SBIW    R29:R28, 4
    621              const char FloatBuf[4] = { Ptr[3], Ptr[2], Ptr[1], Ptr[0] };
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   8123               LDD     R18, Z+3
   \   00000006   8328               ST      Y, R18
   \   00000008   8122               LDD     R18, Z+2
   \   0000000A   8329               STD     Y+1, R18
   \   0000000C   8121               LDD     R18, Z+1
   \   0000000E   832A               STD     Y+2, R18
   \   00000010   8100               LD      R16, Z
   \   00000012   830B               STD     Y+3, R16
    622              const float *FloatNum  = (float *)FloatBuf;
    623              return *FloatNum;
   \   00000014   8108               LD      R16, Y
   \   00000016   8119               LDD     R17, Y+1
   \   00000018   812A               LDD     R18, Y+2
   \   0000001A   813B               LDD     R19, Y+3
   \   0000001C   9624               ADIW    R29:R28, 4
   \   0000001E   9508               RET
    624          }
    625          

   \                                 In  segment CODE, align 2, keep-with-next
    626          uint8_t ReceiveReply(HartTaskStruct *task, hart_channel_t current_chnl) {
   \                     ReceiveReply:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92DA               ST      -Y, R13
   \   00000006   92CA               ST      -Y, R12
   \   00000008   92BA               ST      -Y, R11
   \   0000000A   92AA               ST      -Y, R10
   \   0000000C   929A               ST      -Y, R9
   \   0000000E   928A               ST      -Y, R8
   \   00000010   927A               ST      -Y, R7
   \   00000012   926A               ST      -Y, R6
   \   00000014   925A               ST      -Y, R5
   \   00000016   924A               ST      -Y, R4
   \   00000018   93BA               ST      -Y, R27
   \   0000001A   93AA               ST      -Y, R26
   \   0000001C   939A               ST      -Y, R25
   \   0000001E   938A               ST      -Y, R24
   \   00000020                      REQUIRE ?Register_R4_is_cg_reg
   \   00000020                      REQUIRE ?Register_R5_is_cg_reg
   \   00000020                      REQUIRE ?Register_R6_is_cg_reg
   \   00000020                      REQUIRE ?Register_R7_is_cg_reg
   \   00000020                      REQUIRE ?Register_R8_is_cg_reg
   \   00000020                      REQUIRE ?Register_R9_is_cg_reg
   \   00000020                      REQUIRE ?Register_R10_is_cg_reg
   \   00000020                      REQUIRE ?Register_R11_is_cg_reg
   \   00000020                      REQUIRE ?Register_R12_is_cg_reg
   \   00000020                      REQUIRE ?Register_R13_is_cg_reg
   \   00000020                      REQUIRE ?Register_R14_is_cg_reg
   \   00000020                      REQUIRE ?Register_R15_is_cg_reg
   \   00000020   9726               SBIW    R29:R28, 6
   \   00000022   8329               STD     Y+1, R18
   \   00000024   0138               MOVW    R7:R6, R17:R16
    627              char RxTimeOut   = false;
    628              char RxStatus    = HART_EVENT_NONE;
   \   00000026   2444               CLR     R4
    629              char *BufPtr     = (char *)task->rx_buf;
   \   00000028   0178               MOVW    R15:R14, R17:R16
   \   0000002A   E208               LDI     R16, 40
   \   0000002C   0EE0               ADD     R14, R16
   \   0000002E   E004               LDI     R16, 4
   \   00000030   1EF0               ADC     R15, R16
    630              int  SyncCnt     = 0;
   \   00000032   E0A0               LDI     R26, 0
   \   00000034   E0B0               LDI     R27, 0
    631              char RxByte;
    632              int TimeOut = 200;
   \   00000036   EC88               LDI     R24, 200
   \   00000038   E090               LDI     R25, 0
   \   0000003A   0143               MOVW    R9:R8, R7:R6
   \   0000003C   E70A               LDI     R16, 122
   \   0000003E   0E80               ADD     R8, R16
   \   00000040   E002               LDI     R16, 2
   \   00000042   1E90               ADC     R9, R16
    633              do {
    634                  RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_0:
   \   00000044   01AC               MOVW    R21:R20, R25:R24
   \   00000046   019E               MOVW    R19:R18, R29:R28
   \   00000048   0184               MOVW    R17:R16, R9:R8
   \   0000004A   ........           CALL    OS_GetMailTimed
   \   0000004E   2F10               MOV     R17, R16
    635                  if ( RxByte == 0xff ) {
   \   00000050   8108               LD      R16, Y
   \   00000052   3F0F               CPI     R16, 255
   \   00000054   F411               BRNE    ??ReceiveReply_1
    636                      SyncCnt++;
   \   00000056   9611               ADIW    R27:R26, 1
    637                      TimeOut = 25;
   \   00000058   E189               LDI     R24, 25
    638                  }
    639              }while ( !RxTimeOut && (RxByte == 0xff) );
   \                     ??ReceiveReply_1:
   \   0000005A   2311               TST     R17
   \   0000005C   F009               BREQ    $+2+2
   \   0000005E   C0AD               RJMP    ??ReceiveReply_2
   \   00000060   3F0F               CPI     R16, 255
   \   00000062   F381               BREQ    ??ReceiveReply_0
   \   00000064   9714               SBIW    R27:R26, 4
   \   00000066   F40C               BRGE    $+2+2
   \   00000068   C0A8               RJMP    ??ReceiveReply_2
    640          
    641              if ( !RxTimeOut && SyncCnt >= 4 ) {
    642                  *BufPtr = RxByte;
   \   0000006A   01F7               MOVW    R31:R30, R15:R14
   \   0000006C   9301               ST      Z+, R16
   \   0000006E   015F               MOVW    R11:R10, R31:R30
    643                  BufPtr++;
    644                  char MasterNum   = RxByte;
    645                  switch ( MasterNum ) {
   \   00000070   8108               LD      R16, Y
   \   00000072   3806               CPI     R16, 134
   \   00000074   F009               BREQ    $+2+2
   \   00000076   C0A3               RJMP    ??ReceiveReply_3
    646                  case HART_MSG_START_FROM_MASTER_TO_SLAVE:
    647                      break;
    648                  case HART_MSG_START_FROM_SLAVE_TO_MASTER:
    649                      break;
    650                  case HART_MSG_START_FROM_SLAVE_TO_MASTER_LONG:
    651                      {
    652                          HARTLongMessage *Msg = (HARTLongMessage *)BufPtr;
   \   00000078   83EA               STD     Y+2, R30
   \   0000007A   83FB               STD     Y+3, R31
    653                          int  hRxCnt = 0;
   \   0000007C   E0A0               LDI     R26, 0
   \   0000007E   E0B0               LDI     R27, 0
   \   00000080   012F               MOVW    R5:R4, R31:R30
   \   00000082   E008               LDI     R16, 8
   \   00000084   2EC0               MOV     R12, R16
    654                          do {
    655                              RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_4:
   \   00000086   01AC               MOVW    R21:R20, R25:R24
   \   00000088   019E               MOVW    R19:R18, R29:R28
   \   0000008A   0184               MOVW    R17:R16, R9:R8
   \   0000008C   ........           CALL    OS_GetMailTimed
   \   00000090   2F10               MOV     R17, R16
    656                              BufPtr[hRxCnt++] = RxByte;
   \   00000092   8108               LD      R16, Y
   \   00000094   01F2               MOVW    R31:R30, R5:R4
   \   00000096   9301               ST      Z+, R16
   \   00000098   012F               MOVW    R5:R4, R31:R30
   \   0000009A   9611               ADIW    R27:R26, 1
    657                          }while ( !RxTimeOut && hRxCnt < sizeof(HARTLongMessage) );
   \   0000009C   94CA               DEC     R12
   \   0000009E   2311               TST     R17
   \   000000A0   F009               BREQ    $+2+2
   \   000000A2   C07D               RJMP    ??ReceiveReply_5
   \   000000A4   20CC               TST     R12
   \   000000A6   F779               BRNE    ??ReceiveReply_4
    658                          if ( RxTimeOut ) {
    659                              RxStatus	 = HART_EVENT_TIMEOUT;
    660                          } else {
    661                              int  mRxCnt = 0;
   \   000000A8   2444               CLR     R4
   \   000000AA   2455               CLR     R5
    662                              BufPtr += sizeof(HARTLongMessage);
   \   000000AC   E008               LDI     R16, 8
   \   000000AE   0EA0               ADD     R10, R16
   \   000000B0   1EB9               ADC     R11, R25
   \   000000B2   0165               MOVW    R13:R12, R11:R10
    663                              do {
    664                                  RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
   \                     ??ReceiveReply_6:
   \   000000B4   01AC               MOVW    R21:R20, R25:R24
   \   000000B6   019E               MOVW    R19:R18, R29:R28
   \   000000B8   0184               MOVW    R17:R16, R9:R8
   \   000000BA   ........           CALL    OS_GetMailTimed
   \   000000BE   2F10               MOV     R17, R16
    665                                  BufPtr[mRxCnt++] = RxByte;
   \   000000C0   8108               LD      R16, Y
   \   000000C2   01F6               MOVW    R31:R30, R13:R12
   \   000000C4   9301               ST      Z+, R16
   \   000000C6   016F               MOVW    R13:R12, R31:R30
   \   000000C8   E001               LDI     R16, 1
   \   000000CA   0E40               ADD     R4, R16
   \   000000CC   1E59               ADC     R5, R25
    666                              }while ( !RxTimeOut && (mRxCnt < Msg->MsessageSize) && (mRxCnt < HART_MAX_DATA_LENGTH) );
   \   000000CE   2311               TST     R17
   \   000000D0   F009               BREQ    $+2+2
   \   000000D2   C065               RJMP    ??ReceiveReply_5
   \   000000D4   81EA               LDD     R30, Y+2
   \   000000D6   81FB               LDD     R31, Y+3
   \   000000D8   8106               LDD     R16, Z+6
   \   000000DA   1640               CP      R4, R16
   \   000000DC   0659               CPC     R5, R25
   \   000000DE   F424               BRGE    ??ReceiveReply_7
   \   000000E0   EF0D               LDI     R16, 253
   \   000000E2   1640               CP      R4, R16
   \   000000E4   0659               CPC     R5, R25
   \   000000E6   F334               BRLT    ??ReceiveReply_6
    667                              if ( RxTimeOut ) {
    668                                  RxStatus	  = HART_EVENT_TIMEOUT;
    669                              } else {
    670                                  uint8_t pcsum = task->rx_buf[hRxCnt + mRxCnt];
   \                     ??ReceiveReply_7:
   \   000000E8   0DA4               ADD     R26, R4
   \   000000EA   1DB5               ADC     R27, R5
   \   000000EC   019D               MOVW    R19:R18, R27:R26
   \   000000EE   0E62               ADD     R6, R18
   \   000000F0   1E73               ADC     R7, R19
   \   000000F2   E208               LDI     R16, 40
   \   000000F4   0E60               ADD     R6, R16
   \   000000F6   E004               LDI     R16, 4
   \   000000F8   1E70               ADC     R7, R16
   \   000000FA   01F3               MOVW    R31:R30, R7:R6
   \   000000FC   81A0               LD      R26, Z
    671                                  uint8_t csum  = hart_msg_calc_csum((const uint8_t *)task->rx_buf, hRxCnt + mRxCnt);
    672                                  if ( csum == pcsum ) {
   \   000000FE   0187               MOVW    R17:R16, R15:R14
   \   00000100   ........           CALL    hart_msg_calc_csum
   \   00000104   170A               CP      R16, R26
   \   00000106   F009               BREQ    $+2+2
   \   00000108   C04C               RJMP    ??ReceiveReply_8
    673                                      TData.Hart.HartCurrent[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[1]);
   \   0000010A   01F5               MOVW    R31:R30, R11:R10
   \   0000010C   8104               LDD     R16, Z+4
   \   0000010E   830A               STD     Y+2, R16
   \   00000110   8103               LDD     R16, Z+3
   \   00000112   830B               STD     Y+3, R16
   \   00000114   8102               LDD     R16, Z+2
   \   00000116   830C               STD     Y+4, R16
   \   00000118   8101               LDD     R16, Z+1
   \   0000011A   830D               STD     Y+5, R16
   \   0000011C   8109               LDD     R16, Y+1
   \   0000011E   E014               LDI     R17, 4
   \   00000120   9F01               MUL     R16, R17
   \   00000122   ....               LDI     R18, LOW(TData)
   \   00000124   ....               LDI     R19, (TData) >> 8
   \   00000126   0D20               ADD     R18, R0
   \   00000128   1D31               ADC     R19, R1
   \   0000012A   0189               MOVW    R17:R16, R19:R18
   \   0000012C   5302               SUBI    R16, 50
   \   0000012E   4F1F               SBCI    R17, 255
   \   00000130   814A               LDD     R20, Y+2
   \   00000132   815B               LDD     R21, Y+3
   \   00000134   816C               LDD     R22, Y+4
   \   00000136   817D               LDD     R23, Y+5
   \   00000138   01F8               MOVW    R31:R30, R17:R16
   \   0000013A   8340               ST      Z, R20
   \   0000013C   8351               STD     Z+1, R21
   \   0000013E   8362               STD     Z+2, R22
   \   00000140   8373               STD     Z+3, R23
    674                                      // Ignore UnitId and other data. char UnitId     = BufPtr[5+Offset];
    675                                      // Only keep Distance and level
    676                                      TData.Hart.Distance[current_chnl] = ConvertBigEndianToLittleEndian(&BufPtr[6 + 0]);
   \   00000142   01F5               MOVW    R31:R30, R11:R10
   \   00000144   8541               LDD     R20, Z+9
   \   00000146   8349               STD     Y+1, R20
   \   00000148   8540               LDD     R20, Z+8
   \   0000014A   834A               STD     Y+2, R20
   \   0000014C   8147               LDD     R20, Z+7
   \   0000014E   834B               STD     Y+3, R20
   \   00000150   8146               LDD     R20, Z+6
   \   00000152   834C               STD     Y+4, R20
   \   00000154   8149               LDD     R20, Y+1
   \   00000156   815A               LDD     R21, Y+2
   \   00000158   816B               LDD     R22, Y+3
   \   0000015A   817C               LDD     R23, Y+4
   \   0000015C   01F8               MOVW    R31:R30, R17:R16
   \   0000015E   AB40               STD     Z+48, R20
   \   00000160   AB51               STD     Z+49, R21
   \   00000162   AB62               STD     Z+50, R22
   \   00000164   AB73               STD     Z+51, R23
    677                                      TData.Hart.Level[current_chnl]    = ConvertBigEndianToLittleEndian(&BufPtr[6 + 5]);
   \   00000166   E00B               LDI     R16, 11
   \   00000168   0EA0               ADD     R10, R16
   \   0000016A   1EB9               ADC     R11, R25
   \   0000016C   01F5               MOVW    R31:R30, R11:R10
   \   0000016E   8103               LDD     R16, Z+3
   \   00000170   8309               STD     Y+1, R16
   \   00000172   8102               LDD     R16, Z+2
   \   00000174   830A               STD     Y+2, R16
   \   00000176   8101               LDD     R16, Z+1
   \   00000178   830B               STD     Y+3, R16
   \   0000017A   8100               LD      R16, Z
   \   0000017C   830C               STD     Y+4, R16
   \   0000017E   8149               LDD     R20, Y+1
   \   00000180   815A               LDD     R21, Y+2
   \   00000182   816B               LDD     R22, Y+3
   \   00000184   01F9               MOVW    R31:R30, R19:R18
   \   00000186   5DE2               SUBI    R30, 210
   \   00000188   4FFE               SBCI    R31, 254
   \   0000018A   8340               ST      Z, R20
   \   0000018C   8351               STD     Z+1, R21
   \   0000018E   8362               STD     Z+2, R22
   \   00000190   8303               STD     Z+3, R16
    678                                      TData.Hart.FailCnt[current_chnl][0] = 0;
   \   00000192   01F9               MOVW    R31:R30, R19:R18
   \   00000194   8390               ST      Z, R25
   \   00000196   8391               STD     Z+1, R25
    679                                      RxStatus = HART_EVENT_RX_COMPLETE;
   \   00000198   2444               CLR     R4
   \   0000019A   9443               INC     R4
   \   0000019C   C004               RJMP    ??ReceiveReply_9
    680                                  } else {
   \                     ??ReceiveReply_5:
   \   0000019E   E008               LDI     R16, 8
   \   000001A0   C00D               RJMP    ??ReceiveReply_10
    681                                      RxStatus = HART_EVENT_CHECKSUM_ERROR;
   \                     ??ReceiveReply_8:
   \   000001A2   E100               LDI     R16, 16
   \   000001A4   2E40               MOV     R4, R16
    682                                  }
    683                                  int Cnt = 0;
    684                                  do {
    685                                      char RxByte;
    686                                      RxTimeOut = OS_GetMailTimed(&task->RxMailBox, &RxByte, TimeOut);
    687                                      Cnt++;
    688                                  }while ( !RxTimeOut );
   \                     ??ReceiveReply_9:
   \   000001A6   01AC               MOVW    R21:R20, R25:R24
   \   000001A8   019E               MOVW    R19:R18, R29:R28
   \   000001AA   5F2F               SUBI    R18, 255
   \   000001AC   4F3F               SBCI    R19, 255
   \   000001AE   0184               MOVW    R17:R16, R9:R8
   \   000001B0   ........           CALL    OS_GetMailTimed
   \   000001B4   2300               TST     R16
   \   000001B6   F419               BRNE    ??ReceiveReply_3
   \   000001B8   CFF6               RJMP    ??ReceiveReply_9
    689          
    690                              }
    691                          }
    692                      }
    693                      break;
    694                  }
    695              } else {
    696                  RxStatus = HART_EVENT_RX_ERROR;
   \                     ??ReceiveReply_2:
   \   000001BA   E002               LDI     R16, 2
   \                     ??ReceiveReply_10:
   \   000001BC   2E40               MOV     R4, R16
    697              }
    698              return RxStatus;
   \                     ??ReceiveReply_3:
   \   000001BE   2D04               MOV     R16, R4
   \   000001C0   9626               ADIW    R29:R28, 6
   \   000001C2   9189               LD      R24, Y+
   \   000001C4   9199               LD      R25, Y+
   \   000001C6   91A9               LD      R26, Y+
   \   000001C8   91B9               LD      R27, Y+
   \   000001CA   9049               LD      R4, Y+
   \   000001CC   9059               LD      R5, Y+
   \   000001CE   9069               LD      R6, Y+
   \   000001D0   9079               LD      R7, Y+
   \   000001D2   9089               LD      R8, Y+
   \   000001D4   9099               LD      R9, Y+
   \   000001D6   90A9               LD      R10, Y+
   \   000001D8   90B9               LD      R11, Y+
   \   000001DA   90C9               LD      R12, Y+
   \   000001DC   90D9               LD      R13, Y+
   \   000001DE   90E9               LD      R14, Y+
   \   000001E0   90F9               LD      R15, Y+
   \   000001E2   9508               RET
    699          }
    700          ////////////////////////////////////////////////////////////////////////////////
    701          //
    702          // core hart work
    703          //
    704          ////////////////////////////////////////////////////////////////////////////////
    705          

   \                                 In  segment CODE, align 2, keep-with-next
    706          void do_hart_transaction(HartTaskStruct *task, const hart_channel_t current_chnl, HartTransaction *t) {
   \                     do_hart_transaction:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92CA               ST      -Y, R12
   \   00000006   92BA               ST      -Y, R11
   \   00000008   92AA               ST      -Y, R10
   \   0000000A   929A               ST      -Y, R9
   \   0000000C   928A               ST      -Y, R8
   \   0000000E   927A               ST      -Y, R7
   \   00000010   926A               ST      -Y, R6
   \   00000012   925A               ST      -Y, R5
   \   00000014   924A               ST      -Y, R4
   \   00000016   93BA               ST      -Y, R27
   \   00000018   93AA               ST      -Y, R26
   \   0000001A   939A               ST      -Y, R25
   \   0000001C   938A               ST      -Y, R24
   \   0000001E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R14_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R15_is_cg_reg
   \   0000001E   0128               MOVW    R5:R4, R17:R16
   \   00000020   2EC2               MOV     R12, R18
   \   00000022   015A               MOVW    R11:R10, R21:R20
    707              //long        t1    = OS_Time;
    708              HartChannel *chnl = &_hart_channels[current_chnl];
   \   00000024   E107               LDI     R16, 23
   \   00000026   9EC0               MUL     R12, R16
   \   00000028   ....               LDI     R26, LOW(_hart_channels)
   \   0000002A   ....               LDI     R27, (_hart_channels) >> 8
   \   0000002C   0DA0               ADD     R26, R0
   \   0000002E   1DB1               ADC     R27, R1
    709          
    710              hart_channel_t ModemChannel = (hart_channel_t)(current_chnl - task->start_chnl);
   \   00000030   0142               MOVW    R9:R8, R5:R4
   \   00000032   E90D               LDI     R16, 157
   \   00000034   0E80               ADD     R8, R16
   \   00000036   E002               LDI     R16, 2
   \   00000038   1E90               ADC     R9, R16
   \   0000003A   01F4               MOVW    R31:R30, R9:R8
   \   0000003C   8101               LDD     R16, Z+1
   \   0000003E   1B20               SUB     R18, R16
   \   00000040   2EE2               MOV     R14, R18
    711          
    712              hart_channel_inc_stat(chnl, HartChannelStatItem_TOTAL_REQS);
   \   00000042   910C               LD      R16, X
   \   00000044   300C               CPI     R16, 12
   \   00000046   F4A8               BRCC    ??do_hart_transaction_0
   \   00000048   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_0`) >> 16
   \   0000004A   BFFB               OUT     0x3B, R31
   \   0000004C   E0F2               LDI     R31, 2
   \   0000004E   9F0F               MUL     R16, R31
   \   00000050   01F0               MOVW    R31:R30, R1:R0
   \   00000052   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_0`) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_0`) & 0xFFFF) >> 8
   \   00000056   9007               ELPM    R0, Z+
   \   00000058   9016               ELPM    R1, Z
   \   0000005A   01F0               MOVW    R31:R30, R1:R0
   \   0000005C   9409               IJMP
   \                     ??do_hart_transaction_1:
   \   0000005E   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   00000060   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   00000062   C005               RJMP    ??do_hart_transaction_2
   \                     ??do_hart_transaction_3:
   \   00000064   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   00000066   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000068   C002               RJMP    ??do_hart_transaction_2
   \                     ??do_hart_transaction_4:
   \   0000006A   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   0000006C   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_2:
   \   0000006E   ........           CALL    OS_Use
   \                     ??do_hart_transaction_0:
   \   00000072   01FD               MOVW    R31:R30, R27:R26
   \   00000074   8507               LDD     R16, Z+15
   \   00000076   8910               LDD     R17, Z+16
   \   00000078   8921               LDD     R18, Z+17
   \   0000007A   8932               LDD     R19, Z+18
   \   0000007C   5F0F               SUBI    R16, 255
   \   0000007E   4F1F               SBCI    R17, 255
   \   00000080   4F2F               SBCI    R18, 255
   \   00000082   4F3F               SBCI    R19, 255
   \   00000084   8707               STD     Z+15, R16
   \   00000086   8B10               STD     Z+16, R17
   \   00000088   8B21               STD     Z+17, R18
   \   0000008A   8B32               STD     Z+18, R19
   \   0000008C   8100               LD      R16, Z
   \   0000008E   300C               CPI     R16, 12
   \   00000090   F4A8               BRCC    ??do_hart_transaction_5
   \   00000092   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_1`) >> 16
   \   00000094   BFFB               OUT     0x3B, R31
   \   00000096   E0F2               LDI     R31, 2
   \   00000098   9F0F               MUL     R16, R31
   \   0000009A   01F0               MOVW    R31:R30, R1:R0
   \   0000009C   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_1`) & 0xFFFF))
   \   0000009E   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_1`) & 0xFFFF) >> 8
   \   000000A0   9007               ELPM    R0, Z+
   \   000000A2   9016               ELPM    R1, Z
   \   000000A4   01F0               MOVW    R31:R30, R1:R0
   \   000000A6   9409               IJMP
   \                     ??do_hart_transaction_6:
   \   000000A8   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   000000AA   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   000000AC   C005               RJMP    ??do_hart_transaction_7
   \                     ??do_hart_transaction_8:
   \   000000AE   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   000000B0   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   000000B2   C002               RJMP    ??do_hart_transaction_7
   \                     ??do_hart_transaction_9:
   \   000000B4   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   000000B6   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_7:
   \   000000B8   ........           CALL    OS_Unuse
    713          
    714          
    715              hart_reset_rx(task, current_chnl);
   \                     ??do_hart_transaction_5:
   \   000000BC   01F2               MOVW    R31:R30, R5:R4
   \   000000BE   5DEC               SUBI    R30, 220
   \   000000C0   4FFB               SBCI    R31, 251
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   8300               ST      Z, R16
   \   000000C6   8301               STD     Z+1, R16
   \   000000C8   8302               STD     Z+2, R16
   \   000000CA   8303               STD     Z+3, R16
   \   000000CC   0182               MOVW    R17:R16, R5:R4
   \   000000CE   530F               SUBI    R16, 63
   \   000000D0   4F1A               SBCI    R17, 250
   \   000000D2   ........           CALL    hart_msg_parser_reset
    716              hart_reset_tx(task);
   \   000000D6   01F4               MOVW    R31:R30, R9:R8
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   8303               STD     Z+3, R16
   \   000000DC   8304               STD     Z+4, R16
   \   000000DE   8305               STD     Z+5, R16
   \   000000E0   8306               STD     Z+6, R16
   \   000000E2   0182               MOVW    R17:R16, R5:R4
   \   000000E4   500A               SUBI    R16, 10
   \   000000E6   4F1A               SBCI    R17, 250
   \   000000E8   ........           CALL    hart_msg_encoder_reset
    717              //uint8_t tmp1= PORTC;
    718              hart_gpio_channel_select(current_chnl);
   \   000000EC   2D0C               MOV     R16, R12
   \   000000EE   ........           CALL    hart_gpio_channel_select
    719              OS_Delay(15); // Wait a little to detect if any other HArt modem is active.
   \   000000F2   E00F               LDI     R16, 15
   \   000000F4   E010               LDI     R17, 0
   \   000000F6   ........           CALL    OS_Delay
    720          
    721              //uint8_t tmp3= PORTC;
    722              // Don't change channel before other channel is selected
    723              task->rx_Channel = ModemChannel;
   \   000000FA   01F2               MOVW    R31:R30, R5:R4
   \   000000FC   55E8               SUBI    R30, 88
   \   000000FE   4FFA               SBCI    R31, 250
   \   00000100   82E0               ST      Z, R14
    724              long LastRxTime = 0;
    725              if ( task->rx_Time[ModemChannel] ) {
   \   00000102   E004               LDI     R16, 4
   \   00000104   9EE0               MUL     R14, R16
   \   00000106   0132               MOVW    R7:R6, R5:R4
   \   00000108   0C60               ADD     R6, R0
   \   0000010A   1C71               ADC     R7, R1
   \   0000010C   EA0D               LDI     R16, 173
   \   0000010E   0E60               ADD     R6, R16
   \   00000110   E005               LDI     R16, 5
   \   00000112   1E70               ADC     R7, R16
   \   00000114   01F3               MOVW    R31:R30, R7:R6
   \   00000116   8100               LD      R16, Z
   \   00000118   8111               LDD     R17, Z+1
   \   0000011A   8122               LDD     R18, Z+2
   \   0000011C   8133               LDD     R19, Z+3
   \   0000011E   2B01               OR      R16, R17
   \   00000120   2B02               OR      R16, R18
   \   00000122   2B03               OR      R16, R19
   \   00000124   F0E9               BREQ    ??do_hart_transaction_10
    726                  LastRxTime = OS_Time - task->rx_Time[ModemChannel];
   \   00000126   9100....           LDS     R16, (OS_Global + 18)
   \   0000012A   9110....           LDS     R17, (OS_Global + 19)
   \   0000012E   9120....           LDS     R18, (OS_Global + 20)
   \   00000132   9130....           LDS     R19, (OS_Global + 21)
   \   00000136   8140               LD      R20, Z
   \   00000138   8151               LDD     R21, Z+1
   \   0000013A   8162               LDD     R22, Z+2
   \   0000013C   8173               LDD     R23, Z+3
   \   0000013E   1B04               SUB     R16, R20
   \   00000140   0B15               SBC     R17, R21
   \   00000142   0B26               SBC     R18, R22
   \   00000144   0B37               SBC     R19, R23
   \   00000146   2F40               MOV     R20, R16
    727              }
    728          
    729              char NoOtherRx = LastRxTime > 30000L;
   \   00000148   3301               CPI     R16, 49
   \   0000014A   E705               LDI     R16, 117
   \   0000014C   0710               CPC     R17, R16
   \   0000014E   E000               LDI     R16, 0
   \   00000150   0720               CPC     R18, R16
   \   00000152   0730               CPC     R19, R16
   \   00000154   F42C               BRGE    ??do_hart_transaction_10
    730              // NoOtherRx = 1;
    731              if ( !LastRxTime || NoOtherRx ) {
   \   00000156   2B41               OR      R20, R17
   \   00000158   2B42               OR      R20, R18
   \   0000015A   2B43               OR      R20, R19
   \   0000015C   F009               BREQ    $+2+2
   \   0000015E   C21D               RJMP    ??do_hart_transaction_11
    732          
    733                  t->make_request(task, current_chnl);
   \                     ??do_hart_transaction_10:
   \   00000160   2D2C               MOV     R18, R12
   \   00000162   0182               MOVW    R17:R16, R5:R4
   \   00000164   01F5               MOVW    R31:R30, R11:R10
   \   00000166   8140               LD      R20, Z
   \   00000168   81F1               LDD     R31, Z+1
   \   0000016A   2FE4               MOV     R30, R20
   \   0000016C   9509               ICALL
    734                  //
    735                  // now set the tx length of tx_buf
    736                  //
    737                  task->tx_len = task->hart_encoder.tx_ndx;
   \   0000016E   01F2               MOVW    R31:R30, R5:R4
   \   00000170   50E6               SUBI    R30, 6
   \   00000172   4FFA               SBCI    R31, 250
   \   00000174   8100               LD      R16, Z
   \   00000176   8111               LDD     R17, Z+1
   \   00000178   01F4               MOVW    R31:R30, R9:R8
   \   0000017A   8305               STD     Z+5, R16
   \   0000017C   8316               STD     Z+6, R17
    738          #if HART_CONTROL_RTS_IN_TASK  == 1
    739                  hart_gpio_hart_carrier_on(task->modem_no);
   \   0000017E   8100               LD      R16, Z
   \   00000180   ........           CALL    hart_gpio_hart_carrier_on
    740          #endif
    741                  OS_Delay(5);
   \   00000184   E005               LDI     R16, 5
   \   00000186   E010               LDI     R17, 0
   \   00000188   ........           CALL    OS_Delay
    742                  // Be sure we have no unhandled signals before start
    743                  OS_ClearEvents(&task->tcb);
   \   0000018C   0182               MOVW    R17:R16, R5:R4
   \   0000018E   570B               SUBI    R16, 123
   \   00000190   4F1D               SBCI    R17, 253
   \   00000192   ........           CALL    OS_ClearEvents
    744                  //OS_ClearMB(&task->RxMailBox);
    745                  hart_start_transaction(task);
   \   00000196   01F4               MOVW    R31:R30, R9:R8
   \   00000198   8105               LDD     R16, Z+5
   \   0000019A   8116               LDD     R17, Z+6
   \   0000019C   2B01               OR      R16, R17
   \   0000019E   F0D9               BREQ    ??do_hart_transaction_12
   \   000001A0   E000               LDI     R16, 0
   \   000001A2   8303               STD     Z+3, R16
   \   000001A4   8304               STD     Z+4, R16
   \   000001A6   8100               LD      R16, Z
   \   000001A8   2300               TST     R16
   \   000001AA   F081               BREQ    ??do_hart_transaction_13
   \   000001AC   950A               DEC     R16
   \   000001AE   F041               BREQ    ??do_hart_transaction_14
   \   000001B0   950A               DEC     R16
   \   000001B2   F489               BRNE    ??do_hart_transaction_12
   \   000001B4   91000131           LDS     R16, 305
   \   000001B8   6200               ORI     R16, 0x20
   \   000001BA   93000131           STS     305, R16
   \   000001BE   C00B               RJMP    ??do_hart_transaction_12
   \                     ??do_hart_transaction_14:
   \   000001C0   910000D1           LDS     R16, 209
   \   000001C4   6200               ORI     R16, 0x20
   \   000001C6   930000D1           STS     209, R16
   \   000001CA   C005               RJMP    ??do_hart_transaction_12
   \                     ??do_hart_transaction_13:
   \   000001CC   910000C9           LDS     R16, 201
   \   000001D0   6200               ORI     R16, 0x20
   \   000001D2   930000C9           STS     201, R16
    746                  // Task will halt if no signal!
    747                  // Changed code to avoid halt EHS
    748                  char TxFlag = OS_WaitEventTimed(HART_EVENT_TX_COMPLETE, 2000);
   \                     ??do_hart_transaction_12:
   \   000001D6   ED20               LDI     R18, 208
   \   000001D8   E037               LDI     R19, 7
   \   000001DA   E004               LDI     R16, 4
   \   000001DC   ........           CALL    OS_WaitEventTimed
   \   000001E0   2F80               MOV     R24, R16
    749          #if HART_CONTROL_RTS_IN_TASK  == 1
    750                  hart_gpio_hart_carrier_off(task->modem_no);
   \   000001E2   01F4               MOVW    R31:R30, R9:R8
   \   000001E4   8100               LD      R16, Z
   \   000001E6   ........           CALL    hart_gpio_hart_carrier_off
    751          #endif
    752                  if ( TxFlag ) {
   \   000001EA   2388               TST     R24
   \   000001EC   F409               BRNE    $+2+2
   \   000001EE   C1FA               RJMP    ??do_hart_transaction_15
    753                      int StartT = OS_Time;
   \   000001F0   9100....           LDS     R16, (OS_Global + 18)
   \   000001F4   9110....           LDS     R17, (OS_Global + 19)
   \   000001F8   9120....           LDS     R18, (OS_Global + 20)
   \   000001FC   9130....           LDS     R19, (OS_Global + 21)
    754                      task->rx_Listen[ModemChannel] = false;
   \   00000200   24FF               CLR     R15
   \   00000202   01C2               MOVW    R25:R24, R5:R4
   \   00000204   0D8E               ADD     R24, R14
   \   00000206   1D9F               ADC     R25, R15
   \   00000208   5587               SUBI    R24, 87
   \   0000020A   4F9A               SBCI    R25, 250
   \   0000020C   01FC               MOVW    R31:R30, R25:R24
   \   0000020E   82F0               ST      Z, R15
    755          
    756                      hart_control_Rx_Enable(task->modem_no, TRUE, FALSE);
   \   00000210   01F4               MOVW    R31:R30, R9:R8
   \   00000212   8100               LD      R16, Z
   \   00000214   2300               TST     R16
   \   00000216   F081               BREQ    ??do_hart_transaction_16
   \   00000218   950A               DEC     R16
   \   0000021A   F041               BREQ    ??do_hart_transaction_17
   \   0000021C   950A               DEC     R16
   \   0000021E   F489               BRNE    ??do_hart_transaction_18
   \   00000220   91000131           LDS     R16, 305
   \   00000224   6100               ORI     R16, 0x10
   \   00000226   93000131           STS     305, R16
   \   0000022A   C00B               RJMP    ??do_hart_transaction_18
   \                     ??do_hart_transaction_17:
   \   0000022C   910000D1           LDS     R16, 209
   \   00000230   6100               ORI     R16, 0x10
   \   00000232   930000D1           STS     209, R16
   \   00000236   C005               RJMP    ??do_hart_transaction_18
   \                     ??do_hart_transaction_16:
   \   00000238   910000C9           LDS     R16, 201
   \   0000023C   6100               ORI     R16, 0x10
   \   0000023E   930000C9           STS     201, R16
    757                      uint8_t event_status = t->complete(task, current_chnl);
   \                     ??do_hart_transaction_18:
   \   00000242   2D2C               MOV     R18, R12
   \   00000244   0182               MOVW    R17:R16, R5:R4
   \   00000246   01F5               MOVW    R31:R30, R11:R10
   \   00000248   8142               LDD     R20, Z+2
   \   0000024A   81F3               LDD     R31, Z+3
   \   0000024C   2FE4               MOV     R30, R20
   \   0000024E   9509               ICALL
   \   00000250   2F10               MOV     R17, R16
    758                      task->rx_Time[ModemChannel] = 0;
   \   00000252   01F3               MOVW    R31:R30, R7:R6
   \   00000254   82F0               ST      Z, R15
   \   00000256   82F1               STD     Z+1, R15
   \   00000258   82F2               STD     Z+2, R15
   \   0000025A   82F3               STD     Z+3, R15
    759                      task->rx_Listen[ModemChannel] = true;
   \   0000025C   01FC               MOVW    R31:R30, R25:R24
   \   0000025E   E001               LDI     R16, 1
   \   00000260   8300               ST      Z, R16
    760                      switch ( event_status ) {
   \   00000262   951A               DEC     R17
   \   00000264   F409               BRNE    $+2+2
   \   00000266   C0ED               RJMP    ??do_hart_transaction_19
   \   00000268   951A               DEC     R17
   \   0000026A   F409               BRNE    $+2+2
   \   0000026C   C078               RJMP    ??do_hart_transaction_20
   \   0000026E   5016               SUBI    R17, 6
   \   00000270   F021               BREQ    ??do_hart_transaction_21
   \   00000272   5018               SUBI    R17, 8
   \   00000274   F409               BRNE    $+2+2
   \   00000276   C119               RJMP    ??do_hart_transaction_22
   \   00000278   C1B5               RJMP    ??do_hart_transaction_15
    761                      case HART_EVENT_TIMEOUT: // Timeout
    762                          hart_channel_inc_stat(chnl, HartChannelStatItem_RX_TIMEOUT);
   \                     ??do_hart_transaction_21:
   \   0000027A   910C               LD      R16, X
   \   0000027C   300C               CPI     R16, 12
   \   0000027E   F4A8               BRCC    ??do_hart_transaction_23
   \   00000280   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_2`) >> 16
   \   00000282   BFFB               OUT     0x3B, R31
   \   00000284   E0F2               LDI     R31, 2
   \   00000286   9F0F               MUL     R16, R31
   \   00000288   01F0               MOVW    R31:R30, R1:R0
   \   0000028A   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_2`) & 0xFFFF))
   \   0000028C   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_2`) & 0xFFFF) >> 8
   \   0000028E   9007               ELPM    R0, Z+
   \   00000290   9016               ELPM    R1, Z
   \   00000292   01F0               MOVW    R31:R30, R1:R0
   \   00000294   9409               IJMP
   \                     ??do_hart_transaction_24:
   \   00000296   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   00000298   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   0000029A   C005               RJMP    ??do_hart_transaction_25
   \                     ??do_hart_transaction_26:
   \   0000029C   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   0000029E   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   000002A0   C002               RJMP    ??do_hart_transaction_25
   \                     ??do_hart_transaction_27:
   \   000002A2   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   000002A4   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_25:
   \   000002A6   ........           CALL    OS_Use
   \                     ??do_hart_transaction_23:
   \   000002AA   01FD               MOVW    R31:R30, R27:R26
   \   000002AC   8503               LDD     R16, Z+11
   \   000002AE   8514               LDD     R17, Z+12
   \   000002B0   8525               LDD     R18, Z+13
   \   000002B2   8536               LDD     R19, Z+14
   \   000002B4   5F0F               SUBI    R16, 255
   \   000002B6   4F1F               SBCI    R17, 255
   \   000002B8   4F2F               SBCI    R18, 255
   \   000002BA   4F3F               SBCI    R19, 255
   \   000002BC   8703               STD     Z+11, R16
   \   000002BE   8714               STD     Z+12, R17
   \   000002C0   8725               STD     Z+13, R18
   \   000002C2   8736               STD     Z+14, R19
   \   000002C4   8100               LD      R16, Z
   \   000002C6   300C               CPI     R16, 12
   \   000002C8   F4A8               BRCC    ??do_hart_transaction_28
   \   000002CA   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_3`) >> 16
   \   000002CC   BFFB               OUT     0x3B, R31
   \   000002CE   E0F2               LDI     R31, 2
   \   000002D0   9F0F               MUL     R16, R31
   \   000002D2   01F0               MOVW    R31:R30, R1:R0
   \   000002D4   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_3`) & 0xFFFF))
   \   000002D6   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_3`) & 0xFFFF) >> 8
   \   000002D8   9007               ELPM    R0, Z+
   \   000002DA   9016               ELPM    R1, Z
   \   000002DC   01F0               MOVW    R31:R30, R1:R0
   \   000002DE   9409               IJMP
   \                     ??do_hart_transaction_29:
   \   000002E0   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   000002E2   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   000002E4   C005               RJMP    ??do_hart_transaction_30
   \                     ??do_hart_transaction_31:
   \   000002E6   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   000002E8   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   000002EA   C002               RJMP    ??do_hart_transaction_30
   \                     ??do_hart_transaction_32:
   \   000002EC   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   000002EE   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_30:
   \   000002F0   ........           CALL    OS_Unuse
    763                          hart_channel_set_status(chnl, HartChannelStatus_No_Response);
   \                     ??do_hart_transaction_28:
   \   000002F4   910C               LD      R16, X
   \   000002F6   300C               CPI     R16, 12
   \   000002F8   F4A8               BRCC    ??do_hart_transaction_33
   \   000002FA   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_4`) >> 16
   \   000002FC   BFFB               OUT     0x3B, R31
   \   000002FE   E0F2               LDI     R31, 2
   \   00000300   9F0F               MUL     R16, R31
   \   00000302   01F0               MOVW    R31:R30, R1:R0
   \   00000304   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_4`) & 0xFFFF))
   \   00000306   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_4`) & 0xFFFF) >> 8
   \   00000308   9007               ELPM    R0, Z+
   \   0000030A   9016               ELPM    R1, Z
   \   0000030C   01F0               MOVW    R31:R30, R1:R0
   \   0000030E   9409               IJMP
   \                     ??do_hart_transaction_34:
   \   00000310   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   00000312   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   00000314   C005               RJMP    ??do_hart_transaction_35
   \                     ??do_hart_transaction_36:
   \   00000316   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   00000318   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   0000031A   C002               RJMP    ??do_hart_transaction_35
   \                     ??do_hart_transaction_37:
   \   0000031C   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   0000031E   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_35:
   \   00000320   ........           CALL    OS_Use
   \                     ??do_hart_transaction_33:
   \   00000324   01FD               MOVW    R31:R30, R27:R26
   \   00000326   E001               LDI     R16, 1
   \   00000328   8301               STD     Z+1, R16
   \   0000032A   8100               LD      R16, Z
   \   0000032C   300C               CPI     R16, 12
   \   0000032E   F4A8               BRCC    ??do_hart_transaction_38
   \   00000330   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_5`) >> 16
   \   00000332   BFFB               OUT     0x3B, R31
   \   00000334   E0F2               LDI     R31, 2
   \   00000336   9F0F               MUL     R16, R31
   \   00000338   01F0               MOVW    R31:R30, R1:R0
   \   0000033A   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_5`) & 0xFFFF))
   \   0000033C   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_5`) & 0xFFFF) >> 8
   \   0000033E   9007               ELPM    R0, Z+
   \   00000340   9016               ELPM    R1, Z
   \   00000342   01F0               MOVW    R31:R30, R1:R0
   \   00000344   9409               IJMP
   \                     ??do_hart_transaction_39:
   \   00000346   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   00000348   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   0000034A   C005               RJMP    ??do_hart_transaction_40
   \                     ??do_hart_transaction_41:
   \   0000034C   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   0000034E   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000350   C002               RJMP    ??do_hart_transaction_40
   \                     ??do_hart_transaction_42:
   \   00000352   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   00000354   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_40:
   \   00000356   ........           CALL    OS_Unuse
    764          
    765                          t->error(task, current_chnl, HartCommErr_RX_Timeout);
   \                     ??do_hart_transaction_38:
   \   0000035A   E031               LDI     R19, 1
   \   0000035C   C116               RJMP    ??do_hart_transaction_43
    766                          break;
    767                      case HART_EVENT_RX_ERROR:
    768                          // protocol parsing error
    769                          hart_channel_inc_stat(chnl, HartChannelStatItem_RX_INVALID);
   \                     ??do_hart_transaction_20:
   \   0000035E   910C               LD      R16, X
   \   00000360   300C               CPI     R16, 12
   \   00000362   F4A8               BRCC    ??do_hart_transaction_44
   \   00000364   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_6`) >> 16
   \   00000366   BFFB               OUT     0x3B, R31
   \   00000368   E0F2               LDI     R31, 2
   \   0000036A   9F0F               MUL     R16, R31
   \   0000036C   01F0               MOVW    R31:R30, R1:R0
   \   0000036E   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_6`) & 0xFFFF))
   \   00000370   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_6`) & 0xFFFF) >> 8
   \   00000372   9007               ELPM    R0, Z+
   \   00000374   9016               ELPM    R1, Z
   \   00000376   01F0               MOVW    R31:R30, R1:R0
   \   00000378   9409               IJMP
   \                     ??do_hart_transaction_45:
   \   0000037A   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   0000037C   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   0000037E   C005               RJMP    ??do_hart_transaction_46
   \                     ??do_hart_transaction_47:
   \   00000380   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   00000382   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000384   C002               RJMP    ??do_hart_transaction_46
   \                     ??do_hart_transaction_48:
   \   00000386   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   00000388   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_46:
   \   0000038A   ........           CALL    OS_Use
   \                     ??do_hart_transaction_44:
   \   0000038E   01FD               MOVW    R31:R30, R27:R26
   \   00000390   8103               LDD     R16, Z+3
   \   00000392   8114               LDD     R17, Z+4
   \   00000394   8125               LDD     R18, Z+5
   \   00000396   8136               LDD     R19, Z+6
   \   00000398   5F0F               SUBI    R16, 255
   \   0000039A   4F1F               SBCI    R17, 255
   \   0000039C   4F2F               SBCI    R18, 255
   \   0000039E   4F3F               SBCI    R19, 255
   \   000003A0   8303               STD     Z+3, R16
   \   000003A2   8314               STD     Z+4, R17
   \   000003A4   8325               STD     Z+5, R18
   \   000003A6   8336               STD     Z+6, R19
   \   000003A8   8100               LD      R16, Z
   \   000003AA   300C               CPI     R16, 12
   \   000003AC   F4A8               BRCC    ??do_hart_transaction_49
   \   000003AE   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_7`) >> 16
   \   000003B0   BFFB               OUT     0x3B, R31
   \   000003B2   E0F2               LDI     R31, 2
   \   000003B4   9F0F               MUL     R16, R31
   \   000003B6   01F0               MOVW    R31:R30, R1:R0
   \   000003B8   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_7`) & 0xFFFF))
   \   000003BA   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_7`) & 0xFFFF) >> 8
   \   000003BC   9007               ELPM    R0, Z+
   \   000003BE   9016               ELPM    R1, Z
   \   000003C0   01F0               MOVW    R31:R30, R1:R0
   \   000003C2   9409               IJMP
   \                     ??do_hart_transaction_50:
   \   000003C4   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   000003C6   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   000003C8   C005               RJMP    ??do_hart_transaction_51
   \                     ??do_hart_transaction_52:
   \   000003CA   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   000003CC   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   000003CE   C002               RJMP    ??do_hart_transaction_51
   \                     ??do_hart_transaction_53:
   \   000003D0   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   000003D2   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_51:
   \   000003D4   ........           CALL    OS_Unuse
    770                          hart_channel_set_status(chnl, HartChannelStatus_Invalid_Response);
   \                     ??do_hart_transaction_49:
   \   000003D8   910C               LD      R16, X
   \   000003DA   300C               CPI     R16, 12
   \   000003DC   F4A8               BRCC    ??do_hart_transaction_54
   \   000003DE   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_8`) >> 16
   \   000003E0   BFFB               OUT     0x3B, R31
   \   000003E2   E0F2               LDI     R31, 2
   \   000003E4   9F0F               MUL     R16, R31
   \   000003E6   01F0               MOVW    R31:R30, R1:R0
   \   000003E8   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_8`) & 0xFFFF))
   \   000003EA   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_8`) & 0xFFFF) >> 8
   \   000003EC   9007               ELPM    R0, Z+
   \   000003EE   9016               ELPM    R1, Z
   \   000003F0   01F0               MOVW    R31:R30, R1:R0
   \   000003F2   9409               IJMP
   \                     ??do_hart_transaction_55:
   \   000003F4   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   000003F6   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   000003F8   C005               RJMP    ??do_hart_transaction_56
   \                     ??do_hart_transaction_57:
   \   000003FA   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   000003FC   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   000003FE   C002               RJMP    ??do_hart_transaction_56
   \                     ??do_hart_transaction_58:
   \   00000400   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   00000402   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_56:
   \   00000404   ........           CALL    OS_Use
   \                     ??do_hart_transaction_54:
   \   00000408   01FD               MOVW    R31:R30, R27:R26
   \   0000040A   E002               LDI     R16, 2
   \   0000040C   8301               STD     Z+1, R16
   \   0000040E   8100               LD      R16, Z
   \   00000410   300C               CPI     R16, 12
   \   00000412   F4A8               BRCC    ??do_hart_transaction_59
   \   00000414   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_9`) >> 16
   \   00000416   BFFB               OUT     0x3B, R31
   \   00000418   E0F2               LDI     R31, 2
   \   0000041A   9F0F               MUL     R16, R31
   \   0000041C   01F0               MOVW    R31:R30, R1:R0
   \   0000041E   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_9`) & 0xFFFF))
   \   00000420   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_9`) & 0xFFFF) >> 8
   \   00000422   9007               ELPM    R0, Z+
   \   00000424   9016               ELPM    R1, Z
   \   00000426   01F0               MOVW    R31:R30, R1:R0
   \   00000428   9409               IJMP
   \                     ??do_hart_transaction_60:
   \   0000042A   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   0000042C   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   0000042E   C005               RJMP    ??do_hart_transaction_61
   \                     ??do_hart_transaction_62:
   \   00000430   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   00000432   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000434   C002               RJMP    ??do_hart_transaction_61
   \                     ??do_hart_transaction_63:
   \   00000436   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   00000438   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_61:
   \   0000043A   ........           CALL    OS_Unuse
    771          
    772                          t->error(task, current_chnl, HartCommErr_RX_Error);
   \                     ??do_hart_transaction_59:
   \   0000043E   E030               LDI     R19, 0
   \   00000440   C0A4               RJMP    ??do_hart_transaction_43
    773                          break;
    774                      case HART_EVENT_RX_COMPLETE:
    775                          hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_19:
   \   00000442   910C               LD      R16, X
   \   00000444   300C               CPI     R16, 12
   \   00000446   F4A8               BRCC    ??do_hart_transaction_64
   \   00000448   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_10`) >> 16
   \   0000044A   BFFB               OUT     0x3B, R31
   \   0000044C   E0F2               LDI     R31, 2
   \   0000044E   9F0F               MUL     R16, R31
   \   00000450   01F0               MOVW    R31:R30, R1:R0
   \   00000452   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_10`) & 0xFFFF))
   \   00000454   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_10`) & 0xFFFF) >> 8
   \   00000456   9007               ELPM    R0, Z+
   \   00000458   9016               ELPM    R1, Z
   \   0000045A   01F0               MOVW    R31:R30, R1:R0
   \   0000045C   9409               IJMP
   \                     ??do_hart_transaction_65:
   \   0000045E   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   00000460   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   00000462   C005               RJMP    ??do_hart_transaction_66
   \                     ??do_hart_transaction_67:
   \   00000464   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   00000466   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000468   C002               RJMP    ??do_hart_transaction_66
   \                     ??do_hart_transaction_68:
   \   0000046A   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   0000046C   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_66:
   \   0000046E   ........           CALL    OS_Use
   \                     ??do_hart_transaction_64:
   \   00000472   01FD               MOVW    R31:R30, R27:R26
   \   00000474   82F1               STD     Z+1, R15
   \   00000476   8100               LD      R16, Z
   \   00000478   300C               CPI     R16, 12
   \   0000047A   F008               BRCS    $+2+2
   \   0000047C   C0B3               RJMP    ??do_hart_transaction_15
   \   0000047E   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_11`) >> 16
   \   00000480   BFFB               OUT     0x3B, R31
   \   00000482   E0F2               LDI     R31, 2
   \   00000484   9F0F               MUL     R16, R31
   \   00000486   01F0               MOVW    R31:R30, R1:R0
   \   00000488   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_11`) & 0xFFFF))
   \   0000048A   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_11`) & 0xFFFF) >> 8
   \   0000048C   9007               ELPM    R0, Z+
   \   0000048E   9016               ELPM    R1, Z
   \   00000490   01F0               MOVW    R31:R30, R1:R0
   \   00000492   9409               IJMP
   \                     ??do_hart_transaction_69:
   \   00000494   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   00000496   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   00000498   C005               RJMP    ??do_hart_transaction_70
   \                     ??do_hart_transaction_71:
   \   0000049A   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   0000049C   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   0000049E   C002               RJMP    ??do_hart_transaction_70
   \                     ??do_hart_transaction_72:
   \   000004A0   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   000004A2   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_70:
   \   000004A4   ........           CALL    OS_Unuse
   \   000004A8   C09D               RJMP    ??do_hart_transaction_15
    776                          break;
    777                      case HART_EVENT_CHECKSUM_ERROR:
    778                          hart_channel_set_status(chnl, HartChannelStatus_Responding);
   \                     ??do_hart_transaction_22:
   \   000004AA   910C               LD      R16, X
   \   000004AC   300C               CPI     R16, 12
   \   000004AE   F4A8               BRCC    ??do_hart_transaction_73
   \   000004B0   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_12`) >> 16
   \   000004B2   BFFB               OUT     0x3B, R31
   \   000004B4   E0F2               LDI     R31, 2
   \   000004B6   9F0F               MUL     R16, R31
   \   000004B8   01F0               MOVW    R31:R30, R1:R0
   \   000004BA   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_12`) & 0xFFFF))
   \   000004BC   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_12`) & 0xFFFF) >> 8
   \   000004BE   9007               ELPM    R0, Z+
   \   000004C0   9016               ELPM    R1, Z
   \   000004C2   01F0               MOVW    R31:R30, R1:R0
   \   000004C4   9409               IJMP
   \                     ??do_hart_transaction_74:
   \   000004C6   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   000004C8   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   000004CA   C005               RJMP    ??do_hart_transaction_75
   \                     ??do_hart_transaction_76:
   \   000004CC   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   000004CE   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   000004D0   C002               RJMP    ??do_hart_transaction_75
   \                     ??do_hart_transaction_77:
   \   000004D2   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   000004D4   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_75:
   \   000004D6   ........           CALL    OS_Use
   \                     ??do_hart_transaction_73:
   \   000004DA   01FD               MOVW    R31:R30, R27:R26
   \   000004DC   82F1               STD     Z+1, R15
   \   000004DE   8100               LD      R16, Z
   \   000004E0   300C               CPI     R16, 12
   \   000004E2   F4A8               BRCC    ??do_hart_transaction_78
   \   000004E4   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_13`) >> 16
   \   000004E6   BFFB               OUT     0x3B, R31
   \   000004E8   E0F2               LDI     R31, 2
   \   000004EA   9F0F               MUL     R16, R31
   \   000004EC   01F0               MOVW    R31:R30, R1:R0
   \   000004EE   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_13`) & 0xFFFF))
   \   000004F0   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_13`) & 0xFFFF) >> 8
   \   000004F2   9007               ELPM    R0, Z+
   \   000004F4   9016               ELPM    R1, Z
   \   000004F6   01F0               MOVW    R31:R30, R1:R0
   \   000004F8   9409               IJMP
   \                     ??do_hart_transaction_79:
   \   000004FA   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   000004FC   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   000004FE   C005               RJMP    ??do_hart_transaction_80
   \                     ??do_hart_transaction_81:
   \   00000500   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   00000502   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000504   C002               RJMP    ??do_hart_transaction_80
   \                     ??do_hart_transaction_82:
   \   00000506   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   00000508   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_80:
   \   0000050A   ........           CALL    OS_Unuse
    779                          hart_channel_inc_stat(chnl, HartChannelStatItem_RX_CSUM);
   \                     ??do_hart_transaction_78:
   \   0000050E   910C               LD      R16, X
   \   00000510   300C               CPI     R16, 12
   \   00000512   F4A8               BRCC    ??do_hart_transaction_83
   \   00000514   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_14`) >> 16
   \   00000516   BFFB               OUT     0x3B, R31
   \   00000518   E0F2               LDI     R31, 2
   \   0000051A   9F0F               MUL     R16, R31
   \   0000051C   01F0               MOVW    R31:R30, R1:R0
   \   0000051E   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_14`) & 0xFFFF))
   \   00000520   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_14`) & 0xFFFF) >> 8
   \   00000522   9007               ELPM    R0, Z+
   \   00000524   9016               ELPM    R1, Z
   \   00000526   01F0               MOVW    R31:R30, R1:R0
   \   00000528   9409               IJMP
   \                     ??do_hart_transaction_84:
   \   0000052A   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   0000052C   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   0000052E   C005               RJMP    ??do_hart_transaction_85
   \                     ??do_hart_transaction_86:
   \   00000530   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   00000532   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000534   C002               RJMP    ??do_hart_transaction_85
   \                     ??do_hart_transaction_87:
   \   00000536   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   00000538   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_85:
   \   0000053A   ........           CALL    OS_Use
   \                     ??do_hart_transaction_83:
   \   0000053E   01FD               MOVW    R31:R30, R27:R26
   \   00000540   8107               LDD     R16, Z+7
   \   00000542   8510               LDD     R17, Z+8
   \   00000544   8521               LDD     R18, Z+9
   \   00000546   8532               LDD     R19, Z+10
   \   00000548   5F0F               SUBI    R16, 255
   \   0000054A   4F1F               SBCI    R17, 255
   \   0000054C   4F2F               SBCI    R18, 255
   \   0000054E   4F3F               SBCI    R19, 255
   \   00000550   8307               STD     Z+7, R16
   \   00000552   8710               STD     Z+8, R17
   \   00000554   8721               STD     Z+9, R18
   \   00000556   8732               STD     Z+10, R19
   \   00000558   8100               LD      R16, Z
   \   0000055A   300C               CPI     R16, 12
   \   0000055C   F4A8               BRCC    ??do_hart_transaction_88
   \   0000055E   ....               LDI     R31, (`?<Jumptable for do_hart_transaction>_15`) >> 16
   \   00000560   BFFB               OUT     0x3B, R31
   \   00000562   E0F2               LDI     R31, 2
   \   00000564   9F0F               MUL     R16, R31
   \   00000566   01F0               MOVW    R31:R30, R1:R0
   \   00000568   ....               SUBI    R30, LOW((-(`?<Jumptable for do_hart_transaction>_15`) & 0xFFFF))
   \   0000056A   ....               SBCI    R31, (-(`?<Jumptable for do_hart_transaction>_15`) & 0xFFFF) >> 8
   \   0000056C   9007               ELPM    R0, Z+
   \   0000056E   9016               ELPM    R1, Z
   \   00000570   01F0               MOVW    R31:R30, R1:R0
   \   00000572   9409               IJMP
   \                     ??do_hart_transaction_89:
   \   00000574   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   00000576   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   00000578   C005               RJMP    ??do_hart_transaction_90
   \                     ??do_hart_transaction_91:
   \   0000057A   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   0000057C   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   0000057E   C002               RJMP    ??do_hart_transaction_90
   \                     ??do_hart_transaction_92:
   \   00000580   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   00000582   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??do_hart_transaction_90:
   \   00000584   ........           CALL    OS_Unuse
    780                          // checksum mismatch
    781                          t->error(task, current_chnl, HartCommErr_RX_Checksum);
   \                     ??do_hart_transaction_88:
   \   00000588   E032               LDI     R19, 2
   \                     ??do_hart_transaction_43:
   \   0000058A   2D2C               MOV     R18, R12
   \   0000058C   0182               MOVW    R17:R16, R5:R4
   \   0000058E   01F5               MOVW    R31:R30, R11:R10
   \   00000590   8144               LDD     R20, Z+4
   \   00000592   81F5               LDD     R31, Z+5
   \   00000594   2FE4               MOV     R30, R20
   \   00000596   9509               ICALL
    782                          break;
   \   00000598   C025               RJMP    ??do_hart_transaction_15
    783                      }
    784                  }
    785              } else if ( !NoOtherRx ) {
    786                  OS_Delay(2);
   \                     ??do_hart_transaction_11:
   \   0000059A   E002               LDI     R16, 2
   \   0000059C   E010               LDI     R17, 0
   \   0000059E   ........           CALL    OS_Delay
    787                  task->rx_Listen[ModemChannel] = true;
   \   000005A2   24FF               CLR     R15
   \   000005A4   01F2               MOVW    R31:R30, R5:R4
   \   000005A6   0DEE               ADD     R30, R14
   \   000005A8   1DFF               ADC     R31, R15
   \   000005AA   55E7               SUBI    R30, 87
   \   000005AC   4FFA               SBCI    R31, 250
   \   000005AE   E001               LDI     R16, 1
   \   000005B0   8300               ST      Z, R16
    788                  hart_control_Rx_Enable(task->modem_no, TRUE, FALSE);
   \   000005B2   01F4               MOVW    R31:R30, R9:R8
   \   000005B4   8100               LD      R16, Z
   \   000005B6   2300               TST     R16
   \   000005B8   F081               BREQ    ??do_hart_transaction_93
   \   000005BA   950A               DEC     R16
   \   000005BC   F041               BREQ    ??do_hart_transaction_94
   \   000005BE   950A               DEC     R16
   \   000005C0   F489               BRNE    ??do_hart_transaction_15
   \   000005C2   91000131           LDS     R16, 305
   \   000005C6   6100               ORI     R16, 0x10
   \   000005C8   93000131           STS     305, R16
   \   000005CC   C00B               RJMP    ??do_hart_transaction_15
   \                     ??do_hart_transaction_94:
   \   000005CE   910000D1           LDS     R16, 209
   \   000005D2   6100               ORI     R16, 0x10
   \   000005D4   930000D1           STS     209, R16
   \   000005D8   C005               RJMP    ??do_hart_transaction_15
   \                     ??do_hart_transaction_93:
   \   000005DA   910000C9           LDS     R16, 201
   \   000005DE   6100               ORI     R16, 0x10
   \   000005E0   930000C9           STS     201, R16
    789              }
    790              //OS_DelayUntil(t1 + 750);
    791              hart_control_Rx_Enable(task->modem_no, FALSE, FALSE);
   \                     ??do_hart_transaction_15:
   \   000005E4   01F4               MOVW    R31:R30, R9:R8
   \   000005E6   8100               LD      R16, Z
   \   000005E8   2300               TST     R16
   \   000005EA   F081               BREQ    ??do_hart_transaction_95
   \   000005EC   950A               DEC     R16
   \   000005EE   F041               BREQ    ??do_hart_transaction_96
   \   000005F0   950A               DEC     R16
   \   000005F2   F489               BRNE    ??do_hart_transaction_97
   \   000005F4   91000131           LDS     R16, 305
   \   000005F8   7E0F               ANDI    R16, 0xEF
   \   000005FA   93000131           STS     305, R16
   \   000005FE   C00B               RJMP    ??do_hart_transaction_97
   \                     ??do_hart_transaction_96:
   \   00000600   910000D1           LDS     R16, 209
   \   00000604   7E0F               ANDI    R16, 0xEF
   \   00000606   930000D1           STS     209, R16
   \   0000060A   C005               RJMP    ??do_hart_transaction_97
   \                     ??do_hart_transaction_95:
   \   0000060C   910000C9           LDS     R16, 201
   \   00000610   7E0F               ANDI    R16, 0xEF
   \   00000612   930000C9           STS     201, R16
    792              task->rx_Listen[ModemChannel] = false;
   \                     ??do_hart_transaction_97:
   \   00000616   24FF               CLR     R15
   \   00000618   0C4E               ADD     R4, R14
   \   0000061A   1C5F               ADC     R5, R15
   \   0000061C   EA09               LDI     R16, 169
   \   0000061E   0E40               ADD     R4, R16
   \   00000620   E005               LDI     R16, 5
   \   00000622   1E50               ADC     R5, R16
   \   00000624   01F2               MOVW    R31:R30, R5:R4
   \   00000626   82F0               ST      Z, R15
    793          }
   \   00000628   9189               LD      R24, Y+
   \   0000062A   9199               LD      R25, Y+
   \   0000062C   91A9               LD      R26, Y+
   \   0000062E   91B9               LD      R27, Y+
   \   00000630   9049               LD      R4, Y+
   \   00000632   9059               LD      R5, Y+
   \   00000634   9069               LD      R6, Y+
   \   00000636   9079               LD      R7, Y+
   \   00000638   9089               LD      R8, Y+
   \   0000063A   9099               LD      R9, Y+
   \   0000063C   90A9               LD      R10, Y+
   \   0000063E   90B9               LD      R11, Y+
   \   00000640   90C9               LD      R12, Y+
   \   00000642   90E9               LD      R14, Y+
   \   00000644   90F9               LD      R15, Y+
   \   00000646   9508               RET
   \   00000648                      REQUIRE _A_UCSR1B
   \   00000648                      REQUIRE _A_UCSR2B
   \   00000648                      REQUIRE _A_UCSR3B
    794          
    795          ////////////////////////////////////////////////////////////////////////////////
    796          //
    797          // HART Task
    798          //
    799          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    800          void HART_Task(void) {
   \                     HART_Task:
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   927A               ST      -Y, R7
   \   00000006   926A               ST      -Y, R6
   \   00000008   925A               ST      -Y, R5
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   938A               ST      -Y, R24
   \   00000012                      REQUIRE ?Register_R4_is_cg_reg
   \   00000012                      REQUIRE ?Register_R5_is_cg_reg
   \   00000012                      REQUIRE ?Register_R6_is_cg_reg
   \   00000012                      REQUIRE ?Register_R7_is_cg_reg
   \   00000012                      REQUIRE ?Register_R8_is_cg_reg
   \   00000012                      REQUIRE ?Register_R9_is_cg_reg
    801              OS_TASK *taskPtr = OS_GetpCurrentTask();
    802              HartTaskStruct *myTask  = container_of(taskPtr, HartTaskStruct, tcb);
   \   00000012   91A0....           LDS     R26, (OS_Global + 6)
   \   00000016   91B0....           LDS     R27, (OS_Global + 7)
   \   0000001A   58A5               SUBI    R26, 133
   \   0000001C   40B2               SBCI    R27, 2
    803              OS_CreateMB(&myTask->RxMailBox, 1, HART_MAX_RX_BUFFER_SIZE, (char *)myTask->mailBuf);
   \   0000001E   01BD               MOVW    R23:R22, R27:R26
   \   00000020   5066               SUBI    R22, 6
   \   00000022   4F7F               SBCI    R23, 255
   \   00000024   E840               LDI     R20, 128
   \   00000026   E051               LDI     R21, 1
   \   00000028   E021               LDI     R18, 1
   \   0000002A   018D               MOVW    R17:R16, R27:R26
   \   0000002C   5806               SUBI    R16, 134
   \   0000002E   4F1D               SBCI    R17, 253
   \   00000030   ........           CALL    OS_CreateMB
    804          
    805          
    806              hart_msg_parser_init(&myTask->hart_parser, myTask->rx_buf, HART_MAX_RX_BUFFER_SIZE);
   \   00000034   E840               LDI     R20, 128
   \   00000036   E051               LDI     R21, 1
   \   00000038   019D               MOVW    R19:R18, R27:R26
   \   0000003A   5D28               SUBI    R18, 216
   \   0000003C   4F3B               SBCI    R19, 251
   \   0000003E   018D               MOVW    R17:R16, R27:R26
   \   00000040   530F               SUBI    R16, 63
   \   00000042   4F1A               SBCI    R17, 250
   \   00000044   ........           CALL    hart_msg_parser_init
    807              hart_msg_encoder_init(&myTask->hart_encoder, myTask->tx_buf, HART_MAX_TX_BUFFER_SIZE);
   \   00000048   E840               LDI     R20, 128
   \   0000004A   E051               LDI     R21, 1
   \   0000004C   019D               MOVW    R19:R18, R27:R26
   \   0000004E   552C               SUBI    R18, 92
   \   00000050   4F3D               SBCI    R19, 253
   \   00000052   018D               MOVW    R17:R16, R27:R26
   \   00000054   500A               SUBI    R16, 10
   \   00000056   4F1A               SBCI    R17, 250
   \   00000058   ........           CALL    hart_msg_encoder_init
    808          
    809              hart_config_uart(myTask);
   \   0000005C   018D               MOVW    R17:R16, R27:R26
   \   0000005E   ....               RCALL   hart_config_uart
    810              hart_gpio_hart_carrier_off(myTask->modem_no);
   \   00000060   012D               MOVW    R5:R4, R27:R26
   \   00000062   E90D               LDI     R16, 157
   \   00000064   0E40               ADD     R4, R16
   \   00000066   E002               LDI     R16, 2
   \   00000068   1E50               ADC     R5, R16
   \   0000006A   01F2               MOVW    R31:R30, R5:R4
   \   0000006C   8100               LD      R16, Z
   \   0000006E   ........           CALL    hart_gpio_hart_carrier_off
    811              hart_control_Rx_Enable(myTask->modem_no, FALSE, FALSE);
   \   00000072   01F2               MOVW    R31:R30, R5:R4
   \   00000074   8100               LD      R16, Z
   \   00000076   2300               TST     R16
   \   00000078   F081               BREQ    ??HART_Task_0
   \   0000007A   950A               DEC     R16
   \   0000007C   F041               BREQ    ??HART_Task_1
   \   0000007E   950A               DEC     R16
   \   00000080   F489               BRNE    ??HART_Task_2
   \   00000082   91000131           LDS     R16, 305
   \   00000086   7E0F               ANDI    R16, 0xEF
   \   00000088   93000131           STS     305, R16
   \   0000008C   C00B               RJMP    ??HART_Task_2
   \                     ??HART_Task_1:
   \   0000008E   910000D1           LDS     R16, 209
   \   00000092   7E0F               ANDI    R16, 0xEF
   \   00000094   930000D1           STS     209, R16
   \   00000098   C005               RJMP    ??HART_Task_2
   \                     ??HART_Task_0:
   \   0000009A   910000C9           LDS     R16, 201
   \   0000009E   7E0F               ANDI    R16, 0xEF
   \   000000A0   930000C9           STS     201, R16
    812          
    813              long t0 = OS_GetTime();
   \                     ??HART_Task_2:
   \   000000A4   ........           CALL    OS__Gettime
   \   000000A8   0148               MOVW    R9:R8, R17:R16
   \   000000AA   013D               MOVW    R7:R6, R27:R26
   \   000000AC   EB0D               LDI     R16, 189
   \   000000AE   0E60               ADD     R6, R16
   \   000000B0   E005               LDI     R16, 5
   \   000000B2   1E70               ADC     R7, R16
    814              while ( 1 ) {
    815                  uint8_t num_chnls_handled = 0;
    816          
    817                  for ( hart_channel_t current_chnl = myTask->start_chnl; current_chnl <= myTask->end_chnl; current_chnl++ ) {
   \                     ??HART_Task_3:
   \   000000B4   01F2               MOVW    R31:R30, R5:R4
   \   000000B6   8181               LDD     R24, Z+1
   \   000000B8   8102               LDD     R16, Z+2
   \   000000BA   1708               CP      R16, R24
   \   000000BC   F110               BRCS    ??HART_Task_4
    818          
    819                      if ( hart_channel_ready_to_poll(current_chnl) ) {
   \                     ??HART_Task_5:
   \   000000BE   E107               LDI     R16, 23
   \   000000C0   9F80               MUL     R24, R16
   \   000000C2   01F0               MOVW    R31:R30, R1:R0
   \   000000C4   ....               SUBI    R30, LOW((-(_hart_channels) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, (-(_hart_channels) & 0xFFFF) >> 8
   \   000000C8   8102               LDD     R16, Z+2
   \   000000CA   2300               TST     R16
   \   000000CC   F4A9               BRNE    ??HART_Task_6
   \   000000CE   E004               LDI     R16, 4
   \   000000D0   9F80               MUL     R24, R16
   \   000000D2   01F0               MOVW    R31:R30, R1:R0
   \   000000D4   ....               SUBI    R30, LOW((-(TData + 158) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, HIGH((-(TData + 158) & 0xFFFF))
   \   000000D8   8100               LD      R16, Z
   \   000000DA   8111               LDD     R17, Z+1
   \   000000DC   8122               LDD     R18, Z+2
   \   000000DE   8133               LDD     R19, Z+3
   \   000000E0   E040               LDI     R20, 0
   \   000000E2   E050               LDI     R21, 0
   \   000000E4   E460               LDI     R22, 64
   \   000000E6   E470               LDI     R23, 64
   \   000000E8   ........           CALL    ?F_CMP_GE_S_L04
   \   000000EC   F428               BRCC    ??HART_Task_6
    820                          num_chnls_handled++;
    821                          do_hart_transaction(myTask, current_chnl, &_demo1_transaction);
   \   000000EE   ....               LDI     R20, LOW((_hart_channels + 276))
   \   000000F0   ....               LDI     R21, HIGH((_hart_channels + 276))
   \   000000F2   2F28               MOV     R18, R24
   \   000000F4   018D               MOVW    R17:R16, R27:R26
   \   000000F6   ....               RCALL   do_hart_transaction
    822                      }
    823                  }
   \                     ??HART_Task_6:
   \   000000F8   01F2               MOVW    R31:R30, R5:R4
   \   000000FA   8102               LDD     R16, Z+2
   \   000000FC   9583               INC     R24
   \   000000FE   1708               CP      R16, R24
   \   00000100   F6F0               BRCC    ??HART_Task_5
    824                  OS_DelayUntil(t0 += 3000);
   \                     ??HART_Task_4:
   \   00000102   EB08               LDI     R16, 184
   \   00000104   0E80               ADD     R8, R16
   \   00000106   E00B               LDI     R16, 11
   \   00000108   1E90               ADC     R9, R16
   \   0000010A   0184               MOVW    R17:R16, R9:R8
   \   0000010C   ........           CALL    OS_DelayUntil
    825                  myTask->LastHartTaskRunTime = OS_Time;
   \   00000110   9100....           LDS     R16, (OS_Global + 18)
   \   00000114   9110....           LDS     R17, (OS_Global + 19)
   \   00000118   9120....           LDS     R18, (OS_Global + 20)
   \   0000011C   9130....           LDS     R19, (OS_Global + 21)
   \   00000120   01F3               MOVW    R31:R30, R7:R6
   \   00000122   8300               ST      Z, R16
   \   00000124   8311               STD     Z+1, R17
   \   00000126   8322               STD     Z+2, R18
   \   00000128   8333               STD     Z+3, R19
   \   0000012A   CFC4               RJMP    ??HART_Task_3
   \   0000012C                      REQUIRE _A_UCSR1B
   \   0000012C                      REQUIRE _A_UCSR2B
   \   0000012C                      REQUIRE _A_UCSR3B
    826                  /*
    827                  if (num_chnls_handled == 0) {
    828                      //
    829                      // if all the task channels are either power down or
    830                      // fault state, then get some sleep
    831                      // much better cooperative bullshit
    832                      //
    833                      OS_Delay(200);
    834                  }
    835                  */
    836              }
    837          }
    838          
    839          
    840          ////////////////////////////////////////////////////////////////////////////////
    841          //
    842          // public interfaces
    843          //
    844          ////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    845          void
    846          hart_start(void) {
   \                     hart_start:
   \   00000000   928A               ST      -Y, R8
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R8_is_cg_reg
    847              hart_channel_t   chnl;
    848          
    849              OS_CREATERSEMA(&_hart_task0.channel_lock);
   \   0000000C   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   0000000E   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \   00000010   ........           CALL    OS_CreateRSema
    850              OS_CREATERSEMA(&_hart_task1.channel_lock);
   \   00000014   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   00000016   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000018   ........           CALL    OS_CreateRSema
    851              OS_CREATERSEMA(&_hart_task2.channel_lock);
   \   0000001C   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   0000001E   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   00000020   ........           CALL    OS_CreateRSema
    852          
    853              hart_for_each_channel(chnl) {
   \   00000024   E080               LDI     R24, 0
   \   00000026   ....               LDI     R26, LOW(_hart_channels)
   \   00000028   ....               LDI     R27, (_hart_channels) >> 8
   \   0000002A   E00C               LDI     R16, 12
   \   0000002C   2E80               MOV     R8, R16
   \   0000002E   2444               CLR     R4
   \   00000030   E091               LDI     R25, 1
    854                  hart_channel_reset(&_hart_channels[chnl]);
   \                     ??hart_start_0:
   \   00000032   910C               LD      R16, X
   \   00000034   300C               CPI     R16, 12
   \   00000036   F4A8               BRCC    ??hart_start_1
   \   00000038   ....               LDI     R31, (`?<Jumptable for hart_start>_0`) >> 16
   \   0000003A   BFFB               OUT     0x3B, R31
   \   0000003C   E0F2               LDI     R31, 2
   \   0000003E   9F0F               MUL     R16, R31
   \   00000040   01F0               MOVW    R31:R30, R1:R0
   \   00000042   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_start>_0`) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(`?<Jumptable for hart_start>_0`) & 0xFFFF) >> 8
   \   00000046   9007               ELPM    R0, Z+
   \   00000048   9016               ELPM    R1, Z
   \   0000004A   01F0               MOVW    R31:R30, R1:R0
   \   0000004C   9409               IJMP
   \                     ??hart_start_2:
   \   0000004E   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   00000050   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   00000052   C005               RJMP    ??hart_start_3
   \                     ??hart_start_4:
   \   00000054   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   00000056   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000058   C002               RJMP    ??hart_start_3
   \                     ??hart_start_5:
   \   0000005A   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   0000005C   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??hart_start_3:
   \   0000005E   ........           CALL    OS_Use
   \                     ??hart_start_1:
   \   00000062   01FD               MOVW    R31:R30, R27:R26
   \   00000064   8391               STD     Z+1, R25
   \   00000066   8392               STD     Z+2, R25
   \   00000068   8243               STD     Z+3, R4
   \   0000006A   8244               STD     Z+4, R4
   \   0000006C   8245               STD     Z+5, R4
   \   0000006E   8246               STD     Z+6, R4
   \   00000070   8247               STD     Z+7, R4
   \   00000072   8640               STD     Z+8, R4
   \   00000074   8641               STD     Z+9, R4
   \   00000076   8642               STD     Z+10, R4
   \   00000078   8643               STD     Z+11, R4
   \   0000007A   8644               STD     Z+12, R4
   \   0000007C   8645               STD     Z+13, R4
   \   0000007E   8646               STD     Z+14, R4
   \   00000080   8647               STD     Z+15, R4
   \   00000082   8A40               STD     Z+16, R4
   \   00000084   8A41               STD     Z+17, R4
   \   00000086   8A42               STD     Z+18, R4
   \   00000088   8A43               STD     Z+19, R4
   \   0000008A   8A44               STD     Z+20, R4
   \   0000008C   8A45               STD     Z+21, R4
   \   0000008E   8A46               STD     Z+22, R4
   \   00000090   8100               LD      R16, Z
   \   00000092   300C               CPI     R16, 12
   \   00000094   F4A8               BRCC    ??hart_start_6
   \   00000096   ....               LDI     R31, (`?<Jumptable for hart_start>_1`) >> 16
   \   00000098   BFFB               OUT     0x3B, R31
   \   0000009A   E0F2               LDI     R31, 2
   \   0000009C   9F0F               MUL     R16, R31
   \   0000009E   01F0               MOVW    R31:R30, R1:R0
   \   000000A0   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_start>_1`) & 0xFFFF))
   \   000000A2   ....               SBCI    R31, (-(`?<Jumptable for hart_start>_1`) & 0xFFFF) >> 8
   \   000000A4   9007               ELPM    R0, Z+
   \   000000A6   9016               ELPM    R1, Z
   \   000000A8   01F0               MOVW    R31:R30, R1:R0
   \   000000AA   9409               IJMP
   \                     ??hart_start_7:
   \   000000AC   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   000000AE   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   000000B0   C005               RJMP    ??hart_start_8
   \                     ??hart_start_9:
   \   000000B2   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   000000B4   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   000000B6   C002               RJMP    ??hart_start_8
   \                     ??hart_start_10:
   \   000000B8   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   000000BA   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??hart_start_8:
   \   000000BC   ........           CALL    OS_Unuse
    855                  hart_control_power(chnl, HartChannelPowerStatus_ON);
   \                     ??hart_start_6:
   \   000000C0   2F08               MOV     R16, R24
   \   000000C2   ........           CALL    hart_gpio_power_on
   \   000000C6   910C               LD      R16, X
   \   000000C8   300C               CPI     R16, 12
   \   000000CA   F4A8               BRCC    ??hart_start_11
   \   000000CC   ....               LDI     R31, (`?<Jumptable for hart_start>_2`) >> 16
   \   000000CE   BFFB               OUT     0x3B, R31
   \   000000D0   E0F2               LDI     R31, 2
   \   000000D2   9F0F               MUL     R16, R31
   \   000000D4   01F0               MOVW    R31:R30, R1:R0
   \   000000D6   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_start>_2`) & 0xFFFF))
   \   000000D8   ....               SBCI    R31, (-(`?<Jumptable for hart_start>_2`) & 0xFFFF) >> 8
   \   000000DA   9007               ELPM    R0, Z+
   \   000000DC   9016               ELPM    R1, Z
   \   000000DE   01F0               MOVW    R31:R30, R1:R0
   \   000000E0   9409               IJMP
   \                     ??hart_start_12:
   \   000000E2   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   000000E4   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   000000E6   C005               RJMP    ??hart_start_13
   \                     ??hart_start_14:
   \   000000E8   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   000000EA   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   000000EC   C002               RJMP    ??hart_start_13
   \                     ??hart_start_15:
   \   000000EE   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   000000F0   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??hart_start_13:
   \   000000F2   ........           CALL    OS_Use
   \                     ??hart_start_11:
   \   000000F6   01FD               MOVW    R31:R30, R27:R26
   \   000000F8   8242               STD     Z+2, R4
   \   000000FA   8100               LD      R16, Z
   \   000000FC   300C               CPI     R16, 12
   \   000000FE   F4A8               BRCC    ??hart_start_16
   \   00000100   ....               LDI     R31, (`?<Jumptable for hart_start>_3`) >> 16
   \   00000102   BFFB               OUT     0x3B, R31
   \   00000104   E0F2               LDI     R31, 2
   \   00000106   9F0F               MUL     R16, R31
   \   00000108   01F0               MOVW    R31:R30, R1:R0
   \   0000010A   ....               SUBI    R30, LOW((-(`?<Jumptable for hart_start>_3`) & 0xFFFF))
   \   0000010C   ....               SBCI    R31, (-(`?<Jumptable for hart_start>_3`) & 0xFFFF) >> 8
   \   0000010E   9007               ELPM    R0, Z+
   \   00000110   9016               ELPM    R1, Z
   \   00000112   01F0               MOVW    R31:R30, R1:R0
   \   00000114   9409               IJMP
   \                     ??hart_start_17:
   \   00000116   ....               LDI     R16, LOW((_hart_task0 + 4613))
   \   00000118   ....               LDI     R17, HIGH((_hart_task0 + 4613))
   \   0000011A   C005               RJMP    ??hart_start_18
   \                     ??hart_start_19:
   \   0000011C   ....               LDI     R16, LOW((_hart_task0 + 3073))
   \   0000011E   ....               LDI     R17, HIGH((_hart_task0 + 3073))
   \   00000120   C002               RJMP    ??hart_start_18
   \                     ??hart_start_20:
   \   00000122   ....               LDI     R16, LOW((_hart_task0 + 1533))
   \   00000124   ....               LDI     R17, HIGH((_hart_task0 + 1533))
   \                     ??hart_start_18:
   \   00000126   ........           CALL    OS_Unuse
    856              }
   \                     ??hart_start_16:
   \   0000012A   9583               INC     R24
   \   0000012C   9657               ADIW    R27:R26, 23
   \   0000012E   948A               DEC     R8
   \   00000130   F009               BREQ    $+2+2
   \   00000132   CF7F               RJMP    ??hart_start_0
    857              hart_gpio_enable_all_mux();
   \   00000134   ........           CALL    hart_gpio_enable_all_mux
    858              hart_diag_task_start();
   \   00000138   ........           CALL    hart_diag_task_start
    859          
    860              //
    861              // now power on modem one by one.
    862              // don't care about start up time
    863              //
    864              hart_diag_init();
   \   0000013C   ........           CALL    hart_diag_init
    865          
    866              OS_CREATETASK(&_hart_task0.tcb, "HART0", HART_Task, HART_TASK_PRIORITY + 0, _hart_task0.Mystack);
   \   00000140   E002               LDI     R16, 2
   \   00000142   924A               ST      -Y, R4
   \   00000144   930A               ST      -Y, R16
   \   00000146   EF0A               LDI     R16, 250
   \   00000148   924A               ST      -Y, R4
   \   0000014A   930A               ST      -Y, R16
   \   0000014C   ....               LDI     R16, LOW(_hart_task0)
   \   0000014E   ....               LDI     R17, (_hart_task0) >> 8
   \   00000150   931A               ST      -Y, R17
   \   00000152   930A               ST      -Y, R16
   \   00000154   ....               LDI     R22, LOW(HART_Task/2)
   \   00000156   ....               LDI     R23, (HART_Task/2) >> 8
   \   00000158   E748               LDI     R20, 120
   \   0000015A   ....               LDI     R18, LOW(`?<Constant "HART0">`)
   \   0000015C   ....               LDI     R19, (`?<Constant "HART0">`) >> 8
   \   0000015E   ....               LDI     R16, LOW((_hart_task0 + 645))
   \   00000160   ....               LDI     R17, HIGH((_hart_task0 + 645))
   \   00000162   ........           CALL    OS_CreateTask_S
    867              OS_CREATETASK(&_hart_task1.tcb, "HART1", HART_Task, HART_TASK_PRIORITY + 1, _hart_task1.Mystack);
   \   00000166   E002               LDI     R16, 2
   \   00000168   924A               ST      -Y, R4
   \   0000016A   930A               ST      -Y, R16
   \   0000016C   EF0A               LDI     R16, 250
   \   0000016E   924A               ST      -Y, R4
   \   00000170   930A               ST      -Y, R16
   \   00000172   ....               LDI     R16, LOW((_hart_task0 + 1540))
   \   00000174   ....               LDI     R17, HIGH((_hart_task0 + 1540))
   \   00000176   931A               ST      -Y, R17
   \   00000178   930A               ST      -Y, R16
   \   0000017A   ....               LDI     R22, LOW(HART_Task/2)
   \   0000017C   ....               LDI     R23, (HART_Task/2) >> 8
   \   0000017E   E749               LDI     R20, 121
   \   00000180   ....               LDI     R18, LOW((`?<Constant "HART0">` + 6))
   \   00000182   ....               LDI     R19, HIGH((`?<Constant "HART0">` + 6))
   \   00000184   ....               LDI     R16, LOW((_hart_task0 + 2185))
   \   00000186   ....               LDI     R17, HIGH((_hart_task0 + 2185))
   \   00000188   ........           CALL    OS_CreateTask_S
    868              OS_CREATETASK(&_hart_task2.tcb, "HART2", HART_Task, HART_TASK_PRIORITY + 2, _hart_task2.Mystack);
   \   0000018C   E002               LDI     R16, 2
   \   0000018E   924A               ST      -Y, R4
   \   00000190   930A               ST      -Y, R16
   \   00000192   EF0A               LDI     R16, 250
   \   00000194   924A               ST      -Y, R4
   \   00000196   930A               ST      -Y, R16
   \   00000198   ....               LDI     R16, LOW((_hart_task0 + 3080))
   \   0000019A   ....               LDI     R17, HIGH((_hart_task0 + 3080))
   \   0000019C   931A               ST      -Y, R17
   \   0000019E   930A               ST      -Y, R16
   \   000001A0   ....               LDI     R22, LOW(HART_Task/2)
   \   000001A2   ....               LDI     R23, (HART_Task/2) >> 8
   \   000001A4   E74A               LDI     R20, 122
   \   000001A6   ....               LDI     R18, LOW((`?<Constant "HART0">` + 12))
   \   000001A8   ....               LDI     R19, HIGH((`?<Constant "HART0">` + 12))
   \   000001AA   ....               LDI     R16, LOW((_hart_task0 + 3725))
   \   000001AC   ....               LDI     R17, HIGH((_hart_task0 + 3725))
   \   000001AE   ........           CALL    OS_CreateTask_S
    869          
    870          
    871          }
   \   000001B2   9189               LD      R24, Y+
   \   000001B4   9199               LD      R25, Y+
   \   000001B6   91A9               LD      R26, Y+
   \   000001B8   91B9               LD      R27, Y+
   \   000001BA   9049               LD      R4, Y+
   \   000001BC   9089               LD      R8, Y+
   \   000001BE   9508               RET

   \                                 In  segment INTVEC, offset 0x90, root
   \                     `??USART1_RXC::??INTVEC 144`:
   \   00000090   ........           JMP     USART1_RXC

   \                                 In  segment INTVEC, offset 0x94, root
   \                     `??USART1_UDRE::??INTVEC 148`:
   \   00000094   ........           JMP     USART1_UDRE

   \                                 In  segment INTVEC, offset 0x98, root
   \                     `??USART1_TXC::??INTVEC 152`:
   \   00000098   ........           JMP     USART1_TXC

   \                                 In  segment INTVEC, offset 0xcc, root
   \                     `??USART2_RXC::??INTVEC 204`:
   \   000000CC   ........           JMP     USART2_RXC

   \                                 In  segment INTVEC, offset 0xd0, root
   \                     `??USART2_UDRE::??INTVEC 208`:
   \   000000D0   ........           JMP     USART2_UDRE

   \                                 In  segment INTVEC, offset 0xd4, root
   \                     `??USART2_TXC::??INTVEC 212`:
   \   000000D4   ........           JMP     USART2_TXC

   \                                 In  segment INTVEC, offset 0xd8, root
   \                     `??USART3_RXC::??INTVEC 216`:
   \   000000D8   ........           JMP     USART3_RXC

   \                                 In  segment INTVEC, offset 0xdc, root
   \                     `??USART3_UDRE::??INTVEC 220`:
   \   000000DC   ........           JMP     USART3_UDRE

   \                                 In  segment INTVEC, offset 0xe0, root
   \                     `??USART3_TXC::??INTVEC 224`:
   \   000000E0   ........           JMP     USART3_TXC

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "HART0">>`:
   \   00000000   414854520030       DC8 "HART0"
   \                     `?<Initializer for <Constant "HART1">>`:
   \   00000006   414854520031       DC8 "HART1"
   \                     `?<Initializer for <Constant "HART2">>`:
   \   0000000C   414854520032       DC8 "HART2"

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_task0>`:
   \   00000000   0000               DC16 0
   \   00000002   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000012   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000022   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000032   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000042   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000052   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000062   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000072   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000082   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000092   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000103   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000113   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000123   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000133   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000143   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000153   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000163   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000173   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000183   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000193   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000203   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000213   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000223   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000233   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000243   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000253   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000263   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000027A   0000               DC16 0H
   \   0000027C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   00000285   0000               DC16 0H
   \   00000287   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000029E   030000000000       DC8 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for _hart_task1>`:
   \   00000604   0000               DC16 0
   \   00000606   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000616   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000626   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000636   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000646   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000656   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000666   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000676   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000686   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000696   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000707   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000717   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000727   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000737   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000747   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000757   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000767   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000777   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000787   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000797   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000807   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000817   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000827   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000837   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000847   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000857   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000867   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000087E   0000               DC16 0H
   \   00000880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   00000889   0000               DC16 0H
   \   0000088B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
   \              000000000000
   \              000000000000
   \              0000000001  
   \   000008A2   070400000000       DC8 4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \   000008B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000904   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000914   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000924   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000934   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000944   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000954   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000964   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000974   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000984   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000994   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A04   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A14   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A24   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A34   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A44   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A54   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A64   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A74   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A84   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A94   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AA4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AC4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AE4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AF4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B04   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B14   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B24   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B34   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B44   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B54   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B64   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B74   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B84   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B94   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BA4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for _hart_task2>`:
   \   00000C08   0000               DC16 0
   \   00000C0A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C1A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C2A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C3A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C4A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C5A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C6A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C7A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C8A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C9A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CAA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CBA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CCA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CDA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CEA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CFA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   00000D0B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D1B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D2B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D3B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D4B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D5B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D6B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D7B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D8B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D9B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DAB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DBB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DCB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DDB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DEB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DFB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E0B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E1B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E2B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E3B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E4B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E5B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000E6B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000E82   0000               DC16 0H
   \   00000E84   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   00000E8D   0000               DC16 0H
   \   00000E8F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2
   \              000000000000
   \              000000000000
   \              0000000002  
   \   00000EA6   0B0800000000       DC8 8, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \   00000EB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000ED8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000EF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FD8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for _hart_channels>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000017   000100000000       DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000002E   000200000000       DC8 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000045   000300000000       DC8 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000005C   000400000000       DC8 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000073   000500000000       DC8 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000008A   000600000000       DC8 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000A1   000700000000       DC8 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000B8   000800000000       DC8 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000CF   000900000000       DC8 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000E6   000A00000000       DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000000000  
   \   000000F7   000000000000       DC8 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0
   \              000B00000000
   \              000000      
   \   00000106   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              0000        
   \                     `?<Initializer for _demo1_transaction>`:
   \   00000114   ........           DC16 vega_radar_make_request/2, ReceiveReply/2
   \   00000118   ....               DC16 vega_radar_handle_rx_error/2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_0`:
   \   00000000   ....               DW      (??do_hart_transaction_4) /2
   \   00000002   ....               DW      (??do_hart_transaction_4) /2
   \   00000004   ....               DW      (??do_hart_transaction_4) /2
   \   00000006   ....               DW      (??do_hart_transaction_4) /2
   \   00000008   ....               DW      (??do_hart_transaction_3) /2
   \   0000000A   ....               DW      (??do_hart_transaction_3) /2
   \   0000000C   ....               DW      (??do_hart_transaction_3) /2
   \   0000000E   ....               DW      (??do_hart_transaction_3) /2
   \   00000010   ....               DW      (??do_hart_transaction_1) /2
   \   00000012   ....               DW      (??do_hart_transaction_1) /2
   \   00000014   ....               DW      (??do_hart_transaction_1) /2
   \   00000016   ....               DW      (??do_hart_transaction_1) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_1`:
   \   00000000   ....               DW      (??do_hart_transaction_9) /2
   \   00000002   ....               DW      (??do_hart_transaction_9) /2
   \   00000004   ....               DW      (??do_hart_transaction_9) /2
   \   00000006   ....               DW      (??do_hart_transaction_9) /2
   \   00000008   ....               DW      (??do_hart_transaction_8) /2
   \   0000000A   ....               DW      (??do_hart_transaction_8) /2
   \   0000000C   ....               DW      (??do_hart_transaction_8) /2
   \   0000000E   ....               DW      (??do_hart_transaction_8) /2
   \   00000010   ....               DW      (??do_hart_transaction_6) /2
   \   00000012   ....               DW      (??do_hart_transaction_6) /2
   \   00000014   ....               DW      (??do_hart_transaction_6) /2
   \   00000016   ....               DW      (??do_hart_transaction_6) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_2`:
   \   00000000   ....               DW      (??do_hart_transaction_27) /2
   \   00000002   ....               DW      (??do_hart_transaction_27) /2
   \   00000004   ....               DW      (??do_hart_transaction_27) /2
   \   00000006   ....               DW      (??do_hart_transaction_27) /2
   \   00000008   ....               DW      (??do_hart_transaction_26) /2
   \   0000000A   ....               DW      (??do_hart_transaction_26) /2
   \   0000000C   ....               DW      (??do_hart_transaction_26) /2
   \   0000000E   ....               DW      (??do_hart_transaction_26) /2
   \   00000010   ....               DW      (??do_hart_transaction_24) /2
   \   00000012   ....               DW      (??do_hart_transaction_24) /2
   \   00000014   ....               DW      (??do_hart_transaction_24) /2
   \   00000016   ....               DW      (??do_hart_transaction_24) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_3`:
   \   00000000   ....               DW      (??do_hart_transaction_32) /2
   \   00000002   ....               DW      (??do_hart_transaction_32) /2
   \   00000004   ....               DW      (??do_hart_transaction_32) /2
   \   00000006   ....               DW      (??do_hart_transaction_32) /2
   \   00000008   ....               DW      (??do_hart_transaction_31) /2
   \   0000000A   ....               DW      (??do_hart_transaction_31) /2
   \   0000000C   ....               DW      (??do_hart_transaction_31) /2
   \   0000000E   ....               DW      (??do_hart_transaction_31) /2
   \   00000010   ....               DW      (??do_hart_transaction_29) /2
   \   00000012   ....               DW      (??do_hart_transaction_29) /2
   \   00000014   ....               DW      (??do_hart_transaction_29) /2
   \   00000016   ....               DW      (??do_hart_transaction_29) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_4`:
   \   00000000   ....               DW      (??do_hart_transaction_37) /2
   \   00000002   ....               DW      (??do_hart_transaction_37) /2
   \   00000004   ....               DW      (??do_hart_transaction_37) /2
   \   00000006   ....               DW      (??do_hart_transaction_37) /2
   \   00000008   ....               DW      (??do_hart_transaction_36) /2
   \   0000000A   ....               DW      (??do_hart_transaction_36) /2
   \   0000000C   ....               DW      (??do_hart_transaction_36) /2
   \   0000000E   ....               DW      (??do_hart_transaction_36) /2
   \   00000010   ....               DW      (??do_hart_transaction_34) /2
   \   00000012   ....               DW      (??do_hart_transaction_34) /2
   \   00000014   ....               DW      (??do_hart_transaction_34) /2
   \   00000016   ....               DW      (??do_hart_transaction_34) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_5`:
   \   00000000   ....               DW      (??do_hart_transaction_42) /2
   \   00000002   ....               DW      (??do_hart_transaction_42) /2
   \   00000004   ....               DW      (??do_hart_transaction_42) /2
   \   00000006   ....               DW      (??do_hart_transaction_42) /2
   \   00000008   ....               DW      (??do_hart_transaction_41) /2
   \   0000000A   ....               DW      (??do_hart_transaction_41) /2
   \   0000000C   ....               DW      (??do_hart_transaction_41) /2
   \   0000000E   ....               DW      (??do_hart_transaction_41) /2
   \   00000010   ....               DW      (??do_hart_transaction_39) /2
   \   00000012   ....               DW      (??do_hart_transaction_39) /2
   \   00000014   ....               DW      (??do_hart_transaction_39) /2
   \   00000016   ....               DW      (??do_hart_transaction_39) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_6`:
   \   00000000   ....               DW      (??do_hart_transaction_48) /2
   \   00000002   ....               DW      (??do_hart_transaction_48) /2
   \   00000004   ....               DW      (??do_hart_transaction_48) /2
   \   00000006   ....               DW      (??do_hart_transaction_48) /2
   \   00000008   ....               DW      (??do_hart_transaction_47) /2
   \   0000000A   ....               DW      (??do_hart_transaction_47) /2
   \   0000000C   ....               DW      (??do_hart_transaction_47) /2
   \   0000000E   ....               DW      (??do_hart_transaction_47) /2
   \   00000010   ....               DW      (??do_hart_transaction_45) /2
   \   00000012   ....               DW      (??do_hart_transaction_45) /2
   \   00000014   ....               DW      (??do_hart_transaction_45) /2
   \   00000016   ....               DW      (??do_hart_transaction_45) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_7`:
   \   00000000   ....               DW      (??do_hart_transaction_53) /2
   \   00000002   ....               DW      (??do_hart_transaction_53) /2
   \   00000004   ....               DW      (??do_hart_transaction_53) /2
   \   00000006   ....               DW      (??do_hart_transaction_53) /2
   \   00000008   ....               DW      (??do_hart_transaction_52) /2
   \   0000000A   ....               DW      (??do_hart_transaction_52) /2
   \   0000000C   ....               DW      (??do_hart_transaction_52) /2
   \   0000000E   ....               DW      (??do_hart_transaction_52) /2
   \   00000010   ....               DW      (??do_hart_transaction_50) /2
   \   00000012   ....               DW      (??do_hart_transaction_50) /2
   \   00000014   ....               DW      (??do_hart_transaction_50) /2
   \   00000016   ....               DW      (??do_hart_transaction_50) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_8`:
   \   00000000   ....               DW      (??do_hart_transaction_58) /2
   \   00000002   ....               DW      (??do_hart_transaction_58) /2
   \   00000004   ....               DW      (??do_hart_transaction_58) /2
   \   00000006   ....               DW      (??do_hart_transaction_58) /2
   \   00000008   ....               DW      (??do_hart_transaction_57) /2
   \   0000000A   ....               DW      (??do_hart_transaction_57) /2
   \   0000000C   ....               DW      (??do_hart_transaction_57) /2
   \   0000000E   ....               DW      (??do_hart_transaction_57) /2
   \   00000010   ....               DW      (??do_hart_transaction_55) /2
   \   00000012   ....               DW      (??do_hart_transaction_55) /2
   \   00000014   ....               DW      (??do_hart_transaction_55) /2
   \   00000016   ....               DW      (??do_hart_transaction_55) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_9`:
   \   00000000   ....               DW      (??do_hart_transaction_63) /2
   \   00000002   ....               DW      (??do_hart_transaction_63) /2
   \   00000004   ....               DW      (??do_hart_transaction_63) /2
   \   00000006   ....               DW      (??do_hart_transaction_63) /2
   \   00000008   ....               DW      (??do_hart_transaction_62) /2
   \   0000000A   ....               DW      (??do_hart_transaction_62) /2
   \   0000000C   ....               DW      (??do_hart_transaction_62) /2
   \   0000000E   ....               DW      (??do_hart_transaction_62) /2
   \   00000010   ....               DW      (??do_hart_transaction_60) /2
   \   00000012   ....               DW      (??do_hart_transaction_60) /2
   \   00000014   ....               DW      (??do_hart_transaction_60) /2
   \   00000016   ....               DW      (??do_hart_transaction_60) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_10`:
   \   00000000   ....               DW      (??do_hart_transaction_68) /2
   \   00000002   ....               DW      (??do_hart_transaction_68) /2
   \   00000004   ....               DW      (??do_hart_transaction_68) /2
   \   00000006   ....               DW      (??do_hart_transaction_68) /2
   \   00000008   ....               DW      (??do_hart_transaction_67) /2
   \   0000000A   ....               DW      (??do_hart_transaction_67) /2
   \   0000000C   ....               DW      (??do_hart_transaction_67) /2
   \   0000000E   ....               DW      (??do_hart_transaction_67) /2
   \   00000010   ....               DW      (??do_hart_transaction_65) /2
   \   00000012   ....               DW      (??do_hart_transaction_65) /2
   \   00000014   ....               DW      (??do_hart_transaction_65) /2
   \   00000016   ....               DW      (??do_hart_transaction_65) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_11`:
   \   00000000   ....               DW      (??do_hart_transaction_72) /2
   \   00000002   ....               DW      (??do_hart_transaction_72) /2
   \   00000004   ....               DW      (??do_hart_transaction_72) /2
   \   00000006   ....               DW      (??do_hart_transaction_72) /2
   \   00000008   ....               DW      (??do_hart_transaction_71) /2
   \   0000000A   ....               DW      (??do_hart_transaction_71) /2
   \   0000000C   ....               DW      (??do_hart_transaction_71) /2
   \   0000000E   ....               DW      (??do_hart_transaction_71) /2
   \   00000010   ....               DW      (??do_hart_transaction_69) /2
   \   00000012   ....               DW      (??do_hart_transaction_69) /2
   \   00000014   ....               DW      (??do_hart_transaction_69) /2
   \   00000016   ....               DW      (??do_hart_transaction_69) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_12`:
   \   00000000   ....               DW      (??do_hart_transaction_77) /2
   \   00000002   ....               DW      (??do_hart_transaction_77) /2
   \   00000004   ....               DW      (??do_hart_transaction_77) /2
   \   00000006   ....               DW      (??do_hart_transaction_77) /2
   \   00000008   ....               DW      (??do_hart_transaction_76) /2
   \   0000000A   ....               DW      (??do_hart_transaction_76) /2
   \   0000000C   ....               DW      (??do_hart_transaction_76) /2
   \   0000000E   ....               DW      (??do_hart_transaction_76) /2
   \   00000010   ....               DW      (??do_hart_transaction_74) /2
   \   00000012   ....               DW      (??do_hart_transaction_74) /2
   \   00000014   ....               DW      (??do_hart_transaction_74) /2
   \   00000016   ....               DW      (??do_hart_transaction_74) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_13`:
   \   00000000   ....               DW      (??do_hart_transaction_82) /2
   \   00000002   ....               DW      (??do_hart_transaction_82) /2
   \   00000004   ....               DW      (??do_hart_transaction_82) /2
   \   00000006   ....               DW      (??do_hart_transaction_82) /2
   \   00000008   ....               DW      (??do_hart_transaction_81) /2
   \   0000000A   ....               DW      (??do_hart_transaction_81) /2
   \   0000000C   ....               DW      (??do_hart_transaction_81) /2
   \   0000000E   ....               DW      (??do_hart_transaction_81) /2
   \   00000010   ....               DW      (??do_hart_transaction_79) /2
   \   00000012   ....               DW      (??do_hart_transaction_79) /2
   \   00000014   ....               DW      (??do_hart_transaction_79) /2
   \   00000016   ....               DW      (??do_hart_transaction_79) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_14`:
   \   00000000   ....               DW      (??do_hart_transaction_87) /2
   \   00000002   ....               DW      (??do_hart_transaction_87) /2
   \   00000004   ....               DW      (??do_hart_transaction_87) /2
   \   00000006   ....               DW      (??do_hart_transaction_87) /2
   \   00000008   ....               DW      (??do_hart_transaction_86) /2
   \   0000000A   ....               DW      (??do_hart_transaction_86) /2
   \   0000000C   ....               DW      (??do_hart_transaction_86) /2
   \   0000000E   ....               DW      (??do_hart_transaction_86) /2
   \   00000010   ....               DW      (??do_hart_transaction_84) /2
   \   00000012   ....               DW      (??do_hart_transaction_84) /2
   \   00000014   ....               DW      (??do_hart_transaction_84) /2
   \   00000016   ....               DW      (??do_hart_transaction_84) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for do_hart_transaction>_15`:
   \   00000000   ....               DW      (??do_hart_transaction_92) /2
   \   00000002   ....               DW      (??do_hart_transaction_92) /2
   \   00000004   ....               DW      (??do_hart_transaction_92) /2
   \   00000006   ....               DW      (??do_hart_transaction_92) /2
   \   00000008   ....               DW      (??do_hart_transaction_91) /2
   \   0000000A   ....               DW      (??do_hart_transaction_91) /2
   \   0000000C   ....               DW      (??do_hart_transaction_91) /2
   \   0000000E   ....               DW      (??do_hart_transaction_91) /2
   \   00000010   ....               DW      (??do_hart_transaction_89) /2
   \   00000012   ....               DW      (??do_hart_transaction_89) /2
   \   00000014   ....               DW      (??do_hart_transaction_89) /2
   \   00000016   ....               DW      (??do_hart_transaction_89) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_start>_0`:
   \   00000000   ....               DW      (??hart_start_5) /2
   \   00000002   ....               DW      (??hart_start_5) /2
   \   00000004   ....               DW      (??hart_start_5) /2
   \   00000006   ....               DW      (??hart_start_5) /2
   \   00000008   ....               DW      (??hart_start_4) /2
   \   0000000A   ....               DW      (??hart_start_4) /2
   \   0000000C   ....               DW      (??hart_start_4) /2
   \   0000000E   ....               DW      (??hart_start_4) /2
   \   00000010   ....               DW      (??hart_start_2) /2
   \   00000012   ....               DW      (??hart_start_2) /2
   \   00000014   ....               DW      (??hart_start_2) /2
   \   00000016   ....               DW      (??hart_start_2) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_start>_1`:
   \   00000000   ....               DW      (??hart_start_10) /2
   \   00000002   ....               DW      (??hart_start_10) /2
   \   00000004   ....               DW      (??hart_start_10) /2
   \   00000006   ....               DW      (??hart_start_10) /2
   \   00000008   ....               DW      (??hart_start_9) /2
   \   0000000A   ....               DW      (??hart_start_9) /2
   \   0000000C   ....               DW      (??hart_start_9) /2
   \   0000000E   ....               DW      (??hart_start_9) /2
   \   00000010   ....               DW      (??hart_start_7) /2
   \   00000012   ....               DW      (??hart_start_7) /2
   \   00000014   ....               DW      (??hart_start_7) /2
   \   00000016   ....               DW      (??hart_start_7) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_start>_2`:
   \   00000000   ....               DW      (??hart_start_15) /2
   \   00000002   ....               DW      (??hart_start_15) /2
   \   00000004   ....               DW      (??hart_start_15) /2
   \   00000006   ....               DW      (??hart_start_15) /2
   \   00000008   ....               DW      (??hart_start_14) /2
   \   0000000A   ....               DW      (??hart_start_14) /2
   \   0000000C   ....               DW      (??hart_start_14) /2
   \   0000000E   ....               DW      (??hart_start_14) /2
   \   00000010   ....               DW      (??hart_start_12) /2
   \   00000012   ....               DW      (??hart_start_12) /2
   \   00000014   ....               DW      (??hart_start_12) /2
   \   00000016   ....               DW      (??hart_start_12) /2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for hart_start>_3`:
   \   00000000   ....               DW      (??hart_start_20) /2
   \   00000002   ....               DW      (??hart_start_20) /2
   \   00000004   ....               DW      (??hart_start_20) /2
   \   00000006   ....               DW      (??hart_start_20) /2
   \   00000008   ....               DW      (??hart_start_19) /2
   \   0000000A   ....               DW      (??hart_start_19) /2
   \   0000000C   ....               DW      (??hart_start_19) /2
   \   0000000E   ....               DW      (??hart_start_19) /2
   \   00000010   ....               DW      (??hart_start_17) /2
   \   00000012   ....               DW      (??hart_start_17) /2
   \   00000014   ....               DW      (??hart_start_17) /2
   \   00000016   ....               DW      (??hart_start_17) /2

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "HART0">`:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for <Constant "HART0">>`
   \   00000006                      DS8 6
   \   0000000C                      REQUIRE `?<Initializer for <Constant "HART1">>`
   \   0000000C                      DS8 6
   \   00000012                      REQUIRE `?<Initializer for <Constant "HART2">>`

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {128, 0, 0, 0, 0}>`:
   \   00000000   0080000000         DC8 128, 0, 0, 0, 0
    872          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   ConvertBigEndianToLittleEndian
      9      2   HART_Task
        9      2   -> OS_CreateMB
        9      2   -> OS_DelayUntil
        9      2   -> OS__Gettime
        9      2   -> do_hart_transaction
        9      2   -> hart_config_uart
        9      2   -> hart_gpio_hart_carrier_off
        9      2   -> hart_msg_encoder_init
        9      2   -> hart_msg_parser_init
        9      2 ?F_CMP_GE_S_L04
      3      2   Handler_USART_RXC
        3      2   -> OS_PutMailCond1
      1      2   Handler_USART_RXC0
        1      2   -> OS_PutMailCond1
      1      2   Handler_USART_RXC1
        1      2   -> OS_PutMailCond1
      1      2   Handler_USART_RXC2
        1      2   -> OS_PutMailCond1
     22      2   ReceiveReply
       22      2   -> OS_GetMailTimed
       22      2   -> hart_msg_calc_csum
     16      2   USART1_RXC
       16      2   -> OS_CallISR
     16      2   USART1_TXC
       16      2   -> OS_CallISR
     16      2   USART1_UDRE
       16      2   -> OS_CallISR
     16      2   USART2_RXC
       16      2   -> OS_CallISR
     16      2   USART2_TXC
       16      2   -> OS_CallISR
     16      2   USART2_UDRE
       16      2   -> OS_CallISR
     16      2   USART3_RXC
       16      2   -> OS_CallISR
     16      2   USART3_TXC
       16      2   -> OS_CallISR
     16      2   USART3_UDRE
       16      2   -> OS_CallISR
     15      2   do_hart_transaction
       15      2   -- Indirect call
       15      2   -> OS_ClearEvents
       15      2   -> OS_Delay
       15      2   -> OS_Unuse
       15      2   -> OS_Use
       15      2   -> OS_WaitEventTimed
       15      2   -> hart_gpio_channel_select
       15      2   -> hart_gpio_hart_carrier_off
       15      2   -> hart_gpio_hart_carrier_on
       15      2   -> hart_msg_encoder_reset
       15      2   -> hart_msg_parser_reset
      0      2   hart_config_uart
      0      2   hart_irq_finish_tx0
        0      2   -> OS_SignalEvent
      0      2   hart_irq_finish_tx1
        0      2   -> OS_SignalEvent
      0      2   hart_irq_finish_tx2
        0      2   -> OS_SignalEvent
      0      2   hart_irq_tx_next0
      0      2   hart_irq_tx_next1
      0      2   hart_irq_tx_next2
     12      2   hart_start
        6      2   -> OS_CreateRSema
        6      2   -> OS_CreateTask_S
        6      2   -> OS_Unuse
        6      2   -> OS_Use
        6      2   -> hart_diag_init
        6      2   -> hart_diag_task_start
        6      2   -> hart_gpio_enable_all_mux
        6      2   -> hart_gpio_power_on
      0      2   vega_radar_handle_rx_error
      7      2   vega_radar_make_request
        7      2   -> hart_msg_encoder_calc_csum
        7      2   -> hart_msg_encoder_data
        7      2   -> hart_msg_encoder_long_start
        7      2   -> hart_msg_encoder_preamble
        7      2 ?ML_FLASH_SRAM_24EC_16_L07


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Constant "HART0">
       5  ?<Constant {128, 0, 0, 0, 0}>
      18  ?<Initializer for <Constant "HART0">>
     282  ?<Initializer for _hart_channels>
    4620  ?<Initializer for _hart_task0>
      24  ?<Jumptable for do_hart_transaction>_0
      24  ?<Jumptable for do_hart_transaction>_1
      24  ?<Jumptable for do_hart_transaction>_10
      24  ?<Jumptable for do_hart_transaction>_11
      24  ?<Jumptable for do_hart_transaction>_12
      24  ?<Jumptable for do_hart_transaction>_13
      24  ?<Jumptable for do_hart_transaction>_14
      24  ?<Jumptable for do_hart_transaction>_15
      24  ?<Jumptable for do_hart_transaction>_2
      24  ?<Jumptable for do_hart_transaction>_3
      24  ?<Jumptable for do_hart_transaction>_4
      24  ?<Jumptable for do_hart_transaction>_5
      24  ?<Jumptable for do_hart_transaction>_6
      24  ?<Jumptable for do_hart_transaction>_7
      24  ?<Jumptable for do_hart_transaction>_8
      24  ?<Jumptable for do_hart_transaction>_9
      24  ?<Jumptable for hart_start>_0
      24  ?<Jumptable for hart_start>_1
      24  ?<Jumptable for hart_start>_2
      24  ?<Jumptable for hart_start>_3
     152  ?Subroutine0
      42  ?Subroutine1
      32  ConvertBigEndianToLittleEndian
     300  HART_Task
     132  Handler_USART_RXC
     108  Handler_USART_RXC0
     108  Handler_USART_RXC1
     108  Handler_USART_RXC2
     484  ReceiveReply
      42  USART1_RXC
       4  USART1_RXC::??INTVEC 144
      42  USART1_TXC
       4  USART1_TXC::??INTVEC 152
      42  USART1_UDRE
       4  USART1_UDRE::??INTVEC 148
      42  USART2_RXC
       4  USART2_RXC::??INTVEC 204
      40  USART2_TXC
       4  USART2_TXC::??INTVEC 212
      42  USART2_UDRE
       4  USART2_UDRE::??INTVEC 208
      42  USART3_RXC
       4  USART3_RXC::??INTVEC 216
      42  USART3_TXC
       4  USART3_TXC::??INTVEC 224
      42  USART3_UDRE
       4  USART3_UDRE::??INTVEC 220
       2  _A_UBRR1
       2  _A_UBRR2
       2  _A_UBRR3
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_UCSR2A
       1  _A_UCSR2B
       1  _A_UCSR2C
       1  _A_UCSR3A
       1  _A_UCSR3B
       1  _A_UCSR3C
       1  _A_UDR1
       1  _A_UDR2
       1  _A_UDR3
     282  _hart_channels
          _demo1_transaction
    4620  _hart_task0
          _hart_task1
          _hart_task2
    1608  do_hart_transaction
     118  hart_config_uart
      60  hart_irq_finish_tx0
      60  hart_irq_finish_tx1
      60  hart_irq_finish_tx2
      22  hart_irq_tx_next0
      24  hart_irq_tx_next1
      24  hart_irq_tx_next2
     448  hart_start
      42  vega_radar_handle_rx_error
      74  vega_radar_make_request
       7  -- Other

 
    18 bytes in segment ABSOLUTE
 4 382 bytes in segment CODE
     5 bytes in segment FAR_F
     7 bytes in segment INITTAB
    36 bytes in segment INTVEC
 4 920 bytes in segment NEAR_I
 4 920 bytes in segment NEAR_ID
   480 bytes in segment SWITCH
 
 9 787 bytes of CODE memory (+ 43 bytes shared)
 4 920 bytes of DATA memory (+ 18 bytes shared)

Errors: none
Warnings: 2
