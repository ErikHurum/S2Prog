###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/May/2023  12:40:45
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\UsartPro.r90.rsp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main -D OS_LIBMODE_S -D
#        OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\List\Main -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\ --eeprom_size 4096
#        --clib -Oh) --dependencies=n
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\UsartPro.r90.iar_deps
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\List\Main\UsartPro.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\UsartPro.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1281
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\UsartPro.c
      1          /****************************************************************************************
      2          / Com protocol for USART0
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xc9
   \   __no_init union <unnamed>#53 volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   __no_init union <unnamed>#72 volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   __no_init union <unnamed>#309 volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   __no_init union <unnamed>#376 volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40
   \   __no_init union <unnamed>#382 volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f
   \   __no_init union <unnamed>#385 volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   __no_init union <unnamed>#436 volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "string.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          /*************************************************************************
     14          *   (This is a timer calback)
     15          *  Timout timer USART 0
     16          *
     17          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     18          void TimoutUSART0(void) {
   \                     TimoutUSART0:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     19          
     20              UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C1           STS     193, R16
     21              ClrBit(PORTE, 0x04) ;                              // TXE0 off
   \   0000000A   94F8               cli
   \   0000000C   9872               CBI     0x0E, 0x02
   \   0000000E   9100....           LDS     R16, (OS_Global + 1)
   \   00000012   2300               TST     R16
   \   00000014   F409               BRNE    ??TimoutUSART0_0
   \   00000016   9478               sei
     22              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \                     ??TimoutUSART0_0:
   \   00000018   ....               LDI     R16, LOW(TimerUSART0)
   \   0000001A   ....               LDI     R17, (TimerUSART0) >> 8
   \   0000001C   ........           CALL    OS_StopTimer
     23              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000020   E000               LDI     R16, 0
   \   00000022   ....               RJMP    GoToSyncUART
   \   00000024                      REQUIRE _A_UCSR0B
   \   00000024                      REQUIRE _A_PORTE
     24          }
     25          
     26          /*************************************************************************
     27          *   (This is a timer calback)
     28          *  Timer USART 0 on before TX
     29          *
     30          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     31          void TimoutUSART0On(void) {
   \                     TimoutUSART0On:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     32          
     33              UCSR0B |= __BIT_MASK( UDRIE0) ;                     // start sending by enableing interrupt
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C1           STS     193, R16
     34              OS_StopTimer(&TimerUSART0On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000000C   ....               LDI     R17, (TimerUSART0On) >> 8
   \   0000000E   ........           JMP     OS_StopTimer
   \   00000012                      REQUIRE _A_UCSR0B
     35          }
     36          
     37          /*************************************************************************
     38          *   (This is a timer calback)
     39          *  Timout timer USART 1
     40          *
     41          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     42          void TimoutUSART1(void) {
   \                     TimoutUSART1:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     43          
     44              UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   7D0F               ANDI    R16, 0xDF
   \   00000006   930000C9           STS     201, R16
     45              ClrBit(PORTE, 0x08) ;                              // TXE1 off
   \   0000000A   94F8               cli
   \   0000000C   9873               CBI     0x0E, 0x03
   \   0000000E   9100....           LDS     R16, (OS_Global + 1)
   \   00000012   2300               TST     R16
   \   00000014   F409               BRNE    ??TimoutUSART1_0
   \   00000016   9478               sei
     46              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \                     ??TimoutUSART1_0:
   \   00000018   ....               LDI     R16, LOW(TimerUSART1)
   \   0000001A   ....               LDI     R17, (TimerUSART1) >> 8
   \   0000001C   ........           CALL    OS_StopTimer
     47              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000020   E001               LDI     R16, 1
   \   00000022   ....               RJMP    GoToSyncUART
   \   00000024                      REQUIRE _A_UCSR1B
   \   00000024                      REQUIRE _A_PORTE
     48          }
     49          
     50          
     51          /*************************************************************************
     52          *   (This is a timer calback)
     53          *  Timer USART 1 on before TX
     54          *
     55          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     56          void TimoutUSART1On(void) {
   \                     TimoutUSART1On:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     57          
     58              UCSR1B |= __BIT_MASK( UDRIE1) ;                     // start sending by enableing interrupt
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   6200               ORI     R16, 0x20
   \   00000006   930000C9           STS     201, R16
     59              OS_StopTimer(&TimerUSART1On);                    // and stop timer
   \   0000000A   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000000C   ....               LDI     R17, (TimerUSART1On) >> 8
   \   0000000E   ........           JMP     OS_StopTimer
   \   00000012                      REQUIRE _A_UCSR1B
     60          }
     61          
     62          
     63          /*************************************************************************
     64          *   (This is a task)
     65          *  Usart0 handler
     66          *
     67          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     68          void Usart0Handler(void) {
   \                     Usart0Handler:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     69              char stat;
     70          
     71              while (1) {
     72                  stat = OS_WaitEventTimed(1,500);
     73                  if (stat) {
   \                     ??Usart0Handler_0:
   \   00000000   EF24               LDI     R18, 244
   \   00000002   E031               LDI     R19, 1
   \   00000004   E001               LDI     R16, 1
   \   00000006   ........           CALL    OS_WaitEventTimed
   \   0000000A   2300               TST     R16
   \   0000000C   F3C9               BREQ    ??Usart0Handler_0
     74                      OS_Use(&UARTSEND);
   \   0000000E   ....               LDI     R16, LOW(UARTSEND)
   \   00000010   ....               LDI     R17, (UARTSEND) >> 8
   \   00000012   ........           CALL    OS_Use
     75                      UsartCheckPackage(0) ;
   \   00000016   E000               LDI     R16, 0
   \   00000018   ....               RCALL   UsartCheckPackage
     76                      OS_Unuse(&UARTSEND);
   \   0000001A   ....               LDI     R16, LOW(UARTSEND)
   \   0000001C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000001E   ........           CALL    OS_Unuse
   \   00000022   CFEE               RJMP    ??Usart0Handler_0
     77                  }
     78              }
     79          }
     80          
     81          /*************************************************************************
     82          *   (This is a task)
     83          *  Usart1 handler
     84          *
     85          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     86          void Usart1Handler(void) {
   \                     Usart1Handler:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     87              char stat;
     88          
     89              while (1) {
     90                  stat = OS_WaitEventTimed(1,500);
     91                  if (stat) {
   \                     ??Usart1Handler_0:
   \   00000000   EF24               LDI     R18, 244
   \   00000002   E031               LDI     R19, 1
   \   00000004   E001               LDI     R16, 1
   \   00000006   ........           CALL    OS_WaitEventTimed
   \   0000000A   2300               TST     R16
   \   0000000C   F3C9               BREQ    ??Usart1Handler_0
     92                      OS_Use(&UARTSEND);
   \   0000000E   ....               LDI     R16, LOW(UARTSEND)
   \   00000010   ....               LDI     R17, (UARTSEND) >> 8
   \   00000012   ........           CALL    OS_Use
     93                      UsartCheckPackage(1) ;
   \   00000016   E001               LDI     R16, 1
   \   00000018   ....               RCALL   UsartCheckPackage
     94                      OS_Unuse(&UARTSEND);
   \   0000001A   ....               LDI     R16, LOW(UARTSEND)
   \   0000001C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000001E   ........           CALL    OS_Unuse
   \   00000022   CFEE               RJMP    ??Usart1Handler_0
     95                  }
     96              }
     97          }
     98          
     99          /*************************************************************************
    100          *
    101          *  Check the incoming packages
    102          *
    103          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    104          void UsartCheckPackage(char ch) {
   \                     UsartCheckPackage:
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000A                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000A   2E40               MOV     R4, R16
    105          
    106              unsigned short pointer;
    107              char    retval ;
    108          
    109              UART[ch].RxSendReply = false ;                              // flag for answering set to fault
   \   0000000C   E10A               LDI     R16, 26
   \   0000000E   9E40               MUL     R4, R16
   \   00000010   01D0               MOVW    R27:R26, R1:R0
   \   00000012   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000014   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   E000               LDI     R16, 0
   \   0000001A   8F01               STD     Z+25, R16
    110              UART[ch].TxFirst = 11 ;                                     // Start pos for first TX command
   \   0000001C   E00B               LDI     R16, 11
   \   0000001E   E010               LDI     R17, 0
   \   00000020   8302               STD     Z+2, R16
   \   00000022   8313               STD     Z+3, R17
    111              pointer = 7 ;
   \   00000024   E087               LDI     R24, 7
   \   00000026   E090               LDI     R25, 0
    112              do {
    113                  retval = CheckActionUart(ch, pointer);
   \                     ??UsartCheckPackage_0:
   \   00000028   019C               MOVW    R19:R18, R25:R24
   \   0000002A   2D04               MOV     R16, R4
   \   0000002C   ....               RCALL   CheckActionUart
   \   0000002E   2F30               MOV     R19, R16
    114                  pointer = pointer + UART[ch].pRxBuffer[pointer+2]
    115                            + (UART[ch].pRxBuffer[pointer+3]*256) + 4;      // Point to a command cmd hb/lb
   \   00000030   01FD               MOVW    R31:R30, R27:R26
   \   00000032   8502               LDD     R16, Z+10
   \   00000034   8513               LDD     R17, Z+11
   \   00000036   0F08               ADD     R16, R24
   \   00000038   1F19               ADC     R17, R25
   \   0000003A   01F8               MOVW    R31:R30, R17:R16
   \   0000003C   8102               LDD     R16, Z+2
   \   0000003E   8113               LDD     R17, Z+3
   \   00000040   5F0C               SUBI    R16, 252
   \   00000042   4F1F               SBCI    R17, 255
   \   00000044   0F80               ADD     R24, R16
   \   00000046   1F91               ADC     R25, R17
    116              } while (retval && (pointer < (UART[ch].RxPacklen - 4 )));
   \   00000048   2333               TST     R19
   \   0000004A   F041               BREQ    ??UsartCheckPackage_1
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8906               LDD     R16, Z+22
   \   00000050   8917               LDD     R17, Z+23
   \   00000052   5004               SUBI    R16, 4
   \   00000054   4010               SBCI    R17, 0
   \   00000056   1780               CP      R24, R16
   \   00000058   0791               CPC     R25, R17
   \   0000005A   F330               BRCS    ??UsartCheckPackage_0
   \                     ??UsartCheckPackage_1:
   \   0000005C   2D04               MOV     R16, R4
    117              if (UART[ch].RxSendReply) {                                   //send answer?
   \   0000005E   01FD               MOVW    R31:R30, R27:R26
   \   00000060   8D11               LDD     R17, Z+25
   \   00000062   2311               TST     R17
   \   00000064   F019               BREQ    ??UsartCheckPackage_2
    118                  Uart_BuildTail(ch);                                       // yes, build tail (and header) and start sending
   \   00000066   ........           CALL    Uart_BuildTail
   \   0000006A   C002               RJMP    ??UsartCheckPackage_3
    119              } else {
    120                  GoToSyncUART(ch) ;                                        // go to sync modus here if not reply
   \                     ??UsartCheckPackage_2:
   \   0000006C   ........           CALL    GoToSyncUART
    121              }
    122          }
   \                     ??UsartCheckPackage_3:
   \   00000070   9189               LD      R24, Y+
   \   00000072   9199               LD      R25, Y+
   \   00000074   91A9               LD      R26, Y+
   \   00000076   91B9               LD      R27, Y+
   \   00000078   9049               LD      R4, Y+
   \   0000007A   9508               RET
    123          
    124          
    125          /*************************************************************************
    126          *
    127          *  Check action on received data
    128          *
    129          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    130          char CheckActionUart(char ch, unsigned short pointer) {
   \                     CheckActionUart:
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   927A               ST      -Y, R7
   \   00000006   926A               ST      -Y, R6
   \   00000008   925A               ST      -Y, R5
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   939A               ST      -Y, R25
   \   00000012   938A               ST      -Y, R24
   \   00000014                      REQUIRE ?Register_R4_is_cg_reg
   \   00000014                      REQUIRE ?Register_R5_is_cg_reg
   \   00000014                      REQUIRE ?Register_R6_is_cg_reg
   \   00000014                      REQUIRE ?Register_R7_is_cg_reg
   \   00000014                      REQUIRE ?Register_R8_is_cg_reg
   \   00000014                      REQUIRE ?Register_R9_is_cg_reg
   \   00000014                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000014   2E80               MOV     R8, R16
   \   00000016   01C9               MOVW    R25:R24, R19:R18
    131          
    132              unsigned short   command;
    133              char    retval = true;
   \   00000018   2499               CLR     R9
   \   0000001A   9493               INC     R9
    134          
    135              command = UART[ch].pRxBuffer[pointer] | (UART[ch].pRxBuffer[pointer+1] << 8);
   \   0000001C   E10A               LDI     R16, 26
   \   0000001E   9E80               MUL     R8, R16
   \   00000020   0120               MOVW    R5:R4, R1:R0
   \   00000022   ....               LDI     R16, LOW(UART)
   \   00000024   0E40               ADD     R4, R16
   \   00000026   ....               LDI     R16, (UART) >> 8
   \   00000028   1E50               ADC     R5, R16
   \   0000002A   01F2               MOVW    R31:R30, R5:R4
   \   0000002C   8462               LDD     R6, Z+10
   \   0000002E   8473               LDD     R7, Z+11
   \   00000030   0E62               ADD     R6, R18
   \   00000032   1E73               ADC     R7, R19
   \   00000034   01F3               MOVW    R31:R30, R7:R6
   \   00000036   81A0               LD      R26, Z
   \   00000038   81B1               LDD     R27, Z+1
    136              switch (command) {                                  // check action
   \   0000003A   018D               MOVW    R17:R16, R27:R26
   \   0000003C   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart>_0`)
   \   0000003E   ....               LDI     R31, (`?<Jumptable for CheckActionUart>_0`) >> 16
   \   00000040   BFFB               OUT     0x3B, R31
   \   00000042   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart>_0`)
   \   00000044   ........           JMP     ?SV_SWITCH_L06
    137              case CMD_REQ_STATUS :                           // Regusest status for target
    138                  BuildStatusData(ch) ;                         // make package
   \                     ??CheckActionUart_0:
   \   00000048   2D08               MOV     R16, R8
   \   0000004A   ....               RCALL   BuildStatusData
    139                  break;
   \   0000004C   C0B1               RJMP    ??CheckActionUart_1
    140          
    141              case CMD_GET_STACKSTATUS :                        // Request stck status
    142                  BuildStackStatus(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_2:
   \   0000004E   9604               ADIW    R25:R24, 4
   \   00000050   019C               MOVW    R19:R18, R25:R24
   \   00000052   2D08               MOV     R16, R8
   \   00000054   ....               RCALL   BuildStackStatus
    143                  break ;
   \   00000056   C0AC               RJMP    ??CheckActionUart_1
    144          
    145              case CMD_EEPROM_RESET :                        // Reset EEPROM??
    146                  GetResetEEPROM(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_3:
   \   00000058   ........           CALL    EEPROMReset
    147                  break ;
   \   0000005C   C0A9               RJMP    ??CheckActionUart_1
    148          
    149              case CMD_GOTO_BOOTLOADER :                        // Goto bootlaoder??
    150                  GetGotoBootloader(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_4:
   \   0000005E   9604               ADIW    R25:R24, 4
   \   00000060   019C               MOVW    R19:R18, R25:R24
   \   00000062   2D08               MOV     R16, R8
   \   00000064   ....               RCALL   GetGotoBootloader
    151                  break ;
   \   00000066   C0A4               RJMP    ??CheckActionUart_1
    152          
    153              case CMD_SND_EEPROM_DATA :                              // Receive EEPROM data
    154                  GetEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_5:
   \   00000068   9604               ADIW    R25:R24, 4
   \   0000006A   019C               MOVW    R19:R18, R25:R24
   \   0000006C   2D08               MOV     R16, R8
   \   0000006E   ....               RCALL   GetEEPROMData
    155                  break ;
   \   00000070   C09F               RJMP    ??CheckActionUart_1
    156          
    157              case CMD_REQ_EEPROM_DATA :                              // Request to send EEPROM data
    158                  BuildEEPROMData(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_6:
   \   00000072   9604               ADIW    R25:R24, 4
   \   00000074   019C               MOVW    R19:R18, R25:R24
   \   00000076   2D08               MOV     R16, R8
   \   00000078   ....               RCALL   BuildEEPROMData
    159                  break ;
   \   0000007A   C09A               RJMP    ??CheckActionUart_1
    160          
    161              case CMD_REQ_INT_DATA :                              // Request external data
    162                  BuildADInt(ch, pointer+4) ;                     // receive package
   \                     ??CheckActionUart_7:
   \   0000007C   9604               ADIW    R25:R24, 4
   \   0000007E   019C               MOVW    R19:R18, R25:R24
   \   00000080   2D08               MOV     R16, R8
   \   00000082   ....               RCALL   BuildADInt
    163                  break ;
   \   00000084   C095               RJMP    ??CheckActionUart_1
    164          
    165              case CMD_SND_RS4_SETUP :                              // Receive sertup of AN-RS485
    166                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_8:
   \   00000086   9100....           LDS     R16, UnitID
   \   0000008A   2300               TST     R16
   \   0000008C   F009               BREQ    $+2+2
   \   0000008E   C090               RJMP    ??CheckActionUart_1
    167                      GetRS4Setup(ch, pointer+4) ;                     // receive package
   \   00000090   9604               ADIW    R25:R24, 4
   \   00000092   019C               MOVW    R19:R18, R25:R24
   \   00000094   2D08               MOV     R16, R8
   \   00000096   ....               RCALL   GetRS4Setup
   \   00000098   C08B               RJMP    ??CheckActionUart_1
    168                  }
    169                  break ;
    170          
    171              case CMD_REQ_RS4_SETUP :                              // Request for sertup of AN-RS485
    172                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_9:
   \   0000009A   9100....           LDS     R16, UnitID
   \   0000009E   2300               TST     R16
   \   000000A0   F009               BREQ    $+2+2
   \   000000A2   C086               RJMP    ??CheckActionUart_1
    173                      BuildRS4Setup(ch, pointer+4) ;                     // receive package
   \   000000A4   9604               ADIW    R25:R24, 4
   \   000000A6   019C               MOVW    R19:R18, R25:R24
   \   000000A8   2D08               MOV     R16, R8
   \   000000AA   ....               RCALL   BuildRS4Setup
   \   000000AC   C081               RJMP    ??CheckActionUart_1
    174                  }
    175                  break ;
    176          
    177              case CMD_SND_RS4_ADBUF :                              // Request external AD data
    178                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_10:
   \   000000AE   9100....           LDS     R16, UnitID
   \   000000B2   2300               TST     R16
   \   000000B4   F009               BREQ    $+2+2
   \   000000B6   C07C               RJMP    ??CheckActionUart_1
    179                      GetADData(ch, pointer+4) ;                     // receive package
   \   000000B8   9604               ADIW    R25:R24, 4
   \   000000BA   019C               MOVW    R19:R18, R25:R24
   \   000000BC   2D08               MOV     R16, R8
   \   000000BE   ....               RCALL   GetADData
   \   000000C0   C077               RJMP    ??CheckActionUart_1
    180                  }
    181                  break;
    182          
    183              case CMD_REQ_RS4_DATA :                              // Request external AD eeprom data
    184                  if (UnitID == AN_ZB485) {
   \                     ??CheckActionUart_11:
   \   000000C2   9100....           LDS     R16, UnitID
   \   000000C6   2300               TST     R16
   \   000000C8   F009               BREQ    $+2+2
   \   000000CA   C072               RJMP    ??CheckActionUart_1
    185                      switch (UART[ch].pRxBuffer[pointer+4]) {
   \   000000CC   01F3               MOVW    R31:R30, R7:R6
   \   000000CE   8104               LDD     R16, Z+4
   \   000000D0   2300               TST     R16
   \   000000D2   F019               BREQ    ??CheckActionUart_12
   \   000000D4   950A               DEC     R16
   \   000000D6   F181               BREQ    ??CheckActionUart_13
   \   000000D8   C06B               RJMP    ??CheckActionUart_1
    186                      case 0:                                         // Measure data
    187                          BuildMData485(ch, pointer+5) ;              // receive package
   \                     ??CheckActionUart_12:
   \   000000DA   013C               MOVW    R7:R6, R25:R24
   \   000000DC   E005               LDI     R16, 5
   \   000000DE   0E60               ADD     R6, R16
   \   000000E0   E000               LDI     R16, 0
   \   000000E2   1E70               ADC     R7, R16
   \   000000E4   0193               MOVW    R19:R18, R7:R6
   \   000000E6   2D08               MOV     R16, R8
   \   000000E8   ....               RCALL   BuildMData485
    188                          if (TData.RS4.FromTargetBuffer[0][0] == true) {     // send eepromdata ch 0?
   \   000000EA   ....               LDI     R26, LOW((TData + 1428))
   \   000000EC   ....               LDI     R27, HIGH((TData + 1428))
   \   000000EE   910C               LD      R16, X
   \   000000F0   3001               CPI     R16, 1
   \   000000F2   F429               BRNE    ??CheckActionUart_14
    189                            BuildADEpromdata(ch, 0);
   \   000000F4   E010               LDI     R17, 0
   \   000000F6   2D08               MOV     R16, R8
   \   000000F8   ....               RCALL   BuildADEpromdata
    190                            TData.RS4.FromTargetBuffer[0][0] = false ;  // Marked as sent
   \   000000FA   E000               LDI     R16, 0
   \   000000FC   930C               ST      X, R16
    191                          }
    192                          if (TData.RS4.FromTargetBuffer[1][0] == true) {     // send eepromdata ch 1?
   \                     ??CheckActionUart_14:
   \   000000FE   01FD               MOVW    R31:R30, R27:R26
   \   00000100   A902               LDD     R16, Z+50
   \   00000102   3001               CPI     R16, 1
   \   00000104   F429               BRNE    ??CheckActionUart_15
    193                            BuildADEpromdata(ch, 1);                  // channel 1
   \   00000106   0184               MOVW    R17:R16, R9:R8
   \   00000108   ....               RCALL   BuildADEpromdata
    194                            TData.RS4.FromTargetBuffer[1][0] = false ;  // Marked as sent
   \   0000010A   01FD               MOVW    R31:R30, R27:R26
   \   0000010C   E000               LDI     R16, 0
   \   0000010E   AB02               STD     Z+50, R16
    195                          }
    196                          if ((TData.RS4.WHDataAvailable >> UART[ch].pRxBuffer[pointer+5]) & 0x01) {
   \                     ??CheckActionUart_15:
   \   00000110   9100....           LDS     R16, (TData + 1267)
   \   00000114   E010               LDI     R17, 0
   \   00000116   01F2               MOVW    R31:R30, R5:R4
   \   00000118   8522               LDD     R18, Z+10
   \   0000011A   8533               LDD     R19, Z+11
   \   0000011C   0F28               ADD     R18, R24
   \   0000011E   1F39               ADC     R19, R25
   \   00000120   01F9               MOVW    R31:R30, R19:R18
   \   00000122   8145               LDD     R20, Z+5
   \   00000124   ........           CALL    ?SS_SHR_L02
   \   00000128   7001               ANDI    R16, 0x01
   \   0000012A   F409               BRNE    $+2+2
   \   0000012C   C041               RJMP    ??CheckActionUart_1
    197                              BuildWHdata(ch, pointer + 5);
   \   0000012E   0193               MOVW    R19:R18, R7:R6
   \   00000130   2D08               MOV     R16, R8
   \   00000132   ........           CALL    BuildWHdata
   \   00000136   C03C               RJMP    ??CheckActionUart_1
    198                              //TData.RS4.WHDataAvailable &= ~(0x01 << UART[ch].pRxBuffer[pointer+5]);
    199                          }
    200                          break;
    201                      case 1:                                         // Raw and cal data
    202                          BuildRData485(ch, pointer+5) ;                     // receive package
   \                     ??CheckActionUart_13:
   \   00000138   9605               ADIW    R25:R24, 5
   \   0000013A   019C               MOVW    R19:R18, R25:R24
   \   0000013C   2D08               MOV     R16, R8
   \   0000013E   ........           CALL    BuildRData485
    203                          break;
   \   00000142   C036               RJMP    ??CheckActionUart_1
    204                      }
    205                  }
    206                  break;
    207          
    208              case CMD_SND_ANA_SETUP :                              // Receive sertup of AN-RSANA
    209                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_16:
   \   00000144   9100....           LDS     R16, UnitID
   \   00000148   3001               CPI     R16, 1
   \   0000014A   F591               BRNE    ??CheckActionUart_1
    210                      GetANASetup(ch, pointer+4) ;                     // receive package
   \   0000014C   9604               ADIW    R25:R24, 4
   \   0000014E   019C               MOVW    R19:R18, R25:R24
   \   00000150   2D08               MOV     R16, R8
   \   00000152   ........           CALL    GetANASetup
   \   00000156   C02C               RJMP    ??CheckActionUart_1
    211                  }
    212                  break ;
    213          
    214              case CMD_REQ_ANA_SETUP :                              // Request for sertup of AN-RSANA
    215                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_17:
   \   00000158   9100....           LDS     R16, UnitID
   \   0000015C   3001               CPI     R16, 1
   \   0000015E   F541               BRNE    ??CheckActionUart_1
    216                      BuildANASetup(ch, pointer+4) ;                     // receive package
   \   00000160   9604               ADIW    R25:R24, 4
   \   00000162   019C               MOVW    R19:R18, R25:R24
   \   00000164   2D08               MOV     R16, R8
   \   00000166   ........           CALL    BuildANASetup
   \   0000016A   C022               RJMP    ??CheckActionUart_1
    217                  }
    218                  break ;
    219          
    220              case CMD_SND_ANA_FILTER :                              // Receive filter of AN-RSANA
    221                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_18:
   \   0000016C   9100....           LDS     R16, UnitID
   \   00000170   3001               CPI     R16, 1
   \   00000172   F4F1               BRNE    ??CheckActionUart_1
    222                      GetANAFilter(ch, pointer+4) ;                     // receive package
   \   00000174   9604               ADIW    R25:R24, 4
   \   00000176   019C               MOVW    R19:R18, R25:R24
   \   00000178   2D08               MOV     R16, R8
   \   0000017A   ........           CALL    GetANAFilter
   \   0000017E   C018               RJMP    ??CheckActionUart_1
    223                  }
    224                  break ;
    225          
    226              case CMD_REQ_ANA_FILTER :                              // Request filter of AN-RSANA
    227                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_19:
   \   00000180   9100....           LDS     R16, UnitID
   \   00000184   3001               CPI     R16, 1
   \   00000186   F4A1               BRNE    ??CheckActionUart_1
    228                      BuildANAFilter(ch, pointer+4) ;                     // receive package
   \   00000188   9604               ADIW    R25:R24, 4
   \   0000018A   019C               MOVW    R19:R18, R25:R24
   \   0000018C   2D08               MOV     R16, R8
   \   0000018E   ........           CALL    BuildANAFilter
   \   00000192   C00E               RJMP    ??CheckActionUart_1
    229                  }
    230                  break ;
    231          
    232              case CMD_REQ_ANA_DATA :                              // Request ANA data(4-20ma)
    233                  if (UnitID == AN_ZBANA) {
   \                     ??CheckActionUart_20:
   \   00000194   9100....           LDS     R16, UnitID
   \   00000198   3001               CPI     R16, 1
   \   0000019A   F451               BRNE    ??CheckActionUart_1
    234                      BuildMDataANA(ch, pointer+4) ;                     // receive
   \   0000019C   9604               ADIW    R25:R24, 4
   \   0000019E   019C               MOVW    R19:R18, R25:R24
   \   000001A0   2D08               MOV     R16, R8
   \   000001A2   ........           CALL    BuildMDataANA
   \   000001A6   C004               RJMP    ??CheckActionUart_1
    235                  }
    236                  break ;
    237          
    238              default:
    239                  if (command < MAX_ECMD) {                   // handle end commands
   \                     ??CheckActionUart_21:
   \   000001A8   36A4               CPI     R26, 100
   \   000001AA   40B0               SBCI    R27, 0
   \   000001AC   F408               BRCC    ??CheckActionUart_1
    240                      retval = false ;
   \   000001AE   2499               CLR     R9
    241                  }
    242                  break;
    243          
    244              }
    245              return retval;
   \                     ??CheckActionUart_1:
   \   000001B0   2D09               MOV     R16, R9
   \   000001B2   9189               LD      R24, Y+
   \   000001B4   9199               LD      R25, Y+
   \   000001B6   91A9               LD      R26, Y+
   \   000001B8   91B9               LD      R27, Y+
   \   000001BA   9049               LD      R4, Y+
   \   000001BC   9059               LD      R5, Y+
   \   000001BE   9069               LD      R6, Y+
   \   000001C0   9079               LD      R7, Y+
   \   000001C2   9089               LD      R8, Y+
   \   000001C4   9099               LD      R9, Y+
   \   000001C6   9508               RET
    246          }
    247          
    248          /*************************************************************************
    249          *
    250          * Build send packet header
    251          *
    252          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    253          void Uart_BuildHeader(char ch) {
   \                     Uart_BuildHeader:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    254          
    255              UART[ch].RxFirst = 0;                                // Reset pointers
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01D0               MOVW    R27:R26, R1:R0
   \   0000000A   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000000C   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   0000000E   01FD               MOVW    R31:R30, R27:R26
   \   00000010   E000               LDI     R16, 0
   \   00000012   8704               STD     Z+12, R16
   \   00000014   8705               STD     Z+13, R16
    256              UART[ch].RxLast  = 0;
   \   00000016   8706               STD     Z+14, R16
   \   00000018   8707               STD     Z+15, R16
    257              UART[ch].TxLast  = 0;
   \   0000001A   8304               STD     Z+4, R16
   \   0000001C   8305               STD     Z+5, R16
    258          
    259              UART[ch].pTxBuffer[0] = ANPRO10_SYN ;                        /* Sync */
   \   0000001E   E106               LDI     R16, 22
   \   00000020   91ED               LD      R30, X+
   \   00000022   91FC               LD      R31, X
   \   00000024   9711               SBIW    R27:R26, 1
   \   00000026   8300               ST      Z, R16
    260              UART[ch].pTxBuffer[1] = ANPRO10_SYN ;                        /* Sync */
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9711               SBIW    R27:R26, 1
   \   0000002E   8301               STD     Z+1, R16
    261              UART[ch].pTxBuffer[2] = ANPRO10_SYN ;                        /* Sync */
   \   00000030   91ED               LD      R30, X+
   \   00000032   91FC               LD      R31, X
   \   00000034   9711               SBIW    R27:R26, 1
   \   00000036   8302               STD     Z+2, R16
    262              UART[ch].pTxBuffer[3] = ANPRO10_SOH ;                        /* Start of header */
   \   00000038   E001               LDI     R16, 1
   \   0000003A   91ED               LD      R30, X+
   \   0000003C   91FC               LD      R31, X
   \   0000003E   9619               ADIW    R27:R26, 9
   \   00000040   8303               STD     Z+3, R16
    263              UART[ch].pTxBuffer[4] = UART[ch].pRxBuffer[2] ;      /* RXID */
   \   00000042   91ED               LD      R30, X+
   \   00000044   91FC               LD      R31, X
   \   00000046   971B               SBIW    R27:R26, 11
   \   00000048   8102               LDD     R16, Z+2
   \   0000004A   91ED               LD      R30, X+
   \   0000004C   91FC               LD      R31, X
   \   0000004E   9619               ADIW    R27:R26, 9
   \   00000050   8304               STD     Z+4, R16
    264              UART[ch].pTxBuffer[5] = UART[ch].pRxBuffer[3] ;      /* Rx address */
   \   00000052   91ED               LD      R30, X+
   \   00000054   91FC               LD      R31, X
   \   00000056   971B               SBIW    R27:R26, 11
   \   00000058   8103               LDD     R16, Z+3
   \   0000005A   91ED               LD      R30, X+
   \   0000005C   91FC               LD      R31, X
   \   0000005E   9711               SBIW    R27:R26, 1
   \   00000060   8305               STD     Z+5, R16
    265              UART[ch].pTxBuffer[6] = 0x10 + UnitID ;              /* Unit ID */
   \   00000062   9100....           LDS     R16, UnitID
   \   00000066   5F00               SUBI    R16, 240
   \   00000068   91ED               LD      R30, X+
   \   0000006A   91FC               LD      R31, X
   \   0000006C   9711               SBIW    R27:R26, 1
   \   0000006E   8306               STD     Z+6, R16
    266              UART[ch].pTxBuffer[7] = MyAddress();                 /* Tx address */
   \   00000070   ........           CALL    MyAddress
   \   00000074   91ED               LD      R30, X+
   \   00000076   91FC               LD      R31, X
   \   00000078   9711               SBIW    R27:R26, 1
   \   0000007A   8307               STD     Z+7, R16
    267              UART[ch].pTxBuffer[8] = 0 ;                          /* packlen HB, don't know yet */
   \   0000007C   91ED               LD      R30, X+
   \   0000007E   91FC               LD      R31, X
   \   00000080   9711               SBIW    R27:R26, 1
   \   00000082   E000               LDI     R16, 0
   \   00000084   8700               STD     Z+8, R16
    268              UART[ch].pTxBuffer[9] = 0 ;                          /* packlen LB, don't know yet */
   \   00000086   91ED               LD      R30, X+
   \   00000088   91FC               LD      R31, X
   \   0000008A   9711               SBIW    R27:R26, 1
   \   0000008C   8701               STD     Z+9, R16
    269              UART[ch].pTxBuffer[10] = 0 ;                         /* Header checksum, don't know yet */
   \   0000008E   91ED               LD      R30, X+
   \   00000090   91FC               LD      R31, X
   \   00000092   8702               STD     Z+10, R16
    270          }
   \   00000094   91A9               LD      R26, Y+
   \   00000096   91B9               LD      R27, Y+
   \   00000098   9508               RET
    271          
    272          /*************************************************************************
    273          *
    274          * Build  packet tail
    275          *
    276          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    277          void Uart_BuildTail(char ch) {
   \                     Uart_BuildTail:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F80               MOV     R24, R16
    278          
    279              Uart_BuildHeader(ch);                                    // fist build the header
   \   00000008   ....               RCALL   Uart_BuildHeader
    280          
    281              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK & 0xff ;  // End command lb
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F80               MUL     R24, R16
   \   0000000E   01D0               MOVW    R27:R26, R1:R0
   \   00000010   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000012   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000014   910D               LD      R16, X+
   \   00000016   911C               LD      R17, X
   \   00000018   9711               SBIW    R27:R26, 1
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8122               LDD     R18, Z+2
   \   0000001E   8133               LDD     R19, Z+3
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   0FE2               ADD     R30, R18
   \   00000024   1FF3               ADC     R31, R19
   \   00000026   E000               LDI     R16, 0
   \   00000028   8300               ST      Z, R16
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   8113               LDD     R17, Z+3
   \   00000030   5F0F               SUBI    R16, 255
   \   00000032   4F1F               SBCI    R17, 255
   \   00000034   8302               STD     Z+2, R16
   \   00000036   8313               STD     Z+3, R17
    282              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ECMD_NMDWOACK >> 8 ;    // End command hb
   \   00000038   8100               LD      R16, Z
   \   0000003A   8111               LDD     R17, Z+1
   \   0000003C   8122               LDD     R18, Z+2
   \   0000003E   8133               LDD     R19, Z+3
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   0FE2               ADD     R30, R18
   \   00000044   1FF3               ADC     R31, R19
   \   00000046   E000               LDI     R16, 0
   \   00000048   8300               ST      Z, R16
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    283              UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0x00 ;                  // End data
   \   00000058   8100               LD      R16, Z
   \   0000005A   8111               LDD     R17, Z+1
   \   0000005C   8122               LDD     R18, Z+2
   \   0000005E   8133               LDD     R19, Z+3
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   0FE2               ADD     R30, R18
   \   00000064   1FF3               ADC     R31, R19
   \   00000066   E000               LDI     R16, 0
   \   00000068   8300               ST      Z, R16
   \   0000006A   01FD               MOVW    R31:R30, R27:R26
   \   0000006C   8102               LDD     R16, Z+2
   \   0000006E   8113               LDD     R17, Z+3
   \   00000070   5F0F               SUBI    R16, 255
   \   00000072   4F1F               SBCI    R17, 255
   \   00000074   8302               STD     Z+2, R16
   \   00000076   8313               STD     Z+3, R17
    284          
    285              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].TxSeqCnt++ ;   // Sequence counter
   \   00000078   8521               LDD     R18, Z+9
   \   0000007A   2F02               MOV     R16, R18
   \   0000007C   9503               INC     R16
   \   0000007E   8701               STD     Z+9, R16
   \   00000080   8100               LD      R16, Z
   \   00000082   8111               LDD     R17, Z+1
   \   00000084   8142               LDD     R20, Z+2
   \   00000086   8153               LDD     R21, Z+3
   \   00000088   01F8               MOVW    R31:R30, R17:R16
   \   0000008A   0FE4               ADD     R30, R20
   \   0000008C   1FF5               ADC     R31, R21
   \   0000008E   8320               ST      Z, R18
   \   00000090   01FD               MOVW    R31:R30, R27:R26
   \   00000092   8102               LDD     R16, Z+2
   \   00000094   8113               LDD     R17, Z+3
   \   00000096   5F0F               SUBI    R16, 255
   \   00000098   4F1F               SBCI    R17, 255
   \   0000009A   8302               STD     Z+2, R16
   \   0000009C   8313               STD     Z+3, R17
    286          
    287              UART[ch].pTxBuffer[8] = UART[ch].TxFirst -2;                    // correct length because stx's
   \   0000009E   5002               SUBI    R16, 2
   \   000000A0   91ED               LD      R30, X+
   \   000000A2   91FC               LD      R31, X
   \   000000A4   9711               SBIW    R27:R26, 1
   \   000000A6   8700               STD     Z+8, R16
    288              UART[ch].pTxBuffer[9] = (UART[ch].TxFirst-2) >> 8 ;             // packet len high
   \   000000A8   01FD               MOVW    R31:R30, R27:R26
   \   000000AA   8102               LDD     R16, Z+2
   \   000000AC   8113               LDD     R17, Z+3
   \   000000AE   5002               SUBI    R16, 2
   \   000000B0   4010               SBCI    R17, 0
   \   000000B2   91ED               LD      R30, X+
   \   000000B4   91FC               LD      R31, X
   \   000000B6   9711               SBIW    R27:R26, 1
   \   000000B8   8711               STD     Z+9, R17
    289          
    290              UART[ch].pTxBuffer[10] = CalcDSTxChecksum(ch, 10) ;         // Get header checksum
   \   000000BA   E02A               LDI     R18, 10
   \   000000BC   E030               LDI     R19, 0
   \   000000BE   2F08               MOV     R16, R24
   \   000000C0   ....               RCALL   CalcDSTxChecksum
   \   000000C2   91ED               LD      R30, X+
   \   000000C4   91FC               LD      R31, X
   \   000000C6   9711               SBIW    R27:R26, 1
   \   000000C8   8702               STD     Z+10, R16
    291          
    292              UART[ch].pTxBuffer[UART[ch].TxFirst] = CalcDSTxChecksum(ch, UART[ch].TxFirst) ; // Get checksum
   \   000000CA   01FD               MOVW    R31:R30, R27:R26
   \   000000CC   8122               LDD     R18, Z+2
   \   000000CE   8133               LDD     R19, Z+3
   \   000000D0   2F08               MOV     R16, R24
   \   000000D2   ....               RCALL   CalcDSTxChecksum
   \   000000D4   2F20               MOV     R18, R16
   \   000000D6   910D               LD      R16, X+
   \   000000D8   911C               LD      R17, X
   \   000000DA   9711               SBIW    R27:R26, 1
   \   000000DC   01FD               MOVW    R31:R30, R27:R26
   \   000000DE   8142               LDD     R20, Z+2
   \   000000E0   8153               LDD     R21, Z+3
   \   000000E2   01F8               MOVW    R31:R30, R17:R16
   \   000000E4   0FE4               ADD     R30, R20
   \   000000E6   1FF5               ADC     R31, R21
   \   000000E8   8320               ST      Z, R18
    293              UART[ch].TxFirst++ ;                                        // OBS!! must be inc here due to ANSI standard !!!!
   \   000000EA   01FD               MOVW    R31:R30, R27:R26
   \   000000EC   8102               LDD     R16, Z+2
   \   000000EE   8113               LDD     R17, Z+3
   \   000000F0   5F0F               SUBI    R16, 255
   \   000000F2   4F1F               SBCI    R17, 255
   \   000000F4   8302               STD     Z+2, R16
   \   000000F6   8313               STD     Z+3, R17
    294          
    295              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ANPRO10_EOT ;            // End of transmission
   \   000000F8   E024               LDI     R18, 4
   \   000000FA   8100               LD      R16, Z
   \   000000FC   8111               LDD     R17, Z+1
   \   000000FE   8142               LDD     R20, Z+2
   \   00000100   8153               LDD     R21, Z+3
   \   00000102   01F8               MOVW    R31:R30, R17:R16
   \   00000104   0FE4               ADD     R30, R20
   \   00000106   1FF5               ADC     R31, R21
   \   00000108   8320               ST      Z, R18
   \   0000010A   01FD               MOVW    R31:R30, R27:R26
   \   0000010C   8102               LDD     R16, Z+2
   \   0000010E   8113               LDD     R17, Z+3
   \   00000110   5F0F               SUBI    R16, 255
   \   00000112   4F1F               SBCI    R17, 255
   \   00000114   8302               STD     Z+2, R16
   \   00000116   8313               STD     Z+3, R17
    296              UART[ch].TxCount = UART[ch].TxFirst;                      //bytes to send
   \   00000118   8306               STD     Z+6, R16
   \   0000011A   8317               STD     Z+7, R17
    297              UART[ch].TxLast = 0;                                     // reset cunter
   \   0000011C   E000               LDI     R16, 0
   \   0000011E   8304               STD     Z+4, R16
   \   00000120   8305               STD     Z+5, R16
    298              if (ch == 0) {                                           // Turn on TXE for channel
   \   00000122   2388               TST     R24
   \   00000124   F471               BRNE    ??Uart_BuildTail_0
    299                  OS_RetriggerTimer(&TimerUSART0);                     // and start timeout TX timer
   \   00000126   ....               LDI     R16, LOW(TimerUSART0)
   \   00000128   ....               LDI     R17, (TimerUSART0) >> 8
   \   0000012A   ........           CALL    OS_RetriggerTimer
    300                  SetBit(PORTE, 0x04) ;                                // TXE0 on
   \   0000012E   94F8               cli
   \   00000130   9A72               SBI     0x0E, 0x02
   \   00000132   9100....           LDS     R16, (OS_Global + 1)
   \   00000136   2300               TST     R16
   \   00000138   F409               BRNE    ??Uart_BuildTail_1
   \   0000013A   9478               sei
    301                  OS_RetriggerTimer(&TimerUSART0On);                   // and start timer for on before TX
   \                     ??Uart_BuildTail_1:
   \   0000013C   ....               LDI     R16, LOW(TimerUSART0On)
   \   0000013E   ....               LDI     R17, (TimerUSART0On) >> 8
   \   00000140   C00F               RJMP    ??Uart_BuildTail_2
    302              } else if (ch ==1) {
   \                     ??Uart_BuildTail_0:
   \   00000142   3081               CPI     R24, 1
   \   00000144   F479               BRNE    ??Uart_BuildTail_3
    303                  OS_RetriggerTimer(&TimerUSART1);                     // and start timeout TX timer
   \   00000146   ....               LDI     R16, LOW(TimerUSART1)
   \   00000148   ....               LDI     R17, (TimerUSART1) >> 8
   \   0000014A   ........           CALL    OS_RetriggerTimer
    304                  SetBit(PORTE, 0x08) ;                                // TXE1 on
   \   0000014E   94F8               cli
   \   00000150   9A73               SBI     0x0E, 0x03
   \   00000152   9100....           LDS     R16, (OS_Global + 1)
   \   00000156   2300               TST     R16
   \   00000158   F409               BRNE    ??Uart_BuildTail_4
   \   0000015A   9478               sei
    305                  OS_RetriggerTimer(&TimerUSART1On);                   // and start timer for on before TX
   \                     ??Uart_BuildTail_4:
   \   0000015C   ....               LDI     R16, LOW(TimerUSART1On)
   \   0000015E   ....               LDI     R17, (TimerUSART1On) >> 8
   \                     ??Uart_BuildTail_2:
   \   00000160   ........           CALL    OS_RetriggerTimer
    306              }
    307          }
   \                     ??Uart_BuildTail_3:
   \   00000164   9189               LD      R24, Y+
   \   00000166   91A9               LD      R26, Y+
   \   00000168   91B9               LD      R27, Y+
   \   0000016A   9508               RET
   \   0000016C                      REQUIRE _A_PORTE
    308          
    309          /*************************************************************************
    310          *
    311          * Build datablock for card status
    312          *
    313          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    314          void BuildStatusData(char ch){
   \                     BuildStatusData:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    315          
    316              short ntna ;
    317              UART[ch].RxSendReply = true ;                               // flag for answering
   \   0000000C   E11A               LDI     R17, 26
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   01D0               MOVW    R27:R26, R1:R0
   \   00000012   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000014   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000016   E011               LDI     R17, 1
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8F11               STD     Z+25, R17
    318          
    319              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS & 0xff;
   \   0000001C   EE19               LDI     R17, 233
   \   0000001E   8120               LD      R18, Z
   \   00000020   8131               LDD     R19, Z+1
   \   00000022   8142               LDD     R20, Z+2
   \   00000024   8153               LDD     R21, Z+3
   \   00000026   01F9               MOVW    R31:R30, R19:R18
   \   00000028   0FE4               ADD     R30, R20
   \   0000002A   1FF5               ADC     R31, R21
   \   0000002C   8310               ST      Z, R17
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   8122               LDD     R18, Z+2
   \   00000032   8133               LDD     R19, Z+3
   \   00000034   5F2F               SUBI    R18, 255
   \   00000036   4F3F               SBCI    R19, 255
   \   00000038   8322               STD     Z+2, R18
   \   0000003A   8333               STD     Z+3, R19
    320              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STATUS >> 8;
   \   0000003C   E013               LDI     R17, 3
   \   0000003E   8120               LD      R18, Z
   \   00000040   8131               LDD     R19, Z+1
   \   00000042   8142               LDD     R20, Z+2
   \   00000044   8153               LDD     R21, Z+3
   \   00000046   01F9               MOVW    R31:R30, R19:R18
   \   00000048   0FE4               ADD     R30, R20
   \   0000004A   1FF5               ADC     R31, R21
   \   0000004C   8310               ST      Z, R17
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   8122               LDD     R18, Z+2
   \   00000052   8133               LDD     R19, Z+3
   \   00000054   5F2F               SUBI    R18, 255
   \   00000056   4F3F               SBCI    R19, 255
   \   00000058   8322               STD     Z+2, R18
   \   0000005A   8333               STD     Z+3, R19
    321              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000005C   0129               MOVW    R5:R4, R19:R18
    322              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000005E   5F2E               SUBI    R18, 254
   \   00000060   4F3F               SBCI    R19, 255
   \   00000062   8322               STD     Z+2, R18
   \   00000064   8333               STD     Z+3, R19
    323              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ch ;               // channel
   \   00000066   8120               LD      R18, Z
   \   00000068   8131               LDD     R19, Z+1
   \   0000006A   8142               LDD     R20, Z+2
   \   0000006C   8153               LDD     R21, Z+3
   \   0000006E   01F9               MOVW    R31:R30, R19:R18
   \   00000070   0FE4               ADD     R30, R20
   \   00000072   1FF5               ADC     R31, R21
   \   00000074   8300               ST      Z, R16
   \   00000076   01FD               MOVW    R31:R30, R27:R26
   \   00000078   8102               LDD     R16, Z+2
   \   0000007A   8113               LDD     R17, Z+3
   \   0000007C   5F0F               SUBI    R16, 255
   \   0000007E   4F1F               SBCI    R17, 255
   \   00000080   8302               STD     Z+2, R16
   \   00000082   8313               STD     Z+3, R17
    324              UART[ch].pTxBuffer[UART[ch].TxFirst++] = DEVICE_IO + UnitID ;   // Product ID
   \   00000084   9120....           LDS     R18, UnitID
   \   00000088   5F20               SUBI    R18, 240
   \   0000008A   8100               LD      R16, Z
   \   0000008C   8111               LDD     R17, Z+1
   \   0000008E   8142               LDD     R20, Z+2
   \   00000090   8153               LDD     R21, Z+3
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   0FE4               ADD     R30, R20
   \   00000096   1FF5               ADC     R31, R21
   \   00000098   8320               ST      Z, R18
   \   0000009A   01FD               MOVW    R31:R30, R27:R26
   \   0000009C   8102               LDD     R16, Z+2
   \   0000009E   8113               LDD     R17, Z+3
   \   000000A0   5F0F               SUBI    R16, 255
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   8302               STD     Z+2, R16
   \   000000A6   8313               STD     Z+3, R17
    325              UART[ch].pTxBuffer[UART[ch].TxFirst++] = MyAddress();           // unit adddress
   \   000000A8   01C8               MOVW    R25:R24, R17:R16
   \   000000AA   5F0F               SUBI    R16, 255
   \   000000AC   4F1F               SBCI    R17, 255
   \   000000AE   8302               STD     Z+2, R16
   \   000000B0   8313               STD     Z+3, R17
   \   000000B2   ........           CALL    MyAddress
   \   000000B6   91ED               LD      R30, X+
   \   000000B8   91FC               LD      R31, X
   \   000000BA   9711               SBIW    R27:R26, 1
   \   000000BC   0FE8               ADD     R30, R24
   \   000000BE   1FF9               ADC     R31, R25
   \   000000C0   8300               ST      Z, R16
    326              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROG_VERSION ;       // software version */
   \   000000C2   E228               LDI     R18, 40
   \   000000C4   910D               LD      R16, X+
   \   000000C6   911C               LD      R17, X
   \   000000C8   9711               SBIW    R27:R26, 1
   \   000000CA   01FD               MOVW    R31:R30, R27:R26
   \   000000CC   8142               LDD     R20, Z+2
   \   000000CE   8153               LDD     R21, Z+3
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   0FE4               ADD     R30, R20
   \   000000D4   1FF5               ADC     R31, R21
   \   000000D6   8320               ST      Z, R18
   \   000000D8   01FD               MOVW    R31:R30, R27:R26
   \   000000DA   8102               LDD     R16, Z+2
   \   000000DC   8113               LDD     R17, Z+3
   \   000000DE   5F0F               SUBI    R16, 255
   \   000000E0   4F1F               SBCI    R17, 255
   \   000000E2   8302               STD     Z+2, R16
   \   000000E4   8313               STD     Z+3, R17
    327              UART[ch].pTxBuffer[UART[ch].TxFirst++] = COMP_VERSION;        // cpmpability version
   \   000000E6   E021               LDI     R18, 1
   \   000000E8   8100               LD      R16, Z
   \   000000EA   8111               LDD     R17, Z+1
   \   000000EC   8142               LDD     R20, Z+2
   \   000000EE   8153               LDD     R21, Z+3
   \   000000F0   01F8               MOVW    R31:R30, R17:R16
   \   000000F2   0FE4               ADD     R30, R20
   \   000000F4   1FF5               ADC     R31, R21
   \   000000F6   8320               ST      Z, R18
   \   000000F8   01FD               MOVW    R31:R30, R27:R26
   \   000000FA   8102               LDD     R16, Z+2
   \   000000FC   8113               LDD     R17, Z+3
   \   000000FE   5F0F               SUBI    R16, 255
   \   00000100   4F1F               SBCI    R17, 255
   \   00000102   8302               STD     Z+2, R16
   \   00000104   8313               STD     Z+3, R17
    328              UART[ch].pTxBuffer[UART[ch].TxFirst++] = STORE_VERSION;        // cpmpability version
   \   00000106   E022               LDI     R18, 2
   \   00000108   8100               LD      R16, Z
   \   0000010A   8111               LDD     R17, Z+1
   \   0000010C   8142               LDD     R20, Z+2
   \   0000010E   8153               LDD     R21, Z+3
   \   00000110   01F8               MOVW    R31:R30, R17:R16
   \   00000112   0FE4               ADD     R30, R20
   \   00000114   1FF5               ADC     R31, R21
   \   00000116   8320               ST      Z, R18
   \   00000118   01FD               MOVW    R31:R30, R27:R26
   \   0000011A   8102               LDD     R16, Z+2
   \   0000011C   8113               LDD     R17, Z+3
   \   0000011E   5F0F               SUBI    R16, 255
   \   00000120   4F1F               SBCI    R17, 255
   \   00000122   8302               STD     Z+2, R16
   \   00000124   8313               STD     Z+3, R17
    329              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RXSIZE_UART & 0xff);         // rx buffer size
   \   00000126   E926               LDI     R18, 150
   \   00000128   8100               LD      R16, Z
   \   0000012A   8111               LDD     R17, Z+1
   \   0000012C   8142               LDD     R20, Z+2
   \   0000012E   8153               LDD     R21, Z+3
   \   00000130   01F8               MOVW    R31:R30, R17:R16
   \   00000132   0FE4               ADD     R30, R20
   \   00000134   1FF5               ADC     R31, R21
   \   00000136   8320               ST      Z, R18
   \   00000138   01FD               MOVW    R31:R30, R27:R26
   \   0000013A   8102               LDD     R16, Z+2
   \   0000013C   8113               LDD     R17, Z+3
   \   0000013E   5F0F               SUBI    R16, 255
   \   00000140   4F1F               SBCI    R17, 255
   \   00000142   8302               STD     Z+2, R16
   \   00000144   8313               STD     Z+3, R17
    330              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (( RXSIZE_UART >> 8) & 0xff); // rx buffer size
   \   00000146   8100               LD      R16, Z
   \   00000148   8111               LDD     R17, Z+1
   \   0000014A   8122               LDD     R18, Z+2
   \   0000014C   8133               LDD     R19, Z+3
   \   0000014E   01F8               MOVW    R31:R30, R17:R16
   \   00000150   0FE2               ADD     R30, R18
   \   00000152   1FF3               ADC     R31, R19
   \   00000154   E000               LDI     R16, 0
   \   00000156   8300               ST      Z, R16
   \   00000158   01FD               MOVW    R31:R30, R27:R26
   \   0000015A   8102               LDD     R16, Z+2
   \   0000015C   8113               LDD     R17, Z+3
   \   0000015E   5F0F               SUBI    R16, 255
   \   00000160   4F1F               SBCI    R17, 255
   \   00000162   8302               STD     Z+2, R16
   \   00000164   8313               STD     Z+3, R17
    331              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TXSIZE_UART & 0xff);         // tx buffer size
   \   00000166   E123               LDI     R18, 19
   \   00000168   8100               LD      R16, Z
   \   0000016A   8111               LDD     R17, Z+1
   \   0000016C   8142               LDD     R20, Z+2
   \   0000016E   8153               LDD     R21, Z+3
   \   00000170   01F8               MOVW    R31:R30, R17:R16
   \   00000172   0FE4               ADD     R30, R20
   \   00000174   1FF5               ADC     R31, R21
   \   00000176   8320               ST      Z, R18
   \   00000178   01FD               MOVW    R31:R30, R27:R26
   \   0000017A   8102               LDD     R16, Z+2
   \   0000017C   8113               LDD     R17, Z+3
   \   0000017E   5F0F               SUBI    R16, 255
   \   00000180   4F1F               SBCI    R17, 255
   \   00000182   8302               STD     Z+2, R16
   \   00000184   8313               STD     Z+3, R17
    332              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((TXSIZE_UART >> 8) & 0xff);  // tx buffer size
   \   00000186   E021               LDI     R18, 1
   \   00000188   8100               LD      R16, Z
   \   0000018A   8111               LDD     R17, Z+1
   \   0000018C   8142               LDD     R20, Z+2
   \   0000018E   8153               LDD     R21, Z+3
   \   00000190   01F8               MOVW    R31:R30, R17:R16
   \   00000192   0FE4               ADD     R30, R20
   \   00000194   1FF5               ADC     R31, R21
   \   00000196   8320               ST      Z, R18
   \   00000198   01FD               MOVW    R31:R30, R27:R26
   \   0000019A   8102               LDD     R16, Z+2
   \   0000019C   8113               LDD     R17, Z+3
   \   0000019E   5F0F               SUBI    R16, 255
   \   000001A0   4F1F               SBCI    R17, 255
   \   000001A2   8302               STD     Z+2, R16
   \   000001A4   8313               STD     Z+3, R17
    333              UART[ch].pTxBuffer[UART[ch].TxFirst++] = RestartStatus ;                  // restart flag
   \   000001A6   9120....           LDS     R18, RestartStatus
   \   000001AA   8100               LD      R16, Z
   \   000001AC   8111               LDD     R17, Z+1
   \   000001AE   8142               LDD     R20, Z+2
   \   000001B0   8153               LDD     R21, Z+3
   \   000001B2   01F8               MOVW    R31:R30, R17:R16
   \   000001B4   0FE4               ADD     R30, R20
   \   000001B6   1FF5               ADC     R31, R21
   \   000001B8   8320               ST      Z, R18
   \   000001BA   01FD               MOVW    R31:R30, R27:R26
   \   000001BC   8102               LDD     R16, Z+2
   \   000001BE   8113               LDD     R17, Z+3
   \   000001C0   5F0F               SUBI    R16, 255
   \   000001C2   4F1F               SBCI    R17, 255
   \   000001C4   8302               STD     Z+2, R16
   \   000001C6   8313               STD     Z+3, R17
    334              UART[ch].pTxBuffer[UART[ch].TxFirst++] = PROGTYPE_APP ;                // Application program
   \   000001C8   E021               LDI     R18, 1
   \   000001CA   8100               LD      R16, Z
   \   000001CC   8111               LDD     R17, Z+1
   \   000001CE   8142               LDD     R20, Z+2
   \   000001D0   8153               LDD     R21, Z+3
   \   000001D2   01F8               MOVW    R31:R30, R17:R16
   \   000001D4   0FE4               ADD     R30, R20
   \   000001D6   1FF5               ADC     R31, R21
   \   000001D8   8320               ST      Z, R18
   \   000001DA   01FD               MOVW    R31:R30, R27:R26
   \   000001DC   8102               LDD     R16, Z+2
   \   000001DE   8113               LDD     R17, Z+3
   \   000001E0   5F0F               SUBI    R16, 255
   \   000001E2   4F1F               SBCI    R17, 255
   \   000001E4   8302               STD     Z+2, R16
   \   000001E6   8313               STD     Z+3, R17
    335          
    336              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000001E8   1904               SUB     R16, R4
   \   000001EA   5002               SUBI    R16, 2
   \   000001EC   91ED               LD      R30, X+
   \   000001EE   91FC               LD      R31, X
   \   000001F0   9711               SBIW    R27:R26, 1
   \   000001F2   0DE4               ADD     R30, R4
   \   000001F4   1DF5               ADC     R31, R5
   \   000001F6   8300               ST      Z, R16
    337              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000001F8   01FD               MOVW    R31:R30, R27:R26
   \   000001FA   8102               LDD     R16, Z+2
   \   000001FC   8113               LDD     R17, Z+3
   \   000001FE   1904               SUB     R16, R4
   \   00000200   0915               SBC     R17, R5
   \   00000202   5002               SUBI    R16, 2
   \   00000204   4010               SBCI    R17, 0
   \   00000206   91ED               LD      R30, X+
   \   00000208   91FC               LD      R31, X
   \   0000020A   0DE4               ADD     R30, R4
   \   0000020C   1DF5               ADC     R31, R5
   \   0000020E   8311               STD     Z+1, R17
    338          
    339              RestartStatus = 0 ;                                                       // set reset stat to 0 = read
   \   00000210   E000               LDI     R16, 0
   \   00000212   9300....           STS     RestartStatus, R16
    340          }
   \   00000216   ....               RJMP    ?Subroutine0
    341          
    342          /*************************************************************************
    343          *
    344          * Build EEPROM data package
    345          *
    346          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    347          void BuildEEPROMData(char ch, short pointer) {
   \                     BuildEEPROMData:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    348          
    349              short ntna ;
    350              char channel;
    351              UART[ch].RxSendReply = true ;                               // flag for answering
   \   0000000C   E11A               LDI     R17, 26
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   01D0               MOVW    R27:R26, R1:R0
   \   00000012   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000014   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000016   E001               LDI     R16, 1
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8F01               STD     Z+25, R16
    352          
    353              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA & 0xff;
   \   0000001C   E349               LDI     R20, 57
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   8162               LDD     R22, Z+2
   \   00000024   8173               LDD     R23, Z+3
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   0FE6               ADD     R30, R22
   \   0000002A   1FF7               ADC     R31, R23
   \   0000002C   8340               ST      Z, R20
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   8102               LDD     R16, Z+2
   \   00000032   8113               LDD     R17, Z+3
   \   00000034   5F0F               SUBI    R16, 255
   \   00000036   4F1F               SBCI    R17, 255
   \   00000038   8302               STD     Z+2, R16
   \   0000003A   8313               STD     Z+3, R17
    354              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_EEPROM_DATA >> 8;
   \   0000003C   E044               LDI     R20, 4
   \   0000003E   8100               LD      R16, Z
   \   00000040   8111               LDD     R17, Z+1
   \   00000042   8162               LDD     R22, Z+2
   \   00000044   8173               LDD     R23, Z+3
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   0FE6               ADD     R30, R22
   \   0000004A   1FF7               ADC     R31, R23
   \   0000004C   8340               ST      Z, R20
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   8102               LDD     R16, Z+2
   \   00000052   8113               LDD     R17, Z+3
   \   00000054   5F0F               SUBI    R16, 255
   \   00000056   4F1F               SBCI    R17, 255
   \   00000058   8302               STD     Z+2, R16
   \   0000005A   8313               STD     Z+3, R17
    355              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000005C   0128               MOVW    R5:R4, R17:R16
    356              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000005E   5F0E               SUBI    R16, 254
   \   00000060   4F1F               SBCI    R17, 255
   \   00000062   8302               STD     Z+2, R16
   \   00000064   8313               STD     Z+3, R17
    357          
    358              channel = UART[ch].pRxBuffer[pointer];
   \   00000066   8502               LDD     R16, Z+10
   \   00000068   85F3               LDD     R31, Z+11
   \   0000006A   2FE0               MOV     R30, R16
   \   0000006C   0FE2               ADD     R30, R18
   \   0000006E   1FF3               ADC     R31, R19
   \   00000070   8120               LD      R18, Z
    359              UART[ch].pTxBuffer[UART[ch].TxFirst++] = channel; //channel
   \   00000072   910D               LD      R16, X+
   \   00000074   911C               LD      R17, X
   \   00000076   9711               SBIW    R27:R26, 1
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   8142               LDD     R20, Z+2
   \   0000007C   8153               LDD     R21, Z+3
   \   0000007E   01F8               MOVW    R31:R30, R17:R16
   \   00000080   0FE4               ADD     R30, R20
   \   00000082   1FF5               ADC     R31, R21
   \   00000084   8320               ST      Z, R18
   \   00000086   01FD               MOVW    R31:R30, R27:R26
   \   00000088   8102               LDD     R16, Z+2
   \   0000008A   8113               LDD     R17, Z+3
   \   0000008C   5F0F               SUBI    R16, 255
   \   0000008E   4F1F               SBCI    R17, 255
   \   00000090   8302               STD     Z+2, R16
   \   00000092   8313               STD     Z+3, R17
    360          
    361              ReadEEPROMBuffer( (channel * sizeof(float)* 2) , sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \   00000094   E008               LDI     R16, 8
   \   00000096   9F20               MUL     R18, R16
   \   00000098   01C0               MOVW    R25:R24, R1:R0
   \   0000009A   8140               LD      R20, Z
   \   0000009C   8151               LDD     R21, Z+1
   \   0000009E   8102               LDD     R16, Z+2
   \   000000A0   0F40               ADD     R20, R16
   \   000000A2   1F51               ADC     R21, R17
   \   000000A4   E024               LDI     R18, 4
   \   000000A6   0180               MOVW    R17:R16, R1:R0
   \   000000A8   ........           CALL    ReadEEPROMBuffer
    362              UART[ch].TxFirst += sizeof(float) ;
   \   000000AC   01FD               MOVW    R31:R30, R27:R26
   \   000000AE   8102               LDD     R16, Z+2
   \   000000B0   8113               LDD     R17, Z+3
   \   000000B2   5F0C               SUBI    R16, 252
   \   000000B4   4F1F               SBCI    R17, 255
   \   000000B6   8302               STD     Z+2, R16
   \   000000B8   8313               STD     Z+3, R17
    363              ReadEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pTxBuffer[UART[ch].TxFirst] );
   \   000000BA   8140               LD      R20, Z
   \   000000BC   8151               LDD     R21, Z+1
   \   000000BE   0F40               ADD     R20, R16
   \   000000C0   1F51               ADC     R21, R17
   \   000000C2   E024               LDI     R18, 4
   \   000000C4   9604               ADIW    R25:R24, 4
   \   000000C6   018C               MOVW    R17:R16, R25:R24
   \   000000C8   ........           CALL    ReadEEPROMBuffer
    364              UART[ch].TxFirst += sizeof(float) ;
   \   000000CC   01FD               MOVW    R31:R30, R27:R26
   \   000000CE   8102               LDD     R16, Z+2
   \   000000D0   8113               LDD     R17, Z+3
   \   000000D2   5F0C               SUBI    R16, 252
   \   000000D4   4F1F               SBCI    R17, 255
   \   000000D6   8302               STD     Z+2, R16
   \   000000D8   8313               STD     Z+3, R17
    365          
    366              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000000DA   1904               SUB     R16, R4
   \   000000DC   5002               SUBI    R16, 2
   \   000000DE   91ED               LD      R30, X+
   \   000000E0   91FC               LD      R31, X
   \   000000E2   9711               SBIW    R27:R26, 1
   \   000000E4   0DE4               ADD     R30, R4
   \   000000E6   1DF5               ADC     R31, R5
   \   000000E8   8300               ST      Z, R16
    367              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000000EA   01FD               MOVW    R31:R30, R27:R26
   \   000000EC   8102               LDD     R16, Z+2
   \   000000EE   8113               LDD     R17, Z+3
   \   000000F0   1904               SUB     R16, R4
   \   000000F2   0915               SBC     R17, R5
   \   000000F4   5002               SUBI    R16, 2
   \   000000F6   4010               SBCI    R17, 0
   \   000000F8   91ED               LD      R30, X+
   \   000000FA   91FC               LD      R31, X
   \   000000FC   0DE4               ADD     R30, R4
   \   000000FE   1DF5               ADC     R31, R5
   \   00000100   8311               STD     Z+1, R17
    368          }
   \   00000102                      REQUIRE ?Subroutine0
   \   00000102                      ;               // Fall through to label ?Subroutine0
    369          
    370          
    371          /*************************************************************************
    372          *
    373          * Build datablock for Internal AD
    374          *
    375          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    376          void BuildADInt(char ch, short pointer) {
   \                     BuildADInt:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    377          
    378              short ntna, i ;
    379              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   0180               MOVW    R17:R16, R1:R0
   \   00000008   ....               SUBI    R16, LOW((-(UART) & 0xFFFF))
   \   0000000A   ....               SBCI    R17, (-(UART) & 0xFFFF) >> 8
   \   0000000C   E021               LDI     R18, 1
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   8F21               STD     Z+25, R18
    380          
    381              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA & 0xff;
   \   00000012   E443               LDI     R20, 67
   \   00000014   8120               LD      R18, Z
   \   00000016   8131               LDD     R19, Z+1
   \   00000018   8162               LDD     R22, Z+2
   \   0000001A   8173               LDD     R23, Z+3
   \   0000001C   01F9               MOVW    R31:R30, R19:R18
   \   0000001E   0FE6               ADD     R30, R22
   \   00000020   1FF7               ADC     R31, R23
   \   00000022   8340               ST      Z, R20
   \   00000024   01F8               MOVW    R31:R30, R17:R16
   \   00000026   8122               LDD     R18, Z+2
   \   00000028   8133               LDD     R19, Z+3
   \   0000002A   5F2F               SUBI    R18, 255
   \   0000002C   4F3F               SBCI    R19, 255
   \   0000002E   8322               STD     Z+2, R18
   \   00000030   8333               STD     Z+3, R19
    382              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_INT_DATA >> 8;
   \   00000032   E044               LDI     R20, 4
   \   00000034   8120               LD      R18, Z
   \   00000036   8131               LDD     R19, Z+1
   \   00000038   8162               LDD     R22, Z+2
   \   0000003A   8173               LDD     R23, Z+3
   \   0000003C   01F9               MOVW    R31:R30, R19:R18
   \   0000003E   0FE6               ADD     R30, R22
   \   00000040   1FF7               ADC     R31, R23
   \   00000042   8340               ST      Z, R20
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   8122               LDD     R18, Z+2
   \   00000048   8133               LDD     R19, Z+3
   \   0000004A   5F2F               SUBI    R18, 255
   \   0000004C   4F3F               SBCI    R19, 255
   \   0000004E   8322               STD     Z+2, R18
   \   00000050   8333               STD     Z+3, R19
    383              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   00000052   01A9               MOVW    R21:R20, R19:R18
    384              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000054   5F2E               SUBI    R18, 254
   \   00000056   4F3F               SBCI    R19, 255
   \   00000058   8322               STD     Z+2, R18
   \   0000005A   8333               STD     Z+3, R19
    385          
    386              for (i = 0; i<3; i++) {
   \   0000005C   ....               LDI     R26, LOW(ADInt)
   \   0000005E   ....               LDI     R27, (ADInt) >> 8
   \   00000060   E063               LDI     R22, 3
    387                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] ;
   \                     ??BuildADInt_0:
   \   00000062   917D               LD      R23, X+
   \   00000064   8120               LD      R18, Z
   \   00000066   8131               LDD     R19, Z+1
   \   00000068   8002               LDD     R0, Z+2
   \   0000006A   8013               LDD     R1, Z+3
   \   0000006C   01F9               MOVW    R31:R30, R19:R18
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1DF1               ADC     R31, R1
   \   00000072   8370               ST      Z, R23
   \   00000074   01F8               MOVW    R31:R30, R17:R16
   \   00000076   8122               LDD     R18, Z+2
   \   00000078   8133               LDD     R19, Z+3
   \   0000007A   5F2F               SUBI    R18, 255
   \   0000007C   4F3F               SBCI    R19, 255
   \   0000007E   8322               STD     Z+2, R18
   \   00000080   8333               STD     Z+3, R19
    388                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ADInt.Result[i] >> 8 ;   // ADresult
   \   00000082   913D               LD      R19, X+
   \   00000084   2F73               MOV     R23, R19
   \   00000086   8120               LD      R18, Z
   \   00000088   8131               LDD     R19, Z+1
   \   0000008A   8002               LDD     R0, Z+2
   \   0000008C   8013               LDD     R1, Z+3
   \   0000008E   01F9               MOVW    R31:R30, R19:R18
   \   00000090   0DE0               ADD     R30, R0
   \   00000092   1DF1               ADC     R31, R1
   \   00000094   8370               ST      Z, R23
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   8122               LDD     R18, Z+2
   \   0000009A   8133               LDD     R19, Z+3
   \   0000009C   5F2F               SUBI    R18, 255
   \   0000009E   4F3F               SBCI    R19, 255
   \   000000A0   8322               STD     Z+2, R18
   \   000000A2   8333               STD     Z+3, R19
    389              }
   \   000000A4   956A               DEC     R22
   \   000000A6   F6E9               BRNE    ??BuildADInt_0
    390          
    391              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000000A8   8162               LDD     R22, Z+2
   \   000000AA   1B64               SUB     R22, R20
   \   000000AC   5062               SUBI    R22, 2
   \   000000AE   8120               LD      R18, Z
   \   000000B0   81F1               LDD     R31, Z+1
   \   000000B2   2FE2               MOV     R30, R18
   \   000000B4   0FE4               ADD     R30, R20
   \   000000B6   1FF5               ADC     R31, R21
   \   000000B8   8360               ST      Z, R22
    392              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   8122               LDD     R18, Z+2
   \   000000BE   8133               LDD     R19, Z+3
   \   000000C0   1B24               SUB     R18, R20
   \   000000C2   0B35               SBC     R19, R21
   \   000000C4   5022               SUBI    R18, 2
   \   000000C6   4030               SBCI    R19, 0
   \   000000C8   8100               LD      R16, Z
   \   000000CA   8111               LDD     R17, Z+1
   \   000000CC   0F04               ADD     R16, R20
   \   000000CE   1F15               ADC     R17, R21
   \   000000D0   01F8               MOVW    R31:R30, R17:R16
   \   000000D2   8331               STD     Z+1, R19
    393          
    394          }
   \   000000D4   01D1               MOVW    R27:R26, R3:R2
   \   000000D6   9508               RET
    395          
    396          
    397          /*************************************************************************
    398          *
    399          * Build datablock for eeprom on ADcard
    400          *
    401          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    402          void BuildADEpromdata(char ch, char portch) {
   \                     BuildADEpromdata:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    403          
    404              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   E12A               LDI     R18, 26
   \   00000004   9F02               MUL     R16, R18
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   8F01               STD     Z+25, R16
    405          
    406              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF & 0xff;
   \   00000010   E809               LDI     R16, 137
   \   00000012   81A0               LD      R26, Z
   \   00000014   81B1               LDD     R27, Z+1
   \   00000016   8122               LDD     R18, Z+2
   \   00000018   8133               LDD     R19, Z+3
   \   0000001A   0FA2               ADD     R26, R18
   \   0000001C   1FB3               ADC     R27, R19
   \   0000001E   930C               ST      X, R16
   \   00000020   8122               LDD     R18, Z+2
   \   00000022   8133               LDD     R19, Z+3
   \   00000024   5F2F               SUBI    R18, 255
   \   00000026   4F3F               SBCI    R19, 255
   \   00000028   8322               STD     Z+2, R18
   \   0000002A   8333               STD     Z+3, R19
    407              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_ADBUF >> 8;
   \   0000002C   E004               LDI     R16, 4
   \   0000002E   81A0               LD      R26, Z
   \   00000030   81B1               LDD     R27, Z+1
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   0FA2               ADD     R26, R18
   \   00000036   1FB3               ADC     R27, R19
   \   00000038   930C               ST      X, R16
   \   0000003A   8122               LDD     R18, Z+2
   \   0000003C   8133               LDD     R19, Z+3
   \   0000003E   5F2F               SUBI    R18, 255
   \   00000040   4F3F               SBCI    R19, 255
   \   00000042   8322               STD     Z+2, R18
   \   00000044   8333               STD     Z+3, R19
    408              short ntna = UART[ch].TxFirst ;                                    // remember index
    409              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000046   01A9               MOVW    R21:R20, R19:R18
   \   00000048   5F4E               SUBI    R20, 254
   \   0000004A   4F5F               SBCI    R21, 255
   \   0000004C   8342               STD     Z+2, R20
   \   0000004E   8353               STD     Z+3, R21
    410          
    411              for (short i = 0; i < 44; i++) {
   \   00000050   E302               LDI     R16, 50
   \   00000052   9F10               MUL     R17, R16
   \   00000054   ....               LDI     R16, LOW((TData + 1428))
   \   00000056   0E00               ADD     R0, R16
   \   00000058   ....               LDI     R16, HIGH((TData + 1428))
   \   0000005A   1E10               ADC     R1, R16
   \   0000005C   E24C               LDI     R20, 44
    412                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FromTargetBuffer[portch][i] ;
   \                     ??BuildADEpromdata_0:
   \   0000005E   01D0               MOVW    R27:R26, R1:R0
   \   00000060   910D               LD      R16, X+
   \   00000062   010D               MOVW    R1:R0, R27:R26
   \   00000064   81A0               LD      R26, Z
   \   00000066   81B1               LDD     R27, Z+1
   \   00000068   8162               LDD     R22, Z+2
   \   0000006A   8173               LDD     R23, Z+3
   \   0000006C   0FA6               ADD     R26, R22
   \   0000006E   1FB7               ADC     R27, R23
   \   00000070   930C               ST      X, R16
   \   00000072   8102               LDD     R16, Z+2
   \   00000074   8113               LDD     R17, Z+3
   \   00000076   5F0F               SUBI    R16, 255
   \   00000078   4F1F               SBCI    R17, 255
   \   0000007A   8302               STD     Z+2, R16
   \   0000007C   8313               STD     Z+3, R17
    413              }
   \   0000007E   954A               DEC     R20
   \   00000080   F771               BRNE    ??BuildADEpromdata_0
    414              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   00000082   8102               LDD     R16, Z+2
   \   00000084   1B02               SUB     R16, R18
   \   00000086   5002               SUBI    R16, 2
   \   00000088   81A0               LD      R26, Z
   \   0000008A   81B1               LDD     R27, Z+1
   \   0000008C   0FA2               ADD     R26, R18
   \   0000008E   1FB3               ADC     R27, R19
   \   00000090   930C               ST      X, R16
    415              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   00000092   8102               LDD     R16, Z+2
   \   00000094   8113               LDD     R17, Z+3
   \   00000096   1B02               SUB     R16, R18
   \   00000098   0B13               SBC     R17, R19
   \   0000009A   5002               SUBI    R16, 2
   \   0000009C   4010               SBCI    R17, 0
   \   0000009E   2F41               MOV     R20, R17
   \   000000A0   8100               LD      R16, Z
   \   000000A2   8111               LDD     R17, Z+1
   \   000000A4   0F02               ADD     R16, R18
   \   000000A6   1F13               ADC     R17, R19
   \   000000A8   01F8               MOVW    R31:R30, R17:R16
   \   000000AA   8341               STD     Z+1, R20
    416          
    417          }
   \   000000AC   01D1               MOVW    R27:R26, R3:R2
   \   000000AE   9508               RET
    418          
    419          /*************************************************************************
    420          *
    421          * Build datablock for WHData on ADcard
    422          *
    423          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    424          void BuildWHdata(char ch, short pointer) {
   \                     BuildWHdata:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    425          
    426              UART[ch].RxSendReply = true;                               // flag for answering
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   01A0               MOVW    R21:R20, R1:R0
   \   0000000E   ....               SUBI    R20, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R21, (-(UART) & 0xFFFF) >> 8
   \   00000012   E001               LDI     R16, 1
   \   00000014   01FA               MOVW    R31:R30, R21:R20
   \   00000016   8F01               STD     Z+25, R16
    427          
    428              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF & 0xff;
   \   00000018   E96C               LDI     R22, 156
   \   0000001A   8100               LD      R16, Z
   \   0000001C   8111               LDD     R17, Z+1
   \   0000001E   8002               LDD     R0, Z+2
   \   00000020   8013               LDD     R1, Z+3
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   0DE0               ADD     R30, R0
   \   00000026   1DF1               ADC     R31, R1
   \   00000028   8360               ST      Z, R22
   \   0000002A   01FA               MOVW    R31:R30, R21:R20
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   8113               LDD     R17, Z+3
   \   00000030   5F0F               SUBI    R16, 255
   \   00000032   4F1F               SBCI    R17, 255
   \   00000034   8302               STD     Z+2, R16
   \   00000036   8313               STD     Z+3, R17
    429              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_SND_RS4_WHBUF >> 8;
   \   00000038   E064               LDI     R22, 4
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   8002               LDD     R0, Z+2
   \   00000040   8013               LDD     R1, Z+3
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   0DE0               ADD     R30, R0
   \   00000046   1DF1               ADC     R31, R1
   \   00000048   8360               ST      Z, R22
   \   0000004A   01FA               MOVW    R31:R30, R21:R20
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    430              short ntna = UART[ch].TxFirst;                          // remember index
   \   00000058   0118               MOVW    R3:R2, R17:R16
    431              UART[ch].TxFirst += 2;                                  // two byte length
   \   0000005A   5F0E               SUBI    R16, 254
   \   0000005C   4F1F               SBCI    R17, 255
   \   0000005E   8302               STD     Z+2, R16
   \   00000060   8313               STD     Z+3, R17
    432          
    433              OS_EnterRegion();
   \   00000062   9100....           LDS     R16, OS_Global
   \   00000066   9503               INC     R16
   \   00000068   9300....           STS     OS_Global, R16
    434              for (short i = 0; i < 4; i++) {
   \   0000006C   E080               LDI     R24, 0
   \   0000006E   E090               LDI     R25, 0
   \   00000070   0189               MOVW    R17:R16, R19:R18
   \   00000072   E024               LDI     R18, 4
    435                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] & 0xff; // WashTrackcnt
   \                     ??BuildWHdata_0:
   \   00000074   01BC               MOVW    R23:R22, R25:R24
   \   00000076   0F66               LSL     R22
   \   00000078   1F77               ROL     R23
   \   0000007A   8402               LDD     R0, Z+10
   \   0000007C   85F3               LDD     R31, Z+11
   \   0000007E   2DE0               MOV     R30, R0
   \   00000080   0FE0               ADD     R30, R16
   \   00000082   1FF1               ADC     R31, R17
   \   00000084   8130               LD      R19, Z
   \   00000086   E0E8               LDI     R30, 8
   \   00000088   9F3E               MUL     R19, R30
   \   0000008A   ....               LDI     R19, LOW(TData)
   \   0000008C   0E03               ADD     R0, R19
   \   0000008E   ....               LDI     R19, (TData) >> 8
   \   00000090   1E13               ADC     R1, R19
   \   00000092   0E06               ADD     R0, R22
   \   00000094   1E17               ADC     R1, R23
   \   00000096   01F0               MOVW    R31:R30, R1:R0
   \   00000098   56E5               SUBI    R30, 101
   \   0000009A   4FFB               SBCI    R31, 251
   \   0000009C   8130               LD      R19, Z
   \   0000009E   01FA               MOVW    R31:R30, R21:R20
   \   000000A0   8000               LD      R0, Z
   \   000000A2   8011               LDD     R1, Z+1
   \   000000A4   81A2               LDD     R26, Z+2
   \   000000A6   81B3               LDD     R27, Z+3
   \   000000A8   01F0               MOVW    R31:R30, R1:R0
   \   000000AA   0FEA               ADD     R30, R26
   \   000000AC   1FFB               ADC     R31, R27
   \   000000AE   8330               ST      Z, R19
   \   000000B0   01FA               MOVW    R31:R30, R21:R20
   \   000000B2   81A2               LDD     R26, Z+2
   \   000000B4   81B3               LDD     R27, Z+3
   \   000000B6   9611               ADIW    R27:R26, 1
   \   000000B8   83A2               STD     Z+2, R26
   \   000000BA   83B3               STD     Z+3, R27
    436                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTrackCnt[UART[ch].pRxBuffer[pointer]][i] >> 8) & 0xff; // WashTrackcnt
   \   000000BC   8402               LDD     R0, Z+10
   \   000000BE   85F3               LDD     R31, Z+11
   \   000000C0   2DE0               MOV     R30, R0
   \   000000C2   0FE0               ADD     R30, R16
   \   000000C4   1FF1               ADC     R31, R17
   \   000000C6   8130               LD      R19, Z
   \   000000C8   E0E8               LDI     R30, 8
   \   000000CA   9F3E               MUL     R19, R30
   \   000000CC   ....               LDI     R19, LOW(TData)
   \   000000CE   0E03               ADD     R0, R19
   \   000000D0   ....               LDI     R19, (TData) >> 8
   \   000000D2   1E13               ADC     R1, R19
   \   000000D4   0E06               ADD     R0, R22
   \   000000D6   1E17               ADC     R1, R23
   \   000000D8   01F0               MOVW    R31:R30, R1:R0
   \   000000DA   56E5               SUBI    R30, 101
   \   000000DC   4FFB               SBCI    R31, 251
   \   000000DE   8131               LDD     R19, Z+1
   \   000000E0   01FA               MOVW    R31:R30, R21:R20
   \   000000E2   8160               LD      R22, Z
   \   000000E4   8171               LDD     R23, Z+1
   \   000000E6   8002               LDD     R0, Z+2
   \   000000E8   01FB               MOVW    R31:R30, R23:R22
   \   000000EA   0DE0               ADD     R30, R0
   \   000000EC   1FFB               ADC     R31, R27
   \   000000EE   8330               ST      Z, R19
   \   000000F0   01FA               MOVW    R31:R30, R21:R20
   \   000000F2   8162               LDD     R22, Z+2
   \   000000F4   8173               LDD     R23, Z+3
   \   000000F6   5F6F               SUBI    R22, 255
   \   000000F8   4F7F               SBCI    R23, 255
   \   000000FA   8362               STD     Z+2, R22
   \   000000FC   8373               STD     Z+3, R23
    437              }
   \   000000FE   9601               ADIW    R25:R24, 1
   \   00000100   952A               DEC     R18
   \   00000102   F009               BREQ    $+2+2
   \   00000104   CFB7               RJMP    ??BuildWHdata_0
    438              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.LevelSwitch[UART[ch].pRxBuffer[pointer]];
   \   00000106   8522               LDD     R18, Z+10
   \   00000108   85F3               LDD     R31, Z+11
   \   0000010A   2FE2               MOV     R30, R18
   \   0000010C   0FE0               ADD     R30, R16
   \   0000010E   1FF1               ADC     R31, R17
   \   00000110   81E0               LD      R30, Z
   \   00000112   E0F0               LDI     R31, 0
   \   00000114   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   00000116   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000118   8160               LD      R22, Z
   \   0000011A   01FA               MOVW    R31:R30, R21:R20
   \   0000011C   8120               LD      R18, Z
   \   0000011E   8131               LDD     R19, Z+1
   \   00000120   8002               LDD     R0, Z+2
   \   00000122   01F9               MOVW    R31:R30, R19:R18
   \   00000124   0DE0               ADD     R30, R0
   \   00000126   1FF7               ADC     R31, R23
   \   00000128   8360               ST      Z, R22
   \   0000012A   01FA               MOVW    R31:R30, R21:R20
   \   0000012C   8122               LDD     R18, Z+2
   \   0000012E   8133               LDD     R19, Z+3
   \   00000130   5F2F               SUBI    R18, 255
   \   00000132   4F3F               SBCI    R19, 255
   \   00000134   8322               STD     Z+2, R18
   \   00000136   8333               STD     Z+3, R19
    439              UART[ch].pTxBuffer[UART[ch].TxFirst++] =  TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] & 0xff; // WashTrackcnt
   \   00000138   8522               LDD     R18, Z+10
   \   0000013A   85F3               LDD     R31, Z+11
   \   0000013C   2FE2               MOV     R30, R18
   \   0000013E   0FE0               ADD     R30, R16
   \   00000140   1FF1               ADC     R31, R17
   \   00000142   8120               LD      R18, Z
   \   00000144   E032               LDI     R19, 2
   \   00000146   9F23               MUL     R18, R19
   \   00000148   01F0               MOVW    R31:R30, R1:R0
   \   0000014A   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   0000014C   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   0000014E   8160               LD      R22, Z
   \   00000150   01FA               MOVW    R31:R30, R21:R20
   \   00000152   8120               LD      R18, Z
   \   00000154   8131               LDD     R19, Z+1
   \   00000156   8002               LDD     R0, Z+2
   \   00000158   8013               LDD     R1, Z+3
   \   0000015A   01F9               MOVW    R31:R30, R19:R18
   \   0000015C   0DE0               ADD     R30, R0
   \   0000015E   1DF1               ADC     R31, R1
   \   00000160   8360               ST      Z, R22
   \   00000162   01FA               MOVW    R31:R30, R21:R20
   \   00000164   8122               LDD     R18, Z+2
   \   00000166   8133               LDD     R19, Z+3
   \   00000168   5F2F               SUBI    R18, 255
   \   0000016A   4F3F               SBCI    R19, 255
   \   0000016C   8322               STD     Z+2, R18
   \   0000016E   8333               STD     Z+3, R19
    440              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.WTTime[UART[ch].pRxBuffer[pointer]] >> 8) & 0xff; // WashTrackcnt
   \   00000170   8522               LDD     R18, Z+10
   \   00000172   85F3               LDD     R31, Z+11
   \   00000174   2FE2               MOV     R30, R18
   \   00000176   0FE0               ADD     R30, R16
   \   00000178   1FF1               ADC     R31, R17
   \   0000017A   8100               LD      R16, Z
   \   0000017C   E012               LDI     R17, 2
   \   0000017E   9F01               MUL     R16, R17
   \   00000180   01F0               MOVW    R31:R30, R1:R0
   \   00000182   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   00000184   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   00000186   8121               LDD     R18, Z+1
   \   00000188   01FA               MOVW    R31:R30, R21:R20
   \   0000018A   8100               LD      R16, Z
   \   0000018C   8111               LDD     R17, Z+1
   \   0000018E   8162               LDD     R22, Z+2
   \   00000190   01F8               MOVW    R31:R30, R17:R16
   \   00000192   0FE6               ADD     R30, R22
   \   00000194   1FF3               ADC     R31, R19
   \   00000196   8320               ST      Z, R18
   \   00000198   01FA               MOVW    R31:R30, R21:R20
   \   0000019A   8102               LDD     R16, Z+2
   \   0000019C   8113               LDD     R17, Z+3
   \   0000019E   5F0F               SUBI    R16, 255
   \   000001A0   4F1F               SBCI    R17, 255
   \   000001A2   8302               STD     Z+2, R16
   \   000001A4   8313               STD     Z+3, R17
    441              UART[ch].pTxBuffer[ntna]     = (UART[ch].TxFirst - ntna - 2) & 0xff;      // length of data block lb
   \   000001A6   2F20               MOV     R18, R16
   \   000001A8   1922               SUB     R18, R2
   \   000001AA   5022               SUBI    R18, 2
   \   000001AC   8100               LD      R16, Z
   \   000001AE   81F1               LDD     R31, Z+1
   \   000001B0   2FE0               MOV     R30, R16
   \   000001B2   0DE2               ADD     R30, R2
   \   000001B4   1DF3               ADC     R31, R3
   \   000001B6   8320               ST      Z, R18
    442              UART[ch].pTxBuffer[ntna + 1] = ((UART[ch].TxFirst - ntna - 2) >> 8) & 0xff; // length of data block hb
   \   000001B8   01FA               MOVW    R31:R30, R21:R20
   \   000001BA   8102               LDD     R16, Z+2
   \   000001BC   8113               LDD     R17, Z+3
   \   000001BE   1902               SUB     R16, R2
   \   000001C0   0913               SBC     R17, R3
   \   000001C2   5002               SUBI    R16, 2
   \   000001C4   4010               SBCI    R17, 0
   \   000001C6   2F21               MOV     R18, R17
   \   000001C8   8100               LD      R16, Z
   \   000001CA   8111               LDD     R17, Z+1
   \   000001CC   0D02               ADD     R16, R2
   \   000001CE   1D13               ADC     R17, R3
   \   000001D0   01F8               MOVW    R31:R30, R17:R16
   \   000001D2   8321               STD     Z+1, R18
    443              OS_LeaveRegion();
   \   000001D4   ........           CALL    OS_LeaveRegion
    444          }
   \   000001D8   ....               RJMP    ?Subroutine1
    445          
    446          
    447          
    448          /*************************************************************************
    449          *
    450          * Build setup dat package for AN-ZB485
    451          *
    452          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    453          void BuildRS4Setup(char ch, short pointer) {
   \                     BuildRS4Setup:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    454          
    455              short ntna ;
    456              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   0190               MOVW    R19:R18, R1:R0
   \   00000008   ....               SUBI    R18, LOW((-(UART) & 0xFFFF))
   \   0000000A   ....               SBCI    R19, (-(UART) & 0xFFFF) >> 8
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   01F9               MOVW    R31:R30, R19:R18
   \   00000010   8F01               STD     Z+25, R16
    457          
    458              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP & 0xff;
   \   00000012   E547               LDI     R20, 87
   \   00000014   8100               LD      R16, Z
   \   00000016   8111               LDD     R17, Z+1
   \   00000018   8162               LDD     R22, Z+2
   \   0000001A   8173               LDD     R23, Z+3
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   0FE6               ADD     R30, R22
   \   00000020   1FF7               ADC     R31, R23
   \   00000022   8340               ST      Z, R20
   \   00000024   01F9               MOVW    R31:R30, R19:R18
   \   00000026   8102               LDD     R16, Z+2
   \   00000028   8113               LDD     R17, Z+3
   \   0000002A   5F0F               SUBI    R16, 255
   \   0000002C   4F1F               SBCI    R17, 255
   \   0000002E   8302               STD     Z+2, R16
   \   00000030   8313               STD     Z+3, R17
    459              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_SETUP >> 8;
   \   00000032   E044               LDI     R20, 4
   \   00000034   8100               LD      R16, Z
   \   00000036   8111               LDD     R17, Z+1
   \   00000038   8162               LDD     R22, Z+2
   \   0000003A   8173               LDD     R23, Z+3
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   0FE6               ADD     R30, R22
   \   00000040   1FF7               ADC     R31, R23
   \   00000042   8340               ST      Z, R20
   \   00000044   01F9               MOVW    R31:R30, R19:R18
   \   00000046   8102               LDD     R16, Z+2
   \   00000048   8113               LDD     R17, Z+3
   \   0000004A   5F0F               SUBI    R16, 255
   \   0000004C   4F1F               SBCI    R17, 255
   \   0000004E   8302               STD     Z+2, R16
   \   00000050   8313               STD     Z+3, R17
    460              ntna = UART[ch].TxFirst ;                                    /* remember index */
    461              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000052   01A8               MOVW    R21:R20, R17:R16
   \   00000054   5F4E               SUBI    R20, 254
   \   00000056   4F5F               SBCI    R21, 255
   \   00000058   8342               STD     Z+2, R20
   \   0000005A   8353               STD     Z+3, R21
    462          
    463              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.PortUsed;  // send the setup
   \   0000005C   ....               LDI     R30, LOW(TData)
   \   0000005E   ....               LDI     R31, (TData) >> 8
   \   00000060   8160               LD      R22, Z
   \   00000062   01D9               MOVW    R27:R26, R19:R18
   \   00000064   914D               LD      R20, X+
   \   00000066   915D               LD      R21, X+
   \   00000068   900D               LD      R0, X+
   \   0000006A   901C               LD      R1, X
   \   0000006C   01DA               MOVW    R27:R26, R21:R20
   \   0000006E   0DA0               ADD     R26, R0
   \   00000070   1DB1               ADC     R27, R1
   \   00000072   936C               ST      X, R22
   \   00000074   01D9               MOVW    R27:R26, R19:R18
   \   00000076   9612               ADIW    R27:R26, 2
   \   00000078   914D               LD      R20, X+
   \   0000007A   915C               LD      R21, X
   \   0000007C   5F4F               SUBI    R20, 255
   \   0000007E   4F5F               SBCI    R21, 255
   \   00000080   935C               ST      X, R21
   \   00000082   934E               ST      -X, R20
    464              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[0];  // send the sensor type
   \   00000084   8161               LDD     R22, Z+1
   \   00000086   01D9               MOVW    R27:R26, R19:R18
   \   00000088   914D               LD      R20, X+
   \   0000008A   915D               LD      R21, X+
   \   0000008C   900D               LD      R0, X+
   \   0000008E   901C               LD      R1, X
   \   00000090   01DA               MOVW    R27:R26, R21:R20
   \   00000092   0DA0               ADD     R26, R0
   \   00000094   1DB1               ADC     R27, R1
   \   00000096   936C               ST      X, R22
   \   00000098   01D9               MOVW    R27:R26, R19:R18
   \   0000009A   9612               ADIW    R27:R26, 2
   \   0000009C   914D               LD      R20, X+
   \   0000009E   915C               LD      R21, X
   \   000000A0   5F4F               SUBI    R20, 255
   \   000000A2   4F5F               SBCI    R21, 255
   \   000000A4   935C               ST      X, R21
   \   000000A6   934E               ST      -X, R20
    465              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.SensorType[1];  // send the sensor type
   \   000000A8   8162               LDD     R22, Z+2
   \   000000AA   01F9               MOVW    R31:R30, R19:R18
   \   000000AC   8140               LD      R20, Z
   \   000000AE   8151               LDD     R21, Z+1
   \   000000B0   8002               LDD     R0, Z+2
   \   000000B2   8013               LDD     R1, Z+3
   \   000000B4   01FA               MOVW    R31:R30, R21:R20
   \   000000B6   0DE0               ADD     R30, R0
   \   000000B8   1DF1               ADC     R31, R1
   \   000000BA   8360               ST      Z, R22
   \   000000BC   01F9               MOVW    R31:R30, R19:R18
   \   000000BE   8142               LDD     R20, Z+2
   \   000000C0   8153               LDD     R21, Z+3
   \   000000C2   5F4F               SUBI    R20, 255
   \   000000C4   4F5F               SBCI    R21, 255
   \   000000C6   8342               STD     Z+2, R20
   \   000000C8   8353               STD     Z+3, R21
    466          
    467              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000000CA   2F64               MOV     R22, R20
   \   000000CC   1B60               SUB     R22, R16
   \   000000CE   5062               SUBI    R22, 2
   \   000000D0   8140               LD      R20, Z
   \   000000D2   81F1               LDD     R31, Z+1
   \   000000D4   2FE4               MOV     R30, R20
   \   000000D6   0FE0               ADD     R30, R16
   \   000000D8   1FF1               ADC     R31, R17
   \   000000DA   8360               ST      Z, R22
    468              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000000DC   01F9               MOVW    R31:R30, R19:R18
   \   000000DE   8142               LDD     R20, Z+2
   \   000000E0   8153               LDD     R21, Z+3
   \   000000E2   1B40               SUB     R20, R16
   \   000000E4   0B51               SBC     R21, R17
   \   000000E6   5042               SUBI    R20, 2
   \   000000E8   4050               SBCI    R21, 0
   \   000000EA   8120               LD      R18, Z
   \   000000EC   8131               LDD     R19, Z+1
   \   000000EE   0F20               ADD     R18, R16
   \   000000F0   1F31               ADC     R19, R17
   \   000000F2   01F9               MOVW    R31:R30, R19:R18
   \   000000F4   8351               STD     Z+1, R21
    469          }
   \   000000F6   01D1               MOVW    R27:R26, R3:R2
   \   000000F8   9508               RET
    470          
    471          /*************************************************************************
    472          *
    473          * Build datablock of measured data for ADcard
    474          *
    475          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    476          void BuildMData485(char ch, short pointer) {
   \                     BuildMData485:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93AA               ST      -Y, R26
   \   00000006   939A               ST      -Y, R25
   \   00000008   938A               ST      -Y, R24
   \   0000000A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000A                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000A                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000A   2F40               MOV     R20, R16
   \   0000000C   0189               MOVW    R17:R16, R19:R18
    477          
    478              short ntna, i ;
    479              UART[ch].RxSendReply = true ;                               // flag for answering
   \   0000000E   E12A               LDI     R18, 26
   \   00000010   9F42               MUL     R20, R18
   \   00000012   0190               MOVW    R19:R18, R1:R0
   \   00000014   ....               SUBI    R18, LOW((-(UART) & 0xFFFF))
   \   00000016   ....               SBCI    R19, (-(UART) & 0xFFFF) >> 8
   \   00000018   E041               LDI     R20, 1
   \   0000001A   01F9               MOVW    R31:R30, R19:R18
   \   0000001C   8F41               STD     Z+25, R20
    480          
    481              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA & 0xff;
   \   0000001E   E765               LDI     R22, 117
   \   00000020   8140               LD      R20, Z
   \   00000022   8151               LDD     R21, Z+1
   \   00000024   8002               LDD     R0, Z+2
   \   00000026   8013               LDD     R1, Z+3
   \   00000028   01FA               MOVW    R31:R30, R21:R20
   \   0000002A   0DE0               ADD     R30, R0
   \   0000002C   1DF1               ADC     R31, R1
   \   0000002E   8360               ST      Z, R22
   \   00000030   01F9               MOVW    R31:R30, R19:R18
   \   00000032   8142               LDD     R20, Z+2
   \   00000034   8153               LDD     R21, Z+3
   \   00000036   5F4F               SUBI    R20, 255
   \   00000038   4F5F               SBCI    R21, 255
   \   0000003A   8342               STD     Z+2, R20
   \   0000003C   8353               STD     Z+3, R21
    482              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_MDATA >> 8;
   \   0000003E   E064               LDI     R22, 4
   \   00000040   8140               LD      R20, Z
   \   00000042   8151               LDD     R21, Z+1
   \   00000044   8002               LDD     R0, Z+2
   \   00000046   8013               LDD     R1, Z+3
   \   00000048   01FA               MOVW    R31:R30, R21:R20
   \   0000004A   0DE0               ADD     R30, R0
   \   0000004C   1DF1               ADC     R31, R1
   \   0000004E   8360               ST      Z, R22
   \   00000050   01F9               MOVW    R31:R30, R19:R18
   \   00000052   8142               LDD     R20, Z+2
   \   00000054   8153               LDD     R21, Z+3
   \   00000056   5F4F               SUBI    R20, 255
   \   00000058   4F5F               SBCI    R21, 255
   \   0000005A   8342               STD     Z+2, R20
   \   0000005C   8353               STD     Z+3, R21
    483              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000005E   011A               MOVW    R3:R2, R21:R20
    484              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000060   5F4E               SUBI    R20, 254
   \   00000062   4F5F               SBCI    R21, 255
   \   00000064   8342               STD     Z+2, R20
   \   00000066   8353               STD     Z+3, R21
    485          
    486              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \   00000068   8542               LDD     R20, Z+10
   \   0000006A   85F3               LDD     R31, Z+11
   \   0000006C   2FE4               MOV     R30, R20
   \   0000006E   0FE0               ADD     R30, R16
   \   00000070   1FF1               ADC     R31, R17
   \   00000072   8160               LD      R22, Z
   \   00000074   01F9               MOVW    R31:R30, R19:R18
   \   00000076   8140               LD      R20, Z
   \   00000078   8151               LDD     R21, Z+1
   \   0000007A   8002               LDD     R0, Z+2
   \   0000007C   8013               LDD     R1, Z+3
   \   0000007E   01FA               MOVW    R31:R30, R21:R20
   \   00000080   0DE0               ADD     R30, R0
   \   00000082   1DF1               ADC     R31, R1
   \   00000084   8360               ST      Z, R22
   \   00000086   01F9               MOVW    R31:R30, R19:R18
   \   00000088   8142               LDD     R20, Z+2
   \   0000008A   8153               LDD     R21, Z+3
   \   0000008C   5F4F               SUBI    R20, 255
   \   0000008E   4F5F               SBCI    R21, 255
   \   00000090   8342               STD     Z+2, R20
   \   00000092   8353               STD     Z+3, R21
    487              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.IOUnitStatus[UART[ch].pRxBuffer[pointer]] | (RestartStatus <<4); // IOUnit status +  restart status
   \   00000094   8542               LDD     R20, Z+10
   \   00000096   85F3               LDD     R31, Z+11
   \   00000098   2FE4               MOV     R30, R20
   \   0000009A   0FE0               ADD     R30, R16
   \   0000009C   1FF1               ADC     R31, R17
   \   0000009E   81E0               LD      R30, Z
   \   000000A0   E0F0               LDI     R31, 0
   \   000000A2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000A6   8163               LDD     R22, Z+3
   \   000000A8   9140....           LDS     R20, RestartStatus
   \   000000AC   9542               SWAP    R20
   \   000000AE   7F40               ANDI    R20, 0xF0
   \   000000B0   2B64               OR      R22, R20
   \   000000B2   01F9               MOVW    R31:R30, R19:R18
   \   000000B4   8140               LD      R20, Z
   \   000000B6   8151               LDD     R21, Z+1
   \   000000B8   8002               LDD     R0, Z+2
   \   000000BA   8013               LDD     R1, Z+3
   \   000000BC   01FA               MOVW    R31:R30, R21:R20
   \   000000BE   0DE0               ADD     R30, R0
   \   000000C0   1DF1               ADC     R31, R1
   \   000000C2   8360               ST      Z, R22
   \   000000C4   01F9               MOVW    R31:R30, R19:R18
   \   000000C6   8142               LDD     R20, Z+2
   \   000000C8   8153               LDD     R21, Z+3
   \   000000CA   5F4F               SUBI    R20, 255
   \   000000CC   4F5F               SBCI    R21, 255
   \   000000CE   8342               STD     Z+2, R20
   \   000000D0   8353               STD     Z+3, R21
    488              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] & 0xff; // Failcnt error
   \   000000D2   8542               LDD     R20, Z+10
   \   000000D4   85F3               LDD     R31, Z+11
   \   000000D6   2FE4               MOV     R30, R20
   \   000000D8   0FE0               ADD     R30, R16
   \   000000DA   1FF1               ADC     R31, R17
   \   000000DC   8140               LD      R20, Z
   \   000000DE   E054               LDI     R21, 4
   \   000000E0   9F45               MUL     R20, R21
   \   000000E2   01F0               MOVW    R31:R30, R1:R0
   \   000000E4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000E6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000E8   8563               LDD     R22, Z+11
   \   000000EA   01F9               MOVW    R31:R30, R19:R18
   \   000000EC   8140               LD      R20, Z
   \   000000EE   8151               LDD     R21, Z+1
   \   000000F0   8002               LDD     R0, Z+2
   \   000000F2   8013               LDD     R1, Z+3
   \   000000F4   01FA               MOVW    R31:R30, R21:R20
   \   000000F6   0DE0               ADD     R30, R0
   \   000000F8   1DF1               ADC     R31, R1
   \   000000FA   8360               ST      Z, R22
   \   000000FC   01F9               MOVW    R31:R30, R19:R18
   \   000000FE   8142               LDD     R20, Z+2
   \   00000100   8153               LDD     R21, Z+3
   \   00000102   5F4F               SUBI    R20, 255
   \   00000104   4F5F               SBCI    R21, 255
   \   00000106   8342               STD     Z+2, R20
   \   00000108   8353               STD     Z+3, R21
    489              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][0] >> 8) & 0xff; // Failcnt error
   \   0000010A   8542               LDD     R20, Z+10
   \   0000010C   85F3               LDD     R31, Z+11
   \   0000010E   2FE4               MOV     R30, R20
   \   00000110   0FE0               ADD     R30, R16
   \   00000112   1FF1               ADC     R31, R17
   \   00000114   8140               LD      R20, Z
   \   00000116   E054               LDI     R21, 4
   \   00000118   9F45               MUL     R20, R21
   \   0000011A   01F0               MOVW    R31:R30, R1:R0
   \   0000011C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000011E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000120   8564               LDD     R22, Z+12
   \   00000122   01F9               MOVW    R31:R30, R19:R18
   \   00000124   8140               LD      R20, Z
   \   00000126   8151               LDD     R21, Z+1
   \   00000128   8002               LDD     R0, Z+2
   \   0000012A   8013               LDD     R1, Z+3
   \   0000012C   01FA               MOVW    R31:R30, R21:R20
   \   0000012E   0DE0               ADD     R30, R0
   \   00000130   1DF1               ADC     R31, R1
   \   00000132   8360               ST      Z, R22
   \   00000134   01F9               MOVW    R31:R30, R19:R18
   \   00000136   8142               LDD     R20, Z+2
   \   00000138   8153               LDD     R21, Z+3
   \   0000013A   5F4F               SUBI    R20, 255
   \   0000013C   4F5F               SBCI    R21, 255
   \   0000013E   8342               STD     Z+2, R20
   \   00000140   8353               STD     Z+3, R21
    490              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] & 0xff; // Failcnt total
   \   00000142   8542               LDD     R20, Z+10
   \   00000144   85F3               LDD     R31, Z+11
   \   00000146   2FE4               MOV     R30, R20
   \   00000148   0FE0               ADD     R30, R16
   \   0000014A   1FF1               ADC     R31, R17
   \   0000014C   8140               LD      R20, Z
   \   0000014E   E054               LDI     R21, 4
   \   00000150   9F45               MUL     R20, R21
   \   00000152   01F0               MOVW    R31:R30, R1:R0
   \   00000154   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000156   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000158   8565               LDD     R22, Z+13
   \   0000015A   01F9               MOVW    R31:R30, R19:R18
   \   0000015C   8140               LD      R20, Z
   \   0000015E   8151               LDD     R21, Z+1
   \   00000160   8002               LDD     R0, Z+2
   \   00000162   8013               LDD     R1, Z+3
   \   00000164   01FA               MOVW    R31:R30, R21:R20
   \   00000166   0DE0               ADD     R30, R0
   \   00000168   1DF1               ADC     R31, R1
   \   0000016A   8360               ST      Z, R22
   \   0000016C   01F9               MOVW    R31:R30, R19:R18
   \   0000016E   8142               LDD     R20, Z+2
   \   00000170   8153               LDD     R21, Z+3
   \   00000172   5F4F               SUBI    R20, 255
   \   00000174   4F5F               SBCI    R21, 255
   \   00000176   8342               STD     Z+2, R20
   \   00000178   8353               STD     Z+3, R21
    491              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.RS4.FailCnt[UART[ch].pRxBuffer[pointer]][1] >> 8) & 0xff; // Failcnt total
   \   0000017A   8542               LDD     R20, Z+10
   \   0000017C   85F3               LDD     R31, Z+11
   \   0000017E   2FE4               MOV     R30, R20
   \   00000180   0FE0               ADD     R30, R16
   \   00000182   1FF1               ADC     R31, R17
   \   00000184   8140               LD      R20, Z
   \   00000186   E054               LDI     R21, 4
   \   00000188   9F45               MUL     R20, R21
   \   0000018A   01F0               MOVW    R31:R30, R1:R0
   \   0000018C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000018E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000190   8566               LDD     R22, Z+14
   \   00000192   01F9               MOVW    R31:R30, R19:R18
   \   00000194   8140               LD      R20, Z
   \   00000196   8151               LDD     R21, Z+1
   \   00000198   8002               LDD     R0, Z+2
   \   0000019A   8013               LDD     R1, Z+3
   \   0000019C   01FA               MOVW    R31:R30, R21:R20
   \   0000019E   0DE0               ADD     R30, R0
   \   000001A0   1DF1               ADC     R31, R1
   \   000001A2   8360               ST      Z, R22
   \   000001A4   01F9               MOVW    R31:R30, R19:R18
   \   000001A6   8142               LDD     R20, Z+2
   \   000001A8   8153               LDD     R21, Z+3
   \   000001AA   5F4F               SUBI    R20, 255
   \   000001AC   4F5F               SBCI    R21, 255
   \   000001AE   8342               STD     Z+2, R20
   \   000001B0   8353               STD     Z+3, R21
    492              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusSWVer[UART[ch].pRxBuffer[pointer]] ; // Target status byte 1
   \   000001B2   8542               LDD     R20, Z+10
   \   000001B4   85F3               LDD     R31, Z+11
   \   000001B6   2FE4               MOV     R30, R20
   \   000001B8   0FE0               ADD     R30, R16
   \   000001BA   1FF1               ADC     R31, R17
   \   000001BC   81E0               LD      R30, Z
   \   000001BE   E0F0               LDI     R31, 0
   \   000001C0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001C2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001C4   A563               LDD     R22, Z+43
   \   000001C6   01F9               MOVW    R31:R30, R19:R18
   \   000001C8   8140               LD      R20, Z
   \   000001CA   8151               LDD     R21, Z+1
   \   000001CC   8002               LDD     R0, Z+2
   \   000001CE   8013               LDD     R1, Z+3
   \   000001D0   01FA               MOVW    R31:R30, R21:R20
   \   000001D2   0DE0               ADD     R30, R0
   \   000001D4   1DF1               ADC     R31, R1
   \   000001D6   8360               ST      Z, R22
   \   000001D8   01F9               MOVW    R31:R30, R19:R18
   \   000001DA   8142               LDD     R20, Z+2
   \   000001DC   8153               LDD     R21, Z+3
   \   000001DE   5F4F               SUBI    R20, 255
   \   000001E0   4F5F               SBCI    R21, 255
   \   000001E2   8342               STD     Z+2, R20
   \   000001E4   8353               STD     Z+3, R21
    493              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] ; // Target status byte 2
   \   000001E6   8542               LDD     R20, Z+10
   \   000001E8   85F3               LDD     R31, Z+11
   \   000001EA   2FE4               MOV     R30, R20
   \   000001EC   0FE0               ADD     R30, R16
   \   000001EE   1FF1               ADC     R31, R17
   \   000001F0   81E0               LD      R30, Z
   \   000001F2   E0F0               LDI     R31, 0
   \   000001F4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001F6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001F8   A963               LDD     R22, Z+51
   \   000001FA   01F9               MOVW    R31:R30, R19:R18
   \   000001FC   8140               LD      R20, Z
   \   000001FE   8151               LDD     R21, Z+1
   \   00000200   8002               LDD     R0, Z+2
   \   00000202   8013               LDD     R1, Z+3
   \   00000204   01FA               MOVW    R31:R30, R21:R20
   \   00000206   0DE0               ADD     R30, R0
   \   00000208   1DF1               ADC     R31, R1
   \   0000020A   8360               ST      Z, R22
   \   0000020C   01F9               MOVW    R31:R30, R19:R18
   \   0000020E   8142               LDD     R20, Z+2
   \   00000210   8153               LDD     R21, Z+3
   \   00000212   5F4F               SUBI    R20, 255
   \   00000214   4F5F               SBCI    R21, 255
   \   00000216   8342               STD     Z+2, R20
   \   00000218   8353               STD     Z+3, R21
    494          
    495              TData.RS4.TargetStatusAddress[UART[ch].pRxBuffer[pointer]] &= ~0x80;                                  //reset restart flag for adcard
   \   0000021A   8542               LDD     R20, Z+10
   \   0000021C   85F3               LDD     R31, Z+11
   \   0000021E   2FE4               MOV     R30, R20
   \   00000220   0FE0               ADD     R30, R16
   \   00000222   1FF1               ADC     R31, R17
   \   00000224   81E0               LD      R30, Z
   \   00000226   E0F0               LDI     R31, 0
   \   00000228   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000022A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000022C   A943               LDD     R20, Z+51
   \   0000022E   774F               ANDI    R20, 0x7F
   \   00000230   AB43               STD     Z+51, R20
    496          
    497              for (i = 0; i < 14; i++) {
   \   00000232   E080               LDI     R24, 0
   \   00000234   E090               LDI     R25, 0
   \   00000236   E0AE               LDI     R26, 14
    498                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup1[UART[ch].pRxBuffer[pointer]][i] ;
   \                     ??BuildMData485_0:
   \   00000238   01F9               MOVW    R31:R30, R19:R18
   \   0000023A   8542               LDD     R20, Z+10
   \   0000023C   85F3               LDD     R31, Z+11
   \   0000023E   2FE4               MOV     R30, R20
   \   00000240   0FE0               ADD     R30, R16
   \   00000242   1FF1               ADC     R31, R17
   \   00000244   8140               LD      R20, Z
   \   00000246   E05E               LDI     R21, 14
   \   00000248   9F45               MUL     R20, R21
   \   0000024A   ....               LDI     R20, LOW(TData)
   \   0000024C   0E04               ADD     R0, R20
   \   0000024E   ....               LDI     R20, (TData) >> 8
   \   00000250   1E14               ADC     R1, R20
   \   00000252   0E08               ADD     R0, R24
   \   00000254   1E19               ADC     R1, R25
   \   00000256   01F0               MOVW    R31:R30, R1:R0
   \   00000258   AD63               LDD     R22, Z+59
   \   0000025A   01F9               MOVW    R31:R30, R19:R18
   \   0000025C   8140               LD      R20, Z
   \   0000025E   8151               LDD     R21, Z+1
   \   00000260   8002               LDD     R0, Z+2
   \   00000262   8013               LDD     R1, Z+3
   \   00000264   01FA               MOVW    R31:R30, R21:R20
   \   00000266   0DE0               ADD     R30, R0
   \   00000268   1DF1               ADC     R31, R1
   \   0000026A   8360               ST      Z, R22
   \   0000026C   01F9               MOVW    R31:R30, R19:R18
   \   0000026E   8142               LDD     R20, Z+2
   \   00000270   8153               LDD     R21, Z+3
   \   00000272   5F4F               SUBI    R20, 255
   \   00000274   4F5F               SBCI    R21, 255
   \   00000276   8342               STD     Z+2, R20
   \   00000278   8353               STD     Z+3, R21
    499                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.RS4.TargetSetup2[UART[ch].pRxBuffer[pointer]][i] ;
   \   0000027A   8542               LDD     R20, Z+10
   \   0000027C   85F3               LDD     R31, Z+11
   \   0000027E   2FE4               MOV     R30, R20
   \   00000280   0FE0               ADD     R30, R16
   \   00000282   1FF1               ADC     R31, R17
   \   00000284   8140               LD      R20, Z
   \   00000286   E05E               LDI     R21, 14
   \   00000288   9F45               MUL     R20, R21
   \   0000028A   ....               LDI     R20, LOW(TData)
   \   0000028C   0E04               ADD     R0, R20
   \   0000028E   ....               LDI     R20, (TData) >> 8
   \   00000290   1E14               ADC     R1, R20
   \   00000292   0E08               ADD     R0, R24
   \   00000294   1E19               ADC     R1, R25
   \   00000296   01F0               MOVW    R31:R30, R1:R0
   \   00000298   55E5               SUBI    R30, 85
   \   0000029A   4FFF               SBCI    R31, 255
   \   0000029C   8160               LD      R22, Z
   \   0000029E   01F9               MOVW    R31:R30, R19:R18
   \   000002A0   8140               LD      R20, Z
   \   000002A2   8151               LDD     R21, Z+1
   \   000002A4   8002               LDD     R0, Z+2
   \   000002A6   8013               LDD     R1, Z+3
   \   000002A8   01FA               MOVW    R31:R30, R21:R20
   \   000002AA   0DE0               ADD     R30, R0
   \   000002AC   1DF1               ADC     R31, R1
   \   000002AE   8360               ST      Z, R22
   \   000002B0   01F9               MOVW    R31:R30, R19:R18
   \   000002B2   8142               LDD     R20, Z+2
   \   000002B4   8153               LDD     R21, Z+3
   \   000002B6   5F4F               SUBI    R20, 255
   \   000002B8   4F5F               SBCI    R21, 255
   \   000002BA   8342               STD     Z+2, R20
   \   000002BC   8353               STD     Z+3, R21
    500                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.RS4.Result[UART[ch].pRxBuffer[pointer]][i]) ;   // ADresult
   \   000002BE   8542               LDD     R20, Z+10
   \   000002C0   85F3               LDD     R31, Z+11
   \   000002C2   2FE4               MOV     R30, R20
   \   000002C4   0FE0               ADD     R30, R16
   \   000002C6   1FF1               ADC     R31, R17
   \   000002C8   8140               LD      R20, Z
   \   000002CA   E358               LDI     R21, 56
   \   000002CC   9F45               MUL     R20, R21
   \   000002CE   ....               LDI     R20, LOW(TData)
   \   000002D0   0E04               ADD     R0, R20
   \   000002D2   ....               LDI     R20, (TData) >> 8
   \   000002D4   1E14               ADC     R1, R20
   \   000002D6   01AC               MOVW    R21:R20, R25:R24
   \   000002D8   0F44               LSL     R20
   \   000002DA   1F55               ROL     R21
   \   000002DC   0F44               LSL     R20
   \   000002DE   1F55               ROL     R21
   \   000002E0   0E04               ADD     R0, R20
   \   000002E2   1E15               ADC     R1, R21
   \   000002E4   01F0               MOVW    R31:R30, R1:R0
   \   000002E6   52E5               SUBI    R30, 37
   \   000002E8   4FFD               SBCI    R31, 253
   \   000002EA   8140               LD      R20, Z
   \   000002EC   8151               LDD     R21, Z+1
   \   000002EE   8162               LDD     R22, Z+2
   \   000002F0   8173               LDD     R23, Z+3
   \   000002F2   01F9               MOVW    R31:R30, R19:R18
   \   000002F4   8000               LD      R0, Z
   \   000002F6   8011               LDD     R1, Z+1
   \   000002F8   8042               LDD     R4, Z+2
   \   000002FA   8053               LDD     R5, Z+3
   \   000002FC   01F0               MOVW    R31:R30, R1:R0
   \   000002FE   0DE4               ADD     R30, R4
   \   00000300   1DF5               ADC     R31, R5
   \   00000302   8340               ST      Z, R20
   \   00000304   8351               STD     Z+1, R21
   \   00000306   8362               STD     Z+2, R22
   \   00000308   8373               STD     Z+3, R23
    501                  UART[ch].TxFirst += sizeof(float) ;
   \   0000030A   01F9               MOVW    R31:R30, R19:R18
   \   0000030C   8142               LDD     R20, Z+2
   \   0000030E   8153               LDD     R21, Z+3
   \   00000310   5F4C               SUBI    R20, 252
   \   00000312   4F5F               SBCI    R21, 255
   \   00000314   8342               STD     Z+2, R20
   \   00000316   8353               STD     Z+3, R21
    502              }
   \   00000318   9601               ADIW    R25:R24, 1
   \   0000031A   95AA               DEC     R26
   \   0000031C   F009               BREQ    $+2+2
   \   0000031E   CF8C               RJMP    ??BuildMData485_0
    503          
    504              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000320   8142               LDD     R20, Z+2
   \   00000322   1942               SUB     R20, R2
   \   00000324   5042               SUBI    R20, 2
   \   00000326   8100               LD      R16, Z
   \   00000328   81F1               LDD     R31, Z+1
   \   0000032A   2FE0               MOV     R30, R16
   \   0000032C   0DE2               ADD     R30, R2
   \   0000032E   1DF3               ADC     R31, R3
   \   00000330   8340               ST      Z, R20
    505              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000332   01F9               MOVW    R31:R30, R19:R18
   \   00000334   8102               LDD     R16, Z+2
   \   00000336   8113               LDD     R17, Z+3
   \   00000338   1902               SUB     R16, R2
   \   0000033A   0913               SBC     R17, R3
   \   0000033C   5002               SUBI    R16, 2
   \   0000033E   4010               SBCI    R17, 0
   \   00000340   2F41               MOV     R20, R17
   \   00000342   8100               LD      R16, Z
   \   00000344   8111               LDD     R17, Z+1
   \   00000346   0D02               ADD     R16, R2
   \   00000348   1D13               ADC     R17, R3
   \   0000034A   01F8               MOVW    R31:R30, R17:R16
   \   0000034C   8341               STD     Z+1, R20
    506          
    507          }
   \   0000034E   9189               LD      R24, Y+
   \   00000350   9199               LD      R25, Y+
   \   00000352   91A9               LD      R26, Y+
   \   00000354   9049               LD      R4, Y+
   \   00000356   9059               LD      R5, Y+
   \   00000358   9508               RET
    508          
    509          /*************************************************************************
    510          *
    511          * Build datablock of raw and cal data for ADcard
    512          *
    513          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    514          void BuildRData485(char ch, short pointer) {
   \                     BuildRData485:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    515          
    516              short ntna, i ;
    517              UART[ch].RxSendReply = true ;                               // flag for answering
   \   0000000C   E11A               LDI     R17, 26
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   01A0               MOVW    R21:R20, R1:R0
   \   00000012   ....               SUBI    R20, LOW((-(UART) & 0xFFFF))
   \   00000014   ....               SBCI    R21, (-(UART) & 0xFFFF) >> 8
   \   00000016   E001               LDI     R16, 1
   \   00000018   01FA               MOVW    R31:R30, R21:R20
   \   0000001A   8F01               STD     Z+25, R16
    518          
    519              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA & 0xff;
   \   0000001C   E766               LDI     R22, 118
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   8002               LDD     R0, Z+2
   \   00000024   8013               LDD     R1, Z+3
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   0DE0               ADD     R30, R0
   \   0000002A   1DF1               ADC     R31, R1
   \   0000002C   8360               ST      Z, R22
   \   0000002E   01FA               MOVW    R31:R30, R21:R20
   \   00000030   8102               LDD     R16, Z+2
   \   00000032   8113               LDD     R17, Z+3
   \   00000034   5F0F               SUBI    R16, 255
   \   00000036   4F1F               SBCI    R17, 255
   \   00000038   8302               STD     Z+2, R16
   \   0000003A   8313               STD     Z+3, R17
    520              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_RS4_RDATA >> 8;
   \   0000003C   E064               LDI     R22, 4
   \   0000003E   8100               LD      R16, Z
   \   00000040   8111               LDD     R17, Z+1
   \   00000042   8002               LDD     R0, Z+2
   \   00000044   8013               LDD     R1, Z+3
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   0DE0               ADD     R30, R0
   \   0000004A   1DF1               ADC     R31, R1
   \   0000004C   8360               ST      Z, R22
   \   0000004E   01FA               MOVW    R31:R30, R21:R20
   \   00000050   8102               LDD     R16, Z+2
   \   00000052   8113               LDD     R17, Z+3
   \   00000054   5F0F               SUBI    R16, 255
   \   00000056   4F1F               SBCI    R17, 255
   \   00000058   8302               STD     Z+2, R16
   \   0000005A   8313               STD     Z+3, R17
    521              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   0000005C   0118               MOVW    R3:R2, R17:R16
    522              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000005E   5F0E               SUBI    R16, 254
   \   00000060   4F1F               SBCI    R17, 255
   \   00000062   8302               STD     Z+2, R16
   \   00000064   8313               STD     Z+3, R17
    523          
    524              UART[ch].pTxBuffer[UART[ch].TxFirst++] = UART[ch].pRxBuffer[pointer] ;
   \   00000066   8502               LDD     R16, Z+10
   \   00000068   85F3               LDD     R31, Z+11
   \   0000006A   2FE0               MOV     R30, R16
   \   0000006C   0FE2               ADD     R30, R18
   \   0000006E   1FF3               ADC     R31, R19
   \   00000070   8160               LD      R22, Z
   \   00000072   01FA               MOVW    R31:R30, R21:R20
   \   00000074   8100               LD      R16, Z
   \   00000076   8111               LDD     R17, Z+1
   \   00000078   8002               LDD     R0, Z+2
   \   0000007A   8013               LDD     R1, Z+3
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   0DE0               ADD     R30, R0
   \   00000080   1DF1               ADC     R31, R1
   \   00000082   8360               ST      Z, R22
   \   00000084   01FA               MOVW    R31:R30, R21:R20
   \   00000086   8102               LDD     R16, Z+2
   \   00000088   8113               LDD     R17, Z+3
   \   0000008A   5F0F               SUBI    R16, 255
   \   0000008C   4F1F               SBCI    R17, 255
   \   0000008E   8302               STD     Z+2, R16
   \   00000090   8313               STD     Z+3, R17
    525              for (i = 0; i < 14; i++) {
   \   00000092   E080               LDI     R24, 0
   \   00000094   E090               LDI     R25, 0
   \   00000096   0189               MOVW    R17:R16, R19:R18
   \   00000098   E02E               LDI     R18, 14
    526                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Raw[UART[ch].pRxBuffer[pointer]][i]) ;   // Raw data
   \                     ??BuildRData485_0:
   \   0000009A   01BC               MOVW    R23:R22, R25:R24
   \   0000009C   0F66               LSL     R22
   \   0000009E   1F77               ROL     R23
   \   000000A0   8402               LDD     R0, Z+10
   \   000000A2   85F3               LDD     R31, Z+11
   \   000000A4   2DE0               MOV     R30, R0
   \   000000A6   0FE0               ADD     R30, R16
   \   000000A8   1FF1               ADC     R31, R17
   \   000000AA   8130               LD      R19, Z
   \   000000AC   E1EC               LDI     R30, 28
   \   000000AE   9F3E               MUL     R19, R30
   \   000000B0   ....               LDI     R19, LOW(TData)
   \   000000B2   0E03               ADD     R0, R19
   \   000000B4   ....               LDI     R19, (TData) >> 8
   \   000000B6   1E13               ADC     R1, R19
   \   000000B8   0E06               ADD     R0, R22
   \   000000BA   1E17               ADC     R1, R23
   \   000000BC   01F0               MOVW    R31:R30, R1:R0
   \   000000BE   5EE5               SUBI    R30, 229
   \   000000C0   4FFE               SBCI    R31, 254
   \   000000C2   81A0               LD      R26, Z
   \   000000C4   81B1               LDD     R27, Z+1
   \   000000C6   01FA               MOVW    R31:R30, R21:R20
   \   000000C8   8000               LD      R0, Z
   \   000000CA   8011               LDD     R1, Z+1
   \   000000CC   8042               LDD     R4, Z+2
   \   000000CE   8053               LDD     R5, Z+3
   \   000000D0   01F0               MOVW    R31:R30, R1:R0
   \   000000D2   0DE4               ADD     R30, R4
   \   000000D4   1DF5               ADC     R31, R5
   \   000000D6   83A0               ST      Z, R26
   \   000000D8   83B1               STD     Z+1, R27
    527                  UART[ch].TxFirst += sizeof(short) ;
   \   000000DA   01FA               MOVW    R31:R30, R21:R20
   \   000000DC   81A2               LDD     R26, Z+2
   \   000000DE   81B3               LDD     R27, Z+3
   \   000000E0   9612               ADIW    R27:R26, 2
   \   000000E2   83A2               STD     Z+2, R26
   \   000000E4   83B3               STD     Z+3, R27
    528                  *((short*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((short*)&TData.RS4.Cal[UART[ch].pRxBuffer[pointer]][i]) ;   // Cal data
   \   000000E6   8402               LDD     R0, Z+10
   \   000000E8   85F3               LDD     R31, Z+11
   \   000000EA   2DE0               MOV     R30, R0
   \   000000EC   0FE0               ADD     R30, R16
   \   000000EE   1FF1               ADC     R31, R17
   \   000000F0   8130               LD      R19, Z
   \   000000F2   E1EC               LDI     R30, 28
   \   000000F4   9F3E               MUL     R19, R30
   \   000000F6   ....               LDI     R19, LOW(TData)
   \   000000F8   0E03               ADD     R0, R19
   \   000000FA   ....               LDI     R19, (TData) >> 8
   \   000000FC   1E13               ADC     R1, R19
   \   000000FE   0E06               ADD     R0, R22
   \   00000100   1E17               ADC     R1, R23
   \   00000102   01F0               MOVW    R31:R30, R1:R0
   \   00000104   50E5               SUBI    R30, 5
   \   00000106   4FFE               SBCI    R31, 254
   \   00000108   8000               LD      R0, Z
   \   0000010A   8011               LDD     R1, Z+1
   \   0000010C   01FA               MOVW    R31:R30, R21:R20
   \   0000010E   8160               LD      R22, Z
   \   00000110   8171               LDD     R23, Z+1
   \   00000112   81A2               LDD     R26, Z+2
   \   00000114   01FB               MOVW    R31:R30, R23:R22
   \   00000116   0FEA               ADD     R30, R26
   \   00000118   1FFB               ADC     R31, R27
   \   0000011A   8200               ST      Z, R0
   \   0000011C   8211               STD     Z+1, R1
    529                  UART[ch].TxFirst += sizeof(short) ;
   \   0000011E   01FA               MOVW    R31:R30, R21:R20
   \   00000120   8162               LDD     R22, Z+2
   \   00000122   8173               LDD     R23, Z+3
   \   00000124   5F6E               SUBI    R22, 254
   \   00000126   4F7F               SBCI    R23, 255
   \   00000128   8362               STD     Z+2, R22
   \   0000012A   8373               STD     Z+3, R23
    530              }
   \   0000012C   9601               ADIW    R25:R24, 1
   \   0000012E   952A               DEC     R18
   \   00000130   F009               BREQ    $+2+2
   \   00000132   CFB3               RJMP    ??BuildRData485_0
    531          
    532              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000134   8122               LDD     R18, Z+2
   \   00000136   1922               SUB     R18, R2
   \   00000138   5022               SUBI    R18, 2
   \   0000013A   8100               LD      R16, Z
   \   0000013C   81F1               LDD     R31, Z+1
   \   0000013E   2FE0               MOV     R30, R16
   \   00000140   0DE2               ADD     R30, R2
   \   00000142   1DF3               ADC     R31, R3
   \   00000144   8320               ST      Z, R18
    533              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000146   01FA               MOVW    R31:R30, R21:R20
   \   00000148   8102               LDD     R16, Z+2
   \   0000014A   8113               LDD     R17, Z+3
   \   0000014C   1902               SUB     R16, R2
   \   0000014E   0913               SBC     R17, R3
   \   00000150   5002               SUBI    R16, 2
   \   00000152   4010               SBCI    R17, 0
   \   00000154   2F21               MOV     R18, R17
   \   00000156   8100               LD      R16, Z
   \   00000158   8111               LDD     R17, Z+1
   \   0000015A   0D02               ADD     R16, R2
   \   0000015C   1D13               ADC     R17, R3
   \   0000015E   01F8               MOVW    R31:R30, R17:R16
   \   00000160   8321               STD     Z+1, R18
    534          
    535          }
   \   00000162   ....               RJMP    ?Subroutine0
    536          
    537          /*************************************************************************
    538          *
    539          * Build setup data package for AN-ZBANA
    540          *
    541          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    542          void BuildANASetup(char ch, short pointer) {
   \                     BuildANASetup:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    543          
    544              short ntna ;
    545              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   8F01               STD     Z+25, R16
    546          
    547              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP & 0xff;
   \   00000010   EB0B               LDI     R16, 187
   \   00000012   81A0               LD      R26, Z
   \   00000014   81B1               LDD     R27, Z+1
   \   00000016   8122               LDD     R18, Z+2
   \   00000018   8133               LDD     R19, Z+3
   \   0000001A   0FA2               ADD     R26, R18
   \   0000001C   1FB3               ADC     R27, R19
   \   0000001E   930C               ST      X, R16
   \   00000020   8102               LDD     R16, Z+2
   \   00000022   8113               LDD     R17, Z+3
   \   00000024   5F0F               SUBI    R16, 255
   \   00000026   4F1F               SBCI    R17, 255
   \   00000028   8302               STD     Z+2, R16
   \   0000002A   8313               STD     Z+3, R17
    548              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_SETUP >> 8;
   \   0000002C   E004               LDI     R16, 4
   \   0000002E   81A0               LD      R26, Z
   \   00000030   81B1               LDD     R27, Z+1
   \   00000032   8122               LDD     R18, Z+2
   \   00000034   0FA2               ADD     R26, R18
   \   00000036   1FB1               ADC     R27, R17
   \   00000038   930C               ST      X, R16
   \   0000003A   8102               LDD     R16, Z+2
   \   0000003C   8113               LDD     R17, Z+3
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8302               STD     Z+2, R16
   \   00000044   8313               STD     Z+3, R17
    549              ntna = UART[ch].TxFirst ;                                    /* remember index */
    550              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000046   0198               MOVW    R19:R18, R17:R16
   \   00000048   5F2E               SUBI    R18, 254
   \   0000004A   4F3F               SBCI    R19, 255
   \   0000004C   8322               STD     Z+2, R18
   \   0000004E   8333               STD     Z+3, R19
    551          
    552              UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.PortUsed & 0xff;
   \   00000050   9120....           LDS     R18, TData
   \   00000054   81A0               LD      R26, Z
   \   00000056   81B1               LDD     R27, Z+1
   \   00000058   8142               LDD     R20, Z+2
   \   0000005A   0FA4               ADD     R26, R20
   \   0000005C   1FB3               ADC     R27, R19
   \   0000005E   932C               ST      X, R18
   \   00000060   8122               LDD     R18, Z+2
   \   00000062   8133               LDD     R19, Z+3
   \   00000064   5F2F               SUBI    R18, 255
   \   00000066   4F3F               SBCI    R19, 255
   \   00000068   8322               STD     Z+2, R18
   \   0000006A   8333               STD     Z+3, R19
    553              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (TData.Ana.PortUsed >> 8) & 0xff;
   \   0000006C   9130....           LDS     R19, (TData + 1)
   \   00000070   81A0               LD      R26, Z
   \   00000072   81B1               LDD     R27, Z+1
   \   00000074   8142               LDD     R20, Z+2
   \   00000076   8153               LDD     R21, Z+3
   \   00000078   0FA4               ADD     R26, R20
   \   0000007A   1FB5               ADC     R27, R21
   \   0000007C   933C               ST      X, R19
   \   0000007E   8122               LDD     R18, Z+2
   \   00000080   8133               LDD     R19, Z+3
   \   00000082   5F2F               SUBI    R18, 255
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   8322               STD     Z+2, R18
   \   00000088   8333               STD     Z+3, R19
    554          
    555              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   0000008A   1B20               SUB     R18, R16
   \   0000008C   5022               SUBI    R18, 2
   \   0000008E   81A0               LD      R26, Z
   \   00000090   81B1               LDD     R27, Z+1
   \   00000092   0FA0               ADD     R26, R16
   \   00000094   1FB1               ADC     R27, R17
   \   00000096   932C               ST      X, R18
    556              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000098   8122               LDD     R18, Z+2
   \   0000009A   8133               LDD     R19, Z+3
   \   0000009C   1B20               SUB     R18, R16
   \   0000009E   0B31               SBC     R19, R17
   \   000000A0   5022               SUBI    R18, 2
   \   000000A2   4030               SBCI    R19, 0
   \   000000A4   2F43               MOV     R20, R19
   \   000000A6   8120               LD      R18, Z
   \   000000A8   8131               LDD     R19, Z+1
   \   000000AA   0F20               ADD     R18, R16
   \   000000AC   1F31               ADC     R19, R17
   \   000000AE   01F9               MOVW    R31:R30, R19:R18
   \   000000B0   8341               STD     Z+1, R20
    557          }
   \   000000B2   01DB               MOVW    R27:R26, R23:R22
   \   000000B4   9508               RET
    558          
    559          /*************************************************************************
    560          *
    561          * Build filter data package for AN-ZBANA
    562          *
    563          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    564          void BuildANAFilter(char ch, short pointer) {
   \                     BuildANAFilter:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   011C               MOVW    R3:R2, R25:R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
    565          
    566              char port;
    567              short ntna ;
    568              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000006   E11A               LDI     R17, 26
   \   00000008   9F01               MUL     R16, R17
   \   0000000A   01D0               MOVW    R27:R26, R1:R0
   \   0000000C   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000000E   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000010   E001               LDI     R16, 1
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   8F01               STD     Z+25, R16
    569          
    570              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER & 0xff;
   \   00000016   EC2F               LDI     R18, 207
   \   00000018   8100               LD      R16, Z
   \   0000001A   8111               LDD     R17, Z+1
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8320               ST      Z, R18
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   8302               STD     Z+2, R16
   \   00000034   8313               STD     Z+3, R17
    571              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_FILTER >> 8;
   \   00000036   E024               LDI     R18, 4
   \   00000038   8100               LD      R16, Z
   \   0000003A   8111               LDD     R17, Z+1
   \   0000003C   8142               LDD     R20, Z+2
   \   0000003E   8153               LDD     R21, Z+3
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   0FE4               ADD     R30, R20
   \   00000044   1FF5               ADC     R31, R21
   \   00000046   8320               ST      Z, R18
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    572              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   00000056   0198               MOVW    R19:R18, R17:R16
    573              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   00000058   5F0E               SUBI    R16, 254
   \   0000005A   4F1F               SBCI    R17, 255
   \   0000005C   8302               STD     Z+2, R16
   \   0000005E   8313               STD     Z+3, R17
    574          
    575              for (port = 0; port < 12; port++) {
   \   00000060   ....               LDI     R24, LOW(TData)
   \   00000062   ....               LDI     R25, (TData) >> 8
   \   00000064   E04C               LDI     R20, 12
    576                  #if USE_MODBUS_PROTOCOL == 1
    577                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (char)TData.Ana.Filter[port];
    578                  #else
    579                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Filter[port];
   \                     ??BuildANAFilter_0:
   \   00000066   01FC               MOVW    R31:R30, R25:R24
   \   00000068   8152               LDD     R21, Z+2
   \   0000006A   01FD               MOVW    R31:R30, R27:R26
   \   0000006C   8100               LD      R16, Z
   \   0000006E   8111               LDD     R17, Z+1
   \   00000070   8162               LDD     R22, Z+2
   \   00000072   8173               LDD     R23, Z+3
   \   00000074   01F8               MOVW    R31:R30, R17:R16
   \   00000076   0FE6               ADD     R30, R22
   \   00000078   1FF7               ADC     R31, R23
   \   0000007A   8350               ST      Z, R21
   \   0000007C   01FD               MOVW    R31:R30, R27:R26
   \   0000007E   8102               LDD     R16, Z+2
   \   00000080   8113               LDD     R17, Z+3
   \   00000082   5F0F               SUBI    R16, 255
   \   00000084   4F1F               SBCI    R17, 255
   \   00000086   8302               STD     Z+2, R16
   \   00000088   8313               STD     Z+3, R17
    580                  #endif
    581              }
   \   0000008A   9601               ADIW    R25:R24, 1
   \   0000008C   954A               DEC     R20
   \   0000008E   F759               BRNE    ??BuildANAFilter_0
    582          
    583              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   00000090   8102               LDD     R16, Z+2
   \   00000092   1B02               SUB     R16, R18
   \   00000094   5002               SUBI    R16, 2
   \   00000096   91ED               LD      R30, X+
   \   00000098   91FC               LD      R31, X
   \   0000009A   9711               SBIW    R27:R26, 1
   \   0000009C   0FE2               ADD     R30, R18
   \   0000009E   1FF3               ADC     R31, R19
   \   000000A0   8300               ST      Z, R16
    584              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   000000A2   01FD               MOVW    R31:R30, R27:R26
   \   000000A4   8102               LDD     R16, Z+2
   \   000000A6   8113               LDD     R17, Z+3
   \   000000A8   1B02               SUB     R16, R18
   \   000000AA   0B13               SBC     R17, R19
   \   000000AC   5002               SUBI    R16, 2
   \   000000AE   4010               SBCI    R17, 0
   \   000000B0   91ED               LD      R30, X+
   \   000000B2   91FC               LD      R31, X
   \   000000B4   0FE2               ADD     R30, R18
   \   000000B6   1FF3               ADC     R31, R19
   \   000000B8   8311               STD     Z+1, R17
    585          }
   \   000000BA   01C1               MOVW    R25:R24, R3:R2
   \   000000BC   91A9               LD      R26, Y+
   \   000000BE   91B9               LD      R27, Y+
   \   000000C0   9508               RET
    586          
    587          /*************************************************************************
    588          *
    589          * Build datablock for External AD (ANA)
    590          *
    591          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    592          void BuildMDataANA(char ch, short pointer) {
   \                     BuildMDataANA:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    593          
    594              short ntna, i ;
    595              UART[ch].RxSendReply = true ;                               // flag for answering
   \   0000000C   E11A               LDI     R17, 26
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   01C0               MOVW    R25:R24, R1:R0
   \   00000012   ....               SUBI    R24, LOW((-(UART) & 0xFFFF))
   \   00000014   ....               SBCI    R25, (-(UART) & 0xFFFF) >> 8
   \   00000016   E001               LDI     R16, 1
   \   00000018   01FC               MOVW    R31:R30, R25:R24
   \   0000001A   8F01               STD     Z+25, R16
    596          
    597              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA & 0xff;
   \   0000001C   ED29               LDI     R18, 217
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   8142               LDD     R20, Z+2
   \   00000024   8153               LDD     R21, Z+3
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   0FE4               ADD     R30, R20
   \   0000002A   1FF5               ADC     R31, R21
   \   0000002C   8320               ST      Z, R18
   \   0000002E   01FC               MOVW    R31:R30, R25:R24
   \   00000030   8102               LDD     R16, Z+2
   \   00000032   8113               LDD     R17, Z+3
   \   00000034   5F0F               SUBI    R16, 255
   \   00000036   4F1F               SBCI    R17, 255
   \   00000038   8302               STD     Z+2, R16
   \   0000003A   8313               STD     Z+3, R17
    598              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_ANA_MDATA >> 8;
   \   0000003C   E024               LDI     R18, 4
   \   0000003E   8100               LD      R16, Z
   \   00000040   8111               LDD     R17, Z+1
   \   00000042   8142               LDD     R20, Z+2
   \   00000044   8153               LDD     R21, Z+3
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   0FE4               ADD     R30, R20
   \   0000004A   1FF5               ADC     R31, R21
   \   0000004C   8320               ST      Z, R18
   \   0000004E   01FC               MOVW    R31:R30, R25:R24
   \   00000050   8102               LDD     R16, Z+2
   \   00000052   8113               LDD     R17, Z+3
   \   00000054   5F0F               SUBI    R16, 255
   \   00000056   4F1F               SBCI    R17, 255
   \   00000058   8302               STD     Z+2, R16
   \   0000005A   8313               STD     Z+3, R17
    599              ntna = UART[ch].TxFirst ;                                    /* remember index */
    600              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000005C   0198               MOVW    R19:R18, R17:R16
   \   0000005E   5F2E               SUBI    R18, 254
   \   00000060   4F3F               SBCI    R19, 255
   \   00000062   8322               STD     Z+2, R18
   \   00000064   8333               STD     Z+3, R19
    601          
    602              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (RestartStatus << 4) ;    // Add restart status
   \   00000066   9140....           LDS     R20, RestartStatus
   \   0000006A   9542               SWAP    R20
   \   0000006C   7F40               ANDI    R20, 0xF0
   \   0000006E   8120               LD      R18, Z
   \   00000070   8131               LDD     R19, Z+1
   \   00000072   8162               LDD     R22, Z+2
   \   00000074   8173               LDD     R23, Z+3
   \   00000076   01F9               MOVW    R31:R30, R19:R18
   \   00000078   0FE6               ADD     R30, R22
   \   0000007A   1FF7               ADC     R31, R23
   \   0000007C   8340               ST      Z, R20
   \   0000007E   01FC               MOVW    R31:R30, R25:R24
   \   00000080   8122               LDD     R18, Z+2
   \   00000082   8133               LDD     R19, Z+3
   \   00000084   5F2F               SUBI    R18, 255
   \   00000086   4F3F               SBCI    R19, 255
   \   00000088   8322               STD     Z+2, R18
   \   0000008A   8333               STD     Z+3, R19
    603              for (i = 0; i<12; i++) {
   \   0000008C   ....               LDI     R26, LOW((TData + 14))
   \   0000008E   ....               LDI     R27, HIGH((TData + 14))
   \   00000090   ....               LDI     R18, LOW((TData + 26))
   \   00000092   2E02               MOV     R0, R18
   \   00000094   ....               LDI     R18, HIGH((TData + 26))
   \   00000096   2E12               MOV     R1, R18
   \   00000098   E02C               LDI     R18, 12
    604                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = TData.Ana.Status[i] ;
   \                     ??BuildMDataANA_0:
   \   0000009A   913D               LD      R19, X+
   \   0000009C   8140               LD      R20, Z
   \   0000009E   8151               LDD     R21, Z+1
   \   000000A0   8162               LDD     R22, Z+2
   \   000000A2   8173               LDD     R23, Z+3
   \   000000A4   01FA               MOVW    R31:R30, R21:R20
   \   000000A6   0FE6               ADD     R30, R22
   \   000000A8   1FF7               ADC     R31, R23
   \   000000AA   8330               ST      Z, R19
   \   000000AC   01FC               MOVW    R31:R30, R25:R24
   \   000000AE   8142               LDD     R20, Z+2
   \   000000B0   8153               LDD     R21, Z+3
   \   000000B2   5F4F               SUBI    R20, 255
   \   000000B4   4F5F               SBCI    R21, 255
   \   000000B6   8342               STD     Z+2, R20
   \   000000B8   8353               STD     Z+3, R21
    605                  *((float*)&UART[ch].pTxBuffer[UART[ch].TxFirst]) = *((float*)&TData.Ana.Result[i]) ;   // ADresult
   \   000000BA   01F0               MOVW    R31:R30, R1:R0
   \   000000BC   9141               LD      R20, Z+
   \   000000BE   9151               LD      R21, Z+
   \   000000C0   9161               LD      R22, Z+
   \   000000C2   9171               LD      R23, Z+
   \   000000C4   010F               MOVW    R1:R0, R31:R30
   \   000000C6   01FC               MOVW    R31:R30, R25:R24
   \   000000C8   8020               LD      R2, Z
   \   000000CA   8031               LDD     R3, Z+1
   \   000000CC   8042               LDD     R4, Z+2
   \   000000CE   8053               LDD     R5, Z+3
   \   000000D0   01F1               MOVW    R31:R30, R3:R2
   \   000000D2   0DE4               ADD     R30, R4
   \   000000D4   1DF5               ADC     R31, R5
   \   000000D6   8340               ST      Z, R20
   \   000000D8   8351               STD     Z+1, R21
   \   000000DA   8362               STD     Z+2, R22
   \   000000DC   8373               STD     Z+3, R23
    606                  UART[ch].TxFirst += sizeof(float) ;
   \   000000DE   01FC               MOVW    R31:R30, R25:R24
   \   000000E0   8142               LDD     R20, Z+2
   \   000000E2   8153               LDD     R21, Z+3
   \   000000E4   5F4C               SUBI    R20, 252
   \   000000E6   4F5F               SBCI    R21, 255
   \   000000E8   8342               STD     Z+2, R20
   \   000000EA   8353               STD     Z+3, R21
    607              }
   \   000000EC   952A               DEC     R18
   \   000000EE   F6A9               BRNE    ??BuildMDataANA_0
    608          
    609              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \   000000F0   8142               LDD     R20, Z+2
   \   000000F2   1B40               SUB     R20, R16
   \   000000F4   5042               SUBI    R20, 2
   \   000000F6   8120               LD      R18, Z
   \   000000F8   81F1               LDD     R31, Z+1
   \   000000FA   2FE2               MOV     R30, R18
   \   000000FC   0FE0               ADD     R30, R16
   \   000000FE   1FF1               ADC     R31, R17
   \   00000100   8340               ST      Z, R20
    610              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000102   01FC               MOVW    R31:R30, R25:R24
   \   00000104   8122               LDD     R18, Z+2
   \   00000106   8133               LDD     R19, Z+3
   \   00000108   1B20               SUB     R18, R16
   \   0000010A   0B31               SBC     R19, R17
   \   0000010C   5022               SUBI    R18, 2
   \   0000010E   4030               SBCI    R19, 0
   \   00000110   2F43               MOV     R20, R19
   \   00000112   8120               LD      R18, Z
   \   00000114   8131               LDD     R19, Z+1
   \   00000116   0F20               ADD     R18, R16
   \   00000118   1F31               ADC     R19, R17
   \   0000011A   01F9               MOVW    R31:R30, R19:R18
   \   0000011C   8341               STD     Z+1, R20
    611          
    612          }
   \   0000011E   ....               RJMP    ?Subroutine0
    613          
    614          /*************************************************************************
    615          *
    616          * Build datablock for Stack status
    617          *
    618          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    619          void BuildStackStatus(char ch, short pointer) {
   \                     BuildStackStatus:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    620          
    621              short ntna, stack ;
    622              UART[ch].RxSendReply = true ;                               // flag for answering
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   01D0               MOVW    R27:R26, R1:R0
   \   0000000E   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000012   E001               LDI     R16, 1
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   8F01               STD     Z+25, R16
    623          
    624              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS & 0xff;
   \   00000018   E727               LDI     R18, 119
   \   0000001A   8100               LD      R16, Z
   \   0000001C   8111               LDD     R17, Z+1
   \   0000001E   8142               LDD     R20, Z+2
   \   00000020   8153               LDD     R21, Z+3
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   0FE4               ADD     R30, R20
   \   00000026   1FF5               ADC     R31, R21
   \   00000028   8320               ST      Z, R18
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   8113               LDD     R17, Z+3
   \   00000030   5F0F               SUBI    R16, 255
   \   00000032   4F1F               SBCI    R17, 255
   \   00000034   8302               STD     Z+2, R16
   \   00000036   8313               STD     Z+3, R17
    625              UART[ch].pTxBuffer[UART[ch].TxFirst++] = CMD_REP_STACKSTATUS >> 8;
   \   00000038   E027               LDI     R18, 7
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   8142               LDD     R20, Z+2
   \   00000040   8153               LDD     R21, Z+3
   \   00000042   01F8               MOVW    R31:R30, R17:R16
   \   00000044   0FE4               ADD     R30, R20
   \   00000046   1FF5               ADC     R31, R21
   \   00000048   8320               ST      Z, R18
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    626              ntna = UART[ch].TxFirst ;                                    /* remember index */
   \   00000058   01C8               MOVW    R25:R24, R17:R16
    627              UART[ch].TxFirst += 2 ;                                      // two byte length
   \   0000005A   5F0E               SUBI    R16, 254
   \   0000005C   4F1F               SBCI    R17, 255
   \   0000005E   8302               STD     Z+2, R16
   \   00000060   8313               STD     Z+3, R17
    628          
    629              stack = OS_GetStackSpace(&TCB_USART0);                            // USART 0
   \   00000062   ....               LDI     R16, LOW(TCB_USART0)
   \   00000064   ....               LDI     R17, (TCB_USART0) >> 8
   \   00000066   ........           CALL    OS_GetStackSpace
   \   0000006A   0198               MOVW    R19:R18, R17:R16
    630              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   0000006C   910D               LD      R16, X+
   \   0000006E   911C               LD      R17, X
   \   00000070   9711               SBIW    R27:R26, 1
   \   00000072   01FD               MOVW    R31:R30, R27:R26
   \   00000074   8142               LDD     R20, Z+2
   \   00000076   8153               LDD     R21, Z+3
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   0FE4               ADD     R30, R20
   \   0000007C   1FF5               ADC     R31, R21
   \   0000007E   8320               ST      Z, R18
   \   00000080   01FD               MOVW    R31:R30, R27:R26
   \   00000082   8102               LDD     R16, Z+2
   \   00000084   8113               LDD     R17, Z+3
   \   00000086   5F0F               SUBI    R16, 255
   \   00000088   4F1F               SBCI    R17, 255
   \   0000008A   8302               STD     Z+2, R16
   \   0000008C   8313               STD     Z+3, R17
    631              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000008E   8100               LD      R16, Z
   \   00000090   8111               LDD     R17, Z+1
   \   00000092   8142               LDD     R20, Z+2
   \   00000094   8153               LDD     R21, Z+3
   \   00000096   01F8               MOVW    R31:R30, R17:R16
   \   00000098   0FE4               ADD     R30, R20
   \   0000009A   1FF5               ADC     R31, R21
   \   0000009C   8330               ST      Z, R19
   \   0000009E   01FD               MOVW    R31:R30, R27:R26
   \   000000A0   8102               LDD     R16, Z+2
   \   000000A2   8113               LDD     R17, Z+3
   \   000000A4   5F0F               SUBI    R16, 255
   \   000000A6   4F1F               SBCI    R17, 255
   \   000000A8   8302               STD     Z+2, R16
   \   000000AA   8313               STD     Z+3, R17
    632              stack = OS_GetStackSpace(&TCB_USART1);                            // USART 1
   \   000000AC   ....               LDI     R16, LOW(TCB_USART1)
   \   000000AE   ....               LDI     R17, (TCB_USART1) >> 8
   \   000000B0   ........           CALL    OS_GetStackSpace
   \   000000B4   0198               MOVW    R19:R18, R17:R16
    633              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000000B6   910D               LD      R16, X+
   \   000000B8   911C               LD      R17, X
   \   000000BA   9711               SBIW    R27:R26, 1
   \   000000BC   01FD               MOVW    R31:R30, R27:R26
   \   000000BE   8142               LDD     R20, Z+2
   \   000000C0   8153               LDD     R21, Z+3
   \   000000C2   01F8               MOVW    R31:R30, R17:R16
   \   000000C4   0FE4               ADD     R30, R20
   \   000000C6   1FF5               ADC     R31, R21
   \   000000C8   8320               ST      Z, R18
   \   000000CA   01FD               MOVW    R31:R30, R27:R26
   \   000000CC   8102               LDD     R16, Z+2
   \   000000CE   8113               LDD     R17, Z+3
   \   000000D0   5F0F               SUBI    R16, 255
   \   000000D2   4F1F               SBCI    R17, 255
   \   000000D4   8302               STD     Z+2, R16
   \   000000D6   8313               STD     Z+3, R17
    634              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   000000D8   8100               LD      R16, Z
   \   000000DA   8111               LDD     R17, Z+1
   \   000000DC   8142               LDD     R20, Z+2
   \   000000DE   8153               LDD     R21, Z+3
   \   000000E0   01F8               MOVW    R31:R30, R17:R16
   \   000000E2   0FE4               ADD     R30, R20
   \   000000E4   1FF5               ADC     R31, R21
   \   000000E6   8330               ST      Z, R19
   \   000000E8   01FD               MOVW    R31:R30, R27:R26
   \   000000EA   8102               LDD     R16, Z+2
   \   000000EC   8113               LDD     R17, Z+3
   \   000000EE   5F0F               SUBI    R16, 255
   \   000000F0   4F1F               SBCI    R17, 255
   \   000000F2   8302               STD     Z+2, R16
   \   000000F4   8313               STD     Z+3, R17
    635              stack = OS_GetStackSpace(&TCB_WATCHDOG);                            // watchdog
   \   000000F6   ....               LDI     R16, LOW(TCB_WATCHDOG)
   \   000000F8   ....               LDI     R17, (TCB_WATCHDOG) >> 8
   \   000000FA   ........           CALL    OS_GetStackSpace
   \   000000FE   0198               MOVW    R19:R18, R17:R16
    636              UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   00000100   910D               LD      R16, X+
   \   00000102   911C               LD      R17, X
   \   00000104   9711               SBIW    R27:R26, 1
   \   00000106   01FD               MOVW    R31:R30, R27:R26
   \   00000108   8142               LDD     R20, Z+2
   \   0000010A   8153               LDD     R21, Z+3
   \   0000010C   01F8               MOVW    R31:R30, R17:R16
   \   0000010E   0FE4               ADD     R30, R20
   \   00000110   1FF5               ADC     R31, R21
   \   00000112   8320               ST      Z, R18
   \   00000114   01FD               MOVW    R31:R30, R27:R26
   \   00000116   8102               LDD     R16, Z+2
   \   00000118   8113               LDD     R17, Z+3
   \   0000011A   5F0F               SUBI    R16, 255
   \   0000011C   4F1F               SBCI    R17, 255
   \   0000011E   8302               STD     Z+2, R16
   \   00000120   8313               STD     Z+3, R17
    637              UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000122   8100               LD      R16, Z
   \   00000124   8111               LDD     R17, Z+1
   \   00000126   8142               LDD     R20, Z+2
   \   00000128   8153               LDD     R21, Z+3
   \   0000012A   01F8               MOVW    R31:R30, R17:R16
   \   0000012C   0FE4               ADD     R30, R20
   \   0000012E   1FF5               ADC     R31, R21
   \   00000130   8330               ST      Z, R19
   \   00000132   01FD               MOVW    R31:R30, R27:R26
   \   00000134   8102               LDD     R16, Z+2
   \   00000136   8113               LDD     R17, Z+3
   \   00000138   5F0F               SUBI    R16, 255
   \   0000013A   4F1F               SBCI    R17, 255
   \   0000013C   8302               STD     Z+2, R16
   \   0000013E   8313               STD     Z+3, R17
    638              switch (UnitID) {
   \   00000140   9100....           LDS     R16, UnitID
   \   00000144   2300               TST     R16
   \   00000146   F021               BREQ    ??BuildStackStatus_0
   \   00000148   950A               DEC     R16
   \   0000014A   F409               BRNE    $+2+2
   \   0000014C   C045               RJMP    ??BuildStackStatus_1
   \   0000014E   C088               RJMP    ??BuildStackStatus_2
    639              case AN_ZB485 :
    640                  stack = OS_GetStackSpace(&TCB_RS485Ctl);                            // RS485 Control
   \                     ??BuildStackStatus_0:
   \   00000150   ....               LDI     R16, LOW(TCB_RS485Ctl)
   \   00000152   ....               LDI     R17, (TCB_RS485Ctl) >> 8
   \   00000154   ........           CALL    OS_GetStackSpace
   \   00000158   0198               MOVW    R19:R18, R17:R16
    641                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   0000015A   910D               LD      R16, X+
   \   0000015C   911C               LD      R17, X
   \   0000015E   9711               SBIW    R27:R26, 1
   \   00000160   01FD               MOVW    R31:R30, R27:R26
   \   00000162   8142               LDD     R20, Z+2
   \   00000164   8153               LDD     R21, Z+3
   \   00000166   01F8               MOVW    R31:R30, R17:R16
   \   00000168   0FE4               ADD     R30, R20
   \   0000016A   1FF5               ADC     R31, R21
   \   0000016C   8320               ST      Z, R18
   \   0000016E   01FD               MOVW    R31:R30, R27:R26
   \   00000170   8102               LDD     R16, Z+2
   \   00000172   8113               LDD     R17, Z+3
   \   00000174   5F0F               SUBI    R16, 255
   \   00000176   4F1F               SBCI    R17, 255
   \   00000178   8302               STD     Z+2, R16
   \   0000017A   8313               STD     Z+3, R17
    642                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   0000017C   8100               LD      R16, Z
   \   0000017E   8111               LDD     R17, Z+1
   \   00000180   8142               LDD     R20, Z+2
   \   00000182   8153               LDD     R21, Z+3
   \   00000184   01F8               MOVW    R31:R30, R17:R16
   \   00000186   0FE4               ADD     R30, R20
   \   00000188   1FF5               ADC     R31, R21
   \   0000018A   8330               ST      Z, R19
   \   0000018C   01FD               MOVW    R31:R30, R27:R26
   \   0000018E   8102               LDD     R16, Z+2
   \   00000190   8113               LDD     R17, Z+3
   \   00000192   5F0F               SUBI    R16, 255
   \   00000194   4F1F               SBCI    R17, 255
   \   00000196   8302               STD     Z+2, R16
   \   00000198   8313               STD     Z+3, R17
    643                  stack = OS_GetStackSpace(&TCB_RS485Rec);                            // RS485 receive
   \   0000019A   ....               LDI     R16, LOW(TCB_RS485Rec)
   \   0000019C   ....               LDI     R17, (TCB_RS485Rec) >> 8
   \   0000019E   ........           CALL    OS_GetStackSpace
   \   000001A2   0198               MOVW    R19:R18, R17:R16
    644                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000001A4   910D               LD      R16, X+
   \   000001A6   911C               LD      R17, X
   \   000001A8   9711               SBIW    R27:R26, 1
   \   000001AA   01FD               MOVW    R31:R30, R27:R26
   \   000001AC   8142               LDD     R20, Z+2
   \   000001AE   8153               LDD     R21, Z+3
   \   000001B0   01F8               MOVW    R31:R30, R17:R16
   \   000001B2   0FE4               ADD     R30, R20
   \   000001B4   1FF5               ADC     R31, R21
   \   000001B6   8320               ST      Z, R18
   \   000001B8   01FD               MOVW    R31:R30, R27:R26
   \   000001BA   8102               LDD     R16, Z+2
   \   000001BC   8113               LDD     R17, Z+3
   \   000001BE   5F0F               SUBI    R16, 255
   \   000001C0   4F1F               SBCI    R17, 255
   \   000001C2   8302               STD     Z+2, R16
   \   000001C4   8313               STD     Z+3, R17
    645                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   000001C6   8100               LD      R16, Z
   \   000001C8   8111               LDD     R17, Z+1
   \   000001CA   8142               LDD     R20, Z+2
   \   000001CC   8153               LDD     R21, Z+3
   \   000001CE   01F8               MOVW    R31:R30, R17:R16
   \   000001D0   0FE4               ADD     R30, R20
   \   000001D2   1FF5               ADC     R31, R21
   \   000001D4   8330               ST      Z, R19
   \   000001D6   C03D               RJMP    ??BuildStackStatus_3
    646                  break;
    647              case AN_ZBANA :
    648                  stack = OS_GetStackSpace(&TCB_AD7715);                            // AD handling
   \                     ??BuildStackStatus_1:
   \   000001D8   ....               LDI     R16, LOW(TCB_AD7715)
   \   000001DA   ....               LDI     R17, (TCB_AD7715) >> 8
   \   000001DC   ........           CALL    OS_GetStackSpace
    649                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = (stack & 0xff) ;
   \   000001E0   912D               LD      R18, X+
   \   000001E2   913C               LD      R19, X
   \   000001E4   9711               SBIW    R27:R26, 1
   \   000001E6   01FD               MOVW    R31:R30, R27:R26
   \   000001E8   8142               LDD     R20, Z+2
   \   000001EA   8153               LDD     R21, Z+3
   \   000001EC   01F9               MOVW    R31:R30, R19:R18
   \   000001EE   0FE4               ADD     R30, R20
   \   000001F0   1FF5               ADC     R31, R21
   \   000001F2   8300               ST      Z, R16
   \   000001F4   01FD               MOVW    R31:R30, R27:R26
   \   000001F6   8122               LDD     R18, Z+2
   \   000001F8   8133               LDD     R19, Z+3
   \   000001FA   5F2F               SUBI    R18, 255
   \   000001FC   4F3F               SBCI    R19, 255
   \   000001FE   8322               STD     Z+2, R18
   \   00000200   8333               STD     Z+3, R19
    650                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = ((stack>>8) & 0xff) ;
   \   00000202   2F21               MOV     R18, R17
   \   00000204   8100               LD      R16, Z
   \   00000206   8111               LDD     R17, Z+1
   \   00000208   8142               LDD     R20, Z+2
   \   0000020A   01F8               MOVW    R31:R30, R17:R16
   \   0000020C   0FE4               ADD     R30, R20
   \   0000020E   1FF3               ADC     R31, R19
   \   00000210   8320               ST      Z, R18
   \   00000212   01FD               MOVW    R31:R30, R27:R26
   \   00000214   8102               LDD     R16, Z+2
   \   00000216   8113               LDD     R17, Z+3
   \   00000218   5F0F               SUBI    R16, 255
   \   0000021A   4F1F               SBCI    R17, 255
   \   0000021C   8302               STD     Z+2, R16
   \   0000021E   8313               STD     Z+3, R17
    651                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \   00000220   8100               LD      R16, Z
   \   00000222   8111               LDD     R17, Z+1
   \   00000224   8122               LDD     R18, Z+2
   \   00000226   8133               LDD     R19, Z+3
   \   00000228   01F8               MOVW    R31:R30, R17:R16
   \   0000022A   0FE2               ADD     R30, R18
   \   0000022C   1FF3               ADC     R31, R19
   \   0000022E   E000               LDI     R16, 0
   \   00000230   8300               ST      Z, R16
   \   00000232   01FD               MOVW    R31:R30, R27:R26
   \   00000234   8102               LDD     R16, Z+2
   \   00000236   8113               LDD     R17, Z+3
   \   00000238   5F0F               SUBI    R16, 255
   \   0000023A   4F1F               SBCI    R17, 255
   \   0000023C   8302               STD     Z+2, R16
   \   0000023E   8313               STD     Z+3, R17
    652                  UART[ch].pTxBuffer[UART[ch].TxFirst++] = 0 ;
   \   00000240   8100               LD      R16, Z
   \   00000242   8111               LDD     R17, Z+1
   \   00000244   8122               LDD     R18, Z+2
   \   00000246   8133               LDD     R19, Z+3
   \   00000248   01F8               MOVW    R31:R30, R17:R16
   \   0000024A   0FE2               ADD     R30, R18
   \   0000024C   1FF3               ADC     R31, R19
   \   0000024E   E000               LDI     R16, 0
   \   00000250   8300               ST      Z, R16
   \                     ??BuildStackStatus_3:
   \   00000252   01FD               MOVW    R31:R30, R27:R26
   \   00000254   8102               LDD     R16, Z+2
   \   00000256   8113               LDD     R17, Z+3
   \   00000258   5F0F               SUBI    R16, 255
   \   0000025A   4F1F               SBCI    R17, 255
   \   0000025C   8302               STD     Z+2, R16
   \   0000025E   8313               STD     Z+3, R17
    653                  break;
    654              }
    655          
    656              UART[ch].pTxBuffer[ntna] = (UART[ch].TxFirst - ntna - 2)  & 0xff ;      // length of data block lb
   \                     ??BuildStackStatus_2:
   \   00000260   8102               LDD     R16, Z+2
   \   00000262   1B08               SUB     R16, R24
   \   00000264   5002               SUBI    R16, 2
   \   00000266   91ED               LD      R30, X+
   \   00000268   91FC               LD      R31, X
   \   0000026A   9711               SBIW    R27:R26, 1
   \   0000026C   0FE8               ADD     R30, R24
   \   0000026E   1FF9               ADC     R31, R25
   \   00000270   8300               ST      Z, R16
    657              UART[ch].pTxBuffer[ntna+1] = ((UART[ch].TxFirst - ntna - 2) >> 8 ) & 0xff ; // length of data block hb
   \   00000272   01FD               MOVW    R31:R30, R27:R26
   \   00000274   8102               LDD     R16, Z+2
   \   00000276   8113               LDD     R17, Z+3
   \   00000278   1B08               SUB     R16, R24
   \   0000027A   0B19               SBC     R17, R25
   \   0000027C   5002               SUBI    R16, 2
   \   0000027E   4010               SBCI    R17, 0
   \   00000280   91ED               LD      R30, X+
   \   00000282   91FC               LD      R31, X
   \   00000284   0FE8               ADD     R30, R24
   \   00000286   1FF9               ADC     R31, R25
   \   00000288   8311               STD     Z+1, R17
    658          
    659          }
   \   0000028A   ....               RJMP    ?Subroutine1
    660          
    661          //////////////////////////////////////////////////////////////////////////////
    662          // Receiving data to IO module here
    663          /////////////////////////////////////////////////////////////////////////////
    664          
    665          /*************************************************************************
    666          *
    667          * Receive Command to Reset the EEPROM
    668          *
    669          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    670          void GetResetEEPROM(char ch, short pointer) {
   \                     GetResetEEPROM:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    671          
    672              EEPROMReset();
   \   00000000   ........           JMP     EEPROMReset
    673          }
    674          
    675          
    676          /*************************************************************************
    677          *
    678          * Receive Command to go to the bootloader program
    679          *
    680          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    681          void GetGotoBootloader(char ch, short pointer) {
   \                     GetGotoBootloader:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    682          
    683          //    void (*BootApp)(void) = (void(*)())0xF000;
    684          
    685              // 128 -> 1281
    686              /*
    687              while ( (EECR & 1<<EEWE) != 0 ) //chech if EEPROM is ready
    688                  ;
    689              EEARL = (0x0fff & 0xff);
    690              EEARH = (0x0fff >> 8);
    691              EEDR = 0xff;
    692              EECR |= (1<<EEMWE);
    693              EECR |= (1<<EEWE);
    694              while (EECR & (1<<EEWE))
    695                  ;
    696              */
    697              while ( (EECR & 1<<EEPE) != 0 ) //chech if EEPROM is ready
   \                     ??GetGotoBootloader_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??GetGotoBootloader_0
    698                  ;
    699              EEARL = (0x0fff & 0xff);
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BD01               OUT     0x21, R16
    700              EEARH = (0x0fff >> 8);
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   BD02               OUT     0x22, R16
    701              EEDR = 0xff;
   \   0000000C   EF0F               LDI     R16, 255
   \   0000000E   BD00               OUT     0x20, R16
    702              EECR |= (1<<EEMPE);
   \   00000010   9AFA               SBI     0x1F, 0x02
    703              EECR |= (1<<EEPE);
   \   00000012   9AF9               SBI     0x1F, 0x01
   \   00000014   E108               LDI     R16, 24
   \   00000016   C002               RJMP    ??GetGotoBootloader_1
    704              while (EECR & (1<<EEPE))
    705          
    706              // 128 -> 1281
    707              // WDTCR = 0x18;               //Start watchdog to genetate restart
    708              // WDTCR = 0x08;               //Start watchdog to genetate restart
    709              WDTCSR = 0x18;               //Start watchdog to genetate restart
   \                     ??GetGotoBootloader_2:
   \   00000018   93000060           STS     96, R16
   \                     ??GetGotoBootloader_1:
   \   0000001C   99F9               SBIC    0x1F, 0x01
   \   0000001E   CFFC               RJMP    ??GetGotoBootloader_2
    710              WDTCSR = 0x08;               //Start watchdog to genetate restart
   \   00000020   E008               LDI     R16, 8
   \   00000022   93000060           STS     96, R16
    711          }
   \   00000026   9508               RET
   \   00000028                      REQUIRE _A_EECR
   \   00000028                      REQUIRE _A_EEAR
   \   00000028                      REQUIRE _A_EEDR
   \   00000028                      REQUIRE _A_WDTCSR
    712          
    713          /*************************************************************************
    714          *
    715          * Receive EEPROM data
    716          *
    717          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    718          void GetEEPROMData(char ch, short pointer) {
   \                     GetEEPROMData:
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R8_is_cg_reg
   \   00000010                      REQUIRE ?Register_R9_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   0149               MOVW    R9:R8, R19:R18
    719          
    720            char channel;
    721            int t0;
    722          
    723              channel = UART[ch].pRxBuffer[pointer] ;
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   0120               MOVW    R5:R4, R1:R0
   \   00000018   ....               LDI     R16, LOW(UART)
   \   0000001A   0E40               ADD     R4, R16
   \   0000001C   ....               LDI     R16, (UART) >> 8
   \   0000001E   1E50               ADC     R5, R16
   \   00000020   01F2               MOVW    R31:R30, R5:R4
   \   00000022   8542               LDD     R20, Z+10
   \   00000024   8553               LDD     R21, Z+11
   \   00000026   0F42               ADD     R20, R18
   \   00000028   1F53               ADC     R21, R19
   \   0000002A   01FA               MOVW    R31:R30, R21:R20
   \   0000002C   8120               LD      R18, Z
    724              if ((channel >= 0x80) && (UnitID == 0x01)) { // AN-ZBANA
   \   0000002E   3820               CPI     R18, 128
   \   00000030   F0F0               BRCS    ??GetEEPROMData_0
   \   00000032   9100....           LDS     R16, UnitID
   \   00000036   3001               CPI     R16, 1
   \   00000038   F4D1               BRNE    ??GetEEPROMData_0
    725                *((float*)&TData.Ana.Offset[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+1]) ;  //offset
   \   0000003A   2F02               MOV     R16, R18
   \   0000003C   700F               ANDI    R16, 0x0F
   \   0000003E   0F00               LSL     R16
   \   00000040   0F00               LSL     R16
   \   00000042   E010               LDI     R17, 0
   \   00000044   ....               SUBI    R16, LOW((-(TData + 98) & 0xFFFF))
   \   00000046   ....               SBCI    R17, HIGH((-(TData + 98) & 0xFFFF))
   \   00000048   8001               LDD     R0, Z+1
   \   0000004A   8012               LDD     R1, Z+2
   \   0000004C   8023               LDD     R2, Z+3
   \   0000004E   8034               LDD     R3, Z+4
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   8200               ST      Z, R0
   \   00000054   8211               STD     Z+1, R1
   \   00000056   8222               STD     Z+2, R2
   \   00000058   8233               STD     Z+3, R3
    726                *((float*)&TData.Ana.Gain[channel & 0x0f]) = *((float*)&UART[ch].pRxBuffer[pointer+5]) ;  //gain
   \   0000005A   01FA               MOVW    R31:R30, R21:R20
   \   0000005C   8005               LDD     R0, Z+5
   \   0000005E   8016               LDD     R1, Z+6
   \   00000060   8027               LDD     R2, Z+7
   \   00000062   8430               LDD     R3, Z+8
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   AA00               STD     Z+48, R0
   \   00000068   AA11               STD     Z+49, R1
   \   0000006A   AA22               STD     Z+50, R2
   \   0000006C   AA33               STD     Z+51, R3
    727              }
    728              WriteEEPROMBuffer((channel * sizeof(float) * 2), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+1]);
   \                     ??GetEEPROMData_0:
   \   0000006E   E008               LDI     R16, 8
   \   00000070   9F20               MUL     R18, R16
   \   00000072   01D0               MOVW    R27:R26, R1:R0
   \   00000074   5F4F               SUBI    R20, 255
   \   00000076   4F5F               SBCI    R21, 255
   \   00000078   E024               LDI     R18, 4
   \   0000007A   0180               MOVW    R17:R16, R1:R0
   \   0000007C   ........           CALL    WriteEEPROMBuffer
    729              t0 = OS_GetTime();
   \   00000080   ........           CALL    OS__Gettime
   \   00000084   01C8               MOVW    R25:R24, R17:R16
    730              do {
    731                OS_Delay(1);
   \                     ??GetEEPROMData_1:
   \   00000086   E001               LDI     R16, 1
   \   00000088   E010               LDI     R17, 0
   \   0000008A   ........           CALL    OS_Delay
    732              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);  //8.5 ms programming time
   \   0000008E   ........           CALL    OS__Gettime
   \   00000092   1B08               SUB     R16, R24
   \   00000094   0B19               SBC     R17, R25
   \   00000096   3204               CPI     R16, 36
   \   00000098   4010               SBCI    R17, 0
   \   0000009A   F420               BRCC    ??GetEEPROMData_2
   \   0000009C   9100....           LDS     R16, EEPWriteOK
   \   000000A0   2300               TST     R16
   \   000000A2   F389               BREQ    ??GetEEPROMData_1
    733              WriteEEPROMBuffer( (channel * sizeof(float) * 2) + sizeof(float), sizeof(float), (char*)&UART[ch].pRxBuffer[pointer+5]);
   \                     ??GetEEPROMData_2:
   \   000000A4   01F2               MOVW    R31:R30, R5:R4
   \   000000A6   8542               LDD     R20, Z+10
   \   000000A8   8553               LDD     R21, Z+11
   \   000000AA   0D48               ADD     R20, R8
   \   000000AC   1D59               ADC     R21, R9
   \   000000AE   5F4B               SUBI    R20, 251
   \   000000B0   4F5F               SBCI    R21, 255
   \   000000B2   E024               LDI     R18, 4
   \   000000B4   9614               ADIW    R27:R26, 4
   \   000000B6   018D               MOVW    R17:R16, R27:R26
   \   000000B8   ........           CALL    WriteEEPROMBuffer
    734              t0 = OS_GetTime();
   \   000000BC   ........           CALL    OS__Gettime
   \   000000C0   01C8               MOVW    R25:R24, R17:R16
    735              do {
    736                OS_Delay(1);
   \                     ??GetEEPROMData_3:
   \   000000C2   E001               LDI     R16, 1
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   ........           CALL    OS_Delay
    737              }while ((OS_GetTime()-t0)< (sizeof(float)*9) && !EEPWriteOK);
   \   000000CA   ........           CALL    OS__Gettime
   \   000000CE   1B08               SUB     R16, R24
   \   000000D0   0B19               SBC     R17, R25
   \   000000D2   3204               CPI     R16, 36
   \   000000D4   4010               SBCI    R17, 0
   \   000000D6   F420               BRCC    ??GetEEPROMData_4
   \   000000D8   9100....           LDS     R16, EEPWriteOK
   \   000000DC   2300               TST     R16
   \   000000DE   F389               BREQ    ??GetEEPROMData_3
    738          }
   \                     ??GetEEPROMData_4:
   \   000000E0   9189               LD      R24, Y+
   \   000000E2   9199               LD      R25, Y+
   \   000000E4   91A9               LD      R26, Y+
   \   000000E6   91B9               LD      R27, Y+
   \   000000E8   9049               LD      R4, Y+
   \   000000EA   9059               LD      R5, Y+
   \   000000EC   9089               LD      R8, Y+
   \   000000EE   9099               LD      R9, Y+
   \   000000F0   9508               RET
    739          
    740          /*************************************************************************
    741          *
    742          * Receive AN-ZB485 setup
    743          *
    744          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    745          void GetRS4Setup(char ch, short pointer) {
   \                     GetRS4Setup:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    746          
    747              TData.RS4.PortUsed = UART[ch].pRxBuffer[pointer];           // Get the setup
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000E   8502               LDD     R16, Z+10
   \   00000010   8513               LDD     R17, Z+11
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   0FE2               ADD     R30, R18
   \   00000016   1FF3               ADC     R31, R19
   \   00000018   8140               LD      R20, Z
   \   0000001A   ....               LDI     R26, LOW(TData)
   \   0000001C   ....               LDI     R27, (TData) >> 8
   \   0000001E   934C               ST      X, R20
    748              TData.RS4.SensorType[0] = UART[ch].pRxBuffer[pointer+1];       // Get the sensor type
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   9631               ADIW    R31:R30, 1
   \   00000024   0FE2               ADD     R30, R18
   \   00000026   1FF3               ADC     R31, R19
   \   00000028   8150               LD      R21, Z
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   8351               STD     Z+1, R21
    749              TData.RS4.SensorType[1] = UART[ch].pRxBuffer[pointer+2];       // Get the sensor type
   \   0000002E   5F0E               SUBI    R16, 254
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   0FE2               ADD     R30, R18
   \   00000036   1FF3               ADC     R31, R19
   \   00000038   8100               LD      R16, Z
   \   0000003A   01FD               MOVW    R31:R30, R27:R26
   \   0000003C   8302               STD     Z+2, R16
    750              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);      // store in EEPROM
   \   0000003E   2F24               MOV     R18, R20
   \   00000040   E002               LDI     R16, 2
   \   00000042   E010               LDI     R17, 0
   \   00000044   ........           CALL    WriteEEPROMByte
    751              WriteEEPROMByte(EEPROM_PORTSETUP+1, TData.RS4.SensorType[0]);
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8121               LDD     R18, Z+1
   \   0000004C   E003               LDI     R16, 3
   \   0000004E   E010               LDI     R17, 0
   \   00000050   ........           CALL    WriteEEPROMByte
    752              WriteEEPROMByte(EEPROM_PORTSETUP+2, TData.RS4.SensorType[1]);
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   8122               LDD     R18, Z+2
   \   00000058   E004               LDI     R16, 4
   \   0000005A   E010               LDI     R17, 0
   \   0000005C   ........           CALL    WriteEEPROMByte
    753              SetRS4Port();                                               // Set power on ports
   \   00000060   ........           CALL    SetRS4Port
    754          }
   \   00000064   91A9               LD      R26, Y+
   \   00000066   91B9               LD      R27, Y+
   \   00000068   9508               RET
    755          
    756          /*************************************************************************
    757          *
    758          * Rceive data fo AD card
    759          *
    760          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    761          void GetADData(char ch, short pointer) {
   \                     GetADData:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   2F50               MOV     R21, R16
   \   00000004   0189               MOVW    R17:R16, R19:R18
    762          
    763             char i, pair;
    764          
    765             if (UART[ch].pRxBuffer[pointer] <=3) {
   \   00000006   E12A               LDI     R18, 26
   \   00000008   9F52               MUL     R21, R18
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000010   8522               LDD     R18, Z+10
   \   00000012   85F3               LDD     R31, Z+11
   \   00000014   2FE2               MOV     R30, R18
   \   00000016   0FE0               ADD     R30, R16
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   8120               LD      R18, Z
   \   0000001C   3024               CPI     R18, 4
   \   0000001E   F410               BRCC    ??GetADData_0
    766               pair = 0;
   \   00000020   E060               LDI     R22, 0
   \   00000022   C001               RJMP    ??GetADData_1
    767             } else {
    768               pair = 1;
   \                     ??GetADData_0:
   \   00000024   E560               LDI     R22, 80
   \                     ??GetADData_1:
   \   00000026   E070               LDI     R23, 0
    769             }
    770             if (!TData.RS4.ToTargetBuffer[pair][0]) {                                // buffer empty?
   \   00000028   ....               SUBI    R22, LOW((-(TData) & 0xFFFF))
   \   0000002A   ....               SBCI    R23, (-(TData) & 0xFFFF) >> 8
   \   0000002C   019B               MOVW    R19:R18, R23:R22
   \   0000002E   502C               SUBI    R18, 12
   \   00000030   4F3B               SBCI    R19, 251
   \   00000032   01F9               MOVW    R31:R30, R19:R18
   \   00000034   8140               LD      R20, Z
   \   00000036   2344               TST     R20
   \   00000038   F531               BRNE    ??GetADData_2
    771                TData.RS4.ToTargetBuffer[pair][0] = true;                            //  Availible data for AD card
   \   0000003A   E041               LDI     R20, 1
   \   0000003C   8340               ST      Z, R20
    772                TData.RS4.ToTargetBuffer[pair][1] = UART[ch].pRxBuffer[pointer++];   //  Channel to AD card
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000044   85A2               LDD     R26, Z+10
   \   00000046   85B3               LDD     R27, Z+11
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   0FE0               ADD     R30, R16
   \   0000004C   1FF1               ADC     R31, R17
   \   0000004E   8140               LD      R20, Z
   \   00000050   01F9               MOVW    R31:R30, R19:R18
   \   00000052   8341               STD     Z+1, R20
   \   00000054   5F0F               SUBI    R16, 255
   \   00000056   4F1F               SBCI    R17, 255
    773                TData.RS4.ToTargetBuffer[pair][2] = UART[ch].pRxBuffer[pointer++];   // nob in datablock
   \   00000058   0FA0               ADD     R26, R16
   \   0000005A   1FB1               ADC     R27, R17
   \   0000005C   910D               LD      R16, X+
   \   0000005E   8302               STD     Z+2, R16
    774                for (i = 3; i < TData.RS4.ToTargetBuffer[pair][2] + 3; i++) {
   \   00000060   E043               LDI     R20, 3
   \   00000062   E050               LDI     R21, 0
   \   00000064   C008               RJMP    ??GetADData_3
    775                    TData.RS4.ToTargetBuffer[pair][i] = UART[ch].pRxBuffer[pointer++];  //Get the buffer
   \                     ??GetADData_4:
   \   00000066   910D               LD      R16, X+
   \   00000068   01FB               MOVW    R31:R30, R23:R22
   \   0000006A   0FE4               ADD     R30, R20
   \   0000006C   1FF5               ADC     R31, R21
   \   0000006E   50EC               SUBI    R30, 12
   \   00000070   4FFB               SBCI    R31, 251
   \   00000072   8300               ST      Z, R16
    776                }
   \   00000074   9543               INC     R20
   \                     ??GetADData_3:
   \   00000076   01F9               MOVW    R31:R30, R19:R18
   \   00000078   8102               LDD     R16, Z+2
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   5F0D               SUBI    R16, 253
   \   0000007E   4F1F               SBCI    R17, 255
   \   00000080   1740               CP      R20, R16
   \   00000082   0751               CPC     R21, R17
   \   00000084   F384               BRLT    ??GetADData_4
    777             }
    778          }
   \                     ??GetADData_2:
   \   00000086   01D1               MOVW    R27:R26, R3:R2
   \   00000088   9508               RET
    779          
    780          /*************************************************************************
    781          *
    782          * Receive AN-ZBANA setup
    783          *
    784          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    785          void GetANASetup(char ch, short pointer) {
   \                     GetANASetup:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   01C9               MOVW    R25:R24, R19:R18
    786          
    787              TData.Ana.PortUsed = UART[ch].pRxBuffer[pointer] + (UART[ch].pRxBuffer[pointer+1] << 8);  //Get the setup
   \   0000000A   E11A               LDI     R17, 26
   \   0000000C   9F01               MUL     R16, R17
   \   0000000E   01D0               MOVW    R27:R26, R1:R0
   \   00000010   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000012   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   8502               LDD     R16, Z+10
   \   00000018   8513               LDD     R17, Z+11
   \   0000001A   0F02               ADD     R16, R18
   \   0000001C   1F13               ADC     R17, R19
   \   0000001E   01F8               MOVW    R31:R30, R17:R16
   \   00000020   8120               LD      R18, Z
   \   00000022   8131               LDD     R19, Z+1
   \   00000024   9320....           STS     TData, R18
   \   00000028   9330....           STS     (TData + 1), R19
    788              WriteEEPROMByte(EEPROM_PORTSETUP,UART[ch].pRxBuffer[pointer]);   // store in EEPROM
   \   0000002C   8120               LD      R18, Z
   \   0000002E   E002               LDI     R16, 2
   \   00000030   E010               LDI     R17, 0
   \   00000032   ........           CALL    WriteEEPROMByte
    789              WriteEEPROMByte(EEPROM_PORTSETUP+1,UART[ch].pRxBuffer[pointer+1]);
   \   00000036   01FD               MOVW    R31:R30, R27:R26
   \   00000038   8502               LDD     R16, Z+10
   \   0000003A   8513               LDD     R17, Z+11
   \   0000003C   0F08               ADD     R16, R24
   \   0000003E   1F19               ADC     R17, R25
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   8121               LDD     R18, Z+1
   \   00000044   E003               LDI     R16, 3
   \   00000046   E010               LDI     R17, 0
   \   00000048   ........           CALL    WriteEEPROMByte
    790              SetAnaPort();                           // set the port on or off
   \   0000004C   ........           CALL    SetAnaPort
    791          }
   \   00000050                      REQUIRE ?Subroutine1
   \   00000050                      ;               // Fall through to label ?Subroutine1
    792          
    793          /*************************************************************************
    794          *
    795          * Receive AN-ZBANA filter
    796          *
    797          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    798          void GetANAFilter(char ch, short pointer) {
   \                     GetANAFilter:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    799              char port;
    800          
    801              for (port = 0; port <12; port++) {
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000000C   85A2               LDD     R26, Z+10
   \   0000000E   85B3               LDD     R27, Z+11
   \   00000010   0FA2               ADD     R26, R18
   \   00000012   1FB3               ADC     R27, R19
   \   00000014   ....               LDI     R30, LOW(TData)
   \   00000016   ....               LDI     R31, (TData) >> 8
   \   00000018   E00C               LDI     R16, 12
    802                  TData.Ana.Filter[port] = UART[ch].pRxBuffer[pointer++];  //Get the filter
   \                     ??GetANAFilter_0:
   \   0000001A   911D               LD      R17, X+
   \   0000001C   8312               STD     Z+2, R17
    803              }
   \   0000001E   9631               ADIW    R31:R30, 1
   \   00000020   950A               DEC     R16
   \   00000022   F7D9               BRNE    ??GetANAFilter_0
    804          }
   \   00000024   01DA               MOVW    R27:R26, R21:R20
   \   00000026   9508               RET
    805          
    806          /*************************************************************************
    807          *
    808          *  Receive data on USARTs
    809          *
    810          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    811          void ReceivePacketUart(char ch) {
   \                     ReceivePacketUart:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F80               MOV     R24, R16
    812          
    813              switch (UART[ch].RxState) {                  // check status
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9F80               MUL     R24, R16
   \   0000000C   01D0               MOVW    R27:R26, R1:R0
   \   0000000E   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   00000010   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   8902               LDD     R16, Z+18
   \   00000016   2300               TST     R16
   \   00000018   F409               BRNE    $+2+2
   \   0000001A   C082               RJMP    ??ReceivePacketUart_0
   \   0000001C   950A               DEC     R16
   \   0000001E   F039               BREQ    ??ReceivePacketUart_1
   \   00000020   950A               DEC     R16
   \   00000022   F409               BRNE    $+2+2
   \   00000024   C042               RJMP    ??ReceivePacketUart_2
   \   00000026   5008               SUBI    R16, 8
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C07A               RJMP    ??ReceivePacketUart_0
   \   0000002C   C076               RJMP    ??ReceivePacketUart_3
    814              case SYNC :
    815                  // all functionallity in inerrupt routine
    816                  break ;
    817              case HEADER :
    818                  if (UART[ch].RxLast >= 6) {             // receive header
   \                     ??ReceivePacketUart_1:
   \   0000002E   8506               LDD     R16, Z+14
   \   00000030   8517               LDD     R17, Z+15
   \   00000032   3006               CPI     R16, 6
   \   00000034   4010               SBCI    R17, 0
   \   00000036   F408               BRCC    $+2+2
   \   00000038   C073               RJMP    ??ReceivePacketUart_0
    819                      UART[ch].RxPacklen = (UART[ch].pRxBuffer[4] + (UART[ch].pRxBuffer[5] * 256)) ; // Find length of package
   \   0000003A   8502               LDD     R16, Z+10
   \   0000003C   85F3               LDD     R31, Z+11
   \   0000003E   2FE0               MOV     R30, R16
   \   00000040   8124               LDD     R18, Z+4
   \   00000042   8115               LDD     R17, Z+5
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8B26               STD     Z+22, R18
   \   00000048   8B17               STD     Z+23, R17
    820                      if (CalcDSRxChecksum(ch, 6) && (UART[ch].pRxBuffer[0] == (DEVICE_IO + UnitID))) {
   \   0000004A   E026               LDI     R18, 6
   \   0000004C   E030               LDI     R19, 0
   \   0000004E   2F08               MOV     R16, R24
   \   00000050   ....               RCALL   CalcDSRxChecksum
   \   00000052   2B01               OR      R16, R17
   \   00000054   F409               BRNE    $+2+2
   \   00000056   C061               RJMP    ??ReceivePacketUart_3
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   8502               LDD     R16, Z+10
   \   0000005C   85F3               LDD     R31, Z+11
   \   0000005E   2FE0               MOV     R30, R16
   \   00000060   8100               LD      R16, Z
   \   00000062   E010               LDI     R17, 0
   \   00000064   5100               SUBI    R16, 16
   \   00000066   4010               SBCI    R17, 0
   \   00000068   9120....           LDS     R18, UnitID
   \   0000006C   1702               CP      R16, R18
   \   0000006E   4010               SBCI    R17, 0
   \   00000070   F009               BREQ    $+2+2
   \   00000072   C053               RJMP    ??ReceivePacketUart_3
    821                          // header checksum OK and to me
    822                          if ((UART[ch].RxPacklen < ((short) RXSIZE_UART-UART[ch].RxLast)) &&    /* chk. header */
    823                              (UART[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   8926               LDD     R18, Z+22
   \   00000078   8937               LDD     R19, Z+23
   \   0000007A   E906               LDI     R16, 150
   \   0000007C   E010               LDI     R17, 0
   \   0000007E   8546               LDD     R20, Z+14
   \   00000080   8557               LDD     R21, Z+15
   \   00000082   1B04               SUB     R16, R20
   \   00000084   0B15               SBC     R17, R21
   \   00000086   1720               CP      R18, R16
   \   00000088   0731               CPC     R19, R17
   \   0000008A   F008               BRCS    $+2+2
   \   0000008C   C046               RJMP    ??ReceivePacketUart_3
   \   0000008E   2F13               MOV     R17, R19
   \   00000090   3027               CPI     R18, 7
   \   00000092   4010               SBCI    R17, 0
   \   00000094   F408               BRCC    $+2+2
   \   00000096   C041               RJMP    ??ReceivePacketUart_3
    824                              UART[ch].RxState = RECEIVE ;       // Header ok go to data receive state
   \   00000098   E002               LDI     R16, 2
   \   0000009A   8B02               STD     Z+18, R16
    825                              UART[ch].RxCount = UART[ch].RxLast + 1 ;    // Set receive counter
   \   0000009C   8506               LDD     R16, Z+14
   \   0000009E   8517               LDD     R17, Z+15
   \   000000A0   5F0F               SUBI    R16, 255
   \   000000A2   4F1F               SBCI    R17, 255
   \   000000A4   8B00               STD     Z+16, R16
   \   000000A6   8B11               STD     Z+17, R17
   \   000000A8   C03B               RJMP    ??ReceivePacketUart_0
    826                          } else {
    827                              GoToSyncUART(ch) ;                        // go to sync modus for recive
    828                          }
    829                      } else {
    830                          GoToSyncUART(ch) ;                            // go to sync modus for recive
    831                      }
    832                  }
    833                  break ;
    834              case RECEIVE :
    835                  if (++UART[ch].RxCount >= UART[ch].RxPacklen) {
   \                     ??ReceivePacketUart_2:
   \   000000AA   8900               LDD     R16, Z+16
   \   000000AC   8911               LDD     R17, Z+17
   \   000000AE   5F0F               SUBI    R16, 255
   \   000000B0   4F1F               SBCI    R17, 255
   \   000000B2   8B00               STD     Z+16, R16
   \   000000B4   8B11               STD     Z+17, R17
   \   000000B6   8926               LDD     R18, Z+22
   \   000000B8   8937               LDD     R19, Z+23
   \   000000BA   1702               CP      R16, R18
   \   000000BC   0713               CPC     R17, R19
   \   000000BE   F180               BRCS    ??ReceivePacketUart_0
    836                      if ((UART[ch].pRxBuffer[UART[ch].RxPacklen -1]) == ANPRO10_EOT) {
   \   000000C0   8502               LDD     R16, Z+10
   \   000000C2   8513               LDD     R17, Z+11
   \   000000C4   0F02               ADD     R16, R18
   \   000000C6   1F13               ADC     R17, R19
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   9102               LD      R16, -Z
   \   000000CC   3004               CPI     R16, 4
   \   000000CE   F529               BRNE    ??ReceivePacketUart_3
    837                          if (CalcDSRxChecksum(ch, UART[ch].RxPacklen-2)) {
   \   000000D0   5022               SUBI    R18, 2
   \   000000D2   4030               SBCI    R19, 0
   \   000000D4   2F08               MOV     R16, R24
   \   000000D6   ....               RCALL   CalcDSRxChecksum
   \   000000D8   2B01               OR      R16, R17
   \   000000DA   F0F9               BREQ    ??ReceivePacketUart_3
    838                              if ((UART[ch].pRxBuffer[1] == MyAddress())||      // message to me? or
    839                                  (UART[ch].pRxBuffer[1] == 0xff)) {            // broadcast
   \   000000DC   ........           CALL    MyAddress
   \   000000E0   2F30               MOV     R19, R16
   \   000000E2   01FD               MOVW    R31:R30, R27:R26
   \   000000E4   8502               LDD     R16, Z+10
   \   000000E6   85F3               LDD     R31, Z+11
   \   000000E8   2FE0               MOV     R30, R16
   \   000000EA   8121               LDD     R18, Z+1
   \   000000EC   1723               CP      R18, R19
   \   000000EE   F011               BREQ    ??ReceivePacketUart_4
   \   000000F0   3F2F               CPI     R18, 255
   \   000000F2   F499               BRNE    ??ReceivePacketUart_3
    840                                  hostAddress = UART[ch].pRxBuffer[3];            // address to sender (host)
   \                     ??ReceivePacketUart_4:
   \   000000F4   8103               LDD     R16, Z+3
   \   000000F6   9300....           STS     hostAddress, R16
    841                                  UART[ch].RxState = HANDLE ;                     // Package OK
   \   000000FA   E00A               LDI     R16, 10
   \   000000FC   01FD               MOVW    R31:R30, R27:R26
   \   000000FE   8B02               STD     Z+18, R16
    842                                  if (ch == 0) {
   \   00000100   2388               TST     R24
   \   00000102   F419               BRNE    ??ReceivePacketUart_5
    843                                      OS_SignalEvent(1, &TCB_USART0);
   \   00000104   ....               LDI     R18, LOW(TCB_USART0)
   \   00000106   ....               LDI     R19, (TCB_USART0) >> 8
   \   00000108   C004               RJMP    ??ReceivePacketUart_6
    844                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart_5:
   \   0000010A   3081               CPI     R24, 1
   \   0000010C   F449               BRNE    ??ReceivePacketUart_0
    845                                      OS_SignalEvent(1, &TCB_USART1);
   \   0000010E   ....               LDI     R18, LOW(TCB_USART1)
   \   00000110   ....               LDI     R19, (TCB_USART1) >> 8
   \                     ??ReceivePacketUart_6:
   \   00000112   E001               LDI     R16, 1
   \   00000114   ........           CALL    OS_SignalEvent
   \   00000118   C003               RJMP    ??ReceivePacketUart_0
    846                                  }
    847                              } else {
    848                                  GoToSyncUART(ch) ;                             // go to sync modus for recive
    849                              }
    850                          } else {
    851                              GoToSyncUART(ch) ;                                // go to sync modus for recive
    852                          }
    853                      } else {
    854                          GoToSyncUART(ch) ;                                    // go to sync modus for recive
    855                      }
    856                  }
    857                  break ;
    858              case HANDLE :
    859                  break;
    860              default :
    861                  GoToSyncUART(ch) ;                                            // go to sync modus for recive
   \                     ??ReceivePacketUart_3:
   \   0000011A   2F08               MOV     R16, R24
   \   0000011C   ........           CALL    GoToSyncUART
    862                  break ;
    863              }                                                           // end switch
    864              if (++UART[ch].RxLast >= RXSIZE_UART) {                     // check pointer
   \                     ??ReceivePacketUart_0:
   \   00000120   01FD               MOVW    R31:R30, R27:R26
   \   00000122   8506               LDD     R16, Z+14
   \   00000124   8517               LDD     R17, Z+15
   \   00000126   5F0F               SUBI    R16, 255
   \   00000128   4F1F               SBCI    R17, 255
   \   0000012A   8706               STD     Z+14, R16
   \   0000012C   8717               STD     Z+15, R17
   \   0000012E   3906               CPI     R16, 150
   \   00000130   E020               LDI     R18, 0
   \   00000132   4010               SBCI    R17, 0
   \   00000134   F010               BRCS    ??ReceivePacketUart_7
    865                  UART[ch].RxLast = 0;                                     // reset pointer
   \   00000136   8726               STD     Z+14, R18
   \   00000138   8727               STD     Z+15, R18
    866              }
    867          }
   \                     ??ReceivePacketUart_7:
   \   0000013A   9189               LD      R24, Y+
   \   0000013C   91A9               LD      R26, Y+
   \   0000013E   91B9               LD      R27, Y+
   \   00000140   9508               RET
    868          
    869          
    870          /*************************************************************************
    871          *
    872          * Calculate tx checksum (header and package) using Dallas Semiconductor one-wire CRC
    873          *
    874          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    875          char CalcDSTxChecksum(char ch, unsigned short len) {
   \                     CalcDSTxChecksum:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F40               MOV     R20, R16
   \   00000006   0189               MOVW    R17:R16, R19:R18
    876          
    877              unsigned short  cnt ;
    878              unsigned char   csum ;
    879          
    880              csum = 0 ;
   \   00000008   E020               LDI     R18, 0
    881              for (cnt = 4 ; cnt < len ; cnt++) {
   \   0000000A   3005               CPI     R16, 5
   \   0000000C   4030               SBCI    R19, 0
   \   0000000E   F0B0               BRCS    ??CalcDSTxChecksum_0
   \   00000010   E13A               LDI     R19, 26
   \   00000012   9F43               MUL     R20, R19
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   0000001A   81A0               LD      R26, Z
   \   0000001C   81B1               LDD     R27, Z+1
   \   0000001E   9614               ADIW    R27:R26, 4
   \   00000020   5004               SUBI    R16, 4
   \   00000022   4010               SBCI    R17, 0
   \   00000024   ....               LDI     R19, (crc) >> 16
    882                  csum = crc[csum ^ UART[ch].pTxBuffer[cnt]] ;
   \                     ??CalcDSTxChecksum_1:
   \   00000026   2FE2               MOV     R30, R18
   \   00000028   912D               LD      R18, X+
   \   0000002A   27E2               EOR     R30, R18
   \   0000002C   E0F0               LDI     R31, 0
   \   0000002E   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000032   BF3B               OUT     0x3B, R19
   \   00000034   9126               ELPM    R18, Z
    883              }
   \   00000036   5001               SUBI    R16, 1
   \   00000038   4010               SBCI    R17, 0
   \   0000003A   F7A9               BRNE    ??CalcDSTxChecksum_1
    884              return csum ;
   \                     ??CalcDSTxChecksum_0:
   \   0000003C   2F02               MOV     R16, R18
   \   0000003E   2FA6               MOV     R26, R22
   \   00000040   2FB5               MOV     R27, R21
   \   00000042   9508               RET
    885          }
    886          
    887          /*************************************************************************
    888          *
    889          * Calculate rx packet checksum (header and package) using Dallas Semiconductor one-wire CRC
    890          *
    891          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    892          short CalcDSRxChecksum(char ch, unsigned short len) {
   \                     CalcDSRxChecksum:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   01B9               MOVW    R23:R22, R19:R18
    893          
    894              unsigned short  cnt ;
    895              unsigned char   csum ;
    896          
    897              csum = 0 ;
   \   00000004   E020               LDI     R18, 0
    898              for (cnt=0 ; cnt < len ; cnt++) {
   \   00000006   E11A               LDI     R17, 26
   \   00000008   9F01               MUL     R16, R17
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(UART) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(UART) & 0xFFFF) >> 8
   \   00000010   8542               LDD     R20, Z+10
   \   00000012   8553               LDD     R21, Z+11
   \   00000014   2B36               OR      R19, R22
   \   00000016   F071               BREQ    ??CalcDSRxChecksum_0
   \   00000018   01DA               MOVW    R27:R26, R21:R20
   \   0000001A   018B               MOVW    R17:R16, R23:R22
   \   0000001C   ....               LDI     R19, (crc) >> 16
    899                  csum = crc[csum ^ UART[ch].pRxBuffer[cnt]] ;
   \                     ??CalcDSRxChecksum_1:
   \   0000001E   2FE2               MOV     R30, R18
   \   00000020   912D               LD      R18, X+
   \   00000022   27E2               EOR     R30, R18
   \   00000024   E0F0               LDI     R31, 0
   \   00000026   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000028   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000002A   BF3B               OUT     0x3B, R19
   \   0000002C   9126               ELPM    R18, Z
    900              }
   \   0000002E   5001               SUBI    R16, 1
   \   00000030   4010               SBCI    R17, 0
   \   00000032   F7A9               BRNE    ??CalcDSRxChecksum_1
    901              if (csum == UART[ch].pRxBuffer[len]) {
   \                     ??CalcDSRxChecksum_0:
   \   00000034   01FA               MOVW    R31:R30, R21:R20
   \   00000036   0FE6               ADD     R30, R22
   \   00000038   1FF7               ADC     R31, R23
   \   0000003A   8100               LD      R16, Z
   \   0000003C   1720               CP      R18, R16
   \   0000003E   F411               BRNE    ??CalcDSRxChecksum_2
    902                  return true ;
   \   00000040   E001               LDI     R16, 1
   \   00000042   C001               RJMP    ??CalcDSRxChecksum_3
    903              } else {
    904                  return false ;
   \                     ??CalcDSRxChecksum_2:
   \   00000044   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum_3:
   \   00000046   E010               LDI     R17, 0
   \   00000048   01D1               MOVW    R27:R26, R3:R2
   \   0000004A   9508               RET
    905              }
    906          }
    907          
    908          /*************************************************************************
    909          *
    910          * Goes to sync mode
    911          *
    912          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    913          __monitor void GoToSyncUART(char ch) {
   \                     GoToSyncUART:
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   94F8               CLI
    914          
    915              if (ch < 2) {
   \   00000004   3002               CPI     R16, 2
   \   00000006   F460               BRCC    ??GoToSyncUART_0
    916                  UART[ch].SyncCnt = 0 ;                        // ready for sync
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R16, LOW(UART)
   \   0000000E   0E00               ADD     R0, R16
   \   00000010   ....               LDI     R16, (UART) >> 8
   \   00000012   1E10               ADC     R1, R16
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   E000               LDI     R16, 0
   \   00000018   8B03               STD     Z+19, R16
    917                  UART[ch].RxState = SYNC ;
   \   0000001A   8B02               STD     Z+18, R16
    918                  UART[ch].RxFirst = 0 ;
   \   0000001C   8704               STD     Z+12, R16
   \   0000001E   8705               STD     Z+13, R16
    919              }
    920          }
   \                     ??GoToSyncUART_0:
   \   00000020   BF2F               OUT     0x3F, R18
   \   00000022   9508               RET

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart>_0`:
   \   00000000   E803               DW      59395
   \   00000002   01                 DB      1
   \   00000003   ....               DW      (??CheckActionUart_21) /2
   \   00000005   ....               DW      (??CheckActionUart_0) /2
   \   00000007   0A                 DB      0xa
   \   00000008   ....               DW      (??CheckActionUart_3) /2
   \   0000000A   0A                 DB      0xa
   \   0000000B   ....               DW      (??CheckActionUart_4) /2
   \   0000000D   32                 DB      0x32
   \   0000000E   ....               DW      (??CheckActionUart_5) /2
   \   00000010   0A                 DB      0xa
   \   00000011   ....               DW      (??CheckActionUart_6) /2
   \   00000013   0A                 DB      0xa
   \   00000014   ....               DW      (??CheckActionUart_7) /2
   \   00000016   0A                 DB      0xa
   \   00000017   ....               DW      (??CheckActionUart_8) /2
   \   00000019   0A                 DB      0xa
   \   0000001A   ....               DW      (??CheckActionUart_9) /2
   \   0000001C   1E                 DB      0x1e
   \   0000001D   ....               DW      (??CheckActionUart_11) /2
   \   0000001F   14                 DB      0x14
   \   00000020   ....               DW      (??CheckActionUart_10) /2
   \   00000022   28                 DB      0x28
   \   00000023   ....               DW      (??CheckActionUart_16) /2
   \   00000025   0A                 DB      0xa
   \   00000026   ....               DW      (??CheckActionUart_17) /2
   \   00000028   0A                 DB      0xa
   \   00000029   ....               DW      (??CheckActionUart_18) /2
   \   0000002B   0A                 DB      0xa
   \   0000002C   ....               DW      (??CheckActionUart_19) /2
   \   0000002E   0A                 DB      0xa
   \   0000002F   ....               DW      (??CheckActionUart_20) /2
   \   00000031   02FE9E             DB      254,0x2,0x9e
   \   00000034   ....               DW      (??CheckActionUart_2) /2
   \   00000036   FB                 DB      251
   \   00000037   00                 DB      0

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   BuildADEpromdata
      0      2   BuildADInt
      2      2   BuildANAFilter
      0      2   BuildANASetup
      6      2   BuildEEPROMData
        6      2   -> ReadEEPROMBuffer
      5      2   BuildMData485
      6      2   BuildMDataANA
      6      2   BuildRData485
      0      2   BuildRS4Setup
      4      2   BuildStackStatus
        4      2   -> OS_GetStackSpace
      6      2   BuildStatusData
        6      2   -> MyAddress
      4      2   BuildWHdata
        4      2   -> OS_LeaveRegion
      0      2   CalcDSRxChecksum
      0      2   CalcDSTxChecksum
     10      2   CheckActionUart
       10      2   -> BuildADEpromdata
       10      2   -> BuildADInt
       10      2   -> BuildANAFilter
       10      2   -> BuildANASetup
       10      2   -> BuildEEPROMData
       10      2   -> BuildMData485
       10      2   -> BuildMDataANA
       10      2   -> BuildRData485
       10      2   -> BuildRS4Setup
       10      2   -> BuildStackStatus
       10      2   -> BuildStatusData
       10      2   -> BuildWHdata
       10      2   -> EEPROMReset
       10      2   -> GetADData
       10      2   -> GetANAFilter
       10      2   -> GetANASetup
       10      2   -> GetEEPROMData
       10      2   -> GetGotoBootloader
       10      2   -> GetRS4Setup
       10      2 ?SS_SHR_L02
       10      2 ?SV_SWITCH_L06
      0      2   GetADData
      0      2   GetANAFilter
      4      2   GetANASetup
        4      2   -> SetAnaPort
        4      2   -> WriteEEPROMByte
      8      2   GetEEPROMData
        8      2   -> OS_Delay
        8      2   -> OS__Gettime
        8      2   -> WriteEEPROMBuffer
      0      2   GetGotoBootloader
      2      2   GetRS4Setup
        2      2   -> SetRS4Port
        2      2   -> WriteEEPROMByte
      0      2   GetResetEEPROM
        0      2   -> EEPROMReset
      0      2   GoToSyncUART
      3      2   ReceivePacketUart
        3      2   -> CalcDSRxChecksum
        3      2   -> GoToSyncUART
        3      2   -> MyAddress
        3      2   -> OS_SignalEvent
      0      2   TimoutUSART0
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   TimoutUSART0On
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   TimoutUSART1On
        0      2   -> OS_StopTimer
      2      2   Uart_BuildHeader
        2      2   -> MyAddress
      3      2   Uart_BuildTail
        3      2   -> CalcDSTxChecksum
        3      2   -> OS_RetriggerTimer
        3      2   -> Uart_BuildHeader
      0      2   Usart0Handler
        0      2   -> OS_Unuse
        0      2   -> OS_Use
        0      2   -> OS_WaitEventTimed
        0      2   -> UsartCheckPackage
      0      2   Usart1Handler
        0      2   -> OS_Unuse
        0      2   -> OS_Use
        0      2   -> OS_WaitEventTimed
        0      2   -> UsartCheckPackage
      5      2   UsartCheckPackage
        5      2   -> CheckActionUart
        5      2   -> GoToSyncUART
        5      2   -> Uart_BuildTail


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Jumptable for CheckActionUart>_0
      14  ?Subroutine0
      10  ?Subroutine1
     176  BuildADEpromdata
     216  BuildADInt
     194  BuildANAFilter
     182  BuildANASetup
     258  BuildEEPROMData
     858  BuildMData485
     288  BuildMDataANA
     356  BuildRData485
     250  BuildRS4Setup
     652  BuildStackStatus
     536  BuildStatusData
     474  BuildWHdata
      76  CalcDSRxChecksum
      68  CalcDSTxChecksum
     456  CheckActionUart
     138  GetADData
      40  GetANAFilter
      80  GetANASetup
     242  GetEEPROMData
      40  GetGotoBootloader
     106  GetRS4Setup
       4  GetResetEEPROM
      36  GoToSyncUART
     322  ReceivePacketUart
      36  TimoutUSART0
      18  TimoutUSART0On
      36  TimoutUSART1
      18  TimoutUSART1On
     154  Uart_BuildHeader
     364  Uart_BuildTail
      36  Usart0Handler
      36  Usart1Handler
     124  UsartCheckPackage
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_PORTE
       1  _A_UCSR0B
       1  _A_UCSR1B
       1  _A_WDTCSR

 
     8 bytes in segment ABSOLUTE
 6'894 bytes in segment CODE
    56 bytes in segment SWITCH
 
 6'950 bytes of CODE memory
     0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: none
