###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/May/2023  12:40:43
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_ATmega1281\Src\adc.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\adc.r90.rsp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\adc.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main -D OS_LIBMODE_S -D
#        OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\List\Main -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\ --eeprom_size 4096
#        --clib -Oh) --dependencies=n
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\adc.r90.iar_deps
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\List\Main\adc.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\adc.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1281
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\adc.c
      1          /****************************************************************************************
      2          / AD converter functions and interrupt
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x7c
   \   __no_init union <unnamed>#240 volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   __no_init union <unnamed>#246 volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x78
   \   __no_init union <unnamed>#249 volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                      DS8 2
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          #include "version.h"
     11          

   \                                 In  segment CODE, align 2, keep-with-next
     12          void Int_Handler_AD( void ){
   \                     Int_Handler_AD:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
     13              short temp;
     14          
     15              //
     16              //  volatile undefined behavior
     17              // ADInt.Result[ADChannel] = ADC; // Reading ADCL and ADCH in one run
     18              //
     19              temp = ADC;
   \   00000002   91000078           LDS     R16, 120
   \   00000006   91100079           LDS     R17, (120 + 1)
     20              ADInt.Result[ADChannel] = temp; // Reading ADCL and ADCH in one run
   \   0000000A   ....               LDI     R26, LOW(ADChannel)
   \   0000000C   ....               LDI     R27, (ADChannel) >> 8
   \   0000000E   912C               LD      R18, X
   \   00000010   E032               LDI     R19, 2
   \   00000012   9F23               MUL     R18, R19
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   0000001A   8300               ST      Z, R16
   \   0000001C   8311               STD     Z+1, R17
     21              if (++ADChannel > 0x01 ) {                //set next ADchannel
   \   0000001E   910C               LD      R16, X
   \   00000020   9503               INC     R16
   \   00000022   930C               ST      X, R16
   \   00000024   3002               CPI     R16, 2
   \   00000026   F010               BRCS    ??Int_Handler_AD_0
     22                    ADChannel = 0x00 ;
   \   00000028   E000               LDI     R16, 0
   \   0000002A   930C               ST      X, R16
     23              }
     24              ADMUX &= 0xe0 ;                           // set the channel
   \                     ??Int_Handler_AD_0:
   \   0000002C   9100007C           LDS     R16, 124
   \   00000030   7E00               ANDI    R16, 0xE0
   \   00000032   9300007C           STS     124, R16
     25              // volatile undefined behavior
     26              // ADMUX |= ADChannel;
     27              //
     28              temp = ADChannel;
   \   00000036   910C               LD      R16, X
     29              ADMUX |= temp;
   \   00000038   9110007C           LDS     R17, 124
   \   0000003C   2B10               OR      R17, R16
   \   0000003E   9310007C           STS     124, R17
     30              // 128 -> 1281
     31              ADCSRA |= 0x40 ;                           //start new convertion
   \   00000042   9100007A           LDS     R16, 122
   \   00000046   6400               ORI     R16, 0x40
   \   00000048   9300007A           STS     122, R16
     32          }
   \   0000004C   01DA               MOVW    R27:R26, R21:R20
   \   0000004E   9508               RET
   \   00000050                      REQUIRE _A_ADC
   \   00000050                      REQUIRE _A_ADMUX
   \   00000050                      REQUIRE _A_ADCSRA
     33          
     34          
     35          #pragma vector=ADC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     36          __interrupt void IntHandler_AD( void ){
   \                     IntHandler_AD:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
     37              OS_CallISR(Int_Handler_AD);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_AD/2)
   \   00000026   ....               LDI     R17, (Int_Handler_AD/2) >> 8
   \   00000028   ........           CALL    OS_CallISR
     38          }
   \   0000002C   BF9B               OUT     0x3B, R25
   \   0000002E   BF8F               OUT     0x3F, R24
   \   00000030   9109               LD      R16, Y+
   \   00000032   9119               LD      R17, Y+
   \   00000034   9129               LD      R18, Y+
   \   00000036   9139               LD      R19, Y+
   \   00000038   9149               LD      R20, Y+
   \   0000003A   9159               LD      R21, Y+
   \   0000003C   9169               LD      R22, Y+
   \   0000003E   9179               LD      R23, Y+
   \   00000040   9009               LD      R0, Y+
   \   00000042   9019               LD      R1, Y+
   \   00000044   9029               LD      R2, Y+
   \   00000046   9039               LD      R3, Y+
   \   00000048   91E9               LD      R30, Y+
   \   0000004A   91F9               LD      R31, Y+
   \   0000004C   9189               LD      R24, Y+
   \   0000004E   9199               LD      R25, Y+
   \   00000050   9518               RETI

   \                                 In  segment INTVEC, offset 0x74, root
   \                     `??IntHandler_AD::??INTVEC 116`:
   \   00000074   ........           JMP     IntHandler_AD
     39          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_AD
       16      2   -> OS_CallISR
      0      2   Int_Handler_AD


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      82  IntHandler_AD
       4  IntHandler_AD::??INTVEC 116
      80  Int_Handler_AD
       2  _A_ADC
       1  _A_ADCSRA
       1  _A_ADMUX

 
   4 bytes in segment ABSOLUTE
 162 bytes in segment CODE
   4 bytes in segment INTVEC
 
 162 bytes of CODE memory (+ 4 bytes shared)
   0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
