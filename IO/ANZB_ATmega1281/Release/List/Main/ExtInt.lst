###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/May/2023  12:40:43
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_ATmega1281\Src\ExtInt.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\ExtInt.r90.rsp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\ExtInt.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main -D OS_LIBMODE_S -D
#        OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\List\Main -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\ --eeprom_size 4096
#        --clib -Oh) --dependencies=n
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\ExtInt.r90.iar_deps
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\List\Main\ExtInt.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\ExtInt.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1281
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\ExtInt.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1281.h" 
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          
     11          #if USE_16552_DRIVER_TASK == 1
     12          static void
     13          _16552_0_irq_handler(void)
     14          {
     15            UART16552[0].TxStatus = (U0_IIR & 0x0f);          // reason for interrupt
     16            do {
     17              switch (UART16552[0].TxStatus) {
     18              case 0x02 :             // transmit holding reg emty
     19                if (UART16552[0].TxCount == 0) {
     20                  U0_MCR &= ~RTS;        // set RTS off
     21                  OS_StopTimer(&TimerUART0);                    // and stop timer
     22                } else {
     23                  for (UART16552[0].TxSeqCnt = 0;( UART16552[0].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[0].TxCount > 0 ); UART16552[0].TxSeqCnt++, --UART16552[0].TxCount) {
     24                    U0_THR = UART16552[0].pTxBuffer[UART16552[0].TxLast++];
     25                  }
     26                }
     27                break;
     28              case 0x04 :             // Receive data available    
     29              case 0x0C :             // or caracter timeout (FIFO)
     30                while (U0_LSR & DATA_READY) {
     31          
     32                  UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] = U0_RBR;             // Read the character 
     33          
     34                  if (UART16552[0].RxState != HANDLE) {                 // ok to receive? 
     35                    switch (UART16552[0].RxState) {                   // Yes, check state
     36                      case SYNC :
     37                        if ( UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] == ANPRO1_SYN) {
     38                          UART16552[0].SyncCnt ++ ;                 // count sync
     39                          UART16552[0].RxFirst = 0;                 // start at start of buff
     40                        } else if (UART16552[0].SyncCnt >= 2) {       // minimum two sync bytes
     41                          UART16552[0].SyncCnt = 0 ;                // reset counter
     42                          UART16552[0].RxState = HEADER ;
     43                          UART16552[0].RxLast = 0 ;
     44                          UART16552[0].RxTimeout = RX_TO_TIME ;   // reset timeout
     45                          UART16552[0].RxFirst++ ;                 //  1. char OK, start on next
     46                          ReceivePacketUart16552(0) ;              // Check package
     47                        } else {
     48                          UART16552[0].SyncCnt = 0 ;                // start over once more
     49                        }
     50                        break;
     51                      default :
     52                        if ((++UART16552[0].RxFirst) > RXSIZE_UART_16552) { // Point to next location
     53                          GoToSyncUART16552(0) ;                       // go to sync mode
     54                        } else {
     55                          ReceivePacketUart16552(0) ;              // Check package
     56                        }
     57                        break ;   
     58                    }
     59                  }
     60                } 
     61                break;
     62              case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
     63                U0_LSR;      // Dummy read to empty register        
     64                break;
     65              case 0x00 :                 // Modem status.
     66                U0_MSR;      // Dummy read to empty register           
     67                break;
     68              }
     69              UART16552[0].TxStatus = (U0_IIR & 0x0f) ;      // reason for interrupt, 
     70              // check again before exit to avoid lost int. and hang
     71            } while ((UART16552[0].TxStatus & 0x01) != 0x01) ;  
     72          }
     73          
     74          static void
     75          _16552_1_irq_handler(void)
     76          {
     77            UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt
     78            do {
     79              switch (UART16552[1].TxStatus) {
     80              case 0x02 :             // transmit holding reg emty
     81                if (UART16552[1].TxCount == 0) {
     82                  U1_MCR &= ~RTS;        // set RTS off
     83                  OS_StopTimer(&TimerUART1);                    // and stop timer
     84                } else {
     85                  for (UART16552[1].TxSeqCnt = 0;( UART16552[1].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[1].TxCount > 0 ); UART16552[1].TxSeqCnt++, UART16552[1].TxCount--) {
     86                    U1_THR = UART16552[1].pTxBuffer[UART16552[1].TxLast++] ;
     87                  }
     88                }
     89                break;
     90              case 0x04 :             // Receive data available    
     91              case 0x0C :             // or caracter timeout (FIFO)
     92                while (U1_LSR & DATA_READY) {
     93          
     94                  UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] = U1_RBR;          // Read the character 
     95          
     96                  if (UART16552[1].RxState != HANDLE) {        // ok to receive? 
     97                    switch (UART16552[1].RxState) {                   // Yes, check state
     98                      case SYNC :
     99                        if ( UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] == ANPRO1_SYN) {
    100                          UART16552[1].SyncCnt ++ ;                 // count sync
    101                          UART16552[1].RxFirst = 0;                 // start at start of buff
    102                        } else if (UART16552[1].SyncCnt >= 2) {       // minimum two sync bytes
    103                          UART16552[1].SyncCnt = 0 ;                // reset counter
    104                          UART16552[1].RxState = HEADER ;
    105                          UART16552[1].RxLast = 0 ;
    106                          UART16552[1].RxTimeout = RX_TO_TIME ;     // reset timeout
    107                          UART16552[1].RxFirst++ ;                  //  1. char OK, start on next
    108                          ReceivePacketUart16552(1) ;               // Check package
    109                        } else {
    110                          UART16552[1].SyncCnt = 0 ;                // start over once more
    111                        }
    112                        break;
    113                      default :
    114                        if ((++UART16552[1].RxFirst) > RXSIZE_UART_16552) { // Point to next location
    115                          GoToSyncUART16552(1) ;                       // go to sync mode
    116                        } else {
    117                          ReceivePacketUart16552(1) ;              // Check package
    118                        }
    119                        break ;   
    120                    }
    121                  }
    122                }
    123                break;
    124              case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    125                U1_LSR;      // Dummy read to empty register        
    126                break;
    127              case 0x00 :                 // Modem status.
    128                U1_MSR;      // Dummy read to empty register           
    129                break;
    130              }
    131              UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt, 
    132              // check again before exit to avoid lost int. and hang
    133            } while ((UART16552[1].TxStatus & 0x01) != 0x01);  
    134          }
    135          

   \                                 In  segment CODE, align 2, keep-with-next
    136          static void
    137          _16552_driver_task(void)
   \                     _16552_driver_task:
    138          {
   \   00000000   92DA               ST      -Y, R13
   \   00000002   92CA               ST      -Y, R12
   \   00000004   92BA               ST      -Y, R11
   \   00000006   92AA               ST      -Y, R10
   \   00000008   929A               ST      -Y, R9
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R9_is_cg_reg
   \   00000010                      REQUIRE ?Register_R10_is_cg_reg
   \   00000010                      REQUIRE ?Register_R11_is_cg_reg
   \   00000010                      REQUIRE ?Register_R12_is_cg_reg
   \   00000010                      REQUIRE ?Register_R13_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   24CC               CLR     R12
   \   00000012   E202               LDI     R16, (8704) >> 8
   \   00000014   2ED0               MOV     R13, R16
   \   00000016   EF0A               LDI     R16, 250
   \   00000018   2E40               MOV     R4, R16
   \   0000001A   E008               LDI     R16, LOW(8712)
   \   0000001C   2EA0               MOV     R10, R16
   \   0000001E   2CBD               MOV     R11, R13
   \   00000020   ....               LDI     R26, LOW(UART16552)
   \   00000022   ....               LDI     R27, (UART16552) >> 8
   \   00000024   C029               RJMP    ??_16552_driver_task_0
    139            char status;
    140          
    141            while(1)
    142            {
    143              status = OS_WaitEventTimed(0x01 | 0x02, 500);
    144          
    145              if (status & 0x01)
    146              {
    147                _16552_0_irq_handler();
    148              }
    149          
    150              if (status & 0x02)
    151              {
    152                _16552_1_irq_handler();
   \                     ??_16552_driver_task_1:
   \   00000026   A2C3               STD     Z+35, R12
   \                     ??_16552_driver_task_2:
   \   00000028   A100               LDD     R16, Z+32
   \   0000002A   A111               LDD     R17, Z+33
   \   0000002C   2B01               OR      R16, R17
   \   0000002E   F0E9               BREQ    ??_16552_driver_task_3
   \   00000030   8D02               LDD     R16, Z+26
   \   00000032   8D13               LDD     R17, Z+27
   \   00000034   8D26               LDD     R18, Z+30
   \   00000036   8D37               LDD     R19, Z+31
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   0FE2               ADD     R30, R18
   \   0000003C   1FF3               ADC     R31, R19
   \   0000003E   8100               LD      R16, Z
   \   00000040   01F6               MOVW    R31:R30, R13:R12
   \   00000042   8300               ST      Z, R16
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8D06               LDD     R16, Z+30
   \   00000048   8D17               LDD     R17, Z+31
   \   0000004A   5F0F               SUBI    R16, 255
   \   0000004C   4F1F               SBCI    R17, 255
   \   0000004E   8F06               STD     Z+30, R16
   \   00000050   8F17               STD     Z+31, R17
   \   00000052   A103               LDD     R16, Z+35
   \   00000054   9503               INC     R16
   \   00000056   A303               STD     Z+35, R16
   \   00000058   A100               LDD     R16, Z+32
   \   0000005A   A111               LDD     R17, Z+33
   \   0000005C   5001               SUBI    R16, 1
   \   0000005E   4010               SBCI    R17, 0
   \   00000060   A300               STD     Z+32, R16
   \   00000062   A311               STD     Z+33, R17
   \   00000064   A103               LDD     R16, Z+35
   \   00000066   3100               CPI     R16, 16
   \   00000068   F2F8               BRCS    ??_16552_driver_task_2
   \                     ??_16552_driver_task_3:
   \   0000006A   91002202           LDS     R16, 8706
   \   0000006E   700F               ANDI    R16, 0x0F
   \   00000070   01FD               MOVW    R31:R30, R27:R26
   \   00000072   A302               STD     Z+34, R16
   \   00000074   FF00               SBRS    R16, 0
   \   00000076   C0A6               RJMP    ??_16552_driver_task_4
   \                     ??_16552_driver_task_0:
   \   00000078   EF24               LDI     R18, 244
   \   0000007A   E031               LDI     R19, 1
   \   0000007C   E003               LDI     R16, 3
   \   0000007E   ........           CALL    OS_WaitEventTimed
   \   00000082   2E90               MOV     R9, R16
   \   00000084   FF00               SBRS    R16, 0
   \   00000086   C097               RJMP    ??_16552_driver_task_5
   \   00000088   9100220A           LDS     R16, 8714
   \   0000008C   700F               ANDI    R16, 0x0F
   \   0000008E   01FD               MOVW    R31:R30, R27:R26
   \   00000090   8700               STD     Z+8, R16
   \                     ??_16552_driver_task_6:
   \   00000092   8500               LDD     R16, Z+8
   \   00000094   2300               TST     R16
   \   00000096   F051               BREQ    ??_16552_driver_task_7
   \   00000098   5002               SUBI    R16, 2
   \   0000009A   F409               BRNE    $+2+2
   \   0000009C   C055               RJMP    ??_16552_driver_task_8
   \   0000009E   5002               SUBI    R16, 2
   \   000000A0   F069               BREQ    ??_16552_driver_task_9
   \   000000A2   5002               SUBI    R16, 2
   \   000000A4   F031               BREQ    ??_16552_driver_task_10
   \   000000A6   5006               SUBI    R16, 6
   \   000000A8   F049               BREQ    ??_16552_driver_task_9
   \   000000AA   C07E               RJMP    ??_16552_driver_task_11
   \                     ??_16552_driver_task_7:
   \   000000AC   9100220E           LDS     R16, 8718
   \   000000B0   C07B               RJMP    ??_16552_driver_task_11
   \                     ??_16552_driver_task_10:
   \   000000B2   9100220D           LDS     R16, 8717
   \   000000B6   C078               RJMP    ??_16552_driver_task_11
   \                     ??_16552_driver_task_12:
   \   000000B8   ........           CALL    GoToSyncUART16552
   \                     ??_16552_driver_task_9:
   \   000000BC   E0ED               LDI     R30, LOW(8717)
   \   000000BE   E2F2               LDI     R31, 34
   \   000000C0   8100               LD      R16, Z
   \   000000C2   FF00               SBRS    R16, 0
   \   000000C4   C071               RJMP    ??_16552_driver_task_11
   \   000000C6   91202208           LDS     R18, 8712
   \   000000CA   01FD               MOVW    R31:R30, R27:R26
   \   000000CC   8502               LDD     R16, Z+10
   \   000000CE   8513               LDD     R17, Z+11
   \   000000D0   8544               LDD     R20, Z+12
   \   000000D2   8555               LDD     R21, Z+13
   \   000000D4   01F8               MOVW    R31:R30, R17:R16
   \   000000D6   0FE4               ADD     R30, R20
   \   000000D8   1FF5               ADC     R31, R21
   \   000000DA   8320               ST      Z, R18
   \   000000DC   01FD               MOVW    R31:R30, R27:R26
   \   000000DE   8902               LDD     R16, Z+18
   \   000000E0   300A               CPI     R16, 10
   \   000000E2   F361               BREQ    ??_16552_driver_task_9
   \   000000E4   2300               TST     R16
   \   000000E6   F521               BRNE    ??_16552_driver_task_13
   \   000000E8   8502               LDD     R16, Z+10
   \   000000EA   8513               LDD     R17, Z+11
   \   000000EC   8524               LDD     R18, Z+12
   \   000000EE   8535               LDD     R19, Z+13
   \   000000F0   01F8               MOVW    R31:R30, R17:R16
   \   000000F2   0FE2               ADD     R30, R18
   \   000000F4   1FF3               ADC     R31, R19
   \   000000F6   8100               LD      R16, Z
   \   000000F8   3002               CPI     R16, 2
   \   000000FA   01FD               MOVW    R31:R30, R27:R26
   \   000000FC   8903               LDD     R16, Z+19
   \   000000FE   F429               BRNE    ??_16552_driver_task_14
   \   00000100   9503               INC     R16
   \   00000102   8B03               STD     Z+19, R16
   \   00000104   86C4               STD     Z+12, R12
   \   00000106   86C5               STD     Z+13, R12
   \   00000108   CFD9               RJMP    ??_16552_driver_task_9
   \                     ??_16552_driver_task_14:
   \   0000010A   3002               CPI     R16, 2
   \   0000010C   8AC3               STD     Z+19, R12
   \   0000010E   F2B0               BRCS    ??_16552_driver_task_9
   \   00000110   E001               LDI     R16, 1
   \   00000112   8B02               STD     Z+18, R16
   \   00000114   86C6               STD     Z+14, R12
   \   00000116   86C7               STD     Z+15, R12
   \   00000118   8A44               STD     Z+20, R4
   \   0000011A   8AC5               STD     Z+21, R12
   \   0000011C   8504               LDD     R16, Z+12
   \   0000011E   8515               LDD     R17, Z+13
   \   00000120   5F0F               SUBI    R16, 255
   \   00000122   4F1F               SBCI    R17, 255
   \   00000124   8704               STD     Z+12, R16
   \   00000126   8715               STD     Z+13, R17
   \   00000128   E000               LDI     R16, 0
   \                     ??_16552_driver_task_15:
   \   0000012A   ........           CALL    ReceivePacketUart16552
   \   0000012E   CFC6               RJMP    ??_16552_driver_task_9
   \                     ??_16552_driver_task_13:
   \   00000130   8504               LDD     R16, Z+12
   \   00000132   8515               LDD     R17, Z+13
   \   00000134   5F0F               SUBI    R16, 255
   \   00000136   4F1F               SBCI    R17, 255
   \   00000138   8704               STD     Z+12, R16
   \   0000013A   8715               STD     Z+13, R17
   \   0000013C   3709               CPI     R16, 121
   \   0000013E   4010               SBCI    R17, 0
   \   00000140   E000               LDI     R16, 0
   \   00000142   F008               BRCS    $+2+2
   \   00000144   CFB9               RJMP    ??_16552_driver_task_12
   \   00000146   CFF1               RJMP    ??_16552_driver_task_15
   \                     ??_16552_driver_task_8:
   \   00000148   8106               LDD     R16, Z+6
   \   0000014A   8117               LDD     R17, Z+7
   \   0000014C   2B01               OR      R16, R17
   \   0000014E   F451               BRNE    ??_16552_driver_task_16
   \   00000150   E0EC               LDI     R30, LOW(8716)
   \   00000152   E2F2               LDI     R31, 34
   \   00000154   8100               LD      R16, Z
   \   00000156   7F0D               ANDI    R16, 0xFD
   \   00000158   8300               ST      Z, R16
   \   0000015A   ....               LDI     R16, LOW(TimerUART0)
   \   0000015C   ....               LDI     R17, (TimerUART0) >> 8
   \   0000015E   ........           CALL    OS_StopTimer
   \   00000162   C022               RJMP    ??_16552_driver_task_11
   \                     ??_16552_driver_task_16:
   \   00000164   86C1               STD     Z+9, R12
   \                     ??_16552_driver_task_17:
   \   00000166   8106               LDD     R16, Z+6
   \   00000168   8117               LDD     R17, Z+7
   \   0000016A   2B01               OR      R16, R17
   \   0000016C   F0E9               BREQ    ??_16552_driver_task_11
   \   0000016E   8100               LD      R16, Z
   \   00000170   8111               LDD     R17, Z+1
   \   00000172   8124               LDD     R18, Z+4
   \   00000174   8135               LDD     R19, Z+5
   \   00000176   01F8               MOVW    R31:R30, R17:R16
   \   00000178   0FE2               ADD     R30, R18
   \   0000017A   1FF3               ADC     R31, R19
   \   0000017C   8100               LD      R16, Z
   \   0000017E   01F5               MOVW    R31:R30, R11:R10
   \   00000180   8300               ST      Z, R16
   \   00000182   01FD               MOVW    R31:R30, R27:R26
   \   00000184   8104               LDD     R16, Z+4
   \   00000186   8115               LDD     R17, Z+5
   \   00000188   5F0F               SUBI    R16, 255
   \   0000018A   4F1F               SBCI    R17, 255
   \   0000018C   8304               STD     Z+4, R16
   \   0000018E   8315               STD     Z+5, R17
   \   00000190   8501               LDD     R16, Z+9
   \   00000192   9503               INC     R16
   \   00000194   8701               STD     Z+9, R16
   \   00000196   8106               LDD     R16, Z+6
   \   00000198   8117               LDD     R17, Z+7
   \   0000019A   5001               SUBI    R16, 1
   \   0000019C   4010               SBCI    R17, 0
   \   0000019E   8306               STD     Z+6, R16
   \   000001A0   8317               STD     Z+7, R17
   \   000001A2   8501               LDD     R16, Z+9
   \   000001A4   3100               CPI     R16, 16
   \   000001A6   F2F8               BRCS    ??_16552_driver_task_17
   \                     ??_16552_driver_task_11:
   \   000001A8   9100220A           LDS     R16, 8714
   \   000001AC   700F               ANDI    R16, 0x0F
   \   000001AE   01FD               MOVW    R31:R30, R27:R26
   \   000001B0   8700               STD     Z+8, R16
   \   000001B2   FF00               SBRS    R16, 0
   \   000001B4   CF6E               RJMP    ??_16552_driver_task_6
   \                     ??_16552_driver_task_5:
   \   000001B6   FE91               SBRS    R9, 1
   \   000001B8   CF5F               RJMP    ??_16552_driver_task_0
   \   000001BA   91002202           LDS     R16, 8706
   \   000001BE   700F               ANDI    R16, 0x0F
   \   000001C0   01FD               MOVW    R31:R30, R27:R26
   \   000001C2   A302               STD     Z+34, R16
   \                     ??_16552_driver_task_4:
   \   000001C4   A102               LDD     R16, Z+34
   \   000001C6   2300               TST     R16
   \   000001C8   F051               BREQ    ??_16552_driver_task_18
   \   000001CA   5002               SUBI    R16, 2
   \   000001CC   F409               BRNE    $+2+2
   \   000001CE   C055               RJMP    ??_16552_driver_task_19
   \   000001D0   5002               SUBI    R16, 2
   \   000001D2   F069               BREQ    ??_16552_driver_task_20
   \   000001D4   5002               SUBI    R16, 2
   \   000001D6   F031               BREQ    ??_16552_driver_task_21
   \   000001D8   5006               SUBI    R16, 6
   \   000001DA   F049               BREQ    ??_16552_driver_task_20
   \   000001DC   CF46               RJMP    ??_16552_driver_task_3
   \                     ??_16552_driver_task_18:
   \   000001DE   91002206           LDS     R16, 8710
   \   000001E2   CF43               RJMP    ??_16552_driver_task_3
   \                     ??_16552_driver_task_21:
   \   000001E4   91002205           LDS     R16, 8709
   \   000001E8   CF40               RJMP    ??_16552_driver_task_3
   \                     ??_16552_driver_task_22:
   \   000001EA   ........           CALL    GoToSyncUART16552
   \                     ??_16552_driver_task_20:
   \   000001EE   E0E5               LDI     R30, LOW(8709)
   \   000001F0   E2F2               LDI     R31, 34
   \   000001F2   8100               LD      R16, Z
   \   000001F4   FF00               SBRS    R16, 0
   \   000001F6   CF39               RJMP    ??_16552_driver_task_3
   \   000001F8   91202200           LDS     R18, 8704
   \   000001FC   01FD               MOVW    R31:R30, R27:R26
   \   000001FE   A104               LDD     R16, Z+36
   \   00000200   A115               LDD     R17, Z+37
   \   00000202   A146               LDD     R20, Z+38
   \   00000204   A157               LDD     R21, Z+39
   \   00000206   01F8               MOVW    R31:R30, R17:R16
   \   00000208   0FE4               ADD     R30, R20
   \   0000020A   1FF5               ADC     R31, R21
   \   0000020C   8320               ST      Z, R18
   \   0000020E   01FD               MOVW    R31:R30, R27:R26
   \   00000210   A504               LDD     R16, Z+44
   \   00000212   300A               CPI     R16, 10
   \   00000214   F361               BREQ    ??_16552_driver_task_20
   \   00000216   2300               TST     R16
   \   00000218   F521               BRNE    ??_16552_driver_task_23
   \   0000021A   A104               LDD     R16, Z+36
   \   0000021C   A115               LDD     R17, Z+37
   \   0000021E   A126               LDD     R18, Z+38
   \   00000220   A137               LDD     R19, Z+39
   \   00000222   01F8               MOVW    R31:R30, R17:R16
   \   00000224   0FE2               ADD     R30, R18
   \   00000226   1FF3               ADC     R31, R19
   \   00000228   8100               LD      R16, Z
   \   0000022A   3002               CPI     R16, 2
   \   0000022C   01FD               MOVW    R31:R30, R27:R26
   \   0000022E   A505               LDD     R16, Z+45
   \   00000230   F429               BRNE    ??_16552_driver_task_24
   \   00000232   9503               INC     R16
   \   00000234   A705               STD     Z+45, R16
   \   00000236   A2C6               STD     Z+38, R12
   \   00000238   A2C7               STD     Z+39, R12
   \   0000023A   CFD9               RJMP    ??_16552_driver_task_20
   \                     ??_16552_driver_task_24:
   \   0000023C   3002               CPI     R16, 2
   \   0000023E   A6C5               STD     Z+45, R12
   \   00000240   F2B0               BRCS    ??_16552_driver_task_20
   \   00000242   E001               LDI     R16, 1
   \   00000244   A704               STD     Z+44, R16
   \   00000246   A6C0               STD     Z+40, R12
   \   00000248   A6C1               STD     Z+41, R12
   \   0000024A   A646               STD     Z+46, R4
   \   0000024C   A6C7               STD     Z+47, R12
   \   0000024E   A106               LDD     R16, Z+38
   \   00000250   A117               LDD     R17, Z+39
   \   00000252   5F0F               SUBI    R16, 255
   \   00000254   4F1F               SBCI    R17, 255
   \   00000256   A306               STD     Z+38, R16
   \   00000258   A317               STD     Z+39, R17
   \   0000025A   E001               LDI     R16, 1
   \                     ??_16552_driver_task_25:
   \   0000025C   ........           CALL    ReceivePacketUart16552
   \   00000260   CFC6               RJMP    ??_16552_driver_task_20
   \                     ??_16552_driver_task_23:
   \   00000262   A106               LDD     R16, Z+38
   \   00000264   A117               LDD     R17, Z+39
   \   00000266   5F0F               SUBI    R16, 255
   \   00000268   4F1F               SBCI    R17, 255
   \   0000026A   A306               STD     Z+38, R16
   \   0000026C   A317               STD     Z+39, R17
   \   0000026E   3709               CPI     R16, 121
   \   00000270   4010               SBCI    R17, 0
   \   00000272   E001               LDI     R16, 1
   \   00000274   F008               BRCS    $+2+2
   \   00000276   CFB9               RJMP    ??_16552_driver_task_22
   \   00000278   CFF1               RJMP    ??_16552_driver_task_25
   \                     ??_16552_driver_task_19:
   \   0000027A   A100               LDD     R16, Z+32
   \   0000027C   A111               LDD     R17, Z+33
   \   0000027E   2B01               OR      R16, R17
   \   00000280   F009               BREQ    $+2+2
   \   00000282   CED1               RJMP    ??_16552_driver_task_1
   \   00000284   E0E4               LDI     R30, LOW(8708)
   \   00000286   E2F2               LDI     R31, 34
   \   00000288   8100               LD      R16, Z
   \   0000028A   7F0D               ANDI    R16, 0xFD
   \   0000028C   8300               ST      Z, R16
   \   0000028E   ....               LDI     R16, LOW(TimerUART1)
   \   00000290   ....               LDI     R17, (TimerUART1) >> 8
   \   00000292   ........           CALL    OS_StopTimer
   \   00000296   CEE9               RJMP    ??_16552_driver_task_3
    153              }
    154            }
    155          }
    156          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    157          static OS_TASK TCB_16552_DRIVER;
   \                     TCB_16552_DRIVER:
   \   00000000                      DS8 24

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    158          static OS_STACKPTR int stack[50]; /* Task stacks */
   \                     stack:
   \   00000000                      DS8 100
    159          

   \                                 In  segment CODE, align 2, keep-with-next
    160          void
    161          _16552_driver_task_init(void)
   \                     _16552_driver_task_init:
    162          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    163          
    164            OS_CREATETASK(&TCB_16552_DRIVER, "16552_DRIVER", _16552_driver_task, 90, stack);
   \   00000000   E002               LDI     R16, 2
   \   00000002   E010               LDI     R17, 0
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   E604               LDI     R16, 100
   \   0000000A   931A               ST      -Y, R17
   \   0000000C   930A               ST      -Y, R16
   \   0000000E   ....               LDI     R16, LOW(stack)
   \   00000010   ....               LDI     R17, (stack) >> 8
   \   00000012   931A               ST      -Y, R17
   \   00000014   930A               ST      -Y, R16
   \   00000016   ....               LDI     R22, LOW(_16552_driver_task/2)
   \   00000018   ....               LDI     R23, (_16552_driver_task/2) >> 8
   \   0000001A   E54A               LDI     R20, 90
   \   0000001C   ....               LDI     R18, LOW(`?<Constant "16552_DRIVER">`)
   \   0000001E   ....               LDI     R19, (`?<Constant "16552_DRIVER">`) >> 8
   \   00000020   ....               LDI     R16, LOW(TCB_16552_DRIVER)
   \   00000022   ....               LDI     R17, (TCB_16552_DRIVER) >> 8
   \   00000024   ........           JMP     OS_CreateTask_S
    165          }
    166          #endif
    167          
    168          /*************************************************************************
    169          *
    170          *  External int 0 (UART PC16554 on AN-ZB485 or ADready on AN-ZBANA)
    171          *
    172          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    173           void Int_Handler_INT0( void ){               //Int handler for ext int 0
   \                     Int_Handler_INT0:
   \   00000000   929A               ST      -Y, R9
   \   00000002   926A               ST      -Y, R6
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R9_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    174          
    175              // OBS!!!
    176              // Uses UART16552[].TxStatus as intreason and
    177              // UART16552[].TxSeqCnt as counter because these needs to be globale 
    178              // by using OS_EnterIntStack()
    179          
    180              
    181              switch (UnitID) {
   \   0000000C   9100....           LDS     R16, UnitID
   \   00000010   2300               TST     R16
   \   00000012   F021               BREQ    ??Int_Handler_INT0_0
   \   00000014   950A               DEC     R16
   \   00000016   F409               BRNE    $+2+2
   \   00000018   C0A3               RJMP    ??Int_Handler_INT0_1
   \   0000001A   C0A7               RJMP    ??Int_Handler_INT0_2
    182              case 0x00:                  // AN-ZB485  
    183          #if USE_16552_DRIVER_TASK == 1
    184                    UART16552[0].TxStatus = (U0_IIR & 0x0f);          // reason for interrupt
   \                     ??Int_Handler_INT0_0:
   \   0000001C   ....               LDI     R26, LOW(UART16552)
   \   0000001E   ....               LDI     R27, (UART16552) >> 8
   \   00000020   9100220A           LDS     R16, 8714
   \   00000024   700F               ANDI    R16, 0x0F
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8700               STD     Z+8, R16
   \   0000002A   2499               CLR     R9
   \   0000002C   EF0A               LDI     R16, 250
   \   0000002E   2E60               MOV     R6, R16
   \   00000030   E088               LDI     R24, LOW(8712)
   \   00000032   E292               LDI     R25, (8712) >> 8
    185                  do {
    186                      switch (UART16552[0].TxStatus) {
   \                     ??Int_Handler_INT0_3:
   \   00000034   8500               LDD     R16, Z+8
   \   00000036   2300               TST     R16
   \   00000038   F409               BRNE    $+2+2
   \   0000003A   C088               RJMP    ??Int_Handler_INT0_4
   \   0000003C   5002               SUBI    R16, 2
   \   0000003E   F041               BREQ    ??Int_Handler_INT0_5
   \   00000040   5002               SUBI    R16, 2
   \   00000042   F1E1               BREQ    ??Int_Handler_INT0_6
   \   00000044   5002               SUBI    R16, 2
   \   00000046   F409               BRNE    $+2+2
   \   00000048   C07E               RJMP    ??Int_Handler_INT0_7
   \   0000004A   5006               SUBI    R16, 6
   \   0000004C   F1B9               BREQ    ??Int_Handler_INT0_6
   \   0000004E   C080               RJMP    ??Int_Handler_INT0_8
    187                      case 0x02 :             // transmit holding reg emty
    188                          if (UART16552[0].TxCount == 0) {
   \                     ??Int_Handler_INT0_5:
   \   00000050   8106               LDD     R16, Z+6
   \   00000052   8117               LDD     R17, Z+7
   \   00000054   2B01               OR      R16, R17
   \   00000056   F451               BRNE    ??Int_Handler_INT0_9
    189                              U0_MCR &= ~RTS;        // set RTS off
   \   00000058   E0EC               LDI     R30, LOW(8716)
   \   0000005A   E2F2               LDI     R31, 34
   \   0000005C   8100               LD      R16, Z
   \   0000005E   7F0D               ANDI    R16, 0xFD
   \   00000060   8300               ST      Z, R16
    190                              OS_StopTimer(&TimerUART0);                    // and stop timer
   \   00000062   ....               LDI     R16, LOW(TimerUART0)
   \   00000064   ....               LDI     R17, (TimerUART0) >> 8
   \   00000066   ........           CALL    OS_StopTimer
   \   0000006A   C072               RJMP    ??Int_Handler_INT0_8
    191                          } else {
    192                              for (UART16552[0].TxSeqCnt = 0;( UART16552[0].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[0].TxCount > 0 ); UART16552[0].TxSeqCnt++, --UART16552[0].TxCount) {
   \                     ??Int_Handler_INT0_9:
   \   0000006C   8691               STD     Z+9, R9
   \                     ??Int_Handler_INT0_10:
   \   0000006E   8106               LDD     R16, Z+6
   \   00000070   8117               LDD     R17, Z+7
   \   00000072   2B01               OR      R16, R17
   \   00000074   F409               BRNE    $+2+2
   \   00000076   C06C               RJMP    ??Int_Handler_INT0_8
    193                                  U0_THR = UART16552[0].pTxBuffer[UART16552[0].TxLast++];
   \   00000078   8100               LD      R16, Z
   \   0000007A   8111               LDD     R17, Z+1
   \   0000007C   8124               LDD     R18, Z+4
   \   0000007E   8135               LDD     R19, Z+5
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   0FE2               ADD     R30, R18
   \   00000084   1FF3               ADC     R31, R19
   \   00000086   8100               LD      R16, Z
   \   00000088   01FC               MOVW    R31:R30, R25:R24
   \   0000008A   8300               ST      Z, R16
   \   0000008C   01FD               MOVW    R31:R30, R27:R26
   \   0000008E   8104               LDD     R16, Z+4
   \   00000090   8115               LDD     R17, Z+5
   \   00000092   5F0F               SUBI    R16, 255
   \   00000094   4F1F               SBCI    R17, 255
   \   00000096   8304               STD     Z+4, R16
   \   00000098   8315               STD     Z+5, R17
    194                              }
   \   0000009A   8501               LDD     R16, Z+9
   \   0000009C   9503               INC     R16
   \   0000009E   8701               STD     Z+9, R16
   \   000000A0   8106               LDD     R16, Z+6
   \   000000A2   8117               LDD     R17, Z+7
   \   000000A4   5001               SUBI    R16, 1
   \   000000A6   4010               SBCI    R17, 0
   \   000000A8   8306               STD     Z+6, R16
   \   000000AA   8317               STD     Z+7, R17
   \   000000AC   8501               LDD     R16, Z+9
   \   000000AE   3100               CPI     R16, 16
   \   000000B0   F008               BRCS    $+2+2
   \   000000B2   C04E               RJMP    ??Int_Handler_INT0_8
   \   000000B4   CFDC               RJMP    ??Int_Handler_INT0_10
    195                          }
    196                          break;
    197                      case 0x04 :             // Receive data available    
    198                      case 0x0C :             // or caracter timeout (FIFO)
    199                          while (U0_LSR & DATA_READY) {
    200          
    201                              UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] = U0_RBR;             // Read the character 
    202          
    203                              if (UART16552[0].RxState != HANDLE) {                 // ok to receive? 
    204                                  switch (UART16552[0].RxState) {                   // Yes, check state
    205                                  case SYNC :
    206                                      if ( UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] == ANPRO1_SYN) {
    207                                          UART16552[0].SyncCnt ++ ;                 // count sync
    208                                          UART16552[0].RxFirst = 0;                 // start at start of buff
    209                                      } else if (UART16552[0].SyncCnt >= 2) {       // minimum two sync bytes
    210                                          UART16552[0].SyncCnt = 0 ;                // reset counter
    211                                          UART16552[0].RxState = HEADER ;
    212                                          UART16552[0].RxLast = 0 ;
    213                                          UART16552[0].RxTimeout = RX_TO_TIME ;   // reset timeout
    214                                          UART16552[0].RxFirst++ ;                 //  1. char OK, start on next
    215                                          ReceivePacketUart16552(0) ;              // Check package
    216                                      } else {
    217                                          UART16552[0].SyncCnt = 0 ;                // start over once more
    218                                      }
    219                                      break;
    220                                  default :
    221                                      if ((++UART16552[0].RxFirst) > RXSIZE_UART_16552) { // Point to next location
    222                                          GoToSyncUART16552(0) ;                       // go to sync mode
   \                     ??Int_Handler_INT0_11:
   \   000000B6   E000               LDI     R16, 0
   \   000000B8   ........           CALL    GoToSyncUART16552
    223                                      } else {
   \                     ??Int_Handler_INT0_6:
   \   000000BC   E0ED               LDI     R30, LOW(8717)
   \   000000BE   E2F2               LDI     R31, 34
   \   000000C0   8100               LD      R16, Z
   \   000000C2   FF00               SBRS    R16, 0
   \   000000C4   C045               RJMP    ??Int_Handler_INT0_8
   \   000000C6   91202208           LDS     R18, 8712
   \   000000CA   01FD               MOVW    R31:R30, R27:R26
   \   000000CC   8502               LDD     R16, Z+10
   \   000000CE   8513               LDD     R17, Z+11
   \   000000D0   8544               LDD     R20, Z+12
   \   000000D2   8555               LDD     R21, Z+13
   \   000000D4   01F8               MOVW    R31:R30, R17:R16
   \   000000D6   0FE4               ADD     R30, R20
   \   000000D8   1FF5               ADC     R31, R21
   \   000000DA   8320               ST      Z, R18
   \   000000DC   01FD               MOVW    R31:R30, R27:R26
   \   000000DE   8902               LDD     R16, Z+18
   \   000000E0   300A               CPI     R16, 10
   \   000000E2   F361               BREQ    ??Int_Handler_INT0_6
   \   000000E4   2300               TST     R16
   \   000000E6   F521               BRNE    ??Int_Handler_INT0_12
   \   000000E8   8502               LDD     R16, Z+10
   \   000000EA   8513               LDD     R17, Z+11
   \   000000EC   8524               LDD     R18, Z+12
   \   000000EE   8535               LDD     R19, Z+13
   \   000000F0   01F8               MOVW    R31:R30, R17:R16
   \   000000F2   0FE2               ADD     R30, R18
   \   000000F4   1FF3               ADC     R31, R19
   \   000000F6   8100               LD      R16, Z
   \   000000F8   3002               CPI     R16, 2
   \   000000FA   01FD               MOVW    R31:R30, R27:R26
   \   000000FC   8903               LDD     R16, Z+19
   \   000000FE   F429               BRNE    ??Int_Handler_INT0_13
   \   00000100   9503               INC     R16
   \   00000102   8B03               STD     Z+19, R16
   \   00000104   8694               STD     Z+12, R9
   \   00000106   8695               STD     Z+13, R9
   \   00000108   CFD9               RJMP    ??Int_Handler_INT0_6
   \                     ??Int_Handler_INT0_13:
   \   0000010A   3002               CPI     R16, 2
   \   0000010C   8A93               STD     Z+19, R9
   \   0000010E   F2B0               BRCS    ??Int_Handler_INT0_6
   \   00000110   E001               LDI     R16, 1
   \   00000112   8B02               STD     Z+18, R16
   \   00000114   8696               STD     Z+14, R9
   \   00000116   8697               STD     Z+15, R9
   \   00000118   8A64               STD     Z+20, R6
   \   0000011A   8A95               STD     Z+21, R9
   \   0000011C   8504               LDD     R16, Z+12
   \   0000011E   8515               LDD     R17, Z+13
   \   00000120   5F0F               SUBI    R16, 255
   \   00000122   4F1F               SBCI    R17, 255
   \   00000124   8704               STD     Z+12, R16
   \   00000126   8715               STD     Z+13, R17
   \                     ??Int_Handler_INT0_14:
   \   00000128   E000               LDI     R16, 0
   \   0000012A   ........           CALL    ReceivePacketUart16552
   \   0000012E   CFC6               RJMP    ??Int_Handler_INT0_6
   \                     ??Int_Handler_INT0_12:
   \   00000130   8504               LDD     R16, Z+12
   \   00000132   8515               LDD     R17, Z+13
   \   00000134   5F0F               SUBI    R16, 255
   \   00000136   4F1F               SBCI    R17, 255
   \   00000138   8704               STD     Z+12, R16
   \   0000013A   8715               STD     Z+13, R17
   \   0000013C   3709               CPI     R16, 121
   \   0000013E   4010               SBCI    R17, 0
   \   00000140   F008               BRCS    $+2+2
   \   00000142   CFB9               RJMP    ??Int_Handler_INT0_11
    224                                          ReceivePacketUart16552(0) ;              // Check package
   \   00000144   CFF1               RJMP    ??Int_Handler_INT0_14
    225                                      }
    226                                      break ;   
    227                                  }
    228                              }
    229                          } 
    230                          break;
    231                      case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    232                          U0_LSR;      // Dummy read to empty register        
   \                     ??Int_Handler_INT0_7:
   \   00000146   9100220D           LDS     R16, 8717
    233                          break;
   \   0000014A   C002               RJMP    ??Int_Handler_INT0_8
    234                      case 0x00 :                 // Modem status.
    235                          U0_MSR;      // Dummy read to empty register           
   \                     ??Int_Handler_INT0_4:
   \   0000014C   9100220E           LDS     R16, 8718
    236                          break;
    237                      }
    238                      UART16552[0].TxStatus = (U0_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??Int_Handler_INT0_8:
   \   00000150   9100220A           LDS     R16, 8714
   \   00000154   700F               ANDI    R16, 0x0F
   \   00000156   01FD               MOVW    R31:R30, R27:R26
   \   00000158   8700               STD     Z+8, R16
    239                                                                                // check again before exit to avoid lost int. and hang
    240                  } while ((UART16552[0].TxStatus & 0x01) != 0x01) ;  
   \   0000015A   FF00               SBRS    R16, 0
   \   0000015C   CF6B               RJMP    ??Int_Handler_INT0_3
   \   0000015E   C005               RJMP    ??Int_Handler_INT0_2
    241          #else
    242                  OS_SignalEvent(0x01, &TCB_16552_DRIVER) ;
    243          #endif
    244                  break;
    245              case 0x01:                  // AN-ZBANA ADready
    246                  OS_SignalEvent(1, &TCB_AD7715);
   \                     ??Int_Handler_INT0_1:
   \   00000160   ....               LDI     R18, LOW(TCB_AD7715)
   \   00000162   ....               LDI     R19, (TCB_AD7715) >> 8
   \   00000164   E001               LDI     R16, 1
   \   00000166   ........           CALL    OS_SignalEvent
    247                  break;
    248              }
    249          }
   \                     ??Int_Handler_INT0_2:
   \   0000016A                      REQUIRE ?Subroutine0
   \   0000016A                      ;               // Fall through to label ?Subroutine0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9069               LD      R6, Y+
   \   0000000A   9099               LD      R9, Y+
   \   0000000C   9508               RET
    250          
    251          
    252          #pragma vector=INT0_vect

   \                                 In  segment CODE, align 2, keep-with-next
    253          __interrupt void IntHandler_INT0( void ){               //Int handler for ext int 0
   \                     IntHandler_INT0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    254              OS_CallISR(Int_Handler_INT0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_INT0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_INT0/2) >> 8
   \   00000028                      REQUIRE ?Subroutine1
   \   00000028                      ;               // Fall through to label ?Subroutine1
    255          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ........           CALL    OS_CallISR
   \   00000004   BF9B               OUT     0x3B, R25
   \   00000006   BF8F               OUT     0x3F, R24
   \   00000008   9109               LD      R16, Y+
   \   0000000A   9119               LD      R17, Y+
   \   0000000C   9129               LD      R18, Y+
   \   0000000E   9139               LD      R19, Y+
   \   00000010   9149               LD      R20, Y+
   \   00000012   9159               LD      R21, Y+
   \   00000014   9169               LD      R22, Y+
   \   00000016   9179               LD      R23, Y+
   \   00000018   9009               LD      R0, Y+
   \   0000001A   9019               LD      R1, Y+
   \   0000001C   9029               LD      R2, Y+
   \   0000001E   9039               LD      R3, Y+
   \   00000020   91E9               LD      R30, Y+
   \   00000022   91F9               LD      R31, Y+
   \   00000024   9189               LD      R24, Y+
   \   00000026   9199               LD      R25, Y+
   \   00000028   9518               RETI
    256          
    257          /*************************************************************************
    258          *
    259          *  External int 1 (UART PC16554 on AN-ZB485)
    260          *
    261          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    262          void Int_Handler_INT1( void ){               //Int handler for Ext int 1
   \                     Int_Handler_INT1:
   \   00000000   929A               ST      -Y, R9
   \   00000002   926A               ST      -Y, R6
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R9_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    263          
    264              // OBS!!!
    265              // Uses UART16552[].TxStatus as intreason and
    266              // UART16552[].TxSeqCnt as counter because these needs to be globale 
    267              // by using OS_EnterIntStack()
    268              
    269              switch (UnitID) {
   \   0000000C   9100....           LDS     R16, UnitID
   \   00000010   2300               TST     R16
   \   00000012   F009               BREQ    $+2+2
   \   00000014   C0A1               RJMP    ??Int_Handler_INT1_0
    270              case 0x00:               // AN-ZB485 
    271          #if USE_16552_DRIVER_TASK == 1
    272                  UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt
   \   00000016   ....               LDI     R26, LOW(UART16552)
   \   00000018   ....               LDI     R27, (UART16552) >> 8
   \   0000001A   91002202           LDS     R16, 8706
   \   0000001E   700F               ANDI    R16, 0x0F
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   A302               STD     Z+34, R16
   \   00000024   2499               CLR     R9
   \   00000026   EF0A               LDI     R16, 250
   \   00000028   2E60               MOV     R6, R16
   \   0000002A   E080               LDI     R24, 0
   \   0000002C   E292               LDI     R25, (8704) >> 8
    273                  do {
    274                      switch (UART16552[1].TxStatus) {
   \                     ??Int_Handler_INT1_1:
   \   0000002E   A102               LDD     R16, Z+34
   \   00000030   2300               TST     R16
   \   00000032   F409               BRNE    $+2+2
   \   00000034   C088               RJMP    ??Int_Handler_INT1_2
   \   00000036   5002               SUBI    R16, 2
   \   00000038   F041               BREQ    ??Int_Handler_INT1_3
   \   0000003A   5002               SUBI    R16, 2
   \   0000003C   F1E1               BREQ    ??Int_Handler_INT1_4
   \   0000003E   5002               SUBI    R16, 2
   \   00000040   F409               BRNE    $+2+2
   \   00000042   C07E               RJMP    ??Int_Handler_INT1_5
   \   00000044   5006               SUBI    R16, 6
   \   00000046   F1B9               BREQ    ??Int_Handler_INT1_4
   \   00000048   C080               RJMP    ??Int_Handler_INT1_6
    275                      case 0x02 :             // transmit holding reg emty
    276                          if (UART16552[1].TxCount == 0) {
   \                     ??Int_Handler_INT1_3:
   \   0000004A   A100               LDD     R16, Z+32
   \   0000004C   A111               LDD     R17, Z+33
   \   0000004E   2B01               OR      R16, R17
   \   00000050   F451               BRNE    ??Int_Handler_INT1_7
    277                              U1_MCR &= ~RTS;        // set RTS off
   \   00000052   E0E4               LDI     R30, LOW(8708)
   \   00000054   E2F2               LDI     R31, 34
   \   00000056   8100               LD      R16, Z
   \   00000058   7F0D               ANDI    R16, 0xFD
   \   0000005A   8300               ST      Z, R16
    278                              OS_StopTimer(&TimerUART1);                    // and stop timer
   \   0000005C   ....               LDI     R16, LOW(TimerUART1)
   \   0000005E   ....               LDI     R17, (TimerUART1) >> 8
   \   00000060   ........           CALL    OS_StopTimer
   \   00000064   C072               RJMP    ??Int_Handler_INT1_6
    279                          } else {
    280                              for (UART16552[1].TxSeqCnt = 0;( UART16552[1].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[1].TxCount > 0 ); UART16552[1].TxSeqCnt++, UART16552[1].TxCount--) {
   \                     ??Int_Handler_INT1_7:
   \   00000066   A293               STD     Z+35, R9
   \                     ??Int_Handler_INT1_8:
   \   00000068   A100               LDD     R16, Z+32
   \   0000006A   A111               LDD     R17, Z+33
   \   0000006C   2B01               OR      R16, R17
   \   0000006E   F409               BRNE    $+2+2
   \   00000070   C06C               RJMP    ??Int_Handler_INT1_6
    281                                 U1_THR = UART16552[1].pTxBuffer[UART16552[1].TxLast++] ;
   \   00000072   8D02               LDD     R16, Z+26
   \   00000074   8D13               LDD     R17, Z+27
   \   00000076   8D26               LDD     R18, Z+30
   \   00000078   8D37               LDD     R19, Z+31
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   0FE2               ADD     R30, R18
   \   0000007E   1FF3               ADC     R31, R19
   \   00000080   8100               LD      R16, Z
   \   00000082   01FC               MOVW    R31:R30, R25:R24
   \   00000084   8300               ST      Z, R16
   \   00000086   01FD               MOVW    R31:R30, R27:R26
   \   00000088   8D06               LDD     R16, Z+30
   \   0000008A   8D17               LDD     R17, Z+31
   \   0000008C   5F0F               SUBI    R16, 255
   \   0000008E   4F1F               SBCI    R17, 255
   \   00000090   8F06               STD     Z+30, R16
   \   00000092   8F17               STD     Z+31, R17
    282                              }
   \   00000094   A103               LDD     R16, Z+35
   \   00000096   9503               INC     R16
   \   00000098   A303               STD     Z+35, R16
   \   0000009A   A100               LDD     R16, Z+32
   \   0000009C   A111               LDD     R17, Z+33
   \   0000009E   5001               SUBI    R16, 1
   \   000000A0   4010               SBCI    R17, 0
   \   000000A2   A300               STD     Z+32, R16
   \   000000A4   A311               STD     Z+33, R17
   \   000000A6   A103               LDD     R16, Z+35
   \   000000A8   3100               CPI     R16, 16
   \   000000AA   F008               BRCS    $+2+2
   \   000000AC   C04E               RJMP    ??Int_Handler_INT1_6
   \   000000AE   CFDC               RJMP    ??Int_Handler_INT1_8
    283                          }
    284                          break;
    285                      case 0x04 :             // Receive data available    
    286                      case 0x0C :             // or caracter timeout (FIFO)
    287                          while (U1_LSR & DATA_READY) {
    288          
    289                              UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] = U1_RBR;          // Read the character 
    290          
    291                              if (UART16552[1].RxState != HANDLE) {        // ok to receive? 
    292                                  switch (UART16552[1].RxState) {                   // Yes, check state
    293                                  case SYNC :
    294                                      if ( UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] == ANPRO1_SYN) {
    295                                          UART16552[1].SyncCnt ++ ;                 // count sync
    296                                          UART16552[1].RxFirst = 0;                 // start at start of buff
    297                                      } else if (UART16552[1].SyncCnt >= 2) {       // minimum two sync bytes
    298                                          UART16552[1].SyncCnt = 0 ;                // reset counter
    299                                          UART16552[1].RxState = HEADER ;
    300                                          UART16552[1].RxLast = 0 ;
    301                                          UART16552[1].RxTimeout = RX_TO_TIME ;     // reset timeout
    302                                          UART16552[1].RxFirst++ ;                  //  1. char OK, start on next
    303                                          ReceivePacketUart16552(1) ;               // Check package
    304                                      } else {
    305                                          UART16552[1].SyncCnt = 0 ;                // start over once more
    306                                      }
    307                                      break;
    308                                  default :
    309                                      if ((++UART16552[1].RxFirst) > RXSIZE_UART_16552) { // Point to next location
    310                                          GoToSyncUART16552(1) ;                       // go to sync mode
   \                     ??Int_Handler_INT1_9:
   \   000000B0   E001               LDI     R16, 1
   \   000000B2   ........           CALL    GoToSyncUART16552
    311                                      } else {
   \                     ??Int_Handler_INT1_4:
   \   000000B6   E0E5               LDI     R30, LOW(8709)
   \   000000B8   E2F2               LDI     R31, 34
   \   000000BA   8100               LD      R16, Z
   \   000000BC   FF00               SBRS    R16, 0
   \   000000BE   C045               RJMP    ??Int_Handler_INT1_6
   \   000000C0   91202200           LDS     R18, 8704
   \   000000C4   01FD               MOVW    R31:R30, R27:R26
   \   000000C6   A104               LDD     R16, Z+36
   \   000000C8   A115               LDD     R17, Z+37
   \   000000CA   A146               LDD     R20, Z+38
   \   000000CC   A157               LDD     R21, Z+39
   \   000000CE   01F8               MOVW    R31:R30, R17:R16
   \   000000D0   0FE4               ADD     R30, R20
   \   000000D2   1FF5               ADC     R31, R21
   \   000000D4   8320               ST      Z, R18
   \   000000D6   01FD               MOVW    R31:R30, R27:R26
   \   000000D8   A504               LDD     R16, Z+44
   \   000000DA   300A               CPI     R16, 10
   \   000000DC   F361               BREQ    ??Int_Handler_INT1_4
   \   000000DE   2300               TST     R16
   \   000000E0   F521               BRNE    ??Int_Handler_INT1_10
   \   000000E2   A104               LDD     R16, Z+36
   \   000000E4   A115               LDD     R17, Z+37
   \   000000E6   A126               LDD     R18, Z+38
   \   000000E8   A137               LDD     R19, Z+39
   \   000000EA   01F8               MOVW    R31:R30, R17:R16
   \   000000EC   0FE2               ADD     R30, R18
   \   000000EE   1FF3               ADC     R31, R19
   \   000000F0   8100               LD      R16, Z
   \   000000F2   3002               CPI     R16, 2
   \   000000F4   01FD               MOVW    R31:R30, R27:R26
   \   000000F6   A505               LDD     R16, Z+45
   \   000000F8   F429               BRNE    ??Int_Handler_INT1_11
   \   000000FA   9503               INC     R16
   \   000000FC   A705               STD     Z+45, R16
   \   000000FE   A296               STD     Z+38, R9
   \   00000100   A297               STD     Z+39, R9
   \   00000102   CFD9               RJMP    ??Int_Handler_INT1_4
   \                     ??Int_Handler_INT1_11:
   \   00000104   3002               CPI     R16, 2
   \   00000106   A695               STD     Z+45, R9
   \   00000108   F2B0               BRCS    ??Int_Handler_INT1_4
   \   0000010A   E001               LDI     R16, 1
   \   0000010C   A704               STD     Z+44, R16
   \   0000010E   A690               STD     Z+40, R9
   \   00000110   A691               STD     Z+41, R9
   \   00000112   A666               STD     Z+46, R6
   \   00000114   A697               STD     Z+47, R9
   \   00000116   A106               LDD     R16, Z+38
   \   00000118   A117               LDD     R17, Z+39
   \   0000011A   5F0F               SUBI    R16, 255
   \   0000011C   4F1F               SBCI    R17, 255
   \   0000011E   A306               STD     Z+38, R16
   \   00000120   A317               STD     Z+39, R17
   \                     ??Int_Handler_INT1_12:
   \   00000122   E001               LDI     R16, 1
   \   00000124   ........           CALL    ReceivePacketUart16552
   \   00000128   CFC6               RJMP    ??Int_Handler_INT1_4
   \                     ??Int_Handler_INT1_10:
   \   0000012A   A106               LDD     R16, Z+38
   \   0000012C   A117               LDD     R17, Z+39
   \   0000012E   5F0F               SUBI    R16, 255
   \   00000130   4F1F               SBCI    R17, 255
   \   00000132   A306               STD     Z+38, R16
   \   00000134   A317               STD     Z+39, R17
   \   00000136   3709               CPI     R16, 121
   \   00000138   4010               SBCI    R17, 0
   \   0000013A   F008               BRCS    $+2+2
   \   0000013C   CFB9               RJMP    ??Int_Handler_INT1_9
    312                                          ReceivePacketUart16552(1) ;              // Check package
   \   0000013E   CFF1               RJMP    ??Int_Handler_INT1_12
    313                                      }
    314                                      break ;   
    315                                  }
    316                              }
    317                          }
    318                          break;
    319                      case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    320                          U1_LSR;      // Dummy read to empty register        
   \                     ??Int_Handler_INT1_5:
   \   00000140   91002205           LDS     R16, 8709
    321                          break;
   \   00000144   C002               RJMP    ??Int_Handler_INT1_6
    322                      case 0x00 :                 // Modem status.
    323                          U1_MSR;      // Dummy read to empty register           
   \                     ??Int_Handler_INT1_2:
   \   00000146   91002206           LDS     R16, 8710
    324                          break;
    325                      }
    326                      UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??Int_Handler_INT1_6:
   \   0000014A   91002202           LDS     R16, 8706
   \   0000014E   700F               ANDI    R16, 0x0F
   \   00000150   01FD               MOVW    R31:R30, R27:R26
   \   00000152   A302               STD     Z+34, R16
    327                                                                                // check again before exit to avoid lost int. and hang
    328                 } while ((UART16552[1].TxStatus & 0x01) != 0x01);  
   \   00000154   FF00               SBRS    R16, 0
   \   00000156   CF6B               RJMP    ??Int_Handler_INT1_1
    329          #else
    330                  OS_SignalEvent(0x02, &TCB_16552_DRIVER);
    331          #endif
    332                  break;
    333              case 0x01:                  // AN-ZBANA Not connected!
    334                  break;
    335              }
    336          }
   \                     ??Int_Handler_INT1_0:
   \   00000158   ....               RJMP    ?Subroutine0
    337          
    338          
    339          #pragma vector=INT1_vect

   \                                 In  segment CODE, align 2, keep-with-next
    340          __interrupt void IntHandler_INT1( void ){               //Int handler for Ext int 1
   \                     IntHandler_INT1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    341          
    342              OS_CallISR(Int_Handler_INT1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_INT1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_INT1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine1
    343          }

   \                                 In  segment INTVEC, offset 0x4, root
   \                     `??IntHandler_INT0::??INTVEC 4`:
   \   00000004   ........           JMP     IntHandler_INT0

   \                                 In  segment INTVEC, offset 0x8, root
   \                     `??IntHandler_INT1::??INTVEC 8`:
   \   00000008   ........           JMP     IntHandler_INT1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "16552_DRIVER">>`:
   \   00000000   363135355F32       DC8 "16552_DRIVER"
   \              524456495245
   \              00

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "16552_DRIVER">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "16552_DRIVER">>`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_INT0
       16      2   -> OS_CallISR
     16      2   IntHandler_INT1
       16      2   -> OS_CallISR
      6      2   Int_Handler_INT0
        6      2   -> GoToSyncUART16552
        6      2   -> OS_SignalEvent
        6      2   -> OS_StopTimer
        6      2   -> ReceivePacketUart16552
      6      2   Int_Handler_INT1
        6      2   -> GoToSyncUART16552
        6      2   -> OS_StopTimer
        6      2   -> ReceivePacketUart16552
      8      2   _16552_driver_task
        8      2   -> GoToSyncUART16552
        8      2   -> OS_StopTimer
        8      2   -> OS_WaitEventTimed
        8      2   -> ReceivePacketUart16552
      6      2   _16552_driver_task_init
        0      2   -> OS_CreateTask_S


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      13  ?<Constant "16552_DRIVER">
      13  ?<Initializer for <Constant "16552_DRIVER">>
      14  ?Subroutine0
      42  ?Subroutine1
      40  IntHandler_INT0
       4  IntHandler_INT0::??INTVEC 4
      42  IntHandler_INT1
       4  IntHandler_INT1::??INTVEC 8
     362  Int_Handler_INT0
     346  Int_Handler_INT1
      24  TCB_16552_DRIVER
     664  _16552_driver_task
      40  _16552_driver_task_init
     100  stack
      14  -- Other

 
 1'550 bytes in segment CODE
    14 bytes in segment INITTAB
     8 bytes in segment INTVEC
    13 bytes in segment NEAR_I
    13 bytes in segment NEAR_ID
   124 bytes in segment NEAR_Z
 
 1'563 bytes of CODE memory (+ 22 bytes shared)
   137 bytes of DATA memory

Errors: none
Warnings: none
