###############################################################################
#
# IAR C/C++ Compiler V8.10.1.1784/W64 for Microchip AVR   02/May/2023  12:40:45
# Copyright 1996-2023 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file           =  D:\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
#    Command line          =
#        -f D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\RS485.r90.rsp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main -D OS_LIBMODE_S -D
#        OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -lCN
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\List\Main -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\ --eeprom_size 4096
#        --clib -Oh) --dependencies=n
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\RS485.r90.iar_deps
#    Locale                =  C
#    List file             =
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\List\Main\RS485.lst
#    Object file           =
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\Main\RS485.r90
#    Runtime model:           
#      __64bit_doubles     =  disabled
#      __SystemLibrary     =  CLib
#      __architecture      =  *
#      __cpu               =  3
#      __cpu_name          =  ATmega1281
#      __dlib_version      =  clib
#      __enhanced_core     =  enabled
#      __enhanced_core_mul =  enabled
#      __has_elpm          =  true
#      __memory_model      =  2
#      __mex               =  disabled
#      __no_rampd          =  enabled
#      __rt_version        =  3
#      __vtable_memory     =  __nearflash
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x2e
   \   __no_init union <unnamed>#436 volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   __no_init union <unnamed>#454 volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          #if USE_MODBUS_PROTOCOL == 1
     14          #include "common_def.h"
     15          
     16          #endif /* USE_MODBUS_PROTOCOL == 1 */
     17          
     18          
     19          /************************************************ *************************
     20          *   (This is a timer calback)
     21          *  Timout timer UART 0
     22          *
     23          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     24          void TimoutUART0(void) {
   \                     TimoutUART0:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     25          
     26              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   E0EC               LDI     R30, LOW(8716)
   \   00000002                      REQUIRE ?Subroutine3
   \   00000002                      ;               // Fall through to label ?Subroutine3
     27          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   E2F2               LDI     R31, (8716) >> 8
   \   00000002   8100               LD      R16, Z
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   8300               ST      Z, R16
   \   00000008   9508               RET
     28          
     29          /*************************************************************************
     30          *   (This is a timer calback)
     31          *  Timout timer UART 1
     32          *
     33          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     34          void TimoutUART1(void) {
   \                     TimoutUART1:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     35          
     36              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   E0E4               LDI     R30, LOW(8708)
   \   00000002   ....               RJMP    ?Subroutine3
     37          }
     38          
     39          
     40          /*************************************************************************
     41          *   (This is a task)
     42          *  Usart handler UART send request
     43          *
     44          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     45          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92DA               ST      -Y, R13
   \   00000006   92CA               ST      -Y, R12
   \   00000008   92AA               ST      -Y, R10
   \   0000000A   929A               ST      -Y, R9
   \   0000000C   928A               ST      -Y, R8
   \   0000000E   927A               ST      -Y, R7
   \   00000010   926A               ST      -Y, R6
   \   00000012   925A               ST      -Y, R5
   \   00000014   924A               ST      -Y, R4
   \   00000016   93BA               ST      -Y, R27
   \   00000018   93AA               ST      -Y, R26
   \   0000001A   939A               ST      -Y, R25
   \   0000001C   938A               ST      -Y, R24
   \   0000001E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R13_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R14_is_cg_reg
   \   0000001E                      REQUIRE ?Register_R15_is_cg_reg
   \   0000001E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000001E   9721               SBIW    R29:R28, 1
     46              char SeqCnt = 0;
   \   00000020   E0A0               LDI     R26, 0
     47              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   00000022   E005               LDI     R16, 5
   \   00000024   8308               ST      Y, R16
     48              char EventStatus;
     49              char AskMD[2];
     50              char temp;
     51          
     52              
     53              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000026   ....               LDI     R30, LOW(UART16552)
   \   00000028   ....               LDI     R31, (UART16552) >> 8
   \   0000002A   83A2               STD     Z+2, R26
   \   0000002C   83A3               STD     Z+3, R26
   \   0000002E   83A4               STD     Z+4, R26
   \   00000030   83A5               STD     Z+5, R26
   \   00000032   83A6               STD     Z+6, R26
   \   00000034   83A7               STD     Z+7, R26
   \   00000036   87A4               STD     Z+12, R26
   \   00000038   87A5               STD     Z+13, R26
   \   0000003A   87A6               STD     Z+14, R26
   \   0000003C   87A7               STD     Z+15, R26
   \   0000003E   8BA0               STD     Z+16, R26
   \   00000040   8BA1               STD     Z+17, R26
   \   00000042   8BA2               STD     Z+18, R26
   \   00000044   8BA3               STD     Z+19, R26
   \   00000046   87A0               STD     Z+8, R26
   \   00000048   EF0A               LDI     R16, 250
   \   0000004A   8B04               STD     Z+20, R16
   \   0000004C   8BA5               STD     Z+21, R26
   \   0000004E   ....               LDI     R16, LOW(TxBuf16552Ch0)
   \   00000050   ....               LDI     R17, (TxBuf16552Ch0) >> 8
   \   00000052   8300               ST      Z, R16
   \   00000054   8311               STD     Z+1, R17
   \   00000056   ....               LDI     R16, LOW(RxBuf16552Ch0)
   \   00000058   ....               LDI     R17, (RxBuf16552Ch0) >> 8
   \   0000005A   8702               STD     Z+10, R16
   \   0000005C   8713               STD     Z+11, R17
   \   0000005E   E800               LDI     R16, 128
   \   00000060   9300220B           STS     8715, R16
   \   00000064   E00D               LDI     R16, 13
   \   00000066   93002208           STS     8712, R16
   \   0000006A   93A02209           STS     8713, R26
   \   0000006E   E003               LDI     R16, 3
   \   00000070   9300220B           STS     8715, R16
   \   00000074   E001               LDI     R16, 1
   \   00000076   9300220A           STS     8714, R16
   \   0000007A   EC01               LDI     R16, 193
   \   0000007C   9300220A           STS     8714, R16
   \   00000080   E003               LDI     R16, 3
   \   00000082   93002209           STS     8713, R16
   \   00000086   93A0220C           STS     8716, R26
     54              Init16552(1, 9600);                                      // Init UART channel 1
   \   0000008A   8FA4               STD     Z+28, R26
   \   0000008C   8FA5               STD     Z+29, R26
   \   0000008E   8FA6               STD     Z+30, R26
   \   00000090   8FA7               STD     Z+31, R26
   \   00000092   A3A0               STD     Z+32, R26
   \   00000094   A3A1               STD     Z+33, R26
   \   00000096   A3A6               STD     Z+38, R26
   \   00000098   A3A7               STD     Z+39, R26
   \   0000009A   A7A0               STD     Z+40, R26
   \   0000009C   A7A1               STD     Z+41, R26
   \   0000009E   A7A2               STD     Z+42, R26
   \   000000A0   A7A3               STD     Z+43, R26
   \   000000A2   A7A4               STD     Z+44, R26
   \   000000A4   A7A5               STD     Z+45, R26
   \   000000A6   A3A2               STD     Z+34, R26
   \   000000A8   EF0A               LDI     R16, 250
   \   000000AA   A706               STD     Z+46, R16
   \   000000AC   A7A7               STD     Z+47, R26
   \   000000AE   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   000000B0   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   000000B2   8F02               STD     Z+26, R16
   \   000000B4   8F13               STD     Z+27, R17
   \   000000B6   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   000000B8   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   000000BA   A304               STD     Z+36, R16
   \   000000BC   A315               STD     Z+37, R17
   \   000000BE   E800               LDI     R16, 128
   \   000000C0   93002203           STS     8707, R16
   \   000000C4   E00D               LDI     R16, 13
   \   000000C6   93002200           STS     8704, R16
   \   000000CA   93A02201           STS     8705, R26
   \   000000CE   E003               LDI     R16, 3
   \   000000D0   93002203           STS     8707, R16
   \   000000D4   E001               LDI     R16, 1
   \   000000D6   93002202           STS     8706, R16
   \   000000DA   EC01               LDI     R16, 193
   \   000000DC   93002202           STS     8706, R16
   \   000000E0   E003               LDI     R16, 3
   \   000000E2   93002201           STS     8705, R16
   \   000000E6   93A02204           STS     8708, R26
     55              
     56              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   000000EA   ....               LDI     R16, LOW(TData)
   \   000000EC   2EE0               MOV     R14, R16
   \   000000EE   ....               LDI     R16, (TData) >> 8
   \   000000F0   2EF0               MOV     R15, R16
   \   000000F2   E002               LDI     R16, 2
   \   000000F4   E010               LDI     R17, 0
   \   000000F6   ........           CALL    ReadEEPROMByte
   \   000000FA   01F7               MOVW    R31:R30, R15:R14
   \   000000FC   8300               ST      Z, R16
     57              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   000000FE   E003               LDI     R16, 3
   \   00000100   E010               LDI     R17, 0
   \   00000102   ........           CALL    ReadEEPROMByte
   \   00000106   01F7               MOVW    R31:R30, R15:R14
   \   00000108   8301               STD     Z+1, R16
     58              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   0000010A   E004               LDI     R16, 4
   \   0000010C   E010               LDI     R17, 0
   \   0000010E   ........           CALL    ReadEEPROMByte
   \   00000112   01F7               MOVW    R31:R30, R15:R14
   \   00000114   8302               STD     Z+2, R16
     59          #if USE_MODBUS_PROTOCOL == 1
     60              {
     61                static void load_eeprom_misc_485(void);
     62                load_eeprom_misc_485();
     63              }
     64          #endif
     65          
     66              TData.RS4.ToTargetBuffer[0][0] = false;
   \   00000116   ....               LDI     R16, LOW((TData + 1268))
   \   00000118   2E80               MOV     R8, R16
   \   0000011A   ....               LDI     R16, HIGH((TData + 1268))
   \   0000011C   2E90               MOV     R9, R16
   \   0000011E   01F4               MOVW    R31:R30, R9:R8
   \   00000120   83A0               ST      Z, R26
     67              TData.RS4.ToTargetBuffer[1][0] = false;
   \   00000122   ....               LDI     R16, LOW((TData + 1348))
   \   00000124   2E60               MOV     R6, R16
   \   00000126   ....               LDI     R16, HIGH((TData + 1348))
   \   00000128   2E70               MOV     R7, R16
   \   0000012A   01F3               MOVW    R31:R30, R7:R6
   \   0000012C   83A0               ST      Z, R26
     68              TData.RS4.FromTargetBuffer[0][0] = false;
   \   0000012E   ....               LDI     R16, LOW((TData + 1428))
   \   00000130   2EC0               MOV     R12, R16
   \   00000132   ....               LDI     R16, HIGH((TData + 1428))
   \   00000134   2ED0               MOV     R13, R16
   \   00000136   01F6               MOVW    R31:R30, R13:R12
   \   00000138   83A0               ST      Z, R26
     69              TData.RS4.FromTargetBuffer[1][0] = false;
   \   0000013A   ABA2               STD     Z+50, R26
     70              
     71              
     72              for (char i = 0; i < 8; i++) {
   \   0000013C   E080               LDI     R24, 0
   \   0000013E   E098               LDI     R25, 8
     73                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \                     ??ExtRS485Ctl_0:
   \   00000140   94F8               cli
   \   00000142   01F7               MOVW    R31:R30, R15:R14
   \   00000144   8120               LD      R18, Z
   \   00000146   2F48               MOV     R20, R24
   \   00000148   E001               LDI     R16, 1
   \   0000014A   E010               LDI     R17, 0
   \   0000014C   ........           CALL    ?S_SHL_L02
   \   00000150   2320               AND     R18, R16
   \   00000152   B108               IN      R16, 0x08
   \   00000154   2B02               OR      R16, R18
   \   00000156   B908               OUT     0x08, R16
   \   00000158   9100....           LDS     R16, (OS_Global + 1)
   \   0000015C   2300               TST     R16
   \   0000015E   F409               BRNE    ??ExtRS485Ctl_1
   \   00000160   9478               sei
     74                  OS_Delay(100);
   \                     ??ExtRS485Ctl_1:
   \   00000162   E604               LDI     R16, 100
   \   00000164   E010               LDI     R17, 0
   \   00000166   ........           CALL    OS_Delay
     75              }
   \   0000016A   9583               INC     R24
   \   0000016C   959A               DEC     R25
   \   0000016E   F741               BRNE    ??ExtRS485Ctl_0
     76              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \   00000170   E700               LDI     R16, 112
   \   00000172   E117               LDI     R17, 23
   \   00000174   ........           CALL    OS_Delay
   \   00000178   ....               LDI     R24, LOW((TData + 1528))
   \   0000017A   ....               LDI     R25, HIGH((TData + 1528))
   \   0000017C   ....               LDI     R16, LOW(PortPair)
   \   0000017E   2E40               MOV     R4, R16
   \   00000180   ....               LDI     R16, (PortPair) >> 8
   \   00000182   2E50               MOV     R5, R16
   \   00000184   C005               RJMP    ??ExtRS485Ctl_2
     77          
     78          #if USE_MODBUS_PROTOCOL == 1
     79              //
     80              // let modbus task that I'm done initializing
     81              //
     82              {
     83                extern void modbus_rtu_notify_go(void);
     84                modbus_rtu_notify_go();
     85              }
     86          #endif
     87          
     88              while (1) {
     89                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
   \                     ??ExtRS485Ctl_3:
   \   00000186   2DAA               MOV     R26, R10
     90                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
     91                          EmptyRxBuf16552(0);                            // Empty UART channel 0
     92                      }
     93                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
     94                          EmptyRxBuf16552(1);                            // Empty UART channel 1
     95                      }
     96                      if (PowerOnTimer < POWER_ON_CNT) {
     97                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
     98                              SetRS4Port();                                // and set power on ports
     99                          }
    100                      }
    101                      SetBit(PORTE, 0xf0);
    102                      // volatile undefined behavior
    103                      // ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
    104                      //
    105                      temp = (0x10 << PortPair) & 0xf0;
    106                      ClrBit(PORTE, temp);           // set mux port
    107                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
    108                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
    109                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
    110                          switch (SnsType) {
    111                          case 0x01:    //Water ingress??
    112                              switch (SeqCnt) {
    113                              case 0:
    114                                  Uart_BuildReqWISCardStatus(0);          //Card status
    115                                  break;
    116                              case 20:
    117                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    118                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
    119                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    120                                          TData.RS4.EEPROMPortpair[0] = 0;
    121                                      }
    122                                  } else {
    123                                      Uart_BuildReqWISData(0);                //WIS data
    124                                  }
    125                                  break;
    126                              default:
    127                                  Uart_BuildReqWISData(0);                //WIS data
    128                                  break;
    129                              }
    130                              break;
    131                          case 0x02: // Radar??
    132                              switch (SeqCnt) {
    133                              case 20:
    134                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    135                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    136                                          TData.RS4.EEPROMPortpair[0] = 0;
    137                                      }
    138                                  }
    139                                  // Fall through and send the request
    140                              default:
    141                                  Uart_BuildReqRadarData(0);          // Radar data
    142                                  break;
    143                              case 0:
    144                                  Uart_BuildReqRadarInfo(0);          //Radar Information
    145                                  break;
    146                              }
    147                              break;
    148                          case 0x00:  // AN-SGCNV
    149                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    150                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
    151                                  Uart_BuildSndData(0);                       // add data to AD card package
    152                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    153                                  AskMD[0] = false;
    154                              } else {
    155                                  AskMD[0] = true;
    156                              }
    157                              if (SeqCnt == 0) {
    158                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
    159                              } else if (SeqCnt == 5) {
    160                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
    161                              } else if (SeqCnt == 10) {
    162                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    163                              } else if (SeqCnt == 15) {
    164                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
    165                              } else if (SeqCnt == 20) {
    166                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    167                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
    168                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
    169                                          TData.RS4.EEPROMADChannel[0] = 0;
    170                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    171                                              TData.RS4.EEPROMPortpair[0] = 0;
    172                                          }
    173                                      }
    174                                  } else if (AskMD[0] == true) {
    175                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    176                                  }
    177                              } else if (AskMD[0] == true) {
    178                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    179                              }
    180                              break;
    181                          }
    182                          Uart_BuildTail16552(0);
    183                      } else {
    184                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
    185                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
    186                                  TData.RS4.EEPROMPortpair[0] = 0;
    187                              }
    188                          }
    189                      }
    190                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
    191                          UART16552[1].TxFirst = 6;                       // Start at
    192                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
    193                          switch (SnsType) {
    194                          case 0x01:    //Water ingress??
    195                              switch (SeqCnt) {
    196                              case 0:
    197                                  Uart_BuildReqWISCardStatus(1);          //Card status
    198                                  break;
    199                              case 20:
    200                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    201                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
    202                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    203                                          TData.RS4.EEPROMPortpair[1] = 0;
    204                                      }
    205                                  } else {
    206                                      Uart_BuildReqWISData(1);                //WIS data
    207                                  }
    208                                  break;
    209                              default:
    210                                  Uart_BuildReqWISData(1);                //WIS data
    211                                  break;
    212                              }
    213                              break;
    214                          case 0x02:    // Radar??
    215                              switch (SeqCnt) {
    216                              case 20:
    217                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    218                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    219                                          TData.RS4.EEPROMPortpair[1] = 0;
    220                                      }
    221                                  }
    222                                  // Fall through and send the request
    223                              default:
    224                                  Uart_BuildReqRadarData(1);          // Radar data
    225                                  break;
    226                              case 0:
    227                                  Uart_BuildReqRadarInfo(1);          //Radar Information
    228                                  break;
    229                              }
    230                              break;
    231                          case 0x00:  // AN-SGCNV
    232                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    233                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
    234                                  Uart_BuildSndData(1);                       // add data to AD card package
    235                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    236                                  AskMD[1] = false;
    237                              } else {
    238                                  AskMD[1] = true;
    239                              }
    240                              if (SeqCnt == 0) {
    241                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
    242                              } else if (SeqCnt == 5) {
    243                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
    244                              } else if (SeqCnt == 10) {
    245                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    246                              } else if (SeqCnt == 15) {
    247                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
    248                              } else if (SeqCnt == 20) {
    249                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    250                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
    251                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
    252                                          TData.RS4.EEPROMADChannel[1] = 0;
    253                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    254                                              TData.RS4.EEPROMPortpair[1] = 0;
    255                                          }
    256                                      }
    257                                  } else if (AskMD[1] == true) {
    258                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    259                                  }
    260                              } else if (AskMD[1] == true) {
    261                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    262                              }
    263                              break;
    264                          }
    265                          Uart_BuildTail16552(1);
    266                      } else {
    267                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
    268                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
    269                                  TData.RS4.EEPROMPortpair[1] = 0;
    270                              }
    271                          }
    272                      }
    273                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
    274                      if (EventStatus & 0x02) {
    275                          if (PowerOnTimer >= POWER_ON_CNT) {
    276                              PowerOnTimer = 0;                              // and start over again
    277                          }
    278                      }
    279                  }
    280                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \   00000188   95A3               INC     R26
   \   0000018A   31A5               CPI     R26, 21
   \   0000018C   F008               BRCS    ??ExtRS485Ctl_2
    281                      SeqCnt = 0;
   \   0000018E   E0A0               LDI     R26, 0
    282                  }
   \                     ??ExtRS485Ctl_2:
   \   00000190   01F2               MOVW    R31:R30, R5:R4
   \   00000192   E000               LDI     R16, 0
   \   00000194   8300               ST      Z, R16
   \   00000196   2EAA               MOV     R10, R26
   \   00000198   C027               RJMP    ??ExtRS485Ctl_4
   \                     ??ExtRS485Ctl_5:
   \   0000019A   01FC               MOVW    R31:R30, R25:R24
   \   0000019C   8103               LDD     R16, Z+3
   \   0000019E   01F2               MOVW    R31:R30, R5:R4
   \   000001A0   8110               LD      R17, Z
   \   000001A2   1701               CP      R16, R17
   \   000001A4   F489               BRNE    ??ExtRS485Ctl_6
   \   000001A6   9100....           LDS     R16, (TData + 1531)
   \   000001AA   9503               INC     R16
   \   000001AC   9300....           STS     (TData + 1531), R16
   \   000001B0   01FC               MOVW    R31:R30, R25:R24
   \   000001B2   8103               LDD     R16, Z+3
   \   000001B4   3004               CPI     R16, 4
   \   000001B6   F040               BRCS    ??ExtRS485Ctl_6
   \   000001B8   8333               STD     Z+3, R19
   \   000001BA   C006               RJMP    ??ExtRS485Ctl_6
   \                     ??ExtRS485Ctl_7:
   \   000001BC   2311               TST     R17
   \   000001BE   F011               BREQ    ??ExtRS485Ctl_8
   \   000001C0   E001               LDI     R16, 1
   \   000001C2   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_8:
   \   000001C4   E001               LDI     R16, 1
   \   000001C6   ....               RCALL   Uart_BuildTail16552
   \                     ??ExtRS485Ctl_6:
   \   000001C8   EE28               LDI     R18, 232
   \   000001CA   E033               LDI     R19, 3
   \   000001CC   E001               LDI     R16, 1
   \   000001CE   ........           CALL    OS_WaitEventTimed
   \   000001D2   FF01               SBRS    R16, 1
   \   000001D4   C005               RJMP    ??ExtRS485Ctl_9
   \   000001D6   8108               LD      R16, Y
   \   000001D8   3005               CPI     R16, 5
   \   000001DA   F010               BRCS    ??ExtRS485Ctl_9
   \   000001DC   E000               LDI     R16, 0
   \   000001DE   8308               ST      Y, R16
   \                     ??ExtRS485Ctl_9:
   \   000001E0   01F2               MOVW    R31:R30, R5:R4
   \   000001E2   8100               LD      R16, Z
   \   000001E4   9503               INC     R16
   \   000001E6   8300               ST      Z, R16
   \                     ??ExtRS485Ctl_4:
   \   000001E8   8100               LD      R16, Z
   \   000001EA   3004               CPI     R16, 4
   \   000001EC   F660               BRCC    ??ExtRS485Ctl_3
   \   000001EE   9100....           LDS     R16, (UART16552 + 24)
   \   000001F2   3009               CPI     R16, 9
   \   000001F4   F038               BRCS    ??ExtRS485Ctl_10
   \                     ??ExtRS485Ctl_11:
   \   000001F6   91002208           LDS     R16, 8712
   \   000001FA   E0ED               LDI     R30, LOW(8717)
   \   000001FC   E2F2               LDI     R31, (8717) >> 8
   \   000001FE   8100               LD      R16, Z
   \   00000200   FD00               SBRC    R16, 0
   \   00000202   CFF9               RJMP    ??ExtRS485Ctl_11
   \                     ??ExtRS485Ctl_10:
   \   00000204   9100....           LDS     R16, (UART16552 + 50)
   \   00000208   3009               CPI     R16, 9
   \   0000020A   F038               BRCS    ??ExtRS485Ctl_12
   \                     ??ExtRS485Ctl_13:
   \   0000020C   91002200           LDS     R16, 8704
   \   00000210   E0E5               LDI     R30, LOW(8709)
   \   00000212   E2F2               LDI     R31, (8709) >> 8
   \   00000214   8100               LD      R16, Z
   \   00000216   FD00               SBRC    R16, 0
   \   00000218   CFF9               RJMP    ??ExtRS485Ctl_13
   \                     ??ExtRS485Ctl_12:
   \   0000021A   8108               LD      R16, Y
   \   0000021C   3005               CPI     R16, 5
   \   0000021E   F438               BRCC    ??ExtRS485Ctl_14
   \   00000220   9503               INC     R16
   \   00000222   8308               ST      Y, R16
   \   00000224   3005               CPI     R16, 5
   \   00000226   F018               BRCS    ??ExtRS485Ctl_14
   \   00000228   01F7               MOVW    R31:R30, R15:R14
   \   0000022A   8100               LD      R16, Z
   \   0000022C   B908               OUT     0x08, R16
   \                     ??ExtRS485Ctl_14:
   \   0000022E   94F8               cli
   \   00000230   B10E               IN      R16, 0x0E
   \   00000232   6F00               ORI     R16, 0xF0
   \   00000234   B90E               OUT     0x0E, R16
   \   00000236   9100....           LDS     R16, (OS_Global + 1)
   \   0000023A   2300               TST     R16
   \   0000023C   F409               BRNE    ??ExtRS485Ctl_15
   \   0000023E   9478               sei
   \                     ??ExtRS485Ctl_15:
   \   00000240   01F2               MOVW    R31:R30, R5:R4
   \   00000242   8140               LD      R20, Z
   \   00000244   94F8               cli
   \   00000246   E100               LDI     R16, 16
   \   00000248   E010               LDI     R17, 0
   \   0000024A   ........           CALL    ?S_SHL_L02
   \   0000024E   9500               COM     R16
   \   00000250   B11E               IN      R17, 0x0E
   \   00000252   2310               AND     R17, R16
   \   00000254   B91E               OUT     0x0E, R17
   \   00000256   9100....           LDS     R16, (OS_Global + 1)
   \   0000025A   2300               TST     R16
   \   0000025C   F409               BRNE    ??ExtRS485Ctl_16
   \   0000025E   9478               sei
   \                     ??ExtRS485Ctl_16:
   \   00000260   01F7               MOVW    R31:R30, R15:R14
   \   00000262   8100               LD      R16, Z
   \   00000264   E010               LDI     R17, 0
   \   00000266   01F2               MOVW    R31:R30, R5:R4
   \   00000268   8140               LD      R20, Z
   \   0000026A   ........           CALL    ?SS_SHR_L02
   \   0000026E   7001               ANDI    R16, 0x01
   \   00000270   F409               BRNE    $+2+2
   \   00000272   C133               RJMP    ??ExtRS485Ctl_17
   \   00000274   E006               LDI     R16, 6
   \   00000276   9300....           STS     (UART16552 + 2), R16
   \   0000027A   9310....           STS     (UART16552 + 3), R17
   \   0000027E   01F7               MOVW    R31:R30, R15:R14
   \   00000280   8101               LDD     R16, Z+1
   \   00000282   01F2               MOVW    R31:R30, R5:R4
   \   00000284   8140               LD      R20, Z
   \   00000286   0F44               LSL     R20
   \   00000288   ........           CALL    ?SS_SHR_L02
   \   0000028C   7003               ANDI    R16, 0x03
   \   0000028E   F409               BRNE    $+2+2
   \   00000290   C07A               RJMP    ??ExtRS485Ctl_18
   \   00000292   950A               DEC     R16
   \   00000294   F019               BREQ    ??ExtRS485Ctl_19
   \   00000296   950A               DEC     R16
   \   00000298   F1E1               BREQ    ??ExtRS485Ctl_20
   \   0000029A   C11C               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_19:
   \   0000029C   2D0A               MOV     R16, R10
   \   0000029E   20AA               TST     R10
   \   000002A0   F019               BREQ    ??ExtRS485Ctl_22
   \   000002A2   5104               SUBI    R16, 20
   \   000002A4   F019               BREQ    ??ExtRS485Ctl_23
   \   000002A6   C01A               RJMP    ??ExtRS485Ctl_24
   \                     ??ExtRS485Ctl_22:
   \   000002A8   E604               LDI     R16, 100
   \   000002AA   C051               RJMP    ??ExtRS485Ctl_25
   \                     ??ExtRS485Ctl_23:
   \   000002AC   01F6               MOVW    R31:R30, R13:R12
   \   000002AE   8100               LD      R16, Z
   \   000002B0   2300               TST     R16
   \   000002B2   F4A1               BRNE    ??ExtRS485Ctl_24
   \   000002B4   01FC               MOVW    R31:R30, R25:R24
   \   000002B6   8102               LDD     R16, Z+2
   \   000002B8   01F2               MOVW    R31:R30, R5:R4
   \   000002BA   8110               LD      R17, Z
   \   000002BC   1701               CP      R16, R17
   \   000002BE   F471               BRNE    ??ExtRS485Ctl_24
   \   000002C0   E713               LDI     R17, 115
   \   000002C2   E000               LDI     R16, 0
   \   000002C4   ....               RCALL   Uart_BuildReqWISXData
   \   000002C6   9100....           LDS     R16, (TData + 1530)
   \   000002CA   9503               INC     R16
   \   000002CC   9300....           STS     (TData + 1530), R16
   \   000002D0   01FC               MOVW    R31:R30, R25:R24
   \   000002D2   8102               LDD     R16, Z+2
   \   000002D4   3004               CPI     R16, 4
   \   000002D6   F408               BRCC    $+2+2
   \   000002D8   C0FD               RJMP    ??ExtRS485Ctl_21
   \   000002DA   C0F5               RJMP    ??ExtRS485Ctl_26
   \                     ??ExtRS485Ctl_24:
   \   000002DC   E605               LDI     R16, 101
   \   000002DE   91E0....           LDS     R30, UART16552
   \   000002E2   91F0....           LDS     R31, (UART16552 + 1)
   \   000002E6   8306               STD     Z+6, R16
   \   000002E8   ....               LDI     R30, LOW(UART16552)
   \   000002EA   ....               LDI     R31, (UART16552) >> 8
   \   000002EC   8102               LDD     R16, Z+2
   \   000002EE   8113               LDD     R17, Z+3
   \   000002F0   5F0F               SUBI    R16, 255
   \   000002F2   4F1F               SBCI    R17, 255
   \   000002F4   8302               STD     Z+2, R16
   \   000002F6   8313               STD     Z+3, R17
   \   000002F8   E001               LDI     R16, 1
   \   000002FA   91E0....           LDS     R30, UART16552
   \   000002FE   91F0....           LDS     R31, (UART16552 + 1)
   \   00000302   9120....           LDS     R18, (UART16552 + 2)
   \   00000306   9130....           LDS     R19, (UART16552 + 3)
   \   0000030A   0FE2               ADD     R30, R18
   \   0000030C   1FF3               ADC     R31, R19
   \   0000030E   8300               ST      Z, R16
   \   00000310   C023               RJMP    ??ExtRS485Ctl_27
   \                     ??ExtRS485Ctl_20:
   \   00000312   2D0A               MOV     R16, R10
   \   00000314   20AA               TST     R10
   \   00000316   F0D1               BREQ    ??ExtRS485Ctl_28
   \   00000318   5104               SUBI    R16, 20
   \   0000031A   F4A9               BRNE    ??ExtRS485Ctl_29
   \   0000031C   01F6               MOVW    R31:R30, R13:R12
   \   0000031E   8100               LD      R16, Z
   \   00000320   2300               TST     R16
   \   00000322   F489               BRNE    ??ExtRS485Ctl_29
   \   00000324   01FC               MOVW    R31:R30, R25:R24
   \   00000326   8102               LDD     R16, Z+2
   \   00000328   01F2               MOVW    R31:R30, R5:R4
   \   0000032A   8110               LD      R17, Z
   \   0000032C   1701               CP      R16, R17
   \   0000032E   F459               BRNE    ??ExtRS485Ctl_29
   \   00000330   9100....           LDS     R16, (TData + 1530)
   \   00000334   9503               INC     R16
   \   00000336   9300....           STS     (TData + 1530), R16
   \   0000033A   01FC               MOVW    R31:R30, R25:R24
   \   0000033C   8102               LDD     R16, Z+2
   \   0000033E   3004               CPI     R16, 4
   \   00000340   F010               BRCS    ??ExtRS485Ctl_29
   \   00000342   E000               LDI     R16, 0
   \   00000344   8302               STD     Z+2, R16
   \                     ??ExtRS485Ctl_29:
   \   00000346   E000               LDI     R16, 0
   \   00000348   ....               RCALL   Uart_BuildReqRadarData
   \   0000034A   C0C4               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_28:
   \   0000034C   EA01               LDI     R16, 161
   \                     ??ExtRS485Ctl_25:
   \   0000034E   91E0....           LDS     R30, UART16552
   \   00000352   91F0....           LDS     R31, (UART16552 + 1)
   \   00000356   8306               STD     Z+6, R16
   \                     ??ExtRS485Ctl_27:
   \   00000358   ....               LDI     R30, LOW(UART16552)
   \   0000035A   ....               LDI     R31, (UART16552) >> 8
   \   0000035C   8102               LDD     R16, Z+2
   \   0000035E   8113               LDD     R17, Z+3
   \   00000360   5F0F               SUBI    R16, 255
   \   00000362   4F1F               SBCI    R17, 255
   \   00000364   8302               STD     Z+2, R16
   \   00000366   8313               STD     Z+3, R17
   \   00000368   91E0....           LDS     R30, UART16552
   \   0000036C   91F0....           LDS     R31, (UART16552 + 1)
   \   00000370   9100....           LDS     R16, (UART16552 + 2)
   \   00000374   9110....           LDS     R17, (UART16552 + 3)
   \   00000378   0FE0               ADD     R30, R16
   \   0000037A   1FF1               ADC     R31, R17
   \   0000037C   E000               LDI     R16, 0
   \   0000037E   8300               ST      Z, R16
   \   00000380   ....               LDI     R30, LOW(UART16552)
   \   00000382   ....               LDI     R31, (UART16552) >> 8
   \   00000384   C074               RJMP    ??ExtRS485Ctl_30
   \                     ??ExtRS485Ctl_18:
   \   00000386   01F4               MOVW    R31:R30, R9:R8
   \   00000388   8100               LD      R16, Z
   \   0000038A   3001               CPI     R16, 1
   \   0000038C   F009               BREQ    $+2+2
   \   0000038E   C043               RJMP    ??ExtRS485Ctl_31
   \   00000390   8101               LDD     R16, Z+1
   \   00000392   01F2               MOVW    R31:R30, R5:R4
   \   00000394   8110               LD      R17, Z
   \   00000396   1701               CP      R16, R17
   \   00000398   F5F1               BRNE    ??ExtRS485Ctl_31
   \   0000039A   ....               LDI     R18, LOW(UART16552)
   \   0000039C   ....               LDI     R19, (UART16552) >> 8
   \   0000039E   E043               LDI     R20, 3
   \   000003A0   E050               LDI     R21, 0
   \   000003A2   C00D               RJMP    ??ExtRS485Ctl_32
   \                     ??ExtRS485Ctl_33:
   \   000003A4   0FE4               ADD     R30, R20
   \   000003A6   1FF5               ADC     R31, R21
   \   000003A8   8100               LD      R16, Z
   \   000003AA   01FB               MOVW    R31:R30, R23:R22
   \   000003AC   8300               ST      Z, R16
   \   000003AE   01F9               MOVW    R31:R30, R19:R18
   \   000003B0   8102               LDD     R16, Z+2
   \   000003B2   8113               LDD     R17, Z+3
   \   000003B4   5F0F               SUBI    R16, 255
   \   000003B6   4F1F               SBCI    R17, 255
   \   000003B8   8302               STD     Z+2, R16
   \   000003BA   8313               STD     Z+3, R17
   \   000003BC   9543               INC     R20
   \                     ??ExtRS485Ctl_32:
   \   000003BE   01F9               MOVW    R31:R30, R19:R18
   \   000003C0   8160               LD      R22, Z
   \   000003C2   8171               LDD     R23, Z+1
   \   000003C4   8102               LDD     R16, Z+2
   \   000003C6   8113               LDD     R17, Z+3
   \   000003C8   0F60               ADD     R22, R16
   \   000003CA   1F71               ADC     R23, R17
   \   000003CC   01F4               MOVW    R31:R30, R9:R8
   \   000003CE   8102               LDD     R16, Z+2
   \   000003D0   E010               LDI     R17, 0
   \   000003D2   5F0D               SUBI    R16, 253
   \   000003D4   4F1F               SBCI    R17, 255
   \   000003D6   1740               CP      R20, R16
   \   000003D8   0751               CPC     R21, R17
   \   000003DA   F324               BRLT    ??ExtRS485Ctl_33
   \   000003DC   8350               ST      Z, R21
   \   000003DE   E101               LDI     R16, 17
   \   000003E0   01FB               MOVW    R31:R30, R23:R22
   \   000003E2   8300               ST      Z, R16
   \   000003E4   01F9               MOVW    R31:R30, R19:R18
   \   000003E6   8102               LDD     R16, Z+2
   \   000003E8   8113               LDD     R17, Z+3
   \   000003EA   5F0F               SUBI    R16, 255
   \   000003EC   4F1F               SBCI    R17, 255
   \   000003EE   8302               STD     Z+2, R16
   \   000003F0   8313               STD     Z+3, R17
   \   000003F2   8100               LD      R16, Z
   \   000003F4   8111               LDD     R17, Z+1
   \   000003F6   8142               LDD     R20, Z+2
   \   000003F8   8153               LDD     R21, Z+3
   \   000003FA   01F8               MOVW    R31:R30, R17:R16
   \   000003FC   0FE4               ADD     R30, R20
   \   000003FE   1FF5               ADC     R31, R21
   \   00000400   E000               LDI     R16, 0
   \   00000402   8300               ST      Z, R16
   \   00000404   01F9               MOVW    R31:R30, R19:R18
   \   00000406   8102               LDD     R16, Z+2
   \   00000408   8113               LDD     R17, Z+3
   \   0000040A   5F0F               SUBI    R16, 255
   \   0000040C   4F1F               SBCI    R17, 255
   \   0000040E   8302               STD     Z+2, R16
   \   00000410   8313               STD     Z+3, R17
   \   00000412   E010               LDI     R17, 0
   \   00000414   C001               RJMP    ??ExtRS485Ctl_34
   \                     ??ExtRS485Ctl_31:
   \   00000416   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_34:
   \   00000418   20AA               TST     R10
   \   0000041A   F419               BRNE    ??ExtRS485Ctl_35
   \   0000041C   E000               LDI     R16, 0
   \   0000041E   ....               RCALL   Uart_BuildReqCardStatus
   \   00000420   C059               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_35:
   \   00000422   E005               LDI     R16, 5
   \   00000424   16A0               CP      R10, R16
   \   00000426   F419               BRNE    ??ExtRS485Ctl_36
   \   00000428   E000               LDI     R16, 0
   \   0000042A   ....               RCALL   Uart_BuildReqR16552
   \   0000042C   C053               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_36:
   \   0000042E   E00A               LDI     R16, 10
   \   00000430   16A0               CP      R10, R16
   \   00000432   F521               BRNE    ??ExtRS485Ctl_37
   \   00000434   ....               LDI     R18, LOW(UART16552)
   \   00000436   ....               LDI     R19, (UART16552) >> 8
   \   00000438   E141               LDI     R20, 17
   \   0000043A   01F9               MOVW    R31:R30, R19:R18
   \   0000043C   8100               LD      R16, Z
   \   0000043E   8111               LDD     R17, Z+1
   \   00000440   8162               LDD     R22, Z+2
   \   00000442   8173               LDD     R23, Z+3
   \   00000444   01F8               MOVW    R31:R30, R17:R16
   \   00000446   0FE6               ADD     R30, R22
   \   00000448   1FF7               ADC     R31, R23
   \   0000044A   8340               ST      Z, R20
   \   0000044C   01F9               MOVW    R31:R30, R19:R18
   \   0000044E   8102               LDD     R16, Z+2
   \   00000450   8113               LDD     R17, Z+3
   \   00000452   5F0F               SUBI    R16, 255
   \   00000454   4F1F               SBCI    R17, 255
   \   00000456   8302               STD     Z+2, R16
   \   00000458   8313               STD     Z+3, R17
   \   0000045A   8100               LD      R16, Z
   \   0000045C   8111               LDD     R17, Z+1
   \   0000045E   8142               LDD     R20, Z+2
   \   00000460   8153               LDD     R21, Z+3
   \   00000462   01F8               MOVW    R31:R30, R17:R16
   \   00000464   0FE4               ADD     R30, R20
   \   00000466   1FF5               ADC     R31, R21
   \   00000468   E000               LDI     R16, 0
   \   0000046A   8300               ST      Z, R16
   \   0000046C   01F9               MOVW    R31:R30, R19:R18
   \                     ??ExtRS485Ctl_30:
   \   0000046E   8102               LDD     R16, Z+2
   \   00000470   8113               LDD     R17, Z+3
   \   00000472   5F0F               SUBI    R16, 255
   \   00000474   4F1F               SBCI    R17, 255
   \   00000476   8302               STD     Z+2, R16
   \   00000478   8313               STD     Z+3, R17
   \   0000047A   C02C               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_37:
   \   0000047C   E00F               LDI     R16, 15
   \   0000047E   16A0               CP      R10, R16
   \   00000480   F419               BRNE    ??ExtRS485Ctl_38
   \   00000482   E000               LDI     R16, 0
   \   00000484   ....               RCALL   Uart_BuildReqC16552
   \   00000486   C026               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_38:
   \   00000488   E104               LDI     R16, 20
   \   0000048A   16A0               CP      R10, R16
   \   0000048C   F4F9               BRNE    ??ExtRS485Ctl_39
   \   0000048E   01F6               MOVW    R31:R30, R13:R12
   \   00000490   8100               LD      R16, Z
   \   00000492   2300               TST     R16
   \   00000494   F4D9               BRNE    ??ExtRS485Ctl_39
   \   00000496   01FC               MOVW    R31:R30, R25:R24
   \   00000498   8102               LDD     R16, Z+2
   \   0000049A   01F2               MOVW    R31:R30, R5:R4
   \   0000049C   8120               LD      R18, Z
   \   0000049E   1702               CP      R16, R18
   \   000004A0   F4A9               BRNE    ??ExtRS485Ctl_39
   \   000004A2   E000               LDI     R16, 0
   \   000004A4   ....               RCALL   Uart_BuildReqEEPROMData
   \   000004A6   01FC               MOVW    R31:R30, R25:R24
   \   000004A8   8100               LD      R16, Z
   \   000004AA   5F0E               SUBI    R16, 254
   \   000004AC   8300               ST      Z, R16
   \   000004AE   300F               CPI     R16, 15
   \   000004B0   F088               BRCS    ??ExtRS485Ctl_21
   \   000004B2   E000               LDI     R16, 0
   \   000004B4   8300               ST      Z, R16
   \   000004B6   9100....           LDS     R16, (TData + 1530)
   \   000004BA   9503               INC     R16
   \   000004BC   9300....           STS     (TData + 1530), R16
   \   000004C0   8102               LDD     R16, Z+2
   \   000004C2   3004               CPI     R16, 4
   \   000004C4   F038               BRCS    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_26:
   \   000004C6   E000               LDI     R16, 0
   \   000004C8   8302               STD     Z+2, R16
   \   000004CA   C004               RJMP    ??ExtRS485Ctl_21
   \                     ??ExtRS485Ctl_39:
   \   000004CC   2311               TST     R17
   \   000004CE   F011               BREQ    ??ExtRS485Ctl_21
   \   000004D0   E000               LDI     R16, 0
   \   000004D2   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_21:
   \   000004D4   E000               LDI     R16, 0
   \   000004D6   ....               RCALL   Uart_BuildTail16552
   \   000004D8   C011               RJMP    ??ExtRS485Ctl_40
   \                     ??ExtRS485Ctl_17:
   \   000004DA   01FC               MOVW    R31:R30, R25:R24
   \   000004DC   8102               LDD     R16, Z+2
   \   000004DE   01F2               MOVW    R31:R30, R5:R4
   \   000004E0   8110               LD      R17, Z
   \   000004E2   1701               CP      R16, R17
   \   000004E4   F459               BRNE    ??ExtRS485Ctl_40
   \   000004E6   9100....           LDS     R16, (TData + 1530)
   \   000004EA   9503               INC     R16
   \   000004EC   9300....           STS     (TData + 1530), R16
   \   000004F0   01FC               MOVW    R31:R30, R25:R24
   \   000004F2   8102               LDD     R16, Z+2
   \   000004F4   3004               CPI     R16, 4
   \   000004F6   F010               BRCS    ??ExtRS485Ctl_40
   \   000004F8   E000               LDI     R16, 0
   \   000004FA   8302               STD     Z+2, R16
   \                     ??ExtRS485Ctl_40:
   \   000004FC   01F7               MOVW    R31:R30, R15:R14
   \   000004FE   8100               LD      R16, Z
   \   00000500   E030               LDI     R19, 0
   \   00000502   01F2               MOVW    R31:R30, R5:R4
   \   00000504   8140               LD      R20, Z
   \   00000506   5F4C               SUBI    R20, 252
   \   00000508   E010               LDI     R17, 0
   \   0000050A   ........           CALL    ?SS_SHR_L02
   \   0000050E   7001               ANDI    R16, 0x01
   \   00000510   F409               BRNE    $+2+2
   \   00000512   CE43               RJMP    ??ExtRS485Ctl_5
   \   00000514   ....               LDI     R26, LOW(UART16552)
   \   00000516   ....               LDI     R27, (UART16552) >> 8
   \   00000518   E006               LDI     R16, 6
   \   0000051A   01FD               MOVW    R31:R30, R27:R26
   \   0000051C   8F04               STD     Z+28, R16
   \   0000051E   8F15               STD     Z+29, R17
   \   00000520   01F7               MOVW    R31:R30, R15:R14
   \   00000522   8102               LDD     R16, Z+2
   \   00000524   01F2               MOVW    R31:R30, R5:R4
   \   00000526   8140               LD      R20, Z
   \   00000528   0F44               LSL     R20
   \   0000052A   ........           CALL    ?SS_SHR_L02
   \   0000052E   7003               ANDI    R16, 0x03
   \   00000530   F409               BRNE    $+2+2
   \   00000532   C077               RJMP    ??ExtRS485Ctl_41
   \   00000534   950A               DEC     R16
   \   00000536   F021               BREQ    ??ExtRS485Ctl_42
   \   00000538   950A               DEC     R16
   \   0000053A   F409               BRNE    $+2+2
   \   0000053C   C054               RJMP    ??ExtRS485Ctl_43
   \   0000053E   CE42               RJMP    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_42:
   \   00000540   2D0A               MOV     R16, R10
   \   00000542   20AA               TST     R10
   \   00000544   F019               BREQ    ??ExtRS485Ctl_44
   \   00000546   5104               SUBI    R16, 20
   \   00000548   F0F9               BREQ    ??ExtRS485Ctl_45
   \   0000054A   C036               RJMP    ??ExtRS485Ctl_46
   \                     ??ExtRS485Ctl_44:
   \   0000054C   E624               LDI     R18, 100
   \                     ??ExtRS485Ctl_47:
   \   0000054E   01FD               MOVW    R31:R30, R27:R26
   \   00000550   8D02               LDD     R16, Z+26
   \   00000552   8DF3               LDD     R31, Z+27
   \   00000554   2FE0               MOV     R30, R16
   \   00000556   8326               STD     Z+6, R18
   \                     ??ExtRS485Ctl_48:
   \   00000558   01FD               MOVW    R31:R30, R27:R26
   \   0000055A   8D04               LDD     R16, Z+28
   \   0000055C   8D15               LDD     R17, Z+29
   \   0000055E   5F0F               SUBI    R16, 255
   \   00000560   4F1F               SBCI    R17, 255
   \   00000562   8F04               STD     Z+28, R16
   \   00000564   8F15               STD     Z+29, R17
   \   00000566   8D02               LDD     R16, Z+26
   \   00000568   8D13               LDD     R17, Z+27
   \   0000056A   8D24               LDD     R18, Z+28
   \   0000056C   8D35               LDD     R19, Z+29
   \   0000056E   01F8               MOVW    R31:R30, R17:R16
   \   00000570   0FE2               ADD     R30, R18
   \   00000572   1FF3               ADC     R31, R19
   \   00000574   E000               LDI     R16, 0
   \   00000576   8300               ST      Z, R16
   \   00000578   01FD               MOVW    R31:R30, R27:R26
   \   0000057A   8D04               LDD     R16, Z+28
   \   0000057C   8D15               LDD     R17, Z+29
   \   0000057E   5F0F               SUBI    R16, 255
   \   00000580   4F1F               SBCI    R17, 255
   \   00000582   8F04               STD     Z+28, R16
   \   00000584   8F15               STD     Z+29, R17
   \   00000586   CE1E               RJMP    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_45:
   \   00000588   01F6               MOVW    R31:R30, R13:R12
   \   0000058A   A902               LDD     R16, Z+50
   \   0000058C   2300               TST     R16
   \   0000058E   F4A1               BRNE    ??ExtRS485Ctl_46
   \   00000590   01FC               MOVW    R31:R30, R25:R24
   \   00000592   8103               LDD     R16, Z+3
   \   00000594   01F2               MOVW    R31:R30, R5:R4
   \   00000596   8110               LD      R17, Z
   \   00000598   1701               CP      R16, R17
   \   0000059A   F471               BRNE    ??ExtRS485Ctl_46
   \   0000059C   E713               LDI     R17, 115
   \   0000059E   E001               LDI     R16, 1
   \   000005A0   ....               RCALL   Uart_BuildReqWISXData
   \   000005A2   9100....           LDS     R16, (TData + 1531)
   \   000005A6   9503               INC     R16
   \   000005A8   9300....           STS     (TData + 1531), R16
   \   000005AC   01FC               MOVW    R31:R30, R25:R24
   \   000005AE   8103               LDD     R16, Z+3
   \   000005B0   3004               CPI     R16, 4
   \   000005B2   F408               BRCC    $+2+2
   \   000005B4   CE07               RJMP    ??ExtRS485Ctl_8
   \   000005B6   C0BC               RJMP    ??ExtRS485Ctl_49
   \                     ??ExtRS485Ctl_46:
   \   000005B8   E625               LDI     R18, 101
   \   000005BA   01FD               MOVW    R31:R30, R27:R26
   \   000005BC   8D02               LDD     R16, Z+26
   \   000005BE   8DF3               LDD     R31, Z+27
   \   000005C0   2FE0               MOV     R30, R16
   \   000005C2   8326               STD     Z+6, R18
   \   000005C4   01FD               MOVW    R31:R30, R27:R26
   \   000005C6   8D04               LDD     R16, Z+28
   \   000005C8   8D15               LDD     R17, Z+29
   \   000005CA   5F0F               SUBI    R16, 255
   \   000005CC   4F1F               SBCI    R17, 255
   \   000005CE   8F04               STD     Z+28, R16
   \   000005D0   8F15               STD     Z+29, R17
   \   000005D2   E021               LDI     R18, 1
   \                     ??ExtRS485Ctl_50:
   \   000005D4   8D02               LDD     R16, Z+26
   \   000005D6   8D13               LDD     R17, Z+27
   \   000005D8   8D44               LDD     R20, Z+28
   \   000005DA   8D55               LDD     R21, Z+29
   \   000005DC   01F8               MOVW    R31:R30, R17:R16
   \   000005DE   0FE4               ADD     R30, R20
   \   000005E0   1FF5               ADC     R31, R21
   \   000005E2   8320               ST      Z, R18
   \   000005E4   CFB9               RJMP    ??ExtRS485Ctl_48
   \                     ??ExtRS485Ctl_43:
   \   000005E6   2D0A               MOV     R16, R10
   \   000005E8   20AA               TST     R10
   \   000005EA   F0C9               BREQ    ??ExtRS485Ctl_51
   \   000005EC   5104               SUBI    R16, 20
   \   000005EE   F4A1               BRNE    ??ExtRS485Ctl_52
   \   000005F0   01F6               MOVW    R31:R30, R13:R12
   \   000005F2   A902               LDD     R16, Z+50
   \   000005F4   2300               TST     R16
   \   000005F6   F481               BRNE    ??ExtRS485Ctl_52
   \   000005F8   01FC               MOVW    R31:R30, R25:R24
   \   000005FA   8103               LDD     R16, Z+3
   \   000005FC   01F2               MOVW    R31:R30, R5:R4
   \   000005FE   8110               LD      R17, Z
   \   00000600   1701               CP      R16, R17
   \   00000602   F451               BRNE    ??ExtRS485Ctl_52
   \   00000604   9100....           LDS     R16, (TData + 1531)
   \   00000608   9503               INC     R16
   \   0000060A   9300....           STS     (TData + 1531), R16
   \   0000060E   01FC               MOVW    R31:R30, R25:R24
   \   00000610   8103               LDD     R16, Z+3
   \   00000612   3004               CPI     R16, 4
   \   00000614   F008               BRCS    ??ExtRS485Ctl_52
   \   00000616   8333               STD     Z+3, R19
   \                     ??ExtRS485Ctl_52:
   \   00000618   E001               LDI     R16, 1
   \   0000061A   ....               RCALL   Uart_BuildReqRadarData
   \   0000061C   CDD3               RJMP    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_51:
   \   0000061E   EA21               LDI     R18, 161
   \   00000620   CF96               RJMP    ??ExtRS485Ctl_47
   \                     ??ExtRS485Ctl_41:
   \   00000622   01F3               MOVW    R31:R30, R7:R6
   \   00000624   8100               LD      R16, Z
   \   00000626   3001               CPI     R16, 1
   \   00000628   F009               BREQ    $+2+2
   \   0000062A   C043               RJMP    ??ExtRS485Ctl_53
   \   0000062C   8101               LDD     R16, Z+1
   \   0000062E   5004               SUBI    R16, 4
   \   00000630   4010               SBCI    R17, 0
   \   00000632   01F2               MOVW    R31:R30, R5:R4
   \   00000634   8120               LD      R18, Z
   \   00000636   1702               CP      R16, R18
   \   00000638   4010               SBCI    R17, 0
   \   0000063A   F5D9               BRNE    ??ExtRS485Ctl_53
   \   0000063C   E023               LDI     R18, 3
   \   0000063E   C00D               RJMP    ??ExtRS485Ctl_54
   \                     ??ExtRS485Ctl_55:
   \   00000640   0FE2               ADD     R30, R18
   \   00000642   1FF3               ADC     R31, R19
   \   00000644   8100               LD      R16, Z
   \   00000646   01FA               MOVW    R31:R30, R21:R20
   \   00000648   8300               ST      Z, R16
   \   0000064A   01FD               MOVW    R31:R30, R27:R26
   \   0000064C   8D04               LDD     R16, Z+28
   \   0000064E   8D15               LDD     R17, Z+29
   \   00000650   5F0F               SUBI    R16, 255
   \   00000652   4F1F               SBCI    R17, 255
   \   00000654   8F04               STD     Z+28, R16
   \   00000656   8F15               STD     Z+29, R17
   \   00000658   9523               INC     R18
   \                     ??ExtRS485Ctl_54:
   \   0000065A   01FD               MOVW    R31:R30, R27:R26
   \   0000065C   8D42               LDD     R20, Z+26
   \   0000065E   8D53               LDD     R21, Z+27
   \   00000660   8D04               LDD     R16, Z+28
   \   00000662   8D15               LDD     R17, Z+29
   \   00000664   0F40               ADD     R20, R16
   \   00000666   1F51               ADC     R21, R17
   \   00000668   01F3               MOVW    R31:R30, R7:R6
   \   0000066A   8102               LDD     R16, Z+2
   \   0000066C   E010               LDI     R17, 0
   \   0000066E   5F0D               SUBI    R16, 253
   \   00000670   4F1F               SBCI    R17, 255
   \   00000672   1720               CP      R18, R16
   \   00000674   0731               CPC     R19, R17
   \   00000676   F324               BRLT    ??ExtRS485Ctl_55
   \   00000678   8330               ST      Z, R19
   \   0000067A   E101               LDI     R16, 17
   \   0000067C   01FA               MOVW    R31:R30, R21:R20
   \   0000067E   8300               ST      Z, R16
   \   00000680   01FD               MOVW    R31:R30, R27:R26
   \   00000682   8D04               LDD     R16, Z+28
   \   00000684   8D15               LDD     R17, Z+29
   \   00000686   5F0F               SUBI    R16, 255
   \   00000688   4F1F               SBCI    R17, 255
   \   0000068A   8F04               STD     Z+28, R16
   \   0000068C   8F15               STD     Z+29, R17
   \   0000068E   8D02               LDD     R16, Z+26
   \   00000690   8D13               LDD     R17, Z+27
   \   00000692   8D24               LDD     R18, Z+28
   \   00000694   8D35               LDD     R19, Z+29
   \   00000696   01F8               MOVW    R31:R30, R17:R16
   \   00000698   0FE2               ADD     R30, R18
   \   0000069A   1FF3               ADC     R31, R19
   \   0000069C   E000               LDI     R16, 0
   \   0000069E   8300               ST      Z, R16
   \   000006A0   01FD               MOVW    R31:R30, R27:R26
   \   000006A2   8D04               LDD     R16, Z+28
   \   000006A4   8D15               LDD     R17, Z+29
   \   000006A6   5F0F               SUBI    R16, 255
   \   000006A8   4F1F               SBCI    R17, 255
   \   000006AA   8F04               STD     Z+28, R16
   \   000006AC   8F15               STD     Z+29, R17
   \   000006AE   E010               LDI     R17, 0
   \   000006B0   C001               RJMP    ??ExtRS485Ctl_56
   \                     ??ExtRS485Ctl_53:
   \   000006B2   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_56:
   \   000006B4   20AA               TST     R10
   \   000006B6   F419               BRNE    ??ExtRS485Ctl_57
   \   000006B8   E001               LDI     R16, 1
   \   000006BA   ....               RCALL   Uart_BuildReqCardStatus
   \   000006BC   CD83               RJMP    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_57:
   \   000006BE   E005               LDI     R16, 5
   \   000006C0   16A0               CP      R10, R16
   \   000006C2   F419               BRNE    ??ExtRS485Ctl_58
   \   000006C4   E001               LDI     R16, 1
   \   000006C6   ....               RCALL   Uart_BuildReqR16552
   \   000006C8   CD7D               RJMP    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_58:
   \   000006CA   E00A               LDI     R16, 10
   \   000006CC   16A0               CP      R10, R16
   \   000006CE   F419               BRNE    ??ExtRS485Ctl_59
   \   000006D0   E121               LDI     R18, 17
   \   000006D2   01FD               MOVW    R31:R30, R27:R26
   \   000006D4   CF7F               RJMP    ??ExtRS485Ctl_50
   \                     ??ExtRS485Ctl_59:
   \   000006D6   E00F               LDI     R16, 15
   \   000006D8   16A0               CP      R10, R16
   \   000006DA   F419               BRNE    ??ExtRS485Ctl_60
   \   000006DC   E001               LDI     R16, 1
   \   000006DE   ....               RCALL   Uart_BuildReqC16552
   \   000006E0   CD71               RJMP    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_60:
   \   000006E2   E104               LDI     R16, 20
   \   000006E4   16A0               CP      R10, R16
   \   000006E6   F009               BREQ    $+2+2
   \   000006E8   CD69               RJMP    ??ExtRS485Ctl_7
   \   000006EA   01F6               MOVW    R31:R30, R13:R12
   \   000006EC   A902               LDD     R16, Z+50
   \   000006EE   2300               TST     R16
   \   000006F0   F009               BREQ    $+2+2
   \   000006F2   CD64               RJMP    ??ExtRS485Ctl_7
   \   000006F4   01FC               MOVW    R31:R30, R25:R24
   \   000006F6   8103               LDD     R16, Z+3
   \   000006F8   01F2               MOVW    R31:R30, R5:R4
   \   000006FA   8120               LD      R18, Z
   \   000006FC   1702               CP      R16, R18
   \   000006FE   F009               BREQ    $+2+2
   \   00000700   CD5D               RJMP    ??ExtRS485Ctl_7
   \   00000702   E001               LDI     R16, 1
   \   00000704   ....               RCALL   Uart_BuildReqEEPROMData
   \   00000706   9100....           LDS     R16, (TData + 1529)
   \   0000070A   5F0E               SUBI    R16, 254
   \   0000070C   9300....           STS     (TData + 1529), R16
   \   00000710   01FC               MOVW    R31:R30, R25:R24
   \   00000712   8101               LDD     R16, Z+1
   \   00000714   300F               CPI     R16, 15
   \   00000716   F408               BRCC    $+2+2
   \   00000718   CD55               RJMP    ??ExtRS485Ctl_8
   \   0000071A   E000               LDI     R16, 0
   \   0000071C   8301               STD     Z+1, R16
   \   0000071E   9100....           LDS     R16, (TData + 1531)
   \   00000722   9503               INC     R16
   \   00000724   9300....           STS     (TData + 1531), R16
   \   00000728   8103               LDD     R16, Z+3
   \   0000072A   3004               CPI     R16, 4
   \   0000072C   F408               BRCC    $+2+2
   \   0000072E   CD4A               RJMP    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_49:
   \   00000730   E000               LDI     R16, 0
   \   00000732   8303               STD     Z+3, R16
   \   00000734   CD47               RJMP    ??ExtRS485Ctl_8
   \   00000736                      REQUIRE _A_PORTC
   \   00000736                      REQUIRE _A_PORTE
    283              }
    284          }
    285          
    286          
    287          /*************************************************************************
    288          *   (This is a task)
    289          *  Usart handler UART receive data
    290          *
    291          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    292          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   927A               ST      -Y, R7
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R7_is_cg_reg
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
    293          
    294              char portresp;
    295              char temp;
    296          
    297              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   0000000E   E900               LDI     R16, 144
   \   00000010   E11A               LDI     R17, 26
   \   00000012   ........           CALL    OS_Delay
   \   00000016   E094               LDI     R25, 4
   \   00000018   2477               CLR     R7
   \   0000001A   ....               LDI     R16, LOW(UART16552)
   \   0000001C   2E40               MOV     R4, R16
   \   0000001E   ....               LDI     R16, (UART16552) >> 8
   \   00000020   2E50               MOV     R5, R16
   \   00000022   ....               LDI     R26, LOW(PortPair)
   \   00000024   ....               LDI     R27, (PortPair) >> 8
   \   00000026   C0B2               RJMP    ??ExtRS485Rec_0
    298          
    299              while (1) {
    300                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
    301                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
    302                  if (portresp & 0x01) {                  // answer on ch 0
    303                      Usart16552CheckPackage(0);         // handle incomming package
    304                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
    305                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
    306                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
    307                  } else {
    308                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
    309                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
    310                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
    311                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
    312                      }
    313                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
    314                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
    315                              // volatile undefined behavior
    316                              // ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    317                              //
    318                              temp = (0x01 << PortPair);
    319                              ClrBit(PORTC, temp);            // Switch off power
    320                              OS_SignalEvent(2, &TCB_RS485Ctl);
    321                          }
    322                      }
    323                  }
    324                  if (portresp & 0x02) {                  // answer on ch 1
    325                      Usart16552CheckPackage(1);         // handle incomming package
    326                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
    327                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
    328                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
    329                  } else {
    330                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   00000028   01F2               MOVW    R31:R30, R5:R4
   \   0000002A   A902               LDD     R16, Z+50
   \   0000002C   9503               INC     R16
   \   0000002E   AB02               STD     Z+50, R16
    331                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   00000030   910C               LD      R16, X
   \   00000032   9F09               MUL     R16, R25
   \   00000034   01F0               MOVW    R31:R30, R1:R0
   \   00000036   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000038   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003A   8D05               LDD     R16, Z+29
   \   0000003C   8D16               LDD     R17, Z+30
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8F05               STD     Z+29, R16
   \   00000044   8F16               STD     Z+30, R17
    332                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   00000046   910C               LD      R16, X
   \   00000048   9F09               MUL     R16, R25
   \   0000004A   01F0               MOVW    R31:R30, R1:R0
   \   0000004C   ....               SUBI    R30, LOW((-(TData + 27) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, HIGH((-(TData + 27) & 0xFFFF))
   \   00000050   8120               LD      R18, Z
   \   00000052   8131               LDD     R19, Z+1
   \   00000054   0189               MOVW    R17:R16, R19:R18
   \   00000056   5F0F               SUBI    R16, 255
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   8300               ST      Z, R16
   \   0000005C   8311               STD     Z+1, R17
   \   0000005E   3026               CPI     R18, 6
   \   00000060   4030               SBCI    R19, 0
   \   00000062   F038               BRCS    ??ExtRS485Rec_2
    333                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   00000064   91EC               LD      R30, X
   \   00000066   E0F0               LDI     R31, 0
   \   00000068   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000006A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000006C   8107               LDD     R16, Z+7
   \   0000006E   6001               ORI     R16, 0x01
   \   00000070   8307               STD     Z+7, R16
    334                      }
    335                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_2:
   \   00000072   9100....           LDS     R16, TData
   \   00000076   E010               LDI     R17, 0
   \   00000078   914C               LD      R20, X
   \   0000007A   5F4C               SUBI    R20, 252
   \   0000007C   ........           CALL    ?SS_SHR_L02
   \   00000080   7001               ANDI    R16, 0x01
   \   00000082   F409               BRNE    $+2+2
   \   00000084   C07E               RJMP    ??ExtRS485Rec_3
    336                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   00000086   910C               LD      R16, X
   \   00000088   9F09               MUL     R16, R25
   \   0000008A   01F0               MOVW    R31:R30, R1:R0
   \   0000008C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000090   8D03               LDD     R16, Z+27
   \   00000092   7007               ANDI    R16, 0x07
   \   00000094   3004               CPI     R16, 4
   \   00000096   F009               BREQ    $+2+2
   \   00000098   C074               RJMP    ??ExtRS485Rec_3
    337                              // volatile undefined behavior
    338                              // ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
    339                              //
    340                              temp = (0x01 << (PortPair + 4));
   \   0000009A   914C               LD      R20, X
    341                              ClrBit(PORTC, temp);            // Switch off power
   \   0000009C   94F8               cli
   \   0000009E   5F4C               SUBI    R20, 252
   \   000000A0   E001               LDI     R16, 1
   \   000000A2   ........           CALL    ?S_SHL_L02
   \   000000A6   9500               COM     R16
   \   000000A8   B118               IN      R17, 0x08
   \   000000AA   2310               AND     R17, R16
   \   000000AC   B918               OUT     0x08, R17
   \   000000AE   9100....           LDS     R16, (OS_Global + 1)
   \   000000B2   2300               TST     R16
   \   000000B4   F409               BRNE    ??ExtRS485Rec_4
   \   000000B6   9478               sei
    342                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_4:
   \   000000B8   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000BA   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000BC   E002               LDI     R16, 2
   \   000000BE   ........           CALL    OS_SignalEvent
   \   000000C2   C05F               RJMP    ??ExtRS485Rec_3
    343                          }
    344                      }
    345                  }
   \                     ??ExtRS485Rec_5:
   \   000000C4   01F2               MOVW    R31:R30, R5:R4
   \   000000C6   8D00               LDD     R16, Z+24
   \   000000C8   9503               INC     R16
   \   000000CA   8F00               STD     Z+24, R16
   \   000000CC   910C               LD      R16, X
   \   000000CE   9F09               MUL     R16, R25
   \   000000D0   01F0               MOVW    R31:R30, R1:R0
   \   000000D2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000D4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000D6   8505               LDD     R16, Z+13
   \   000000D8   8516               LDD     R17, Z+14
   \   000000DA   5F0F               SUBI    R16, 255
   \   000000DC   4F1F               SBCI    R17, 255
   \   000000DE   8705               STD     Z+13, R16
   \   000000E0   8716               STD     Z+14, R17
   \   000000E2   910C               LD      R16, X
   \   000000E4   9F09               MUL     R16, R25
   \   000000E6   ....               LDI     R16, LOW((TData + 11))
   \   000000E8   0E00               ADD     R0, R16
   \   000000EA   ....               LDI     R16, HIGH((TData + 11))
   \   000000EC   1E10               ADC     R1, R16
   \   000000EE   01F0               MOVW    R31:R30, R1:R0
   \   000000F0   8120               LD      R18, Z
   \   000000F2   8131               LDD     R19, Z+1
   \   000000F4   0189               MOVW    R17:R16, R19:R18
   \   000000F6   5F0F               SUBI    R16, 255
   \   000000F8   4F1F               SBCI    R17, 255
   \   000000FA   8300               ST      Z, R16
   \   000000FC   8311               STD     Z+1, R17
   \   000000FE   3026               CPI     R18, 6
   \   00000100   4030               SBCI    R19, 0
   \   00000102   F038               BRCS    ??ExtRS485Rec_6
   \   00000104   91EC               LD      R30, X
   \   00000106   E0F0               LDI     R31, 0
   \   00000108   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000010A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000010C   8103               LDD     R16, Z+3
   \   0000010E   6001               ORI     R16, 0x01
   \   00000110   8303               STD     Z+3, R16
   \                     ??ExtRS485Rec_6:
   \   00000112   9100....           LDS     R16, TData
   \   00000116   E010               LDI     R17, 0
   \   00000118   914C               LD      R20, X
   \   0000011A   ........           CALL    ?SS_SHR_L02
   \   0000011E   7001               ANDI    R16, 0x01
   \   00000120   F0E1               BREQ    ??ExtRS485Rec_7
   \   00000122   910C               LD      R16, X
   \   00000124   9F09               MUL     R16, R25
   \   00000126   01F0               MOVW    R31:R30, R1:R0
   \   00000128   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000012A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000012C   8503               LDD     R16, Z+11
   \   0000012E   7007               ANDI    R16, 0x07
   \   00000130   3004               CPI     R16, 4
   \   00000132   F499               BRNE    ??ExtRS485Rec_7
   \   00000134   914C               LD      R20, X
   \   00000136   94F8               cli
   \   00000138   E001               LDI     R16, 1
   \   0000013A   ........           CALL    ?S_SHL_L02
   \   0000013E   9500               COM     R16
   \   00000140   B118               IN      R17, 0x08
   \   00000142   2310               AND     R17, R16
   \   00000144   B918               OUT     0x08, R17
   \   00000146   9100....           LDS     R16, (OS_Global + 1)
   \   0000014A   2300               TST     R16
   \   0000014C   F409               BRNE    ??ExtRS485Rec_8
   \   0000014E   9478               sei
   \                     ??ExtRS485Rec_8:
   \   00000150   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000152   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000154   E002               LDI     R16, 2
   \   00000156   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_7:
   \   0000015A   FF81               SBRS    R24, 1
   \   0000015C   CF65               RJMP    ??ExtRS485Rec_1
   \   0000015E   E001               LDI     R16, 1
   \   00000160   ....               RCALL   Usart16552CheckPackage
   \   00000162   910C               LD      R16, X
   \   00000164   9F09               MUL     R16, R25
   \   00000166   01F0               MOVW    R31:R30, R1:R0
   \   00000168   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000016A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000016C   8E73               STD     Z+27, R7
   \   0000016E   8E74               STD     Z+28, R7
   \   00000170   91EC               LD      R30, X
   \   00000172   E0F0               LDI     R31, 0
   \   00000174   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000176   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000178   8107               LDD     R16, Z+7
   \   0000017A   7F0E               ANDI    R16, 0xFE
   \   0000017C   8307               STD     Z+7, R16
   \   0000017E   01F2               MOVW    R31:R30, R5:R4
   \   00000180   AA72               STD     Z+50, R7
    346                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_3:
   \   00000182   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000184   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000186   E001               LDI     R16, 1
   \   00000188   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_0:
   \   0000018C   EF03               LDI     R16, 243
   \   0000018E   E011               LDI     R17, 1
   \   00000190   ........           CALL    OS_Delay
   \   00000194   E021               LDI     R18, 1
   \   00000196   E030               LDI     R19, 0
   \   00000198   E003               LDI     R16, 3
   \   0000019A   ........           CALL    OS_WaitEventTimed
   \   0000019E   2F80               MOV     R24, R16
   \   000001A0   FF00               SBRS    R16, 0
   \   000001A2   CF90               RJMP    ??ExtRS485Rec_5
   \   000001A4   E000               LDI     R16, 0
   \   000001A6   ....               RCALL   Usart16552CheckPackage
   \   000001A8   910C               LD      R16, X
   \   000001AA   9F09               MUL     R16, R25
   \   000001AC   01F0               MOVW    R31:R30, R1:R0
   \   000001AE   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001B0   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001B2   8673               STD     Z+11, R7
   \   000001B4   8674               STD     Z+12, R7
   \   000001B6   91EC               LD      R30, X
   \   000001B8   E0F0               LDI     R31, 0
   \   000001BA   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001BC   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001BE   8103               LDD     R16, Z+3
   \   000001C0   7F0E               ANDI    R16, 0xFE
   \   000001C2   8303               STD     Z+3, R16
   \   000001C4   01F2               MOVW    R31:R30, R5:R4
   \   000001C6   8E70               STD     Z+24, R7
   \   000001C8   CFC8               RJMP    ??ExtRS485Rec_7
   \   000001CA                      REQUIRE _A_PORTC
    347              }
    348          }
    349          
    350          /*************************************************************************
    351          *
    352          *  Set ports on or off
    353          *
    354          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    355          void SetRS4Port(void) {
   \                     SetRS4Port:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    356          
    357              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   B908               OUT     0x08, R16
    358          
    359          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    360          
    361          /*************************************************************************
    362          *
    363          *  Check the incoming packages from AN_SGCNV / WIS
    364          *
    365          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    366          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000E   2E40               MOV     R4, R16
    367          
    368              unsigned short pointer;
    369              char count_out, more;
    370          
    371              count_out = MAX_PROT_CMD;                  // max command
   \   00000010   EF1F               LDI     R17, 255
    372              more = true;
   \   00000012   E001               LDI     R16, 1
    373              pointer = 4;
   \   00000014   E084               LDI     R24, 4
   \   00000016   E090               LDI     R25, 0
   \   00000018   E12A               LDI     R18, 26
   \   0000001A   9E42               MUL     R4, R18
   \   0000001C   01D0               MOVW    R27:R26, R1:R0
   \   0000001E   ....               SUBI    R26, LOW((-(UART16552) & 0xFFFF))
   \   00000020   ....               SBCI    R27, (-(UART16552) & 0xFFFF) >> 8
   \   00000022   2E51               MOV     R5, R17
   \   00000024   2E60               MOV     R6, R16
    374              do {
    375                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   00000026   019C               MOVW    R19:R18, R25:R24
   \   00000028   2D04               MOV     R16, R4
   \   0000002A   ....               RCALL   CheckActionUart16552
   \   0000002C   2300               TST     R16
   \   0000002E   F409               BRNE    ??Usart16552CheckPackage_1
    376                      more = false;                          // terminate while loop
   \   00000030   2466               CLR     R6
    377                  }
    378                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   00000032   01FD               MOVW    R31:R30, R27:R26
   \   00000034   8502               LDD     R16, Z+10
   \   00000036   8513               LDD     R17, Z+11
   \   00000038   0F08               ADD     R16, R24
   \   0000003A   1F19               ADC     R17, R25
   \   0000003C   01F8               MOVW    R31:R30, R17:R16
   \   0000003E   8101               LDD     R16, Z+1
   \   00000040   E010               LDI     R17, 0
   \   00000042   5F0E               SUBI    R16, 254
   \   00000044   4F1F               SBCI    R17, 255
   \   00000046   0F80               ADD     R24, R16
   \   00000048   1F91               ADC     R25, R17
    379                  if (!--count_out) {
   \   0000004A   945A               DEC     R5
   \   0000004C   F051               BREQ    ??Usart16552CheckPackage_2
    380                      more = false;
    381                  }
    382              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \   0000004E   2066               TST     R6
   \   00000050   F041               BREQ    ??Usart16552CheckPackage_2
   \   00000052   01FD               MOVW    R31:R30, R27:R26
   \   00000054   8906               LDD     R16, Z+22
   \   00000056   8917               LDD     R17, Z+23
   \   00000058   5003               SUBI    R16, 3
   \   0000005A   4010               SBCI    R17, 0
   \   0000005C   1780               CP      R24, R16
   \   0000005E   0791               CPC     R25, R17
   \   00000060   F310               BRCS    ??Usart16552CheckPackage_0
    383              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_2:
   \   00000062   2D04               MOV     R16, R4
   \   00000064   ....               RCALL   GoToSyncUART16552
    384          }
   \   00000066   9189               LD      R24, Y+
   \   00000068   9199               LD      R25, Y+
   \   0000006A   91A9               LD      R26, Y+
   \   0000006C   91B9               LD      R27, Y+
   \   0000006E   9049               LD      R4, Y+
   \   00000070   9059               LD      R5, Y+
   \   00000072   9069               LD      R6, Y+
   \   00000074   9508               RET
    385          
    386          /*************************************************************************
    387          *
    388          *  Check action on received data from AN_SGCNV
    389          *
    390          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    391          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   938A               ST      -Y, R24
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    392          
    393              char retval = true;
   \   00000002   E081               LDI     R24, 1
    394          
    395              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   8542               LDD     R20, Z+10
   \   00000010   85F3               LDD     R31, Z+11
   \   00000012   2FE4               MOV     R30, R20
   \   00000014   0FE2               ADD     R30, R18
   \   00000016   1FF3               ADC     R31, R19
   \   00000018   8110               LD      R17, Z
   \   0000001A   5810               SUBI    R17, 128
   \   0000001C   F409               BRNE    $+2+2
   \   0000001E   C040               RJMP    ??CheckActionUart16552_0
   \   00000020   5314               SUBI    R17, 52
   \   00000022   F409               BRNE    $+2+2
   \   00000024   C045               RJMP    ??CheckActionUart16552_1
   \   00000026   951A               DEC     R17
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C046               RJMP    ??CheckActionUart16552_2
   \   0000002C   541B               SUBI    R17, 75
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C047               RJMP    ??CheckActionUart16552_3
   \   00000032   951A               DEC     R17
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C044               RJMP    ??CheckActionUart16552_3
   \   00000038   511D               SUBI    R17, 29
   \   0000003A   F088               BRCS    ??CheckActionUart16552_4
   \   0000003C   5013               SUBI    R17, 3
   \   0000003E   F080               BRCS    ??CheckActionUart16552_5
   \   00000040   5013               SUBI    R17, 3
   \   00000042   F0B0               BRCS    ??CheckActionUart16552_6
   \   00000044   F0C9               BREQ    ??CheckActionUart16552_7
   \   00000046   951A               DEC     R17
   \   00000048   F0F9               BREQ    ??CheckActionUart16552_8
   \   0000004A   5017               SUBI    R17, 7
   \   0000004C   F109               BREQ    ??CheckActionUart16552_9
   \   0000004E   5013               SUBI    R17, 3
   \   00000050   F0B9               BREQ    ??CheckActionUart16552_10
   \   00000052   5012               SUBI    R17, 2
   \   00000054   F049               BREQ    ??CheckActionUart16552_11
   \   00000056   541D               SUBI    R17, 77
   \   00000058   F0F9               BREQ    ??CheckActionUart16552_12
   \   0000005A   951A               DEC     R17
   \   0000005C   F129               BREQ    ??CheckActionUart16552_13
   \                     ??CheckActionUart16552_4:
   \   0000005E   C031               RJMP    ??CheckActionUart16552_14
    396          
    397              case ANP1_REP_MP_DATA :                              // Measured pressure data
    398              case ANP1_REP_MT_DATA :                              // Measured temperature data
    399              case ANP1_REP_MO_DATA :                              // Measured "other" data
    400                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_5:
   \   00000060   5F2E               SUBI    R18, 254
   \   00000062   4F3F               SBCI    R19, 255
   \   00000064   ....               RCALL   ReceivePTOData
    401                  break;
   \   00000066   C02D               RJMP    ??CheckActionUart16552_14
    402              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    403                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_11:
   \   00000068   5F2E               SUBI    R18, 254
   \   0000006A   4F3F               SBCI    R19, 255
   \   0000006C   ....               RCALL   ReceiveWHData
    404                  break;
   \   0000006E   C029               RJMP    ??CheckActionUart16552_14
    405              case ANP1_REP_RP_DATA :                              // Raw pressure data
    406              case ANP1_REP_RT_DATA :                              // Raw temp. data
    407              case ANP1_REP_RO_DATA :                              // Raw "other" data
    408                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_6:
   \   00000070   5F2E               SUBI    R18, 254
   \   00000072   4F3F               SBCI    R19, 255
   \   00000074   ....               RCALL   ReceiveRData
    409                  break;
   \   00000076   C025               RJMP    ??CheckActionUart16552_14
    410              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    411                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_7:
   \   00000078   5F2E               SUBI    R18, 254
   \   0000007A   4F3F               SBCI    R19, 255
   \   0000007C   ....               RCALL   ReceiveCData
    412                  break;
   \   0000007E   C021               RJMP    ??CheckActionUart16552_14
    413          
    414              case ANP1_REP_CARD_STAT :                             // card status package
    415                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_10:
   \   00000080   5F2E               SUBI    R18, 254
   \   00000082   4F3F               SBCI    R19, 255
   \   00000084   ....               RCALL   ReceiveCardStatus
    416                  break;
   \   00000086   C01D               RJMP    ??CheckActionUart16552_14
    417          
    418              case ANP1_REP_CONFIG :                             // config data
    419                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_8:
   \   00000088   5F2E               SUBI    R18, 254
   \   0000008A   4F3F               SBCI    R19, 255
   \   0000008C   ....               RCALL   ReceiveConfigData
    420                  break;
   \   0000008E   C019               RJMP    ??CheckActionUart16552_14
    421          
    422              case ANP1_REP_EEP_DATA :                             // card eeprome
    423                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_9:
   \   00000090   5F2E               SUBI    R18, 254
   \   00000092   4F3F               SBCI    R19, 255
   \   00000094   ....               RCALL   ReceiveCardEEPROMData
    424                  break;
   \   00000096   C015               RJMP    ??CheckActionUart16552_14
    425          
    426              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    427                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_12:
   \   00000098   5F2E               SUBI    R18, 254
   \   0000009A   4F3F               SBCI    R19, 255
   \   0000009C   ....               RCALL   ReceiveWISStatus
    428                  break;
   \   0000009E   C011               RJMP    ??CheckActionUart16552_14
    429          
    430              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    431                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_0:
   \   000000A0   5F2E               SUBI    R18, 254
   \   000000A2   4F3F               SBCI    R19, 255
   \   000000A4   ....               RCALL   ReceiveWISXData
    432                  break;
   \   000000A6   C00D               RJMP    ??CheckActionUart16552_14
    433          
    434              case ANP1_REP_WIS_DATA :                             // Data from WIS
    435                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_13:
   \   000000A8   5F2E               SUBI    R18, 254
   \   000000AA   4F3F               SBCI    R19, 255
   \   000000AC   ....               RCALL   ReceiveWISData
    436                  break;
   \   000000AE   C009               RJMP    ??CheckActionUart16552_14
    437              case ANP1_REP_GODA_DATA:
    438                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_1:
   \   000000B0   5F2E               SUBI    R18, 254
   \   000000B2   4F3F               SBCI    R19, 255
   \   000000B4   ....               RCALL   ReceiveRadarData
    439                  break;
   \   000000B6   C005               RJMP    ??CheckActionUart16552_14
    440              case ANP1_REP_GODA_INFO:
    441                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_2:
   \   000000B8   5F2E               SUBI    R18, 254
   \   000000BA   4F3F               SBCI    R19, 255
   \   000000BC   ....               RCALL   ReceiveRadarInfo
    442                  break;
   \   000000BE   C001               RJMP    ??CheckActionUart16552_14
    443              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    444              case ANP1_ECMD_NMDWOACK :                         // No more data
    445                  retval = false;
   \                     ??CheckActionUart16552_3:
   \   000000C0   E080               LDI     R24, 0
    446                  break;
    447              }
    448              return retval;
   \                     ??CheckActionUart16552_14:
   \   000000C2   2F08               MOV     R16, R24
   \   000000C4   9189               LD      R24, Y+
   \   000000C6   9508               RET
    449          }
    450          
    451          /*************************************************************************
    452          *
    453          *  Receive card status from WIS
    454          *
    455          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    456          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   2F50               MOV     R21, R16
    457          
    458              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000004   ....               LDI     R26, LOW(PortPair)
   \   00000006   ....               LDI     R27, (PortPair) >> 8
   \   00000008   914C               LD      R20, X
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F50               MUL     R21, R16
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000014   8502               LDD     R16, Z+10
   \   00000016   8513               LDD     R17, Z+11
   \   00000018   0F02               ADD     R16, R18
   \   0000001A   1F13               ADC     R17, R19
   \   0000001C   E024               LDI     R18, 4
   \   0000001E   9F52               MUL     R21, R18
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   8150               LD      R21, Z
   \   00000024   2F24               MOV     R18, R20
   \   00000026   E030               LDI     R19, 0
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   0FE2               ADD     R30, R18
   \   0000002C   1FF3               ADC     R31, R19
   \   0000002E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000032   A523               LDD     R18, Z+43
   \   00000034   2B25               OR      R18, R21
   \   00000036   A723               STD     Z+43, R18
    459              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   8121               LDD     R18, Z+1
   \   0000003C   914C               LD      R20, X
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   0FE4               ADD     R30, R20
   \   00000042   1FF3               ADC     R31, R19
   \   00000044   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000046   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000048   AB23               STD     Z+51, R18
    460              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   8104               LDD     R16, Z+4
   \   0000004E   2300               TST     R16
   \   00000050   F049               BREQ    ??ReceiveWISStatus_0
    461                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   00000052   910C               LD      R16, X
   \   00000054   0E00               ADD     R0, R16
   \   00000056   1E13               ADC     R1, R19
   \   00000058   01F0               MOVW    R31:R30, R1:R0
   \   0000005A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000005C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000005E   A903               LDD     R16, Z+51
   \   00000060   6800               ORI     R16, 0x80
   \   00000062   AB03               STD     Z+51, R16
    462              }
    463          }
   \                     ??ReceiveWISStatus_0:
   \   00000064   01DB               MOVW    R27:R26, R23:R22
   \   00000066   9508               RET
    464          
    465          /*************************************************************************
    466          *
    467          *  Receive WIS protocol data
    468          *
    469          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    470          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   2F10               MOV     R17, R16
    471          
    472              char i;
    473          
    474              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000004   E10A               LDI     R16, 26
   \   00000006   9F10               MUL     R17, R16
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   85A2               LDD     R26, Z+10
   \   00000010   85B3               LDD     R27, Z+11
   \   00000012   0FA2               ADD     R26, R18
   \   00000014   1FB3               ADC     R27, R19
   \   00000016   910D               LD      R16, X+
   \   00000018   3703               CPI     R16, 115
   \   0000001A   F509               BRNE    ??ReceiveWISXData_0
    475              case 115:                                     // Serial number
    476                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   0000001C   E302               LDI     R16, 50
   \   0000001E   9F10               MUL     R17, R16
   \   00000020   ....               LDI     R16, LOW(TData)
   \   00000022   0E00               ADD     R0, R16
   \   00000024   ....               LDI     R16, (TData) >> 8
   \   00000026   1E10               ADC     R1, R16
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   56EC               SUBI    R30, 108
   \   0000002C   4FFA               SBCI    R31, 250
   \   0000002E   E001               LDI     R16, 1
   \   00000030   8300               ST      Z, R16
    477                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000032   0F11               LSL     R17
   \   00000034   0F11               LSL     R17
   \   00000036   9100....           LDS     R16, PortPair
   \   0000003A   0F10               ADD     R17, R16
   \   0000003C   8311               STD     Z+1, R17
    478                  for (i = 2; i < (4 + 2); i++) {
   \   0000003E   E002               LDI     R16, 2
   \   00000040   0E00               ADD     R0, R16
   \   00000042   E000               LDI     R16, 0
   \   00000044   1E10               ADC     R1, R16
   \   00000046   E014               LDI     R17, 4
    479                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveWISXData_1:
   \   00000048   910D               LD      R16, X+
   \   0000004A   01F0               MOVW    R31:R30, R1:R0
   \   0000004C   56EC               SUBI    R30, 108
   \   0000004E   4FFA               SBCI    R31, 250
   \   00000050   8300               ST      Z, R16
    480                  }
   \   00000052   E001               LDI     R16, 1
   \   00000054   0E00               ADD     R0, R16
   \   00000056   E000               LDI     R16, 0
   \   00000058   1E10               ADC     R1, R16
   \   0000005A   951A               DEC     R17
   \   0000005C   F7A9               BRNE    ??ReceiveWISXData_1
    481                  break;
    482              default:
    483                  break;
    484              }
    485          }
   \                     ??ReceiveWISXData_0:
   \   0000005E   01DA               MOVW    R27:R26, R21:R20
   \   00000060   9508               RET
    486          
    487          /*************************************************************************
    488          *
    489          *  Receive measured data from WIS
    490          *
    491          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    492          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
    493          
    494              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
   \   0000000C   E11A               LDI     R17, 26
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000016   85A2               LDD     R26, Z+10
   \   00000018   85B3               LDD     R27, Z+11
   \   0000001A   0FA2               ADD     R26, R18
   \   0000001C   1FB3               ADC     R27, R19
   \   0000001E   E014               LDI     R17, 4
   \   00000020   9F01               MUL     R16, R17
   \   00000022   0120               MOVW    R5:R4, R1:R0
   \   00000024   ....               LDI     R24, LOW(PortPair)
   \   00000026   ....               LDI     R25, (PortPair) >> 8
   \   00000028   910C               LD      R16, X
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   E020               LDI     R18, 0
   \   0000002E   E030               LDI     R19, 0
   \   00000030   ........           CALL    ?UL2F_S_L04
   \   00000034   01FC               MOVW    R31:R30, R25:R24
   \   00000036   8140               LD      R20, Z
   \   00000038   E050               LDI     R21, 0
   \   0000003A   01F2               MOVW    R31:R30, R5:R4
   \   0000003C   0FE4               ADD     R30, R20
   \   0000003E   1FF5               ADC     R31, R21
   \   00000040   E348               LDI     R20, 56
   \   00000042   9FF4               MUL     R31, R20
   \   00000044   2DF0               MOV     R31, R0
   \   00000046   9FE4               MUL     R30, R20
   \   00000048   2DE0               MOV     R30, R0
   \   0000004A   0DF1               ADD     R31, R1
   \   0000004C   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   00000050   8300               ST      Z, R16
   \   00000052   8311               STD     Z+1, R17
   \   00000054   8322               STD     Z+2, R18
   \   00000056   8333               STD     Z+3, R19
    495              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    496                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   8111               LDD     R17, Z+1
   \   0000005C   8102               LDD     R16, Z+2
   \   0000005E   2F21               MOV     R18, R17
   \   00000060   0F22               LSL     R18
   \   00000062   0B22               SBC     R18, R18
   \   00000064   2F32               MOV     R19, R18
   \   00000066   ........           CALL    ?SL2F_S_L04
   \   0000006A   E040               LDI     R20, 0
   \   0000006C   E260               LDI     R22, 32
   \   0000006E   E471               LDI     R23, 65
   \   00000070   ........           CALL    ?F_DIV_S_L04
   \   00000074   01FC               MOVW    R31:R30, R25:R24
   \   00000076   8140               LD      R20, Z
   \   00000078   E050               LDI     R21, 0
   \   0000007A   01F2               MOVW    R31:R30, R5:R4
   \   0000007C   0FE4               ADD     R30, R20
   \   0000007E   1FF5               ADC     R31, R21
   \   00000080   E348               LDI     R20, 56
   \   00000082   9FF4               MUL     R31, R20
   \   00000084   2DF0               MOV     R31, R0
   \   00000086   9FE4               MUL     R30, R20
   \   00000088   2DE0               MOV     R30, R0
   \   0000008A   0DF1               ADD     R31, R1
   \   0000008C   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   0000008E   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   00000090   8300               ST      Z, R16
   \   00000092   8311               STD     Z+1, R17
   \   00000094   8322               STD     Z+2, R18
   \   00000096   8333               STD     Z+3, R19
    497              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   00000098   01FD               MOVW    R31:R30, R27:R26
   \   0000009A   8123               LDD     R18, Z+3
   \   0000009C   01FC               MOVW    R31:R30, R25:R24
   \   0000009E   8100               LD      R16, Z
   \   000000A0   01F2               MOVW    R31:R30, R5:R4
   \   000000A2   0FE0               ADD     R30, R16
   \   000000A4   1FF5               ADC     R31, R21
   \   000000A6   E00E               LDI     R16, 14
   \   000000A8   9FF0               MUL     R31, R16
   \   000000AA   2DF0               MOV     R31, R0
   \   000000AC   9FE0               MUL     R30, R16
   \   000000AE   2DE0               MOV     R30, R0
   \   000000B0   0DF1               ADD     R31, R1
   \   000000B2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B6   AF23               STD     Z+59, R18
    498              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   000000B8   01FC               MOVW    R31:R30, R25:R24
   \   000000BA   8100               LD      R16, Z
   \   000000BC   0E40               ADD     R4, R16
   \   000000BE   1E55               ADC     R5, R21
   \   000000C0   E00E               LDI     R16, 14
   \   000000C2   9E50               MUL     R5, R16
   \   000000C4   2C50               MOV     R5, R0
   \   000000C6   9E40               MUL     R4, R16
   \   000000C8   2C40               MOV     R4, R0
   \   000000CA   0C51               ADD     R5, R1
   \   000000CC   01F2               MOVW    R31:R30, R5:R4
   \   000000CE   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000D2   8350               ST      Z, R21
    499          }
   \   000000D4   9189               LD      R24, Y+
   \   000000D6   9199               LD      R25, Y+
   \   000000D8   91A9               LD      R26, Y+
   \   000000DA   91B9               LD      R27, Y+
   \   000000DC   9049               LD      R4, Y+
   \   000000DE   9059               LD      R5, Y+
   \   000000E0   9508               RET
    500          
    501          
    502          /*************************************************************************
    503          *
    504          *  Receive measured data from Radar
    505          *
    506          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    507          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   011C               MOVW    R3:R2, R25:R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
    508              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
    509              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
    510          
    511              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
   \   00000006   E11A               LDI     R17, 26
   \   00000008   9F01               MUL     R16, R17
   \   0000000A   01D0               MOVW    R27:R26, R1:R0
   \   0000000C   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   0000000E   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   00000010   91ED               LD      R30, X+
   \   00000012   91FC               LD      R31, X
   \   00000014   0FE2               ADD     R30, R18
   \   00000016   1FF3               ADC     R31, R19
   \   00000018   E014               LDI     R17, 4
   \   0000001A   9F01               MUL     R16, R17
   \   0000001C   0190               MOVW    R19:R18, R1:R0
   \   0000001E   ....               LDI     R16, LOW(PortPair)
   \   00000020   ....               LDI     R17, (PortPair) >> 8
   \   00000022   8140               LD      R20, Z
   \   00000024   8151               LDD     R21, Z+1
   \   00000026   8162               LDD     R22, Z+2
   \   00000028   8173               LDD     R23, Z+3
   \   0000002A   01D8               MOVW    R27:R26, R17:R16
   \   0000002C   900C               LD      R0, X
   \   0000002E   2411               CLR     R1
   \   00000030   01D9               MOVW    R27:R26, R19:R18
   \   00000032   0DA0               ADD     R26, R0
   \   00000034   1DB1               ADC     R27, R1
   \   00000036   E388               LDI     R24, 56
   \   00000038   E090               LDI     R25, 0
   \   0000003A   9FB8               MUL     R27, R24
   \   0000003C   2DB0               MOV     R27, R0
   \   0000003E   9FA8               MUL     R26, R24
   \   00000040   2DA0               MOV     R26, R0
   \   00000042   0DB1               ADD     R27, R1
   \   00000044   ....               SUBI    R26, LOW((-(TData + 731) & 0xFFFF))
   \   00000046   ....               SBCI    R27, HIGH((-(TData + 731) & 0xFFFF))
   \   00000048   934D               ST      X+, R20
   \   0000004A   935D               ST      X+, R21
   \   0000004C   936D               ST      X+, R22
   \   0000004E   937C               ST      X, R23
    512              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   00000050   8144               LDD     R20, Z+4
   \   00000052   8155               LDD     R21, Z+5
   \   00000054   8166               LDD     R22, Z+6
   \   00000056   8177               LDD     R23, Z+7
   \   00000058   01D8               MOVW    R27:R26, R17:R16
   \   0000005A   900C               LD      R0, X
   \   0000005C   01D9               MOVW    R27:R26, R19:R18
   \   0000005E   0DA0               ADD     R26, R0
   \   00000060   1FB9               ADC     R27, R25
   \   00000062   9FB8               MUL     R27, R24
   \   00000064   2DB0               MOV     R27, R0
   \   00000066   9FA8               MUL     R26, R24
   \   00000068   2DA0               MOV     R26, R0
   \   0000006A   0DB1               ADD     R27, R1
   \   0000006C   ....               SUBI    R26, LOW((-(TData + 735) & 0xFFFF))
   \   0000006E   ....               SBCI    R27, HIGH((-(TData + 735) & 0xFFFF))
   \   00000070   934D               ST      X+, R20
   \   00000072   935D               ST      X+, R21
   \   00000074   936D               ST      X+, R22
   \   00000076   937C               ST      X, R23
    513              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   00000078   8560               LDD     R22, Z+8
   \   0000007A   01D8               MOVW    R27:R26, R17:R16
   \   0000007C   914C               LD      R20, X
   \   0000007E   01D9               MOVW    R27:R26, R19:R18
   \   00000080   0FA4               ADD     R26, R20
   \   00000082   1FB9               ADC     R27, R25
   \   00000084   E04E               LDI     R20, 14
   \   00000086   9FB4               MUL     R27, R20
   \   00000088   2DB0               MOV     R27, R0
   \   0000008A   9FA4               MUL     R26, R20
   \   0000008C   2DA0               MOV     R26, R0
   \   0000008E   0DB1               ADD     R27, R1
   \   00000090   ....               SUBI    R26, LOW((-(TData + 59) & 0xFFFF))
   \   00000092   ....               SBCI    R27, HIGH((-(TData + 59) & 0xFFFF))
   \   00000094   936C               ST      X, R22
    514              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   00000096   8541               LDD     R20, Z+9
   \   00000098   01F8               MOVW    R31:R30, R17:R16
   \   0000009A   8100               LD      R16, Z
   \   0000009C   0F20               ADD     R18, R16
   \   0000009E   1F39               ADC     R19, R25
   \   000000A0   E00E               LDI     R16, 14
   \   000000A2   9F30               MUL     R19, R16
   \   000000A4   2D30               MOV     R19, R0
   \   000000A6   9F20               MUL     R18, R16
   \   000000A8   2D20               MOV     R18, R0
   \   000000AA   0D31               ADD     R19, R1
   \   000000AC   01F9               MOVW    R31:R30, R19:R18
   \   000000AE   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000B0   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000B2   8340               ST      Z, R20
    515          }
   \   000000B4   01C1               MOVW    R25:R24, R3:R2
   \   000000B6   91A9               LD      R26, Y+
   \   000000B8   91B9               LD      R27, Y+
   \   000000BA   9508               RET
    516          
    517          
    518          /*************************************************************************
    519          *
    520          *  Receive Serial number and version information from Radar
    521          *
    522          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    523          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    524              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    525              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   85A2               LDD     R26, Z+10
   \   00000010   85B3               LDD     R27, Z+11
   \   00000012   0FA2               ADD     R26, R18
   \   00000014   1FB3               ADC     R27, R19
   \   00000016   961A               ADIW    R27:R26, 10
   \   00000018   914C               LD      R20, X
   \   0000001A   E014               LDI     R17, 4
   \   0000001C   9F01               MUL     R16, R17
   \   0000001E   9100....           LDS     R16, PortPair
   \   00000022   E010               LDI     R17, 0
   \   00000024   0E00               ADD     R0, R16
   \   00000026   1E11               ADC     R1, R17
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000002E   A743               STD     Z+43, R20
    526          }
   \   00000030   2FA6               MOV     R26, R22
   \   00000032   2FB5               MOV     R27, R21
   \   00000034   9508               RET
    527          
    528          /*************************************************************************
    529          *
    530          *  Receive pressure measured data from AN_SGCNV
    531          *
    532          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    533          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   2E60               MOV     R6, R16
   \   00000012   0129               MOVW    R5:R4, R19:R18
    534          
    535              unsigned short pnt, ADCh;
    536              short packlen;
    537          
    538              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000014   E10A               LDI     R16, 26
   \   00000016   9E60               MUL     R6, R16
   \   00000018   01D0               MOVW    R27:R26, R1:R0
   \   0000001A   ....               SUBI    R26, LOW((-(UART16552) & 0xFFFF))
   \   0000001C   ....               SBCI    R27, (-(UART16552) & 0xFFFF) >> 8
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8502               LDD     R16, Z+10
   \   00000022   8513               LDD     R17, Z+11
   \   00000024   0F02               ADD     R16, R18
   \   00000026   1F13               ADC     R17, R19
   \   00000028   01F8               MOVW    R31:R30, R17:R16
   \   0000002A   9182               LD      R24, -Z
   \   0000002C   E090               LDI     R25, 0
    539          
    540              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   0000002E   ....               LDI     R16, LOW(UARTSEND)
   \   00000030   ....               LDI     R17, (UARTSEND) >> 8
   \   00000032   ........           CALL    OS_Use
    541          
    542              if (packlen > 0) {
   \   00000036   3081               CPI     R24, 1
   \   00000038   0799               CPC     R25, R25
   \   0000003A   F40C               BRGE    $+2+2
   \   0000003C   C04C               RJMP    ??ReceivePTOData_0
    543                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   0000003E   2388               TST     R24
   \   00000040   F409               BRNE    $+2+2
   \   00000042   C049               RJMP    ??ReceivePTOData_0
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8502               LDD     R16, Z+10
   \   00000048   8513               LDD     R17, Z+11
   \   0000004A   0E40               ADD     R4, R16
   \   0000004C   1E51               ADC     R5, R17
   \   0000004E   E044               LDI     R20, 4
   \   00000050   9E64               MUL     R6, R20
   \   00000052   0110               MOVW    R3:R2, R1:R0
   \   00000054   E06E               LDI     R22, 14
   \   00000056   E070               LDI     R23, 0
   \   00000058   2F48               MOV     R20, R24
   \   0000005A   E080               LDI     R24, 0
    544                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceivePTOData_1:
   \   0000005C   01F2               MOVW    R31:R30, R5:R4
   \   0000005E   81A0               LD      R26, Z
   \   00000060   E0B0               LDI     R27, 0
    545                      if (ADCh < 14) {
   \   00000062   30AE               CPI     R26, 14
   \   00000064   F588               BRCC    ??ReceivePTOData_2
    546                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000066   8121               LDD     R18, Z+1
   \   00000068   9100....           LDS     R16, PortPair
   \   0000006C   01F1               MOVW    R31:R30, R3:R2
   \   0000006E   0FE0               ADD     R30, R16
   \   00000070   1FF7               ADC     R31, R23
   \   00000072   9FF6               MUL     R31, R22
   \   00000074   2DF0               MOV     R31, R0
   \   00000076   9FE6               MUL     R30, R22
   \   00000078   2DE0               MOV     R30, R0
   \   0000007A   0DF1               ADD     R31, R1
   \   0000007C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000080   0FEA               ADD     R30, R26
   \   00000082   1FF7               ADC     R31, R23
   \   00000084   AF23               STD     Z+59, R18
    547                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000086   01F2               MOVW    R31:R30, R5:R4
   \   00000088   8102               LDD     R16, Z+2
   \   0000008A   8113               LDD     R17, Z+3
   \   0000008C   8124               LDD     R18, Z+4
   \   0000008E   8135               LDD     R19, Z+5
   \   00000090   9000....           LDS     R0, PortPair
   \   00000094   0131               MOVW    R7:R6, R3:R2
   \   00000096   0C60               ADD     R6, R0
   \   00000098   1E77               ADC     R7, R23
   \   0000009A   E3E8               LDI     R30, 56
   \   0000009C   9E7E               MUL     R7, R30
   \   0000009E   2C70               MOV     R7, R0
   \   000000A0   9E6E               MUL     R6, R30
   \   000000A2   0C71               ADD     R7, R1
   \   000000A4   ....               LDI     R30, LOW(TData)
   \   000000A6   0E0E               ADD     R0, R30
   \   000000A8   ....               LDI     R30, (TData) >> 8
   \   000000AA   1E7E               ADC     R7, R30
   \   000000AC   0FAA               LSL     R26
   \   000000AE   1FBB               ROL     R27
   \   000000B0   0FAA               LSL     R26
   \   000000B2   1FBB               ROL     R27
   \   000000B4   0E0A               ADD     R0, R26
   \   000000B6   2C60               MOV     R6, R0
   \   000000B8   1E7B               ADC     R7, R27
   \   000000BA   01F3               MOVW    R31:R30, R7:R6
   \   000000BC   52E5               SUBI    R30, 37
   \   000000BE   4FFD               SBCI    R31, 253
   \   000000C0   8300               ST      Z, R16
   \   000000C2   8311               STD     Z+1, R17
   \   000000C4   8322               STD     Z+2, R18
   \   000000C6   8333               STD     Z+3, R19
    548                      }
    549                  }
   \                     ??ReceivePTOData_2:
   \   000000C8   E006               LDI     R16, 6
   \   000000CA   0E40               ADD     R4, R16
   \   000000CC   1E57               ADC     R5, R23
   \   000000CE   9606               ADIW    R25:R24, 6
   \   000000D0   1784               CP      R24, R20
   \   000000D2   0797               CPC     R25, R23
   \   000000D4   F218               BRCS    ??ReceivePTOData_1
    550              }
    551              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   000000D6   ....               LDI     R16, LOW(UARTSEND)
   \   000000D8   ....               LDI     R17, (UARTSEND) >> 8
   \   000000DA   ........           CALL    OS_Unuse
    552          }
   \   000000DE   9189               LD      R24, Y+
   \   000000E0   9199               LD      R25, Y+
   \   000000E2   91A9               LD      R26, Y+
   \   000000E4   91B9               LD      R27, Y+
   \   000000E6   9049               LD      R4, Y+
   \   000000E8   9059               LD      R5, Y+
   \   000000EA   9069               LD      R6, Y+
   \   000000EC   9079               LD      R7, Y+
   \   000000EE   9508               RET
    553          /*************************************************************************
    554          *
    555          *  Receive Wash Track and High Level data from AN_SGCNV
    556          *
    557          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    558          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F80               MOV     R24, R16
   \   00000008   01D9               MOVW    R27:R26, R19:R18
    559          
    560              // Fixed packet length
    561              //short packlen;
    562          
    563              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    564          
    565              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   0000000A   ....               LDI     R16, LOW(UARTSEND)
   \   0000000C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000000E   ........           CALL    OS_Use
    566              short Index = (ch * 4) + PortPair;
   \   00000012   E004               LDI     R16, 4
   \   00000014   9F80               MUL     R24, R16
   \   00000016   9100....           LDS     R16, PortPair
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   0D00               ADD     R16, R0
   \   0000001E   1D11               ADC     R17, R1
    567              // Check if we have time information included
    568              if (UART16552[ch].pRxBuffer[pointer -1] == 4 ) {
   \   00000020   E12A               LDI     R18, 26
   \   00000022   9F82               MUL     R24, R18
   \   00000024   01F0               MOVW    R31:R30, R1:R0
   \   00000026   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000002A   8562               LDD     R22, Z+10
   \   0000002C   8573               LDD     R23, Z+11
   \   0000002E   0F6A               ADD     R22, R26
   \   00000030   1F7B               ADC     R23, R27
   \   00000032   0198               MOVW    R19:R18, R17:R16
   \   00000034   0F22               LSL     R18
   \   00000036   1F33               ROL     R19
   \   00000038   0F22               LSL     R18
   \   0000003A   1F33               ROL     R19
   \   0000003C   0F22               LSL     R18
   \   0000003E   1F33               ROL     R19
   \   00000040   ....               SUBI    R18, LOW((-(TData) & 0xFFFF))
   \   00000042   ....               SBCI    R19, (-(TData) & 0xFFFF) >> 8
   \   00000044   01FB               MOVW    R31:R30, R23:R22
   \   00000046   9142               LD      R20, -Z
   \   00000048   3044               CPI     R20, 4
   \   0000004A   F511               BRNE    ??ReceiveWHData_0
    569                  for (short pnt = 0; pnt < 3; pnt++) {
   \   0000004C   010B               MOVW    R1:R0, R23:R22
   \   0000004E   01A9               MOVW    R21:R20, R19:R18
   \   00000050   5645               SUBI    R20, 101
   \   00000052   4F5B               SBCI    R21, 251
   \   00000054   E0E3               LDI     R30, 3
   \   00000056   2433               CLR     R3
    570                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer+pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_1:
   \   00000058   01D0               MOVW    R27:R26, R1:R0
   \   0000005A   902D               LD      R2, X+
   \   0000005C   010D               MOVW    R1:R0, R27:R26
   \   0000005E   01DA               MOVW    R27:R26, R21:R20
   \   00000060   922D               ST      X+, R2
   \   00000062   923D               ST      X+, R3
   \   00000064   01AD               MOVW    R21:R20, R27:R26
    571                  }
   \   00000066   95EA               DEC     R30
   \   00000068   F7B9               BRNE    ??ReceiveWHData_1
    572                  // 4th WashTrack dont come
    573                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \   0000006A   01F9               MOVW    R31:R30, R19:R18
   \   0000006C   55EF               SUBI    R30, 95
   \   0000006E   4FFB               SBCI    R31, 251
   \   00000070   8230               ST      Z, R3
   \   00000072   8231               STD     Z+1, R3
    574                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer +3]; // Hgh levels in 5th byte
   \   00000074   01FB               MOVW    R31:R30, R23:R22
   \   00000076   8123               LDD     R18, Z+3
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   0000007E   8320               ST      Z, R18
    575                  TData.RS4.WTTime[Index] = 0;
   \   00000080   0F00               LSL     R16
   \   00000082   1F11               ROL     R17
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   00000088   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   0000008A   8230               ST      Z, R3
   \   0000008C   8231               STD     Z+1, R3
   \   0000008E   C01E               RJMP    ??ReceiveWHData_2
    576              }else{
    577                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   00000090   5625               SUBI    R18, 101
   \   00000092   4F3B               SBCI    R19, 251
   \   00000094   01AB               MOVW    R21:R20, R23:R22
   \   00000096   E0E4               LDI     R30, 4
    578                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_3:
   \   00000098   01DA               MOVW    R27:R26, R21:R20
   \   0000009A   900D               LD      R0, X+
   \   0000009C   901D               LD      R1, X+
   \   0000009E   01AD               MOVW    R21:R20, R27:R26
   \   000000A0   01D9               MOVW    R27:R26, R19:R18
   \   000000A2   920D               ST      X+, R0
   \   000000A4   921D               ST      X+, R1
   \   000000A6   019D               MOVW    R19:R18, R27:R26
    579                  }
   \   000000A8   95EA               DEC     R30
   \   000000AA   F7B1               BRNE    ??ReceiveWHData_3
    580                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \   000000AC   01FB               MOVW    R31:R30, R23:R22
   \   000000AE   8520               LDD     R18, Z+8
   \   000000B0   01F8               MOVW    R31:R30, R17:R16
   \   000000B2   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000B6   8320               ST      Z, R18
    581                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   000000B8   01FB               MOVW    R31:R30, R23:R22
   \   000000BA   8521               LDD     R18, Z+9
   \   000000BC   8532               LDD     R19, Z+10
   \   000000BE   0F00               LSL     R16
   \   000000C0   1F11               ROL     R17
   \   000000C2   01F8               MOVW    R31:R30, R17:R16
   \   000000C4   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000C8   8320               ST      Z, R18
   \   000000CA   8331               STD     Z+1, R19
    582              }
    583              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_2:
   \   000000CC   0F88               LSL     R24
   \   000000CE   0F88               LSL     R24
   \   000000D0   9100....           LDS     R16, PortPair
   \   000000D4   0F80               ADD     R24, R16
   \   000000D6   2F48               MOV     R20, R24
   \   000000D8   E001               LDI     R16, 1
   \   000000DA   E010               LDI     R17, 0
   \   000000DC   ........           CALL    ?S_SHL_L02
   \   000000E0   9110....           LDS     R17, (TData + 1267)
   \   000000E4   2B10               OR      R17, R16
   \   000000E6   9310....           STS     (TData + 1267), R17
    584              OS_Unuse(&UARTSEND);
   \   000000EA   ....               LDI     R16, LOW(UARTSEND)
   \   000000EC   ....               LDI     R17, (UARTSEND) >> 8
   \   000000EE   ........           CALL    OS_Unuse
    585          }
   \   000000F2   9189               LD      R24, Y+
   \   000000F4   91A9               LD      R26, Y+
   \   000000F6   91B9               LD      R27, Y+
   \   000000F8   9508               RET
    586          
    587          
    588          /************************************************************************
    589          *
    590          *  Receive raw data for pressure, temp and other from AN_SGCNV
    591          *
    592          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9069               LD      R6, Y+
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    593          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   926A               ST      -Y, R6
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000C   0119               MOVW    R3:R2, R19:R18
    594          
    595              char pnt, ADCh;
    596              short packlen;
    597          
    598              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   0000000E   E11A               LDI     R17, 26
   \   00000010   9F01               MUL     R16, R17
   \   00000012   01F0               MOVW    R31:R30, R1:R0
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8542               LDD     R20, Z+10
   \   0000001A   8553               LDD     R21, Z+11
   \   0000001C   01FA               MOVW    R31:R30, R21:R20
   \   0000001E   0FE2               ADD     R30, R18
   \   00000020   1FF3               ADC     R31, R19
   \   00000022   9182               LD      R24, -Z
   \   00000024   E090               LDI     R25, 0
    599          
    600              if (packlen > 0) {
   \   00000026   3081               CPI     R24, 1
   \   00000028   0799               CPC     R25, R25
   \   0000002A   F1E4               BRLT    ??ReceiveRData_0
    601                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   0000002C   E020               LDI     R18, 0
   \   0000002E   E014               LDI     R17, 4
   \   00000030   9F01               MUL     R16, R17
   \   00000032   01B0               MOVW    R23:R22, R1:R0
   \   00000034   E03E               LDI     R19, 14
   \   00000036   C033               RJMP    ??ReceiveRData_1
    602                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceiveRData_2:
   \   00000038   0101               MOVW    R1:R0, R3:R2
   \   0000003A   0E02               ADD     R0, R18
   \   0000003C   1E19               ADC     R1, R25
   \   0000003E   018A               MOVW    R17:R16, R21:R20
   \   00000040   0D00               ADD     R16, R0
   \   00000042   1D11               ADC     R17, R1
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   8040               LD      R4, Z
    603                      if (ADCh < 14) {
   \   00000048   1643               CP      R4, R19
   \   0000004A   F540               BRCC    ??ReceiveRData_3
    604                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000004C   8061               LDD     R6, Z+1
   \   0000004E   9000....           LDS     R0, PortPair
   \   00000052   01FB               MOVW    R31:R30, R23:R22
   \   00000054   0DE0               ADD     R30, R0
   \   00000056   1FF9               ADC     R31, R25
   \   00000058   9FF3               MUL     R31, R19
   \   0000005A   2DF0               MOV     R31, R0
   \   0000005C   9FE3               MUL     R30, R19
   \   0000005E   2DE0               MOV     R30, R0
   \   00000060   0DF1               ADD     R31, R1
   \   00000062   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000066   0DE4               ADD     R30, R4
   \   00000068   1FF9               ADC     R31, R25
   \   0000006A   AE63               STD     Z+59, R6
    605                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   81A2               LDD     R26, Z+2
   \   00000070   81B3               LDD     R27, Z+3
   \   00000072   9100....           LDS     R16, PortPair
   \   00000076   01FB               MOVW    R31:R30, R23:R22
   \   00000078   0FE0               ADD     R30, R16
   \   0000007A   1FF9               ADC     R31, R25
   \   0000007C   E10C               LDI     R16, 28
   \   0000007E   9FF0               MUL     R31, R16
   \   00000080   2DF0               MOV     R31, R0
   \   00000082   9FE0               MUL     R30, R16
   \   00000084   2DE0               MOV     R30, R0
   \   00000086   0DF1               ADD     R31, R1
   \   00000088   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000008A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000008C   E002               LDI     R16, 2
   \   0000008E   9E40               MUL     R4, R16
   \   00000090   0DE0               ADD     R30, R0
   \   00000092   1DF1               ADC     R31, R1
   \   00000094   5EE5               SUBI    R30, 229
   \   00000096   4FFE               SBCI    R31, 254
   \   00000098   83A0               ST      Z, R26
   \   0000009A   83B1               STD     Z+1, R27
    606                      }
    607                  }
   \                     ??ReceiveRData_3:
   \   0000009C   5F2C               SUBI    R18, 252
   \                     ??ReceiveRData_1:
   \   0000009E   1728               CP      R18, R24
   \   000000A0   0799               CPC     R25, R25
   \   000000A2   F254               BRLT    ??ReceiveRData_2
    608              }
    609          }
   \                     ??ReceiveRData_0:
   \   000000A4   ....               RJMP    ?Subroutine2
    610          
    611          /*************************************************************************
    612          *
    613          *  Receive cal data  from AN_SGCNV
    614          *
    615          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    616          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   926A               ST      -Y, R6
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000C                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000C   0119               MOVW    R3:R2, R19:R18
    617          
    618              char pnt, ADCh;
    619              short packlen;
    620          
    621              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   0000000E   E11A               LDI     R17, 26
   \   00000010   9F01               MUL     R16, R17
   \   00000012   01F0               MOVW    R31:R30, R1:R0
   \   00000014   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000018   8542               LDD     R20, Z+10
   \   0000001A   8553               LDD     R21, Z+11
   \   0000001C   01FA               MOVW    R31:R30, R21:R20
   \   0000001E   0FE2               ADD     R30, R18
   \   00000020   1FF3               ADC     R31, R19
   \   00000022   9182               LD      R24, -Z
   \   00000024   E090               LDI     R25, 0
    622          
    623              if (packlen > 0) {
   \   00000026   3081               CPI     R24, 1
   \   00000028   0799               CPC     R25, R25
   \   0000002A   F1E4               BRLT    ??ReceiveCData_0
    624                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   0000002C   E020               LDI     R18, 0
   \   0000002E   E014               LDI     R17, 4
   \   00000030   9F01               MUL     R16, R17
   \   00000032   01B0               MOVW    R23:R22, R1:R0
   \   00000034   E03E               LDI     R19, 14
   \   00000036   C033               RJMP    ??ReceiveCData_1
    625                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceiveCData_2:
   \   00000038   0101               MOVW    R1:R0, R3:R2
   \   0000003A   0E02               ADD     R0, R18
   \   0000003C   1E19               ADC     R1, R25
   \   0000003E   018A               MOVW    R17:R16, R21:R20
   \   00000040   0D00               ADD     R16, R0
   \   00000042   1D11               ADC     R17, R1
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   8040               LD      R4, Z
    626                      if (ADCh < 14) {
   \   00000048   1643               CP      R4, R19
   \   0000004A   F540               BRCC    ??ReceiveCData_3
    627                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000004C   8061               LDD     R6, Z+1
   \   0000004E   9000....           LDS     R0, PortPair
   \   00000052   01FB               MOVW    R31:R30, R23:R22
   \   00000054   0DE0               ADD     R30, R0
   \   00000056   1FF9               ADC     R31, R25
   \   00000058   9FF3               MUL     R31, R19
   \   0000005A   2DF0               MOV     R31, R0
   \   0000005C   9FE3               MUL     R30, R19
   \   0000005E   2DE0               MOV     R30, R0
   \   00000060   0DF1               ADD     R31, R1
   \   00000062   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000066   0DE4               ADD     R30, R4
   \   00000068   1FF9               ADC     R31, R25
   \   0000006A   AE63               STD     Z+59, R6
    628                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000006C   01F8               MOVW    R31:R30, R17:R16
   \   0000006E   81A2               LDD     R26, Z+2
   \   00000070   81B3               LDD     R27, Z+3
   \   00000072   9100....           LDS     R16, PortPair
   \   00000076   01FB               MOVW    R31:R30, R23:R22
   \   00000078   0FE0               ADD     R30, R16
   \   0000007A   1FF9               ADC     R31, R25
   \   0000007C   E10C               LDI     R16, 28
   \   0000007E   9FF0               MUL     R31, R16
   \   00000080   2DF0               MOV     R31, R0
   \   00000082   9FE0               MUL     R30, R16
   \   00000084   2DE0               MOV     R30, R0
   \   00000086   0DF1               ADD     R31, R1
   \   00000088   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000008A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000008C   E002               LDI     R16, 2
   \   0000008E   9E40               MUL     R4, R16
   \   00000090   0DE0               ADD     R30, R0
   \   00000092   1DF1               ADC     R31, R1
   \   00000094   50E5               SUBI    R30, 5
   \   00000096   4FFE               SBCI    R31, 254
   \   00000098   83A0               ST      Z, R26
   \   0000009A   83B1               STD     Z+1, R27
    629                      }
    630                  }
   \                     ??ReceiveCData_3:
   \   0000009C   5F2C               SUBI    R18, 252
   \                     ??ReceiveCData_1:
   \   0000009E   1728               CP      R18, R24
   \   000000A0   0799               CPC     R25, R25
   \   000000A2   F254               BRLT    ??ReceiveCData_2
    631              }
    632          }
   \                     ??ReceiveCData_0:
   \   000000A4                      REQUIRE ?Subroutine2
   \   000000A4                      ;               // Fall through to label ?Subroutine2
    633          
    634          /*************************************************************************
    635          *
    636          *  Receive card status  from AN_SGCNV
    637          *
    638          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    639          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    640          
    641              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   01F0               MOVW    R31:R30, R1:R0
   \   00000008   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000A   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000C   85A2               LDD     R26, Z+10
   \   0000000E   85B3               LDD     R27, Z+11
   \   00000010   0FA2               ADD     R26, R18
   \   00000012   1FB3               ADC     R27, R19
   \   00000014   E014               LDI     R17, 4
   \   00000016   9F01               MUL     R16, R17
   \   00000018   912D               LD      R18, X+
   \   0000001A   9100....           LDS     R16, PortPair
   \   0000001E   E010               LDI     R17, 0
   \   00000020   01F0               MOVW    R31:R30, R1:R0
   \   00000022   0FE0               ADD     R30, R16
   \   00000024   1FF1               ADC     R31, R17
   \   00000026   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000002A   A723               STD     Z+43, R18
    642              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000002C   912C               LD      R18, X
   \   0000002E   9100....           LDS     R16, PortPair
   \   00000032   0E00               ADD     R0, R16
   \   00000034   1E11               ADC     R1, R17
   \   00000036   01F0               MOVW    R31:R30, R1:R0
   \   00000038   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000003C   AB23               STD     Z+51, R18
    643          }
   \   0000003E   01DA               MOVW    R27:R26, R21:R20
   \   00000040   9508               RET
    644          
    645          /*************************************************************************
    646          *
    647          *  Receive config data from AN_SGCNV
    648          *
    649          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    650          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    651          
    652              char i, ADCh;
    653          
    654              for (i = 0; i < 14; i++) {
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   85A2               LDD     R26, Z+10
   \   00000010   85B3               LDD     R27, Z+11
   \   00000012   0FA2               ADD     R26, R18
   \   00000014   1FB3               ADC     R27, R19
   \   00000016   E01E               LDI     R17, 14
   \   00000018   E024               LDI     R18, 4
   \   0000001A   9F02               MUL     R16, R18
   \   0000001C   01A0               MOVW    R21:R20, R1:R0
   \   0000001E   E030               LDI     R19, 0
    655                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveConfigData_0:
   \   00000020   910C               LD      R16, X
    656                  if (ADCh < 14) {
   \   00000022   300E               CPI     R16, 14
   \   00000024   F530               BRCC    ??ReceiveConfigData_1
    657                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8161               LDD     R22, Z+1
   \   0000002A   9120....           LDS     R18, PortPair
   \   0000002E   01FA               MOVW    R31:R30, R21:R20
   \   00000030   0FE2               ADD     R30, R18
   \   00000032   1FF3               ADC     R31, R19
   \   00000034   E02E               LDI     R18, 14
   \   00000036   9FF2               MUL     R31, R18
   \   00000038   2DF0               MOV     R31, R0
   \   0000003A   9FE2               MUL     R30, R18
   \   0000003C   2DE0               MOV     R30, R0
   \   0000003E   0DF1               ADD     R31, R1
   \   00000040   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000044   0FE0               ADD     R30, R16
   \   00000046   1FF3               ADC     R31, R19
   \   00000048   AF63               STD     Z+59, R22
    658                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8162               LDD     R22, Z+2
   \   0000004E   9120....           LDS     R18, PortPair
   \   00000052   01FA               MOVW    R31:R30, R21:R20
   \   00000054   0FE2               ADD     R30, R18
   \   00000056   1FF3               ADC     R31, R19
   \   00000058   E02E               LDI     R18, 14
   \   0000005A   9FF2               MUL     R31, R18
   \   0000005C   2DF0               MOV     R31, R0
   \   0000005E   9FE2               MUL     R30, R18
   \   00000060   2DE0               MOV     R30, R0
   \   00000062   0DF1               ADD     R31, R1
   \   00000064   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000066   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000068   0FE0               ADD     R30, R16
   \   0000006A   1FF3               ADC     R31, R19
   \   0000006C   55E5               SUBI    R30, 85
   \   0000006E   4FFF               SBCI    R31, 255
   \   00000070   8360               ST      Z, R22
    659                  }
    660                  pointer += 2;
    661              }
   \                     ??ReceiveConfigData_1:
   \   00000072   9613               ADIW    R27:R26, 3
   \   00000074   951A               DEC     R17
   \   00000076   F6A1               BRNE    ??ReceiveConfigData_0
    662          }
   \   00000078   2DA2               MOV     R26, R2
   \   0000007A   2FB7               MOV     R27, R23
   \   0000007C   9508               RET
    663          
    664          /*************************************************************************
    665          *
    666          *  Receive eeprom data from AN_SGCNV
    667          *
    668          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    669          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F10               MOV     R17, R16
    670          
    671              short i;
    672          
    673              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000006   E302               LDI     R16, 50
   \   00000008   9F10               MUL     R17, R16
   \   0000000A   01F0               MOVW    R31:R30, R1:R0
   \   0000000C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000000E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000010   01DF               MOVW    R27:R26, R31:R30
   \   00000012   56AC               SUBI    R26, 108
   \   00000014   4FBA               SBCI    R27, 250
   \   00000016   E001               LDI     R16, 1
   \   00000018   930D               ST      X+, R16
    674              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   0000001A   2F41               MOV     R20, R17
   \   0000001C   0F44               LSL     R20
   \   0000001E   0F44               LSL     R20
   \   00000020   9100....           LDS     R16, PortPair
   \   00000024   0F40               ADD     R20, R16
   \   00000026   934C               ST      X, R20
    675              for (i = 2; i < (41 + 2); i++) {
   \   00000028   E10A               LDI     R16, 26
   \   0000002A   9F10               MUL     R17, R16
   \   0000002C   01D0               MOVW    R27:R26, R1:R0
   \   0000002E   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   00000030   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   00000032   910D               LD      R16, X+
   \   00000034   911C               LD      R17, X
   \   00000036   0F02               ADD     R16, R18
   \   00000038   1F13               ADC     R17, R19
   \   0000003A   56EA               SUBI    R30, 106
   \   0000003C   4FFA               SBCI    R31, 250
   \   0000003E   E229               LDI     R18, 41
   \   00000040   01D8               MOVW    R27:R26, R17:R16
    676                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveCardEEPROMData_0:
   \   00000042   910D               LD      R16, X+
   \   00000044   9301               ST      Z+, R16
    677              }
   \   00000046   952A               DEC     R18
   \   00000048   F7E1               BRNE    ??ReceiveCardEEPROMData_0
    678          }
   \   0000004A   2FA6               MOV     R26, R22
   \   0000004C   2FB5               MOV     R27, R21
   \   0000004E   9508               RET
    679          
    680          /*************************************************************************
    681          *
    682          * Build send packet header for AN-SGCNV
    683          *
    684          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    685          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    686          
    687              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R16, LOW(UART16552)
   \   00000008   0E00               ADD     R0, R16
   \   0000000A   ....               LDI     R16, (UART16552) >> 8
   \   0000000C   1E10               ADC     R1, R16
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   E000               LDI     R16, 0
   \   00000012   8704               STD     Z+12, R16
   \   00000014   8705               STD     Z+13, R16
    688              UART16552[ch].RxLast = 0;
   \   00000016   8706               STD     Z+14, R16
   \   00000018   8707               STD     Z+15, R16
    689              UART16552[ch].TxLast = 0;
   \   0000001A   8304               STD     Z+4, R16
   \   0000001C   8305               STD     Z+5, R16
    690          
    691              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   0000001E   E002               LDI     R16, 2
   \   00000020   81A0               LD      R26, Z
   \   00000022   81B1               LDD     R27, Z+1
   \   00000024   930C               ST      X, R16
    692              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   00000026   81A0               LD      R26, Z
   \   00000028   81B1               LDD     R27, Z+1
   \   0000002A   9611               ADIW    R27:R26, 1
   \   0000002C   930C               ST      X, R16
    693              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   0000002E   81A0               LD      R26, Z
   \   00000030   81B1               LDD     R27, Z+1
   \   00000032   9612               ADIW    R27:R26, 2
   \   00000034   E000               LDI     R16, 0
   \   00000036   930C               ST      X, R16
    694              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   00000038   EF0D               LDI     R16, 253
   \   0000003A   81A0               LD      R26, Z
   \   0000003C   81B1               LDD     R27, Z+1
   \   0000003E   9613               ADIW    R27:R26, 3
   \   00000040   930C               ST      X, R16
    695              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   00000042   81A0               LD      R26, Z
   \   00000044   81B1               LDD     R27, Z+1
   \   00000046   9614               ADIW    R27:R26, 4
   \   00000048   E000               LDI     R16, 0
   \   0000004A   930C               ST      X, R16
    696              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   0000004C   81A0               LD      R26, Z
   \   0000004E   81B1               LDD     R27, Z+1
   \   00000050   9615               ADIW    R27:R26, 5
   \   00000052   930C               ST      X, R16
    697          }
   \   00000054   01D9               MOVW    R27:R26, R19:R18
   \   00000056   9508               RET
    698          
    699          /*************************************************************************
    700          *
    701          * Build  packet tail
    702          *
    703          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    704          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F70               MOV     R23, R16
    705          
    706              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000006   ....               RCALL   Uart_BuildHeader16552
    707          
    708              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9F70               MUL     R23, R16
   \   0000000C   01D0               MOVW    R27:R26, R1:R0
   \   0000000E   ....               SUBI    R26, LOW((-(UART16552) & 0xFFFF))
   \   00000010   ....               SBCI    R27, (-(UART16552) & 0xFFFF) >> 8
   \   00000012   E021               LDI     R18, 1
   \   00000014   910D               LD      R16, X+
   \   00000016   911C               LD      R17, X
   \   00000018   9711               SBIW    R27:R26, 1
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8142               LDD     R20, Z+2
   \   0000001E   8153               LDD     R21, Z+3
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8320               ST      Z, R18
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   8302               STD     Z+2, R16
   \   00000034   8313               STD     Z+3, R17
    709              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   00000036   8100               LD      R16, Z
   \   00000038   8111               LDD     R17, Z+1
   \   0000003A   8122               LDD     R18, Z+2
   \   0000003C   8133               LDD     R19, Z+3
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   0FE2               ADD     R30, R18
   \   00000042   1FF3               ADC     R31, R19
   \   00000044   E000               LDI     R16, 0
   \   00000046   8300               ST      Z, R16
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8102               LDD     R16, Z+2
   \   0000004C   8113               LDD     R17, Z+3
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   8302               STD     Z+2, R16
   \   00000054   8313               STD     Z+3, R17
    710          
    711              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   00000056   91ED               LD      R30, X+
   \   00000058   91FC               LD      R31, X
   \   0000005A   9711               SBIW    R27:R26, 1
   \   0000005C   8314               STD     Z+4, R17
    712              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   0000005E   01FD               MOVW    R31:R30, R27:R26
   \   00000060   8102               LDD     R16, Z+2
   \   00000062   91ED               LD      R30, X+
   \   00000064   91FC               LD      R31, X
   \   00000066   9711               SBIW    R27:R26, 1
   \   00000068   8305               STD     Z+5, R16
    713          
    714          
    715              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   0000006A   01FD               MOVW    R31:R30, R27:R26
   \   0000006C   8122               LDD     R18, Z+2
   \   0000006E   8133               LDD     R19, Z+3
   \   00000070   2F07               MOV     R16, R23
   \   00000072   ....               RCALL   CalcDSTxChecksumUART16552
   \   00000074   2F20               MOV     R18, R16
   \   00000076   910D               LD      R16, X+
   \   00000078   911C               LD      R17, X
   \   0000007A   9711               SBIW    R27:R26, 1
   \   0000007C   01FD               MOVW    R31:R30, R27:R26
   \   0000007E   8142               LDD     R20, Z+2
   \   00000080   8153               LDD     R21, Z+3
   \   00000082   01F8               MOVW    R31:R30, R17:R16
   \   00000084   0FE4               ADD     R30, R20
   \   00000086   1FF5               ADC     R31, R21
   \   00000088   8320               ST      Z, R18
    716              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   0000008A   01FD               MOVW    R31:R30, R27:R26
   \   0000008C   8102               LDD     R16, Z+2
   \   0000008E   8113               LDD     R17, Z+3
   \   00000090   5F0F               SUBI    R16, 255
   \   00000092   4F1F               SBCI    R17, 255
   \   00000094   8302               STD     Z+2, R16
   \   00000096   8313               STD     Z+3, R17
    717                                                                           // to ANSI standard !!!!
    718          
    719              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   00000098   E023               LDI     R18, 3
   \   0000009A   8100               LD      R16, Z
   \   0000009C   8111               LDD     R17, Z+1
   \   0000009E   8142               LDD     R20, Z+2
   \   000000A0   8153               LDD     R21, Z+3
   \   000000A2   01F8               MOVW    R31:R30, R17:R16
   \   000000A4   0FE4               ADD     R30, R20
   \   000000A6   1FF5               ADC     R31, R21
   \   000000A8   8320               ST      Z, R18
   \   000000AA   01FD               MOVW    R31:R30, R27:R26
   \   000000AC   8102               LDD     R16, Z+2
   \   000000AE   8113               LDD     R17, Z+3
   \   000000B0   5F0F               SUBI    R16, 255
   \   000000B2   4F1F               SBCI    R17, 255
   \   000000B4   8302               STD     Z+2, R16
   \   000000B6   8313               STD     Z+3, R17
    720              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   000000B8   8100               LD      R16, Z
   \   000000BA   8111               LDD     R17, Z+1
   \   000000BC   8122               LDD     R18, Z+2
   \   000000BE   8133               LDD     R19, Z+3
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   0FE2               ADD     R30, R18
   \   000000C4   1FF3               ADC     R31, R19
   \   000000C6   E000               LDI     R16, 0
   \   000000C8   8300               ST      Z, R16
   \   000000CA   01FD               MOVW    R31:R30, R27:R26
   \   000000CC   8102               LDD     R16, Z+2
   \   000000CE   8113               LDD     R17, Z+3
   \   000000D0   5F0F               SUBI    R16, 255
   \   000000D2   4F1F               SBCI    R17, 255
   \   000000D4   8302               STD     Z+2, R16
   \   000000D6   8313               STD     Z+3, R17
    721          
    722              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   000000D8   5001               SUBI    R16, 1
   \   000000DA   4010               SBCI    R17, 0
   \   000000DC   8306               STD     Z+6, R16
   \   000000DE   8317               STD     Z+7, R17
    723              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   000000E0   E001               LDI     R16, 1
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   8304               STD     Z+4, R16
   \   000000E6   8315               STD     Z+5, R17
    724              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   000000E8   2F07               MOV     R16, R23
   \   000000EA   ....               RCALL   GoToSyncUART16552
    725              if (ch == 0) {                                           // Turn on TXE for channel
   \   000000EC   2377               TST     R23
   \   000000EE   F4A9               BRNE    ??Uart_BuildTail16552_0
    726                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   000000F0   ....               LDI     R16, LOW(TimerUART0)
   \   000000F2   ....               LDI     R17, (TimerUART0) >> 8
   \   000000F4   ........           CALL    OS_RetriggerTimer
    727                  U0_MCR |= RTS;                                    // set RTS on
   \   000000F8   E0EC               LDI     R30, LOW(8716)
   \   000000FA   E2F2               LDI     R31, (8716) >> 8
   \   000000FC   8100               LD      R16, Z
   \   000000FE   6002               ORI     R16, 0x02
   \   00000100   8300               ST      Z, R16
    728                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000102   E104               LDI     R16, 20
   \   00000104   E010               LDI     R17, 0
   \   00000106   ........           CALL    OS_Delay
    729                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   0000010A   91E0....           LDS     R30, UART16552
   \   0000010E   91F0....           LDS     R31, (UART16552 + 1)
   \   00000112   8100               LD      R16, Z
   \   00000114   93002208           STS     8712, R16
   \   00000118   C016               RJMP    ??Uart_BuildTail16552_1
    730              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   0000011A   3071               CPI     R23, 1
   \   0000011C   F4A1               BRNE    ??Uart_BuildTail16552_1
    731                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   0000011E   ....               LDI     R16, LOW(TimerUART1)
   \   00000120   ....               LDI     R17, (TimerUART1) >> 8
   \   00000122   ........           CALL    OS_RetriggerTimer
    732                  U1_MCR |= RTS;                                      // set RTS on
   \   00000126   E0E4               LDI     R30, LOW(8708)
   \   00000128   E2F2               LDI     R31, (8708) >> 8
   \   0000012A   8100               LD      R16, Z
   \   0000012C   6002               ORI     R16, 0x02
   \   0000012E   8300               ST      Z, R16
    733                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000130   E104               LDI     R16, 20
   \   00000132   E010               LDI     R17, 0
   \   00000134   ........           CALL    OS_Delay
    734                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   00000138   91E0....           LDS     R30, (UART16552 + 26)
   \   0000013C   91F0....           LDS     R31, (UART16552 + 27)
   \   00000140   8100               LD      R16, Z
   \   00000142   93002200           STS     8704, R16
    735              }
    736          }
   \                     ??Uart_BuildTail16552_1:
   \   00000146   91A9               LD      R26, Y+
   \   00000148   91B9               LD      R27, Y+
   \   0000014A   9508               RET
    737          
    738          /*************************************************************************
    739          *
    740          * Build send request for system status on WIS
    741          *
    742          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine4_0:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   8142               LDD     R20, Z+2
   \   00000006   8153               LDD     R21, Z+3
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   0FE4               ADD     R30, R20
   \   0000000C   1FF5               ADC     R31, R21
   \   0000000E   8320               ST      Z, R18
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   5F0F               SUBI    R16, 255
   \   00000018   4F1F               SBCI    R17, 255
   \   0000001A   8302               STD     Z+2, R16
   \   0000001C   8313               STD     Z+3, R17
   \   0000001E   81A0               LD      R26, Z
   \   00000020   81B1               LDD     R27, Z+1
   \   00000022   0FA0               ADD     R26, R16
   \   00000024   1FB1               ADC     R27, R17
   \   00000026   E000               LDI     R16, 0
   \   00000028   930C               ST      X, R16
   \   0000002A   8102               LDD     R16, Z+2
   \   0000002C   8113               LDD     R17, Z+3
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   8302               STD     Z+2, R16
   \   00000034   8313               STD     Z+3, R17
   \   00000036   2FA6               MOV     R26, R22
   \   00000038   2FB3               MOV     R27, R19
   \   0000003A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    743          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    744          
    745              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   E624               LDI     R18, 100
   \   00000012   01F0               MOVW    R31:R30, R1:R0
   \   00000014   ....               RJMP    ?Subroutine5
    746              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    747          
    748          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   ........           JMP     ??Subroutine4_0
    749          
    750          /*************************************************************************
    751          *
    752          * Build send request for WIS protocoler on WIS
    753          *
    754          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   8100               LD      R16, Z
   \   00000002   8111               LDD     R17, Z+1
   \   00000004   8142               LDD     R20, Z+2
   \   00000006   8153               LDD     R21, Z+3
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   0FE4               ADD     R30, R20
   \   0000000C   1FF5               ADC     R31, R21
   \   0000000E   8320               ST      Z, R18
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   5F0F               SUBI    R16, 255
   \   00000018   4F1F               SBCI    R17, 255
   \   0000001A   8302               STD     Z+2, R16
   \   0000001C   8313               STD     Z+3, R17
   \   0000001E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    755          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000000   2F21               MOV     R18, R17
    756          
    757              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R16, LOW(UART16552)
   \   00000008   0E00               ADD     R0, R16
   \   0000000A   ....               LDI     R16, (UART16552) >> 8
   \   0000000C   1E10               ADC     R1, R16
   \   0000000E   E636               LDI     R19, 102
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   8100               LD      R16, Z
   \   00000014   8111               LDD     R17, Z+1
   \   00000016   8142               LDD     R20, Z+2
   \   00000018   8153               LDD     R21, Z+3
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   0FE4               ADD     R30, R20
   \   0000001E   1FF5               ADC     R31, R21
   \   00000020   8330               ST      Z, R19
   \   00000022   01F0               MOVW    R31:R30, R1:R0
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    758              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   00000030   E031               LDI     R19, 1
   \   00000032   8100               LD      R16, Z
   \   00000034   8111               LDD     R17, Z+1
   \   00000036   8142               LDD     R20, Z+2
   \   00000038   8153               LDD     R21, Z+3
   \   0000003A   01F8               MOVW    R31:R30, R17:R16
   \   0000003C   0FE4               ADD     R30, R20
   \   0000003E   1FF5               ADC     R31, R21
   \   00000040   8330               ST      Z, R19
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   8102               LDD     R16, Z+2
   \   00000046   8113               LDD     R17, Z+3
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8302               STD     Z+2, R16
   \   0000004E   8313               STD     Z+3, R17
    759              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   00000050   ....               RJMP    ?Subroutine1
    760          
    761          }
    762          
    763          /*************************************************************************
    764          *
    765          * Build send request for measure data to Water ingress
    766          *
    767          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002   8100               LD      R16, Z
   \   00000004   8111               LDD     R17, Z+1
   \   00000006   8142               LDD     R20, Z+2
   \   00000008   8153               LDD     R21, Z+3
   \   0000000A   01F8               MOVW    R31:R30, R17:R16
   \   0000000C   0FE4               ADD     R30, R20
   \   0000000E   1FF5               ADC     R31, R21
   \   00000010   8320               ST      Z, R18
   \   00000012   01F0               MOVW    R31:R30, R1:R0
   \   00000014   8102               LDD     R16, Z+2
   \   00000016   8113               LDD     R17, Z+3
   \   00000018   5F0F               SUBI    R16, 255
   \   0000001A   4F1F               SBCI    R17, 255
   \   0000001C   8302               STD     Z+2, R16
   \   0000001E   8313               STD     Z+3, R17
   \   00000020   E021               LDI     R18, 1
   \   00000022                      REQUIRE ??Subroutine4_0
   \   00000022                      ;               // Fall through to label ??Subroutine4_0

   \                                 In  segment CODE, align 2, keep-with-next
    768          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    769          
    770              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   E625               LDI     R18, 101
   \   00000012   ........           JMP     ?Subroutine0
    771              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    772              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    773          
    774          }
    775          
    776          
    777          /*************************************************************************
    778          *
    779          * Build send request for GODA measurement
    780          *
    781          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    782          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    783          
    784              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   EA20               LDI     R18, 160
   \   00000012                      REQUIRE ?Subroutine0
   \   00000012                      ;               // Fall through to label ?Subroutine0
    785              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    786              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
    787          
    788          }
    789          
    790          /*************************************************************************
    791          *
    792          * Build send request for GODA device information
    793          *
    794          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    795          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    796          
    797              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   EA21               LDI     R18, 161
   \   00000012   01F0               MOVW    R31:R30, R1:R0
   \   00000014   ....               RJMP    ?Subroutine5
    798              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
    799          }
    800          
    801          /*************************************************************************
    802          *
    803          * Build datablock to AN-SGCNV
    804          *
    805          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    806          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    807          
    808              char i;
    809          
    810              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000000   E043               LDI     R20, 3
   \   00000002   E510               LDI     R17, 80
   \   00000004   9F01               MUL     R16, R17
   \   00000006   01B0               MOVW    R23:R22, R1:R0
   \   00000008   ....               SUBI    R22, LOW((-(TData) & 0xFFFF))
   \   0000000A   ....               SBCI    R23, (-(TData) & 0xFFFF) >> 8
   \   0000000C   019B               MOVW    R19:R18, R23:R22
   \   0000000E   502C               SUBI    R18, 12
   \   00000010   4F3B               SBCI    R19, 251
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   ....               LDI     R16, LOW(UART16552)
   \   00000018   0E00               ADD     R0, R16
   \   0000001A   ....               LDI     R16, (UART16552) >> 8
   \   0000001C   1E10               ADC     R1, R16
   \   0000001E   C017               RJMP    ??Uart_BuildSndData_0
    811                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \                     ??Uart_BuildSndData_1:
   \   00000020   01FB               MOVW    R31:R30, R23:R22
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   50EC               SUBI    R30, 12
   \   00000028   4FFB               SBCI    R31, 251
   \   0000002A   8150               LD      R21, Z
   \   0000002C   01F0               MOVW    R31:R30, R1:R0
   \   0000002E   8100               LD      R16, Z
   \   00000030   8111               LDD     R17, Z+1
   \   00000032   8022               LDD     R2, Z+2
   \   00000034   8033               LDD     R3, Z+3
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   0DE2               ADD     R30, R2
   \   0000003A   1DF3               ADC     R31, R3
   \   0000003C   8350               ST      Z, R21
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   8102               LDD     R16, Z+2
   \   00000042   8113               LDD     R17, Z+3
   \   00000044   5F0F               SUBI    R16, 255
   \   00000046   4F1F               SBCI    R17, 255
   \   00000048   8302               STD     Z+2, R16
   \   0000004A   8313               STD     Z+3, R17
    812              }
   \   0000004C   9543               INC     R20
   \                     ??Uart_BuildSndData_0:
   \   0000004E   E050               LDI     R21, 0
   \   00000050   01F9               MOVW    R31:R30, R19:R18
   \   00000052   8102               LDD     R16, Z+2
   \   00000054   E010               LDI     R17, 0
   \   00000056   5F0D               SUBI    R16, 253
   \   00000058   4F1F               SBCI    R17, 255
   \   0000005A   1740               CP      R20, R16
   \   0000005C   0751               CPC     R21, R17
   \   0000005E   F304               BRLT    ??Uart_BuildSndData_1
    813              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \   00000060   8350               ST      Z, R21
    814          }
   \   00000062   9508               RET
    815          
    816          /*************************************************************************
    817          *
    818          * Build send request for measure data to AN-SGCNV
    819          *
    820          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    821          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    822          
    823              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   E02A               LDI     R18, 10
   \   00000012   ....               RJMP    ?Subroutine0
    824              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    825              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    826          
    827          }
    828          
    829          /*************************************************************************
    830          *
    831          * Build send request for raw data to AN-SGCNV
    832          *
    833          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    834          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    835          
    836              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   E02D               LDI     R18, 13
   \   00000012   ....               RJMP    ?Subroutine0
    837              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    838              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    839          
    840          }
    841          
    842          /*************************************************************************
    843          *
    844          * Build send request for cal data to AN-SGCNV
    845          *
    846          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    847          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    848          
    849              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   E120               LDI     R18, 16
   \   00000012   ....               RJMP    ?Subroutine0
    850              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    851              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    852          
    853          }
    854          
    855          /*************************************************************************
    856          *
    857          * Build send request for system status on AN_SGCNV
    858          *
    859          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    860          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    861          
    862              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   E12B               LDI     R18, 27
   \   00000012   ....               RJMP    ?Subroutine0
    863              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    864              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    865          
    866          }
    867          
    868          /*************************************************************************
    869          *
    870          * Build send request for card config on AN_SGCNV
    871          *
    872          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    873          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    874          
    875              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   E121               LDI     R18, 17
   \   00000012   01F0               MOVW    R31:R30, R1:R0
   \   00000014   ....               RJMP    ?Subroutine5
    876              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    877          
    878          }
    879          
    880          /*************************************************************************
    881          *
    882          * Build send request for EEPROM data on AN_SGCNV
    883          *
    884          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    885          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000000   2F20               MOV     R18, R16
    886          
    887              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000002   E10A               LDI     R16, 26
   \   00000004   9F20               MUL     R18, R16
   \   00000006   ....               LDI     R16, LOW(UART16552)
   \   00000008   0E00               ADD     R0, R16
   \   0000000A   ....               LDI     R16, (UART16552) >> 8
   \   0000000C   1E10               ADC     R1, R16
   \   0000000E   E138               LDI     R19, 24
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   8100               LD      R16, Z
   \   00000014   8111               LDD     R17, Z+1
   \   00000016   8142               LDD     R20, Z+2
   \   00000018   8153               LDD     R21, Z+3
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   0FE4               ADD     R30, R20
   \   0000001E   1FF5               ADC     R31, R21
   \   00000020   8330               ST      Z, R19
   \   00000022   01F0               MOVW    R31:R30, R1:R0
   \   00000024   8102               LDD     R16, Z+2
   \   00000026   8113               LDD     R17, Z+3
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8302               STD     Z+2, R16
   \   0000002E   8313               STD     Z+3, R17
    888              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000030   E031               LDI     R19, 1
   \   00000032   8100               LD      R16, Z
   \   00000034   8111               LDD     R17, Z+1
   \   00000036   8142               LDD     R20, Z+2
   \   00000038   8153               LDD     R21, Z+3
   \   0000003A   01F8               MOVW    R31:R30, R17:R16
   \   0000003C   0FE4               ADD     R30, R20
   \   0000003E   1FF5               ADC     R31, R21
   \   00000040   8330               ST      Z, R19
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   8102               LDD     R16, Z+2
   \   00000046   8113               LDD     R17, Z+3
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8302               STD     Z+2, R16
   \   0000004E   8313               STD     Z+3, R17
    889              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   00000050   2FE2               MOV     R30, R18
   \   00000052   E0F0               LDI     R31, 0
   \   00000054   ....               SUBI    R30, LOW((-(TData + 1528) & 0xFFFF))
   \   00000056   ....               SBCI    R31, HIGH((-(TData + 1528) & 0xFFFF))
   \   00000058   8120               LD      R18, Z
   \   0000005A   01F0               MOVW    R31:R30, R1:R0
   \   0000005C                      REQUIRE ?Subroutine1
   \   0000005C                      ;               // Fall through to label ?Subroutine1
    890          
    891          }
    892          /*************************************************************************
    893          *
    894          *  Receive data on USARTs
    895          *
    896          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    897          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F80               MOV     R24, R16
    898          
    899              switch (UART16552[ch].RxState) {                  // check status
   \   00000008   E10A               LDI     R16, 26
   \   0000000A   9F80               MUL     R24, R16
   \   0000000C   01D0               MOVW    R27:R26, R1:R0
   \   0000000E   ....               SUBI    R26, LOW((-(UART16552) & 0xFFFF))
   \   00000010   ....               SBCI    R27, (-(UART16552) & 0xFFFF) >> 8
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   8902               LDD     R16, Z+18
   \   00000016   2300               TST     R16
   \   00000018   F409               BRNE    $+2+2
   \   0000001A   C05F               RJMP    ??ReceivePacketUart16552_0
   \   0000001C   950A               DEC     R16
   \   0000001E   F031               BREQ    ??ReceivePacketUart16552_1
   \   00000020   950A               DEC     R16
   \   00000022   F149               BREQ    ??ReceivePacketUart16552_2
   \   00000024   5008               SUBI    R16, 8
   \   00000026   F409               BRNE    $+2+2
   \   00000028   C058               RJMP    ??ReceivePacketUart16552_0
   \   0000002A   C054               RJMP    ??ReceivePacketUart16552_3
    900              case SYNC :
    901                  // all functionallity in inerrupt routine
    902                  break;
    903              case HEADER :
    904                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   0000002C   8506               LDD     R16, Z+14
   \   0000002E   8517               LDD     R17, Z+15
   \   00000030   3003               CPI     R16, 3
   \   00000032   4010               SBCI    R17, 0
   \   00000034   F408               BRCC    $+2+2
   \   00000036   C051               RJMP    ??ReceivePacketUart16552_0
    905                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    906                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   00000038   8502               LDD     R16, Z+10
   \   0000003A   85F3               LDD     R31, Z+11
   \   0000003C   2FE0               MOV     R30, R16
   \   0000003E   8132               LDD     R19, Z+2
   \   00000040   8103               LDD     R16, Z+3
   \   00000042   E010               LDI     R17, 0
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8B06               STD     Z+22, R16
   \   00000048   8B37               STD     Z+23, R19
    907                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    908                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   0000004A   2F20               MOV     R18, R16
   \   0000004C   E708               LDI     R16, 120
   \   0000004E   8546               LDD     R20, Z+14
   \   00000050   8557               LDD     R21, Z+15
   \   00000052   1B04               SUB     R16, R20
   \   00000054   0B15               SBC     R17, R21
   \   00000056   1720               CP      R18, R16
   \   00000058   0731               CPC     R19, R17
   \   0000005A   F5E0               BRCC    ??ReceivePacketUart16552_3
   \   0000005C   2F13               MOV     R17, R19
   \   0000005E   3027               CPI     R18, 7
   \   00000060   4010               SBCI    R17, 0
   \   00000062   F1C0               BRCS    ??ReceivePacketUart16552_3
    909                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   00000064   E002               LDI     R16, 2
   \   00000066   8B02               STD     Z+18, R16
    910                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   00000068   8506               LDD     R16, Z+14
   \   0000006A   8517               LDD     R17, Z+15
   \   0000006C   5F0F               SUBI    R16, 255
   \   0000006E   4F1F               SBCI    R17, 255
   \   00000070   8B00               STD     Z+16, R16
   \   00000072   8B11               STD     Z+17, R17
   \   00000074   C032               RJMP    ??ReceivePacketUart16552_0
    911                      } else {
    912                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    913                      }
    914                  }
    915                  break;
    916              case RECEIVE :
    917                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   00000076   8900               LDD     R16, Z+16
   \   00000078   8911               LDD     R17, Z+17
   \   0000007A   5F0F               SUBI    R16, 255
   \   0000007C   4F1F               SBCI    R17, 255
   \   0000007E   8B00               STD     Z+16, R16
   \   00000080   8B11               STD     Z+17, R17
   \   00000082   8926               LDD     R18, Z+22
   \   00000084   8937               LDD     R19, Z+23
   \   00000086   1702               CP      R16, R18
   \   00000088   0713               CPC     R17, R19
   \   0000008A   F138               BRCS    ??ReceivePacketUart16552_0
    918                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   0000008C   8502               LDD     R16, Z+10
   \   0000008E   8513               LDD     R17, Z+11
   \   00000090   0F02               ADD     R16, R18
   \   00000092   1F13               ADC     R17, R19
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   9102               LD      R16, -Z
   \   00000098   3003               CPI     R16, 3
   \   0000009A   F4E1               BRNE    ??ReceivePacketUart16552_3
    919                          if (CalcDSRxChecksum16552(ch)) {
   \   0000009C   2F08               MOV     R16, R24
   \   0000009E   ....               RCALL   CalcDSRxChecksum16552
   \   000000A0   2B01               OR      R16, R17
   \   000000A2   F0C1               BREQ    ??ReceivePacketUart16552_3
    920                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   000000A4   01FD               MOVW    R31:R30, R27:R26
   \   000000A6   8502               LDD     R16, Z+10
   \   000000A8   85F3               LDD     R31, Z+11
   \   000000AA   2FE0               MOV     R30, R16
   \   000000AC   8100               LD      R16, Z
   \   000000AE   3F0D               CPI     R16, 253
   \   000000B0   F489               BRNE    ??ReceivePacketUart16552_3
    921                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   000000B2   E00A               LDI     R16, 10
   \   000000B4   01FD               MOVW    R31:R30, R27:R26
   \   000000B6   8B02               STD     Z+18, R16
    922                                  if (ch == 0) {
   \   000000B8   2388               TST     R24
   \   000000BA   F421               BRNE    ??ReceivePacketUart16552_4
    923                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   000000BC   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000BE   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000C0   E001               LDI     R16, 1
   \   000000C2   C005               RJMP    ??ReceivePacketUart16552_5
    924                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_4:
   \   000000C4   3081               CPI     R24, 1
   \   000000C6   F449               BRNE    ??ReceivePacketUart16552_0
    925                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   000000C8   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000CA   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000CC   E002               LDI     R16, 2
   \                     ??ReceivePacketUart16552_5:
   \   000000CE   ........           CALL    OS_SignalEvent
   \   000000D2   C003               RJMP    ??ReceivePacketUart16552_0
    926                                  }
    927                              } else {
    928                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
    929                              }
    930                          } else {
    931                              GoToSyncUART16552(ch);                                // go to sync modus for recive
    932                          }
    933                      } else {
    934                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    935                      }
    936                  }
    937                  break;
    938              case HANDLE :
    939                  break;
    940              default :
    941                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_3:
   \   000000D4   2F08               MOV     R16, R24
   \   000000D6   ........           CALL    GoToSyncUART16552
    942                  break;
    943              }                                                           // end switch
    944              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_0:
   \   000000DA   01FD               MOVW    R31:R30, R27:R26
   \   000000DC   8506               LDD     R16, Z+14
   \   000000DE   8517               LDD     R17, Z+15
   \   000000E0   5F0F               SUBI    R16, 255
   \   000000E2   4F1F               SBCI    R17, 255
   \   000000E4   8706               STD     Z+14, R16
   \   000000E6   8717               STD     Z+15, R17
   \   000000E8   3708               CPI     R16, 120
   \   000000EA   E020               LDI     R18, 0
   \   000000EC   4010               SBCI    R17, 0
   \   000000EE   F010               BRCS    ??ReceivePacketUart16552_6
    945                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   000000F0   8726               STD     Z+14, R18
   \   000000F2   8727               STD     Z+15, R18
    946              }
    947          }
   \                     ??ReceivePacketUart16552_6:
   \   000000F4   9189               LD      R24, Y+
   \   000000F6   91A9               LD      R26, Y+
   \   000000F8   91B9               LD      R27, Y+
   \   000000FA   9508               RET
    948          
    949          
    950          /*************************************************************************
    951          *
    952          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    953          *
    954          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    955          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F40               MOV     R20, R16
   \   00000006   0189               MOVW    R17:R16, R19:R18
    956          
    957              unsigned short cnt;
    958              unsigned char csum;
    959          
    960              csum = 0;
   \   00000008   E020               LDI     R18, 0
    961              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   3003               CPI     R16, 3
   \   0000000C   4030               SBCI    R19, 0
   \   0000000E   F0B0               BRCS    ??CalcDSTxChecksumUART16552_0
   \   00000010   E13A               LDI     R19, 26
   \   00000012   9F43               MUL     R20, R19
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   81A0               LD      R26, Z
   \   0000001C   81B1               LDD     R27, Z+1
   \   0000001E   9612               ADIW    R27:R26, 2
   \   00000020   5002               SUBI    R16, 2
   \   00000022   4010               SBCI    R17, 0
   \   00000024   ....               LDI     R19, (crc) >> 16
    962                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000026   2FE2               MOV     R30, R18
   \   00000028   912D               LD      R18, X+
   \   0000002A   27E2               EOR     R30, R18
   \   0000002C   E0F0               LDI     R31, 0
   \   0000002E   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000030   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000032   BF3B               OUT     0x3B, R19
   \   00000034   9126               ELPM    R18, Z
    963              }
   \   00000036   5001               SUBI    R16, 1
   \   00000038   4010               SBCI    R17, 0
   \   0000003A   F7A9               BRNE    ??CalcDSTxChecksumUART16552_1
    964              return csum;
   \                     ??CalcDSTxChecksumUART16552_0:
   \   0000003C   2F02               MOV     R16, R18
   \   0000003E   2FA6               MOV     R26, R22
   \   00000040   2FB5               MOV     R27, R21
   \   00000042   9508               RET
    965          }
    966          
    967          /*************************************************************************
    968          *
    969          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    970          *
    971          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    972          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   2F30               MOV     R19, R16
    973          
    974              short cnt;
    975              unsigned char csum;
    976          
    977              csum = 0;
   \   00000004   E020               LDI     R18, 0
    978              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   00000006   E000               LDI     R16, 0
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E14A               LDI     R20, 26
   \   0000000C   9F34               MUL     R19, R20
   \   0000000E   ....               LDI     R19, LOW(UART16552)
   \   00000010   0E03               ADD     R0, R19
   \   00000012   ....               LDI     R19, (UART16552) >> 8
   \   00000014   1E13               ADC     R1, R19
   \   00000016   01F0               MOVW    R31:R30, R1:R0
   \   00000018   85A2               LDD     R26, Z+10
   \   0000001A   85B3               LDD     R27, Z+11
   \   0000001C   8946               LDD     R20, Z+22
   \   0000001E   8957               LDD     R21, Z+23
   \   00000020   5042               SUBI    R20, 2
   \   00000022   4050               SBCI    R21, 0
   \   00000024   ....               LDI     R19, (crc) >> 16
   \   00000026   C00A               RJMP    ??CalcDSRxChecksum16552_0
    979                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum16552_1:
   \   00000028   2FE2               MOV     R30, R18
   \   0000002A   912D               LD      R18, X+
   \   0000002C   27E2               EOR     R30, R18
   \   0000002E   E0F0               LDI     R31, 0
   \   00000030   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000032   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000034   BF3B               OUT     0x3B, R19
   \   00000036   9126               ELPM    R18, Z
    980              }
   \   00000038   5F0F               SUBI    R16, 255
   \   0000003A   4F1F               SBCI    R17, 255
   \                     ??CalcDSRxChecksum16552_0:
   \   0000003C   1704               CP      R16, R20
   \   0000003E   0715               CPC     R17, R21
   \   00000040   F398               BRCS    ??CalcDSRxChecksum16552_1
    981              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \   00000042   01F0               MOVW    R31:R30, R1:R0
   \   00000044   8502               LDD     R16, Z+10
   \   00000046   8513               LDD     R17, Z+11
   \   00000048   8946               LDD     R20, Z+22
   \   0000004A   8957               LDD     R21, Z+23
   \   0000004C   0F04               ADD     R16, R20
   \   0000004E   1F15               ADC     R17, R21
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   9732               SBIW    R31:R30, 2
   \   00000054   8100               LD      R16, Z
   \   00000056   1720               CP      R18, R16
   \   00000058   F411               BRNE    ??CalcDSRxChecksum16552_2
    982                  return true;
   \   0000005A   E001               LDI     R16, 1
   \   0000005C   C001               RJMP    ??CalcDSRxChecksum16552_3
    983              } else {
    984                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   0000005E   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   00000060   E010               LDI     R17, 0
   \   00000062   01DB               MOVW    R27:R26, R23:R22
   \   00000064   9508               RET
    985              }
    986          }
    987          
    988          /*************************************************************************
    989          *
    990          * Goes to sync mode
    991          *
    992          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    993          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    994          
    995              if (ch < 2) {
   \   00000000   3002               CPI     R16, 2
   \   00000002   F470               BRCC    ??GoToSyncUART16552_0
    996                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R16, LOW(UART16552)
   \   0000000A   0E00               ADD     R0, R16
   \   0000000C   ....               LDI     R16, (UART16552) >> 8
   \   0000000E   1E10               ADC     R1, R16
   \   00000010   01F0               MOVW    R31:R30, R1:R0
   \   00000012   E000               LDI     R16, 0
   \   00000014   8B03               STD     Z+19, R16
    997                  UART16552[ch].RxState = SYNC;
   \   00000016   8B02               STD     Z+18, R16
    998                  UART16552[ch].RxFirst = 0;
   \   00000018   8704               STD     Z+12, R16
   \   0000001A   8705               STD     Z+13, R16
    999                  UART16552[ch].RxPacklen = 0;
   \   0000001C   8B06               STD     Z+22, R16
   \   0000001E   8B07               STD     Z+23, R16
   1000              }
   1001          }
   \                     ??GoToSyncUART16552_0:
   \   00000020   9508               RET
   1002          
   1003          /*************************************************************************
   1004          *
   1005          *  Empty rx buffer on PC16552 UART
   1006          *
   1007          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1008          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
   1009          
   1010              switch (uartno) {
   \   00000000   2300               TST     R16
   \   00000002   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000004   950A               DEC     R16
   \   00000006   F049               BREQ    ??EmptyRxBuf16552_1
   \   00000008   9508               RET
   \                     ??EmptyRxBuf16552_0:
   \   0000000A   E0ED               LDI     R30, LOW(8717)
   \   0000000C   E2F2               LDI     R31, (8717) >> 8
   1011              case 0:
   1012                  do {
   1013                      U0_RBR;
   \                     ??EmptyRxBuf16552_2:
   \   0000000E   91002208           LDS     R16, 8712
   1014                  } while (U0_LSR & DATA_READY);
   \   00000012   8100               LD      R16, Z
   \   00000014   FD00               SBRC    R16, 0
   \   00000016   CFFB               RJMP    ??EmptyRxBuf16552_2
   1015                  break;
   1016              case 1:
   1017                  do {
   1018                      U1_RBR;
   1019                  } while (U1_LSR & DATA_READY);
   1020                  break;
   1021              }
   1022          }
   \   00000018   9508               RET
   \                     ??EmptyRxBuf16552_1:
   \   0000001A   E0E5               LDI     R30, LOW(8709)
   \   0000001C   E2F2               LDI     R31, (8709) >> 8
   \                     ??EmptyRxBuf16552_3:
   \   0000001E   91002200           LDS     R16, 8704
   \   00000022   8100               LD      R16, Z
   \   00000024   FD00               SBRC    R16, 0
   \   00000026   CFFB               RJMP    ??EmptyRxBuf16552_3
   \   00000028   9508               RET
   1023          
   1024          /*************************************************************************
   1025          *
   1026          *  Init the PC16552 UART
   1027          *
   1028          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1029          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
   1030          
   1031              /*--- Configure UART data block ---*/
   1032              UART16552[channel].TxFirst = 0x00;
   \   00000000   E11A               LDI     R17, 26
   \   00000002   9F01               MUL     R16, R17
   \   00000004   ....               LDI     R17, LOW(UART16552)
   \   00000006   0E01               ADD     R0, R17
   \   00000008   ....               LDI     R17, (UART16552) >> 8
   \   0000000A   1E11               ADC     R1, R17
   \   0000000C   01F0               MOVW    R31:R30, R1:R0
   \   0000000E   E010               LDI     R17, 0
   \   00000010   8312               STD     Z+2, R17
   \   00000012   8313               STD     Z+3, R17
   1033              UART16552[channel].TxLast = 0x00;
   \   00000014   8314               STD     Z+4, R17
   \   00000016   8315               STD     Z+5, R17
   1034              UART16552[channel].TxCount = 0x00;
   \   00000018   8316               STD     Z+6, R17
   \   0000001A   8317               STD     Z+7, R17
   1035              UART16552[channel].RxFirst = 0x00;
   \   0000001C   8714               STD     Z+12, R17
   \   0000001E   8715               STD     Z+13, R17
   1036              UART16552[channel].RxLast = 0x00;
   \   00000020   8716               STD     Z+14, R17
   \   00000022   8717               STD     Z+15, R17
   1037              UART16552[channel].RxCount = 0x00;
   \   00000024   8B10               STD     Z+16, R17
   \   00000026   8B11               STD     Z+17, R17
   1038              UART16552[channel].RxState = SYNC;
   \   00000028   8B12               STD     Z+18, R17
   1039              UART16552[channel].SyncCnt = 0;
   \   0000002A   8B13               STD     Z+19, R17
   1040              UART16552[channel].TxStatus = 0x00;
   \   0000002C   8710               STD     Z+8, R17
   1041          
   1042              switch (channel) {
   \   0000002E   2300               TST     R16
   \   00000030   F019               BREQ    ??Init16552_0
   \   00000032   950A               DEC     R16
   \   00000034   F151               BREQ    ??Init16552_1
   \   00000036   9508               RET
   1043              case 0x00 :
   1044                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   00000038   ....               LDI     R30, LOW(UART16552)
   \   0000003A   ....               LDI     R31, (UART16552) >> 8
   \   0000003C   EF0A               LDI     R16, 250
   \   0000003E   8B04               STD     Z+20, R16
   \   00000040   8B15               STD     Z+21, R17
   1045                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   00000042   ....               LDI     R16, LOW(TxBuf16552Ch0)
   \   00000044   ....               LDI     R17, (TxBuf16552Ch0) >> 8
   \   00000046   8300               ST      Z, R16
   \   00000048   8311               STD     Z+1, R17
   1046                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   0000004A   ....               LDI     R16, LOW(RxBuf16552Ch0)
   \   0000004C   ....               LDI     R17, (RxBuf16552Ch0) >> 8
   \   0000004E   8702               STD     Z+10, R16
   \   00000050   8713               STD     Z+11, R17
   1047                  U0_LCR = 0x80;          // set DLAB
   \   00000052   E800               LDI     R16, 128
   \   00000054   9300220B           STS     8715, R16
   1048                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   00000058   E408               LDI     R16, 72
   \   0000005A   EE18               LDI     R17, 232
   \   0000005C   E021               LDI     R18, 1
   \   0000005E   E030               LDI     R19, 0
   \   00000060   ........           CALL    ?UL_DIVMOD_S_L03
   \   00000064   93002208           STS     8712, R16
   1049                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   00000068   93102209           STS     8713, R17
   1050                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   0000006C   E003               LDI     R16, 3
   \   0000006E   9300220B           STS     8715, R16
   1051                  U0_FCR = 0x01;          // enable FIFO ..
   \   00000072   E001               LDI     R16, 1
   \   00000074   9300220A           STS     8714, R16
   1052                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   00000078   EC01               LDI     R16, 193
   \   0000007A   9300220A           STS     8714, R16
   1053                  U0_IER = 0x03;          // enable TX and RX int.
   \   0000007E   E003               LDI     R16, 3
   \   00000080   93002209           STS     8713, R16
   1054                  U0_MCR = 0x00;          // RTS off
   \   00000084   9230220C           STS     8716, R3
   1055                  break;
   \   00000088   9508               RET
   1056              case 0x01 :
   1057                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   0000008A   ....               LDI     R30, LOW(UART16552)
   \   0000008C   ....               LDI     R31, (UART16552) >> 8
   \   0000008E   EF0A               LDI     R16, 250
   \   00000090   A706               STD     Z+46, R16
   \   00000092   A717               STD     Z+47, R17
   1058                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   00000094   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   00000096   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   00000098   8F02               STD     Z+26, R16
   \   0000009A   8F13               STD     Z+27, R17
   1059                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   0000009C   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   0000009E   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   000000A0   A304               STD     Z+36, R16
   \   000000A2   A315               STD     Z+37, R17
   1060                  U1_LCR = 0x80;          // set DLAB
   \   000000A4   E800               LDI     R16, 128
   \   000000A6   93002203           STS     8707, R16
   1061                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000000AA   E408               LDI     R16, 72
   \   000000AC   EE18               LDI     R17, 232
   \   000000AE   E021               LDI     R18, 1
   \   000000B0   E030               LDI     R19, 0
   \   000000B2   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000B6   93002200           STS     8704, R16
   1062                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000BA   93102201           STS     8705, R17
   1063                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000BE   E003               LDI     R16, 3
   \   000000C0   93002203           STS     8707, R16
   1064                  U1_FCR = 0x01;          // enable FIFO ..
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   93002202           STS     8706, R16
   1065                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000000CA   EC01               LDI     R16, 193
   \   000000CC   93002202           STS     8706, R16
   1066                  U1_IER = 0x03;          // enable TX and RX int.
   \   000000D0   E003               LDI     R16, 3
   \   000000D2   93002201           STS     8705, R16
   1067                  U1_MCR = 0x00;          // RTS off
   \   000000D6   92302204           STS     8708, R3
   1068                  break;
   1069              default:
   1070                  break;
   1071              }
   1072          }
   \   000000DA   9508               RET
   1073          
   1074          #if USE_MODBUS_PROTOCOL == 1
   1075          static unsigned short  Rsp_Delay[2];       // response delay
   1076          
   1077          static void
   1078          load_eeprom_misc_485(void)
   1079          {
   1080            char ch;
   1081            uint16_t temp;
   1082          
   1083            for (ch = 0; ch < 2; ch++)
   1084            {
   1085              ReadEEPROMBuffer(EEPROM_PORTSETUP + 3 + ch * 2, sizeof(uint16_t), (char*)&temp);
   1086          
   1087              if (temp > 0 && temp <= 5000)
   1088              {
   1089                Rsp_Delay[ch] = temp;
   1090              }
   1091              else
   1092              {
   1093                Rsp_Delay[ch] = 0;
   1094              }
   1095            }
   1096          }
   1097          
   1098          static void
   1099          __rs485_task_set_power(uint8_t ch, uint8_t on)
   1100          {
   1101            uint8_t current;
   1102          
   1103            current = (TData.RS4.PortUsed >> ch) & 0x01;
   1104          
   1105            if(current == on)
   1106            {
   1107              // no need to waste time
   1108              return;
   1109            }
   1110          
   1111            if(on)
   1112            {
   1113              TData.RS4.PortUsed |= (1 << ch);
   1114            }
   1115            else
   1116            {
   1117              TData.RS4.PortUsed &= ~(1 << ch);
   1118            }
   1119            PORTC = TData.RS4.PortUsed;
   1120          
   1121            WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);
   1122          }
   1123          
   1124          void
   1125          rs485_task_set_power(uint8_t ch, uint8_t on)
   1126          {
   1127            OS_Use(&UARTSEND); 
   1128            __rs485_task_set_power(ch, on);
   1129            OS_Unuse(&UARTSEND); 
   1130          }
   1131          
   1132          uint8_t
   1133          rs485_task_get_power(uint8_t ch)
   1134          {
   1135            uint8_t status;
   1136          
   1137            OS_Use(&UARTSEND); 
   1138            status = (TData.RS4.PortUsed >> ch) & 0x01;
   1139            OS_Unuse(&UARTSEND); 
   1140          
   1141            return status;
   1142          }
   1143          
   1144          uint8_t
   1145          rs485_task_get_sensor_type(uint8_t ch)
   1146          {
   1147            uint8_t sensor_type;
   1148          
   1149            OS_Use(&UARTSEND); 
   1150            sensor_type = (TData.RS4.SensorType[ch / 4] >> (2 * (ch % 4))) & 0x03;
   1151            OS_Unuse(&UARTSEND); 
   1152          
   1153            return sensor_type;
   1154          }
   1155          
   1156          void
   1157          rs485_task_set_sensor_type(uint8_t ch, uint8_t sensor_type)
   1158          {
   1159            OS_Use(&UARTSEND); 
   1160          
   1161            // clear first
   1162            TData.RS4.SensorType[ch / 4] &= ~(0x03 << ((ch % 4)*2));
   1163          
   1164            // set
   1165            TData.RS4.SensorType[ch / 4] |= ((sensor_type & 0x03)<< ((ch % 4)*2));
   1166          
   1167            WriteEEPROMByte(EEPROM_PORTSETUP + 1, TData.RS4.SensorType[0]);
   1168            WriteEEPROMByte(EEPROM_PORTSETUP + 2, TData.RS4.SensorType[1]);
   1169          
   1170            OS_Unuse(&UARTSEND); 
   1171          }
   1172          
   1173          static void
   1174          __rs485_task_set_rsp_delay(uint8_t port, uint16_t delay)
   1175          {
   1176            uint16_t cur_delay = Rsp_Delay[port];
   1177          
   1178            if(cur_delay == delay)
   1179            {
   1180              return;
   1181            }
   1182          
   1183            if (delay > 5000)
   1184            {
   1185              return;
   1186            }
   1187          
   1188            Rsp_Delay[port] = delay;
   1189          
   1190            WriteEEPROMBufferSync(EEPROM_PORTSETUP + 3 + port * 2, sizeof(uint16_t), (char*)&delay);
   1191          }
   1192          
   1193          void
   1194          rs485_task_set_rsp_delay(uint8_t port, uint16_t delay)
   1195          {
   1196            OS_Use(&UARTSEND); 
   1197            __rs485_task_set_rsp_delay(port, delay);
   1198            OS_Unuse(&UARTSEND); 
   1199          }
   1200          
   1201          uint16_t
   1202          rs485_task_get_rsp_delay(uint8_t port)
   1203          {
   1204            uint16_t    ret;
   1205          
   1206            OS_Use(&UARTSEND); 
   1207            ret = Rsp_Delay[port];
   1208            OS_Unuse(&UARTSEND); 
   1209          
   1210            return ret;
   1211          }
   1212          
   1213          uint8_t
   1214          rs485_task_get_comm_status(uint8_t port)
   1215          {
   1216            uint16_t    ret;
   1217          
   1218            // XXX no need for lock
   1219            ret = (TData.RS4.IOUnitStatus[port] & COMFAIL_BIT) ? 0 : 1;
   1220          
   1221            return ret;
   1222          }
   1223          
   1224          uint8_t
   1225          rs485_task_get_channel_status(uint8_t port, uint8_t ch)
   1226          {
   1227            uint8_t ret;
   1228          
   1229            OS_Use(&UARTSEND); 
   1230            ret = (uint8_t)TData.RS4.TargetSetup1[port][ch];
   1231            OS_Unuse(&UARTSEND);
   1232          
   1233            return ret;
   1234          }
   1235          
   1236          int16_t
   1237          rs485_task_get_channel_value(uint8_t port, uint8_t ch)
   1238          {
   1239            float f;
   1240            int16_t  ret;
   1241          
   1242            OS_Use(&UARTSEND); 
   1243            f = TData.RS4.Result[port][ch];
   1244            OS_Unuse(&UARTSEND);
   1245          
   1246            ret = (int16_t)(f * 100);
   1247            return ret;
   1248          }
   1249          
   1250          int16_t
   1251          rs485_task_get_channel_raw_value(uint8_t port, uint8_t ch)
   1252          {
   1253            int16_t ret;
   1254          
   1255            OS_Use(&UARTSEND); 
   1256            ret = TData.RS4.Raw[port][ch];
   1257            OS_Unuse(&UARTSEND);
   1258          
   1259            return ret;
   1260          }
   1261          
   1262          int16_t
   1263          rs485_task_get_channel_cal_value(uint8_t port, uint8_t ch)
   1264          {
   1265            int16_t ret;
   1266          
   1267            OS_Use(&UARTSEND); 
   1268            ret = TData.RS4.Cal[port][ch];
   1269            OS_Unuse(&UARTSEND);
   1270          
   1271            return ret;
   1272          }
   1273          #endif /* USE_MODBUS_PROTOCOL == 1 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   CalcDSRxChecksum16552
      0      2   CalcDSTxChecksumUART16552
      1      2   CheckActionUart16552
        1      2   -> ReceiveCData
        1      2   -> ReceiveCardEEPROMData
        1      2   -> ReceiveCardStatus
        1      2   -> ReceiveConfigData
        1      2   -> ReceivePTOData
        1      2   -> ReceiveRData
        1      2   -> ReceiveRadarData
        1      2   -> ReceiveRadarInfo
        1      2   -> ReceiveWHData
        1      2   -> ReceiveWISData
        1      2   -> ReceiveWISStatus
        1      2   -> ReceiveWISXData
      0      2   EmptyRxBuf16552
     16      2   ExtRS485Ctl
       16      2   -> OS_Delay
       16      2   -> OS_WaitEventTimed
       16      2   -> ReadEEPROMByte
       16      2   -> Uart_BuildReqC16552
       16      2   -> Uart_BuildReqCardStatus
       16      2   -> Uart_BuildReqEEPROMData
       16      2   -> Uart_BuildReqM16552
       16      2   -> Uart_BuildReqR16552
       16      2   -> Uart_BuildReqRadarData
       16      2   -> Uart_BuildReqWISXData
       16      2   -> Uart_BuildTail16552
       16      2 ?SS_SHR_L02
       16      2 ?S_SHL_L02
      7      2   ExtRS485Rec
        7      2   -> OS_Delay
        7      2   -> OS_SignalEvent
        7      2   -> OS_WaitEventTimed
        7      2   -> Usart16552CheckPackage
        7      2 ?SS_SHR_L02
        7      2 ?S_SHL_L02
      0      2   GoToSyncUART16552
      0      2   Init16552
        0      2 ?UL_DIVMOD_S_L03
      6      2   ReceiveCData
      0      2   ReceiveCardEEPROMData
      0      2   ReceiveCardStatus
      0      2   ReceiveConfigData
      8      2   ReceivePTOData
        8      2   -> OS_Unuse
        8      2   -> OS_Use
      3      2   ReceivePacketUart16552
        3      2   -> CalcDSRxChecksum16552
        3      2   -> GoToSyncUART16552
        3      2   -> OS_SignalEvent
      6      2   ReceiveRData
      2      2   ReceiveRadarData
      0      2   ReceiveRadarInfo
      3      2   ReceiveWHData
        3      2   -> OS_Unuse
        3      2   -> OS_Use
        3      2 ?S_SHL_L02
      6      2   ReceiveWISData
        6      2 ?F_DIV_S_L04
        6      2 ?SL2F_S_L04
        6      2 ?UL2F_S_L04
      0      2   ReceiveWISStatus
      0      2   ReceiveWISXData
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
      0      2   Uart_BuildReqC16552
      0      2   Uart_BuildReqCardStatus
      0      2   Uart_BuildReqConfig
      0      2   Uart_BuildReqEEPROMData
      0      2   Uart_BuildReqM16552
      0      2   Uart_BuildReqR16552
      0      2   Uart_BuildReqRadarData
      0      2   Uart_BuildReqRadarInfo
      0      2   Uart_BuildReqWISCardStatus
      0      2   Uart_BuildReqWISData
      0      2   Uart_BuildReqWISXData
      0      2   Uart_BuildSndData
      2      2   Uart_BuildTail16552
        2      2   -> CalcDSTxChecksumUART16552
        2      2   -> GoToSyncUART16552
        2      2   -> OS_Delay
        2      2   -> OS_RetriggerTimer
        2      2   -> Uart_BuildHeader16552
      7      2   Usart16552CheckPackage
        7      2   -> CheckActionUart16552
        7      2   -> GoToSyncUART16552


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      60  ??Subroutine4_0
      34  ?Subroutine0
      32  ?Subroutine1
      14  ?Subroutine2
      10  ?Subroutine3
       4  ?Subroutine5
     102  CalcDSRxChecksum16552
      68  CalcDSTxChecksumUART16552
     200  CheckActionUart16552
      42  EmptyRxBuf16552
   1'846  ExtRS485Ctl
     458  ExtRS485Rec
      34  GoToSyncUART16552
     220  Init16552
     164  ReceiveCData
      80  ReceiveCardEEPROMData
      66  ReceiveCardStatus
     126  ReceiveConfigData
     240  ReceivePTOData
     252  ReceivePacketUart16552
     166  ReceiveRData
     188  ReceiveRadarData
      54  ReceiveRadarInfo
     250  ReceiveWHData
     226  ReceiveWISData
     104  ReceiveWISStatus
      98  ReceiveWISXData
       8  SetRS4Port
       2  TimoutUART0
       4  TimoutUART1
      88  Uart_BuildHeader16552
      20  Uart_BuildReqC16552
      20  Uart_BuildReqCardStatus
      22  Uart_BuildReqConfig
      92  Uart_BuildReqEEPROMData
      20  Uart_BuildReqM16552
      20  Uart_BuildReqR16552
      18  Uart_BuildReqRadarData
      22  Uart_BuildReqRadarInfo
      22  Uart_BuildReqWISCardStatus
      22  Uart_BuildReqWISData
      82  Uart_BuildReqWISXData
     100  Uart_BuildSndData
     332  Uart_BuildTail16552
     118  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 6'150 bytes in segment CODE
 
 6'150 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
