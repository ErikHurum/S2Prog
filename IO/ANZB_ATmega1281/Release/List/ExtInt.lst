###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       10/May/2023  12:10:42
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  D:\S2Prog\IO\ANZB_ATmega1281\Src\ExtInt.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWA814.tmp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\ExtInt.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj -D OS_LIBMODE_R -D OS_UART=-1
#        -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0
#        -lCN D:\S2Prog\IO\ANZB_ATmega1281\Release\List -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\ --eeprom_size 4096
#        --clib -Oh)
#    Locale       =  English_USA.1252
#    List file    =  D:\S2Prog\IO\ANZB_ATmega1281\Release\List\ExtInt.lst
#    Object file  =  D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\ExtInt.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\ExtInt.c
      1          /****************************************************************************************
      2          / AD converter handling , AD7715
      3          /
      4          ***************************************************************************************/
      5          
      6          #include "iom1281.h" 
      7          #include "stdio.h"
      8          #include "math.h"
      9          #include "externals.h"
     10          
     11          #if USE_16552_DRIVER_TASK == 1

   \                                 In  segment CODE, align 2, keep-with-next
     12          static void
     13          _16552_0_irq_handler(void)
   \                     _16552_0_irq_handler:
     14          {
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006                      REQUIRE ?Register_R4_is_cg_reg
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
     15            UART16552[0].TxStatus = (U0_IIR & 0x0f);          // reason for interrupt
   \   00000006   9100220A           LDS     R16, 8714
   \   0000000A   700F               ANDI    R16, 0x0F
   \   0000000C   9300....           STS     (UART16552 + 8), R16
   \   00000010   EFAA               LDI     R26, 250
   \   00000012   E0B0               LDI     R27, 0
   \   00000014   2444               CLR     R4
   \   00000016   9443               INC     R4
     16            do {
     17              switch (UART16552[0].TxStatus) {
   \                     ??_16552_0_irq_handler_0:
   \   00000018   9100....           LDS     R16, (UART16552 + 8)
   \   0000001C   2300               TST     R16
   \   0000001E   F409               BRNE    $+2+2
   \   00000020   C0AC               RJMP    ??_16552_0_irq_handler_1
   \   00000022   5002               SUBI    R16, 2
   \   00000024   F051               BREQ    ??_16552_0_irq_handler_2
   \   00000026   5002               SUBI    R16, 2
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C053               RJMP    ??_16552_0_irq_handler_3
   \   0000002C   5002               SUBI    R16, 2
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C0A1               RJMP    ??_16552_0_irq_handler_4
   \   00000032   5006               SUBI    R16, 6
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C04D               RJMP    ??_16552_0_irq_handler_3
   \   00000038   C0A2               RJMP    ??_16552_0_irq_handler_5
     18              case 0x02 :             // transmit holding reg emty
     19                if (UART16552[0].TxCount == 0) {
   \                     ??_16552_0_irq_handler_2:
   \   0000003A   9100....           LDS     R16, (UART16552 + 6)
   \   0000003E   9110....           LDS     R17, (UART16552 + 7)
   \   00000042   2B01               OR      R16, R17
   \   00000044   F451               BRNE    ??_16552_0_irq_handler_6
     20                  U0_MCR &= ~RTS;        // set RTS off
   \   00000046   9100220C           LDS     R16, 8716
   \   0000004A   7F0D               ANDI    R16, 0xFD
   \   0000004C   9300220C           STS     8716, R16
     21                  OS_StopTimer(&TimerUART0);                    // and stop timer
   \   00000050   ....               LDI     R16, LOW(TimerUART0)
   \   00000052   ....               LDI     R17, (TimerUART0) >> 8
   \   00000054   ........           CALL    OS_StopTimer
   \   00000058   C092               RJMP    ??_16552_0_irq_handler_5
     22                } else {
     23                  for (UART16552[0].TxSeqCnt = 0;( UART16552[0].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[0].TxCount > 0 ); UART16552[0].TxSeqCnt++, --UART16552[0].TxCount) {
   \                     ??_16552_0_irq_handler_6:
   \   0000005A   93B0....           STS     (UART16552 + 9), R27
   \                     ??_16552_0_irq_handler_7:
   \   0000005E   9100....           LDS     R16, (UART16552 + 6)
   \   00000062   9110....           LDS     R17, (UART16552 + 7)
   \   00000066   2B01               OR      R16, R17
   \   00000068   F409               BRNE    $+2+2
   \   0000006A   C089               RJMP    ??_16552_0_irq_handler_5
     24                    U0_THR = UART16552[0].pTxBuffer[UART16552[0].TxLast++];
   \   0000006C   9100....           LDS     R16, (UART16552 + 4)
   \   00000070   9110....           LDS     R17, (UART16552 + 5)
   \   00000074   91E0....           LDS     R30, UART16552
   \   00000078   91F0....           LDS     R31, (UART16552 + 1)
   \   0000007C   0FE0               ADD     R30, R16
   \   0000007E   1FF1               ADC     R31, R17
   \   00000080   8100               LD      R16, Z
   \   00000082   93002208           STS     8712, R16
   \   00000086   9100....           LDS     R16, (UART16552 + 4)
   \   0000008A   9110....           LDS     R17, (UART16552 + 5)
   \   0000008E   5F0F               SUBI    R16, 255
   \   00000090   4F1F               SBCI    R17, 255
   \   00000092   9300....           STS     (UART16552 + 4), R16
   \   00000096   9310....           STS     (UART16552 + 5), R17
     25                  }
   \   0000009A   9100....           LDS     R16, (UART16552 + 9)
   \   0000009E   9503               INC     R16
   \   000000A0   9300....           STS     (UART16552 + 9), R16
   \   000000A4   9100....           LDS     R16, (UART16552 + 6)
   \   000000A8   9110....           LDS     R17, (UART16552 + 7)
   \   000000AC   5001               SUBI    R16, 1
   \   000000AE   4010               SBCI    R17, 0
   \   000000B0   9300....           STS     (UART16552 + 6), R16
   \   000000B4   9310....           STS     (UART16552 + 7), R17
   \   000000B8   9100....           LDS     R16, (UART16552 + 9)
   \   000000BC   3100               CPI     R16, 16
   \   000000BE   F008               BRCS    $+2+2
   \   000000C0   C05E               RJMP    ??_16552_0_irq_handler_5
   \   000000C2   CFCD               RJMP    ??_16552_0_irq_handler_7
     26                }
     27                break;
     28              case 0x04 :             // Receive data available    
     29              case 0x0C :             // or caracter timeout (FIFO)
     30                while (U0_LSR & DATA_READY) {
     31          
     32                  UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] = U0_RBR;             // Read the character 
     33          
     34                  if (UART16552[0].RxState != HANDLE) {                 // ok to receive? 
     35                    switch (UART16552[0].RxState) {                   // Yes, check state
     36                      case SYNC :
     37                        if ( UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] == ANPRO1_SYN) {
     38                          UART16552[0].SyncCnt ++ ;                 // count sync
   \                     ??_16552_0_irq_handler_8:
   \   000000C4   9503               INC     R16
   \   000000C6   9300....           STS     (UART16552 + 19), R16
     39                          UART16552[0].RxFirst = 0;                 // start at start of buff
   \   000000CA   93B0....           STS     (UART16552 + 12), R27
   \   000000CE   93B0....           STS     (UART16552 + 13), R27
     40                        } else if (UART16552[0].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??_16552_0_irq_handler_3:
   \   000000D2   9100220D           LDS     R16, 8717
   \   000000D6   FF00               SBRS    R16, 0
   \   000000D8   C052               RJMP    ??_16552_0_irq_handler_5
   \   000000DA   91002208           LDS     R16, 8712
   \   000000DE   91E0....           LDS     R30, (UART16552 + 10)
   \   000000E2   91F0....           LDS     R31, (UART16552 + 11)
   \   000000E6   9120....           LDS     R18, (UART16552 + 12)
   \   000000EA   9130....           LDS     R19, (UART16552 + 13)
   \   000000EE   0FE2               ADD     R30, R18
   \   000000F0   1FF3               ADC     R31, R19
   \   000000F2   8300               ST      Z, R16
   \   000000F4   9100....           LDS     R16, (UART16552 + 18)
   \   000000F8   300A               CPI     R16, 10
   \   000000FA   F359               BREQ    ??_16552_0_irq_handler_3
   \   000000FC   2300               TST     R16
   \   000000FE   F549               BRNE    ??_16552_0_irq_handler_9
   \   00000100   91E0....           LDS     R30, (UART16552 + 10)
   \   00000104   91F0....           LDS     R31, (UART16552 + 11)
   \   00000108   9100....           LDS     R16, (UART16552 + 12)
   \   0000010C   9110....           LDS     R17, (UART16552 + 13)
   \   00000110   0FE0               ADD     R30, R16
   \   00000112   1FF1               ADC     R31, R17
   \   00000114   8100               LD      R16, Z
   \   00000116   3002               CPI     R16, 2
   \   00000118   9100....           LDS     R16, (UART16552 + 19)
   \   0000011C   F299               BREQ    ??_16552_0_irq_handler_8
   \   0000011E   3002               CPI     R16, 2
   \   00000120   93B0....           STS     (UART16552 + 19), R27
   \   00000124   F2B0               BRCS    ??_16552_0_irq_handler_3
     41                          UART16552[0].SyncCnt = 0 ;                // reset counter
     42                          UART16552[0].RxState = HEADER ;
   \   00000126   9240....           STS     (UART16552 + 18), R4
     43                          UART16552[0].RxLast = 0 ;
   \   0000012A   93B0....           STS     (UART16552 + 14), R27
   \   0000012E   93B0....           STS     (UART16552 + 15), R27
     44                          UART16552[0].RxTimeout = RX_TO_TIME ;   // reset timeout
   \   00000132   93A0....           STS     (UART16552 + 20), R26
   \   00000136   93B0....           STS     (UART16552 + 21), R27
     45                          UART16552[0].RxFirst++ ;                 //  1. char OK, start on next
   \   0000013A   9100....           LDS     R16, (UART16552 + 12)
   \   0000013E   5F0F               SUBI    R16, 255
   \   00000140   4F1F               SBCI    R17, 255
   \   00000142   9300....           STS     (UART16552 + 12), R16
   \   00000146   9310....           STS     (UART16552 + 13), R17
     46                          ReceivePacketUart16552(0) ;              // Check package
   \   0000014A   E000               LDI     R16, 0
   \                     ??_16552_0_irq_handler_10:
   \   0000014C   ........           CALL    ReceivePacketUart16552
   \   00000150   CFC0               RJMP    ??_16552_0_irq_handler_3
     47                        } else {
     48                          UART16552[0].SyncCnt = 0 ;                // start over once more
     49                        }
     50                        break;
     51                      default :
     52                        if ((++UART16552[0].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??_16552_0_irq_handler_9:
   \   00000152   9100....           LDS     R16, (UART16552 + 12)
   \   00000156   9110....           LDS     R17, (UART16552 + 13)
   \   0000015A   5F0F               SUBI    R16, 255
   \   0000015C   4F1F               SBCI    R17, 255
   \   0000015E   9300....           STS     (UART16552 + 12), R16
   \   00000162   9310....           STS     (UART16552 + 13), R17
   \   00000166   3709               CPI     R16, 121
   \   00000168   4010               SBCI    R17, 0
   \   0000016A   E000               LDI     R16, 0
   \   0000016C   F378               BRCS    ??_16552_0_irq_handler_10
     53                          GoToSyncUART16552(0) ;                       // go to sync mode
   \   0000016E   ........           CALL    GoToSyncUART16552
   \   00000172   CFAF               RJMP    ??_16552_0_irq_handler_3
     54                        } else {
     55                          ReceivePacketUart16552(0) ;              // Check package
     56                        }
     57                        break ;   
     58                    }
     59                  }
     60                } 
     61                break;
     62              case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
     63                U0_LSR;      // Dummy read to empty register        
   \                     ??_16552_0_irq_handler_4:
   \   00000174   9100220D           LDS     R16, 8717
     64                break;
   \   00000178   C002               RJMP    ??_16552_0_irq_handler_5
     65              case 0x00 :                 // Modem status.
     66                U0_MSR;      // Dummy read to empty register           
   \                     ??_16552_0_irq_handler_1:
   \   0000017A   9100220E           LDS     R16, 8718
     67                break;
     68              }
     69              UART16552[0].TxStatus = (U0_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??_16552_0_irq_handler_5:
   \   0000017E   9100220A           LDS     R16, 8714
   \   00000182   700F               ANDI    R16, 0x0F
   \   00000184   9300....           STS     (UART16552 + 8), R16
     70              // check again before exit to avoid lost int. and hang
     71            } while ((UART16552[0].TxStatus & 0x01) != 0x01) ;  
   \   00000188   FF00               SBRS    R16, 0
   \   0000018A   CF46               RJMP    ??_16552_0_irq_handler_0
     72          }
   \   0000018C   91A9               LD      R26, Y+
   \   0000018E   91B9               LD      R27, Y+
   \   00000190   9049               LD      R4, Y+
   \   00000192   9508               RET
     73          

   \                                 In  segment CODE, align 2, keep-with-next
     74          static void
     75          _16552_1_irq_handler(void)
   \                     _16552_1_irq_handler:
     76          {
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006                      REQUIRE ?Register_R4_is_cg_reg
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
     77            UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt
   \   00000006   91002202           LDS     R16, 8706
   \   0000000A   700F               ANDI    R16, 0x0F
   \   0000000C   9300....           STS     (UART16552 + 34), R16
   \   00000010   EFAA               LDI     R26, 250
   \   00000012   E0B0               LDI     R27, 0
   \   00000014   2444               CLR     R4
   \   00000016   9443               INC     R4
     78            do {
     79              switch (UART16552[1].TxStatus) {
   \                     ??_16552_1_irq_handler_0:
   \   00000018   9100....           LDS     R16, (UART16552 + 34)
   \   0000001C   2300               TST     R16
   \   0000001E   F409               BRNE    $+2+2
   \   00000020   C0AC               RJMP    ??_16552_1_irq_handler_1
   \   00000022   5002               SUBI    R16, 2
   \   00000024   F051               BREQ    ??_16552_1_irq_handler_2
   \   00000026   5002               SUBI    R16, 2
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C053               RJMP    ??_16552_1_irq_handler_3
   \   0000002C   5002               SUBI    R16, 2
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C0A1               RJMP    ??_16552_1_irq_handler_4
   \   00000032   5006               SUBI    R16, 6
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C04D               RJMP    ??_16552_1_irq_handler_3
   \   00000038   C0A2               RJMP    ??_16552_1_irq_handler_5
     80              case 0x02 :             // transmit holding reg emty
     81                if (UART16552[1].TxCount == 0) {
   \                     ??_16552_1_irq_handler_2:
   \   0000003A   9100....           LDS     R16, (UART16552 + 32)
   \   0000003E   9110....           LDS     R17, (UART16552 + 33)
   \   00000042   2B01               OR      R16, R17
   \   00000044   F451               BRNE    ??_16552_1_irq_handler_6
     82                  U1_MCR &= ~RTS;        // set RTS off
   \   00000046   91002204           LDS     R16, 8708
   \   0000004A   7F0D               ANDI    R16, 0xFD
   \   0000004C   93002204           STS     8708, R16
     83                  OS_StopTimer(&TimerUART1);                    // and stop timer
   \   00000050   ....               LDI     R16, LOW(TimerUART1)
   \   00000052   ....               LDI     R17, (TimerUART1) >> 8
   \   00000054   ........           CALL    OS_StopTimer
   \   00000058   C092               RJMP    ??_16552_1_irq_handler_5
     84                } else {
     85                  for (UART16552[1].TxSeqCnt = 0;( UART16552[1].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[1].TxCount > 0 ); UART16552[1].TxSeqCnt++, UART16552[1].TxCount--) {
   \                     ??_16552_1_irq_handler_6:
   \   0000005A   93B0....           STS     (UART16552 + 35), R27
   \                     ??_16552_1_irq_handler_7:
   \   0000005E   9100....           LDS     R16, (UART16552 + 32)
   \   00000062   9110....           LDS     R17, (UART16552 + 33)
   \   00000066   2B01               OR      R16, R17
   \   00000068   F409               BRNE    $+2+2
   \   0000006A   C089               RJMP    ??_16552_1_irq_handler_5
     86                    U1_THR = UART16552[1].pTxBuffer[UART16552[1].TxLast++] ;
   \   0000006C   91E0....           LDS     R30, (UART16552 + 26)
   \   00000070   91F0....           LDS     R31, (UART16552 + 27)
   \   00000074   9100....           LDS     R16, (UART16552 + 30)
   \   00000078   9110....           LDS     R17, (UART16552 + 31)
   \   0000007C   0FE0               ADD     R30, R16
   \   0000007E   1FF1               ADC     R31, R17
   \   00000080   8100               LD      R16, Z
   \   00000082   93002200           STS     8704, R16
   \   00000086   9100....           LDS     R16, (UART16552 + 30)
   \   0000008A   9110....           LDS     R17, (UART16552 + 31)
   \   0000008E   5F0F               SUBI    R16, 255
   \   00000090   4F1F               SBCI    R17, 255
   \   00000092   9300....           STS     (UART16552 + 30), R16
   \   00000096   9310....           STS     (UART16552 + 31), R17
     87                  }
   \   0000009A   9100....           LDS     R16, (UART16552 + 35)
   \   0000009E   9503               INC     R16
   \   000000A0   9300....           STS     (UART16552 + 35), R16
   \   000000A4   9100....           LDS     R16, (UART16552 + 32)
   \   000000A8   9110....           LDS     R17, (UART16552 + 33)
   \   000000AC   5001               SUBI    R16, 1
   \   000000AE   4010               SBCI    R17, 0
   \   000000B0   9300....           STS     (UART16552 + 32), R16
   \   000000B4   9310....           STS     (UART16552 + 33), R17
   \   000000B8   9100....           LDS     R16, (UART16552 + 35)
   \   000000BC   3100               CPI     R16, 16
   \   000000BE   F008               BRCS    $+2+2
   \   000000C0   C05E               RJMP    ??_16552_1_irq_handler_5
   \   000000C2   CFCD               RJMP    ??_16552_1_irq_handler_7
     88                }
     89                break;
     90              case 0x04 :             // Receive data available    
     91              case 0x0C :             // or caracter timeout (FIFO)
     92                while (U1_LSR & DATA_READY) {
     93          
     94                  UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] = U1_RBR;          // Read the character 
     95          
     96                  if (UART16552[1].RxState != HANDLE) {        // ok to receive? 
     97                    switch (UART16552[1].RxState) {                   // Yes, check state
     98                      case SYNC :
     99                        if ( UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] == ANPRO1_SYN) {
    100                          UART16552[1].SyncCnt ++ ;                 // count sync
   \                     ??_16552_1_irq_handler_8:
   \   000000C4   9503               INC     R16
   \   000000C6   9300....           STS     (UART16552 + 45), R16
    101                          UART16552[1].RxFirst = 0;                 // start at start of buff
   \   000000CA   93B0....           STS     (UART16552 + 38), R27
   \   000000CE   93B0....           STS     (UART16552 + 39), R27
    102                        } else if (UART16552[1].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??_16552_1_irq_handler_3:
   \   000000D2   91002205           LDS     R16, 8709
   \   000000D6   FF00               SBRS    R16, 0
   \   000000D8   C052               RJMP    ??_16552_1_irq_handler_5
   \   000000DA   91002200           LDS     R16, 8704
   \   000000DE   91E0....           LDS     R30, (UART16552 + 36)
   \   000000E2   91F0....           LDS     R31, (UART16552 + 37)
   \   000000E6   9120....           LDS     R18, (UART16552 + 38)
   \   000000EA   9130....           LDS     R19, (UART16552 + 39)
   \   000000EE   0FE2               ADD     R30, R18
   \   000000F0   1FF3               ADC     R31, R19
   \   000000F2   8300               ST      Z, R16
   \   000000F4   9100....           LDS     R16, (UART16552 + 44)
   \   000000F8   300A               CPI     R16, 10
   \   000000FA   F359               BREQ    ??_16552_1_irq_handler_3
   \   000000FC   2300               TST     R16
   \   000000FE   F549               BRNE    ??_16552_1_irq_handler_9
   \   00000100   91E0....           LDS     R30, (UART16552 + 36)
   \   00000104   91F0....           LDS     R31, (UART16552 + 37)
   \   00000108   9100....           LDS     R16, (UART16552 + 38)
   \   0000010C   9110....           LDS     R17, (UART16552 + 39)
   \   00000110   0FE0               ADD     R30, R16
   \   00000112   1FF1               ADC     R31, R17
   \   00000114   8100               LD      R16, Z
   \   00000116   3002               CPI     R16, 2
   \   00000118   9100....           LDS     R16, (UART16552 + 45)
   \   0000011C   F299               BREQ    ??_16552_1_irq_handler_8
   \   0000011E   3002               CPI     R16, 2
   \   00000120   93B0....           STS     (UART16552 + 45), R27
   \   00000124   F2B0               BRCS    ??_16552_1_irq_handler_3
    103                          UART16552[1].SyncCnt = 0 ;                // reset counter
    104                          UART16552[1].RxState = HEADER ;
   \   00000126   9240....           STS     (UART16552 + 44), R4
    105                          UART16552[1].RxLast = 0 ;
   \   0000012A   93B0....           STS     (UART16552 + 40), R27
   \   0000012E   93B0....           STS     (UART16552 + 41), R27
    106                          UART16552[1].RxTimeout = RX_TO_TIME ;     // reset timeout
   \   00000132   93A0....           STS     (UART16552 + 46), R26
   \   00000136   93B0....           STS     (UART16552 + 47), R27
    107                          UART16552[1].RxFirst++ ;                  //  1. char OK, start on next
   \   0000013A   9100....           LDS     R16, (UART16552 + 38)
   \   0000013E   5F0F               SUBI    R16, 255
   \   00000140   4F1F               SBCI    R17, 255
   \   00000142   9300....           STS     (UART16552 + 38), R16
   \   00000146   9310....           STS     (UART16552 + 39), R17
    108                          ReceivePacketUart16552(1) ;               // Check package
   \   0000014A   E001               LDI     R16, 1
   \                     ??_16552_1_irq_handler_10:
   \   0000014C   ........           CALL    ReceivePacketUart16552
   \   00000150   CFC0               RJMP    ??_16552_1_irq_handler_3
    109                        } else {
    110                          UART16552[1].SyncCnt = 0 ;                // start over once more
    111                        }
    112                        break;
    113                      default :
    114                        if ((++UART16552[1].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??_16552_1_irq_handler_9:
   \   00000152   9100....           LDS     R16, (UART16552 + 38)
   \   00000156   9110....           LDS     R17, (UART16552 + 39)
   \   0000015A   5F0F               SUBI    R16, 255
   \   0000015C   4F1F               SBCI    R17, 255
   \   0000015E   9300....           STS     (UART16552 + 38), R16
   \   00000162   9310....           STS     (UART16552 + 39), R17
   \   00000166   3709               CPI     R16, 121
   \   00000168   4010               SBCI    R17, 0
   \   0000016A   E001               LDI     R16, 1
   \   0000016C   F378               BRCS    ??_16552_1_irq_handler_10
    115                          GoToSyncUART16552(1) ;                       // go to sync mode
   \   0000016E   ........           CALL    GoToSyncUART16552
   \   00000172   CFAF               RJMP    ??_16552_1_irq_handler_3
    116                        } else {
    117                          ReceivePacketUart16552(1) ;              // Check package
    118                        }
    119                        break ;   
    120                    }
    121                  }
    122                }
    123                break;
    124              case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    125                U1_LSR;      // Dummy read to empty register        
   \                     ??_16552_1_irq_handler_4:
   \   00000174   91002205           LDS     R16, 8709
    126                break;
   \   00000178   C002               RJMP    ??_16552_1_irq_handler_5
    127              case 0x00 :                 // Modem status.
    128                U1_MSR;      // Dummy read to empty register           
   \                     ??_16552_1_irq_handler_1:
   \   0000017A   91002206           LDS     R16, 8710
    129                break;
    130              }
    131              UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??_16552_1_irq_handler_5:
   \   0000017E   91002202           LDS     R16, 8706
   \   00000182   700F               ANDI    R16, 0x0F
   \   00000184   9300....           STS     (UART16552 + 34), R16
    132              // check again before exit to avoid lost int. and hang
    133            } while ((UART16552[1].TxStatus & 0x01) != 0x01);  
   \   00000188   FF00               SBRS    R16, 0
   \   0000018A   CF46               RJMP    ??_16552_1_irq_handler_0
    134          }
   \   0000018C   91A9               LD      R26, Y+
   \   0000018E   91B9               LD      R27, Y+
   \   00000190   9049               LD      R4, Y+
   \   00000192   9508               RET
    135          

   \                                 In  segment CODE, align 2, keep-with-next
    136          static void
    137          _16552_driver_task(void)
   \                     _16552_driver_task:
    138          {
   \   00000000   938A               ST      -Y, R24
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    139          
    140            while(1)
    141            {
    142              char status = OS_WaitEventTimed(0x01 | 0x02, 500);
   \                     ??_16552_driver_task_0:
   \   00000002   EF24               LDI     R18, 244
   \   00000004   E031               LDI     R19, 1
   \   00000006   E003               LDI     R16, 3
   \   00000008   ........           CALL    OS_WaitEventTimed
   \   0000000C   2F80               MOV     R24, R16
    143          
    144              if (status & 0x01)
   \   0000000E   FB00               BST     R16, 0
   \   00000010   F40E               BRTC    ??_16552_driver_task_1
    145              {
    146                _16552_0_irq_handler();
   \   00000012   ....               RCALL   _16552_0_irq_handler
    147              }
    148          
    149              if (status & 0x02)
   \                     ??_16552_driver_task_1:
   \   00000014   FB81               BST     R24, 1
   \   00000016   F7AE               BRTC    ??_16552_driver_task_0
    150              {
    151                _16552_1_irq_handler();
   \   00000018   ....               RCALL   _16552_1_irq_handler
   \   0000001A   CFF3               RJMP    ??_16552_driver_task_0
    152              }
    153            }
    154          }
    155          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    156          static OS_TASK TCB_16552_DRIVER;
   \                     TCB_16552_DRIVER:
   \   00000000                      DS8 20

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    157          static OS_STACKPTR int stack[50]; /* Task stacks */
   \                     stack:
   \   00000000                      DS8 100
    158          

   \                                 In  segment CODE, align 2, keep-with-next
    159          void
    160          _16552_driver_task_init(void)
   \                     _16552_driver_task_init:
    161          {
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    162          
    163            OS_CREATETASK(&TCB_16552_DRIVER, "16552_DRIVER", _16552_driver_task, 90, stack);
   \   00000000   E002               LDI     R16, 2
   \   00000002   E010               LDI     R17, 0
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   E604               LDI     R16, 100
   \   0000000A   931A               ST      -Y, R17
   \   0000000C   930A               ST      -Y, R16
   \   0000000E   ....               LDI     R16, LOW(stack)
   \   00000010   ....               LDI     R17, (stack) >> 8
   \   00000012   931A               ST      -Y, R17
   \   00000014   930A               ST      -Y, R16
   \   00000016   ....               LDI     R22, LOW(_16552_driver_task/2)
   \   00000018   ....               LDI     R23, (_16552_driver_task/2) >> 8
   \   0000001A   E54A               LDI     R20, 90
   \   0000001C   ....               LDI     R18, LOW(`?<Constant "16552_DRIVER">`)
   \   0000001E   ....               LDI     R19, (`?<Constant "16552_DRIVER">`) >> 8
   \   00000020   ....               LDI     R16, LOW(TCB_16552_DRIVER)
   \   00000022   ....               LDI     R17, (TCB_16552_DRIVER) >> 8
   \   00000024   ........           JMP     OS_CreateTask_R
    164          }
    165          #endif
    166          
    167          /*************************************************************************
    168          *
    169          *  External int 0 (UART PC16554 on AN-ZB485 or ADready on AN-ZBANA)
    170          *
    171          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    172           void Int_Handler_INT0( void ){               //Int handler for ext int 0
   \                     Int_Handler_INT0:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    173          
    174              // OBS!!!
    175              // Uses UART16552[].TxStatus as intreason and
    176              // UART16552[].TxSeqCnt as counter because these needs to be globale 
    177              // by using OS_EnterIntStack()
    178          
    179              
    180              switch (UnitID) {
   \   00000004   9100....           LDS     R16, UnitID
   \   00000008   2300               TST     R16
   \   0000000A   F021               BREQ    ??Int_Handler_INT0_0
   \   0000000C   950A               DEC     R16
   \   0000000E   F409               BRNE    $+2+2
   \   00000010   C0C4               RJMP    ??Int_Handler_INT0_1
   \   00000012   C0C8               RJMP    ??Int_Handler_INT0_2
    181              case 0x00:                  // AN-ZB485  
    182          #if USE_16552_DRIVER_TASK == 1
    183                    UART16552[0].TxStatus = (U0_IIR & 0x0f);          // reason for interrupt
   \                     ??Int_Handler_INT0_0:
   \   00000014   9100220A           LDS     R16, 8714
   \   00000018   700F               ANDI    R16, 0x0F
   \   0000001A   9300....           STS     (UART16552 + 8), R16
   \   0000001E   EFAA               LDI     R26, 250
   \   00000020   E0B0               LDI     R27, 0
    184                  do {
    185                      switch (UART16552[0].TxStatus) {
   \                     ??Int_Handler_INT0_3:
   \   00000022   9100....           LDS     R16, (UART16552 + 8)
   \   00000026   2300               TST     R16
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C0AD               RJMP    ??Int_Handler_INT0_4
   \   0000002C   5002               SUBI    R16, 2
   \   0000002E   F051               BREQ    ??Int_Handler_INT0_5
   \   00000030   5002               SUBI    R16, 2
   \   00000032   F409               BRNE    $+2+2
   \   00000034   C053               RJMP    ??Int_Handler_INT0_6
   \   00000036   5002               SUBI    R16, 2
   \   00000038   F409               BRNE    $+2+2
   \   0000003A   C0A2               RJMP    ??Int_Handler_INT0_7
   \   0000003C   5006               SUBI    R16, 6
   \   0000003E   F409               BRNE    $+2+2
   \   00000040   C04D               RJMP    ??Int_Handler_INT0_6
   \   00000042   C0A3               RJMP    ??Int_Handler_INT0_8
    186                      case 0x02 :             // transmit holding reg emty
    187                          if (UART16552[0].TxCount == 0) {
   \                     ??Int_Handler_INT0_5:
   \   00000044   9100....           LDS     R16, (UART16552 + 6)
   \   00000048   9110....           LDS     R17, (UART16552 + 7)
   \   0000004C   2B01               OR      R16, R17
   \   0000004E   F451               BRNE    ??Int_Handler_INT0_9
    188                              U0_MCR &= ~RTS;        // set RTS off
   \   00000050   9100220C           LDS     R16, 8716
   \   00000054   7F0D               ANDI    R16, 0xFD
   \   00000056   9300220C           STS     8716, R16
    189                              OS_StopTimer(&TimerUART0);                    // and stop timer
   \   0000005A   ....               LDI     R16, LOW(TimerUART0)
   \   0000005C   ....               LDI     R17, (TimerUART0) >> 8
   \   0000005E   ........           CALL    OS_StopTimer
   \   00000062   C093               RJMP    ??Int_Handler_INT0_8
    190                          } else {
    191                              for (UART16552[0].TxSeqCnt = 0;( UART16552[0].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[0].TxCount > 0 ); UART16552[0].TxSeqCnt++, --UART16552[0].TxCount) {
   \                     ??Int_Handler_INT0_9:
   \   00000064   93B0....           STS     (UART16552 + 9), R27
   \                     ??Int_Handler_INT0_10:
   \   00000068   9100....           LDS     R16, (UART16552 + 6)
   \   0000006C   9110....           LDS     R17, (UART16552 + 7)
   \   00000070   2B01               OR      R16, R17
   \   00000072   F409               BRNE    $+2+2
   \   00000074   C08A               RJMP    ??Int_Handler_INT0_8
    192                                  U0_THR = UART16552[0].pTxBuffer[UART16552[0].TxLast++];
   \   00000076   9100....           LDS     R16, (UART16552 + 4)
   \   0000007A   9110....           LDS     R17, (UART16552 + 5)
   \   0000007E   91E0....           LDS     R30, UART16552
   \   00000082   91F0....           LDS     R31, (UART16552 + 1)
   \   00000086   0FE0               ADD     R30, R16
   \   00000088   1FF1               ADC     R31, R17
   \   0000008A   8100               LD      R16, Z
   \   0000008C   93002208           STS     8712, R16
   \   00000090   9100....           LDS     R16, (UART16552 + 4)
   \   00000094   9110....           LDS     R17, (UART16552 + 5)
   \   00000098   5F0F               SUBI    R16, 255
   \   0000009A   4F1F               SBCI    R17, 255
   \   0000009C   9300....           STS     (UART16552 + 4), R16
   \   000000A0   9310....           STS     (UART16552 + 5), R17
    193                              }
   \   000000A4   9100....           LDS     R16, (UART16552 + 9)
   \   000000A8   9503               INC     R16
   \   000000AA   9300....           STS     (UART16552 + 9), R16
   \   000000AE   9100....           LDS     R16, (UART16552 + 6)
   \   000000B2   9110....           LDS     R17, (UART16552 + 7)
   \   000000B6   5001               SUBI    R16, 1
   \   000000B8   4010               SBCI    R17, 0
   \   000000BA   9300....           STS     (UART16552 + 6), R16
   \   000000BE   9310....           STS     (UART16552 + 7), R17
   \   000000C2   9100....           LDS     R16, (UART16552 + 9)
   \   000000C6   3100               CPI     R16, 16
   \   000000C8   F008               BRCS    $+2+2
   \   000000CA   C05F               RJMP    ??Int_Handler_INT0_8
   \   000000CC   CFCD               RJMP    ??Int_Handler_INT0_10
    194                          }
    195                          break;
    196                      case 0x04 :             // Receive data available    
    197                      case 0x0C :             // or caracter timeout (FIFO)
    198                          while (U0_LSR & DATA_READY) {
    199          
    200                              UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] = U0_RBR;             // Read the character 
    201          
    202                              if (UART16552[0].RxState != HANDLE) {                 // ok to receive? 
    203                                  switch (UART16552[0].RxState) {                   // Yes, check state
    204                                  case SYNC :
    205                                      if ( UART16552[0].pRxBuffer[ UART16552[0].RxFirst ] == ANPRO1_SYN) {
    206                                          UART16552[0].SyncCnt ++ ;                 // count sync
   \                     ??Int_Handler_INT0_11:
   \   000000CE   9503               INC     R16
   \   000000D0   9300....           STS     (UART16552 + 19), R16
    207                                          UART16552[0].RxFirst = 0;                 // start at start of buff
   \   000000D4   93B0....           STS     (UART16552 + 12), R27
   \   000000D8   93B0....           STS     (UART16552 + 13), R27
    208                                      } else if (UART16552[0].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??Int_Handler_INT0_6:
   \   000000DC   9100220D           LDS     R16, 8717
   \   000000E0   FF00               SBRS    R16, 0
   \   000000E2   C053               RJMP    ??Int_Handler_INT0_8
   \   000000E4   91002208           LDS     R16, 8712
   \   000000E8   91E0....           LDS     R30, (UART16552 + 10)
   \   000000EC   91F0....           LDS     R31, (UART16552 + 11)
   \   000000F0   9120....           LDS     R18, (UART16552 + 12)
   \   000000F4   9130....           LDS     R19, (UART16552 + 13)
   \   000000F8   0FE2               ADD     R30, R18
   \   000000FA   1FF3               ADC     R31, R19
   \   000000FC   8300               ST      Z, R16
   \   000000FE   9100....           LDS     R16, (UART16552 + 18)
   \   00000102   300A               CPI     R16, 10
   \   00000104   F359               BREQ    ??Int_Handler_INT0_6
   \   00000106   2300               TST     R16
   \   00000108   F551               BRNE    ??Int_Handler_INT0_12
   \   0000010A   91E0....           LDS     R30, (UART16552 + 10)
   \   0000010E   91F0....           LDS     R31, (UART16552 + 11)
   \   00000112   9100....           LDS     R16, (UART16552 + 12)
   \   00000116   9110....           LDS     R17, (UART16552 + 13)
   \   0000011A   0FE0               ADD     R30, R16
   \   0000011C   1FF1               ADC     R31, R17
   \   0000011E   8100               LD      R16, Z
   \   00000120   3002               CPI     R16, 2
   \   00000122   9100....           LDS     R16, (UART16552 + 19)
   \   00000126   F299               BREQ    ??Int_Handler_INT0_11
   \   00000128   3002               CPI     R16, 2
   \   0000012A   93B0....           STS     (UART16552 + 19), R27
   \   0000012E   F2B0               BRCS    ??Int_Handler_INT0_6
    209                                          UART16552[0].SyncCnt = 0 ;                // reset counter
    210                                          UART16552[0].RxState = HEADER ;
   \   00000130   E001               LDI     R16, 1
   \   00000132   9300....           STS     (UART16552 + 18), R16
    211                                          UART16552[0].RxLast = 0 ;
   \   00000136   93B0....           STS     (UART16552 + 14), R27
   \   0000013A   93B0....           STS     (UART16552 + 15), R27
    212                                          UART16552[0].RxTimeout = RX_TO_TIME ;   // reset timeout
   \   0000013E   93A0....           STS     (UART16552 + 20), R26
   \   00000142   93B0....           STS     (UART16552 + 21), R27
    213                                          UART16552[0].RxFirst++ ;                 //  1. char OK, start on next
   \   00000146   9100....           LDS     R16, (UART16552 + 12)
   \   0000014A   5F0F               SUBI    R16, 255
   \   0000014C   4F1F               SBCI    R17, 255
   \   0000014E   9300....           STS     (UART16552 + 12), R16
   \   00000152   9310....           STS     (UART16552 + 13), R17
    214                                          ReceivePacketUart16552(0) ;              // Check package
   \   00000156   E000               LDI     R16, 0
   \                     ??Int_Handler_INT0_13:
   \   00000158   ........           CALL    ReceivePacketUart16552
   \   0000015C   CFBF               RJMP    ??Int_Handler_INT0_6
    215                                      } else {
    216                                          UART16552[0].SyncCnt = 0 ;                // start over once more
    217                                      }
    218                                      break;
    219                                  default :
    220                                      if ((++UART16552[0].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??Int_Handler_INT0_12:
   \   0000015E   9100....           LDS     R16, (UART16552 + 12)
   \   00000162   9110....           LDS     R17, (UART16552 + 13)
   \   00000166   5F0F               SUBI    R16, 255
   \   00000168   4F1F               SBCI    R17, 255
   \   0000016A   9300....           STS     (UART16552 + 12), R16
   \   0000016E   9310....           STS     (UART16552 + 13), R17
   \   00000172   3709               CPI     R16, 121
   \   00000174   4010               SBCI    R17, 0
   \   00000176   E000               LDI     R16, 0
   \   00000178   F378               BRCS    ??Int_Handler_INT0_13
    221                                          GoToSyncUART16552(0) ;                       // go to sync mode
   \   0000017A   ........           CALL    GoToSyncUART16552
   \   0000017E   CFAE               RJMP    ??Int_Handler_INT0_6
    222                                      } else {
    223                                          ReceivePacketUart16552(0) ;              // Check package
    224                                      }
    225                                      break ;   
    226                                  }
    227                              }
    228                          } 
    229                          break;
    230                      case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    231                          U0_LSR;      // Dummy read to empty register        
   \                     ??Int_Handler_INT0_7:
   \   00000180   9100220D           LDS     R16, 8717
    232                          break;
   \   00000184   C002               RJMP    ??Int_Handler_INT0_8
    233                      case 0x00 :                 // Modem status.
    234                          U0_MSR;      // Dummy read to empty register           
   \                     ??Int_Handler_INT0_4:
   \   00000186   9100220E           LDS     R16, 8718
    235                          break;
    236                      }
    237                      UART16552[0].TxStatus = (U0_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??Int_Handler_INT0_8:
   \   0000018A   9100220A           LDS     R16, 8714
   \   0000018E   700F               ANDI    R16, 0x0F
   \   00000190   9300....           STS     (UART16552 + 8), R16
    238                                                                                // check again before exit to avoid lost int. and hang
    239                  } while ((UART16552[0].TxStatus & 0x01) != 0x01) ;  
   \   00000194   FD00               SBRC    R16, 0
   \   00000196   C006               RJMP    ??Int_Handler_INT0_2
   \   00000198   CF44               RJMP    ??Int_Handler_INT0_3
    240          #else
    241                  OS_SignalEvent(0x01, &TCB_16552_DRIVER) ;
    242          #endif
    243                  break;
    244              case 0x01:                  // AN-ZBANA ADready
    245                  OS_SignalEvent(1, &TCB_AD7715);
   \                     ??Int_Handler_INT0_1:
   \   0000019A   ....               LDI     R18, LOW(TCB_AD7715)
   \   0000019C   ....               LDI     R19, (TCB_AD7715) >> 8
   \   0000019E   E001               LDI     R16, 1
   \   000001A0   ........           CALL    OS_SignalEvent
    246                  break;
    247              }
    248          }
   \                     ??Int_Handler_INT0_2:
   \   000001A4   91A9               LD      R26, Y+
   \   000001A6   91B9               LD      R27, Y+
   \   000001A8   9508               RET
    249          
    250          
    251          #pragma vector=INT0_vect

   \                                 In  segment CODE, align 2, keep-with-next
    252          __interrupt void IntHandler_INT0( void ){               //Int handler for ext int 0
   \                     IntHandler_INT0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    253              OS_CallISR(Int_Handler_INT0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_INT0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_INT0/2) >> 8
   \   00000028                      REQUIRE ?Subroutine0
   \   00000028                      ;               // Fall through to label ?Subroutine0
    254          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           CALL    OS_CallISR
   \   00000004   BF9B               OUT     0x3B, R25
   \   00000006   BF8F               OUT     0x3F, R24
   \   00000008   9109               LD      R16, Y+
   \   0000000A   9119               LD      R17, Y+
   \   0000000C   9129               LD      R18, Y+
   \   0000000E   9139               LD      R19, Y+
   \   00000010   9149               LD      R20, Y+
   \   00000012   9159               LD      R21, Y+
   \   00000014   9169               LD      R22, Y+
   \   00000016   9179               LD      R23, Y+
   \   00000018   9009               LD      R0, Y+
   \   0000001A   9019               LD      R1, Y+
   \   0000001C   9029               LD      R2, Y+
   \   0000001E   9039               LD      R3, Y+
   \   00000020   91E9               LD      R30, Y+
   \   00000022   91F9               LD      R31, Y+
   \   00000024   9189               LD      R24, Y+
   \   00000026   9199               LD      R25, Y+
   \   00000028   9518               RETI
    255          
    256          /*************************************************************************
    257          *
    258          *  External int 1 (UART PC16554 on AN-ZB485)
    259          *
    260          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    261          void Int_Handler_INT1( void ){               //Int handler for Ext int 1
   \                     Int_Handler_INT1:
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006                      REQUIRE ?Register_R4_is_cg_reg
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
    262          
    263              // OBS!!!
    264              // Uses UART16552[].TxStatus as intreason and
    265              // UART16552[].TxSeqCnt as counter because these needs to be globale 
    266              // by using OS_EnterIntStack()
    267              
    268              switch (UnitID) {
   \   00000006   9100....           LDS     R16, UnitID
   \   0000000A   2300               TST     R16
   \   0000000C   F009               BREQ    $+2+2
   \   0000000E   C0C3               RJMP    ??Int_Handler_INT1_0
    269              case 0x00:               // AN-ZB485 
    270          #if USE_16552_DRIVER_TASK == 1
    271                  UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt
   \   00000010   91002202           LDS     R16, 8706
   \   00000014   700F               ANDI    R16, 0x0F
   \   00000016   9300....           STS     (UART16552 + 34), R16
   \   0000001A   EFAA               LDI     R26, 250
   \   0000001C   E0B0               LDI     R27, 0
   \   0000001E   2444               CLR     R4
   \   00000020   9443               INC     R4
    272                  do {
    273                      switch (UART16552[1].TxStatus) {
   \                     ??Int_Handler_INT1_1:
   \   00000022   9100....           LDS     R16, (UART16552 + 34)
   \   00000026   2300               TST     R16
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C0AC               RJMP    ??Int_Handler_INT1_2
   \   0000002C   5002               SUBI    R16, 2
   \   0000002E   F051               BREQ    ??Int_Handler_INT1_3
   \   00000030   5002               SUBI    R16, 2
   \   00000032   F409               BRNE    $+2+2
   \   00000034   C053               RJMP    ??Int_Handler_INT1_4
   \   00000036   5002               SUBI    R16, 2
   \   00000038   F409               BRNE    $+2+2
   \   0000003A   C0A1               RJMP    ??Int_Handler_INT1_5
   \   0000003C   5006               SUBI    R16, 6
   \   0000003E   F409               BRNE    $+2+2
   \   00000040   C04D               RJMP    ??Int_Handler_INT1_4
   \   00000042   C0A2               RJMP    ??Int_Handler_INT1_6
    274                      case 0x02 :             // transmit holding reg emty
    275                          if (UART16552[1].TxCount == 0) {
   \                     ??Int_Handler_INT1_3:
   \   00000044   9100....           LDS     R16, (UART16552 + 32)
   \   00000048   9110....           LDS     R17, (UART16552 + 33)
   \   0000004C   2B01               OR      R16, R17
   \   0000004E   F451               BRNE    ??Int_Handler_INT1_7
    276                              U1_MCR &= ~RTS;        // set RTS off
   \   00000050   91002204           LDS     R16, 8708
   \   00000054   7F0D               ANDI    R16, 0xFD
   \   00000056   93002204           STS     8708, R16
    277                              OS_StopTimer(&TimerUART1);                    // and stop timer
   \   0000005A   ....               LDI     R16, LOW(TimerUART1)
   \   0000005C   ....               LDI     R17, (TimerUART1) >> 8
   \   0000005E   ........           CALL    OS_StopTimer
   \   00000062   C092               RJMP    ??Int_Handler_INT1_6
    278                          } else {
    279                              for (UART16552[1].TxSeqCnt = 0;( UART16552[1].TxSeqCnt < FIFO_TX_BUFSIZE ) && (UART16552[1].TxCount > 0 ); UART16552[1].TxSeqCnt++, UART16552[1].TxCount--) {
   \                     ??Int_Handler_INT1_7:
   \   00000064   93B0....           STS     (UART16552 + 35), R27
   \                     ??Int_Handler_INT1_8:
   \   00000068   9100....           LDS     R16, (UART16552 + 32)
   \   0000006C   9110....           LDS     R17, (UART16552 + 33)
   \   00000070   2B01               OR      R16, R17
   \   00000072   F409               BRNE    $+2+2
   \   00000074   C089               RJMP    ??Int_Handler_INT1_6
    280                                 U1_THR = UART16552[1].pTxBuffer[UART16552[1].TxLast++] ;
   \   00000076   91E0....           LDS     R30, (UART16552 + 26)
   \   0000007A   91F0....           LDS     R31, (UART16552 + 27)
   \   0000007E   9100....           LDS     R16, (UART16552 + 30)
   \   00000082   9110....           LDS     R17, (UART16552 + 31)
   \   00000086   0FE0               ADD     R30, R16
   \   00000088   1FF1               ADC     R31, R17
   \   0000008A   8100               LD      R16, Z
   \   0000008C   93002200           STS     8704, R16
   \   00000090   9100....           LDS     R16, (UART16552 + 30)
   \   00000094   9110....           LDS     R17, (UART16552 + 31)
   \   00000098   5F0F               SUBI    R16, 255
   \   0000009A   4F1F               SBCI    R17, 255
   \   0000009C   9300....           STS     (UART16552 + 30), R16
   \   000000A0   9310....           STS     (UART16552 + 31), R17
    281                              }
   \   000000A4   9100....           LDS     R16, (UART16552 + 35)
   \   000000A8   9503               INC     R16
   \   000000AA   9300....           STS     (UART16552 + 35), R16
   \   000000AE   9100....           LDS     R16, (UART16552 + 32)
   \   000000B2   9110....           LDS     R17, (UART16552 + 33)
   \   000000B6   5001               SUBI    R16, 1
   \   000000B8   4010               SBCI    R17, 0
   \   000000BA   9300....           STS     (UART16552 + 32), R16
   \   000000BE   9310....           STS     (UART16552 + 33), R17
   \   000000C2   9100....           LDS     R16, (UART16552 + 35)
   \   000000C6   3100               CPI     R16, 16
   \   000000C8   F008               BRCS    $+2+2
   \   000000CA   C05E               RJMP    ??Int_Handler_INT1_6
   \   000000CC   CFCD               RJMP    ??Int_Handler_INT1_8
    282                          }
    283                          break;
    284                      case 0x04 :             // Receive data available    
    285                      case 0x0C :             // or caracter timeout (FIFO)
    286                          while (U1_LSR & DATA_READY) {
    287          
    288                              UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] = U1_RBR;          // Read the character 
    289          
    290                              if (UART16552[1].RxState != HANDLE) {        // ok to receive? 
    291                                  switch (UART16552[1].RxState) {                   // Yes, check state
    292                                  case SYNC :
    293                                      if ( UART16552[1].pRxBuffer[ UART16552[1].RxFirst ] == ANPRO1_SYN) {
    294                                          UART16552[1].SyncCnt ++ ;                 // count sync
   \                     ??Int_Handler_INT1_9:
   \   000000CE   9503               INC     R16
   \   000000D0   9300....           STS     (UART16552 + 45), R16
    295                                          UART16552[1].RxFirst = 0;                 // start at start of buff
   \   000000D4   93B0....           STS     (UART16552 + 38), R27
   \   000000D8   93B0....           STS     (UART16552 + 39), R27
    296                                      } else if (UART16552[1].SyncCnt >= 2) {       // minimum two sync bytes
   \                     ??Int_Handler_INT1_4:
   \   000000DC   91002205           LDS     R16, 8709
   \   000000E0   FF00               SBRS    R16, 0
   \   000000E2   C052               RJMP    ??Int_Handler_INT1_6
   \   000000E4   91002200           LDS     R16, 8704
   \   000000E8   91E0....           LDS     R30, (UART16552 + 36)
   \   000000EC   91F0....           LDS     R31, (UART16552 + 37)
   \   000000F0   9120....           LDS     R18, (UART16552 + 38)
   \   000000F4   9130....           LDS     R19, (UART16552 + 39)
   \   000000F8   0FE2               ADD     R30, R18
   \   000000FA   1FF3               ADC     R31, R19
   \   000000FC   8300               ST      Z, R16
   \   000000FE   9100....           LDS     R16, (UART16552 + 44)
   \   00000102   300A               CPI     R16, 10
   \   00000104   F359               BREQ    ??Int_Handler_INT1_4
   \   00000106   2300               TST     R16
   \   00000108   F549               BRNE    ??Int_Handler_INT1_10
   \   0000010A   91E0....           LDS     R30, (UART16552 + 36)
   \   0000010E   91F0....           LDS     R31, (UART16552 + 37)
   \   00000112   9100....           LDS     R16, (UART16552 + 38)
   \   00000116   9110....           LDS     R17, (UART16552 + 39)
   \   0000011A   0FE0               ADD     R30, R16
   \   0000011C   1FF1               ADC     R31, R17
   \   0000011E   8100               LD      R16, Z
   \   00000120   3002               CPI     R16, 2
   \   00000122   9100....           LDS     R16, (UART16552 + 45)
   \   00000126   F299               BREQ    ??Int_Handler_INT1_9
   \   00000128   3002               CPI     R16, 2
   \   0000012A   93B0....           STS     (UART16552 + 45), R27
   \   0000012E   F2B0               BRCS    ??Int_Handler_INT1_4
    297                                          UART16552[1].SyncCnt = 0 ;                // reset counter
    298                                          UART16552[1].RxState = HEADER ;
   \   00000130   9240....           STS     (UART16552 + 44), R4
    299                                          UART16552[1].RxLast = 0 ;
   \   00000134   93B0....           STS     (UART16552 + 40), R27
   \   00000138   93B0....           STS     (UART16552 + 41), R27
    300                                          UART16552[1].RxTimeout = RX_TO_TIME ;     // reset timeout
   \   0000013C   93A0....           STS     (UART16552 + 46), R26
   \   00000140   93B0....           STS     (UART16552 + 47), R27
    301                                          UART16552[1].RxFirst++ ;                  //  1. char OK, start on next
   \   00000144   9100....           LDS     R16, (UART16552 + 38)
   \   00000148   5F0F               SUBI    R16, 255
   \   0000014A   4F1F               SBCI    R17, 255
   \   0000014C   9300....           STS     (UART16552 + 38), R16
   \   00000150   9310....           STS     (UART16552 + 39), R17
    302                                          ReceivePacketUart16552(1) ;               // Check package
   \   00000154   E001               LDI     R16, 1
   \                     ??Int_Handler_INT1_11:
   \   00000156   ........           CALL    ReceivePacketUart16552
   \   0000015A   CFC0               RJMP    ??Int_Handler_INT1_4
    303                                      } else {
    304                                          UART16552[1].SyncCnt = 0 ;                // start over once more
    305                                      }
    306                                      break;
    307                                  default :
    308                                      if ((++UART16552[1].RxFirst) > RXSIZE_UART_16552) { // Point to next location
   \                     ??Int_Handler_INT1_10:
   \   0000015C   9100....           LDS     R16, (UART16552 + 38)
   \   00000160   9110....           LDS     R17, (UART16552 + 39)
   \   00000164   5F0F               SUBI    R16, 255
   \   00000166   4F1F               SBCI    R17, 255
   \   00000168   9300....           STS     (UART16552 + 38), R16
   \   0000016C   9310....           STS     (UART16552 + 39), R17
   \   00000170   3709               CPI     R16, 121
   \   00000172   4010               SBCI    R17, 0
   \   00000174   E001               LDI     R16, 1
   \   00000176   F378               BRCS    ??Int_Handler_INT1_11
    309                                          GoToSyncUART16552(1) ;                       // go to sync mode
   \   00000178   ........           CALL    GoToSyncUART16552
   \   0000017C   CFAF               RJMP    ??Int_Handler_INT1_4
    310                                      } else {
    311                                          ReceivePacketUart16552(1) ;              // Check package
    312                                      }
    313                                      break ;   
    314                                  }
    315                              }
    316                          }
    317                          break;
    318                      case 0x06 :                 // Receiver line status, OR, PE, FR, Break int.
    319                          U1_LSR;      // Dummy read to empty register        
   \                     ??Int_Handler_INT1_5:
   \   0000017E   91002205           LDS     R16, 8709
    320                          break;
   \   00000182   C002               RJMP    ??Int_Handler_INT1_6
    321                      case 0x00 :                 // Modem status.
    322                          U1_MSR;      // Dummy read to empty register           
   \                     ??Int_Handler_INT1_2:
   \   00000184   91002206           LDS     R16, 8710
    323                          break;
    324                      }
    325                      UART16552[1].TxStatus = (U1_IIR & 0x0f) ;      // reason for interrupt, 
   \                     ??Int_Handler_INT1_6:
   \   00000188   91002202           LDS     R16, 8706
   \   0000018C   700F               ANDI    R16, 0x0F
   \   0000018E   9300....           STS     (UART16552 + 34), R16
    326                                                                                // check again before exit to avoid lost int. and hang
    327                 } while ((UART16552[1].TxStatus & 0x01) != 0x01);  
   \   00000192   FF00               SBRS    R16, 0
   \   00000194   CF46               RJMP    ??Int_Handler_INT1_1
    328          #else
    329                  OS_SignalEvent(0x02, &TCB_16552_DRIVER);
    330          #endif
    331                  break;
    332              case 0x01:                  // AN-ZBANA Not connected!
    333                  break;
    334              }
    335          }
   \                     ??Int_Handler_INT1_0:
   \   00000196   91A9               LD      R26, Y+
   \   00000198   91B9               LD      R27, Y+
   \   0000019A   9049               LD      R4, Y+
   \   0000019C   9508               RET
    336          
    337          
    338          #pragma vector=INT1_vect

   \                                 In  segment CODE, align 2, keep-with-next
    339          __interrupt void IntHandler_INT1( void ){               //Int handler for Ext int 1
   \                     IntHandler_INT1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    340          
    341              OS_CallISR(Int_Handler_INT1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_INT1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_INT1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    342          }

   \                                 In  segment INTVEC, offset 0x4, root
   \                     `??IntHandler_INT0::??INTVEC 4`:
   \   00000004   ........           JMP     IntHandler_INT0

   \                                 In  segment INTVEC, offset 0x8, root
   \                     `??IntHandler_INT1::??INTVEC 8`:
   \   00000008   ........           JMP     IntHandler_INT1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "16552_DRIVER">>`:
   \   00000000   363135355F32       DC8 "16552_DRIVER"
   \              524456495245
   \              00          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "16552_DRIVER">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "16552_DRIVER">>`

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_INT0
       16      2   -> OS_CallISR
     16      2   IntHandler_INT1
       16      2   -> OS_CallISR
      2      2   Int_Handler_INT0
        2      2   -> GoToSyncUART16552
        2      2   -> OS_SignalEvent
        2      2   -> OS_StopTimer
        2      2   -> ReceivePacketUart16552
      3      2   Int_Handler_INT1
        3      2   -> GoToSyncUART16552
        3      2   -> OS_StopTimer
        3      2   -> ReceivePacketUart16552
      3      2   _16552_0_irq_handler
        3      2   -> GoToSyncUART16552
        3      2   -> OS_StopTimer
        3      2   -> ReceivePacketUart16552
      3      2   _16552_1_irq_handler
        3      2   -> GoToSyncUART16552
        3      2   -> OS_StopTimer
        3      2   -> ReceivePacketUart16552
      1      2   _16552_driver_task
        1      2   -> OS_WaitEventTimed
        1      2   -> _16552_0_irq_handler
        1      2   -> _16552_1_irq_handler
      6      2   _16552_driver_task_init
        0      2   -> OS_CreateTask_R


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      13  ?<Constant "16552_DRIVER">
      13  ?<Initializer for <Constant "16552_DRIVER">>
      42  ?Subroutine0
      40  IntHandler_INT0
       4  IntHandler_INT0::??INTVEC 4
      42  IntHandler_INT1
       4  IntHandler_INT1::??INTVEC 8
     426  Int_Handler_INT0
     414  Int_Handler_INT1
      20  TCB_16552_DRIVER
     404  _16552_0_irq_handler
     404  _16552_1_irq_handler
      28  _16552_driver_task
      40  _16552_driver_task_init
     100  stack
      14  -- Other

 
 1 840 bytes in segment CODE
    14 bytes in segment INITTAB
     8 bytes in segment INTVEC
    13 bytes in segment NEAR_I
    13 bytes in segment NEAR_ID
   120 bytes in segment NEAR_Z
 
 1 853 bytes of CODE memory (+ 22 bytes shared)
   133 bytes of DATA memory

Errors: none
Warnings: none
