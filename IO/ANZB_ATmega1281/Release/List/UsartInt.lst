###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       20/Nov/2023  14:43:39
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWA9EE.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\Obj" -D
#        OS_LIBMODE_R -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=1 -D __ATMEGA_1281__ -lCN
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\List" -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -Ohs)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\List\UsartInt.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\Obj\UsartInt.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   Uart1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          
      8          #if USE_MODBUS_PROTOCOL == 0
      9          
     10          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xce
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc6
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
     11          #include "stdio.h"
     12          #include "math.h"
     13          #include "externals.h"
     14          #include "version.h"
     15          
     16          #if (OS_UART != 0)
     17          
     18          // USART0

   \                                 In  segment CODE, align 2, keep-with-next
     19          void Int_Handler_RX_USART0( void ){   
   \                     Int_Handler_RX_USART0:
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006                      REQUIRE ?Register_R4_is_cg_reg
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
     20          
     21              if ( UCSR0A & __BIT_MASK( DOR0 ) ) {                // Overrun error? 
   \   00000006   9100....           LDS     R16, _A_UCSR0A
     22              }
     23          
     24              if ( UCSR0A & __BIT_MASK( FE0 ) ) {                 // Framing error? 
   \   0000000A   9100....           LDS     R16, _A_UCSR0A
   \   0000000E   EFAA               LDI     R26, 250
   \   00000010   E0B0               LDI     R27, 0
   \   00000012   2444               CLR     R4
   \   00000014   9443               INC     R4
   \   00000016   C009               RJMP    ??Int_Handler_RX_USART0_0
     25              }
     26          
     27              while ( UCSR0A & __BIT_MASK( RXC0)  ) {                // New byte avaiable?
     28                  UART[0].pRxBuffer[ UART[0].RxFirst ] = UDR0;    // Read the character 
     29          
     30                  if (UART[0].RxState != HANDLE) {                // ok to receive? 
     31                      switch (UART[0].RxState) {                   // Yes, check state
     32                      case SYNC :
     33                          if ( UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SYN) {
     34                              UART[0].SyncCnt ++ ;                 // count sync
   \                     ??Int_Handler_RX_USART0_1:
   \   00000018   9100....           LDS     R16, (UART + 19)
   \   0000001C   9503               INC     R16
   \   0000001E   9300....           STS     (UART + 19), R16
     35                              UART[0].RxFirst = 0;                 // start at start of buff
   \   00000022   93B0....           STS     (UART + 12), R27
   \   00000026   93B0....           STS     (UART + 13), R27
     36                          } else if ((UART[0].SyncCnt >= 2) && 
   \                     ??Int_Handler_RX_USART0_0:
   \   0000002A   9100....           LDS     R16, _A_UCSR0A
   \   0000002E   FF07               SBRS    R16, 7
   \   00000030   C04A               RJMP    ??Int_Handler_RX_USART0_2
   \   00000032   9100....           LDS     R16, _A_UDR0
   \   00000036   91E0....           LDS     R30, (UART + 10)
   \   0000003A   91F0....           LDS     R31, (UART + 11)
   \   0000003E   9120....           LDS     R18, (UART + 12)
   \   00000042   9130....           LDS     R19, (UART + 13)
   \   00000046   0FE2               ADD     R30, R18
   \   00000048   1FF3               ADC     R31, R19
   \   0000004A   8300               ST      Z, R16
   \   0000004C   9100....           LDS     R16, (UART + 18)
   \   00000050   300A               CPI     R16, 10
   \   00000052   F359               BREQ    ??Int_Handler_RX_USART0_0
   \   00000054   2300               TST     R16
   \   00000056   F519               BRNE    ??Int_Handler_RX_USART0_3
   \   00000058   91E0....           LDS     R30, (UART + 10)
   \   0000005C   91F0....           LDS     R31, (UART + 11)
   \   00000060   9100....           LDS     R16, (UART + 12)
   \   00000064   9110....           LDS     R17, (UART + 13)
   \   00000068   0FE0               ADD     R30, R16
   \   0000006A   1FF1               ADC     R31, R17
   \   0000006C   8100               LD      R16, Z
   \   0000006E   3106               CPI     R16, 22
   \   00000070   F299               BREQ    ??Int_Handler_RX_USART0_1
     37                                     (UART[0].pRxBuffer[ UART[0].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \   00000072   9110....           LDS     R17, (UART + 19)
   \   00000076   3012               CPI     R17, 2
   \   00000078   F078               BRCS    ??Int_Handler_RX_USART0_4
   \   0000007A   3001               CPI     R16, 1
   \   0000007C   F469               BRNE    ??Int_Handler_RX_USART0_4
     38                              UART[0].SyncCnt = 0 ;                // reset counter
   \   0000007E   93B0....           STS     (UART + 19), R27
     39                              UART[0].RxState = HEADER ;
   \   00000082   9240....           STS     (UART + 18), R4
     40                              UART[0].RxLast = 0 ;
   \   00000086   93B0....           STS     (UART + 14), R27
   \   0000008A   93B0....           STS     (UART + 15), R27
     41                              UART[0].RxTimeout = RX_TO_TIME ;    // reset timeout
   \   0000008E   93A0....           STS     (UART + 20), R26
   \   00000092   93B0....           STS     (UART + 21), R27
   \   00000096   CFC9               RJMP    ??Int_Handler_RX_USART0_0
     42                          } else {
     43                              UART[0].SyncCnt = 0 ;                // start over once more
   \                     ??Int_Handler_RX_USART0_4:
   \   00000098   93B0....           STS     (UART + 19), R27
   \   0000009C   CFC6               RJMP    ??Int_Handler_RX_USART0_0
     44                          }
     45                          break;
     46                      default :
     47                          if ((++UART[0].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??Int_Handler_RX_USART0_3:
   \   0000009E   9100....           LDS     R16, (UART + 12)
   \   000000A2   9110....           LDS     R17, (UART + 13)
   \   000000A6   5F0F               SUBI    R16, 255
   \   000000A8   4F1F               SBCI    R17, 255
   \   000000AA   9300....           STS     (UART + 12), R16
   \   000000AE   9310....           STS     (UART + 13), R17
   \   000000B2   3907               CPI     R16, 151
   \   000000B4   4010               SBCI    R17, 0
   \   000000B6   E000               LDI     R16, 0
   \   000000B8   F018               BRCS    ??Int_Handler_RX_USART0_5
     48                              GoToSyncUART(0) ;                       // go to sync mode
   \   000000BA   ........           CALL    GoToSyncUART
   \   000000BE   CFB5               RJMP    ??Int_Handler_RX_USART0_0
     49                          } else {
     50                              ReceivePacketUart(0) ;              // Check package
   \                     ??Int_Handler_RX_USART0_5:
   \   000000C0   ........           CALL    ReceivePacketUart
   \   000000C4   CFB2               RJMP    ??Int_Handler_RX_USART0_0
     51                          }
     52                          break ;   
     53                      }
     54                  }
     55              }
     56          } 
   \                     ??Int_Handler_RX_USART0_2:
   \   000000C6   91A9               LD      R26, Y+
   \   000000C8   91B9               LD      R27, Y+
   \   000000CA   9049               LD      R4, Y+
   \   000000CC   9508               RET
   \   000000CE                      REQUIRE _A_UCSR0A
   \   000000CE                      REQUIRE _A_UDR0
     57          
     58          
     59          #pragma vector=USART0_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     60          __interrupt void IntHandler_RX_USART0( void ){   
   \                     IntHandler_RX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
     61              OS_CallISR(Int_Handler_RX_USART0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_RX_USART0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_RX_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
     62          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           CALL    OS_CallISR
   \   00000004   BF9B               OUT     0x3B, R25
   \   00000006   BF8F               OUT     0x3F, R24
   \   00000008   9109               LD      R16, Y+
   \   0000000A   9119               LD      R17, Y+
   \   0000000C   9129               LD      R18, Y+
   \   0000000E   9139               LD      R19, Y+
   \   00000010   9149               LD      R20, Y+
   \   00000012   9159               LD      R21, Y+
   \   00000014   9169               LD      R22, Y+
   \   00000016   9179               LD      R23, Y+
   \   00000018   9009               LD      R0, Y+
   \   0000001A   9019               LD      R1, Y+
   \   0000001C   9029               LD      R2, Y+
   \   0000001E   9039               LD      R3, Y+
   \   00000020   91E9               LD      R30, Y+
   \   00000022   91F9               LD      R31, Y+
   \   00000024   9189               LD      R24, Y+
   \   00000026   9199               LD      R25, Y+
   \   00000028   9518               RETI
     63          

   \                                 In  segment CODE, align 2, keep-with-next
     64          void Int_Handler_TX_USART0( void ){   
   \                     Int_Handler_TX_USART0:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     65          
     66              UCSR0B &= ~(__BIT_MASK( TXCIE0)) ;            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7B0F               ANDI    R16, 0xBF
   \   00000006   930000C1           STS     193, R16
     67              PORTE &= ~0x04 ;                              // TXE0 off
   \   0000000A   9872               CBI     0x0E, 0x02
     68              OS_StopTimer(&TimerUSART0);                    // and stop timer
   \   0000000C   ....               LDI     R16, LOW(TimerUSART0)
   \   0000000E   ....               LDI     R17, (TimerUSART0) >> 8
   \   00000010   ........           CALL    OS_StopTimer
     69              GoToSyncUART(0) ;                                    // go to sync modus for recive
   \   00000014   E000               LDI     R16, 0
   \   00000016   ........           JMP     GoToSyncUART
   \   0000001A                      REQUIRE _A_UCSR0B
   \   0000001A                      REQUIRE _A_PORTE
     70              
     71          }
     72          
     73          #pragma vector=USART0_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     74          __interrupt void IntHandler_TX_USART0( void ){   
   \                     IntHandler_TX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
     75              OS_CallISR(Int_Handler_TX_USART0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_TX_USART0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_TX_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
     76          }
     77          

   \                                 In  segment CODE, align 2, keep-with-next
     78          void Int_Handler_UDRE_USART0( void ){   
   \                     Int_Handler_UDRE_USART0:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     79              if ( UART[0].TxCount-- > 0 ) {
   \   00000000   9100....           LDS     R16, (UART + 6)
   \   00000004   9110....           LDS     R17, (UART + 7)
   \   00000008   2B01               OR      R16, R17
   \   0000000A   F101               BREQ    ??Int_Handler_UDRE_USART0_0
   \   0000000C   9100....           LDS     R16, (UART + 6)
   \   00000010   5001               SUBI    R16, 1
   \   00000012   4010               SBCI    R17, 0
   \   00000014   9300....           STS     (UART + 6), R16
   \   00000018   9310....           STS     (UART + 7), R17
     80                  UDR0 = UART[0].pTxBuffer[ UART[0].TxLast ];     // Send a character
   \   0000001C   9100....           LDS     R16, (UART + 4)
   \   00000020   9110....           LDS     R17, (UART + 5)
   \   00000024   91E0....           LDS     R30, UART
   \   00000028   91F0....           LDS     R31, (UART + 1)
   \   0000002C   0FE0               ADD     R30, R16
   \   0000002E   1FF1               ADC     R31, R17
   \   00000030   8100               LD      R16, Z
   \   00000032   9300....           STS     _A_UDR0, R16
     81                  UART[0].TxLast++;
   \   00000036   9100....           LDS     R16, (UART + 4)
   \   0000003A   9110....           LDS     R17, (UART + 5)
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   9300....           STS     (UART + 4), R16
   \   00000046   9310....           STS     (UART + 5), R17
   \   0000004A   9508               RET
     82              } else{                                             // Last byte sent?
   \                     ??Int_Handler_UDRE_USART0_0:
   \   0000004C   EF0F               LDI     R16, 255
   \   0000004E   9300....           STS     (UART + 6), R16
   \   00000052   9300....           STS     (UART + 7), R16
     83                    UCSR0B &= ~(__BIT_MASK( UDRIE0)) ;            // transmission end, disable int.
   \   00000056   910000C1           LDS     R16, 193
   \   0000005A   7D0F               ANDI    R16, 0xDF
   \   0000005C   930000C1           STS     193, R16
     84                    UCSR0A |= (__BIT_MASK( TXC0)) ;               // Clear int bit in TXC.
   \   00000060   910000C0           LDS     R16, 192
   \   00000064   6400               ORI     R16, 0x40
   \   00000066   930000C0           STS     192, R16
     85                    UCSR0B |= __BIT_MASK( TXCIE0) ;               // Enable TXC int.
   \   0000006A   910000C1           LDS     R16, 193
   \   0000006E   6400               ORI     R16, 0x40
   \   00000070   930000C1           STS     193, R16
     86              }           
     87          } 
   \   00000074   9508               RET
   \   00000076                      REQUIRE _A_UDR0
   \   00000076                      REQUIRE _A_UCSR0B
   \   00000076                      REQUIRE _A_UCSR0A
     88          #endif
     89          
     90          #pragma vector=USART0_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
     91          __interrupt void IntHandler_UDRE_USART0( void ){   
   \                     IntHandler_UDRE_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
     92              OS_CallISR(Int_Handler_UDRE_USART0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_UDRE_USART0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_UDRE_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
     93          }
     94          // USART1

   \                                 In  segment CODE, align 2, keep-with-next
     95           void Int_Handler_RX_USART1( void ){   
   \                     Int_Handler_RX_USART1:
   \   00000000   924A               ST      -Y, R4
   \   00000002   93BA               ST      -Y, R27
   \   00000004   93AA               ST      -Y, R26
   \   00000006                      REQUIRE ?Register_R4_is_cg_reg
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
     96              if ( UCSR1A & __BIT_MASK( DOR1 ) ) {                // Overrun error? 
   \   00000006   9100....           LDS     R16, _A_UCSR1A
     97              }
     98          
     99              if ( UCSR1A & __BIT_MASK( FE1 ) ) {                 // Framing error? 
   \   0000000A   9100....           LDS     R16, _A_UCSR1A
   \   0000000E   EFAA               LDI     R26, 250
   \   00000010   E0B0               LDI     R27, 0
   \   00000012   2444               CLR     R4
   \   00000014   9443               INC     R4
   \   00000016   C009               RJMP    ??Int_Handler_RX_USART1_0
    100              }
    101          
    102              while ( UCSR1A & __BIT_MASK( RXC1)  ) {                // New byte avaiable?
    103                  UART[1].pRxBuffer[ UART[1].RxFirst ] = UDR1;    // Read the character 
    104          
    105                  if (UART[1].RxState != HANDLE) {                // ok to receive? 
    106                      switch (UART[1].RxState) {                   // Yes, check state
    107                      case SYNC :
    108                          if ( UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SYN) {
    109                              UART[1].SyncCnt ++ ;                 // count sync
   \                     ??Int_Handler_RX_USART1_1:
   \   00000018   9100....           LDS     R16, (UART + 45)
   \   0000001C   9503               INC     R16
   \   0000001E   9300....           STS     (UART + 45), R16
    110                              UART[1].RxFirst = 0;                 // start at start of buff
   \   00000022   93B0....           STS     (UART + 38), R27
   \   00000026   93B0....           STS     (UART + 39), R27
    111                          } else if ((UART[1].SyncCnt >= 2) && 
   \                     ??Int_Handler_RX_USART1_0:
   \   0000002A   9100....           LDS     R16, _A_UCSR1A
   \   0000002E   FF07               SBRS    R16, 7
   \   00000030   C04A               RJMP    ??Int_Handler_RX_USART1_2
   \   00000032   9100....           LDS     R16, _A_UDR1
   \   00000036   91E0....           LDS     R30, (UART + 36)
   \   0000003A   91F0....           LDS     R31, (UART + 37)
   \   0000003E   9120....           LDS     R18, (UART + 38)
   \   00000042   9130....           LDS     R19, (UART + 39)
   \   00000046   0FE2               ADD     R30, R18
   \   00000048   1FF3               ADC     R31, R19
   \   0000004A   8300               ST      Z, R16
   \   0000004C   9100....           LDS     R16, (UART + 44)
   \   00000050   300A               CPI     R16, 10
   \   00000052   F359               BREQ    ??Int_Handler_RX_USART1_0
   \   00000054   2300               TST     R16
   \   00000056   F519               BRNE    ??Int_Handler_RX_USART1_3
   \   00000058   91E0....           LDS     R30, (UART + 36)
   \   0000005C   91F0....           LDS     R31, (UART + 37)
   \   00000060   9100....           LDS     R16, (UART + 38)
   \   00000064   9110....           LDS     R17, (UART + 39)
   \   00000068   0FE0               ADD     R30, R16
   \   0000006A   1FF1               ADC     R31, R17
   \   0000006C   8100               LD      R16, Z
   \   0000006E   3106               CPI     R16, 22
   \   00000070   F299               BREQ    ??Int_Handler_RX_USART1_1
    112                                     (UART[1].pRxBuffer[ UART[1].RxFirst ] == ANPRO10_SOH)) {       // minimum two sync bytes
   \   00000072   9110....           LDS     R17, (UART + 45)
   \   00000076   3012               CPI     R17, 2
   \   00000078   F078               BRCS    ??Int_Handler_RX_USART1_4
   \   0000007A   3001               CPI     R16, 1
   \   0000007C   F469               BRNE    ??Int_Handler_RX_USART1_4
    113                              UART[1].SyncCnt = 0 ;                // reset counter
   \   0000007E   93B0....           STS     (UART + 45), R27
    114                              UART[1].RxState = HEADER ;
   \   00000082   9240....           STS     (UART + 44), R4
    115                              UART[1].RxLast = 0 ;
   \   00000086   93B0....           STS     (UART + 40), R27
   \   0000008A   93B0....           STS     (UART + 41), R27
    116                              UART[1].RxTimeout = RX_TO_TIME ;      // reset timeout
   \   0000008E   93A0....           STS     (UART + 46), R26
   \   00000092   93B0....           STS     (UART + 47), R27
   \   00000096   CFC9               RJMP    ??Int_Handler_RX_USART1_0
    117                          } else {
    118                              UART[1].SyncCnt = 0 ;                // start over once more
   \                     ??Int_Handler_RX_USART1_4:
   \   00000098   93B0....           STS     (UART + 45), R27
   \   0000009C   CFC6               RJMP    ??Int_Handler_RX_USART1_0
    119                          }
    120                          break;
    121                      default :
    122                          if ((++UART[1].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??Int_Handler_RX_USART1_3:
   \   0000009E   9100....           LDS     R16, (UART + 38)
   \   000000A2   9110....           LDS     R17, (UART + 39)
   \   000000A6   5F0F               SUBI    R16, 255
   \   000000A8   4F1F               SBCI    R17, 255
   \   000000AA   9300....           STS     (UART + 38), R16
   \   000000AE   9310....           STS     (UART + 39), R17
   \   000000B2   3907               CPI     R16, 151
   \   000000B4   4010               SBCI    R17, 0
   \   000000B6   E001               LDI     R16, 1
   \   000000B8   F018               BRCS    ??Int_Handler_RX_USART1_5
    123                              GoToSyncUART(1) ;                    // go to sync mode
   \   000000BA   ........           CALL    GoToSyncUART
   \   000000BE   CFB5               RJMP    ??Int_Handler_RX_USART1_0
    124                          } else {
    125                              ReceivePacketUart(1) ;              // Check package
   \                     ??Int_Handler_RX_USART1_5:
   \   000000C0   ........           CALL    ReceivePacketUart
   \   000000C4   CFB2               RJMP    ??Int_Handler_RX_USART1_0
    126                          }
    127                          break ;   
    128                      }
    129                  }
    130              }
    131          } 
   \                     ??Int_Handler_RX_USART1_2:
   \   000000C6   91A9               LD      R26, Y+
   \   000000C8   91B9               LD      R27, Y+
   \   000000CA   9049               LD      R4, Y+
   \   000000CC   9508               RET
   \   000000CE                      REQUIRE _A_UCSR1A
   \   000000CE                      REQUIRE _A_UDR1
    132          
    133          #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    134          __interrupt void IntHandler_RX_USART1( void ){   
   \                     IntHandler_RX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    135              OS_CallISR(Int_Handler_RX_USART1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_RX_USART1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_RX_USART1/2) >> 8
   \   00000028                      REQUIRE ?Subroutine0
   \   00000028                      ;               // Fall through to label ?Subroutine0
    136          }
    137          

   \                                 In  segment CODE, align 2, keep-with-next
    138          void Int_Handler_TX_USART1( void ){   
   \                     Int_Handler_TX_USART1:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    139          
    140              UCSR1B &= ~(__BIT_MASK( TXCIE1)) ;            // transmission end, disable int.
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   7B0F               ANDI    R16, 0xBF
   \   00000006   930000C9           STS     201, R16
    141              PORTE &= ~0x08 ;                              // TXE1 off
   \   0000000A   9873               CBI     0x0E, 0x03
    142              OS_StopTimer(&TimerUSART1);                    // and stop timer
   \   0000000C   ....               LDI     R16, LOW(TimerUSART1)
   \   0000000E   ....               LDI     R17, (TimerUSART1) >> 8
   \   00000010   ........           CALL    OS_StopTimer
    143              GoToSyncUART(1) ;                                    // go to sync modus for recive
   \   00000014   E001               LDI     R16, 1
   \   00000016   ........           JMP     GoToSyncUART
   \   0000001A                      REQUIRE _A_UCSR1B
   \   0000001A                      REQUIRE _A_PORTE
    144          }
    145          
    146          #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    147          __interrupt void IntHandler_TX_USART1( void ){   
   \                     IntHandler_TX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    148              OS_CallISR(Int_Handler_TX_USART1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_TX_USART1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_TX_USART1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    149          }
    150          

   \                                 In  segment CODE, align 2, keep-with-next
    151          void Int_Handler_UDRE_USART1( void ){   
   \                     Int_Handler_UDRE_USART1:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    152          
    153               if ( UART[1].TxCount-- > 0 ) {
   \   00000000   9100....           LDS     R16, (UART + 32)
   \   00000004   9110....           LDS     R17, (UART + 33)
   \   00000008   2B01               OR      R16, R17
   \   0000000A   F101               BREQ    ??Int_Handler_UDRE_USART1_0
   \   0000000C   9100....           LDS     R16, (UART + 32)
   \   00000010   5001               SUBI    R16, 1
   \   00000012   4010               SBCI    R17, 0
   \   00000014   9300....           STS     (UART + 32), R16
   \   00000018   9310....           STS     (UART + 33), R17
    154                  UDR1 = UART[1].pTxBuffer[ UART[1].TxLast ];  // Send a character
   \   0000001C   91E0....           LDS     R30, (UART + 26)
   \   00000020   91F0....           LDS     R31, (UART + 27)
   \   00000024   9100....           LDS     R16, (UART + 30)
   \   00000028   9110....           LDS     R17, (UART + 31)
   \   0000002C   0FE0               ADD     R30, R16
   \   0000002E   1FF1               ADC     R31, R17
   \   00000030   8100               LD      R16, Z
   \   00000032   9300....           STS     _A_UDR1, R16
    155                  UART[1].TxLast++;
   \   00000036   9100....           LDS     R16, (UART + 30)
   \   0000003A   9110....           LDS     R17, (UART + 31)
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   9300....           STS     (UART + 30), R16
   \   00000046   9310....           STS     (UART + 31), R17
   \   0000004A   9508               RET
    156               } else {
   \                     ??Int_Handler_UDRE_USART1_0:
   \   0000004C   EF0F               LDI     R16, 255
   \   0000004E   9300....           STS     (UART + 32), R16
   \   00000052   9300....           STS     (UART + 33), R16
    157                  UCSR1B &= ~(__BIT_MASK( UDRIE1)) ;            // transmission end, disable int.
   \   00000056   910000C9           LDS     R16, 201
   \   0000005A   7D0F               ANDI    R16, 0xDF
   \   0000005C   930000C9           STS     201, R16
    158                  UCSR1A |= (__BIT_MASK( TXC1)) ;               // Clear int bit in TXC.
   \   00000060   910000C8           LDS     R16, 200
   \   00000064   6400               ORI     R16, 0x40
   \   00000066   930000C8           STS     200, R16
    159                  UCSR1B |= __BIT_MASK( TXCIE1) ;               // Enable TXC int.
   \   0000006A   910000C9           LDS     R16, 201
   \   0000006E   6400               ORI     R16, 0x40
   \   00000070   930000C9           STS     201, R16
    160               }
    161          } 
   \   00000074   9508               RET
   \   00000076                      REQUIRE _A_UDR1
   \   00000076                      REQUIRE _A_UCSR1B
   \   00000076                      REQUIRE _A_UCSR1A
    162          
    163          #pragma vector=USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    164          __interrupt void IntHandler_UDRE_USART1( void ){   
   \                     IntHandler_UDRE_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
   \   00000024                      REQUIRE __RSTACK_in_external_ram_new_way
    165              OS_CallISR(Int_Handler_UDRE_USART1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_UDRE_USART1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_UDRE_USART1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    166          }

   \                                 In  segment INTVEC, offset 0x64, root
   \                     `??IntHandler_RX_USART0::??INTVEC 100`:
   \   00000064   ........           JMP     IntHandler_RX_USART0

   \                                 In  segment INTVEC, offset 0x68, root
   \                     `??IntHandler_UDRE_USART0::??INTVEC 104`:
   \   00000068   ........           JMP     IntHandler_UDRE_USART0

   \                                 In  segment INTVEC, offset 0x6c, root
   \                     `??IntHandler_TX_USART0::??INTVEC 108`:
   \   0000006C   ........           JMP     IntHandler_TX_USART0

   \                                 In  segment INTVEC, offset 0x90, root
   \                     `??IntHandler_RX_USART1::??INTVEC 144`:
   \   00000090   ........           JMP     IntHandler_RX_USART1

   \                                 In  segment INTVEC, offset 0x94, root
   \                     `??IntHandler_UDRE_USART1::??INTVEC 148`:
   \   00000094   ........           JMP     IntHandler_UDRE_USART1

   \                                 In  segment INTVEC, offset 0x98, root
   \                     `??IntHandler_TX_USART1::??INTVEC 152`:
   \   00000098   ........           JMP     IntHandler_TX_USART1
    167          #endif /* USE_MODBUS_PROTOCOL == 0 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     16      2   IntHandler_RX_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_RX_USART1
       16      2   -> OS_CallISR
     16      2   IntHandler_TX_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_TX_USART1
       16      2   -> OS_CallISR
     16      2   IntHandler_UDRE_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_UDRE_USART1
       16      2   -> OS_CallISR
      3      2   Int_Handler_RX_USART0
        3      2   -> GoToSyncUART
        3      2   -> ReceivePacketUart
      3      2   Int_Handler_RX_USART1
        3      2   -> GoToSyncUART
        3      2   -> ReceivePacketUart
      0      2   Int_Handler_TX_USART0
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   Int_Handler_TX_USART1
        0      2   -> GoToSyncUART
        0      2   -> OS_StopTimer
      0      2   Int_Handler_UDRE_USART0
      0      2   Int_Handler_UDRE_USART1


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      42  ?Subroutine0
      42  IntHandler_RX_USART0
       4  IntHandler_RX_USART0::??INTVEC 100
      40  IntHandler_RX_USART1
       4  IntHandler_RX_USART1::??INTVEC 144
      42  IntHandler_TX_USART0
       4  IntHandler_TX_USART0::??INTVEC 108
      42  IntHandler_TX_USART1
       4  IntHandler_TX_USART1::??INTVEC 152
      42  IntHandler_UDRE_USART0
       4  IntHandler_UDRE_USART0::??INTVEC 104
      42  IntHandler_UDRE_USART1
       4  IntHandler_UDRE_USART1::??INTVEC 148
     206  Int_Handler_RX_USART0
     206  Int_Handler_RX_USART1
      26  Int_Handler_TX_USART0
      26  Int_Handler_TX_USART1
     118  Int_Handler_UDRE_USART0
     118  Int_Handler_UDRE_USART1
       1  _A_PORTE
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UDR0
       1  _A_UDR1

 
   7 bytes in segment ABSOLUTE
 992 bytes in segment CODE
  24 bytes in segment INTVEC
 
 992 bytes of CODE memory (+ 24 bytes shared)
   0 bytes of DATA memory (+  7 bytes shared)

Errors: none
Warnings: none
