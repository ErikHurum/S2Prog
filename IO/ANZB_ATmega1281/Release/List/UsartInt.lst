###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       08/Feb/2024  10:48:57
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWB70A.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\Obj" -D
#        OS_LIBMODE_R -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\List" -y
#        --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -Ohs)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\List\UsartInt.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\Obj\UsartInt.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\UsartInt.c
      1          /****************************************************************************************
      2          / USART1 functions and interrupt
      3          /   This routines sync and check the ANPRO10
      4          /   Uart1Pro.c handle the package
      5          /
      6          ***************************************************************************************/
      7          #if USE_MODBUS_PROTOCOL == 0
      8          
      9              #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xce
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc6
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
     10              #include "stdio.h"
     11              #include "math.h"
     12              #include "externals.h"
     13              #include "version.h"
     14              #pragma diag_suppress=Pa082
     15          
     16          
     17          
     18              #if USE_1281_RX_INT_TASK==1

   \                                 In  segment CODE, align 2, keep-with-next
     19          static void _ATMega1281_irq_handler(char Ch) {
   \                     _ATMega1281_irq_handler:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006   9721               SBIW    R29:R28, 1
   \   00000008   2F80               MOV     R24, R16
     20              char RxByte;
     21              OS_GetMail1(&UART[Ch].RxMailBox, &RxByte);
   \   0000000A   2F20               MOV     R18, R16
   \   0000000C   EF0D               LDI     R16, 253
   \   0000000E   E011               LDI     R17, 1
   \   00000010   9F21               MUL     R18, R17
   \   00000012   2D30               MOV     R19, R0
   \   00000014   9F20               MUL     R18, R16
   \   00000016   0D31               ADD     R19, R1
   \   00000018   ....               LDI     R26, LOW(UART)
   \   0000001A   ....               LDI     R27, (UART) >> 8
   \   0000001C   0DA0               ADD     R26, R0
   \   0000001E   1FB3               ADC     R27, R19
   \   00000020   019E               MOVW    R19:R18, R29:R28
   \   00000022   018D               MOVW    R17:R16, R27:R26
   \   00000024   500E               SUBI    R16, 14
   \   00000026   4F1E               SBCI    R17, 254
   \   00000028   ........           CALL    OS_GetMail1
     22          
     23              UART[Ch].pRxBuffer[UART[Ch].RxFirst] = RxByte;    // Read the character
   \   0000002C   018D               MOVW    R17:R16, R27:R26
   \   0000002E   540F               SUBI    R16, 79
   \   00000030   4F1E               SBCI    R17, 254
   \   00000032   8128               LD      R18, Y
   \   00000034   01F8               MOVW    R31:R30, R17:R16
   \   00000036   8140               LD      R20, Z
   \   00000038   8151               LDD     R21, Z+1
   \   0000003A   01FD               MOVW    R31:R30, R27:R26
   \   0000003C   0FE4               ADD     R30, R20
   \   0000003E   1FF5               ADC     R31, R21
   \   00000040   5EE5               SUBI    R30, 229
   \   00000042   4FFE               SBCI    R31, 254
   \   00000044   8320               ST      Z, R18
     24              switch (UART[Ch].RxState) {
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   8126               LDD     R18, Z+6
   \   0000004A   2322               TST     R18
   \   0000004C   F019               BREQ    ??_ATMega1281_irq_handler_0
   \   0000004E   502A               SUBI    R18, 10
   \   00000050   F1F1               BREQ    ??_ATMega1281_irq_handler_1
   \   00000052   C02F               RJMP    ??_ATMega1281_irq_handler_2
     25              case HANDLE:
     26                  // Not OK to receive as we are handling the message
     27                  break;
     28              case SYNC :
     29                  if (UART[Ch].pRxBuffer[UART[Ch].RxFirst] == ANPRO10_SYN) {
   \                     ??_ATMega1281_irq_handler_0:
   \   00000054   8120               LD      R18, Z
   \   00000056   8131               LDD     R19, Z+1
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   0FE2               ADD     R30, R18
   \   0000005C   1FF3               ADC     R31, R19
   \   0000005E   5EE5               SUBI    R30, 229
   \   00000060   4FFE               SBCI    R31, 254
   \   00000062   8120               LD      R18, Z
   \   00000064   3126               CPI     R18, 22
   \   00000066   F451               BRNE    ??_ATMega1281_irq_handler_3
     30                      UART[Ch].SyncCnt++;                 // count sync
   \   00000068   54A8               SUBI    R26, 72
   \   0000006A   4FBE               SBCI    R27, 254
   \   0000006C   912C               LD      R18, X
   \   0000006E   9523               INC     R18
   \   00000070   932C               ST      X, R18
     31                      UART[Ch].RxFirst = 0;                 // start at start of buff
   \   00000072   01F8               MOVW    R31:R30, R17:R16
   \   00000074   E000               LDI     R16, 0
   \   00000076   8300               ST      Z, R16
   \   00000078   8301               STD     Z+1, R16
   \   0000007A   C029               RJMP    ??_ATMega1281_irq_handler_1
     32                  } else if ((UART[Ch].SyncCnt >= 2) &&
     33                             (UART[Ch].pRxBuffer[UART[Ch].RxFirst] == ANPRO10_SOH)) {       // minimum two sync bytes
   \                     ??_ATMega1281_irq_handler_3:
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   8127               LDD     R18, Z+7
   \   00000080   3022               CPI     R18, 2
   \   00000082   F0A0               BRCS    ??_ATMega1281_irq_handler_4
   \   00000084   8120               LD      R18, Z
   \   00000086   8131               LDD     R19, Z+1
   \   00000088   0FA2               ADD     R26, R18
   \   0000008A   1FB3               ADC     R27, R19
   \   0000008C   5EA5               SUBI    R26, 229
   \   0000008E   4FBE               SBCI    R27, 254
   \   00000090   912C               LD      R18, X
   \   00000092   3021               CPI     R18, 1
   \   00000094   F459               BRNE    ??_ATMega1281_irq_handler_4
     34                      UART[Ch].SyncCnt = 0;                // reset counter
   \   00000096   E020               LDI     R18, 0
   \   00000098   8327               STD     Z+7, R18
     35                      UART[Ch].RxState = HEADER;
   \   0000009A   E021               LDI     R18, 1
   \   0000009C   8326               STD     Z+6, R18
     36                      UART[Ch].RxLast = 0;
   \   0000009E   E020               LDI     R18, 0
   \   000000A0   8322               STD     Z+2, R18
   \   000000A2   8323               STD     Z+3, R18
     37                      UART[Ch].RxTimeout = RX_TO_TIME;    // reset timeout
   \   000000A4   EF0A               LDI     R16, 250
   \   000000A6   8700               STD     Z+8, R16
   \   000000A8   8721               STD     Z+9, R18
   \   000000AA   C011               RJMP    ??_ATMega1281_irq_handler_1
     38                  } else {
     39                      UART[Ch].SyncCnt = 0;                // start over once more
   \                     ??_ATMega1281_irq_handler_4:
   \   000000AC   E000               LDI     R16, 0
   \   000000AE   8307               STD     Z+7, R16
   \   000000B0   C00E               RJMP    ??_ATMega1281_irq_handler_1
     40                  }
     41                  break;
     42              default :
     43                  if ((++UART[Ch].RxFirst) > RXSIZE_UART) { // Point to next location
   \                     ??_ATMega1281_irq_handler_2:
   \   000000B2   81A0               LD      R26, Z
   \   000000B4   81B1               LDD     R27, Z+1
   \   000000B6   9611               ADIW    R27:R26, 1
   \   000000B8   83A0               ST      Z, R26
   \   000000BA   83B1               STD     Z+1, R27
   \   000000BC   39A7               CPI     R26, 151
   \   000000BE   40B0               SBCI    R27, 0
   \   000000C0   2F08               MOV     R16, R24
   \   000000C2   F018               BRCS    ??_ATMega1281_irq_handler_5
     44                      GoToSyncUART(Ch);                       // go to sync mode
   \   000000C4   ........           CALL    GoToSyncUART
   \   000000C8   C002               RJMP    ??_ATMega1281_irq_handler_1
     45                  } else {
     46                      ReceivePacketUart(Ch);              // Check package
   \                     ??_ATMega1281_irq_handler_5:
   \   000000CA   ........           CALL    ReceivePacketUart
     47                  }
     48                  break;
     49              }
     50          }
   \                     ??_ATMega1281_irq_handler_1:
   \   000000CE   9621               ADIW    R29:R28, 1
   \   000000D0   9189               LD      R24, Y+
   \   000000D2   91A9               LD      R26, Y+
   \   000000D4   91B9               LD      R27, Y+
   \   000000D6   9508               RET
     51          
     52                  #pragma diag_suppress=Pe767
     53          

   \                                 In  segment CODE, align 2, keep-with-next
     54          void ATMega1281_RX_driver_task(void *pVoid) {
   \                     ATMega1281_RX_driver_task:
   \   00000000   938A               ST      -Y, R24
     55              char Ch = (char)pVoid;
   \   00000002   2F80               MOV     R24, R16
     56              Init_USART(Ch, 38400);              //
   \   00000004   E040               LDI     R20, 0
   \   00000006   E956               LDI     R21, 150
   \   00000008   E060               LDI     R22, 0
   \   0000000A   E070               LDI     R23, 0
   \   0000000C   ........           CALL    Init_USART
     57              while (1) {
     58                  _ATMega1281_irq_handler(Ch);
   \                     ??ATMega1281_RX_driver_task_0:
   \   00000010   2F08               MOV     R16, R24
   \   00000012   ....               RCALL   _ATMega1281_irq_handler
   \   00000014   CFFD               RJMP    ??ATMega1281_RX_driver_task_0
     59              }
     60          }
     61          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     62          OS_TASK TCB_ATMega1281RX_Driver0;
   \                     TCB_ATMega1281RX_Driver0:
   \   00000000                      DS8 20
     63          OS_TASK TCB_ATMega1281RX_Driver1;
   \                     TCB_ATMega1281RX_Driver1:
   \   00000014                      DS8 20

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     64          static OS_STACKPTR int stack1[300], stack2[300]; /* Task stacks */
   \                     stack1:
   \   00000000                      DS8 600

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     stack2:
   \   00000000                      DS8 600
     65          

   \                                 In  segment CODE, align 2, keep-with-next
     66          void ATMega1281_driver_task_init(void) {
   \                     ATMega1281_driver_task_init:
     67              OS_CREATETASK_EX(&TCB_ATMega1281RX_Driver0, "ATMega1281 RX Driver0", ATMega1281_RX_driver_task, 121, stack1, (void *)0);
   \   00000000   E000               LDI     R16, 0
   \   00000002   E010               LDI     R17, 0
   \   00000004   930A               ST      -Y, R16
   \   00000006   930A               ST      -Y, R16
   \   00000008   E002               LDI     R16, 2
   \   0000000A   931A               ST      -Y, R17
   \   0000000C   930A               ST      -Y, R16
   \   0000000E   E508               LDI     R16, 88
   \   00000010   E012               LDI     R17, 2
   \   00000012   931A               ST      -Y, R17
   \   00000014   930A               ST      -Y, R16
   \   00000016   ....               LDI     R16, LOW(stack1)
   \   00000018   ....               LDI     R17, (stack1) >> 8
   \   0000001A   931A               ST      -Y, R17
   \   0000001C   930A               ST      -Y, R16
   \   0000001E   ....               LDI     R22, LOW(ATMega1281_RX_driver_task/2)
   \   00000020   ....               LDI     R23, (ATMega1281_RX_driver_task/2) >> 8
   \   00000022   E749               LDI     R20, 121
   \   00000024   ....               LDI     R18, LOW(`?<Constant "ATMega1281 RX Driver0">`)
   \   00000026   ....               LDI     R19, (`?<Constant "ATMega1281 RX Driver0">`) >> 8
   \   00000028   ....               LDI     R16, LOW(TCB_ATMega1281RX_Driver0)
   \   0000002A   ....               LDI     R17, (TCB_ATMega1281RX_Driver0) >> 8
   \   0000002C   ........           CALL    OS_CreateTaskEx_R
     68              OS_CREATETASK_EX(&TCB_ATMega1281RX_Driver1, "ATMega1281 RX Driver1", ATMega1281_RX_driver_task, 120, stack2, (void *)1);
   \   00000030   E001               LDI     R16, LOW(1)
   \   00000032   E010               LDI     R17, (1) >> 8
   \   00000034   931A               ST      -Y, R17
   \   00000036   930A               ST      -Y, R16
   \   00000038   E002               LDI     R16, 2
   \   0000003A   931A               ST      -Y, R17
   \   0000003C   930A               ST      -Y, R16
   \   0000003E   E508               LDI     R16, 88
   \   00000040   E012               LDI     R17, 2
   \   00000042   931A               ST      -Y, R17
   \   00000044   930A               ST      -Y, R16
   \   00000046   ....               LDI     R16, LOW(stack2)
   \   00000048   ....               LDI     R17, (stack2) >> 8
   \   0000004A   931A               ST      -Y, R17
   \   0000004C   930A               ST      -Y, R16
   \   0000004E   ....               LDI     R22, LOW(ATMega1281_RX_driver_task/2)
   \   00000050   ....               LDI     R23, (ATMega1281_RX_driver_task/2) >> 8
   \   00000052   E748               LDI     R20, 120
   \   00000054   ....               LDI     R18, LOW((`?<Constant "ATMega1281 RX Driver0">` + 22))
   \   00000056   ....               LDI     R19, HIGH((`?<Constant "ATMega1281 RX Driver0">` + 22))
   \   00000058   ....               LDI     R16, LOW((TCB_ATMega1281RX_Driver0 + 20))
   \   0000005A   ....               LDI     R17, HIGH((TCB_ATMega1281RX_Driver0 + 20))
   \   0000005C   ........           JMP     OS_CreateTaskEx_R
     69          }
     70              #endif
     71          
     72          
     73          
     74          // USART0

   \                                 In  segment CODE, align 2, keep-with-next
     75          void Int_Handler_RX_USART0(void) {
   \                     Int_Handler_RX_USART0:
     76          
     77              if (UCSR0A & __BIT_MASK(DOR0)) {                // Overrun error?
   \   00000000   9100....           LDS     R16, _A_UCSR0A
     78              }
     79          
     80              if (UCSR0A & __BIT_MASK(FE0)) {                 // Framing error?
   \   00000004   9100....           LDS     R16, _A_UCSR0A
   \   00000008   C00A               RJMP    ??Int_Handler_RX_USART0_0
     81              }
     82          #if USE_1281_RX_INT_TASK==0
     83              while (UCSR0A & __BIT_MASK(RXC0)) {                // New byte avaiable?
     84                  UART[0].pRxBuffer[UART[0].RxFirst] = UDR0;    // Read the character
     85          
     86                  if (UART[0].RxState != HANDLE) {                // ok to receive?
     87                      switch (UART[0].RxState) {                   // Yes, check state
     88                      case SYNC :
     89                          if (UART[0].pRxBuffer[UART[0].RxFirst] == ANPRO10_SYN) {
     90                              UART[0].SyncCnt++;                 // count sync
     91                              UART[0].RxFirst = 0;                 // start at start of buff
     92                          } else if ((UART[0].SyncCnt >= 2) &&
     93                                     (UART[0].pRxBuffer[UART[0].RxFirst] == ANPRO10_SOH)) {       // minimum two sync bytes
     94                              UART[0].SyncCnt = 0;                // reset counter
     95                              UART[0].RxState = HEADER;
     96                              UART[0].RxLast = 0;
     97                              UART[0].RxTimeout = RX_TO_TIME;    // reset timeout
     98                          } else {
     99                              UART[0].SyncCnt = 0;                // start over once more
    100                          }
    101                          break;
    102                      default :
    103                          if ((++UART[0].RxFirst) > RXSIZE_UART) { // Point to next location
    104                              GoToSyncUART(0);                       // go to sync mode
    105                          } else {
    106                              ReceivePacketUart(0);              // Check package
    107                          }
    108                          break;
    109                      }
    110                  }
    111              }
    112          #else
    113              while (UCSR0A & __BIT_MASK(RXC0)) {                 // New byte avaiable?
    114                  UART[0].RxByte = UDR0;                          // Read the character
   \                     ??Int_Handler_RX_USART0_1:
   \   0000000A   9100....           LDS     R16, _A_UDR0
   \   0000000E   9300....           STS     (UART + 447), R16
    115                  //if (OS_IsTask(&TCB_ATMega1281RX_Driver0)) {
    116                      OS_PutMailCond1(&UART[0].RxMailBox, &UART[0].RxByte);
   \   00000012   ....               LDI     R18, LOW((UART + 447))
   \   00000014   ....               LDI     R19, HIGH((UART + 447))
   \   00000016   ....               LDI     R16, LOW((UART + 498))
   \   00000018   ....               LDI     R17, HIGH((UART + 498))
   \   0000001A   ........           CALL    OS_PutMailCond1
    117                  //}
    118              }
   \                     ??Int_Handler_RX_USART0_0:
   \   0000001E   9100....           LDS     R16, _A_UCSR0A
   \   00000022   FD07               SBRC    R16, 7
   \   00000024   CFF2               RJMP    ??Int_Handler_RX_USART0_1
    119          #endif
    120          
    121          }
   \   00000026   9508               RET
   \   00000028                      REQUIRE _A_UCSR0A
   \   00000028                      REQUIRE _A_UDR0
    122          
    123          
    124              #pragma vector=USART0_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    125          __interrupt void IntHandler_RX_USART0(void) {
   \                     IntHandler_RX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    126              OS_CallISR(Int_Handler_RX_USART0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_RX_USART0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_RX_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    127          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   ........           CALL    OS_CallISR
   \   00000004   BF9B               OUT     0x3B, R25
   \   00000006   BF8F               OUT     0x3F, R24
   \   00000008   9109               LD      R16, Y+
   \   0000000A   9119               LD      R17, Y+
   \   0000000C   9129               LD      R18, Y+
   \   0000000E   9139               LD      R19, Y+
   \   00000010   9149               LD      R20, Y+
   \   00000012   9159               LD      R21, Y+
   \   00000014   9169               LD      R22, Y+
   \   00000016   9179               LD      R23, Y+
   \   00000018   9009               LD      R0, Y+
   \   0000001A   9019               LD      R1, Y+
   \   0000001C   9029               LD      R2, Y+
   \   0000001E   9039               LD      R3, Y+
   \   00000020   91E9               LD      R30, Y+
   \   00000022   91F9               LD      R31, Y+
   \   00000024   9189               LD      R24, Y+
   \   00000026   9199               LD      R25, Y+
   \   00000028   9518               RETI
    128          

   \                                 In  segment CODE, align 2, keep-with-next
    129          void Int_Handler_TX_USART0(void) {
   \                     Int_Handler_TX_USART0:
    130          
    131              UCSR0B &= ~(__BIT_MASK(TXCIE0));            // transmission end, disable int.
   \   00000000   910000C1           LDS     R16, 193
   \   00000004   7B0F               ANDI    R16, 0xBF
   \   00000006   930000C1           STS     193, R16
    132              PORTE &= ~0x04;                              // TXE0 off
   \   0000000A   9872               CBI     0x0E, 0x02
    133          #if USE_1281_RX_INT_TASK == 0
    134              OS_StopTimer(&TimerUSART0);                    // and stop timer
    135          #endif
    136              GoToSyncUART(0);                                    // go to sync modus for recive
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   ........           JMP     GoToSyncUART
   \   00000012                      REQUIRE _A_UCSR0B
   \   00000012                      REQUIRE _A_PORTE
    137          
    138          }
    139          
    140              #pragma vector=USART0_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    141          __interrupt void IntHandler_TX_USART0(void) {
   \                     IntHandler_TX_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    142              OS_CallISR(Int_Handler_TX_USART0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_TX_USART0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_TX_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    143          }
    144          

   \                                 In  segment CODE, align 2, keep-with-next
    145          void Int_Handler_UDRE_USART0(void) {
   \                     Int_Handler_UDRE_USART0:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002   019C               MOVW    R19:R18, R25:R24
    146              if (UART[0].TxCount-- > 0) {
   \   00000004   ....               LDI     R30, LOW((UART + 277))
   \   00000006   ....               LDI     R31, HIGH((UART + 277))
   \   00000008   8102               LDD     R16, Z+2
   \   0000000A   8113               LDD     R17, Z+3
   \   0000000C   01C8               MOVW    R25:R24, R17:R16
   \   0000000E   9701               SBIW    R25:R24, 1
   \   00000010   8382               STD     Z+2, R24
   \   00000012   8393               STD     Z+3, R25
   \   00000014   2B01               OR      R16, R17
   \   00000016   F071               BREQ    ??Int_Handler_UDRE_USART0_0
    147                  UDR0 = UART[0].pTxBuffer[UART[0].TxLast];     // Send a character
   \   00000018   81A0               LD      R26, Z
   \   0000001A   81B1               LDD     R27, Z+1
   \   0000001C   ....               SUBI    R26, LOW((-(UART) & 0xFFFF))
   \   0000001E   ....               SBCI    R27, (-(UART) & 0xFFFF) >> 8
   \   00000020   910C               LD      R16, X
   \   00000022   9300....           STS     _A_UDR0, R16
    148                  UART[0].TxLast++;
   \   00000026   8100               LD      R16, Z
   \   00000028   8111               LDD     R17, Z+1
   \   0000002A   5F0F               SUBI    R16, 255
   \   0000002C   4F1F               SBCI    R17, 255
   \   0000002E   8300               ST      Z, R16
   \   00000030   8311               STD     Z+1, R17
   \   00000032   C012               RJMP    ??Int_Handler_UDRE_USART0_1
    149              } else {                                             // Last byte sent?
    150                  UCSR0B &= ~(__BIT_MASK(UDRIE0));            // transmission end, disable int.
   \                     ??Int_Handler_UDRE_USART0_0:
   \   00000034   910000C1           LDS     R16, 193
   \   00000038   7D0F               ANDI    R16, 0xDF
   \   0000003A   930000C1           STS     193, R16
    151                  UCSR0A |= (__BIT_MASK(TXC0));               // Clear int bit in TXC.
   \   0000003E   910000C0           LDS     R16, 192
   \   00000042   6400               ORI     R16, 0x40
   \   00000044   930000C0           STS     192, R16
    152                  UCSR0B |= __BIT_MASK(TXCIE0);       // Enable TXC int.
   \   00000048   910000C1           LDS     R16, 193
   \   0000004C   6400               ORI     R16, 0x40
   \   0000004E   930000C1           STS     193, R16
    153                  UART[0].RxState = SYNC;
   \   00000052   E000               LDI     R16, 0
   \   00000054   9300....           STS     (UART + 439), R16
    154              }
    155          }
   \                     ??Int_Handler_UDRE_USART0_1:
   \   00000058   01C9               MOVW    R25:R24, R19:R18
   \   0000005A   01DA               MOVW    R27:R26, R21:R20
   \   0000005C   9508               RET
   \   0000005E                      REQUIRE _A_UDR0
   \   0000005E                      REQUIRE _A_UCSR0B
   \   0000005E                      REQUIRE _A_UCSR0A
    156          
    157          
    158              #pragma vector=USART0_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    159          __interrupt void IntHandler_UDRE_USART0(void) {
   \                     IntHandler_UDRE_USART0:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    160              OS_CallISR(Int_Handler_UDRE_USART0);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_UDRE_USART0/2)
   \   00000026   ....               LDI     R17, (Int_Handler_UDRE_USART0/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    161          }
    162          // USART1

   \                                 In  segment CODE, align 2, keep-with-next
    163          void Int_Handler_RX_USART1(void) {
   \                     Int_Handler_RX_USART1:
   \   00000000   C00A               RJMP    ??Int_Handler_RX_USART1_0
    164          #if USE_1281_RX_INT_TASK==0
    165          
    166              if (UCSR1A & __BIT_MASK(DOR1)) {                // Overrun error?
    167              }
    168          
    169              if (UCSR1A & __BIT_MASK(FE1)) {                 // Framing error?
    170              }
    171          
    172              while (UCSR1A & __BIT_MASK(RXC1)) {                // New byte avaiable?
    173                  UART[1].pRxBuffer[UART[1].RxFirst] = UDR1;    // Read the character
    174          
    175                  if (UART[1].RxState != HANDLE) {                // ok to receive?
    176                      switch (UART[1].RxState) {                   // Yes, check state
    177                      case SYNC :
    178                          if (UART[1].pRxBuffer[UART[1].RxFirst] == ANPRO10_SYN) {
    179                              UART[1].SyncCnt++;                 // count sync
    180                              UART[1].RxFirst = 0;                 // start at start of buff
    181                          } else if ((UART[1].SyncCnt >= 2) &&
    182                                     (UART[1].pRxBuffer[UART[1].RxFirst] == ANPRO10_SOH)) {       // minimum two sync bytes
    183                              UART[1].SyncCnt = 0;                // reset counter
    184                              UART[1].RxState = HEADER;
    185                              UART[1].RxLast = 0;
    186                              UART[1].RxTimeout = RX_TO_TIME;      // reset timeout
    187                          } else {
    188                              UART[1].SyncCnt = 0;                // start over once more
    189                          }
    190                          break;
    191                      default :
    192                          if ((++UART[1].RxFirst) > RXSIZE_UART) { // Point to next location
    193                              GoToSyncUART(1);                    // go to sync mode
    194                          } else {
    195                              ReceivePacketUart(1);              // Check package
    196                          }
    197                          break;
    198                      }
    199                  }
    200              }
    201          #else
    202              while (UCSR1A & __BIT_MASK(RXC1)) {                // New byte avaiable?
    203                  UART[1].RxByte = UDR1;    // Read the character
   \                     ??Int_Handler_RX_USART1_1:
   \   00000002   9100....           LDS     R16, _A_UDR1
   \   00000006   9300....           STS     (UART + 956), R16
    204                  //if (OS_IsTask(&TCB_ATMega1281RX_Driver1)) {
    205                      OS_PutMailCond1(&UART[1].RxMailBox, &UART[1].RxByte);
   \   0000000A   ....               LDI     R18, LOW((UART + 956))
   \   0000000C   ....               LDI     R19, HIGH((UART + 956))
   \   0000000E   ....               LDI     R16, LOW((UART + 1007))
   \   00000010   ....               LDI     R17, HIGH((UART + 1007))
   \   00000012   ........           CALL    OS_PutMailCond1
    206                  //}
    207              }
   \                     ??Int_Handler_RX_USART1_0:
   \   00000016   9100....           LDS     R16, _A_UCSR1A
   \   0000001A   FD07               SBRC    R16, 7
   \   0000001C   CFF2               RJMP    ??Int_Handler_RX_USART1_1
    208          #endif
    209          
    210          }
   \   0000001E   9508               RET
   \   00000020                      REQUIRE _A_UDR1
   \   00000020                      REQUIRE _A_UCSR1A
    211          
    212              #pragma vector=USART1_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    213          __interrupt void IntHandler_RX_USART1(void) {
   \                     IntHandler_RX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    214              OS_CallISR(Int_Handler_RX_USART1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_RX_USART1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_RX_USART1/2) >> 8
   \   00000028                      REQUIRE ?Subroutine0
   \   00000028                      ;               // Fall through to label ?Subroutine0
    215          }
    216          

   \                                 In  segment CODE, align 2, keep-with-next
    217          void Int_Handler_TX_USART1(void) {
   \                     Int_Handler_TX_USART1:
    218          
    219              UCSR1B &= ~(__BIT_MASK(TXCIE1));            // transmission end, disable int.
   \   00000000   910000C9           LDS     R16, 201
   \   00000004   7B0F               ANDI    R16, 0xBF
   \   00000006   930000C9           STS     201, R16
    220              PORTE &= ~0x08;                              // TXE1 off
   \   0000000A   9873               CBI     0x0E, 0x03
    221          //    OS_StopTimer(&TimerUSART1);                    // and stop timer
    222              GoToSyncUART(1);                                    // go to sync modus for recive
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   ........           JMP     GoToSyncUART
   \   00000012                      REQUIRE _A_UCSR1B
   \   00000012                      REQUIRE _A_PORTE
    223          }
    224          
    225              #pragma vector=USART1_TX_vect

   \                                 In  segment CODE, align 2, keep-with-next
    226          __interrupt void IntHandler_TX_USART1(void) {
   \                     IntHandler_TX_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    227              OS_CallISR(Int_Handler_TX_USART1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_TX_USART1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_TX_USART1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    228          }
    229          

   \                                 In  segment CODE, align 2, keep-with-next
    230          void Int_Handler_UDRE_USART1(void) {
   \                     Int_Handler_UDRE_USART1:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002   019C               MOVW    R19:R18, R25:R24
    231          
    232              if (UART[1].TxCount-- > 0) {
   \   00000004   ....               LDI     R30, LOW((UART + 786))
   \   00000006   ....               LDI     R31, HIGH((UART + 786))
   \   00000008   8102               LDD     R16, Z+2
   \   0000000A   8113               LDD     R17, Z+3
   \   0000000C   01C8               MOVW    R25:R24, R17:R16
   \   0000000E   9701               SBIW    R25:R24, 1
   \   00000010   8382               STD     Z+2, R24
   \   00000012   8393               STD     Z+3, R25
   \   00000014   2B01               OR      R16, R17
   \   00000016   F071               BREQ    ??Int_Handler_UDRE_USART1_0
    233                  UDR1 = UART[1].pTxBuffer[UART[1].TxLast];     // Send a character
   \   00000018   81A0               LD      R26, Z
   \   0000001A   81B1               LDD     R27, Z+1
   \   0000001C   ....               SUBI    R26, LOW((-(UART + 509) & 0xFFFF))
   \   0000001E   ....               SBCI    R27, HIGH((-(UART + 509) & 0xFFFF))
   \   00000020   910C               LD      R16, X
   \   00000022   9300....           STS     _A_UDR1, R16
    234                  UART[1].TxLast++;
   \   00000026   8100               LD      R16, Z
   \   00000028   8111               LDD     R17, Z+1
   \   0000002A   5F0F               SUBI    R16, 255
   \   0000002C   4F1F               SBCI    R17, 255
   \   0000002E   8300               ST      Z, R16
   \   00000030   8311               STD     Z+1, R17
   \   00000032   C00F               RJMP    ??Int_Handler_UDRE_USART1_1
    235              } else {
    236                  UCSR1B &= ~(__BIT_MASK(UDRIE1));            // transmission end, disable int.
   \                     ??Int_Handler_UDRE_USART1_0:
   \   00000034   910000C9           LDS     R16, 201
   \   00000038   7D0F               ANDI    R16, 0xDF
   \   0000003A   930000C9           STS     201, R16
    237                  UCSR1A |= (__BIT_MASK(TXC1));               // Clear int bit in TXC.
   \   0000003E   910000C8           LDS     R16, 200
   \   00000042   6400               ORI     R16, 0x40
   \   00000044   930000C8           STS     200, R16
    238                  UCSR1B |= __BIT_MASK(TXCIE1);       // Enable TXC int.
   \   00000048   910000C9           LDS     R16, 201
   \   0000004C   6400               ORI     R16, 0x40
   \   0000004E   930000C9           STS     201, R16
    239              }
    240          }
   \                     ??Int_Handler_UDRE_USART1_1:
   \   00000052   01C9               MOVW    R25:R24, R19:R18
   \   00000054   01DA               MOVW    R27:R26, R21:R20
   \   00000056   9508               RET
   \   00000058                      REQUIRE _A_UDR1
   \   00000058                      REQUIRE _A_UCSR1B
   \   00000058                      REQUIRE _A_UCSR1A
    241          
    242              #pragma vector=USART1_UDRE_vect

   \                                 In  segment CODE, align 2, keep-with-next
    243          __interrupt void IntHandler_UDRE_USART1(void) {
   \                     IntHandler_UDRE_USART1:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
    244              OS_CallISR(Int_Handler_UDRE_USART1);
   \   00000024   ....               LDI     R16, LOW(Int_Handler_UDRE_USART1/2)
   \   00000026   ....               LDI     R17, (Int_Handler_UDRE_USART1/2) >> 8
   \   00000028   ....               RJMP    ?Subroutine0
    245          }

   \                                 In  segment INTVEC, offset 0x64, root
   \                     `??IntHandler_RX_USART0::??INTVEC 100`:
   \   00000064   ........           JMP     IntHandler_RX_USART0

   \                                 In  segment INTVEC, offset 0x68, root
   \                     `??IntHandler_UDRE_USART0::??INTVEC 104`:
   \   00000068   ........           JMP     IntHandler_UDRE_USART0

   \                                 In  segment INTVEC, offset 0x6c, root
   \                     `??IntHandler_TX_USART0::??INTVEC 108`:
   \   0000006C   ........           JMP     IntHandler_TX_USART0

   \                                 In  segment INTVEC, offset 0x90, root
   \                     `??IntHandler_RX_USART1::??INTVEC 144`:
   \   00000090   ........           JMP     IntHandler_RX_USART1

   \                                 In  segment INTVEC, offset 0x94, root
   \                     `??IntHandler_UDRE_USART1::??INTVEC 148`:
   \   00000094   ........           JMP     IntHandler_UDRE_USART1

   \                                 In  segment INTVEC, offset 0x98, root
   \                     `??IntHandler_TX_USART1::??INTVEC 152`:
   \   00000098   ........           JMP     IntHandler_TX_USART1

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ATMega1281 RX Dri`:
   \   00000000   5441654D6167       DC8 "ATMega1281 RX Driver0"
   \              323131385220
   \              205872447669
   \              72650030    
   \                     `?<Initializer for <Constant "ATMega1281 RX Dri_1`:
   \   00000016   5441654D6167       DC8 "ATMega1281 RX Driver1"
   \              323131385220
   \              205872447669
   \              72650031    

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "ATMega1281 RX Driver0">`:
   \   00000000                      DS8 22
   \   00000016                      REQUIRE `?<Initializer for <Constant "ATMega1281 RX Dri`
   \   00000016                      DS8 22
   \   0000002C                      REQUIRE `?<Initializer for <Constant "ATMega1281 RX Dri_1`
    246          
    247          #endif /* USE_MODBUS_PROTOCOL == 0 */
    248          
    249          
    250          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   ATMega1281_RX_driver_task
        1      2   -> Init_USART
        1      2   -> _ATMega1281_irq_handler
      8      2   ATMega1281_driver_task_init
        0      2   -> OS_CreateTaskEx_R
     16      2   IntHandler_RX_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_RX_USART1
       16      2   -> OS_CallISR
     16      2   IntHandler_TX_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_TX_USART1
       16      2   -> OS_CallISR
     16      2   IntHandler_UDRE_USART0
       16      2   -> OS_CallISR
     16      2   IntHandler_UDRE_USART1
       16      2   -> OS_CallISR
      0      2   Int_Handler_RX_USART0
        0      2   -> OS_PutMailCond1
      0      2   Int_Handler_RX_USART1
        0      2   -> OS_PutMailCond1
      0      2   Int_Handler_TX_USART0
        0      2   -> GoToSyncUART
      0      2   Int_Handler_TX_USART1
        0      2   -> GoToSyncUART
      0      2   Int_Handler_UDRE_USART0
      0      2   Int_Handler_UDRE_USART1
      4      2   _ATMega1281_irq_handler
        4      2   -> GoToSyncUART
        4      2   -> OS_GetMail1
        4      2   -> ReceivePacketUart


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      44  ?<Constant "ATMega1281 RX Driver0">
      44  ?<Initializer for <Constant "ATMega1281 RX Dri
      42  ?Subroutine0
      22  ATMega1281_RX_driver_task
      96  ATMega1281_driver_task_init
      42  IntHandler_RX_USART0
       4  IntHandler_RX_USART0::??INTVEC 100
      40  IntHandler_RX_USART1
       4  IntHandler_RX_USART1::??INTVEC 144
      42  IntHandler_TX_USART0
       4  IntHandler_TX_USART0::??INTVEC 108
      42  IntHandler_TX_USART1
       4  IntHandler_TX_USART1::??INTVEC 152
      42  IntHandler_UDRE_USART0
       4  IntHandler_UDRE_USART0::??INTVEC 104
      42  IntHandler_UDRE_USART1
       4  IntHandler_UDRE_USART1::??INTVEC 148
      40  Int_Handler_RX_USART0
      32  Int_Handler_RX_USART1
      18  Int_Handler_TX_USART0
      18  Int_Handler_TX_USART1
      94  Int_Handler_UDRE_USART0
      88  Int_Handler_UDRE_USART1
      40  TCB_ATMega1281RX_Driver0
          TCB_ATMega1281RX_Driver1
     216  _ATMega1281_irq_handler
       1  _A_PORTE
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UDR0
       1  _A_UDR1
     600  stack1
     600  stack2
      14  -- Other

 
     7 bytes in segment ABSOLUTE
   916 bytes in segment CODE
    14 bytes in segment INITTAB
    24 bytes in segment INTVEC
    44 bytes in segment NEAR_I
    44 bytes in segment NEAR_ID
 1 240 bytes in segment NEAR_Z
 
   960 bytes of CODE memory (+ 38 bytes shared)
 1 284 bytes of DATA memory (+  7 bytes shared)

Errors: none
Warnings: none
