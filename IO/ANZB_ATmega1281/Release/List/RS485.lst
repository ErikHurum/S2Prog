###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       10/May/2023  12:10:44
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  D:\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWA80F.tmp
#        (D:\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c --cpu=m1281 -ms -o
#        D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj -D OS_LIBMODE_R -D OS_UART=-1
#        -D USE_16552_DRIVER_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0
#        -lCN D:\S2Prog\IO\ANZB_ATmega1281\Release\List -y
#        --initializers_in_flash --no_tbaa --enable_external_bus
#        -DENABLE_BIT_DEFINITIONS -e -I D:\S2Prog\IO\ANZB_ATmega1281\INC\\ -I
#        D:\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\ --eeprom_size 4096
#        --clib -Oh)
#    Locale       =  English_USA.1252
#    List file    =  D:\S2Prog\IO\ANZB_ATmega1281\Release\List\RS485.lst
#    Object file  =  D:\S2Prog\IO\ANZB_ATmega1281\Release\Obj\RS485.r90
#
###############################################################################

D:\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          #if USE_MODBUS_PROTOCOL == 1
     14          #include "common_def.h"
     15          
     16          #endif /* USE_MODBUS_PROTOCOL == 1 */
     17          
     18          
     19          /************************************************ *************************
     20          *   (This is a timer calback)
     21          *  Timout timer UART 0
     22          *
     23          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     24          void TimoutUART0(void) {
   \                     TimoutUART0:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     25          
     26              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   9100220C           LDS     R16, 8716
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   9300220C           STS     8716, R16
     27          }
   \   0000000A   9508               RET
     28          
     29          /*************************************************************************
     30          *   (This is a timer calback)
     31          *  Timout timer UART 1
     32          *
     33          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     34          void TimoutUART1(void) {
   \                     TimoutUART1:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
     35          
     36              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   91002204           LDS     R16, 8708
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   93002204           STS     8708, R16
     37          }
   \   0000000A   9508               RET
     38          
     39          
     40          /*************************************************************************
     41          *   (This is a task)
     42          *  Usart handler UART send request
     43          *
     44          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     45          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   92DA               ST      -Y, R13
   \   00000002   92CA               ST      -Y, R12
   \   00000004   92BA               ST      -Y, R11
   \   00000006   929A               ST      -Y, R9
   \   00000008   928A               ST      -Y, R8
   \   0000000A   927A               ST      -Y, R7
   \   0000000C   926A               ST      -Y, R6
   \   0000000E   925A               ST      -Y, R5
   \   00000010   924A               ST      -Y, R4
   \   00000012   93BA               ST      -Y, R27
   \   00000014   93AA               ST      -Y, R26
   \   00000016   939A               ST      -Y, R25
   \   00000018   938A               ST      -Y, R24
   \   0000001A                      REQUIRE ?Register_R4_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R7_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R13_is_cg_reg
   \   0000001A                      REQUIRE __RSTACK_in_external_ram_new_way
     46              char SeqCnt = 0;
   \   0000001A   E090               LDI     R25, 0
     47              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   0000001C   E005               LDI     R16, 5
   \   0000001E   2EB0               MOV     R11, R16
     48              char EventStatus;
     49              char AskMD[2];
     50              char temp;
     51          
     52              
     53              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000020   E840               LDI     R20, 128
   \   00000022   E255               LDI     R21, 37
   \   00000024   E060               LDI     R22, 0
   \   00000026   E070               LDI     R23, 0
   \   00000028   E000               LDI     R16, 0
   \   0000002A   ....               RCALL   Init16552
     54              Init16552(1, 9600);                                      // Init UART channel 1
   \   0000002C   9390....           STS     (UART16552 + 28), R25
   \   00000030   9390....           STS     (UART16552 + 29), R25
   \   00000034   9390....           STS     (UART16552 + 30), R25
   \   00000038   9390....           STS     (UART16552 + 31), R25
   \   0000003C   9390....           STS     (UART16552 + 32), R25
   \   00000040   9390....           STS     (UART16552 + 33), R25
   \   00000044   9390....           STS     (UART16552 + 38), R25
   \   00000048   9390....           STS     (UART16552 + 39), R25
   \   0000004C   9390....           STS     (UART16552 + 40), R25
   \   00000050   9390....           STS     (UART16552 + 41), R25
   \   00000054   9390....           STS     (UART16552 + 42), R25
   \   00000058   9390....           STS     (UART16552 + 43), R25
   \   0000005C   9390....           STS     (UART16552 + 44), R25
   \   00000060   9390....           STS     (UART16552 + 45), R25
   \   00000064   9390....           STS     (UART16552 + 34), R25
   \   00000068   EF0A               LDI     R16, 250
   \   0000006A   9300....           STS     (UART16552 + 46), R16
   \   0000006E   9390....           STS     (UART16552 + 47), R25
   \   00000072   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   00000074   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   00000076   9300....           STS     (UART16552 + 26), R16
   \   0000007A   9310....           STS     (UART16552 + 27), R17
   \   0000007E   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   00000080   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   00000082   9300....           STS     (UART16552 + 36), R16
   \   00000086   9310....           STS     (UART16552 + 37), R17
   \   0000008A   E800               LDI     R16, 128
   \   0000008C   93002203           STS     8707, R16
   \   00000090   E00D               LDI     R16, 13
   \   00000092   93002200           STS     8704, R16
   \   00000096   93902201           STS     8705, R25
   \   0000009A   E003               LDI     R16, 3
   \   0000009C   93002203           STS     8707, R16
   \   000000A0   E001               LDI     R16, 1
   \   000000A2   93002202           STS     8706, R16
   \   000000A6   EC01               LDI     R16, 193
   \   000000A8   93002202           STS     8706, R16
   \   000000AC   E003               LDI     R16, 3
   \   000000AE   93002201           STS     8705, R16
   \   000000B2   93902204           STS     8708, R25
     55              
     56              TData.RS4.PortUsed = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   000000B6   E002               LDI     R16, 2
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   ........           CALL    ReadEEPROMByte
   \   000000BE   9300....           STS     TData, R16
     57              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   000000C2   E003               LDI     R16, 3
   \   000000C4   E010               LDI     R17, 0
   \   000000C6   ........           CALL    ReadEEPROMByte
   \   000000CA   9300....           STS     (TData + 1), R16
     58              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   000000CE   E004               LDI     R16, 4
   \   000000D0   E010               LDI     R17, 0
   \   000000D2   ........           CALL    ReadEEPROMByte
   \   000000D6   9300....           STS     (TData + 2), R16
     59          #if USE_MODBUS_PROTOCOL == 1
     60              {
     61                static void load_eeprom_misc_485(void);
     62                load_eeprom_misc_485();
     63              }
     64          #endif
     65          
     66              TData.RS4.ToTargetBuffer[0][0] = false;
   \   000000DA   ....               LDI     R30, LOW((TData + 1268))
   \   000000DC   ....               LDI     R31, HIGH((TData + 1268))
   \   000000DE   014F               MOVW    R9:R8, R31:R30
   \   000000E0   8390               ST      Z, R25
     67              TData.RS4.ToTargetBuffer[1][0] = false;
   \   000000E2   ....               LDI     R30, LOW((TData + 1348))
   \   000000E4   ....               LDI     R31, HIGH((TData + 1348))
   \   000000E6   013F               MOVW    R7:R6, R31:R30
   \   000000E8   8390               ST      Z, R25
     68              TData.RS4.FromTargetBuffer[0][0] = false;
   \   000000EA   ....               LDI     R30, LOW((TData + 1428))
   \   000000EC   ....               LDI     R31, HIGH((TData + 1428))
   \   000000EE   012F               MOVW    R5:R4, R31:R30
   \   000000F0   8390               ST      Z, R25
     69              TData.RS4.FromTargetBuffer[1][0] = false;
   \   000000F2   AB92               STD     Z+50, R25
     70              
     71              
     72              for (char i = 0; i < 8; i++) {
   \   000000F4   E0A0               LDI     R26, 0
   \   000000F6   E088               LDI     R24, 8
     73                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \                     ??ExtRS485Ctl_0:
   \   000000F8   94F8               cli
   \   000000FA   9120....           LDS     R18, TData
   \   000000FE   E001               LDI     R16, 1
   \   00000100   E010               LDI     R17, 0
   \   00000102   2F4A               MOV     R20, R26
   \   00000104   ........           CALL    ?S_SHL_L02
   \   00000108   2320               AND     R18, R16
   \   0000010A   B108               IN      R16, 0x08
   \   0000010C   2B02               OR      R16, R18
   \   0000010E   B908               OUT     0x08, R16
   \   00000110   9100....           LDS     R16, (OS_Global + 1)
   \   00000114   2300               TST     R16
   \   00000116   F409               BRNE    ??ExtRS485Ctl_1
   \   00000118   9478               sei
     74                  OS_Delay(100);
   \                     ??ExtRS485Ctl_1:
   \   0000011A   E604               LDI     R16, 100
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   ........           CALL    OS_Delay
     75              }
   \   00000122   95A3               INC     R26
   \   00000124   958A               DEC     R24
   \   00000126   F741               BRNE    ??ExtRS485Ctl_0
     76              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \   00000128   E700               LDI     R16, 112
   \   0000012A   E117               LDI     R17, 23
   \   0000012C   ........           CALL    OS_Delay
   \   00000130   ....               LDI     R26, LOW((TData + 1528))
   \   00000132   ....               LDI     R27, HIGH((TData + 1528))
   \   00000134   E101               LDI     R16, 17
   \   00000136   2ED0               MOV     R13, R16
   \   00000138   2CCB               MOV     R12, R11
   \   0000013A   E080               LDI     R24, 0
   \   0000013C   C004               RJMP    ??ExtRS485Ctl_2
     77          
     78          #if USE_MODBUS_PROTOCOL == 1
     79              //
     80              // let modbus task that I'm done initializing
     81              //
     82              {
     83                extern void modbus_rtu_notify_go(void);
     84                modbus_rtu_notify_go();
     85              }
     86          #endif
     87          
     88              while (1) {
     89                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
     90                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
     91                          EmptyRxBuf16552(0);                            // Empty UART channel 0
     92                      }
     93                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
     94                          EmptyRxBuf16552(1);                            // Empty UART channel 1
     95                      }
     96                      if (PowerOnTimer < POWER_ON_CNT) {
     97                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
     98                              SetRS4Port();                                // and set power on ports
     99                          }
    100                      }
    101                      SetBit(PORTE, 0xf0);
    102                      // volatile undefined behavior
    103                      // ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
    104                      //
    105                      temp = (0x10 << PortPair) & 0xf0;
    106                      ClrBit(PORTE, temp);           // set mux port
    107                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
    108                          UART16552[0].TxFirst = 6;                       // Start packet build at pos.
    109                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
    110                          switch (SnsType) {
    111                          case 0x01:    //Water ingress??
    112                              switch (SeqCnt) {
    113                              case 0:
    114                                  Uart_BuildReqWISCardStatus(0);          //Card status
    115                                  break;
    116                              case 20:
    117                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    118                                      Uart_BuildReqWISXData(0, 115);            // Request serial no
    119                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    120                                          TData.RS4.EEPROMPortpair[0] = 0;
    121                                      }
    122                                  } else {
    123                                      Uart_BuildReqWISData(0);                //WIS data
    124                                  }
    125                                  break;
    126                              default:
    127                                  Uart_BuildReqWISData(0);                //WIS data
    128                                  break;
    129                              }
    130                              break;
    131                          case 0x02: // Radar??
    132                              switch (SeqCnt) {
    133                              case 20:
    134                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    135                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    136                                          TData.RS4.EEPROMPortpair[0] = 0;
    137                                      }
    138                                  }
    139                                  // Fall through and send the request
    140                              default:
    141                                  Uart_BuildReqRadarData(0);          // Radar data
    142                                  break;
    143                              case 0:
    144                                  Uart_BuildReqRadarInfo(0);          //Radar Information
    145                                  break;
    146                              }
    147                              break;
    148                          case 0x00:  // AN-SGCNV
    149                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    150                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
    151                                  Uart_BuildSndData(0);                       // add data to AD card package
    152                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    153                                  AskMD[0] = false;
    154                              } else {
    155                                  AskMD[0] = true;
    156                              }
    157                              if (SeqCnt == 0) {
    158                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
    159                              } else if (SeqCnt == 5) {
    160                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
    161                              } else if (SeqCnt == 10) {
    162                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    163                              } else if (SeqCnt == 15) {
    164                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
    165                              } else if (SeqCnt == 20) {
    166                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    167                                      Uart_BuildReqEEPROMData(0);             //EEpromdata cmd, 24
    168                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
    169                                          TData.RS4.EEPROMADChannel[0] = 0;
    170                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    171                                              TData.RS4.EEPROMPortpair[0] = 0;
    172                                          }
    173                                      }
    174                                  } else if (AskMD[0] == true) {
    175                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    176                                  }
    177                              } else if (AskMD[0] == true) {
    178                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    179                              }
    180                              break;
    181                          }
    182                          Uart_BuildTail16552(0);
    183                      } else {
    184                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
    185                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
    186                                  TData.RS4.EEPROMPortpair[0] = 0;
    187                              }
    188                          }
    189                      }
    190                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
    191                          UART16552[1].TxFirst = 6;                       // Start at
    192                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
    193                          switch (SnsType) {
    194                          case 0x01:    //Water ingress??
    195                              switch (SeqCnt) {
    196                              case 0:
    197                                  Uart_BuildReqWISCardStatus(1);          //Card status
    198                                  break;
    199                              case 20:
    200                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    201                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
    202                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    203                                          TData.RS4.EEPROMPortpair[1] = 0;
    204                                      }
    205                                  } else {
    206                                      Uart_BuildReqWISData(1);                //WIS data
    207                                  }
    208                                  break;
    209                              default:
    210                                  Uart_BuildReqWISData(1);                //WIS data
    211                                  break;
    212                              }
    213                              break;
    214                          case 0x02:    // Radar??
    215                              switch (SeqCnt) {
    216                              case 20:
    217                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    218                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    219                                          TData.RS4.EEPROMPortpair[1] = 0;
    220                                      }
    221                                  }
    222                                  // Fall through and send the request
    223                              default:
    224                                  Uart_BuildReqRadarData(1);          // Radar data
    225                                  break;
    226                              case 0:
    227                                  Uart_BuildReqRadarInfo(1);          //Radar Information
    228                                  break;
    229                              }
    230                              break;
    231                          case 0x00:  // AN-SGCNV
    232                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    233                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
    234                                  Uart_BuildSndData(1);                       // add data to AD card package
    235                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    236                                  AskMD[1] = false;
    237                              } else {
    238                                  AskMD[1] = true;
    239                              }
    240                              if (SeqCnt == 0) {
    241                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
    242                              } else if (SeqCnt == 5) {
    243                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
    244                              } else if (SeqCnt == 10) {
    245                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    246                              } else if (SeqCnt == 15) {
    247                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
    248                              } else if (SeqCnt == 20) {
    249                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    250                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
    251                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
    252                                          TData.RS4.EEPROMADChannel[1] = 0;
    253                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    254                                              TData.RS4.EEPROMPortpair[1] = 0;
    255                                          }
    256                                      }
    257                                  } else if (AskMD[1] == true) {
    258                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    259                                  }
    260                              } else if (AskMD[1] == true) {
    261                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    262                              }
    263                              break;
    264                          }
    265                          Uart_BuildTail16552(1);
    266                      } else {
    267                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
    268                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
    269                                  TData.RS4.EEPROMPortpair[1] = 0;
    270                              }
    271                          }
    272                      }
    273                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
    274                      if (EventStatus & 0x02) {
    275                          if (PowerOnTimer >= POWER_ON_CNT) {
    276                              PowerOnTimer = 0;                              // and start over again
    277                          }
    278                      }
    279                  }
    280                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_3:
   \   0000013E   9593               INC     R25
   \   00000140   3195               CPI     R25, 21
   \   00000142   F008               BRCS    ??ExtRS485Ctl_2
    281                      SeqCnt = 0;
   \   00000144   E090               LDI     R25, 0
    282                  }
   \                     ??ExtRS485Ctl_2:
   \   00000146   9380....           STS     PortPair, R24
   \   0000014A   C01B               RJMP    ??ExtRS485Ctl_4
   \                     ??ExtRS485Ctl_5:
   \   0000014C   01FD               MOVW    R31:R30, R27:R26
   \   0000014E   8103               LDD     R16, Z+3
   \   00000150   9110....           LDS     R17, PortPair
   \   00000154   1701               CP      R16, R17
   \   00000156   F431               BRNE    ??ExtRS485Ctl_6
   \   00000158   9503               INC     R16
   \   0000015A   9300....           STS     (TData + 1531), R16
   \   0000015E   3004               CPI     R16, 4
   \   00000160   F008               BRCS    ??ExtRS485Ctl_6
   \   00000162   8383               STD     Z+3, R24
   \                     ??ExtRS485Ctl_6:
   \   00000164   EE28               LDI     R18, 232
   \   00000166   E033               LDI     R19, 3
   \   00000168   E001               LDI     R16, 1
   \   0000016A   ........           CALL    OS_WaitEventTimed
   \   0000016E   FB01               BST     R16, 1
   \   00000170   F41E               BRTC    ??ExtRS485Ctl_7
   \   00000172   14BC               CP      R11, R12
   \   00000174   F008               BRCS    ??ExtRS485Ctl_7
   \   00000176   24BB               CLR     R11
   \                     ??ExtRS485Ctl_7:
   \   00000178   9100....           LDS     R16, PortPair
   \   0000017C   9503               INC     R16
   \   0000017E   9300....           STS     PortPair, R16
   \                     ??ExtRS485Ctl_4:
   \   00000182   9100....           LDS     R16, PortPair
   \   00000186   3004               CPI     R16, 4
   \   00000188   F6D0               BRCC    ??ExtRS485Ctl_3
   \   0000018A   9100....           LDS     R16, (UART16552 + 24)
   \   0000018E   3009               CPI     R16, 9
   \   00000190   F030               BRCS    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_9:
   \   00000192   91002208           LDS     R16, 8712
   \   00000196   9100220D           LDS     R16, 8717
   \   0000019A   FD00               SBRC    R16, 0
   \   0000019C   CFFA               RJMP    ??ExtRS485Ctl_9
   \                     ??ExtRS485Ctl_8:
   \   0000019E   9100....           LDS     R16, (UART16552 + 50)
   \   000001A2   3009               CPI     R16, 9
   \   000001A4   F030               BRCS    ??ExtRS485Ctl_10
   \                     ??ExtRS485Ctl_11:
   \   000001A6   91002200           LDS     R16, 8704
   \   000001AA   91002205           LDS     R16, 8709
   \   000001AE   FD00               SBRC    R16, 0
   \   000001B0   CFFA               RJMP    ??ExtRS485Ctl_11
   \                     ??ExtRS485Ctl_10:
   \   000001B2   14BC               CP      R11, R12
   \   000001B4   F430               BRCC    ??ExtRS485Ctl_12
   \   000001B6   94B3               INC     R11
   \   000001B8   14BC               CP      R11, R12
   \   000001BA   F018               BRCS    ??ExtRS485Ctl_12
   \   000001BC   9100....           LDS     R16, TData
   \   000001C0   B908               OUT     0x08, R16
   \                     ??ExtRS485Ctl_12:
   \   000001C2   94F8               cli
   \   000001C4   B10E               IN      R16, 0x0E
   \   000001C6   6F00               ORI     R16, 0xF0
   \   000001C8   B90E               OUT     0x0E, R16
   \   000001CA   9100....           LDS     R16, (OS_Global + 1)
   \   000001CE   2300               TST     R16
   \   000001D0   F409               BRNE    ??ExtRS485Ctl_13
   \   000001D2   9478               sei
   \                     ??ExtRS485Ctl_13:
   \   000001D4   9140....           LDS     R20, PortPair
   \   000001D8   94F8               cli
   \   000001DA   E100               LDI     R16, 16
   \   000001DC   E010               LDI     R17, 0
   \   000001DE   ........           CALL    ?S_SHL_L02
   \   000001E2   7F00               ANDI    R16, 0xF0
   \   000001E4   9500               COM     R16
   \   000001E6   B11E               IN      R17, 0x0E
   \   000001E8   2310               AND     R17, R16
   \   000001EA   B91E               OUT     0x0E, R17
   \   000001EC   9100....           LDS     R16, (OS_Global + 1)
   \   000001F0   2300               TST     R16
   \   000001F2   F409               BRNE    ??ExtRS485Ctl_14
   \   000001F4   9478               sei
   \                     ??ExtRS485Ctl_14:
   \   000001F6   9100....           LDS     R16, TData
   \   000001FA   E010               LDI     R17, 0
   \   000001FC   9140....           LDS     R20, PortPair
   \   00000200   ........           CALL    ?SS_SHR_L02
   \   00000204   7001               ANDI    R16, 0x01
   \   00000206   F409               BRNE    $+2+2
   \   00000208   C108               RJMP    ??ExtRS485Ctl_15
   \   0000020A   E006               LDI     R16, 6
   \   0000020C   9300....           STS     (UART16552 + 2), R16
   \   00000210   9380....           STS     (UART16552 + 3), R24
   \   00000214   9100....           LDS     R16, (TData + 1)
   \   00000218   E010               LDI     R17, 0
   \   0000021A   9140....           LDS     R20, PortPair
   \   0000021E   0F44               LSL     R20
   \   00000220   ........           CALL    ?SS_SHR_L02
   \   00000224   7003               ANDI    R16, 0x03
   \   00000226   F409               BRNE    $+2+2
   \   00000228   C049               RJMP    ??ExtRS485Ctl_16
   \   0000022A   950A               DEC     R16
   \   0000022C   F019               BREQ    ??ExtRS485Ctl_17
   \   0000022E   950A               DEC     R16
   \   00000230   F131               BREQ    ??ExtRS485Ctl_18
   \   00000232   C0F0               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_17:
   \   00000234   2F09               MOV     R16, R25
   \   00000236   2399               TST     R25
   \   00000238   F019               BREQ    ??ExtRS485Ctl_20
   \   0000023A   5104               SUBI    R16, 20
   \   0000023C   F039               BREQ    ??ExtRS485Ctl_21
   \   0000023E   C01C               RJMP    ??ExtRS485Ctl_22
   \                     ??ExtRS485Ctl_20:
   \   00000240   91E0....           LDS     R30, UART16552
   \   00000244   91F0....           LDS     R31, (UART16552 + 1)
   \   00000248   E604               LDI     R16, 100
   \   0000024A   C036               RJMP    ??ExtRS485Ctl_23
   \                     ??ExtRS485Ctl_21:
   \   0000024C   01F2               MOVW    R31:R30, R5:R4
   \   0000024E   8100               LD      R16, Z
   \   00000250   2300               TST     R16
   \   00000252   F491               BRNE    ??ExtRS485Ctl_22
   \   00000254   01FD               MOVW    R31:R30, R27:R26
   \   00000256   8102               LDD     R16, Z+2
   \   00000258   9110....           LDS     R17, PortPair
   \   0000025C   1701               CP      R16, R17
   \   0000025E   F461               BRNE    ??ExtRS485Ctl_22
   \   00000260   E713               LDI     R17, 115
   \   00000262   E000               LDI     R16, 0
   \   00000264   ....               RCALL   Uart_BuildReqWISXData
   \   00000266   9100....           LDS     R16, (TData + 1530)
   \   0000026A   9503               INC     R16
   \   0000026C   9300....           STS     (TData + 1530), R16
   \   00000270   3004               CPI     R16, 4
   \   00000272   F408               BRCC    $+2+2
   \   00000274   C0CF               RJMP    ??ExtRS485Ctl_19
   \   00000276   C0C7               RJMP    ??ExtRS485Ctl_24
   \                     ??ExtRS485Ctl_22:
   \   00000278   E000               LDI     R16, 0
   \   0000027A   ....               RCALL   Uart_BuildReqWISData
   \   0000027C   C0CB               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_18:
   \   0000027E   2F09               MOV     R16, R25
   \   00000280   2399               TST     R25
   \   00000282   F0A9               BREQ    ??ExtRS485Ctl_25
   \   00000284   5104               SUBI    R16, 20
   \   00000286   F481               BRNE    ??ExtRS485Ctl_26
   \   00000288   01F2               MOVW    R31:R30, R5:R4
   \   0000028A   8100               LD      R16, Z
   \   0000028C   2300               TST     R16
   \   0000028E   F461               BRNE    ??ExtRS485Ctl_26
   \   00000290   01FD               MOVW    R31:R30, R27:R26
   \   00000292   8102               LDD     R16, Z+2
   \   00000294   9110....           LDS     R17, PortPair
   \   00000298   1701               CP      R16, R17
   \   0000029A   F431               BRNE    ??ExtRS485Ctl_26
   \   0000029C   9503               INC     R16
   \   0000029E   9300....           STS     (TData + 1530), R16
   \   000002A2   3004               CPI     R16, 4
   \   000002A4   F008               BRCS    ??ExtRS485Ctl_26
   \   000002A6   8382               STD     Z+2, R24
   \                     ??ExtRS485Ctl_26:
   \   000002A8   E000               LDI     R16, 0
   \   000002AA   ....               RCALL   Uart_BuildReqRadarData
   \   000002AC   C0B3               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_25:
   \   000002AE   91E0....           LDS     R30, UART16552
   \   000002B2   91F0....           LDS     R31, (UART16552 + 1)
   \   000002B6   EA01               LDI     R16, 161
   \                     ??ExtRS485Ctl_23:
   \   000002B8   8306               STD     Z+6, R16
   \   000002BA   C069               RJMP    ??ExtRS485Ctl_27
   \                     ??ExtRS485Ctl_16:
   \   000002BC   01F4               MOVW    R31:R30, R9:R8
   \   000002BE   8100               LD      R16, Z
   \   000002C0   3001               CPI     R16, 1
   \   000002C2   F009               BREQ    $+2+2
   \   000002C4   C04C               RJMP    ??ExtRS485Ctl_28
   \   000002C6   8101               LDD     R16, Z+1
   \   000002C8   9110....           LDS     R17, PortPair
   \   000002CC   1701               CP      R16, R17
   \   000002CE   F009               BREQ    $+2+2
   \   000002D0   C046               RJMP    ??ExtRS485Ctl_28
   \   000002D2   E043               LDI     R20, 3
   \   000002D4   C012               RJMP    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_30:
   \   000002D6   2FE4               MOV     R30, R20
   \   000002D8   E0F0               LDI     R31, 0
   \   000002DA   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   000002DC   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   000002DE   8100               LD      R16, Z
   \   000002E0   01F9               MOVW    R31:R30, R19:R18
   \   000002E2   8300               ST      Z, R16
   \   000002E4   9100....           LDS     R16, (UART16552 + 2)
   \   000002E8   9110....           LDS     R17, (UART16552 + 3)
   \   000002EC   5F0F               SUBI    R16, 255
   \   000002EE   4F1F               SBCI    R17, 255
   \   000002F0   9300....           STS     (UART16552 + 2), R16
   \   000002F4   9310....           STS     (UART16552 + 3), R17
   \   000002F8   9543               INC     R20
   \                     ??ExtRS485Ctl_29:
   \   000002FA   9100....           LDS     R16, (UART16552 + 2)
   \   000002FE   9110....           LDS     R17, (UART16552 + 3)
   \   00000302   9120....           LDS     R18, UART16552
   \   00000306   9130....           LDS     R19, (UART16552 + 1)
   \   0000030A   0F20               ADD     R18, R16
   \   0000030C   1F31               ADC     R19, R17
   \   0000030E   01F4               MOVW    R31:R30, R9:R8
   \   00000310   8102               LDD     R16, Z+2
   \   00000312   E010               LDI     R17, 0
   \   00000314   5F0D               SUBI    R16, 253
   \   00000316   4F1F               SBCI    R17, 255
   \   00000318   1740               CP      R20, R16
   \   0000031A   0781               CPC     R24, R17
   \   0000031C   F2E4               BRLT    ??ExtRS485Ctl_30
   \   0000031E   8380               ST      Z, R24
   \   00000320   01F9               MOVW    R31:R30, R19:R18
   \   00000322   82D0               ST      Z, R13
   \   00000324   9100....           LDS     R16, (UART16552 + 2)
   \   00000328   9110....           LDS     R17, (UART16552 + 3)
   \   0000032C   5F0F               SUBI    R16, 255
   \   0000032E   4F1F               SBCI    R17, 255
   \   00000330   9300....           STS     (UART16552 + 2), R16
   \   00000334   9310....           STS     (UART16552 + 3), R17
   \   00000338   91E0....           LDS     R30, UART16552
   \   0000033C   91F0....           LDS     R31, (UART16552 + 1)
   \   00000340   0FE0               ADD     R30, R16
   \   00000342   1FF1               ADC     R31, R17
   \   00000344   8380               ST      Z, R24
   \   00000346   9100....           LDS     R16, (UART16552 + 2)
   \   0000034A   9110....           LDS     R17, (UART16552 + 3)
   \   0000034E   5F0F               SUBI    R16, 255
   \   00000350   4F1F               SBCI    R17, 255
   \   00000352   9300....           STS     (UART16552 + 2), R16
   \   00000356   9310....           STS     (UART16552 + 3), R17
   \   0000035A   E010               LDI     R17, 0
   \   0000035C   C001               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_28:
   \   0000035E   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_31:
   \   00000360   2399               TST     R25
   \   00000362   F419               BRNE    ??ExtRS485Ctl_32
   \   00000364   E000               LDI     R16, 0
   \   00000366   ....               RCALL   Uart_BuildReqCardStatus
   \   00000368   C055               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_32:
   \   0000036A   3095               CPI     R25, 5
   \   0000036C   F419               BRNE    ??ExtRS485Ctl_33
   \   0000036E   E000               LDI     R16, 0
   \   00000370   ....               RCALL   Uart_BuildReqR16552
   \   00000372   C050               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_33:
   \   00000374   309A               CPI     R25, 10
   \   00000376   F539               BRNE    ??ExtRS485Ctl_34
   \   00000378   9100....           LDS     R16, (UART16552 + 2)
   \   0000037C   9110....           LDS     R17, (UART16552 + 3)
   \   00000380   91E0....           LDS     R30, UART16552
   \   00000384   91F0....           LDS     R31, (UART16552 + 1)
   \   00000388   0FE0               ADD     R30, R16
   \   0000038A   1FF1               ADC     R31, R17
   \   0000038C   82D0               ST      Z, R13
   \                     ??ExtRS485Ctl_27:
   \   0000038E   9100....           LDS     R16, (UART16552 + 2)
   \   00000392   9110....           LDS     R17, (UART16552 + 3)
   \   00000396   5F0F               SUBI    R16, 255
   \   00000398   4F1F               SBCI    R17, 255
   \   0000039A   9300....           STS     (UART16552 + 2), R16
   \   0000039E   9310....           STS     (UART16552 + 3), R17
   \   000003A2   91E0....           LDS     R30, UART16552
   \   000003A6   91F0....           LDS     R31, (UART16552 + 1)
   \   000003AA   0FE0               ADD     R30, R16
   \   000003AC   1FF1               ADC     R31, R17
   \   000003AE   8380               ST      Z, R24
   \   000003B0   9100....           LDS     R16, (UART16552 + 2)
   \   000003B4   9110....           LDS     R17, (UART16552 + 3)
   \   000003B8   5F0F               SUBI    R16, 255
   \   000003BA   4F1F               SBCI    R17, 255
   \   000003BC   9300....           STS     (UART16552 + 2), R16
   \   000003C0   9310....           STS     (UART16552 + 3), R17
   \   000003C4   C027               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_34:
   \   000003C6   309F               CPI     R25, 15
   \   000003C8   F419               BRNE    ??ExtRS485Ctl_35
   \   000003CA   E000               LDI     R16, 0
   \   000003CC   ....               RCALL   Uart_BuildReqC16552
   \   000003CE   C022               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_35:
   \   000003D0   3194               CPI     R25, 20
   \   000003D2   F4E1               BRNE    ??ExtRS485Ctl_36
   \   000003D4   01F2               MOVW    R31:R30, R5:R4
   \   000003D6   8100               LD      R16, Z
   \   000003D8   2300               TST     R16
   \   000003DA   F4C1               BRNE    ??ExtRS485Ctl_36
   \   000003DC   01FD               MOVW    R31:R30, R27:R26
   \   000003DE   8102               LDD     R16, Z+2
   \   000003E0   9120....           LDS     R18, PortPair
   \   000003E4   1702               CP      R16, R18
   \   000003E6   F491               BRNE    ??ExtRS485Ctl_36
   \   000003E8   E000               LDI     R16, 0
   \   000003EA   ....               RCALL   Uart_BuildReqEEPROMData
   \   000003EC   910C               LD      R16, X
   \   000003EE   5F0E               SUBI    R16, 254
   \   000003F0   930C               ST      X, R16
   \   000003F2   300F               CPI     R16, 15
   \   000003F4   F078               BRCS    ??ExtRS485Ctl_19
   \   000003F6   938C               ST      X, R24
   \   000003F8   9100....           LDS     R16, (TData + 1530)
   \   000003FC   9503               INC     R16
   \   000003FE   9300....           STS     (TData + 1530), R16
   \   00000402   3004               CPI     R16, 4
   \   00000404   F038               BRCS    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_24:
   \   00000406   01FD               MOVW    R31:R30, R27:R26
   \   00000408   8382               STD     Z+2, R24
   \   0000040A   C004               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_36:
   \   0000040C   2311               TST     R17
   \   0000040E   F011               BREQ    ??ExtRS485Ctl_19
   \   00000410   E000               LDI     R16, 0
   \   00000412   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_19:
   \   00000414   E000               LDI     R16, 0
   \   00000416   ....               RCALL   Uart_BuildTail16552
   \   00000418   C00C               RJMP    ??ExtRS485Ctl_37
   \                     ??ExtRS485Ctl_15:
   \   0000041A   01FD               MOVW    R31:R30, R27:R26
   \   0000041C   8102               LDD     R16, Z+2
   \   0000041E   9110....           LDS     R17, PortPair
   \   00000422   1701               CP      R16, R17
   \   00000424   F431               BRNE    ??ExtRS485Ctl_37
   \   00000426   9503               INC     R16
   \   00000428   9300....           STS     (TData + 1530), R16
   \   0000042C   3004               CPI     R16, 4
   \   0000042E   F008               BRCS    ??ExtRS485Ctl_37
   \   00000430   8382               STD     Z+2, R24
   \                     ??ExtRS485Ctl_37:
   \   00000432   9100....           LDS     R16, TData
   \   00000436   9140....           LDS     R20, PortPair
   \   0000043A   5F4C               SUBI    R20, 252
   \   0000043C   E010               LDI     R17, 0
   \   0000043E   ........           CALL    ?SS_SHR_L02
   \   00000442   7001               ANDI    R16, 0x01
   \   00000444   F409               BRNE    $+2+2
   \   00000446   CE82               RJMP    ??ExtRS485Ctl_5
   \   00000448   E006               LDI     R16, 6
   \   0000044A   9300....           STS     (UART16552 + 28), R16
   \   0000044E   9380....           STS     (UART16552 + 29), R24
   \   00000452   9100....           LDS     R16, (TData + 2)
   \   00000456   E010               LDI     R17, 0
   \   00000458   9140....           LDS     R20, PortPair
   \   0000045C   0F44               LSL     R20
   \   0000045E   ........           CALL    ?SS_SHR_L02
   \   00000462   7003               ANDI    R16, 0x03
   \   00000464   F409               BRNE    $+2+2
   \   00000466   C049               RJMP    ??ExtRS485Ctl_38
   \   00000468   950A               DEC     R16
   \   0000046A   F019               BREQ    ??ExtRS485Ctl_39
   \   0000046C   950A               DEC     R16
   \   0000046E   F131               BREQ    ??ExtRS485Ctl_40
   \   00000470   C0F7               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_39:
   \   00000472   2F09               MOV     R16, R25
   \   00000474   2399               TST     R25
   \   00000476   F019               BREQ    ??ExtRS485Ctl_42
   \   00000478   5104               SUBI    R16, 20
   \   0000047A   F039               BREQ    ??ExtRS485Ctl_43
   \   0000047C   C01C               RJMP    ??ExtRS485Ctl_44
   \                     ??ExtRS485Ctl_42:
   \   0000047E   91E0....           LDS     R30, (UART16552 + 26)
   \   00000482   91F0....           LDS     R31, (UART16552 + 27)
   \   00000486   E604               LDI     R16, 100
   \   00000488   C036               RJMP    ??ExtRS485Ctl_45
   \                     ??ExtRS485Ctl_43:
   \   0000048A   01F2               MOVW    R31:R30, R5:R4
   \   0000048C   A902               LDD     R16, Z+50
   \   0000048E   2300               TST     R16
   \   00000490   F491               BRNE    ??ExtRS485Ctl_44
   \   00000492   01FD               MOVW    R31:R30, R27:R26
   \   00000494   8103               LDD     R16, Z+3
   \   00000496   9110....           LDS     R17, PortPair
   \   0000049A   1701               CP      R16, R17
   \   0000049C   F461               BRNE    ??ExtRS485Ctl_44
   \   0000049E   E713               LDI     R17, 115
   \   000004A0   E001               LDI     R16, 1
   \   000004A2   ....               RCALL   Uart_BuildReqWISXData
   \   000004A4   9100....           LDS     R16, (TData + 1531)
   \   000004A8   9503               INC     R16
   \   000004AA   9300....           STS     (TData + 1531), R16
   \   000004AE   3004               CPI     R16, 4
   \   000004B0   F408               BRCC    $+2+2
   \   000004B2   C0D6               RJMP    ??ExtRS485Ctl_41
   \   000004B4   C0CE               RJMP    ??ExtRS485Ctl_46
   \                     ??ExtRS485Ctl_44:
   \   000004B6   E001               LDI     R16, 1
   \   000004B8   ....               RCALL   Uart_BuildReqWISData
   \   000004BA   C0D2               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_40:
   \   000004BC   2F09               MOV     R16, R25
   \   000004BE   2399               TST     R25
   \   000004C0   F0A9               BREQ    ??ExtRS485Ctl_47
   \   000004C2   5104               SUBI    R16, 20
   \   000004C4   F481               BRNE    ??ExtRS485Ctl_48
   \   000004C6   01F2               MOVW    R31:R30, R5:R4
   \   000004C8   A902               LDD     R16, Z+50
   \   000004CA   2300               TST     R16
   \   000004CC   F461               BRNE    ??ExtRS485Ctl_48
   \   000004CE   01FD               MOVW    R31:R30, R27:R26
   \   000004D0   8103               LDD     R16, Z+3
   \   000004D2   9110....           LDS     R17, PortPair
   \   000004D6   1701               CP      R16, R17
   \   000004D8   F431               BRNE    ??ExtRS485Ctl_48
   \   000004DA   9503               INC     R16
   \   000004DC   9300....           STS     (TData + 1531), R16
   \   000004E0   3004               CPI     R16, 4
   \   000004E2   F008               BRCS    ??ExtRS485Ctl_48
   \   000004E4   8383               STD     Z+3, R24
   \                     ??ExtRS485Ctl_48:
   \   000004E6   E001               LDI     R16, 1
   \   000004E8   ....               RCALL   Uart_BuildReqRadarData
   \   000004EA   C0BA               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_47:
   \   000004EC   91E0....           LDS     R30, (UART16552 + 26)
   \   000004F0   91F0....           LDS     R31, (UART16552 + 27)
   \   000004F4   EA01               LDI     R16, 161
   \                     ??ExtRS485Ctl_45:
   \   000004F6   8306               STD     Z+6, R16
   \   000004F8   C06D               RJMP    ??ExtRS485Ctl_49
   \                     ??ExtRS485Ctl_38:
   \   000004FA   01F3               MOVW    R31:R30, R7:R6
   \   000004FC   8100               LD      R16, Z
   \   000004FE   3001               CPI     R16, 1
   \   00000500   F009               BREQ    $+2+2
   \   00000502   C050               RJMP    ??ExtRS485Ctl_50
   \   00000504   8121               LDD     R18, Z+1
   \   00000506   9100....           LDS     R16, PortPair
   \   0000050A   E010               LDI     R17, 0
   \   0000050C   5F0C               SUBI    R16, 252
   \   0000050E   4F1F               SBCI    R17, 255
   \   00000510   1720               CP      R18, R16
   \   00000512   0781               CPC     R24, R17
   \   00000514   F009               BREQ    $+2+2
   \   00000516   C046               RJMP    ??ExtRS485Ctl_50
   \   00000518   E043               LDI     R20, 3
   \   0000051A   C012               RJMP    ??ExtRS485Ctl_51
   \                     ??ExtRS485Ctl_52:
   \   0000051C   2FE4               MOV     R30, R20
   \   0000051E   E0F0               LDI     R31, 0
   \   00000520   ....               SUBI    R30, LOW((-(TData + 1348) & 0xFFFF))
   \   00000522   ....               SBCI    R31, HIGH((-(TData + 1348) & 0xFFFF))
   \   00000524   8100               LD      R16, Z
   \   00000526   01F9               MOVW    R31:R30, R19:R18
   \   00000528   8300               ST      Z, R16
   \   0000052A   9100....           LDS     R16, (UART16552 + 28)
   \   0000052E   9110....           LDS     R17, (UART16552 + 29)
   \   00000532   5F0F               SUBI    R16, 255
   \   00000534   4F1F               SBCI    R17, 255
   \   00000536   9300....           STS     (UART16552 + 28), R16
   \   0000053A   9310....           STS     (UART16552 + 29), R17
   \   0000053E   9543               INC     R20
   \                     ??ExtRS485Ctl_51:
   \   00000540   9120....           LDS     R18, (UART16552 + 26)
   \   00000544   9130....           LDS     R19, (UART16552 + 27)
   \   00000548   9100....           LDS     R16, (UART16552 + 28)
   \   0000054C   9110....           LDS     R17, (UART16552 + 29)
   \   00000550   0F20               ADD     R18, R16
   \   00000552   1F31               ADC     R19, R17
   \   00000554   01F3               MOVW    R31:R30, R7:R6
   \   00000556   8102               LDD     R16, Z+2
   \   00000558   E010               LDI     R17, 0
   \   0000055A   5F0D               SUBI    R16, 253
   \   0000055C   4F1F               SBCI    R17, 255
   \   0000055E   1740               CP      R20, R16
   \   00000560   0781               CPC     R24, R17
   \   00000562   F2E4               BRLT    ??ExtRS485Ctl_52
   \   00000564   8380               ST      Z, R24
   \   00000566   01F9               MOVW    R31:R30, R19:R18
   \   00000568   82D0               ST      Z, R13
   \   0000056A   9100....           LDS     R16, (UART16552 + 28)
   \   0000056E   9110....           LDS     R17, (UART16552 + 29)
   \   00000572   5F0F               SUBI    R16, 255
   \   00000574   4F1F               SBCI    R17, 255
   \   00000576   9300....           STS     (UART16552 + 28), R16
   \   0000057A   9310....           STS     (UART16552 + 29), R17
   \   0000057E   91E0....           LDS     R30, (UART16552 + 26)
   \   00000582   91F0....           LDS     R31, (UART16552 + 27)
   \   00000586   0FE0               ADD     R30, R16
   \   00000588   1FF1               ADC     R31, R17
   \   0000058A   8380               ST      Z, R24
   \   0000058C   9100....           LDS     R16, (UART16552 + 28)
   \   00000590   9110....           LDS     R17, (UART16552 + 29)
   \   00000594   5F0F               SUBI    R16, 255
   \   00000596   4F1F               SBCI    R17, 255
   \   00000598   9300....           STS     (UART16552 + 28), R16
   \   0000059C   9310....           STS     (UART16552 + 29), R17
   \   000005A0   E010               LDI     R17, 0
   \   000005A2   C001               RJMP    ??ExtRS485Ctl_53
   \                     ??ExtRS485Ctl_50:
   \   000005A4   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_53:
   \   000005A6   2399               TST     R25
   \   000005A8   F419               BRNE    ??ExtRS485Ctl_54
   \   000005AA   E001               LDI     R16, 1
   \   000005AC   ....               RCALL   Uart_BuildReqCardStatus
   \   000005AE   C058               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_54:
   \   000005B0   3095               CPI     R25, 5
   \   000005B2   F419               BRNE    ??ExtRS485Ctl_55
   \   000005B4   E001               LDI     R16, 1
   \   000005B6   ....               RCALL   Uart_BuildReqR16552
   \   000005B8   C053               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_55:
   \   000005BA   309A               CPI     R25, 10
   \   000005BC   F539               BRNE    ??ExtRS485Ctl_56
   \   000005BE   91E0....           LDS     R30, (UART16552 + 26)
   \   000005C2   91F0....           LDS     R31, (UART16552 + 27)
   \   000005C6   9100....           LDS     R16, (UART16552 + 28)
   \   000005CA   9110....           LDS     R17, (UART16552 + 29)
   \   000005CE   0FE0               ADD     R30, R16
   \   000005D0   1FF1               ADC     R31, R17
   \   000005D2   82D0               ST      Z, R13
   \                     ??ExtRS485Ctl_49:
   \   000005D4   9100....           LDS     R16, (UART16552 + 28)
   \   000005D8   9110....           LDS     R17, (UART16552 + 29)
   \   000005DC   5F0F               SUBI    R16, 255
   \   000005DE   4F1F               SBCI    R17, 255
   \   000005E0   9300....           STS     (UART16552 + 28), R16
   \   000005E4   9310....           STS     (UART16552 + 29), R17
   \   000005E8   91E0....           LDS     R30, (UART16552 + 26)
   \   000005EC   91F0....           LDS     R31, (UART16552 + 27)
   \   000005F0   0FE0               ADD     R30, R16
   \   000005F2   1FF1               ADC     R31, R17
   \   000005F4   8380               ST      Z, R24
   \   000005F6   9100....           LDS     R16, (UART16552 + 28)
   \   000005FA   9110....           LDS     R17, (UART16552 + 29)
   \   000005FE   5F0F               SUBI    R16, 255
   \   00000600   4F1F               SBCI    R17, 255
   \   00000602   9300....           STS     (UART16552 + 28), R16
   \   00000606   9310....           STS     (UART16552 + 29), R17
   \   0000060A   C02A               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_56:
   \   0000060C   309F               CPI     R25, 15
   \   0000060E   F419               BRNE    ??ExtRS485Ctl_57
   \   00000610   E001               LDI     R16, 1
   \   00000612   ....               RCALL   Uart_BuildReqC16552
   \   00000614   C025               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_57:
   \   00000616   3194               CPI     R25, 20
   \   00000618   F4F9               BRNE    ??ExtRS485Ctl_58
   \   0000061A   01F2               MOVW    R31:R30, R5:R4
   \   0000061C   A902               LDD     R16, Z+50
   \   0000061E   2300               TST     R16
   \   00000620   F4D9               BRNE    ??ExtRS485Ctl_58
   \   00000622   01FD               MOVW    R31:R30, R27:R26
   \   00000624   8103               LDD     R16, Z+3
   \   00000626   9120....           LDS     R18, PortPair
   \   0000062A   1702               CP      R16, R18
   \   0000062C   F4A9               BRNE    ??ExtRS485Ctl_58
   \   0000062E   E001               LDI     R16, 1
   \   00000630   ....               RCALL   Uart_BuildReqEEPROMData
   \   00000632   9100....           LDS     R16, (TData + 1529)
   \   00000636   5F0E               SUBI    R16, 254
   \   00000638   9300....           STS     (TData + 1529), R16
   \   0000063C   300F               CPI     R16, 15
   \   0000063E   F080               BRCS    ??ExtRS485Ctl_41
   \   00000640   01FD               MOVW    R31:R30, R27:R26
   \   00000642   8381               STD     Z+1, R24
   \   00000644   9100....           LDS     R16, (TData + 1531)
   \   00000648   9503               INC     R16
   \   0000064A   9300....           STS     (TData + 1531), R16
   \   0000064E   3004               CPI     R16, 4
   \   00000650   F038               BRCS    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_46:
   \   00000652   01FD               MOVW    R31:R30, R27:R26
   \   00000654   8383               STD     Z+3, R24
   \   00000656   C004               RJMP    ??ExtRS485Ctl_41
   \                     ??ExtRS485Ctl_58:
   \   00000658   2311               TST     R17
   \   0000065A   F011               BREQ    ??ExtRS485Ctl_41
   \   0000065C   E001               LDI     R16, 1
   \   0000065E   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_41:
   \   00000660   E001               LDI     R16, 1
   \   00000662   ....               RCALL   Uart_BuildTail16552
   \   00000664   CD7F               RJMP    ??ExtRS485Ctl_6
   \   00000666                      REQUIRE _A_PORTC
   \   00000666                      REQUIRE _A_PORTE
    283              }
    284          }
    285          
    286          
    287          /*************************************************************************
    288          *   (This is a task)
    289          *  Usart handler UART receive data
    290          *
    291          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    292          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   93AA               ST      -Y, R26
   \   00000002   938A               ST      -Y, R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    293          
    294              char portresp;
    295              char temp;
    296          
    297              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   00000004   E900               LDI     R16, 144
   \   00000006   E11A               LDI     R17, 26
   \   00000008   ........           CALL    OS_Delay
   \   0000000C   E0A0               LDI     R26, 0
   \   0000000E   C05D               RJMP    ??ExtRS485Rec_0
    298          
    299              while (1) {
    300                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
    301                  portresp = OS_WaitEventTimed(3, 1);     // Wait for receive from both channels
    302                  if (portresp & 0x01) {                  // answer on ch 0
    303                      Usart16552CheckPackage(0);         // handle incomming package
    304                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
    305                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
    306                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
    307                  } else {
    308                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
    309                      TData.RS4.FailCnt[PortPair][1]++;      // no answer total counter
    310                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
    311                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
    312                      }
    313                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
    314                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
    315                              // volatile undefined behavior
    316                              // ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    317                              //
    318                              temp = (0x01 << PortPair);
    319                              ClrBit(PORTC, temp);            // Switch off power
    320                              OS_SignalEvent(2, &TCB_RS485Ctl);
    321                          }
    322                      }
    323                  }
    324                  if (portresp & 0x02) {                  // answer on ch 1
    325                      Usart16552CheckPackage(1);         // handle incomming package
    326                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
    327                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
    328                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
    329                  } else {
    330                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   00000010   9100....           LDS     R16, (UART16552 + 50)
   \   00000014   9503               INC     R16
   \   00000016   9300....           STS     (UART16552 + 50), R16
    331                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   0000001A   9100....           LDS     R16, PortPair
   \   0000001E   E014               LDI     R17, 4
   \   00000020   9F01               MUL     R16, R17
   \   00000022   01F0               MOVW    R31:R30, R1:R0
   \   00000024   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000028   8D05               LDD     R16, Z+29
   \   0000002A   8D16               LDD     R17, Z+30
   \   0000002C   5F0F               SUBI    R16, 255
   \   0000002E   4F1F               SBCI    R17, 255
   \   00000030   8F05               STD     Z+29, R16
   \   00000032   8F16               STD     Z+30, R17
    332                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   00000034   9100....           LDS     R16, PortPair
   \   00000038   E014               LDI     R17, 4
   \   0000003A   9F01               MUL     R16, R17
   \   0000003C   ....               LDI     R30, LOW(TData)
   \   0000003E   ....               LDI     R31, (TData) >> 8
   \   00000040   0DE0               ADD     R30, R0
   \   00000042   1DF1               ADC     R31, R1
   \   00000044   8D03               LDD     R16, Z+27
   \   00000046   8D14               LDD     R17, Z+28
   \   00000048   0198               MOVW    R19:R18, R17:R16
   \   0000004A   5F2F               SUBI    R18, 255
   \   0000004C   4F3F               SBCI    R19, 255
   \   0000004E   8F23               STD     Z+27, R18
   \   00000050   8F34               STD     Z+28, R19
   \   00000052   3006               CPI     R16, 6
   \   00000054   4010               SBCI    R17, 0
   \   00000056   F048               BRCS    ??ExtRS485Rec_2
    333                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   00000058   9100....           LDS     R16, PortPair
   \   0000005C   E0F0               LDI     R31, 0
   \   0000005E   2FE0               MOV     R30, R16
   \   00000060   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000062   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000064   8107               LDD     R16, Z+7
   \   00000066   6001               ORI     R16, 0x01
   \   00000068   8307               STD     Z+7, R16
    334                      }
    335                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_2:
   \   0000006A   9100....           LDS     R16, TData
   \   0000006E   E010               LDI     R17, 0
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   5F4C               SUBI    R20, 252
   \   00000076   ........           CALL    ?SS_SHR_L02
   \   0000007A   7001               ANDI    R16, 0x01
   \   0000007C   F109               BREQ    ??ExtRS485Rec_3
    336                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   0000007E   9100....           LDS     R16, PortPair
   \   00000082   E014               LDI     R17, 4
   \   00000084   9F01               MUL     R16, R17
   \   00000086   01F0               MOVW    R31:R30, R1:R0
   \   00000088   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000008A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000008C   8D03               LDD     R16, Z+27
   \   0000008E   7007               ANDI    R16, 0x07
   \   00000090   3004               CPI     R16, 4
   \   00000092   F4B1               BRNE    ??ExtRS485Rec_3
    337                              // volatile undefined behavior
    338                              // ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
    339                              //
    340                              temp = (0x01 << (PortPair + 4));
   \   00000094   9140....           LDS     R20, PortPair
    341                              ClrBit(PORTC, temp);            // Switch off power
   \   00000098   94F8               cli
   \   0000009A   5F4C               SUBI    R20, 252
   \   0000009C   E001               LDI     R16, 1
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   ........           CALL    ?S_SHL_L02
   \   000000A4   9500               COM     R16
   \   000000A6   B118               IN      R17, 0x08
   \   000000A8   2310               AND     R17, R16
   \   000000AA   B918               OUT     0x08, R17
   \   000000AC   9100....           LDS     R16, (OS_Global + 1)
   \   000000B0   2300               TST     R16
   \   000000B2   F409               BRNE    ??ExtRS485Rec_4
   \   000000B4   9478               sei
    342                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_4:
   \   000000B6   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000B8   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000BA   E002               LDI     R16, 2
   \   000000BC   ........           CALL    OS_SignalEvent
    343                          }
    344                      }
    345                  }
    346                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_3:
   \   000000C0   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000C2   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000C4   E001               LDI     R16, 1
   \   000000C6   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_0:
   \   000000CA   EF03               LDI     R16, 243
   \   000000CC   E011               LDI     R17, 1
   \   000000CE   ........           CALL    OS_Delay
   \   000000D2   E021               LDI     R18, 1
   \   000000D4   E030               LDI     R19, 0
   \   000000D6   E003               LDI     R16, 3
   \   000000D8   ........           CALL    OS_WaitEventTimed
   \   000000DC   2F80               MOV     R24, R16
   \   000000DE   FB00               BST     R16, 0
   \   000000E0   F4BE               BRTC    ??ExtRS485Rec_5
   \   000000E2   E000               LDI     R16, 0
   \   000000E4   ....               RCALL   Usart16552CheckPackage
   \   000000E6   9100....           LDS     R16, PortPair
   \   000000EA   E014               LDI     R17, 4
   \   000000EC   9F01               MUL     R16, R17
   \   000000EE   01F0               MOVW    R31:R30, R1:R0
   \   000000F0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000F2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000F4   87A3               STD     Z+11, R26
   \   000000F6   87A4               STD     Z+12, R26
   \   000000F8   9100....           LDS     R16, PortPair
   \   000000FC   E0F0               LDI     R31, 0
   \   000000FE   2FE0               MOV     R30, R16
   \   00000100   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000102   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000104   8103               LDD     R16, Z+3
   \   00000106   7F0E               ANDI    R16, 0xFE
   \   00000108   8303               STD     Z+3, R16
   \   0000010A   93A0....           STS     (UART16552 + 24), R26
   \   0000010E   C056               RJMP    ??ExtRS485Rec_6
   \                     ??ExtRS485Rec_5:
   \   00000110   9100....           LDS     R16, (UART16552 + 24)
   \   00000114   9503               INC     R16
   \   00000116   9300....           STS     (UART16552 + 24), R16
   \   0000011A   9100....           LDS     R16, PortPair
   \   0000011E   E014               LDI     R17, 4
   \   00000120   9F01               MUL     R16, R17
   \   00000122   01F0               MOVW    R31:R30, R1:R0
   \   00000124   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000126   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000128   8505               LDD     R16, Z+13
   \   0000012A   8516               LDD     R17, Z+14
   \   0000012C   5F0F               SUBI    R16, 255
   \   0000012E   4F1F               SBCI    R17, 255
   \   00000130   8705               STD     Z+13, R16
   \   00000132   8716               STD     Z+14, R17
   \   00000134   9100....           LDS     R16, PortPair
   \   00000138   E014               LDI     R17, 4
   \   0000013A   9F01               MUL     R16, R17
   \   0000013C   ....               LDI     R30, LOW(TData)
   \   0000013E   ....               LDI     R31, (TData) >> 8
   \   00000140   0DE0               ADD     R30, R0
   \   00000142   1DF1               ADC     R31, R1
   \   00000144   8503               LDD     R16, Z+11
   \   00000146   8514               LDD     R17, Z+12
   \   00000148   0198               MOVW    R19:R18, R17:R16
   \   0000014A   5F2F               SUBI    R18, 255
   \   0000014C   4F3F               SBCI    R19, 255
   \   0000014E   8723               STD     Z+11, R18
   \   00000150   8734               STD     Z+12, R19
   \   00000152   3006               CPI     R16, 6
   \   00000154   4010               SBCI    R17, 0
   \   00000156   F048               BRCS    ??ExtRS485Rec_7
   \   00000158   9100....           LDS     R16, PortPair
   \   0000015C   E0F0               LDI     R31, 0
   \   0000015E   2FE0               MOV     R30, R16
   \   00000160   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000162   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000164   8103               LDD     R16, Z+3
   \   00000166   6001               ORI     R16, 0x01
   \   00000168   8303               STD     Z+3, R16
   \                     ??ExtRS485Rec_7:
   \   0000016A   9100....           LDS     R16, TData
   \   0000016E   E010               LDI     R17, 0
   \   00000170   9140....           LDS     R20, PortPair
   \   00000174   ........           CALL    ?SS_SHR_L02
   \   00000178   7001               ANDI    R16, 0x01
   \   0000017A   F101               BREQ    ??ExtRS485Rec_6
   \   0000017C   9100....           LDS     R16, PortPair
   \   00000180   E014               LDI     R17, 4
   \   00000182   9F01               MUL     R16, R17
   \   00000184   01F0               MOVW    R31:R30, R1:R0
   \   00000186   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000188   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000018A   8503               LDD     R16, Z+11
   \   0000018C   7007               ANDI    R16, 0x07
   \   0000018E   3004               CPI     R16, 4
   \   00000190   F4A9               BRNE    ??ExtRS485Rec_6
   \   00000192   9140....           LDS     R20, PortPair
   \   00000196   94F8               cli
   \   00000198   E001               LDI     R16, 1
   \   0000019A   E010               LDI     R17, 0
   \   0000019C   ........           CALL    ?S_SHL_L02
   \   000001A0   9500               COM     R16
   \   000001A2   B118               IN      R17, 0x08
   \   000001A4   2310               AND     R17, R16
   \   000001A6   B918               OUT     0x08, R17
   \   000001A8   9100....           LDS     R16, (OS_Global + 1)
   \   000001AC   2300               TST     R16
   \   000001AE   F409               BRNE    ??ExtRS485Rec_8
   \   000001B0   9478               sei
   \                     ??ExtRS485Rec_8:
   \   000001B2   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000001B4   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000001B6   E002               LDI     R16, 2
   \   000001B8   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_6:
   \   000001BC   FB81               BST     R24, 1
   \   000001BE   F00E               BRTS    $+2+2
   \   000001C0   CF27               RJMP    ??ExtRS485Rec_1
   \   000001C2   E001               LDI     R16, 1
   \   000001C4   ....               RCALL   Usart16552CheckPackage
   \   000001C6   9100....           LDS     R16, PortPair
   \   000001CA   E014               LDI     R17, 4
   \   000001CC   9F01               MUL     R16, R17
   \   000001CE   01F0               MOVW    R31:R30, R1:R0
   \   000001D0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001D2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001D4   8FA3               STD     Z+27, R26
   \   000001D6   8FA4               STD     Z+28, R26
   \   000001D8   9100....           LDS     R16, PortPair
   \   000001DC   E0F0               LDI     R31, 0
   \   000001DE   2FE0               MOV     R30, R16
   \   000001E0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001E2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001E4   8107               LDD     R16, Z+7
   \   000001E6   7F0E               ANDI    R16, 0xFE
   \   000001E8   8307               STD     Z+7, R16
   \   000001EA   93A0....           STS     (UART16552 + 50), R26
   \   000001EE   CF68               RJMP    ??ExtRS485Rec_3
   \   000001F0                      REQUIRE _A_PORTC
    347              }
    348          }
    349          
    350          /*************************************************************************
    351          *
    352          *  Set ports on or off
    353          *
    354          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    355          void SetRS4Port(void) {
   \                     SetRS4Port:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    356          
    357              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   B908               OUT     0x08, R16
    358          
    359          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    360          
    361          /*************************************************************************
    362          *
    363          *  Check the incoming packages from AN_SGCNV / WIS
    364          *
    365          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    366          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000E   2E50               MOV     R5, R16
    367          
    368              unsigned short pointer;
    369              char count_out, more;
    370          
    371              count_out = MAX_PROT_CMD;                  // max command
   \   00000010   2466               CLR     R6
   \   00000012   946A               DEC     R6
    372              more = true;
   \   00000014   2444               CLR     R4
   \   00000016   9443               INC     R4
    373              pointer = 4;
   \   00000018   E084               LDI     R24, 4
   \   0000001A   E090               LDI     R25, 0
   \   0000001C   E10A               LDI     R16, 26
   \   0000001E   9E50               MUL     R5, R16
   \   00000020   ....               LDI     R26, LOW(UART16552)
   \   00000022   ....               LDI     R27, (UART16552) >> 8
   \   00000024   0DA0               ADD     R26, R0
   \   00000026   1DB1               ADC     R27, R1
    374              do {
    375                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   00000028   019C               MOVW    R19:R18, R25:R24
   \   0000002A   2D05               MOV     R16, R5
   \   0000002C   ....               RCALL   CheckActionUart16552
   \   0000002E   2300               TST     R16
   \   00000030   F409               BRNE    ??Usart16552CheckPackage_1
    376                      more = false;                          // terminate while loop
   \   00000032   2444               CLR     R4
    377                  }
    378                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   00000034   01FD               MOVW    R31:R30, R27:R26
   \   00000036   8502               LDD     R16, Z+10
   \   00000038   8513               LDD     R17, Z+11
   \   0000003A   0F08               ADD     R16, R24
   \   0000003C   1F19               ADC     R17, R25
   \   0000003E   01F8               MOVW    R31:R30, R17:R16
   \   00000040   81E1               LDD     R30, Z+1
   \   00000042   E0F0               LDI     R31, 0
   \   00000044   9632               ADIW    R31:R30, 2
   \   00000046   0F8E               ADD     R24, R30
   \   00000048   1F9F               ADC     R25, R31
    379                  if (!--count_out) {
   \   0000004A   946A               DEC     R6
   \   0000004C   F051               BREQ    ??Usart16552CheckPackage_2
    380                      more = false;
    381                  }
    382              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \   0000004E   2044               TST     R4
   \   00000050   F041               BREQ    ??Usart16552CheckPackage_2
   \   00000052   01FD               MOVW    R31:R30, R27:R26
   \   00000054   8906               LDD     R16, Z+22
   \   00000056   8917               LDD     R17, Z+23
   \   00000058   5003               SUBI    R16, 3
   \   0000005A   4010               SBCI    R17, 0
   \   0000005C   1780               CP      R24, R16
   \   0000005E   0791               CPC     R25, R17
   \   00000060   F318               BRCS    ??Usart16552CheckPackage_0
    383              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_2:
   \   00000062   2D05               MOV     R16, R5
   \   00000064   ....               RCALL   GoToSyncUART16552
    384          }
   \   00000066                      REQUIRE ?Subroutine2
   \   00000066                      ;               // Fall through to label ?Subroutine2

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9508               RET
    385          
    386          /*************************************************************************
    387          *
    388          *  Check action on received data from AN_SGCNV
    389          *
    390          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    391          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
    392          
    393              char retval = true;
   \   00000006   E081               LDI     R24, 1
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R30, LOW(UART16552)
   \   0000000E   ....               LDI     R31, (UART16552) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   85A2               LDD     R26, Z+10
   \   00000016   85B3               LDD     R27, Z+11
   \   00000018   0FA2               ADD     R26, R18
   \   0000001A   1FB3               ADC     R27, R19
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8110               LD      R17, Z
   \   00000020   5810               SUBI    R17, 128
   \   00000022   F409               BRNE    $+2+2
   \   00000024   C040               RJMP    ??CheckActionUart16552_0
   \   00000026   5314               SUBI    R17, 52
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C045               RJMP    ??CheckActionUart16552_1
   \   0000002C   951A               DEC     R17
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C046               RJMP    ??CheckActionUart16552_2
   \   00000032   541B               SUBI    R17, 75
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C050               RJMP    ??CheckActionUart16552_3
   \   00000038   951A               DEC     R17
   \   0000003A   F409               BRNE    $+2+2
   \   0000003C   C04D               RJMP    ??CheckActionUart16552_3
   \   0000003E   511D               SUBI    R17, 29
   \   00000040   F088               BRCS    ??CheckActionUart16552_4
   \   00000042   5013               SUBI    R17, 3
   \   00000044   F080               BRCS    ??CheckActionUart16552_5
   \   00000046   5013               SUBI    R17, 3
   \   00000048   F0B0               BRCS    ??CheckActionUart16552_6
   \   0000004A   F0C9               BREQ    ??CheckActionUart16552_7
   \   0000004C   951A               DEC     R17
   \   0000004E   F0F9               BREQ    ??CheckActionUart16552_8
   \   00000050   5017               SUBI    R17, 7
   \   00000052   F109               BREQ    ??CheckActionUart16552_9
   \   00000054   5013               SUBI    R17, 3
   \   00000056   F0B9               BREQ    ??CheckActionUart16552_10
   \   00000058   5012               SUBI    R17, 2
   \   0000005A   F049               BREQ    ??CheckActionUart16552_11
   \   0000005C   541D               SUBI    R17, 77
   \   0000005E   F0F9               BREQ    ??CheckActionUart16552_12
   \   00000060   951A               DEC     R17
   \   00000062   F129               BREQ    ??CheckActionUart16552_13
   \                     ??CheckActionUart16552_4:
   \   00000064   C03A               RJMP    ??CheckActionUart16552_14
    394          
    395              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
    396          
    397              case ANP1_REP_MP_DATA :                              // Measured pressure data
    398              case ANP1_REP_MT_DATA :                              // Measured temperature data
    399              case ANP1_REP_MO_DATA :                              // Measured "other" data
    400                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_5:
   \   00000066   5F2E               SUBI    R18, 254
   \   00000068   4F3F               SBCI    R19, 255
   \   0000006A   ....               RCALL   ReceivePTOData
    401                  break;
   \   0000006C   C036               RJMP    ??CheckActionUart16552_14
    402              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    403                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_11:
   \   0000006E   5F2E               SUBI    R18, 254
   \   00000070   4F3F               SBCI    R19, 255
   \   00000072   ....               RCALL   ReceiveWHData
    404                  break;
   \   00000074   C032               RJMP    ??CheckActionUart16552_14
    405              case ANP1_REP_RP_DATA :                              // Raw pressure data
    406              case ANP1_REP_RT_DATA :                              // Raw temp. data
    407              case ANP1_REP_RO_DATA :                              // Raw "other" data
    408                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_6:
   \   00000076   5F2E               SUBI    R18, 254
   \   00000078   4F3F               SBCI    R19, 255
   \   0000007A   ....               RCALL   ReceiveRData
    409                  break;
   \   0000007C   C02E               RJMP    ??CheckActionUart16552_14
    410              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    411                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_7:
   \   0000007E   5F2E               SUBI    R18, 254
   \   00000080   4F3F               SBCI    R19, 255
   \   00000082   ....               RCALL   ReceiveCData
    412                  break;
   \   00000084   C02A               RJMP    ??CheckActionUart16552_14
    413          
    414              case ANP1_REP_CARD_STAT :                             // card status package
    415                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_10:
   \   00000086   5F2E               SUBI    R18, 254
   \   00000088   4F3F               SBCI    R19, 255
   \   0000008A   ....               RCALL   ReceiveCardStatus
    416                  break;
   \   0000008C   C026               RJMP    ??CheckActionUart16552_14
    417          
    418              case ANP1_REP_CONFIG :                             // config data
    419                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_8:
   \   0000008E   5F2E               SUBI    R18, 254
   \   00000090   4F3F               SBCI    R19, 255
   \   00000092   ....               RCALL   ReceiveConfigData
    420                  break;
   \   00000094   C022               RJMP    ??CheckActionUart16552_14
    421          
    422              case ANP1_REP_EEP_DATA :                             // card eeprome
    423                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_9:
   \   00000096   5F2E               SUBI    R18, 254
   \   00000098   4F3F               SBCI    R19, 255
   \   0000009A   ....               RCALL   ReceiveCardEEPROMData
    424                  break;
   \   0000009C   C01E               RJMP    ??CheckActionUart16552_14
    425          
    426              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    427                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_12:
   \   0000009E   5F2E               SUBI    R18, 254
   \   000000A0   4F3F               SBCI    R19, 255
   \   000000A2   ....               RCALL   ReceiveWISStatus
    428                  break;
   \   000000A4   C01A               RJMP    ??CheckActionUart16552_14
    429          
    430              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    431                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_0:
   \   000000A6   5F2E               SUBI    R18, 254
   \   000000A8   4F3F               SBCI    R19, 255
   \   000000AA   ....               RCALL   ReceiveWISXData
    432                  break;
   \   000000AC   C016               RJMP    ??CheckActionUart16552_14
    433          
    434              case ANP1_REP_WIS_DATA :                             // Data from WIS
    435                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_13:
   \   000000AE   5F2E               SUBI    R18, 254
   \   000000B0   4F3F               SBCI    R19, 255
   \   000000B2   ....               RCALL   ReceiveWISData
    436                  break;
   \   000000B4   C012               RJMP    ??CheckActionUart16552_14
    437              case ANP1_REP_GODA_DATA:
    438                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_1:
   \   000000B6   5F2E               SUBI    R18, 254
   \   000000B8   4F3F               SBCI    R19, 255
   \   000000BA   ....               RCALL   ReceiveRadarData
    439                  break;
   \   000000BC   C00E               RJMP    ??CheckActionUart16552_14
    440              case ANP1_REP_GODA_INFO:
    441                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_2:
   \   000000BE   8544               LDD     R20, Z+12
   \   000000C0   E014               LDI     R17, 4
   \   000000C2   9F01               MUL     R16, R17
   \   000000C4   9100....           LDS     R16, PortPair
   \   000000C8   E010               LDI     R17, 0
   \   000000CA   0E00               ADD     R0, R16
   \   000000CC   1E11               ADC     R1, R17
   \   000000CE   01F0               MOVW    R31:R30, R1:R0
   \   000000D0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000D4   A743               STD     Z+43, R20
    442                  break;
   \   000000D6   C001               RJMP    ??CheckActionUart16552_14
    443              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    444              case ANP1_ECMD_NMDWOACK :                         // No more data
    445                  retval = false;
   \                     ??CheckActionUart16552_3:
   \   000000D8   E080               LDI     R24, 0
    446                  break;
    447              }
    448              return retval;
   \                     ??CheckActionUart16552_14:
   \   000000DA   2F08               MOV     R16, R24
   \   000000DC   9189               LD      R24, Y+
   \   000000DE   91A9               LD      R26, Y+
   \   000000E0   91B9               LD      R27, Y+
   \   000000E2   9508               RET
    449          }
    450          
    451          /*************************************************************************
    452          *
    453          *  Receive card status from WIS
    454          *
    455          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    456          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   2F10               MOV     R17, R16
    457          
    458              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000004   9100....           LDS     R16, PortPair
   \   00000008   E14A               LDI     R20, 26
   \   0000000A   9F14               MUL     R17, R20
   \   0000000C   ....               LDI     R26, LOW(UART16552)
   \   0000000E   ....               LDI     R27, (UART16552) >> 8
   \   00000010   0DA0               ADD     R26, R0
   \   00000012   1DB1               ADC     R27, R1
   \   00000014   961A               ADIW    R27:R26, 10
   \   00000016   91ED               LD      R30, X+
   \   00000018   91FC               LD      R31, X
   \   0000001A   0FE2               ADD     R30, R18
   \   0000001C   1FF3               ADC     R31, R19
   \   0000001E   E024               LDI     R18, 4
   \   00000020   9F12               MUL     R17, R18
   \   00000022   8120               LD      R18, Z
   \   00000024   E010               LDI     R17, 0
   \   00000026   01A0               MOVW    R21:R20, R1:R0
   \   00000028   0F40               ADD     R20, R16
   \   0000002A   1F51               ADC     R21, R17
   \   0000002C   01DA               MOVW    R27:R26, R21:R20
   \   0000002E   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   00000030   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000032   910C               LD      R16, X
   \   00000034   2B02               OR      R16, R18
   \   00000036   930C               ST      X, R16
    459              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000038   8121               LDD     R18, Z+1
   \   0000003A   9100....           LDS     R16, PortPair
   \   0000003E   01A0               MOVW    R21:R20, R1:R0
   \   00000040   0F40               ADD     R20, R16
   \   00000042   1F51               ADC     R21, R17
   \   00000044   01DA               MOVW    R27:R26, R21:R20
   \   00000046   ....               SUBI    R26, LOW((-(TData + 51) & 0xFFFF))
   \   00000048   ....               SBCI    R27, HIGH((-(TData + 51) & 0xFFFF))
   \   0000004A   932C               ST      X, R18
    460              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   0000004C   8104               LDD     R16, Z+4
   \   0000004E   2300               TST     R16
   \   00000050   F051               BREQ    ??ReceiveWISStatus_0
    461                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   00000052   9100....           LDS     R16, PortPair
   \   00000056   0E00               ADD     R0, R16
   \   00000058   1E11               ADC     R1, R17
   \   0000005A   01F0               MOVW    R31:R30, R1:R0
   \   0000005C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000005E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000060   A903               LDD     R16, Z+51
   \   00000062   6800               ORI     R16, 0x80
   \   00000064   AB03               STD     Z+51, R16
    462              }
    463          }
   \                     ??ReceiveWISStatus_0:
   \   00000066   01DB               MOVW    R27:R26, R23:R22
   \   00000068   9508               RET
    464          
    465          /*************************************************************************
    466          *
    467          *  Receive WIS protocol data
    468          *
    469          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    470          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    471          
    472              char i;
    473          
    474              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART16552)
   \   0000000A   ....               LDI     R31, (UART16552) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   85A2               LDD     R26, Z+10
   \   00000012   85B3               LDD     R27, Z+11
   \   00000014   0FA2               ADD     R26, R18
   \   00000016   1FB3               ADC     R27, R19
   \   00000018   911D               LD      R17, X+
   \   0000001A   3713               CPI     R17, 115
   \   0000001C   F4D9               BRNE    ??ReceiveWISXData_0
    475              case 115:                                     // Serial number
    476                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   0000001E   E312               LDI     R17, 50
   \   00000020   9F01               MUL     R16, R17
   \   00000022   ....               LDI     R24, LOW(TData)
   \   00000024   ....               LDI     R25, (TData) >> 8
   \   00000026   0D80               ADD     R24, R0
   \   00000028   1D91               ADC     R25, R1
   \   0000002A   01FC               MOVW    R31:R30, R25:R24
   \   0000002C   56EC               SUBI    R30, 108
   \   0000002E   4FFA               SBCI    R31, 250
   \   00000030   E011               LDI     R17, 1
   \   00000032   8310               ST      Z, R17
    477                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000034   0F00               LSL     R16
   \   00000036   0F00               LSL     R16
   \   00000038   9110....           LDS     R17, PortPair
   \   0000003C   0F01               ADD     R16, R17
   \   0000003E   8301               STD     Z+1, R16
    478                  for (i = 2; i < (4 + 2); i++) {
   \   00000040   9602               ADIW    R25:R24, 2
   \   00000042   E004               LDI     R16, 4
    479                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveWISXData_1:
   \   00000044   911D               LD      R17, X+
   \   00000046   01FC               MOVW    R31:R30, R25:R24
   \   00000048   56EC               SUBI    R30, 108
   \   0000004A   4FFA               SBCI    R31, 250
   \   0000004C   8310               ST      Z, R17
    480                  }
   \   0000004E   9601               ADIW    R25:R24, 1
   \   00000050   950A               DEC     R16
   \   00000052   F7C1               BRNE    ??ReceiveWISXData_1
    481                  break;
    482              default:
    483                  break;
    484              }
    485          }
   \                     ??ReceiveWISXData_0:
   \   00000054   01CA               MOVW    R25:R24, R21:R20
   \   00000056   01DB               MOVW    R27:R26, R23:R22
   \   00000058   9508               RET
    486          
    487          /*************************************************************************
    488          *
    489          *  Receive measured data from WIS
    490          *
    491          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    492          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   E11A               LDI     R17, 26
   \   0000000A   9F01               MUL     R16, R17
   \   0000000C   ....               LDI     R30, LOW(UART16552)
   \   0000000E   ....               LDI     R31, (UART16552) >> 8
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   85A2               LDD     R26, Z+10
   \   00000016   85B3               LDD     R27, Z+11
   \   00000018   0FA2               ADD     R26, R18
   \   0000001A   1FB3               ADC     R27, R19
   \   0000001C   E014               LDI     R17, 4
   \   0000001E   9F01               MUL     R16, R17
   \   00000020   01C0               MOVW    R25:R24, R1:R0
   \   00000022   910C               LD      R16, X
   \   00000024   E010               LDI     R17, 0
   \   00000026   E020               LDI     R18, 0
   \   00000028   E030               LDI     R19, 0
   \   0000002A   ........           CALL    ?UL2F_S_L04
   \   0000002E   9140....           LDS     R20, PortPair
   \   00000032   E050               LDI     R21, 0
   \   00000034   01BC               MOVW    R23:R22, R25:R24
   \   00000036   0F64               ADD     R22, R20
   \   00000038   1F75               ADC     R23, R21
   \   0000003A   E348               LDI     R20, 56
   \   0000003C   9F74               MUL     R23, R20
   \   0000003E   2D70               MOV     R23, R0
   \   00000040   9F64               MUL     R22, R20
   \   00000042   0D71               ADD     R23, R1
   \   00000044   2DE0               MOV     R30, R0
   \   00000046   2FF7               MOV     R31, R23
   \   00000048   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   0000004A   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   0000004C   8300               ST      Z, R16
   \   0000004E   8311               STD     Z+1, R17
   \   00000050   8322               STD     Z+2, R18
   \   00000052   8333               STD     Z+3, R19
    493          
    494              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
    495              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    496                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   00000054   01FD               MOVW    R31:R30, R27:R26
   \   00000056   8111               LDD     R17, Z+1
   \   00000058   8102               LDD     R16, Z+2
   \   0000005A   2F21               MOV     R18, R17
   \   0000005C   0F22               LSL     R18
   \   0000005E   0B22               SBC     R18, R18
   \   00000060   2F32               MOV     R19, R18
   \   00000062   ........           CALL    ?SL2F_S_L04
   \   00000066   E040               LDI     R20, 0
   \   00000068   E260               LDI     R22, 32
   \   0000006A   E471               LDI     R23, 65
   \   0000006C   ........           CALL    ?F_DIV_S_L04
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   E050               LDI     R21, 0
   \   00000076   01BC               MOVW    R23:R22, R25:R24
   \   00000078   0F64               ADD     R22, R20
   \   0000007A   1F75               ADC     R23, R21
   \   0000007C   E348               LDI     R20, 56
   \   0000007E   9F74               MUL     R23, R20
   \   00000080   2D70               MOV     R23, R0
   \   00000082   9F64               MUL     R22, R20
   \   00000084   0D71               ADD     R23, R1
   \   00000086   2DE0               MOV     R30, R0
   \   00000088   2FF7               MOV     R31, R23
   \   0000008A   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   0000008E   8300               ST      Z, R16
   \   00000090   8311               STD     Z+1, R17
   \   00000092   8322               STD     Z+2, R18
   \   00000094   8333               STD     Z+3, R19
    497              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   00000096   01FD               MOVW    R31:R30, R27:R26
   \   00000098   8123               LDD     R18, Z+3
   \   0000009A   9100....           LDS     R16, PortPair
   \   0000009E   E010               LDI     R17, 0
   \   000000A0   01AC               MOVW    R21:R20, R25:R24
   \   000000A2   0F40               ADD     R20, R16
   \   000000A4   1F51               ADC     R21, R17
   \   000000A6   E00E               LDI     R16, 14
   \   000000A8   9F50               MUL     R21, R16
   \   000000AA   2D50               MOV     R21, R0
   \   000000AC   9F40               MUL     R20, R16
   \   000000AE   0D51               ADD     R21, R1
   \   000000B0   2DE0               MOV     R30, R0
   \   000000B2   2FF5               MOV     R31, R21
   \   000000B4   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000B8   AF23               STD     Z+59, R18
    498              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   000000BA   9100....           LDS     R16, PortPair
   \   000000BE   0F80               ADD     R24, R16
   \   000000C0   1F91               ADC     R25, R17
   \   000000C2   E00E               LDI     R16, 14
   \   000000C4   9F90               MUL     R25, R16
   \   000000C6   2D90               MOV     R25, R0
   \   000000C8   9F80               MUL     R24, R16
   \   000000CA   0D91               ADD     R25, R1
   \   000000CC   2DE0               MOV     R30, R0
   \   000000CE   2FF9               MOV     R31, R25
   \   000000D0   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000D2   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000D4   8310               ST      Z, R17
    499          }
   \   000000D6                      REQUIRE ?Subroutine3
   \   000000D6                      ;               // Fall through to label ?Subroutine3

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9508               RET
    500          
    501          
    502          /*************************************************************************
    503          *
    504          *  Receive measured data from Radar
    505          *
    506          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    507          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R26, LOW(UART16552)
   \   0000000A   ....               LDI     R27, (UART16552) >> 8
   \   0000000C   0DA0               ADD     R26, R0
   \   0000000E   1DB1               ADC     R27, R1
   \   00000010   961A               ADIW    R27:R26, 10
   \   00000012   91ED               LD      R30, X+
   \   00000014   91FC               LD      R31, X
   \   00000016   0FE2               ADD     R30, R18
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   E014               LDI     R17, 4
   \   0000001C   9F01               MUL     R16, R17
   \   0000001E   0190               MOVW    R19:R18, R1:R0
   \   00000020   8140               LD      R20, Z
   \   00000022   8151               LDD     R21, Z+1
   \   00000024   8162               LDD     R22, Z+2
   \   00000026   8173               LDD     R23, Z+3
   \   00000028   9100....           LDS     R16, PortPair
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   0110               MOVW    R3:R2, R1:R0
   \   00000030   0E20               ADD     R2, R16
   \   00000032   1E31               ADC     R3, R17
   \   00000034   E308               LDI     R16, 56
   \   00000036   9E30               MUL     R3, R16
   \   00000038   2C30               MOV     R3, R0
   \   0000003A   9E20               MUL     R2, R16
   \   0000003C   0C31               ADD     R3, R1
   \   0000003E   2DA0               MOV     R26, R0
   \   00000040   2DB3               MOV     R27, R3
   \   00000042   ....               SUBI    R26, LOW((-(TData + 731) & 0xFFFF))
   \   00000044   ....               SBCI    R27, HIGH((-(TData + 731) & 0xFFFF))
   \   00000046   934D               ST      X+, R20
   \   00000048   935D               ST      X+, R21
   \   0000004A   936D               ST      X+, R22
   \   0000004C   937C               ST      X, R23
    508              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
    509              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
    510          
    511              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
    512              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   0000004E   8144               LDD     R20, Z+4
   \   00000050   8155               LDD     R21, Z+5
   \   00000052   8166               LDD     R22, Z+6
   \   00000054   8177               LDD     R23, Z+7
   \   00000056   9100....           LDS     R16, PortPair
   \   0000005A   0119               MOVW    R3:R2, R19:R18
   \   0000005C   0E20               ADD     R2, R16
   \   0000005E   1E31               ADC     R3, R17
   \   00000060   E308               LDI     R16, 56
   \   00000062   9E30               MUL     R3, R16
   \   00000064   2C30               MOV     R3, R0
   \   00000066   9E20               MUL     R2, R16
   \   00000068   0C31               ADD     R3, R1
   \   0000006A   2DA0               MOV     R26, R0
   \   0000006C   2DB3               MOV     R27, R3
   \   0000006E   ....               SUBI    R26, LOW((-(TData + 735) & 0xFFFF))
   \   00000070   ....               SBCI    R27, HIGH((-(TData + 735) & 0xFFFF))
   \   00000072   934D               ST      X+, R20
   \   00000074   935D               ST      X+, R21
   \   00000076   936D               ST      X+, R22
   \   00000078   937C               ST      X, R23
    513              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   0000007A   8540               LDD     R20, Z+8
   \   0000007C   9100....           LDS     R16, PortPair
   \   00000080   01B9               MOVW    R23:R22, R19:R18
   \   00000082   0F60               ADD     R22, R16
   \   00000084   1F71               ADC     R23, R17
   \   00000086   E00E               LDI     R16, 14
   \   00000088   9F70               MUL     R23, R16
   \   0000008A   2D70               MOV     R23, R0
   \   0000008C   9F60               MUL     R22, R16
   \   0000008E   0D71               ADD     R23, R1
   \   00000090   2DA0               MOV     R26, R0
   \   00000092   ....               SUBI    R26, LOW((-(TData + 59) & 0xFFFF))
   \   00000094   ....               SBCI    R23, HIGH((-(TData + 59) & 0xFFFF))
   \   00000096   2FB7               MOV     R27, R23
   \   00000098   934C               ST      X, R20
    514              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   0000009A   8541               LDD     R20, Z+9
   \   0000009C   9100....           LDS     R16, PortPair
   \   000000A0   0F20               ADD     R18, R16
   \   000000A2   1F31               ADC     R19, R17
   \   000000A4   E00E               LDI     R16, 14
   \   000000A6   9F30               MUL     R19, R16
   \   000000A8   2D30               MOV     R19, R0
   \   000000AA   9F20               MUL     R18, R16
   \   000000AC   0D31               ADD     R19, R1
   \   000000AE   2DE0               MOV     R30, R0
   \   000000B0   2FF3               MOV     R31, R19
   \   000000B2   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000B4   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000B6   8340               ST      Z, R20
    515          }
   \   000000B8   91A9               LD      R26, Y+
   \   000000BA   91B9               LD      R27, Y+
   \   000000BC   9508               RET
    516          
    517          
    518          /*************************************************************************
    519          *
    520          *  Receive Serial number and version information from Radar
    521          *
    522          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    523          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    524              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    525              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   85A2               LDD     R26, Z+10
   \   00000010   85B3               LDD     R27, Z+11
   \   00000012   0FA2               ADD     R26, R18
   \   00000014   1FB3               ADC     R27, R19
   \   00000016   961A               ADIW    R27:R26, 10
   \   00000018   914D               LD      R20, X+
   \   0000001A   E014               LDI     R17, 4
   \   0000001C   9F01               MUL     R16, R17
   \   0000001E   9100....           LDS     R16, PortPair
   \   00000022   E010               LDI     R17, 0
   \   00000024   0E00               ADD     R0, R16
   \   00000026   1E11               ADC     R1, R17
   \   00000028   01F0               MOVW    R31:R30, R1:R0
   \   0000002A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000002E   A743               STD     Z+43, R20
    526          }
   \   00000030   2FA6               MOV     R26, R22
   \   00000032   2FB5               MOV     R27, R21
   \   00000034   9508               RET
    527          
    528          /*************************************************************************
    529          *
    530          *  Receive pressure measured data from AN_SGCNV
    531          *
    532          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    533          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                      REQUIRE __RSTACK_in_external_ram_new_way
   \   0000000E   2E60               MOV     R6, R16
   \   00000010   0129               MOVW    R5:R4, R19:R18
    534          
    535              unsigned short pnt, ADCh;
    536              short packlen;
    537          
    538              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000012   E10A               LDI     R16, 26
   \   00000014   9E60               MUL     R6, R16
   \   00000016   ....               LDI     R26, LOW(UART16552)
   \   00000018   ....               LDI     R27, (UART16552) >> 8
   \   0000001A   0DA0               ADD     R26, R0
   \   0000001C   1DB1               ADC     R27, R1
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8502               LDD     R16, Z+10
   \   00000022   8513               LDD     R17, Z+11
   \   00000024   0D04               ADD     R16, R4
   \   00000026   1D15               ADC     R17, R5
   \   00000028   5001               SUBI    R16, 1
   \   0000002A   4010               SBCI    R17, 0
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   8180               LD      R24, Z
   \   00000030   E090               LDI     R25, 0
    539          
    540              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000032   ....               LDI     R16, LOW(UARTSEND)
   \   00000034   ....               LDI     R17, (UARTSEND) >> 8
   \   00000036   ........           CALL    OS_Use
    541          
    542              if (packlen > 0) {
   \   0000003A   3081               CPI     R24, 1
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   0799               CPC     R25, R25
   \   00000040   F40C               BRGE    $+2+2
   \   00000042   C046               RJMP    ??ReceivePTOData_0
    543                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   00000044   E010               LDI     R17, 0
   \   00000046   2388               TST     R24
   \   00000048   F409               BRNE    $+2+2
   \   0000004A   C042               RJMP    ??ReceivePTOData_0
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   85A2               LDD     R26, Z+10
   \   00000050   85B3               LDD     R27, Z+11
   \   00000052   0DA4               ADD     R26, R4
   \   00000054   1DB5               ADC     R27, R5
   \   00000056   E024               LDI     R18, 4
   \   00000058   9E62               MUL     R6, R18
   \   0000005A   0110               MOVW    R3:R2, R1:R0
    544                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceivePTOData_1:
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   8120               LD      R18, Z
   \   00000060   E030               LDI     R19, 0
    545                      if (ADCh < 14) {
   \   00000062   302E               CPI     R18, 14
   \   00000064   F578               BRCC    ??ReceivePTOData_2
    546                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000066   8161               LDD     R22, Z+1
   \   00000068   ....               LDI     R30, LOW((TData + 59))
   \   0000006A   ....               LDI     R31, HIGH((TData + 59))
   \   0000006C   0FE2               ADD     R30, R18
   \   0000006E   1FF9               ADC     R31, R25
   \   00000070   9140....           LDS     R20, PortPair
   \   00000074   0121               MOVW    R5:R4, R3:R2
   \   00000076   0E44               ADD     R4, R20
   \   00000078   1E59               ADC     R5, R25
   \   0000007A   E04E               LDI     R20, 14
   \   0000007C   9E54               MUL     R5, R20
   \   0000007E   2C50               MOV     R5, R0
   \   00000080   9E44               MUL     R4, R20
   \   00000082   0C51               ADD     R5, R1
   \   00000084   0DE0               ADD     R30, R0
   \   00000086   1DF5               ADC     R31, R5
   \   00000088   8360               ST      Z, R22
    547                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000008A   01FD               MOVW    R31:R30, R27:R26
   \   0000008C   8142               LDD     R20, Z+2
   \   0000008E   8153               LDD     R21, Z+3
   \   00000090   8164               LDD     R22, Z+4
   \   00000092   8175               LDD     R23, Z+5
   \   00000094   ....               LDI     R30, LOW((TData + 731))
   \   00000096   ....               LDI     R31, HIGH((TData + 731))
   \   00000098   0F22               LSL     R18
   \   0000009A   1F33               ROL     R19
   \   0000009C   0F22               LSL     R18
   \   0000009E   1F33               ROL     R19
   \   000000A0   0FE2               ADD     R30, R18
   \   000000A2   1FF3               ADC     R31, R19
   \   000000A4   9120....           LDS     R18, PortPair
   \   000000A8   0121               MOVW    R5:R4, R3:R2
   \   000000AA   0E42               ADD     R4, R18
   \   000000AC   1E59               ADC     R5, R25
   \   000000AE   E328               LDI     R18, 56
   \   000000B0   9E52               MUL     R5, R18
   \   000000B2   2C50               MOV     R5, R0
   \   000000B4   9E42               MUL     R4, R18
   \   000000B6   0C51               ADD     R5, R1
   \   000000B8   0DE0               ADD     R30, R0
   \   000000BA   1DF5               ADC     R31, R5
   \   000000BC   8340               ST      Z, R20
   \   000000BE   8351               STD     Z+1, R21
   \   000000C0   8362               STD     Z+2, R22
   \   000000C2   8373               STD     Z+3, R23
    548                      }
    549                  }
   \                     ??ReceivePTOData_2:
   \   000000C4   5F0A               SUBI    R16, 250
   \   000000C6   4F1F               SBCI    R17, 255
   \   000000C8   9616               ADIW    R27:R26, 6
   \   000000CA   1708               CP      R16, R24
   \   000000CC   0719               CPC     R17, R25
   \   000000CE   F230               BRCS    ??ReceivePTOData_1
    550              }
    551              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   000000D0   ....               LDI     R16, LOW(UARTSEND)
   \   000000D2   ....               LDI     R17, (UARTSEND) >> 8
   \   000000D4   ........           CALL    OS_Unuse
    552          }
   \   000000D8   ....               RJMP    ?Subroutine2
    553          /*************************************************************************
    554          *
    555          *  Receive Wash Track and High Level data from AN_SGCNV
    556          *
    557          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    558          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   93AA               ST      -Y, R26
   \   00000002   939A               ST      -Y, R25
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2FA0               MOV     R26, R16
   \   00000008   01C9               MOVW    R25:R24, R19:R18
    559          
    560              // Fixed packet length
    561              //short packlen;
    562          
    563              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    564          
    565              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   0000000A   ....               LDI     R16, LOW(UARTSEND)
   \   0000000C   ....               LDI     R17, (UARTSEND) >> 8
   \   0000000E   ........           CALL    OS_Use
    566              short Index = (ch * 4) + PortPair;
   \   00000012   E004               LDI     R16, 4
   \   00000014   9FA0               MUL     R26, R16
   \   00000016   0180               MOVW    R17:R16, R1:R0
   \   00000018   9120....           LDS     R18, PortPair
   \   0000001C   E030               LDI     R19, 0
   \   0000001E   0F02               ADD     R16, R18
   \   00000020   1F13               ADC     R17, R19
   \   00000022   E12A               LDI     R18, 26
   \   00000024   9FA2               MUL     R26, R18
   \   00000026   ....               LDI     R30, LOW(UART16552)
   \   00000028   ....               LDI     R31, (UART16552) >> 8
   \   0000002A   0DE0               ADD     R30, R0
   \   0000002C   1DF1               ADC     R31, R1
   \   0000002E   8562               LDD     R22, Z+10
   \   00000030   8573               LDD     R23, Z+11
   \   00000032   0F68               ADD     R22, R24
   \   00000034   1F79               ADC     R23, R25
   \   00000036   01A8               MOVW    R21:R20, R17:R16
   \   00000038   0F44               LSL     R20
   \   0000003A   1F55               ROL     R21
   \   0000003C   0F44               LSL     R20
   \   0000003E   1F55               ROL     R21
   \   00000040   0F44               LSL     R20
   \   00000042   1F55               ROL     R21
   \   00000044   ....               LDI     R18, LOW(TData)
   \   00000046   2E02               MOV     R0, R18
   \   00000048   ....               LDI     R18, (TData) >> 8
   \   0000004A   0E04               ADD     R0, R20
   \   0000004C   1F25               ADC     R18, R21
   \   0000004E   2E12               MOV     R1, R18
   \   00000050   0190               MOVW    R19:R18, R1:R0
   \   00000052   5625               SUBI    R18, 101
   \   00000054   4F3B               SBCI    R19, 251
   \   00000056   01FB               MOVW    R31:R30, R23:R22
   \   00000058   9142               LD      R20, -Z
   \   0000005A   3044               CPI     R20, 4
   \   0000005C   01AB               MOVW    R21:R20, R23:R22
   \   0000005E   F501               BRNE    ??ReceiveWHData_0
    567              // Check if we have time information included
    568              if (UART16552[ch].pRxBuffer[pointer -1] == 4 ) {
    569                  for (short pnt = 0; pnt < 3; pnt++) {
   \   00000060   E083               LDI     R24, 3
    570                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer+pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_1:
   \   00000062   01FA               MOVW    R31:R30, R21:R20
   \   00000064   9021               LD      R2, Z+
   \   00000066   01AF               MOVW    R21:R20, R31:R30
   \   00000068   2433               CLR     R3
   \   0000006A   01F9               MOVW    R31:R30, R19:R18
   \   0000006C   9221               ST      Z+, R2
   \   0000006E   9231               ST      Z+, R3
   \   00000070   019F               MOVW    R19:R18, R31:R30
    571                  }
   \   00000072   958A               DEC     R24
   \   00000074   F7B1               BRNE    ??ReceiveWHData_1
    572                  // 4th WashTrack dont come
    573                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \   00000076   EA21               LDI     R18, 161
   \   00000078   0E02               ADD     R0, R18
   \   0000007A   E024               LDI     R18, 4
   \   0000007C   1E12               ADC     R1, R18
   \   0000007E   01F0               MOVW    R31:R30, R1:R0
   \   00000080   8230               ST      Z, R3
   \   00000082   8231               STD     Z+1, R3
    574                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer +3]; // Hgh levels in 5th byte
   \   00000084   01FB               MOVW    R31:R30, R23:R22
   \   00000086   8123               LDD     R18, Z+3
   \   00000088   01F8               MOVW    R31:R30, R17:R16
   \   0000008A   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   0000008C   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   0000008E   8320               ST      Z, R18
    575                  TData.RS4.WTTime[Index] = 0;
   \   00000090   0F00               LSL     R16
   \   00000092   1F11               ROL     R17
   \   00000094   01F8               MOVW    R31:R30, R17:R16
   \   00000096   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   00000098   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   0000009A   8230               ST      Z, R3
   \   0000009C   8231               STD     Z+1, R3
   \   0000009E   C01B               RJMP    ??ReceiveWHData_2
    576              }else{
    577                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   000000A0   E084               LDI     R24, 4
    578                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_3:
   \   000000A2   01FA               MOVW    R31:R30, R21:R20
   \   000000A4   9001               LD      R0, Z+
   \   000000A6   9011               LD      R1, Z+
   \   000000A8   01AF               MOVW    R21:R20, R31:R30
   \   000000AA   01F9               MOVW    R31:R30, R19:R18
   \   000000AC   9201               ST      Z+, R0
   \   000000AE   9211               ST      Z+, R1
   \   000000B0   019F               MOVW    R19:R18, R31:R30
    579                  }
   \   000000B2   958A               DEC     R24
   \   000000B4   F7B1               BRNE    ??ReceiveWHData_3
    580                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \   000000B6   01FB               MOVW    R31:R30, R23:R22
   \   000000B8   8520               LDD     R18, Z+8
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000C0   8320               ST      Z, R18
    581                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   000000C2   01FB               MOVW    R31:R30, R23:R22
   \   000000C4   8521               LDD     R18, Z+9
   \   000000C6   8532               LDD     R19, Z+10
   \   000000C8   0F00               LSL     R16
   \   000000CA   1F11               ROL     R17
   \   000000CC   01F8               MOVW    R31:R30, R17:R16
   \   000000CE   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000D2   8320               ST      Z, R18
   \   000000D4   8331               STD     Z+1, R19
    582              }
    583              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_2:
   \   000000D6   0FAA               LSL     R26
   \   000000D8   0FAA               LSL     R26
   \   000000DA   9100....           LDS     R16, PortPair
   \   000000DE   0FA0               ADD     R26, R16
   \   000000E0   E001               LDI     R16, 1
   \   000000E2   E010               LDI     R17, 0
   \   000000E4   2F4A               MOV     R20, R26
   \   000000E6   ........           CALL    ?S_SHL_L02
   \   000000EA   9110....           LDS     R17, (TData + 1267)
   \   000000EE   2B10               OR      R17, R16
   \   000000F0   9310....           STS     (TData + 1267), R17
    584              OS_Unuse(&UARTSEND);
   \   000000F4   ....               LDI     R16, LOW(UARTSEND)
   \   000000F6   ....               LDI     R17, (UARTSEND) >> 8
   \   000000F8   ........           CALL    OS_Unuse
    585          }
   \   000000FC   9189               LD      R24, Y+
   \   000000FE   9199               LD      R25, Y+
   \   00000100   91A9               LD      R26, Y+
   \   00000102   9508               RET
    586          
    587          
    588          /************************************************************************
    589          *
    590          *  Receive raw data for pressure, temp and other from AN_SGCNV
    591          *
    592          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    593          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   01A9               MOVW    R21:R20, R19:R18
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   ....               LDI     R30, LOW(UART16552)
   \   00000018   ....               LDI     R31, (UART16552) >> 8
   \   0000001A   0DE0               ADD     R30, R0
   \   0000001C   1DF1               ADC     R31, R1
   \   0000001E   8562               LDD     R22, Z+10
   \   00000020   8573               LDD     R23, Z+11
   \   00000022   01FB               MOVW    R31:R30, R23:R22
   \   00000024   0FE4               ADD     R30, R20
   \   00000026   1FF5               ADC     R31, R21
   \   00000028   9122               LD      R18, -Z
   \   0000002A   E030               LDI     R19, 0
    594          
    595              char pnt, ADCh;
    596              short packlen;
    597          
    598              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    599          
    600              if (packlen > 0) {
   \   0000002C   3021               CPI     R18, 1
   \   0000002E   0733               CPC     R19, R19
   \   00000030   F1E4               BRLT    ??ReceiveRData_0
    601                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000032   E080               LDI     R24, 0
   \   00000034   E014               LDI     R17, 4
   \   00000036   9F01               MUL     R16, R17
   \   00000038   0110               MOVW    R3:R2, R1:R0
   \   0000003A   C034               RJMP    ??ReceiveRData_1
   \                     ??ReceiveRData_2:
   \   0000003C   018A               MOVW    R17:R16, R21:R20
   \   0000003E   0F08               ADD     R16, R24
   \   00000040   1F13               ADC     R17, R19
   \   00000042   01DB               MOVW    R27:R26, R23:R22
   \   00000044   0FA0               ADD     R26, R16
   \   00000046   1FB1               ADC     R27, R17
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8190               LD      R25, Z
    602                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    603                      if (ADCh < 14) {
   \   0000004C   309E               CPI     R25, 14
   \   0000004E   F548               BRCC    ??ReceiveRData_3
    604                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000050   8041               LDD     R4, Z+1
   \   00000052   ....               LDI     R30, LOW((TData + 59))
   \   00000054   ....               LDI     R31, HIGH((TData + 59))
   \   00000056   0FE9               ADD     R30, R25
   \   00000058   1FF3               ADC     R31, R19
   \   0000005A   9100....           LDS     R16, PortPair
   \   0000005E   0131               MOVW    R7:R6, R3:R2
   \   00000060   0E60               ADD     R6, R16
   \   00000062   1E73               ADC     R7, R19
   \   00000064   E00E               LDI     R16, 14
   \   00000066   9E70               MUL     R7, R16
   \   00000068   2C70               MOV     R7, R0
   \   0000006A   9E60               MUL     R6, R16
   \   0000006C   0C71               ADD     R7, R1
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1DF7               ADC     R31, R7
   \   00000072   8240               ST      Z, R4
    605                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   81A2               LDD     R26, Z+2
   \   00000078   81B3               LDD     R27, Z+3
   \   0000007A   ....               LDI     R30, LOW((TData + 283))
   \   0000007C   ....               LDI     R31, HIGH((TData + 283))
   \   0000007E   E002               LDI     R16, 2
   \   00000080   9F90               MUL     R25, R16
   \   00000082   0DE0               ADD     R30, R0
   \   00000084   1DF1               ADC     R31, R1
   \   00000086   9100....           LDS     R16, PortPair
   \   0000008A   0121               MOVW    R5:R4, R3:R2
   \   0000008C   0E40               ADD     R4, R16
   \   0000008E   1E53               ADC     R5, R19
   \   00000090   E10C               LDI     R16, 28
   \   00000092   9E50               MUL     R5, R16
   \   00000094   2C50               MOV     R5, R0
   \   00000096   9E40               MUL     R4, R16
   \   00000098   0C51               ADD     R5, R1
   \   0000009A   0DE0               ADD     R30, R0
   \   0000009C   1DF5               ADC     R31, R5
   \   0000009E   83A0               ST      Z, R26
   \   000000A0   83B1               STD     Z+1, R27
    606                      }
    607                  }
   \                     ??ReceiveRData_3:
   \   000000A2   5F8C               SUBI    R24, 252
   \                     ??ReceiveRData_1:
   \   000000A4   1782               CP      R24, R18
   \   000000A6   0733               CPC     R19, R19
   \   000000A8   F24C               BRLT    ??ReceiveRData_2
    608              }
    609          }
   \                     ??ReceiveRData_0:
   \   000000AA   ....               RJMP    ?Subroutine1
    610          
    611          /*************************************************************************
    612          *
    613          *  Receive cal data  from AN_SGCNV
    614          *
    615          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    616          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000010   01A9               MOVW    R21:R20, R19:R18
   \   00000012   E11A               LDI     R17, 26
   \   00000014   9F01               MUL     R16, R17
   \   00000016   ....               LDI     R30, LOW(UART16552)
   \   00000018   ....               LDI     R31, (UART16552) >> 8
   \   0000001A   0DE0               ADD     R30, R0
   \   0000001C   1DF1               ADC     R31, R1
   \   0000001E   8562               LDD     R22, Z+10
   \   00000020   8573               LDD     R23, Z+11
   \   00000022   01FB               MOVW    R31:R30, R23:R22
   \   00000024   0FE4               ADD     R30, R20
   \   00000026   1FF5               ADC     R31, R21
   \   00000028   9122               LD      R18, -Z
   \   0000002A   E030               LDI     R19, 0
    617          
    618              char pnt, ADCh;
    619              short packlen;
    620          
    621              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    622          
    623              if (packlen > 0) {
   \   0000002C   3021               CPI     R18, 1
   \   0000002E   0733               CPC     R19, R19
   \   00000030   F1E4               BRLT    ??ReceiveCData_0
    624                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000032   E080               LDI     R24, 0
   \   00000034   E014               LDI     R17, 4
   \   00000036   9F01               MUL     R16, R17
   \   00000038   0110               MOVW    R3:R2, R1:R0
   \   0000003A   C034               RJMP    ??ReceiveCData_1
   \                     ??ReceiveCData_2:
   \   0000003C   018A               MOVW    R17:R16, R21:R20
   \   0000003E   0F08               ADD     R16, R24
   \   00000040   1F13               ADC     R17, R19
   \   00000042   01DB               MOVW    R27:R26, R23:R22
   \   00000044   0FA0               ADD     R26, R16
   \   00000046   1FB1               ADC     R27, R17
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8190               LD      R25, Z
    625                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    626                      if (ADCh < 14) {
   \   0000004C   309E               CPI     R25, 14
   \   0000004E   F548               BRCC    ??ReceiveCData_3
    627                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000050   8041               LDD     R4, Z+1
   \   00000052   ....               LDI     R30, LOW((TData + 59))
   \   00000054   ....               LDI     R31, HIGH((TData + 59))
   \   00000056   0FE9               ADD     R30, R25
   \   00000058   1FF3               ADC     R31, R19
   \   0000005A   9100....           LDS     R16, PortPair
   \   0000005E   0131               MOVW    R7:R6, R3:R2
   \   00000060   0E60               ADD     R6, R16
   \   00000062   1E73               ADC     R7, R19
   \   00000064   E00E               LDI     R16, 14
   \   00000066   9E70               MUL     R7, R16
   \   00000068   2C70               MOV     R7, R0
   \   0000006A   9E60               MUL     R6, R16
   \   0000006C   0C71               ADD     R7, R1
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1DF7               ADC     R31, R7
   \   00000072   8240               ST      Z, R4
    628                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   81A2               LDD     R26, Z+2
   \   00000078   81B3               LDD     R27, Z+3
   \   0000007A   ....               LDI     R30, LOW((TData + 507))
   \   0000007C   ....               LDI     R31, HIGH((TData + 507))
   \   0000007E   E002               LDI     R16, 2
   \   00000080   9F90               MUL     R25, R16
   \   00000082   0DE0               ADD     R30, R0
   \   00000084   1DF1               ADC     R31, R1
   \   00000086   9100....           LDS     R16, PortPair
   \   0000008A   0121               MOVW    R5:R4, R3:R2
   \   0000008C   0E40               ADD     R4, R16
   \   0000008E   1E53               ADC     R5, R19
   \   00000090   E10C               LDI     R16, 28
   \   00000092   9E50               MUL     R5, R16
   \   00000094   2C50               MOV     R5, R0
   \   00000096   9E40               MUL     R4, R16
   \   00000098   0C51               ADD     R5, R1
   \   0000009A   0DE0               ADD     R30, R0
   \   0000009C   1DF5               ADC     R31, R5
   \   0000009E   83A0               ST      Z, R26
   \   000000A0   83B1               STD     Z+1, R27
    629                      }
    630                  }
   \                     ??ReceiveCData_3:
   \   000000A2   5F8C               SUBI    R24, 252
   \                     ??ReceiveCData_1:
   \   000000A4   1782               CP      R24, R18
   \   000000A6   0733               CPC     R19, R19
   \   000000A8   F24C               BRLT    ??ReceiveCData_2
    631              }
    632          }
   \                     ??ReceiveCData_0:
   \   000000AA                      REQUIRE ?Subroutine1
   \   000000AA                      ;               // Fall through to label ?Subroutine1
    633          
    634          /*************************************************************************
    635          *
    636          *  Receive card status  from AN_SGCNV
    637          *
    638          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    639          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   961A               ADIW    R27:R26, 10
   \   00000010   91ED               LD      R30, X+
   \   00000012   91FC               LD      R31, X
   \   00000014   0FE2               ADD     R30, R18
   \   00000016   1FF3               ADC     R31, R19
   \   00000018   E014               LDI     R17, 4
   \   0000001A   9F01               MUL     R16, R17
   \   0000001C   8120               LD      R18, Z
   \   0000001E   9100....           LDS     R16, PortPair
   \   00000022   E010               LDI     R17, 0
   \   00000024   01A0               MOVW    R21:R20, R1:R0
   \   00000026   0F40               ADD     R20, R16
   \   00000028   1F51               ADC     R21, R17
   \   0000002A   01DA               MOVW    R27:R26, R21:R20
   \   0000002C   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   0000002E   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000030   932C               ST      X, R18
    640          
    641              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
    642              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000032   8121               LDD     R18, Z+1
   \   00000034   9100....           LDS     R16, PortPair
   \   00000038   0E00               ADD     R0, R16
   \   0000003A   1E11               ADC     R1, R17
   \   0000003C   01F0               MOVW    R31:R30, R1:R0
   \   0000003E   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000042   AB23               STD     Z+51, R18
    643          }
   \   00000044   01DB               MOVW    R27:R26, R23:R22
   \   00000046   9508               RET
    644          
    645          /*************************************************************************
    646          *
    647          *  Receive config data from AN_SGCNV
    648          *
    649          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    650          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    651          
    652              char i, ADCh;
    653          
    654              for (i = 0; i < 14; i++) {
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000000E   85A2               LDD     R26, Z+10
   \   00000010   85B3               LDD     R27, Z+11
   \   00000012   0FA2               ADD     R26, R18
   \   00000014   1FB3               ADC     R27, R19
   \   00000016   E02E               LDI     R18, 14
   \   00000018   E014               LDI     R17, 4
   \   0000001A   9F01               MUL     R16, R17
   \   0000001C   01A0               MOVW    R21:R20, R1:R0
    655                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveConfigData_0:
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8160               LD      R22, Z
    656                  if (ADCh < 14) {
   \   00000022   306E               CPI     R22, 14
   \   00000024   F538               BRCC    ??ReceiveConfigData_1
    657                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000026   8131               LDD     R19, Z+1
   \   00000028   ....               LDI     R30, LOW((TData + 59))
   \   0000002A   ....               LDI     R31, HIGH((TData + 59))
   \   0000002C   E070               LDI     R23, 0
   \   0000002E   0FE6               ADD     R30, R22
   \   00000030   1FF7               ADC     R31, R23
   \   00000032   9100....           LDS     R16, PortPair
   \   00000036   E010               LDI     R17, 0
   \   00000038   011A               MOVW    R3:R2, R21:R20
   \   0000003A   0E20               ADD     R2, R16
   \   0000003C   1E37               ADC     R3, R23
   \   0000003E   E00E               LDI     R16, 14
   \   00000040   9E30               MUL     R3, R16
   \   00000042   2C30               MOV     R3, R0
   \   00000044   9E20               MUL     R2, R16
   \   00000046   0C31               ADD     R3, R1
   \   00000048   0DE0               ADD     R30, R0
   \   0000004A   1DF3               ADC     R31, R3
   \   0000004C   8330               ST      Z, R19
    658                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   8132               LDD     R19, Z+2
   \   00000052   ....               LDI     R30, LOW((TData + 171))
   \   00000054   ....               LDI     R31, HIGH((TData + 171))
   \   00000056   0FE6               ADD     R30, R22
   \   00000058   1FF7               ADC     R31, R23
   \   0000005A   9100....           LDS     R16, PortPair
   \   0000005E   01BA               MOVW    R23:R22, R21:R20
   \   00000060   0F60               ADD     R22, R16
   \   00000062   1F71               ADC     R23, R17
   \   00000064   E00E               LDI     R16, 14
   \   00000066   9F70               MUL     R23, R16
   \   00000068   2D70               MOV     R23, R0
   \   0000006A   9F60               MUL     R22, R16
   \   0000006C   0D71               ADD     R23, R1
   \   0000006E   0DE0               ADD     R30, R0
   \   00000070   1FF7               ADC     R31, R23
   \   00000072   8330               ST      Z, R19
    659                  }
    660                  pointer += 2;
    661              }
   \                     ??ReceiveConfigData_1:
   \   00000074   9613               ADIW    R27:R26, 3
   \   00000076   952A               DEC     R18
   \   00000078   F691               BRNE    ??ReceiveConfigData_0
    662          }
   \   0000007A   91A9               LD      R26, Y+
   \   0000007C   91B9               LD      R27, Y+
   \   0000007E   9508               RET
    663          
    664          /*************************************************************************
    665          *
    666          *  Receive eeprom data from AN_SGCNV
    667          *
    668          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    669          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
    670          
    671              short i;
    672          
    673              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000004   E312               LDI     R17, 50
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(TData)
   \   0000000A   ....               LDI     R31, (TData) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   01DF               MOVW    R27:R26, R31:R30
   \   00000012   56AC               SUBI    R26, 108
   \   00000014   4FBA               SBCI    R27, 250
   \   00000016   E011               LDI     R17, 1
   \   00000018   931D               ST      X+, R17
    674              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   0000001A   2F10               MOV     R17, R16
   \   0000001C   0F11               LSL     R17
   \   0000001E   0F11               LSL     R17
   \   00000020   9140....           LDS     R20, PortPair
   \   00000024   0F14               ADD     R17, R20
   \   00000026   931C               ST      X, R17
    675              for (i = 2; i < (41 + 2); i++) {
   \   00000028   E11A               LDI     R17, 26
   \   0000002A   9F01               MUL     R16, R17
   \   0000002C   01D0               MOVW    R27:R26, R1:R0
   \   0000002E   ....               SUBI    R26, LOW((-(UART16552 + 10) & 0xFFFF))
   \   00000030   ....               SBCI    R27, HIGH((-(UART16552 + 10) & 0xFFFF))
   \   00000032   910D               LD      R16, X+
   \   00000034   911C               LD      R17, X
   \   00000036   0F02               ADD     R16, R18
   \   00000038   1F13               ADC     R17, R19
   \   0000003A   56EA               SUBI    R30, 106
   \   0000003C   4FFA               SBCI    R31, 250
   \   0000003E   E229               LDI     R18, 41
    676                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveCardEEPROMData_0:
   \   00000040   01D8               MOVW    R27:R26, R17:R16
   \   00000042   913D               LD      R19, X+
   \   00000044   018D               MOVW    R17:R16, R27:R26
   \   00000046   9331               ST      Z+, R19
    677              }
   \   00000048   952A               DEC     R18
   \   0000004A   F7D1               BRNE    ??ReceiveCardEEPROMData_0
    678          }
   \   0000004C   2FA6               MOV     R26, R22
   \   0000004E   2FB5               MOV     R27, R21
   \   00000050   9508               RET
    679          
    680          /*************************************************************************
    681          *
    682          * Build send packet header for AN-SGCNV
    683          *
    684          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    685          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    686          
    687              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   01FD               MOVW    R31:R30, R27:R26
   \   00000010   E000               LDI     R16, 0
   \   00000012   8704               STD     Z+12, R16
   \   00000014   8705               STD     Z+13, R16
    688              UART16552[ch].RxLast = 0;
   \   00000016   8706               STD     Z+14, R16
   \   00000018   8707               STD     Z+15, R16
    689              UART16552[ch].TxLast = 0;
   \   0000001A   8304               STD     Z+4, R16
   \   0000001C   8305               STD     Z+5, R16
    690          
    691              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   0000001E   91ED               LD      R30, X+
   \   00000020   91FC               LD      R31, X
   \   00000022   9711               SBIW    R27:R26, 1
   \   00000024   E002               LDI     R16, 2
   \   00000026   8300               ST      Z, R16
    692              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   00000028   91ED               LD      R30, X+
   \   0000002A   91FC               LD      R31, X
   \   0000002C   9711               SBIW    R27:R26, 1
   \   0000002E   8301               STD     Z+1, R16
    693              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   00000030   91ED               LD      R30, X+
   \   00000032   91FC               LD      R31, X
   \   00000034   9711               SBIW    R27:R26, 1
   \   00000036   E000               LDI     R16, 0
   \   00000038   8302               STD     Z+2, R16
    694              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   0000003A   91ED               LD      R30, X+
   \   0000003C   91FC               LD      R31, X
   \   0000003E   9711               SBIW    R27:R26, 1
   \   00000040   EF0D               LDI     R16, 253
   \   00000042   8303               STD     Z+3, R16
    695              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   00000044   91ED               LD      R30, X+
   \   00000046   91FC               LD      R31, X
   \   00000048   9711               SBIW    R27:R26, 1
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   8304               STD     Z+4, R16
    696              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   0000004E   91ED               LD      R30, X+
   \   00000050   91FC               LD      R31, X
   \   00000052   8305               STD     Z+5, R16
    697          }
   \   00000054   01D9               MOVW    R27:R26, R19:R18
   \   00000056   9508               RET
    698          
    699          /*************************************************************************
    700          *
    701          * Build  packet tail
    702          *
    703          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    704          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   938A               ST      -Y, R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F80               MOV     R24, R16
    705          
    706              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000008   ....               RCALL   Uart_BuildHeader16552
    707          
    708              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F80               MUL     R24, R16
   \   0000000E   ....               LDI     R26, LOW(UART16552)
   \   00000010   ....               LDI     R27, (UART16552) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   910D               LD      R16, X+
   \   00000018   911C               LD      R17, X
   \   0000001A   9711               SBIW    R27:R26, 1
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   8122               LDD     R18, Z+2
   \   00000020   8133               LDD     R19, Z+3
   \   00000022   0F02               ADD     R16, R18
   \   00000024   1F13               ADC     R17, R19
   \   00000026   01F8               MOVW    R31:R30, R17:R16
   \   00000028   E001               LDI     R16, 1
   \   0000002A   8300               ST      Z, R16
   \   0000002C   01FD               MOVW    R31:R30, R27:R26
   \   0000002E   8102               LDD     R16, Z+2
   \   00000030   8113               LDD     R17, Z+3
   \   00000032   5F0F               SUBI    R16, 255
   \   00000034   4F1F               SBCI    R17, 255
   \   00000036   8302               STD     Z+2, R16
   \   00000038   8313               STD     Z+3, R17
    709              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   0000003A   8100               LD      R16, Z
   \   0000003C   8111               LDD     R17, Z+1
   \   0000003E   8122               LDD     R18, Z+2
   \   00000040   8133               LDD     R19, Z+3
   \   00000042   0F02               ADD     R16, R18
   \   00000044   1F13               ADC     R17, R19
   \   00000046   01F8               MOVW    R31:R30, R17:R16
   \   00000048   E000               LDI     R16, 0
   \   0000004A   8300               ST      Z, R16
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8102               LDD     R16, Z+2
   \   00000050   8113               LDD     R17, Z+3
   \   00000052   5F0F               SUBI    R16, 255
   \   00000054   4F1F               SBCI    R17, 255
   \   00000056   8302               STD     Z+2, R16
   \   00000058   8313               STD     Z+3, R17
    710          
    711              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   0000005A   91ED               LD      R30, X+
   \   0000005C   91FC               LD      R31, X
   \   0000005E   9711               SBIW    R27:R26, 1
   \   00000060   8314               STD     Z+4, R17
    712              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   00000062   01FD               MOVW    R31:R30, R27:R26
   \   00000064   8102               LDD     R16, Z+2
   \   00000066   91ED               LD      R30, X+
   \   00000068   91FC               LD      R31, X
   \   0000006A   9711               SBIW    R27:R26, 1
   \   0000006C   8305               STD     Z+5, R16
    713          
    714          
    715              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   8122               LDD     R18, Z+2
   \   00000072   8133               LDD     R19, Z+3
   \   00000074   2F08               MOV     R16, R24
   \   00000076   ....               RCALL   CalcDSTxChecksumUART16552
   \   00000078   2F20               MOV     R18, R16
   \   0000007A   910D               LD      R16, X+
   \   0000007C   911C               LD      R17, X
   \   0000007E   9711               SBIW    R27:R26, 1
   \   00000080   01FD               MOVW    R31:R30, R27:R26
   \   00000082   8142               LDD     R20, Z+2
   \   00000084   8153               LDD     R21, Z+3
   \   00000086   0F04               ADD     R16, R20
   \   00000088   1F15               ADC     R17, R21
   \   0000008A   01F8               MOVW    R31:R30, R17:R16
   \   0000008C   8320               ST      Z, R18
    716              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   0000008E   01FD               MOVW    R31:R30, R27:R26
   \   00000090   8102               LDD     R16, Z+2
   \   00000092   8113               LDD     R17, Z+3
   \   00000094   5F0F               SUBI    R16, 255
   \   00000096   4F1F               SBCI    R17, 255
   \   00000098   8302               STD     Z+2, R16
   \   0000009A   8313               STD     Z+3, R17
    717                                                                           // to ANSI standard !!!!
    718          
    719              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   0000009C   8100               LD      R16, Z
   \   0000009E   8111               LDD     R17, Z+1
   \   000000A0   8122               LDD     R18, Z+2
   \   000000A2   8133               LDD     R19, Z+3
   \   000000A4   0F02               ADD     R16, R18
   \   000000A6   1F13               ADC     R17, R19
   \   000000A8   01F8               MOVW    R31:R30, R17:R16
   \   000000AA   E003               LDI     R16, 3
   \   000000AC   8300               ST      Z, R16
   \   000000AE   01FD               MOVW    R31:R30, R27:R26
   \   000000B0   8102               LDD     R16, Z+2
   \   000000B2   8113               LDD     R17, Z+3
   \   000000B4   5F0F               SUBI    R16, 255
   \   000000B6   4F1F               SBCI    R17, 255
   \   000000B8   8302               STD     Z+2, R16
   \   000000BA   8313               STD     Z+3, R17
    720              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   000000BC   8100               LD      R16, Z
   \   000000BE   8111               LDD     R17, Z+1
   \   000000C0   8122               LDD     R18, Z+2
   \   000000C2   8133               LDD     R19, Z+3
   \   000000C4   0F02               ADD     R16, R18
   \   000000C6   1F13               ADC     R17, R19
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   8300               ST      Z, R16
   \   000000CE   01FD               MOVW    R31:R30, R27:R26
   \   000000D0   8102               LDD     R16, Z+2
   \   000000D2   8113               LDD     R17, Z+3
   \   000000D4   5F0F               SUBI    R16, 255
   \   000000D6   4F1F               SBCI    R17, 255
   \   000000D8   8302               STD     Z+2, R16
   \   000000DA   8313               STD     Z+3, R17
    721          
    722              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   000000DC   5001               SUBI    R16, 1
   \   000000DE   4010               SBCI    R17, 0
   \   000000E0   8306               STD     Z+6, R16
   \   000000E2   8317               STD     Z+7, R17
    723              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   000000E4   E001               LDI     R16, 1
   \   000000E6   8304               STD     Z+4, R16
   \   000000E8   E000               LDI     R16, 0
   \   000000EA   8305               STD     Z+5, R16
    724              GoToSyncUART16552(ch);                                 // go to sync modus for recive
   \   000000EC   2F08               MOV     R16, R24
   \   000000EE   ....               RCALL   GoToSyncUART16552
    725              if (ch == 0) {                                           // Turn on TXE for channel
   \   000000F0   2388               TST     R24
   \   000000F2   F4A9               BRNE    ??Uart_BuildTail16552_0
    726                  OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
   \   000000F4   ....               LDI     R16, LOW(TimerUART0)
   \   000000F6   ....               LDI     R17, (TimerUART0) >> 8
   \   000000F8   ........           CALL    OS_RetriggerTimer
    727                  U0_MCR |= RTS;                                    // set RTS on
   \   000000FC   9100220C           LDS     R16, 8716
   \   00000100   6002               ORI     R16, 0x02
   \   00000102   9300220C           STS     8716, R16
    728                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000106   E104               LDI     R16, 20
   \   00000108   E010               LDI     R17, 0
   \   0000010A   ........           CALL    OS_Delay
    729                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   0000010E   91E0....           LDS     R30, UART16552
   \   00000112   91F0....           LDS     R31, (UART16552 + 1)
   \   00000116   8100               LD      R16, Z
   \   00000118   93002208           STS     8712, R16
   \   0000011C   C016               RJMP    ??Uart_BuildTail16552_1
    730              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   0000011E   3081               CPI     R24, 1
   \   00000120   F4A1               BRNE    ??Uart_BuildTail16552_1
    731                  OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
   \   00000122   ....               LDI     R16, LOW(TimerUART1)
   \   00000124   ....               LDI     R17, (TimerUART1) >> 8
   \   00000126   ........           CALL    OS_RetriggerTimer
    732                  U1_MCR |= RTS;                                      // set RTS on
   \   0000012A   91002204           LDS     R16, 8708
   \   0000012E   6002               ORI     R16, 0x02
   \   00000130   93002204           STS     8708, R16
    733                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000134   E104               LDI     R16, 20
   \   00000136   E010               LDI     R17, 0
   \   00000138   ........           CALL    OS_Delay
    734                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   0000013C   91E0....           LDS     R30, (UART16552 + 26)
   \   00000140   91F0....           LDS     R31, (UART16552 + 27)
   \   00000144   8100               LD      R16, Z
   \   00000146   93002200           STS     8704, R16
    735              }
    736          }
   \                     ??Uart_BuildTail16552_1:
   \   0000014A   9189               LD      R24, Y+
   \   0000014C   91A9               LD      R26, Y+
   \   0000014E   91B9               LD      R27, Y+
   \   00000150   9508               RET
    737          
    738          /*************************************************************************
    739          *
    740          * Build send request for system status on WIS
    741          *
    742          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine5_0:
   \   00000000   8102               LDD     R16, Z+2
   \   00000002   8113               LDD     R17, Z+3
   \   00000004   5F0F               SUBI    R16, 255
   \   00000006   4F1F               SBCI    R17, 255
   \   00000008   8302               STD     Z+2, R16
   \   0000000A   8313               STD     Z+3, R17
   \   0000000C   01D9               MOVW    R27:R26, R19:R18
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    743          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    744          
    745              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   91ED               LD      R30, X+
   \   00000010   91FD               LD      R31, X+
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E604               LDI     R16, 100
   \   0000001E                      REQUIRE ?Subroutine4
   \   0000001E                      ;               // Fall through to label ?Subroutine4
    746              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    747          
    748          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   8300               ST      Z, R16
   \   00000002   01FD               MOVW    R31:R30, R27:R26
   \   00000004   8102               LDD     R16, Z+2
   \   00000006   8113               LDD     R17, Z+3
   \   00000008   5F0F               SUBI    R16, 255
   \   0000000A   4F1F               SBCI    R17, 255
   \   0000000C   8302               STD     Z+2, R16
   \   0000000E   8313               STD     Z+3, R17
   \   00000010   91ED               LD      R30, X+
   \   00000012   91FD               LD      R31, X+
   \   00000014   910D               LD      R16, X+
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   8300               ST      Z, R16
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   ........           JMP     ??Subroutine5_0
    749          
    750          /*************************************************************************
    751          *
    752          * Build send request for WIS protocoler on WIS
    753          *
    754          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    755          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    756          
    757              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000002   E12A               LDI     R18, 26
   \   00000004   9F02               MUL     R16, R18
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8122               LDD     R18, Z+2
   \   00000014   8133               LDD     R19, Z+3
   \   00000016   0FA2               ADD     R26, R18
   \   00000018   1FB3               ADC     R27, R19
   \   0000001A   E606               LDI     R16, 102
   \   0000001C   930C               ST      X, R16
   \   0000001E   8122               LDD     R18, Z+2
   \   00000020   8133               LDD     R19, Z+3
   \   00000022   5F2F               SUBI    R18, 255
   \   00000024   4F3F               SBCI    R19, 255
   \   00000026   8322               STD     Z+2, R18
   \   00000028   8333               STD     Z+3, R19
    758              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   0000002A   81A0               LD      R26, Z
   \   0000002C   81B1               LDD     R27, Z+1
   \   0000002E   0FA2               ADD     R26, R18
   \   00000030   1FB3               ADC     R27, R19
   \   00000032   E001               LDI     R16, 1
   \   00000034   930C               ST      X, R16
   \   00000036   8122               LDD     R18, Z+2
   \   00000038   8133               LDD     R19, Z+3
   \   0000003A   5F2F               SUBI    R18, 255
   \   0000003C   4F3F               SBCI    R19, 255
   \   0000003E   8322               STD     Z+2, R18
   \   00000040   8333               STD     Z+3, R19
    759              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   00000042   81A0               LD      R26, Z
   \   00000044   81B1               LDD     R27, Z+1
   \   00000046   0FA2               ADD     R26, R18
   \   00000048   1FB3               ADC     R27, R19
   \   0000004A   931C               ST      X, R17
   \   0000004C   8102               LDD     R16, Z+2
   \   0000004E   8113               LDD     R17, Z+3
   \   00000050   5F0F               SUBI    R16, 255
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   8302               STD     Z+2, R16
   \   00000056   8313               STD     Z+3, R17
    760          
    761          }
   \   00000058   01DA               MOVW    R27:R26, R21:R20
   \   0000005A   9508               RET
    762          
    763          /*************************************************************************
    764          *
    765          * Build send request for measure data to Water ingress
    766          *
    767          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   930C               ST      X, R16
   \   00000002   8102               LDD     R16, Z+2
   \   00000004   8113               LDD     R17, Z+3
   \   00000006   5F0F               SUBI    R16, 255
   \   00000008   4F1F               SBCI    R17, 255
   \   0000000A   8302               STD     Z+2, R16
   \   0000000C   8313               STD     Z+3, R17
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   0FA0               ADD     R26, R16
   \   00000014   1FB1               ADC     R27, R17
   \   00000016   E001               LDI     R16, 1
   \   00000018   930C               ST      X, R16
   \   0000001A   8102               LDD     R16, Z+2
   \   0000001C   8113               LDD     R17, Z+3
   \   0000001E   5F0F               SUBI    R16, 255
   \   00000020   4F1F               SBCI    R17, 255
   \   00000022   8302               STD     Z+2, R16
   \   00000024   8313               STD     Z+3, R17
   \   00000026   81A0               LD      R26, Z
   \   00000028   81B1               LDD     R27, Z+1
   \   0000002A   0FA0               ADD     R26, R16
   \   0000002C   1FB1               ADC     R27, R17
   \   0000002E   E000               LDI     R16, 0
   \   00000030   930C               ST      X, R16
   \   00000032                      REQUIRE ??Subroutine5_0
   \   00000032                      ;               // Fall through to label ??Subroutine5_0

   \                                 In  segment CODE, align 2, keep-with-next
    768          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    769          
    770              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E605               LDI     R16, 101
   \   0000001C   ....               RJMP    ?Subroutine0
    771              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    772              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    773          
    774          }
    775          
    776          
    777          /*************************************************************************
    778          *
    779          * Build send request for GODA measurement
    780          *
    781          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    782          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    783          
    784              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   EA00               LDI     R16, 160
   \   0000001C                      REQUIRE ?Subroutine0
   \   0000001C                      ;               // Fall through to label ?Subroutine0
    785              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    786              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
    787          
    788          }
    789          
    790          /*************************************************************************
    791          *
    792          * Build send request for GODA device information
    793          *
    794          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    795          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    796          
    797              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   91ED               LD      R30, X+
   \   00000010   91FD               LD      R31, X+
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   EA01               LDI     R16, 161
   \   0000001E   ....               RJMP    ?Subroutine4
    798              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
    799          }
    800          
    801          /*************************************************************************
    802          *
    803          * Build datablock to AN-SGCNV
    804          *
    805          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    806          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   011C               MOVW    R3:R2, R25:R24
   \   00000006                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000006   2F20               MOV     R18, R16
    807          
    808              char i;
    809          
    810              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000008   E043               LDI     R20, 3
   \   0000000A   E500               LDI     R16, 80
   \   0000000C   9F20               MUL     R18, R16
   \   0000000E   ....               LDI     R22, LOW(TData)
   \   00000010   ....               LDI     R23, (TData) >> 8
   \   00000012   0D60               ADD     R22, R0
   \   00000014   1D71               ADC     R23, R1
   \   00000016   018B               MOVW    R17:R16, R23:R22
   \   00000018   500C               SUBI    R16, 12
   \   0000001A   4F1B               SBCI    R17, 251
   \   0000001C   E13A               LDI     R19, 26
   \   0000001E   9F23               MUL     R18, R19
   \   00000020   ....               LDI     R30, LOW(UART16552)
   \   00000022   ....               LDI     R31, (UART16552) >> 8
   \   00000024   0DE0               ADD     R30, R0
   \   00000026   1DF1               ADC     R31, R1
   \   00000028   E050               LDI     R21, 0
   \   0000002A   C014               RJMP    ??Uart_BuildSndData_0
    811                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \                     ??Uart_BuildSndData_1:
   \   0000002C   01DB               MOVW    R27:R26, R23:R22
   \   0000002E   0FA4               ADD     R26, R20
   \   00000030   1FB5               ADC     R27, R21
   \   00000032   50AC               SUBI    R26, 12
   \   00000034   4FBB               SBCI    R27, 251
   \   00000036   912C               LD      R18, X
   \   00000038   81A0               LD      R26, Z
   \   0000003A   81B1               LDD     R27, Z+1
   \   0000003C   8002               LDD     R0, Z+2
   \   0000003E   8013               LDD     R1, Z+3
   \   00000040   0DA0               ADD     R26, R0
   \   00000042   1DB1               ADC     R27, R1
   \   00000044   932C               ST      X, R18
   \   00000046   8122               LDD     R18, Z+2
   \   00000048   8133               LDD     R19, Z+3
   \   0000004A   5F2F               SUBI    R18, 255
   \   0000004C   4F3F               SBCI    R19, 255
   \   0000004E   8322               STD     Z+2, R18
   \   00000050   8333               STD     Z+3, R19
    812              }
   \   00000052   9543               INC     R20
   \                     ??Uart_BuildSndData_0:
   \   00000054   01D8               MOVW    R27:R26, R17:R16
   \   00000056   9612               ADIW    R27:R26, 2
   \   00000058   918C               LD      R24, X
   \   0000005A   E090               LDI     R25, 0
   \   0000005C   9603               ADIW    R25:R24, 3
   \   0000005E   1748               CP      R20, R24
   \   00000060   0759               CPC     R21, R25
   \   00000062   F324               BRLT    ??Uart_BuildSndData_1
    813              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \   00000064   01F8               MOVW    R31:R30, R17:R16
   \   00000066   8350               ST      Z, R21
    814          }
   \   00000068   01C1               MOVW    R25:R24, R3:R2
   \   0000006A   91A9               LD      R26, Y+
   \   0000006C   91B9               LD      R27, Y+
   \   0000006E   9508               RET
    815          
    816          /*************************************************************************
    817          *
    818          * Build send request for measure data to AN-SGCNV
    819          *
    820          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    821          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    822          
    823              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E00A               LDI     R16, 10
   \   0000001C   ....               RJMP    ?Subroutine0
    824              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    825              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    826          
    827          }
    828          
    829          /*************************************************************************
    830          *
    831          * Build send request for raw data to AN-SGCNV
    832          *
    833          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    834          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    835          
    836              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E00D               LDI     R16, 13
   \   0000001C   ....               RJMP    ?Subroutine0
    837              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    838              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    839          
    840          }
    841          
    842          /*************************************************************************
    843          *
    844          * Build send request for cal data to AN-SGCNV
    845          *
    846          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    847          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    848          
    849              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E100               LDI     R16, 16
   \   0000001C   ....               RJMP    ?Subroutine0
    850              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    851              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    852          
    853          }
    854          
    855          /*************************************************************************
    856          *
    857          * Build send request for system status on AN_SGCNV
    858          *
    859          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    860          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    861          
    862              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R30, LOW(UART16552)
   \   00000008   ....               LDI     R31, (UART16552) >> 8
   \   0000000A   0DE0               ADD     R30, R0
   \   0000000C   1DF1               ADC     R31, R1
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   8113               LDD     R17, Z+3
   \   00000016   0FA0               ADD     R26, R16
   \   00000018   1FB1               ADC     R27, R17
   \   0000001A   E10B               LDI     R16, 27
   \   0000001C   ....               RJMP    ?Subroutine0
    863              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    864              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    865          
    866          }
    867          
    868          /*************************************************************************
    869          *
    870          * Build send request for card config on AN_SGCNV
    871          *
    872          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    873          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   019D               MOVW    R19:R18, R27:R26
   \   00000002                      REQUIRE __RSTACK_in_external_ram_new_way
    874          
    875              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000002   E11A               LDI     R17, 26
   \   00000004   9F01               MUL     R16, R17
   \   00000006   ....               LDI     R26, LOW(UART16552)
   \   00000008   ....               LDI     R27, (UART16552) >> 8
   \   0000000A   0DA0               ADD     R26, R0
   \   0000000C   1DB1               ADC     R27, R1
   \   0000000E   91ED               LD      R30, X+
   \   00000010   91FD               LD      R31, X+
   \   00000012   910D               LD      R16, X+
   \   00000014   911C               LD      R17, X
   \   00000016   9713               SBIW    R27:R26, 3
   \   00000018   0FE0               ADD     R30, R16
   \   0000001A   1FF1               ADC     R31, R17
   \   0000001C   E101               LDI     R16, 17
   \   0000001E   ....               RJMP    ?Subroutine4
    876              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    877          
    878          }
    879          
    880          /*************************************************************************
    881          *
    882          * Build send request for EEPROM data on AN_SGCNV
    883          *
    884          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    885          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F4A               MOV     R20, R26
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F20               MOV     R18, R16
    886          
    887              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000006   E10A               LDI     R16, 26
   \   00000008   9F20               MUL     R18, R16
   \   0000000A   ....               LDI     R30, LOW(UART16552)
   \   0000000C   ....               LDI     R31, (UART16552) >> 8
   \   0000000E   0DE0               ADD     R30, R0
   \   00000010   1DF1               ADC     R31, R1
   \   00000012   81A0               LD      R26, Z
   \   00000014   81B1               LDD     R27, Z+1
   \   00000016   8102               LDD     R16, Z+2
   \   00000018   8113               LDD     R17, Z+3
   \   0000001A   0FA0               ADD     R26, R16
   \   0000001C   1FB1               ADC     R27, R17
   \   0000001E   E108               LDI     R16, 24
   \   00000020   930C               ST      X, R16
   \   00000022   8102               LDD     R16, Z+2
   \   00000024   8113               LDD     R17, Z+3
   \   00000026   5F0F               SUBI    R16, 255
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   8302               STD     Z+2, R16
   \   0000002C   8313               STD     Z+3, R17
    888              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   0000002E   81A0               LD      R26, Z
   \   00000030   81B1               LDD     R27, Z+1
   \   00000032   0FA0               ADD     R26, R16
   \   00000034   1FB1               ADC     R27, R17
   \   00000036   E001               LDI     R16, 1
   \   00000038   930C               ST      X, R16
   \   0000003A   8102               LDD     R16, Z+2
   \   0000003C   8113               LDD     R17, Z+3
   \   0000003E   5F0F               SUBI    R16, 255
   \   00000040   4F1F               SBCI    R17, 255
   \   00000042   8302               STD     Z+2, R16
   \   00000044   8313               STD     Z+3, R17
    889              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   00000046   E0B0               LDI     R27, 0
   \   00000048   ....               SUBI    R18, LOW((-(TData + 1528) & 0xFFFF))
   \   0000004A   2FA2               MOV     R26, R18
   \   0000004C   ....               SBCI    R27, HIGH((-(TData + 1528) & 0xFFFF))
   \   0000004E   910C               LD      R16, X
   \   00000050   81A0               LD      R26, Z
   \   00000052   81B1               LDD     R27, Z+1
   \   00000054   8122               LDD     R18, Z+2
   \   00000056   0FA2               ADD     R26, R18
   \   00000058   1FB1               ADC     R27, R17
   \   0000005A   930C               ST      X, R16
   \   0000005C   8102               LDD     R16, Z+2
   \   0000005E   8113               LDD     R17, Z+3
   \   00000060   5F0F               SUBI    R16, 255
   \   00000062   4F1F               SBCI    R17, 255
   \   00000064   8302               STD     Z+2, R16
   \   00000066   8313               STD     Z+3, R17
    890          
    891          }
   \   00000068   2FA4               MOV     R26, R20
   \   0000006A   2FB3               MOV     R27, R19
   \   0000006C   9508               RET
    892          /*************************************************************************
    893          *
    894          *  Receive data on USARTs
    895          *
    896          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    897          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000008   2F20               MOV     R18, R16
    898          
    899              switch (UART16552[ch].RxState) {                  // check status
   \   0000000A   E10A               LDI     R16, 26
   \   0000000C   9F20               MUL     R18, R16
   \   0000000E   ....               LDI     R26, LOW(UART16552)
   \   00000010   ....               LDI     R27, (UART16552) >> 8
   \   00000012   0DA0               ADD     R26, R0
   \   00000014   1DB1               ADC     R27, R1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8902               LDD     R16, Z+18
   \   0000001A   2300               TST     R16
   \   0000001C   F409               BRNE    $+2+2
   \   0000001E   C086               RJMP    ??ReceivePacketUart16552_0
   \   00000020   950A               DEC     R16
   \   00000022   F031               BREQ    ??ReceivePacketUart16552_1
   \   00000024   950A               DEC     R16
   \   00000026   F141               BREQ    ??ReceivePacketUart16552_2
   \   00000028   5008               SUBI    R16, 8
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C07F               RJMP    ??ReceivePacketUart16552_0
   \   0000002E   C07B               RJMP    ??ReceivePacketUart16552_3
    900              case SYNC :
    901                  // all functionallity in inerrupt routine
    902                  break;
    903              case HEADER :
    904                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   00000030   8586               LDD     R24, Z+14
   \   00000032   8597               LDD     R25, Z+15
   \   00000034   9703               SBIW    R25:R24, 3
   \   00000036   F408               BRCC    $+2+2
   \   00000038   C079               RJMP    ??ReceivePacketUart16552_0
    905                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    906                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000003A   8502               LDD     R16, Z+10
   \   0000003C   85F3               LDD     R31, Z+11
   \   0000003E   2FE0               MOV     R30, R16
   \   00000040   8152               LDD     R21, Z+2
   \   00000042   E010               LDI     R17, 0
   \   00000044   8103               LDD     R16, Z+3
   \   00000046   2F40               MOV     R20, R16
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   8B06               STD     Z+22, R16
   \   0000004C   8B57               STD     Z+23, R21
    907                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    908                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   0000004E   E708               LDI     R16, 120
   \   00000050   8566               LDD     R22, Z+14
   \   00000052   8577               LDD     R23, Z+15
   \   00000054   1B06               SUB     R16, R22
   \   00000056   0B17               SBC     R17, R23
   \   00000058   1740               CP      R20, R16
   \   0000005A   0751               CPC     R21, R17
   \   0000005C   F008               BRCS    $+2+2
   \   0000005E   C063               RJMP    ??ReceivePacketUart16552_3
   \   00000060   01CA               MOVW    R25:R24, R21:R20
   \   00000062   9707               SBIW    R25:R24, 7
   \   00000064   F408               BRCC    $+2+2
   \   00000066   C05F               RJMP    ??ReceivePacketUart16552_3
    909                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   00000068   E002               LDI     R16, 2
   \   0000006A   8B02               STD     Z+18, R16
    910                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   0000006C   8586               LDD     R24, Z+14
   \   0000006E   8597               LDD     R25, Z+15
   \   00000070   9601               ADIW    R25:R24, 1
   \   00000072   8B80               STD     Z+16, R24
   \   00000074   8B91               STD     Z+17, R25
   \   00000076   C05A               RJMP    ??ReceivePacketUart16552_0
    911                      } else {
    912                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    913                      }
    914                  }
    915                  break;
    916              case RECEIVE :
    917                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   00000078   8900               LDD     R16, Z+16
   \   0000007A   8911               LDD     R17, Z+17
   \   0000007C   5F0F               SUBI    R16, 255
   \   0000007E   4F1F               SBCI    R17, 255
   \   00000080   8B00               STD     Z+16, R16
   \   00000082   8B11               STD     Z+17, R17
   \   00000084   8946               LDD     R20, Z+22
   \   00000086   8957               LDD     R21, Z+23
   \   00000088   1704               CP      R16, R20
   \   0000008A   0715               CPC     R17, R21
   \   0000008C   F408               BRCC    $+2+2
   \   0000008E   C04E               RJMP    ??ReceivePacketUart16552_0
    918                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000090   8502               LDD     R16, Z+10
   \   00000092   8513               LDD     R17, Z+11
   \   00000094   0F04               ADD     R16, R20
   \   00000096   1F15               ADC     R17, R21
   \   00000098   5001               SUBI    R16, 1
   \   0000009A   4010               SBCI    R17, 0
   \   0000009C   01F8               MOVW    R31:R30, R17:R16
   \   0000009E   8100               LD      R16, Z
   \   000000A0   3003               CPI     R16, 3
   \   000000A2   F009               BREQ    $+2+2
   \   000000A4   C040               RJMP    ??ReceivePacketUart16552_3
    919                          if (CalcDSRxChecksum16552(ch)) {
   \   000000A6   E040               LDI     R20, 0
   \   000000A8   E080               LDI     R24, 0
   \   000000AA   E090               LDI     R25, 0
   \   000000AC   01FD               MOVW    R31:R30, R27:R26
   \   000000AE   8502               LDD     R16, Z+10
   \   000000B0   8513               LDD     R17, Z+11
   \   000000B2   8806               LDD     R0, Z+22
   \   000000B4   EF3E               LDI     R19, 254
   \   000000B6   0E03               ADD     R0, R19
   \   000000B8   EF3F               LDI     R19, 255
   \   000000BA   1F53               ADC     R21, R19
   \   000000BC   ....               LDI     R19, (crc) >> 16
   \   000000BE   C00B               RJMP    ??ReceivePacketUart16552_4
   \                     ??ReceivePacketUart16552_5:
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   9161               LD      R22, Z+
   \   000000C4   018F               MOVW    R17:R16, R31:R30
   \   000000C6   2746               EOR     R20, R22
   \   000000C8   2FE4               MOV     R30, R20
   \   000000CA   E0F0               LDI     R31, 0
   \   000000CC   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   000000CE   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   000000D0   BF3B               OUT     0x3B, R19
   \   000000D2   9146               ELPM    R20, Z
   \   000000D4   9601               ADIW    R25:R24, 1
   \                     ??ReceivePacketUart16552_4:
   \   000000D6   1580               CP      R24, R0
   \   000000D8   0795               CPC     R25, R21
   \   000000DA   F390               BRCS    ??ReceivePacketUart16552_5
   \   000000DC   01FD               MOVW    R31:R30, R27:R26
   \   000000DE   8502               LDD     R16, Z+10
   \   000000E0   8513               LDD     R17, Z+11
   \   000000E2   8966               LDD     R22, Z+22
   \   000000E4   8977               LDD     R23, Z+23
   \   000000E6   0F06               ADD     R16, R22
   \   000000E8   1F17               ADC     R17, R23
   \   000000EA   5002               SUBI    R16, 2
   \   000000EC   4010               SBCI    R17, 0
   \   000000EE   01F8               MOVW    R31:R30, R17:R16
   \   000000F0   8100               LD      R16, Z
   \   000000F2   1740               CP      R20, R16
   \   000000F4   F4C1               BRNE    ??ReceivePacketUart16552_3
    920                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   000000F6   01FD               MOVW    R31:R30, R27:R26
   \   000000F8   8502               LDD     R16, Z+10
   \   000000FA   85F3               LDD     R31, Z+11
   \   000000FC   2FE0               MOV     R30, R16
   \   000000FE   8100               LD      R16, Z
   \   00000100   3F0D               CPI     R16, 253
   \   00000102   F489               BRNE    ??ReceivePacketUart16552_3
    921                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   00000104   01FD               MOVW    R31:R30, R27:R26
   \   00000106   E00A               LDI     R16, 10
   \   00000108   8B02               STD     Z+18, R16
    922                                  if (ch == 0) {
   \   0000010A   2322               TST     R18
   \   0000010C   F421               BRNE    ??ReceivePacketUart16552_6
    923                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   0000010E   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000110   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   00000112   E001               LDI     R16, 1
   \   00000114   C005               RJMP    ??ReceivePacketUart16552_7
    924                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_6:
   \   00000116   3021               CPI     R18, 1
   \   00000118   F449               BRNE    ??ReceivePacketUart16552_0
    925                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   0000011A   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   0000011C   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   0000011E   E002               LDI     R16, 2
   \                     ??ReceivePacketUart16552_7:
   \   00000120   ........           CALL    OS_SignalEvent
   \   00000124   C003               RJMP    ??ReceivePacketUart16552_0
    926                                  }
    927                              } else {
    928                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
    929                              }
    930                          } else {
    931                              GoToSyncUART16552(ch);                                // go to sync modus for recive
    932                          }
    933                      } else {
    934                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    935                      }
    936                  }
    937                  break;
    938              case HANDLE :
    939                  break;
    940              default :
    941                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_3:
   \   00000126   2F02               MOV     R16, R18
   \   00000128   ........           CALL    GoToSyncUART16552
    942                  break;
    943              }                                                           // end switch
    944              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_0:
   \   0000012C   01FD               MOVW    R31:R30, R27:R26
   \   0000012E   8506               LDD     R16, Z+14
   \   00000130   8517               LDD     R17, Z+15
   \   00000132   5F0F               SUBI    R16, 255
   \   00000134   4F1F               SBCI    R17, 255
   \   00000136   8706               STD     Z+14, R16
   \   00000138   8717               STD     Z+15, R17
   \   0000013A   3708               CPI     R16, 120
   \   0000013C   E020               LDI     R18, 0
   \   0000013E   4010               SBCI    R17, 0
   \   00000140   F010               BRCS    ??ReceivePacketUart16552_8
    945                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   00000142   8726               STD     Z+14, R18
   \   00000144   8727               STD     Z+15, R18
    946              }
    947          }
   \                     ??ReceivePacketUart16552_8:
   \   00000146   ....               RJMP    ?Subroutine3
    948          
    949          
    950          /*************************************************************************
    951          *
    952          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    953          *
    954          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    955          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
   \   00000004                      REQUIRE __RSTACK_in_external_ram_new_way
   \   00000004   2F10               MOV     R17, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    956          
    957              unsigned short cnt;
    958              unsigned char csum;
    959          
    960              csum = 0;
   \   00000008   E000               LDI     R16, 0
    961              for (cnt = 2; cnt < len; cnt++) {
   \   0000000A   3023               CPI     R18, 3
   \   0000000C   4030               SBCI    R19, 0
   \   0000000E   F0A0               BRCS    ??CalcDSTxChecksumUART16552_0
   \   00000010   E12A               LDI     R18, 26
   \   00000012   9F12               MUL     R17, R18
   \   00000014   01F0               MOVW    R31:R30, R1:R0
   \   00000016   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000001A   81A0               LD      R26, Z
   \   0000001C   81B1               LDD     R27, Z+1
   \   0000001E   9612               ADIW    R27:R26, 2
   \   00000020   9702               SBIW    R25:R24, 2
   \   00000022   ....               LDI     R19, (crc) >> 16
    962                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000024   2FE0               MOV     R30, R16
   \   00000026   E0F0               LDI     R31, 0
   \   00000028   910D               LD      R16, X+
   \   0000002A   27E0               EOR     R30, R16
   \   0000002C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000002E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000030   BF3B               OUT     0x3B, R19
   \   00000032   9106               ELPM    R16, Z
    963              }
   \   00000034   9701               SBIW    R25:R24, 1
   \   00000036   F7B1               BRNE    ??CalcDSTxChecksumUART16552_1
    964              return csum;
   \                     ??CalcDSTxChecksumUART16552_0:
   \   00000038   01CA               MOVW    R25:R24, R21:R20
   \   0000003A   01DB               MOVW    R27:R26, R23:R22
   \   0000003C   9508               RET
    965          }
    966          
    967          /*************************************************************************
    968          *
    969          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    970          *
    971          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    972          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2E3A               MOV     R3, R26
   \   00000004   2F59               MOV     R21, R25
   \   00000006   2E28               MOV     R2, R24
   \   00000008                      REQUIRE __RSTACK_in_external_ram_new_way
    973          
    974              short cnt;
    975              unsigned char csum;
    976          
    977              csum = 0;
   \   00000008   E040               LDI     R20, 0
    978              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   E11A               LDI     R17, 26
   \   00000010   9F01               MUL     R16, R17
   \   00000012   ....               LDI     R26, LOW(UART16552)
   \   00000014   ....               LDI     R27, (UART16552) >> 8
   \   00000016   0DA0               ADD     R26, R0
   \   00000018   1DB1               ADC     R27, R1
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8502               LDD     R16, Z+10
   \   0000001E   8513               LDD     R17, Z+11
   \   00000020   8966               LDD     R22, Z+22
   \   00000022   8977               LDD     R23, Z+23
   \   00000024   5062               SUBI    R22, 2
   \   00000026   4070               SBCI    R23, 0
   \   00000028   ....               LDI     R19, (crc) >> 16
   \   0000002A   C00B               RJMP    ??CalcDSRxChecksum16552_0
    979                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum16552_1:
   \   0000002C   01F8               MOVW    R31:R30, R17:R16
   \   0000002E   9121               LD      R18, Z+
   \   00000030   018F               MOVW    R17:R16, R31:R30
   \   00000032   2742               EOR     R20, R18
   \   00000034   2FE4               MOV     R30, R20
   \   00000036   E0F0               LDI     R31, 0
   \   00000038   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000003A   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   0000003C   BF3B               OUT     0x3B, R19
   \   0000003E   9146               ELPM    R20, Z
    980              }
   \   00000040   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum16552_0:
   \   00000042   1786               CP      R24, R22
   \   00000044   0797               CPC     R25, R23
   \   00000046   F390               BRCS    ??CalcDSRxChecksum16552_1
    981              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \   00000048   961A               ADIW    R27:R26, 10
   \   0000004A   91ED               LD      R30, X+
   \   0000004C   91FC               LD      R31, X
   \   0000004E   961B               ADIW    R27:R26, 11
   \   00000050   910D               LD      R16, X+
   \   00000052   911C               LD      R17, X
   \   00000054   0FE0               ADD     R30, R16
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   9732               SBIW    R31:R30, 2
   \   0000005A   8100               LD      R16, Z
   \   0000005C   1740               CP      R20, R16
   \   0000005E   F411               BRNE    ??CalcDSRxChecksum16552_2
    982                  return true;
   \   00000060   E001               LDI     R16, 1
   \   00000062   C001               RJMP    ??CalcDSRxChecksum16552_3
    983              } else {
    984                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   00000064   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   00000066   E010               LDI     R17, 0
   \   00000068   2D82               MOV     R24, R2
   \   0000006A   2F95               MOV     R25, R21
   \   0000006C   2DA3               MOV     R26, R3
   \   0000006E   91B9               LD      R27, Y+
   \   00000070   9508               RET
    985              }
    986          }
    987          
    988          /*************************************************************************
    989          *
    990          * Goes to sync mode
    991          *
    992          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    993          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
    994          
    995              if (ch < 2) {
   \   00000000   3002               CPI     R16, 2
   \   00000002   F468               BRCC    ??GoToSyncUART16552_0
    996                  UART16552[ch].SyncCnt = 0;                        // ready for sync
   \   00000004   E11A               LDI     R17, 26
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(UART16552)
   \   0000000A   ....               LDI     R31, (UART16552) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   E000               LDI     R16, 0
   \   00000012   8B03               STD     Z+19, R16
    997                  UART16552[ch].RxState = SYNC;
   \   00000014   8B02               STD     Z+18, R16
    998                  UART16552[ch].RxFirst = 0;
   \   00000016   8704               STD     Z+12, R16
   \   00000018   8705               STD     Z+13, R16
    999                  UART16552[ch].RxPacklen = 0;
   \   0000001A   8B06               STD     Z+22, R16
   \   0000001C   8B07               STD     Z+23, R16
   1000              }
   1001          }
   \                     ??GoToSyncUART16552_0:
   \   0000001E   9508               RET
   1002          
   1003          /*************************************************************************
   1004          *
   1005          *  Empty rx buffer on PC16552 UART
   1006          *
   1007          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1008          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
   1009          
   1010              switch (uartno) {
   \   00000000   2300               TST     R16
   \   00000002   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000004   950A               DEC     R16
   \   00000006   F041               BREQ    ??EmptyRxBuf16552_1
   \   00000008   9508               RET
   1011              case 0:
   1012                  do {
   1013                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000A   91002208           LDS     R16, 8712
   1014                  } while (U0_LSR & DATA_READY);
   \   0000000E   9100220D           LDS     R16, 8717
   \   00000012   FD00               SBRC    R16, 0
   \   00000014   CFFA               RJMP    ??EmptyRxBuf16552_0
   \   00000016   9508               RET
   1015                  break;
   1016              case 1:
   1017                  do {
   1018                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   00000018   91002200           LDS     R16, 8704
   1019                  } while (U1_LSR & DATA_READY);
   \   0000001C   91002205           LDS     R16, 8709
   \   00000020   FD00               SBRC    R16, 0
   \   00000022   CFFA               RJMP    ??EmptyRxBuf16552_1
   1020                  break;
   1021              }
   1022          }
   \   00000024   9508               RET
   1023          
   1024          /*************************************************************************
   1025          *
   1026          *  Init the PC16552 UART
   1027          *
   1028          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1029          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000                      REQUIRE __RSTACK_in_external_ram_new_way
   1030          
   1031              /*--- Configure UART data block ---*/
   1032              UART16552[channel].TxFirst = 0x00;
   \   00000000   E11A               LDI     R17, 26
   \   00000002   9F01               MUL     R16, R17
   \   00000004   ....               LDI     R30, LOW(UART16552)
   \   00000006   ....               LDI     R31, (UART16552) >> 8
   \   00000008   0DE0               ADD     R30, R0
   \   0000000A   1DF1               ADC     R31, R1
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   8312               STD     Z+2, R17
   \   00000010   8313               STD     Z+3, R17
   1033              UART16552[channel].TxLast = 0x00;
   \   00000012   8314               STD     Z+4, R17
   \   00000014   8315               STD     Z+5, R17
   1034              UART16552[channel].TxCount = 0x00;
   \   00000016   8316               STD     Z+6, R17
   \   00000018   8317               STD     Z+7, R17
   1035              UART16552[channel].RxFirst = 0x00;
   \   0000001A   8714               STD     Z+12, R17
   \   0000001C   8715               STD     Z+13, R17
   1036              UART16552[channel].RxLast = 0x00;
   \   0000001E   8716               STD     Z+14, R17
   \   00000020   8717               STD     Z+15, R17
   1037              UART16552[channel].RxCount = 0x00;
   \   00000022   8B10               STD     Z+16, R17
   \   00000024   8B11               STD     Z+17, R17
   1038              UART16552[channel].RxState = SYNC;
   \   00000026   8B12               STD     Z+18, R17
   1039              UART16552[channel].SyncCnt = 0;
   \   00000028   8B13               STD     Z+19, R17
   1040              UART16552[channel].TxStatus = 0x00;
   \   0000002A   8710               STD     Z+8, R17
   1041          
   1042              switch (channel) {
   \   0000002C   2300               TST     R16
   \   0000002E   F019               BREQ    ??Init16552_0
   \   00000030   950A               DEC     R16
   \   00000032   F179               BREQ    ??Init16552_1
   \   00000034   9508               RET
   1043              case 0x00 :
   1044                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   00000036   EF0A               LDI     R16, 250
   \   00000038   9300....           STS     (UART16552 + 20), R16
   \   0000003C   9310....           STS     (UART16552 + 21), R17
   1045                  UART16552[channel].pTxBuffer = TxBuf16552Ch0;
   \   00000040   ....               LDI     R16, LOW(TxBuf16552Ch0)
   \   00000042   ....               LDI     R17, (TxBuf16552Ch0) >> 8
   \   00000044   9300....           STS     UART16552, R16
   \   00000048   9310....           STS     (UART16552 + 1), R17
   1046                  UART16552[channel].pRxBuffer = RxBuf16552Ch0;
   \   0000004C   ....               LDI     R16, LOW(RxBuf16552Ch0)
   \   0000004E   ....               LDI     R17, (RxBuf16552Ch0) >> 8
   \   00000050   9300....           STS     (UART16552 + 10), R16
   \   00000054   9310....           STS     (UART16552 + 11), R17
   1047                  U0_LCR = 0x80;          // set DLAB
   \   00000058   E800               LDI     R16, 128
   \   0000005A   9300220B           STS     8715, R16
   1048                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000005E   E408               LDI     R16, 72
   \   00000060   EE18               LDI     R17, 232
   \   00000062   E021               LDI     R18, 1
   \   00000064   E030               LDI     R19, 0
   \   00000066   ........           CALL    ?UL_DIVMOD_S_L03
   \   0000006A   93002208           STS     8712, R16
   1049                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   0000006E   93102209           STS     8713, R17
   1050                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000072   E003               LDI     R16, 3
   \   00000074   9300220B           STS     8715, R16
   1051                  U0_FCR = 0x01;          // enable FIFO ..
   \   00000078   E001               LDI     R16, 1
   \   0000007A   9300220A           STS     8714, R16
   1052                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   0000007E   EC01               LDI     R16, 193
   \   00000080   9300220A           STS     8714, R16
   1053                  U0_IER = 0x03;          // enable TX and RX int.
   \   00000084   E003               LDI     R16, 3
   \   00000086   93002209           STS     8713, R16
   1054                  U0_MCR = 0x00;          // RTS off
   \   0000008A   E000               LDI     R16, 0
   \   0000008C   9300220C           STS     8716, R16
   1055                  break;
   \   00000090   9508               RET
   1056              case 0x01 :
   1057                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   00000092   EF0A               LDI     R16, 250
   \   00000094   9300....           STS     (UART16552 + 46), R16
   \   00000098   9310....           STS     (UART16552 + 47), R17
   1058                  UART16552[channel].pTxBuffer = TxBuf16552Ch1;
   \   0000009C   ....               LDI     R16, LOW(TxBuf16552Ch1)
   \   0000009E   ....               LDI     R17, (TxBuf16552Ch1) >> 8
   \   000000A0   9300....           STS     (UART16552 + 26), R16
   \   000000A4   9310....           STS     (UART16552 + 27), R17
   1059                  UART16552[channel].pRxBuffer = RxBuf16552Ch1;
   \   000000A8   ....               LDI     R16, LOW(RxBuf16552Ch1)
   \   000000AA   ....               LDI     R17, (RxBuf16552Ch1) >> 8
   \   000000AC   9300....           STS     (UART16552 + 36), R16
   \   000000B0   9310....           STS     (UART16552 + 37), R17
   1060                  U1_LCR = 0x80;          // set DLAB
   \   000000B4   E800               LDI     R16, 128
   \   000000B6   93002203           STS     8707, R16
   1061                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000000BA   E408               LDI     R16, 72
   \   000000BC   EE18               LDI     R17, 232
   \   000000BE   E021               LDI     R18, 1
   \   000000C0   E030               LDI     R19, 0
   \   000000C2   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000C6   93002200           STS     8704, R16
   1062                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000CA   93102201           STS     8705, R17
   1063                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000CE   E003               LDI     R16, 3
   \   000000D0   93002203           STS     8707, R16
   1064                  U1_FCR = 0x01;          // enable FIFO ..
   \   000000D4   E001               LDI     R16, 1
   \   000000D6   93002202           STS     8706, R16
   1065                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000000DA   EC01               LDI     R16, 193
   \   000000DC   93002202           STS     8706, R16
   1066                  U1_IER = 0x03;          // enable TX and RX int.
   \   000000E0   E003               LDI     R16, 3
   \   000000E2   93002201           STS     8705, R16
   1067                  U1_MCR = 0x00;          // RTS off
   \   000000E6   E000               LDI     R16, 0
   \   000000E8   93002204           STS     8708, R16
   1068                  break;
   1069              default:
   1070                  break;
   1071              }
   1072          }
   \   000000EC   9508               RET
   1073          
   1074          #if USE_MODBUS_PROTOCOL == 1
   1075          static unsigned short  Rsp_Delay[2];       // response delay
   1076          
   1077          static void
   1078          load_eeprom_misc_485(void)
   1079          {
   1080            char ch;
   1081            uint16_t temp;
   1082          
   1083            for (ch = 0; ch < 2; ch++)
   1084            {
   1085              ReadEEPROMBuffer(EEPROM_PORTSETUP + 3 + ch * 2, sizeof(uint16_t), (char*)&temp);
   1086          
   1087              if (temp > 0 && temp <= 5000)
   1088              {
   1089                Rsp_Delay[ch] = temp;
   1090              }
   1091              else
   1092              {
   1093                Rsp_Delay[ch] = 0;
   1094              }
   1095            }
   1096          }
   1097          
   1098          static void
   1099          __rs485_task_set_power(uint8_t ch, uint8_t on)
   1100          {
   1101            uint8_t current;
   1102          
   1103            current = (TData.RS4.PortUsed >> ch) & 0x01;
   1104          
   1105            if(current == on)
   1106            {
   1107              // no need to waste time
   1108              return;
   1109            }
   1110          
   1111            if(on)
   1112            {
   1113              TData.RS4.PortUsed |= (1 << ch);
   1114            }
   1115            else
   1116            {
   1117              TData.RS4.PortUsed &= ~(1 << ch);
   1118            }
   1119            PORTC = TData.RS4.PortUsed;
   1120          
   1121            WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);
   1122          }
   1123          
   1124          void
   1125          rs485_task_set_power(uint8_t ch, uint8_t on)
   1126          {
   1127            OS_Use(&UARTSEND); 
   1128            __rs485_task_set_power(ch, on);
   1129            OS_Unuse(&UARTSEND); 
   1130          }
   1131          
   1132          uint8_t
   1133          rs485_task_get_power(uint8_t ch)
   1134          {
   1135            uint8_t status;
   1136          
   1137            OS_Use(&UARTSEND); 
   1138            status = (TData.RS4.PortUsed >> ch) & 0x01;
   1139            OS_Unuse(&UARTSEND); 
   1140          
   1141            return status;
   1142          }
   1143          
   1144          uint8_t
   1145          rs485_task_get_sensor_type(uint8_t ch)
   1146          {
   1147            uint8_t sensor_type;
   1148          
   1149            OS_Use(&UARTSEND); 
   1150            sensor_type = (TData.RS4.SensorType[ch / 4] >> (2 * (ch % 4))) & 0x03;
   1151            OS_Unuse(&UARTSEND); 
   1152          
   1153            return sensor_type;
   1154          }
   1155          
   1156          void
   1157          rs485_task_set_sensor_type(uint8_t ch, uint8_t sensor_type)
   1158          {
   1159            OS_Use(&UARTSEND); 
   1160          
   1161            // clear first
   1162            TData.RS4.SensorType[ch / 4] &= ~(0x03 << ((ch % 4)*2));
   1163          
   1164            // set
   1165            TData.RS4.SensorType[ch / 4] |= ((sensor_type & 0x03)<< ((ch % 4)*2));
   1166          
   1167            WriteEEPROMByte(EEPROM_PORTSETUP + 1, TData.RS4.SensorType[0]);
   1168            WriteEEPROMByte(EEPROM_PORTSETUP + 2, TData.RS4.SensorType[1]);
   1169          
   1170            OS_Unuse(&UARTSEND); 
   1171          }
   1172          
   1173          static void
   1174          __rs485_task_set_rsp_delay(uint8_t port, uint16_t delay)
   1175          {
   1176            uint16_t cur_delay = Rsp_Delay[port];
   1177          
   1178            if(cur_delay == delay)
   1179            {
   1180              return;
   1181            }
   1182          
   1183            if (delay > 5000)
   1184            {
   1185              return;
   1186            }
   1187          
   1188            Rsp_Delay[port] = delay;
   1189          
   1190            WriteEEPROMBufferSync(EEPROM_PORTSETUP + 3 + port * 2, sizeof(uint16_t), (char*)&delay);
   1191          }
   1192          
   1193          void
   1194          rs485_task_set_rsp_delay(uint8_t port, uint16_t delay)
   1195          {
   1196            OS_Use(&UARTSEND); 
   1197            __rs485_task_set_rsp_delay(port, delay);
   1198            OS_Unuse(&UARTSEND); 
   1199          }
   1200          
   1201          uint16_t
   1202          rs485_task_get_rsp_delay(uint8_t port)
   1203          {
   1204            uint16_t    ret;
   1205          
   1206            OS_Use(&UARTSEND); 
   1207            ret = Rsp_Delay[port];
   1208            OS_Unuse(&UARTSEND); 
   1209          
   1210            return ret;
   1211          }
   1212          
   1213          uint8_t
   1214          rs485_task_get_comm_status(uint8_t port)
   1215          {
   1216            uint16_t    ret;
   1217          
   1218            // XXX no need for lock
   1219            ret = (TData.RS4.IOUnitStatus[port] & COMFAIL_BIT) ? 0 : 1;
   1220          
   1221            return ret;
   1222          }
   1223          
   1224          uint8_t
   1225          rs485_task_get_channel_status(uint8_t port, uint8_t ch)
   1226          {
   1227            uint8_t ret;
   1228          
   1229            OS_Use(&UARTSEND); 
   1230            ret = (uint8_t)TData.RS4.TargetSetup1[port][ch];
   1231            OS_Unuse(&UARTSEND);
   1232          
   1233            return ret;
   1234          }
   1235          
   1236          int16_t
   1237          rs485_task_get_channel_value(uint8_t port, uint8_t ch)
   1238          {
   1239            float f;
   1240            int16_t  ret;
   1241          
   1242            OS_Use(&UARTSEND); 
   1243            f = TData.RS4.Result[port][ch];
   1244            OS_Unuse(&UARTSEND);
   1245          
   1246            ret = (int16_t)(f * 100);
   1247            return ret;
   1248          }
   1249          
   1250          int16_t
   1251          rs485_task_get_channel_raw_value(uint8_t port, uint8_t ch)
   1252          {
   1253            int16_t ret;
   1254          
   1255            OS_Use(&UARTSEND); 
   1256            ret = TData.RS4.Raw[port][ch];
   1257            OS_Unuse(&UARTSEND);
   1258          
   1259            return ret;
   1260          }
   1261          
   1262          int16_t
   1263          rs485_task_get_channel_cal_value(uint8_t port, uint8_t ch)
   1264          {
   1265            int16_t ret;
   1266          
   1267            OS_Use(&UARTSEND); 
   1268            ret = TData.RS4.Cal[port][ch];
   1269            OS_Unuse(&UARTSEND);
   1270          
   1271            return ret;
   1272          }
   1273          #endif /* USE_MODBUS_PROTOCOL == 1 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   CalcDSRxChecksum16552
      0      2   CalcDSTxChecksumUART16552
      3      2   CheckActionUart16552
        3      2   -> ReceiveCData
        3      2   -> ReceiveCardEEPROMData
        3      2   -> ReceiveCardStatus
        3      2   -> ReceiveConfigData
        3      2   -> ReceivePTOData
        3      2   -> ReceiveRData
        3      2   -> ReceiveRadarData
        3      2   -> ReceiveWHData
        3      2   -> ReceiveWISData
        3      2   -> ReceiveWISStatus
        3      2   -> ReceiveWISXData
      0      2   EmptyRxBuf16552
     13      2   ExtRS485Ctl
       13      2   -> Init16552
       13      2   -> OS_Delay
       13      2   -> OS_WaitEventTimed
       13      2   -> ReadEEPROMByte
       13      2   -> Uart_BuildReqC16552
       13      2   -> Uart_BuildReqCardStatus
       13      2   -> Uart_BuildReqEEPROMData
       13      2   -> Uart_BuildReqM16552
       13      2   -> Uart_BuildReqR16552
       13      2   -> Uart_BuildReqRadarData
       13      2   -> Uart_BuildReqWISData
       13      2   -> Uart_BuildReqWISXData
       13      2   -> Uart_BuildTail16552
       13      2 ?SS_SHR_L02
       13      2 ?S_SHL_L02
      2      2   ExtRS485Rec
        2      2   -> OS_Delay
        2      2   -> OS_SignalEvent
        2      2   -> OS_WaitEventTimed
        2      2   -> Usart16552CheckPackage
        2      2 ?SS_SHR_L02
        2      2 ?S_SHL_L02
      0      2   GoToSyncUART16552
      0      2   Init16552
        0      2 ?UL_DIVMOD_S_L03
      8      2   ReceiveCData
      0      2   ReceiveCardEEPROMData
      0      2   ReceiveCardStatus
      2      2   ReceiveConfigData
      7      2   ReceivePTOData
        7      2   -> OS_Unuse
        7      2   -> OS_Use
      4      2   ReceivePacketUart16552
        4      2   -> GoToSyncUART16552
        4      2   -> OS_SignalEvent
      8      2   ReceiveRData
      2      2   ReceiveRadarData
      0      2   ReceiveRadarInfo
      3      2   ReceiveWHData
        3      2   -> OS_Unuse
        3      2   -> OS_Use
        3      2 ?S_SHL_L02
      4      2   ReceiveWISData
        4      2 ?F_DIV_S_L04
        4      2 ?SL2F_S_L04
        4      2 ?UL2F_S_L04
      0      2   ReceiveWISStatus
      0      2   ReceiveWISXData
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
      0      2   Uart_BuildReqC16552
      0      2   Uart_BuildReqCardStatus
      0      2   Uart_BuildReqConfig
      0      2   Uart_BuildReqEEPROMData
      0      2   Uart_BuildReqM16552
      0      2   Uart_BuildReqR16552
      0      2   Uart_BuildReqRadarData
      0      2   Uart_BuildReqRadarInfo
      0      2   Uart_BuildReqWISCardStatus
      0      2   Uart_BuildReqWISData
      0      2   Uart_BuildReqWISXData
      2      2   Uart_BuildSndData
      3      2   Uart_BuildTail16552
        3      2   -> CalcDSTxChecksumUART16552
        3      2   -> GoToSyncUART16552
        3      2   -> OS_Delay
        3      2   -> OS_RetriggerTimer
        3      2   -> Uart_BuildHeader16552
      7      2   Usart16552CheckPackage
        7      2   -> CheckActionUart16552
        7      2   -> GoToSyncUART16552


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ??Subroutine5_0
      50  ?Subroutine0
      18  ?Subroutine1
      16  ?Subroutine2
      10  ?Subroutine3
      38  ?Subroutine4
     114  CalcDSRxChecksum16552
      62  CalcDSTxChecksumUART16552
     228  CheckActionUart16552
      38  EmptyRxBuf16552
    1638  ExtRS485Ctl
     496  ExtRS485Rec
      32  GoToSyncUART16552
     238  Init16552
     170  ReceiveCData
      82  ReceiveCardEEPROMData
      72  ReceiveCardStatus
     128  ReceiveConfigData
     218  ReceivePTOData
     328  ReceivePacketUart16552
     172  ReceiveRData
     190  ReceiveRadarData
      54  ReceiveRadarInfo
     260  ReceiveWHData
     214  ReceiveWISData
     106  ReceiveWISStatus
      90  ReceiveWISXData
       8  SetRS4Port
      12  TimoutUART0
      12  TimoutUART1
      88  Uart_BuildHeader16552
      30  Uart_BuildReqC16552
      30  Uart_BuildReqCardStatus
      32  Uart_BuildReqConfig
     110  Uart_BuildReqEEPROMData
      30  Uart_BuildReqM16552
      30  Uart_BuildReqR16552
      28  Uart_BuildReqRadarData
      32  Uart_BuildReqRadarInfo
      30  Uart_BuildReqWISCardStatus
      30  Uart_BuildReqWISData
      92  Uart_BuildReqWISXData
     112  Uart_BuildSndData
     338  Uart_BuildTail16552
     102  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 6 224 bytes in segment CODE
 
 6 224 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
