###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       08/Feb/2024  10:48:57
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWA621.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\Obj" -D
#        OS_LIBMODE_R -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\List" -y
#        --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -Ohs)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\List\RS485.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\Obj\RS485.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          #if USE_MODBUS_PROTOCOL == 1
     14              #include "common_def.h"
     15          
     16          #endif /* USE_MODBUS_PROTOCOL == 1 */
     17          
     18          
     19          /************************************************ *************************
     20          *   (This is a timer calback)
     21          *  Timout timer UART 0
     22          *
     23          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     24          void TimoutUART0(void) {
   \                     TimoutUART0:
     25          
     26              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   9100220C           LDS     R16, 8716
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   9300220C           STS     8716, R16
     27          }
   \   0000000A   9508               RET
     28          
     29          /*************************************************************************
     30          *   (This is a timer calback)
     31          *  Timout timer UART 1
     32          *
     33          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     34          void TimoutUART1(void) {
   \                     TimoutUART1:
     35          
     36              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   91002204           LDS     R16, 8708
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   93002204           STS     8708, R16
     37          }
   \   0000000A   9508               RET
     38          
     39          
     40          /*************************************************************************
     41          *   (This is a task)
     42          *  Usart handler UART send request
     43          *
     44          *************************************************************************/
     45          #pragma diag_suppress=Pa082

   \                                 In  segment CODE, align 2, keep-with-next
     46          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92DA               ST      -Y, R13
   \   00000004   92CA               ST      -Y, R12
   \   00000006   92BA               ST      -Y, R11
   \   00000008   92AA               ST      -Y, R10
   \   0000000A   929A               ST      -Y, R9
   \   0000000C   928A               ST      -Y, R8
   \   0000000E   926A               ST      -Y, R6
   \   00000010   925A               ST      -Y, R5
   \   00000012   93BA               ST      -Y, R27
   \   00000014   93AA               ST      -Y, R26
   \   00000016   939A               ST      -Y, R25
   \   00000018   938A               ST      -Y, R24
   \   0000001A                      REQUIRE ?Register_R5_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R6_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R8_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R9_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R10_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R11_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R12_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R13_is_cg_reg
   \   0000001A                      REQUIRE ?Register_R15_is_cg_reg
     47              char SeqCnt = 0;
   \   0000001A   2455               CLR     R5
     48              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   0000001C   E005               LDI     R16, 5
   \   0000001E   2EF0               MOV     R15, R16
     49              char EventStatus;
     50              char AskMD[2];
     51          
     52          
     53              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000020   ....               LDI     R22, LOW((UART16552 + 203))
   \   00000022   ....               LDI     R23, HIGH((UART16552 + 203))
   \   00000024   E342               LDI     R20, 50
   \   00000026   E050               LDI     R21, 0
   \   00000028   E021               LDI     R18, 1
   \   0000002A   ....               LDI     R16, LOW((UART16552 + 253))
   \   0000002C   ....               LDI     R17, HIGH((UART16552 + 253))
   \   0000002E   ........           CALL    OS_CreateMB
   \   00000032   9250....           STS     (UART16552 + 60), R5
   \   00000036   9250....           STS     (UART16552 + 61), R5
   \   0000003A   9250....           STS     (UART16552 + 62), R5
   \   0000003E   9250....           STS     (UART16552 + 63), R5
   \   00000042   9250....           STS     (UART16552 + 64), R5
   \   00000046   9250....           STS     (UART16552 + 65), R5
   \   0000004A   ....               LDI     R30, LOW((UART16552 + 188))
   \   0000004C   ....               LDI     R31, HIGH((UART16552 + 188))
   \   0000004E   015F               MOVW    R11:R10, R31:R30
   \   00000050   8250               ST      Z, R5
   \   00000052   8251               STD     Z+1, R5
   \   00000054   8252               STD     Z+2, R5
   \   00000056   8253               STD     Z+3, R5
   \   00000058   8254               STD     Z+4, R5
   \   0000005A   8255               STD     Z+5, R5
   \   0000005C   E003               LDI     R16, 3
   \   0000005E   8306               STD     Z+6, R16
   \   00000060   8257               STD     Z+7, R5
   \   00000062   9250....           STS     (UART16552 + 66), R5
   \   00000066   EF0A               LDI     R16, 250
   \   00000068   8700               STD     Z+8, R16
   \   0000006A   8651               STD     Z+9, R5
   \   0000006C   E800               LDI     R16, 128
   \   0000006E   9300220B           STS     8715, R16
   \   00000072   E00D               LDI     R16, 13
   \   00000074   93002208           STS     8712, R16
   \   00000078   92502209           STS     8713, R5
   \   0000007C   E003               LDI     R16, 3
   \   0000007E   9300220B           STS     8715, R16
   \   00000082   E001               LDI     R16, 1
   \   00000084   9300220A           STS     8714, R16
   \   00000088   EC01               LDI     R16, 193
   \   0000008A   9300220A           STS     8714, R16
   \   0000008E   E003               LDI     R16, 3
   \   00000090   93002209           STS     8713, R16
   \   00000094   9250220C           STS     8716, R5
     54              Init16552(1, 9600);                                      // Init UART channel 1
   \   00000098   ....               LDI     R22, LOW((UART16552 + 467))
   \   0000009A   ....               LDI     R23, HIGH((UART16552 + 467))
   \   0000009C   E342               LDI     R20, 50
   \   0000009E   E050               LDI     R21, 0
   \   000000A0   E021               LDI     R18, 1
   \   000000A2   ....               LDI     R16, LOW((UART16552 + 517))
   \   000000A4   ....               LDI     R17, HIGH((UART16552 + 517))
   \   000000A6   ........           CALL    OS_CreateMB
   \   000000AA   ....               LDI     R26, LOW((UART16552 + 264))
   \   000000AC   ....               LDI     R27, HIGH((UART16552 + 264))
   \   000000AE   01FD               MOVW    R31:R30, R27:R26
   \   000000B0   AE54               STD     Z+60, R5
   \   000000B2   AE55               STD     Z+61, R5
   \   000000B4   9250....           STS     (UART16552 + 326), R5
   \   000000B8   9250....           STS     (UART16552 + 327), R5
   \   000000BC   9250....           STS     (UART16552 + 328), R5
   \   000000C0   9250....           STS     (UART16552 + 329), R5
   \   000000C4   ....               LDI     R30, LOW((UART16552 + 452))
   \   000000C6   ....               LDI     R31, HIGH((UART16552 + 452))
   \   000000C8   014F               MOVW    R9:R8, R31:R30
   \   000000CA   8250               ST      Z, R5
   \   000000CC   8251               STD     Z+1, R5
   \   000000CE   8252               STD     Z+2, R5
   \   000000D0   8253               STD     Z+3, R5
   \   000000D2   8254               STD     Z+4, R5
   \   000000D4   8255               STD     Z+5, R5
   \   000000D6   E003               LDI     R16, 3
   \   000000D8   8306               STD     Z+6, R16
   \   000000DA   8257               STD     Z+7, R5
   \   000000DC   9250....           STS     (UART16552 + 330), R5
   \   000000E0   EF0A               LDI     R16, 250
   \   000000E2   8700               STD     Z+8, R16
   \   000000E4   8651               STD     Z+9, R5
   \   000000E6   E800               LDI     R16, 128
   \   000000E8   93002203           STS     8707, R16
   \   000000EC   E00D               LDI     R16, 13
   \   000000EE   93002200           STS     8704, R16
   \   000000F2   92502201           STS     8705, R5
   \   000000F6   E003               LDI     R16, 3
   \   000000F8   93002203           STS     8707, R16
   \   000000FC   E001               LDI     R16, 1
   \   000000FE   93002202           STS     8706, R16
   \   00000102   EC01               LDI     R16, 193
   \   00000104   93002202           STS     8706, R16
   \   00000108   E003               LDI     R16, 3
   \   0000010A   93002201           STS     8705, R16
   \   0000010E   92502204           STS     8708, R5
     55              OS_SignalEvent(0x01,&TCB_16552_RxHandler1 );
   \   00000112   ....               LDI     R18, LOW(TCB_16552_RxHandler1)
   \   00000114   ....               LDI     R19, (TCB_16552_RxHandler1) >> 8
   \   00000116   E001               LDI     R16, 1
   \   00000118   ........           CALL    OS_SignalEvent
     56              OS_SignalEvent(0x01,&TCB_16552_RxHandler2 );
   \   0000011C   ....               LDI     R18, LOW(TCB_16552_RxHandler2)
   \   0000011E   ....               LDI     R19, (TCB_16552_RxHandler2) >> 8
   \   00000120   E001               LDI     R16, 1
   \   00000122   ........           CALL    OS_SignalEvent
     57              TData.RS4.PortUsed      = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \   00000126   E002               LDI     R16, 2
   \   00000128   E010               LDI     R17, 0
   \   0000012A   ........           CALL    ReadEEPROMByte
   \   0000012E   9300....           STS     TData, R16
     58              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   00000132   E003               LDI     R16, 3
   \   00000134   E010               LDI     R17, 0
   \   00000136   ........           CALL    ReadEEPROMByte
   \   0000013A   9300....           STS     (TData + 1), R16
     59              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   0000013E   E004               LDI     R16, 4
   \   00000140   E010               LDI     R17, 0
   \   00000142   ........           CALL    ReadEEPROMByte
   \   00000146   9300....           STS     (TData + 2), R16
   \   0000014A   9250....           STS     (TData + 1268), R5
   \   0000014E   9250....           STS     (TData + 1348), R5
     60          #if USE_MODBUS_PROTOCOL == 1
     61              {
     62                  static void load_eeprom_misc_485(void);
     63                  load_eeprom_misc_485();
     64              }
     65          #endif
     66          
     67              TData.RS4.ToTargetBuffer[0][0] = false;
     68              TData.RS4.ToTargetBuffer[1][0] = false;
     69              TData.RS4.FromTargetBuffer[0][0] = false;
   \   00000152   ....               LDI     R30, LOW((TData + 1428))
   \   00000154   ....               LDI     R31, HIGH((TData + 1428))
   \   00000156   016F               MOVW    R13:R12, R31:R30
   \   00000158   8250               ST      Z, R5
     70              TData.RS4.FromTargetBuffer[1][0] = false;
   \   0000015A   AA52               STD     Z+50, R5
     71          
     72          
     73              for (char i = 0; i < 8; i++) {
   \   0000015C   E090               LDI     R25, 0
   \   0000015E   E088               LDI     R24, 8
     74                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \                     ??ExtRS485Ctl_0:
   \   00000160   94F8               cli
   \   00000162   9120....           LDS     R18, TData
   \   00000166   E001               LDI     R16, 1
   \   00000168   E010               LDI     R17, 0
   \   0000016A   2F49               MOV     R20, R25
   \   0000016C   ........           CALL    ?S_SHL_L02
   \   00000170   2320               AND     R18, R16
   \   00000172   B108               IN      R16, 0x08
   \   00000174   2B02               OR      R16, R18
   \   00000176   B908               OUT     0x08, R16
   \   00000178   9100....           LDS     R16, (OS_Global + 1)
   \   0000017C   2300               TST     R16
   \   0000017E   F409               BRNE    ??ExtRS485Ctl_1
   \   00000180   9478               sei
     75                  OS_Delay(100);
   \                     ??ExtRS485Ctl_1:
   \   00000182   E604               LDI     R16, 100
   \   00000184   E010               LDI     R17, 0
   \   00000186   ........           CALL    OS_Delay
     76              }
   \   0000018A   9593               INC     R25
   \   0000018C   958A               DEC     R24
   \   0000018E   F741               BRNE    ??ExtRS485Ctl_0
     77              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \   00000190   E700               LDI     R16, 112
   \   00000192   E117               LDI     R17, 23
   \   00000194   ........           CALL    OS_Delay
   \   00000198   ....               LDI     R24, LOW((TData + 1528))
   \   0000019A   ....               LDI     R25, HIGH((TData + 1528))
   \   0000019C   2466               CLR     R6
   \   0000019E   C005               RJMP    ??ExtRS485Ctl_2
     78          
     79          #if USE_MODBUS_PROTOCOL == 1
     80              //
     81              // let modbus task that I'm done initializing
     82              //
     83              {
     84                  extern void modbus_rtu_notify_go(void);
     85                  modbus_rtu_notify_go();
     86              }
     87          #endif
     88          
     89              while (1) {
     90                  PortPair = 0;
     91          
     92                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
     93                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
     94                          EmptyRxBuf16552(0);                            // Empty UART channel 0
     95                      }
     96                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
     97                          EmptyRxBuf16552(1);                            // Empty UART channel 1
     98                      }
     99                      if (PowerOnTimer < POWER_ON_CNT) {
    100                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
    101                              SetRS4Port();                                // and set power on ports
    102                          }
    103                      }
    104                      SetBit(PORTE, 0xf0);
    105                      // volatile undefined behavior
    106                      // ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
    107                      //
    108                      char temp = (0x10 << PortPair) & 0xf0;
    109                      ClrBit(PORTE, temp);              // set mux port
    110                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
    111                          UART16552[0].TxFirst = 6;        // Start packet build at pos.
    112                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
    113          
    114                          switch (SnsType) {
    115                          case 0x01:                              //Water ingress??
    116                              switch (SeqCnt) {
    117                              case 0:
    118                                  Uart_BuildReqWISCardStatus(0);                     //Card status
    119                                  break;
    120                              case 20:
    121                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    122                                      Uart_BuildReqWISXData(0, 115);          // Request serial no
    123                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    124                                          TData.RS4.EEPROMPortpair[0] = 0;
    125                                      }
    126                                  } else {
    127                                      Uart_BuildReqWISData(0);          //WIS data
    128                                  }
    129                                  break;
    130                              default:
    131                                  Uart_BuildReqWISData(0);            //WIS data
    132                                  break;
    133                              }
    134                              break;
    135          
    136                          case 0x02:                             // Radar??
    137                              switch (SeqCnt) {
    138                              case 20:
    139                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    140                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    141                                          TData.RS4.EEPROMPortpair[0] = 0;
    142                                      }
    143                                  }
    144                                  // Fall through and send the request
    145                              default:
    146                                  Uart_BuildReqRadarData(0);             // Radar data
    147                                  break;
    148                              case 0:
    149                                  Uart_BuildReqRadarInfo(0);             //Radar Information
    150                                  break;
    151                              }
    152                              break;
    153                          case 0x00:                         // AN-SGCNV
    154                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    155                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
    156                                  Uart_BuildSndData(0);     // add data to AD card package
    157                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    158                                  AskMD[0] = false;
    159                              } else {
    160                                  AskMD[0] = true;
    161                              }
    162                              if (SeqCnt == 0) {
    163                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
    164                              } else if (SeqCnt == 5) {
    165                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
    166                              } else if (SeqCnt == 10) {
    167                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    168                              } else if (SeqCnt == 15) {
    169                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
    170                              } else if (SeqCnt == 20) {
    171                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    172                                      Uart_BuildReqEEPROMData(0);
    173                                      //EEpromdata cmd, 24
    174                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
    175                                          TData.RS4.EEPROMADChannel[0] = 0;
    176                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    177                                              TData.RS4.EEPROMPortpair[0] = 0;
    178                                          }
    179                                      }
    180                                  } else if (AskMD[0] == true) {
    181                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    182                                  }
    183                              } else if (AskMD[0] == true) {
    184                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    185                              }
    186                              break;
    187                          }
    188                          //EmptyRxBuf16552(0);                            // Empty UART channel 0
    189                          Uart_BuildTail16552(0);
    190                      } else {
    191                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
    192                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
    193                                  TData.RS4.EEPROMPortpair[0] = 0;
    194                              }
    195                          }
    196                      }
    197                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {      // sensor on port 1?
    198                          UART16552[1].TxFirst = 6;                       // Start at
    199                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
    200                          switch (SnsType) {
    201                          case 0x01:    //Water ingress??
    202                              switch (SeqCnt) {
    203                              case 0:
    204                                  Uart_BuildReqWISCardStatus(1);          //Card status
    205                                  break;
    206                              case 20:
    207                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    208                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
    209                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    210                                          TData.RS4.EEPROMPortpair[1] = 0;
    211                                      }
    212                                  } else {
    213                                      Uart_BuildReqWISData(1);                //WIS data
    214                                  }
    215                                  break;
    216                              default:
    217                                  Uart_BuildReqWISData(1);                //WIS data
    218                                  break;
    219                              }
    220                              break;
    221                          case 0x02:    // Radar??
    222                              switch (SeqCnt) {
    223                              case 20:
    224                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    225                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    226                                          TData.RS4.EEPROMPortpair[1] = 0;
    227                                      }
    228                                  }
    229                                  // Fall through and send the request
    230                              default:
    231                                  Uart_BuildReqRadarData(1);          // Radar data
    232                                  break;
    233                              case 0:
    234                                  Uart_BuildReqRadarInfo(1);          //Radar Information
    235                                  break;
    236                              }
    237                              break;
    238                          case 0x00:  // AN-SGCNV
    239                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    240                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
    241                                  Uart_BuildSndData(1);                       // add data to AD card package
    242                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    243                                  AskMD[1] = false;
    244                              } else {
    245                                  AskMD[1] = true;
    246                              }
    247                              if (SeqCnt == 0) {
    248                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
    249                              } else if (SeqCnt == 5) {
    250                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
    251                              } else if (SeqCnt == 10) {
    252                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    253                              } else if (SeqCnt == 15) {
    254                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
    255                              } else if (SeqCnt == 20) {
    256                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    257                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
    258                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
    259                                          TData.RS4.EEPROMADChannel[1] = 0;
    260                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    261                                              TData.RS4.EEPROMPortpair[1] = 0;
    262                                          }
    263                                      }
    264                                  } else if (AskMD[1] == true) {
    265                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    266                                  }
    267                              } else if (AskMD[1] == true) {
    268                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    269                              }
    270                              break;
    271                          }
    272                          //EmptyRxBuf16552(0);                            // Empty UART channel 0
    273                          Uart_BuildTail16552(1);
    274                      } else {
    275                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
    276                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
    277                                  TData.RS4.EEPROMPortpair[1] = 0;
    278                              }
    279                          }
    280                      }
    281                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
    282                      if (EventStatus & 0x02) {
    283                          if (PowerOnTimer >= POWER_ON_CNT) {
    284                              PowerOnTimer = 0;                              // and start over again
    285                          }
    286                      }
    287                  }
    288                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_3:
   \   000001A0   9453               INC     R5
   \   000001A2   E105               LDI     R16, 21
   \   000001A4   1650               CP      R5, R16
   \   000001A6   F008               BRCS    ??ExtRS485Ctl_2
    289                      SeqCnt = 0;
   \   000001A8   2455               CLR     R5
    290                  }
   \                     ??ExtRS485Ctl_2:
   \   000001AA   9260....           STS     PortPair, R6
   \   000001AE   9260....           STS     PortPair, R6
   \   000001B2   C01C               RJMP    ??ExtRS485Ctl_4
   \                     ??ExtRS485Ctl_5:
   \   000001B4   01FC               MOVW    R31:R30, R25:R24
   \   000001B6   8103               LDD     R16, Z+3
   \   000001B8   9110....           LDS     R17, PortPair
   \   000001BC   1701               CP      R16, R17
   \   000001BE   F431               BRNE    ??ExtRS485Ctl_6
   \   000001C0   9503               INC     R16
   \   000001C2   9300....           STS     (TData + 1531), R16
   \   000001C6   3004               CPI     R16, 4
   \   000001C8   F008               BRCS    ??ExtRS485Ctl_6
   \   000001CA   8263               STD     Z+3, R6
   \                     ??ExtRS485Ctl_6:
   \   000001CC   EE28               LDI     R18, 232
   \   000001CE   E033               LDI     R19, 3
   \   000001D0   E001               LDI     R16, 1
   \   000001D2   ........           CALL    OS_WaitEventTimed
   \   000001D6   FB01               BST     R16, 1
   \   000001D8   F426               BRTC    ??ExtRS485Ctl_7
   \   000001DA   E005               LDI     R16, 5
   \   000001DC   16F0               CP      R15, R16
   \   000001DE   F008               BRCS    ??ExtRS485Ctl_7
   \   000001E0   24FF               CLR     R15
   \                     ??ExtRS485Ctl_7:
   \   000001E2   9100....           LDS     R16, PortPair
   \   000001E6   9503               INC     R16
   \   000001E8   9300....           STS     PortPair, R16
   \                     ??ExtRS485Ctl_4:
   \   000001EC   9100....           LDS     R16, PortPair
   \   000001F0   3004               CPI     R16, 4
   \   000001F2   F6B0               BRCC    ??ExtRS485Ctl_3
   \   000001F4   01F5               MOVW    R31:R30, R11:R10
   \   000001F6   8504               LDD     R16, Z+12
   \   000001F8   3009               CPI     R16, 9
   \   000001FA   F030               BRCS    ??ExtRS485Ctl_8
   \                     ??ExtRS485Ctl_9:
   \   000001FC   91002208           LDS     R16, 8712
   \   00000200   9100220D           LDS     R16, 8717
   \   00000204   FD00               SBRC    R16, 0
   \   00000206   CFFA               RJMP    ??ExtRS485Ctl_9
   \                     ??ExtRS485Ctl_8:
   \   00000208   01F4               MOVW    R31:R30, R9:R8
   \   0000020A   8504               LDD     R16, Z+12
   \   0000020C   3009               CPI     R16, 9
   \   0000020E   F030               BRCS    ??ExtRS485Ctl_10
   \                     ??ExtRS485Ctl_11:
   \   00000210   91002200           LDS     R16, 8704
   \   00000214   91002205           LDS     R16, 8709
   \   00000218   FD00               SBRC    R16, 0
   \   0000021A   CFFA               RJMP    ??ExtRS485Ctl_11
   \                     ??ExtRS485Ctl_10:
   \   0000021C   E005               LDI     R16, 5
   \   0000021E   16F0               CP      R15, R16
   \   00000220   F430               BRCC    ??ExtRS485Ctl_12
   \   00000222   94F3               INC     R15
   \   00000224   16F0               CP      R15, R16
   \   00000226   F018               BRCS    ??ExtRS485Ctl_12
   \   00000228   9100....           LDS     R16, TData
   \   0000022C   B908               OUT     0x08, R16
   \                     ??ExtRS485Ctl_12:
   \   0000022E   94F8               cli
   \   00000230   B10E               IN      R16, 0x0E
   \   00000232   6F00               ORI     R16, 0xF0
   \   00000234   B90E               OUT     0x0E, R16
   \   00000236   9100....           LDS     R16, (OS_Global + 1)
   \   0000023A   2300               TST     R16
   \   0000023C   F409               BRNE    ??ExtRS485Ctl_13
   \   0000023E   9478               sei
   \                     ??ExtRS485Ctl_13:
   \   00000240   9140....           LDS     R20, PortPair
   \   00000244   94F8               cli
   \   00000246   E100               LDI     R16, 16
   \   00000248   E010               LDI     R17, 0
   \   0000024A   ........           CALL    ?S_SHL_L02
   \   0000024E   7F00               ANDI    R16, 0xF0
   \   00000250   9500               COM     R16
   \   00000252   B11E               IN      R17, 0x0E
   \   00000254   2310               AND     R17, R16
   \   00000256   B91E               OUT     0x0E, R17
   \   00000258   9100....           LDS     R16, (OS_Global + 1)
   \   0000025C   2300               TST     R16
   \   0000025E   F409               BRNE    ??ExtRS485Ctl_14
   \   00000260   9478               sei
   \                     ??ExtRS485Ctl_14:
   \   00000262   9100....           LDS     R16, TData
   \   00000266   E010               LDI     R17, 0
   \   00000268   9140....           LDS     R20, PortPair
   \   0000026C   ........           CALL    ?SS_SHR_L02
   \   00000270   7001               ANDI    R16, 0x01
   \   00000272   F409               BRNE    $+2+2
   \   00000274   C285               RJMP    ??ExtRS485Ctl_15
   \   00000276   E006               LDI     R16, 6
   \   00000278   9300....           STS     (UART16552 + 60), R16
   \   0000027C   9260....           STS     (UART16552 + 61), R6
   \   00000280   E021               LDI     R18, 1
   \   00000282   9100....           LDS     R16, (TData + 1)
   \   00000286   E010               LDI     R17, 0
   \   00000288   9140....           LDS     R20, PortPair
   \   0000028C   0F44               LSL     R20
   \   0000028E   ........           CALL    ?SS_SHR_L02
   \   00000292   7003               ANDI    R16, 0x03
   \   00000294   F409               BRNE    $+2+2
   \   00000296   C0A3               RJMP    ??ExtRS485Ctl_16
   \   00000298   950A               DEC     R16
   \   0000029A   F021               BREQ    ??ExtRS485Ctl_17
   \   0000029C   950A               DEC     R16
   \   0000029E   F409               BRNE    $+2+2
   \   000002A0   C069               RJMP    ??ExtRS485Ctl_18
   \   000002A2   C1BB               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_17:
   \   000002A4   2D05               MOV     R16, R5
   \   000002A6   2055               TST     R5
   \   000002A8   F019               BREQ    ??ExtRS485Ctl_20
   \   000002AA   5104               SUBI    R16, 20
   \   000002AC   F089               BREQ    ??ExtRS485Ctl_21
   \   000002AE   C052               RJMP    ??ExtRS485Ctl_22
   \                     ??ExtRS485Ctl_20:
   \   000002B0   9140....           LDS     R20, (UART16552 + 60)
   \   000002B4   9150....           LDS     R21, (UART16552 + 61)
   \   000002B8   018A               MOVW    R17:R16, R21:R20
   \   000002BA   5F0F               SUBI    R16, 255
   \   000002BC   4F1F               SBCI    R17, 255
   \   000002BE   9300....           STS     (UART16552 + 60), R16
   \   000002C2   9310....           STS     (UART16552 + 61), R17
   \   000002C6   01FA               MOVW    R31:R30, R21:R20
   \   000002C8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000002CA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000002CC   E604               LDI     R16, 100
   \   000002CE   C10F               RJMP    ??ExtRS485Ctl_23
   \                     ??ExtRS485Ctl_21:
   \   000002D0   01F6               MOVW    R31:R30, R13:R12
   \   000002D2   8100               LD      R16, Z
   \   000002D4   2300               TST     R16
   \   000002D6   F5F1               BRNE    ??ExtRS485Ctl_22
   \   000002D8   01FC               MOVW    R31:R30, R25:R24
   \   000002DA   8102               LDD     R16, Z+2
   \   000002DC   9110....           LDS     R17, PortPair
   \   000002E0   1701               CP      R16, R17
   \   000002E2   F5C1               BRNE    ??ExtRS485Ctl_22
   \   000002E4   9140....           LDS     R20, (UART16552 + 60)
   \   000002E8   9150....           LDS     R21, (UART16552 + 61)
   \   000002EC   018A               MOVW    R17:R16, R21:R20
   \   000002EE   5F0F               SUBI    R16, 255
   \   000002F0   4F1F               SBCI    R17, 255
   \   000002F2   9300....           STS     (UART16552 + 60), R16
   \   000002F6   9310....           STS     (UART16552 + 61), R17
   \   000002FA   01FA               MOVW    R31:R30, R21:R20
   \   000002FC   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000002FE   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000300   E606               LDI     R16, 102
   \   00000302   8300               ST      Z, R16
   \   00000304   9140....           LDS     R20, (UART16552 + 60)
   \   00000308   9150....           LDS     R21, (UART16552 + 61)
   \   0000030C   018A               MOVW    R17:R16, R21:R20
   \   0000030E   5F0F               SUBI    R16, 255
   \   00000310   4F1F               SBCI    R17, 255
   \   00000312   9300....           STS     (UART16552 + 60), R16
   \   00000316   9310....           STS     (UART16552 + 61), R17
   \   0000031A   01FA               MOVW    R31:R30, R21:R20
   \   0000031C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000031E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000320   8320               ST      Z, R18
   \   00000322   9140....           LDS     R20, (UART16552 + 60)
   \   00000326   9150....           LDS     R21, (UART16552 + 61)
   \   0000032A   018A               MOVW    R17:R16, R21:R20
   \   0000032C   5F0F               SUBI    R16, 255
   \   0000032E   4F1F               SBCI    R17, 255
   \   00000330   9300....           STS     (UART16552 + 60), R16
   \   00000334   9310....           STS     (UART16552 + 61), R17
   \   00000338   01FA               MOVW    R31:R30, R21:R20
   \   0000033A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000033C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000033E   E703               LDI     R16, 115
   \   00000340   8300               ST      Z, R16
   \   00000342   9100....           LDS     R16, (TData + 1530)
   \   00000346   9503               INC     R16
   \   00000348   9300....           STS     (TData + 1530), R16
   \   0000034C   3004               CPI     R16, 4
   \   0000034E   F408               BRCC    $+2+2
   \   00000350   C164               RJMP    ??ExtRS485Ctl_19
   \   00000352   C130               RJMP    ??ExtRS485Ctl_24
   \                     ??ExtRS485Ctl_22:
   \   00000354   9140....           LDS     R20, (UART16552 + 60)
   \   00000358   9150....           LDS     R21, (UART16552 + 61)
   \   0000035C   018A               MOVW    R17:R16, R21:R20
   \   0000035E   5F0F               SUBI    R16, 255
   \   00000360   4F1F               SBCI    R17, 255
   \   00000362   9300....           STS     (UART16552 + 60), R16
   \   00000366   9310....           STS     (UART16552 + 61), R17
   \   0000036A   01FA               MOVW    R31:R30, R21:R20
   \   0000036C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000036E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000370   E605               LDI     R16, 101
   \   00000372   C134               RJMP    ??ExtRS485Ctl_25
   \                     ??ExtRS485Ctl_18:
   \   00000374   2D05               MOV     R16, R5
   \   00000376   2055               TST     R5
   \   00000378   F111               BREQ    ??ExtRS485Ctl_26
   \   0000037A   5104               SUBI    R16, 20
   \   0000037C   F481               BRNE    ??ExtRS485Ctl_27
   \   0000037E   01F6               MOVW    R31:R30, R13:R12
   \   00000380   8100               LD      R16, Z
   \   00000382   2300               TST     R16
   \   00000384   F461               BRNE    ??ExtRS485Ctl_27
   \   00000386   01FC               MOVW    R31:R30, R25:R24
   \   00000388   8102               LDD     R16, Z+2
   \   0000038A   9110....           LDS     R17, PortPair
   \   0000038E   1701               CP      R16, R17
   \   00000390   F431               BRNE    ??ExtRS485Ctl_27
   \   00000392   9503               INC     R16
   \   00000394   9300....           STS     (TData + 1530), R16
   \   00000398   3004               CPI     R16, 4
   \   0000039A   F008               BRCS    ??ExtRS485Ctl_27
   \   0000039C   8262               STD     Z+2, R6
   \                     ??ExtRS485Ctl_27:
   \   0000039E   9140....           LDS     R20, (UART16552 + 60)
   \   000003A2   9150....           LDS     R21, (UART16552 + 61)
   \   000003A6   018A               MOVW    R17:R16, R21:R20
   \   000003A8   5F0F               SUBI    R16, 255
   \   000003AA   4F1F               SBCI    R17, 255
   \   000003AC   9300....           STS     (UART16552 + 60), R16
   \   000003B0   9310....           STS     (UART16552 + 61), R17
   \   000003B4   01FA               MOVW    R31:R30, R21:R20
   \   000003B6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000003B8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000003BA   EA00               LDI     R16, 160
   \   000003BC   C10F               RJMP    ??ExtRS485Ctl_25
   \                     ??ExtRS485Ctl_26:
   \   000003BE   9140....           LDS     R20, (UART16552 + 60)
   \   000003C2   9150....           LDS     R21, (UART16552 + 61)
   \   000003C6   018A               MOVW    R17:R16, R21:R20
   \   000003C8   5F0F               SUBI    R16, 255
   \   000003CA   4F1F               SBCI    R17, 255
   \   000003CC   9300....           STS     (UART16552 + 60), R16
   \   000003D0   9310....           STS     (UART16552 + 61), R17
   \   000003D4   01FA               MOVW    R31:R30, R21:R20
   \   000003D6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000003D8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000003DA   EA01               LDI     R16, 161
   \   000003DC   C088               RJMP    ??ExtRS485Ctl_23
   \                     ??ExtRS485Ctl_16:
   \   000003DE   9100....           LDS     R16, (TData + 1268)
   \   000003E2   3001               CPI     R16, 1
   \   000003E4   F009               BREQ    $+2+2
   \   000003E6   C04B               RJMP    ??ExtRS485Ctl_28
   \   000003E8   9100....           LDS     R16, (TData + 1269)
   \   000003EC   9110....           LDS     R17, PortPair
   \   000003F0   1701               CP      R16, R17
   \   000003F2   F009               BREQ    $+2+2
   \   000003F4   C044               RJMP    ??ExtRS485Ctl_28
   \   000003F6   E063               LDI     R22, 3
   \   000003F8   9140....           LDS     R20, (TData + 1270)
   \   000003FC   E050               LDI     R21, 0
   \   000003FE   5F4D               SUBI    R20, 253
   \   00000400   4F5F               SBCI    R21, 255
   \   00000402   3044               CPI     R20, 4
   \   00000404   0556               CPC     R21, R6
   \   00000406   F0C4               BRLT    ??ExtRS485Ctl_29
   \                     ??ExtRS485Ctl_30:
   \   00000408   9000....           LDS     R0, (UART16552 + 60)
   \   0000040C   9010....           LDS     R1, (UART16552 + 61)
   \   00000410   0180               MOVW    R17:R16, R1:R0
   \   00000412   5F0F               SUBI    R16, 255
   \   00000414   4F1F               SBCI    R17, 255
   \   00000416   9300....           STS     (UART16552 + 60), R16
   \   0000041A   9310....           STS     (UART16552 + 61), R17
   \   0000041E   2FE6               MOV     R30, R22
   \   00000420   E0F0               LDI     R31, 0
   \   00000422   ....               SUBI    R30, LOW((-(TData + 1268) & 0xFFFF))
   \   00000424   ....               SBCI    R31, HIGH((-(TData + 1268) & 0xFFFF))
   \   00000426   8100               LD      R16, Z
   \   00000428   01F0               MOVW    R31:R30, R1:R0
   \   0000042A   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000042C   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   0000042E   8300               ST      Z, R16
   \   00000430   9563               INC     R22
   \   00000432   1764               CP      R22, R20
   \   00000434   0665               CPC     R6, R21
   \   00000436   F344               BRLT    ??ExtRS485Ctl_30
   \                     ??ExtRS485Ctl_29:
   \   00000438   9260....           STS     (TData + 1268), R6
   \   0000043C   9140....           LDS     R20, (UART16552 + 60)
   \   00000440   9150....           LDS     R21, (UART16552 + 61)
   \   00000444   018A               MOVW    R17:R16, R21:R20
   \   00000446   5F0F               SUBI    R16, 255
   \   00000448   4F1F               SBCI    R17, 255
   \   0000044A   9300....           STS     (UART16552 + 60), R16
   \   0000044E   9310....           STS     (UART16552 + 61), R17
   \   00000452   01FA               MOVW    R31:R30, R21:R20
   \   00000454   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000456   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000458   E101               LDI     R16, 17
   \   0000045A   8300               ST      Z, R16
   \   0000045C   9140....           LDS     R20, (UART16552 + 60)
   \   00000460   9150....           LDS     R21, (UART16552 + 61)
   \   00000464   018A               MOVW    R17:R16, R21:R20
   \   00000466   5F0F               SUBI    R16, 255
   \   00000468   4F1F               SBCI    R17, 255
   \   0000046A   9300....           STS     (UART16552 + 60), R16
   \   0000046E   9310....           STS     (UART16552 + 61), R17
   \   00000472   01FA               MOVW    R31:R30, R21:R20
   \   00000474   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000476   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000478   8260               ST      Z, R6
   \   0000047A   E010               LDI     R17, 0
   \   0000047C   C001               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_28:
   \   0000047E   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_31:
   \   00000480   2055               TST     R5
   \   00000482   F481               BRNE    ??ExtRS485Ctl_32
   \   00000484   9140....           LDS     R20, (UART16552 + 60)
   \   00000488   9150....           LDS     R21, (UART16552 + 61)
   \   0000048C   018A               MOVW    R17:R16, R21:R20
   \   0000048E   5F0F               SUBI    R16, 255
   \   00000490   4F1F               SBCI    R17, 255
   \   00000492   9300....           STS     (UART16552 + 60), R16
   \   00000496   9310....           STS     (UART16552 + 61), R17
   \   0000049A   01FA               MOVW    R31:R30, R21:R20
   \   0000049C   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   0000049E   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000004A0   E10B               LDI     R16, 27
   \   000004A2   C09C               RJMP    ??ExtRS485Ctl_25
   \                     ??ExtRS485Ctl_32:
   \   000004A4   E005               LDI     R16, 5
   \   000004A6   1650               CP      R5, R16
   \   000004A8   F481               BRNE    ??ExtRS485Ctl_33
   \   000004AA   9140....           LDS     R20, (UART16552 + 60)
   \   000004AE   9150....           LDS     R21, (UART16552 + 61)
   \   000004B2   018A               MOVW    R17:R16, R21:R20
   \   000004B4   5F0F               SUBI    R16, 255
   \   000004B6   4F1F               SBCI    R17, 255
   \   000004B8   9300....           STS     (UART16552 + 60), R16
   \   000004BC   9310....           STS     (UART16552 + 61), R17
   \   000004C0   01FA               MOVW    R31:R30, R21:R20
   \   000004C2   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000004C4   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000004C6   E00D               LDI     R16, 13
   \   000004C8   C089               RJMP    ??ExtRS485Ctl_25
   \                     ??ExtRS485Ctl_33:
   \   000004CA   E00A               LDI     R16, 10
   \   000004CC   1650               CP      R5, R16
   \   000004CE   F489               BRNE    ??ExtRS485Ctl_34
   \   000004D0   9140....           LDS     R20, (UART16552 + 60)
   \   000004D4   9150....           LDS     R21, (UART16552 + 61)
   \   000004D8   018A               MOVW    R17:R16, R21:R20
   \   000004DA   5F0F               SUBI    R16, 255
   \   000004DC   4F1F               SBCI    R17, 255
   \   000004DE   9300....           STS     (UART16552 + 60), R16
   \   000004E2   9310....           STS     (UART16552 + 61), R17
   \   000004E6   01FA               MOVW    R31:R30, R21:R20
   \   000004E8   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000004EA   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000004EC   E101               LDI     R16, 17
   \                     ??ExtRS485Ctl_23:
   \   000004EE   8300               ST      Z, R16
   \   000004F0   C085               RJMP    ??ExtRS485Ctl_35
   \                     ??ExtRS485Ctl_34:
   \   000004F2   E00F               LDI     R16, 15
   \   000004F4   1650               CP      R5, R16
   \   000004F6   F481               BRNE    ??ExtRS485Ctl_36
   \   000004F8   9140....           LDS     R20, (UART16552 + 60)
   \   000004FC   9150....           LDS     R21, (UART16552 + 61)
   \   00000500   018A               MOVW    R17:R16, R21:R20
   \   00000502   5F0F               SUBI    R16, 255
   \   00000504   4F1F               SBCI    R17, 255
   \   00000506   9300....           STS     (UART16552 + 60), R16
   \   0000050A   9310....           STS     (UART16552 + 61), R17
   \   0000050E   01FA               MOVW    R31:R30, R21:R20
   \   00000510   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000512   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000514   E100               LDI     R16, 16
   \   00000516   C062               RJMP    ??ExtRS485Ctl_25
   \                     ??ExtRS485Ctl_36:
   \   00000518   E104               LDI     R16, 20
   \   0000051A   1650               CP      R5, R16
   \   0000051C   F009               BREQ    $+2+2
   \   0000051E   C04D               RJMP    ??ExtRS485Ctl_37
   \   00000520   01F6               MOVW    R31:R30, R13:R12
   \   00000522   8100               LD      R16, Z
   \   00000524   2300               TST     R16
   \   00000526   F009               BREQ    $+2+2
   \   00000528   C048               RJMP    ??ExtRS485Ctl_37
   \   0000052A   01FC               MOVW    R31:R30, R25:R24
   \   0000052C   8102               LDD     R16, Z+2
   \   0000052E   9130....           LDS     R19, PortPair
   \   00000532   1703               CP      R16, R19
   \   00000534   F009               BREQ    $+2+2
   \   00000536   C041               RJMP    ??ExtRS485Ctl_37
   \   00000538   9140....           LDS     R20, (UART16552 + 60)
   \   0000053C   9150....           LDS     R21, (UART16552 + 61)
   \   00000540   018A               MOVW    R17:R16, R21:R20
   \   00000542   5F0F               SUBI    R16, 255
   \   00000544   4F1F               SBCI    R17, 255
   \   00000546   9300....           STS     (UART16552 + 60), R16
   \   0000054A   9310....           STS     (UART16552 + 61), R17
   \   0000054E   01FA               MOVW    R31:R30, R21:R20
   \   00000550   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000552   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000554   E108               LDI     R16, 24
   \   00000556   8300               ST      Z, R16
   \   00000558   9140....           LDS     R20, (UART16552 + 60)
   \   0000055C   9150....           LDS     R21, (UART16552 + 61)
   \   00000560   018A               MOVW    R17:R16, R21:R20
   \   00000562   5F0F               SUBI    R16, 255
   \   00000564   4F1F               SBCI    R17, 255
   \   00000566   9300....           STS     (UART16552 + 60), R16
   \   0000056A   9310....           STS     (UART16552 + 61), R17
   \   0000056E   01FA               MOVW    R31:R30, R21:R20
   \   00000570   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000572   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000574   8320               ST      Z, R18
   \   00000576   9140....           LDS     R20, (UART16552 + 60)
   \   0000057A   9150....           LDS     R21, (UART16552 + 61)
   \   0000057E   018A               MOVW    R17:R16, R21:R20
   \   00000580   5F0F               SUBI    R16, 255
   \   00000582   4F1F               SBCI    R17, 255
   \   00000584   9300....           STS     (UART16552 + 60), R16
   \   00000588   9310....           STS     (UART16552 + 61), R17
   \   0000058C   01FC               MOVW    R31:R30, R25:R24
   \   0000058E   8100               LD      R16, Z
   \   00000590   01FA               MOVW    R31:R30, R21:R20
   \   00000592   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000594   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000596   8300               ST      Z, R16
   \   00000598   01FC               MOVW    R31:R30, R25:R24
   \   0000059A   8100               LD      R16, Z
   \   0000059C   5F0E               SUBI    R16, 254
   \   0000059E   8300               ST      Z, R16
   \   000005A0   300F               CPI     R16, 15
   \   000005A2   F1D8               BRCS    ??ExtRS485Ctl_19
   \   000005A4   8260               ST      Z, R6
   \   000005A6   9100....           LDS     R16, (TData + 1530)
   \   000005AA   9503               INC     R16
   \   000005AC   9300....           STS     (TData + 1530), R16
   \   000005B0   3004               CPI     R16, 4
   \   000005B2   F198               BRCS    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_24:
   \   000005B4   01FC               MOVW    R31:R30, R25:R24
   \   000005B6   8262               STD     Z+2, R6
   \   000005B8   C030               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_37:
   \   000005BA   2311               TST     R17
   \   000005BC   F171               BREQ    ??ExtRS485Ctl_19
   \   000005BE   9140....           LDS     R20, (UART16552 + 60)
   \   000005C2   9150....           LDS     R21, (UART16552 + 61)
   \   000005C6   018A               MOVW    R17:R16, R21:R20
   \   000005C8   5F0F               SUBI    R16, 255
   \   000005CA   4F1F               SBCI    R17, 255
   \   000005CC   9300....           STS     (UART16552 + 60), R16
   \   000005D0   9310....           STS     (UART16552 + 61), R17
   \   000005D4   01FA               MOVW    R31:R30, R21:R20
   \   000005D6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000005D8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000005DA   E00A               LDI     R16, 10
   \                     ??ExtRS485Ctl_25:
   \   000005DC   8300               ST      Z, R16
   \   000005DE   9140....           LDS     R20, (UART16552 + 60)
   \   000005E2   9150....           LDS     R21, (UART16552 + 61)
   \   000005E6   018A               MOVW    R17:R16, R21:R20
   \   000005E8   5F0F               SUBI    R16, 255
   \   000005EA   4F1F               SBCI    R17, 255
   \   000005EC   9300....           STS     (UART16552 + 60), R16
   \   000005F0   9310....           STS     (UART16552 + 61), R17
   \   000005F4   01FA               MOVW    R31:R30, R21:R20
   \   000005F6   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000005F8   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000005FA   8320               ST      Z, R18
   \                     ??ExtRS485Ctl_35:
   \   000005FC   9140....           LDS     R20, (UART16552 + 60)
   \   00000600   9150....           LDS     R21, (UART16552 + 61)
   \   00000604   018A               MOVW    R17:R16, R21:R20
   \   00000606   5F0F               SUBI    R16, 255
   \   00000608   4F1F               SBCI    R17, 255
   \   0000060A   9300....           STS     (UART16552 + 60), R16
   \   0000060E   9310....           STS     (UART16552 + 61), R17
   \   00000612   01FA               MOVW    R31:R30, R21:R20
   \   00000614   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000616   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000618   8260               ST      Z, R6
   \                     ??ExtRS485Ctl_19:
   \   0000061A   01F5               MOVW    R31:R30, R11:R10
   \   0000061C   8260               ST      Z, R6
   \   0000061E   8261               STD     Z+1, R6
   \   00000620   8262               STD     Z+2, R6
   \   00000622   8263               STD     Z+3, R6
   \   00000624   9260....           STS     (UART16552 + 62), R6
   \   00000628   9260....           STS     (UART16552 + 63), R6
   \   0000062C   E002               LDI     R16, 2
   \   0000062E   9300....           STS     UART16552, R16
   \   00000632   9300....           STS     (UART16552 + 1), R16
   \   00000636   9260....           STS     (UART16552 + 2), R6
   \   0000063A   EF0D               LDI     R16, 253
   \   0000063C   9300....           STS     (UART16552 + 3), R16
   \   00000640   9260....           STS     (UART16552 + 4), R6
   \   00000644   9260....           STS     (UART16552 + 5), R6
   \   00000648   9140....           LDS     R20, (UART16552 + 60)
   \   0000064C   9150....           LDS     R21, (UART16552 + 61)
   \   00000650   018A               MOVW    R17:R16, R21:R20
   \   00000652   5F0F               SUBI    R16, 255
   \   00000654   4F1F               SBCI    R17, 255
   \   00000656   9300....           STS     (UART16552 + 60), R16
   \   0000065A   9310....           STS     (UART16552 + 61), R17
   \   0000065E   01FA               MOVW    R31:R30, R21:R20
   \   00000660   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000662   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000664   8320               ST      Z, R18
   \   00000666   9120....           LDS     R18, (UART16552 + 60)
   \   0000066A   9130....           LDS     R19, (UART16552 + 61)
   \   0000066E   0189               MOVW    R17:R16, R19:R18
   \   00000670   5F0F               SUBI    R16, 255
   \   00000672   4F1F               SBCI    R17, 255
   \   00000674   9300....           STS     (UART16552 + 60), R16
   \   00000678   9310....           STS     (UART16552 + 61), R17
   \   0000067C   01F9               MOVW    R31:R30, R19:R18
   \   0000067E   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000680   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000682   8260               ST      Z, R6
   \   00000684   9100....           LDS     R16, (UART16552 + 60)
   \   00000688   9110....           LDS     R17, (UART16552 + 61)
   \   0000068C   9310....           STS     (UART16552 + 4), R17
   \   00000690   9100....           LDS     R16, (UART16552 + 60)
   \   00000694   9110....           LDS     R17, (UART16552 + 61)
   \   00000698   9300....           STS     (UART16552 + 5), R16
   \   0000069C   9140....           LDS     R20, (UART16552 + 60)
   \   000006A0   9150....           LDS     R21, (UART16552 + 61)
   \   000006A4   9120....           LDS     R18, (UART16552 + 60)
   \   000006A8   9130....           LDS     R19, (UART16552 + 61)
   \   000006AC   2400               CLR     R0
   \   000006AE   3023               CPI     R18, 3
   \   000006B0   0536               CPC     R19, R6
   \   000006B2   F0A0               BRCS    ??ExtRS485Ctl_38
   \   000006B4   ....               LDI     R22, LOW((UART16552 + 2))
   \   000006B6   ....               LDI     R23, HIGH((UART16552 + 2))
   \   000006B8   5022               SUBI    R18, 2
   \   000006BA   4030               SBCI    R19, 0
   \   000006BC   0189               MOVW    R17:R16, R19:R18
   \   000006BE   ....               LDI     R19, (crc) >> 16
   \                     ??ExtRS485Ctl_39:
   \   000006C0   2D20               MOV     R18, R0
   \   000006C2   01FB               MOVW    R31:R30, R23:R22
   \   000006C4   9001               LD      R0, Z+
   \   000006C6   01BF               MOVW    R23:R22, R31:R30
   \   000006C8   2520               EOR     R18, R0
   \   000006CA   2FE2               MOV     R30, R18
   \   000006CC   E0F0               LDI     R31, 0
   \   000006CE   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   000006D0   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   000006D2   BF3B               OUT     0x3B, R19
   \   000006D4   9006               ELPM    R0, Z
   \   000006D6   5001               SUBI    R16, 1
   \   000006D8   4010               SBCI    R17, 0
   \   000006DA   F791               BRNE    ??ExtRS485Ctl_39
   \                     ??ExtRS485Ctl_38:
   \   000006DC   01FA               MOVW    R31:R30, R21:R20
   \   000006DE   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   000006E0   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   000006E2   8200               ST      Z, R0
   \   000006E4   9100....           LDS     R16, (UART16552 + 60)
   \   000006E8   9110....           LDS     R17, (UART16552 + 61)
   \   000006EC   5F0F               SUBI    R16, 255
   \   000006EE   4F1F               SBCI    R17, 255
   \   000006F0   9300....           STS     (UART16552 + 60), R16
   \   000006F4   9310....           STS     (UART16552 + 61), R17
   \   000006F8   9120....           LDS     R18, (UART16552 + 60)
   \   000006FC   9130....           LDS     R19, (UART16552 + 61)
   \   00000700   0189               MOVW    R17:R16, R19:R18
   \   00000702   5F0F               SUBI    R16, 255
   \   00000704   4F1F               SBCI    R17, 255
   \   00000706   9300....           STS     (UART16552 + 60), R16
   \   0000070A   9310....           STS     (UART16552 + 61), R17
   \   0000070E   01F9               MOVW    R31:R30, R19:R18
   \   00000710   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000712   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000714   E003               LDI     R16, 3
   \   00000716   8300               ST      Z, R16
   \   00000718   9120....           LDS     R18, (UART16552 + 60)
   \   0000071C   9130....           LDS     R19, (UART16552 + 61)
   \   00000720   0189               MOVW    R17:R16, R19:R18
   \   00000722   5F0F               SUBI    R16, 255
   \   00000724   4F1F               SBCI    R17, 255
   \   00000726   9300....           STS     (UART16552 + 60), R16
   \   0000072A   9310....           STS     (UART16552 + 61), R17
   \   0000072E   01F9               MOVW    R31:R30, R19:R18
   \   00000730   ....               SUBI    R30, LOW((-(UART16552) & 0xFFFF))
   \   00000732   ....               SBCI    R31, (-(UART16552) & 0xFFFF) >> 8
   \   00000734   8260               ST      Z, R6
   \   00000736   9100....           LDS     R16, (UART16552 + 60)
   \   0000073A   9110....           LDS     R17, (UART16552 + 61)
   \   0000073E   5001               SUBI    R16, 1
   \   00000740   4010               SBCI    R17, 0
   \   00000742   9300....           STS     (UART16552 + 64), R16
   \   00000746   9310....           STS     (UART16552 + 65), R17
   \   0000074A   E001               LDI     R16, 1
   \   0000074C   9300....           STS     (UART16552 + 62), R16
   \   00000750   9260....           STS     (UART16552 + 63), R6
   \   00000754   01F5               MOVW    R31:R30, R11:R10
   \   00000756   8267               STD     Z+7, R6
   \   00000758   E003               LDI     R16, 3
   \   0000075A   8306               STD     Z+6, R16
   \   0000075C   8260               ST      Z, R6
   \   0000075E   8261               STD     Z+1, R6
   \   00000760   8662               STD     Z+10, R6
   \   00000762   8663               STD     Z+11, R6
   \   00000764   9100220C           LDS     R16, 8716
   \   00000768   6002               ORI     R16, 0x02
   \   0000076A   9300220C           STS     8716, R16
   \   0000076E   E104               LDI     R16, 20
   \   00000770   E010               LDI     R17, 0
   \   00000772   ........           CALL    OS_Delay
   \   00000776   9100....           LDS     R16, UART16552
   \   0000077A   93002208           STS     8712, R16
   \   0000077E   C00C               RJMP    ??ExtRS485Ctl_40
   \                     ??ExtRS485Ctl_15:
   \   00000780   01FC               MOVW    R31:R30, R25:R24
   \   00000782   8102               LDD     R16, Z+2
   \   00000784   9110....           LDS     R17, PortPair
   \   00000788   1701               CP      R16, R17
   \   0000078A   F431               BRNE    ??ExtRS485Ctl_40
   \   0000078C   9503               INC     R16
   \   0000078E   9300....           STS     (TData + 1530), R16
   \   00000792   3004               CPI     R16, 4
   \   00000794   F008               BRCS    ??ExtRS485Ctl_40
   \   00000796   8262               STD     Z+2, R6
   \                     ??ExtRS485Ctl_40:
   \   00000798   9100....           LDS     R16, TData
   \   0000079C   E010               LDI     R17, 0
   \   0000079E   9140....           LDS     R20, PortPair
   \   000007A2   5F4C               SUBI    R20, 252
   \   000007A4   ........           CALL    ?SS_SHR_L02
   \   000007A8   7001               ANDI    R16, 0x01
   \   000007AA   F409               BRNE    $+2+2
   \   000007AC   CD03               RJMP    ??ExtRS485Ctl_5
   \   000007AE   01FD               MOVW    R31:R30, R27:R26
   \   000007B0   E006               LDI     R16, 6
   \   000007B2   AF04               STD     Z+60, R16
   \   000007B4   AE65               STD     Z+61, R6
   \   000007B6   9100....           LDS     R16, (TData + 2)
   \   000007BA   E010               LDI     R17, 0
   \   000007BC   9140....           LDS     R20, PortPair
   \   000007C0   0F44               LSL     R20
   \   000007C2   ........           CALL    ?SS_SHR_L02
   \   000007C6   7003               ANDI    R16, 0x03
   \   000007C8   F409               BRNE    $+2+2
   \   000007CA   C09A               RJMP    ??ExtRS485Ctl_41
   \   000007CC   950A               DEC     R16
   \   000007CE   F021               BREQ    ??ExtRS485Ctl_42
   \   000007D0   950A               DEC     R16
   \   000007D2   F409               BRNE    $+2+2
   \   000007D4   C05A               RJMP    ??ExtRS485Ctl_43
   \   000007D6   C190               RJMP    ??ExtRS485Ctl_44
   \                     ??ExtRS485Ctl_42:
   \   000007D8   2D05               MOV     R16, R5
   \   000007DA   2055               TST     R5
   \   000007DC   F019               BREQ    ??ExtRS485Ctl_45
   \   000007DE   5104               SUBI    R16, 20
   \   000007E0   F069               BREQ    ??ExtRS485Ctl_46
   \   000007E2   C046               RJMP    ??ExtRS485Ctl_47
   \                     ??ExtRS485Ctl_45:
   \   000007E4   AD24               LDD     R18, Z+60
   \   000007E6   AD35               LDD     R19, Z+61
   \   000007E8   01A9               MOVW    R21:R20, R19:R18
   \   000007EA   5F4F               SUBI    R20, 255
   \   000007EC   4F5F               SBCI    R21, 255
   \   000007EE   AF44               STD     Z+60, R20
   \   000007F0   AF55               STD     Z+61, R21
   \   000007F2   01F9               MOVW    R31:R30, R19:R18
   \   000007F4   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   000007F6   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   000007F8   E604               LDI     R16, 100
   \   000007FA   C0FC               RJMP    ??ExtRS485Ctl_48
   \                     ??ExtRS485Ctl_46:
   \   000007FC   01F6               MOVW    R31:R30, R13:R12
   \   000007FE   A902               LDD     R16, Z+50
   \   00000800   2300               TST     R16
   \   00000802   F5B1               BRNE    ??ExtRS485Ctl_47
   \   00000804   01FC               MOVW    R31:R30, R25:R24
   \   00000806   8103               LDD     R16, Z+3
   \   00000808   9110....           LDS     R17, PortPair
   \   0000080C   1701               CP      R16, R17
   \   0000080E   F581               BRNE    ??ExtRS485Ctl_47
   \   00000810   01FD               MOVW    R31:R30, R27:R26
   \   00000812   AD24               LDD     R18, Z+60
   \   00000814   AD35               LDD     R19, Z+61
   \   00000816   01A9               MOVW    R21:R20, R19:R18
   \   00000818   5F4F               SUBI    R20, 255
   \   0000081A   4F5F               SBCI    R21, 255
   \   0000081C   AF44               STD     Z+60, R20
   \   0000081E   AF55               STD     Z+61, R21
   \   00000820   01F9               MOVW    R31:R30, R19:R18
   \   00000822   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000824   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000826   E606               LDI     R16, 102
   \   00000828   8300               ST      Z, R16
   \   0000082A   01FD               MOVW    R31:R30, R27:R26
   \   0000082C   AD24               LDD     R18, Z+60
   \   0000082E   AD35               LDD     R19, Z+61
   \   00000830   01A9               MOVW    R21:R20, R19:R18
   \   00000832   5F4F               SUBI    R20, 255
   \   00000834   4F5F               SBCI    R21, 255
   \   00000836   AF44               STD     Z+60, R20
   \   00000838   AF55               STD     Z+61, R21
   \   0000083A   01F9               MOVW    R31:R30, R19:R18
   \   0000083C   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   0000083E   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000840   E001               LDI     R16, 1
   \   00000842   8300               ST      Z, R16
   \   00000844   01FD               MOVW    R31:R30, R27:R26
   \   00000846   AD24               LDD     R18, Z+60
   \   00000848   AD35               LDD     R19, Z+61
   \   0000084A   01A9               MOVW    R21:R20, R19:R18
   \   0000084C   5F4F               SUBI    R20, 255
   \   0000084E   4F5F               SBCI    R21, 255
   \   00000850   AF44               STD     Z+60, R20
   \   00000852   AF55               STD     Z+61, R21
   \   00000854   01F9               MOVW    R31:R30, R19:R18
   \   00000856   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000858   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   0000085A   E703               LDI     R16, 115
   \   0000085C   8300               ST      Z, R16
   \   0000085E   9100....           LDS     R16, (TData + 1531)
   \   00000862   9503               INC     R16
   \   00000864   9300....           STS     (TData + 1531), R16
   \   00000868   3004               CPI     R16, 4
   \   0000086A   F408               BRCC    $+2+2
   \   0000086C   C145               RJMP    ??ExtRS485Ctl_44
   \   0000086E   C11A               RJMP    ??ExtRS485Ctl_49
   \                     ??ExtRS485Ctl_47:
   \   00000870   01FD               MOVW    R31:R30, R27:R26
   \   00000872   AD24               LDD     R18, Z+60
   \   00000874   AD35               LDD     R19, Z+61
   \   00000876   01A9               MOVW    R21:R20, R19:R18
   \   00000878   5F4F               SUBI    R20, 255
   \   0000087A   4F5F               SBCI    R21, 255
   \   0000087C   AF44               STD     Z+60, R20
   \   0000087E   AF55               STD     Z+61, R21
   \   00000880   01F9               MOVW    R31:R30, R19:R18
   \   00000882   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000884   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000886   E605               LDI     R16, 101
   \   00000888   C021               RJMP    ??ExtRS485Ctl_50
   \                     ??ExtRS485Ctl_43:
   \   0000088A   2D05               MOV     R16, R5
   \   0000088C   2055               TST     R5
   \   0000088E   F161               BREQ    ??ExtRS485Ctl_51
   \   00000890   5104               SUBI    R16, 20
   \   00000892   F481               BRNE    ??ExtRS485Ctl_52
   \   00000894   01F6               MOVW    R31:R30, R13:R12
   \   00000896   A902               LDD     R16, Z+50
   \   00000898   2300               TST     R16
   \   0000089A   F461               BRNE    ??ExtRS485Ctl_52
   \   0000089C   01FC               MOVW    R31:R30, R25:R24
   \   0000089E   8103               LDD     R16, Z+3
   \   000008A0   9110....           LDS     R17, PortPair
   \   000008A4   1701               CP      R16, R17
   \   000008A6   F431               BRNE    ??ExtRS485Ctl_52
   \   000008A8   9503               INC     R16
   \   000008AA   9300....           STS     (TData + 1531), R16
   \   000008AE   3004               CPI     R16, 4
   \   000008B0   F008               BRCS    ??ExtRS485Ctl_52
   \   000008B2   8263               STD     Z+3, R6
   \                     ??ExtRS485Ctl_52:
   \   000008B4   01FD               MOVW    R31:R30, R27:R26
   \   000008B6   AD24               LDD     R18, Z+60
   \   000008B8   AD35               LDD     R19, Z+61
   \   000008BA   01A9               MOVW    R21:R20, R19:R18
   \   000008BC   5F4F               SUBI    R20, 255
   \   000008BE   4F5F               SBCI    R21, 255
   \   000008C0   AF44               STD     Z+60, R20
   \   000008C2   AF55               STD     Z+61, R21
   \   000008C4   01F9               MOVW    R31:R30, R19:R18
   \   000008C6   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   000008C8   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   000008CA   EA00               LDI     R16, 160
   \                     ??ExtRS485Ctl_50:
   \   000008CC   8300               ST      Z, R16
   \   000008CE   01FD               MOVW    R31:R30, R27:R26
   \   000008D0   AD24               LDD     R18, Z+60
   \   000008D2   AD35               LDD     R19, Z+61
   \   000008D4   01A9               MOVW    R21:R20, R19:R18
   \   000008D6   5F4F               SUBI    R20, 255
   \   000008D8   4F5F               SBCI    R21, 255
   \   000008DA   AF44               STD     Z+60, R20
   \   000008DC   AF55               STD     Z+61, R21
   \   000008DE   01F9               MOVW    R31:R30, R19:R18
   \   000008E0   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   000008E2   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   000008E4   E001               LDI     R16, 1
   \   000008E6   C086               RJMP    ??ExtRS485Ctl_48
   \                     ??ExtRS485Ctl_51:
   \   000008E8   AD24               LDD     R18, Z+60
   \   000008EA   AD35               LDD     R19, Z+61
   \   000008EC   01A9               MOVW    R21:R20, R19:R18
   \   000008EE   5F4F               SUBI    R20, 255
   \   000008F0   4F5F               SBCI    R21, 255
   \   000008F2   AF44               STD     Z+60, R20
   \   000008F4   AF55               STD     Z+61, R21
   \   000008F6   01F9               MOVW    R31:R30, R19:R18
   \   000008F8   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   000008FA   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   000008FC   EA01               LDI     R16, 161
   \   000008FE   C07A               RJMP    ??ExtRS485Ctl_48
   \                     ??ExtRS485Ctl_41:
   \   00000900   E021               LDI     R18, 1
   \   00000902   9100....           LDS     R16, (TData + 1348)
   \   00000906   3001               CPI     R16, 1
   \   00000908   F009               BREQ    $+2+2
   \   0000090A   C045               RJMP    ??ExtRS485Ctl_53
   \   0000090C   9140....           LDS     R20, (TData + 1349)
   \   00000910   9100....           LDS     R16, PortPair
   \   00000914   E010               LDI     R17, 0
   \   00000916   5F0C               SUBI    R16, 252
   \   00000918   4F1F               SBCI    R17, 255
   \   0000091A   1740               CP      R20, R16
   \   0000091C   0661               CPC     R6, R17
   \   0000091E   F5D9               BRNE    ??ExtRS485Ctl_53
   \   00000920   E063               LDI     R22, 3
   \   00000922   9100....           LDS     R16, (TData + 1350)
   \   00000926   E010               LDI     R17, 0
   \   00000928   5F0D               SUBI    R16, 253
   \   0000092A   4F1F               SBCI    R17, 255
   \   0000092C   3004               CPI     R16, 4
   \   0000092E   0516               CPC     R17, R6
   \   00000930   F0AC               BRLT    ??ExtRS485Ctl_54
   \                     ??ExtRS485Ctl_55:
   \   00000932   01FD               MOVW    R31:R30, R27:R26
   \   00000934   AC04               LDD     R0, Z+60
   \   00000936   AC15               LDD     R1, Z+61
   \   00000938   0110               MOVW    R3:R2, R1:R0
   \   0000093A   0E22               ADD     R2, R18
   \   0000093C   1C36               ADC     R3, R6
   \   0000093E   AE24               STD     Z+60, R2
   \   00000940   AE35               STD     Z+61, R3
   \   00000942   2FE6               MOV     R30, R22
   \   00000944   E0F0               LDI     R31, 0
   \   00000946   ....               SUBI    R30, LOW((-(TData + 1348) & 0xFFFF))
   \   00000948   ....               SBCI    R31, HIGH((-(TData + 1348) & 0xFFFF))
   \   0000094A   8130               LD      R19, Z
   \   0000094C   01F0               MOVW    R31:R30, R1:R0
   \   0000094E   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000950   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000952   8330               ST      Z, R19
   \   00000954   9563               INC     R22
   \   00000956   1760               CP      R22, R16
   \   00000958   0661               CPC     R6, R17
   \   0000095A   F35C               BRLT    ??ExtRS485Ctl_55
   \                     ??ExtRS485Ctl_54:
   \   0000095C   9260....           STS     (TData + 1348), R6
   \   00000960   01FD               MOVW    R31:R30, R27:R26
   \   00000962   AD44               LDD     R20, Z+60
   \   00000964   AD55               LDD     R21, Z+61
   \   00000966   01BA               MOVW    R23:R22, R21:R20
   \   00000968   5F6F               SUBI    R22, 255
   \   0000096A   4F7F               SBCI    R23, 255
   \   0000096C   AF64               STD     Z+60, R22
   \   0000096E   AF75               STD     Z+61, R23
   \   00000970   01FA               MOVW    R31:R30, R21:R20
   \   00000972   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000974   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000976   E101               LDI     R16, 17
   \   00000978   8300               ST      Z, R16
   \   0000097A   01FD               MOVW    R31:R30, R27:R26
   \   0000097C   AD44               LDD     R20, Z+60
   \   0000097E   AD55               LDD     R21, Z+61
   \   00000980   01BA               MOVW    R23:R22, R21:R20
   \   00000982   5F6F               SUBI    R22, 255
   \   00000984   4F7F               SBCI    R23, 255
   \   00000986   AF64               STD     Z+60, R22
   \   00000988   AF75               STD     Z+61, R23
   \   0000098A   01FA               MOVW    R31:R30, R21:R20
   \   0000098C   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   0000098E   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000990   8260               ST      Z, R6
   \   00000992   E010               LDI     R17, 0
   \   00000994   C001               RJMP    ??ExtRS485Ctl_56
   \                     ??ExtRS485Ctl_53:
   \   00000996   E011               LDI     R17, 1
   \                     ??ExtRS485Ctl_56:
   \   00000998   2055               TST     R5
   \   0000099A   F469               BRNE    ??ExtRS485Ctl_57
   \   0000099C   01FD               MOVW    R31:R30, R27:R26
   \   0000099E   AD44               LDD     R20, Z+60
   \   000009A0   AD55               LDD     R21, Z+61
   \   000009A2   01BA               MOVW    R23:R22, R21:R20
   \   000009A4   5F6F               SUBI    R22, 255
   \   000009A6   4F7F               SBCI    R23, 255
   \   000009A8   AF64               STD     Z+60, R22
   \   000009AA   AF75               STD     Z+61, R23
   \   000009AC   01FA               MOVW    R31:R30, R21:R20
   \   000009AE   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   000009B0   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   000009B2   E10B               LDI     R16, 27
   \   000009B4   C088               RJMP    ??ExtRS485Ctl_58
   \                     ??ExtRS485Ctl_57:
   \   000009B6   E005               LDI     R16, 5
   \   000009B8   1650               CP      R5, R16
   \   000009BA   F469               BRNE    ??ExtRS485Ctl_59
   \   000009BC   01FD               MOVW    R31:R30, R27:R26
   \   000009BE   AD44               LDD     R20, Z+60
   \   000009C0   AD55               LDD     R21, Z+61
   \   000009C2   01BA               MOVW    R23:R22, R21:R20
   \   000009C4   5F6F               SUBI    R22, 255
   \   000009C6   4F7F               SBCI    R23, 255
   \   000009C8   AF64               STD     Z+60, R22
   \   000009CA   AF75               STD     Z+61, R23
   \   000009CC   01FA               MOVW    R31:R30, R21:R20
   \   000009CE   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   000009D0   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   000009D2   E00D               LDI     R16, 13
   \   000009D4   C078               RJMP    ??ExtRS485Ctl_58
   \                     ??ExtRS485Ctl_59:
   \   000009D6   E00A               LDI     R16, 10
   \   000009D8   1650               CP      R5, R16
   \   000009DA   F471               BRNE    ??ExtRS485Ctl_60
   \   000009DC   01FD               MOVW    R31:R30, R27:R26
   \   000009DE   AD24               LDD     R18, Z+60
   \   000009E0   AD35               LDD     R19, Z+61
   \   000009E2   01A9               MOVW    R21:R20, R19:R18
   \   000009E4   5F4F               SUBI    R20, 255
   \   000009E6   4F5F               SBCI    R21, 255
   \   000009E8   AF44               STD     Z+60, R20
   \   000009EA   AF55               STD     Z+61, R21
   \   000009EC   01F9               MOVW    R31:R30, R19:R18
   \   000009EE   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   000009F0   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   000009F2   E101               LDI     R16, 17
   \                     ??ExtRS485Ctl_48:
   \   000009F4   8300               ST      Z, R16
   \   000009F6   C074               RJMP    ??ExtRS485Ctl_61
   \                     ??ExtRS485Ctl_60:
   \   000009F8   E00F               LDI     R16, 15
   \   000009FA   1650               CP      R5, R16
   \   000009FC   F469               BRNE    ??ExtRS485Ctl_62
   \   000009FE   01FD               MOVW    R31:R30, R27:R26
   \   00000A00   AD44               LDD     R20, Z+60
   \   00000A02   AD55               LDD     R21, Z+61
   \   00000A04   01BA               MOVW    R23:R22, R21:R20
   \   00000A06   5F6F               SUBI    R22, 255
   \   00000A08   4F7F               SBCI    R23, 255
   \   00000A0A   AF64               STD     Z+60, R22
   \   00000A0C   AF75               STD     Z+61, R23
   \   00000A0E   01FA               MOVW    R31:R30, R21:R20
   \   00000A10   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000A12   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000A14   E100               LDI     R16, 16
   \   00000A16   C057               RJMP    ??ExtRS485Ctl_58
   \                     ??ExtRS485Ctl_62:
   \   00000A18   E104               LDI     R16, 20
   \   00000A1A   1650               CP      R5, R16
   \   00000A1C   F009               BREQ    $+2+2
   \   00000A1E   C045               RJMP    ??ExtRS485Ctl_63
   \   00000A20   01F6               MOVW    R31:R30, R13:R12
   \   00000A22   A902               LDD     R16, Z+50
   \   00000A24   2300               TST     R16
   \   00000A26   F009               BREQ    $+2+2
   \   00000A28   C040               RJMP    ??ExtRS485Ctl_63
   \   00000A2A   01FC               MOVW    R31:R30, R25:R24
   \   00000A2C   8103               LDD     R16, Z+3
   \   00000A2E   9130....           LDS     R19, PortPair
   \   00000A32   1703               CP      R16, R19
   \   00000A34   F5D1               BRNE    ??ExtRS485Ctl_63
   \   00000A36   01FD               MOVW    R31:R30, R27:R26
   \   00000A38   AD44               LDD     R20, Z+60
   \   00000A3A   AD55               LDD     R21, Z+61
   \   00000A3C   01BA               MOVW    R23:R22, R21:R20
   \   00000A3E   5F6F               SUBI    R22, 255
   \   00000A40   4F7F               SBCI    R23, 255
   \   00000A42   AF64               STD     Z+60, R22
   \   00000A44   AF75               STD     Z+61, R23
   \   00000A46   01FA               MOVW    R31:R30, R21:R20
   \   00000A48   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000A4A   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000A4C   E108               LDI     R16, 24
   \   00000A4E   8300               ST      Z, R16
   \   00000A50   01FD               MOVW    R31:R30, R27:R26
   \   00000A52   AD44               LDD     R20, Z+60
   \   00000A54   AD55               LDD     R21, Z+61
   \   00000A56   01BA               MOVW    R23:R22, R21:R20
   \   00000A58   5F6F               SUBI    R22, 255
   \   00000A5A   4F7F               SBCI    R23, 255
   \   00000A5C   AF64               STD     Z+60, R22
   \   00000A5E   AF75               STD     Z+61, R23
   \   00000A60   01FA               MOVW    R31:R30, R21:R20
   \   00000A62   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000A64   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000A66   8320               ST      Z, R18
   \   00000A68   01FD               MOVW    R31:R30, R27:R26
   \   00000A6A   AD24               LDD     R18, Z+60
   \   00000A6C   AD35               LDD     R19, Z+61
   \   00000A6E   01A9               MOVW    R21:R20, R19:R18
   \   00000A70   5F4F               SUBI    R20, 255
   \   00000A72   4F5F               SBCI    R21, 255
   \   00000A74   AF44               STD     Z+60, R20
   \   00000A76   AF55               STD     Z+61, R21
   \   00000A78   01FC               MOVW    R31:R30, R25:R24
   \   00000A7A   8101               LDD     R16, Z+1
   \   00000A7C   01F9               MOVW    R31:R30, R19:R18
   \   00000A7E   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000A80   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000A82   8300               ST      Z, R16
   \   00000A84   9100....           LDS     R16, (TData + 1529)
   \   00000A88   5F0E               SUBI    R16, 254
   \   00000A8A   9300....           STS     (TData + 1529), R16
   \   00000A8E   300F               CPI     R16, 15
   \   00000A90   F198               BRCS    ??ExtRS485Ctl_44
   \   00000A92   01FC               MOVW    R31:R30, R25:R24
   \   00000A94   8261               STD     Z+1, R6
   \   00000A96   9100....           LDS     R16, (TData + 1531)
   \   00000A9A   9503               INC     R16
   \   00000A9C   9300....           STS     (TData + 1531), R16
   \   00000AA0   3004               CPI     R16, 4
   \   00000AA2   F150               BRCS    ??ExtRS485Ctl_44
   \                     ??ExtRS485Ctl_49:
   \   00000AA4   01FC               MOVW    R31:R30, R25:R24
   \   00000AA6   8263               STD     Z+3, R6
   \   00000AA8   C027               RJMP    ??ExtRS485Ctl_44
   \                     ??ExtRS485Ctl_63:
   \   00000AAA   2311               TST     R17
   \   00000AAC   F129               BREQ    ??ExtRS485Ctl_44
   \   00000AAE   01FD               MOVW    R31:R30, R27:R26
   \   00000AB0   AD44               LDD     R20, Z+60
   \   00000AB2   AD55               LDD     R21, Z+61
   \   00000AB4   01BA               MOVW    R23:R22, R21:R20
   \   00000AB6   5F6F               SUBI    R22, 255
   \   00000AB8   4F7F               SBCI    R23, 255
   \   00000ABA   AF64               STD     Z+60, R22
   \   00000ABC   AF75               STD     Z+61, R23
   \   00000ABE   01FA               MOVW    R31:R30, R21:R20
   \   00000AC0   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000AC2   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000AC4   E00A               LDI     R16, 10
   \                     ??ExtRS485Ctl_58:
   \   00000AC6   8300               ST      Z, R16
   \   00000AC8   01FD               MOVW    R31:R30, R27:R26
   \   00000ACA   AD44               LDD     R20, Z+60
   \   00000ACC   AD55               LDD     R21, Z+61
   \   00000ACE   01BA               MOVW    R23:R22, R21:R20
   \   00000AD0   5F6F               SUBI    R22, 255
   \   00000AD2   4F7F               SBCI    R23, 255
   \   00000AD4   AF64               STD     Z+60, R22
   \   00000AD6   AF75               STD     Z+61, R23
   \   00000AD8   01FA               MOVW    R31:R30, R21:R20
   \   00000ADA   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000ADC   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000ADE   8320               ST      Z, R18
   \                     ??ExtRS485Ctl_61:
   \   00000AE0   01FD               MOVW    R31:R30, R27:R26
   \   00000AE2   AD24               LDD     R18, Z+60
   \   00000AE4   AD35               LDD     R19, Z+61
   \   00000AE6   01A9               MOVW    R21:R20, R19:R18
   \   00000AE8   5F4F               SUBI    R20, 255
   \   00000AEA   4F5F               SBCI    R21, 255
   \   00000AEC   AF44               STD     Z+60, R20
   \   00000AEE   AF55               STD     Z+61, R21
   \   00000AF0   01F9               MOVW    R31:R30, R19:R18
   \   00000AF2   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000AF4   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000AF6   8260               ST      Z, R6
   \                     ??ExtRS485Ctl_44:
   \   00000AF8   01F4               MOVW    R31:R30, R9:R8
   \   00000AFA   8260               ST      Z, R6
   \   00000AFC   8261               STD     Z+1, R6
   \   00000AFE   8262               STD     Z+2, R6
   \   00000B00   8263               STD     Z+3, R6
   \   00000B02   9260....           STS     (UART16552 + 326), R6
   \   00000B06   9260....           STS     (UART16552 + 327), R6
   \   00000B0A   E002               LDI     R16, 2
   \   00000B0C   930C               ST      X, R16
   \   00000B0E   01FD               MOVW    R31:R30, R27:R26
   \   00000B10   8301               STD     Z+1, R16
   \   00000B12   8262               STD     Z+2, R6
   \   00000B14   EF0D               LDI     R16, 253
   \   00000B16   8303               STD     Z+3, R16
   \   00000B18   8264               STD     Z+4, R6
   \   00000B1A   8265               STD     Z+5, R6
   \   00000B1C   AD24               LDD     R18, Z+60
   \   00000B1E   AD35               LDD     R19, Z+61
   \   00000B20   01A9               MOVW    R21:R20, R19:R18
   \   00000B22   5F4F               SUBI    R20, 255
   \   00000B24   4F5F               SBCI    R21, 255
   \   00000B26   AF44               STD     Z+60, R20
   \   00000B28   AF55               STD     Z+61, R21
   \   00000B2A   01F9               MOVW    R31:R30, R19:R18
   \   00000B2C   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000B2E   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000B30   E001               LDI     R16, 1
   \   00000B32   8300               ST      Z, R16
   \   00000B34   01FD               MOVW    R31:R30, R27:R26
   \   00000B36   AD24               LDD     R18, Z+60
   \   00000B38   AD35               LDD     R19, Z+61
   \   00000B3A   01A9               MOVW    R21:R20, R19:R18
   \   00000B3C   5F4F               SUBI    R20, 255
   \   00000B3E   4F5F               SBCI    R21, 255
   \   00000B40   AF44               STD     Z+60, R20
   \   00000B42   AF55               STD     Z+61, R21
   \   00000B44   01F9               MOVW    R31:R30, R19:R18
   \   00000B46   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000B48   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000B4A   8260               ST      Z, R6
   \   00000B4C   01FD               MOVW    R31:R30, R27:R26
   \   00000B4E   AD04               LDD     R16, Z+60
   \   00000B50   AD05               LDD     R16, Z+61
   \   00000B52   8304               STD     Z+4, R16
   \   00000B54   AD04               LDD     R16, Z+60
   \   00000B56   AD15               LDD     R17, Z+61
   \   00000B58   8305               STD     Z+5, R16
   \   00000B5A   AD04               LDD     R16, Z+60
   \   00000B5C   AD15               LDD     R17, Z+61
   \   00000B5E   AD64               LDD     R22, Z+60
   \   00000B60   AD75               LDD     R23, Z+61
   \   00000B62   2400               CLR     R0
   \   00000B64   3063               CPI     R22, 3
   \   00000B66   0576               CPC     R23, R6
   \   00000B68   F098               BRCS    ??ExtRS485Ctl_64
   \   00000B6A   ....               LDI     R20, LOW((UART16552 + 266))
   \   00000B6C   ....               LDI     R21, HIGH((UART16552 + 266))
   \   00000B6E   5062               SUBI    R22, 2
   \   00000B70   4070               SBCI    R23, 0
   \   00000B72   ....               LDI     R19, (crc) >> 16
   \                     ??ExtRS485Ctl_65:
   \   00000B74   2D20               MOV     R18, R0
   \   00000B76   01FA               MOVW    R31:R30, R21:R20
   \   00000B78   9001               LD      R0, Z+
   \   00000B7A   01AF               MOVW    R21:R20, R31:R30
   \   00000B7C   2520               EOR     R18, R0
   \   00000B7E   2FE2               MOV     R30, R18
   \   00000B80   E0F0               LDI     R31, 0
   \   00000B82   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000B84   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000B86   BF3B               OUT     0x3B, R19
   \   00000B88   9006               ELPM    R0, Z
   \   00000B8A   5061               SUBI    R22, 1
   \   00000B8C   4070               SBCI    R23, 0
   \   00000B8E   F791               BRNE    ??ExtRS485Ctl_65
   \                     ??ExtRS485Ctl_64:
   \   00000B90   01F8               MOVW    R31:R30, R17:R16
   \   00000B92   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000B94   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000B96   8200               ST      Z, R0
   \   00000B98   9100....           LDS     R16, (UART16552 + 324)
   \   00000B9C   9110....           LDS     R17, (UART16552 + 325)
   \   00000BA0   5F0F               SUBI    R16, 255
   \   00000BA2   4F1F               SBCI    R17, 255
   \   00000BA4   9300....           STS     (UART16552 + 324), R16
   \   00000BA8   9310....           STS     (UART16552 + 325), R17
   \   00000BAC   01FD               MOVW    R31:R30, R27:R26
   \   00000BAE   AD24               LDD     R18, Z+60
   \   00000BB0   AD35               LDD     R19, Z+61
   \   00000BB2   01A9               MOVW    R21:R20, R19:R18
   \   00000BB4   5F4F               SUBI    R20, 255
   \   00000BB6   4F5F               SBCI    R21, 255
   \   00000BB8   AF44               STD     Z+60, R20
   \   00000BBA   AF55               STD     Z+61, R21
   \   00000BBC   01F9               MOVW    R31:R30, R19:R18
   \   00000BBE   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000BC0   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000BC2   E003               LDI     R16, 3
   \   00000BC4   8300               ST      Z, R16
   \   00000BC6   01FD               MOVW    R31:R30, R27:R26
   \   00000BC8   AD24               LDD     R18, Z+60
   \   00000BCA   AD35               LDD     R19, Z+61
   \   00000BCC   01A9               MOVW    R21:R20, R19:R18
   \   00000BCE   5F4F               SUBI    R20, 255
   \   00000BD0   4F5F               SBCI    R21, 255
   \   00000BD2   AF44               STD     Z+60, R20
   \   00000BD4   AF55               STD     Z+61, R21
   \   00000BD6   01F9               MOVW    R31:R30, R19:R18
   \   00000BD8   ....               SUBI    R30, LOW((-(UART16552 + 264) & 0xFFFF))
   \   00000BDA   ....               SBCI    R31, HIGH((-(UART16552 + 264) & 0xFFFF))
   \   00000BDC   8260               ST      Z, R6
   \   00000BDE   01FD               MOVW    R31:R30, R27:R26
   \   00000BE0   AD04               LDD     R16, Z+60
   \   00000BE2   AD15               LDD     R17, Z+61
   \   00000BE4   5001               SUBI    R16, 1
   \   00000BE6   4010               SBCI    R17, 0
   \   00000BE8   9300....           STS     (UART16552 + 328), R16
   \   00000BEC   9310....           STS     (UART16552 + 329), R17
   \   00000BF0   E001               LDI     R16, 1
   \   00000BF2   9300....           STS     (UART16552 + 326), R16
   \   00000BF6   9260....           STS     (UART16552 + 327), R6
   \   00000BFA   01F4               MOVW    R31:R30, R9:R8
   \   00000BFC   8267               STD     Z+7, R6
   \   00000BFE   E003               LDI     R16, 3
   \   00000C00   8306               STD     Z+6, R16
   \   00000C02   8260               ST      Z, R6
   \   00000C04   8261               STD     Z+1, R6
   \   00000C06   8662               STD     Z+10, R6
   \   00000C08   8663               STD     Z+11, R6
   \   00000C0A   91002204           LDS     R16, 8708
   \   00000C0E   6002               ORI     R16, 0x02
   \   00000C10   93002204           STS     8708, R16
   \   00000C14   E104               LDI     R16, 20
   \   00000C16   E010               LDI     R17, 0
   \   00000C18   ........           CALL    OS_Delay
   \   00000C1C   910C               LD      R16, X
   \   00000C1E   93002200           STS     8704, R16
   \   00000C22   CAD4               RJMP    ??ExtRS485Ctl_6
   \   00000C24                      REQUIRE _A_PORTC
   \   00000C24                      REQUIRE _A_PORTE
    291              }
    292          }
    293          
    294          
    295          /*************************************************************************
    296          *   (This is a task)
    297          *  Usart handler UART receive data
    298          *
    299          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    300          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   92AA               ST      -Y, R10
   \   00000002   929A               ST      -Y, R9
   \   00000004   928A               ST      -Y, R8
   \   00000006   927A               ST      -Y, R7
   \   00000008   926A               ST      -Y, R6
   \   0000000A   925A               ST      -Y, R5
   \   0000000C   924A               ST      -Y, R4
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   939A               ST      -Y, R25
   \   00000012   938A               ST      -Y, R24
   \   00000014                      REQUIRE ?Register_R4_is_cg_reg
   \   00000014                      REQUIRE ?Register_R5_is_cg_reg
   \   00000014                      REQUIRE ?Register_R6_is_cg_reg
   \   00000014                      REQUIRE ?Register_R7_is_cg_reg
   \   00000014                      REQUIRE ?Register_R8_is_cg_reg
   \   00000014                      REQUIRE ?Register_R9_is_cg_reg
   \   00000014                      REQUIRE ?Register_R10_is_cg_reg
    301              char portresp;
    302              char temp;
    303          
    304              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \   00000014   E900               LDI     R16, 144
   \   00000016   E11A               LDI     R17, 26
   \   00000018   ........           CALL    OS_Delay
   \   0000001C   ....               LDI     R16, LOW((UART16552 + 458))
   \   0000001E   ....               LDI     R17, HIGH((UART16552 + 458))
   \   00000020   0138               MOVW    R7:R6, R17:R16
   \   00000022   ....               LDI     R16, LOW((UART16552 + 194))
   \   00000024   ....               LDI     R17, HIGH((UART16552 + 194))
   \   00000026   0128               MOVW    R5:R4, R17:R16
   \   00000028   24AA               CLR     R10
   \   0000002A   C05C               RJMP    ??ExtRS485Rec_0
    305          
    306              while (1) {
    307                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
    308                  portresp = OS_WaitEventTimed(3, 1);   // Wait for receive from both channels
    309                  if (portresp & 0x01) {                  // answer on ch 0
    310                      Usart16552CheckPackage(0);            // handle incomming package
    311                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
    312                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
    313                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
    314                  } else {
    315                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
    316                      TData.RS4.FailCnt[PortPair][1]++;                            // no answer total counter
    317                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
    318                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
    319                      }
    320                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
    321                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
    322                              // volatile undefined behavior
    323                              // ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    324                              //
    325                              temp = (0x01 << PortPair);
    326                              ClrBit(PORTC, temp);  // Switch off power
    327                              OS_SignalEvent(2, &TCB_RS485Ctl);
    328                          }
    329                      }
    330                  }
    331                  if (portresp & 0x02) {                  // answer on ch 1
    332                      Usart16552CheckPackage(1);         // handle incomming package
    333                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
    334                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
    335                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
    336                  } else {
    337                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_1:
   \   0000002C   9100....           LDS     R16, (UART16552 + 464)
   \   00000030   9503               INC     R16
   \   00000032   9300....           STS     (UART16552 + 464), R16
    338                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \   00000036   9100....           LDS     R16, PortPair
   \   0000003A   E014               LDI     R17, 4
   \   0000003C   9F01               MUL     R16, R17
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000044   8D05               LDD     R16, Z+29
   \   00000046   8D16               LDD     R17, Z+30
   \   00000048   5F0F               SUBI    R16, 255
   \   0000004A   4F1F               SBCI    R17, 255
   \   0000004C   8F05               STD     Z+29, R16
   \   0000004E   8F16               STD     Z+30, R17
    339                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   00000050   9100....           LDS     R16, PortPair
   \   00000054   E014               LDI     R17, 4
   \   00000056   9F01               MUL     R16, R17
   \   00000058   ....               LDI     R30, LOW(TData)
   \   0000005A   ....               LDI     R31, (TData) >> 8
   \   0000005C   0DE0               ADD     R30, R0
   \   0000005E   1DF1               ADC     R31, R1
   \   00000060   8D83               LDD     R24, Z+27
   \   00000062   8D94               LDD     R25, Z+28
   \   00000064   018C               MOVW    R17:R16, R25:R24
   \   00000066   5F0F               SUBI    R16, 255
   \   00000068   4F1F               SBCI    R17, 255
   \   0000006A   8F03               STD     Z+27, R16
   \   0000006C   8F14               STD     Z+28, R17
   \   0000006E   9706               SBIW    R25:R24, 6
   \   00000070   F048               BRCS    ??ExtRS485Rec_2
    340                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   00000072   9100....           LDS     R16, PortPair
   \   00000076   E0F0               LDI     R31, 0
   \   00000078   2FE0               MOV     R30, R16
   \   0000007A   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000007E   8107               LDD     R16, Z+7
   \   00000080   6001               ORI     R16, 0x01
   \   00000082   8307               STD     Z+7, R16
    341                      }
    342                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_2:
   \   00000084   9100....           LDS     R16, TData
   \   00000088   E010               LDI     R17, 0
   \   0000008A   9140....           LDS     R20, PortPair
   \   0000008E   5F4C               SUBI    R20, 252
   \   00000090   ........           CALL    ?SS_SHR_L02
   \   00000094   7001               ANDI    R16, 0x01
   \   00000096   F109               BREQ    ??ExtRS485Rec_3
    343                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   00000098   9100....           LDS     R16, PortPair
   \   0000009C   E014               LDI     R17, 4
   \   0000009E   9F01               MUL     R16, R17
   \   000000A0   01F0               MOVW    R31:R30, R1:R0
   \   000000A2   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000A6   8D03               LDD     R16, Z+27
   \   000000A8   7007               ANDI    R16, 0x07
   \   000000AA   3004               CPI     R16, 4
   \   000000AC   F4B1               BRNE    ??ExtRS485Rec_3
    344                              // volatile undefined behavior
    345                              //        ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
    346                              //
    347                              temp = (0x01 << (PortPair + 4));
   \   000000AE   9140....           LDS     R20, PortPair
    348                              ClrBit(PORTC, temp);            // Switch off power
   \   000000B2   94F8               cli
   \   000000B4   5F4C               SUBI    R20, 252
   \   000000B6   E001               LDI     R16, 1
   \   000000B8   E010               LDI     R17, 0
   \   000000BA   ........           CALL    ?S_SHL_L02
   \   000000BE   9500               COM     R16
   \   000000C0   B118               IN      R17, 0x08
   \   000000C2   2310               AND     R17, R16
   \   000000C4   B918               OUT     0x08, R17
   \   000000C6   9100....           LDS     R16, (OS_Global + 1)
   \   000000CA   2300               TST     R16
   \   000000CC   F409               BRNE    ??ExtRS485Rec_4
   \   000000CE   9478               sei
    349                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_4:
   \   000000D0   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000D2   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000D4   E002               LDI     R16, 2
   \   000000D6   ........           CALL    OS_SignalEvent
    350                          }
    351                      }
    352                  }
    353                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_3:
   \   000000DA   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   000000DC   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   000000DE   E001               LDI     R16, 1
   \   000000E0   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_0:
   \   000000E4   EF03               LDI     R16, 243
   \   000000E6   E011               LDI     R17, 1
   \   000000E8   ........           CALL    OS_Delay
   \   000000EC   E021               LDI     R18, 1
   \   000000EE   E030               LDI     R19, 0
   \   000000F0   E003               LDI     R16, 3
   \   000000F2   ........           CALL    OS_WaitEventTimed
   \   000000F6   2FA0               MOV     R26, R16
   \   000000F8   FB00               BST     R16, 0
   \   000000FA   F5C6               BRTC    ??ExtRS485Rec_5
   \   000000FC   E084               LDI     R24, 4
   \   000000FE   E090               LDI     R25, 0
   \   00000100   2488               CLR     R8
   \   00000102   948A               DEC     R8
   \   00000104   2499               CLR     R9
   \   00000106   9493               INC     R9
   \                     ??ExtRS485Rec_6:
   \   00000108   019C               MOVW    R19:R18, R25:R24
   \   0000010A   E000               LDI     R16, 0
   \   0000010C   ....               RCALL   CheckActionUart16552
   \   0000010E   2300               TST     R16
   \   00000110   F409               BRNE    ??ExtRS485Rec_7
   \   00000112   2499               CLR     R9
   \                     ??ExtRS485Rec_7:
   \   00000114   01FC               MOVW    R31:R30, R25:R24
   \   00000116   ....               SUBI    R30, LOW((-(UART16552 + 69) & 0xFFFF))
   \   00000118   ....               SBCI    R31, HIGH((-(UART16552 + 69) & 0xFFFF))
   \   0000011A   8100               LD      R16, Z
   \   0000011C   E010               LDI     R17, 0
   \   0000011E   5F0E               SUBI    R16, 254
   \   00000120   4F1F               SBCI    R17, 255
   \   00000122   0F80               ADD     R24, R16
   \   00000124   1F91               ADC     R25, R17
   \   00000126   948A               DEC     R8
   \   00000128   F051               BREQ    ??ExtRS485Rec_8
   \   0000012A   2099               TST     R9
   \   0000012C   F041               BREQ    ??ExtRS485Rec_8
   \   0000012E   01F2               MOVW    R31:R30, R5:R4
   \   00000130   8104               LDD     R16, Z+4
   \   00000132   8115               LDD     R17, Z+5
   \   00000134   5003               SUBI    R16, 3
   \   00000136   4010               SBCI    R17, 0
   \   00000138   1780               CP      R24, R16
   \   0000013A   0791               CPC     R25, R17
   \   0000013C   F328               BRCS    ??ExtRS485Rec_6
   \                     ??ExtRS485Rec_8:
   \   0000013E   01F2               MOVW    R31:R30, R5:R4
   \   00000140   82A0               ST      Z, R10
   \   00000142   9100....           LDS     R16, PortPair
   \   00000146   E014               LDI     R17, 4
   \   00000148   9F01               MUL     R16, R17
   \   0000014A   01F0               MOVW    R31:R30, R1:R0
   \   0000014C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000014E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000150   86A3               STD     Z+11, R10
   \   00000152   86A4               STD     Z+12, R10
   \   00000154   9100....           LDS     R16, PortPair
   \   00000158   E0F0               LDI     R31, 0
   \   0000015A   2FE0               MOV     R30, R16
   \   0000015C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000015E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000160   8103               LDD     R16, Z+3
   \   00000162   7F0E               ANDI    R16, 0xFE
   \   00000164   8303               STD     Z+3, R16
   \   00000166   01F2               MOVW    R31:R30, R5:R4
   \   00000168   82A6               STD     Z+6, R10
   \   0000016A   C055               RJMP    ??ExtRS485Rec_9
   \                     ??ExtRS485Rec_5:
   \   0000016C   9100....           LDS     R16, (UART16552 + 200)
   \   00000170   9503               INC     R16
   \   00000172   9300....           STS     (UART16552 + 200), R16
   \   00000176   9100....           LDS     R16, PortPair
   \   0000017A   E014               LDI     R17, 4
   \   0000017C   9F01               MUL     R16, R17
   \   0000017E   01F0               MOVW    R31:R30, R1:R0
   \   00000180   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000182   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000184   8505               LDD     R16, Z+13
   \   00000186   8516               LDD     R17, Z+14
   \   00000188   5F0F               SUBI    R16, 255
   \   0000018A   4F1F               SBCI    R17, 255
   \   0000018C   8705               STD     Z+13, R16
   \   0000018E   8716               STD     Z+14, R17
   \   00000190   9100....           LDS     R16, PortPair
   \   00000194   E014               LDI     R17, 4
   \   00000196   9F01               MUL     R16, R17
   \   00000198   ....               LDI     R30, LOW(TData)
   \   0000019A   ....               LDI     R31, (TData) >> 8
   \   0000019C   0DE0               ADD     R30, R0
   \   0000019E   1DF1               ADC     R31, R1
   \   000001A0   8583               LDD     R24, Z+11
   \   000001A2   8594               LDD     R25, Z+12
   \   000001A4   018C               MOVW    R17:R16, R25:R24
   \   000001A6   5F0F               SUBI    R16, 255
   \   000001A8   4F1F               SBCI    R17, 255
   \   000001AA   8703               STD     Z+11, R16
   \   000001AC   8714               STD     Z+12, R17
   \   000001AE   9706               SBIW    R25:R24, 6
   \   000001B0   F048               BRCS    ??ExtRS485Rec_10
   \   000001B2   9100....           LDS     R16, PortPair
   \   000001B6   E0F0               LDI     R31, 0
   \   000001B8   2FE0               MOV     R30, R16
   \   000001BA   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001BC   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001BE   8103               LDD     R16, Z+3
   \   000001C0   6001               ORI     R16, 0x01
   \   000001C2   8303               STD     Z+3, R16
   \                     ??ExtRS485Rec_10:
   \   000001C4   9100....           LDS     R16, TData
   \   000001C8   E010               LDI     R17, 0
   \   000001CA   9140....           LDS     R20, PortPair
   \   000001CE   ........           CALL    ?SS_SHR_L02
   \   000001D2   7001               ANDI    R16, 0x01
   \   000001D4   F101               BREQ    ??ExtRS485Rec_9
   \   000001D6   9100....           LDS     R16, PortPair
   \   000001DA   E014               LDI     R17, 4
   \   000001DC   9F01               MUL     R16, R17
   \   000001DE   01F0               MOVW    R31:R30, R1:R0
   \   000001E0   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000001E2   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000001E4   8503               LDD     R16, Z+11
   \   000001E6   7007               ANDI    R16, 0x07
   \   000001E8   3004               CPI     R16, 4
   \   000001EA   F4A9               BRNE    ??ExtRS485Rec_9
   \   000001EC   9140....           LDS     R20, PortPair
   \   000001F0   94F8               cli
   \   000001F2   E001               LDI     R16, 1
   \   000001F4   E010               LDI     R17, 0
   \   000001F6   ........           CALL    ?S_SHL_L02
   \   000001FA   9500               COM     R16
   \   000001FC   B118               IN      R17, 0x08
   \   000001FE   2310               AND     R17, R16
   \   00000200   B918               OUT     0x08, R17
   \   00000202   9100....           LDS     R16, (OS_Global + 1)
   \   00000206   2300               TST     R16
   \   00000208   F409               BRNE    ??ExtRS485Rec_11
   \   0000020A   9478               sei
   \                     ??ExtRS485Rec_11:
   \   0000020C   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   0000020E   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000210   E002               LDI     R16, 2
   \   00000212   ........           CALL    OS_SignalEvent
   \                     ??ExtRS485Rec_9:
   \   00000216   FBA1               BST     R26, 1
   \   00000218   F00E               BRTS    $+2+2
   \   0000021A   CF08               RJMP    ??ExtRS485Rec_1
   \   0000021C   E084               LDI     R24, 4
   \   0000021E   E090               LDI     R25, 0
   \   00000220   EFAF               LDI     R26, 255
   \   00000222   2488               CLR     R8
   \   00000224   9483               INC     R8
   \                     ??ExtRS485Rec_12:
   \   00000226   019C               MOVW    R19:R18, R25:R24
   \   00000228   E001               LDI     R16, 1
   \   0000022A   ....               RCALL   CheckActionUart16552
   \   0000022C   2300               TST     R16
   \   0000022E   F409               BRNE    ??ExtRS485Rec_13
   \   00000230   2488               CLR     R8
   \                     ??ExtRS485Rec_13:
   \   00000232   01FC               MOVW    R31:R30, R25:R24
   \   00000234   ....               SUBI    R30, LOW((-(UART16552 + 333) & 0xFFFF))
   \   00000236   ....               SBCI    R31, HIGH((-(UART16552 + 333) & 0xFFFF))
   \   00000238   81E0               LD      R30, Z
   \   0000023A   E0F0               LDI     R31, 0
   \   0000023C   9632               ADIW    R31:R30, 2
   \   0000023E   0F8E               ADD     R24, R30
   \   00000240   1F9F               ADC     R25, R31
   \   00000242   95AA               DEC     R26
   \   00000244   F051               BREQ    ??ExtRS485Rec_14
   \   00000246   2088               TST     R8
   \   00000248   F041               BREQ    ??ExtRS485Rec_14
   \   0000024A   01F3               MOVW    R31:R30, R7:R6
   \   0000024C   8104               LDD     R16, Z+4
   \   0000024E   8115               LDD     R17, Z+5
   \   00000250   5003               SUBI    R16, 3
   \   00000252   4010               SBCI    R17, 0
   \   00000254   1780               CP      R24, R16
   \   00000256   0791               CPC     R25, R17
   \   00000258   F330               BRCS    ??ExtRS485Rec_12
   \                     ??ExtRS485Rec_14:
   \   0000025A   01F3               MOVW    R31:R30, R7:R6
   \   0000025C   82A0               ST      Z, R10
   \   0000025E   9100....           LDS     R16, PortPair
   \   00000262   E014               LDI     R17, 4
   \   00000264   9F01               MUL     R16, R17
   \   00000266   01F0               MOVW    R31:R30, R1:R0
   \   00000268   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000026A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000026C   8EA3               STD     Z+27, R10
   \   0000026E   8EA4               STD     Z+28, R10
   \   00000270   9100....           LDS     R16, PortPair
   \   00000274   E0F0               LDI     R31, 0
   \   00000276   2FE0               MOV     R30, R16
   \   00000278   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000027A   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   0000027C   8107               LDD     R16, Z+7
   \   0000027E   7F0E               ANDI    R16, 0xFE
   \   00000280   8307               STD     Z+7, R16
   \   00000282   01F3               MOVW    R31:R30, R7:R6
   \   00000284   82A6               STD     Z+6, R10
   \   00000286   CF29               RJMP    ??ExtRS485Rec_3
   \   00000288                      REQUIRE _A_PORTC
    354              }
    355          }
    356          
    357          /*************************************************************************
    358          *
    359          *  Set ports on or off
    360          *
    361          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    362          void SetRS4Port(void) {
   \                     SetRS4Port:
    363          
    364              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   B908               OUT     0x08, R16
    365          
    366          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    367          
    368          /*************************************************************************
    369          *
    370          *  Check the incoming packages from AN_SGCNV / WIS
    371          *
    372          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    373          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   928A               ST      -Y, R8
   \   00000002   927A               ST      -Y, R7
   \   00000004   926A               ST      -Y, R6
   \   00000006   925A               ST      -Y, R5
   \   00000008   924A               ST      -Y, R4
   \   0000000A   93BA               ST      -Y, R27
   \   0000000C   93AA               ST      -Y, R26
   \   0000000E   939A               ST      -Y, R25
   \   00000010   938A               ST      -Y, R24
   \   00000012                      REQUIRE ?Register_R4_is_cg_reg
   \   00000012                      REQUIRE ?Register_R5_is_cg_reg
   \   00000012                      REQUIRE ?Register_R6_is_cg_reg
   \   00000012                      REQUIRE ?Register_R7_is_cg_reg
   \   00000012                      REQUIRE ?Register_R8_is_cg_reg
   \   00000012   2E60               MOV     R6, R16
    374          
    375              unsigned short pointer = 4;
   \   00000014   E084               LDI     R24, 4
   \   00000016   E090               LDI     R25, 0
    376              char count_out  = MAX_PROT_CMD;// max command
   \   00000018   2488               CLR     R8
   \   0000001A   948A               DEC     R8
    377              char more       = true;
   \   0000001C   2477               CLR     R7
   \   0000001E   9473               INC     R7
   \   00000020   2F20               MOV     R18, R16
   \   00000022   E008               LDI     R16, 8
   \   00000024   9D27               MUL     R18, R7
   \   00000026   2D30               MOV     R19, R0
   \   00000028   9F20               MUL     R18, R16
   \   0000002A   0D31               ADD     R19, R1
   \   0000002C   ....               LDI     R26, LOW(UART16552)
   \   0000002E   ....               LDI     R27, (UART16552) >> 8
   \   00000030   0DA0               ADD     R26, R0
   \   00000032   1FB3               ADC     R27, R19
   \   00000034   012D               MOVW    R5:R4, R27:R26
   \   00000036   EC02               LDI     R16, 194
   \   00000038   0E40               ADD     R4, R16
   \   0000003A   1E59               ADC     R5, R25
    378          
    379              do {
    380                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??Usart16552CheckPackage_0:
   \   0000003C   019C               MOVW    R19:R18, R25:R24
   \   0000003E   2D06               MOV     R16, R6
   \   00000040   ....               RCALL   CheckActionUart16552
   \   00000042   2300               TST     R16
   \   00000044   F409               BRNE    ??Usart16552CheckPackage_1
    381                      more = false;                          // terminate while loop
   \   00000046   2477               CLR     R7
    382                  }
    383                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_1:
   \   00000048   01FD               MOVW    R31:R30, R27:R26
   \   0000004A   0FE8               ADD     R30, R24
   \   0000004C   1FF9               ADC     R31, R25
   \   0000004E   5BEB               SUBI    R30, 187
   \   00000050   4FFF               SBCI    R31, 255
   \   00000052   81E0               LD      R30, Z
   \   00000054   E0F0               LDI     R31, 0
   \   00000056   9632               ADIW    R31:R30, 2
   \   00000058   0F8E               ADD     R24, R30
   \   0000005A   1F9F               ADC     R25, R31
    384                  if (!--count_out) {
   \   0000005C   948A               DEC     R8
   \   0000005E   F051               BREQ    ??Usart16552CheckPackage_2
    385                      more = false;
    386                  }
    387              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \   00000060   2077               TST     R7
   \   00000062   F041               BREQ    ??Usart16552CheckPackage_2
   \   00000064   01F2               MOVW    R31:R30, R5:R4
   \   00000066   8104               LDD     R16, Z+4
   \   00000068   8115               LDD     R17, Z+5
   \   0000006A   5003               SUBI    R16, 3
   \   0000006C   4010               SBCI    R17, 0
   \   0000006E   1780               CP      R24, R16
   \   00000070   0791               CPC     R25, R17
   \   00000072   F320               BRCS    ??Usart16552CheckPackage_0
    388              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_2:
   \   00000074   53AE               SUBI    R26, 62
   \   00000076   4FBF               SBCI    R27, 255
   \   00000078   E000               LDI     R16, 0
   \   0000007A   930C               ST      X, R16
    389          }
   \   0000007C   9189               LD      R24, Y+
   \   0000007E   9199               LD      R25, Y+
   \   00000080   91A9               LD      R26, Y+
   \   00000082   91B9               LD      R27, Y+
   \   00000084   9049               LD      R4, Y+
   \   00000086   9059               LD      R5, Y+
   \   00000088   9069               LD      R6, Y+
   \   0000008A   9079               LD      R7, Y+
   \   0000008C   9089               LD      R8, Y+
   \   0000008E   9508               RET
    390          
    391          
    392          
    393          /*************************************************************************
    394          *
    395          *  Check action on received data from AN_SGCNV
    396          *
    397          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    398          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   938A               ST      -Y, R24
    399          
    400              char retval = true;
   \   00000002   E081               LDI     R24, 1
    401          
    402              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   00000004   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000006   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000008   0FE2               ADD     R30, R18
   \   0000000A   1FF3               ADC     R31, R19
   \   0000000C   2F60               MOV     R22, R16
   \   0000000E   E048               LDI     R20, 8
   \   00000010   9F68               MUL     R22, R24
   \   00000012   2D70               MOV     R23, R0
   \   00000014   9F64               MUL     R22, R20
   \   00000016   0D71               ADD     R23, R1
   \   00000018   0DE0               ADD     R30, R0
   \   0000001A   1FF7               ADC     R31, R23
   \   0000001C   8110               LD      R17, Z
   \   0000001E   5810               SUBI    R17, 128
   \   00000020   F409               BRNE    $+2+2
   \   00000022   C040               RJMP    ??CheckActionUart16552_0
   \   00000024   5314               SUBI    R17, 52
   \   00000026   F409               BRNE    $+2+2
   \   00000028   C045               RJMP    ??CheckActionUart16552_1
   \   0000002A   951A               DEC     R17
   \   0000002C   F409               BRNE    $+2+2
   \   0000002E   C046               RJMP    ??CheckActionUart16552_2
   \   00000030   541B               SUBI    R17, 75
   \   00000032   F409               BRNE    $+2+2
   \   00000034   C050               RJMP    ??CheckActionUart16552_3
   \   00000036   951A               DEC     R17
   \   00000038   F409               BRNE    $+2+2
   \   0000003A   C04D               RJMP    ??CheckActionUart16552_3
   \   0000003C   511D               SUBI    R17, 29
   \   0000003E   F088               BRCS    ??CheckActionUart16552_4
   \   00000040   5013               SUBI    R17, 3
   \   00000042   F080               BRCS    ??CheckActionUart16552_5
   \   00000044   5013               SUBI    R17, 3
   \   00000046   F0B0               BRCS    ??CheckActionUart16552_6
   \   00000048   F0C9               BREQ    ??CheckActionUart16552_7
   \   0000004A   951A               DEC     R17
   \   0000004C   F0F9               BREQ    ??CheckActionUart16552_8
   \   0000004E   5017               SUBI    R17, 7
   \   00000050   F109               BREQ    ??CheckActionUart16552_9
   \   00000052   5013               SUBI    R17, 3
   \   00000054   F0B9               BREQ    ??CheckActionUart16552_10
   \   00000056   5012               SUBI    R17, 2
   \   00000058   F049               BREQ    ??CheckActionUart16552_11
   \   0000005A   541D               SUBI    R17, 77
   \   0000005C   F0F9               BREQ    ??CheckActionUart16552_12
   \   0000005E   951A               DEC     R17
   \   00000060   F129               BREQ    ??CheckActionUart16552_13
   \                     ??CheckActionUart16552_4:
   \   00000062   C03A               RJMP    ??CheckActionUart16552_14
    403          
    404              case ANP1_REP_MP_DATA :                              // Measured pressure data
    405              case ANP1_REP_MT_DATA :                              // Measured temperature data
    406              case ANP1_REP_MO_DATA :                              // Measured "other" data
    407                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_5:
   \   00000064   5F2E               SUBI    R18, 254
   \   00000066   4F3F               SBCI    R19, 255
   \   00000068   ....               RCALL   ReceivePTOData
    408                  break;
   \   0000006A   C036               RJMP    ??CheckActionUart16552_14
    409              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    410                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_11:
   \   0000006C   5F2E               SUBI    R18, 254
   \   0000006E   4F3F               SBCI    R19, 255
   \   00000070   ....               RCALL   ReceiveWHData
    411                  break;
   \   00000072   C032               RJMP    ??CheckActionUart16552_14
    412              case ANP1_REP_RP_DATA :                              // Raw pressure data
    413              case ANP1_REP_RT_DATA :                              // Raw temp. data
    414              case ANP1_REP_RO_DATA :                              // Raw "other" data
    415                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_6:
   \   00000074   5F2E               SUBI    R18, 254
   \   00000076   4F3F               SBCI    R19, 255
   \   00000078   ....               RCALL   ReceiveRData
    416                  break;
   \   0000007A   C02E               RJMP    ??CheckActionUart16552_14
    417              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    418                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_7:
   \   0000007C   5F2E               SUBI    R18, 254
   \   0000007E   4F3F               SBCI    R19, 255
   \   00000080   ....               RCALL   ReceiveCData
    419                  break;
   \   00000082   C02A               RJMP    ??CheckActionUart16552_14
    420          
    421              case ANP1_REP_CARD_STAT :                             // card status package
    422                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_10:
   \   00000084   5F2E               SUBI    R18, 254
   \   00000086   4F3F               SBCI    R19, 255
   \   00000088   ....               RCALL   ReceiveCardStatus
    423                  break;
   \   0000008A   C026               RJMP    ??CheckActionUart16552_14
    424          
    425              case ANP1_REP_CONFIG :                             // config data
    426                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_8:
   \   0000008C   5F2E               SUBI    R18, 254
   \   0000008E   4F3F               SBCI    R19, 255
   \   00000090   ....               RCALL   ReceiveConfigData
    427                  break;
   \   00000092   C022               RJMP    ??CheckActionUart16552_14
    428          
    429              case ANP1_REP_EEP_DATA :                             // card eeprome
    430                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_9:
   \   00000094   5F2E               SUBI    R18, 254
   \   00000096   4F3F               SBCI    R19, 255
   \   00000098   ....               RCALL   ReceiveCardEEPROMData
    431                  break;
   \   0000009A   C01E               RJMP    ??CheckActionUart16552_14
    432          
    433              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    434                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_12:
   \   0000009C   5F2E               SUBI    R18, 254
   \   0000009E   4F3F               SBCI    R19, 255
   \   000000A0   ....               RCALL   ReceiveWISStatus
    435                  break;
   \   000000A2   C01A               RJMP    ??CheckActionUart16552_14
    436          
    437              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    438                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_0:
   \   000000A4   5F2E               SUBI    R18, 254
   \   000000A6   4F3F               SBCI    R19, 255
   \   000000A8   ....               RCALL   ReceiveWISXData
    439                  break;
   \   000000AA   C016               RJMP    ??CheckActionUart16552_14
    440          
    441              case ANP1_REP_WIS_DATA :                             // Data from WIS
    442                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_13:
   \   000000AC   5F2E               SUBI    R18, 254
   \   000000AE   4F3F               SBCI    R19, 255
   \   000000B0   ....               RCALL   ReceiveWISData
    443                  break;
   \   000000B2   C012               RJMP    ??CheckActionUart16552_14
    444              case ANP1_REP_GODA_DATA:
    445                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_1:
   \   000000B4   5F2E               SUBI    R18, 254
   \   000000B6   4F3F               SBCI    R19, 255
   \   000000B8   ....               RCALL   ReceiveRadarData
    446                  break;
   \   000000BA   C00E               RJMP    ??CheckActionUart16552_14
    447              case ANP1_REP_GODA_INFO:
    448                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_2:
   \   000000BC   8544               LDD     R20, Z+12
   \   000000BE   E014               LDI     R17, 4
   \   000000C0   9F01               MUL     R16, R17
   \   000000C2   9100....           LDS     R16, PortPair
   \   000000C6   E010               LDI     R17, 0
   \   000000C8   0E00               ADD     R0, R16
   \   000000CA   1E11               ADC     R1, R17
   \   000000CC   01F0               MOVW    R31:R30, R1:R0
   \   000000CE   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000D0   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000D2   A743               STD     Z+43, R20
    449                  break;
   \   000000D4   C001               RJMP    ??CheckActionUart16552_14
    450              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    451              case ANP1_ECMD_NMDWOACK :                         // No more data
    452                  retval = false;
   \                     ??CheckActionUart16552_3:
   \   000000D6   E080               LDI     R24, 0
    453                  break;
    454              }
    455              return retval;
   \                     ??CheckActionUart16552_14:
   \   000000D8   2F08               MOV     R16, R24
   \   000000DA   9189               LD      R24, Y+
   \   000000DC   9508               RET
    456          }
    457          
    458          /*************************************************************************
    459          *
    460          *  Receive card status from WIS
    461          *
    462          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    463          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   2F40               MOV     R20, R16
    464          
    465              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000004   9150....           LDS     R21, PortPair
   \   00000008   ....               LDI     R30, LOW((UART16552 + 68))
   \   0000000A   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000000C   0FE2               ADD     R30, R18
   \   0000000E   1FF3               ADC     R31, R19
   \   00000010   2F20               MOV     R18, R16
   \   00000012   E008               LDI     R16, 8
   \   00000014   E011               LDI     R17, 1
   \   00000016   9F21               MUL     R18, R17
   \   00000018   2D30               MOV     R19, R0
   \   0000001A   9F20               MUL     R18, R16
   \   0000001C   0D31               ADD     R19, R1
   \   0000001E   0DE0               ADD     R30, R0
   \   00000020   1FF3               ADC     R31, R19
   \   00000022   E004               LDI     R16, 4
   \   00000024   9F40               MUL     R20, R16
   \   00000026   8120               LD      R18, Z
   \   00000028   2F05               MOV     R16, R21
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   01A0               MOVW    R21:R20, R1:R0
   \   0000002E   0F40               ADD     R20, R16
   \   00000030   1F51               ADC     R21, R17
   \   00000032   01DA               MOVW    R27:R26, R21:R20
   \   00000034   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   00000036   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000038   910C               LD      R16, X
   \   0000003A   2B02               OR      R16, R18
   \   0000003C   930C               ST      X, R16
    466              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000003E   8121               LDD     R18, Z+1
   \   00000040   9100....           LDS     R16, PortPair
   \   00000044   01A0               MOVW    R21:R20, R1:R0
   \   00000046   0F40               ADD     R20, R16
   \   00000048   1F51               ADC     R21, R17
   \   0000004A   01DA               MOVW    R27:R26, R21:R20
   \   0000004C   ....               SUBI    R26, LOW((-(TData + 51) & 0xFFFF))
   \   0000004E   ....               SBCI    R27, HIGH((-(TData + 51) & 0xFFFF))
   \   00000050   932C               ST      X, R18
    467              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   00000052   8104               LDD     R16, Z+4
   \   00000054   2300               TST     R16
   \   00000056   F051               BREQ    ??ReceiveWISStatus_0
    468                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   00000058   9100....           LDS     R16, PortPair
   \   0000005C   0E00               ADD     R0, R16
   \   0000005E   1E11               ADC     R1, R17
   \   00000060   01F0               MOVW    R31:R30, R1:R0
   \   00000062   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000066   A903               LDD     R16, Z+51
   \   00000068   6800               ORI     R16, 0x80
   \   0000006A   AB03               STD     Z+51, R16
    469              }
    470          }
   \                     ??ReceiveWISStatus_0:
   \   0000006C   01DB               MOVW    R27:R26, R23:R22
   \   0000006E   9508               RET
    471          
    472          /*************************************************************************
    473          *
    474          *  Receive WIS protocol data
    475          *
    476          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    477          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   011C               MOVW    R3:R2, R25:R24
    478          
    479              char i;
    480          
    481              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \   00000006   2F60               MOV     R22, R16
   \   00000008   E048               LDI     R20, 8
   \   0000000A   E051               LDI     R21, 1
   \   0000000C   9F65               MUL     R22, R21
   \   0000000E   2D70               MOV     R23, R0
   \   00000010   9F64               MUL     R22, R20
   \   00000012   0D71               ADD     R23, R1
   \   00000014   ....               LDI     R26, LOW(UART16552)
   \   00000016   ....               LDI     R27, (UART16552) >> 8
   \   00000018   0DA0               ADD     R26, R0
   \   0000001A   1FB7               ADC     R27, R23
   \   0000001C   0FA2               ADD     R26, R18
   \   0000001E   1FB3               ADC     R27, R19
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   5BEC               SUBI    R30, 188
   \   00000024   4FFF               SBCI    R31, 255
   \   00000026   8110               LD      R17, Z
   \   00000028   3713               CPI     R17, 115
   \   0000002A   F4E1               BRNE    ??ReceiveWISXData_0
    482              case 115:                                     // Serial number
    483                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   0000002C   E312               LDI     R17, 50
   \   0000002E   9F01               MUL     R16, R17
   \   00000030   ....               LDI     R24, LOW(TData)
   \   00000032   ....               LDI     R25, (TData) >> 8
   \   00000034   0D80               ADD     R24, R0
   \   00000036   1D91               ADC     R25, R1
   \   00000038   01FC               MOVW    R31:R30, R25:R24
   \   0000003A   56EC               SUBI    R30, 108
   \   0000003C   4FFA               SBCI    R31, 250
   \   0000003E   8350               ST      Z, R21
    484                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   00000040   0F00               LSL     R16
   \   00000042   0F00               LSL     R16
   \   00000044   9110....           LDS     R17, PortPair
   \   00000048   0F01               ADD     R16, R17
   \   0000004A   8301               STD     Z+1, R16
    485                  for (i = 2; i < (4 + 2); i++) {
   \   0000004C   5BAB               SUBI    R26, 187
   \   0000004E   4FBF               SBCI    R27, 255
   \   00000050   9602               ADIW    R25:R24, 2
   \   00000052   E004               LDI     R16, 4
    486                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveWISXData_1:
   \   00000054   911D               LD      R17, X+
   \   00000056   01FC               MOVW    R31:R30, R25:R24
   \   00000058   56EC               SUBI    R30, 108
   \   0000005A   4FFA               SBCI    R31, 250
   \   0000005C   8310               ST      Z, R17
    487                  }
   \   0000005E   9601               ADIW    R25:R24, 1
   \   00000060   950A               DEC     R16
   \   00000062   F7C1               BRNE    ??ReceiveWISXData_1
    488                  break;
    489              default:
    490                  break;
    491              }
    492          }
   \                     ??ReceiveWISXData_0:
   \   00000064   01C1               MOVW    R25:R24, R3:R2
   \   00000066   91A9               LD      R26, Y+
   \   00000068   91B9               LD      R27, Y+
   \   0000006A   9508               RET
    493          
    494          /*************************************************************************
    495          *
    496          *  Receive measured data from WIS
    497          *
    498          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    499          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   2F40               MOV     R20, R16
    500          
    501              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
   \   0000000A   ....               LDI     R26, LOW((UART16552 + 68))
   \   0000000C   ....               LDI     R27, HIGH((UART16552 + 68))
   \   0000000E   0FA2               ADD     R26, R18
   \   00000010   1FB3               ADC     R27, R19
   \   00000012   2F20               MOV     R18, R16
   \   00000014   E008               LDI     R16, 8
   \   00000016   E011               LDI     R17, 1
   \   00000018   9F21               MUL     R18, R17
   \   0000001A   2D30               MOV     R19, R0
   \   0000001C   9F20               MUL     R18, R16
   \   0000001E   0D31               ADD     R19, R1
   \   00000020   0DA0               ADD     R26, R0
   \   00000022   1FB3               ADC     R27, R19
   \   00000024   E004               LDI     R16, 4
   \   00000026   9F40               MUL     R20, R16
   \   00000028   01C0               MOVW    R25:R24, R1:R0
   \   0000002A   910C               LD      R16, X
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   E020               LDI     R18, 0
   \   00000030   E030               LDI     R19, 0
   \   00000032   ........           CALL    ?UL2F_S_L04
   \   00000036   9140....           LDS     R20, PortPair
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   01BC               MOVW    R23:R22, R25:R24
   \   0000003E   0F64               ADD     R22, R20
   \   00000040   1F75               ADC     R23, R21
   \   00000042   E348               LDI     R20, 56
   \   00000044   9F74               MUL     R23, R20
   \   00000046   2D70               MOV     R23, R0
   \   00000048   9F64               MUL     R22, R20
   \   0000004A   0D71               ADD     R23, R1
   \   0000004C   2DE0               MOV     R30, R0
   \   0000004E   2FF7               MOV     R31, R23
   \   00000050   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000052   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   00000054   8300               ST      Z, R16
   \   00000056   8311               STD     Z+1, R17
   \   00000058   8322               STD     Z+2, R18
   \   0000005A   8333               STD     Z+3, R19
    502              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    503                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   8111               LDD     R17, Z+1
   \   00000060   8102               LDD     R16, Z+2
   \   00000062   2F21               MOV     R18, R17
   \   00000064   0F22               LSL     R18
   \   00000066   0B22               SBC     R18, R18
   \   00000068   2F32               MOV     R19, R18
   \   0000006A   ........           CALL    ?SL2F_S_L04
   \   0000006E   E040               LDI     R20, 0
   \   00000070   E260               LDI     R22, 32
   \   00000072   E471               LDI     R23, 65
   \   00000074   ........           CALL    ?F_DIV_S_L04
   \   00000078   9140....           LDS     R20, PortPair
   \   0000007C   E050               LDI     R21, 0
   \   0000007E   01BC               MOVW    R23:R22, R25:R24
   \   00000080   0F64               ADD     R22, R20
   \   00000082   1F75               ADC     R23, R21
   \   00000084   E348               LDI     R20, 56
   \   00000086   9F74               MUL     R23, R20
   \   00000088   2D70               MOV     R23, R0
   \   0000008A   9F64               MUL     R22, R20
   \   0000008C   0D71               ADD     R23, R1
   \   0000008E   2DE0               MOV     R30, R0
   \   00000090   2FF7               MOV     R31, R23
   \   00000092   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   00000094   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   00000096   8300               ST      Z, R16
   \   00000098   8311               STD     Z+1, R17
   \   0000009A   8322               STD     Z+2, R18
   \   0000009C   8333               STD     Z+3, R19
    504              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \   0000009E   01FD               MOVW    R31:R30, R27:R26
   \   000000A0   8123               LDD     R18, Z+3
   \   000000A2   9100....           LDS     R16, PortPair
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   01AC               MOVW    R21:R20, R25:R24
   \   000000AA   0F40               ADD     R20, R16
   \   000000AC   1F51               ADC     R21, R17
   \   000000AE   E00E               LDI     R16, 14
   \   000000B0   9F50               MUL     R21, R16
   \   000000B2   2D50               MOV     R21, R0
   \   000000B4   9F40               MUL     R20, R16
   \   000000B6   0D51               ADD     R21, R1
   \   000000B8   2DE0               MOV     R30, R0
   \   000000BA   2FF5               MOV     R31, R21
   \   000000BC   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   000000C0   AF23               STD     Z+59, R18
    505              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \   000000C2   9100....           LDS     R16, PortPair
   \   000000C6   0F80               ADD     R24, R16
   \   000000C8   1F91               ADC     R25, R17
   \   000000CA   E00E               LDI     R16, 14
   \   000000CC   9F90               MUL     R25, R16
   \   000000CE   2D90               MOV     R25, R0
   \   000000D0   9F80               MUL     R24, R16
   \   000000D2   0D91               ADD     R25, R1
   \   000000D4   2DE0               MOV     R30, R0
   \   000000D6   2FF9               MOV     R31, R25
   \   000000D8   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000DA   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000DC   8310               ST      Z, R17
    506          }
   \   000000DE   ....               RJMP    ?Subroutine2

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9189               LD      R24, Y+
   \   00000002                      REQUIRE ??Subroutine3_0
   \   00000002                      ;               // Fall through to label ??Subroutine3_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine3_0:
   \   00000000   9199               LD      R25, Y+
   \   00000002   91A9               LD      R26, Y+
   \   00000004   91B9               LD      R27, Y+
   \   00000006   9508               RET
    507          
    508          
    509          /*************************************************************************
    510          *
    511          *  Receive measured data from Radar
    512          *
    513          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    514          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   2F40               MOV     R20, R16
    515              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
    516              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
    517          
    518              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
   \   00000006   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000008   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000000A   0FE2               ADD     R30, R18
   \   0000000C   1FF3               ADC     R31, R19
   \   0000000E   2F20               MOV     R18, R16
   \   00000010   E008               LDI     R16, 8
   \   00000012   E011               LDI     R17, 1
   \   00000014   9F21               MUL     R18, R17
   \   00000016   2D30               MOV     R19, R0
   \   00000018   9F20               MUL     R18, R16
   \   0000001A   0D31               ADD     R19, R1
   \   0000001C   0DE0               ADD     R30, R0
   \   0000001E   1FF3               ADC     R31, R19
   \   00000020   E004               LDI     R16, 4
   \   00000022   9F40               MUL     R20, R16
   \   00000024   0190               MOVW    R19:R18, R1:R0
   \   00000026   8140               LD      R20, Z
   \   00000028   8151               LDD     R21, Z+1
   \   0000002A   8162               LDD     R22, Z+2
   \   0000002C   8173               LDD     R23, Z+3
   \   0000002E   9100....           LDS     R16, PortPair
   \   00000032   E010               LDI     R17, 0
   \   00000034   0110               MOVW    R3:R2, R1:R0
   \   00000036   0E20               ADD     R2, R16
   \   00000038   1E31               ADC     R3, R17
   \   0000003A   E308               LDI     R16, 56
   \   0000003C   9E30               MUL     R3, R16
   \   0000003E   2C30               MOV     R3, R0
   \   00000040   9E20               MUL     R2, R16
   \   00000042   0C31               ADD     R3, R1
   \   00000044   2DA0               MOV     R26, R0
   \   00000046   2DB3               MOV     R27, R3
   \   00000048   ....               SUBI    R26, LOW((-(TData + 731) & 0xFFFF))
   \   0000004A   ....               SBCI    R27, HIGH((-(TData + 731) & 0xFFFF))
   \   0000004C   934D               ST      X+, R20
   \   0000004E   935D               ST      X+, R21
   \   00000050   936D               ST      X+, R22
   \   00000052   937C               ST      X, R23
    519              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \   00000054   8144               LDD     R20, Z+4
   \   00000056   8155               LDD     R21, Z+5
   \   00000058   8166               LDD     R22, Z+6
   \   0000005A   8177               LDD     R23, Z+7
   \   0000005C   9100....           LDS     R16, PortPair
   \   00000060   0119               MOVW    R3:R2, R19:R18
   \   00000062   0E20               ADD     R2, R16
   \   00000064   1E31               ADC     R3, R17
   \   00000066   E308               LDI     R16, 56
   \   00000068   9E30               MUL     R3, R16
   \   0000006A   2C30               MOV     R3, R0
   \   0000006C   9E20               MUL     R2, R16
   \   0000006E   0C31               ADD     R3, R1
   \   00000070   2DA0               MOV     R26, R0
   \   00000072   2DB3               MOV     R27, R3
   \   00000074   ....               SUBI    R26, LOW((-(TData + 735) & 0xFFFF))
   \   00000076   ....               SBCI    R27, HIGH((-(TData + 735) & 0xFFFF))
   \   00000078   934D               ST      X+, R20
   \   0000007A   935D               ST      X+, R21
   \   0000007C   936D               ST      X+, R22
   \   0000007E   937C               ST      X, R23
    520              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \   00000080   8540               LDD     R20, Z+8
   \   00000082   9100....           LDS     R16, PortPair
   \   00000086   01B9               MOVW    R23:R22, R19:R18
   \   00000088   0F60               ADD     R22, R16
   \   0000008A   1F71               ADC     R23, R17
   \   0000008C   E00E               LDI     R16, 14
   \   0000008E   9F70               MUL     R23, R16
   \   00000090   2D70               MOV     R23, R0
   \   00000092   9F60               MUL     R22, R16
   \   00000094   0D71               ADD     R23, R1
   \   00000096   2DA0               MOV     R26, R0
   \   00000098   ....               SUBI    R26, LOW((-(TData + 59) & 0xFFFF))
   \   0000009A   ....               SBCI    R23, HIGH((-(TData + 59) & 0xFFFF))
   \   0000009C   2FB7               MOV     R27, R23
   \   0000009E   934C               ST      X, R20
    521              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \   000000A0   8541               LDD     R20, Z+9
   \   000000A2   9100....           LDS     R16, PortPair
   \   000000A6   0F20               ADD     R18, R16
   \   000000A8   1F31               ADC     R19, R17
   \   000000AA   E00E               LDI     R16, 14
   \   000000AC   9F30               MUL     R19, R16
   \   000000AE   2D30               MOV     R19, R0
   \   000000B0   9F20               MUL     R18, R16
   \   000000B2   0D31               ADD     R19, R1
   \   000000B4   2DE0               MOV     R30, R0
   \   000000B6   2FF3               MOV     R31, R19
   \   000000B8   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   000000BA   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   000000BC   8340               ST      Z, R20
    522          }
   \   000000BE   91A9               LD      R26, Y+
   \   000000C0   91B9               LD      R27, Y+
   \   000000C2   9508               RET
    523          
    524          
    525          /*************************************************************************
    526          *
    527          *  Receive Serial number and version information from Radar
    528          *
    529          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    530          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
    531              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    532              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000000   ....               LDI     R30, LOW((UART16552 + 78))
   \   00000002   ....               LDI     R31, HIGH((UART16552 + 78))
   \   00000004   0FE2               ADD     R30, R18
   \   00000006   1FF3               ADC     R31, R19
   \   00000008   2F40               MOV     R20, R16
   \   0000000A   E028               LDI     R18, 8
   \   0000000C   E031               LDI     R19, 1
   \   0000000E   9F43               MUL     R20, R19
   \   00000010   2D50               MOV     R21, R0
   \   00000012   9F42               MUL     R20, R18
   \   00000014   0D51               ADD     R21, R1
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF5               ADC     R31, R21
   \   0000001A   8140               LD      R20, Z
   \   0000001C   E014               LDI     R17, 4
   \   0000001E   9F01               MUL     R16, R17
   \   00000020   9100....           LDS     R16, PortPair
   \   00000024   E010               LDI     R17, 0
   \   00000026   0E00               ADD     R0, R16
   \   00000028   1E11               ADC     R1, R17
   \   0000002A   01F0               MOVW    R31:R30, R1:R0
   \   0000002C   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   0000002E   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000030   A743               STD     Z+43, R20
    533          }
   \   00000032   9508               RET
    534          
    535          /*************************************************************************
    536          *
    537          *  Receive pressure measured data from AN_SGCNV
    538          *
    539          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    540          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C   2E40               MOV     R4, R16
    541          
    542              unsigned short pnt, ADCh;
    543              short packlen;
    544          
    545              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   0000000E   2F40               MOV     R20, R16
   \   00000010   E008               LDI     R16, 8
   \   00000012   E011               LDI     R17, 1
   \   00000014   9F41               MUL     R20, R17
   \   00000016   2D50               MOV     R21, R0
   \   00000018   9F40               MUL     R20, R16
   \   0000001A   0D51               ADD     R21, R1
   \   0000001C   ....               LDI     R24, LOW(UART16552)
   \   0000001E   ....               LDI     R25, (UART16552) >> 8
   \   00000020   0D80               ADD     R24, R0
   \   00000022   1F95               ADC     R25, R21
   \   00000024   0F82               ADD     R24, R18
   \   00000026   1F93               ADC     R25, R19
   \   00000028   01FC               MOVW    R31:R30, R25:R24
   \   0000002A   5BED               SUBI    R30, 189
   \   0000002C   4FFF               SBCI    R31, 255
   \   0000002E   81A0               LD      R26, Z
   \   00000030   E0B0               LDI     R27, 0
    546          
    547              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000032   ....               LDI     R16, LOW(UARTSEND)
   \   00000034   ....               LDI     R17, (UARTSEND) >> 8
   \   00000036   ........           CALL    OS_Use
    548          
    549              if (packlen > 0) {
   \   0000003A   30A1               CPI     R26, 1
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   07BB               CPC     R27, R27
   \   00000040   F40C               BRGE    $+2+2
   \   00000042   C042               RJMP    ??ReceivePTOData_0
    550                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   00000044   E010               LDI     R17, 0
   \   00000046   23AA               TST     R26
   \   00000048   F1F9               BREQ    ??ReceivePTOData_0
   \   0000004A   5B8C               SUBI    R24, 188
   \   0000004C   4F9F               SBCI    R25, 255
   \   0000004E   E024               LDI     R18, 4
   \   00000050   9E42               MUL     R4, R18
   \   00000052   0110               MOVW    R3:R2, R1:R0
    551                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
   \                     ??ReceivePTOData_1:
   \   00000054   01FC               MOVW    R31:R30, R25:R24
   \   00000056   8120               LD      R18, Z
   \   00000058   E030               LDI     R19, 0
    552                      if (ADCh < 14) {
   \   0000005A   302E               CPI     R18, 14
   \   0000005C   F578               BRCC    ??ReceivePTOData_2
    553                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000005E   8161               LDD     R22, Z+1
   \   00000060   ....               LDI     R30, LOW((TData + 59))
   \   00000062   ....               LDI     R31, HIGH((TData + 59))
   \   00000064   0FE2               ADD     R30, R18
   \   00000066   1FFB               ADC     R31, R27
   \   00000068   9140....           LDS     R20, PortPair
   \   0000006C   0121               MOVW    R5:R4, R3:R2
   \   0000006E   0E44               ADD     R4, R20
   \   00000070   1E5B               ADC     R5, R27
   \   00000072   E04E               LDI     R20, 14
   \   00000074   9E54               MUL     R5, R20
   \   00000076   2C50               MOV     R5, R0
   \   00000078   9E44               MUL     R4, R20
   \   0000007A   0C51               ADD     R5, R1
   \   0000007C   0DE0               ADD     R30, R0
   \   0000007E   1DF5               ADC     R31, R5
   \   00000080   8360               ST      Z, R22
    554                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   00000082   01FC               MOVW    R31:R30, R25:R24
   \   00000084   8142               LDD     R20, Z+2
   \   00000086   8153               LDD     R21, Z+3
   \   00000088   8164               LDD     R22, Z+4
   \   0000008A   8175               LDD     R23, Z+5
   \   0000008C   ....               LDI     R30, LOW((TData + 731))
   \   0000008E   ....               LDI     R31, HIGH((TData + 731))
   \   00000090   0F22               LSL     R18
   \   00000092   1F33               ROL     R19
   \   00000094   0F22               LSL     R18
   \   00000096   1F33               ROL     R19
   \   00000098   0FE2               ADD     R30, R18
   \   0000009A   1FF3               ADC     R31, R19
   \   0000009C   9120....           LDS     R18, PortPair
   \   000000A0   0121               MOVW    R5:R4, R3:R2
   \   000000A2   0E42               ADD     R4, R18
   \   000000A4   1E5B               ADC     R5, R27
   \   000000A6   E328               LDI     R18, 56
   \   000000A8   9E52               MUL     R5, R18
   \   000000AA   2C50               MOV     R5, R0
   \   000000AC   9E42               MUL     R4, R18
   \   000000AE   0C51               ADD     R5, R1
   \   000000B0   0DE0               ADD     R30, R0
   \   000000B2   1DF5               ADC     R31, R5
   \   000000B4   8340               ST      Z, R20
   \   000000B6   8351               STD     Z+1, R21
   \   000000B8   8362               STD     Z+2, R22
   \   000000BA   8373               STD     Z+3, R23
    555                      }
    556                  }
   \                     ??ReceivePTOData_2:
   \   000000BC   5F0A               SUBI    R16, 250
   \   000000BE   4F1F               SBCI    R17, 255
   \   000000C0   9606               ADIW    R25:R24, 6
   \   000000C2   170A               CP      R16, R26
   \   000000C4   071B               CPC     R17, R27
   \   000000C6   F230               BRCS    ??ReceivePTOData_1
    557              }
    558              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   000000C8   ....               LDI     R16, LOW(UARTSEND)
   \   000000CA   ....               LDI     R17, (UARTSEND) >> 8
   \   000000CC   ........           CALL    OS_Unuse
    559          }
   \   000000D0   9189               LD      R24, Y+
   \   000000D2   9199               LD      R25, Y+
   \   000000D4   91A9               LD      R26, Y+
   \   000000D6   91B9               LD      R27, Y+
   \   000000D8   9049               LD      R4, Y+
   \   000000DA   9059               LD      R5, Y+
   \   000000DC   9508               RET
    560          /*************************************************************************
    561          *
    562          *  Receive Wash Track and High Level data from AN_SGCNV
    563          *
    564          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    565          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   2FA0               MOV     R26, R16
   \   0000000A   01C9               MOVW    R25:R24, R19:R18
    566          
    567              // Fixed packet length
    568              //short packlen;
    569          
    570              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    571          
    572              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   0000000C   ....               LDI     R16, LOW(UARTSEND)
   \   0000000E   ....               LDI     R17, (UARTSEND) >> 8
   \   00000010   ........           CALL    OS_Use
    573              short Index = (ch * 4) + PortPair;
   \   00000014   E004               LDI     R16, 4
   \   00000016   9FA0               MUL     R26, R16
   \   00000018   0180               MOVW    R17:R16, R1:R0
   \   0000001A   9120....           LDS     R18, PortPair
   \   0000001E   E030               LDI     R19, 0
   \   00000020   0F02               ADD     R16, R18
   \   00000022   1F13               ADC     R17, R19
    574              // Check if we have time information included
    575              if (UART16552[ch].pRxBuffer[pointer - 1] == 4) {
   \   00000024   2F4A               MOV     R20, R26
   \   00000026   E028               LDI     R18, 8
   \   00000028   E031               LDI     R19, 1
   \   0000002A   9F43               MUL     R20, R19
   \   0000002C   2D50               MOV     R21, R0
   \   0000002E   9F42               MUL     R20, R18
   \   00000030   0D51               ADD     R21, R1
   \   00000032   ....               LDI     R22, LOW(UART16552)
   \   00000034   ....               LDI     R23, (UART16552) >> 8
   \   00000036   0D60               ADD     R22, R0
   \   00000038   1F75               ADC     R23, R21
   \   0000003A   0F68               ADD     R22, R24
   \   0000003C   1F79               ADC     R23, R25
   \   0000003E   01AB               MOVW    R21:R20, R23:R22
   \   00000040   5B4C               SUBI    R20, 188
   \   00000042   4F5F               SBCI    R21, 255
   \   00000044   5B6D               SUBI    R22, 189
   \   00000046   4F7F               SBCI    R23, 255
   \   00000048   0198               MOVW    R19:R18, R17:R16
   \   0000004A   0F22               LSL     R18
   \   0000004C   1F33               ROL     R19
   \   0000004E   0F22               LSL     R18
   \   00000050   1F33               ROL     R19
   \   00000052   0F22               LSL     R18
   \   00000054   1F33               ROL     R19
   \   00000056   ....               LDI     R24, LOW(TData)
   \   00000058   ....               LDI     R25, (TData) >> 8
   \   0000005A   0F82               ADD     R24, R18
   \   0000005C   1F93               ADC     R25, R19
   \   0000005E   019C               MOVW    R19:R18, R25:R24
   \   00000060   5625               SUBI    R18, 101
   \   00000062   4F3B               SBCI    R19, 251
   \   00000064   01FB               MOVW    R31:R30, R23:R22
   \   00000066   81B0               LD      R27, Z
   \   00000068   30B4               CPI     R27, 4
   \   0000006A   F4F1               BRNE    ??ReceiveWHData_0
    576                  for (short pnt = 0; pnt < 3; pnt++) {
   \   0000006C   E0B3               LDI     R27, 3
    577                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer + pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_1:
   \   0000006E   01FA               MOVW    R31:R30, R21:R20
   \   00000070   9001               LD      R0, Z+
   \   00000072   01AF               MOVW    R21:R20, R31:R30
   \   00000074   2411               CLR     R1
   \   00000076   01F9               MOVW    R31:R30, R19:R18
   \   00000078   9201               ST      Z+, R0
   \   0000007A   9211               ST      Z+, R1
   \   0000007C   019F               MOVW    R19:R18, R31:R30
    578                  }
   \   0000007E   95BA               DEC     R27
   \   00000080   F7B1               BRNE    ??ReceiveWHData_1
    579                  // 4th WashTrack dont come
    580                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \   00000082   558F               SUBI    R24, 95
   \   00000084   4F9B               SBCI    R25, 251
   \   00000086   01FC               MOVW    R31:R30, R25:R24
   \   00000088   8210               ST      Z, R1
   \   0000008A   8211               STD     Z+1, R1
    581                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 3]; // Hgh levels in 5th byte
   \   0000008C   01FB               MOVW    R31:R30, R23:R22
   \   0000008E   8124               LDD     R18, Z+4
   \   00000090   01F8               MOVW    R31:R30, R17:R16
   \   00000092   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   00000094   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   00000096   8320               ST      Z, R18
    582                  TData.RS4.WTTime[Index] = 0;
   \   00000098   0F00               LSL     R16
   \   0000009A   1F11               ROL     R17
   \   0000009C   01F8               MOVW    R31:R30, R17:R16
   \   0000009E   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000A0   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000A2   8210               ST      Z, R1
   \   000000A4   8211               STD     Z+1, R1
   \   000000A6   C01B               RJMP    ??ReceiveWHData_2
    583              } else {
    584                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   000000A8   E084               LDI     R24, 4
    585                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_3:
   \   000000AA   01FA               MOVW    R31:R30, R21:R20
   \   000000AC   9001               LD      R0, Z+
   \   000000AE   9011               LD      R1, Z+
   \   000000B0   01AF               MOVW    R21:R20, R31:R30
   \   000000B2   01F9               MOVW    R31:R30, R19:R18
   \   000000B4   9201               ST      Z+, R0
   \   000000B6   9211               ST      Z+, R1
   \   000000B8   019F               MOVW    R19:R18, R31:R30
    586                  }
   \   000000BA   958A               DEC     R24
   \   000000BC   F7B1               BRNE    ??ReceiveWHData_3
    587                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \   000000BE   01FB               MOVW    R31:R30, R23:R22
   \   000000C0   8521               LDD     R18, Z+9
   \   000000C2   01F8               MOVW    R31:R30, R17:R16
   \   000000C4   ....               SUBI    R30, LOW((-(TData + 1243) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, HIGH((-(TData + 1243) & 0xFFFF))
   \   000000C8   8320               ST      Z, R18
    588                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   000000CA   01FB               MOVW    R31:R30, R23:R22
   \   000000CC   8522               LDD     R18, Z+10
   \   000000CE   8533               LDD     R19, Z+11
   \   000000D0   0F00               LSL     R16
   \   000000D2   1F11               ROL     R17
   \   000000D4   01F8               MOVW    R31:R30, R17:R16
   \   000000D6   ....               SUBI    R30, LOW((-(TData + 1251) & 0xFFFF))
   \   000000D8   ....               SBCI    R31, HIGH((-(TData + 1251) & 0xFFFF))
   \   000000DA   8320               ST      Z, R18
   \   000000DC   8331               STD     Z+1, R19
    589              }
    590              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_2:
   \   000000DE   0FAA               LSL     R26
   \   000000E0   0FAA               LSL     R26
   \   000000E2   9100....           LDS     R16, PortPair
   \   000000E6   0FA0               ADD     R26, R16
   \   000000E8   E001               LDI     R16, 1
   \   000000EA   E010               LDI     R17, 0
   \   000000EC   2F4A               MOV     R20, R26
   \   000000EE   ........           CALL    ?S_SHL_L02
   \   000000F2   9110....           LDS     R17, (TData + 1267)
   \   000000F6   2B10               OR      R17, R16
   \   000000F8   9310....           STS     (TData + 1267), R17
    591              OS_Unuse(&UARTSEND);
   \   000000FC   ....               LDI     R16, LOW(UARTSEND)
   \   000000FE   ....               LDI     R17, (UARTSEND) >> 8
   \   00000100   ........           CALL    OS_Unuse
    592          }
   \   00000104   ....               RJMP    ?Subroutine2
    593          
    594          
    595          /************************************************************************
    596          *
    597          *  Receive raw data for pressure, temp and other from AN_SGCNV
    598          *
    599          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9199               LD      R25, Y+
   \   00000004   91A9               LD      R26, Y+
   \   00000006   91B9               LD      R27, Y+
   \   00000008   9049               LD      R4, Y+
   \   0000000A   9059               LD      R5, Y+
   \   0000000C   9069               LD      R6, Y+
   \   0000000E   9079               LD      R7, Y+
   \   00000010   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    600          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01B9               MOVW    R23:R22, R19:R18
    601          
    602              char pnt, ADCh;
    603              short packlen;
    604          
    605              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000012   2F40               MOV     R20, R16
   \   00000014   E028               LDI     R18, 8
   \   00000016   E031               LDI     R19, 1
   \   00000018   9F43               MUL     R20, R19
   \   0000001A   2D50               MOV     R21, R0
   \   0000001C   9F42               MUL     R20, R18
   \   0000001E   0D51               ADD     R21, R1
   \   00000020   ....               LDI     R18, LOW(UART16552)
   \   00000022   ....               LDI     R19, (UART16552) >> 8
   \   00000024   0D20               ADD     R18, R0
   \   00000026   1F35               ADC     R19, R21
   \   00000028   01F9               MOVW    R31:R30, R19:R18
   \   0000002A   0FE6               ADD     R30, R22
   \   0000002C   1FF7               ADC     R31, R23
   \   0000002E   5BED               SUBI    R30, 189
   \   00000030   4FFF               SBCI    R31, 255
   \   00000032   8140               LD      R20, Z
   \   00000034   E050               LDI     R21, 0
    606          
    607              if (packlen > 0) {
   \   00000036   3041               CPI     R20, 1
   \   00000038   0755               CPC     R21, R21
   \   0000003A   F1DC               BRLT    ??ReceiveRData_0
    608                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   0000003C   E080               LDI     R24, 0
   \   0000003E   E014               LDI     R17, 4
   \   00000040   9F01               MUL     R16, R17
   \   00000042   0110               MOVW    R3:R2, R1:R0
   \                     ??ReceiveRData_1:
   \   00000044   018B               MOVW    R17:R16, R23:R22
   \   00000046   0F08               ADD     R16, R24
   \   00000048   1F15               ADC     R17, R21
   \   0000004A   01F9               MOVW    R31:R30, R19:R18
   \   0000004C   0FE0               ADD     R30, R16
   \   0000004E   1FF1               ADC     R31, R17
   \   00000050   5BEC               SUBI    R30, 188
   \   00000052   4FFF               SBCI    R31, 255
   \   00000054   8190               LD      R25, Z
    609                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    610                      if (ADCh < 14) {
   \   00000056   309E               CPI     R25, 14
   \   00000058   F540               BRCC    ??ReceiveRData_2
    611                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000005A   8041               LDD     R4, Z+1
   \   0000005C   ....               LDI     R26, LOW((TData + 59))
   \   0000005E   ....               LDI     R27, HIGH((TData + 59))
   \   00000060   0FA9               ADD     R26, R25
   \   00000062   1FB5               ADC     R27, R21
   \   00000064   9100....           LDS     R16, PortPair
   \   00000068   0131               MOVW    R7:R6, R3:R2
   \   0000006A   0E60               ADD     R6, R16
   \   0000006C   1E75               ADC     R7, R21
   \   0000006E   E00E               LDI     R16, 14
   \   00000070   9E70               MUL     R7, R16
   \   00000072   2C70               MOV     R7, R0
   \   00000074   9E60               MUL     R6, R16
   \   00000076   0C71               ADD     R7, R1
   \   00000078   0DA0               ADD     R26, R0
   \   0000007A   1DB7               ADC     R27, R7
   \   0000007C   924C               ST      X, R4
    612                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000007E   81A2               LDD     R26, Z+2
   \   00000080   81B3               LDD     R27, Z+3
   \   00000082   ....               LDI     R30, LOW((TData + 283))
   \   00000084   ....               LDI     R31, HIGH((TData + 283))
   \   00000086   E002               LDI     R16, 2
   \   00000088   9F90               MUL     R25, R16
   \   0000008A   0DE0               ADD     R30, R0
   \   0000008C   1DF1               ADC     R31, R1
   \   0000008E   9100....           LDS     R16, PortPair
   \   00000092   0121               MOVW    R5:R4, R3:R2
   \   00000094   0E40               ADD     R4, R16
   \   00000096   1E55               ADC     R5, R21
   \   00000098   E10C               LDI     R16, 28
   \   0000009A   9E50               MUL     R5, R16
   \   0000009C   2C50               MOV     R5, R0
   \   0000009E   9E40               MUL     R4, R16
   \   000000A0   0C51               ADD     R5, R1
   \   000000A2   0DE0               ADD     R30, R0
   \   000000A4   1DF5               ADC     R31, R5
   \   000000A6   83A0               ST      Z, R26
   \   000000A8   83B1               STD     Z+1, R27
    613                      }
    614                  }
   \                     ??ReceiveRData_2:
   \   000000AA   5F8C               SUBI    R24, 252
   \   000000AC   1784               CP      R24, R20
   \   000000AE   0755               CPC     R21, R21
   \   000000B0   F24C               BRLT    ??ReceiveRData_1
    615              }
    616          }
   \                     ??ReceiveRData_0:
   \   000000B2   ....               RJMP    ?Subroutine1
    617          
    618          /*************************************************************************
    619          *
    620          *  Receive cal data  from AN_SGCNV
    621          *
    622          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    623          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   93BA               ST      -Y, R27
   \   0000000A   93AA               ST      -Y, R26
   \   0000000C   939A               ST      -Y, R25
   \   0000000E   938A               ST      -Y, R24
   \   00000010                      REQUIRE ?Register_R4_is_cg_reg
   \   00000010                      REQUIRE ?Register_R5_is_cg_reg
   \   00000010                      REQUIRE ?Register_R6_is_cg_reg
   \   00000010                      REQUIRE ?Register_R7_is_cg_reg
   \   00000010   01B9               MOVW    R23:R22, R19:R18
    624          
    625              char pnt, ADCh;
    626              short packlen;
    627          
    628              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000012   2F40               MOV     R20, R16
   \   00000014   E028               LDI     R18, 8
   \   00000016   E031               LDI     R19, 1
   \   00000018   9F43               MUL     R20, R19
   \   0000001A   2D50               MOV     R21, R0
   \   0000001C   9F42               MUL     R20, R18
   \   0000001E   0D51               ADD     R21, R1
   \   00000020   ....               LDI     R18, LOW(UART16552)
   \   00000022   ....               LDI     R19, (UART16552) >> 8
   \   00000024   0D20               ADD     R18, R0
   \   00000026   1F35               ADC     R19, R21
   \   00000028   01F9               MOVW    R31:R30, R19:R18
   \   0000002A   0FE6               ADD     R30, R22
   \   0000002C   1FF7               ADC     R31, R23
   \   0000002E   5BED               SUBI    R30, 189
   \   00000030   4FFF               SBCI    R31, 255
   \   00000032   8140               LD      R20, Z
   \   00000034   E050               LDI     R21, 0
    629          
    630              if (packlen > 0) {
   \   00000036   3041               CPI     R20, 1
   \   00000038   0755               CPC     R21, R21
   \   0000003A   F1DC               BRLT    ??ReceiveCData_0
    631                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   0000003C   E080               LDI     R24, 0
   \   0000003E   E014               LDI     R17, 4
   \   00000040   9F01               MUL     R16, R17
   \   00000042   0110               MOVW    R3:R2, R1:R0
   \                     ??ReceiveCData_1:
   \   00000044   018B               MOVW    R17:R16, R23:R22
   \   00000046   0F08               ADD     R16, R24
   \   00000048   1F15               ADC     R17, R21
   \   0000004A   01F9               MOVW    R31:R30, R19:R18
   \   0000004C   0FE0               ADD     R30, R16
   \   0000004E   1FF1               ADC     R31, R17
   \   00000050   5BEC               SUBI    R30, 188
   \   00000052   4FFF               SBCI    R31, 255
   \   00000054   8190               LD      R25, Z
    632                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    633                      if (ADCh < 14) {
   \   00000056   309E               CPI     R25, 14
   \   00000058   F540               BRCC    ??ReceiveCData_2
    634                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000005A   8041               LDD     R4, Z+1
   \   0000005C   ....               LDI     R26, LOW((TData + 59))
   \   0000005E   ....               LDI     R27, HIGH((TData + 59))
   \   00000060   0FA9               ADD     R26, R25
   \   00000062   1FB5               ADC     R27, R21
   \   00000064   9100....           LDS     R16, PortPair
   \   00000068   0131               MOVW    R7:R6, R3:R2
   \   0000006A   0E60               ADD     R6, R16
   \   0000006C   1E75               ADC     R7, R21
   \   0000006E   E00E               LDI     R16, 14
   \   00000070   9E70               MUL     R7, R16
   \   00000072   2C70               MOV     R7, R0
   \   00000074   9E60               MUL     R6, R16
   \   00000076   0C71               ADD     R7, R1
   \   00000078   0DA0               ADD     R26, R0
   \   0000007A   1DB7               ADC     R27, R7
   \   0000007C   924C               ST      X, R4
    635                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000007E   81A2               LDD     R26, Z+2
   \   00000080   81B3               LDD     R27, Z+3
   \   00000082   ....               LDI     R30, LOW((TData + 507))
   \   00000084   ....               LDI     R31, HIGH((TData + 507))
   \   00000086   E002               LDI     R16, 2
   \   00000088   9F90               MUL     R25, R16
   \   0000008A   0DE0               ADD     R30, R0
   \   0000008C   1DF1               ADC     R31, R1
   \   0000008E   9100....           LDS     R16, PortPair
   \   00000092   0121               MOVW    R5:R4, R3:R2
   \   00000094   0E40               ADD     R4, R16
   \   00000096   1E55               ADC     R5, R21
   \   00000098   E10C               LDI     R16, 28
   \   0000009A   9E50               MUL     R5, R16
   \   0000009C   2C50               MOV     R5, R0
   \   0000009E   9E40               MUL     R4, R16
   \   000000A0   0C51               ADD     R5, R1
   \   000000A2   0DE0               ADD     R30, R0
   \   000000A4   1DF5               ADC     R31, R5
   \   000000A6   83A0               ST      Z, R26
   \   000000A8   83B1               STD     Z+1, R27
    636                      }
    637                  }
   \                     ??ReceiveCData_2:
   \   000000AA   5F8C               SUBI    R24, 252
   \   000000AC   1784               CP      R24, R20
   \   000000AE   0755               CPC     R21, R21
   \   000000B0   F24C               BRLT    ??ReceiveCData_1
    638              }
    639          }
   \                     ??ReceiveCData_0:
   \   000000B2                      REQUIRE ?Subroutine1
   \   000000B2                      ;               // Fall through to label ?Subroutine1
    640          
    641          /*************************************************************************
    642          *
    643          *  Receive card status  from AN_SGCNV
    644          *
    645          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    646          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
    647          
    648              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
   \   00000002   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000004   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000006   0FE2               ADD     R30, R18
   \   00000008   1FF3               ADC     R31, R19
   \   0000000A   2F40               MOV     R20, R16
   \   0000000C   E028               LDI     R18, 8
   \   0000000E   E031               LDI     R19, 1
   \   00000010   9F43               MUL     R20, R19
   \   00000012   2D50               MOV     R21, R0
   \   00000014   9F42               MUL     R20, R18
   \   00000016   0D51               ADD     R21, R1
   \   00000018   0DE0               ADD     R30, R0
   \   0000001A   1FF5               ADC     R31, R21
   \   0000001C   E014               LDI     R17, 4
   \   0000001E   9F01               MUL     R16, R17
   \   00000020   8120               LD      R18, Z
   \   00000022   9100....           LDS     R16, PortPair
   \   00000026   E010               LDI     R17, 0
   \   00000028   01A0               MOVW    R21:R20, R1:R0
   \   0000002A   0F40               ADD     R20, R16
   \   0000002C   1F51               ADC     R21, R17
   \   0000002E   01DA               MOVW    R27:R26, R21:R20
   \   00000030   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   00000032   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000034   932C               ST      X, R18
    649              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000036   8121               LDD     R18, Z+1
   \   00000038   9100....           LDS     R16, PortPair
   \   0000003C   0E00               ADD     R0, R16
   \   0000003E   1E11               ADC     R1, R17
   \   00000040   01F0               MOVW    R31:R30, R1:R0
   \   00000042   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000046   AB23               STD     Z+51, R18
    650          }
   \   00000048   01DB               MOVW    R27:R26, R23:R22
   \   0000004A   9508               RET
    651          
    652          /*************************************************************************
    653          *
    654          *  Receive config data from AN_SGCNV
    655          *
    656          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    657          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   2F40               MOV     R20, R16
    658          
    659              char i, ADCh;
    660          
    661              for (i = 0; i < 14; i++) {
   \   00000006   ....               LDI     R26, LOW((UART16552 + 68))
   \   00000008   ....               LDI     R27, HIGH((UART16552 + 68))
   \   0000000A   0FA2               ADD     R26, R18
   \   0000000C   1FB3               ADC     R27, R19
   \   0000000E   2F20               MOV     R18, R16
   \   00000010   E008               LDI     R16, 8
   \   00000012   E011               LDI     R17, 1
   \   00000014   9F21               MUL     R18, R17
   \   00000016   2D30               MOV     R19, R0
   \   00000018   9F20               MUL     R18, R16
   \   0000001A   0D31               ADD     R19, R1
   \   0000001C   0DA0               ADD     R26, R0
   \   0000001E   1FB3               ADC     R27, R19
   \   00000020   E02E               LDI     R18, 14
   \   00000022   E004               LDI     R16, 4
   \   00000024   9F40               MUL     R20, R16
   \   00000026   01A0               MOVW    R21:R20, R1:R0
    662                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveConfigData_0:
   \   00000028   01FD               MOVW    R31:R30, R27:R26
   \   0000002A   8160               LD      R22, Z
    663                  if (ADCh < 14) {
   \   0000002C   306E               CPI     R22, 14
   \   0000002E   F538               BRCC    ??ReceiveConfigData_1
    664                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000030   8131               LDD     R19, Z+1
   \   00000032   ....               LDI     R30, LOW((TData + 59))
   \   00000034   ....               LDI     R31, HIGH((TData + 59))
   \   00000036   E070               LDI     R23, 0
   \   00000038   0FE6               ADD     R30, R22
   \   0000003A   1FF7               ADC     R31, R23
   \   0000003C   9100....           LDS     R16, PortPair
   \   00000040   E010               LDI     R17, 0
   \   00000042   011A               MOVW    R3:R2, R21:R20
   \   00000044   0E20               ADD     R2, R16
   \   00000046   1E37               ADC     R3, R23
   \   00000048   E00E               LDI     R16, 14
   \   0000004A   9E30               MUL     R3, R16
   \   0000004C   2C30               MOV     R3, R0
   \   0000004E   9E20               MUL     R2, R16
   \   00000050   0C31               ADD     R3, R1
   \   00000052   0DE0               ADD     R30, R0
   \   00000054   1DF3               ADC     R31, R3
   \   00000056   8330               ST      Z, R19
    665                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   8132               LDD     R19, Z+2
   \   0000005C   ....               LDI     R30, LOW((TData + 171))
   \   0000005E   ....               LDI     R31, HIGH((TData + 171))
   \   00000060   0FE6               ADD     R30, R22
   \   00000062   1FF7               ADC     R31, R23
   \   00000064   9100....           LDS     R16, PortPair
   \   00000068   01BA               MOVW    R23:R22, R21:R20
   \   0000006A   0F60               ADD     R22, R16
   \   0000006C   1F71               ADC     R23, R17
   \   0000006E   E00E               LDI     R16, 14
   \   00000070   9F70               MUL     R23, R16
   \   00000072   2D70               MOV     R23, R0
   \   00000074   9F60               MUL     R22, R16
   \   00000076   0D71               ADD     R23, R1
   \   00000078   0DE0               ADD     R30, R0
   \   0000007A   1FF7               ADC     R31, R23
   \   0000007C   8330               ST      Z, R19
    666                  }
    667                  pointer += 2;
    668              }
   \                     ??ReceiveConfigData_1:
   \   0000007E   9613               ADIW    R27:R26, 3
   \   00000080   952A               DEC     R18
   \   00000082   F691               BRNE    ??ReceiveConfigData_0
    669          }
   \   00000084   91A9               LD      R26, Y+
   \   00000086   91B9               LD      R27, Y+
   \   00000088   9508               RET
    670          
    671          /*************************************************************************
    672          *
    673          *  Receive eeprom data from AN_SGCNV
    674          *
    675          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    676          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   2F5B               MOV     R21, R27
   \   00000002   2F6A               MOV     R22, R26
    677          
    678              short i;
    679          
    680              TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000004   E312               LDI     R17, 50
   \   00000006   9F01               MUL     R16, R17
   \   00000008   ....               LDI     R30, LOW(TData)
   \   0000000A   ....               LDI     R31, (TData) >> 8
   \   0000000C   0DE0               ADD     R30, R0
   \   0000000E   1DF1               ADC     R31, R1
   \   00000010   01DF               MOVW    R27:R26, R31:R30
   \   00000012   56AC               SUBI    R26, 108
   \   00000014   4FBA               SBCI    R27, 250
   \   00000016   E011               LDI     R17, 1
   \   00000018   931D               ST      X+, R17
    681              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \   0000001A   2F10               MOV     R17, R16
   \   0000001C   0F11               LSL     R17
   \   0000001E   0F11               LSL     R17
   \   00000020   9140....           LDS     R20, PortPair
   \   00000024   0F14               ADD     R17, R20
   \   00000026   931C               ST      X, R17
    682              for (i = 2; i < (41 + 2); i++) {
   \   00000028   ....               LDI     R26, LOW((UART16552 + 68))
   \   0000002A   ....               LDI     R27, HIGH((UART16552 + 68))
   \   0000002C   0FA2               ADD     R26, R18
   \   0000002E   1FB3               ADC     R27, R19
   \   00000030   2F20               MOV     R18, R16
   \   00000032   E008               LDI     R16, 8
   \   00000034   E011               LDI     R17, 1
   \   00000036   9F21               MUL     R18, R17
   \   00000038   2D30               MOV     R19, R0
   \   0000003A   9F20               MUL     R18, R16
   \   0000003C   0D31               ADD     R19, R1
   \   0000003E   0DA0               ADD     R26, R0
   \   00000040   1FB3               ADC     R27, R19
   \   00000042   56EA               SUBI    R30, 106
   \   00000044   4FFA               SBCI    R31, 250
   \   00000046   E209               LDI     R16, 41
    683                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveCardEEPROMData_0:
   \   00000048   911D               LD      R17, X+
   \   0000004A   9311               ST      Z+, R17
    684              }
   \   0000004C   950A               DEC     R16
   \   0000004E   F7E1               BRNE    ??ReceiveCardEEPROMData_0
    685          }
   \   00000050   2FA6               MOV     R26, R22
   \   00000052   2FB5               MOV     R27, R21
   \   00000054   9508               RET
    686          
    687          /*************************************************************************
    688          *
    689          * Build send packet header for AN-SGCNV
    690          *
    691          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    692          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   01AD               MOVW    R21:R20, R27:R26
    693          
    694              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   2F20               MOV     R18, R16
   \   00000004   E008               LDI     R16, 8
   \   00000006   E011               LDI     R17, 1
   \   00000008   9F21               MUL     R18, R17
   \   0000000A   2D30               MOV     R19, R0
   \   0000000C   9F20               MUL     R18, R16
   \   0000000E   0D31               ADD     R19, R1
   \   00000010   ....               LDI     R30, LOW(UART16552)
   \   00000012   ....               LDI     R31, (UART16552) >> 8
   \   00000014   0DE0               ADD     R30, R0
   \   00000016   1FF3               ADC     R31, R19
   \   00000018   01DF               MOVW    R27:R26, R31:R30
   \   0000001A   54A4               SUBI    R26, 68
   \   0000001C   4FBF               SBCI    R27, 255
   \   0000001E   E000               LDI     R16, 0
   \   00000020   930D               ST      X+, R16
   \   00000022   930D               ST      X+, R16
    695              UART16552[ch].RxLast = 0;
   \   00000024   930D               ST      X+, R16
   \   00000026   930C               ST      X, R16
    696              UART16552[ch].TxLast = 0;
   \   00000028   01DF               MOVW    R27:R26, R31:R30
   \   0000002A   96DE               ADIW    R27:R26, 62
   \   0000002C   930D               ST      X+, R16
   \   0000002E   930C               ST      X, R16
    697          
    698              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \   00000030   E002               LDI     R16, 2
   \   00000032   8300               ST      Z, R16
    699              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
   \   00000034   8301               STD     Z+1, R16
    700              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \   00000036   E000               LDI     R16, 0
   \   00000038   8302               STD     Z+2, R16
    701              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   0000003A   EF0D               LDI     R16, 253
   \   0000003C   8303               STD     Z+3, R16
    702              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   0000003E   E000               LDI     R16, 0
   \   00000040   8304               STD     Z+4, R16
    703              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   00000042   8305               STD     Z+5, R16
    704          }
   \   00000044   01DA               MOVW    R27:R26, R21:R20
   \   00000046   9508               RET
    705          
    706          /*************************************************************************
    707          *
    708          * Build  packet tail
    709          *
    710          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    711          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   2F60               MOV     R22, R16
    712          
    713              Uart_BuildHeader16552(ch);                                // fist build the header
   \   0000000A   ....               RCALL   Uart_BuildHeader16552
    714          
    715              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   0000000C   2F26               MOV     R18, R22
   \   0000000E   E008               LDI     R16, 8
   \   00000010   E011               LDI     R17, 1
   \   00000012   9F21               MUL     R18, R17
   \   00000014   2D30               MOV     R19, R0
   \   00000016   9F20               MUL     R18, R16
   \   00000018   0D31               ADD     R19, R1
   \   0000001A   ....               LDI     R26, LOW(UART16552)
   \   0000001C   ....               LDI     R27, (UART16552) >> 8
   \   0000001E   0DA0               ADD     R26, R0
   \   00000020   1FB3               ADC     R27, R19
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   AD04               LDD     R16, Z+60
   \   00000026   AD15               LDD     R17, Z+61
   \   00000028   01C8               MOVW    R25:R24, R17:R16
   \   0000002A   9601               ADIW    R25:R24, 1
   \   0000002C   AF84               STD     Z+60, R24
   \   0000002E   AF95               STD     Z+61, R25
   \   00000030   0FE0               ADD     R30, R16
   \   00000032   1FF1               ADC     R31, R17
   \   00000034   E001               LDI     R16, 1
   \   00000036   8300               ST      Z, R16
    716              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   AD04               LDD     R16, Z+60
   \   0000003C   AD15               LDD     R17, Z+61
   \   0000003E   01C8               MOVW    R25:R24, R17:R16
   \   00000040   9601               ADIW    R25:R24, 1
   \   00000042   AF84               STD     Z+60, R24
   \   00000044   AF95               STD     Z+61, R25
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   8300               ST      Z, R16
    717          
    718              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   AD05               LDD     R16, Z+61
   \   00000052   8304               STD     Z+4, R16
    719              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   00000054   AD04               LDD     R16, Z+60
   \   00000056   8305               STD     Z+5, R16
    720          
    721          
    722              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   00000058   AC04               LDD     R0, Z+60
   \   0000005A   AC15               LDD     R1, Z+61
   \   0000005C   01C0               MOVW    R25:R24, R1:R0
   \   0000005E   E040               LDI     R20, 0
   \   00000060   3083               CPI     R24, 3
   \   00000062   0614               CPC     R1, R20
   \   00000064   F088               BRCS    ??Uart_BuildTail16552_0
   \   00000066   018D               MOVW    R17:R16, R27:R26
   \   00000068   5F0E               SUBI    R16, 254
   \   0000006A   4F1F               SBCI    R17, 255
   \   0000006C   9702               SBIW    R25:R24, 2
   \   0000006E   ....               LDI     R19, (crc) >> 16
   \                     ??Uart_BuildTail16552_1:
   \   00000070   01F8               MOVW    R31:R30, R17:R16
   \   00000072   9121               LD      R18, Z+
   \   00000074   018F               MOVW    R17:R16, R31:R30
   \   00000076   2742               EOR     R20, R18
   \   00000078   2FE4               MOV     R30, R20
   \   0000007A   E0F0               LDI     R31, 0
   \   0000007C   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   0000007E   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000080   BF3B               OUT     0x3B, R19
   \   00000082   9146               ELPM    R20, Z
   \   00000084   9701               SBIW    R25:R24, 1
   \   00000086   F7A1               BRNE    ??Uart_BuildTail16552_1
   \                     ??Uart_BuildTail16552_0:
   \   00000088   01FD               MOVW    R31:R30, R27:R26
   \   0000008A   0DE0               ADD     R30, R0
   \   0000008C   1DF1               ADC     R31, R1
   \   0000008E   8340               ST      Z, R20
    723              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \   00000090   01FD               MOVW    R31:R30, R27:R26
   \   00000092   AD04               LDD     R16, Z+60
   \   00000094   AD15               LDD     R17, Z+61
   \   00000096   5F0F               SUBI    R16, 255
   \   00000098   4F1F               SBCI    R17, 255
   \   0000009A   AF04               STD     Z+60, R16
   \   0000009C   AF15               STD     Z+61, R17
    724                                                                           // to ANSI standard !!!!
    725          
    726              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   0000009E   AD04               LDD     R16, Z+60
   \   000000A0   01C8               MOVW    R25:R24, R17:R16
   \   000000A2   9601               ADIW    R25:R24, 1
   \   000000A4   AF84               STD     Z+60, R24
   \   000000A6   AF95               STD     Z+61, R25
   \   000000A8   0FE0               ADD     R30, R16
   \   000000AA   1FF1               ADC     R31, R17
   \   000000AC   E003               LDI     R16, 3
   \   000000AE   8300               ST      Z, R16
    727              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \   000000B0   01FD               MOVW    R31:R30, R27:R26
   \   000000B2   AD04               LDD     R16, Z+60
   \   000000B4   AD15               LDD     R17, Z+61
   \   000000B6   01C8               MOVW    R25:R24, R17:R16
   \   000000B8   9601               ADIW    R25:R24, 1
   \   000000BA   AF84               STD     Z+60, R24
   \   000000BC   AF95               STD     Z+61, R25
   \   000000BE   0FE0               ADD     R30, R16
   \   000000C0   1FF1               ADC     R31, R17
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   8300               ST      Z, R16
    728          
    729              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \   000000C6   01FD               MOVW    R31:R30, R27:R26
   \   000000C8   AD84               LDD     R24, Z+60
   \   000000CA   AD95               LDD     R25, Z+61
   \   000000CC   9701               SBIW    R25:R24, 1
   \   000000CE   5CE0               SUBI    R30, 192
   \   000000D0   4FFF               SBCI    R31, 255
   \   000000D2   8380               ST      Z, R24
   \   000000D4   8391               STD     Z+1, R25
    730              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   000000D6   01FD               MOVW    R31:R30, R27:R26
   \   000000D8   E001               LDI     R16, 1
   \   000000DA   AF06               STD     Z+62, R16
   \   000000DC   E000               LDI     R16, 0
   \   000000DE   AF07               STD     Z+63, R16
    731              GoToSendUART16552(ch);                                 // go to sync modus for recive
   \   000000E0   54A4               SUBI    R26, 68
   \   000000E2   4FBF               SBCI    R27, 255
   \   000000E4   01FD               MOVW    R31:R30, R27:R26
   \   000000E6   8307               STD     Z+7, R16
   \   000000E8   E003               LDI     R16, 3
   \   000000EA   8306               STD     Z+6, R16
   \   000000EC   E000               LDI     R16, 0
   \   000000EE   8300               ST      Z, R16
   \   000000F0   8301               STD     Z+1, R16
   \   000000F2   8702               STD     Z+10, R16
   \   000000F4   8703               STD     Z+11, R16
    732              if (ch == 0) {                                           // Turn on TXE for channel
   \   000000F6   2366               TST     R22
   \   000000F8   F471               BRNE    ??Uart_BuildTail16552_2
    733                  //OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
    734                  U0_MCR |= RTS;                                    // set RTS on
   \   000000FA   9100220C           LDS     R16, 8716
   \   000000FE   6002               ORI     R16, 0x02
   \   00000100   9300220C           STS     8716, R16
    735                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000104   E104               LDI     R16, 20
   \   00000106   E010               LDI     R17, 0
   \   00000108   ........           CALL    OS_Delay
    736                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \   0000010C   9100....           LDS     R16, UART16552
   \   00000110   93002208           STS     8712, R16
   \   00000114   C00F               RJMP    ??Uart_BuildTail16552_3
    737              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_2:
   \   00000116   3061               CPI     R22, 1
   \   00000118   F469               BRNE    ??Uart_BuildTail16552_3
    738                  //OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
    739                  U1_MCR |= RTS;                                      // set RTS on
   \   0000011A   91002204           LDS     R16, 8708
   \   0000011E   6002               ORI     R16, 0x02
   \   00000120   93002204           STS     8708, R16
    740                  OS_Delay(20);                                           // Wait (ms) for tx stable
   \   00000124   E104               LDI     R16, 20
   \   00000126   E010               LDI     R17, 0
   \   00000128   ........           CALL    OS_Delay
    741                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \   0000012C   9100....           LDS     R16, (UART16552 + 264)
   \   00000130   93002200           STS     8704, R16
    742              }
    743          }
   \                     ??Uart_BuildTail16552_3:
   \   00000134                      REQUIRE ?Subroutine2
   \   00000134                      ;               // Fall through to label ?Subroutine2
    744          
    745          /*************************************************************************
    746          *
    747          * Build send request for system status on WIS
    748          *
    749          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    750          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    751          
    752              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   AD04               LDD     R16, Z+60
   \   0000001C   AD15               LDD     R17, Z+61
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   E604               LDI     R16, 100
   \   00000032   ....               RJMP    ??Subroutine4_0
    753              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    754          
    755          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine4_0:
   \   00000000   930C               ST      X, R16
   \   00000002   AD04               LDD     R16, Z+60
   \   00000004   AD15               LDD     R17, Z+61
   \   00000006   01C8               MOVW    R25:R24, R17:R16
   \   00000008   9601               ADIW    R25:R24, 1
   \   0000000A   01DF               MOVW    R27:R26, R31:R30
   \   0000000C   96DC               ADIW    R27:R26, 60
   \   0000000E   938D               ST      X+, R24
   \   00000010   939C               ST      X, R25
   \   00000012   0FE0               ADD     R30, R16
   \   00000014   1FF1               ADC     R31, R17
   \   00000016   E000               LDI     R16, 0
   \   00000018   8300               ST      Z, R16
   \   0000001A   01CA               MOVW    R25:R24, R21:R20
   \   0000001C   01DB               MOVW    R27:R26, R23:R22
   \   0000001E   9508               RET
    756          
    757          /*************************************************************************
    758          *
    759          * Build send request for WIS protocoler on WIS
    760          *
    761          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    762          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004   2F39               MOV     R19, R25
   \   00000006   2F68               MOV     R22, R24
   \   00000008   2F21               MOV     R18, R17
    763          
    764              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   0000000A   2F40               MOV     R20, R16
   \   0000000C   E008               LDI     R16, 8
   \   0000000E   E011               LDI     R17, 1
   \   00000010   9F41               MUL     R20, R17
   \   00000012   2D50               MOV     R21, R0
   \   00000014   9F40               MUL     R20, R16
   \   00000016   0D51               ADD     R21, R1
   \   00000018   ....               LDI     R30, LOW(UART16552)
   \   0000001A   ....               LDI     R31, (UART16552) >> 8
   \   0000001C   0DE0               ADD     R30, R0
   \   0000001E   1FF5               ADC     R31, R21
   \   00000020   AD04               LDD     R16, Z+60
   \   00000022   AD15               LDD     R17, Z+61
   \   00000024   01C8               MOVW    R25:R24, R17:R16
   \   00000026   9601               ADIW    R25:R24, 1
   \   00000028   01DF               MOVW    R27:R26, R31:R30
   \   0000002A   96DC               ADIW    R27:R26, 60
   \   0000002C   938D               ST      X+, R24
   \   0000002E   939C               ST      X, R25
   \   00000030   01DF               MOVW    R27:R26, R31:R30
   \   00000032   0FA0               ADD     R26, R16
   \   00000034   1FB1               ADC     R27, R17
   \   00000036   E606               LDI     R16, 102
   \   00000038   930C               ST      X, R16
    765              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
   \   0000003A   AD04               LDD     R16, Z+60
   \   0000003C   AD15               LDD     R17, Z+61
   \   0000003E   01C8               MOVW    R25:R24, R17:R16
   \   00000040   9601               ADIW    R25:R24, 1
   \   00000042   01DF               MOVW    R27:R26, R31:R30
   \   00000044   96DC               ADIW    R27:R26, 60
   \   00000046   938D               ST      X+, R24
   \   00000048   939C               ST      X, R25
   \   0000004A   01DF               MOVW    R27:R26, R31:R30
   \   0000004C   0FA0               ADD     R26, R16
   \   0000004E   1FB1               ADC     R27, R17
   \   00000050   E001               LDI     R16, 1
   \   00000052   930C               ST      X, R16
    766              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \   00000054   AD04               LDD     R16, Z+60
   \   00000056   AD15               LDD     R17, Z+61
   \   00000058   01C8               MOVW    R25:R24, R17:R16
   \   0000005A   9601               ADIW    R25:R24, 1
   \   0000005C   01DF               MOVW    R27:R26, R31:R30
   \   0000005E   96DC               ADIW    R27:R26, 60
   \   00000060   938D               ST      X+, R24
   \   00000062   939C               ST      X, R25
   \   00000064   0FE0               ADD     R30, R16
   \   00000066   1FF1               ADC     R31, R17
   \   00000068   8320               ST      Z, R18
    767          
    768          }
   \   0000006A   2F86               MOV     R24, R22
   \   0000006C   2F93               MOV     R25, R19
   \   0000006E   2DA2               MOV     R26, R2
   \   00000070   2FB7               MOV     R27, R23
   \   00000072   9508               RET
    769          
    770          /*************************************************************************
    771          *
    772          * Build send request for measure data to Water ingress
    773          *
    774          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    775          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    776          
    777              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   AD04               LDD     R16, Z+60
   \   0000001C   AD15               LDD     R17, Z+61
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   E605               LDI     R16, 101
   \   00000032   ....               RJMP    ?Subroutine0
    778              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    779              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    780          
    781          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   930C               ST      X, R16
   \   00000002   AD04               LDD     R16, Z+60
   \   00000004   AD15               LDD     R17, Z+61
   \   00000006   01C8               MOVW    R25:R24, R17:R16
   \   00000008   9601               ADIW    R25:R24, 1
   \   0000000A   01DF               MOVW    R27:R26, R31:R30
   \   0000000C   96DC               ADIW    R27:R26, 60
   \   0000000E   938D               ST      X+, R24
   \   00000010   939C               ST      X, R25
   \   00000012   01DF               MOVW    R27:R26, R31:R30
   \   00000014   0FA0               ADD     R26, R16
   \   00000016   1FB1               ADC     R27, R17
   \   00000018   E001               LDI     R16, 1
   \   0000001A                      REQUIRE ??Subroutine4_0
   \   0000001A                      ;               // Fall through to label ??Subroutine4_0
    782          
    783          
    784          /*************************************************************************
    785          *
    786          * Build send request for GODA measurement
    787          *
    788          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    789          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    790          
    791              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   AD04               LDD     R16, Z+60
   \   0000001C   AD15               LDD     R17, Z+61
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   EA00               LDI     R16, 160
   \   00000032   ....               RJMP    ?Subroutine0
    792              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    793              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
    794          
    795          }
    796          
    797          /*************************************************************************
    798          *
    799          * Build send request for GODA device information
    800          *
    801          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    802          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    803          
    804              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   AD04               LDD     R16, Z+60
   \   0000001C   AD15               LDD     R17, Z+61
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   EA01               LDI     R16, 161
   \   00000032   ....               RJMP    ??Subroutine4_0
    805              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
    806          }
    807          
    808          /*************************************************************************
    809          *
    810          * Build datablock to AN-SGCNV
    811          *
    812          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    813          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   2E38               MOV     R3, R24
   \   00000008   2F60               MOV     R22, R16
    814          
    815              char i;
    816          
    817              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   0000000A   E003               LDI     R16, 3
   \   0000000C   E510               LDI     R17, 80
   \   0000000E   9F61               MUL     R22, R17
   \   00000010   ....               LDI     R18, LOW(TData)
   \   00000012   ....               LDI     R19, (TData) >> 8
   \   00000014   0D20               ADD     R18, R0
   \   00000016   1D31               ADC     R19, R1
   \   00000018   01D9               MOVW    R27:R26, R19:R18
   \   0000001A   50AC               SUBI    R26, 12
   \   0000001C   4FBB               SBCI    R27, 251
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8142               LDD     R20, Z+2
   \   00000022   E050               LDI     R21, 0
   \   00000024   5F4D               SUBI    R20, 253
   \   00000026   4F5F               SBCI    R21, 255
   \   00000028   2E26               MOV     R2, R22
   \   0000002A   E068               LDI     R22, 8
   \   0000002C   9E26               MUL     R2, R22
   \   0000002E   0C21               ADD     R2, R1
   \   00000030   ....               LDI     R22, LOW(UART16552)
   \   00000032   ....               LDI     R23, (UART16552) >> 8
   \   00000034   0D60               ADD     R22, R0
   \   00000036   1D72               ADC     R23, R2
   \   00000038   81E2               LDD     R30, Z+2
   \   0000003A   E0F0               LDI     R31, 0
   \   0000003C   9633               ADIW    R31:R30, 3
   \   0000003E   9734               SBIW    R31:R30, 4
   \   00000040   F0BC               BRLT    ??Uart_BuildSndData_0
    818                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \                     ??Uart_BuildSndData_1:
   \   00000042   01FB               MOVW    R31:R30, R23:R22
   \   00000044   AC04               LDD     R0, Z+60
   \   00000046   AC15               LDD     R1, Z+61
   \   00000048   01C0               MOVW    R25:R24, R1:R0
   \   0000004A   9601               ADIW    R25:R24, 1
   \   0000004C   AF84               STD     Z+60, R24
   \   0000004E   AF95               STD     Z+61, R25
   \   00000050   E010               LDI     R17, 0
   \   00000052   01F9               MOVW    R31:R30, R19:R18
   \   00000054   0FE0               ADD     R30, R16
   \   00000056   1FF1               ADC     R31, R17
   \   00000058   50EC               SUBI    R30, 12
   \   0000005A   4FFB               SBCI    R31, 251
   \   0000005C   8110               LD      R17, Z
   \   0000005E   01FB               MOVW    R31:R30, R23:R22
   \   00000060   0DE0               ADD     R30, R0
   \   00000062   1DF1               ADC     R31, R1
   \   00000064   8310               ST      Z, R17
    819              }
   \   00000066   9503               INC     R16
   \   00000068   E010               LDI     R17, 0
   \   0000006A   1704               CP      R16, R20
   \   0000006C   0715               CPC     R17, R21
   \   0000006E   F34C               BRLT    ??Uart_BuildSndData_1
    820              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \                     ??Uart_BuildSndData_0:
   \   00000070   01FD               MOVW    R31:R30, R27:R26
   \   00000072   E000               LDI     R16, 0
   \   00000074   8300               ST      Z, R16
    821          }
   \   00000076   2D83               MOV     R24, R3
   \   00000078   ....               RJMP    ??Subroutine3_0
    822          
    823          /*************************************************************************
    824          *
    825          * Build send request for measure data to AN-SGCNV
    826          *
    827          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    828          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    829          
    830              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   AD04               LDD     R16, Z+60
   \   0000001C   AD15               LDD     R17, Z+61
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   E00A               LDI     R16, 10
   \   00000032   ....               RJMP    ?Subroutine0
    831              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    832              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    833          
    834          }
    835          
    836          /*************************************************************************
    837          *
    838          * Build send request for raw data to AN-SGCNV
    839          *
    840          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    841          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    842          
    843              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   AD04               LDD     R16, Z+60
   \   0000001C   AD15               LDD     R17, Z+61
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   E00D               LDI     R16, 13
   \   00000032   ....               RJMP    ?Subroutine0
    844              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    845              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    846          
    847          }
    848          
    849          /*************************************************************************
    850          *
    851          * Build send request for cal data to AN-SGCNV
    852          *
    853          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    854          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    855          
    856              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   AD04               LDD     R16, Z+60
   \   0000001C   AD15               LDD     R17, Z+61
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   E100               LDI     R16, 16
   \   00000032                      REQUIRE ?Subroutine0
   \   00000032                      ;               // Fall through to label ?Subroutine0
    857              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    858              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    859          
    860          }
    861          
    862          /*************************************************************************
    863          *
    864          * Build send request for system status on AN_SGCNV
    865          *
    866          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    867          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    868          
    869              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   AD04               LDD     R16, Z+60
   \   0000001C   AD15               LDD     R17, Z+61
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   E10B               LDI     R16, 27
   \   00000032   ....               RJMP    ?Subroutine0
    870              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    871              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    872          
    873          }
    874          
    875          /*************************************************************************
    876          *
    877          * Build send request for card config on AN_SGCNV
    878          *
    879          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    880          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01AC               MOVW    R21:R20, R25:R24
    881          
    882              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF3               ADC     R31, R19
   \   0000001A   AD04               LDD     R16, Z+60
   \   0000001C   AD15               LDD     R17, Z+61
   \   0000001E   01C8               MOVW    R25:R24, R17:R16
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA0               ADD     R26, R16
   \   0000002E   1FB1               ADC     R27, R17
   \   00000030   E101               LDI     R16, 17
   \   00000032   ....               RJMP    ??Subroutine4_0
    883              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    884          
    885          }
    886          
    887          /*************************************************************************
    888          *
    889          * Build send request for EEPROM data on AN_SGCNV
    890          *
    891          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    892          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   011D               MOVW    R3:R2, R27:R26
   \   00000002   01BC               MOVW    R23:R22, R25:R24
    893          
    894              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000004   2F40               MOV     R20, R16
   \   00000006   E028               LDI     R18, 8
   \   00000008   E031               LDI     R19, 1
   \   0000000A   9F43               MUL     R20, R19
   \   0000000C   2D50               MOV     R21, R0
   \   0000000E   9F42               MUL     R20, R18
   \   00000010   0D51               ADD     R21, R1
   \   00000012   ....               LDI     R30, LOW(UART16552)
   \   00000014   ....               LDI     R31, (UART16552) >> 8
   \   00000016   0DE0               ADD     R30, R0
   \   00000018   1FF5               ADC     R31, R21
   \   0000001A   AD24               LDD     R18, Z+60
   \   0000001C   AD35               LDD     R19, Z+61
   \   0000001E   01C9               MOVW    R25:R24, R19:R18
   \   00000020   9601               ADIW    R25:R24, 1
   \   00000022   01DF               MOVW    R27:R26, R31:R30
   \   00000024   96DC               ADIW    R27:R26, 60
   \   00000026   938D               ST      X+, R24
   \   00000028   939C               ST      X, R25
   \   0000002A   01DF               MOVW    R27:R26, R31:R30
   \   0000002C   0FA2               ADD     R26, R18
   \   0000002E   1FB3               ADC     R27, R19
   \   00000030   E118               LDI     R17, 24
   \   00000032   931C               ST      X, R17
    895              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
   \   00000034   AD24               LDD     R18, Z+60
   \   00000036   AD35               LDD     R19, Z+61
   \   00000038   01C9               MOVW    R25:R24, R19:R18
   \   0000003A   9601               ADIW    R25:R24, 1
   \   0000003C   01DF               MOVW    R27:R26, R31:R30
   \   0000003E   96DC               ADIW    R27:R26, 60
   \   00000040   938D               ST      X+, R24
   \   00000042   939C               ST      X, R25
   \   00000044   01DF               MOVW    R27:R26, R31:R30
   \   00000046   0FA2               ADD     R26, R18
   \   00000048   1FB3               ADC     R27, R19
   \   0000004A   E011               LDI     R17, 1
   \   0000004C   931C               ST      X, R17
    896              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \   0000004E   AD24               LDD     R18, Z+60
   \   00000050   AD35               LDD     R19, Z+61
   \   00000052   01C9               MOVW    R25:R24, R19:R18
   \   00000054   9601               ADIW    R25:R24, 1
   \   00000056   01DF               MOVW    R27:R26, R31:R30
   \   00000058   96DC               ADIW    R27:R26, 60
   \   0000005A   938D               ST      X+, R24
   \   0000005C   939C               ST      X, R25
   \   0000005E   E0B0               LDI     R27, 0
   \   00000060   ....               SUBI    R16, LOW((-(TData + 1528) & 0xFFFF))
   \   00000062   2FA0               MOV     R26, R16
   \   00000064   ....               SBCI    R27, HIGH((-(TData + 1528) & 0xFFFF))
   \   00000066   910C               LD      R16, X
   \   00000068   0FE2               ADD     R30, R18
   \   0000006A   1FF3               ADC     R31, R19
   \   0000006C   8300               ST      Z, R16
    897          
    898          }
   \   0000006E   01CB               MOVW    R25:R24, R23:R22
   \   00000070   01D1               MOVW    R27:R26, R3:R2
   \   00000072   9508               RET
    899          /*************************************************************************
    900          *
    901          *  Receive data on USARTs
    902          *
    903          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    904          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   2F20               MOV     R18, R16
    905          
    906              switch (UART16552[ch].RxState) {                  // check status
   \   0000000A   2F60               MOV     R22, R16
   \   0000000C   E008               LDI     R16, 8
   \   0000000E   E011               LDI     R17, 1
   \   00000010   9F61               MUL     R22, R17
   \   00000012   2D70               MOV     R23, R0
   \   00000014   9F60               MUL     R22, R16
   \   00000016   0D71               ADD     R23, R1
   \   00000018   ....               LDI     R20, LOW(UART16552)
   \   0000001A   ....               LDI     R21, (UART16552) >> 8
   \   0000001C   0D40               ADD     R20, R0
   \   0000001E   1F57               ADC     R21, R23
   \   00000020   01DA               MOVW    R27:R26, R21:R20
   \   00000022   54A2               SUBI    R26, 66
   \   00000024   4FBF               SBCI    R27, 255
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8104               LDD     R16, Z+4
   \   0000002A   2300               TST     R16
   \   0000002C   F409               BRNE    $+2+2
   \   0000002E   C084               RJMP    ??ReceivePacketUart16552_0
   \   00000030   950A               DEC     R16
   \   00000032   F031               BREQ    ??ReceivePacketUart16552_1
   \   00000034   950A               DEC     R16
   \   00000036   F159               BREQ    ??ReceivePacketUart16552_2
   \   00000038   5008               SUBI    R16, 8
   \   0000003A   F409               BRNE    $+2+2
   \   0000003C   C07D               RJMP    ??ReceivePacketUart16552_0
   \   0000003E   C079               RJMP    ??ReceivePacketUart16552_3
    907              case SYNC :
    908                  // all functionallity in inerrupt routine
    909                  break;
    910              case HEADER :
    911                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_1:
   \   00000040   91ED               LD      R30, X+
   \   00000042   91FC               LD      R31, X
   \   00000044   9711               SBIW    R27:R26, 1
   \   00000046   9733               SBIW    R31:R30, 3
   \   00000048   F408               BRCC    $+2+2
   \   0000004A   C076               RJMP    ??ReceivePacketUart16552_0
    912                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    913                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   0000004C   5B4C               SUBI    R20, 188
   \   0000004E   4F5F               SBCI    R21, 255
   \   00000050   01FA               MOVW    R31:R30, R21:R20
   \   00000052   8132               LDD     R19, Z+2
   \   00000054   8103               LDD     R16, Z+3
   \   00000056   E010               LDI     R17, 0
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   8700               STD     Z+8, R16
   \   0000005C   8731               STD     Z+9, R19
    914                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    915                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   0000005E   8520               LDD     R18, Z+8
   \   00000060   8531               LDD     R19, Z+9
   \   00000062   E708               LDI     R16, 120
   \   00000064   8140               LD      R20, Z
   \   00000066   8151               LDD     R21, Z+1
   \   00000068   1B04               SUB     R16, R20
   \   0000006A   0B15               SBC     R17, R21
   \   0000006C   1720               CP      R18, R16
   \   0000006E   0731               CPC     R19, R17
   \   00000070   F008               BRCS    $+2+2
   \   00000072   C05F               RJMP    ??ReceivePacketUart16552_3
   \   00000074   8580               LDD     R24, Z+8
   \   00000076   8591               LDD     R25, Z+9
   \   00000078   9707               SBIW    R25:R24, 7
   \   0000007A   F408               BRCC    $+2+2
   \   0000007C   C05A               RJMP    ??ReceivePacketUart16552_3
    916                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   0000007E   E002               LDI     R16, 2
   \   00000080   8304               STD     Z+4, R16
    917                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   00000082   8180               LD      R24, Z
   \   00000084   8191               LDD     R25, Z+1
   \   00000086   9601               ADIW    R25:R24, 1
   \   00000088   8382               STD     Z+2, R24
   \   0000008A   8393               STD     Z+3, R25
   \   0000008C   C055               RJMP    ??ReceivePacketUart16552_0
    918                      } else {
    919                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    920                      }
    921                  }
    922                  break;
    923              case RECEIVE :
    924                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_2:
   \   0000008E   8182               LDD     R24, Z+2
   \   00000090   8193               LDD     R25, Z+3
   \   00000092   9601               ADIW    R25:R24, 1
   \   00000094   8382               STD     Z+2, R24
   \   00000096   8393               STD     Z+3, R25
   \   00000098   8500               LDD     R16, Z+8
   \   0000009A   8511               LDD     R17, Z+9
   \   0000009C   1780               CP      R24, R16
   \   0000009E   0791               CPC     R25, R17
   \   000000A0   F408               BRCC    $+2+2
   \   000000A2   C04A               RJMP    ??ReceivePacketUart16552_0
    925                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   000000A4   8500               LDD     R16, Z+8
   \   000000A6   8511               LDD     R17, Z+9
   \   000000A8   01FA               MOVW    R31:R30, R21:R20
   \   000000AA   0FE0               ADD     R30, R16
   \   000000AC   1FF1               ADC     R31, R17
   \   000000AE   5BED               SUBI    R30, 189
   \   000000B0   4FFF               SBCI    R31, 255
   \   000000B2   8100               LD      R16, Z
   \   000000B4   3003               CPI     R16, 3
   \   000000B6   F5E9               BRNE    ??ReceivePacketUart16552_3
    926                          if (CalcDSRxChecksum16552(ch)) {
   \   000000B8   2400               CLR     R0
   \   000000BA   2422               CLR     R2
   \   000000BC   2433               CLR     R3
   \   000000BE   01BA               MOVW    R23:R22, R21:R20
   \   000000C0   5B6C               SUBI    R22, 188
   \   000000C2   4F7F               SBCI    R23, 255
   \   000000C4   018B               MOVW    R17:R16, R23:R22
   \   000000C6   C00F               RJMP    ??ReceivePacketUart16552_4
   \                     ??ReceivePacketUart16552_5:
   \   000000C8   01F8               MOVW    R31:R30, R17:R16
   \   000000CA   9131               LD      R19, Z+
   \   000000CC   018F               MOVW    R17:R16, R31:R30
   \   000000CE   E0F0               LDI     R31, 0
   \   000000D0   2603               EOR     R0, R19
   \   000000D2   2DE0               MOV     R30, R0
   \   000000D4   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   000000D6   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   000000D8   ....               LDI     R19, (crc) >> 16
   \   000000DA   BF3B               OUT     0x3B, R19
   \   000000DC   9006               ELPM    R0, Z
   \   000000DE   E031               LDI     R19, 1
   \   000000E0   0E23               ADD     R2, R19
   \   000000E2   E030               LDI     R19, 0
   \   000000E4   1E33               ADC     R3, R19
   \                     ??ReceivePacketUart16552_4:
   \   000000E6   01FD               MOVW    R31:R30, R27:R26
   \   000000E8   8580               LDD     R24, Z+8
   \   000000EA   8591               LDD     R25, Z+9
   \   000000EC   9702               SBIW    R25:R24, 2
   \   000000EE   1628               CP      R2, R24
   \   000000F0   0639               CPC     R3, R25
   \   000000F2   F350               BRCS    ??ReceivePacketUart16552_5
   \   000000F4   8500               LDD     R16, Z+8
   \   000000F6   8511               LDD     R17, Z+9
   \   000000F8   0F40               ADD     R20, R16
   \   000000FA   1F51               ADC     R21, R17
   \   000000FC   5B4E               SUBI    R20, 190
   \   000000FE   4F5F               SBCI    R21, 255
   \   00000100   01FA               MOVW    R31:R30, R21:R20
   \   00000102   8100               LD      R16, Z
   \   00000104   1600               CP      R0, R16
   \   00000106   F4A9               BRNE    ??ReceivePacketUart16552_3
    927                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   00000108   01FB               MOVW    R31:R30, R23:R22
   \   0000010A   8100               LD      R16, Z
   \   0000010C   3F0D               CPI     R16, 253
   \   0000010E   F489               BRNE    ??ReceivePacketUart16552_3
    928                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   00000110   01FD               MOVW    R31:R30, R27:R26
   \   00000112   E00A               LDI     R16, 10
   \   00000114   8304               STD     Z+4, R16
    929                                  if (ch == 0) {
   \   00000116   2322               TST     R18
   \   00000118   F421               BRNE    ??ReceivePacketUart16552_6
    930                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   0000011A   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   0000011C   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   0000011E   E001               LDI     R16, 1
   \   00000120   C005               RJMP    ??ReceivePacketUart16552_7
    931                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_6:
   \   00000122   3021               CPI     R18, 1
   \   00000124   F449               BRNE    ??ReceivePacketUart16552_0
    932                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   00000126   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   00000128   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   0000012A   E002               LDI     R16, 2
   \                     ??ReceivePacketUart16552_7:
   \   0000012C   ........           CALL    OS_SignalEvent
   \   00000130   C003               RJMP    ??ReceivePacketUart16552_0
    933                                  }
    934                              } else {
    935                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
    936                              }
    937                          } else {
    938                              GoToSyncUART16552(ch);                                // go to sync modus for recive
    939                          }
    940                      } else {
    941                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    942                      }
    943                  }
    944                  break;
    945              case HANDLE :
    946                  break;
    947              default :
    948                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_3:
   \   00000132   01FD               MOVW    R31:R30, R27:R26
   \   00000134   E000               LDI     R16, 0
   \   00000136   8304               STD     Z+4, R16
    949                  break;
    950              }                                                           // end switch
    951              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??ReceivePacketUart16552_0:
   \   00000138   91ED               LD      R30, X+
   \   0000013A   91FC               LD      R31, X
   \   0000013C   9711               SBIW    R27:R26, 1
   \   0000013E   9631               ADIW    R31:R30, 1
   \   00000140   93ED               ST      X+, R30
   \   00000142   93FC               ST      X, R31
   \   00000144   9711               SBIW    R27:R26, 1
   \   00000146   37E8               CPI     R30, 120
   \   00000148   E000               LDI     R16, 0
   \   0000014A   40F0               SBCI    R31, 0
   \   0000014C   F010               BRCS    ??ReceivePacketUart16552_8
    952                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   0000014E   930D               ST      X+, R16
   \   00000150   930C               ST      X, R16
    953              }
    954          }
   \                     ??ReceivePacketUart16552_8:
   \   00000152   ....               RJMP    ?Subroutine2
    955          
    956          
    957          /*************************************************************************
    958          *
    959          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    960          *
    961          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    962          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004   2F19               MOV     R17, R25
   \   00000006   2F68               MOV     R22, R24
   \   00000008   2F40               MOV     R20, R16
   \   0000000A   01C9               MOVW    R25:R24, R19:R18
    963          
    964              unsigned short cnt;
    965              unsigned char csum;
    966          
    967              csum = 0;
   \   0000000C   E000               LDI     R16, 0
    968              for (cnt = 2; cnt < len; cnt++) {
   \   0000000E   3023               CPI     R18, 3
   \   00000010   4030               SBCI    R19, 0
   \   00000012   F0B0               BRCS    ??CalcDSTxChecksumUART16552_0
   \   00000014   ....               LDI     R26, LOW((UART16552 + 2))
   \   00000016   ....               LDI     R27, HIGH((UART16552 + 2))
   \   00000018   E028               LDI     R18, 8
   \   0000001A   E031               LDI     R19, 1
   \   0000001C   9F43               MUL     R20, R19
   \   0000001E   2D50               MOV     R21, R0
   \   00000020   9F42               MUL     R20, R18
   \   00000022   0D51               ADD     R21, R1
   \   00000024   0DA0               ADD     R26, R0
   \   00000026   1FB5               ADC     R27, R21
   \   00000028   9702               SBIW    R25:R24, 2
   \   0000002A   ....               LDI     R19, (crc) >> 16
    969                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksumUART16552_1:
   \   0000002C   2FE0               MOV     R30, R16
   \   0000002E   E0F0               LDI     R31, 0
   \   00000030   910D               LD      R16, X+
   \   00000032   27E0               EOR     R30, R16
   \   00000034   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000036   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000038   BF3B               OUT     0x3B, R19
   \   0000003A   9106               ELPM    R16, Z
    970              }
   \   0000003C   9701               SBIW    R25:R24, 1
   \   0000003E   F7B1               BRNE    ??CalcDSTxChecksumUART16552_1
    971              return csum;
   \                     ??CalcDSTxChecksumUART16552_0:
   \   00000040   2F86               MOV     R24, R22
   \   00000042   2F91               MOV     R25, R17
   \   00000044   2DA2               MOV     R26, R2
   \   00000046   2FB7               MOV     R27, R23
   \   00000048   9508               RET
    972          }
    973          
    974          /*************************************************************************
    975          *
    976          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    977          *
    978          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    979          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2E3A               MOV     R3, R26
   \   00000004   2F79               MOV     R23, R25
   \   00000006   2E28               MOV     R2, R24
    980          
    981              short cnt;
    982              unsigned char csum;
    983          
    984              csum = 0;
   \   00000008   E060               LDI     R22, 0
    985              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   2F20               MOV     R18, R16
   \   00000010   E008               LDI     R16, 8
   \   00000012   E011               LDI     R17, 1
   \   00000014   9F21               MUL     R18, R17
   \   00000016   2D30               MOV     R19, R0
   \   00000018   9F20               MUL     R18, R16
   \   0000001A   0D31               ADD     R19, R1
   \   0000001C   ....               LDI     R20, LOW(UART16552)
   \   0000001E   ....               LDI     R21, (UART16552) >> 8
   \   00000020   0D40               ADD     R20, R0
   \   00000022   1F53               ADC     R21, R19
   \   00000024   018A               MOVW    R17:R16, R21:R20
   \   00000026   5B0C               SUBI    R16, 188
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   01DA               MOVW    R27:R26, R21:R20
   \   0000002C   53AA               SUBI    R26, 58
   \   0000002E   4FBF               SBCI    R27, 255
   \   00000030   C00C               RJMP    ??CalcDSRxChecksum16552_0
    986                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum16552_1:
   \   00000032   01F8               MOVW    R31:R30, R17:R16
   \   00000034   9121               LD      R18, Z+
   \   00000036   018F               MOVW    R17:R16, R31:R30
   \   00000038   2762               EOR     R22, R18
   \   0000003A   2FE6               MOV     R30, R22
   \   0000003C   E0F0               LDI     R31, 0
   \   0000003E   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000040   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000042   ....               LDI     R19, (crc) >> 16
   \   00000044   BF3B               OUT     0x3B, R19
   \   00000046   9166               ELPM    R22, Z
    987              }
   \   00000048   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum16552_0:
   \   0000004A   01FD               MOVW    R31:R30, R27:R26
   \   0000004C   8120               LD      R18, Z
   \   0000004E   8131               LDD     R19, Z+1
   \   00000050   5022               SUBI    R18, 2
   \   00000052   4030               SBCI    R19, 0
   \   00000054   1782               CP      R24, R18
   \   00000056   0793               CPC     R25, R19
   \   00000058   F360               BRCS    ??CalcDSRxChecksum16552_1
    988              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \   0000005A   8100               LD      R16, Z
   \   0000005C   8111               LDD     R17, Z+1
   \   0000005E   0F40               ADD     R20, R16
   \   00000060   1F51               ADC     R21, R17
   \   00000062   5B4E               SUBI    R20, 190
   \   00000064   4F5F               SBCI    R21, 255
   \   00000066   01FA               MOVW    R31:R30, R21:R20
   \   00000068   8100               LD      R16, Z
   \   0000006A   1760               CP      R22, R16
   \   0000006C   F411               BRNE    ??CalcDSRxChecksum16552_2
    989                  return true;
   \   0000006E   E001               LDI     R16, 1
   \   00000070   C001               RJMP    ??CalcDSRxChecksum16552_3
    990              } else {
    991                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   00000072   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   00000074   E010               LDI     R17, 0
   \   00000076   2D82               MOV     R24, R2
   \   00000078   2F97               MOV     R25, R23
   \   0000007A   2DA3               MOV     R26, R3
   \   0000007C   91B9               LD      R27, Y+
   \   0000007E   9508               RET
    992              }
    993          }
    994          
    995          /*************************************************************************
    996          *
    997          * Goes to send mode
    998          *
    999          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1000          void GoToSendUART16552(char ch) {
   \                     GoToSendUART16552:
   1001              UART16552[ch].SyncCnt   = 0;                        // ready for sync
   \   00000000   ....               LDI     R30, LOW((UART16552 + 188))
   \   00000002   ....               LDI     R31, HIGH((UART16552 + 188))
   \   00000004   2F20               MOV     R18, R16
   \   00000006   E008               LDI     R16, 8
   \   00000008   E011               LDI     R17, 1
   \   0000000A   9F21               MUL     R18, R17
   \   0000000C   2D30               MOV     R19, R0
   \   0000000E   9F20               MUL     R18, R16
   \   00000010   0D31               ADD     R19, R1
   \   00000012   0DE0               ADD     R30, R0
   \   00000014   1FF3               ADC     R31, R19
   \   00000016   E000               LDI     R16, 0
   \   00000018   8307               STD     Z+7, R16
   1002              UART16552[ch].RxState   = SEND;
   \   0000001A   E003               LDI     R16, 3
   \   0000001C   8306               STD     Z+6, R16
   1003              UART16552[ch].RxFirst   = 0;
   \   0000001E   E000               LDI     R16, 0
   \   00000020   8300               ST      Z, R16
   \   00000022   8301               STD     Z+1, R16
   1004              UART16552[ch].RxPacklen = 0;
   \   00000024   8702               STD     Z+10, R16
   \   00000026   8703               STD     Z+11, R16
   1005          }
   \   00000028   9508               RET
   1006          /*************************************************************************
   1007          *
   1008          * Goes to sync mode
   1009          *
   1010          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1011          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   1012          
   1013              UART16552[ch].RxState = SYNC;
   \   00000000   2F20               MOV     R18, R16
   \   00000002   E008               LDI     R16, 8
   \   00000004   E011               LDI     R17, 1
   \   00000006   9F21               MUL     R18, R17
   \   00000008   2D30               MOV     R19, R0
   \   0000000A   9F20               MUL     R18, R16
   \   0000000C   0D31               ADD     R19, R1
   \   0000000E   2DE0               MOV     R30, R0
   \   00000010   2FF3               MOV     R31, R19
   \   00000012   ....               SUBI    R30, LOW((-(UART16552 + 194) & 0xFFFF))
   \   00000014   ....               SBCI    R31, HIGH((-(UART16552 + 194) & 0xFFFF))
   \   00000016   E000               LDI     R16, 0
   \   00000018   8300               ST      Z, R16
   1014          }
   \   0000001A   9508               RET
   1015          
   1016          /*************************************************************************
   1017          *
   1018          *  Empty rx buffer on PC16552 UART
   1019          *
   1020          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1021          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
   1022          
   1023              switch (uartno) {
   \   00000000   2300               TST     R16
   \   00000002   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000004   950A               DEC     R16
   \   00000006   F041               BREQ    ??EmptyRxBuf16552_1
   \   00000008   9508               RET
   1024              case 0:
   1025                  do {
   1026                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000A   91002208           LDS     R16, 8712
   1027                  } while (U0_LSR & DATA_READY);
   \   0000000E   9100220D           LDS     R16, 8717
   \   00000012   FD00               SBRC    R16, 0
   \   00000014   CFFA               RJMP    ??EmptyRxBuf16552_0
   \   00000016   9508               RET
   1028                  break;
   1029              case 1:
   1030                  do {
   1031                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   00000018   91002200           LDS     R16, 8704
   1032                  } while (U1_LSR & DATA_READY);
   \   0000001C   91002205           LDS     R16, 8709
   \   00000020   FD00               SBRC    R16, 0
   \   00000022   CFFA               RJMP    ??EmptyRxBuf16552_1
   1033                  break;
   1034              }
   1035          }
   \   00000024   9508               RET
   1036          
   1037          /*************************************************************************
   1038          *
   1039          *  Init the PC16552 UART
   1040          *
   1041          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1042          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000   926A               ST      -Y, R6
   \   00000002   925A               ST      -Y, R5
   \   00000004   924A               ST      -Y, R4
   \   00000006   93BA               ST      -Y, R27
   \   00000008   93AA               ST      -Y, R26
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E   2E60               MOV     R6, R16
   \   00000010   01CA               MOVW    R25:R24, R21:R20
   \   00000012   01DB               MOVW    R27:R26, R23:R22
   1043              OS_CREATEMB(&UART16552[channel].RxMailBox, 1, MBUF_SIZE, &UART16552[channel].RxMailBoxBuf);
   \   00000014   2F20               MOV     R18, R16
   \   00000016   E008               LDI     R16, 8
   \   00000018   E011               LDI     R17, 1
   \   0000001A   9F21               MUL     R18, R17
   \   0000001C   2D30               MOV     R19, R0
   \   0000001E   9F20               MUL     R18, R16
   \   00000020   0D31               ADD     R19, R1
   \   00000022   ....               LDI     R16, LOW(UART16552)
   \   00000024   2E40               MOV     R4, R16
   \   00000026   ....               LDI     R16, (UART16552) >> 8
   \   00000028   0C40               ADD     R4, R0
   \   0000002A   1F03               ADC     R16, R19
   \   0000002C   2E50               MOV     R5, R16
   \   0000002E   01B2               MOVW    R23:R22, R5:R4
   \   00000030   5365               SUBI    R22, 53
   \   00000032   4F7F               SBCI    R23, 255
   \   00000034   E342               LDI     R20, 50
   \   00000036   E050               LDI     R21, 0
   \   00000038   E021               LDI     R18, 1
   \   0000003A   0182               MOVW    R17:R16, R5:R4
   \   0000003C   5003               SUBI    R16, 3
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   ........           CALL    OS_CreateMB
   1044              /*--- Configure UART data block ---*/
   1045              UART16552[channel].TxFirst = 0x00;
   \   00000044   01F2               MOVW    R31:R30, R5:R4
   \   00000046   E000               LDI     R16, 0
   \   00000048   AF04               STD     Z+60, R16
   \   0000004A   AF05               STD     Z+61, R16
   1046              UART16552[channel].TxLast = 0x00;
   \   0000004C   AF06               STD     Z+62, R16
   \   0000004E   AF07               STD     Z+63, R16
   1047              UART16552[channel].TxCount = 0x00;
   \   00000050   5CE0               SUBI    R30, 192
   \   00000052   4FFF               SBCI    R31, 255
   \   00000054   8300               ST      Z, R16
   \   00000056   8301               STD     Z+1, R16
   1048              UART16552[channel].RxFirst = 0x00;
   \   00000058   01F2               MOVW    R31:R30, R5:R4
   \   0000005A   54E4               SUBI    R30, 68
   \   0000005C   4FFF               SBCI    R31, 255
   \   0000005E   8300               ST      Z, R16
   \   00000060   8301               STD     Z+1, R16
   1049              UART16552[channel].RxLast = 0x00;
   \   00000062   8302               STD     Z+2, R16
   \   00000064   8303               STD     Z+3, R16
   1050              UART16552[channel].RxCount = 0x00;
   \   00000066   8304               STD     Z+4, R16
   \   00000068   8305               STD     Z+5, R16
   1051              UART16552[channel].RxState = SEND;  // Must send a message before receiving anything
   \   0000006A   E003               LDI     R16, 3
   \   0000006C   8306               STD     Z+6, R16
   1052              UART16552[channel].SyncCnt = 0;
   \   0000006E   E000               LDI     R16, 0
   \   00000070   8307               STD     Z+7, R16
   1053              UART16552[channel].TxStatus = 0x00;
   \   00000072   E402               LDI     R16, 66
   \   00000074   0E40               ADD     R4, R16
   \   00000076   E000               LDI     R16, 0
   \   00000078   1E50               ADC     R5, R16
   \   0000007A   01F2               MOVW    R31:R30, R5:R4
   \   0000007C   8300               ST      Z, R16
   1054          
   1055              switch (channel) {
   \   0000007E   2066               TST     R6
   \   00000080   F019               BREQ    ??Init16552_0
   \   00000082   946A               DEC     R6
   \   00000084   F131               BREQ    ??Init16552_1
   \   00000086   C049               RJMP    ??Init16552_2
   1056              case 0x00 :
   1057                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   00000088   EF0A               LDI     R16, 250
   \   0000008A   9300....           STS     (UART16552 + 196), R16
   \   0000008E   E000               LDI     R16, 0
   \   00000090   9300....           STS     (UART16552 + 197), R16
   1058                  U0_LCR = 0x80;          // set DLAB
   \   00000094   E800               LDI     R16, 128
   \   00000096   9300220B           STS     8715, R16
   1059                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   0000009A   E408               LDI     R16, 72
   \   0000009C   EE18               LDI     R17, 232
   \   0000009E   E021               LDI     R18, 1
   \   000000A0   E030               LDI     R19, 0
   \   000000A2   01AC               MOVW    R21:R20, R25:R24
   \   000000A4   01BD               MOVW    R23:R22, R27:R26
   \   000000A6   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000AA   93002208           STS     8712, R16
   1060                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000AE   93102209           STS     8713, R17
   1061                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000B2   E003               LDI     R16, 3
   \   000000B4   9300220B           STS     8715, R16
   1062                  U0_FCR = 0x01;          // enable FIFO ..
   \   000000B8   E001               LDI     R16, 1
   \   000000BA   9300220A           STS     8714, R16
   1063                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   000000BE   EC01               LDI     R16, 193
   \   000000C0   9300220A           STS     8714, R16
   1064                  U0_IER = 0x03;          // enable TX and RX int.
   \   000000C4   E003               LDI     R16, 3
   \   000000C6   93002209           STS     8713, R16
   1065                  U0_MCR = 0x00;          // RTS off
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   9300220C           STS     8716, R16
   1066                  break;
   \   000000D0   C024               RJMP    ??Init16552_2
   1067              case 0x01 :
   1068                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   000000D2   EF0A               LDI     R16, 250
   \   000000D4   9300....           STS     (UART16552 + 460), R16
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   9300....           STS     (UART16552 + 461), R16
   1069                  U1_LCR = 0x80;          // set DLAB
   \   000000DE   E800               LDI     R16, 128
   \   000000E0   93002203           STS     8707, R16
   1070                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000000E4   E408               LDI     R16, 72
   \   000000E6   EE18               LDI     R17, 232
   \   000000E8   E021               LDI     R18, 1
   \   000000EA   E030               LDI     R19, 0
   \   000000EC   01AC               MOVW    R21:R20, R25:R24
   \   000000EE   01BD               MOVW    R23:R22, R27:R26
   \   000000F0   ........           CALL    ?UL_DIVMOD_S_L03
   \   000000F4   93002200           STS     8704, R16
   1071                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000F8   93102201           STS     8705, R17
   1072                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000FC   E003               LDI     R16, 3
   \   000000FE   93002203           STS     8707, R16
   1073                  U1_FCR = 0x01;          // enable FIFO ..
   \   00000102   E001               LDI     R16, 1
   \   00000104   93002202           STS     8706, R16
   1074                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   00000108   EC01               LDI     R16, 193
   \   0000010A   93002202           STS     8706, R16
   1075                  U1_IER = 0x03;          // enable TX and RX int.
   \   0000010E   E003               LDI     R16, 3
   \   00000110   93002201           STS     8705, R16
   1076                  U1_MCR = 0x00;          // RTS off
   \   00000114   E000               LDI     R16, 0
   \   00000116   93002204           STS     8708, R16
   1077                  break;
   1078              default:
   1079                  break;
   1080              }
   1081          }
   \                     ??Init16552_2:
   \   0000011A   9189               LD      R24, Y+
   \   0000011C   9199               LD      R25, Y+
   \   0000011E   91A9               LD      R26, Y+
   \   00000120   91B9               LD      R27, Y+
   \   00000122   9049               LD      R4, Y+
   \   00000124   9059               LD      R5, Y+
   \   00000126   9069               LD      R6, Y+
   \   00000128   9508               RET
   1082          
   1083          #if USE_MODBUS_PROTOCOL == 1
   1084          static unsigned short  Rsp_Delay[2];       // response delay
   1085          
   1086          static void
   1087          load_eeprom_misc_485(void) {
   1088              char ch;
   1089              uint16_t temp;
   1090          
   1091              for (ch = 0; ch < 2; ch++) {
   1092                  ReadEEPROMBuffer(EEPROM_PORTSETUP + 3 + ch * 2, sizeof(uint16_t), (char *)&temp);
   1093          
   1094                  if (temp > 0 && temp <= 5000) {
   1095                      Rsp_Delay[ch] = temp;
   1096                  } else {
   1097                      Rsp_Delay[ch] = 0;
   1098                  }
   1099              }
   1100          }
   1101          
   1102          static void
   1103          __rs485_task_set_power(uint8_t ch, uint8_t on) {
   1104              uint8_t current;
   1105          
   1106              current = (TData.RS4.PortUsed >> ch) & 0x01;
   1107          
   1108              if (current == on) {
   1109                  // no need to waste time
   1110                  return;
   1111              }
   1112          
   1113              if (on) {
   1114                  TData.RS4.PortUsed |= (1 << ch);
   1115              } else {
   1116                  TData.RS4.PortUsed &= ~(1 << ch);
   1117              }
   1118              PORTC = TData.RS4.PortUsed;
   1119          
   1120              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);
   1121          }
   1122          
   1123          void
   1124          rs485_task_set_power(uint8_t ch, uint8_t on) {
   1125              OS_Use(&UARTSEND);
   1126              __rs485_task_set_power(ch, on);
   1127              OS_Unuse(&UARTSEND);
   1128          }
   1129          
   1130          uint8_t
   1131          rs485_task_get_power(uint8_t ch) {
   1132              uint8_t status;
   1133          
   1134              OS_Use(&UARTSEND);
   1135              status = (TData.RS4.PortUsed >> ch) & 0x01;
   1136              OS_Unuse(&UARTSEND);
   1137          
   1138              return status;
   1139          }
   1140          
   1141          uint8_t
   1142          rs485_task_get_sensor_type(uint8_t ch) {
   1143              uint8_t sensor_type;
   1144          
   1145              OS_Use(&UARTSEND);
   1146              sensor_type = (TData.RS4.SensorType[ch / 4] >> (2 * (ch % 4))) & 0x03;
   1147              OS_Unuse(&UARTSEND);
   1148          
   1149              return sensor_type;
   1150          }
   1151          
   1152          void
   1153          rs485_task_set_sensor_type(uint8_t ch, uint8_t sensor_type) {
   1154              OS_Use(&UARTSEND);
   1155          
   1156              // clear first
   1157              TData.RS4.SensorType[ch / 4] &= ~(0x03 << ((ch % 4) * 2));
   1158          
   1159              // set
   1160              TData.RS4.SensorType[ch / 4] |= ((sensor_type & 0x03) << ((ch % 4) * 2));
   1161          
   1162              WriteEEPROMByte(EEPROM_PORTSETUP + 1, TData.RS4.SensorType[0]);
   1163              WriteEEPROMByte(EEPROM_PORTSETUP + 2, TData.RS4.SensorType[1]);
   1164          
   1165              OS_Unuse(&UARTSEND);
   1166          }
   1167          
   1168          static void
   1169          __rs485_task_set_rsp_delay(uint8_t port, uint16_t delay) {
   1170              uint16_t cur_delay = Rsp_Delay[port];
   1171          
   1172              if (cur_delay == delay) {
   1173                  return;
   1174              }
   1175          
   1176              if (delay > 5000) {
   1177                  return;
   1178              }
   1179          
   1180              Rsp_Delay[port] = delay;
   1181          
   1182              WriteEEPROMBufferSync(EEPROM_PORTSETUP + 3 + port * 2, sizeof(uint16_t), (char *)&delay);
   1183          }
   1184          
   1185          void
   1186          rs485_task_set_rsp_delay(uint8_t port, uint16_t delay) {
   1187              OS_Use(&UARTSEND);
   1188              __rs485_task_set_rsp_delay(port, delay);
   1189              OS_Unuse(&UARTSEND);
   1190          }
   1191          
   1192          uint16_t
   1193          rs485_task_get_rsp_delay(uint8_t port) {
   1194              uint16_t    ret;
   1195          
   1196              OS_Use(&UARTSEND);
   1197              ret = Rsp_Delay[port];
   1198              OS_Unuse(&UARTSEND);
   1199          
   1200              return ret;
   1201          }
   1202          
   1203          uint8_t
   1204          rs485_task_get_comm_status(uint8_t port) {
   1205              uint16_t    ret;
   1206          
   1207              // XXX no need for lock
   1208              ret = (TData.RS4.IOUnitStatus[port] & COMFAIL_BIT) ? 0 : 1;
   1209          
   1210              return ret;
   1211          }
   1212          
   1213          uint8_t
   1214          rs485_task_get_channel_status(uint8_t port, uint8_t ch) {
   1215              uint8_t ret;
   1216          
   1217              OS_Use(&UARTSEND);
   1218              ret = (uint8_t)TData.RS4.TargetSetup1[port][ch];
   1219              OS_Unuse(&UARTSEND);
   1220          
   1221              return ret;
   1222          }
   1223          
   1224          int16_t
   1225          rs485_task_get_channel_value(uint8_t port, uint8_t ch) {
   1226              float f;
   1227              int16_t  ret;
   1228          
   1229              OS_Use(&UARTSEND);
   1230              f = TData.RS4.Result[port][ch];
   1231              OS_Unuse(&UARTSEND);
   1232          
   1233              ret = (int16_t)(f * 100);
   1234              return ret;
   1235          }
   1236          
   1237          int16_t
   1238          rs485_task_get_channel_raw_value(uint8_t port, uint8_t ch) {
   1239              int16_t ret;
   1240          
   1241              OS_Use(&UARTSEND);
   1242              ret = TData.RS4.Raw[port][ch];
   1243              OS_Unuse(&UARTSEND);
   1244          
   1245              return ret;
   1246          }
   1247          
   1248          int16_t
   1249          rs485_task_get_channel_cal_value(uint8_t port, uint8_t ch) {
   1250              int16_t ret;
   1251          
   1252              OS_Use(&UARTSEND);
   1253              ret = TData.RS4.Cal[port][ch];
   1254              OS_Unuse(&UARTSEND);
   1255          
   1256              return ret;
   1257          }
   1258          #endif /* USE_MODBUS_PROTOCOL == 1 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   CalcDSRxChecksum16552
      0      2   CalcDSTxChecksumUART16552
      1      2   CheckActionUart16552
        1      2   -> ReceiveCData
        1      2   -> ReceiveCardEEPROMData
        1      2   -> ReceiveCardStatus
        1      2   -> ReceiveConfigData
        1      2   -> ReceivePTOData
        1      2   -> ReceiveRData
        1      2   -> ReceiveRadarData
        1      2   -> ReceiveWHData
        1      2   -> ReceiveWISData
        1      2   -> ReceiveWISStatus
        1      2   -> ReceiveWISXData
      0      2   EmptyRxBuf16552
     13      2   ExtRS485Ctl
       13      2   -> OS_CreateMB
       13      2   -> OS_Delay
       13      2   -> OS_SignalEvent
       13      2   -> OS_WaitEventTimed
       13      2   -> ReadEEPROMByte
       13      2 ?SS_SHR_L02
       13      2 ?S_SHL_L02
     10      2   ExtRS485Rec
       10      2   -> CheckActionUart16552
       10      2   -> OS_Delay
       10      2   -> OS_SignalEvent
       10      2   -> OS_WaitEventTimed
       10      2 ?SS_SHR_L02
       10      2 ?S_SHL_L02
      0      2   GoToSendUART16552
      0      2   GoToSyncUART16552
      7      2   Init16552
        7      2   -> OS_CreateMB
        7      2 ?UL_DIVMOD_S_L03
      8      2   ReceiveCData
      0      2   ReceiveCardEEPROMData
      0      2   ReceiveCardStatus
      2      2   ReceiveConfigData
      6      2   ReceivePTOData
        6      2   -> OS_Unuse
        6      2   -> OS_Use
      4      2   ReceivePacketUart16552
        4      2   -> OS_SignalEvent
      8      2   ReceiveRData
      2      2   ReceiveRadarData
      0      2   ReceiveRadarInfo
      4      2   ReceiveWHData
        4      2   -> OS_Unuse
        4      2   -> OS_Use
        4      2 ?S_SHL_L02
      4      2   ReceiveWISData
        4      2 ?F_DIV_S_L04
        4      2 ?SL2F_S_L04
        4      2 ?UL2F_S_L04
      0      2   ReceiveWISStatus
      2      2   ReceiveWISXData
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
      0      2   Uart_BuildReqC16552
      0      2   Uart_BuildReqCardStatus
      0      2   Uart_BuildReqConfig
      0      2   Uart_BuildReqEEPROMData
      0      2   Uart_BuildReqM16552
      0      2   Uart_BuildReqR16552
      0      2   Uart_BuildReqRadarData
      0      2   Uart_BuildReqRadarInfo
      0      2   Uart_BuildReqWISCardStatus
      0      2   Uart_BuildReqWISData
      0      2   Uart_BuildReqWISXData
      3      2   Uart_BuildSndData
      4      2   Uart_BuildTail16552
        4      2   -> OS_Delay
        4      2   -> Uart_BuildHeader16552
      9      2   Usart16552CheckPackage
        9      2   -> CheckActionUart16552


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ??Subroutine3_0
      32  ??Subroutine4_0
      26  ?Subroutine0
      18  ?Subroutine1
       2  ?Subroutine2
     128  CalcDSRxChecksum16552
      74  CalcDSTxChecksumUART16552
     222  CheckActionUart16552
      38  EmptyRxBuf16552
    3108  ExtRS485Ctl
     648  ExtRS485Rec
      42  GoToSendUART16552
      28  GoToSyncUART16552
     298  Init16552
     178  ReceiveCData
      86  ReceiveCardEEPROMData
      76  ReceiveCardStatus
     138  ReceiveConfigData
     222  ReceivePTOData
     340  ReceivePacketUart16552
     180  ReceiveRData
     196  ReceiveRadarData
      52  ReceiveRadarInfo
     262  ReceiveWHData
     224  ReceiveWISData
     112  ReceiveWISStatus
     108  ReceiveWISXData
       8  SetRS4Port
      12  TimoutUART0
      12  TimoutUART1
      72  Uart_BuildHeader16552
      50  Uart_BuildReqC16552
      52  Uart_BuildReqCardStatus
      52  Uart_BuildReqConfig
     116  Uart_BuildReqEEPROMData
      52  Uart_BuildReqM16552
      52  Uart_BuildReqR16552
      52  Uart_BuildReqRadarData
      52  Uart_BuildReqRadarInfo
      52  Uart_BuildReqWISCardStatus
      52  Uart_BuildReqWISData
     116  Uart_BuildReqWISXData
     122  Uart_BuildSndData
     308  Uart_BuildTail16552
     144  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 8 222 bytes in segment CODE
 
 8 222 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
