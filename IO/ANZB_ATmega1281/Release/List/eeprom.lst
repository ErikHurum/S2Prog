###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       02/Jan/2024  12:42:51
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\eeprom.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EWC75E.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\eeprom.c"
#        --cpu=m1281 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\Obj" -D
#        OS_LIBMODE_R -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\List" -y
#        --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -Ohs)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\List\eeprom.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release\Obj\eeprom.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\eeprom.c
      1          /****************************************************************************************
      2          / Read and write the eeprom
      3          /
      4          ***************************************************************************************/
      5          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1
      6          #include "stdio.h"
      7          #include "math.h"
      8          #include "externals.h"
      9          #include "version.h"
     10          #include "inavr.h"
     11          
     12          
     13          /*---------------------------------------------------------------------------
     14          **
     15          **  See how many date i remining
     16          **
     17          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     18          char TestEEPROM( void ) {
   \                     TestEEPROM:
     19          
     20              return WriteCount;
   \   00000000   9100....           LDS     R16, WriteCount
   \   00000004   9508               RET
     21          }
     22          
     23          /*---------------------------------------------------------------------------
     24          **
     25          **  Reads an address in the eeprom
     26          **
     27          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     28          char ReadEEPROMByte( unsigned int Address ) {
   \                     ReadEEPROMByte:
     29          
     30              unsigned char Data;
     31          
     32              while (EECR & (1<<EEPE))     // Wait until ready
   \                     ??ReadEEPROMByte_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??ReadEEPROMByte_0
     33                  ;
     34              OS_IncDI();
   \   00000004   94F8               cli
     35              EEAR = Address;
   \   00000006   BD12               OUT     0x22, R17
   \   00000008   BD01               OUT     0x21, R16
     36              EECR |= (1 << EERE) ;       // Don't use SetBit macrod due to timing
   \   0000000A   9AF8               SBI     0x1F, 0x00
     37              OS_DecRI();
   \   0000000C   9100....           LDS     R16, (OS_Global + 1)
   \   00000010   2300               TST     R16
   \   00000012   F409               BRNE    ??ReadEEPROMByte_1
   \   00000014   9478               sei
     38          
     39              Data = EEDR;
     40              return Data;
   \                     ??ReadEEPROMByte_1:
   \   00000016   B500               IN      R16, 0x20
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_EECR
   \   0000001A                      REQUIRE _A_EEAR
   \   0000001A                      REQUIRE _A_EEDR
     41          
     42          }
     43          
     44          /*---------------------------------------------------------------------------
     45          **
     46          **  Write a caracther to the eeprom
     47          **
     48          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     49          void WriteEEPROMByte( unsigned int Address, char Data ) {   
   \                     WriteEEPROMByte:
     50          
     51              while (EECR & (1<<EEPE))     // Wait until ready
   \                     ??WriteEEPROMByte_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??WriteEEPROMByte_0
     52                  ;
     53              OS_IncDI();
   \   00000004   94F8               cli
     54              EEAR = Address;
   \   00000006   BD12               OUT     0x22, R17
   \   00000008   BD01               OUT     0x21, R16
     55              EEDR = Data;
   \   0000000A   BD20               OUT     0x20, R18
     56              EECR |= (1 << EEMPE) ;       // Don't use SetBit macrod due to timing
   \   0000000C   9AFA               SBI     0x1F, 0x02
     57              EECR |= (1 << EEPE) ;        // Don't use SetBit macrod due to timing
   \   0000000E   9AF9               SBI     0x1F, 0x01
     58              OS_DecRI();
   \   00000010   9100....           LDS     R16, (OS_Global + 1)
   \   00000014   2300               TST     R16
   \   00000016   F409               BRNE    ??WriteEEPROMByte_1
   \   00000018   9478               sei
     59          }
   \                     ??WriteEEPROMByte_1:
   \   0000001A   9508               RET
   \   0000001C                      REQUIRE _A_EECR
   \   0000001C                      REQUIRE _A_EEAR
   \   0000001C                      REQUIRE _A_EEDR
     60          
     61          /*---------------------------------------------------------------------------
     62          **
     63          **  Read a tring from the eeprom
     64          **
     65          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     66          void ReadEEPROMBuffer( unsigned int Address, char Size, char *pData ) {   
   \                     ReadEEPROMBuffer:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E0A               MOV     R0, R26
   \   00000004   2F39               MOV     R19, R25
   \   00000006   2F68               MOV     R22, R24
   \   00000008   01D8               MOVW    R27:R26, R17:R16
     67              unsigned int Index;
     68          
     69              for ( Index = 0; Index < Size; Index++ ) {
   \   0000000A   2322               TST     R18
   \   0000000C   F051               BREQ    ??ReadEEPROMBuffer_0
   \   0000000E   2F82               MOV     R24, R18
   \   00000010   E090               LDI     R25, 0
     70                  *pData++ = ReadEEPROMByte( Address + Index );
   \                     ??ReadEEPROMBuffer_1:
   \   00000012   018D               MOVW    R17:R16, R27:R26
   \   00000014   ....               RCALL   ReadEEPROMByte
   \   00000016   01FA               MOVW    R31:R30, R21:R20
   \   00000018   9301               ST      Z+, R16
   \   0000001A   01AF               MOVW    R21:R20, R31:R30
     71              }
   \   0000001C   9611               ADIW    R27:R26, 1
   \   0000001E   9701               SBIW    R25:R24, 1
   \   00000020   F7C1               BRNE    ??ReadEEPROMBuffer_1
     72          }
   \                     ??ReadEEPROMBuffer_0:
   \   00000022   2F86               MOV     R24, R22
   \   00000024   2F93               MOV     R25, R19
   \   00000026   2DA0               MOV     R26, R0
   \   00000028   2FB7               MOV     R27, R23
   \   0000002A   9508               RET
     73          
     74          /*---------------------------------------------------------------------------
     75          **
     76          **  Writ buffer to eeprom
     77          **
     78          **--------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
     79          void WriteEEPROMBuffer( unsigned int Address, char Size, char *pData ) {   
   \                     WriteEEPROMBuffer:
     80          
     81              while (EECR & (1<<EEPE))     // Wait until ready
   \                     ??WriteEEPROMBuffer_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??WriteEEPROMBuffer_0
     82                  ;
     83              OS_IncDI();
   \   00000004   94F8               cli
   \   00000006   9130....           LDS     R19, (OS_Global + 1)
   \   0000000A   9533               INC     R19
   \   0000000C   9330....           STS     (OS_Global + 1), R19
     84              pWriteBuffer = pData;
   \   00000010   9340....           STS     pWriteBuffer, R20
   \   00000014   9350....           STS     (pWriteBuffer + 1), R21
     85              WriteCount = Size;
   \   00000018   9320....           STS     WriteCount, R18
     86              EEAR = Address ;
   \   0000001C   BD12               OUT     0x22, R17
   \   0000001E   BD01               OUT     0x21, R16
     87              EEDR = *pData ;
   \   00000020   01FA               MOVW    R31:R30, R21:R20
   \   00000022   8100               LD      R16, Z
   \   00000024   BD00               OUT     0x20, R16
     88              pWriteBuffer++;
   \   00000026   9100....           LDS     R16, pWriteBuffer
   \   0000002A   9110....           LDS     R17, (pWriteBuffer + 1)
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   9300....           STS     pWriteBuffer, R16
   \   00000036   9310....           STS     (pWriteBuffer + 1), R17
     89              EEPWriteOK = false;
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   9300....           STS     EEPWriteOK, R16
     90              EECR |= (1 << EEMPE) ;       // Don't use SetBit macrod due to timing
   \   00000040   9AFA               SBI     0x1F, 0x02
     91              EECR |= (1 << EEPE) ;        // Don't use SetBit macrod due to timing
   \   00000042   9AF9               SBI     0x1F, 0x01
     92              EECR |= (1 << EERIE) ;       // Don't use SetBit macrod due to timing
   \   00000044   9AFB               SBI     0x1F, 0x03
     93              OS_DecRI();
   \   00000046   9100....           LDS     R16, (OS_Global + 1)
   \   0000004A   950A               DEC     R16
   \   0000004C   9300....           STS     (OS_Global + 1), R16
   \   00000050   F409               BRNE    ??WriteEEPROMBuffer_1
   \   00000052   9478               sei
     94          }
   \                     ??WriteEEPROMBuffer_1:
   \   00000054   9508               RET
   \   00000056                      REQUIRE _A_EECR
   \   00000056                      REQUIRE _A_EEAR
   \   00000056                      REQUIRE _A_EEDR
     95          

   \                                 In  segment CODE, align 2, keep-with-next
     96          void
     97          WriteEEPROMBufferSync( unsigned int Address, char Size, char *pData )
   \                     WriteEEPROMBufferSync:
     98          {   
     99            while (EECR & (1<<EEPE))     // Wait until ready
   \                     ??WriteEEPROMBufferSync_0:
   \   00000000   99F9               SBIC    0x1F, 0x01
   \   00000002   CFFE               RJMP    ??WriteEEPROMBufferSync_0
    100              ;
    101          
    102            OS_IncDI();
   \   00000004   94F8               cli
   \   00000006   9130....           LDS     R19, (OS_Global + 1)
   \   0000000A   9533               INC     R19
   \   0000000C   9330....           STS     (OS_Global + 1), R19
    103            pWriteBuffer = pData;
   \   00000010   9340....           STS     pWriteBuffer, R20
   \   00000014   9350....           STS     (pWriteBuffer + 1), R21
    104            WriteCount = Size;
   \   00000018   9320....           STS     WriteCount, R18
    105            EEAR = Address ;
   \   0000001C   BD12               OUT     0x22, R17
   \   0000001E   BD01               OUT     0x21, R16
    106            EEDR = *pData ;
   \   00000020   01FA               MOVW    R31:R30, R21:R20
   \   00000022   8100               LD      R16, Z
   \   00000024   BD00               OUT     0x20, R16
    107            pWriteBuffer++;
   \   00000026   9100....           LDS     R16, pWriteBuffer
   \   0000002A   9110....           LDS     R17, (pWriteBuffer + 1)
   \   0000002E   5F0F               SUBI    R16, 255
   \   00000030   4F1F               SBCI    R17, 255
   \   00000032   9300....           STS     pWriteBuffer, R16
   \   00000036   9310....           STS     (pWriteBuffer + 1), R17
    108            EEPWriteOK = false;
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   9300....           STS     EEPWriteOK, R16
    109            EECR |= (1 << EEMPE) ;       // Don't use SetBit macrod due to timing
   \   00000040   9AFA               SBI     0x1F, 0x02
    110            EECR |= (1 << EEPE) ;        // Don't use SetBit macrod due to timing
   \   00000042   9AF9               SBI     0x1F, 0x01
    111          
    112            EECR |= (1 << EERIE) ;       // Don't use SetBit macrod due to timing
   \   00000044   9AFB               SBI     0x1F, 0x03
    113            OS_DecRI();
   \   00000046   9100....           LDS     R16, (OS_Global + 1)
   \   0000004A   950A               DEC     R16
   \   0000004C   9300....           STS     (OS_Global + 1), R16
   \   00000050   F409               BRNE    ??WriteEEPROMBufferSync_1
   \   00000052   9478               sei
    114          
    115            do
    116            {
    117              OS_Delay(1);
   \                     ??WriteEEPROMBufferSync_1:
   \   00000054   E001               LDI     R16, 1
   \   00000056   E010               LDI     R17, 0
   \   00000058   ........           CALL    OS_Delay
    118            }while (!EEPWriteOK);
   \   0000005C   9100....           LDS     R16, EEPWriteOK
   \   00000060   2300               TST     R16
   \   00000062   F3C1               BREQ    ??WriteEEPROMBufferSync_1
    119          }
   \   00000064   9508               RET
   \   00000066                      REQUIRE _A_EECR
   \   00000066                      REQUIRE _A_EEAR
   \   00000066                      REQUIRE _A_EEDR
    120          
    121          /*---------------------------------------------------------------------------
    122          **
    123          **  Interrupt on EEPROM write
    124          **
    125          **--------------------------------------------------------------------------*/
    126          #pragma vector=EE_READY_vect

   \                                 In  segment CODE, align 2, keep-with-next
    127          __interrupt void IntHandler_EEPROM( void ){
   \                     IntHandler_EEPROM:
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
    128          
    129              if ( --WriteCount ) {                        // More to write? 
   \   0000000C   9100....           LDS     R16, WriteCount
   \   00000010   950A               DEC     R16
   \   00000012   9300....           STS     WriteCount, R16
   \   00000016   2300               TST     R16
   \   00000018   F0C9               BREQ    ??IntHandler_EEPROM_0
    130                  EEAR++;                                  // Define address and data 
   \   0000001A   B501               IN      R16, 0x21
   \   0000001C   B512               IN      R17, 0x22
   \   0000001E   5F0F               SUBI    R16, 255
   \   00000020   4F1F               SBCI    R17, 255
   \   00000022   BD12               OUT     0x22, R17
   \   00000024   BD01               OUT     0x21, R16
    131                  EEDR = *pWriteBuffer++;
   \   00000026   91E0....           LDS     R30, pWriteBuffer
   \   0000002A   91F0....           LDS     R31, (pWriteBuffer + 1)
   \   0000002E   8100               LD      R16, Z
   \   00000030   BD00               OUT     0x20, R16
   \   00000032   9100....           LDS     R16, pWriteBuffer
   \   00000036   9110....           LDS     R17, (pWriteBuffer + 1)
   \   0000003A   5F0F               SUBI    R16, 255
   \   0000003C   4F1F               SBCI    R17, 255
   \   0000003E   9300....           STS     pWriteBuffer, R16
   \   00000042   9310....           STS     (pWriteBuffer + 1), R17
    132                  EECR |= (1 << EEMPE) ;       // Don't use SetBit macrod due to timing
   \   00000046   9AFA               SBI     0x1F, 0x02
    133                  EECR |= (1 << EEPE) ;        // Don't use SetBit macrod due to timing
   \   00000048   9AF9               SBI     0x1F, 0x01
   \   0000004A   C004               RJMP    ??IntHandler_EEPROM_1
    134              } else {
    135                  EECR &= ~(1 << EERIE) ;       // Don't use ClrBit macrod due to timing
   \                     ??IntHandler_EEPROM_0:
   \   0000004C   98FB               CBI     0x1F, 0x03
    136                  EEPWriteOK = true;
   \   0000004E   E001               LDI     R16, 1
   \   00000050   9300....           STS     EEPWriteOK, R16
    137              }
    138          }
   \                     ??IntHandler_EEPROM_1:
   \   00000054   BF2F               OUT     0x3F, R18
   \   00000056   9109               LD      R16, Y+
   \   00000058   9119               LD      R17, Y+
   \   0000005A   9129               LD      R18, Y+
   \   0000005C   91E9               LD      R30, Y+
   \   0000005E   91F9               LD      R31, Y+
   \   00000060   9518               RETI
   \   00000062                      REQUIRE _A_EEAR
   \   00000062                      REQUIRE _A_EEDR
   \   00000062                      REQUIRE _A_EECR
    139          
    140          
    141          /**===========================================================================
    142          ** Get the stored version in EEPROM
    143          **==========================================================================*/ 

   \                                 In  segment CODE, align 2, keep-with-next
    144          char EEPROMVersion(void) {
   \                     EEPROMVersion:
    145              char val ;
    146              char retval = false;
   \   00000000   E020               LDI     R18, 0
    147          
    148              ReadEEPROMBuffer(EEPROM_ID_START, 1, (char*)&val) ;
   \   00000002   E000               LDI     R16, 0
   \   00000004   E010               LDI     R17, 0
   \   00000006   ....               RCALL   ReadEEPROMByte
    149              if (val == EEPROM_ID) {                                     //correct EEPROM ID
   \   00000008   3B0D               CPI     R16, 189
   \   0000000A   F459               BRNE    ??EEPROMVersion_0
    150                  ReadEEPROMBuffer(EEPROM_ID_START+1, 1, (char*)&val) ;
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   E010               LDI     R17, 0
   \   00000010   ....               RCALL   ReadEEPROMByte
    151                  if (val == STORE_VERSION) {                             // and version
   \   00000012   3002               CPI     R16, 2
   \   00000014   F431               BRNE    ??EEPROMVersion_0
    152                      ReadEEPROMBuffer(0xffe, 1, (char*)&val) ;
   \   00000016   EF0E               LDI     R16, 254
   \   00000018   E01F               LDI     R17, 15
   \   0000001A   ....               RCALL   ReadEEPROMByte
    153                      if (val == EEPROM_OK) {                             // and no reset from user
   \   0000001C   3F0F               CPI     R16, 255
   \   0000001E   F409               BRNE    ??EEPROMVersion_0
    154                          retval = true ;                                 // then everything is OK
   \   00000020   E021               LDI     R18, 1
    155                      }
    156                  }
    157              }
    158              return retval;
   \                     ??EEPROMVersion_0:
   \   00000022   2F02               MOV     R16, R18
   \   00000024   9508               RET
    159          }
    160          
    161          /**===========================================================================
    162          ** Reset the EEPROM
    163          **==========================================================================*/ 

   \                                 In  segment CODE, align 2, keep-with-next
    164          void EEPROMReset(void) {
   \                     EEPROMReset:
    165              EEARL = (0x0ffe & 0xff);
   \   00000000   EF0E               LDI     R16, 254
   \   00000002   BD01               OUT     0x21, R16
    166              EEARH = (0x0ffe >> 8);
   \   00000004   E00F               LDI     R16, 15
   \   00000006   BD02               OUT     0x22, R16
    167              EEDR = EEPROM_RESET;
   \   00000008   ED0B               LDI     R16, 219
   \   0000000A   BD00               OUT     0x20, R16
    168              EECR |= (1<<EEMPE);
   \   0000000C   9AFA               SBI     0x1F, 0x02
    169              EECR |= (1<<EEPE);
   \   0000000E   9AF9               SBI     0x1F, 0x01
    170              while (EECR & (1<<EEPE))
   \                     ??EEPROMReset_0:
   \   00000010   99F9               SBIC    0x1F, 0x01
   \   00000012   CFFE               RJMP    ??EEPROMReset_0
    171                  ;
    172              WDTCSR = 0x18;               //Start watchdog to genetate restart
   \   00000014   E108               LDI     R16, 24
   \   00000016   9300....           STS     _A_WDTCSR, R16
    173              WDTCSR = 0x18;
   \   0000001A   9300....           STS     _A_WDTCSR, R16
    174          }
   \   0000001E   9508               RET
   \   00000020                      REQUIRE _A_EEAR
   \   00000020                      REQUIRE _A_EEDR
   \   00000020                      REQUIRE _A_EECR
   \   00000020                      REQUIRE _A_WDTCSR

   \                                 In  segment INTVEC, offset 0x78, root
   \                     `??IntHandler_EEPROM::??INTVEC 120`:
   \   00000078   ........           JMP     IntHandler_EEPROM

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   EEPROMReset
      0      2   EEPROMVersion
        0      2   -> ReadEEPROMByte
      5      2   IntHandler_EEPROM
      0      2   ReadEEPROMBuffer
        0      2   -> ReadEEPROMByte
      0      2   ReadEEPROMByte
      0      2   TestEEPROM
      0      2   WriteEEPROMBuffer
      0      2   WriteEEPROMBufferSync
        0      2   -> OS_Delay
      0      2   WriteEEPROMByte


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      32  EEPROMReset
      38  EEPROMVersion
      98  IntHandler_EEPROM
       4  IntHandler_EEPROM::??INTVEC 120
      44  ReadEEPROMBuffer
      26  ReadEEPROMByte
       6  TestEEPROM
      86  WriteEEPROMBuffer
     102  WriteEEPROMBufferSync
      28  WriteEEPROMByte
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_WDTCSR

 
   5 bytes in segment ABSOLUTE
 460 bytes in segment CODE
   4 bytes in segment INTVEC
 
 460 bytes of CODE memory (+ 4 bytes shared)
   0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
