###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       02/Jan/2024  12:26:16
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\init.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW9962.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\init.c"
#        --cpu=m128 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\Obj"
#        -D OS_LIBMODE_S -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\List"
#        -y --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -Ohz)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\List\init.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\Obj\init.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\init.c
      1          /****************************************************************************************
      2          / Init the project
      3          /
      4          ***************************************************************************************/
      5          #ifdef __ATMEGA_1280__
      6          #include	"iom1280.h"
      7          #endif
      8          
      9          #ifdef __ATMEGA_1281__
     10          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb3
   \   union <unnamed> volatile __io _A_OCR2A
   \                     _A_OCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb1
   \   union <unnamed> volatile __io _A_TCCR2B
   \                     _A_TCCR2B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb0
   \   union <unnamed> volatile __io _A_TCCR2A
   \                     _A_TCCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7c
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x75
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_WDTCSR
   \                     _A_WDTCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54
   \   union <unnamed> volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4d
   \   union <unnamed> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_SPCR
   \                     _A_SPCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1
     11          #endif
     12          #include "stdio.h"
     13          #include "math.h"
     14          #include "externals.h"
     15          #include "version.h"
     16          #include "inavr.h"
     17          #include "string.h"
     18          
     19          /*
     20          **===========================================================================
     21          ** Init the system according to board type
     22          **===========================================================================
     23          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     24          void InitSystem(void) {
   \                     InitSystem:
     25          #if ANZBANA_V8 == 1
     26              DDRA    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
     27              PORTA   =  0x3;
     28              UnitID  = PINA & 0x03;       //get the unit ID
     29          #else
     30              DDRB    =  0x00 ;      // Port B data direction, bit 0, 4-7 out
   \   00000000   E000               LDI     R16, 0
   \   00000002   B904               OUT     0x04, R16
     31          //    PORTB   =  0xc;
     32              UnitID  = (PINB >> 2)& 0x03;       //get the unit ID
   \   00000004   B103               IN      R16, 0x03
   \   00000006   9506               LSR     R16
   \   00000008   9506               LSR     R16
   \   0000000A   7003               ANDI    R16, 0x03
   \   0000000C   9300....           STS     UnitID, R16
     33          #endif
     34          #if (OS_UART == 0)
     35              UnitID = 0x00; //AStmark  for test
     36          #endif
     37          
     38              Init_CPU();                         // init all processes
   \   00000010   ....               RCALL   Init_CPU
     39              Init_IO();
   \   00000012   ....               RCALL   Init_IO
     40              Init_TMR() ;
   \   00000014   ....               RCALL   Init_TMR
     41          #if USE_1281_RX_INT_TASK==0
     42          #if (OS_UART != 0)
     43              Init_USART(0, 38400) ;              // 
     44          #endif
     45              Init_USART(1, 38400) ;              //    
     46          #endif
     47              Init_AD();
   \   00000016   ....               RCALL   Init_AD
     48              Init_Values();                      // init the values in the system
     49          
     50              // 128 -> 1281
     51              // ADCSR |= 0x40 ;                     //start the AD convertion
     52              ADCSRA |= 0x40 ;
   \   00000018   9100007A           LDS     R16, 122
   \   0000001C   6400               ORI     R16, 0x40
   \   0000001E   9300007A           STS     122, R16
     53          }
   \   00000022   9508               RET
   \   00000024                      REQUIRE _A_DDRB
   \   00000024                      REQUIRE _A_PINB
   \   00000024                      REQUIRE _A_ADCSRA
     54          
     55          /*
     56          **===========================================================================
     57          ** Init the CPU related registers
     58          **===========================================================================
     59          */ 

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   9100....           LDS     R16, UnitID
   \   00000004   2300               TST     R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
     60          void Init_CPU( void ) {
   \                     Init_CPU:
     61          
     62              __disable_interrupt();
   \   00000000   94F8               CLI
     63          
     64              /*--- Configure CPU and interrupts ---*/
     65              switch (UnitID) {
   \   00000002   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_10:
   \   00000004   F019               BREQ    ??Init_CPU_0
   \   00000006   950A               DEC     R16
   \   00000008   F079               BREQ    ??Init_CPU_1
   \   0000000A   C01B               RJMP    ??Init_CPU_2
     66              case AN_ZB485:                  // AN-ZB485 
     67                  MCUCR = 0xc0 ;        // MCU control register  External Ram + wait state
   \                     ??Init_CPU_0:
   \   0000000C   EC00               LDI     R16, 192
   \   0000000E   BF05               OUT     0x35, R16
     68                  EIMSK = 0x00 ;        // External interrupt mask register, all off
   \   00000010   E000               LDI     R16, 0
   \   00000012   BB0D               OUT     0x1D, R16
     69                  EICRA = 0xAf ;        // External interrupt control register, 0,1 raising, rest faling
   \   00000014   EA0F               LDI     R16, 175
   \   00000016   9300....           STS     _A_EICRA, R16
     70                  EICRB = 0xAA ;        // External interrupt control register 
   \   0000001A   EA0A               LDI     R16, 170
   \   0000001C   9300....           STS     _A_EICRB, R16
     71                  EIMSK = 0x03 ;        // External interrupt mask register, int 0 and 1 on 
   \   00000020   E003               LDI     R16, 3
   \   00000022   BB0D               OUT     0x1D, R16
     72                  XMCRA = 0x80;         // maximum wait states
   \   00000024   E800               LDI     R16, 128
   \   00000026   C00B               RJMP    ??Init_CPU_3
     73                  break;
     74              case AN_ZBANA:                  // AN-ZBANA
     75                  MCUCR = 0x00 ;        // MCU control register wait state
   \                     ??Init_CPU_1:
   \   00000028   E000               LDI     R16, 0
   \   0000002A   BF05               OUT     0x35, R16
     76                  EIMSK = 0x00 ;        // External interrupt mask register , all off
   \   0000002C   BB0D               OUT     0x1D, R16
     77                  EICRA = 0xAA ;        // External interrupt control register, o on faling edge
   \   0000002E   EA0A               LDI     R16, 170
   \   00000030   9300....           STS     _A_EICRA, R16
     78                  EICRB = 0xAA ;        // External interrupt control register 
   \   00000034   9300....           STS     _A_EICRB, R16
     79                  EIMSK = 0x01 ;        // External interrupt mask register, int 0 on
   \   00000038   E001               LDI     R16, 1
   \   0000003A   BB0D               OUT     0x1D, R16
     80                  XMCRA = 0x00 ;        // maximum wait states
   \   0000003C   E000               LDI     R16, 0
   \                     ??Init_CPU_3:
   \   0000003E   9300....           STS     _A_XMCRA, R16
     81                  break;
     82              }
     83              // XMCRA = 0x00; // maximum wait states
     84              XMCRB = 0x07 ;       // Full portC + bus keeper
   \                     ??Init_CPU_2:
   \   00000042   E007               LDI     R16, 7
   \   00000044   9300....           STS     _A_XMCRB, R16
     85              //
     86              // hkim
     87              // are you fucking out of mind?
     88              // why do you enable global interrupt here?
     89              //
     90              // SREG = 0x80;  // global interrupt
     91          
     92              //
     93              // 128 -> 1281
     94              // No XDIV in 1281. CLKPR instead.
     95              // Anyway No need to do this.
     96              //XDIV  = 0x00 ;     // Init valuse used 0x00
     97          
     98              // 128 -> 1281
     99              // register name change
    100              // RestartStatus = MCUCSR;       // Remember reset source
    101              RestartStatus = MCUSR;
   \   00000048   B704               IN      R16, 0x34
   \   0000004A   9300....           STS     RestartStatus, R16
    102              MCUSR = 0x00; // and reset
   \   0000004E   E000               LDI     R16, 0
   \   00000050   BF04               OUT     0x34, R16
    103              /*--- Initialize buffer ---*/
    104              WriteCount = 0;
   \   00000052   9300....           STS     WriteCount, R16
    105          
    106          }
   \   00000056   9508               RET
   \   00000058                      REQUIRE _A_MCUCR
   \   00000058                      REQUIRE _A_EIMSK
   \   00000058                      REQUIRE _A_EICRA
   \   00000058                      REQUIRE _A_EICRB
   \   00000058                      REQUIRE _A_XMCRA
   \   00000058                      REQUIRE _A_XMCRB
   \   00000058                      REQUIRE _A_MCUSR
    107          
    108          /*
    109          **===========================================================================
    110          ** Init the watchdog registers
    111          **===========================================================================
    112          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    113          __monitor void Init_Watchdog( void ) {
   \                     Init_Watchdog:
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
    114          
    115              asm("WDR");                             // kick the dog!!
   \   00000004   95A8               WDR
    116              // 128 -> 1281
    117              // WDTCR = 0x0f;
    118              WDTCSR = 0x0f;
   \   00000006   E00F               LDI     R16, 15
   \   00000008   9300....           STS     _A_WDTCSR, R16
    119              asm("WDR");                             // kick the dog!!
   \   0000000C   95A8               WDR
    120          
    121          }
   \   0000000E   BF1F               OUT     0x3F, R17
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_WDTCSR
    122          
    123          /*
    124          **===========================================================================
    125          ** Init the IO related registers
    126          **===========================================================================
    127          */ 
    128          
    129          

   \                                 In  segment CODE, align 2, keep-with-next
    130          void SPI_Init()					/* SPI Initialize function */
   \                     SPI_Init:
    131          {
    132          
    133              // SPI initialization
    134              // SPI Type: Master
    135              // SPI Clock Rate: 125,000 kHz
    136              // SPI Clock Phase: Cycle Half
    137              // SPI Clock Polarity: High
    138              // SPI Data Order: MSB First
    139              //SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI in master mode with Fosc/16 */
    140              SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA) | (1<<SPR1) | (1<<SPR0);
   \   00000000   E50F               LDI     R16, 95
   \   00000002   BD0C               OUT     0x2C, R16
    141              //SPSR=(0<<SPI2X);
    142              SPSR &= ~(1<<SPI2X);			/* Disable speed doubler */
   \   00000004   B50D               IN      R16, 0x2D
   \   00000006   7F0E               ANDI    R16, 0xFE
   \   00000008   BD0D               OUT     0x2D, R16
    143          }
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_SPCR
   \   0000000C                      REQUIRE _A_SPSR
    144          

   \                                 In  segment CODE, align 2, keep-with-next
    145          void Init_IO( void ) {
   \                     Init_IO:
    146          
    147              /*--- Initialize the data registers, output value and input pullup ---*/
    148              switch (UnitID) {
   \   00000000   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_9:
   \   00000002   F019               BREQ    ??Init_IO_0
   \   00000004   950A               DEC     R16
   \   00000006   F0A9               BREQ    ??Init_IO_1
   \   00000008   9508               RET
    149              case AN_ZB485:                  // AN-ZB485  
    150                  DDRA   =  0xff ;      // Port A data direction (out), external bus
   \                     ??Init_IO_0:
   \   0000000A   EF0F               LDI     R16, 255
   \   0000000C   B901               OUT     0x01, R16
    151                  PORTA  =  0x00 ;      // Port A data
   \   0000000E   E000               LDI     R16, 0
   \   00000010   B902               OUT     0x02, R16
    152                  DDRB   =  0x10 ;      // Port B data direction, bit 0, 4-7 out
   \   00000012   E100               LDI     R16, 16
   \   00000014   ....               RCALL   ?Subroutine1
    153                  PORTB  =  0x00 ;      // Port B data   
    154                  DDRC   =  0xff ;      // Port C data direction, all out
    155                  PORTC  =  0x00 ;      // Port C data
    156                  DDRD   =  0x00 ;      // Port D data direction, all in except output to osc and txd
   \                     ??CrossCallReturnLabel_2:
   \   00000016   B90A               OUT     0x0A, R16
    157                  PORTD  =  0xff ;      // Port D data pullup on int fro AD
   \   00000018   EF0F               LDI     R16, 255
   \   0000001A   B90B               OUT     0x0B, R16
    158                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   0000001C   EF0E               LDI     R16, 254
   \   0000001E   B90D               OUT     0x0D, R16
    159                  PORTE  =  0xf0 ;      // Port E data 
   \   00000020   EF00               LDI     R16, 240
   \   00000022   B90E               OUT     0x0E, R16
    160                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   00000024   E000               LDI     R16, 0
   \   00000026   BB00               OUT     0x10, R16
    161                  PORTF  =  0x00 ;      // Port F data 
   \   00000028   BB01               OUT     0x11, R16
    162                  DDRG   =  0x07 ;      // Port G data direction, port 1,2,3 out
   \   0000002A   E007               LDI     R16, 7
   \   0000002C   BB03               OUT     0x13, R16
    163                  PORTG  =  0x03 ;      // Port G data 
   \   0000002E   E003               LDI     R16, 3
   \   00000030   C012               RJMP    ??Init_IO_2
    164                  break;
    165              case AN_ZBANA:                  // AN-ZBANA
    166          #if ANZBANA_V8 == 1
    167                  DDRA   =  0x00 ;      // Port A data direction in ID0, ID1
    168                  PORTA  =  0x03 ;      // Port A data
    169                  DDRB   =  0xF7 ;      // Port B data direction, bit 2 in, bit 0-1 and 3-7 out
    170                  PORTB  =  0x08 ;      // Port B data  Pin 3 pull-up 
    171                  DDRC   =  0xFF ;      // Port C data direction, all out
    172                  PORTC  =  0x00 ;      // Port C data
    173                  DDRD   =  0x02 ;      // Port D data direction, all in except output to ADC CLC
    174                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD and ADC CLC
    175                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
    176                  PORTE  =  0x00 ;      // Port E data 
    177                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
    178                  PORTF  =  0x00 ;      // Port F data 
    179                  DDRG   =  0x08 ;      // Port G data direction, bit 3 out
    180                  PORTG  =  0x30 ;      // Port G data pullup PG4, PG5 
    181                  SPI_Init();
    182          #else
    183                  DDRA   =  0x00 ;      // Port A data direction in (not used)
   \                     ??Init_IO_1:
   \   00000032   E000               LDI     R16, 0
   \   00000034   B901               OUT     0x01, R16
    184                  PORTA  =  0x00 ;      // Port A data
   \   00000036   B902               OUT     0x02, R16
    185                  DDRB   =  0xF1 ;      // Port B data direction, bit 0, 4-7 out
   \   00000038   EF01               LDI     R16, 241
   \   0000003A   ....               RCALL   ?Subroutine1
    186                  PORTB  =  0x00 ;      // Port B data   
    187                  DDRC   =  0xFF ;      // Port C data direction, all out
    188                  PORTC  =  0x00 ;      // Port C data
    189                  DDRD   =  0x02 ;      // Port D data direction, all in except output to osc and txd
   \                     ??CrossCallReturnLabel_3:
   \   0000003C   E002               LDI     R16, 2
   \   0000003E   B90A               OUT     0x0A, R16
    190                  PORTD  =  0xf1 ;      // Port D data pullup on int fro AD
   \   00000040   EF01               LDI     R16, 241
   \   00000042   B90B               OUT     0x0B, R16
    191                  DDRE   =  0xFE ;      // Port E data direction, all out except rxd
   \   00000044   EF0E               LDI     R16, 254
   \   00000046   B90D               OUT     0x0D, R16
    192                  PORTE  =  0x00 ;      // Port E data 
   \   00000048   E000               LDI     R16, 0
   \   0000004A   B90E               OUT     0x0E, R16
    193                  DDRF   =  0x00 ;      // Port F data direction, used for ADC
   \   0000004C   BB00               OUT     0x10, R16
    194                  PORTF  =  0x00 ;      // Port F data 
   \   0000004E   BB01               OUT     0x11, R16
    195                  DDRG   =  0x10 ;      // Port G data direction, bit 5 out
   \   00000050   E100               LDI     R16, 16
   \   00000052   BB03               OUT     0x13, R16
    196                  PORTG  =  0x00 ;      // Port G data 
   \   00000054   E000               LDI     R16, 0
   \                     ??Init_IO_2:
   \   00000056   BB04               OUT     0x14, R16
    197          #endif
    198                  break;
    199              default:
    200                  break;
    201              }    
    202          }
   \   00000058   9508               RET
   \   0000005A                      REQUIRE _A_DDRA
   \   0000005A                      REQUIRE _A_PORTA
   \   0000005A                      REQUIRE _A_DDRB
   \   0000005A                      REQUIRE _A_PORTB
   \   0000005A                      REQUIRE _A_DDRC
   \   0000005A                      REQUIRE _A_PORTC
   \   0000005A                      REQUIRE _A_DDRD
   \   0000005A                      REQUIRE _A_PORTD
   \   0000005A                      REQUIRE _A_DDRE
   \   0000005A                      REQUIRE _A_PORTE
   \   0000005A                      REQUIRE _A_DDRF
   \   0000005A                      REQUIRE _A_PORTF
   \   0000005A                      REQUIRE _A_DDRG
   \   0000005A                      REQUIRE _A_PORTG

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   B904               OUT     0x04, R16
   \   00000002   E000               LDI     R16, 0
   \   00000004   B905               OUT     0x05, R16
   \   00000006   EF0F               LDI     R16, 255
   \   00000008   B907               OUT     0x07, R16
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   B908               OUT     0x08, R16
   \   0000000E   9508               RET
    203          
    204          /*
    205          **===========================================================================
    206          ** Init the timer related registers
    207          **===========================================================================
    208          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    209          void Init_TMR( void ) {
   \                     Init_TMR:
    210              /*--- Timer control (disable clock inputs) ---*/
    211          
    212              switch (UnitID) {
   \   00000000   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_8:
   \   00000002   F019               BREQ    ??Init_TMR_0
   \   00000004   950A               DEC     R16
   \   00000006   F021               BREQ    ??Init_TMR_1
   \   00000008   9508               RET
    213              case AN_ZB485:                  // AN-ZB485
    214                  // 128 -> 1281
    215                  // TIM0 and TIM2 are swapped in 1281.
    216                  // Registers are completely changed.
    217                  // TCCR0   =  0x99 ;      // Timer control register 0
    218                  // OCR0    =  3;         // Timer output compare register 0, 2MHZ //16MHz xtal
    219                  //
    220                  // TCCR2A : 0 1 0 0 - - 1 0
    221                  // TCCR2B : 1 0 - - 0 0 0 1
    222                  //
    223                  // COM2A1 COM2A0 : 0 1
    224                  // COM2B1 COM2B0 : 0 0
    225                  // WGM21 WGM20   : 1 0
    226                  // FOC2A : 1, FOR2B : 0, WGM22 : 0, CS2/1/0 : 0 0 1
    227                  //
    228                  // COM2A : Toggle
    229                  // WGM : CTC
    230                  // Clock Scale: 1
    231          
    232                  TCCR2A = 0x42;
   \                     ??Init_TMR_0:
   \   0000000A   ....               RCALL   ?Subroutine3
    233                  TCCR2B = 0x81;
    234                  OCR2A = 3;
   \                     ??CrossCallReturnLabel_6:
   \   0000000C   E003               LDI     R16, 3
   \   0000000E   C002               RJMP    ??Init_TMR_2
    235                  break;
    236              case AN_ZBANA:                  // AN-ZBANA
    237                  // 128 -> 1281
    238                  // TCCR0   =  0x99 ;      // Timer control register 0
    239                  // OCR0    =  7 ;         // Timer output compare register 0, 1MHZ //16MHz xtal
    240                  TCCR2A = 0x42;
   \                     ??Init_TMR_1:
   \   00000010   ....               RCALL   ?Subroutine3
    241                  TCCR2B = 0x81;
    242                  OCR2A = 7;
   \                     ??CrossCallReturnLabel_7:
   \   00000012   E007               LDI     R16, 7
   \                     ??Init_TMR_2:
   \   00000014   9300....           STS     _A_OCR2A, R16
    243                  break;
    244              default:
    245                  break;
    246              }
    247          
    248          } 
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_TCCR2A
   \   0000001A                      REQUIRE _A_TCCR2B
   \   0000001A                      REQUIRE _A_OCR2A

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   E402               LDI     R16, 66
   \   00000002   9300....           STS     _A_TCCR2A, R16
   \   00000006   E801               LDI     R16, 129
   \   00000008   9300....           STS     _A_TCCR2B, R16
   \   0000000C   9508               RET
    249          
    250          /*
    251          **===========================================================================
    252          ** Init the USARTs registers
    253          **===========================================================================
    254          */ 
    255          
    256          

   \                                 In  segment CODE, align 2, keep-with-next
    257          void Init_USART( char channel, unsigned long baud ) {
   \                     Init_USART:
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2F80               MOV     R24, R16
   \   00000006   012A               MOVW    R5:R4, R21:R20
   \   00000008   013B               MOVW    R7:R6, R23:R22
    258          
    259              OS_CREATEMB(&UART[channel].RxMailBox,1, sizeof(UART[channel].RxMailBoxBuf),&UART[channel].RxMailBoxBuf);
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   EF4D               LDI     R20, 253
   \   0000000E   E051               LDI     R21, 1
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   ....               LDI     R26, LOW(UART)
   \   00000016   ....               LDI     R27, (UART) >> 8
   \   00000018   0FA0               ADD     R26, R16
   \   0000001A   1FB1               ADC     R27, R17
   \   0000001C   01BD               MOVW    R23:R22, R27:R26
   \   0000001E   5460               SUBI    R22, 64
   \   00000020   4F7E               SBCI    R23, 254
   \   00000022   E342               LDI     R20, 50
   \   00000024   E050               LDI     R21, 0
   \   00000026   E021               LDI     R18, 1
   \   00000028   018D               MOVW    R17:R16, R27:R26
   \   0000002A   500E               SUBI    R16, 14
   \   0000002C   4F1E               SBCI    R17, 254
   \   0000002E   ........           CALL    OS_CreateMB
    260              
    261              /*--- Configure UART data block ---*/
    262              UART[channel].TxFirst   = 0x00;
   \   00000032   018D               MOVW    R17:R16, R27:R26
   \   00000034   5E0D               SUBI    R16, 237
   \   00000036   4F1E               SBCI    R17, 254
   \   00000038   01F8               MOVW    R31:R30, R17:R16
   \   0000003A   E020               LDI     R18, 0
   \   0000003C   ....               RCALL   ?Subroutine2
    263              UART[channel].TxLast    = 0x00;
    264              UART[channel].TxCount   = 0x00;
    265              UART[channel].RxFirst   = 0x00;
   \                     ??CrossCallReturnLabel_4:
   \   0000003E   54AF               SUBI    R26, 79
   \   00000040   4FBE               SBCI    R27, 254
   \   00000042   01FD               MOVW    R31:R30, R27:R26
   \   00000044   ....               RCALL   ?Subroutine2
    266              UART[channel].RxLast    = 0x00;
    267              UART[channel].RxCount   = 0x00;
    268              UART[channel].RxState   = SYNC;
   \                     ??CrossCallReturnLabel_5:
   \   00000046   8326               STD     Z+6, R18
    269              UART[channel].SyncCnt   = 0 ;
   \   00000048   8327               STD     Z+7, R18
    270              UART[channel].TxStatus  = 0x00;
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   8326               STD     Z+6, R18
    271          
    272              switch (channel) {
   \   0000004E   2388               TST     R24
   \   00000050   F019               BREQ    ??Init_USART_0
   \   00000052   958A               DEC     R24
   \   00000054   F0A1               BREQ    ??Init_USART_1
   \   00000056   C025               RJMP    ??Init_USART_2
    273              case 0x00 :          
    274                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_0:
   \   00000058   ....               LDI     R30, LOW((UART + 441))
   \   0000005A   ....               LDI     R31, HIGH((UART + 441))
   \   0000005C   EF0A               LDI     R16, 250
   \   0000005E   8300               ST      Z, R16
   \   00000060   8321               STD     Z+1, R18
    275                  UCSR0A  = 0x00; 
   \   00000062   9320....           STS     _A_UCSR0A, R18
    276                  //UBRR0L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
    277                  //UBRR0H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
    278                  UBRR0   = (unsigned)(((float)XTAL_CPU / 16.0 / ((float)baud) )-0.5); 
   \   00000066   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00000068   9310....           STS     (_A_UBRR0 + 1), R17
   \   0000006C   9300....           STS     _A_UBRR0, R16
    279                  // why the fuck do you enalbe UDRE here you stupid fucktard!!! -hkim
    280                  // UCSR0B = 0xb8; /* tx/ rx enable, int udre/rxon */
    281                  UCSR0B  = 0x98;       /* tx/ rx enable, int udre/rxon */
   \   00000070   E908               LDI     R16, 152
   \   00000072   9300....           STS     _A_UCSR0B, R16
    282                  UCSR0C  = 0x06;       /* n,8,1 */
   \   00000076   E006               LDI     R16, 6
   \   00000078   9300....           STS     _A_UCSR0C, R16
    283                  break;
   \   0000007C   C012               RJMP    ??Init_USART_2
    284              case 0x01 :
    285                  UART[channel].RxTimeout = RX_TO_TIME ;   // reset timeout
   \                     ??Init_USART_1:
   \   0000007E   ....               LDI     R30, LOW((UART + 950))
   \   00000080   ....               LDI     R31, HIGH((UART + 950))
   \   00000082   EF0A               LDI     R16, 250
   \   00000084   8300               ST      Z, R16
   \   00000086   8321               STD     Z+1, R18
    286                  UCSR1A  = 0x00; 
   \   00000088   9320....           STS     _A_UCSR1A, R18
    287                  //UBRR1L  = ((XTAL_CPU / 16 / baud )-1) & 0xff;
    288                  //UBRR1H  = (((XTAL_CPU / 16 / baud )-1)>> 8) & 0xff;
    289                  UBRR1   = (unsigned)(((float)XTAL_CPU / 16.0 / ((float)baud) )-0.5); 
   \   0000008C   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   0000008E   9310....           STS     (_A_UBRR1 + 1), R17
   \   00000092   9300....           STS     _A_UBRR1, R16
    290                  // why the fuck do you enalbe UDRE here you stupid fucktard!!! -hkim
    291                  // UCSR1B = 0xb8; /* tx/ rx enable, int udre/rxon */
    292                  UCSR1B = 0x98;       /* tx/ rx enable, int udre/rxon */
   \   00000096   E908               LDI     R16, 152
   \   00000098   9300....           STS     _A_UCSR1B, R16
    293                  UCSR1C  = 0x06;       /* n,8,1 */
   \   0000009C   E006               LDI     R16, 6
   \   0000009E   9300....           STS     _A_UCSR1C, R16
    294                  break;
    295              default:
    296                  break ;
    297              }    
    298          }
   \                     ??Init_USART_2:
   \   000000A2   E0E8               LDI     R30, 8
   \   000000A4   ........           JMP     ?EPILOGUE_B8_L09
   \   000000A8                      REQUIRE _A_UCSR0A
   \   000000A8                      REQUIRE _A_UBRR0
   \   000000A8                      REQUIRE _A_UCSR0B
   \   000000A8                      REQUIRE _A_UCSR0C
   \   000000A8                      REQUIRE _A_UCSR1A
   \   000000A8                      REQUIRE _A_UBRR1
   \   000000A8                      REQUIRE _A_UCSR1B
   \   000000A8                      REQUIRE _A_UCSR1C

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   8320               ST      Z, R18
   \   00000002   8321               STD     Z+1, R18
   \   00000004   8322               STD     Z+2, R18
   \   00000006   8323               STD     Z+3, R18
   \   00000008   8324               STD     Z+4, R18
   \   0000000A   8325               STD     Z+5, R18
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0182               MOVW    R17:R16, R5:R4
   \   00000002   0193               MOVW    R19:R18, R7:R6
   \   00000004   ........           CALL    ?UL2F_L04
   \   00000008   01A8               MOVW    R21:R20, R17:R16
   \   0000000A   01B9               MOVW    R23:R22, R19:R18
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   E214               LDI     R17, 36
   \   00000010   E724               LDI     R18, 116
   \   00000012   E439               LDI     R19, 73
   \   00000014   ........           CALL    ?F_DIV_L04
   \   00000018   E040               LDI     R20, 0
   \   0000001A   E050               LDI     R21, 0
   \   0000001C   E060               LDI     R22, 0
   \   0000001E   EB7F               LDI     R23, 191
   \   00000020   ........           CALL    ?F_ADD_L04
   \   00000024   ........           JMP     ?F2SL_L04
    299          
    300          
    301          /*
    302          **===========================================================================
    303          ** Init the AD converter registers
    304          **===========================================================================
    305          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    306          void Init_AD( void ) {
   \                     Init_AD:
    307          
    308              char i;     
    309              for (i = 0; i<8; i++) {                 // Init variables
   \   00000000   E010               LDI     R17, 0
   \   00000002   E008               LDI     R16, 8
    310                  ADInt.Result[i] = 0;                   // convertion resluts
   \                     ??Init_AD_0:
   \   00000004   E022               LDI     R18, 2
   \   00000006   9F12               MUL     R17, R18
   \   00000008   01F0               MOVW    R31:R30, R1:R0
   \   0000000A   ....               SUBI    R30, LOW((-(ADInt) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(ADInt) & 0xFFFF) >> 8
   \   0000000E   E020               LDI     R18, 0
   \   00000010   8320               ST      Z, R18
   \   00000012   8321               STD     Z+1, R18
    311              }
   \   00000014   9513               INC     R17
   \   00000016   950A               DEC     R16
   \   00000018   F7A9               BRNE    ??Init_AD_0
    312              ADChannel = 0x00 ;                      // AD channel to be converted
   \   0000001A   9320....           STS     ADChannel, R18
    313              ADMUX   = 0xc0 ;                        // Ref = 2,56V, right adjust
   \   0000001E   EC00               LDI     R16, 192
   \   00000020   9300....           STS     _A_ADMUX, R16
    314              // 128 -> 1281
    315              // ADCSR   = 0x8f ;                        // AD enabled, int enabled, xtal / 128
    316              ADCSRA = 0x8f;
   \   00000024   E80F               LDI     R16, 143
   \   00000026   9300....           STS     _A_ADCSRA, R16
    317          }
   \   0000002A   9508               RET
   \   0000002C                      REQUIRE _A_ADMUX
   \   0000002C                      REQUIRE _A_ADCSRA
    318          
    319          /*
    320          **===========================================================================
    321          ** Init values  in the system
    322          **===========================================================================
    323          */ 

   \                                 In  segment CODE, align 2, keep-with-next
    324          void Init_Values(void) {
   \                     Init_Values:
    325          
    326          
    327          }
   \   00000000   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   InitSystem
        0      2   -> Init_AD
        0      2   -> Init_CPU
        0      2   -> Init_IO
        0      2   -> Init_TMR
      0      2   Init_AD
      0      2   Init_CPU
      0      2   Init_IO
      0      2   Init_TMR
      8      2   Init_USART
        8      2   -> OS_CreateMB
        8      2 ?F2SL_L04
        8      4 ?F_ADD_L04
        8      4 ?F_DIV_L04
        8      2 ?S_EC_MUL_L02
        8      4 ?UL2F_L04
      0      2   Init_Values
      0      2   Init_Watchdog
      0      2   SPI_Init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?Subroutine0
      16  ?Subroutine1
      14  ?Subroutine2
      14  ?Subroutine3
       8  ?Subroutine4
      36  InitSystem
      44  Init_AD
      88  Init_CPU
      90  Init_IO
      26  Init_TMR
     168  Init_USART
       2  Init_Values
      18  Init_Watchdog
      12  SPI_Init
       1  _A_ADCSRA
       1  _A_ADMUX
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_MCUSR
       1  _A_OCR2A
       1  _A_PINB
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_SPCR
       1  _A_SPSR
       1  _A_TCCR2A
       1  _A_TCCR2B
       2  _A_UBRR0
       2  _A_UBRR1
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_WDTCSR
       1  _A_XMCRA
       1  _A_XMCRB

 
  40 bytes in segment ABSOLUTE
 576 bytes in segment CODE
 
 576 bytes of CODE memory
   0 bytes of DATA memory (+ 40 bytes shared)

Errors: none
Warnings: none
