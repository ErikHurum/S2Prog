###############################################################################
#
# IAR C/C++ Compiler V7.30.5.1680 for Microchip AVR       02/Jan/2024  12:26:17
# Copyright 1996-2022 IAR Systems AB.
# Mobile license - IAR Embedded Workbench for Microchip AVR 8.10
#
#    Source file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
#    Command line =  
#        -f C:\Users\ESY\AppData\Local\Temp\EW9967.tmp ("C:\Users\ESY\OneDrive
#        - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c"
#        --cpu=m128 -ms -o "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\Obj"
#        -D OS_LIBMODE_S -D OS_UART=-1 -D USE_16552_DRIVER_TASK=1 -D
#        USE_1281_RX_INT_TASK=1 -D USE_MODBUS_PROTOCOL=0 -D ANZBANA_V8=0 -D
#        __ATMEGA_1281__ -lCN "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\List"
#        -y --initializers_in_flash -DENABLE_BIT_DEFINITIONS -e -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\INC\\" -I
#        "C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\..\..\SHARED\INC\\"
#        --eeprom_size 4096 --clib -Ohz)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\List\RS485.lst
#    Object file  =  
#        C:\Users\ESY\OneDrive -
#        Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Release_debug\Obj\RS485.r90
#
###############################################################################

C:\Users\ESY\OneDrive - Scanjet\Documents\GitHub\S2Prog\IO\ANZB_ATmega1281\Src\RS485.c
      1          
      2          /****************************************************************************************
      3          / Uart communication to external ADcards
      4          /
      5          ***************************************************************************************/
      6          
      7          #include "iom1281.h"

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1
      8          #include "stdio.h"
      9          #include "math.h"
     10          #include "externals.h"
     11          #include "version.h"
     12          
     13          #if USE_MODBUS_PROTOCOL == 1
     14              #include "common_def.h"
     15          
     16          #endif /* USE_MODBUS_PROTOCOL == 1 */
     17          
     18          
     19          /************************************************ *************************
     20          *   (This is a timer calback)
     21          *  Timout timer UART 0
     22          *
     23          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     24          void TimoutUART0(void) {
   \                     TimoutUART0:
     25          
     26              U0_MCR &= ~RTS;      // set RTS off
   \   00000000   E0EC               LDI     R30, LOW(8716)
   \   00000002   ....               RJMP    ?Subroutine6
     27          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   E2F2               LDI     R31, (8716) >> 8
   \   00000002   8100               LD      R16, Z
   \   00000004   7F0D               ANDI    R16, 0xFD
   \   00000006   ....               RJMP    ??Subroutine135_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine135_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   9508               RET
     28          
     29          /*************************************************************************
     30          *   (This is a timer calback)
     31          *  Timout timer UART 1
     32          *
     33          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     34          void TimoutUART1(void) {
   \                     TimoutUART1:
     35          
     36              U1_MCR &= ~RTS;       // set RTS off
   \   00000000   E0E4               LDI     R30, LOW(8708)
   \   00000002                      REQUIRE ?Subroutine6
   \   00000002                      ;               // Fall through to label ?Subroutine6
     37          }
     38          
     39          
     40          /*************************************************************************
     41          *   (This is a task)
     42          *  Usart handler UART send request
     43          *
     44          *************************************************************************/
     45          #pragma diag_suppress=Pa082

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine127:
   \   00000000   ........           JMP     OS_Delay

   \                                 In  segment CODE, align 2, keep-with-next
     46          void ExtRS485Ctl(void) {
   \                     ExtRS485Ctl:
   \   00000000   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_77:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
     47              char SeqCnt = 0;
   \   00000002   2444               CLR     R4
     48              char PowerOnTimer = POWER_ON_CNT;                    // do not make a unwanted power on sequence in the starting phase
   \   00000004   E005               LDI     R16, 5
   \   00000006   2E50               MOV     R5, R16
     49              char EventStatus;
     50              char AskMD[2];
     51          
     52          
     53              Init16552(0, 9600);                                      // Init UART channel 0
   \   00000008   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_80:
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   ....               RCALL   Init16552
     54              Init16552(1, 9600);                                      // Init UART channel 1
   \   0000000E   ....               RCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_81:
   \   00000010   E001               LDI     R16, 1
   \   00000012   ....               RCALL   Init16552
     55              OS_SignalEvent(0x01,&TCB_16552_RxHandler1 );
   \   00000014   ....               LDI     R18, LOW(TCB_16552_RxHandler1)
   \   00000016   ....               LDI     R19, (TCB_16552_RxHandler1) >> 8
   \   00000018   ....               RCALL   ?Subroutine49
     56              OS_SignalEvent(0x01,&TCB_16552_RxHandler2 );
   \                     ??CrossCallReturnLabel_58:
   \   0000001A   ....               LDI     R18, LOW(TCB_16552_RxHandler2)
   \   0000001C   ....               LDI     R19, (TCB_16552_RxHandler2) >> 8
   \   0000001E   ....               RCALL   ?Subroutine49
     57              TData.RS4.PortUsed      = ReadEEPROMByte(EEPROM_PORTSETUP);   // Get setup from EEPROM
   \                     ??CrossCallReturnLabel_59:
   \   00000020   ....               LDI     R24, LOW(TData)
   \   00000022   ....               LDI     R25, (TData) >> 8
   \   00000024   E002               LDI     R16, 2
   \   00000026   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_14:
   \   00000028   9300....           STS     TData, R16
     58              TData.RS4.SensorType[0] = ReadEEPROMByte(EEPROM_PORTSETUP + 1);
   \   0000002C   E003               LDI     R16, 3
   \   0000002E   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_13:
   \   00000030   9300....           STS     (TData + 1), R16
     59              TData.RS4.SensorType[1] = ReadEEPROMByte(EEPROM_PORTSETUP + 2);
   \   00000034   E004               LDI     R16, 4
   \   00000036   ....               RCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_12:
   \   00000038   9300....           STS     (TData + 2), R16
     60          #if USE_MODBUS_PROTOCOL == 1
     61              {
     62                  static void load_eeprom_misc_485(void);
     63                  load_eeprom_misc_485();
     64              }
     65          #endif
     66          
     67              TData.RS4.ToTargetBuffer[0][0] = false;
   \   0000003C   9240....           STS     (TData + 1268), R4
     68              TData.RS4.ToTargetBuffer[1][0] = false;
   \   00000040   9240....           STS     (TData + 1348), R4
     69              TData.RS4.FromTargetBuffer[0][0] = false;
   \   00000044   9240....           STS     (TData + 1428), R4
     70              TData.RS4.FromTargetBuffer[1][0] = false;
   \   00000048   9240....           STS     (TData + 1478), R4
     71          
     72          
     73              for (char i = 0; i < 8; i++) {
   \   0000004C   E0B0               LDI     R27, 0
   \   0000004E   E0A8               LDI     R26, 8
     74                  SetBit(PORTC, (TData.RS4.PortUsed & (0x01 << i)));      // Switch on power
   \                     ??ExtRS485Ctl_0:
   \   00000050   94F8               cli
   \   00000052   9120....           LDS     R18, TData
   \   00000056   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_203:
   \   00000058   2F4B               MOV     R20, R27
   \   0000005A   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_73:
   \   0000005C   2320               AND     R18, R16
   \   0000005E   B108               IN      R16, 0x08
   \   00000060   2B02               OR      R16, R18
   \   00000062   B908               OUT     0x08, R16
   \   00000064   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_159:
   \   00000066   F409               BRNE    ??ExtRS485Ctl_1
   \   00000068   9478               sei
     75                  OS_Delay(100);
   \                     ??ExtRS485Ctl_1:
   \   0000006A   E604               LDI     R16, 100
   \   0000006C   E010               LDI     R17, 0
   \   0000006E   ....               RCALL   ?Subroutine127
     76              }
   \                     ??CrossCallReturnLabel_214:
   \   00000070   95B3               INC     R27
   \   00000072   95AA               DEC     R26
   \   00000074   F769               BRNE    ??ExtRS485Ctl_0
     77              OS_Delay(UART_START_DELAY);                               // Waiting for target startup
   \   00000076   E700               LDI     R16, 112
   \   00000078   E117               LDI     R17, 23
   \   0000007A   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_213:
   \   0000007C   ....               LDI     R26, LOW((TData + 1528))
   \   0000007E   ....               LDI     R27, HIGH((TData + 1528))
   \   00000080   ....               LDI     R16, LOW((TData + 1428))
   \   00000082   ....               LDI     R17, HIGH((TData + 1428))
   \   00000084   0138               MOVW    R7:R6, R17:R16
   \   00000086   C005               RJMP    ??ExtRS485Ctl_2
     78          
     79          #if USE_MODBUS_PROTOCOL == 1
     80              //
     81              // let modbus task that I'm done initializing
     82              //
     83              {
     84                  extern void modbus_rtu_notify_go(void);
     85                  modbus_rtu_notify_go();
     86              }
     87          #endif
     88          
     89              while (1) {
     90                  PortPair = 0;
     91          
     92                  for (PortPair = 0; PortPair < 4; PortPair++) {        // loop through all ports
     93                      if (UART16552[0].RxFaultCnt > MAX_16552_FAIL) {
     94                          EmptyRxBuf16552(0);                            // Empty UART channel 0
     95                      }
     96                      if (UART16552[1].RxFaultCnt > MAX_16552_FAIL) {
     97                          EmptyRxBuf16552(1);                            // Empty UART channel 1
     98                      }
     99                      if (PowerOnTimer < POWER_ON_CNT) {
    100                          if (++PowerOnTimer >= POWER_ON_CNT) {          // check if time to switch on power
    101                              SetRS4Port();                                // and set power on ports
    102                          }
    103                      }
    104                      SetBit(PORTE, 0xf0);
    105                      // volatile undefined behavior
    106                      // ClrBit(PORTE, (0x10 << PortPair) & 0xf0);           // set mux port
    107                      //
    108                      char temp = (0x10 << PortPair) & 0xf0;
    109                      ClrBit(PORTE, temp);              // set mux port
    110                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {      // sensor on port 0?
    111                          UART16552[0].TxFirst = 6;        // Start packet build at pos.
    112                          char SnsType = (TData.RS4.SensorType[0] >> (2 * PortPair)) & 0x3;
    113          
    114                          switch (SnsType) {
    115                          case 0x01:                              //Water ingress??
    116                              switch (SeqCnt) {
    117                              case 0:
    118                                  Uart_BuildReqWISCardStatus(0);                     //Card status
    119                                  break;
    120                              case 20:
    121                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    122                                      Uart_BuildReqWISXData(0, 115);          // Request serial no
    123                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    124                                          TData.RS4.EEPROMPortpair[0] = 0;
    125                                      }
    126                                  } else {
    127                                      Uart_BuildReqWISData(0);          //WIS data
    128                                  }
    129                                  break;
    130                              default:
    131                                  Uart_BuildReqWISData(0);            //WIS data
    132                                  break;
    133                              }
    134                              break;
    135          
    136                          case 0x02:                             // Radar??
    137                              switch (SeqCnt) {
    138                              case 20:
    139                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    140                                      if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    141                                          TData.RS4.EEPROMPortpair[0] = 0;
    142                                      }
    143                                  }
    144                                  // Fall through and send the request
    145                              default:
    146                                  Uart_BuildReqRadarData(0);             // Radar data
    147                                  break;
    148                              case 0:
    149                                  Uart_BuildReqRadarInfo(0);             //Radar Information
    150                                  break;
    151                              }
    152                              break;
    153                          case 0x00:                         // AN-SGCNV
    154                              if ((TData.RS4.ToTargetBuffer[0][0] == true) && // Data ready for this AD card
    155                                  (TData.RS4.ToTargetBuffer[0][1] == PortPair)) {
    156                                  Uart_BuildSndData(0);     // add data to AD card package
    157                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    158                                  AskMD[0] = false;
    159                              } else {
    160                                  AskMD[0] = true;
    161                              }
    162                              if (SeqCnt == 0) {
    163                                  Uart_BuildReqCardStatus(0);             //Card status, cmd 27
    164                              } else if (SeqCnt == 5) {
    165                                  Uart_BuildReqR16552(0);                 //Raw data, cmd 13
    166                              } else if (SeqCnt == 10) {
    167                                  Uart_BuildReqConfig(0);                 //Config data, cmd 17
    168                              } else if (SeqCnt == 15) {
    169                                  Uart_BuildReqC16552(0);                 //Cal data, cmd 16
    170                              } else if (SeqCnt == 20) {
    171                                  if ((TData.RS4.FromTargetBuffer[0][0] == false) && (TData.RS4.EEPROMPortpair[0] == PortPair)) { // buffer ready
    172                                      Uart_BuildReqEEPROMData(0);
    173                                      //EEpromdata cmd, 24
    174                                      if ((TData.RS4.EEPROMADChannel[0] += 2) > 14) { //Next channel
    175                                          TData.RS4.EEPROMADChannel[0] = 0;
    176                                          if (++TData.RS4.EEPROMPortpair[0] >= 4) {
    177                                              TData.RS4.EEPROMPortpair[0] = 0;
    178                                          }
    179                                      }
    180                                  } else if (AskMD[0] == true) {
    181                                      Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    182                                  }
    183                              } else if (AskMD[0] == true) {
    184                                  Uart_BuildReqM16552(0);                 //Measure data, cmd 10
    185                              }
    186                              break;
    187                          }
    188                          //EmptyRxBuf16552(0);                            // Empty UART channel 0
    189                          Uart_BuildTail16552(0);
    190                      } else {
    191                          if (TData.RS4.EEPROMPortpair[0] == PortPair) {
    192                              if (++TData.RS4.EEPROMPortpair[0] >= 4) {  // make sure that the EEPROM reading is not stopped
    193                                  TData.RS4.EEPROMPortpair[0] = 0;
    194                              }
    195                          }
    196                      }
    197                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {      // sensor on port 1?
    198                          UART16552[1].TxFirst = 6;                       // Start at
    199                          char SnsType = ((TData.RS4.SensorType[1] >> (2 * PortPair))) & 0x3;
    200                          switch (SnsType) {
    201                          case 0x01:    //Water ingress??
    202                              switch (SeqCnt) {
    203                              case 0:
    204                                  Uart_BuildReqWISCardStatus(1);          //Card status
    205                                  break;
    206                              case 20:
    207                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    208                                      Uart_BuildReqWISXData(1, 115);            // Request serial no
    209                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    210                                          TData.RS4.EEPROMPortpair[1] = 0;
    211                                      }
    212                                  } else {
    213                                      Uart_BuildReqWISData(1);                //WIS data
    214                                  }
    215                                  break;
    216                              default:
    217                                  Uart_BuildReqWISData(1);                //WIS data
    218                                  break;
    219                              }
    220                              break;
    221                          case 0x02:    // Radar??
    222                              switch (SeqCnt) {
    223                              case 20:
    224                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    225                                      if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    226                                          TData.RS4.EEPROMPortpair[1] = 0;
    227                                      }
    228                                  }
    229                                  // Fall through and send the request
    230                              default:
    231                                  Uart_BuildReqRadarData(1);          // Radar data
    232                                  break;
    233                              case 0:
    234                                  Uart_BuildReqRadarInfo(1);          //Radar Information
    235                                  break;
    236                              }
    237                              break;
    238                          case 0x00:  // AN-SGCNV
    239                              if ((TData.RS4.ToTargetBuffer[1][0] == true) && // Data ready for this AD card
    240                                  (TData.RS4.ToTargetBuffer[1][1] == (PortPair + 4))) {
    241                                  Uart_BuildSndData(1);                       // add data to AD card package
    242                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    243                                  AskMD[1] = false;
    244                              } else {
    245                                  AskMD[1] = true;
    246                              }
    247                              if (SeqCnt == 0) {
    248                                  Uart_BuildReqCardStatus(1);             //Card status, cmd 27
    249                              } else if (SeqCnt == 5) {
    250                                  Uart_BuildReqR16552(1);                 //Raw data cmd, 13
    251                              } else if (SeqCnt == 10) {
    252                                  Uart_BuildReqConfig(1);                 //Config data, cmd 17
    253                              } else if (SeqCnt == 15) {
    254                                  Uart_BuildReqC16552(1);                 //Cal data  cmd, 16
    255                              } else if (SeqCnt == 20) {
    256                                  if ((TData.RS4.FromTargetBuffer[1][0] == false) && (TData.RS4.EEPROMPortpair[1] == PortPair)) { // buffer ready
    257                                      Uart_BuildReqEEPROMData(1);             //EEpromdata cmd, 24
    258                                      if ((TData.RS4.EEPROMADChannel[1] += 2) > 14) { //Next channel
    259                                          TData.RS4.EEPROMADChannel[1] = 0;
    260                                          if (++TData.RS4.EEPROMPortpair[1] >= 4) {
    261                                              TData.RS4.EEPROMPortpair[1] = 0;
    262                                          }
    263                                      }
    264                                  } else if (AskMD[1] == true) {
    265                                      Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    266                                  }
    267                              } else if (AskMD[1] == true) {
    268                                  Uart_BuildReqM16552(1);                 //Measure data, cmd 10
    269                              }
    270                              break;
    271                          }
    272                          //EmptyRxBuf16552(0);                            // Empty UART channel 0
    273                          Uart_BuildTail16552(1);
    274                      } else {
    275                          if (TData.RS4.EEPROMPortpair[1] == PortPair) {
    276                              if (++TData.RS4.EEPROMPortpair[1] >= 4) {  // make sure that the EEPROM reading is not stopped
    277                                  TData.RS4.EEPROMPortpair[1] = 0;
    278                              }
    279                          }
    280                      }
    281                      EventStatus = OS_WaitEventTimed(1, 1000);              // Wait for ready to send next
    282                      if (EventStatus & 0x02) {
    283                          if (PowerOnTimer >= POWER_ON_CNT) {
    284                              PowerOnTimer = 0;                              // and start over again
    285                          }
    286                      }
    287                  }
    288                  if (++SeqCnt > 20) {              //  all request within 20 x 2 sec.
   \                     ??ExtRS485Ctl_3:
   \   00000088   9443               INC     R4
   \   0000008A   E105               LDI     R16, 21
   \   0000008C   1640               CP      R4, R16
   \   0000008E   F008               BRCS    ??ExtRS485Ctl_2
    289                      SeqCnt = 0;
   \   00000090   2444               CLR     R4
    290                  }
   \                     ??ExtRS485Ctl_2:
   \   00000092   E000               LDI     R16, 0
   \   00000094   9300....           STS     PortPair, R16
   \   00000098   9300....           STS     PortPair, R16
   \   0000009C   C011               RJMP    ??CrossCallReturnLabel_268
   \                     ??ExtRS485Ctl_4:
   \   0000009E   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_124:
   \   000000A0   F409               BRNE    ??CrossCallReturnLabel_2
   \   000000A2   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_2:
   \   000000A4   EE28               LDI     R18, 232
   \   000000A6   E033               LDI     R19, 3
   \   000000A8   E001               LDI     R16, 1
   \   000000AA   ........           CALL    OS_WaitEventTimed
   \   000000AE   FB01               BST     R16, 1
   \   000000B0   F426               BRTC    ??ExtRS485Ctl_5
   \   000000B2   E005               LDI     R16, 5
   \   000000B4   1650               CP      R5, R16
   \   000000B6   F008               BRCS    ??ExtRS485Ctl_5
   \   000000B8   2455               CLR     R5
   \                     ??ExtRS485Ctl_5:
   \   000000BA   ....               LDI     R30, LOW(PortPair)
   \   000000BC   ....               LDI     R31, (PortPair) >> 8
   \   000000BE   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_268:
   \   000000C0   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_148:
   \   000000C2   3004               CPI     R16, 4
   \   000000C4   F708               BRCC    ??ExtRS485Ctl_3
   \   000000C6   9100....           LDS     R16, (UART16552 + 200)
   \   000000CA   3009               CPI     R16, 9
   \   000000CC   F010               BRCS    ??ExtRS485Ctl_6
   \   000000CE   E000               LDI     R16, 0
   \   000000D0   ....               RCALL   EmptyRxBuf16552
   \                     ??ExtRS485Ctl_6:
   \   000000D2   9100....           LDS     R16, (UART16552 + 464)
   \   000000D6   3009               CPI     R16, 9
   \   000000D8   F010               BRCS    ??ExtRS485Ctl_7
   \   000000DA   E001               LDI     R16, 1
   \   000000DC   ....               RCALL   EmptyRxBuf16552
   \                     ??ExtRS485Ctl_7:
   \   000000DE   E005               LDI     R16, 5
   \   000000E0   1650               CP      R5, R16
   \   000000E2   F430               BRCC    ??ExtRS485Ctl_8
   \   000000E4   9453               INC     R5
   \   000000E6   1650               CP      R5, R16
   \   000000E8   F018               BRCS    ??ExtRS485Ctl_8
   \   000000EA   9100....           LDS     R16, TData
   \   000000EE   B908               OUT     0x08, R16
   \                     ??ExtRS485Ctl_8:
   \   000000F0   94F8               cli
   \   000000F2   B10E               IN      R16, 0x0E
   \   000000F4   6F00               ORI     R16, 0xF0
   \   000000F6   B90E               OUT     0x0E, R16
   \   000000F8   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_160:
   \   000000FA   F409               BRNE    ??ExtRS485Ctl_9
   \   000000FC   9478               sei
   \                     ??ExtRS485Ctl_9:
   \   000000FE   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_172:
   \   00000100   94F8               cli
   \   00000102   E100               LDI     R16, 16
   \   00000104   E010               LDI     R17, 0
   \   00000106   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_74:
   \   00000108   7F00               ANDI    R16, 0xF0
   \   0000010A   9500               COM     R16
   \   0000010C   B11E               IN      R17, 0x0E
   \   0000010E   2310               AND     R17, R16
   \   00000110   B91E               OUT     0x0E, R17
   \   00000112   ....               RCALL   ?Subroutine114
   \                     ??CrossCallReturnLabel_161:
   \   00000114   F409               BRNE    ??ExtRS485Ctl_10
   \   00000116   9478               sei
   \                     ??ExtRS485Ctl_10:
   \   00000118   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_164:
   \   0000011A   F409               BRNE    $+2+2
   \   0000011C   C078               RJMP    ??ExtRS485Ctl_11
   \   0000011E   ....               LDI     R30, LOW((UART16552 + 60))
   \   00000120   ....               LDI     R31, HIGH((UART16552 + 60))
   \   00000122   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_256:
   \   00000124   01F3               MOVW    R31:R30, R7:R6
   \   00000126   8120               LD      R18, Z
   \   00000128   9100....           LDS     R16, (TData + 1)
   \   0000012C   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_82:
   \   0000012E   F151               BREQ    ??ExtRS485Ctl_12
   \   00000130   950A               DEC     R16
   \   00000132   F019               BREQ    ??ExtRS485Ctl_13
   \   00000134   950A               DEC     R16
   \   00000136   F0B9               BREQ    ??ExtRS485Ctl_14
   \   00000138   C067               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_13:
   \   0000013A   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_84:
   \   0000013C   F019               BREQ    ??ExtRS485Ctl_16
   \   0000013E   5104               SUBI    R16, 20
   \   00000140   F021               BREQ    ??ExtRS485Ctl_17
   \   00000142   C00E               RJMP    ??ExtRS485Ctl_18
   \                     ??ExtRS485Ctl_16:
   \   00000144   E000               LDI     R16, 0
   \   00000146   ....               RCALL   Uart_BuildReqWISCardStatus
   \   00000148   C05F               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_17:
   \   0000014A   2322               TST     R18
   \   0000014C   F449               BRNE    ??ExtRS485Ctl_18
   \   0000014E   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_43:
   \   00000150   F439               BRNE    ??ExtRS485Ctl_18
   \   00000152   E713               LDI     R17, 115
   \   00000154   E000               LDI     R16, 0
   \   00000156   ....               RCALL   Uart_BuildReqWISXData
   \   00000158   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_262:
   \   0000015A   F408               BRCC    $+2+2
   \   0000015C   C055               RJMP    ??ExtRS485Ctl_15
   \   0000015E   C04D               RJMP    ??ExtRS485Ctl_19
   \                     ??ExtRS485Ctl_18:
   \   00000160   E000               LDI     R16, 0
   \   00000162   ....               RCALL   Uart_BuildReqWISData
   \   00000164   C051               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_14:
   \   00000166   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_85:
   \   00000168   F051               BREQ    ??ExtRS485Ctl_20
   \   0000016A   5104               SUBI    R16, 20
   \   0000016C   F429               BRNE    ??CrossCallReturnLabel_4
   \   0000016E   2322               TST     R18
   \   00000170   F419               BRNE    ??CrossCallReturnLabel_4
   \   00000172   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_44:
   \   00000174   F409               BRNE    ??CrossCallReturnLabel_4
   \   00000176   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_4:
   \   00000178   E000               LDI     R16, 0
   \   0000017A   ....               RCALL   Uart_BuildReqRadarData
   \   0000017C   C045               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_20:
   \   0000017E   E000               LDI     R16, 0
   \   00000180   ....               RCALL   Uart_BuildReqRadarInfo
   \   00000182   C042               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_12:
   \   00000184   ....               LDI     R30, LOW((TData + 1268))
   \   00000186   ....               LDI     R31, HIGH((TData + 1268))
   \   00000188   8100               LD      R16, Z
   \   0000018A   3001               CPI     R16, 1
   \   0000018C   F441               BRNE    ??ExtRS485Ctl_21
   \   0000018E   8101               LDD     R16, Z+1
   \   00000190   ....               RCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_123:
   \   00000192   F429               BRNE    ??ExtRS485Ctl_21
   \   00000194   E000               LDI     R16, 0
   \   00000196   ....               RCALL   Uart_BuildSndData
   \   00000198   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_218:
   \   0000019A   E000               LDI     R16, 0
   \   0000019C   C001               RJMP    ??ExtRS485Ctl_22
   \                     ??ExtRS485Ctl_21:
   \   0000019E   E001               LDI     R16, 1
   \                     ??ExtRS485Ctl_22:
   \   000001A0   2044               TST     R4
   \   000001A2   F419               BRNE    ??ExtRS485Ctl_23
   \   000001A4   E000               LDI     R16, 0
   \   000001A6   ....               RCALL   Uart_BuildReqCardStatus
   \   000001A8   C02F               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_23:
   \   000001AA   E015               LDI     R17, 5
   \   000001AC   1641               CP      R4, R17
   \   000001AE   F419               BRNE    ??ExtRS485Ctl_24
   \   000001B0   E000               LDI     R16, 0
   \   000001B2   ....               RCALL   Uart_BuildReqR16552
   \   000001B4   C029               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_24:
   \   000001B6   E01A               LDI     R17, 10
   \   000001B8   1641               CP      R4, R17
   \   000001BA   F411               BRNE    ??ExtRS485Ctl_25
   \   000001BC   ....               RCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_217:
   \   000001BE   C024               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_25:
   \   000001C0   E01F               LDI     R17, 15
   \   000001C2   1641               CP      R4, R17
   \   000001C4   F419               BRNE    ??ExtRS485Ctl_26
   \   000001C6   E000               LDI     R16, 0
   \   000001C8   ....               RCALL   Uart_BuildReqC16552
   \   000001CA   C01E               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_26:
   \   000001CC   E114               LDI     R17, 20
   \   000001CE   1641               CP      R4, R17
   \   000001D0   F4B9               BRNE    ??ExtRS485Ctl_27
   \   000001D2   01F3               MOVW    R31:R30, R7:R6
   \   000001D4   8110               LD      R17, Z
   \   000001D6   2311               TST     R17
   \   000001D8   F499               BRNE    ??ExtRS485Ctl_27
   \   000001DA   01FD               MOVW    R31:R30, R27:R26
   \   000001DC   8112               LDD     R17, Z+2
   \   000001DE   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_90:
   \   000001E0   1712               CP      R17, R18
   \   000001E2   F471               BRNE    ??ExtRS485Ctl_27
   \   000001E4   E000               LDI     R16, 0
   \   000001E6   ....               RCALL   Uart_BuildReqEEPROMData
   \   000001E8   910C               LD      R16, X
   \   000001EA   5F0E               SUBI    R16, 254
   \   000001EC   930C               ST      X, R16
   \   000001EE   300F               CPI     R16, 15
   \   000001F0   F058               BRCS    ??ExtRS485Ctl_15
   \   000001F2   E000               LDI     R16, 0
   \   000001F4   930C               ST      X, R16
   \   000001F6   ....               RCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_263:
   \   000001F8   F038               BRCS    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_19:
   \   000001FA   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_192:
   \   000001FC   8302               STD     Z+2, R16
   \   000001FE   C004               RJMP    ??ExtRS485Ctl_15
   \                     ??ExtRS485Ctl_27:
   \   00000200   2300               TST     R16
   \   00000202   F011               BREQ    ??ExtRS485Ctl_15
   \   00000204   E000               LDI     R16, 0
   \   00000206   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_15:
   \   00000208   E000               LDI     R16, 0
   \   0000020A   ....               RCALL   Uart_BuildTail16552
   \   0000020C   C003               RJMP    ??CrossCallReturnLabel_5
   \                     ??ExtRS485Ctl_11:
   \   0000020E   ....               RCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_45:
   \   00000210   F409               BRNE    ??CrossCallReturnLabel_5
   \   00000212   ....               RCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_5:
   \   00000214   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_162:
   \   00000216   F409               BRNE    $+2+2
   \   00000218   CF42               RJMP    ??ExtRS485Ctl_4
   \   0000021A   ....               LDI     R30, LOW((UART16552 + 324))
   \   0000021C   ....               LDI     R31, HIGH((UART16552 + 324))
   \   0000021E   ....               RCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_257:
   \   00000220   01F3               MOVW    R31:R30, R7:R6
   \   00000222   A922               LDD     R18, Z+50
   \   00000224   9100....           LDS     R16, (TData + 2)
   \   00000228   ....               RCALL   ?Subroutine68
   \                     ??CrossCallReturnLabel_83:
   \   0000022A   F161               BREQ    ??ExtRS485Ctl_28
   \   0000022C   950A               DEC     R16
   \   0000022E   F019               BREQ    ??ExtRS485Ctl_29
   \   00000230   950A               DEC     R16
   \   00000232   F0C9               BREQ    ??ExtRS485Ctl_30
   \   00000234   C073               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_29:
   \   00000236   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_86:
   \   00000238   F019               BREQ    ??ExtRS485Ctl_32
   \   0000023A   5104               SUBI    R16, 20
   \   0000023C   F021               BREQ    ??ExtRS485Ctl_33
   \   0000023E   C010               RJMP    ??ExtRS485Ctl_34
   \                     ??ExtRS485Ctl_32:
   \   00000240   E001               LDI     R16, 1
   \   00000242   ....               RCALL   Uart_BuildReqWISCardStatus
   \   00000244   C06B               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_33:
   \   00000246   2322               TST     R18
   \   00000248   F459               BRNE    ??ExtRS485Ctl_34
   \   0000024A   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_125:
   \   0000024C   F449               BRNE    ??ExtRS485Ctl_34
   \   0000024E   E713               LDI     R17, 115
   \   00000250   E001               LDI     R16, 1
   \   00000252   ....               RCALL   Uart_BuildReqWISXData
   \   00000254   01FC               MOVW    R31:R30, R25:R24
   \   00000256   50E5               SUBI    R30, 5
   \   00000258   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_260:
   \   0000025A   F408               BRCC    $+2+2
   \   0000025C   C05F               RJMP    ??ExtRS485Ctl_31
   \   0000025E   C057               RJMP    ??ExtRS485Ctl_35
   \                     ??ExtRS485Ctl_34:
   \   00000260   E001               LDI     R16, 1
   \   00000262   ....               RCALL   Uart_BuildReqWISData
   \   00000264   C05B               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_30:
   \   00000266   ....               RCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_87:
   \   00000268   F051               BREQ    ??ExtRS485Ctl_36
   \   0000026A   5104               SUBI    R16, 20
   \   0000026C   F429               BRNE    ??CrossCallReturnLabel_3
   \   0000026E   2322               TST     R18
   \   00000270   F419               BRNE    ??CrossCallReturnLabel_3
   \   00000272   ....               RCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_126:
   \   00000274   F409               BRNE    ??CrossCallReturnLabel_3
   \   00000276   ....               RCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_3:
   \   00000278   E001               LDI     R16, 1
   \   0000027A   ....               RCALL   Uart_BuildReqRadarData
   \   0000027C   C04F               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_36:
   \   0000027E   E001               LDI     R16, 1
   \   00000280   ....               RCALL   Uart_BuildReqRadarInfo
   \   00000282   C04C               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_28:
   \   00000284   ....               LDI     R30, LOW((TData + 1348))
   \   00000286   ....               LDI     R31, HIGH((TData + 1348))
   \   00000288   8100               LD      R16, Z
   \   0000028A   3001               CPI     R16, 1
   \   0000028C   F469               BRNE    ??ExtRS485Ctl_37
   \   0000028E   8121               LDD     R18, Z+1
   \   00000290   E030               LDI     R19, 0
   \   00000292   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_197:
   \   00000294   5F0C               SUBI    R16, 252
   \   00000296   4F1F               SBCI    R17, 255
   \   00000298   1720               CP      R18, R16
   \   0000029A   0731               CPC     R19, R17
   \   0000029C   F429               BRNE    ??ExtRS485Ctl_37
   \   0000029E   E001               LDI     R16, 1
   \   000002A0   ....               RCALL   Uart_BuildSndData
   \   000002A2   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_220:
   \   000002A4   E000               LDI     R16, 0
   \   000002A6   C001               RJMP    ??ExtRS485Ctl_38
   \                     ??ExtRS485Ctl_37:
   \   000002A8   E001               LDI     R16, 1
   \                     ??ExtRS485Ctl_38:
   \   000002AA   2044               TST     R4
   \   000002AC   F419               BRNE    ??ExtRS485Ctl_39
   \   000002AE   E001               LDI     R16, 1
   \   000002B0   ....               RCALL   Uart_BuildReqCardStatus
   \   000002B2   C034               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_39:
   \   000002B4   E015               LDI     R17, 5
   \   000002B6   1641               CP      R4, R17
   \   000002B8   F419               BRNE    ??ExtRS485Ctl_40
   \   000002BA   E001               LDI     R16, 1
   \   000002BC   ....               RCALL   Uart_BuildReqR16552
   \   000002BE   C02E               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_40:
   \   000002C0   E01A               LDI     R17, 10
   \   000002C2   1641               CP      R4, R17
   \   000002C4   F411               BRNE    ??ExtRS485Ctl_41
   \   000002C6   ....               RCALL   ?Subroutine52
   \                     ??CrossCallReturnLabel_219:
   \   000002C8   C029               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_41:
   \   000002CA   E01F               LDI     R17, 15
   \   000002CC   1641               CP      R4, R17
   \   000002CE   F419               BRNE    ??ExtRS485Ctl_42
   \   000002D0   E001               LDI     R16, 1
   \   000002D2   ....               RCALL   Uart_BuildReqC16552
   \   000002D4   C023               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_42:
   \   000002D6   E114               LDI     R17, 20
   \   000002D8   1641               CP      R4, R17
   \   000002DA   F4E1               BRNE    ??ExtRS485Ctl_43
   \   000002DC   01F3               MOVW    R31:R30, R7:R6
   \   000002DE   A912               LDD     R17, Z+50
   \   000002E0   2311               TST     R17
   \   000002E2   F4C1               BRNE    ??ExtRS485Ctl_43
   \   000002E4   01FD               MOVW    R31:R30, R27:R26
   \   000002E6   8113               LDD     R17, Z+3
   \   000002E8   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_91:
   \   000002EA   1712               CP      R17, R18
   \   000002EC   F499               BRNE    ??ExtRS485Ctl_43
   \   000002EE   E001               LDI     R16, 1
   \   000002F0   ....               RCALL   Uart_BuildReqEEPROMData
   \   000002F2   01FC               MOVW    R31:R30, R25:R24
   \   000002F4   50E7               SUBI    R30, 7
   \   000002F6   4FFA               SBCI    R31, 250
   \   000002F8   8100               LD      R16, Z
   \   000002FA   5F0E               SUBI    R16, 254
   \   000002FC   8300               ST      Z, R16
   \   000002FE   300F               CPI     R16, 15
   \   00000300   F068               BRCS    ??ExtRS485Ctl_31
   \   00000302   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_193:
   \   00000304   8301               STD     Z+1, R16
   \   00000306   01FC               MOVW    R31:R30, R25:R24
   \   00000308   50E5               SUBI    R30, 5
   \   0000030A   ....               RCALL   ??Subroutine144_0
   \                     ??CrossCallReturnLabel_261:
   \   0000030C   F038               BRCS    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_35:
   \   0000030E   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_194:
   \   00000310   8303               STD     Z+3, R16
   \   00000312   C004               RJMP    ??ExtRS485Ctl_31
   \                     ??ExtRS485Ctl_43:
   \   00000314   2300               TST     R16
   \   00000316   F011               BREQ    ??ExtRS485Ctl_31
   \   00000318   E001               LDI     R16, 1
   \   0000031A   ....               RCALL   Uart_BuildReqM16552
   \                     ??ExtRS485Ctl_31:
   \   0000031C   E001               LDI     R16, 1
   \   0000031E   ....               RCALL   Uart_BuildTail16552
   \   00000320   CEC1               RJMP    ??CrossCallReturnLabel_2
   \   00000322                      REQUIRE _A_PORTC
   \   00000322                      REQUIRE _A_PORTE
    291              }
    292          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine71:
   \   00000000   2D04               MOV     R16, R4
   \   00000002   2044               TST     R4
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine68:
   \   00000000   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_180:
   \   00000002   0F44               LSL     R20
   \   00000004   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_166:
   \   00000006   7003               ANDI    R16, 0x03
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   E840               LDI     R20, 128
   \   00000002   E255               LDI     R21, 37
   \   00000004   E060               LDI     R22, 0
   \   00000006   E070               LDI     R23, 0
   \   00000008   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine114:
   \   00000000   9100....           LDS     R16, (OS_Global + 1)
   \   00000004   2300               TST     R16
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine52:
   \   00000000   E001               LDI     R16, 1
   \   00000002                      REQUIRE ?Subroutine129
   \   00000002                      ;               // Fall through to label ?Subroutine129

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine129:
   \   00000000   ....               RJMP    Uart_BuildReqConfig

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8102               LDD     R16, Z+2
   \   00000004   ....               RJMP    ?Subroutine96

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   8103               LDD     R16, Z+3
   \   00000004                      REQUIRE ?Subroutine96
   \   00000004                      ;               // Fall through to label ?Subroutine96

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   9110....           LDS     R17, PortPair
   \   00000004   1701               CP      R16, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   E000               LDI     R16, 0
   \   00000002   ....               RJMP    ?Subroutine129

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ........           JMP     ReadEEPROMByte

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   E006               LDI     R16, 6
   \   00000002   E010               LDI     R17, 0
   \   00000004                      REQUIRE ??Subroutine143_0
   \   00000004                      ;               // Fall through to label ??Subroutine143_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine143_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   8311               STD     Z+1, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002   50E6               SUBI    R30, 6
   \   00000004   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_259:
   \   00000006   F010               BRCS    ??Subroutine5_0
   \   00000008   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_196:
   \   0000000A   8302               STD     Z+2, R16
   \                     ??Subroutine5_0:
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine86:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ?Subroutine122
   \   00000002                      ;               // Fall through to label ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   E000               LDI     R16, 0
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002   50E5               SUBI    R30, 5
   \   00000004   ....               RCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_258:
   \   00000006   F010               BRCS    ??Subroutine4_0
   \   00000008   ....               RCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_195:
   \   0000000A   8303               STD     Z+3, R16
   \                     ??Subroutine4_0:
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine99:
   \   00000000   4FFA               SBCI    R31, 250
   \   00000002   9503               INC     R16
   \   00000004   8300               ST      Z, R16
   \   00000006                      REQUIRE ?Subroutine123
   \   00000006                      ;               // Fall through to label ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine123:
   \   00000000   3004               CPI     R16, 4
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   01FC               MOVW    R31:R30, R25:R24
   \   00000002   50E6               SUBI    R30, 6
   \   00000004                      REQUIRE ??Subroutine144_0
   \   00000004                      ;               // Fall through to label ??Subroutine144_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine144_0:
   \   00000000   4FFA               SBCI    R31, 250
   \   00000002   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_270:
   \   00000004   ....               RJMP    ?Subroutine123

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine79:
   \   00000000   8100               LD      R16, Z
   \   00000002   9503               INC     R16
   \   00000004   ....               RJMP    ??Subroutine135_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RJMP    ?Subroutine103

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   ........           JMP     OS_SignalEvent

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_183:
   \   00000002                      REQUIRE ?Subroutine116
   \   00000002                      ;               // Fall through to label ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine116:
   \   00000000   ....               RCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_167:
   \   00000002   7001               ANDI    R16, 0x01
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine100:
   \   00000000   ........           JMP     ?SS_SHR_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   ....               RCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_182:
   \   00000002   5F4C               SUBI    R20, 252
   \   00000004   ....               RJMP    ?Subroutine116

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   9100....           LDS     R16, TData
   \   00000004   E010               LDI     R17, 0
   \   00000006                      REQUIRE ?Subroutine119
   \   00000006                      ;               // Fall through to label ?Subroutine119

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine119:
   \   00000000   9140....           LDS     R20, PortPair
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine87:
   \   00000000   E001               LDI     R16, 1
   \   00000002                      REQUIRE ?Subroutine124
   \   00000002                      ;               // Fall through to label ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   E010               LDI     R17, 0
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   9120....           LDS     R18, PortPair
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine61:
   \   00000000   ........           JMP     ?PROLOGUE8_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine63:
   \   00000000   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_152:
   \   00000002   ....               RJMP    ?Subroutine124

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   9100....           LDS     R16, PortPair
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine59:
   \   00000000   ........           JMP     ?S_SHL_L02
    293          
    294          
    295          /*************************************************************************
    296          *   (This is a task)
    297          *  Usart handler UART receive data
    298          *
    299          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine91:
   \   00000000   ........           JMP     ?PROLOGUE4_L09

   \                                 In  segment CODE, align 2, keep-with-next
    300          void ExtRS485Rec(void) {
   \                     ExtRS485Rec:
   \   00000000   ....               RCALL   ?Subroutine91
    301              char portresp;
    302              char temp;
    303          
    304              OS_Delay(UART_START_DELAY + 800);           // Waiting for target startup and power on sequence
   \                     ??CrossCallReturnLabel_109:
   \   00000002   E900               LDI     R16, 144
   \   00000004   E11A               LDI     R17, 26
   \   00000006   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_212:
   \   00000008   C025               RJMP    ??CrossCallReturnLabel_60
    305          
    306              while (1) {
    307                  OS_Delay(499);                          // wait for answer and correct the speed (.5 * 4 = 2 sec update)
    308                  portresp = OS_WaitEventTimed(3, 1);   // Wait for receive from both channels
    309                  if (portresp & 0x01) {                  // answer on ch 0
    310                      Usart16552CheckPackage(0);            // handle incomming package
    311                      TData.RS4.FailCnt[PortPair][0] = 0; // Reset counter
    312                      TData.RS4.IOUnitStatus[PortPair] &= ~COMFAIL_BIT; // No error
    313                      UART16552[0].RxFaultCnt = 0;          // OK package on 16552 channel
    314                  } else {
    315                      UART16552[0].RxFaultCnt++;          // Fault in package on 16552 channel
    316                      TData.RS4.FailCnt[PortPair][1]++;                            // no answer total counter
    317                      if (TData.RS4.FailCnt[PortPair][0]++ > FAILCNT_ERROR) {
    318                          TData.RS4.IOUnitStatus[PortPair] |= COMFAIL_BIT;      // report fault
    319                      }
    320                      if ((TData.RS4.PortUsed >> PortPair) & 0x01) {              // sensor on port 0?
    321                          if ((TData.RS4.FailCnt[PortPair][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
    322                              // volatile undefined behavior
    323                              // ClrBit(PORTC, (0x01 << PortPair));            // Switch off power
    324                              //
    325                              temp = (0x01 << PortPair);
    326                              ClrBit(PORTC, temp);  // Switch off power
    327                              OS_SignalEvent(2, &TCB_RS485Ctl);
    328                          }
    329                      }
    330                  }
    331                  if (portresp & 0x02) {                  // answer on ch 1
    332                      Usart16552CheckPackage(1);         // handle incomming package
    333                      TData.RS4.FailCnt[PortPair + 4][0] = 0; // Reset counter
    334                      TData.RS4.IOUnitStatus[PortPair + 4] &= ~COMFAIL_BIT; // No error
    335                      UART16552[1].RxFaultCnt = 0;          // OK package on 16552 channel
    336                  } else {
    337                      UART16552[1].RxFaultCnt++;          // Fault in package on 16552 channel
   \                     ??ExtRS485Rec_0:
   \   0000000A   ....               LDI     R30, LOW((UART16552 + 464))
   \   0000000C   ....               LDI     R31, HIGH((UART16552 + 464))
   \   0000000E   ....               RCALL   ?Subroutine1
    338                      TData.RS4.FailCnt[PortPair + 4][1]++;      // no answer
   \                     ??CrossCallReturnLabel_1:
   \   00000010   8D05               LDD     R16, Z+29
   \   00000012   8D16               LDD     R17, Z+30
   \   00000014   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_62:
   \   00000016   8F05               STD     Z+29, R16
   \   00000018   8F16               STD     Z+30, R17
    339                      if (TData.RS4.FailCnt[PortPair + 4][0]++ > FAILCNT_ERROR) {
   \   0000001A   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_133:
   \   0000001C   8D83               LDD     R24, Z+27
   \   0000001E   8D94               LDD     R25, Z+28
   \   00000020   01DC               MOVW    R27:R26, R25:R24
   \   00000022   9611               ADIW    R27:R26, 1
   \   00000024   8FA3               STD     Z+27, R26
   \   00000026   8FB4               STD     Z+28, R27
   \   00000028   9706               SBIW    R25:R24, 6
   \   0000002A   F018               BRCS    ??ExtRS485Rec_1
    340                          TData.RS4.IOUnitStatus[PortPair + 4] |= COMFAIL_BIT;      // report fault
   \   0000002C   ....               RCALL   ?Subroutine39
    341                      }
   \                     ??CrossCallReturnLabel_31:
   \   0000002E   6001               ORI     R16, 0x01
   \   00000030   8307               STD     Z+7, R16
    342                      if ((TData.RS4.PortUsed >> (PortPair + 4)) & 0x01) {              // sensor on port 1?
   \                     ??ExtRS485Rec_1:
   \   00000032   ....               RCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_163:
   \   00000034   F061               BREQ    ??CrossCallReturnLabel_136
    343                          if ((TData.RS4.FailCnt[PortPair + 4][0] & 0x0007) == 0x0004) {   //check if powqer shall be switched off
   \   00000036   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_127:
   \   00000038   8D03               LDD     R16, Z+27
   \   0000003A   7007               ANDI    R16, 0x07
   \   0000003C   3004               CPI     R16, 4
   \   0000003E   F439               BRNE    ??CrossCallReturnLabel_136
    344                              // volatile undefined behavior
    345                              //        ClrBit(PORTC, (0x01 << (PortPair + 4)));            // Switch off power
    346                              //
    347                              temp = (0x01 << (PortPair + 4));
   \   00000040   ....               RCALL   ?Subroutine119
    348                              ClrBit(PORTC, temp);            // Switch off power
   \                     ??CrossCallReturnLabel_173:
   \   00000042   94F8               cli
   \   00000044   5F4C               SUBI    R20, 252
   \   00000046   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_157:
   \   00000048   F409               BRNE    ??ExtRS485Rec_2
   \   0000004A   9478               sei
    349                              OS_SignalEvent(2, &TCB_RS485Ctl);
   \                     ??ExtRS485Rec_2:
   \   0000004C   ....               RCALL   ?Subroutine45
    350                          }
    351                      }
    352                  }
    353                  OS_SignalEvent(1, &TCB_RS485Ctl);
   \                     ??CrossCallReturnLabel_136:
   \   0000004E   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000050   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000052   ....               RCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_60:
   \   00000054   EF03               LDI     R16, 243
   \   00000056   E011               LDI     R17, 1
   \   00000058   ....               RCALL   ?Subroutine127
   \                     ??CrossCallReturnLabel_211:
   \   0000005A   E021               LDI     R18, 1
   \   0000005C   E030               LDI     R19, 0
   \   0000005E   E003               LDI     R16, 3
   \   00000060   ........           CALL    OS_WaitEventTimed
   \   00000064   2F80               MOV     R24, R16
   \   00000066   FB00               BST     R16, 0
   \   00000068   F45E               BRTC    ??ExtRS485Rec_3
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_190:
   \   0000006E   8703               STD     Z+11, R16
   \   00000070   8704               STD     Z+12, R16
   \   00000072   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_33:
   \   00000074   7F0E               ANDI    R16, 0xFE
   \   00000076   8303               STD     Z+3, R16
   \   00000078   E000               LDI     R16, 0
   \   0000007A   9300....           STS     (UART16552 + 200), R16
   \   0000007E   C021               RJMP    ??CrossCallReturnLabel_137
   \                     ??ExtRS485Rec_3:
   \   00000080   ....               LDI     R30, LOW((UART16552 + 200))
   \   00000082   ....               LDI     R31, HIGH((UART16552 + 200))
   \   00000084   ....               RCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_0:
   \   00000086   8505               LDD     R16, Z+13
   \   00000088   8516               LDD     R17, Z+14
   \   0000008A   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_63:
   \   0000008C   8705               STD     Z+13, R16
   \   0000008E   8716               STD     Z+14, R17
   \   00000090   ....               RCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_134:
   \   00000092   85A3               LDD     R26, Z+11
   \   00000094   85B4               LDD     R27, Z+12
   \   00000096   018D               MOVW    R17:R16, R27:R26
   \   00000098   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_64:
   \   0000009A   8703               STD     Z+11, R16
   \   0000009C   8714               STD     Z+12, R17
   \   0000009E   9716               SBIW    R27:R26, 6
   \   000000A0   F018               BRCS    ??ExtRS485Rec_4
   \   000000A2   ....               RCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_34:
   \   000000A4   6001               ORI     R16, 0x01
   \   000000A6   8303               STD     Z+3, R16
   \                     ??ExtRS485Rec_4:
   \   000000A8   ....               RCALL   ?Subroutine22
   \                     ??CrossCallReturnLabel_165:
   \   000000AA   F059               BREQ    ??CrossCallReturnLabel_137
   \   000000AC   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_128:
   \   000000AE   8503               LDD     R16, Z+11
   \   000000B0   7007               ANDI    R16, 0x07
   \   000000B2   3004               CPI     R16, 4
   \   000000B4   F431               BRNE    ??CrossCallReturnLabel_137
   \   000000B6   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_174:
   \   000000B8   94F8               cli
   \   000000BA   ....               RCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_158:
   \   000000BC   F409               BRNE    ??ExtRS485Rec_5
   \   000000BE   9478               sei
   \                     ??ExtRS485Rec_5:
   \   000000C0   ....               RCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_137:
   \   000000C2   FB81               BST     R24, 1
   \   000000C4   F00E               BRTS    $+2+2
   \   000000C6   CFA1               RJMP    ??ExtRS485Rec_0
   \   000000C8   E001               LDI     R16, 1
   \   000000CA   ....               RCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_191:
   \   000000CC   8F03               STD     Z+27, R16
   \   000000CE   8F04               STD     Z+28, R16
   \   000000D0   ....               RCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_32:
   \   000000D2   7F0E               ANDI    R16, 0xFE
   \   000000D4   8307               STD     Z+7, R16
   \   000000D6   E000               LDI     R16, 0
   \   000000D8   9300....           STS     (UART16552 + 464), R16
   \   000000DC   CFB8               RJMP    ??CrossCallReturnLabel_136
   \   000000DE                      REQUIRE _A_PORTC
    354              }
    355          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine65:
   \   00000000   ....               RCALL   Usart16552CheckPackage
   \   00000002   ....               RCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_129:
   \   00000004   ....               RJMP    ?Subroutine122

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine64:
   \   00000000   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_146:
   \   00000002   ....               LDI     R30, LOW(TData)
   \   00000004   ....               LDI     R31, (TData) >> 8
   \   00000006                      REQUIRE ?Subroutine102
   \   00000006                      ;               // Fall through to label ?Subroutine102

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine102:
   \   00000000   0DE0               ADD     R30, R0
   \   00000002   1DF1               ADC     R31, R1
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   5F0F               SUBI    R16, 255
   \   00000002   4F1F               SBCI    R17, 255
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   ....               LDI     R18, LOW(TCB_RS485Ctl)
   \   00000002   ....               LDI     R19, (TCB_RS485Ctl) >> 8
   \   00000004   E002               LDI     R16, 2
   \   00000006                      REQUIRE ?Subroutine103
   \   00000006                      ;               // Fall through to label ?Subroutine103

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_122:
   \   00000002   8103               LDD     R16, Z+3
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   ....               RCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_121:
   \   00000002   8107               LDD     R16, Z+7
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine94:
   \   00000000   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_155:
   \   00000002   E0F0               LDI     R31, 0
   \   00000004   2FE0               MOV     R30, R16
   \   00000006   ....               RJMP    ??Subroutine146_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_205:
   \   00000002   ........           CALL    ?S_SHL_L02
   \   00000006   9500               COM     R16
   \   00000008   B118               IN      R17, 0x08
   \   0000000A   2310               AND     R17, R16
   \   0000000C   B918               OUT     0x08, R17
   \   0000000E   ....               RJMP    ?Subroutine114

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   ....               RCALL   ?Subroutine79
   \                     ??CrossCallReturnLabel_269:
   \   00000002                      REQUIRE ?Subroutine97
   \   00000002                      ;               // Fall through to label ?Subroutine97

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine97:
   \   00000000   ....               RCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_147:
   \   00000002   ....               RJMP    ?Subroutine111

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine110:
   \   00000000   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_156:
   \   00000002   E014               LDI     R17, 4
   \   00000004   9F01               MUL     R16, R17
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine111:
   \   00000000   01F0               MOVW    R31:R30, R1:R0
   \   00000002                      REQUIRE ??Subroutine146_0
   \   00000002                      ;               // Fall through to label ??Subroutine146_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine146_0:
   \   00000000   ....               SUBI    R30, LOW((-(TData) & 0xFFFF))
   \   00000002   ....               SBCI    R31, (-(TData) & 0xFFFF) >> 8
   \   00000004   9508               RET
    356          
    357          /*************************************************************************
    358          *
    359          *  Set ports on or off
    360          *
    361          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    362          void SetRS4Port(void) {
   \                     SetRS4Port:
    363          
    364              PORTC = TData.RS4.PortUsed;
   \   00000000   9100....           LDS     R16, TData
   \   00000004   B908               OUT     0x08, R16
    365          
    366          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PORTC
    367          
    368          /*************************************************************************
    369          *
    370          *  Check the incoming packages from AN_SGCNV / WIS
    371          *
    372          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ??Subroutine137_0
   \   00000002                      ;               // Fall through to label ??Subroutine137_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine137_0:
   \   00000000   0FE8               ADD     R30, R24
   \   00000002   1FF9               ADC     R31, R25
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    373          void Usart16552CheckPackage(char ch) {
   \                     Usart16552CheckPackage:
   \   00000000   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_70:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   2E40               MOV     R4, R16
    374          
    375              unsigned short pointer;
    376              char count_out, more;
    377          
    378              count_out = MAX_PROT_CMD;                  // max command
   \   00000004   2466               CLR     R6
   \   00000006   946A               DEC     R6
    379              more = true;
   \   00000008   2455               CLR     R5
   \   0000000A   9453               INC     R5
    380              pointer = 4;
   \   0000000C   E084               LDI     R24, 4
   \   0000000E   E090               LDI     R25, 0
   \   00000010   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_300:
   \   00000012   ....               RCALL   ?Subroutine88
    381              do {
    382                  if (!CheckActionUart16552(ch, pointer)) {
   \                     ??CrossCallReturnLabel_312:
   \   00000014   019C               MOVW    R19:R18, R25:R24
   \   00000016   2D04               MOV     R16, R4
   \   00000018   ....               RCALL   CheckActionUart16552
   \   0000001A   2300               TST     R16
   \   0000001C   F409               BRNE    ??Usart16552CheckPackage_0
    383                      more = false;                          // terminate while loop
   \   0000001E   2455               CLR     R5
    384                  }
    385                  pointer += UART16552[ch].pRxBuffer[pointer + 1] + 2;            // Point to a command cmd hb/lb
   \                     ??Usart16552CheckPackage_0:
   \   00000020   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_230:
   \   00000022   5BEB               SUBI    R30, 187
   \   00000024   4FFF               SBCI    R31, 255
   \   00000026   81E0               LD      R30, Z
   \   00000028   E0F0               LDI     R31, 0
   \   0000002A   9632               ADIW    R31:R30, 2
   \   0000002C   0F8E               ADD     R24, R30
   \   0000002E   1F9F               ADC     R25, R31
    386                  if (!--count_out) {
   \   00000030   946A               DEC     R6
   \   00000032   F061               BREQ    ??Usart16552CheckPackage_1
    387                      more = false;
    388                  }
    389              } while (more && (pointer < UART16552[ch].RxPacklen - 3));
   \   00000034   2055               TST     R5
   \   00000036   F051               BREQ    ??Usart16552CheckPackage_1
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   53EA               SUBI    R30, 58
   \   0000003C   4FFF               SBCI    R31, 255
   \   0000003E   8100               LD      R16, Z
   \   00000040   8111               LDD     R17, Z+1
   \   00000042   5003               SUBI    R16, 3
   \   00000044   4010               SBCI    R17, 0
   \   00000046   1780               CP      R24, R16
   \   00000048   0791               CPC     R25, R17
   \   0000004A   F320               BRCS    ??CrossCallReturnLabel_312
    390              GoToSyncUART16552(ch);
   \                     ??Usart16552CheckPackage_1:
   \   0000004C   ....               RCALL   ?Subroutine72
    391          }
   \                     ??CrossCallReturnLabel_89:
   \   0000004E   ....               RJMP    ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine107:
   \   00000000   E010               LDI     R17, 0
   \   00000002                      REQUIRE ?Subroutine130
   \   00000002                      REQUIRE ??Subroutine145_0
   \   00000002                      ;               // Fall through to label ??Subroutine145_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine145_0:
   \   00000000   E048               LDI     R20, 8
   \   00000002   E051               LDI     R21, 1
   \   00000004                      REQUIRE ?Subroutine130
   \   00000004                      ;               // Fall through to label ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine130:
   \   00000000   ........           JMP     ?S_EC_MUL_L02

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine128:
   \   00000000   E0E7               LDI     R30, 7
   \   00000002   ........           JMP     ?EPILOGUE_B7_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   ........           JMP     ?PROLOGUE7_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine88:
   \   00000000   ....               LDI     R26, LOW(UART16552)
   \   00000002   ....               LDI     R27, (UART16552) >> 8
   \   00000004                      REQUIRE ??Subroutine150_0
   \   00000004                      ;               // Fall through to label ??Subroutine150_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine150_0:
   \   00000000   0FA0               ADD     R26, R16
   \   00000002   1FB1               ADC     R27, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine72:
   \   00000000   2D04               MOV     R16, R4
   \   00000002   ....               RJMP    GoToSyncUART16552
    392          
    393          
    394          
    395          /*************************************************************************
    396          *
    397          *  Check action on received data from AN_SGCNV
    398          *
    399          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine141_0:
   \   00000000   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine132:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002   ....               RJMP    ??Subroutine141_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    400          char CheckActionUart16552(char ch, unsigned short pointer) {
   \                     CheckActionUart16552:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_110:
   \   00000002   2FA0               MOV     R26, R16
    401          
    402              char retval = true;
   \   00000004   E0B1               LDI     R27, 1
    403          
    404              switch (UART16552[ch].pRxBuffer[pointer]) {    // check action
   \   00000006   01C9               MOVW    R25:R24, R19:R18
   \   00000008   9602               ADIW    R25:R24, 2
   \   0000000A   ....               LDI     R30, LOW((UART16552 + 68))
   \   0000000C   ....               LDI     R31, HIGH((UART16552 + 68))
   \   0000000E   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_11:
   \   00000010   ....               LDI     R30, LOW(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000012   ....               LDI     R31, (`?<Jumptable for CheckActionUart16552>_0`) >> 16
   \   00000014   BFFB               OUT     0x3B, R31
   \   00000016   ....               LDI     R31, HIGH(`?<Jumptable for CheckActionUart16552>_0`)
   \   00000018   ........           JMP     ?CV_SWITCH_L06
    405          
    406              case ANP1_REP_MP_DATA :                              // Measured pressure data
    407              case ANP1_REP_MT_DATA :                              // Measured temperature data
    408              case ANP1_REP_MO_DATA :                              // Measured "other" data
    409                  ReceivePTOData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_0:
   \   0000001C   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_46:
   \   0000001E   ....               RCALL   ReceivePTOData
    410                  break;
   \   00000020   C022               RJMP    ??CheckActionUart16552_1
    411              case ANP1_REP_WH_DATA :                              // Measured "washtrack and high level" data
    412                  ReceiveWHData(ch, pointer + 2);                     // receive package
   \                     ??CheckActionUart16552_2:
   \   00000022   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_47:
   \   00000024   ....               RCALL   ReceiveWHData
    413                  break;
   \   00000026   C01F               RJMP    ??CheckActionUart16552_1
    414              case ANP1_REP_RP_DATA :                              // Raw pressure data
    415              case ANP1_REP_RT_DATA :                              // Raw temp. data
    416              case ANP1_REP_RO_DATA :                              // Raw "other" data
    417                  ReceiveRData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_3:
   \   00000028   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_48:
   \   0000002A   ....               RCALL   ReceiveRData
    418                  break;
   \   0000002C   C01C               RJMP    ??CheckActionUart16552_1
    419              case ANP1_REP_CAL_DATA :                             // Raw "other" data
    420                  ReceiveCData(ch, pointer + 2);              // receive package
   \                     ??CheckActionUart16552_4:
   \   0000002E   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_49:
   \   00000030   ....               RCALL   ReceiveCData
    421                  break;
   \   00000032   C019               RJMP    ??CheckActionUart16552_1
    422          
    423              case ANP1_REP_CARD_STAT :                             // card status package
    424                  ReceiveCardStatus(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_5:
   \   00000034   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_50:
   \   00000036   ....               RCALL   ReceiveCardStatus
    425                  break;
   \   00000038   C016               RJMP    ??CheckActionUart16552_1
    426          
    427              case ANP1_REP_CONFIG :                             // config data
    428                  ReceiveConfigData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_6:
   \   0000003A   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_51:
   \   0000003C   ....               RCALL   ReceiveConfigData
    429                  break;
   \   0000003E   C013               RJMP    ??CheckActionUart16552_1
    430          
    431              case ANP1_REP_EEP_DATA :                             // card eeprome
    432                  ReceiveCardEEPROMData(ch, pointer + 2);          // receive package
   \                     ??CheckActionUart16552_7:
   \   00000040   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_52:
   \   00000042   ....               RCALL   ReceiveCardEEPROMData
    433                  break;
   \   00000044   C010               RJMP    ??CheckActionUart16552_1
    434          
    435              case ANP1_REP_WIS_STAT :                             // Card status from WIS
    436                  ReceiveWISStatus(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_8:
   \   00000046   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_53:
   \   00000048   ....               RCALL   ReceiveWISStatus
    437                  break;
   \   0000004A   C00D               RJMP    ??CheckActionUart16552_1
    438          
    439              case ANP1_REP_WIS_XDATA :                             // Card WIS protocol
    440                  ReceiveWISXData(ch, pointer + 2);            // receive package
   \                     ??CheckActionUart16552_9:
   \   0000004C   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_54:
   \   0000004E   ....               RCALL   ReceiveWISXData
    441                  break;
   \   00000050   C00A               RJMP    ??CheckActionUart16552_1
    442          
    443              case ANP1_REP_WIS_DATA :                             // Data from WIS
    444                  ReceiveWISData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_10:
   \   00000052   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_55:
   \   00000054   ....               RCALL   ReceiveWISData
    445                  break;
   \   00000056   C007               RJMP    ??CheckActionUart16552_1
    446              case ANP1_REP_GODA_DATA:
    447                  ReceiveRadarData(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_11:
   \   00000058   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_56:
   \   0000005A   ....               RCALL   ReceiveRadarData
    448                  break;
   \   0000005C   C004               RJMP    ??CheckActionUart16552_1
    449              case ANP1_REP_GODA_INFO:
    450                  ReceiveRadarInfo(ch, pointer + 2);             // receive package
   \                     ??CheckActionUart16552_12:
   \   0000005E   ....               RCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_57:
   \   00000060   ....               RCALL   ReceiveRadarInfo
    451                  break;
   \   00000062   C001               RJMP    ??CheckActionUart16552_1
    452              case ANP1_ECMD_NMDRQACK :                             // No more data, send ack.
    453              case ANP1_ECMD_NMDWOACK :                         // No more data
    454                  retval = false;
   \                     ??CheckActionUart16552_13:
   \   00000064   E0B0               LDI     R27, 0
    455                  break;
    456              }
    457              return retval;
   \                     ??CheckActionUart16552_1:
   \   00000066   2F0B               MOV     R16, R27
   \   00000068   ....               RJMP    ?Subroutine132
    458          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   019C               MOVW    R19:R18, R25:R24
   \   00000002   2F0A               MOV     R16, R26
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_288:
   \   00000002   8100               LD      R16, Z
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine82:
   \   00000000   0FE2               ADD     R30, R18
   \   00000002   1FF3               ADC     R31, R19
   \   00000004   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_306:
   \   00000006   ....               RJMP    ?Subroutine118
    459          
    460          /*************************************************************************
    461          *
    462          *  Receive card status from WIS
    463          *
    464          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   E004               LDI     R16, 4
   \   00000002   9F60               MUL     R22, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    465          void ReceiveWISStatus(char ch, unsigned short pointer) {
   \                     ReceiveWISStatus:
   \   00000000   93BA               ST      -Y, R27
   \   00000002   2F7A               MOV     R23, R26
   \   00000004   2F60               MOV     R22, R16
    466          
    467              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] |= UART16552[ch].pRxBuffer[pointer];
   \   00000006   9020....           LDS     R2, PortPair
   \   0000000A   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_170:
   \   0000000C   8100               LD      R16, Z
   \   0000000E   2433               CLR     R3
   \   00000010   0190               MOVW    R19:R18, R1:R0
   \   00000012   0D22               ADD     R18, R2
   \   00000014   1D33               ADC     R19, R3
   \   00000016   01D9               MOVW    R27:R26, R19:R18
   \   00000018   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   0000001A   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   0000001C   911C               LD      R17, X
   \   0000001E   2B10               OR      R17, R16
   \   00000020   931C               ST      X, R17
    468              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   00000022   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_153:
   \   00000024   01A0               MOVW    R21:R20, R1:R0
   \   00000026   0F40               ADD     R20, R16
   \   00000028   1D53               ADC     R21, R3
   \   0000002A   01DA               MOVW    R27:R26, R21:R20
   \   0000002C   ....               SUBI    R26, LOW((-(TData + 51) & 0xFFFF))
   \   0000002E   ....               SBCI    R27, HIGH((-(TData + 51) & 0xFFFF))
   \   00000030   932C               ST      X, R18
    469              if (UART16552[ch].pRxBuffer[pointer + 4]) {
   \   00000032   8104               LDD     R16, Z+4
   \   00000034   2300               TST     R16
   \   00000036   F039               BREQ    ??ReceiveWISStatus_0
    470                  TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] |= 0x80;
   \   00000038   ....               RCALL   ?Subroutine113
    471              }
   \                     ??CrossCallReturnLabel_150:
   \   0000003A   0E00               ADD     R0, R16
   \   0000003C   1C13               ADC     R1, R3
   \   0000003E   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_273:
   \   00000040   A903               LDD     R16, Z+51
   \   00000042   6800               ORI     R16, 0x80
   \   00000044   AB03               STD     Z+51, R16
    472          }
   \                     ??ReceiveWISStatus_0:
   \   00000046   2FA7               MOV     R26, R23
   \   00000048   91B9               LD      R27, Y+
   \   0000004A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine67:
   \   00000000   8121               LDD     R18, Z+1
   \   00000002                      REQUIRE ?Subroutine113
   \   00000002                      ;               // Fall through to label ?Subroutine113

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000002   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000004   ....               RCALL   ?Subroutine82
   \                     ??CrossCallReturnLabel_287:
   \   00000006   ....               RJMP    ?Subroutine117
    473          
    474          /*************************************************************************
    475          *
    476          *  Receive WIS protocol data
    477          *
    478          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   E010               LDI     R17, 0
   \   00000002                      REQUIRE ?Subroutine83
   \   00000002                      ;               // Fall through to label ?Subroutine83

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine83:
   \   00000000   ....               RCALL   ??Subroutine145_0
   \                     ??CrossCallReturnLabel_296:
   \   00000002   ....               LDI     R18, LOW(UART16552)
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    479          void ReceiveWISXData(char ch, unsigned short pointer) {
   \                     ReceiveWISXData:
   \   00000000   ....               RCALL   ?Subroutine36
    480          
    481              char i;
    482          
    483              switch (UART16552[ch].pRxBuffer[pointer++]) {
   \                     ??CrossCallReturnLabel_29:
   \   00000002   0119               MOVW    R3:R2, R19:R18
   \   00000004   9601               ADIW    R25:R24, 1
   \   00000006   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_103:
   \   00000008   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_138:
   \   0000000A   0DE2               ADD     R30, R2
   \   0000000C   1DF3               ADC     R31, R3
   \   0000000E   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_140:
   \   00000010   8100               LD      R16, Z
   \   00000012   3703               CPI     R16, 115
   \   00000014   F4D9               BRNE    ??ReceiveWISXData_0
    484              case 115:                                     // Serial number
    485                  TData.RS4.FromTargetBuffer[ch][0] = true;
   \   00000016   2F06               MOV     R16, R22
   \   00000018   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_119:
   \   0000001A   ....               LDI     R26, LOW(TData)
   \   0000001C   ....               LDI     R27, (TData) >> 8
   \   0000001E   ....               RCALL   ??Subroutine150_0
   \                     ??CrossCallReturnLabel_309:
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   ....               RCALL   ?Subroutine75
    486                  TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \                     ??CrossCallReturnLabel_264:
   \   00000024   0F66               LSL     R22
   \   00000026   0F66               LSL     R22
   \   00000028   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_149:
   \   0000002A   0F60               ADD     R22, R16
   \   0000002C   8361               STD     Z+1, R22
    487                  for (i = 2; i < (4 + 2); i++) {
   \   0000002E   E002               LDI     R16, 2
   \   00000030   E014               LDI     R17, 4
    488                      TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveWISXData_1:
   \   00000032   01F9               MOVW    R31:R30, R19:R18
   \   00000034   ....               RCALL   ?Subroutine38
    489                  }
   \                     ??CrossCallReturnLabel_143:
   \   00000036   8160               LD      R22, Z
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   0FE0               ADD     R30, R16
   \   0000003C   1FF5               ADC     R31, R21
   \   0000003E   56EC               SUBI    R30, 108
   \   00000040   4FFA               SBCI    R31, 250
   \   00000042   8360               ST      Z, R22
   \   00000044   9601               ADIW    R25:R24, 1
   \   00000046   9503               INC     R16
   \   00000048   951A               DEC     R17
   \   0000004A   F799               BRNE    ??ReceiveWISXData_1
    490                  break;
    491              default:
    492                  break;
    493              }
    494          }
   \                     ??ReceiveWISXData_0:
   \   0000004C                      REQUIRE ?Subroutine132
   \   0000004C                      ;               // Fall through to label ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   56EC               SUBI    R30, 108
   \   00000002   4FFA               SBCI    R31, 250
   \   00000004   E001               LDI     R16, 1
   \   00000006   ....               RJMP    ??Subroutine135_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_113:
   \   00000002   2F60               MOV     R22, R16
   \   00000004   01C9               MOVW    R25:R24, R19:R18
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   E010               LDI     R17, 0
   \   00000002   E342               LDI     R20, 50
   \   00000004                      REQUIRE ?Subroutine93
   \   00000004                      ;               // Fall through to label ?Subroutine93

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine93:
   \   00000000   E050               LDI     R21, 0
   \   00000002   ....               RJMP    ?Subroutine130

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   0FE8               ADD     R30, R24
   \   00000002   1FF9               ADC     R31, R25
   \   00000004                      REQUIRE ?Subroutine106
   \   00000004                      ;               // Fall through to label ?Subroutine106

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine106:
   \   00000000   5BEC               SUBI    R30, 188
   \   00000002   4FFF               SBCI    R31, 255
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine105:
   \   00000000   ....               LDI     R19, (UART16552) >> 8
   \   00000002   0F20               ADD     R18, R16
   \   00000004   1F31               ADC     R19, R17
   \   00000006   01F9               MOVW    R31:R30, R19:R18
   \   00000008   9508               RET
    495          
    496          /*************************************************************************
    497          *
    498          *  Receive measured data from WIS
    499          *
    500          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine120:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine131:
   \   00000000   E0E8               LDI     R30, 8
   \   00000002   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In  segment CODE, align 2, keep-with-next
    501          void ReceiveWISData(char ch, unsigned short pointer) {
   \                     ReceiveWISData:
   \   00000000   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_79:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine16
    502          
    503              TData.RS4.Result[(ch * 4) + PortPair][0] = (float)UART16552[ch].pRxBuffer[pointer + 0];       // Water detected
   \                     ??CrossCallReturnLabel_169:
   \   00000004   01C0               MOVW    R25:R24, R1:R0
   \   00000006   910C               LD      R16, X
   \   00000008   E010               LDI     R17, 0
   \   0000000A   E020               LDI     R18, 0
   \   0000000C   E030               LDI     R19, 0
   \   0000000E   ........           CALL    ?UL2F_L04
   \   00000012   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_206:
   \   00000014   ....               RCALL   ?Subroutine26
    504              TData.RS4.Result[(ch * 4) + PortPair][1] = (float)((UART16552[ch].pRxBuffer[pointer + 1] << 8) // Temperature
    505                                                                 + UART16552[ch].pRxBuffer[pointer + 2]) / 10.0;
   \                     ??CrossCallReturnLabel_185:
   \   00000016   8111               LDD     R17, Z+1
   \   00000018   8102               LDD     R16, Z+2
   \   0000001A   2F21               MOV     R18, R17
   \   0000001C   0F22               LSL     R18
   \   0000001E   0B22               SBC     R18, R18
   \   00000020   2F32               MOV     R19, R18
   \   00000022   ........           CALL    ?SL2F_L04
   \   00000026   E040               LDI     R20, 0
   \   00000028   E260               LDI     R22, 32
   \   0000002A   E471               LDI     R23, 65
   \   0000002C   ........           CALL    ?F_DIV_L04
   \   00000030   ....               RCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_207:
   \   00000032   ....               RCALL   ?Subroutine27
    506              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 3];         // Status
   \                     ??CrossCallReturnLabel_18:
   \   00000034   8163               LDD     R22, Z+3
   \   00000036   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_93:
   \   00000038   018C               MOVW    R17:R16, R25:R24
   \   0000003A   0F02               ADD     R16, R18
   \   0000003C   ....               RCALL   ?Subroutine29
    507              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = 0;                                            // Unused
   \                     ??CrossCallReturnLabel_22:
   \   0000003E   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_199:
   \   00000040   0F08               ADD     R16, R24
   \   00000042   1F19               ADC     R17, R25
   \   00000044   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_24:
   \   00000046   8330               ST      Z, R19
    508          }
   \   00000048   ....               RJMP    ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   0128               MOVW    R5:R4, R17:R16
   \   00000002   0139               MOVW    R7:R6, R19:R18
   \   00000004   9120....           LDS     R18, PortPair
   \   00000008   E030               LDI     R19, 0
   \   0000000A   018C               MOVW    R17:R16, R25:R24
   \   0000000C   0F02               ADD     R16, R18
   \   0000000E   1F13               ADC     R17, R19
   \   00000010   E348               LDI     R20, 56
   \   00000012                      REQUIRE ?Subroutine125
   \   00000012                      ;               // Fall through to label ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine125:
   \   00000000   E050               LDI     R21, 0
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_117:
   \   00000002   ....               SUBI    R30, LOW((-(TData + 171) & 0xFFFF))
   \   00000004   ....               SBCI    R31, HIGH((-(TData + 171) & 0xFFFF))
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   1F15               ADC     R17, R21
   \   00000002   E04E               LDI     R20, 14
   \   00000004   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_116:
   \   00000006   ....               RCALL   ??Subroutine146_0
   \                     ??CrossCallReturnLabel_271:
   \   00000008   AF63               STD     Z+59, R22
   \   0000000A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_115:
   \   00000002   ....               SUBI    R30, LOW((-(TData + 735) & 0xFFFF))
   \   00000004   ....               SBCI    R31, HIGH((-(TData + 735) & 0xFFFF))
   \   00000006   ....               RJMP    ?Subroutine104

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_295:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   ....               RCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_114:
   \   00000002   ....               SUBI    R30, LOW((-(TData + 731) & 0xFFFF))
   \   00000004   ....               SBCI    R31, HIGH((-(TData + 731) & 0xFFFF))
   \   00000006                      REQUIRE ?Subroutine104
   \   00000006                      ;               // Fall through to label ?Subroutine104

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine104:
   \   00000000   8240               ST      Z, R4
   \   00000002   8251               STD     Z+1, R5
   \   00000004   8262               STD     Z+2, R6
   \   00000006   8273               STD     Z+3, R7
   \   00000008   ....               RJMP    ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   2F60               MOV     R22, R16
   \   00000002   ....               LDI     R26, LOW((UART16552 + 68))
   \   00000004   ....               LDI     R27, HIGH((UART16552 + 68))
   \   00000006   0FA2               ADD     R26, R18
   \   00000008   1FB3               ADC     R27, R19
   \   0000000A   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_305:
   \   0000000C   ....               RCALL   ??Subroutine150_0
   \                     ??CrossCallReturnLabel_311:
   \   0000000E                      REQUIRE ?Subroutine117
   \   0000000E                      ;               // Fall through to label ?Subroutine117
    509          
    510          
    511          /*************************************************************************
    512          *
    513          *  Receive measured data from Radar
    514          *
    515          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    516          void ReceiveRadarData(char ch, unsigned short pointer) {
   \                     ReceiveRadarData:
   \   00000000   ....               RCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_78:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine16
    517              float *Data1 = (float *)&UART16552[ch].pRxBuffer[pointer + 0];
    518              float *Data2 = (float *)&UART16552[ch].pRxBuffer[pointer + 4];
    519          
    520              TData.RS4.Result[(ch * 4) + PortPair][0] = *Data1;       // Distance
   \                     ??CrossCallReturnLabel_168:
   \   00000004   0190               MOVW    R19:R18, R1:R0
   \   00000006   904D               LD      R4, X+
   \   00000008   905D               LD      R5, X+
   \   0000000A   906D               LD      R6, X+
   \   0000000C   907C               LD      R7, X
   \   0000000E   9713               SBIW    R27:R26, 3
   \   00000010   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_208:
   \   00000012   0180               MOVW    R17:R16, R1:R0
   \   00000014   ....               RCALL   ??Subroutine151_0
   \                     ??CrossCallReturnLabel_314:
   \   00000016   ....               RCALL   ?Subroutine26
    521              TData.RS4.Result[(ch * 4) + PortPair][1] = *Data2;      // Level
   \                     ??CrossCallReturnLabel_184:
   \   00000018   8044               LDD     R4, Z+4
   \   0000001A   8055               LDD     R5, Z+5
   \   0000001C   8066               LDD     R6, Z+6
   \   0000001E   8077               LDD     R7, Z+7
   \   00000020   ....               RCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_315:
   \   00000022   ....               RCALL   ?Subroutine27
    522              TData.RS4.TargetSetup1[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 8];         // Status
   \                     ??CrossCallReturnLabel_17:
   \   00000024   8560               LDD     R22, Z+8
   \   00000026   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_175:
   \   00000028   0189               MOVW    R17:R16, R19:R18
   \   0000002A   0F04               ADD     R16, R20
   \   0000002C   ....               RCALL   ?Subroutine29
    523              TData.RS4.TargetSetup2[(ch * 4) + PortPair][0] = UART16552[ch].pRxBuffer[pointer + 9];         // Unused???
   \                     ??CrossCallReturnLabel_21:
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   8561               LDD     R22, Z+9
   \   00000032   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_198:
   \   00000034   0F20               ADD     R18, R16
   \   00000036   1F53               ADC     R21, R19
   \   00000038   2F42               MOV     R20, R18
   \   0000003A   E00E               LDI     R16, 14
   \   0000003C   ....               RCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_23:
   \   0000003E   8360               ST      Z, R22
    524          }
   \   00000040                      REQUIRE ?Subroutine131
   \   00000040                      ;               // Fall through to label ?Subroutine131

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine69:
   \   00000000   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_181:
   \   00000002   ....               RJMP    ?Subroutine125

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_179:
   \   00000002   0189               MOVW    R17:R16, R19:R18
   \   00000004                      REQUIRE ??Subroutine151_0
   \   00000004                      ;               // Fall through to label ??Subroutine151_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine151_0:
   \   00000000   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_323:
   \   00000002   E348               LDI     R20, 56
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine101:
   \   00000000   0F04               ADD     R16, R20
   \   00000002   1F15               ADC     R17, R21
   \   00000004   9508               RET
    525          
    526          
    527          /*************************************************************************
    528          *
    529          *  Receive Serial number and version information from Radar
    530          *
    531          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    532          void ReceiveRadarInfo(char ch, unsigned short pointer) {
   \                     ReceiveRadarInfo:
   \   00000000   2F60               MOV     R22, R16
    533              // TData.RS4.SerialNumber[(ch * 4) + PortPair] = atol((const char *)&UART16552[ch].pRxBuffer[pointer + 0]);
    534              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = *((long *)&UART16552[ch].pRxBuffer[pointer + 10]);
   \   00000002   ....               LDI     R30, LOW((UART16552 + 78))
   \   00000004   ....               LDI     R31, HIGH((UART16552 + 78))
   \   00000006   ....               RCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_10:
   \   00000008   E014               LDI     R17, 4
   \   0000000A   9F61               MUL     R22, R17
   \   0000000C   ....               RCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_92:
   \   0000000E   E030               LDI     R19, 0
   \   00000010   0E02               ADD     R0, R18
   \   00000012   1E13               ADC     R1, R19
   \   00000014   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_272:
   \   00000016   A703               STD     Z+43, R16
    535          }
   \   00000018   9508               RET
    536          
    537          /*************************************************************************
    538          *
    539          *  Receive pressure measured data from AN_SGCNV
    540          *
    541          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine148_0:
   \   00000000   ....               RCALL   ??Subroutine149_0
   \                     ??CrossCallReturnLabel_293:
   \   00000002   8240               ST      Z, R4
   \   00000004   8251               STD     Z+1, R5
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine149_0:
   \   00000000   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_308:
   \   00000002                      REQUIRE ?Subroutine118
   \   00000002                      ;               // Fall through to label ?Subroutine118

   \                                 In  segment CODE, align 2, keep-with-next
    542          void ReceivePTOData(char ch, unsigned short pointer) {
   \                     ReceivePTOData:
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   0159               MOVW    R11:R10, R19:R18
    543          
    544              unsigned short pnt, ADCh;
    545              short packlen;
    546          
    547              packlen = UART16552[ch].pRxBuffer[pointer - 1];
   \   00000008   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_189:
   \   0000000A   0DEA               ADD     R30, R10
   \   0000000C   1DFB               ADC     R31, R11
   \   0000000E   5BED               SUBI    R30, 189
   \   00000010   4FFF               SBCI    R31, 255
   \   00000012   8080               LD      R8, Z
   \   00000014   2499               CLR     R9
    548          
    549              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000016   ....               RCALL   ?Subroutine76
    550          
    551              if (packlen > 0) {
   \                     ??CrossCallReturnLabel_94:
   \   00000018   E001               LDI     R16, 1
   \   0000001A   1680               CP      R8, R16
   \   0000001C   0499               CPC     R9, R9
   \   0000001E   F1A4               BRLT    ??ReceivePTOData_0
    552                  for (pnt = 0; pnt < packlen; pnt += 6) {
   \   00000020   E080               LDI     R24, 0
   \   00000022   E090               LDI     R25, 0
   \   00000024   E004               LDI     R16, 4
   \   00000026   9E40               MUL     R4, R16
   \   00000028   0190               MOVW    R19:R18, R1:R0
   \                     ??ReceivePTOData_1:
   \   0000002A   0185               MOVW    R17:R16, R11:R10
   \   0000002C   0F08               ADD     R16, R24
   \   0000002E   1F19               ADC     R17, R25
   \   00000030   011D               MOVW    R3:R2, R27:R26
   \   00000032   0E20               ADD     R2, R16
   \   00000034   1E31               ADC     R3, R17
   \   00000036   E404               LDI     R16, 68
   \   00000038   0E20               ADD     R2, R16
   \   0000003A   1C39               ADC     R3, R9
   \   0000003C   01F1               MOVW    R31:R30, R3:R2
   \   0000003E   8160               LD      R22, Z
   \   00000040   E070               LDI     R23, 0
    553                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    554                      if (ADCh < 14) {
   \   00000042   306E               CPI     R22, 14
   \   00000044   F4E8               BRCC    ??ReceivePTOData_2
    555                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   00000046   8041               LDD     R4, Z+1
   \   00000048   ....               LDI     R30, LOW((TData + 59))
   \   0000004A   ....               LDI     R31, HIGH((TData + 59))
   \   0000004C   0FE6               ADD     R30, R22
   \   0000004E   1DF9               ADC     R31, R9
   \   00000050   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_210:
   \   00000052   0189               MOVW    R17:R16, R19:R18
   \   00000054   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_318:
   \   00000056   E04E               LDI     R20, 14
   \   00000058   ....               RCALL   ?Subroutine130
   \                     ??CrossCallReturnLabel_294:
   \   0000005A   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_286:
   \   0000005C   8240               ST      Z, R4
    556                          *((float *)&TData.RS4.Result[(ch * 4) + PortPair][ADCh]) = *((float *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
   \   0000005E   01F1               MOVW    R31:R30, R3:R2
   \   00000060   8042               LDD     R4, Z+2
   \   00000062   8053               LDD     R5, Z+3
   \   00000064   8064               LDD     R6, Z+4
   \   00000066   8075               LDD     R7, Z+5
   \   00000068   ....               LDI     R30, LOW((TData + 731))
   \   0000006A   ....               LDI     R31, HIGH((TData + 731))
   \   0000006C   0F66               LSL     R22
   \   0000006E   1F77               ROL     R23
   \   00000070   0F66               LSL     R22
   \   00000072   1F77               ROL     R23
   \   00000074   0FE6               ADD     R30, R22
   \   00000076   1FF7               ADC     R31, R23
   \   00000078   ....               RCALL   ?Subroutine53
    557                      }
    558                  }
   \                     ??CrossCallReturnLabel_316:
   \   0000007A   ....               RCALL   ??Subroutine148_0
   \                     ??CrossCallReturnLabel_278:
   \   0000007C   8262               STD     Z+2, R6
   \   0000007E   8273               STD     Z+3, R7
   \                     ??ReceivePTOData_2:
   \   00000080   9606               ADIW    R25:R24, 6
   \   00000082   1588               CP      R24, R8
   \   00000084   0599               CPC     R25, R9
   \   00000086   F288               BRCS    ??ReceivePTOData_1
    559              }
    560              OS_Unuse(&UARTSEND);
   \                     ??ReceivePTOData_0:
   \   00000088   ....               RCALL   ?Subroutine77
    561          }
   \                     ??CrossCallReturnLabel_96:
   \   0000008A   E0EC               LDI     R30, 12
   \   0000008C   ........           JMP     ?EPILOGUE_B12_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   ....               LDI     R16, LOW(UARTSEND)
   \   00000002   ....               LDI     R17, (UARTSEND) >> 8
   \   00000004   ........           JMP     OS_Unuse

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   ....               LDI     R16, LOW(UARTSEND)
   \   00000002   ....               LDI     R17, (UARTSEND) >> 8
   \   00000004   ........           JMP     OS_Use

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_303:
   \   00000002   ....               RCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_313:
   \   00000004   ....               RJMP    ?Subroutine120
    562          /*************************************************************************
    563          *
    564          *  Receive Wash Track and High Level data from AN_SGCNV
    565          *
    566          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    567          void ReceiveWHData(char ch, unsigned short pointer) {
   \                     ReceiveWHData:
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    568          
    569              // Fixed packet length
    570              //short packlen;
    571          
    572              //packlen = UART16552[ch].pRxBuffer[pointer - 1];
    573          
    574              OS_Use(&UARTSEND);    // Do not write to buffer while the buffer can be read by other
   \   00000008   ....               RCALL   ?Subroutine76
    575              short Index = (ch * 4) + PortPair;
   \                     ??CrossCallReturnLabel_95:
   \   0000000A   E004               LDI     R16, 4
   \   0000000C   9E40               MUL     R4, R16
   \   0000000E   01F0               MOVW    R31:R30, R1:R0
   \   00000010   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_201:
   \   00000012   ....               RCALL   ?Subroutine118
    576              // Check if we have time information included
    577              if (UART16552[ch].pRxBuffer[pointer - 1] == 4) {
   \                     ??CrossCallReturnLabel_285:
   \   00000014   2D04               MOV     R16, R4
   \   00000016   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_100:
   \   00000018   2E02               MOV     R0, R18
   \   0000001A   ....               LDI     R18, (UART16552) >> 8
   \   0000001C   0E00               ADD     R0, R16
   \   0000001E   1F21               ADC     R18, R17
   \   00000020   2E12               MOV     R1, R18
   \   00000022   2C20               MOV     R2, R0
   \   00000024   0E28               ADD     R2, R24
   \   00000026   1F29               ADC     R18, R25
   \   00000028   2E32               MOV     R3, R18
   \   0000002A   2D62               MOV     R22, R2
   \   0000002C   5B6D               SUBI    R22, 189
   \   0000002E   4F2F               SBCI    R18, 255
   \   00000030   2F72               MOV     R23, R18
   \   00000032   ....               LDI     R26, LOW((TData + 1251))
   \   00000034   ....               LDI     R27, HIGH((TData + 1251))
   \   00000036   018F               MOVW    R17:R16, R31:R30
   \   00000038   0F00               LSL     R16
   \   0000003A   1F11               ROL     R17
   \   0000003C   ....               RCALL   ??Subroutine150_0
   \                     ??CrossCallReturnLabel_310:
   \   0000003E   ....               LDI     R18, LOW((TData + 1243))
   \   00000040   ....               LDI     R19, HIGH((TData + 1243))
   \   00000042   0F2E               ADD     R18, R30
   \   00000044   1F3F               ADC     R19, R31
   \   00000046   E043               LDI     R20, 3
   \   00000048   018F               MOVW    R17:R16, R31:R30
   \   0000004A   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_75:
   \   0000004C   01A8               MOVW    R21:R20, R17:R16
   \   0000004E   ....               LDI     R16, LOW(TData)
   \   00000050   ....               LDI     R17, (TData) >> 8
   \   00000052   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_317:
   \   00000054   01FB               MOVW    R31:R30, R23:R22
   \   00000056   8140               LD      R20, Z
   \   00000058   3044               CPI     R20, 4
   \   0000005A   F521               BRNE    ??ReceiveWHData_0
    578                  for (short pnt = 0; pnt < 3; pnt++) {
   \   0000005C   2422               CLR     R2
   \   0000005E   2433               CLR     R3
   \   00000060   E053               LDI     R21, 3
   \   00000062   E041               LDI     R20, 1
    579                      TData.RS4.WTrackCnt[Index][pnt] = UART16552[ch].pRxBuffer[pointer + pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_1:
   \   00000064   013C               MOVW    R7:R6, R25:R24
   \   00000066   0C62               ADD     R6, R2
   \   00000068   1C73               ADC     R7, R3
   \   0000006A   01F0               MOVW    R31:R30, R1:R0
   \   0000006C   0DE6               ADD     R30, R6
   \   0000006E   1DF7               ADC     R31, R7
   \   00000070   ....               RCALL   ?Subroutine106
    580                  }
   \                     ??CrossCallReturnLabel_141:
   \   00000072   8060               LD      R6, Z
   \   00000074   2477               CLR     R7
   \   00000076   0141               MOVW    R9:R8, R3:R2
   \   00000078   0C88               LSL     R8
   \   0000007A   1C99               ROL     R9
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   0DE8               ADD     R30, R8
   \   00000080   1DF9               ADC     R31, R9
   \   00000082   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_98:
   \   00000084   0E24               ADD     R2, R20
   \   00000086   1C37               ADC     R3, R7
   \   00000088   955A               DEC     R21
   \   0000008A   F761               BRNE    ??ReceiveWHData_1
    581                  // 4th WashTrack dont come
    582                  TData.RS4.WTrackCnt[Index][3] = 0;  // Missing 4th Wash track because of BUG in H8 compiler
   \   0000008C   550F               SUBI    R16, 95
   \   0000008E   4F1B               SBCI    R17, 251
   \   00000090   01F8               MOVW    R31:R30, R17:R16
   \   00000092   8270               ST      Z, R7
   \   00000094   8271               STD     Z+1, R7
    583                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 3]; // Hgh levels in 5th byte
   \   00000096   01FB               MOVW    R31:R30, R23:R22
   \   00000098   8104               LDD     R16, Z+4
   \   0000009A   01F9               MOVW    R31:R30, R19:R18
   \   0000009C   8300               ST      Z, R16
    584                  TData.RS4.WTTime[Index] = 0;
   \   0000009E   927D               ST      X+, R7
   \   000000A0   927C               ST      X, R7
   \   000000A2   C01A               RJMP    ??ReceiveWHData_2
    585              } else {
    586                  for (short pnt = 0; pnt < 4; pnt++) {
   \                     ??ReceiveWHData_0:
   \   000000A4   E080               LDI     R24, 0
   \   000000A6   E090               LDI     R25, 0
   \   000000A8   E044               LDI     R20, 4
    587                      TData.RS4.WTrackCnt[Index][pnt] = ((unsigned short *)&UART16552[ch].pRxBuffer[pointer])[pnt];  // 4 x Wash track
   \                     ??ReceiveWHData_3:
   \   000000AA   010C               MOVW    R1:R0, R25:R24
   \   000000AC   0C00               LSL     R0
   \   000000AE   1C11               ROL     R1
   \   000000B0   01F1               MOVW    R31:R30, R3:R2
   \   000000B2   ....               RCALL   ?Subroutine102
    588                  }
   \                     ??CrossCallReturnLabel_130:
   \   000000B4   ....               RCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_142:
   \   000000B6   8060               LD      R6, Z
   \   000000B8   8071               LDD     R7, Z+1
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_131:
   \   000000BE   ....               RCALL   ?Subroutine78
   \                     ??CrossCallReturnLabel_99:
   \   000000C0   9601               ADIW    R25:R24, 1
   \   000000C2   954A               DEC     R20
   \   000000C4   F791               BRNE    ??ReceiveWHData_3
    589                  TData.RS4.LevelSwitch[Index] = UART16552[ch].pRxBuffer[pointer + 8]; // Hgh levels in 9th byte
   \   000000C6   01FB               MOVW    R31:R30, R23:R22
   \   000000C8   8501               LDD     R16, Z+9
   \   000000CA   01F9               MOVW    R31:R30, R19:R18
   \   000000CC   8300               ST      Z, R16
    590                  TData.RS4.WTTime[Index] = *((unsigned short *)&UART16552[ch].pRxBuffer[pointer + 9]);  // WashTrack time in 10th and 11th bytes
   \   000000CE   01FB               MOVW    R31:R30, R23:R22
   \   000000D0   8502               LDD     R16, Z+10
   \   000000D2   8513               LDD     R17, Z+11
   \   000000D4   930D               ST      X+, R16
   \   000000D6   931C               ST      X, R17
    591              }
    592              TData.RS4.WHDataAvailable |= 0x01 << ((ch * 4) + PortPair);
   \                     ??ReceiveWHData_2:
   \   000000D8   0C44               LSL     R4
   \   000000DA   0C44               LSL     R4
   \   000000DC   ....               RCALL   ?Subroutine113
   \                     ??CrossCallReturnLabel_151:
   \   000000DE   0E40               ADD     R4, R16
   \   000000E0   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_204:
   \   000000E2   2D44               MOV     R20, R4
   \   000000E4   ....               RCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_76:
   \   000000E6   ....               LDI     R30, LOW((TData + 1267))
   \   000000E8   ....               LDI     R31, HIGH((TData + 1267))
   \   000000EA   8110               LD      R17, Z
   \   000000EC   2B10               OR      R17, R16
   \   000000EE   8310               ST      Z, R17
    593              OS_Unuse(&UARTSEND);
   \   000000F0   ....               RCALL   ?Subroutine77
    594          }
   \                     ??CrossCallReturnLabel_97:
   \   000000F2   E0EA               LDI     R30, 10
   \   000000F4   ........           JMP     ?EPILOGUE_B10_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   56E5               SUBI    R30, 101
   \   00000002   4FFB               SBCI    R31, 251
   \   00000004   8260               ST      Z, R6
   \   00000006   8271               STD     Z+1, R7
   \   00000008   9508               RET
    595          
    596          
    597          /************************************************************************
    598          *
    599          *  Receive raw data for pressure, temp and other from AN_SGCNV
    600          *
    601          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine58:
   \   00000000   E0A0               LDI     R26, 0
   \   00000002                      REQUIRE ??Subroutine147_0
   \   00000002                      ;               // Fall through to label ??Subroutine147_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine147_0:
   \   00000000   E004               LDI     R16, 4
   \   00000002   9E20               MUL     R2, R16
   \   00000004   0110               MOVW    R3:R2, R1:R0
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   E002               LDI     R16, 2
   \   00000002   9FB0               MUL     R27, R16
   \   00000004   ....               RCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_132:
   \   00000006   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_177:
   \   00000008   0181               MOVW    R17:R16, R3:R2
   \   0000000A   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_322:
   \   0000000C   E14C               LDI     R20, 28
   \   0000000E                      REQUIRE ??Subroutine148_0
   \   0000000E                      ;               // Fall through to label ??Subroutine148_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine90:
   \   00000000   0181               MOVW    R17:R16, R3:R2
   \   00000002   0F04               ADD     R16, R20
   \   00000004   1F15               ADC     R17, R21
   \   00000006   E04E               LDI     R20, 14
   \   00000008                      REQUIRE ?Subroutine118
   \   00000008                      REQUIRE ??Subroutine149_0
   \   00000008                      ;               // Fall through to label ??Subroutine149_0

   \                                 In  segment CODE, align 2, keep-with-next
    602          void ReceiveRData(char ch, unsigned short pointer) {
   \                     ReceiveRData:
   \   00000000   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_72:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine11
    603          
    604              char pnt, ADCh;
    605              short packlen;
    606          
    607              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    608          
    609              if (packlen > 0) {
   \                     ??CrossCallReturnLabel_9:
   \   00000004   F064               BRLT    ??ReceiveRData_0
    610                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000006   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_277:
   \   00000008   C007               RJMP    ??ReceiveRData_1
   \                     ??ReceiveRData_2:
   \   0000000A   ....               RCALL   ?Subroutine54
    611                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    612                      if (ADCh < 14) {
   \                     ??CrossCallReturnLabel_66:
   \   0000000C   F420               BRCC    ??CrossCallReturnLabel_280
    613                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000000E   ....               RCALL   ?Subroutine28
    614                          *((short *)&TData.RS4.Raw[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
    615                      }
    616                  }
   \                     ??CrossCallReturnLabel_20:
   \   00000010   ....               LDI     R30, LOW((TData + 283))
   \   00000012   ....               LDI     R31, HIGH((TData + 283))
   \   00000014   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_280:
   \   00000016   5FAC               SUBI    R26, 252
   \                     ??ReceiveRData_1:
   \   00000018   17A6               CP      R26, R22
   \   0000001A   0777               CPC     R23, R23
   \   0000001C   F3B4               BRLT    ??ReceiveRData_2
    617              }
    618          }
   \                     ??ReceiveRData_0:
   \   0000001E   ....               RJMP    ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   018C               MOVW    R17:R16, R25:R24
   \   00000002   0F0A               ADD     R16, R26
   \   00000004   1F17               ADC     R17, R23
   \   00000006   0129               MOVW    R5:R4, R19:R18
   \   00000008   0E40               ADD     R4, R16
   \   0000000A   1E51               ADC     R5, R17
   \   0000000C   E404               LDI     R16, 68
   \   0000000E   0E40               ADD     R4, R16
   \   00000010   1E57               ADC     R5, R23
   \   00000012   01F2               MOVW    R31:R30, R5:R4
   \   00000014   81B0               LD      R27, Z
   \   00000016   30BE               CPI     R27, 14
   \   00000018   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   8061               LDD     R6, Z+1
   \   00000002   ....               LDI     R30, LOW((TData + 59))
   \   00000004   ....               LDI     R31, HIGH((TData + 59))
   \   00000006   0FEB               ADD     R30, R27
   \   00000008   1FF7               ADC     R31, R23
   \   0000000A   ....               RCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_178:
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_291:
   \   00000010   8260               ST      Z, R6
   \   00000012   01F2               MOVW    R31:R30, R5:R4
   \   00000014   8042               LDD     R4, Z+2
   \   00000016   8053               LDD     R5, Z+3
   \   00000018   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   2E20               MOV     R2, R16
   \   00000002   01C9               MOVW    R25:R24, R19:R18
   \   00000004   E010               LDI     R17, 0
   \   00000006   ....               RCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_101:
   \   00000008   ....               RCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_139:
   \   0000000A   0FE8               ADD     R30, R24
   \   0000000C   1FF9               ADC     R31, R25
   \   0000000E   5BED               SUBI    R30, 189
   \   00000010   4FFF               SBCI    R31, 255
   \   00000012   8160               LD      R22, Z
   \   00000014   E070               LDI     R23, 0
   \   00000016   3061               CPI     R22, 1
   \   00000018   0777               CPC     R23, R23
   \   0000001A   9508               RET
    619          
    620          /*************************************************************************
    621          *
    622          *  Receive cal data  from AN_SGCNV
    623          *
    624          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    625          void ReceiveCData(char ch, unsigned short pointer) {
   \                     ReceiveCData:
   \   00000000   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_71:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   ....               RCALL   ?Subroutine11
    626          
    627              char pnt, ADCh;
    628              short packlen;
    629          
    630              packlen = UART16552[ch].pRxBuffer[pointer - 1];
    631          
    632              if (packlen > 0) {
   \                     ??CrossCallReturnLabel_8:
   \   00000004   F064               BRLT    ??ReceiveCData_0
    633                  for (pnt = 0; pnt < packlen; pnt += 4) {
   \   00000006   ....               RCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_276:
   \   00000008   C007               RJMP    ??ReceiveCData_1
   \                     ??ReceiveCData_2:
   \   0000000A   ....               RCALL   ?Subroutine54
    634                      ADCh = UART16552[ch].pRxBuffer[pointer + pnt];
    635                      if (ADCh < 14) {
   \                     ??CrossCallReturnLabel_65:
   \   0000000C   F420               BRCC    ??CrossCallReturnLabel_279
    636                          TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + pnt + 1];
   \   0000000E   ....               RCALL   ?Subroutine28
    637                          *((short *)&TData.RS4.Cal[(ch * 4) + PortPair][ADCh]) = *((short *)&UART16552[ch].pRxBuffer[pointer + pnt + 2]);
    638                      }
    639                  }
   \                     ??CrossCallReturnLabel_19:
   \   00000010   ....               LDI     R30, LOW((TData + 507))
   \   00000012   ....               LDI     R31, HIGH((TData + 507))
   \   00000014   ....               RCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_279:
   \   00000016   5FAC               SUBI    R26, 252
   \                     ??ReceiveCData_1:
   \   00000018   17A6               CP      R26, R22
   \   0000001A   0777               CPC     R23, R23
   \   0000001C   F3B4               BRLT    ??ReceiveCData_2
    640              }
    641          }
   \                     ??ReceiveCData_0:
   \   0000001E                      REQUIRE ?Subroutine128
   \   0000001E                      ;               // Fall through to label ?Subroutine128
    642          
    643          /*************************************************************************
    644          *
    645          *  Receive card status  from AN_SGCNV
    646          *
    647          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    648          void ReceiveCardStatus(char ch, unsigned short pointer) {
   \                     ReceiveCardStatus:
   \   00000000   2F7B               MOV     R23, R27
   \   00000002   2E2A               MOV     R2, R26
   \   00000004   2F60               MOV     R22, R16
    649          
    650              TData.RS4.TargetStatusSWVer[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer];
   \   00000006   ....               RCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_171:
   \   00000008   8120               LD      R18, Z
   \   0000000A   ....               RCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_200:
   \   0000000C   01A0               MOVW    R21:R20, R1:R0
   \   0000000E   0F40               ADD     R20, R16
   \   00000010   1F51               ADC     R21, R17
   \   00000012   01DA               MOVW    R27:R26, R21:R20
   \   00000014   ....               SUBI    R26, LOW((-(TData + 43) & 0xFFFF))
   \   00000016   ....               SBCI    R27, HIGH((-(TData + 43) & 0xFFFF))
   \   00000018   932C               ST      X, R18
    651              TData.RS4.TargetStatusAddress[(ch * 4) + PortPair] = UART16552[ch].pRxBuffer[pointer + 1];
   \   0000001A   ....               RCALL   ?Subroutine67
   \                     ??CrossCallReturnLabel_154:
   \   0000001C   0E00               ADD     R0, R16
   \   0000001E   1E11               ADC     R1, R17
   \   00000020   ....               RCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_274:
   \   00000022   AB23               STD     Z+51, R18
    652          }
   \   00000024   2DA2               MOV     R26, R2
   \   00000026   2FB7               MOV     R27, R23
   \   00000028   9508               RET
    653          
    654          /*************************************************************************
    655          *
    656          *  Receive config data from AN_SGCNV
    657          *
    658          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    659          void ReceiveConfigData(char ch, unsigned short pointer) {
   \                     ReceiveConfigData:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   2E20               MOV     R2, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    660          
    661              char i, ADCh;
    662          
    663              for (i = 0; i < 14; i++) {
   \   00000008   E02E               LDI     R18, 14
   \   0000000A   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_301:
   \   0000000C   ....               LDI     R22, LOW(UART16552)
   \   0000000E   ....               LDI     R23, (UART16552) >> 8
   \   00000010   0F60               ADD     R22, R16
   \   00000012   1F71               ADC     R23, R17
   \   00000014   ....               RCALL   ??Subroutine147_0
    664                  ADCh = UART16552[ch].pRxBuffer[pointer++];
   \                     ??CrossCallReturnLabel_275:
   \   00000016   01FB               MOVW    R31:R30, R23:R22
   \   00000018   ....               RCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_144:
   \   0000001A   8040               LD      R4, Z
   \   0000001C   9601               ADIW    R25:R24, 1
    665                  if (ADCh < 14) {
   \   0000001E   E00E               LDI     R16, 14
   \   00000020   1640               CP      R4, R16
   \   00000022   F4B0               BRCC    ??CrossCallReturnLabel_26
    666                      TData.RS4.TargetSetup1[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer];
   \   00000024   01DB               MOVW    R27:R26, R23:R22
   \   00000026   0FA8               ADD     R26, R24
   \   00000028   1FB9               ADC     R27, R25
   \   0000002A   5BAC               SUBI    R26, 188
   \   0000002C   4FBF               SBCI    R27, 255
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   8130               LD      R19, Z
   \   00000032   ....               LDI     R30, LOW((TData + 59))
   \   00000034   ....               LDI     R31, HIGH((TData + 59))
   \   00000036   2455               CLR     R5
   \   00000038   0DE4               ADD     R30, R4
   \   0000003A   1DF5               ADC     R31, R5
   \   0000003C   ....               RCALL   ?Subroutine69
   \                     ??CrossCallReturnLabel_209:
   \   0000003E   ....               RCALL   ?Subroutine31
    667                      TData.RS4.TargetSetup2[(ch * 4) + PortPair][ADCh] = UART16552[ch].pRxBuffer[pointer + 1];
   \                     ??CrossCallReturnLabel_25:
   \   00000040   01FD               MOVW    R31:R30, R27:R26
   \   00000042   8131               LDD     R19, Z+1
   \   00000044   ....               LDI     R30, LOW((TData + 171))
   \   00000046   ....               LDI     R31, HIGH((TData + 171))
   \   00000048   0DE4               ADD     R30, R4
   \   0000004A   1FF5               ADC     R31, R21
   \   0000004C   ....               RCALL   ?Subroutine119
    668                  }
   \                     ??CrossCallReturnLabel_176:
   \   0000004E   ....               RCALL   ?Subroutine31
    669                  pointer += 2;
   \                     ??CrossCallReturnLabel_26:
   \   00000050   9602               ADIW    R25:R24, 2
    670              }
   \   00000052   952A               DEC     R18
   \   00000054   F701               BRNE    ??CrossCallReturnLabel_275
    671          }
   \   00000056   E0E6               LDI     R30, 6
   \   00000058   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   ....               RCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_292:
   \   00000002   8330               ST      Z, R19
   \   00000004   9508               RET
    672          
    673          /*************************************************************************
    674          *
    675          *  Receive eeprom data from AN_SGCNV
    676          *
    677          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    678          void ReceiveCardEEPROMData(char ch, unsigned short pointer) {
   \                     ReceiveCardEEPROMData:
   \   00000000   ....               RCALL   ?Subroutine36
    679          
    680              short i;
    681          
    682              TData.RS4.FromTargetBuffer[ch][0] = true;
   \                     ??CrossCallReturnLabel_30:
   \   00000002   ....               RCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_120:
   \   00000004   ....               LDI     R18, LOW(TData)
   \   00000006   2E22               MOV     R2, R18
   \   00000008   ....               LDI     R18, (TData) >> 8
   \   0000000A   0E20               ADD     R2, R16
   \   0000000C   1F21               ADC     R18, R17
   \   0000000E   2E32               MOV     R3, R18
   \   00000010   2DE2               MOV     R30, R2
   \   00000012   2FF2               MOV     R31, R18
   \   00000014   ....               RCALL   ?Subroutine75
    683              TData.RS4.FromTargetBuffer[ch][1] = (ch * 4) + PortPair;
   \                     ??CrossCallReturnLabel_265:
   \   00000016   2F06               MOV     R16, R22
   \   00000018   0F00               LSL     R16
   \   0000001A   0F00               LSL     R16
   \   0000001C   9110....           LDS     R17, PortPair
   \   00000020   0F01               ADD     R16, R17
   \   00000022   8301               STD     Z+1, R16
    684              for (i = 2; i < (41 + 2); i++) {
   \   00000024   E0A2               LDI     R26, 2
   \   00000026   E0B0               LDI     R27, 0
   \   00000028   E229               LDI     R18, 41
   \   0000002A   E048               LDI     R20, 8
   \   0000002C   E051               LDI     R21, 1
    685                  TData.RS4.FromTargetBuffer[ch][i] = UART16552[ch].pRxBuffer[pointer++];
   \                     ??ReceiveCardEEPROMData_0:
   \   0000002E   ....               LDI     R30, LOW((UART16552 + 68))
   \   00000030   ....               LDI     R31, HIGH((UART16552 + 68))
   \   00000032   ....               RCALL   ??Subroutine137_0
    686              }
   \                     ??CrossCallReturnLabel_228:
   \   00000034   2F06               MOV     R16, R22
   \   00000036   ....               RCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_16:
   \   00000038   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_284:
   \   0000003A   8100               LD      R16, Z
   \   0000003C   01F1               MOVW    R31:R30, R3:R2
   \   0000003E   0FEA               ADD     R30, R26
   \   00000040   1FFB               ADC     R31, R27
   \   00000042   56EC               SUBI    R30, 108
   \   00000044   4FFA               SBCI    R31, 250
   \   00000046   8300               ST      Z, R16
   \   00000048   9601               ADIW    R25:R24, 1
   \   0000004A   9611               ADIW    R27:R26, 1
   \   0000004C   952A               DEC     R18
   \   0000004E   F779               BRNE    ??ReceiveCardEEPROMData_0
    687          }
   \   00000050   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   E010               LDI     R17, 0
   \   00000002   ....               RJMP    ?Subroutine130
    688          
    689          /*************************************************************************
    690          *
    691          * Build send packet header for AN-SGCNV
    692          *
    693          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    694          void Uart_BuildHeader16552(char ch) {
   \                     Uart_BuildHeader16552:
   \   00000000   019D               MOVW    R19:R18, R27:R26
    695          
    696              UART16552[ch].RxFirst = 0;                                // Reset pointers
   \   00000002   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_298:
   \   00000004   ....               LDI     R30, LOW(UART16552)
   \   00000006   ....               LDI     R31, (UART16552) >> 8
   \   00000008   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_283:
   \   0000000A   01DF               MOVW    R27:R26, R31:R30
   \   0000000C   54A4               SUBI    R26, 68
   \   0000000E   4FBF               SBCI    R27, 255
   \   00000010   E000               LDI     R16, 0
   \   00000012   E010               LDI     R17, 0
   \   00000014   ....               RCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_39:
   \   00000016   9611               ADIW    R27:R26, 1
    697              UART16552[ch].RxLast = 0;
   \   00000018   ....               RCALL   ?Subroutine44
    698              UART16552[ch].TxLast = 0;
   \                     ??CrossCallReturnLabel_40:
   \   0000001A   01DF               MOVW    R27:R26, R31:R30
   \   0000001C   96DE               ADIW    R27:R26, 62
   \   0000001E   ....               RCALL   ?Subroutine44
    699          
    700              UART16552[ch].pTxBuffer[0] = ANPRO1_SYN;                        /* Sync */
   \                     ??CrossCallReturnLabel_41:
   \   00000020   E002               LDI     R16, 2
   \   00000022   ....               RCALL   ??Subroutine136_0
    701              UART16552[ch].pTxBuffer[1] = ANPRO1_SYN;                        /* Sync */
    702              UART16552[ch].pTxBuffer[2] = 0;                          /* Rx address */
   \                     ??CrossCallReturnLabel_223:
   \   00000024   8312               STD     Z+2, R17
    703              UART16552[ch].pTxBuffer[3] = MY_SGCNV_ADDR;              /* My address to AD-SGCNV */
   \   00000026   EF0D               LDI     R16, 253
   \   00000028   8303               STD     Z+3, R16
    704              UART16552[ch].pTxBuffer[4] = 0;                          /* packlen HB, don't know yet */
   \   0000002A   8314               STD     Z+4, R17
    705              UART16552[ch].pTxBuffer[5] = 0;                          /* packlen LB, don't know yet */
   \   0000002C   8315               STD     Z+5, R17
    706          }
   \   0000002E   01D9               MOVW    R27:R26, R19:R18
   \   00000030   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine136_0:
   \   00000000   8300               ST      Z, R16
   \   00000002   8301               STD     Z+1, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   930D               ST      X+, R16
   \   00000002   930C               ST      X, R16
   \   00000004   9508               RET
    707          
    708          /*************************************************************************
    709          *
    710          * Build  packet tail
    711          *
    712          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine115:
   \   00000000   E000               LDI     R16, 0
   \   00000002                      REQUIRE ??Subroutine135_0
   \   00000002                      ;               // Fall through to label ??Subroutine135_0

   \                                 In  segment CODE, align 2, keep-with-next
    713          void Uart_BuildTail16552(char ch) {
   \                     Uart_BuildTail16552:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_105:
   \   00000002   2F70               MOV     R23, R16
    714          
    715              Uart_BuildHeader16552(ch);                                // fist build the header
   \   00000004   ....               RCALL   Uart_BuildHeader16552
    716          
    717              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;         // command, No more data
   \   00000006   2F07               MOV     R16, R23
   \   00000008   ....               RCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_188:
   \   0000000A   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_251:
   \   0000000C   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_27:
   \   0000000E   8350               ST      Z, R21
    718              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;         // error
   \   00000010   ....               RCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_252:
   \   00000012   ....               RCALL   ?Subroutine32
    719          
    720              UART16552[ch].pTxBuffer[4] = (UART16552[ch].TxFirst) >> 8;           // packet len high
   \                     ??CrossCallReturnLabel_186:
   \   00000014   96FC               ADIW    R31:R30, 60
   \   00000016   8101               LDD     R16, Z+1
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8304               STD     Z+4, R16
    721              UART16552[ch].pTxBuffer[5] = UART16552[ch].TxFirst;                // correct length because stx's
   \   0000001C   AD04               LDD     R16, Z+60
   \   0000001E   8305               STD     Z+5, R16
    722          
    723          
    724              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst] = CalcDSTxChecksumUART16552(ch, UART16552[ch].TxFirst); // Get checksum
   \   00000020   AD84               LDD     R24, Z+60
   \   00000022   AD95               LDD     R25, Z+61
   \   00000024   019C               MOVW    R19:R18, R25:R24
   \   00000026   2F07               MOV     R16, R23
   \   00000028   ....               RCALL   CalcDSTxChecksumUART16552
   \   0000002A   ....               RCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_229:
   \   0000002C   ....               RCALL   ?Subroutine8
    725              UART16552[ch].TxFirst++;                                     // OBS!! must be inc here due
   \                     ??CrossCallReturnLabel_7:
   \   0000002E   ....               RCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_61:
   \   00000030   AF04               STD     Z+60, R16
   \   00000032   AF15               STD     Z+61, R17
    726                                                                           // to ANSI standard !!!!
    727          
    728              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANPRO1_EOT;            // End of transmission
   \   00000034   AD04               LDD     R16, Z+60
   \   00000036   ....               RCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_28:
   \   00000038   E003               LDI     R16, 3
   \   0000003A   ....               RCALL   ?Subroutine8
    729              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0x00;            //switch off transmitter delay
   \                     ??CrossCallReturnLabel_6:
   \   0000003C   ....               RCALL   ?Subroutine32
    730          
    731              UART16552[ch].TxCount = UART16552[ch].TxFirst - 1;       //bytes to send (-1 for the start byte)
   \                     ??CrossCallReturnLabel_187:
   \   0000003E   AD84               LDD     R24, Z+60
   \   00000040   AD95               LDD     R25, Z+61
   \   00000042   9701               SBIW    R25:R24, 1
   \   00000044   5CE0               SUBI    R30, 192
   \   00000046   4FFF               SBCI    R31, 255
   \   00000048   8380               ST      Z, R24
   \   0000004A   8391               STD     Z+1, R25
    732              UART16552[ch].TxLast = 1;                               // sent 1 byte
   \   0000004C   96DE               ADIW    R27:R26, 62
   \   0000004E   ....               RCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_202:
   \   00000050   930D               ST      X+, R16
   \   00000052   931C               ST      X, R17
    733              GoToSendUART16552(ch);                                 // go to sync modus for recive
   \   00000054   2F07               MOV     R16, R23
   \   00000056   ....               RCALL   GoToSendUART16552
    734              if (ch == 0) {                                           // Turn on TXE for channel
   \   00000058   2377               TST     R23
   \   0000005A   F439               BRNE    ??Uart_BuildTail16552_0
    735                  //OS_RetriggerTimer(&TimerUART0);                    // and start timeout timer
    736                  U0_MCR |= RTS;                                    // set RTS on
   \   0000005C   E0EC               LDI     R30, LOW(8716)
   \   0000005E   ....               RCALL   ?Subroutine2
    737                  OS_Delay(20);                                           // Wait (ms) for tx stable
    738                  U0_THR = UART16552[ch].pTxBuffer[0];                // Send 1. byte
   \                     ??CrossCallReturnLabel_216:
   \   00000060   9100....           LDS     R16, UART16552
   \   00000064   93002208           STS     8712, R16
   \   00000068   C008               RJMP    ??Uart_BuildTail16552_1
    739              } else if (ch == 1) {
   \                     ??Uart_BuildTail16552_0:
   \   0000006A   3071               CPI     R23, 1
   \   0000006C   F431               BRNE    ??Uart_BuildTail16552_1
    740                  //OS_RetriggerTimer(&TimerUART1);                    // and start timeout timer
    741                  U1_MCR |= RTS;                                      // set RTS on
   \   0000006E   E0E4               LDI     R30, LOW(8708)
   \   00000070   ....               RCALL   ?Subroutine2
    742                  OS_Delay(20);                                           // Wait (ms) for tx stable
    743                  U1_THR = UART16552[ch].pTxBuffer[0];                  // Send 1. byte
   \                     ??CrossCallReturnLabel_215:
   \   00000072   9100....           LDS     R16, (UART16552 + 264)
   \   00000076   93002200           STS     8704, R16
    744              }
    745          }
   \                     ??Uart_BuildTail16552_1:
   \   0000007A   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_232:
   \   00000002   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_266:
   \   00000004                      REQUIRE ?Subroutine120
   \   00000004                      ;               // Fall through to label ?Subroutine120

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine85:
   \   00000000   01C8               MOVW    R25:R24, R17:R16
   \   00000002                      REQUIRE ??Subroutine138_0
   \   00000002                      ;               // Fall through to label ??Subroutine138_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine138_0:
   \   00000000   9601               ADIW    R25:R24, 1
   \   00000002   AF84               STD     Z+60, R24
   \   00000004   AF95               STD     Z+61, R25
   \   00000006   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   8300               ST      Z, R16
   \   00000002                      REQUIRE ?Subroutine112
   \   00000002                      ;               // Fall through to label ?Subroutine112

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002                      REQUIRE ??Subroutine139_0
   \   00000002                      ;               // Fall through to label ??Subroutine139_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine139_0:
   \   00000000   AD04               LDD     R16, Z+60
   \   00000002   AD15               LDD     R17, Z+61
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   E2F2               LDI     R31, (8716) >> 8
   \   00000002   8100               LD      R16, Z
   \   00000004   6002               ORI     R16, 0x02
   \   00000006   8300               ST      Z, R16
   \   00000008   E104               LDI     R16, 20
   \   0000000A   E010               LDI     R17, 0
   \   0000000C                      REQUIRE ?Subroutine127
   \   0000000C                      ;               // Fall through to label ?Subroutine127

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine89:
   \   00000000   0FE0               ADD     R30, R16
   \   00000002   1FF1               ADC     R31, R17
   \   00000004   ....               RJMP    ?Subroutine115

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   ....               RCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_233:
   \   00000002   ....               RJMP    ?Subroutine118
    746          
    747          /*************************************************************************
    748          *
    749          * Build send request for system status on WIS
    750          *
    751          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine140_0:
   \   00000000   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_249:
   \   00000002   ....               RCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_267:
   \   00000004                      REQUIRE ?Subroutine121
   \   00000004                      ;               // Fall through to label ?Subroutine121

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine121:
   \   00000000   E0E4               LDI     R30, 4
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine126:
   \   00000000   930C               ST      X, R16
   \   00000002   ....               RCALL   ??Subroutine140_0
   \                     ??CrossCallReturnLabel_236:
   \   00000004                      REQUIRE ??Subroutine141_0
   \   00000004                      ;               // Fall through to label ??Subroutine141_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_112:
   \   00000002                      REQUIRE ??Subroutine142_0
   \   00000002                      ;               // Fall through to label ??Subroutine142_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine142_0:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_307:
   \   00000002   ....               LDI     R30, LOW(UART16552)
   \   00000004   ....               LDI     R31, (UART16552) >> 8
   \   00000006   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_290:
   \   00000008   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_250:
   \   0000000A   01DF               MOVW    R27:R26, R31:R30
   \   0000000C   ....               RJMP    ??Subroutine150_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine108:
   \   00000000   ....               RCALL   ??Subroutine139_0
   \                     ??CrossCallReturnLabel_253:
   \   00000002   01C8               MOVW    R25:R24, R17:R16
   \   00000004   9601               ADIW    R25:R24, 1
   \   00000006   01DF               MOVW    R27:R26, R31:R30
   \   00000008   96DC               ADIW    R27:R26, 60
   \   0000000A   938D               ST      X+, R24
   \   0000000C   939C               ST      X, R25
   \   0000000E   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
    752          void Uart_BuildReqWISCardStatus(char ch) {
   \                     Uart_BuildReqWISCardStatus:
   \   00000000   ....               RCALL   ?Subroutine10
    753          
    754              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_STAT;       /*command, send data */
   \                     ??CrossCallReturnLabel_237:
   \   00000002   E604               LDI     R16, 100
   \   00000004   ....               RJMP    ?Subroutine126
    755              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    756          
    757          }
    758          
    759          /*************************************************************************
    760          *
    761          * Build send request for WIS protocoler on WIS
    762          *
    763          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine134:
   \   00000000   ....               RCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_234:
   \   00000002   ....               RJMP    ??Subroutine141_0

   \                                 In  segment CODE, align 2, keep-with-next
    764          void Uart_BuildReqWISXData(char ch, char sndcmd) {
   \                     Uart_BuildReqWISXData:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_108:
   \   00000002   2F21               MOV     R18, R17
    765          
    766              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_XDATA;       /*command, send data */
   \   00000004   ....               RCALL   ??Subroutine142_0
   \                     ??CrossCallReturnLabel_247:
   \   00000006   E606               LDI     R16, 102
   \   00000008   ....               RCALL   ?Subroutine43
    767              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    768              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = sndcmd;                 // xdata cmd
   \                     ??CrossCallReturnLabel_37:
   \   0000000A   ....               RJMP    ?Subroutine134
    769          
    770          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_222:
   \   00000002                      REQUIRE ?Subroutine108
   \   00000002                      ;               // Fall through to label ?Subroutine108

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   930C               ST      X, R16
   \   00000002   ....               RCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_248:
   \   00000004   01DF               MOVW    R27:R26, R31:R30
   \   00000006   0FA0               ADD     R26, R16
   \   00000008   1FB1               ADC     R27, R17
   \   0000000A   935C               ST      X, R21
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_289:
   \   00000002   8320               ST      Z, R18
   \   00000004   ....               RJMP    ?Subroutine121
    771          
    772          /*************************************************************************
    773          *
    774          * Build send request for measure data to Water ingress
    775          *
    776          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   ....               RCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_221:
   \   00000002                      REQUIRE ?Subroutine121
   \   00000002                      REQUIRE ??Subroutine140_0
   \   00000002                      ;               // Fall through to label ??Subroutine140_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine133:
   \   00000000   ....               RCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_235:
   \   00000002   ....               RJMP    ??Subroutine141_0

   \                                 In  segment CODE, align 2, keep-with-next
    777          void Uart_BuildReqWISData(char ch) {
   \                     Uart_BuildReqWISData:
   \   00000000   ....               RCALL   ?Subroutine10
    778          
    779              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_WIS_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_238:
   \   00000002   E605               LDI     R16, 101
   \   00000004   ....               RJMP    ?Subroutine133
    780              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    781              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    782          
    783          }
    784          
    785          
    786          /*************************************************************************
    787          *
    788          * Build send request for GODA measurement
    789          *
    790          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    791          void Uart_BuildReqRadarData(char ch) {
   \                     Uart_BuildReqRadarData:
   \   00000000   ....               RCALL   ?Subroutine10
    792          
    793              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_239:
   \   00000002   EA00               LDI     R16, 160
   \   00000004   ....               RJMP    ?Subroutine133
    794              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                        /*nob */
    795              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 // data
    796          
    797          }
    798          
    799          /*************************************************************************
    800          *
    801          * Build send request for GODA device information
    802          *
    803          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    804          void Uart_BuildReqRadarInfo(char ch) {
   \                     Uart_BuildReqRadarInfo:
   \   00000000   ....               RCALL   ?Subroutine10
    805          
    806              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_SND_GODA_INFO;       /*command, send data */
   \                     ??CrossCallReturnLabel_240:
   \   00000002   EA01               LDI     R16, 161
   \   00000004   ....               RJMP    ?Subroutine126
    807              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                        /*nob */
    808          }
    809          
    810          /*************************************************************************
    811          *
    812          * Build datablock to AN-SGCNV
    813          *
    814          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    815          void Uart_BuildSndData(char ch) {
   \                     Uart_BuildSndData:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_107:
   \   00000002   2F30               MOV     R19, R16
    816          
    817              char i;
    818          
    819              for (i = 3; i < (TData.RS4.ToTargetBuffer[ch][2]) + 3; i++) {
   \   00000004   E023               LDI     R18, 3
   \   00000006   E010               LDI     R17, 0
   \   00000008   E540               LDI     R20, 80
   \   0000000A   ....               RCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_118:
   \   0000000C   ....               LDI     R22, LOW(TData)
   \   0000000E   ....               LDI     R23, (TData) >> 8
   \   00000010   0F60               ADD     R22, R16
   \   00000012   1F71               ADC     R23, R17
   \   00000014   01DB               MOVW    R27:R26, R23:R22
   \   00000016   50AC               SUBI    R26, 12
   \   00000018   4FBB               SBCI    R27, 251
   \   0000001A   2F03               MOV     R16, R19
   \   0000001C   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_320:
   \   0000001E   C010               RJMP    ??Uart_BuildSndData_0
    820                  UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.ToTargetBuffer[ch][i];       /*command, send data */
   \                     ??Uart_BuildSndData_1:
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   AD44               LDD     R20, Z+60
   \   00000024   AD55               LDD     R21, Z+61
   \   00000026   01CA               MOVW    R25:R24, R21:R20
   \   00000028   ....               RCALL   ??Subroutine138_0
    821              }
   \                     ??CrossCallReturnLabel_231:
   \   0000002A   01FB               MOVW    R31:R30, R23:R22
   \   0000002C   0FE2               ADD     R30, R18
   \   0000002E   1FF3               ADC     R31, R19
   \   00000030   50EC               SUBI    R30, 12
   \   00000032   4FFB               SBCI    R31, 251
   \   00000034   8130               LD      R19, Z
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   0FE4               ADD     R30, R20
   \   0000003A   1FF5               ADC     R31, R21
   \   0000003C   8330               ST      Z, R19
   \   0000003E   9523               INC     R18
   \                     ??Uart_BuildSndData_0:
   \   00000040   E030               LDI     R19, 0
   \   00000042   01FD               MOVW    R31:R30, R27:R26
   \   00000044   81E2               LDD     R30, Z+2
   \   00000046   E0F0               LDI     R31, 0
   \   00000048   9633               ADIW    R31:R30, 3
   \   0000004A   172E               CP      R18, R30
   \   0000004C   073F               CPC     R19, R31
   \   0000004E   F344               BRLT    ??Uart_BuildSndData_1
    822              TData.RS4.ToTargetBuffer[ch][0] = false;            // data sent
   \   00000050   933C               ST      X, R19
    823          }
   \   00000052   ....               RJMP    ?Subroutine132

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_304:
   \   00000002   01A8               MOVW    R21:R20, R17:R16
   \   00000004   ....               LDI     R16, LOW(UART16552)
   \   00000006   ....               LDI     R17, (UART16552) >> 8
   \   00000008                      REQUIRE ?Subroutine101
   \   00000008                      ;               // Fall through to label ?Subroutine101
    824          
    825          /*************************************************************************
    826          *
    827          * Build send request for measure data to AN-SGCNV
    828          *
    829          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    830          void Uart_BuildReqM16552(char ch) {
   \                     Uart_BuildReqM16552:
   \   00000000   ....               RCALL   ?Subroutine10
    831          
    832              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_M_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_245:
   \   00000002   E00A               LDI     R16, 10
   \   00000004   ....               RJMP    ?Subroutine133
    833              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    834              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    835          
    836          }
    837          
    838          /*************************************************************************
    839          *
    840          * Build send request for raw data to AN-SGCNV
    841          *
    842          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    843          void Uart_BuildReqR16552(char ch) {
   \                     Uart_BuildReqR16552:
   \   00000000   ....               RCALL   ?Subroutine10
    844          
    845              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_R_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_243:
   \   00000002   E00D               LDI     R16, 13
   \   00000004   ....               RJMP    ?Subroutine133
    846              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    847              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    848          
    849          }
    850          
    851          /*************************************************************************
    852          *
    853          * Build send request for cal data to AN-SGCNV
    854          *
    855          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    856          void Uart_BuildReqC16552(char ch) {
   \                     Uart_BuildReqC16552:
   \   00000000   ....               RCALL   ?Subroutine10
    857          
    858              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_C_DATA;       /*command, send data */
   \                     ??CrossCallReturnLabel_244:
   \   00000002   E100               LDI     R16, 16
   \   00000004   ....               RJMP    ?Subroutine133
    859              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    860              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    861          
    862          }
    863          
    864          /*************************************************************************
    865          *
    866          * Build send request for system status on AN_SGCNV
    867          *
    868          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    869          void Uart_BuildReqCardStatus(char ch) {
   \                     Uart_BuildReqCardStatus:
   \   00000000   ....               RCALL   ?Subroutine10
    870          
    871              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CARD_STAT;       /*command, send data */
   \                     ??CrossCallReturnLabel_242:
   \   00000002   E10B               LDI     R16, 27
   \   00000004                      REQUIRE ?Subroutine133
   \   00000004                      ;               // Fall through to label ?Subroutine133
    872              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    873              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*data */
    874          
    875          }
    876          
    877          /*************************************************************************
    878          *
    879          * Build send request for card config on AN_SGCNV
    880          *
    881          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    882          void Uart_BuildReqConfig(char ch) {
   \                     Uart_BuildReqConfig:
   \   00000000   ....               RCALL   ?Subroutine10
    883          
    884              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_CONFIG;       /*command, send data */
   \                     ??CrossCallReturnLabel_241:
   \   00000002   E101               LDI     R16, 17
   \   00000004   ....               RJMP    ?Subroutine126
    885              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 0;                 /*nob */
    886          
    887          }
    888          
    889          /*************************************************************************
    890          *
    891          * Build send request for EEPROM data on AN_SGCNV
    892          *
    893          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    894          void Uart_BuildReqEEPROMData(char ch) {
   \                     Uart_BuildReqEEPROMData:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_106:
   \   00000002   2F20               MOV     R18, R16
    895          
    896              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = ANP1_REQ_EEP_DATA;       /*command, send data */
   \   00000004   ....               RCALL   ??Subroutine142_0
   \                     ??CrossCallReturnLabel_246:
   \   00000006   E108               LDI     R16, 24
   \   00000008   ....               RCALL   ?Subroutine43
    897              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = 1;                 /*nob */
    898              UART16552[ch].pTxBuffer[UART16552[ch].TxFirst++] = TData.RS4.EEPROMADChannel[ch];       /*data */
   \                     ??CrossCallReturnLabel_38:
   \   0000000A   E0B0               LDI     R27, 0
   \   0000000C   ....               SUBI    R18, LOW((-(TData + 1528) & 0xFFFF))
   \   0000000E   2FA2               MOV     R26, R18
   \   00000010   ....               SBCI    R27, HIGH((-(TData + 1528) & 0xFFFF))
   \   00000012   912C               LD      R18, X
   \   00000014                      REQUIRE ?Subroutine134
   \   00000014                      ;               // Fall through to label ?Subroutine134
    899          
    900          }
    901          /*************************************************************************
    902          *
    903          *  Receive data on USARTs
    904          *
    905          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    906          void ReceivePacketUart16552(char ch) {
   \                     ReceivePacketUart16552:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    907          
    908              switch (UART16552[ch].RxState) {                  // check status
   \   00000006   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_302:
   \   00000008   0198               MOVW    R19:R18, R17:R16
   \   0000000A   ....               LDI     R16, LOW(UART16552)
   \   0000000C   ....               LDI     R17, (UART16552) >> 8
   \   0000000E   0F02               ADD     R16, R18
   \   00000010   1F13               ADC     R17, R19
   \   00000012   01D8               MOVW    R27:R26, R17:R16
   \   00000014   54A2               SUBI    R26, 66
   \   00000016   4FBF               SBCI    R27, 255
   \   00000018   01C8               MOVW    R25:R24, R17:R16
   \   0000001A   5B8C               SUBI    R24, 188
   \   0000001C   4F9F               SBCI    R25, 255
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8124               LDD     R18, Z+4
   \   00000022   2322               TST     R18
   \   00000024   F409               BRNE    $+2+2
   \   00000026   C05A               RJMP    ??CrossCallReturnLabel_88
   \   00000028   952A               DEC     R18
   \   0000002A   F031               BREQ    ??ReceivePacketUart16552_0
   \   0000002C   952A               DEC     R18
   \   0000002E   F139               BREQ    ??ReceivePacketUart16552_1
   \   00000030   5028               SUBI    R18, 8
   \   00000032   F409               BRNE    $+2+2
   \   00000034   C053               RJMP    ??CrossCallReturnLabel_88
   \   00000036   C051               RJMP    ??ReceivePacketUart16552_2
    909              case SYNC :
    910                  // all functionallity in inerrupt routine
    911                  break;
    912              case HEADER :
    913                  if (UART16552[ch].RxLast >= 3) {             // receive header
   \                     ??ReceivePacketUart16552_0:
   \   00000038   91ED               LD      R30, X+
   \   0000003A   91FC               LD      R31, X
   \   0000003C   9711               SBIW    R27:R26, 1
   \   0000003E   9733               SBIW    R31:R30, 3
   \   00000040   F408               BRCC    $+2+2
   \   00000042   C04C               RJMP    ??CrossCallReturnLabel_88
    914                      UART16552[ch].RxPacklen = ((UART16552[ch].pRxBuffer[2] * 256) +
    915                                                 UART16552[ch].pRxBuffer[3]);    // Find length of package
   \   00000044   01FC               MOVW    R31:R30, R25:R24
   \   00000046   8132               LDD     R19, Z+2
   \   00000048   8103               LDD     R16, Z+3
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8700               STD     Z+8, R16
   \   00000050   8731               STD     Z+9, R19
    916                      if ((UART16552[ch].RxPacklen < ((short)RXSIZE_UART_16552 - UART16552[ch].RxLast)) &&    /* chk. header */
    917                          (UART16552[ch].RxPacklen >= MIN_PACK_LEN)) {
   \   00000052   8520               LDD     R18, Z+8
   \   00000054   8531               LDD     R19, Z+9
   \   00000056   E708               LDI     R16, 120
   \   00000058   8140               LD      R20, Z
   \   0000005A   8151               LDD     R21, Z+1
   \   0000005C   1B04               SUB     R16, R20
   \   0000005E   0B15               SBC     R17, R21
   \   00000060   1720               CP      R18, R16
   \   00000062   0731               CPC     R19, R17
   \   00000064   F5D0               BRCC    ??ReceivePacketUart16552_2
   \   00000066   8580               LDD     R24, Z+8
   \   00000068   8591               LDD     R25, Z+9
   \   0000006A   9707               SBIW    R25:R24, 7
   \   0000006C   F1B0               BRCS    ??ReceivePacketUart16552_2
    918                          UART16552[ch].RxState = RECEIVE;       // Header ok og to data receive state
   \   0000006E   E002               LDI     R16, 2
   \   00000070   8304               STD     Z+4, R16
    919                          UART16552[ch].RxCount = UART16552[ch].RxLast + 1;    // Set receivcounter
   \   00000072   8180               LD      R24, Z
   \   00000074   8191               LDD     R25, Z+1
   \   00000076   9601               ADIW    R25:R24, 1
   \   00000078   8382               STD     Z+2, R24
   \   0000007A   8393               STD     Z+3, R25
   \   0000007C   C02F               RJMP    ??CrossCallReturnLabel_88
    920                      } else {
    921                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    922                      }
    923                  }
    924                  break;
    925              case RECEIVE :
    926                  if (++UART16552[ch].RxCount >= UART16552[ch].RxPacklen) {
   \                     ??ReceivePacketUart16552_1:
   \   0000007E   8122               LDD     R18, Z+2
   \   00000080   8133               LDD     R19, Z+3
   \   00000082   5F2F               SUBI    R18, 255
   \   00000084   4F3F               SBCI    R19, 255
   \   00000086   8322               STD     Z+2, R18
   \   00000088   8333               STD     Z+3, R19
   \   0000008A   8540               LDD     R20, Z+8
   \   0000008C   8551               LDD     R21, Z+9
   \   0000008E   1724               CP      R18, R20
   \   00000090   0735               CPC     R19, R21
   \   00000092   F120               BRCS    ??CrossCallReturnLabel_88
    927                      if ((UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 1]) == ANPRO1_EOT) {
   \   00000094   8520               LDD     R18, Z+8
   \   00000096   8531               LDD     R19, Z+9
   \   00000098   0F02               ADD     R16, R18
   \   0000009A   1F13               ADC     R17, R19
   \   0000009C   5B0D               SUBI    R16, 189
   \   0000009E   4F1F               SBCI    R17, 255
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   8100               LD      R16, Z
   \   000000A4   3003               CPI     R16, 3
   \   000000A6   F4C9               BRNE    ??ReceivePacketUart16552_2
    928                          if (CalcDSRxChecksum16552(ch)) {
   \   000000A8   2D04               MOV     R16, R4
   \   000000AA   ....               RCALL   CalcDSRxChecksum16552
   \   000000AC   2B01               OR      R16, R17
   \   000000AE   F0A9               BREQ    ??ReceivePacketUart16552_2
    929                              if (UART16552[ch].pRxBuffer[0] == MY_SGCNV_ADDR) {     // reply from AN_SGCNV
   \   000000B0   01FC               MOVW    R31:R30, R25:R24
   \   000000B2   8100               LD      R16, Z
   \   000000B4   3F0D               CPI     R16, 253
   \   000000B6   F489               BRNE    ??ReceivePacketUart16552_2
    930                                  UART16552[ch].RxState = HANDLE;                   // Package OK
   \   000000B8   01FD               MOVW    R31:R30, R27:R26
   \   000000BA   E00A               LDI     R16, 10
   \   000000BC   8304               STD     Z+4, R16
    931                                  if (ch == 0) {
   \   000000BE   2044               TST     R4
   \   000000C0   F421               BRNE    ??ReceivePacketUart16552_3
    932                                      OS_SignalEvent(1, &TCB_RS485Rec);
   \   000000C2   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000C4   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000C6   E001               LDI     R16, 1
   \   000000C8   C006               RJMP    ??ReceivePacketUart16552_4
    933                                  } else if (ch == 1) {
   \                     ??ReceivePacketUart16552_3:
   \   000000CA   E001               LDI     R16, 1
   \   000000CC   1640               CP      R4, R16
   \   000000CE   F431               BRNE    ??CrossCallReturnLabel_88
    934                                      OS_SignalEvent(2, &TCB_RS485Rec);
   \   000000D0   ....               LDI     R18, LOW(TCB_RS485Rec)
   \   000000D2   ....               LDI     R19, (TCB_RS485Rec) >> 8
   \   000000D4   E002               LDI     R16, 2
    935                                  }
    936                              } else {
    937                                  GoToSyncUART16552(ch);                             // go to sync modus for recive
    938                              }
    939                          } else {
    940                              GoToSyncUART16552(ch);                                // go to sync modus for recive
    941                          }
    942                      } else {
    943                          GoToSyncUART16552(ch);                                    // go to sync modus for recive
    944                      }
    945                  }
   \                     ??ReceivePacketUart16552_4:
   \   000000D6   ....               RCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_135:
   \   000000D8   C001               RJMP    ??CrossCallReturnLabel_88
    946                  break;
    947              case HANDLE :
    948                  break;
    949              default :
    950                  GoToSyncUART16552(ch);                                            // go to sync modus for recive
   \                     ??ReceivePacketUart16552_2:
   \   000000DA   ....               RCALL   ?Subroutine72
    951                  break;
    952              }                                                           // end switch
    953              if (++UART16552[ch].RxLast >= RXSIZE_UART_16552) {                     // check pointer
   \                     ??CrossCallReturnLabel_88:
   \   000000DC   91ED               LD      R30, X+
   \   000000DE   91FC               LD      R31, X
   \   000000E0   9711               SBIW    R27:R26, 1
   \   000000E2   9631               ADIW    R31:R30, 1
   \   000000E4   93ED               ST      X+, R30
   \   000000E6   93FC               ST      X, R31
   \   000000E8   9711               SBIW    R27:R26, 1
   \   000000EA   37E8               CPI     R30, 120
   \   000000EC   E000               LDI     R16, 0
   \   000000EE   40F0               SBCI    R31, 0
   \   000000F0   F008               BRCS    ??CrossCallReturnLabel_42
    954                  UART16552[ch].RxLast = 0;                                     // reset pointer
   \   000000F2   ....               RCALL   ?Subroutine44
    955              }
    956          }
   \                     ??CrossCallReturnLabel_42:
   \   000000F4   E0E5               LDI     R30, 5
   \   000000F6   ........           JMP     ?EPILOGUE_B5_L09
    957          
    958          
    959          /*************************************************************************
    960          *
    961          * Calculate tx checksum for Dallas Semiconductor one-wire CRC
    962          *
    963          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    964          char CalcDSTxChecksumUART16552(char ch, unsigned short len) {
   \                     CalcDSTxChecksumUART16552:
   \   00000000   ....               RCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_104:
   \   00000002   2E20               MOV     R2, R16
   \   00000004   2FB3               MOV     R27, R19
    965          
    966              unsigned short cnt;
    967              unsigned char csum;
    968          
    969              csum = 0;
   \   00000006   E060               LDI     R22, 0
    970              for (cnt = 2; cnt < len; cnt++) {
   \   00000008   E082               LDI     R24, 2
   \   0000000A   E090               LDI     R25, 0
   \   0000000C   E048               LDI     R20, 8
   \   0000000E   E051               LDI     R21, 1
   \   00000010   ....               LDI     R19, (crc) >> 16
   \   00000012   C00D               RJMP    ??CalcDSTxChecksumUART16552_0
    971                  csum = crc[csum ^ UART16552[ch].pTxBuffer[cnt]];
   \                     ??CalcDSTxChecksumUART16552_1:
   \   00000014   2D02               MOV     R16, R2
   \   00000016   ....               RCALL   ?Subroutine24
    972              }
   \                     ??CrossCallReturnLabel_15:
   \   00000018   ....               LDI     R30, LOW(UART16552)
   \   0000001A   ....               LDI     R31, (UART16552) >> 8
   \   0000001C   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_282:
   \   0000001E   ....               RCALL   ??Subroutine137_0
   \                     ??CrossCallReturnLabel_227:
   \   00000020   8100               LD      R16, Z
   \   00000022   2760               EOR     R22, R16
   \   00000024   2FE6               MOV     R30, R22
   \   00000026   ........           CALL    ?Subroutine42
   \                     ??CrossCallReturnLabel_35:
   \   0000002A   9166               ELPM    R22, Z
   \   0000002C   9601               ADIW    R25:R24, 1
   \                     ??CalcDSTxChecksumUART16552_0:
   \   0000002E   1782               CP      R24, R18
   \   00000030   079B               CPC     R25, R27
   \   00000032   F380               BRCS    ??CalcDSTxChecksumUART16552_1
    973              return csum;
   \   00000034   2F06               MOV     R16, R22
   \   00000036   ....               RJMP    ?Subroutine132
    974          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine42:
   \   00000000   E0F0               LDI     R31, 0
   \   00000002   ....               SUBI    R30, LOW((-(crc) & 0xFFFFFF))
   \   00000004   ....               SBCI    R31, HIGH((-(crc) & 0xFFFFFF))
   \   00000006   BF3B               OUT     0x3B, R19
   \   00000008   9508               RET
    975          
    976          /*************************************************************************
    977          *
    978          * Calculate rx checksum for Dallas Semiconductor one-wire CRC
    979          *
    980          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    981          short CalcDSRxChecksum16552(char ch) {
   \                     CalcDSRxChecksum16552:
   \   00000000   ....               RCALL   ?Subroutine91
    982          
    983              short cnt;
    984              unsigned char csum;
    985          
    986              csum = 0;
   \                     ??CrossCallReturnLabel_111:
   \   00000002   E020               LDI     R18, 0
    987              for (cnt = 0; cnt < (UART16552[ch].RxPacklen - 2); cnt++) {
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
   \   00000008   ....               RCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_321:
   \   0000000A   01D8               MOVW    R27:R26, R17:R16
   \   0000000C   53AA               SUBI    R26, 58
   \   0000000E   4FBF               SBCI    R27, 255
   \   00000010   ....               LDI     R19, (crc) >> 16
   \   00000012   C009               RJMP    ??CalcDSRxChecksum16552_0
    988                  csum = crc[csum ^ UART16552[ch].pRxBuffer[cnt]];
   \                     ??CalcDSRxChecksum16552_1:
   \   00000014   2F42               MOV     R20, R18
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               RCALL   ?Subroutine38
    989              }
   \                     ??CrossCallReturnLabel_145:
   \   0000001A   8120               LD      R18, Z
   \   0000001C   2742               EOR     R20, R18
   \   0000001E   2FE4               MOV     R30, R20
   \   00000020   ....               RCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_36:
   \   00000022   9126               ELPM    R18, Z
   \   00000024   9601               ADIW    R25:R24, 1
   \                     ??CalcDSRxChecksum16552_0:
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   8140               LD      R20, Z
   \   0000002A   8151               LDD     R21, Z+1
   \   0000002C   5042               SUBI    R20, 2
   \   0000002E   4050               SBCI    R21, 0
   \   00000030   1784               CP      R24, R20
   \   00000032   0795               CPC     R25, R21
   \   00000034   F378               BRCS    ??CalcDSRxChecksum16552_1
    990              if (csum == UART16552[ch].pRxBuffer[UART16552[ch].RxPacklen - 2]) {
   \   00000036   8140               LD      R20, Z
   \   00000038   8151               LDD     R21, Z+1
   \   0000003A   ....               RCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_319:
   \   0000003C   5B0E               SUBI    R16, 190
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   01F8               MOVW    R31:R30, R17:R16
   \   00000042   8100               LD      R16, Z
   \   00000044   1720               CP      R18, R16
   \   00000046   F411               BRNE    ??CalcDSRxChecksum16552_2
    991                  return true;
   \   00000048   E001               LDI     R16, 1
   \   0000004A   C001               RJMP    ??CalcDSRxChecksum16552_3
    992              } else {
    993                  return false;
   \                     ??CalcDSRxChecksum16552_2:
   \   0000004C   E000               LDI     R16, 0
   \                     ??CalcDSRxChecksum16552_3:
   \   0000004E   E010               LDI     R17, 0
    994              }
   \   00000050   ....               RJMP    ?Subroutine132
    995          }
    996          
    997          /*************************************************************************
    998          *
    999          * Goes to send mode
   1000          *
   1001          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1002          void GoToSendUART16552(char ch) {
   \                     GoToSendUART16552:
   1003              UART16552[ch].SyncCnt   = 0;                        // ready for sync
   \   00000000   ....               LDI     R30, LOW((UART16552 + 188))
   \   00000002   ....               LDI     R31, HIGH((UART16552 + 188))
   \   00000004   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_297:
   \   00000006   ....               RCALL   ?Subroutine118
   \                     ??CrossCallReturnLabel_281:
   \   00000008   E000               LDI     R16, 0
   \   0000000A   8307               STD     Z+7, R16
   1004              UART16552[ch].RxState   = SEND;
   \   0000000C   E003               LDI     R16, 3
   \   0000000E   8306               STD     Z+6, R16
   1005              UART16552[ch].RxFirst   = 0;
   \   00000010   E000               LDI     R16, 0
   \   00000012   ....               RCALL   ??Subroutine136_0
   1006              UART16552[ch].RxPacklen = 0;
   \                     ??CrossCallReturnLabel_224:
   \   00000014   8702               STD     Z+10, R16
   \   00000016   8703               STD     Z+11, R16
   1007          }
   \   00000018   9508               RET
   1008          /*************************************************************************
   1009          *
   1010          * Goes to sync mode
   1011          *
   1012          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1013          void GoToSyncUART16552(char ch) {
   \                     GoToSyncUART16552:
   1014          
   1015              UART16552[ch].RxState = SYNC;
   \   00000000   ....               RCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_299:
   \   00000002   01F8               MOVW    R31:R30, R17:R16
   \   00000004   ....               SUBI    R30, LOW((-(UART16552 + 194) & 0xFFFF))
   \   00000006   ....               SBCI    R31, HIGH((-(UART16552 + 194) & 0xFFFF))
   \   00000008   ....               RJMP    ?Subroutine115
   1016          }
   1017          
   1018          /*************************************************************************
   1019          *
   1020          *  Empty rx buffer on PC16552 UART
   1021          *
   1022          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   1023          void EmptyRxBuf16552(char uartno) {
   \                     EmptyRxBuf16552:
   1024          
   1025              switch (uartno) {
   \   00000000   2300               TST     R16
   \   00000002   F019               BREQ    ??EmptyRxBuf16552_0
   \   00000004   950A               DEC     R16
   \   00000006   F041               BREQ    ??EmptyRxBuf16552_1
   \   00000008   9508               RET
   1026              case 0:
   1027                  do {
   1028                      U0_RBR;
   \                     ??EmptyRxBuf16552_0:
   \   0000000A   91002208           LDS     R16, 8712
   1029                  } while (U0_LSR & DATA_READY);
   \   0000000E   9100220D           LDS     R16, 8717
   \   00000012   FD00               SBRC    R16, 0
   \   00000014   CFFA               RJMP    ??EmptyRxBuf16552_0
   \   00000016   9508               RET
   1030                  break;
   1031              case 1:
   1032                  do {
   1033                      U1_RBR;
   \                     ??EmptyRxBuf16552_1:
   \   00000018   91002200           LDS     R16, 8704
   1034                  } while (U1_LSR & DATA_READY);
   \   0000001C   91002205           LDS     R16, 8709
   \   00000020   FD00               SBRC    R16, 0
   \   00000022   CFFA               RJMP    ??EmptyRxBuf16552_1
   1035                  break;
   1036              }
   1037          }
   \   00000024   9508               RET
   1038          
   1039          /*************************************************************************
   1040          *
   1041          *  Init the PC16552 UART
   1042          *
   1043          *************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   4FFF               SBCI    R31, 255
   \   00000002                      REQUIRE ??Subroutine136_0
   \   00000002                      ;               // Fall through to label ??Subroutine136_0

   \                                 In  segment CODE, align 2, keep-with-next
   1044          void Init16552(char channel, unsigned long baud) {
   \                     Init16552:
   \   00000000   ....               RCALL   ?Subroutine57
   \                     ??CrossCallReturnLabel_69:
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002   2E60               MOV     R6, R16
   \   00000004   01CA               MOVW    R25:R24, R21:R20
   \   00000006   01DB               MOVW    R27:R26, R23:R22
   1045              OS_CREATEMB(&UART16552[channel].RxMailBox, 1, MBUF_SIZE, &UART16552[channel].RxMailBoxBuf);
   \   00000008   ....               RCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_102:
   \   0000000A   2E42               MOV     R4, R18
   \   0000000C   ....               LDI     R18, (UART16552) >> 8
   \   0000000E   0E40               ADD     R4, R16
   \   00000010   1F21               ADC     R18, R17
   \   00000012   2E52               MOV     R5, R18
   \   00000014   01B2               MOVW    R23:R22, R5:R4
   \   00000016   5365               SUBI    R22, 53
   \   00000018   4F7F               SBCI    R23, 255
   \   0000001A   E342               LDI     R20, 50
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   E021               LDI     R18, 1
   \   00000020   0182               MOVW    R17:R16, R5:R4
   \   00000022   5003               SUBI    R16, 3
   \   00000024   4F1F               SBCI    R17, 255
   \   00000026   ........           CALL    OS_CreateMB
   1046              /*--- Configure UART data block ---*/
   1047              UART16552[channel].TxFirst = 0x00;
   \   0000002A   01F2               MOVW    R31:R30, R5:R4
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   E010               LDI     R17, 0
   \   00000030   AF04               STD     Z+60, R16
   \   00000032   96FC               ADIW    R31:R30, 60
   \   00000034   8301               STD     Z+1, R16
   1048              UART16552[channel].TxLast = 0x00;
   \   00000036   01F2               MOVW    R31:R30, R5:R4
   \   00000038   AF06               STD     Z+62, R16
   \   0000003A   AF07               STD     Z+63, R16
   1049              UART16552[channel].TxCount = 0x00;
   \   0000003C   5CE0               SUBI    R30, 192
   \   0000003E   ....               RCALL   ?Subroutine7
   1050              UART16552[channel].RxFirst = 0x00;
   \                     ??CrossCallReturnLabel_225:
   \   00000040   01F2               MOVW    R31:R30, R5:R4
   \   00000042   54E4               SUBI    R30, 68
   \   00000044   ....               RCALL   ?Subroutine7
   1051              UART16552[channel].RxLast = 0x00;
   \                     ??CrossCallReturnLabel_226:
   \   00000046   8302               STD     Z+2, R16
   \   00000048   8303               STD     Z+3, R16
   1052              UART16552[channel].RxCount = 0x00;
   \   0000004A   8304               STD     Z+4, R16
   \   0000004C   8305               STD     Z+5, R16
   1053              UART16552[channel].RxState = SEND;  // Must send a message before receiving anything
   \   0000004E   E003               LDI     R16, 3
   \   00000050   8306               STD     Z+6, R16
   1054              UART16552[channel].SyncCnt = 0;
   \   00000052   8317               STD     Z+7, R17
   1055              UART16552[channel].TxStatus = 0x00;
   \   00000054   E402               LDI     R16, 66
   \   00000056   0E40               ADD     R4, R16
   \   00000058   1E51               ADC     R5, R17
   \   0000005A   01F2               MOVW    R31:R30, R5:R4
   \   0000005C   8310               ST      Z, R17
   1056          
   1057              switch (channel) {
   \   0000005E   2066               TST     R6
   \   00000060   F019               BREQ    ??Init16552_0
   \   00000062   946A               DEC     R6
   \   00000064   F0E9               BREQ    ??Init16552_1
   \   00000066   C037               RJMP    ??Init16552_2
   1058              case 0x00 :
   1059                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_0:
   \   00000068   ....               LDI     R30, LOW((UART16552 + 196))
   \   0000006A   ....               LDI     R31, HIGH((UART16552 + 196))
   \   0000006C   EF0A               LDI     R16, 250
   \   0000006E   ....               RCALL   ??Subroutine143_0
   1060                  U0_LCR = 0x80;          // set DLAB
   \                     ??CrossCallReturnLabel_254:
   \   00000070   E800               LDI     R16, 128
   \   00000072   9300220B           STS     8715, R16
   1061                  U0_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   00000076   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_67:
   \   00000078   93002208           STS     8712, R16
   1062                  U0_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   0000007C   93102209           STS     8713, R17
   1063                  U0_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   00000080   E003               LDI     R16, 3
   \   00000082   9300220B           STS     8715, R16
   1064                  U0_FCR = 0x01;          // enable FIFO ..
   \   00000086   E001               LDI     R16, 1
   \   00000088   9300220A           STS     8714, R16
   1065                  U0_FCR = 0xC1;          // and set RXLevel to 14
   \   0000008C   EC01               LDI     R16, 193
   \   0000008E   9300220A           STS     8714, R16
   1066                  U0_IER = 0x03;          // enable TX and RX int.
   \   00000092   E003               LDI     R16, 3
   \   00000094   93002209           STS     8713, R16
   1067                  U0_MCR = 0x00;          // RTS off
   \   00000098   E000               LDI     R16, 0
   \   0000009A   9300220C           STS     8716, R16
   1068                  break;
   \   0000009E   C01B               RJMP    ??Init16552_2
   1069              case 0x01 :
   1070                  UART16552[channel].RxTimeout = RX_TO_TIME;   // reset timeout
   \                     ??Init16552_1:
   \   000000A0   ....               LDI     R30, LOW((UART16552 + 460))
   \   000000A2   ....               LDI     R31, HIGH((UART16552 + 460))
   \   000000A4   EF0A               LDI     R16, 250
   \   000000A6   ....               RCALL   ??Subroutine143_0
   1071                  U1_LCR = 0x80;          // set DLAB
   \                     ??CrossCallReturnLabel_255:
   \   000000A8   E800               LDI     R16, 128
   \   000000AA   93002203           STS     8707, R16
   1072                  U1_DLL = ((XTAL_CPU / 8 / 16 / baud) & 0xff);
   \   000000AE   ....               RCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_68:
   \   000000B0   93002200           STS     8704, R16
   1073                  U1_DLM = (((XTAL_CPU / 8 / 16 / baud) >> 8) & 0xff);
   \   000000B4   93102201           STS     8705, R17
   1074                  U1_LCR = 0x03;          // reset DLAB and set 8,n,1
   \   000000B8   E003               LDI     R16, 3
   \   000000BA   93002203           STS     8707, R16
   1075                  U1_FCR = 0x01;          // enable FIFO ..
   \   000000BE   E001               LDI     R16, 1
   \   000000C0   93002202           STS     8706, R16
   1076                  U1_FCR = 0xC1;          // and set RXLevel to 14
   \   000000C4   EC01               LDI     R16, 193
   \   000000C6   93002202           STS     8706, R16
   1077                  U1_IER = 0x03;          // enable TX and RX int.
   \   000000CA   E003               LDI     R16, 3
   \   000000CC   93002201           STS     8705, R16
   1078                  U1_MCR = 0x00;          // RTS off
   \   000000D0   E000               LDI     R16, 0
   \   000000D2   93002204           STS     8708, R16
   1079                  break;
   1080              default:
   1081                  break;
   1082              }
   1083          }
   \                     ??Init16552_2:
   \   000000D6   ....               RJMP    ?Subroutine128

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   E408               LDI     R16, 72
   \   00000002   EE18               LDI     R17, 232
   \   00000004   E021               LDI     R18, 1
   \   00000006   E030               LDI     R19, 0
   \   00000008   01AC               MOVW    R21:R20, R25:R24
   \   0000000A   01BD               MOVW    R23:R22, R27:R26
   \   0000000C   ........           JMP     ?UL_DIVMOD_L03

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for CheckActionUart16552>_0`:
   \   00000000   00                 DB      0
   \   00000001   01                 DB      1
   \   00000002   ....               DW      (??CheckActionUart16552_1) /2
   \   00000004   ....               DW      (??CheckActionUart16552_13) /2
   \   00000006   01                 DB      0x1
   \   00000007   ....               DW      (??CheckActionUart16552_13) /2
   \   00000009   1D                 DB      0x1d
   \   0000000A   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000C   01                 DB      0x1
   \   0000000D   ....               DW      (??CheckActionUart16552_0) /2
   \   0000000F   01                 DB      0x1
   \   00000010   ....               DW      (??CheckActionUart16552_0) /2
   \   00000012   01                 DB      0x1
   \   00000013   ....               DW      (??CheckActionUart16552_3) /2
   \   00000015   01                 DB      0x1
   \   00000016   ....               DW      (??CheckActionUart16552_3) /2
   \   00000018   01                 DB      0x1
   \   00000019   ....               DW      (??CheckActionUart16552_3) /2
   \   0000001B   01                 DB      0x1
   \   0000001C   ....               DW      (??CheckActionUart16552_4) /2
   \   0000001E   01                 DB      0x1
   \   0000001F   ....               DW      (??CheckActionUart16552_6) /2
   \   00000021   07                 DB      0x7
   \   00000022   ....               DW      (??CheckActionUart16552_7) /2
   \   00000024   03                 DB      0x3
   \   00000025   ....               DW      (??CheckActionUart16552_5) /2
   \   00000027   02                 DB      0x2
   \   00000028   ....               DW      (??CheckActionUart16552_2) /2
   \   0000002A   4D                 DB      0x4d
   \   0000002B   ....               DW      (??CheckActionUart16552_8) /2
   \   0000002D   01                 DB      0x1
   \   0000002E   ....               DW      (??CheckActionUart16552_10) /2
   \   00000030   01                 DB      0x1
   \   00000031   ....               DW      (??CheckActionUart16552_9) /2
   \   00000033   34                 DB      0x34
   \   00000034   ....               DW      (??CheckActionUart16552_11) /2
   \   00000036   01                 DB      0x1
   \   00000037   ....               DW      (??CheckActionUart16552_12) /2
   \   00000039   FB                 DB      251
   1084          
   1085          #if USE_MODBUS_PROTOCOL == 1
   1086          static unsigned short  Rsp_Delay[2];       // response delay
   1087          
   1088          static void
   1089          load_eeprom_misc_485(void) {
   1090              char ch;
   1091              uint16_t temp;
   1092          
   1093              for (ch = 0; ch < 2; ch++) {
   1094                  ReadEEPROMBuffer(EEPROM_PORTSETUP + 3 + ch * 2, sizeof(uint16_t), (char *)&temp);
   1095          
   1096                  if (temp > 0 && temp <= 5000) {
   1097                      Rsp_Delay[ch] = temp;
   1098                  } else {
   1099                      Rsp_Delay[ch] = 0;
   1100                  }
   1101              }
   1102          }
   1103          
   1104          static void
   1105          __rs485_task_set_power(uint8_t ch, uint8_t on) {
   1106              uint8_t current;
   1107          
   1108              current = (TData.RS4.PortUsed >> ch) & 0x01;
   1109          
   1110              if (current == on) {
   1111                  // no need to waste time
   1112                  return;
   1113              }
   1114          
   1115              if (on) {
   1116                  TData.RS4.PortUsed |= (1 << ch);
   1117              } else {
   1118                  TData.RS4.PortUsed &= ~(1 << ch);
   1119              }
   1120              PORTC = TData.RS4.PortUsed;
   1121          
   1122              WriteEEPROMByte(EEPROM_PORTSETUP, TData.RS4.PortUsed);
   1123          }
   1124          
   1125          void
   1126          rs485_task_set_power(uint8_t ch, uint8_t on) {
   1127              OS_Use(&UARTSEND);
   1128              __rs485_task_set_power(ch, on);
   1129              OS_Unuse(&UARTSEND);
   1130          }
   1131          
   1132          uint8_t
   1133          rs485_task_get_power(uint8_t ch) {
   1134              uint8_t status;
   1135          
   1136              OS_Use(&UARTSEND);
   1137              status = (TData.RS4.PortUsed >> ch) & 0x01;
   1138              OS_Unuse(&UARTSEND);
   1139          
   1140              return status;
   1141          }
   1142          
   1143          uint8_t
   1144          rs485_task_get_sensor_type(uint8_t ch) {
   1145              uint8_t sensor_type;
   1146          
   1147              OS_Use(&UARTSEND);
   1148              sensor_type = (TData.RS4.SensorType[ch / 4] >> (2 * (ch % 4))) & 0x03;
   1149              OS_Unuse(&UARTSEND);
   1150          
   1151              return sensor_type;
   1152          }
   1153          
   1154          void
   1155          rs485_task_set_sensor_type(uint8_t ch, uint8_t sensor_type) {
   1156              OS_Use(&UARTSEND);
   1157          
   1158              // clear first
   1159              TData.RS4.SensorType[ch / 4] &= ~(0x03 << ((ch % 4) * 2));
   1160          
   1161              // set
   1162              TData.RS4.SensorType[ch / 4] |= ((sensor_type & 0x03) << ((ch % 4) * 2));
   1163          
   1164              WriteEEPROMByte(EEPROM_PORTSETUP + 1, TData.RS4.SensorType[0]);
   1165              WriteEEPROMByte(EEPROM_PORTSETUP + 2, TData.RS4.SensorType[1]);
   1166          
   1167              OS_Unuse(&UARTSEND);
   1168          }
   1169          
   1170          static void
   1171          __rs485_task_set_rsp_delay(uint8_t port, uint16_t delay) {
   1172              uint16_t cur_delay = Rsp_Delay[port];
   1173          
   1174              if (cur_delay == delay) {
   1175                  return;
   1176              }
   1177          
   1178              if (delay > 5000) {
   1179                  return;
   1180              }
   1181          
   1182              Rsp_Delay[port] = delay;
   1183          
   1184              WriteEEPROMBufferSync(EEPROM_PORTSETUP + 3 + port * 2, sizeof(uint16_t), (char *)&delay);
   1185          }
   1186          
   1187          void
   1188          rs485_task_set_rsp_delay(uint8_t port, uint16_t delay) {
   1189              OS_Use(&UARTSEND);
   1190              __rs485_task_set_rsp_delay(port, delay);
   1191              OS_Unuse(&UARTSEND);
   1192          }
   1193          
   1194          uint16_t
   1195          rs485_task_get_rsp_delay(uint8_t port) {
   1196              uint16_t    ret;
   1197          
   1198              OS_Use(&UARTSEND);
   1199              ret = Rsp_Delay[port];
   1200              OS_Unuse(&UARTSEND);
   1201          
   1202              return ret;
   1203          }
   1204          
   1205          uint8_t
   1206          rs485_task_get_comm_status(uint8_t port) {
   1207              uint16_t    ret;
   1208          
   1209              // XXX no need for lock
   1210              ret = (TData.RS4.IOUnitStatus[port] & COMFAIL_BIT) ? 0 : 1;
   1211          
   1212              return ret;
   1213          }
   1214          
   1215          uint8_t
   1216          rs485_task_get_channel_status(uint8_t port, uint8_t ch) {
   1217              uint8_t ret;
   1218          
   1219              OS_Use(&UARTSEND);
   1220              ret = (uint8_t)TData.RS4.TargetSetup1[port][ch];
   1221              OS_Unuse(&UARTSEND);
   1222          
   1223              return ret;
   1224          }
   1225          
   1226          int16_t
   1227          rs485_task_get_channel_value(uint8_t port, uint8_t ch) {
   1228              float f;
   1229              int16_t  ret;
   1230          
   1231              OS_Use(&UARTSEND);
   1232              f = TData.RS4.Result[port][ch];
   1233              OS_Unuse(&UARTSEND);
   1234          
   1235              ret = (int16_t)(f * 100);
   1236              return ret;
   1237          }
   1238          
   1239          int16_t
   1240          rs485_task_get_channel_raw_value(uint8_t port, uint8_t ch) {
   1241              int16_t ret;
   1242          
   1243              OS_Use(&UARTSEND);
   1244              ret = TData.RS4.Raw[port][ch];
   1245              OS_Unuse(&UARTSEND);
   1246          
   1247              return ret;
   1248          }
   1249          
   1250          int16_t
   1251          rs485_task_get_channel_cal_value(uint8_t port, uint8_t ch) {
   1252              int16_t ret;
   1253          
   1254              OS_Use(&UARTSEND);
   1255              ret = TData.RS4.Cal[port][ch];
   1256              OS_Unuse(&UARTSEND);
   1257          
   1258              return ret;
   1259          }
   1260          #endif /* USE_MODBUS_PROTOCOL == 1 */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   CalcDSRxChecksum16552
        4      4 ?S_EC_MUL_L02
      4      2   CalcDSTxChecksumUART16552
        4      2 ?S_EC_MUL_L02
      4      2   CheckActionUart16552
        4      2   -> ReceiveCData
        4      2   -> ReceiveCardEEPROMData
        4      2   -> ReceiveCardStatus
        4      2   -> ReceiveConfigData
        4      2   -> ReceivePTOData
        4      2   -> ReceiveRData
        4      2   -> ReceiveRadarData
        4      2   -> ReceiveRadarInfo
        4      2   -> ReceiveWHData
        4      2   -> ReceiveWISData
        4      2   -> ReceiveWISStatus
        4      2   -> ReceiveWISXData
        4      2 ?CV_SWITCH_L06
        4      6 ?S_EC_MUL_L02
      0      2   EmptyRxBuf16552
      8      2   ExtRS485Ctl
        8      2   -> EmptyRxBuf16552
        8      2   -> Init16552
        8      2   -> OS_Delay
        8      2   -> OS_SignalEvent
        8      2   -> OS_WaitEventTimed
        8      2   -> ReadEEPROMByte
        8      2   -> Uart_BuildReqC16552
        8      2   -> Uart_BuildReqCardStatus
        8      2   -> Uart_BuildReqConfig
        8      2   -> Uart_BuildReqEEPROMData
        8      2   -> Uart_BuildReqM16552
        8      2   -> Uart_BuildReqR16552
        8      2   -> Uart_BuildReqRadarData
        8      2   -> Uart_BuildReqRadarInfo
        8      2   -> Uart_BuildReqWISCardStatus
        8      2   -> Uart_BuildReqWISData
        8      2   -> Uart_BuildReqWISXData
        8      2   -> Uart_BuildSndData
        8      2   -> Uart_BuildTail16552
        8      4 ?SS_SHR_L02
        8      2 ?S_SHL_L02
      4      2   ExtRS485Rec
        4      2   -> OS_Delay
        4      2   -> OS_SignalEvent
        4      2   -> OS_WaitEventTimed
        4      4   -> Usart16552CheckPackage
        4      4 ?SS_SHR_L02
        4      4 ?S_SHL_L02
      0      2   GoToSendUART16552
        0      2 ?S_EC_MUL_L02
      0      2   GoToSyncUART16552
        0      2 ?S_EC_MUL_L02
      7      2   Init16552
        7      2   -> OS_CreateMB
        7      4 ?S_EC_MUL_L02
        7      2 ?UL_DIVMOD_L03
      7      2   ReceiveCData
        7      6 ?S_EC_MUL_L02
      4      2   ReceiveCardEEPROMData
        4      2 ?S_EC_MUL_L02
      0      2   ReceiveCardStatus
        0      6 ?S_EC_MUL_L02
      6      2   ReceiveConfigData
        6      2 ?S_EC_MUL_L02
        6      6 ?S_EC_MUL_L02
     12      2   ReceivePTOData
       12      2   -> OS_Unuse
       12      2   -> OS_Use
       12      2 ?S_EC_MUL_L02
       12      4 ?S_EC_MUL_L02
       12      6 ?S_EC_MUL_L02
      5      2   ReceivePacketUart16552
        5      2   -> CalcDSRxChecksum16552
        5      2   -> GoToSyncUART16552
        5      2   -> OS_SignalEvent
        5      2 ?S_EC_MUL_L02
      7      2   ReceiveRData
        7      6 ?S_EC_MUL_L02
      8      2   ReceiveRadarData
        8      4 ?S_EC_MUL_L02
        8      6 ?S_EC_MUL_L02
      0      2   ReceiveRadarInfo
        0      6 ?S_EC_MUL_L02
     10      2   ReceiveWHData
       10      2   -> OS_Unuse
       10      2   -> OS_Use
       10      4 ?S_EC_MUL_L02
       10      2 ?S_SHL_L02
      8      2   ReceiveWISData
        8      2 ?F_DIV_L04
        8      2 ?SL2F_L04
        8      4 ?S_EC_MUL_L02
        8      6 ?S_EC_MUL_L02
        8      2 ?UL2F_L04
      1      2   ReceiveWISStatus
        1      6 ?S_EC_MUL_L02
      4      2   ReceiveWISXData
        4      2 ?S_EC_MUL_L02
        4      4 ?S_EC_MUL_L02
      0      2   SetRS4Port
      0      2   TimoutUART0
      0      2   TimoutUART1
      0      2   Uart_BuildHeader16552
        0      2 ?S_EC_MUL_L02
      4      2   Uart_BuildReqC16552
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqCardStatus
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqConfig
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqEEPROMData
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqM16552
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqR16552
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqRadarData
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqRadarInfo
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqWISCardStatus
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqWISData
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildReqWISXData
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildSndData
        4      2 ?S_EC_MUL_L02
        4      4 ?S_EC_MUL_L02
      4      2   Uart_BuildTail16552
        4      2   -> CalcDSTxChecksumUART16552
        4      2   -> GoToSendUART16552
        4      2   -> OS_Delay
        4      2   -> Uart_BuildHeader16552
        4      4 ?S_EC_MUL_L02
      7      2   Usart16552CheckPackage
        7      2   -> CheckActionUart16552
        7      2   -> GoToSyncUART16552
        7      2 ?S_EC_MUL_L02


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      58  ?<Jumptable for CheckActionUart16552>_0
       4  ??Subroutine135_0
       6  ??Subroutine136_0
       6  ??Subroutine137_0
       8  ??Subroutine138_0
       6  ??Subroutine139_0
       4  ??Subroutine140_0
       4  ??Subroutine141_0
      14  ??Subroutine142_0
       6  ??Subroutine143_0
       6  ??Subroutine144_0
       4  ??Subroutine145_0
       6  ??Subroutine146_0
       8  ??Subroutine147_0
       8  ??Subroutine148_0
       2  ??Subroutine149_0
       6  ??Subroutine150_0
       6  ??Subroutine151_0
       4  ?Subroutine0
       2  ?Subroutine1
       2  ?Subroutine10
       4  ?Subroutine100
       6  ?Subroutine101
       6  ?Subroutine102
       4  ?Subroutine103
      10  ?Subroutine104
      10  ?Subroutine105
       6  ?Subroutine106
       2  ?Subroutine107
      16  ?Subroutine108
      28  ?Subroutine11
       8  ?Subroutine110
       2  ?Subroutine111
       2  ?Subroutine112
       6  ?Subroutine113
       8  ?Subroutine114
       2  ?Subroutine115
       6  ?Subroutine116
       6  ?Subroutine117
       6  ?Subroutine118
       6  ?Subroutine119
       6  ?Subroutine12
       4  ?Subroutine120
       4  ?Subroutine121
       4  ?Subroutine122
       4  ?Subroutine123
       4  ?Subroutine124
       4  ?Subroutine125
       4  ?Subroutine126
       4  ?Subroutine127
       6  ?Subroutine128
       2  ?Subroutine129
       8  ?Subroutine13
       4  ?Subroutine130
       6  ?Subroutine131
       4  ?Subroutine132
       4  ?Subroutine133
       4  ?Subroutine134
      16  ?Subroutine14
       8  ?Subroutine15
      14  ?Subroutine16
       2  ?Subroutine17
       6  ?Subroutine18
      12  ?Subroutine2
       6  ?Subroutine20
       6  ?Subroutine21
       2  ?Subroutine22
       4  ?Subroutine23
       4  ?Subroutine24
      14  ?Subroutine25
       6  ?Subroutine26
       8  ?Subroutine27
      26  ?Subroutine28
      12  ?Subroutine29
       2  ?Subroutine3
       8  ?Subroutine30
       6  ?Subroutine31
       4  ?Subroutine32
       6  ?Subroutine33
       4  ?Subroutine34
       4  ?Subroutine35
       8  ?Subroutine36
       4  ?Subroutine38
       6  ?Subroutine39
      14  ?Subroutine4
       6  ?Subroutine40
       2  ?Subroutine41
      10  ?Subroutine42
       2  ?Subroutine43
       6  ?Subroutine44
       6  ?Subroutine45
       4  ?Subroutine46
       6  ?Subroutine47
       6  ?Subroutine48
       4  ?Subroutine49
      14  ?Subroutine5
       6  ?Subroutine51
       2  ?Subroutine52
       4  ?Subroutine53
      26  ?Subroutine54
      16  ?Subroutine55
      18  ?Subroutine56
       4  ?Subroutine57
       2  ?Subroutine58
       4  ?Subroutine59
       8  ?Subroutine6
       4  ?Subroutine61
      10  ?Subroutine62
       4  ?Subroutine63
       6  ?Subroutine64
       6  ?Subroutine65
       2  ?Subroutine67
      10  ?Subroutine68
       4  ?Subroutine69
       2  ?Subroutine7
       6  ?Subroutine71
       4  ?Subroutine72
       6  ?Subroutine73
       8  ?Subroutine75
       8  ?Subroutine76
       8  ?Subroutine77
      10  ?Subroutine78
       6  ?Subroutine79
       2  ?Subroutine8
      14  ?Subroutine80
       8  ?Subroutine82
       6  ?Subroutine83
       2  ?Subroutine85
       2  ?Subroutine86
       2  ?Subroutine87
       4  ?Subroutine88
       6  ?Subroutine89
       4  ?Subroutine9
       8  ?Subroutine90
       4  ?Subroutine91
       6  ?Subroutine92
       4  ?Subroutine93
       8  ?Subroutine94
       6  ?Subroutine95
       8  ?Subroutine96
       4  ?Subroutine97
       6  ?Subroutine99
      82  CalcDSRxChecksum16552
      56  CalcDSTxChecksumUART16552
     106  CheckActionUart16552
      38  EmptyRxBuf16552
     802  ExtRS485Ctl
     222  ExtRS485Rec
      26  GoToSendUART16552
      10  GoToSyncUART16552
     216  Init16552
      30  ReceiveCData
      82  ReceiveCardEEPROMData
      42  ReceiveCardStatus
      92  ReceiveConfigData
     144  ReceivePTOData
     250  ReceivePacketUart16552
      32  ReceiveRData
      64  ReceiveRadarData
      26  ReceiveRadarInfo
     248  ReceiveWHData
      74  ReceiveWISData
      76  ReceiveWISStatus
      76  ReceiveWISXData
       8  SetRS4Port
       4  TimoutUART0
       2  TimoutUART1
      50  Uart_BuildHeader16552
       6  Uart_BuildReqC16552
       4  Uart_BuildReqCardStatus
       6  Uart_BuildReqConfig
      20  Uart_BuildReqEEPROMData
       6  Uart_BuildReqM16552
       6  Uart_BuildReqR16552
       6  Uart_BuildReqRadarData
       6  Uart_BuildReqRadarInfo
       6  Uart_BuildReqWISCardStatus
       6  Uart_BuildReqWISData
      12  Uart_BuildReqWISXData
      84  Uart_BuildSndData
     124  Uart_BuildTail16552
      80  Usart16552CheckPackage
       1  _A_PORTC
       1  _A_PORTE

 
     2 bytes in segment ABSOLUTE
 4 138 bytes in segment CODE
    58 bytes in segment SWITCH
 
 4 196 bytes of CODE memory
     0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
